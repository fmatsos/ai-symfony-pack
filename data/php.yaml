category: PHP

questions:
  -
    question: |
      Which of the following is a valid way to define a class with constructor property promotion in PHP 8.2?

      ```php
      // Option A
      class UserA
      {
          public function __construct(public string $name, private int $age) {}
      }

      // Option B
      class UserB
      {
          public string $name;
          private int $age;

          public function __construct(string $name, int $age)
          {
              $this->name = $name;
              $this->age = $age;
          }
      }

      // Option C
      class UserC
      {
          public function __construct(string $name, int $age)
          {
              public $this->name = $name;
              private $this->age = $age;
          }
      }

      // Option D
      class UserD
      {
          public string $name;
          private int $age;

          public function __construct(public string $name, private int $age) {}
      }
      ```
    answers:
      - { value: 'Option A', correct: true }
      - { value: 'Option B', correct: false }
      - { value: 'Option C', correct: false }
      - { value: 'Option D', correct: false }
    help: |
      Constructor property promotion allows defining and initializing class properties directly in the constructor's signature, reducing boilerplate code. This feature was introduced in PHP 8.0.
      https://www.php.net/manual/en/language.oop5.decon.php#language.oop5.decon.constructor.promotion

  -
    question: >
      What is the primary purpose of namespaces in PHP?
    answers:
      - { value: 'To organize classes, interfaces, functions, and constants, preventing name collisions.', correct: true }
      - { value: 'To define global variables that can be accessed anywhere in the application.', correct: false }
      - { value: 'To manage database connections more efficiently.', correct: false }
      - { value: 'To improve the performance of script execution.', correct: false }
    help: |
      Namespaces are a way of encapsulating items. They provide a way to group related code and avoid name collisions between different libraries or parts of an application.
      https://www.php.net/manual/en/language.namespaces.php

  -
    question: >
      Which of the following statements about PHP interfaces is true?
    answers:
      - { value: 'An interface can define constants, but not properties.', correct: true }
      - { value: 'An interface can contain concrete method implementations.', correct: false }
      - { value: 'A class can implement only one interface.', correct: false }
      - { value: 'Interfaces are primarily used for defining data structures.', correct: false }
    help: |
      Interfaces define a contract for classes. They can declare methods and constants, but cannot contain properties or method bodies. A class can implement multiple interfaces.
      https://www.php.net/manual/en/language.oop5.interfaces.php

  -
    question: |
      Given the following PHP code using traits, what will be the output?

      ```php
      <?php
      trait TraitA {
          public function sayHello() {
              echo "Hello from TraitA!";
          }
      }

      trait TraitB {
          public function sayHello() {
              echo "Hello from TraitB!";
          }
      }

      class MyClass {
          use TraitA, TraitB {
              TraitA::sayHello insteadof TraitB;
              TraitB::sayHello as sayGoodbye;
          }
      }

      $obj = new MyClass();
      $obj->sayHello();
      $obj->sayGoodbye();
      ?>
      ```
    answers:
      - { value: 'Hello from TraitA!Hello from TraitB!', correct: true }
      - { value: 'Hello from TraitA!Hello from TraitA!', correct: false }
      - { value: 'Hello from TraitB!Hello from TraitA!', correct: false }
      - { value: 'A fatal error due to method conflict.', correct: false }
    help: |
      When multiple traits used by a class define the same method, a conflict occurs. The `insteadof` operator is used to resolve this by explicitly choosing which trait's method to use. The `as` operator can be used to alias a method from a trait.
      https://www.php.net/manual/en/language.oop5.traits.php#language.oop5.traits.conflict

  -
    question: >
      In PHP's exception handling, when is the code within a `finally` block guaranteed to execute?
    answers:
      - { value: 'Always, regardless of whether an exception was thrown or caught.', correct: true }
      - { value: 'Only if an exception was thrown and caught by a `catch` block.', correct: false }
      - { value: 'Only if no exception was thrown in the `try` block.', correct: false }
    help: |
      The `finally` block is executed after the `try` block and `catch` blocks, regardless of whether an exception was thrown or not, and even if a `return` statement is encountered in the `try` or `catch` blocks.
      https://www.php.net/manual/en/language.exceptions.php#language.exceptions.finally