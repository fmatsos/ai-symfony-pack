category: PHP
questions:
  -
    question: 'Which of the following are valid ways to declare a class in PHP 8.2?'
    answers:
      - { value: 'class MyClass {}', correct: true }
      - { value: 'public class MyClass {}', correct: false }
      - { value: 'abstract class MyClass {}', correct: true }
      - { value: 'final class MyClass {}', correct: true }
      - { value: 'interface MyClass {}', correct: false }
    help: |
      'In PHP, classes are declared using the `class` keyword. `abstract` and `final` are modifiers that can be applied to classes. `public` is an access modifier for properties and methods, not for the class itself. `interface` declares an interface, not a class.
      https://www.php.net/manual/en/language.oop5.basic.php'
  -
    question: 'What is the purpose of the `__construct()` method in a PHP class?'
    answers:
      - { value: 'It is called automatically when an object is destroyed.', correct: false }
      - { value: 'It is used to define static properties.', correct: false }
      - { value: 'It is a special method that is automatically called when a new object of the class is created.', correct: true }
      - { value: 'It is used for type hinting.', correct: false }
    help: |
      'The `__construct()` method is a constructor, a special method that is automatically called when a new object of a class is instantiated. It is commonly used for initializing object properties.
      https://www.php.net/manual/en/language.oop5.decon.php'
  -
    question: 'Consider the following PHP code. What will be the output?'
    answers:
      - { value: 'Hello World', correct: true }
      - { value: 'Fatal error', correct: false }
      - { value: 'Undefined property', correct: false }
      - { value: 'Hello', correct: false }
    help: |
      'The `public` property `$message` is accessible directly from the object instance.
      https://www.php.net/manual/en/language.oop5.properties.php'
    question: |
      ```php
      <?php
      class Greeter {
          public string $message = "Hello World";
      }

      $greeter = new Greeter();
      echo $greeter->message;
      ?>
      ```
  -
    question: 'Which access modifier allows a property or method to be accessed only from within the class itself and by its child classes?'
    answers:
      - { value: 'public', correct: false }
      - { value: 'private', correct: false }
      - { value: 'protected', correct: true }
      - { value: 'static', correct: false }
    help: |
      'The `protected` access modifier allows access to properties and methods within the declaring class and by classes that inherit from it.
      https://www.php.net/manual/en/language.oop5.visibility.php'
  -
    question: 'What is the correct way to define a constant within a PHP class?'
    answers:
      - { value: 'const MY_CONSTANT = "value";', correct: true }
      - { value: 'define("MY_CONSTANT", "value");', correct: false }
      - { value: 'public const MY_CONSTANT = "value";', correct: false }
      - { value: 'var MY_CONSTANT = "value";', correct: false }
    help: |
      'Class constants are defined using the `const` keyword. They are implicitly public and cannot be changed once declared.
      https://www.php.net/manual/en/language.oop5.constants.php'
  -
    question: 'In PHP 8.1+, what is the purpose of the `readonly` property modifier?'
    answers:
      - { value: 'It makes a property immutable after initialization.', correct: true }
      - { value: 'It prevents a property from being accessed outside the class.', correct: false }
      - { value: 'It makes a property static.', correct: false }
      - { value: 'It allows a property to be written only once.', correct: true }
    help: |
      'The `readonly` property modifier, introduced in PHP 8.1, makes a property immutable after its initial assignment, typically in the constructor.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly'
  -
    question: 'Which of the following statements about `static` methods in PHP are true?'
    answers:
      - { value: 'They can access non-static properties using `$this`.', correct: false }
      - { value: 'They can be called directly on the class without instantiating an object.', correct: true }
      - { value: 'They are always public.', correct: false }
      - { value: 'They are useful for utility functions that do not depend on object state.', correct: true }
    help: |
      'Static methods belong to the class itself, not to an instance. They can be called using `ClassName::methodName()`. They cannot access non-static properties or methods using `$this` because they operate without an object instance.
      https://www.php.net/manual/en/language.oop5.static.php'
  -
    question: 'What is the role of the `self` keyword in PHP OOP?'
    answers:
      - { value: 'It refers to the current object instance.', correct: false }
      - { value: 'It refers to the parent class.', correct: false }
      - { value: 'It refers to the class itself, used for accessing static members or constants.', correct: true }
      - { value: 'It refers to the child class.', correct: false }
    help: |
      'The `self` keyword is used to refer to the current class, primarily for accessing static properties, static methods, and class constants from within the class itself.
      https://www.php.net/manual/en/language.oop5.basic.php#language.oop5.basic.self'
  -
    question: 'When should you use an `abstract` class instead of an `interface` in PHP?'
    answers:
      - { value: 'When you want to define a contract that multiple classes must adhere to, without providing any implementation.', correct: false }
      - { value: 'When you want to provide a common base implementation for some methods, while leaving other methods to be implemented by child classes.', correct: true }
      - { value: 'When you need to enforce a single inheritance hierarchy.', correct: true }
      - { value: 'When you want to allow multiple inheritance of behavior.', correct: false }
    help: |
      'Abstract classes can have both abstract (unimplemented) methods and concrete (implemented) methods, and can define properties. Interfaces only define method signatures and constants, without implementation. A class can implement multiple interfaces but can only extend one abstract class.
      https://www.php.net/manual/en/language.oop5.abstract.php
      https://www.php.net/manual/en/language.oop5.interfaces.php'
  -
    question: 'What is the purpose of the `final` keyword when applied to a method in PHP?'
    answers:
      - { value: 'It prevents the method from being called.', correct: false }
      - { value: 'It makes the method static.', correct: false }
      - { value: 'It prevents child classes from overriding the method.', correct: true }
      - { value: 'It makes the method private.', correct: false }
    help: |
      'A `final` method cannot be overridden by any child class. This is useful when you want to ensure that a certain behavior defined in the parent class remains unchanged in its descendants.
      https://www.php.net/manual/en/language.oop5.final.php'
  -
    question: 'Which of the following correctly describes a PHP `Trait`?'
    answers:
      - { value: 'It is a mechanism for code reuse in single inheritance languages like PHP.', correct: true }
      - { value: 'It allows a class to inherit from multiple parent classes.', correct: false }
      - { value: 'It defines a contract that classes must implement.', correct: false }
      - { value: 'It can contain properties and methods, and they can have any visibility.', correct: true }
    help: |
      'Traits are a way to reuse code in PHP, allowing a class to use methods and properties from multiple traits, effectively mimicking some aspects of multiple inheritance of behavior without the complexities of multiple inheritance.
      https://www.php.net/manual/en/language.oop5.traits.php'
  -
    question: 'Consider the following PHP code. What will be the output?'
    answers:
      - { value: 'Hello from Class', correct: true }
      - { value: 'Hello from Trait', correct: false }
      - { value: 'Fatal error: Trait method overwritten', correct: false }
      - { value: 'Parse error', correct: false }
    help: |
      'When a class uses a trait, and both the class and the trait define a method with the same name, the class''s method takes precedence over the trait''s method.
      https://www.php.net/manual/en/language.oop5.traits.php#language.oop5.traits.precedence'
    question: |
      ```php
      <?php
      trait MyTrait {
          public function sayHello() {
              echo "Hello from Trait";
          }
      }

      class MyClass {
          use MyTrait;

          public function sayHello() {
              echo "Hello from Class";
          }
      }

      $obj = new MyClass();
      $obj->sayHello();
      ?>
      ```
  -
    question: 'What is the primary purpose of `Namespaces` in PHP?'
    answers:
      - { value: 'To improve code execution speed.', correct: false }
      - { value: 'To organize code and prevent naming collisions between classes, functions, and constants.', correct: true }
      - { value: 'To define global variables.', correct: false }
      - { value: 'To enable multiple inheritance.', correct: false }
    help: |
      'Namespaces provide a way to group related code, preventing name conflicts when combining code from different libraries or applications.
      https://www.php.net/manual/en/language.namespaces.php'
  -
    question: 'Which of the following is the correct way to declare a namespace in a PHP file?'
    answers:
      - { value: 'namespace MyProject;', correct: true }
      - { value: 'use MyProject;', correct: false }
      - { value: 'namespace MyProject\SubModule;', correct: true }
      - { value: 'declare namespace MyProject;', correct: false }
    help: |
      'The `namespace` keyword is used to declare a namespace. It must be the first statement in a file, except for the `declare` statement.
      https://www.php.net/manual/en/language.namespaces.definition.php'
  -
    question: 'Consider the following PHP code. What will be the output?'
    answers:
      - { value: 'MyClass', correct: false }
      - { value: 'App\Models\MyClass', correct: true }
      - { value: 'Fatal error', correct: false }
      - { value: 'Undefined class', correct: false }
    help: |
      'When a class is instantiated without a leading backslash in a namespaced file, PHP looks for the class within the current namespace.
      https://www.php.net/manual/en/language.namespaces.importing.php'
    question: |
      ```php
      <?php
      namespace App\Models;

      class MyClass {
          public function getName() {
              return __CLASS__;
          }
      }

      $obj = new MyClass();
      echo $obj->getName();
      ?>
      ```
  -
    question: 'How do you import a class from another namespace into the current namespace using an alias?'
    answers:
      - { value: 'import My\Namespace\MyClass as Alias;', correct: false }
      - { value: 'use My\Namespace\MyClass as Alias;', correct: true }
      - { value: 'namespace My\Namespace\MyClass as Alias;', correct: false }
      - { value: 'require My\Namespace\MyClass as Alias;', correct: false }
    help: |
      'The `use` keyword is used for importing namespaces, classes, functions, or constants. The `as` keyword allows you to create an alias for the imported element.
      https://www.php.net/manual/en/language.namespaces.importing.php'
  -
    question: 'Which of the following are true about `Interfaces` in PHP?'
    answers:
      - { value: 'An interface can define constants.', correct: true }
      - { value: 'An interface can define properties.', correct: false }
      - { value: 'A class can implement multiple interfaces.', correct: true }
      - { value: 'All methods declared in an interface must be public.', correct: true }
    help: |
      'Interfaces define a contract for classes to implement. They can declare constants and abstract methods (which are implicitly public). They cannot define properties or concrete methods. A class can implement multiple interfaces.
      https://www.php.net/manual/en/language.oop5.interfaces.php'
  -
    question: 'Consider the following PHP code. What will be the output?'
    answers:
      - { value: 'Hello', correct: true }
      - { value: 'Fatal error: Class MyClass must implement method sayHello', correct: false }
      - { value: 'Parse error', correct: false }
      - { value: 'Undefined method', correct: false }
    help: |
      'The `MyClass` correctly implements the `sayHello` method defined in `MyInterface`.
      https://www.php.net/manual/en/language.oop5.interfaces.php'
    question: |
      ```php
      <?php
      interface MyInterface {
          public function sayHello(): string;
      }

      class MyClass implements MyInterface {
          public function sayHello(): string {
              return "Hello";
          }
      }

      $obj = new MyClass();
      echo $obj->sayHello();
      ?>
      ```
  -
    question: 'What is an `Anonymous function` (or `Closure`) in PHP?'
    answers:
      - { value: 'A function that does not have a name and can be stored in a variable.', correct: true }
      - { value: 'A function that can access variables from the scope in which it was created, even after that scope has terminated.', correct: true }
      - { value: 'A function that can only be used once.', correct: false }
      - { value: 'A function that is automatically executed when a script starts.', correct: false }
    help: |
      'Anonymous functions, introduced in PHP 5.3, are functions that do not have a specified name. They are often used as callback functions. Closures are anonymous functions that can inherit variables from the parent scope using the `use` keyword.
      https://www.php.net/manual/en/functions.anonymous.php'
  -
    question: 'Consider the following PHP code. What will be the output?'
    answers:
      - { value: 'Hello World', correct: true }
      - { value: 'Hello', correct: false }
      - { value: 'Undefined variable: message', correct: false }
      - { value: 'Fatal error', correct: false }
    help: |
      'The `use` keyword is necessary to import variables from the parent scope into an anonymous function (closure).
      https://www.php.net/manual/en/functions.anonymous.php#example-260'
    question: |
      ```php
      <?php
      $message = "Hello";
      $greet = function () use ($message) {
          echo $message . " World";
      };
      $greet();
      ?>
      ```
  -
    question: 'Which of the following statements about `Abstract classes` in PHP are true?'
    answers:
      - { value: 'An abstract class cannot be instantiated directly.', correct: true }
      - { value: 'An abstract class must contain at least one abstract method.', correct: false }
      - { value: 'Abstract methods must be implemented by non-abstract child classes.', correct: true }
      - { value: 'An abstract class can have concrete (implemented) methods.', correct: true }
    help: |
      'Abstract classes are base classes that cannot be instantiated on their own. They can contain abstract methods (which must be implemented by concrete child classes) and concrete methods. An abstract class does not necessarily need to have abstract methods.
      https://www.php.net/manual/en/language.oop5.abstract.php'
  -
    question: 'Consider the following PHP code. What will be the output?'
    answers:
      - { value: 'Hello from ConcreteClass', correct: true }
      - { value: 'Fatal error: Cannot instantiate abstract class AbstractClass', correct: false }
      - { value: 'Fatal error: Class ConcreteClass must implement abstract method sayHello', correct: false }
      - { value: 'Parse error', correct: false }
    help: |
      'The `ConcreteClass` extends `AbstractClass` and correctly implements the abstract method `sayHello`.
      https://www.php.net/manual/en/language.oop5.abstract.php'
    question: |
      ```php
      <?php
      abstract class AbstractClass {
          abstract public function sayHello(): string;

          public function getGreeting(): string {
              return "Hello from AbstractClass";
          }
      }

      class ConcreteClass extends AbstractClass {
          public function sayHello(): string {
              return "Hello from ConcreteClass";
          }
      }

      $obj = new ConcreteClass();
      echo $obj->sayHello();
      ?>
      ```
  -
    question: 'What is the purpose of `Exception handling` in PHP?'
    answers:
      - { value: 'To manage normal program flow.', correct: false }
      - { value: 'To deal with runtime errors and exceptional conditions in a structured way.', correct: true }
      - { value: 'To prevent all errors from occurring.', correct: false }
      - { value: 'To log all warnings to a file.', correct: false }
    help: |
      'Exception handling provides a structured way to separate error-handling code from the normal logic of an application. When an exceptional condition occurs, an exception is thrown, and the execution flow jumps to a `catch` block.
      https://www.php.net/manual/en/language.exceptions.php'
  -
    question: 'Which block of code is guaranteed to be executed after a `try` and `catch` block, regardless of whether an exception was thrown or caught?'
    answers:
      - { value: 'finally', correct: true }
      - { value: 'else', correct: false }
      - { value: 'always', correct: false }
      - { value: 'ensure', correct: false }
    help: |
      'The `finally` block, introduced in PHP 5.5, is always executed after the `try` and `catch` blocks, even if an exception is thrown and not caught, or if a `return` statement is encountered in the `try` or `catch` block. It is typically used for cleanup operations.
      https://www.php.net/manual/en/language.exceptions.php#language.exceptions.finally'
  -
    question: 'Consider the following PHP code. What will be the output?'
    answers:
      - { value: 'Error caught: Something went wrong!Finally block executed.', correct: true }
      - { value: 'Finally block executed.', correct: false }
      - { value: 'Error caught: Something went wrong!', correct: false }
      - { value: 'Fatal error', correct: false }
    help: |
      'The `try` block throws an exception, which is caught by the `catch` block. The `finally` block is always executed afterwards.
      https://www.php.net/manual/en/language.exceptions.php'
    question: |
      ```php
      <?php
      try {
          throw new Exception("Something went wrong!");
      } catch (Exception $e) {
          echo "Error caught: " . $e->getMessage();
      } finally {
          echo "Finally block executed.";
      }
      ?>
      ```
  -
    question: 'What is the base class for all exceptions in PHP?'
    answers:
      - { value: 'Error', correct: false }
      - { value: 'Throwable', correct: true }
      - { value: 'RuntimeException', correct: false }
      - { value: 'Exception', correct: true }
    help: |
      'In PHP 7 and later, `Throwable` is the base interface for all objects that can be thrown via the `throw` statement, including `Error` and `Exception`. `Exception` is the base class for userland exceptions.
      https://www.php.net/manual/en/class.throwable.php
      https://www.php.net/manual/en/class.exception.php'
  -
    question: 'Which of the following are considered `Errors` (implementing `Error` interface) in PHP 7+ and should generally not be caught by `catch (Exception $e)`?'
    answers:
      - { value: 'TypeError', correct: true }
      - { value: 'InvalidArgumentException', correct: false }
      - { value: 'ParseError', correct: true }
      - { value: 'DivisionByZeroError', correct: true }
    help: |
      'In PHP 7, a new `Throwable` interface was introduced, which `Exception` and `Error` implement. `Error` represents severe errors that should typically lead to script termination, such as `TypeError`, `ParseError`, `ArithmeticError` (which `DivisionByZeroError` extends), etc. These are distinct from `Exception` and its subclasses.
      https://www.php.net/manual/en/language.errors.php7.php'
  -
    question: 'What is the purpose of the `declare(strict_types=1);` directive in PHP?'
    answers:
      - { value: 'It enables strict type checking for scalar type declarations in the current file.', correct: true }
      - { value: 'It makes all type declarations optional.', correct: false }
      - { value: 'It forces all functions to return a value.', correct: false }
      - { value: 'It enables strict mode for database queries.', correct: false }
    help: |
      'The `declare(strict_types=1);` directive, placed at the top of a PHP file, enables strict mode for scalar type declarations (int, float, string, bool) within that file. In strict mode, PHP will throw a `TypeError` if a function argument or return value does not exactly match the declared type.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.strict'
  -
    question: 'Which of the following are valid scalar type declarations in PHP 8.2?'
    answers:
      - { value: 'int', correct: true }
      - { value: 'float', correct: true }
      - { value: 'string', correct: true }
      - { value: 'array', correct: true }
      - { value: 'object', correct: true }
      - { value: 'resource', correct: false }
      - { value: 'mixed', correct: true }
    help: |
      'Scalar types include `bool`, `int`, `float`, and `string`. `array` and `object` are compound types. `resource` is a pseudo-type. `mixed` is a union type introduced in PHP 8.0, equivalent to `array|bool|callable|int|float|object|resource|string|null`.
      https://www.php.net/manual/en/language.types.declarations.php'
  -
    question: 'What is the purpose of `Union Types` in PHP 8.0 and later?'
    answers:
      - { value: 'To allow a variable to hold multiple values simultaneously.', correct: false }
      - { value: 'To specify that a parameter or return value can be one of several different types.', correct: true }
      - { value: 'To define a new custom type.', correct: false }
      - { value: 'To enforce strict type checking globally.', correct: false }
    help: |
      'Union types allow you to declare that a variable, parameter, or return value can be one of several types. For example, `int|string` means it can be either an integer or a string.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.union'
  -
    question: 'Consider the following PHP 8.0+ code. What will be the output?'
    answers:
      - { value: '10', correct: true }
      - { value: 'Fatal error: Uncaught TypeError', correct: false }
      - { value: '5', correct: false }
      - { value: 'Parse error', correct: false }
    help: |
      'The function `add` expects either an `int` or a `float`. When `5` (an int) is passed, it works correctly.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.union'
    question: |
      ```php
      <?php
      function add(int|float $a, int|float $b): int|float {
          return $a + $b;
      }

      echo add(5, 5);
      ?>
      ```
  -
    question: 'What is the significance of the `null` type in type declarations in PHP 7.1 and later?'
    answers:
      - { value: 'It means the parameter or return value is optional.', correct: false }
      - { value: 'It indicates that the parameter or return value can explicitly be `null` in addition to the declared type.', correct: true }
      - { value: 'It is equivalent to `void`.', correct: false }
      - { value: 'It prevents the variable from being assigned `null`.', correct: false }
    help: |
      'To allow a parameter or return value to be `null`, you must explicitly declare it as nullable using the `?` prefix (e.g., `?string`) or by including `null` in a union type (e.g., `string|null`).
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.nullable'
  -
    question: 'Which of the following are new features or improvements introduced in PHP 8.0?'
    answers:
      - { value: 'Named Arguments', correct: true }
      - { value: 'Attributes (Annotations)', correct: true }
      - { value: 'Match Expression', correct: true }
      - { value: 'Union Types', correct: true }
      - { value: 'Arrow Functions (short closures)', correct: false }
    help: |
      'PHP 8.0 introduced several significant features including Named Arguments, Attributes, the Match expression, and Union Types. Arrow Functions were introduced in PHP 7.4.
      https://www.php.net/manual/en/migration80.php'
  -
    question: 'In PHP 8.0+, what is the benefit of using `Named Arguments`?'
    answers:
      - { value: 'They allow passing arguments to a function based on their name, making the code more readable and order-independent.', correct: true }
      - { value: 'They automatically validate argument types.', correct: false }
      - { value: 'They reduce the number of required arguments for a function.', correct: false }
      - { value: 'They improve performance by optimizing argument passing.', correct: false }
    help: |
      'Named arguments allow you to pass arguments to a function by specifying the parameter name, rather than relying on their position. This improves readability, especially for functions with many parameters, and makes the order of arguments irrelevant.
      https://www.php.net/manual/en/functions.arguments.php#functions.named-arguments'
  -
    question: 'Consider the following PHP 8.0+ code. What will be the output?'
    answers:
      - { value: 'Hello John Doe', correct: true }
      - { value: 'Hello Doe John', correct: false }
      - { value: 'Fatal error: Unknown named parameter', correct: false }
      - { value: 'Parse error', correct: false }
    help: |
      'Named arguments allow you to specify arguments by name, making the order irrelevant.
      https://www.php.net/manual/en/functions.arguments.php#functions.named-arguments'
    question: |
      ```php
      <?php
      function greet(string $firstName, string $lastName): string {
          return "Hello " . $firstName . " " . $lastName;
      }

      echo greet(lastName: "Doe", firstName: "John");
      ?>
      ```
  -
    question: 'What is the primary use case for `Attributes` (formerly Annotations) in PHP 8.0+?'
    answers:
      - { value: 'To define new language keywords.', correct: false }
      - { value: 'To add metadata to classes, methods, properties, and functions in a structured way.', correct: true }
      - { value: 'To replace traditional comments in code.', correct: false }
      - { value: 'To create database migrations.', correct: false }
    help: |
      'Attributes provide a way to add structured, machine-readable metadata to declarations in your code (classes, methods, properties, functions, parameters, and class constants). This metadata can then be read at runtime using the Reflection API.
      https://www.php.net/manual/en/language.attributes.php'
  -
    question: 'Which of the following is a correct syntax for defining and using a simple Attribute in PHP 8.0+?'
    answers:
      - { value: '#[MyAttribute]', correct: true }
      - { value: '@@MyAttribute', correct: false }
      - { value: '@MyAttribute', correct: false }
      - { value: 'use #[MyAttribute]', correct: false }
    help: |
      'Attributes are declared using `#[AttributeName]` syntax.
      https://www.php.net/manual/en/language.attributes.syntax.php'
  -
    question: 'What is the `Match expression` in PHP 8.0+ primarily used for?'
    answers:
      - { value: 'Conditional assignments based on strict equality checks.', correct: true }
      - { value: 'Looping through arrays.', correct: false }
      - { value: 'Defining regular expressions.', correct: false }
      - { value: 'Handling multiple exceptions.', correct: false }
    help: |
      'The `match` expression is a new control flow construct that is similar to `switch` but has several key differences: it is an expression (returns a value), it uses strict comparisons (`===`), and it requires exhaustive cases or a `default` arm.
      https://www.php.net/manual/en/control-structures.match.php'
  -
    question: 'Consider the following PHP 8.0+ code. What will be the output?'
    answers:
      - { value: 'It is a string', correct: true }
      - { value: 'It is an integer', correct: false }
      - { value: 'Unknown type', correct: false }
      - { value: 'Fatal error: Non-exhaustive match expression', correct: false }
    help: |
      'The `match` expression evaluates the input strictly. Since "hello" is a string, the `string` case matches.
      https://www.php.net/manual/en/control-structures.match.php'
    question: |
      ```php
      <?php
      $value = "hello";
      $result = match (gettype($value)) {
          'integer' => 'It is an integer',
          'string' => 'It is a string',
          default => 'Unknown type',
      };
      echo $result;
      ?>
      ```
  -
    question: 'Which of the following are new features or improvements introduced in PHP 8.1?'
    answers:
      - { value: 'Enums', correct: true }
      - { value: 'Fibers', correct: true }
      - { value: 'Readonly properties', correct: true }
      - { value: 'Intersection Types', correct: false }
    help: |
      'PHP 8.1 introduced Enums, Fibers, and Readonly properties. Intersection Types were introduced in PHP 8.1.
      https://www.php.net/manual/en/migration81.php'
  -
    question: 'What is the primary purpose of `Enums` (Enumerations) in PHP 8.1?'
    answers:
      - { value: 'To define a set of named constant values.', correct: true }
      - { value: 'To create new data types.', correct: false }
      - { value: 'To manage database connections.', correct: false }
      - { value: 'To improve array performance.', correct: false }
    help: |
      'Enums provide a way to define a type that can only have a limited set of distinct values. They are useful for representing fixed sets of options, like days of the week or user roles.
      https://www.php.net/manual/en/language.enumerations.php'
  -
    question: 'Consider the following PHP 8.1+ code. What will be the output?'
    answers:
      - { value: 'Red', correct: true }
      - { value: 'Color::Red', correct: false }
      - { value: 'Fatal error', correct: false }
      - { value: 'Undefined constant', correct: false }
    help: |
      'Backed enums have an associated scalar value that can be accessed via the `value` property.
      https://www.php.net/manual/en/language.enumerations.backed.php'
    question: |
      ```php
      <?php
      enum Color: string {
          case Red = 'Red';
          case Green = 'Green';
          case Blue = 'Blue';
      }

      echo Color::Red->value;
      ?>
      ```
  -
    question: 'What is the main benefit of `Fibers` in PHP 8.1?'
    answers:
      - { value: 'They enable non-blocking I/O operations and asynchronous programming without changing the call stack.', correct: true }
      - { value: 'They provide a way to define lightweight threads for parallel execution.', correct: false }
      - { value: 'They are used for generating random numbers.', correct: false }
      - { value: 'They improve the performance of array manipulations.', correct: false }
    help: |
      'Fibers are a low-level mechanism for implementing lightweight concurrency in PHP. They allow for pausing and resuming execution at any point, making it easier to write asynchronous code without complex callback structures.
      https://www.php.net/manual/en/language.fibers.php'
  -
    question: 'Which of the following are new features or improvements introduced in PHP 8.2?'
    answers:
      - { value: 'Readonly classes', correct: true }
      - { value: 'Disjunctive Normal Form (DNF) Types', correct: true }
      - { value: 'New `true` type', correct: true }
      - { value: 'Deprecation of dynamic properties', correct: true }
    help: |
      'PHP 8.2 introduced Readonly classes, DNF Types, the new `true` type, and deprecated dynamic properties, among other changes.
      https://www.php.net/manual/en/migration82.php'
  -
    question: 'What is the purpose of `Readonly classes` in PHP 8.2?'
    answers:
      - { value: 'All properties declared within the class become readonly by default, and no new dynamic properties can be added.', correct: true }
      - { value: 'It prevents the class from being extended.', correct: false }
      - { value: 'It makes all methods static.', correct: false }
      - { value: 'It ensures that objects of the class cannot be serialized.', correct: false }
    help: |
      'When a class is declared `readonly`, all its properties are implicitly `readonly`, and it prevents the addition of dynamic properties. This helps in creating truly immutable value objects.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly-classes'
  -
    question: 'Consider the following PHP 8.2 code. What will happen when you try to run it?'
    answers:
      - { value: 'It will output "Hello".', correct: false }
      - { value: 'It will throw a `TypeError` because dynamic properties are deprecated.', correct: true }
      - { value: 'It will throw a `ParseError`.', correct: false }
      - { value: 'It will run without any issues.', correct: false }
    help: |
      'In PHP 8.2, dynamic properties are deprecated. Assigning a property that was not declared in the class definition will trigger a deprecation notice (or a `TypeError` in PHP 9.0).
      https://www.php.net/manual/en/migration82.deprecated.php#migration82.deprecated.dynamic-properties'
    question: |
      ```php
      <?php
      class MyClass {}

      $obj = new MyClass();
      $obj->dynamicProperty = "Hello"; // Deprecated in PHP 8.2
      echo $obj->dynamicProperty;
      ?>
      ```
  -
    question: 'What does `Disjunctive Normal Form (DNF) Types` allow in PHP 8.2?'
    answers:
      - { value: 'It allows combining union and intersection types in a more flexible way.', correct: true }
      - { value: 'It simplifies array type declarations.', correct: false }
      - { value: 'It enables dynamic type conversions.', correct: false }
      - { value: 'It is a new type of error handling.', correct: false }
    help: |
      'DNF Types allow a more expressive way to combine union and intersection types, enabling declarations like `(A&B)|C` or `A&(B|C)`.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.dnf'
  -
    question: 'Which of the following statements about the `true` type in PHP 8.2 are correct?'
    answers:
      - { value: 'It can be used as a standalone type declaration.', correct: true }
      - { value: 'It is equivalent to `bool`.', correct: false }
      - { value: 'It indicates that a function *must* return `true` and nothing else.', correct: true }
      - { value: 'It is used for strict equality checks.', correct: false }
    help: |
      'The `true` type was introduced in PHP 8.2. It can be used as a standalone return type to indicate that a function will always return `true`. It is a more specific type than `bool`.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.true'
  -
    question: 'What is the purpose of the `SPL (Standard PHP Library)`?'
    answers:
      - { value: 'To provide a collection of interfaces and classes for common data structures and algorithms.', correct: true }
      - { value: 'To manage PHP extensions.', correct: false }
      - { value: 'To handle database connections.', correct: false }
      - { value: 'To provide a framework for web development.', correct: false }
    help: |
      'The SPL provides a set of standard interfaces and classes for common problems, such as data structures (e.g., `SplStack`, `SplQueue`), iterators (e.g., `RecursiveIteratorIterator`), and autoloader functions.
      https://www.php.net/manual/en/book.spl.php'
  -
    question: 'Which SPL class provides an iterator for traversing over a directory?'
    answers:
      - { value: 'SplFileObject', correct: false }
      - { value: 'DirectoryIterator', correct: true }
      - { value: 'RecursiveDirectoryIterator', correct: true }
      - { value: 'SplFileInfo', correct: false }
    help: |
      '`DirectoryIterator` allows iterating over a directory''s contents. `RecursiveDirectoryIterator` extends this to allow recursive traversal of directories.
      https://www.php.net/manual/en/class.directoryiterator.php
      https://www.php.net/manual/en/class.recursivedirectoryiterator.php'
  -
    question: 'Consider the following PHP code using SPL. What will be the output?'
    answers:
      - { value: '123', correct: true }
      - { value: 'Fatal error', correct: false }
      - { value: 'Empty', correct: false }
      - { value: 'Undefined method', correct: false }
    help: |
      'The `SplStack` class implements a stack (LIFO - Last In, First Out) data structure. `push` adds elements, and `pop` removes them from the top.
      https://www.php.net/manual/en/class.splstack.php'
    question: |
      ```php
      <?php
      $stack = new SplStack();
      $stack->push(1);
      $stack->push(2);
      $stack->push(3);

      echo $stack->pop();
      echo $stack->pop();
      echo $stack->pop();
      ?>
      ```
  -
    question: 'Which SPL interface should a class implement to be traversable using `foreach`?'
    answers:
      - { value: 'Countable', correct: false }
      - { value: 'ArrayAccess', correct: false }
      - { value: 'IteratorAggregate', correct: true }
      - { value: 'Serializable', correct: false }
    help: |
      'The `IteratorAggregate` interface allows an object to return an external iterator to iterate over itself. `Iterator` is another interface for direct iteration.
      https://www.php.net/manual/en/class.iteratoraggregate.php'
  -
    question: 'What is the purpose of the `ArrayAccess` interface in SPL?'
    answers:
      - { value: 'To allow objects to be used with array syntax (e.g., `$obj[key]`).', correct: true }
      - { value: 'To convert an object to an array.', correct: false }
      - { value: 'To define how an object should be iterated.', correct: false }
      - { value: 'To provide a way to count elements in an object.', correct: false }
    help: |
      'Classes implementing `ArrayAccess` can use array-like access to their properties, allowing them to be treated like arrays using `[]` syntax.
      https://www.php.net/manual/en/class.arrayaccess.php'
  -
    question: 'Which of the following are common PHP extensions that provide additional functionality?'
    answers:
      - { value: 'PDO (PHP Data Objects)', correct: true }
      - { value: 'GD (Graphics Draw)', correct: true }
      - { value: 'cURL', correct: true }
      - { value: 'JSON', correct: true }
      - { value: 'XML', correct: true }
    help: |
      'PHP extensions provide compiled libraries that extend PHP''s core functionality. PDO is for database access, GD for image manipulation, cURL for making network requests, JSON for JSON encoding/decoding, and XML for XML parsing.
      https://www.php.net/manual/en/extensions.alphabetical.php'
  -
    question: 'How can you check if a specific PHP extension is loaded and available?'
    answers:
      - { value: 'Using `extension_loaded("extension_name")` function.', correct: true }
      - { value: 'Using `phpinfo()` and searching for the extension.', correct: true }
      - { value: 'By checking a global constant for the extension.', correct: false }
      - { value: 'By attempting to call a function from the extension and catching an error.', correct: false }
    help: |
      'The `extension_loaded()` function returns `true` if the given extension is loaded. `phpinfo()` provides a comprehensive overview of the PHP configuration, including loaded extensions.
      https://www.php.net/manual/en/function.extension-loaded.php
      https://www.php.net/manual/en/function.phpinfo.php'
  -
    question: 'What is the purpose of the `Reflection API` in PHP?'
    answers:
      - { value: 'To analyze and manipulate PHP code at runtime.', correct: true }
      - { value: 'To optimize code execution speed.', correct: false }
      - { value: 'To generate documentation automatically.', correct: false }
      - { value: 'To create new classes dynamically.', correct: false }
    help: |
      'The Reflection API provides classes that allow you to inspect classes, interfaces, functions, methods, properties, extensions, and more at runtime. This is useful for frameworks, debuggers, and code analysis tools.
      https://www.php.net/manual/en/book.reflection.php'
  -
    question: 'Which Reflection class would you use to inspect the methods of a given class?'
    answers:
      - { value: 'ReflectionProperty', correct: false }
      - { value: 'ReflectionClass', correct: true }
      - { value: 'ReflectionFunction', correct: false }
      - { value: 'ReflectionMethod', correct: true }
    help: |
      '`ReflectionClass` allows you to inspect a class, including its methods. `ReflectionMethod` is used to inspect a specific method.
      https://www.php.net/manual/en/class.reflectionclass.php
      https://www.php.net/manual/en/class.reflectionmethod.php'
  -
    question: 'Consider the following PHP code using Reflection. What will be the output?'
    answers:
      - { value: 'Method: getName', correct: true }
      - { value: 'Method: __construct', correct: false }
      - { value: 'No methods found', correct: false }
      - { value: 'Fatal error', correct: false }
    help: |
      'The `ReflectionClass::getMethods()` method returns an array of `ReflectionMethod` objects for the public methods of the class.
      https://www.php.net/manual/en/reflectionclass.getmethods.php'
    question: |
      ```php
      <?php
      class MyReflectionClass {
          public function getName() {
              return "MyReflectionClass";
          }
          private function internalMethod() {}
      }

      $reflector = new ReflectionClass('MyReflectionClass');
      foreach ($reflector->getMethods(ReflectionMethod::IS_PUBLIC) as $method) {
          echo "Method: " . $method->getName();
      }
      ?>
      ```
  -
    question: 'What is the purpose of `Generators` in PHP?'
    answers:
      - { value: 'To generate random numbers.', correct: false }
      - { value: 'To provide an easy way to implement simple iterators without implementing the `Iterator` interface.', correct: true }
      - { value: 'To create new classes dynamically.', correct: false }
      - { value: 'To handle asynchronous operations.', correct: false }
    help: |
      'Generators allow you to write iterable functions that can pause and resume execution, yielding values on demand. This is memory-efficient for large datasets as it doesn''t build an entire array in memory.
      https://www.php.net/manual/en/language.generators.php'
  -
    question: 'Consider the following PHP code using a Generator. What will be the output?'
    answers:
      - { value: '123', correct: true }
      - { value: '1', correct: false }
      - { value: 'Fatal error', correct: false }
      - { value: 'Nothing', correct: false }
    help: |
      'The `yield` keyword pauses the generator and returns a value. The `foreach` loop then resumes the generator to get the next value.
      https://www.php.net/manual/en/language.generators.php'
    question: |
      ```php
      <?php
      function myGenerator() {
          yield 1;
          yield 2;
          yield 3;
      }

      foreach (myGenerator() as $value) {
          echo $value;
      }
      ?>
      ```
  -
    question: 'Which of the following are valid ways to define a `callable` in PHP?'
    answers:
      - { value: 'A string containing the function name (e.g., `"my_function"`).', correct: true }
      - { value: 'An array with an object and a method name (e.g., `[$object, "methodName"]`).', correct: true }
      - { value: 'An array with a class name and a static method name (e.g., `["MyClass", "staticMethod"]`).', correct: true }
      - { value: 'An anonymous function (closure).', correct: true }
      - { value: 'A string containing the full path to a file.', correct: false }
    help: |
      'A `callable` is a type that represents a function or method that can be called. This includes regular functions, static class methods, object methods, and anonymous functions.
      https://www.php.net/manual/en/language.types.callable.php'
  -
    question: 'What is the purpose of the `__invoke()` magic method in PHP?'
    answers:
      - { value: 'It is called when an object is used as a function.', correct: true }
      - { value: 'It is called when an object is converted to a string.', correct: false }
      - { value: 'It is called when an object is cloned.', correct: false }
      - { value: 'It is called when a non-existent method is called.', correct: false }
    help: |
      'The `__invoke()` method is called when a script tries to call an object as a function.
      https://www.php.net/manual/en/language.oop5.magic.php#object.invoke'
  -
    question: 'Consider the following PHP code. What will be the output?'
    answers:
      - { value: 'Hello from invokable object', correct: true }
      - { value: 'Fatal error: Call to undefined method', correct: false }
      - { value: 'Parse error', correct: false }
      - { value: 'Nothing', correct: false }
    help: |
      'The `__invoke()` method allows an object to be called like a function.
      https://www.php.net/manual/en/language.oop5.magic.php#object.invoke'
    question: |
      ```php
      <?php
      class CallableObject {
          public function __invoke($name) {
              echo "Hello from invokable object";
          }
      }

      $obj = new CallableObject();
      $obj("World");
      ?>
      ```
  -
    question: 'What is the purpose of the `__debugInfo()` magic method in PHP?'
    answers:
      - { value: 'It is called when `var_dump()` is used on an object.', correct: true }
      - { value: 'It is used for logging debug messages.', correct: false }
      - { value: 'It provides information about the class structure.', correct: false }
      - { value: 'It is called during serialization.', correct: false }
    help: |
      'The `__debugInfo()` method is called when `var_dump()` is used on an object. It allows you to customize the information that is displayed.
      https://www.php.net/manual/en/language.oop5.magic.php#object.debuginfo'
  -
    question: 'Which of the following are valid ways to define a `constant` in PHP?'
    answers:
      - { value: 'Using the `define()` function.', correct: true }
      - { value: 'Using the `const` keyword outside of a class.', correct: true }
      - { value: 'Using the `const` keyword inside a class.', correct: true }
      - { value: 'Using the `global` keyword.', correct: false }
    help: |
      'Constants can be defined using `define()` (runtime) or the `const` keyword (compile-time). Class constants are defined with `const` inside a class.
      https://www.php.net/manual/en/language.constants.php'
  -
    question: 'What is the difference between `==` and `===` operators in PHP?'
    answers:
      - { value: '`==` checks for equality of value only, while `===` checks for equality of value and type.', correct: true }
      - { value: '`==` is used for string comparison, `===` for numeric comparison.', correct: false }
      - { value: '`===` is deprecated in PHP 8.2.', correct: false }
      - { value: '`==` performs strict comparison, `===` performs loose comparison.', correct: false }
    help: |
      'The `==` (loose equality) operator performs type juggling if the operands are of different types before comparison. The `===` (strict equality) operator checks if both the value and the type are the same without type juggling.
      https://www.php.net/manual/en/language.operators.comparison.php'
  -
    question: 'Consider the following PHP code. What will be the output?'
    answers:
      - { value: 'Equal', correct: true }
      - { value: 'Not Equal', correct: false }
      - { value: 'Fatal error', correct: false }
      - { value: 'Parse error', correct: false }
    help: |
      'The `==` operator performs type juggling, so the string "5" is converted to an integer 5 for comparison.
      https://www.php.net/manual/en/language.operators.comparison.php'
    question: |
      ```php
      <?php
      if ("5" == 5) {
          echo "Equal";
      } else {
          echo "Not Equal";
      }
      ?>
      ```
  -
    question: 'What is the purpose of the `null coalescing operator (??)` in PHP 7.0+?'
    answers:
      - { value: 'To check if a variable is `null` and return a default value if it is.', correct: true }
      - { value: 'To combine two arrays.', correct: false }
      - { value: 'To perform a bitwise operation.', correct: false }
      - { value: 'To check if a variable is empty.', correct: false }
    help: |
      'The null coalescing operator `??` returns its first operand if it exists and is not `null`; otherwise, it returns its second operand. It is a shorthand for `isset() ? :`.
      https://www.php.net/manual/en/language.operators.comparison.php#language.operators.comparison.coalesce'
  -
    question: 'Consider the following PHP code. What will be the output?'
    answers:
      - { value: 'default_value', correct: true }
      - { value: 'null', correct: false }
      - { value: 'Fatal error: Undefined variable', correct: false }
      - { value: '0', correct: false }
    help: |
      'Since `$value` is not set (and thus `null`), the null coalescing operator returns the default value.
      https://www.php.net/manual/en/language.operators.comparison.php#language.operators.comparison.coalesce'
    question: |
      ```php
      <?php
      $value = null;
      $result = $value ?? 'default_value';
      echo $result;
      ?>
      ```
  -
    question: 'What is the purpose of the `spaceship operator (<=>)` in PHP 7.0+?'
    answers:
      - { value: 'To compare two expressions and return -1, 0, or 1 if the first is less than, equal to, or greater than the second, respectively.', correct: true }
      - { value: 'To perform a logical XOR operation.', correct: false }
      - { value: 'To concatenate strings.', correct: false }
      - { value: 'To assign a value if a variable is less than another.', correct: false }
    help: |
      'The spaceship operator `(<=>)` is a three-way comparison operator. It returns an integer less than, equal to, or greater than zero when `$a` is respectively less than, equal to, or greater than `$b`.
      https://www.php.net/manual/en/language.operators.comparison.php#language.operators.comparison.spaceship'
  -
    question: 'Consider the following PHP code. What will be the output?'
    answers:
      - { value: '0', correct: true }
      - { value: '-1', correct: false }
      - { value: '1', correct: false }
      - { value: 'Fatal error', correct: false }
    help: |
      'Since 10 is equal to 10, the spaceship operator returns 0.
      https://www.php.net/manual/en/language.operators.comparison.php#language.operators.comparison.spaceship'
    question: |
      ```php
      <?php
      echo 10 <=> 10;
      ?>
      ```
  -
    question: 'What is the purpose of `Scalar Type Declarations` in PHP 7.0+?'
    answers:
      - { value: 'To enforce the type of parameters and return values in functions and methods.', correct: true }
      - { value: 'To define new scalar types.', correct: false }
      - { value: 'To improve performance of scalar operations.', correct: false }
      - { value: 'To automatically convert data types.', correct: false }
    help: |
      'Scalar type declarations (for `int`, `float`, `string`, `bool`) allow developers to specify the expected type of arguments and return values, leading to more robust and predictable code.
      https://www.php.net/manual/en/language.types.declarations.php'
  -
    question: 'Which of the following are valid return type declarations in PHP 7.1+?'
    answers:
      - { value: ': void', correct: true }
      - { value: ': ?string', correct: true }
      - { value: ': array', correct: true }
      - { value: ': mixed', correct: true }
      - { value: ': resource', correct: false }
    help: |
      '`void` indicates no return value. `?string` indicates a nullable string. `array` is a valid return type. `mixed` (PHP 8.0+) indicates any type. `resource` is a pseudo-type and cannot be used as a type declaration.
      https://www.php.net/manual/en/language.types.declarations.php'
  -
    question: 'What is the purpose of the `void` return type declaration in PHP 7.1+?'
    answers:
      - { value: 'It indicates that the function must return `null`.', correct: false }
      - { value: 'It indicates that the function does not return any value.', correct: true }
      - { value: 'It indicates that the function can return any type.', correct: false }
      - { value: 'It makes the function asynchronous.', correct: false }
    help: |
      'The `void` return type indicates that a function or method will not return any value. If a function declared with `void` attempts to return a value, a `TypeError` will be thrown.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.void'
  -
    question: 'Consider the following PHP code. What will happen when you try to run it?'
    answers:
      - { value: 'It will output "Hello".', correct: false }
      - { value: 'It will throw a `TypeError` because a value is returned from a void function.', correct: true }
      - { value: 'It will run without issues.', correct: false }
      - { value: 'Parse error', correct: false }
    help: |
      'A function declared with a `void` return type cannot return any value.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.void'
    question: |
      ```php
      <?php
      function doSomething(): void {
          return "Hello"; // This will cause a TypeError
      }
      doSomething();
      ?>
      ```
  -
    question: 'What is the purpose of `Anonymous Classes` in PHP 7.0+?'
    answers:
      - { value: 'To define classes that are not named and are instantiated on the fly.', correct: true }
      - { value: 'To create singletons.', correct: false }
      - { value: 'To define classes that cannot be extended.', correct: false }
      - { value: 'To improve class loading performance.', correct: false }
    help: |
      'Anonymous classes are useful for simple, one-off objects. They are instantiated at the point of definition and do not have a name.
      https://www.php.net/manual/en/language.oop5.anonymous.php'
  -
    question: 'Consider the following PHP code using an Anonymous Class. What will be the output?'
    answers:
      - { value: 'Hello Anonymous', correct: true }
      - { value: 'Fatal error', correct: false }
      - { value: 'Undefined class', correct: false }
      - { value: 'Parse error', correct: false }
    help: |
      'Anonymous classes can implement interfaces and extend classes just like regular classes.
      https://www.php.net/manual/en/language.oop5.anonymous.php'
    question: |
      ```php
      <?php
      interface GreeterInterface {
          public function greet(): string;
      }

      $greeter = new class implements GreeterInterface {
          public function greet(): string {
              return "Hello Anonymous";
          }
      };

      echo $greeter->greet();
      ?>
      ```
  -
    question: 'What is the purpose of `Arrow Functions` (short closures) in PHP 7.4+?'
    answers:
      - { value: 'To provide a more concise syntax for anonymous functions with a single expression.', correct: true }
      - { value: 'To define functions that can be called only once.', correct: false }
      - { value: 'To create functions that automatically return arrays.', correct: false }
      - { value: 'To replace regular functions entirely.', correct: false }
    help: |
      'Arrow functions provide a shorter syntax for anonymous functions that only contain a single expression. They implicitly capture variables from the parent scope by value.
      https://www.php.net/manual/en/functions.arrow.php'
  -
    question: 'Consider the following PHP 7.4+ code using an Arrow Function. What will be the output?'
    answers:
      - { value: '5', correct: true }
      - { value: 'Fatal error', correct: false }
      - { value: 'Undefined variable', correct: false }
      - { value: '0', correct: false }
    help: |
      'Arrow functions automatically capture variables from the parent scope by value.
      https://www.php.net/manual/en/functions.arrow.php'
    question: |
      ```php
      <?php
      $x = 2;
      $add = fn($y) => $x + $y;
      echo $add(3);
      ?>
      ```
  -
    question: 'Which of the following are valid ways to define a `class property` in PHP 7.4+?'
    answers:
      - { value: 'public string $name;', correct: true }
      - { value: 'private $age = 30;', correct: true }
      - { value: 'protected static array $data;', correct: true }
      - { value: 'var $address;', correct: true }
      - { value: 'const string $CITY = "New York";', correct: false }
    help: |
      'Properties are declared with an access modifier (`public`, `protected`, `private`), optionally `static`, and a type declaration (PHP 7.4+). `var` is an older keyword equivalent to `public`. `const` is for class constants, not properties.
      https://www.php.net/manual/en/language.oop5.properties.php'
  -
    question: 'What is the purpose of `Constructor Property Promotion` in PHP 8.0+?'
    answers:
      - { value: 'To allow properties to be declared directly in the constructor signature, reducing boilerplate code.', correct: true }
      - { value: 'To automatically generate getters and setters for properties.', correct: false }
      - { value: 'To make all constructor arguments optional.', correct: false }
      - { value: 'To prevent properties from being modified after initialization.', correct: false }
    help: |
      'Constructor property promotion allows you to define and initialize class properties directly in the constructor''s parameter list, making value object creation more concise.
      https://www.php.net/manual/en/language.oop5.decon.php#language.oop5.decon.constructor.promotion'
  -
    question: 'Consider the following PHP 8.0+ code using Constructor Property Promotion. What will be the output?'
    answers:
      - { value: 'John Doe', correct: true }
      - { value: 'Fatal error', correct: false }
      - { value: 'Undefined property', correct: false }
      - { value: 'Parse error', correct: false }
    help: |
      'The `public` properties `$firstName` and `$lastName` are automatically created and assigned based on the constructor arguments.
      https://www.php.net/manual/en/language.oop5.decon.php#language.oop5.decon.constructor.promotion'
    question: |
      ```php
      <?php
      class User {
          public function __construct(
              public string $firstName,
              public string $lastName
          ) {}
      }

      $user = new User("John", "Doe");
      echo $user->firstName . " " . $user->lastName;
      ?>
      ```
  -
    question: 'What is the purpose of the `match` expression in PHP 8.0+ compared to `switch`?'
    answers:
      - { value: 'It is an expression, meaning it returns a value.', correct: true }
      - { value: 'It uses strict comparison (`===`) by default.', correct: true }
      - { value: 'It does not require `break` statements for each arm.', correct: true }
      - { value: 'It supports fall-through behavior by default.', correct: false }
    help: |
      'The `match` expression is a more modern and safer alternative to `switch`. It is an expression, uses strict comparisons, and does not have fall-through behavior, making it less prone to errors.
      https://www.php.net/manual/en/control-structures.match.php'
  -
    question: 'Which of the following are valid ways to handle errors and exceptions in PHP?'
    answers:
      - { value: 'Using `try...catch...finally` blocks.', correct: true }
      - { value: 'Using `set_error_handler()` to convert errors to exceptions.', correct: true }
      - { value: 'Using `die()` or `exit()` for graceful shutdown.', correct: false }
      - { value: 'Ignoring errors and letting them propagate.', correct: false }
    help: |
      'Structured exception handling with `try...catch...finally` is the recommended way to handle runtime errors. `set_error_handler()` allows you to define a custom error handler, often used to convert traditional PHP errors into exceptions.
      https://www.php.net/manual/en/language.exceptions.php
      https://www.php.net/manual/en/function.set-error-handler.php'
  -
    question: 'What is the purpose of the `fn` keyword in PHP 7.4+?'
    answers:
      - { value: 'To define an anonymous function with a concise syntax.', correct: true }
      - { value: 'To declare a new function with a specific name.', correct: false }
      - { value: 'To define a generator function.', correct: false }
      - { value: 'To create a function that always returns `null`.', correct: false }
    help: |
      'The `fn` keyword is used to define arrow functions, which are short, single-expression anonymous functions that implicitly capture variables from the parent scope by value.
      https://www.php.net/manual/en/functions.arrow.php'
  -
    question: 'Which of the following are true about `Type Hints` (Type Declarations) in PHP?'
    answers:
      - { value: 'They improve code readability and maintainability.', correct: true }
      - { value: 'They are optional by default but can be made strict using `declare(strict_types=1);`.', correct: true }
      - { value: 'They are only applicable to function parameters, not return values.', correct: false }
      - { value: 'They are automatically enforced by the PHP engine at runtime.', correct: true }
    help: |
      'Type hints allow you to specify the expected type of function arguments, return values, and class properties. They improve code clarity and allow PHP to perform type checking at runtime. Strict mode (`declare(strict_types=1);`) ensures exact type matching for scalar types.
      https://www.php.net/manual/en/language.types.declarations.php'
  -
    question: 'What is the purpose of the `__clone()` magic method in PHP?'
    answers:
      - { value: 'It is called when an object is duplicated using the `clone` keyword.', correct: true }
      - { value: 'It creates a new instance of the class.', correct: false }
      - { value: 'It is used for deep copying arrays.', correct: false }
      - { value: 'It is called when an object is serialized.', correct: false }
    help: |
      'The `__clone()` method is called when an object is cloned. It can be used to adjust properties of the cloned object, especially for handling deep copies of objects.
      https://www.php.net/manual/en/language.oop5.cloning.php'
  -
    question: 'Consider the following PHP code. What will be the output?'
    answers:
      - { value: 'Cloned!', correct: true }
      - { value: 'Original object', correct: false }
      - { value: 'Fatal error', correct: false }
      - { value: 'Nothing', correct: false }
    help: |
      'When `$obj2 = clone $obj1;` is executed, the `__clone()` method of `$obj1` is called.
      https://www.php.net/manual/en/language.oop5.cloning.php'
    question: |
      ```php
      <?php
      class MyCloneable {
          public function __clone() {
              echo "Cloned!";
          }
      }

      $obj1 = new MyCloneable();
      $obj2 = clone $obj1;
      ?>
      ```
  -
    question: 'What is the purpose of `Late Static Bindings` in PHP (using `static::`)?'
    answers:
      - { value: 'To refer to the class that was originally called at runtime, even if it''s a child class.', correct: true }
      - { value: 'To access static properties and methods of the parent class.', correct: false }
      - { value: 'To define static properties that can be overridden by child classes.', correct: false }
      - { value: 'To prevent static methods from being overridden.', correct: false }
    help: |
      'Late Static Bindings (using `static::`) resolve calls to static methods and properties based on the class that was initially called at runtime, rather than the class where the method/property was defined. This is crucial for polymorphic static calls.
      https://www.php.net/manual/en/language.oop5.late-static-bindings.php'
  -
    question: 'Consider the following PHP code using Late Static Bindings. What will be the output?'
    answers:
      - { value: 'ChildClass', correct: true }
      - { value: 'ParentClass', correct: false }
      - { value: 'Fatal error', correct: false }
      - { value: 'Parse error', correct: false }
    help: |
      '`static::whoAmI()` refers to the class that was called at runtime, which is `ChildClass`. If `self::whoAmI()` was used, it would output `ParentClass`.
      https://www.php.net/manual/en/language.oop5.late-static-bindings.php'
    question: |
      ```php
      <?php
      class ParentClass {
          public static function whoAmI() {
              echo static::class;
          }
      }

      class ChildClass extends ParentClass {
          public static function whoAmI() {
              echo static::class;
          }
      }

      ChildClass::whoAmI();
      ?>
      ```
  -
    question: 'What is the purpose of the `__serialize()` and `__unserialize()` magic methods in PHP 7.4+?'
    answers:
      - { value: 'They replace `__sleep()` and `__wakeup()` for object serialization/unserialization, providing more control.', correct: true }
      - { value: 'They are used for converting objects to JSON.', correct: false }
      - { value: 'They automatically encrypt and decrypt object data.', correct: false }
      - { value: 'They are called when an object is created and destroyed.', correct: false }
    help: |
      'Introduced in PHP 7.4, `__serialize()` and `__unserialize()` provide a more robust and flexible way to control object serialization and unserialization, replacing the older `__sleep()` and `__wakeup()` methods.
      https://www.php.net/manual/en/language.oop5.magic.php#object.serialize'
  -
    question: 'Which of the following are true about `Variadic Functions` in PHP (using `...`)?'
    answers:
      - { value: 'They allow a function to accept an arbitrary number of arguments.', correct: true }
      - { value: 'The arguments are passed as an array to the function.', correct: true }
      - { value: 'They are defined using the `...` operator before the parameter name.', correct: true }
      - { value: 'They are only available for static methods.', correct: false }
    help: |
      'Variadic functions, using the `...` operator (splat operator), allow a function to accept a variable number of arguments, which are then passed as an array.
      https://www.php.net/manual/en/functions.arguments.php#functions.variable-arg-list'
  -
    question: 'Consider the following PHP code using a Variadic Function. What will be the output?'
    answers:
      - { value: 'Sum: 6', correct: true }
      - { value: 'Sum: 123', correct: false }
      - { value: 'Fatal error', correct: false }
      - { value: 'Sum: 0', correct: false }
    help: |
      'The `...$numbers` syntax collects all passed arguments into an array named `$numbers`.
      https://www.php.net/manual/en/functions.arguments.php#functions.variable-arg-list'
    question: |
      ```php
      <?php
      function sum(...$numbers) {
          $total = 0;
          foreach ($numbers as $number) {
              $total += $number;
          }
          return $total;
      }

      echo "Sum: " . sum(1, 2, 3);
      ?>
      ```
  -
    question: 'What is the purpose of the `__toString()` magic method in PHP?'
    answers:
      - { value: 'It is called when an object is treated as a string.', correct: true }
      - { value: 'It converts an object to an array.', correct: false }
      - { value: 'It is used for debugging purposes only.', correct: false }
      - { value: 'It defines the default value of an object.', correct: false }
    help: |
      'The `__toString()` method allows a class to decide how it will react when it is converted to a string. For example, `echo $object;` will call this method.
      https://www.php.net/manual/en/language.oop5.magic.php#object.tostring'
  -
    question: 'Consider the following PHP code. What will be the output?'
    answers:
      - { value: 'MyObject String Representation', correct: true }
      - { value: 'Fatal error: Object of class MyObject could not be converted to string', correct: false }
      - { value: 'Parse error', correct: false }
      - { value: 'Nothing', correct: false }
    help: |
      'When an object with a `__toString()` method is used in a string context (like `echo`), this method is automatically invoked.
      https://www.php.net/manual/en/language.oop5.magic.php#object.tostring'
    question: |
      ```php
      <?php
      class MyObject {
          public function __toString() {
              return "MyObject String Representation";
          }
      }

      $obj = new MyObject();
      echo $obj;
      ?>
      ```
  -
    question: 'What is the purpose of the `nullsafe operator (?->)` in PHP 8.0+?'
    answers:
      - { value: 'To call methods or access properties on an object only if the object is not `null`.', correct: true }
      - { value: 'To assign a default value if a method call returns `null`.', correct: false }
      - { value: 'To chain multiple method calls together.', correct: false }
      - { value: 'To prevent `null` values from being passed to functions.', correct: false }
    help: |
      'The nullsafe operator allows you to call methods or access properties on an object without needing to explicitly check if the object is `null` at each step. If the operand before `?->` is `null`, the entire expression evaluates to `null` and no error is thrown.
      https://www.php.net/manual/en/language.operators.nullsafe.php'
  -
    question: 'Consider the following PHP 8.0+ code. What will be the output?'
    answers:
      - { value: 'Default value', correct: true }
      - { value: 'Fatal error: Call to a member function getName() on null', correct: false }
      - { value: 'Parse error', correct: false }
      - { value: 'John', correct: false }
    help: |
      'Since `$user` is `null`, `$user?->getProfile()?->getName()` evaluates to `null`, and the null coalescing operator then provides "Default value".
      https://www.php.net/manual/en/language.operators.nullsafe.php'
    question: |
      ```php
      <?php
      class Profile {
          public function getName(): string {
              return "John";
          }
      }

      class User {
          public function getProfile(): ?Profile {
              return null;
          }
      }

      $user = new User();
      $name = $user?->getProfile()?->getName() ?? "Default value";
      echo $name;
      ?>
      ```
  -
    question: 'Which of the following are true about `Readonly properties` in PHP 8.1+?'
    answers:
      - { value: 'They can only be initialized once, typically in the constructor.', correct: true }
      - { value: 'They must be typed properties.', correct: true }
      - { value: 'They can be modified outside the constructor using a setter method.', correct: false }
      - { value: 'They are implicitly `private`.', correct: false }
    help: |
      'Readonly properties can only be assigned a value once. This assignment must happen in the same scope where the property is declared (e.g., in the constructor). They must have a declared type. They can have any visibility (`public`, `protected`, `private`).
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly'
  -
    question: 'What is the purpose of the `enum` keyword in PHP 8.1+?'
    answers:
      - { value: 'To define a type that represents a fixed set of named values.', correct: true }
      - { value: 'To declare a new interface.', correct: false }
      - { value: 'To create a new class with only static properties.', correct: false }
      - { value: 'To define a collection of constants.', correct: true }
    help: |
      'Enums provide a type-safe way to represent a fixed set of named values, improving code readability and preventing invalid states. They can be backed by scalar types (string, int) or be pure enums.
      https://www.php.net/manual/en/language.enumerations.php'
  -
    question: 'Consider the following PHP 8.1+ code. What will be the output?'
    answers:
      - { value: 'Status is active', correct: true }
      - { value: 'Status is pending', correct: false }
      - { value: 'Fatal error', correct: false }
      - { value: 'Unknown status', correct: false }
    help: |
      'The `match` expression can be used with Enums for type-safe and exhaustive conditional logic.
      https://www.php.net/manual/en/language.enumerations.php#language.enumerations.match'
    question: |
      ```php
      <?php
      enum Status {
          case PENDING;
          case ACTIVE;
          case DELETED;
      }

      function getStatusMessage(Status $status): string {
          return match ($status) {
              Status::PENDING => 'Status is pending',
              Status::ACTIVE => 'Status is active',
              Status::DELETED => 'Status is deleted',
          };
      }

      echo getStatusMessage(Status::ACTIVE);
      ?>
      ```
  -
    question: 'Which of the following are valid ways to define a `function` in PHP?'
    answers:
      - { value: '`function myFunction() {}`', correct: true }
      - { value: '`$myFunction = function() {};` (anonymous function)', correct: true }
      - { value: '`$myFunction = fn() => "";` (arrow function)', correct: true }
      - { value: '`def myFunction():`', correct: false }
    help: |
      'PHP supports traditional named functions, anonymous functions (closures), and arrow functions.
      https://www.php.net/manual/en/language.functions.php
      https://www.php.net/manual/en/functions.anonymous.php
      https://www.php.net/manual/en/functions.arrow.php'
  -
    question: 'What is the purpose of the `use` keyword when used with traits?'
    answers:
      - { value: 'To include the methods and properties of a trait into a class.', correct: true }
      - { value: 'To import a namespace.', correct: false }
      - { value: 'To define a closure.', correct: false }
      - { value: 'To specify a dependency.', correct: false }
    help: |
      'The `use` keyword within a class definition is used to incorporate traits into the class, making their methods and properties available as if they were defined directly in the class.
      https://www.php.net/manual/en/language.oop5.traits.php#language.oop5.traits.using'
  -
    question: 'Which of the following statements about `Error Handling` in PHP are true?'
    answers:
      - { value: 'Errors (like `ParseError` or `TypeError`) are generally more severe than Exceptions.', correct: true }
      - { value: 'The `@` error control operator suppresses all errors and warnings.', correct: true }
      - { value: 'It is good practice to use `@` extensively in production code.', correct: false }
      - { value: 'Custom error handlers can be registered using `set_error_handler()`.', correct: true }
    help: |
      'PHP distinguishes between Errors (which typically indicate unrecoverable problems) and Exceptions (which are designed for structured error handling). The `@` operator suppresses errors but should be used sparingly. `set_error_handler()` allows for custom error handling logic.
      https://www.php.net/manual/en/language.errors.php
      https://www.php.net/manual/en/function.set-error-handler.php'
  -
    question: 'What is the purpose of the `__get()` and `__set()` magic methods in PHP?'
    answers:
      - { value: 'They are called when accessing inaccessible (private or protected) or non-existent properties.', correct: true }
      - { value: 'They are used for property type validation.', correct: false }
      - { value: 'They automatically generate getters and setters.', correct: false }
      - { value: 'They define how properties are serialized.', correct: false }
    help: |
      'The `__get()` method is called when reading data from inaccessible (protected or private) or non-existent properties. The `__set()` method is called when writing data to inaccessible or non-existent properties.
      https://www.php.net/manual/en/language.oop5.magic.php#object.get'
  -
    question: 'Consider the following PHP code. What will be the output?'
    answers:
      - { value: 'Getting: nonExistentPropertySetting: nonExistentProperty: new value', correct: true }
      - { value: 'Fatal error: Undefined property', correct: false }
      - { value: 'Parse error', correct: false }
      - { value: 'Nothing', correct: false }
    help: |
      'The `__set()` and `__get()` magic methods are invoked when trying to set or get a property that is not explicitly defined or is inaccessible.
      https://www.php.net/manual/en/language.oop5.magic.php#object.get'
    question: |
      ```php
      <?php
      class MagicProperties {
          public function __get($name) {
              echo "Getting: " . $name;
          }

          public function __set($name, $value) {
              echo "Setting: " . $name . ": " . $value;
          }
      }

      $obj = new MagicProperties();
      $obj->nonExistentProperty = "new value";
      echo $obj->nonExistentProperty;
      ?>
      ```
  -
    question: 'What is the purpose of the `__call()` and `__callStatic()` magic methods in PHP?'
    answers:
      - { value: '`__call()` is for calling inaccessible object methods, and `__callStatic()` is for calling inaccessible static methods.', correct: true }
      - { value: 'They are used for method overloading.', correct: false }
      - { value: 'They are called before any method execution.', correct: false }
      - { value: 'They define the default behavior for all methods.', correct: false }
    help: |
      'The `__call()` method is triggered when invoking inaccessible (e.g., `private` or non-existent) methods in an object context. `__callStatic()` is triggered when invoking inaccessible `static` methods in a static context.
      https://www.php.net/manual/en/language.oop5.magic.php#object.call'
  -
    question: 'Consider the following PHP code. What will be the output?'
    answers:
      - { value: 'Calling method: nonExistentMethod with args: arg1, arg2', correct: true }
      - { value: 'Fatal error: Call to undefined method', correct: false }
      - { value: 'Parse error', correct: false }
      - { value: 'Nothing', correct: false }
    help: |
      'The `__call()` method catches calls to non-existent or inaccessible methods.
      https://www.php.net/manual/en/language.oop5.magic.php#object.call'
    question: |
      ```php
      <?php
      class MagicMethods {
          public function __call($name, $arguments) {
              echo "Calling method: " . $name . " with args: " . implode(", ", $arguments);
          }
      }

      $obj = new MagicMethods();
      $obj->nonExistentMethod("arg1", "arg2");
      ?>
      ```
  -
    question: 'Which of the following are part of the `Standard PHP Library (SPL)`?'
    answers:
      - { value: 'Data structures like `SplStack` and `SplQueue`.', correct: true }
      - { value: 'Iterator interfaces and classes (e.g., `Iterator`, `ArrayIterator`).', correct: true }
      - { value: 'Autoloading functions (e.g., `spl_autoload_register()`).', correct: true }
      - { value: 'Database abstraction layers.', correct: false }
    help: |
      'The SPL provides fundamental interfaces and classes for common programming tasks, including data structures, iterators, and autoloading mechanisms. It does not include database abstraction layers like PDO.
      https://www.php.net/manual/en/book.spl.php'
  -
    question: 'What is the purpose of `spl_autoload_register()`?'
    answers:
      - { value: 'To register multiple autoload functions that PHP will call when a class is used but not yet defined.', correct: true }
      - { value: 'To automatically include all files in a directory.', correct: false }
      - { value: 'To register a function to be called when the script ends.', correct: false }
      - { value: 'To register a custom error handler.', correct: false }
    help: |
      '`spl_autoload_register()` provides a flexible way to register any number of autoloaders, allowing PHP to automatically load class files when they are needed, without explicit `require` or `include` statements.
      https://www.php.net/manual/en/function.spl-autoload-register.php'
  -
    question: 'Consider the following PHP code. What will be the output?'
    answers:
      - { value: 'Class MyClass loaded!', correct: true }
      - { value: 'Fatal error: Class "MyClass" not found', correct: false }
      - { value: 'Parse error', correct: false }
      - { value: 'Nothing', correct: false }
    help: |
      'The autoloader function registered with `spl_autoload_register()` is called when `new MyClass()` attempts to instantiate a class that hasn''t been loaded yet.
      https://www.php.net/manual/en/function.spl-autoload-register.php'
    question: |
      ```php
      <?php
      spl_autoload_register(function ($className) {
          if ($className === 'MyClass') {
              echo "Class MyClass loaded!";
              class MyClass {} // Define the class
          }
      });

      new MyClass();
      ?>
      ```
  -
    question: 'What is the purpose of `WeakMap` in PHP 8.0+?'
    answers:
      - { value: 'To store objects as keys without preventing them from being garbage collected.', correct: true }
      - { value: 'To create a map with weak references to values.', correct: false }
      - { value: 'To store primitive data types with weak references.', correct: false }
      - { value: 'To improve the performance of array lookups.', correct: false }
    help: |
      'A `WeakMap` holds "weak" references to objects used as keys. If an object used as a key in a `WeakMap` is no longer referenced elsewhere, it can be garbage collected, and its entry in the `WeakMap` will be automatically removed. This prevents memory leaks in certain scenarios.
      https://www.php.net/manual/en/class.weakmap.php'
  -
    question: 'Consider the following PHP 8.0+ code. What will be the output?'
    answers:
      - { value: 'Value for obj1', correct: true }
      - { value: 'Fatal error', correct: false }
      - { value: 'Nothing', correct: false }
      - { value: 'Undefined index', correct: false }
    help: |
      'The `WeakMap` stores the association. Even after `$obj1` is unset, if there are other strong references to it, it won''t be garbage collected immediately, and its entry in the `WeakMap` remains accessible as long as the object exists. However, if `$obj1` was the *only* reference, the entry would be removed. In this specific example, the `echo` happens immediately after `unset`, so the object is still alive.
      https://www.php.net/manual/en/class.weakmap.php'
    question: |
      ```php
      <?php
      $map = new WeakMap();
      $obj1 = new stdClass();
      $map[$obj1] = "Value for obj1";

      unset($obj1); 

      $obj2 = new stdClass(); 
      foreach ($map as $key => $value) {
          echo $value;
      }
      ?>
      ```
  -
    question: 'Which of the following are true about `Fibres` in PHP 8.1+?'
    answers:
      - { value: 'They allow for pausing and resuming execution of code, enabling non-blocking I/O.', correct: true }
      - { value: 'They are a form of preemptive multitasking.', correct: false }
      - { value: 'They are managed by the PHP runtime and do not require explicit yielding.', correct: false }
      - { value: 'They are lightweight and do not involve context switching at the operating system level.', correct: true }
    help: |
      'Fibers are a low-level mechanism for cooperative multitasking. They allow a function to be paused and resumed at any point, making it easier to write asynchronous code without deeply nested callbacks. They are cooperative, meaning they must explicitly `yield` control.
      https://www.php.net/manual/en/language.fibers.php'
  -
    question: 'What is the purpose of the `#[AllowDynamicProperties]` attribute in PHP 8.2?'
    answers:
      - { value: 'To explicitly allow dynamic properties on a class, overriding the deprecation warning.', correct: true }
      - { value: 'To prevent any properties from being added dynamically.', correct: false }
      - { value: 'To make all properties dynamic by default.', correct: false }
      - { value: 'To allow a class to be extended dynamically.', correct: false }
    help: |
      'In PHP 8.2, dynamic properties are deprecated. The `#[AllowDynamicProperties]` attribute can be applied to a class to explicitly allow dynamic properties for that specific class, suppressing the deprecation warning.
      https://www.php.net/manual/en/language.attributes.php#language.attributes.allowdynamicproperties'
  -
    question: 'What is the purpose of the `parent` keyword in PHP OOP?'
    answers:
      - { value: 'To call a method or access a property of the parent class from within a child class.', correct: true }
      - { value: 'To refer to the current object instance.', correct: false }
      - { value: 'To define a new parent class.', correct: false }
      - { value: 'To check if a class has a parent.', correct: false }
    help: |
      'The `parent` keyword is used to refer to the parent class, typically to call overridden methods or access parent class constants/static properties.
      https://www.php.net/manual/en/language.oop5.parent.php'
  -
    question: 'Consider the following PHP code. What will be the output?'
    answers:
      - { value: 'Hello from Parent', correct: true }
      - { value: 'Hello from Child', correct: false }
      - { value: 'Fatal error', correct: false }
      - { value: 'Parse error', correct: false }
    help: |
      '`parent::sayHello()` explicitly calls the `sayHello` method of the `ParentClass`.
      https://www.php.net/manual/en/language.oop5.parent.php'
    question: |
      ```php
      <?php
      class ParentClass {
          public function sayHello() {
              echo "Hello from Parent";
          }
      }

      class ChildClass extends ParentClass {
          public function sayHello() {
              parent::sayHello();
          }
      }

      $obj = new ChildClass();
      $obj->sayHello();
      ?>
      ```
  -
    question: 'What is the purpose of the `static` keyword when applied to a property in a PHP class?'
    answers:
      - { value: 'It makes the property belong to the class itself, rather than to any specific instance of the class.', correct: true }
      - { value: 'It makes the property immutable.', correct: false }
      - { value: 'It prevents the property from being accessed outside the class.', correct: false }
      - { value: 'It makes the property accessible only from child classes.', correct: false }
    help: |
      'Static properties are shared among all instances of a class and can be accessed directly on the class using the `::` operator (e.g., `MyClass::$staticProperty`).
      https://www.php.net/manual/en/language.oop5.static.php'
  -
    question: 'Consider the following PHP code. What will be the output?'
    answers:
      - { value: '10', correct: true }
      - { value: 'Fatal error', correct: false }
      - { value: 'Undefined property', correct: false }
      - { value: '0', correct: false }
    help: |
      'Static properties are accessed using the class name and the `::` operator.
      https://www.php.net/manual/en/language.oop5.static.php'
    question: |
      ```php
      <?php
      class Counter {
          public static int $count = 0;

          public function increment() {
              self::$count++;
          }
      }

      $c1 = new Counter();
      $c1->increment();
      $c2 = new Counter();
      $c2->increment();

      echo Counter::$count;
      ?>
      ```
  -
    question: 'What is the purpose of the `instanceof` operator in PHP?'
    answers:
      - { value: 'To check if an object is an instance of a particular class or implements a specific interface.', correct: true }
      - { value: 'To create a new instance of a class.', correct: false }
      - { value: 'To compare two objects for equality.', correct: false }
      - { value: 'To determine the type of a variable.', correct: false }
    help: |
      'The `instanceof` operator is used to determine if a given object is an instance of a certain class or a subclass of that class, or if it implements a particular interface.
      https://www.php.net/manual/en/language.operators.type.php'
  -
    question: 'Consider the following PHP code. What will be the output?'
    answers:
      - { value: 'Yes', correct: true }
      - { value: 'No', correct: false }
      - { value: 'Fatal error', correct: false }
      - { value: 'Parse error', correct: false }
    help: |
      'The `$obj` is an instance of `MyClass`, which implements `MyInterface`. Therefore, both `instanceof MyClass` and `instanceof MyInterface` will evaluate to true.
      https://www.php.net/manual/en/language.operators.type.php'
    question: |
      ```php
      <?php
      interface MyInterface {}
      class MyClass implements MyInterface {}

      $obj = new MyClass();

      if ($obj instanceof MyClass && $obj instanceof MyInterface) {
          echo "Yes";
      } else {
          echo "No";
      }
      ?>
      ```
  -
    question: 'What is the purpose of the `clone` keyword in PHP?'
    answers:
      - { value: 'To create a shallow copy of an object.', correct: true }
      - { value: 'To create a deep copy of an object.', correct: false }
      - { value: 'To extend a class.', correct: false }
      - { value: 'To implement an interface.', correct: false }
    help: |
      'The `clone` keyword creates a shallow copy of an object. This means that the new object will have copies of all the original object''s properties, but if any of those properties are objects themselves, they will still refer to the same objects as in the original.
      https://www.php.net/manual/en/language.oop5.cloning.php'
  -
    question: 'Consider the following PHP code. What will be the output?'
    answers:
      - { value: 'Original: 10, Cloned: 10', correct: true }
      - { value: 'Original: 10, Cloned: 20', correct: false }
      - { value: 'Fatal error', correct: false }
      - { value: 'Parse error', correct: false }
    help: |
      'Cloning creates a shallow copy. `$obj2->value` is a separate primitive property.
      https://www.php.net/manual/en/language.oop5.cloning.php'
    question: |
      ```php
      <?php
      class MyClone {
          public int $value;

          public function __construct(int $value) {
              $this->value = $value;
          }
      }

      $obj1 = new MyClone(10);
      $obj2 = clone $obj1;

      echo "Original: " . $obj1->value . ", Cloned: " . $obj2->value;
      ?>
      ```
  -
    question: 'What is the purpose of the `yield from` expression in PHP Generators?'
    answers:
      - { value: 'To delegate to another generator or iterable, effectively flattening multiple iterables into one.', correct: true }
      - { value: 'To return a value from the generator and terminate it.', correct: false }
      - { value: 'To send a value into the generator.', correct: false }
      - { value: 'To create a new generator instance.', correct: false }
    help: |
      'The `yield from` expression allows a generator to delegate to another generator or any other `Traversable` object, making it easier to compose complex generators.
      https://www.php.net/manual/en/language.generators.php#language.generators.delegating'
  -
    question: 'Consider the following PHP code using `yield from`. What will be the output?'
    answers:
      - { value: '12345', correct: true }
      - { value: '1245', correct: false }
      - { value: 'Fatal error', correct: false }
      - { value: 'Nothing', correct: false }
    help: |
      '`yield from` iterates over the inner generator, yielding its values.
      https://www.php.net/manual/en/language.generators.php#language.generators.delegating'
    question: |
      ```php
      <?php
      function generatorA() {
          yield 1;
          yield 2;
      }

      function generatorB() {
          yield 3;
          yield 4;
      }

      function combinedGenerator() {
          yield from generatorA();
          yield from generatorB();
          yield 5;
      }

      foreach (combinedGenerator() as $value) {
          echo $value;
      }
      ?>
      ```
  -
    question: 'What is the purpose of `WeakReference` in PHP 7.4+?'
    answers:
      - { value: 'To create a reference to an object that does not prevent the object from being garbage collected.', correct: true }
      - { value: 'To create a strong reference to an object.', correct: false }
      - { value: 'To store primitive values with weak references.', correct: false }
      - { value: 'To optimize memory usage for large arrays.', correct: false }
    help: |
      'A `WeakReference` allows you to hold a reference to an object without increasing its reference count. If the object is no longer strongly referenced, it can be garbage collected, and the `WeakReference` will then return `null` when its `get()` method is called.
      https://www.php.net/manual/en/class.weakreference.php'
  -
    question: 'Consider the following PHP 7.4+ code. What will be the output?'
    answers:
      - { value: 'Object exists', correct: true }
      - { value: 'Object does not exist', correct: false }
      - { value: 'Fatal error', correct: false }
      - { value: 'Parse error', correct: false }
    help: |
      'As long as the original object (`$obj`) has a strong reference, the `WeakReference` will be able to retrieve it.
      https://www.php.net/manual/en/class.weakreference.php'
    question: |
      ```php
      <?php
      $obj = new stdClass();
      $weakRef = WeakReference::create($obj);

      if ($weakRef->get() !== null) {
          echo "Object exists";
      } else {
          echo "Object does not exist";
      }
      ?>
      ```
  -
    question: 'What is the purpose of the `#[Deprecated]` attribute in PHP 8.0+?'
    answers:
      - { value: 'To mark a class, method, property, or function as deprecated, indicating it should no longer be used.', correct: true }
      - { value: 'To prevent a class from being extended.', correct: false }
      - { value: 'To remove a feature from the language.', correct: false }
      - { value: 'To automatically migrate old code to new syntax.', correct: false }
    help: |
      'The `#[Deprecated]` attribute allows developers to explicitly mark code elements as deprecated, providing a clear signal to users that the element is discouraged and may be removed in future versions.
      https://www.php.net/manual/en/language.attributes.php#language.attributes.deprecated'
  -
    question: 'What is the purpose of `Argument Unpacking` (spread operator `...`) in PHP?'
    answers:
      - { value: 'To expand an array or `Traversable` into a list of arguments for a function call.', correct: true }
      - { value: 'To combine multiple arrays into one.', correct: false }
      - { value: 'To define a variadic function.', correct: false }
      - { value: 'To unpack a string into individual characters.', correct: false }
    help: |
      'The spread operator `...` can be used to unpack arrays or `Traversable` objects into a list of arguments when calling a function.
      https://www.php.net/manual/en/functions.arguments.php#functions.variable-arg-list.unpacking'
  -
    question: 'Consider the following PHP code using Argument Unpacking. What will be the output?'
    answers:
      - { value: 'Sum: 6', correct: true }
      - { value: 'Sum: 123', correct: false }
      - { value: 'Fatal error', correct: false }
      - { value: 'Sum: 0', correct: false }
    help: |
      'The `...$numbers` in the function definition makes it variadic, accepting multiple arguments as an array. The `...$nums` in the function call unpacks the array elements into separate arguments.
      https://www.php.net/manual/en/functions.arguments.php#functions.variable-arg-list.unpacking'
    question: |
      ```php
      <?php
      function sum(...$numbers) {
          $total = 0;
          foreach ($numbers as $number) {
              $total += $number;
          }
          return $total;
      }

      $nums = [1, 2, 3];
      echo "Sum: " . sum(...$nums);
      ?>
      ```
  -
    question: 'What is the purpose of `Strict Types` in PHP (`declare(strict_types=1);`)?'
    answers:
      - { value: 'To ensure that scalar type declarations (int, float, string, bool) are strictly enforced, throwing a `TypeError` if types do not match exactly.', correct: true }
      - { value: 'To prevent any type juggling from occurring in the entire application.', correct: false }
      - { value: 'To make all type declarations mandatory.', correct: false }
      - { value: 'To enable a faster execution mode for PHP scripts.', correct: false }
    help: |
      'The `declare(strict_types=1);` directive affects how scalar type declarations are handled within the file where it is declared. In strict mode, PHP will not perform implicit type conversions for scalar types, leading to more predictable behavior and early error detection.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.strict'
  -
    question: 'Consider the following PHP code with strict types. What will be the output?'
    answers:
      - { value: 'Fatal error: Uncaught TypeError', correct: true }
      - { value: '10', correct: false }
      - { value: 'Parse error', correct: false }
      - { value: '5', correct: false }
    help: |
      'With `strict_types=1`, passing a string "5" to a function expecting an `int` will result in a `TypeError`. Without strict types, "5" would be implicitly converted to 5.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.strict'
    question: |
      ```php
      <?php
      declare(strict_types=1);

      function add(int $a, int $b): int {
          return $a + $b;
      }

      echo add(5, "5");
      ?>
      ```
  -
    question: 'Which of the following are valid ways to define a `class method` in PHP?'
    answers:
      - { value: '`public function myMethod() {}`', correct: true }
      - { value: '`private static function myStaticMethod() {}`', correct: true }
      - { value: '`abstract protected function myAbstractMethod();`', correct: true }
      - { value: '`final public function myFinalMethod() {}`', correct: true }
      - { value: '`function myGlobalMethod() {}` (inside a class)', correct: false }
    help: |
      'Class methods are defined with an access modifier (`public`, `protected`, `private`), optionally `static`, `abstract`, or `final`. A plain `function` declaration inside a class is not valid.
      https://www.php.net/manual/en/language.oop5.methods.php'
  -
    question: 'What is the purpose of the `throw` keyword in PHP?'
    answers:
      - { value: 'To raise an exception or error.', correct: true }
      - { value: 'To define a new exception class.', correct: false }
      - { value: 'To exit the script immediately.', correct: false }
      - { value: 'To log a message to the error log.', correct: false }
    help: |
      'The `throw` keyword is used to throw an exception or an error, interrupting the normal flow of execution and transferring control to the nearest `catch` block.
      https://www.php.net/manual/en/language.exceptions.php#language.exceptions.throwing'
  -
    question: 'Consider the following PHP code. What will be the output?'
    answers:
      - { value: 'Caught exception: Division by zero is not allowed.', correct: true }
      - { value: 'Fatal error: Division by zero', correct: false }
      - { value: 'Parse error', correct: false }
      - { value: 'Nothing', correct: false }
    help: |
      'The `try` block attempts a division by zero, which is caught by the `catch` block, printing the custom exception message.
      https://www.php.net/manual/en/language.exceptions.php'
    question: |
      ```php
      <?php
      function divide(int $a, int $b): float {
          if ($b === 0) {
              throw new InvalidArgumentException("Division by zero is not allowed.");
          }
          return $a / $b;
      }

      try {
          echo divide(10, 0);
      } catch (InvalidArgumentException $e) {
          echo "Caught exception: " . $e->getMessage();
      }
      ?>
      ```
  -
    question: 'What is the purpose of the `#[Override]` attribute in PHP 8.3?'
    answers:
      - { value: 'To explicitly mark a method as overriding a parent method, and to ensure that the parent method actually exists.', correct: true }
      - { value: 'To prevent a method from being overridden by child classes.', correct: false }
      - { value: 'To make a method abstract.', correct: false }
      - { value: 'To automatically generate method stubs for overridden methods.', correct: false }
    help: |
      'The `#[Override]` attribute, introduced in PHP 8.3, is used to explicitly declare that a method is intended to override a method from a parent class or implemented interface. If no such method exists in the parent hierarchy, a compile-time error is generated, preventing common typos and refactoring issues.
      https://www.php.net/manual/en/language.attributes.php#language.attributes.override'
  -
    question: 'What is the purpose of `Type Variance` (Covariance and Contravariance) in PHP?'
    answers:
      - { value: 'Covariance allows a child method to return a more specific type than its parent method.', correct: true }
      - { value: 'Contravariance allows a child method to accept a more general type for its parameters than its parent method.', correct: true }
      - { value: 'It simplifies type declarations for arrays.', correct: false }
      - { value: 'It allows functions to accept multiple return types.', correct: false }
    help: |
      'Type variance (covariance for return types, contravariance for parameter types) allows for more flexibility in type declarations when overriding methods in child classes, while maintaining type safety.
      https://www.php.net/manual/en/language.oop5.variance.php'
  -
    question: 'Consider the following PHP code demonstrating type variance. What will be the output?'
    answers:
      - { value: 'Child Object', correct: true }
      - { value: 'Parent Object', correct: false }
      - { value: 'Fatal error: Declaration of ChildClass::create() must be compatible with ParentClass::create()', correct: false }
      - { value: 'Parse error', correct: false }
    help: |
      'This demonstrates covariance in return types: `ChildClass::create()` returns a more specific type (`ChildObject`) than `ParentClass::create()` (`ParentObject`).
      https://www.php.net/manual/en/language.oop5.variance.php'
    question: |
      ```php
      <?php
      class ParentObject {}
      class ChildObject extends ParentObject {}

      class ParentClass {
          public function create(): ParentObject {
              return new ParentObject();
          }
      }

      class ChildClass extends ParentClass {
          public function create(): ChildObject { // Covariant return type
              return new ChildObject();
          }
      }

      $obj = new ChildClass();
      echo get_class($obj->create());
      ?>
      ```
  -
    question: 'What is the purpose of `Intersection Types` in PHP 8.1+?'
    answers:
      - { value: 'To specify that a variable or parameter must be an instance of *all* the declared types simultaneously.', correct: true }
      - { value: 'To allow a variable to be one of several types.', correct: false }
      - { value: 'To define a new composite type.', correct: false }
      - { value: 'To combine multiple interfaces into a single interface.', correct: false }
    help: |
      'Intersection types (e.g., `A&B`) require a value to be an instance of *all* the specified types. This is useful for defining parameters that must implement multiple interfaces or extend a class and implement an interface.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.intersection'
  -
    question: 'Consider the following PHP 8.1+ code using Intersection Types. What will be the output?'
    answers:
      - { value: 'Processing data', correct: true }
      - { value: 'Fatal error: Uncaught TypeError', correct: false }
      - { value: 'Parse error', correct: false }
      - { value: 'Nothing', correct: false }
    help: |
      'The `process` function requires an object that is both `LoggerInterface` and `DataProcessorInterface`. `MyService` implements both, so it works.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.intersection'
    question: |
      ```php
      <?php
      interface LoggerInterface {
          public function log(string $message);
      }

      interface DataProcessorInterface {
          public function process();
      }

      class MyService implements LoggerInterface, DataProcessorInterface {
          public function log(string $message) { /* ... */ }
          public function process() {
              echo "Processing data";
          }
      }

      function handle(LoggerInterface & DataProcessorInterface $service) {
          $service->process();
      }

      $service = new MyService();
      handle($service);
      ?>
      ```