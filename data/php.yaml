category: PHP

questions:
  -
    question: >
      Which of the following is a new feature introduced in PHP 8.2?
    answers:
      -
        value: >
          Readonly classes
        correct: true
      -
        value: >
          Named arguments
        correct: false
      -
        value: >
          Union types
        correct: false
      -
        value: >
          Attributes
        correct: false
    help: |
      PHP 8.2 introduced readonly classes, allowing all properties of a class to be implicitly readonly.
      https://www.php.net/manual/en/migration82.new-features.php#migration82.new-features.readonly-classes

  -
    question: |
      Consider the following PHP code:

      ```php
      <?php
      namespace App\Controller;

      class ProductController
      {
          public function show(int $id): string
          {
              return "Product ID: " . $id;
          }
      }
      ?>
      ```
      What is the fully qualified class name (FQCN) of `ProductController`?
    answers:
      -
        value: >
          `App\Controller\ProductController`
        correct: true
      -
        value: >
          `ProductController`
        correct: false
      -
        value: >
          `\App\Controller\ProductController`
        correct: false
      -
        value: >
          `Controller\ProductController`
        correct: false
    help: |
      The fully qualified class name includes the namespace.
      https://www.php.net/manual/en/language.namespaces.basics.php

  -
    question: >
      In Object-Oriented Programming (OOP) in PHP, what is the primary purpose of an abstract class?
    answers:
      -
        value: >
          To provide a common interface for a set of related classes without implementing all methods.
        correct: false
      -
        value: >
          To define a blueprint for other classes, allowing some methods to be declared without implementation.
        correct: true
      -
        value: >
          To prevent instantiation of a class directly, forcing child classes to implement its abstract methods.
        correct: true
      -
        value: >
          To allow multiple inheritance by extending from several parent classes.
        correct: false
    help: |
      Abstract classes cannot be instantiated directly and can contain abstract methods that must be implemented by non-abstract child classes.
      https://www.php.net/manual/en/language.oop5.abstract.php

  -
    question: |
      Which of the following correctly defines an interface in PHP?

      ```php
      <?php
      // Option A
      interface Logger
      {
          public function log(string $message);
      }

      // Option B
      abstract interface Logger
      {
          public function log(string $message);
      }

      // Option C
      interface Logger
      {
          private function log(string $message);
      }

      // Option D
      interface Logger
      {
          public function log(string $message) {}
      }
      ?>
      ```
    answers:
      -
        value: >
          Option A
        correct: true
      -
        value: >
          Option B
        correct: false
      -
        value: >
          Option C
        correct: false
      -
        value: >
          Option D
        correct: false
    help: |
      Interfaces define a contract for classes to implement. Methods in an interface must be public and cannot have a body.
      https://www.php.net/manual/en/language.oop5.interfaces.php

  -
    question: |
      What will be the output of the following PHP code?

      ```php
      <?php
      $message = 'Hello';
      $greet = function ($name) use ($message) {
          echo "$message $name";
      };
      $message = 'Hi';
      $greet('World');
      ?>
      ```
    answers:
      -
        value: >
          Hello World
        correct: true
      -
        value: >
          Hi World
        correct: false
      -
        value: >
          (No output, fatal error)
        correct: false
      -
        value: >
          (No output, syntax error)
        correct: false
    help: |
      When a variable is `use`d in a closure, its value is captured at the time the closure is defined, not when it is executed.
      https://www.php.net/manual/en/functions.anonymous.php

  -
    question: >
      Which of the following is the correct way to catch multiple types of exceptions in a single `catch` block in PHP 8.0+?
    answers:
      -
        value: >
          `catch (ExceptionTypeA | ExceptionTypeB $e)`
        correct: true
      -
        value: >
          `catch (ExceptionTypeA, ExceptionTypeB $e)`
        correct: false
      -
        value: >
          `catch (ExceptionTypeA or ExceptionTypeB $e)`
        correct: false
      -
        value: >
          `catch ([ExceptionTypeA, ExceptionTypeB] $e)`
        correct: false
    help: |
      PHP 8.0 introduced the ability to catch multiple exceptions with a single `catch` block using the `|` operator.
      https://www.php.net/manual/en/language.exceptions.php#language.exceptions.multicatch

  -
    question: >
      What is the primary purpose of a Trait in PHP?
    answers:
      -
        value: >
          To enable multiple inheritance for classes.
        correct: false
      -
        value: >
          To provide a mechanism for code reuse in single inheritance languages like PHP.
        correct: true
      -
        value: >
          To define a contract that classes must adhere to.
        correct: false
      -
        value: >
          To declare abstract methods that must be implemented by child classes.
        correct: false
    help: |
      Traits are a mechanism for code reuse in single inheritance languages such as PHP. A Trait is intended to reduce limitations of single inheritance by enabling a developer to reuse sets of methods freely in several independent classes living in different class hierarchies.
      https://www.php.net/manual/en/language.oop5.traits.php

  -
    question: >
      Which PHP extension is commonly used for working with relational databases like MySQL or PostgreSQL?
    answers:
      -
        value: >
          `ext-json`
        correct: false
      -
        value: >
          `ext-pdo`
        correct: true
      -
        value: >
          `ext-curl`
        correct: false
      -
        value: >
          `ext-gd`
        correct: false
    help: |
      PDO (PHP Data Objects) is a database access layer providing a uniform method of access to multiple databases.
      https://www.php.net/manual/en/book.pdo.php

  -
    question: >
      Which SPL (Standard PHP Library) interface is used to make an object iterable using `foreach`?
    answers:
      -
        value: >
          `Countable`
        correct: false
      -
        value: >
        `Serializable`
        correct: false
      -
        value: >
          `IteratorAggregate`
        correct: true
      -
        value: >
          `ArrayAccess`
        correct: false
    help: |
      The `IteratorAggregate` interface allows objects to be iterated over using the `foreach` statement.
      https://www.php.net/manual/en/class.iteratoraggregate.php

  -
    question: |
      What is the purpose of the `final` keyword when applied to a class in PHP?
    answers:
      -
        value: >
          It prevents the class from being instantiated.
        correct: false
      -
        value: >
          It prevents the class from being extended by other classes.
        correct: true
      -
        value: >
          It makes all methods within the class `final` by default.
        correct: false
      -
        value: >
          It marks the class as a singleton.
        correct: false
    help: |
      If you wish to prevent a class from being extended, you can prefix the class definition with the `final` keyword.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: |
      Which of the following is a valid way to define a constant in a class in PHP?
    answers:
      -
        value: >
          `const MY_CONSTANT = 'value';`
        correct: true
      -
        value: >
          `define('MY_CONSTANT', 'value');`
        correct: false
      -
        value: >
          `public static $MY_CONSTANT = 'value';`
        correct: false
      -
        value: >
          `var MY_CONSTANT = 'value';`
        correct: false
    help: |
      Class constants are defined using the `const` keyword.
      https://www.php.net/manual/en/language.oop5.constants.php

  -
    question: >
      Which magic method is automatically called when an object is treated as a string?
    answers:
      -
        value: >
          `__construct()`
        correct: false
      -
        value: >
          `__toString()`
        correct: true
      -
        value: >
          `__invoke()`
        correct: false
      -
        value: >
          `__call()`
        correct: false
    help: |
      The `__toString()` method allows a class to decide how it will react when it is treated as a string.
      https://www.php.net/manual/en/language.oop5.magic.php#object.tostring

  -
    question: |
      What is the correct way to access a static property `count` within the same class in PHP?
    answers:
      -
        value: >
          `$this->count`
        correct: false
      -
        value: >
          `self::$count`
        correct: true
      -
        value: >
          `MyClass::$count`
        correct: true
      -
        value: >
          `static::$count`
        correct: true
    help: |
      Static properties can be accessed using `self::`, `static::`, or the class name itself followed by `::`.
      https://www.php.net/manual/en/language.oop5.static.php

  -
    question: >
      Which PHP function is used to determine if a variable is empty?
    answers:
      -
        value: >
          `isset()`
        correct: false
      -
        value: >
          `is_null()`
        correct: false
      -
        value: >
          `empty()`
        correct: true
      -
        value: >
          `is_blank()`
        correct: false
    help: |
      `empty()` determines whether a variable is empty. A variable is considered empty if it does not exist or if its value equals `false`. `empty()` does not generate a warning if the variable does not exist.
      https://www.php.net/manual/en/function.empty.php

  -
    question: |
      What is the purpose of the `use` keyword when importing classes in PHP?
    answers:
      -
        value: >
          To define a new namespace.
        correct: false
      -
        value: >
          To include a file from another directory.
        correct: false
      -
        value: >
          To import a class, interface, or trait into the current namespace, allowing it to be referred to by its unqualified name.
        correct: true
      -
        value: >
          To declare a global variable.
        correct: false
    help: |
      The `use` keyword is used for importing names from namespaces.
      https://www.php.net/manual/en/language.namespaces.importing.php

  -
    question: >
      Which of the following is true about PHP's `finally` block in exception handling?
    answers:
      -
        value: >
          The `finally` block is executed only if an exception is caught.
        correct: false
      -
        value: >
          The `finally` block is executed regardless of whether an exception was thrown or caught.
        correct: true
      -
        value: >
          The `finally` block must always be followed by a `catch` block.
        correct: false
      -
        value: >
          The `finally` block can prevent an exception from propagating.
        correct: false
    help: |
      The `finally` block will always be executed after the `try` and `catch` blocks, regardless of whether an exception was thrown or caught.
      https://www.php.net/manual/en/language.exceptions.php#language.exceptions.finally

  -
    question: |
      Which of the following SPL data structures provides a double-ended queue (deque) functionality?
    answers:
      -
        value: >
          `SplStack`
        correct: false
      -
        value: >
          `SplQueue`
        correct: true
      -
        value: >
          `SplHeap`
        correct: false
      -
        value: >
          `SplFixedArray`
        correct: false
    help: |
      `SplQueue` provides the main functionalities of a queue, which is a double-ended queue.
      https://www.php.net/manual/en/class.splqueue.php

  -
    question: >
      What is the correct way to define a private constructor in PHP?
    answers:
      -
        value: >
          `private function __construct() {}`
        correct: true
      -
        value: >
          `protected function __construct() {}`
        correct: false
      -
        value: >
          `public function __construct() {}`
        correct: false
      -
        value: >
          `function __construct() {}`
        correct: false
    help: |
      The `__construct` method can be declared with `public`, `protected`, or `private` visibility. A private constructor prevents direct instantiation from outside the class, often used in singleton patterns.
      https://www.php.net/manual/en/language.oop5.decon.php

  -
    question: |
      Which PHP function is used to get the current date and time?
    answers:
      -
        value: >
          `time()`
        correct: false
      -
        value: >
          `date()`
        correct: true
      -
        value: >
          `now()`
        correct: false
      -
        value: >
          `getdate()`
        correct: false
    help: |
      The `date()` function formats a local date and time.
      https://www.php.net/manual/en/function.date.php

  -
    question: |
      What is the purpose of the `static` keyword when used with a method in a class?
    answers:
      -
        value: >
          It makes the method accessible only from within the class.
        correct: false
      -
        value: >
          It allows the method to be called without creating an instance of the class.
        correct: true
      -
        value: >
          It ensures the method's value remains constant.
        correct: false
      -
        value: >
          It prevents the method from being overridden by child classes.
        correct: false
    help: |
      Static methods can be called without instantiating the class.
      https://www.php.net/manual/en/language.oop5.static.php

  -
    question: |
      Which of the following is a valid way to define an anonymous class in PHP?
    answers:
      -
        value: |
          ```php
          $object = new class {
              public function sayHello() {
                  echo "Hello";
              }
          };
          ```
        correct: true
      -
        value: |
          ```php
          $object = new Class() {
              public function sayHello() {
                  echo "Hello";
              }
          };
          ```
        correct: false
      -
        value: |
          ```php
          $object = function class {
              public function sayHello() {
                  echo "Hello";
              }
          };
          ```
        correct: false
      -
        value: |
          ```php
          $object = new (function() {
              public function sayHello() {
                  echo "Hello";
              }
          });
          ```
        correct: false
    help: |
      Anonymous classes are useful for simple, one-off objects. They are defined using `new class`.
      https://www.php.net/manual/en/language.oop5.anonymous.php

  -
    question: |
      What is the difference between `throw new Exception()` and `trigger_error()`?
    answers:
      -
        value: >
          `throw new Exception()` creates a catchable error, while `trigger_error()` creates a fatal error.
        correct: false
      -
        value: >
          `throw new Exception()` is used for exceptional conditions that can be handled, while `trigger_error()` generates a user-level error message that can be handled by an error handler.
        correct: true
      -
        value: >
          `trigger_error()` always stops script execution, while `throw new Exception()` does not.
        correct: false
      -
        value: >
          There is no significant difference; they are interchangeable.
        correct: false
    help: |
      Exceptions are part of structured error handling, allowing for `try...catch` blocks. `trigger_error()` generates a user-level error message, which can be caught by a custom error handler but typically doesn't stop execution unless the error level is E_USER_ERROR.
      https://www.php.net/manual/en/language.exceptions.php
      https://www.php.net/manual/en/function.trigger-error.php

  -
    question: |
      Which of the following is a characteristic of a Trait in PHP?
    answers:
      -
        value: >
          Traits can be instantiated directly.
        correct: false
      -
        value: >
          Traits can define properties and methods.
        correct: true
      -
        value: >
          Traits can implement interfaces.
        correct: true
      -
        value: >
          A class can use multiple traits.
        correct: true
    help: |
      Traits can contain abstract and concrete methods, as well as properties. A class can use multiple traits.
      https://www.php.net/manual/en/language.oop5.traits.php

  -
    question: >
      Which SPL class provides a way to store objects in a way that allows them to be used as keys in an array or `SplObjectStorage`?
    answers:
      -
        value: >
          `SplObjectStorage`
        correct: true
      -
        value: >
          `SplFixedArray`
        correct: false
      -
        value: >
          `SplDoublyLinkedList`
        correct: false
      -
        value: >
          `SplPriorityQueue`
        correct: false
    help: |
      `SplObjectStorage` is a special purpose class that maps objects to data or acts as a set of objects. This class implements `ArrayAccess`, `Countable`, and `Iterator`.
      https://www.php.net/manual/en/class.splobjectstorage.php

  -
    question: |
      What is the purpose of the `declare(strict_types=1);` statement in PHP?
    answers:
      -
        value: >
          It enables strict type checking for function arguments and return values in the current file.
        correct: true
      -
        value: >
          It makes all variables strictly typed throughout the application.
        correct: false
      -
        value: >
          It enforces strict comparison operators (`===`, `!==`) by default.
        correct: false
      -
        value: >
          It prevents type juggling.
        correct: false
    help: |
      The `declare(strict_types=1);` statement enables strict mode for scalar type declarations for the current file.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.strict

  -
    question: |
      Given the following PHP code, what will be the output?

      ```php
      <?php
      class MyClass {
          public function __construct() {
              echo "Constructor called.";
          }

          public function __destruct() {
              echo "Destructor called.";
          }
      }

      $obj = new MyClass();
      unset($obj);
      echo "End of script.";
      ?>
      ```
    answers:
      -
        value: >
          Constructor called.Destructor called.End of script.
        correct: true
      -
        value: >
          Constructor called.End of script.Destructor called.
        correct: false
      -
        value: >
          Constructor called.
        correct: false
      -
        value: >
          End of script.
        correct: false
    help: |
      The destructor `__destruct()` is called when the object is garbage collected or explicitly unset.
      https://www.php.net/manual/en/language.oop5.decon.php

  -
    question: |
      Which of the following PHP functions can be used to check if a class exists?
    answers:
      -
        value: >
          `class_exists()`
        correct: true
      -
        value: >
          `interface_exists()`
        correct: false
      -
        value: >
          `trait_exists()`
        correct: false
      -
        value: >
          `function_exists()`
        correct: false
    help: |
      `class_exists()` checks if the given class has been defined.
      https://www.php.net/manual/en/function.class-exists.php

  -
    question: >
      What is the primary benefit of using namespaces in PHP?
    answers:
      -
        value: >
          To improve script execution performance.
        correct: false
      -
        value: >
          To organize code and prevent name collisions between classes, interfaces, functions, and constants.
        correct: true
      -
        value: >
          To enable multiple inheritance.
        correct: false
      -
        value: >
          To define global variables.
        correct: false
    help: |
      Namespaces provide a way to group related code and avoid name collisions.
      https://www.php.net/manual/en/language.namespaces.php

  -
    question: |
      Which PHP function is used to convert a JSON string into a PHP variable?
    answers:
      -
        value: >
          `json_encode()`
        correct: false
      -
        value: >
          `json_decode()`
        correct: true
      -
        value: >
          `serialize()`
        correct: false
      -
        value: >
          `unserialize()`
        correct: false
    help: |
      `json_decode()` takes a JSON encoded string and converts it into a PHP value.
      https://www.php.net/manual/en/function.json-decode.php

  -
    question: |
      Consider the following code snippet. What will be the output?

      ```php
      <?php
      function foo() {
          static $count = 0;
          $count++;
          echo $count;
      }

      foo();
      foo();
      foo();
      ?>
      ```
    answers:
      -
        value: >
          123
        correct: true
      -
        value: >
          111
        correct: false
      -
        value: >
          3
        correct: false
      -
        value: >
          (Fatal error)
        correct: false
    help: |
      Static variables retain their value between function calls.
      https://www.php.net/manual/en/language.variables.scope.php#language.variables.scope.static

  -
    question: >
      Which PHP 8.0 feature allows you to specify parameter names when calling functions?
    answers:
      -
        value: >
          Named arguments
        correct: true
      -
        value: >
          Attributes
        correct: false
      -
        value: >
          Union types
        correct: false
      -
        value: >
          Match expression
        correct: false
    help: |
      Named arguments allow passing arguments to a function based on the parameter name, rather than the parameter position.
      https://www.php.net/manual/en/language.functions.named-arguments.php

  -
    question: |
      What is the correct way to define a constant in PHP that is accessible globally?
    answers:
      -
        value: >
          `const MY_GLOBAL_CONSTANT = 'value';`
        correct: false
      -
        value: >
          `define('MY_GLOBAL_CONSTANT', 'value');`
        correct: true
      -
        value: >
          `$GLOBALS['MY_GLOBAL_CONSTANT'] = 'value';`
        correct: false
      -
        value: >
          `public static $MY_GLOBAL_CONSTANT = 'value';`
        correct: false
    help: |
      The `define()` function defines a constant at runtime, making it globally accessible.
      https://www.php.net/manual/en/function.define.php

  -
    question: |
      Which of the following is true about PHP's `__invoke()` magic method?
    answers:
      -
        value: >
          It is called when a script is included.
        correct: false
      -
        value: >
          It is called when an object is used as a function.
        correct: true
      -
        value: >
          It is called when a property is accessed that doesn't exist.
        correct: false
      -
        value: >
          It is called when an object is serialized.
        correct: false
    help: |
      The `__invoke()` method is called when a script tries to call an object as a function.
      https://www.php.net/manual/en/language.oop5.magic.php#object.invoke

  -
    question: >
      Which SPL class is best suited for implementing a priority queue?
    answers:
      -
        value: >
          `SplStack`
        correct: false
      -
        value: >
          `SplQueue`
        correct: false
      -
        value: >
          `SplPriorityQueue`
        correct: true
      -
        value: >
          `SplHeap`
        correct: false
    help: |
      The `SplPriorityQueue` class provides the main functionalities of a Heap, but with the added feature of priorities.
      https://www.php.net/manual/en/class.splpriorityqueue.php

  -
    question: |
      What is the purpose of the `parent::` keyword in PHP?
    answers:
      -
        value: >
          To call a method or access a property of the current class.
        correct: false
      -
        value: >
          To call a method or access a property of the parent class.
        correct: true
      -
        value: >
          To call a static method or access a static property of the child class.
        correct: false
      -
        value: >
          To define a new parent class.
        correct: false
    help: |
      `parent::` is used to refer to the parent class's implementation of a method or to access parent's static properties.
      https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php

  -
    question: |
      Which of the following is a valid way to define a constant in an interface in PHP?
    answers:
      -
        value: >
          `const MY_INTERFACE_CONSTANT = 'value';`
        correct: true
      -
        value: >
          `public const MY_INTERFACE_CONSTANT = 'value';`
        correct: true
      -
        value: >
          `define('MY_INTERFACE_CONSTANT', 'value');`
        correct: false
      -
        value: >
          `var MY_INTERFACE_CONSTANT = 'value';`
        correct: false
    help: |
      Constants can be defined in interfaces. They are implicitly public.
      https://www.php.net/manual/en/language.oop5.interfaces.php#language.oop5.interfaces.constants

  -
    question: |
      What is the output of the following PHP code?

      ```php
      <?php
      $numbers = [1, 2, 3];
      array_map(function ($n) {
          return $n * 2;
      }, $numbers);
      print_r($numbers);
      ?>
      ```
    answers:
      -
        value: >
          Array ( [0] => 1 [1] => 2 [2] => 3 )
        correct: true
      -
        value: >
          Array ( [0] => 2 [1] => 4 [2] => 6 )
        correct: false
      -
        value: >
          (No output, fatal error)
        correct: false
      -
        value: >
          (Syntax error)
        correct: false
    help: |
      `array_map()` returns a new array containing the results of applying the callback function to each element. It does not modify the original array.
      https://www.php.net/manual/en/function.array-map.php

  -
    question: |
      Which PHP function is used to include a file only once, preventing multiple inclusions and potential redefinition errors?
    answers:
      -
        value: >
          `include`
        correct: false
      -
        value: >
          `require`
        correct: false
      -
        value: >
          `include_once`
        correct: true
      -
        value: >
          `require_once`
        correct: true
    help: |
      `include_once` and `require_once` include and evaluate the specified file during the execution of the script. If the file has already been included, it will not be included again.
      https://www.php.net/manual/en/function.include-once.php
      https://www.php.net/manual/en/function.require-once.php

  -
    question: |
      In PHP, what is the purpose of the `__autoload()` function (or its modern equivalent)?
    answers:
      -
        value: >
          To automatically load classes when they are first used, without explicit `require` or `include` statements.
        correct: true
      -
        value: >
          To automatically execute a script when the server starts.
        correct: false
      -
        value: >
          To automatically include all files in a directory.
        correct: false
      -
        value: >
          To automatically register all functions in a file.
        correct: false
    help: |
      The `__autoload()` function (deprecated in favor of `spl_autoload_register()`) is used to automatically load class files when a class is first referenced.
      https://www.php.net/manual/en/language.oop5.autoload.php

  -
    question: >
      Which of the following is a valid way to define a read-only property in PHP 8.1+?
    answers:
      -
        value: >
          `public readonly string $name;`
        correct: true
      -
        value: >
          `public const string $name;`
        correct: false
      -
        value: >
          `private string $name readonly;`
        correct: false
      -
        value: >
          `public string $name = readonly;`
        correct: false
    help: |
      PHP 8.1 introduced the `readonly` keyword for properties, allowing them to be initialized only once.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly

  -
    question: |
      Which PHP function is used to get information about a variable, including its type and value?
    answers:
      -
        value: >
          `print_r()`
        correct: false
      -
        value: >
          `var_dump()`
        correct: true
      -
        value: >
          `echo`
        correct: false
      -
        value: >
          `debug_zval_dump()`
        correct: false
    help: |
      `var_dump()` displays structured information about one or more expressions that includes its type and value.
      https://www.php.net/manual/en/function.var-dump.php

  -
    question: >
      What is the correct way to define a constant in PHP 8.2 that is accessible within a class and its child classes, but not outside?
    answers:
      -
        value: >
          `private const MY_CONSTANT = 'value';`
        correct: false
      -
        value: >
          `protected const MY_CONSTANT = 'value';`
        correct: true
      -
        value: >
          `public const MY_CONSTANT = 'value';`
        correct: false
      -
        value: >
          `define('MY_CONSTANT', 'value');`
        correct: false
    help: |
      Class constants can have visibility modifiers (public, protected, private) since PHP 7.1. `protected` makes it accessible within the class and its descendants.
      https://www.php.net/manual/en/language.oop5.constants.php#language.oop5.constants.visibility

  -
    question: |
      Which of the following is a valid way to define an anonymous function that can be assigned to a variable?
    answers:
      -
        value: |
          ```php
          $func = function() {
              // ...
          };
          ```
        correct: true
      -
        value: |
          ```php
          $func = new Function() {
              // ...
          };
          ```
        correct: false
      -
        value: |
          ```php
          $func = function;
          // ...
          end function;
          ```
        correct: false
      -
        value: |
          ```php
          $func = create_function('', '');
          ```
        correct: false
    help: |
      Anonymous functions (closures) are defined using the `function` keyword without a name and can be assigned to variables. `create_function` is deprecated.
      https://www.php.net/manual/en/functions.anonymous.php

  -
    question: |
      What is the output of the following PHP code snippet?

      ```php
      <?php
      class A {
          public function foo() {
              echo "A::foo\n";
          }
      }

      class B extends A {
          public function foo() {
              echo "B::foo\n";
          }
      }

      class C extends B {
          public function foo() {
              parent::foo();
              echo "C::foo\n";
          }
      }

      $obj = new C();
      $obj->foo();
      ?>
      ```
    answers:
      -
        value: >
          B::foo
          C::foo
        correct: true
      -
        value: >
          A::foo
          B::foo
          C::foo
        correct: false
      -
        value: >
          C::foo
          B::foo
        correct: false
      -
        value: >
          A::foo
          C::foo
        correct: false
    help: |
      `parent::foo()` in class `C` refers to the `foo()` method in its direct parent, which is class `B`.
      https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php

  -
    question: >
      Which PHP extension provides functions for working with regular expressions (PCRE)?
    answers:
      -
        value: >
          `ext-mbstring`
        correct: false
      -
        value: >
          `ext-pcre`
        correct: true
      -
        value: >
          `ext-spl`
        correct: false
      -
        value: >
          `ext-json`
        correct: false
    help: |
      The PCRE extension provides functions for pattern matching using Perl-compatible regular expressions.
      https://www.php.net/manual/en/book.pcre.php

  -
    question: >
      Which SPL class provides an array-like interface for fixed-size arrays?
    answers:
      -
        value: >
          `SplFixedArray`
        correct: true
      -
        value: >
          `ArrayObject`
        correct: false
      -
        value: >
          `SplStack`
        correct: false
      -
        value: >
          `SplQueue`
        correct: false
    help: |
      The `SplFixedArray` class provides the main functionalities of a standard PHP array, but with the additional feature of being fixed-size.
      https://www.php.net/manual/en/class.splfixedarray.php

  -
    question: |
      What is the purpose of the `#[Deprecated]` attribute (available since PHP 8.0)?
    answers:
      -
        value: >
          To mark a class, method, or property as no longer recommended for use.
        correct: true
      -
        value: >
          To prevent a class, method, or property from being used.
        correct: false
      -
        value: >
          To automatically remove deprecated code during compilation.
        correct: false
      -
        value: >
          To generate a fatal error when deprecated code is accessed.
        correct: false
    help: |
      The `#[Deprecated]` attribute is a built-in attribute that can be used to mark functions, classes, methods, properties, and class constants as deprecated.
      https://www.php.net/manual/en/language.attributes.php#language.attributes.predefined.deprecated

  -
    question: |
      Which of the following is NOT a valid visibility keyword for class members in PHP?
    answers:
      -
        value: >
          `public`
        correct: false
      -
        value: >
          `private`
        correct: false
      -
        value: >
          `protected`
        correct: false
      -
        value: >
          `internal`
        correct: true
    help: |
      PHP supports `public`, `protected`, and `private` visibility.
      https://www.php.net/manual/en/language.oop5.visibility.php

  -
    question: |
      What is the output of the following PHP code?

      ```php
      <?php
      try {
          throw new Exception("Error occurred!");
      } catch (Throwable $e) {
          echo "Caught: " . $e->getMessage();
      } finally {
          echo " Finally block executed.";
      }
      ?>
      ```
    answers:
      -
        value: >
          Caught: Error occurred! Finally block executed.
        correct: true
      -
        value: >
          Finally block executed. Caught: Error occurred!
        correct: false
      -
        value: >
          Caught: Error occurred!
        correct: false
      -
        value: >
          Finally block executed.
        correct: false
    help: |
      The `catch` block executes when an exception is thrown, and the `finally` block always executes afterwards. `Throwable` is the base interface for all exceptions and errors.
      https://www.php.net/manual/en/language.exceptions.php

  -
    question: >
      Which PHP 8.0 feature allows for more concise conditional expressions, similar to `switch` statements but returning a value?
    answers:
      -
        value: >
          `match` expression
        correct: true
      -
        value: >
          `switch` expression
        correct: false
      -
        value: >
          Ternary operator
        correct: false
      -
        value: >
          Null coalescing operator
        correct: false
    help: |
      The `match` expression is similar to `switch` but has more concise syntax and returns a value.
      https://www.php.net/manual/en/control-structures.match.php

  -
    question: |
      Which of the following is a correct way to define a PHP 8.0+ Union Type?
    answers:
      -
        value: >
          `function foo(int|string $param)`
        correct: true
      -
        value: >
          `function foo(int, string $param)`
        correct: false
      -
        value: >
          `function foo(int or string $param)`
        correct: false
      -
        value: >
          `function foo(array<int|string> $param)`
        correct: false
    help: |
      Union types allow a variable to accept values of multiple different types. They are defined using the `|` operator.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.union

  -
    question: |
      What is the purpose of the `throw` expression (available since PHP 8.0)?
    answers:
      -
        value: >
          To define a new exception class.
        correct: false
      -
        value: >
          To re-throw an exception after catching it.
        correct: false
      -
        value: >
          To allow `throw` to be used in contexts where only an expression is allowed, such as arrow functions or the null coalescing operator.
        correct: true
      -
        value: >
          To suppress exceptions.
        correct: false
    help: |
      In PHP 8.0, `throw` became an expression, meaning it can be used in more contexts than before, such as in arrow functions or the null coalescing operator.
      https://www.php.net/manual/en/language.exceptions.php#language.exceptions.throw-expression

  -
    question: |
      Which of the following is a valid way to define a property with a default value in PHP?
    answers:
      -
        value: >
          `public string $name = 'Default';`
        correct: true
      -
        value: >
          `public string $name;` (and set in constructor)
        correct: true
      -
        value: >
          `public string $name: 'Default';`
        correct: false
      -
        value: >
          `public string $name => 'Default';`
        correct: false
    help: |
      Class properties can be initialized with a default value directly in their declaration or within the constructor.
      https://www.php.net/manual/en/language.oop5.properties.php

  -
    question: >
      Which SPL class is designed to provide a stack (LIFO) data structure?
    answers:
      -
        value: >
          `SplQueue`
        correct: false
      -
        value: >
          `SplStack`
        correct: true
      -
        value: >
          `SplHeap`
        correct: false
      -
        value: >
          `SplDoublyLinkedList`
        correct: false
    help: |
      The `SplStack` class provides the main functionalities of a stack, which is a LIFO (Last In, First Out) data structure.
      https://www.php.net/manual/en/class.splstack.php

  -
    question: |
      What is the purpose of the `readonly` keyword when applied to a class in PHP 8.2?
    answers:
      -
        value: >
          It makes all properties of the class implicitly `readonly`.
        correct: true
      -
        value: >
          It prevents the class from being extended.
        correct: false
      -
        value: >
          It makes all methods of the class implicitly `final`.
        correct: false
      -
        value: >
          It prevents the class from being instantiated.
        correct: false
    help: |
      Readonly classes, introduced in PHP 8.2, automatically make all declared properties `readonly`.
      https://www.php.net/manual/en/migration82.new-features.php#migration82.new-features.readonly-classes

  -
    question: |
      Which of the following is a valid way to define a `WeakMap` in PHP 8.0+?
    answers:
      -
        value: >
          `$map = new WeakMap();`
        correct: true
      -
        value: >
          `$map = new WeakReference();`
        correct: false
      -
        value: >
          `$map = new SplWeakMap();`
        correct: false
      -
        value: >
          `$map = new Map(Weak);`
        correct: false
    help: |
      `WeakMap` allows creating a map from objects to arbitrary values, without preventing the objects used as keys from being garbage collected.
      https://www.php.net/manual/en/class.weakmap.php

  -
    question: |
      What is the primary difference between `Error` and `Exception` in PHP's error handling?
    answers:
      -
        value: >
          `Error` represents internal PHP errors (e.g., parse errors, type errors), while `Exception` represents user-defined or application-level errors.
        correct: true
      -
        value: >
          `Error` can be caught, but `Exception` cannot.
        correct: false
      -
        value: >
          `Exception` always stops script execution, while `Error` does not.
        correct: false
      -
        value: >
          There is no difference; they are interchangeable.
        correct: false
    help: |
      `Error` is the base class for internal PHP errors, while `Exception` is the base class for user-defined exceptions. Both implement the `Throwable` interface.
      https://www.php.net/manual/en/class.error.php
      https://www.php.net/manual/en/class.exception.php

  -
    question: |
      Which PHP 8.1 feature allows you to define a property and initialize it from a constructor parameter with a single declaration?
    answers:
      -
        value: >
          Constructor property promotion
        correct: true
      -
        value: >
          Named arguments
        correct: false
      -
        value: >
          Readonly properties
        correct: false
      -
        value: >
          Union types
        correct: false
    help: |
      Constructor property promotion (PHP 8.0) allows for more concise class definitions by combining property declaration and constructor assignment.
      https://www.php.net/manual/en/language.oop5.decon.php#language.oop5.decon.constructor.promotion

  -
    question: |
      What is the correct way to declare a function that accepts an `int` or `float` and returns a `string` in PHP 8.0+?
    answers:
      -
        value: >
          `function calculate(int|float $value): string`
        correct: true
      -
        value: >
          `function calculate(int, float $value): string`
        correct: false
      -
        value: >
          `function calculate(int or float $value): string`
        correct: false
      -
        value: >
          `function calculate(int $value, float $value): string`
        correct: false
    help: |
      Union types are used to specify that a variable can be one of several types. The return type is specified after a colon.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.union

  -
    question: |
      Which PHP function is used to get the length of a string?
    answers:
      -
        value: >
          `count()`
        correct: false
      -
        value: >
          `strlen()`
        correct: true
      -
        value: >
          `sizeof()`
        correct: false
      -
        value: >
          `length()`
        correct: false
    help: |
      `strlen()` returns the string length.
      https://www.php.net/manual/en/function.strlen.php

  -
    question: |
      Which of the following describes a "closure" in PHP?
    answers:
      -
        value: >
          An anonymous function that can inherit variables from the parent scope.
        correct: true
      -
        value: >
          A function that is automatically called when a script finishes execution.
        correct: false
      -
        value: >
          A class that cannot be extended.
        correct: false
      -
        value: >
          A method that is accessible only within its own class.
        correct: false
    help: |
      Closures are anonymous functions that can access variables from the scope in which they were created, even after that scope has ceased to exist.
      https://www.php.net/manual/en/functions.anonymous.php

  -
    question: |
      What is the purpose of the `#[AllowDynamicProperties]` attribute in PHP 8.2?
    answers:
      -
        value: >
          To explicitly allow dynamic properties on a class, suppressing the deprecation warning.
        correct: true
      -
        value: >
          To prevent dynamic properties from being created on a class.
        correct: false
      -
        value: >
          To declare a property as dynamic.
        correct: false
      -
        value: >
          To enable magic methods like `__get` and `__set`.
        correct: false
    help: |
      In PHP 8.2, dynamic properties are deprecated. The `#[AllowDynamicProperties]` attribute can be used to explicitly allow them for a class.
      https://www.php.net/manual/en/migration82.deprecated.php#migration82.deprecated.dynamic-properties

  -
    question: |
      Which PHP function is used to convert a PHP variable into a JSON string?
    answers:
      -
        value: >
          `json_encode()`
        correct: true
      -
        value: >
          `json_decode()`
        correct: false
      -
        value: >
          `serialize()`
        correct: false
      -
        value: >
          `unserialize()`
        correct: false
    help: |
      `json_encode()` returns a JSON encoded string on success or `false` on failure.
      https://www.php.net/manual/en/function.json-encode.php

  -
    question: |
      What is the output of the following PHP code?

      ```php
      <?php
      $x = 5;
      $y = &$x;
      $y = 10;
      echo $x;
      ?>
      ```
    answers:
      -
        value: >
          10
        correct: true
      -
        value: >
          5
        correct: false
      -
        value: >
          (No output, error)
        correct: false
      -
        value: >
          (Syntax error)
        correct: false
    help: |
      `$y = &$x;` creates a reference, meaning `$y` and `$x` point to the same memory location. Changing `$y` also changes `$x`.
      https://www.php.net/manual/en/language.references.whatdo.php

  -
    question: >
      Which of the following is a new feature introduced in PHP 8.1?
    answers:
      -
        value: >
          Enums
        correct: true
      -
        value: >
          Named arguments
        correct: false
      -
        value: >
          Attributes
        correct: false
      -
        value: >
          Readonly classes
        correct: false
    help: |
      PHP 8.1 introduced Enums, allowing for the definition of a new type that has a finite number of possible values.
      https://www.php.net/manual/en/language.enumerations.php

  -
    question: |
      Which SPL class can be used to iterate over a directory?
    answers:
      -
        value: >
          `FilesystemIterator`
        correct: true
      -
        value: >
          `DirectoryIterator`
        correct: true
      -
        value: >
          `SplFileObject`
        correct: false
      -
        value: >
          `RecursiveDirectoryIterator`
        correct: true
    help: |
      `DirectoryIterator`, `FilesystemIterator`, and `RecursiveDirectoryIterator` are SPL classes used for iterating over file system entries.
      https://www.php.net/manual/en/class.directoryiterator.php
      https://www.php.net/manual/en/class.filesystemiterator.php
      https://www.php.net/manual/en/class.recursivedirectoryiterator.php

  -
    question: |
      What is the purpose of the `#[SensitiveParameter]` attribute in PHP 8.2?
    answers:
      -
        value: >
          To mark a parameter as sensitive, preventing its value from appearing in stack traces.
        correct: true
      -
        value: >
          To encrypt the parameter's value automatically.
        correct: false
      -
        value: >
          To validate the parameter's type strictly.
        correct: false
      -
        value: >
          To make the parameter optional.
        correct: false
    help: |
      The `#[SensitiveParameter]` attribute, introduced in PHP 8.2, allows you to mark parameters whose values should not be exposed in stack traces.
      https://www.php.net/manual/en/migration82.new-features.php#migration82.new-features.sensitive-parameter-attribute

  -
    question: |
      Which of the following is a valid way to define a `WeakReference` in PHP 7.4+?
    answers:
      -
        value: >
          `$ref = WeakReference::create($object);`
        correct: true
      -
        value: >
          `$ref = new WeakReference($object);`
        correct: false
      -
        value: >
          `$ref = new WeakMap($object);`
        correct: false
      -
        value: >
          `$ref = WeakRef($object);`
        correct: false
    help: |
      `WeakReference` allows you to hold a reference to an object that does not prevent the object from being garbage collected. `WeakReference::create()` is the correct way to create one.
      https://www.php.net/manual/en/class.weakreference.php

  -
    question: |
      What is the output of the following PHP code, assuming `my_function` is not defined?

      ```php
      <?php
      try {
          my_function();
      } catch (Error $e) {
          echo "Caught an Error: " . $e->getMessage();
      } catch (Exception $e) {
          echo "Caught an Exception: " . $e->getMessage();
      }
      ?>
      ```
    answers:
      -
        value: >
          Caught an Error: Call to undefined function my_function()
        correct: true
      -
        value: >
          Caught an Exception: Call to undefined function my_function()
        correct: false
      -
        value: >
          (Fatal error, not caught)
        correct: false
      -
        value: >
          (No output)
        correct: false
    help: |
      Calling an undefined function throws an `Error` (specifically `Error\UndefinedFunctionError`), which can be caught by a `catch (Error $e)` block.
      https://www.php.net/manual/en/class.error.php

  -
    question: |
      Which PHP extension is crucial for handling multibyte character encodings?
    answers:
      -
        value: >
          `ext-iconv`
        correct: false
      -
        value: >
          `ext-mbstring`
        correct: true
      -
        value: >
          `ext-intl`
        correct: false
      -
        value: >
          `ext-xml`
        correct: false
    help: |
      The `mbstring` extension provides multibyte specific string functions that help you deal with multibyte encodings in PHP.
      https://www.php.net/manual/en/book.mbstring.php

  -
    question: |
      Which SPL class provides a min-heap or max-heap data structure?
    answers:
      -
        value: >
          `SplStack`
        correct: false
      -
        value: >
          `SplQueue`
        correct: false
      -
        value: >
          `SplHeap`
        correct: true
      -
        value: >
          `SplPriorityQueue`
        correct: true
    help: |
      `SplHeap` is the base class for heaps, providing common functionality. `SplMinHeap` and `SplMaxHeap` (subclasses of `SplHeap`) provide specific min-heap and max-heap implementations. `SplPriorityQueue` is also a type of heap.
      https://www.php.net/manual/en/class.splheap.php
      https://www.php.net/manual/en/class.splpriorityqueue.php

  -
    question: |
      What is the purpose of the `__debugInfo()` magic method in PHP?
    answers:
      -
        value: >
          To provide custom debug information when `var_dump()` is called on an object.
        correct: true
      -
        value: >
          To log debugging messages to a file.
        correct: false
      -
        value: >
          To define a custom error handler.
        correct: false
      -
        value: >
          To enable a debugger for the class.
        correct: false
    help: |
      The `__debugInfo()` magic method is called when `var_dump()` is invoked on an object to retrieve properties that should be shown.
      https://www.php.net/manual/en/language.oop5.magic.php#object.debuginfo

  -
    question: |
      Which of the following is a valid way to define an Enum in PHP 8.1+?
    answers:
      -
        value: |
          ```php
          enum Status
          {
              case Draft;
              case Published;
              case Archived;
          }
          ```
        correct: true
      -
        value: |
          ```php
          class Status extends Enum
          {
              const Draft = 'draft';
              const Published = 'published';
          }
          ```
        correct: false
      -
        value: |
          ```php
          interface StatusEnum
          {
              public const Draft = 'draft';
          }
          ```
        correct: false
      -
        value: |
          ```php
          abstract class Status
          {
              public static $Draft;
          }
          ```
        correct: false
    help: |
      Enums are defined using the `enum` keyword and can have `case`s.
      https://www.php.net/manual/en/language.enumerations.php

  -
    question: |
      Which PHP function is used to remove whitespace from the beginning and end of a string?
    answers:
      -
        value: >
          `trim()`
        correct: true
      -
        value: >
          `ltrim()`
        correct: false
      -
        value: >
          `rtrim()`
        correct: false
      -
        value: >
          `strip_tags()`
        correct: false
    help: |
      `trim()` strips whitespace (or other characters) from the beginning and end of a string.
      https://www.php.net/manual/en/function.trim.php

  -
    question: |
      What is the purpose of the `#[Override]` attribute in PHP 8.2?
    answers:
      -
        value: >
          To explicitly mark a method as overriding a parent method, causing a compile-time error if no such parent method exists.
        correct: true
      -
        value: >
          To prevent a method from being overridden by child classes.
        correct: false
      -
        value: >
          To force a child class to implement a method.
        correct: false
      -
        value: >
          To allow a method to override a final method.
        correct: false
    help: |
      The `#[Override]` attribute, introduced in PHP 8.2, ensures that a method is indeed overriding a parent method. If it's not, a compile-time error is thrown.
      https://www.php.net/manual/en/migration82.new-features.php#migration82.new-features.override-attribute