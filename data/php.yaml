category: PHP
questions:
  - question: Which of the following statements about PHP 8.2's new features is TRUE?
    answers:
      - value: Readonly classes are introduced, allowing all properties to be implicitly
          readonly.
        correct: true
      - value: Dynamic properties are deprecated, emitting a deprecation notice when
          used.
        correct: true
      - value: New `null` and `false` types are added for stricter type declarations.
        correct: false
      - value: The `#[AllowDynamicProperties]` attribute can be used to explicitly allow
          dynamic properties on a class.
        correct: true
    help: >-
      PHP 8.2 introduced readonly classes, explicit deprecation of dynamic
      properties, and the `#[AllowDynamicProperties]` attribute to opt-in to
      dynamic properties for specific classes.

      https://www.php.net/manual/en/migration82.new-features.php
  - question: |-
      Consider the following PHP code snippet:

      ```php
      class User
      {
          public function __construct(private string $name, public int $age)
          {
              // ...
          }
      }

      $user = new User('Alice', 30);
      ```

      What is this feature called, and which PHP version introduced it?
    answers:
      - value: Constructor Property Promotion, PHP 8.0
        correct: true
      - value: Automatic Property Assignment, PHP 7.4
        correct: false
      - value: Constructor Argument Shorthand, PHP 8.1
        correct: false
      - value: Property Autowiring, PHP 8.0
        correct: false
    help: |-
      Constructor Property Promotion was introduced in PHP 8.0, allowing properties to be declared and initialized directly in the constructor's signature.
      https://www.php.net/manual/en/language.oop5.decon.php#language.oop5.decon.constructor.promotion
  - question: Which of the following is the correct way to import a class `MyClass`
      from the `App\Controller` namespace into the current file, assuming
      `MyClass` is defined as `namespace App\Controller; class MyClass {}`?
    answers:
      - value: "`use App\\Controller\\MyClass;`"
        correct: true
      - value: "`import App\\Controller\\MyClass;`"
        correct: false
      - value: "`require_once 'App/Controller/MyClass.php';`"
        correct: false
      - value: "`namespace App\\Controller { class MyClass {} }`"
        correct: false
    help: >-
      The `use` keyword is used to import namespaces, classes, interfaces,
      traits, and functions/constants into the current file, making them
      accessible without their fully qualified name.

      https://www.php.net/manual/en/language.namespaces.importing.php
  - question: |-
      Given the interface:

      ```php
      interface LoggerInterface
      {
          public function log(string $message);
          public function error(string $message);
      }
      ```

      Which of the following class implementations is valid?
    answers:
      - value: |-
          ```php
          class FileLogger implements LoggerInterface
          {
              public function log(string $message) { /* ... */ }
              public function error(string $message) { /* ... */ }
          }
          ```
        correct: true
      - value: |-
          ```php
          class DatabaseLogger implements LoggerInterface
          {
              private function log(string $message) { /* ... */ }
              public function error(string $message) { /* ... */ }
          }
          ```
        correct: false
      - value: |-
          ```php
          class ConsoleLogger implements LoggerInterface
          {
              public function log(string $msg) { /* ... */ }
              public function error(string $message) { /* ... */ }
          }
          ```
        correct: false
      - value: |-
          ```php
          class NullLogger implements LoggerInterface
          {
              public function log(string $message) { /* ... */ }
          }
          ```
        correct: false
    help: >-
      When implementing an interface, all methods declared in the interface must
      be defined in the implementing class with the same visibility (public) and
      signature (number and type of arguments).

      https://www.php.net/manual/en/language.oop5.interfaces.php
  - question: |-
      What will be the output of the following PHP code?

      ```php
      $message = 'Hello';
      $closure = function () use ($message) {
          $message = 'World';
          echo $message;
      };
      $closure();
      echo $message;
      ```
    answers:
      - value: WorldHello
        correct: true
      - value: HelloWorld
        correct: false
      - value: HelloHello
        correct: false
      - value: WorldWorld
        correct: false
    help: >-
      When a variable is imported into a closure using `use`, it is imported by
      value. Changes to the variable inside the closure do not affect the
      original variable outside the closure, unless it's imported by reference
      (`use (&$message)`).

      https://www.php.net/manual/en/functions.anonymous.php
  - question: Which statement is TRUE regarding abstract classes and abstract
      methods in PHP?
    answers:
      - value: An abstract class must contain at least one abstract method.
        correct: false
      - value: A class containing an abstract method must be declared abstract.
        correct: true
      - value: Abstract methods must be implemented by non-abstract child classes.
        correct: true
      - value: Abstract methods can have a body (implementation).
        correct: false
      - value: Abstract classes can be instantiated directly.
        correct: false
    help: >-
      If a class contains at least one abstract method, it must be declared
      abstract. Abstract methods cannot have a body and must be implemented by
      any non-abstract child class.

      https://www.php.net/manual/en/language.oop5.abstract.php
  - question: What is the purpose of the `finally` block in a
      `try...catch...finally` statement in PHP?
    answers:
      - value: It is always executed, regardless of whether an exception was thrown or
          caught.
        correct: true
      - value: It is executed only if no exception was thrown in the `try` block.
        correct: false
      - value: It is executed only if an exception was caught by a `catch` block.
        correct: false
      - value: It is used to re-throw exceptions that were not handled.
        correct: false
    help: >-
      The `finally` block is executed after the `try` and `catch` blocks,
      regardless of whether an exception was thrown or caught. It's commonly
      used for cleanup operations.

      https://www.php.net/manual/en/language.exceptions.php
  - question: Consider two traits, `TraitA` and `TraitB`, both defining a method
      `doSomething()`. If a class `MyClass` uses both traits, how can you
      resolve the method name conflict?
    answers:
      - value: Using the `insteadof` operator to specify which trait's method to use.
        correct: true
      - value: Using the `as` operator to rename one of the conflicting methods.
        correct: true
      - value: By defining `doSomething()` directly in `MyClass`, which will override
          both trait methods.
        correct: true
      - value: It's not possible to use two traits with conflicting method names; PHP
          will throw a fatal error.
        correct: false
    help: |-
      PHP provides mechanisms to resolve method name conflicts when using multiple traits: `insteadof` to choose one, `as` to rename, or defining the method directly in the class to override.
      https://www.php.net/manual/en/language.oop5.traits.php#language.oop5.traits.conflict
  - question: Which PHP extension is primarily used for internationalization and
      localization tasks, such as date formatting, number formatting, and
      collation?
    answers:
      - value: intl
        correct: true
      - value: mbstring
        correct: false
      - value: iconv
        correct: false
      - value: gettext
        correct: false
    help: >-
      The `intl` (Internationalization Functions) extension provides various
      functionalities for internationalizing PHP applications, including
      locale-aware formatting and parsing.

      https://www.php.net/manual/en/book.intl.php
  - question: Which SPL class can be used to iterate over an array or an object
      implementing `Traversable` as if it were a simple array, providing
      array-like access to its elements?
    answers:
      - value: ArrayIterator
        correct: true
      - value: SplFixedArray
        correct: false
      - value: RecursiveArrayIterator
        correct: false
      - value: IteratorAggregate
        correct: false
    help: >-
      The `ArrayIterator` class allows iteration over arrays and objects that
      implement `Traversable`, providing array-like functionality and methods
      for manipulation.

      https://www.php.net/manual/en/class.arrayiterator.php
  - question: In PHP 8.1, what is the purpose of the `readonly` keyword when applied
      to class properties?
    answers:
      - value: It ensures that the property can only be initialized once, either at
          declaration or in the constructor.
        correct: true
      - value: It makes the property immutable, preventing any modification after object
          creation.
        correct: true
      - value: It makes the property accessible only within the class where it's
          defined.
        correct: false
      - value: It allows the property to be read but not written to, even within the
          class itself.
        correct: false
    help: |-
      The `readonly` property was introduced in PHP 8.1. A readonly property can only be initialized once, either at the point of declaration or within the class's constructor. After initialization, it cannot be modified.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly
  - question: Which of the following is a valid way to declare a named argument in
      PHP 8.0 and later?
    answers:
      - value: "`myFunction(name: 'Alice', age: 30);`"
        correct: true
      - value: "`myFunction('Alice', age: 30);`"
        correct: true
      - value: "`myFunction(name = 'Alice', age = 30);`"
        correct: false
      - value: "`myFunction(name => 'Alice', age => 30);`"
        correct: false
    help: |-
      Named arguments were introduced in PHP 8.0, allowing arguments to be passed to a function based on their parameter name, regardless of their order. Positional arguments can be mixed with named arguments, but positional arguments must come before named arguments.
      https://www.php.net/manual/en/functions.arguments.php#functions.named-arguments
  - question: What is the primary benefit of using namespaces in PHP?
    answers:
      - value: To avoid name collisions between classes, functions, and constants.
        correct: true
      - value: To improve application performance by optimizing class loading.
        correct: false
      - value: To enforce strict type checking for all variables.
        correct: false
      - value: To define global variables that are accessible everywhere.
        correct: false
    help: >-
      Namespaces provide a way to group related code and prevent naming
      conflicts when combining code from different libraries or applications.

      https://www.php.net/manual/en/language.namespaces.php
  - question: Which magic method is automatically called when a script attempts to
      call a method that does not exist or is inaccessible in an object?
    answers:
      - value: "`__call()`"
        correct: true
      - value: " `__callStatic()`"
        correct: false
      - value: "`__get()`"
        correct: false
      - value: "`__set()`"
        correct: false
    help: >-
      The `__call()` magic method is invoked when an inaccessible or
      non-existent method is called on an object. `__callStatic()` is for static
      method calls.

      https://www.php.net/manual/en/language.oop5.overloading.php#object.call
  - question: What is the key difference between an anonymous function and a closure
      in PHP?
    answers:
      - value: A closure is an anonymous function that can inherit variables from the
          parent scope.
        correct: true
      - value: Anonymous functions are always static, while closures are not.
        correct: false
      - value: Closures are only available in PHP 7+, while anonymous functions are
          older.
        correct: false
      - value: There is no difference; the terms are interchangeable.
        correct: false
    help: >-
      In PHP, anonymous functions are implemented using the `Closure` class. A
      'closure' specifically refers to an anonymous function that has access to
      variables from the scope in which it was created, typically via the `use`
      keyword.

      https://www.php.net/manual/en/functions.anonymous.php
  - question: Which of the following is a valid characteristic of an abstract class
      in PHP?
    answers:
      - value: It cannot be instantiated directly.
        correct: true
      - value: It can contain both abstract and non-abstract methods.
        correct: true
      - value: It must implement all methods from any interfaces it declares to
          implement.
        correct: false
      - value: All its methods must be declared abstract.
        correct: false
    help: >-
      Abstract classes cannot be instantiated directly and can contain a mix of
      abstract (without implementation) and concrete (with implementation)
      methods.

      https://www.php.net/manual/en/language.oop5.abstract.php
  - question: When handling exceptions in PHP, what is the correct order of `catch`
      blocks if you have multiple specific exception types and a generic
      `Exception` catch block?
    answers:
      - value: From most specific to most general (e.g., `SpecificException` then
          `Exception`).
        correct: true
      - value: From most general to most specific (e.g., `Exception` then
          `SpecificException`).
        correct: false
      - value: The order does not matter.
        correct: false
      - value: Only one `catch` block is allowed per `try` statement.
        correct: false
    help: >-
      When multiple `catch` blocks are used, PHP will try to match the thrown
      exception with the first `catch` block that can handle it. Therefore, more
      specific exception types should be caught before more general ones to
      ensure they are handled correctly.

      https://www.php.net/manual/en/language.exceptions.php
  - question: Which of the following statements about Traits in PHP is TRUE?
    answers:
      - value: Traits can contain properties and methods.
        correct: true
      - value: A class can use multiple traits.
        correct: true
      - value: Traits can be instantiated directly.
        correct: false
      - value: Traits are a form of multiple inheritance in PHP.
        correct: false
    help: >-
      Traits are a mechanism for code reuse in single inheritance languages like
      PHP. They allow a class to use multiple behaviors (methods and properties)
      from different traits.

      https://www.php.net/manual/en/language.oop5.traits.php
  - question: Which PHP extension provides functions for working with multi-byte
      character encodings, essential for handling non-ASCII text?
    answers:
      - value: mbstring
        correct: true
      - value: iconv
        correct: false
      - value: intl
        correct: false
      - value: xml
        correct: false
    help: >-
      The `mbstring` (Multi-Byte String) extension provides multi-byte specific
      string functions that deal with multi-byte encodings, such as UTF-8,
      ensuring correct handling of various character sets.

      https://www.php.net/manual/en/book.mbstring.php
  - question: Which SPL class provides a way to iterate over a directory's contents,
      including subdirectories, in a recursive manner?
    answers:
      - value: RecursiveDirectoryIterator
        correct: true
      - value: DirectoryIterator
        correct: false
      - value: FilesystemIterator
        correct: false
      - value: SplFileInfo
        correct: false
    help: >-
      The `RecursiveDirectoryIterator` provides an interface for iterating
      recursively over filesystem directories, allowing traversal of
      subdirectories.

      https://www.php.net/manual/en/class.recursivedirectoryiterator.php
  - question: What is the purpose of the `match` expression introduced in PHP 8.0?
    answers:
      - value: It is a new control structure similar to `switch` but with stricter
          comparisons and return values.
        correct: true
      - value: It performs strict comparisons (`===`) by default.
        correct: true
      - value: It allows multiple expressions to be evaluated in a single case.
        correct: false
      - value: It automatically breaks after the first match, eliminating the need for
          `break` statements.
        correct: true
    help: >-
      The `match` expression is a new control structure in PHP 8.0 that is
      similar to `switch` but offers stricter comparisons (`===`), can return a
      value, and implicitly breaks after a match.

      https://www.php.net/manual/en/control-structures.match.php
  - question: Which of the following is a valid way to define a constant within a
      class in PHP?
    answers:
      - value: "`const MY_CONSTANT = 'value';`"
        correct: true
      - value: "`define('MY_CONSTANT', 'value');`"
        correct: false
      - value: "`public const MY_CONSTANT = 'value';`"
        correct: true
      - value: "`static $MY_CONSTANT = 'value';`"
        correct: false
    help: >-
      Class constants are declared using the `const` keyword inside a class.
      They can also have visibility modifiers (public, protected, private) since
      PHP 7.1.

      https://www.php.net/manual/en/language.oop5.constants.php
  - question: |-
      Given the following code:

      ```php
      namespace MyProject\Utils;

      class Helper {}

      namespace MyProject\Services;

      use MyProject\Utils\Helper;

      class Service
      {
          public function __construct()
          {
              $helper = new Helper();
              echo get_class($helper);
          }
      }

      new Service();
      ```

      What will be the output?
    answers:
      - value: MyProject\Utils\Helper
        correct: true
      - value: Helper
        correct: false
      - value: MyProject\Services\Helper
        correct: false
      - value: Fatal error
        correct: false
    help: >-
      The `use` statement imports the `Helper` class from `MyProject\Utils` into
      the `MyProject\Services` namespace, allowing it to be referenced simply as
      `Helper`.

      https://www.php.net/manual/en/language.namespaces.importing.php
  - question: What is the primary purpose of an interface in Object-Oriented
      Programming (OOP) in PHP?
    answers:
      - value: To define a contract that classes must adhere to.
        correct: true
      - value: To provide a base implementation for common methods.
        correct: false
      - value: To enable multiple inheritance.
        correct: false
      - value: To encapsulate data and methods within a single unit.
        correct: false
    help: >-
      Interfaces define a set of methods that a class must implement. They
      specify 'what' a class must do, without specifying 'how' it does it,
      enforcing a contract for behavior.

      https://www.php.net/manual/en/language.oop5.interfaces.php
  - question: Which of the following is a valid use case for an anonymous function
      in PHP?
    answers:
      - value: As a callback function for array functions like `array_map` or `usort`.
        correct: true
      - value: To define a class method that is only used once.
        correct: false
      - value: To create a function that can be called globally without a name.
        correct: false
      - value: To implement an interface without creating a separate class file.
        correct: false
    help: >-
      Anonymous functions are often used as callback functions, for example, in
      `array_map`, `array_filter`, `usort`, or for creating closures that
      capture variables from their surrounding scope.

      https://www.php.net/manual/en/functions.anonymous.php
  - question: Which of the following is NOT allowed in an abstract class in PHP?
    answers:
      - value: A non-abstract method with a body.
        correct: false
      - value: A private abstract method.
        correct: true
      - value: A constructor.
        correct: false
      - value: A static abstract method.
        correct: true
    help: >-
      Abstract methods cannot be private, as they must be implemented by child
      classes. Also, abstract methods cannot be static, as static methods cannot
      be overridden in the same way regular methods are.

      https://www.php.net/manual/en/language.oop5.abstract.php
  - question: What is the purpose of the `Throwable` interface in PHP's exception
      hierarchy?
    answers:
      - value: It is the base interface for all objects that can be thrown via a `throw`
          statement, including `Exception` and `Error`.
        correct: true
      - value: It is an interface that only `Error` classes implement, not `Exception`
          classes.
        correct: false
      - value: It allows catching both `Exception` and `Error` types in a single `catch
          (Throwable $e)` block.
        correct: true
      - value: It represents a recoverable error that should be handled gracefully.
        correct: false
    help: >-
      The `Throwable` interface was introduced in PHP 7 and is the base
      interface for both `Exception` and `Error` classes. This allows a single
      `catch (Throwable $e)` block to catch both types of throwables.

      https://www.php.net/manual/en/class.throwable.php
  - question: When a class uses a trait, what is the relationship between the class
      and the trait?
    answers:
      - value: The trait's methods are injected into the class as if they were declared
          by the class itself.
        correct: true
      - value: The class inherits from the trait.
        correct: false
      - value: The trait implements the class.
        correct: false
      - value: The trait becomes a parent class of the using class.
        correct: false
    help: >-
      Traits are a mechanism for code reuse. When a class uses a trait, the
      methods and properties defined in the trait are 'copied' into the class,
      making them part of the class's own definition.

      https://www.php.net/manual/en/language.oop5.traits.php
  - question: Which PHP extension is commonly used for interacting with relational
      databases, providing a consistent interface for various database systems?
    answers:
      - value: PDO (PHP Data Objects)
        correct: true
      - value: mysqli
        correct: false
      - value: pgsql
        correct: false
      - value: sqlite3
        correct: false
    help: >-
      PDO (PHP Data Objects) is a database access layer that provides a
      lightweight, consistent interface for accessing various databases, making
      it a highly recommended choice for database interactions in PHP.

      https://www.php.net/manual/en/book.pdo.php
  - question: Which SPL class can be used to create a fixed-size array that is
      faster and uses less memory than a regular PHP array for certain use
      cases?
    answers:
      - value: SplFixedArray
        correct: true
      - value: SplStack
        correct: false
      - value: SplQueue
        correct: false
      - value: SplPriorityQueue
        correct: false
    help: >-
      The `SplFixedArray` class provides a fixed-size array implementation. It
      can be more memory-efficient and faster than regular PHP arrays when the
      size is known in advance and doesn't change frequently.

      https://www.php.net/manual/en/class.splfixedarray.php
  - question: What is the purpose of the `#[Deprecated]` attribute introduced in PHP 8.0?
    answers:
      - value: To mark classes, methods, properties, or functions as deprecated,
          triggering a deprecation notice when used.
        correct: true
      - value: To prevent the use of a specific function or method entirely.
        correct: false
      - value: To automatically remove deprecated code during compilation.
        correct: false
      - value: To provide an alternative implementation for a deprecated feature.
        correct: false
    help: >-
      The `#[Deprecated]` attribute allows developers to explicitly mark parts
      of their code as deprecated, providing a clear signal to users that the
      feature is no longer recommended and may be removed in future versions.

      https://www.php.net/manual/en/language.attributes.php
  - question: Which of the following is TRUE about class properties in PHP?
    answers:
      - value: They can be declared with `public`, `protected`, or `private` visibility.
        correct: true
      - value: They can be declared as `static`.
        correct: true
      - value: They must always be initialized with a default value.
        correct: false
      - value: They are always accessible from outside the class.
        correct: false
    help: >-
      Class properties (also known as member variables) can have different
      visibilities (`public`, `protected`, `private`) and can be static. They do
      not always need a default value, but it's good practice.

      https://www.php.net/manual/en/language.oop5.properties.php
  - question: How can you define an alias for an imported class in PHP namespaces?
    answers:
      - value: "`use MyProject\\Utils\\Helper as MyHelper;`"
        correct: true
      - value: "`alias MyProject\\Utils\\Helper as MyHelper;`"
        correct: false
      - value: "`use MyProject\\Utils\\Helper => MyHelper;`"
        correct: false
      - value: "`import MyProject\\Utils\\Helper as MyHelper;`"
        correct: false
    help: |-
      The `as` keyword is used with the `use` statement to create an alias for an imported class, interface, trait, function, or constant, avoiding name conflicts.
      https://www.php.net/manual/en/language.namespaces.importing.php#language.namespaces.importing.alias
  - question: Which of the following is a valid use case for an interface?
    answers:
      - value: To ensure that different database drivers (e.g., MySQL, PostgreSQL)
          provide a common set of methods for connecting and querying.
        correct: true
      - value: To share common implementation details between unrelated classes.
        correct: false
      - value: To prevent a class from being extended.
        correct: false
      - value: To define static utility methods that don't require an object instance.
        correct: false
    help: >-
      Interfaces are excellent for defining contracts, ensuring that different
      implementations of a concept (like database drivers, loggers, or payment
      gateways) adhere to a consistent API.

      https://www.php.net/manual/en/language.oop5.interfaces.php
  - question: |-
      What is the output of the following code snippet?

      ```php
      $counter = 0;
      $increment = function () use (&$counter) {
          $counter++;
      };

      $increment();
      $increment();

      echo $counter;
      ```
    answers:
      - value: "2"
        correct: true
      - value: "0"
        correct: false
      - value: "1"
        correct: false
      - value: Fatal error
        correct: false
    help: >-
      When a variable is imported into a closure by reference (`use
      (&$variable)`), changes to the variable inside the closure directly affect
      the original variable in the parent scope.

      https://www.php.net/manual/en/functions.anonymous.php
  - question: Which of the following statements about final classes and final
      methods in PHP is TRUE?
    answers:
      - value: A `final` class cannot be extended.
        correct: true
      - value: A `final` method cannot be overridden by a child class.
        correct: true
      - value: All methods in a `final` class must also be `final`.
        correct: false
      - value: "`final` methods can only exist in `final` classes."
        correct: false
    help: >-
      The `final` keyword prevents a class from being extended or a method from
      being overridden. It ensures that the specific implementation cannot be
      altered by child classes.

      https://www.php.net/manual/en/language.oop5.final.php
  - question: What is the main difference between an `Error` and an `Exception` in
      PHP 7+?
    answers:
      - value: "`Error` represents internal PHP errors (e.g., type errors, parse
          errors), while `Exception` represents user-defined or
          application-level errors."
        correct: true
      - value: "`Error` is generally considered unrecoverable, while `Exception` is
          typically recoverable."
        correct: true
      - value: Both `Error` and `Exception` extend the `Throwable` interface.
        correct: true
      - value: "`Error` can be caught by a `try...catch` block, but `Exception` cannot."
        correct: false
    help: >-
      In PHP 7, `Error` was introduced for internal PHP errors that are
      generally unrecoverable, while `Exception` is for application-level
      errors. Both implement the `Throwable` interface.

      https://www.php.net/manual/en/language.errors.php7.php
  - question: How can you ensure that a trait method overrides a method with the
      same name in the class using the trait?
    answers:
      - value: A method defined in the class will always override a method from a trait.
        correct: false
      - value: A method from a trait will always override a method defined in the class.
        correct: true
      - value: By using the `insteadof` operator.
        correct: false
      - value: By explicitly calling the trait method using `TraitName::methodName()`.
        correct: false
    help: |-
      When a class uses a trait and both the class and the trait define a method with the same name, the trait's method takes precedence over the class's method. To override the trait's method, you must define the method in the class itself.
      https://www.php.net/manual/en/language.oop5.traits.php#language.oop5.traits.precedence
  - question: Which PHP extension is crucial for handling JSON data, providing
      functions for encoding and decoding JSON strings?
    answers:
      - value: json
        correct: true
      - value: xml
        correct: false
      - value: filter
        correct: false
      - value: standard
        correct: false
    help: >-
      The `json` extension provides functions like `json_encode()` and
      `json_decode()` for working with JSON (JavaScript Object Notation) data,
      which is widely used for data interchange.

      https://www.php.net/manual/en/book.json.php
  - question: Which SPL class implements the `Iterator` interface and can be used to
      iterate over objects that are not inherently iterable (e.g., a custom data
      structure that doesn't implement `Iterator` or `IteratorAggregate`)?
    answers:
      - value: IteratorIterator
        correct: true
      - value: FilterIterator
        correct: false
      - value: LimitIterator
        correct: false
      - value: CallbackFilterIterator
        correct: false
    help: >-
      The `IteratorIterator` class allows you to iterate over any `Traversable`
      object. It acts as an adapter, making an object iterable even if it
      doesn't directly implement `Iterator`.

      https://www.php.net/manual/en/class.iteratoriterator.php
  - question: In PHP 8.0, what is the purpose of the `str_contains()` function?
    answers:
      - value: To check if a string contains a specific substring.
        correct: true
      - value: To find the first occurrence of a substring within a string.
        correct: false
      - value: To replace all occurrences of a substring within a string.
        correct: false
      - value: To check if a string starts with a specific substring.
        correct: false
    help: >-
      The `str_contains()` function was introduced in PHP 8.0 as a simpler and
      more readable way to check if a string contains another string, returning
      `true` or `false`.

      https://www.php.net/manual/en/function.str-contains.php
  - question: What is the concept of 'polymorphism' in OOP, as applied in PHP?
    answers:
      - value: The ability of an object to take on many forms, typically through
          inheritance or interface implementation.
        correct: true
      - value: The ability to hide the internal implementation details of an object.
        correct: false
      - value: The process of creating new objects from existing classes.
        correct: false
      - value: The mechanism of sharing code between classes using traits.
        correct: false
    help: >-
      Polymorphism (from Greek 'poly' meaning many, and 'morph' meaning form)
      allows objects of different classes to be treated as objects of a common
      type (e.g., an interface or a parent class), enabling flexible and
      extensible code.

      https://www.php.net/manual/en/language.oop5.php
  - question: Which of the following is a valid way to define a global constant in PHP?
    answers:
      - value: "`define('APP_ENV', 'dev');`"
        correct: true
      - value: "`const APP_ENV = 'dev';` (outside a class)"
        correct: true
      - value: "`global $APP_ENV = 'dev';`"
        correct: false
      - value: "`$GLOBALS['APP_ENV'] = 'dev';`"
        correct: false
    help: >-
      Global constants can be defined using `define()` or by using the `const`
      keyword outside of a class definition. Both methods create constants
      accessible throughout the script.

      https://www.php.net/manual/en/language.constants.php
  - question: Which of the following is a key characteristic of an interface?
    answers:
      - value: It can declare constants.
        correct: true
      - value: It can declare properties (member variables).
        correct: false
      - value: It can contain method implementations (bodies).
        correct: false
      - value: It can extend multiple classes.
        correct: false
    help: >-
      Interfaces can declare constants, but they cannot declare properties or
      contain method implementations. They can extend multiple other interfaces.

      https://www.php.net/manual/en/language.oop5.interfaces.php
  - question: |-
      What is the output of the following code snippet?

      ```php
      $arr = [1, 2, 3];
      $func = function ($value) {
          return $value * 2;
      };

      $newArr = array_map($func, $arr);
      print_r($newArr);
      ```
    answers:
      - value: |
          Array
          (
              [0] => 2
              [1] => 4
              [2] => 6
          )
        correct: true
      - value: |
          Array
          (
              [0] => 1
              [1] => 2
              [2] => 3
          )
        correct: false
      - value: Fatal error
        correct: false
      - value: "NULL"
        correct: false
    help: >-
      The `array_map()` function applies a callback function to each element of
      an array. In this case, the anonymous function doubles each value.

      https://www.php.net/manual/en/function.array-map.php
  - question: When should you use an abstract class instead of an interface?
    answers:
      - value: When you want to provide a common base implementation for some methods
          while forcing child classes to implement others.
        correct: true
      - value: When you want to define a contract without any implementation details.
        correct: false
      - value: When you need to allow a class to inherit from multiple 'parents'.
        correct: false
      - value: When you want to ensure all methods are static.
        correct: false
    help: >-
      Abstract classes are suitable when you have a common base for a group of
      related classes, where some methods can have a default implementation, and
      others must be implemented by concrete child classes.

      https://www.php.net/manual/en/language.oop5.abstract.php
  - question: Which of the following is considered a 'recoverable' error in PHP 7+?
    answers:
      - value: An `Exception` thrown by application logic.
        correct: true
      - value: A `TypeError` (e.g., passing an argument of the wrong type).
        correct: false
      - value: A `ParseError` (syntax error).
        correct: false
      - value: A `Fatal Error` (e.g., calling an undefined function).
        correct: false
    help: >-
      In PHP 7+, `Exception` objects represent recoverable errors that can and
      should be caught and handled. `Error` objects (like `TypeError`,
      `ParseError`, `Fatal Error`) represent more severe, generally
      unrecoverable issues.

      https://www.php.net/manual/en/language.errors.php7.php
  - question: What is the purpose of the `__debugInfo()` magic method in PHP?
    answers:
      - value: To customize the information displayed when an object is dumped using
          `var_dump()`.
        correct: true
      - value: To log debug messages to a file.
        correct: false
      - value: To define custom error handling for the class.
        correct: false
      - value: To provide a string representation of the object for `echo`.
        correct: false
    help: >-
      The `__debugInfo()` magic method allows you to customize the properties
      and values that are shown when an object is dumped using `var_dump()`.

      https://www.php.net/manual/en/language.oop5.magic.php#object.debuginfo
  - question: Which PHP extension is essential for working with XML documents,
      providing functions for parsing, validating, and manipulating XML?
    answers:
      - value: SimpleXML
        correct: true
      - value: DOM
        correct: true
      - value: libxml
        correct: true
      - value: json
        correct: false
    help: >-
      PHP offers several extensions for XML processing, including `SimpleXML`
      (for easy XML manipulation), `DOM` (for W3C DOM standard compliance), and
      `libxml` (the underlying library used by many XML extensions).

      https://www.php.net/manual/en/book.simplexml.php

      https://www.php.net/manual/en/book.dom.php
  - question: Which SPL data structure provides a LIFO (Last-In, First-Out) behavior?
    answers:
      - value: SplStack
        correct: true
      - value: SplQueue
        correct: false
      - value: SplPriorityQueue
        correct: false
      - value: SplDoublyLinkedList
        correct: false
    help: >-
      The `SplStack` class provides the functionality of a stack, which follows
      the LIFO (Last-In, First-Out) principle, meaning the last element added is
      the first one to be removed.

      https://www.php.net/manual/en/class.splstack.php
  - question: What is the purpose of the `#[AllowDynamicProperties]` attribute
      introduced in PHP 8.2?
    answers:
      - value: To explicitly allow dynamic properties on a class, overriding the
          deprecation warning.
        correct: true
      - value: To prevent any properties from being added dynamically to an object.
        correct: false
      - value: To enable strict type checking for all properties in a class.
        correct: false
      - value: To declare a property that can be modified at runtime.
        correct: false
    help: >-
      In PHP 8.2, dynamic properties were deprecated. The
      `#[AllowDynamicProperties]` attribute can be used to explicitly opt-in to
      allowing dynamic properties for a specific class, suppressing the
      deprecation notice.

      https://www.php.net/manual/en/language.attributes.php
  - question: Which of the following is a valid way to access a static property
      `count` within the same class?
    answers:
      - value: "`self::$count`"
        correct: true
      - value: "`$this->count`"
        correct: false
      - value: "`ClassName::$count`"
        correct: true
      - value: "`static::$count`"
        correct: true
    help: >-
      Static properties are accessed using the `self::`, `static::`, or
      `ClassName::` syntax, not with `$this` as they belong to the class, not an
      instance.

      https://www.php.net/manual/en/language.oop5.static.php
  - question: |-
      Consider the following code:

      ```php
      namespace App\Model;

      class User {}

      namespace App\Repository;

      use App\Model\User as UserModel;

      class UserRepository
      {
          public function findUser(): UserModel
          {
              return new UserModel();
          }
      }

      $repo = new UserRepository();
      $user = $repo->findUser();
      echo get_class($user);
      ```

      What will be the output?
    answers:
      - value: App\Model\User
        correct: true
      - value: UserModel
        correct: false
      - value: App\Repository\UserModel
        correct: false
      - value: Fatal error
        correct: false
    help: >-
      The `use ... as` statement creates an alias for the class within the
      current namespace. `get_class()` returns the fully qualified class name,
      which is `App\Model\User`.

      https://www.php.net/manual/en/language.namespaces.importing.php
  - question: Which of the following is a valid characteristic of an interface in PHP?
    answers:
      - value: All methods declared in an interface must be public.
        correct: true
      - value: An interface can extend multiple other interfaces.
        correct: true
      - value: An interface can implement other interfaces.
        correct: false
      - value: An interface can define a constructor.
        correct: false
    help: >-
      Interface methods are implicitly public and cannot have any other
      visibility. Interfaces can extend multiple other interfaces using the
      `extends` keyword.

      https://www.php.net/manual/en/language.oop5.interfaces.php
  - question: What is the purpose of the `fn` keyword (arrow functions) introduced
      in PHP 7.4?
    answers:
      - value: To provide a more concise syntax for anonymous functions.
        correct: true
      - value: To automatically bind `$this` from the parent scope.
        correct: true
      - value: To define static methods within a class.
        correct: false
      - value: To create functions that can only be called once.
        correct: false
    help: >-
      Arrow functions (`fn`) provide a shorthand syntax for anonymous functions.
      They implicitly capture variables from the parent scope by value and
      automatically bind `$this`.

      https://www.php.net/manual/en/functions.arrow.php
  - question: Which of the following is TRUE about abstract methods?
    answers:
      - value: They must be declared with the `abstract` keyword.
        correct: true
      - value: They cannot have a body (implementation).
        correct: true
      - value: They must be implemented by any non-abstract child class.
        correct: true
      - value: They can be declared as `private`.
        correct: false
    help: >-
      Abstract methods are declared with the `abstract` keyword, have no body,
      and must be implemented by concrete child classes. They cannot be private.

      https://www.php.net/manual/en/language.oop5.abstract.php
  - question: What is the correct way to throw a custom exception in PHP?
    answers:
      - value: "`throw new MyCustomException('Something went wrong!');`"
        correct: true
      - value: "`catch new MyCustomException('Something went wrong!');`"
        correct: false
      - value: "`error('Something went wrong!', E_USER_ERROR);`"
        correct: false
      - value: "`trigger_error('Something went wrong!', E_USER_ERROR);`"
        correct: false
    help: >-
      Exceptions are thrown using the `throw` keyword followed by an instance of
      a class that implements the `Throwable` interface (typically `Exception`
      or a class extending it).

      https://www.php.net/manual/en/language.exceptions.php
  - question: Which of the following is a key advantage of using traits over
      traditional inheritance for code reuse?
    answers:
      - value: Traits allow for horizontal reuse of behavior across different class
          hierarchies.
        correct: true
      - value: Traits enforce a stricter type contract than interfaces.
        correct: false
      - value: Traits provide a way to achieve true multiple inheritance in PHP.
        correct: false
      - value: Traits can be instantiated directly, unlike abstract classes.
        correct: false
    help: >-
      Traits address the limitations of single inheritance by allowing a class
      to include methods and properties from multiple traits, enabling code
      reuse across otherwise unrelated classes.

      https://www.php.net/manual/en/language.oop5.traits.php
  - question: Which PHP extension provides functions for hashing data using various
      algorithms like MD5, SHA-1, SHA-256, etc., commonly used for password
      storage and data integrity checks?
    answers:
      - value: hash
        correct: true
      - value: mcrypt
        correct: false
      - value: openssl
        correct: false
      - value: crypt
        correct: false
    help: >-
      The `hash` extension provides a comprehensive set of functions for
      generating various message digests (hashes), which are crucial for
      security operations like password hashing and data integrity verification.

      https://www.php.net/manual/en/book.hash.php
  - question: Which SPL class provides a double-linked list, allowing efficient
      insertion and deletion of elements at both ends?
    answers:
      - value: SplDoublyLinkedList
        correct: true
      - value: SplQueue
        correct: false
      - value: SplStack
        correct: false
      - value: SplHeap
        correct: false
    help: >-
      The `SplDoublyLinkedList` class implements the functionality of a doubly
      linked list, which allows elements to be added or removed from both the
      beginning and the end efficiently.

      https://www.php.net/manual/en/class.spldoublylinkedlist.php
  - question: What is the purpose of the `__serialize()` and `__unserialize()` magic
      methods introduced in PHP 7.4?
    answers:
      - value: To customize the serialization and unserialization behavior of an object,
          replacing `__sleep()` and `__wakeup()`.
        correct: true
      - value: To convert an object to and from a JSON string.
        correct: false
      - value: To define how an object is converted to a string when cast to `string`.
        correct: false
      - value: To encrypt and decrypt object data.
        correct: false
    help: >-
      The `__serialize()` and `__unserialize()` methods were introduced in PHP
      7.4 to provide a more robust and flexible way to handle object
      serialization, replacing the older `__sleep()` and `__wakeup()` methods.

      https://www.php.net/manual/en/language.oop5.magic.php#object.serialize
  - question: Which of the following is TRUE about type declarations in PHP 7.0 and
      later?
    answers:
      - value: Scalar type declarations (int, float, string, bool) are supported.
        correct: true
      - value: Return type declarations are supported.
        correct: true
      - value: Strict types mode can be enabled per file using
          `declare(strict_types=1);`.
        correct: true
      - value: Property type declarations are supported since PHP 7.4.
        correct: true
    help: >-
      PHP 7.0 introduced scalar type declarations and return type declarations.
      PHP 7.4 added property type declarations. Strict types mode ensures that
      type declarations are strictly enforced.

      https://www.php.net/manual/en/language.types.declarations.php
  - question: What is the purpose of the `static` keyword when used with methods in PHP?
    answers:
      - value: It allows the method to be called without creating an instance of the
          class.
        correct: true
      - value: It ensures the method can only access static properties of the class.
        correct: false
      - value: It makes the method immutable.
        correct: false
      - value: It restricts the method's visibility to the class itself.
        correct: false
    help: >-
      Static methods belong to the class itself, not to any specific instance of
      the class. They can be called directly on the class using the `::`
      operator without needing to instantiate an object.

      https://www.php.net/manual/en/language.oop5.static.php
  - question: Which of the following is NOT a valid way to define a namespace in PHP?
    answers:
      - value: "`namespace My\\App;`"
        correct: false
      - value: "`namespace My.App;`"
        correct: true
      - value: "`namespace My_App;`"
        correct: false
      - value: "`namespace { /* global namespace */ }`"
        correct: false
    help: >-
      Namespace names are valid PHP identifiers, which means they can contain
      alphanumeric characters and underscores, but not dots (`.`).

      https://www.php.net/manual/en/language.namespaces.definition.php
  - question: What is the purpose of the `__invoke()` magic method in PHP?
    answers:
      - value: It is called when an object is treated as a function.
        correct: true
      - value: It is called when a static method is invoked dynamically.
        correct: false
      - value: It is called when an object is cloned.
        correct: false
      - value: It is called when an object is serialized.
        correct: false
    help: >-
      The `__invoke()` method is called when a script tries to call an object as
      a function. This allows objects to be callable, similar to closures.

      https://www.php.net/manual/en/language.oop5.magic.php#object.invoke
  - question: Which of the following is a valid characteristic of an abstract method?
    answers:
      - value: It must be implemented by a non-abstract child class.
        correct: true
      - value: It cannot be declared `final`.
        correct: true
      - value: It must have a `public` or `protected` visibility.
        correct: true
      - value: It can be declared `static`.
        correct: false
    help: >-
      Abstract methods cannot be final (as they must be implemented), cannot be
      static, and must be public or protected (not private) to allow
      implementation by child classes.

      https://www.php.net/manual/en/language.oop5.abstract.php
  - question: What will happen if an unhandled `Error` (e.g., `TypeError`) occurs in
      a PHP script?
    answers:
      - value: The script will terminate with a fatal error.
        correct: true
      - value: A warning will be issued, and the script will continue execution.
        correct: false
      - value: It will automatically be converted into an `Exception`.
        correct: false
      - value: It will be logged silently without affecting script execution.
        correct: false
    help: >-
      Unlike `Exception`s, `Error`s typically represent serious, unrecoverable
      problems that cause the script to terminate, unless explicitly caught by a
      `try...catch (Throwable $e)` block.

      https://www.php.net/manual/en/language.errors.php7.php
  - question: Which of the following is a correct way to use a trait method and
      rename it within a class?
    answers:
      - value: |-
          ```php
          class MyClass
          {
              use MyTrait { traitMethod as myNewMethod; }
          }
          ```
        correct: true
      - value: |-
          ```php
          class MyClass
          {
              use MyTrait { myNewMethod = traitMethod; }
          }
          ```
        correct: false
      - value: |-
          ```php
          class MyClass
          {
              use MyTrait { traitMethod => myNewMethod; }
          }
          ```
        correct: false
      - value: |-
          ```php
          class MyClass
          {
              use MyTrait as MyNewTrait;
              // ... then use MyNewTrait::traitMethod
          }
          ```
        correct: false
    help: |-
      The `as` operator within the `use` statement allows you to change the visibility of a trait method or to rename it, which is useful for resolving name conflicts.
      https://www.php.net/manual/en/language.oop5.traits.php#language.oop5.traits.conflict
  - question: Which PHP extension is commonly used for interacting with web servers
      and making HTTP requests (e.g., fetching data from APIs)?
    answers:
      - value: curl
        correct: true
      - value: sockets
        correct: false
      - value: stream
        correct: false
      - value: http
        correct: false
    help: >-
      The `curl` extension provides an interface for the `libcurl` library,
      enabling PHP to make various types of requests to different protocols,
      most commonly HTTP/HTTPS requests.

      https://www.php.net/manual/en/book.curl.php
  - question: Which SPL class provides a heap data structure, useful for
      implementing priority queues?
    answers:
      - value: SplHeap
        correct: true
      - value: SplMaxHeap
        correct: true
      - value: SplMinHeap
        correct: true
      - value: SplStack
        correct: false
    help: >-
      The SPL provides `SplHeap` as a base class for heap implementations, with
      `SplMaxHeap` and `SplMinHeap` providing specific max-heap and min-heap
      functionalities, respectively. These are commonly used for priority
      queues.

      https://www.php.net/manual/en/class.splheap.php
  - question: What is the purpose of the `nullsafe operator` (`?->`) introduced in
      PHP 8.0?
    answers:
      - value: To prevent errors when attempting to access properties or call methods on
          a `null` object.
        correct: true
      - value: To assign a default value if a variable is `null`.
        correct: false
      - value: To check if a variable is `null` before performing an operation.
        correct: false
      - value: To allow `null` to be passed as an argument to a non-nullable type.
        correct: false
    help: >-
      The nullsafe operator (`?->`) allows you to chain method calls and
      property accesses without explicit `null` checks. If the expression before
      `?->` evaluates to `null`, the entire expression short-circuits and
      evaluates to `null`.

      https://www.php.net/manual/en/language.operators.nullsafe.php
  - question: Which of the following is a valid way to define a class that cannot be
      extended?
    answers:
      - value: "`final class MyClass {}`"
        correct: true
      - value: "`abstract class MyClass {}`"
        correct: false
      - value: "`sealed class MyClass {}`"
        correct: false
      - value: "`private class MyClass {}`"
        correct: false
    help: >-
      The `final` keyword is used to prevent a class from being inherited by any
      other class. This ensures that its implementation cannot be altered.

      https://www.php.net/manual/en/language.oop5.final.php
  - question: What is the purpose of the `use function` and `use const` statements
      in PHP namespaces?
    answers:
      - value: To import functions and constants from other namespaces, making them
          accessible without their fully qualified names.
        correct: true
      - value: To define new functions and constants within the current namespace.
        correct: false
      - value: To declare that a function or constant will be used later in the script.
        correct: false
      - value: To make functions and constants globally accessible.
        correct: false
    help: |-
      The `use function` and `use const` statements, introduced in PHP 5.6, allow importing individual functions and constants from other namespaces, similar to how `use` imports classes.
      https://www.php.net/manual/en/language.namespaces.importing.php#language.namespaces.importing.functions
  - question: Which of the following is a valid way to declare a method in an interface?
    answers:
      - value: "`public function doSomething(string $arg): void;`"
        correct: true
      - value: "`protected function doSomething();`"
        correct: false
      - value: "`private function doSomething();`"
        correct: false
      - value: "`public function doSomething() { /* implementation */ }`"
        correct: false
    help: >-
      Interface methods must be public and cannot have a body. They define the
      method signature (name, arguments, return type) that implementing classes
      must adhere to.

      https://www.php.net/manual/en/language.oop5.interfaces.php
  - question: Which of the following is a valid way to create an anonymous class in PHP?
    answers:
      - value: |-
          ```php
          $obj = new class implements MyInterface {
              public function myMethod() { /* ... */ }
          };
          ```
        correct: true
      - value: |-
          ```php
          $obj = new class {
              public function __construct() { /* ... */ }
          };
          ```
        correct: true
      - value: |-
          ```php
          $obj = anonymous class {
              // ...
          };
          ```
        correct: false
      - value: |-
          ```php
          $obj = new class extends MyAbstractClass {
              // ...
          };
          ```
        correct: true
    help: >-
      Anonymous classes, introduced in PHP 7, allow defining and instantiating a
      class in a single expression. They can extend classes, implement
      interfaces, and use traits.

      https://www.php.net/manual/en/language.oop5.anonymous.php
  - question: What is the primary purpose of the `set_exception_handler()` function
      in PHP?
    answers:
      - value: To register a custom function that handles all uncaught exceptions.
        correct: true
      - value: To throw a new exception.
        correct: false
      - value: To log all exceptions to a file.
        correct: false
      - value: To disable exception handling in the script.
        correct: false
    help: >-
      The `set_exception_handler()` function sets a user-defined function to be
      called when an uncaught exception occurs. This allows for centralized
      exception logging or graceful error display.

      https://www.php.net/manual/en/function.set-exception-handler.php
  - question: Which of the following statements about `static` methods in PHP is TRUE?
    answers:
      - value: They cannot access non-static properties using `$this`.
        correct: true
      - value: They can be called directly on the class without an object instance.
        correct: true
      - value: They are inherited by child classes.
        correct: true
      - value: They can be overridden by child classes.
        correct: true
    help: >-
      Static methods belong to the class and cannot access instance-specific
      properties (`$this`). They are inherited and can be overridden by child
      classes, though `static::` provides late static binding.

      https://www.php.net/manual/en/language.oop5.static.php
  - question: What is the purpose of the `#[SensitiveParameter]` attribute
      introduced in PHP 8.2?
    answers:
      - value: To mark function or method parameters as sensitive, preventing their
          values from appearing in stack traces.
        correct: true
      - value: To encrypt parameter values automatically.
        correct: false
      - value: To enforce strict type checking for sensitive parameters.
        correct: false
      - value: To make a parameter optional.
        correct: false
    help: |-
      The `#[SensitiveParameter]` attribute helps prevent sensitive information (like passwords or API keys) from being accidentally exposed in stack traces during error reporting.
      https://www.php.net/manual/en/language.attributes.php#language.attributes.sensitiveparameter
  - question: Which SPL class provides a FIFO (First-In, First-Out) behavior?
    answers:
      - value: SplQueue
        correct: true
      - value: SplStack
        correct: false
      - value: SplPriorityQueue
        correct: false
      - value: SplDoublyLinkedList
        correct: false
    help: >-
      The `SplQueue` class provides the functionality of a queue, which follows
      the FIFO (First-In, First-Out) principle, meaning the first element added
      is the first one to be removed.

      https://www.php.net/manual/en/class.splqueue.php
