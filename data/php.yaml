category: PHP

questions:
  -
    question: >
      Which of the following is a new feature introduced in PHP 8.2?
    answers:
      - { value: 'Readonly classes', correct: true }
      - { value: 'Union Types 2.0', correct: false }
      - { value: 'Attributes', correct: false }
      - { value: 'Match expression', correct: false }
    help: |
      PHP 8.2 introduced readonly classes, allowing all properties declared within them to be implicitly readonly.
      https://www.php.net/manual/en/migration82.new-features.php#migration82.new-features.readonly-classes

  -
    question: >
      In Object-Oriented Programming (OOP) in PHP, what does the term "encapsulation" primarily refer to?
    answers:
      - { value: 'The ability of an object to take on many forms.', correct: false }
      - { value: 'The bundling of data and methods that operate on the data within a single unit.', correct: true }
      - { value: 'The process of creating new classes from existing classes.', correct: false }
      - { value: 'The ability to define a common interface for a group of related classes.', correct: false }
    help: |
      Encapsulation is the bundling of data (attributes) and methods that operate on the data within a single unit (class), and restricting direct access to some of an object's components.
      https://www.php.net/manual/en/language.oop5.php

  -
    question: |
      Consider the following PHP code:

      ```php
      <?php
      namespace App\Controller;

      class ProductController {
          public function show() {
              return __NAMESPACE__;
          }
      }

      $controller = new ProductController();
      echo $controller->show();
      ?>
      ```
      What will be the output of this script?
    answers:
      - { value: '`App\Controller`', correct: true }
      - { value: '`ProductController`', correct: false }
      - { value: '`__NAMESPACE__`', correct: false }
      - { value: 'An error, as `__NAMESPACE__` is not accessible.', correct: false }
    help: |
      The `__NAMESPACE__` magic constant returns the name of the current namespace.
      https://www.php.net/manual/en/language.namespaces.constants.php

  -
    question: >
      Which statement is true regarding PHP interfaces?
    answers:
      - { value: 'Interfaces can contain concrete methods with implementation.', correct: false }
      - { value: 'A class can implement only one interface.', correct: false }
      - { value: 'All methods declared in an interface must be public.', correct: true }
      - { value: 'Interfaces can define properties.', correct: false }
    help: |
      All methods in an interface must be public. Interfaces cannot contain properties or concrete methods.
      https://www.php.net/manual/en/language.oop5.interfaces.php

  -
    question: |
      What is the primary reason to use the `use` keyword with anonymous functions (closures) in PHP?

      ```php
      $factor = 2;
      $multiply = function ($number) use ($factor) {
          return $number * $factor;
      };
      echo $multiply(5);
      ```
    answers:
      - { value: 'To import a class or namespace into the closure.', correct: false }
      - { value: 'To make variables from the parent scope available inside the closure.', correct: true }
      - { value: 'To define a new variable that is local to the closure.', correct: false }
      - { value: 'To specify the return type of the closure.', correct: false }
    help: |
      The `use` construct allows a closure to inherit variables from the parent scope. These variables are passed by value by default.
      https://www.php.net/manual/en/functions.anonymous.php

  -
    question: >
      Which of the following statements about abstract classes in PHP is correct?
    answers:
      - { value: 'An abstract class can be instantiated directly.', correct: false }
      - { value: 'An abstract class must contain at least one abstract method.', correct: false }
      - { value: 'A class extending an abstract class must implement all its abstract methods, or be declared abstract itself.', correct: true }
      - { value: 'Abstract methods can have a body (implementation).', correct: false }
    help: |
      Abstract classes cannot be instantiated directly. A class that extends an abstract class must implement all of its inherited abstract methods, or be declared abstract itself.
      https://www.php.net/manual/en/language.oop5.abstract.php

  -
    question: >
      In PHP's exception handling, what is the purpose of the `finally` block?
    answers:
      - { value: 'It is executed only if an exception is caught.', correct: false }
      - { value: 'It is executed only if no exception occurs.', correct: false }
      - { value: 'It is always executed, regardless of whether an exception was thrown or caught.', correct: true }
      - { value: 'It is used to re-throw an exception.', correct: false }
    help: |
      The `finally` block will always be executed after the `try` and `catch` blocks, regardless of whether an exception was thrown or caught.
      https://www.php.net/manual/en/language.exceptions.php

  -
    question: >
      How can you resolve a method name collision when using multiple traits that define methods with the same name in a PHP class?
    answers:
      - { value: 'By using the `insteadof` operator in the `use` statement.', correct: true }
      - { value: 'By using the `as` operator to alias one of the methods.', correct: true }
      - { value: 'By simply defining the method in the class itself, which takes precedence.', correct: true }
      - { value: 'It's not possible; PHP will always throw a fatal error.', correct: false }
    help: |
      When using multiple traits, if they define methods with the same name, the `insteadof` operator can be used to resolve the conflict by specifying which trait's method should be used. The `as` operator can be used to alias a method. Also, if the class itself defines a method with the same name, it takes precedence over the trait's method.
      https://www.php.net/manual/en/language.oop5.traits.php#language.oop5.traits.conflict

  -
    question: >
      Which PHP extension is essential for working with JSON data?
    answers:
      - { value: '`XML`', correct: false }
      - { value: '`GD`', correct: false }
      - { value: '`json`', correct: true }
      - { value: '`mbstring`', correct: false }
    help: |
      The `json` extension provides functions for encoding and decoding JSON (JavaScript Object Notation) data.
      https://www.php.net/manual/en/book.json.php

  -
    question: >
      Which SPL (Standard PHP Library) interface allows an object to be treated like an array, enabling access to its properties using array syntax (e.g., `$obj['key']`)?
    answers:
      - { value: '`Iterator`', correct: false }
      - { value: '`Countable`', correct: false }
      - { value: '`ArrayAccess`', correct: true }
      - { value: '`Serializable`', correct: false }
    help: |
      The `ArrayAccess` interface allows objects to be accessed as arrays.
      https://www.php.net/manual/en/class.arrayaccess.php

  -
    question: >
      What is the purpose of the `#[AllowDynamicProperties]` attribute introduced in PHP 8.2?
    answers:
      - { value: 'To allow classes to define properties at runtime without prior declaration.', correct: true }
      - { value: 'To prevent the creation of dynamic properties.', correct: false }
      - { value: 'To mark properties as read-only.', correct: false }
      - { value: 'To enable strict type checking for dynamic properties.', correct: false }
    help: |
      The `#[AllowDynamicProperties]` attribute can be added to a class to explicitly allow dynamic properties, suppressing the deprecation warning in PHP 8.2.
      https://www.php.net/manual/en/migration82.deprecated.php#migration82.deprecated.dynamic-properties

  -
    question: >
      In OOP, what is polymorphism?
    answers:
      - { value: 'The ability of an object to take on many forms.', correct: true }
      - { value: 'The hiding of implementation details.', correct: false }
      - { value: 'The process of creating new objects from existing ones.', correct: false }
      - { value: 'The mechanism of code reuse through inheritance.', correct: false }
    help: |
      Polymorphism is the ability of an object to take on many forms, often meaning a single interface can be used for different data types.
      https://www.php.net/manual/en/language.oop5.php

  -
    question: |
      Which of the following is the correct way to import multiple classes from the same namespace in PHP?
    answers:
      - { value: '`use MyNamespace\{ClassA, ClassB};`', correct: true }
      - { value: '`use MyNamespace\ClassA, MyNamespace\ClassB;`', correct: false }
      - { value: '`import MyNamespace\ClassA, MyNamespace\ClassB;`', correct: false }
      - { value: '`require MyNamespace\ClassA; require MyNamespace\ClassB;`', correct: false }
    help: |
      Group use declarations allow you to import multiple classes, functions, or constants from the same namespace in a single `use` statement.
      https://www.php.net/manual/en/language.namespaces.importing.php

  -
    question: >
      When a class implements an interface, what must it do?
    answers:
      - { value: 'Implement all methods declared in the interface with the same signature.', correct: true }
      - { value: 'Implement only the public methods of the interface.', correct: false }
      - { value: 'Implement at least one method from the interface.', correct: false }
      - { value: 'Extend the interface.', correct: false }
    help: |
      When a class implements an interface, it must implement all methods declared in the interface with the same signature, otherwise a fatal error will be issued.
      https://www.php.net/manual/en/language.oop5.interfaces.php

  -
    question: |
      What will be the output of the following PHP code snippet?

      ```php
      <?php
      $x = 10;
      $func = function () use (&$x) {
          $x++;
      };
      $func();
      echo $x;
      ?>
      ```
    answers:
      - { value: '`10`', correct: false }
      - { value: '`11`', correct: true }
      - { value: '`Fatal error`', correct: false }
      - { value: '`Undefined variable $x`', correct: false }
    help: |
      When a variable is passed by reference to a closure using `&$x`, changes made to the variable inside the closure affect the original variable.
      https://www.php.net/manual/en/functions.anonymous.php

  -
    question: >
      Can an abstract class have non-abstract (concrete) methods?
    answers:
      - { value: 'Yes, an abstract class can have both abstract and non-abstract methods.', correct: true }
      - { value: 'No, all methods in an abstract class must be abstract.', correct: false }
      - { value: 'Only if it also implements an interface.', correct: false }
      - { value: 'Only if it extends another abstract class.', correct: false }
    help: |
      Abstract classes can have both abstract and non-abstract methods.
      https://www.php.net/manual/en/language.oop5.abstract.php

  -
    question: >
      Which of the following is a valid way to catch multiple types of exceptions in a single `catch` block in PHP 8.0+?
    answers:
      - { value: '`catch (ExceptionA | ExceptionB $e)`', correct: true }
      - { value: '`catch (ExceptionA, ExceptionB $e)`', correct: false }
      - { value: '`catch (ExceptionA or ExceptionB $e)`', correct: false }
      - { value: '`catch (ExceptionA then ExceptionB $e)`', correct: false }
    help: |
      PHP 8.0 introduced the ability to catch multiple exceptions with a single `catch` block using the `|` (OR) operator.
      https://www.php.net/manual/en/language.exceptions.php

  -
    question: >
      What happens if a class uses two traits that define a property with the same name, and the class itself does not define that property?
    answers:
      - { value: 'PHP will throw a fatal error.', correct: true }
      - { value: 'The property from the first trait listed will be used.', correct: false }
      - { value: 'The property from the last trait listed will be used.', correct: false }
      - { value: 'The property will be merged, if possible.', correct: false }
    help: |
      If two traits define a property with the same name, a fatal error is issued if a class uses both traits and does not define the property itself.
      https://www.php.net/manual/en/language.oop5.traits.php#language.oop5.traits.properties

  -
    question: >
      Which PHP extension provides functions for working with multi-byte strings, crucial for handling various character encodings?
    answers:
      - { value: '`iconv`', correct: false }
      - { value: '`mbstring`', correct: true }
      - { value: '`intl`', correct: false }
      - { value: '`filter`', correct: false }
    help: |
      The `mbstring` (Multi-Byte String) extension provides multi-byte specific string functions that help you deal with multi-byte encodings in PHP.
      https://www.php.net/manual/en/book.mbstring.php

  -
    question: >
      Which SPL class provides a way to implement a stack (LIFO - Last In, First Out) data structure?
    answers:
      - { value: '`SplQueue`', correct: false }
      - { value: '`SplStack`', correct: true }
      - { value: '`SplHeap`', correct: false }
      - { value: '`SplFixedArray`', correct: false }
    help: |
      The `SplStack` class provides the main functionalities of a stack.
      https://www.php.net/manual/en/class.splstack.php

  -
    question: >
      What is the significance of the `#[SensitiveParameter]` attribute introduced in PHP 8.2?
    answers:
      - { value: 'It marks a parameter as read-only.', correct: false }
      - { value: 'It prevents the parameter''s value from being exposed in stack traces.', correct: true }
      - { value: 'It enforces strict type checking for the parameter.', correct: false }
      - { value: 'It allows the parameter to be optional.', correct: false }
    help: |
      The `#[SensitiveParameter]` attribute can be used to mark parameters whose values should be redacted from stack traces.
      https://www.php.net/manual/en/migration82.new-features.php#migration82.new-features.sensitive-parameter

  -
    question: >
      In PHP OOP, what is the purpose of the `static` keyword when applied to a method?
    answers:
      - { value: 'The method can only be called from within the class itself.', correct: false }
      - { value: 'The method belongs to the class itself, not to any specific instance of the class.', correct: true }
      - { value: 'The method cannot be overridden by child classes.', correct: false }
      - { value: 'The method returns a static value.', correct: false }
    help: |
      Static methods can be called without instantiating the class. They belong to the class rather than to an object.
      https://www.php.net/manual/en/language.oop5.static.php

  -
    question: |
      Which of the following is the correct way to define a constant within a namespace in PHP?
    answers:
      - { value: '`const MY_CONSTANT = 'value';`', correct: true }
      - { value: '`define('MY_NAMESPACE\MY_CONSTANT', 'value');`', correct: true }
      - { value: '`namespace MyNamespace; const MY_CONSTANT = 'value';`', correct: true }
      - { value: '`global const MY_CONSTANT = 'value';`', correct: false }
    help: |
      Constants can be defined within a namespace using the `const` keyword or the `define()` function with the fully qualified name.
      https://www.php.net/manual/en/language.namespaces.definition.php

  -
    question: >
      What is the difference between an interface and an abstract class in PHP?
    answers:
      - { value: 'An interface can define properties, while an abstract class cannot.', correct: false }
      - { value: 'A class can implement multiple interfaces, but can only extend one abstract class.', correct: true }
      - { value: 'Abstract classes must contain only abstract methods, while interfaces can have concrete methods.', correct: false }
      - { value: 'Interfaces can be instantiated, while abstract classes cannot.', correct: false }
    help: |
      A class can implement multiple interfaces, but can only inherit from a single abstract class (due to PHP's single inheritance model). Interfaces define a contract, while abstract classes can provide partial implementation.
      https://www.php.net/manual/en/language.oop5.interfaces.php
      https://www.php.net/manual/en/language.oop5.abstract.php

  -
    question: |
      What will be the output of the following code?

      ```php
      <?php
      $message = 'Hello';
      $func = function () {
          echo $message;
      };
      $func();
      ?>
      ```
    answers:
      - { value: '`Hello`', correct: false }
      - { value: '`Undefined variable: message`', correct: true }
      - { value: 'An empty string.', correct: false }
      - { value: 'A fatal error.', correct: false }
    help: |
      Without the `use` keyword, variables from the parent scope are not automatically available inside an anonymous function.
      https://www.php.net/manual/en/functions.anonymous.php

  -
    question: >
      When is it appropriate to declare a class as `abstract` in PHP?
    answers:
      - { value: 'When it should not be instantiated directly and is intended to be extended by other classes.', correct: true }
      - { value: 'When it contains only static methods.', correct: false }
      - { value: 'When it implements an interface.', correct: false }
      - { value: 'When all its methods are private.', correct: false }
    help: |
      A class should be declared abstract if it contains at least one abstract method or if it is intended to be extended but not instantiated directly.
      https://www.php.net/manual/en/language.oop5.abstract.php

  -
    question: >
      Which of the following is a standard PHP error type that indicates a fatal error, which cannot be recovered from?
    answers:
      - { value: '`E_WARNING`', correct: false }
      - { value: '`E_NOTICE`', correct: false }
      - { value: '`E_PARSE`', correct: true }
      - { value: '`E_DEPRECATED`', correct: false }
    help: |
      `E_PARSE` indicates a parse error, which is a fatal error that occurs during the parsing stage of the script.
      https://www.php.net/manual/en/errorfunc.constants.php

  -
    question: >
      What is a key benefit of using traits in PHP?
    answers:
      - { value: 'They allow a class to inherit from multiple parent classes.', correct: false }
      - { value: 'They provide a mechanism for code reuse without requiring inheritance.', correct: true }
      - { value: 'They enforce strict type checking at compile time.', correct: false }
      - { value: 'They replace the need for interfaces.', correct: false }
    help: |
      Traits are a mechanism for code reuse in single inheritance languages like PHP. A Trait is intended to reduce limitations of single inheritance by enabling a developer to reuse sets of methods freely in several independent classes living in different class hierarchies.
      https://www.php.net/manual/en/language.oop5.traits.php

  -
    question: >
      Which PHP extension is commonly used for image manipulation, such as creating thumbnails or applying filters?
    answers:
      - { value: '`Exif`', correct: false }
      - { value: '`Imagick`', correct: true }
      - { value: '`Fileinfo`', correct: false }
      - { value: '`Zip`', correct: false }
    help: |
      Imagick is a native PHP extension to create and modify images using the ImageMagick API. The GD extension is also commonly used for image manipulation.
      https://www.php.net/manual/en/book.imagick.php
      https://www.php.net/manual/en/book.gd.php

  -
    question: >
      Which SPL class provides a way to implement a queue (FIFO - First In, First Out) data structure?
    answers:
      - { value: '`SplStack`', correct: false }
      - { value: '`SplQueue`', correct: true }
      - { value: '`SplDoublyLinkedList`', correct: false }
      - { value: '`SplPriorityQueue`', correct: false }
    help: |
      The `SplQueue` class provides the main functionalities of a queue.
      https://www.php.net/manual/en/class.splqueue.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute introduced in PHP 8.3?
    answers:
      - { value: 'To explicitly mark a method as overriding a parent method, ensuring it exists in the parent class or interface.', correct: true }
      - { value: 'To prevent a method from being overridden by child classes.', correct: false }
      - { value: 'To indicate that a method is deprecated.', correct: false }
      - { value: 'To make a method abstract.', correct: false }
    help: |
      The `#[Override]` attribute explicitly declares that a method is intended to override a method from a parent class or implemented interface. This helps prevent accidental bugs if the parent method is removed or renamed.
      https://www.php.net/manual/en/migration83.new-features.php#migration83.new-features.override-attribute

  -
    question: >
      In PHP OOP, what is "inheritance"?
    answers:
      - { value: 'A mechanism where a new class (child class) is derived from an existing class (parent class).', correct: true }
      - { value: 'The process of hiding the internal implementation details of an object.', correct: false }
      - { value: 'The ability of an object to take on many forms.', correct: false }
      - { value: 'The creation of multiple instances of the same class.', correct: false }
    help: |
      Inheritance is a mechanism that allows a new class to be based on an existing class, inheriting its properties and methods.
      https://www.php.net/manual/en/language.oop5.inheritance.php

  -
    question: |
      Given the following code, what will be the output?

      ```php
      <?php
      namespace MyNamespace;

      function myFunction() {
          echo __FUNCTION__;
      }

      myFunction();
      ?>
      ```
    answers:
      - { value: '`MyNamespace\myFunction`', correct: true }
      - { value: '`myFunction`', correct: false }
      - { value: '`__FUNCTION__`', correct: false }
      - { value: 'An error, as functions cannot be in namespaces.', correct: false }
    help: |
      The `__FUNCTION__` magic constant returns the function name as it was declared. For functions within a namespace, it includes the namespace prefix.
      https://www.php.net/manual/en/language.namespaces.constants.php

  -
    question: >
      Which of the following is NOT a valid access modifier for methods and properties in PHP?
    answers:
      - { value: '`public`', correct: false }
      - { value: '`private`', correct: false }
      - { value: '`protected`', correct: false }
      - { value: '`internal`', correct: true }
    help: |
      PHP supports `public`, `protected`, and `private` access modifiers. `internal` is not a valid PHP access modifier.
      https://www.php.net/manual/en/language.oop5.visibility.php

  -
    question: |
      Which of the following describes a "closure" in PHP?
    answers:
      - { value: 'A function that is defined inside another function.', correct: false }
      - { value: 'An anonymous function that can inherit variables from the parent scope.', correct: true }
      - { value: 'A method that is automatically called when an object is destroyed.', correct: false }
      - { value: 'A function that always returns the same value.', correct: false }
    help: |
      Closures (anonymous functions) are functions that do not have a specified name. They can inherit variables from the parent scope using the `use` construct.
      https://www.php.net/manual/en/functions.anonymous.php

  -
    question: >
      What is the purpose of an abstract method in an abstract class?
    answers:
      - { value: 'It provides a default implementation for child classes.', correct: false }
      - { value: 'It declares a method signature that must be implemented by non-abstract child classes.', correct: true }
      - { value: 'It can only be called statically.', correct: false }
      - { value: 'It prevents the method from being overridden.', correct: false }
    help: |
      An abstract method is a method that is declared, but not implemented, in the abstract class. Any non-abstract class extending the abstract class must implement these abstract methods.
      https://www.php.net/manual/en/language.oop5.abstract.php

  -
    question: >
      When should you use `throw new Exception()` instead of `trigger_error()`?
    answers:
      - { value: 'When you want to log a message without stopping script execution.', correct: false }
      - { value: 'When you want to indicate a recoverable error.', correct: false }
      - { value: 'When you want to signal an exceptional condition that should alter the normal flow of execution and can be caught.', correct: true }
      - { value: 'When you are dealing with deprecated features.', correct: false }
    help: |
      Exceptions are used for exceptional conditions that disrupt the normal flow of the program and can be caught and handled. `trigger_error()` is typically used for less severe, non-fatal errors or warnings.
      https://www.php.net/manual/en/language.exceptions.php

  -
    question: >
      Which of the following is true about traits in PHP?
    answers:
      - { value: 'Traits can be instantiated directly.', correct: false }
      - { value: 'A class can use multiple traits.', correct: true }
      - { value: 'Traits can define constants, but not properties.', correct: false }
      - { value: 'Traits are a form of multiple inheritance.', correct: false }
    help: |
      Traits are a mechanism for code reuse, allowing a class to use multiple traits. They are not a form of multiple inheritance, as they don't define a type hierarchy. Traits can define properties, methods, and abstract methods.
      https://www.php.net/manual/en/language.oop5.traits.php

  -
    question: >
      Which PHP extension is commonly used for secure communication over the internet, such as HTTPS?
    answers:
      - { value: '`OpenSSL`', correct: true }
      - { value: '`Hash`', correct: false }
      - { value: '`Mcrypt`', correct: false }
      - { value: '`Sodium`', correct: false }
    help: |
      The OpenSSL extension offers functions for data encryption and decryption, digital signatures, and other cryptographic operations, commonly used for SSL/TLS.
      https://www.php.net/manual/en/book.openssl.php

  -
    question: >
      Which SPL class allows you to store objects in a way that their order is maintained, and you can add or remove elements from both ends?
    answers:
      - { value: '`SplFixedArray`', correct: false }
      - { value: '`SplDoublyLinkedList`', correct: true }
      - { value: '`SplObjectStorage`', correct: false }
      - { value: '`SplPriorityQueue`', correct: false }
    help: |
      The `SplDoublyLinkedList` class provides the functionalities of a doubly linked list, allowing elements to be added or removed from both the beginning and the end.
      https://www.php.net/manual/en/class.spldoublylinkedlist.php

  -
    question: >
      What is the purpose of the `match` expression introduced in PHP 8.0?
    answers:
      - { value: 'It is a more powerful version of the `switch` statement, allowing for more concise and type-safe comparisons.', correct: true }
      - { value: 'It is used for pattern matching in regular expressions.', correct: false }
      - { value: 'It allows for multiple return values from a function.', correct: false }
      - { value: 'It is a new loop construct.', correct: false }
    help: |
      The `match` expression is similar to `switch` but provides more concise syntax, supports multiple conditions in a single arm, and returns a value. It also uses strict comparisons (`===`).
      https://www.php.net/manual/en/control-structures.match.php

  -
    question: >
      What is the difference between `self` and `static` keywords when referring to class members in PHP?
    answers:
      - { value: '`self` refers to the class where the code is written, while `static` refers to the class that was called at runtime (late static binding).', correct: true }
      - { value: '`self` is used for static methods, and `static` is used for non-static methods.', correct: false }
      - { value: '`self` refers to the current object instance, while `static` refers to the class.', correct: false }
      - { value: 'There is no functional difference; they are interchangeable.', correct: false }
    help: |
      `self` refers to the class in which the code is defined. `static` refers to the class that was originally called at runtime, which is useful for late static binding.
      https://www.php.net/manual/en/language.oop5.late-static-bindings.php

  -
    question: |
      Which of the following is the correct way to define a global function within a namespace in PHP?
    answers:
      - { value: '`namespace MyNamespace; function myFunction() {}`', correct: true }
      - { value: '`global function myFunction() {}`', correct: false }
      - { value: '`function MyNamespace\myFunction() {}`', correct: false }
      - { value: '`use function myFunction;`', correct: false }
    help: |
      Functions defined within a namespace are part of that namespace. To call a global function from within a namespace, you must prefix it with `\` (e.g., `\strlen()`).
      https://www.php.net/manual/en/language.namespaces.definition.php

  -
    question: >
      What is the purpose of the `__invoke()` magic method in PHP?
    answers:
      - { value: 'It is called when an object is used as a function.', correct: true }
      - { value: 'It is called when an object is cloned.', correct: false }
      - { value: 'It is called when an object is converted to a string.', correct: false }
      - { value: 'It is called when a non-existent method is called on an object.', correct: false }
    help: |
      The `__invoke()` method is called when a script tries to call an object as a function.
      https://www.php.net/manual/en/language.oop5.magic.php#object.invoke

  -
    question: >
      When is it mandatory for a child class to implement an abstract method from its parent abstract class?
    answers:
      - { value: 'Only if the child class also declares itself as abstract.', correct: false }
      - { value: 'Only if the child class is not abstract.', correct: true }
      - { value: 'Never, it's optional.', correct: false }
      - { value: 'Only if the method is public.', correct: false }
    help: |
      If a class extends an abstract class, it must implement all of the parent's abstract methods unless it is also declared abstract.
      https://www.php.net/manual/en/language.oop5.abstract.php

  -
    question: >
      Which of the following is a correct way to define a custom exception class in PHP?
    answers:
      - { value: '`class MyException extends Exception {}`', correct: true }
      - { value: '`class MyException implements Throwable {}`', correct: false }
      - { value: '`class MyException extends Error {}`', correct: false }
      - { value: '`interface MyException extends Exception {}`', correct: false }
    help: |
      Custom exception classes should extend the built-in `Exception` class or a subclass of `Exception`.
      https://www.php.net/manual/en/language.exceptions.php

  -
    question: >
      What is the primary purpose of the `#[ReturnTypeWillChange]` attribute introduced in PHP 8.1?
    answers:
      - { value: 'To indicate that a method''s return type will change in a future PHP version, suppressing deprecation warnings.', correct: true }
      - { value: 'To enforce a specific return type for a method.', correct: false }
      - { value: 'To make a method return multiple values.', correct: false }
      - { value: 'To mark a method as deprecated.', correct: false }
    help: |
      The `#[ReturnTypeWillChange]` attribute is used to suppress deprecation warnings for methods that have changed their return type in a new PHP version, allowing for smoother upgrades.
      https://www.php.net/manual/en/migration81.deprecated.php#migration81.deprecated.return-type-will-change

  -
    question: >
      Which SPL interface allows an object to specify how it should be serialized and unserialized?
    answers:
      - { value: '`Countable`', correct: false }
      - { value: '`Traversable`', correct: false }
      - { value: '`Serializable`', correct: true }
      - { value: '`IteratorAggregate`', correct: false }
    help: |
      The `Serializable` interface allows a class to define how its objects are serialized and unserialized.
      https://www.php.net/manual/en/class.serializable.php

  -
    question: >
      What is the purpose of the `#[Deprecated]` attribute in PHP 8.0+?
    answers:
      - { value: 'To mark a class, method, or property as no longer recommended for use, signaling that it may be removed in future versions.', correct: true }
      - { value: 'To prevent a class from being extended.', correct: false }
      - { value: 'To make a method abstract.', correct: false }
      - { value: 'To enforce strict type checking.', correct: false }
    help: |
      The `#[Deprecated]` attribute is used to mark code that is deprecated, indicating that it should no longer be used and may be removed in a future version.
      https://www.php.net/manual/en/language.attributes.php

  -
    question: >
      In PHP OOP, what is "composition"?
    answers:
      - { value: 'A "has-a" relationship where a class contains an instance of another class as a member.', correct: true }
      - { value: 'A "is-a" relationship where a class inherits from another class.', correct: false }
      - { value: 'The process of creating new objects from existing ones.', correct: false }
      - { value: 'The ability of an object to take on many forms.', correct: false }
    help: |
      Composition is a "has-a" relationship where one class contains an instance of another class, allowing for code reuse and flexible designs.
      https://www.php.net/manual/en/language.oop5.php

  -
    question: >
      Which of the following is true about global constants defined with `define()` within a namespace?
    answers:
      - { value: 'They are automatically prefixed with the current namespace.', correct: false }
      - { value: 'They are always in the global namespace, regardless of the current namespace declaration.', correct: true }
      - { value: 'They can only be accessed using their fully qualified name.', correct: false }
      - { value: 'They are deprecated in PHP 8.2.', correct: false }
    help: |
      Constants defined with `define()` are always global. To define a namespace-scoped constant, use the `const` keyword.
      https://www.php.net/manual/en/language.namespaces.constants.php

  -
    question: >
      What is the purpose of the `#[Immutable]` attribute (or `readonly` classes in PHP 8.2)?
    answers:
      - { value: 'To ensure that an object''s properties cannot be modified after initialization.', correct: true }
      - { value: 'To prevent a class from being extended.', correct: false }
      - { value: 'To make all methods in a class static.', correct: false }
      - { value: 'To allow dynamic properties.', correct: false }
    help: |
      The `#[Immutable]` attribute (or `readonly` classes in PHP 8.2) ensures that properties of an object cannot be modified after the object has been constructed.
      https://www.php.net/manual/en/migration82.new-features.php#migration82.new-features.readonly-classes

  -
    question: >
      What is the purpose of the `#[Pure]` attribute in PHP 8.1+?
    answers:
      - { value: 'To indicate that a function or method has no side effects and its return value depends only on its inputs.', correct: true }
      - { value: 'To mark a function as deprecated.', correct: false }
      - { value: 'To enforce strict type checking for function parameters.', correct: false }
      - { value: 'To make a function return a constant value.', correct: false }
    help: |
      The `#[Pure]` attribute indicates that a function or method has no side effects and its output depends solely on its inputs. This can be useful for static analysis tools.
      https://php.watch/versions/8.1/pure-attribute

  -
    question: >
      Which of the following is a correct way to catch any `Throwable` (including `Exception` and `Error`) in PHP 7.0+?
    answers:
      - { value: '`catch (Exception $e)`', correct: false }
      - { value: '`catch (Error $e)`', correct: false }
      - { value: '`catch (Throwable $e)`', correct: true }
      - { value: '`catch (RuntimeException $e)`', correct: false }
    help: |
      In PHP 7.0+, both `Exception` and `Error` implement the `Throwable` interface. Catching `Throwable` will catch both.
      https://www.php.net/manual/en/class.throwable.php

  -
    question: >
      What is the purpose of the `#[NoReturn]` attribute in PHP 8.1+?
    answers:
      - { value: 'To indicate that a function or method will never return, typically by throwing an exception or exiting the script.', correct: true }
      - { value: 'To prevent a function from returning any value.', correct: false }
      - { value: 'To make a function return `void`.', correct: false }
      - { value: 'To mark a function as asynchronous.', correct: false }
    help: |
      The `#[NoReturn]` attribute indicates that a function or method will never return to the caller, meaning it will always terminate execution (e.g., via `throw`, `die`, `exit`).
      https://php.watch/versions/8.1/noreturn-attribute

  -
    question: >
      Which SPL class provides an array-like object that allows you to specify a fixed size?
    answers:
      - { value: '`SplQueue`', correct: false }
      - { value: '`SplStack`', correct: false }
      - { value: '`SplFixedArray`', correct: true }
      - { value: '`SplObjectStorage`', correct: false }
    help: |
      The `SplFixedArray` class provides the main functionalities of a fixed-size array.
      https://www.php.net/manual/en/class.splfixedarray.php

  -
    question: >
      What is the primary benefit of using named arguments in PHP 8.0+?
    answers:
      - { value: 'They allow you to pass arguments to a function based on their parameter names, making code more readable and flexible.', correct: true }
      - { value: 'They enforce strict type checking for function arguments.', correct: false }
      - { value: 'They allow functions to have an unlimited number of arguments.', correct: false }
      - { value: 'They automatically convert argument types.', correct: false }
    help: |
      Named arguments allow passing arguments to a function by specifying the parameter name, making the code more readable and allowing arguments to be passed in any order, skipping optional ones.
      https://www.php.net/manual/en/functions.arguments.php#functions.named-arguments

  -
    question: >
      Which of the following is true about the `final` keyword in PHP?
    answers:
      - { value: 'When applied to a class, it prevents the class from being extended.', correct: true }
      - { value: 'When applied to a method, it prevents the method from being overridden by child classes.', correct: true }
      - { value: 'It can be applied to properties to make them read-only.', correct: false }
      - { value: 'It can be applied to interfaces.', correct: false }
    help: |
      The `final` keyword can be used to prevent a class from being inherited or a method from being overridden.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[AllowDynamicProperties]` attribute in PHP 8.2?
    answers:
      - { value: 'To explicitly allow dynamic properties on a class, suppressing the deprecation warning.', correct: true }
      - { value: 'To prevent any properties from being added dynamically.', correct: false }
      - { value: 'To make all properties of a class dynamic by default.', correct: false }
      - { value: 'To enable strict type checking for dynamic properties.', correct: false }
    help: |
      In PHP 8.2, dynamic properties are deprecated. The `#[AllowDynamicProperties]` attribute can be added to a class to explicitly allow them and suppress the deprecation warning.
      https://www.php.net/manual/en/migration82.deprecated.php#migration82.deprecated.dynamic-properties

  -
    question: >
      Which SPL class provides a way to map objects to arbitrary data, acting as a hash map where objects are keys?
    answers:
      - { value: '`SplObjectStorage`', correct: true }
      - { value: '`SplFixedArray`', correct: false }
      - { value: '`SplHeap`', correct: false }
      - { value: '`SplPriorityQueue`', correct: false }
    help: |
      The `SplObjectStorage` class provides a way to map objects to data, where objects serve as keys.
      https://www.php.net/manual/en/class.splobjectstorage.php

  -
    question: >
      What is the purpose of the `__debugInfo()` magic method in PHP?
    answers:
      - { value: 'It is called when `var_dump()` is used on an object, allowing custom debug information.', correct: true }
      - { value: 'It is called when an object is serialized.', correct: false }
      - { value: 'It is called when an object is converted to a string.', correct: false }
      - { value: 'It is called when an error occurs within the object.', correct: false }
    help: |
      The `__debugInfo()` magic method is called when `var_dump()` is used on an object, allowing the developer to customize the information displayed.
      https://www.php.net/manual/en/language.oop5.magic.php#object.debuginfo

  -
    question: >
      Which of the following is a valid way to define a constant within a class in PHP?
    answers:
      - { value: '`const MY_CONSTANT = 'value';`', correct: true }
      - { value: '`define('MY_CLASS::MY_CONSTANT', 'value');`', correct: false }
      - { value: '`public $MY_CONSTANT = 'value';`', correct: false }
      - { value: '`static $MY_CONSTANT = 'value';`', correct: false }
    help: |
      Class constants are defined using the `const` keyword inside a class definition.
      https://www.php.net/manual/en/language.oop5.constants.php

  -
    question: >
      What is the purpose of the `__clone()` magic method in PHP?
    answers:
      - { value: 'It is called when an object is duplicated using the `clone` keyword, allowing custom logic for the new object.', correct: true }
      - { value: 'It is called when an object is destroyed.', correct: false }
      - { value: 'It is called when an object is serialized.', correct: false }
      - { value: 'It is called when an object is converted to a string.', correct: false }
    help: |
      The `__clone()` method is called when an object is cloned, allowing for custom logic to be executed on the new object.
      https://www.php.net/manual/en/language.oop5.cloning.php

  -
    question: >
      Which PHP extension is commonly used for interacting with web servers and making HTTP requests?
    answers:
      - { value: '`cURL`', correct: true }
      - { value: '`Sockets`', correct: false }
      - { value: '`FTP`', correct: false }
      - { value: '`XMLRPC`', correct: false }
    help: |
      The `cURL` extension allows you to connect and communicate to many different types of servers with many different types of protocols.
      https://www.php.net/manual/en/book.curl.php

  -
    question: >
      Which SPL class provides an iterator for traversing directories?
    answers:
      - { value: '`FilesystemIterator`', correct: true }
      - { value: '`RecursiveDirectoryIterator`', correct: true }
      - { value: '`DirectoryIterator`', correct: true }
      - { value: '`GlobIterator`', correct: true }
    help: |
      SPL provides several iterators for file system operations, including `DirectoryIterator`, `FilesystemIterator`, `RecursiveDirectoryIterator`, and `GlobIterator`.
      https://www.php.net/manual/en/spl.files.php

  -
    question: >
      What is the purpose of the `__toString()` magic method in PHP?
    answers:
      - { value: 'It is called when an object is converted to a string, e.g., by `echo` or `print`.', correct: true }
      - { value: 'It is called when an object is serialized.', correct: false }
      - { value: 'It is called when an object is cloned.', correct: false }
      - { value: 'It is called when a non-existent method is called on an object.', correct: false }
    help: |
      The `__toString()` method allows a class to decide how it will react when it is treated like a string.
      https://www.php.net/manual/en/language.oop5.magic.php#object.tostring

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: 'To explicitly declare that a method is intended to override a method from a parent class or implemented interface.', correct: true }
      - { value: 'To prevent a method from being overridden.', correct: false }
      - { value: 'To mark a method as deprecated.', correct: false }
      - { value: 'To make a method abstract.', correct: false }
    help: |
      The `#[Override]` attribute helps prevent accidental bugs by ensuring that a method is indeed overriding a parent method.
      https://www.php.net/manual/en/migration83.new-features.php#migration83.new-features.override-attribute

  -
    question: >
      Which of the following is true about `const` vs `define()` for defining constants in PHP?
    answers:
      - { value: '`const` can be used inside classes, while `define()` cannot.', correct: true }
      - { value: '`define()` can be used inside functions, while `const` cannot.', correct: true }
      - { value: '`const` defines case-insensitive constants by default, while `define()` defines case-sensitive.', correct: false }
      - { value: '`const` constants are resolved at runtime, while `define()` constants are resolved at compile time.', correct: false }
    help: |
      `const` is a language construct that defines constants at compile time and can be used inside classes. `define()` is a function that defines constants at runtime and can be used inside functions. `const` constants are always case-sensitive.
      https://www.php.net/manual/en/language.constants.php

  -
    question: >
      Which SPL class allows you to store objects and associate arbitrary data with them, where the objects themselves are used as keys?
    answers:
      - { value: '`SplObjectStorage`', correct: true }
      - { value: '`SplFixedArray`', correct: false }
      - { value: '`SplHeap`', correct: false }
      - { value: '`SplPriorityQueue`', correct: false }
    help: |
      The `SplObjectStorage` class provides a way to map objects to data, where objects serve as keys.
      https://www.php.net/manual/en/class.splobjectstorage.php

  -
    question: >
      What is the purpose of the `__sleep()` and `__wakeup()` magic methods in PHP?
    answers:
      - { value: '`__sleep()` is called before serialization, and `__wakeup()` is called after unserialization.', correct: true }
      - { value: '`__sleep()` is called when an object is destroyed, and `__wakeup()` is called when it is created.', correct: false }
      - { value: 'They are used for asynchronous operations.', correct: false }
      - { value: 'They are used for debugging purposes.', correct: false }
    help: |
      `__sleep()` is called prior to serialization. It should return an array of property names that should be serialized. `__wakeup()` is called immediately after unserialization.
      https://www.php.net/manual/en/language.oop5.magic.php#object.sleep

  -
    question: >
      Which SPL class provides a way to implement a min-heap or max-heap data structure?
    answers:
      - { value: '`SplQueue`', correct: false }
      - { value: '`SplStack`', correct: false }
      - { value: '`SplHeap`', correct: true }
      - { value: '`SplPriorityQueue`', correct: true }
    help: |
      `SplHeap` is the base class for heaps, and `SplMinHeap` and `SplMaxHeap` (subclasses of `SplHeap`) provide min-heap and max-heap functionalities respectively. `SplPriorityQueue` is also a type of heap.
      https://www.php.net/manual/en/class.splheap.php
      https://www.php.net/manual/en/class.splpriorityqueue.php

  -
    question: >
      What is the purpose of the `__call()` magic method in PHP?
    answers:
      - { value: 'It is triggered when invoking inaccessible methods in an object context.', correct: true }
      - { value: 'It is triggered when invoking inaccessible static methods in a static context.', correct: false }
      - { value: 'It is triggered when an object is used as a function.', correct: false }
      - { value: 'It is triggered when a property is set.', correct: false }
    help: |
      The `__call()` method is triggered when invoking inaccessible or non-existent methods in an object context.
      https://www.php.net/manual/en/language.oop5.magic.php#object.call

  -
    question: >
      What is the purpose of the `__callStatic()` magic method in PHP?
    answers:
      - { value: 'It is triggered when invoking inaccessible static methods in a static context.', correct: true }
      - { value: 'It is triggered when invoking inaccessible methods in an object context.', correct: false }
      - { value: 'It is triggered when an object is used as a function.', correct: false }
      - { value: 'It is triggered when a property is accessed.', correct: false }
    help: |
      The `__callStatic()` method is triggered when invoking inaccessible or non-existent static methods in a static context.
      https://www.php.net/manual/en/language.oop5.magic.php#object.callstatic

  -
    question: >
      Which of the following is a new feature introduced in PHP 8.1?
    answers:
      - { value: 'Enums', correct: true }
      - { value: 'Attributes', correct: false }
      - { value: 'Named arguments', correct: false }
      - { value: 'Match expression', correct: false }
    help: |
      PHP 8.1 introduced Enums (enumerations), providing a way to define a set of named constant values.
      https://www.php.net/manual/en/language.enumerations.php

  -
    question: >
      What is the purpose of the `__get()` and `__set()` magic methods in PHP?
    answers:
      - { value: '`__get()` is triggered when reading inaccessible or non-existent properties, and `__set()` is triggered when writing to them.', correct: true }
      - { value: 'They are used for debugging purposes.', correct: false }
      - { value: 'They are used for cloning objects.', correct: false }
      - { value: 'They define how an object is converted to a string.', correct: false }
    help: |
      `__get()` is used for reading data from inaccessible (protected or private) or non-existent properties. `__set()` is used for writing data to inaccessible or non-existent properties.
      https://www.php.net/manual/en/language.oop5.magic.php#object.get

  -
    question: >
      Which SPL class provides a way to iterate over a fixed-size array?
    answers:
      - { value: '`SplFixedArray`', correct: true }
      - { value: '`ArrayIterator`', correct: true }
      - { value: '`RecursiveArrayIterator`', correct: false }
      - { value: '`SplObjectStorage`', correct: false }
    help: |
      `SplFixedArray` itself is traversable. `ArrayIterator` can also be used to iterate over any array, including a fixed-size array.
      https://www.php.net/manual/en/class.splfixedarray.php
      https://www.php.net/manual/en/class.arrayiterator.php

  -
    question: >
      What is the purpose of the `__isset()` and `__unset()` magic methods in PHP?
    answers:
      - { value: '`__isset()` is triggered when `isset()` is called on inaccessible or non-existent properties, and `__unset()` is triggered when `unset()` is called on them.', correct: true }
      - { value: 'They are used for checking if a method exists.', correct: false }
      - { value: 'They are used for property type checking.', correct: false }
      - { value: 'They are used for defining constants.', correct: false }
    help: |
      `__isset()` is triggered by calling `isset()` or `empty()` on inaccessible or non-existent properties. `__unset()` is triggered by calling `unset()` on inaccessible or non-existent properties.
      https://www.php.net/manual/en/language.oop5.magic.php#object.isset

  -
    question: >
      Which of the following is a new feature introduced in PHP 8.0?
    answers:
      - { value: 'Union Types', correct: true }
      - { value: 'Arrow functions', correct: false }
      - { value: 'Nullsafe operator', correct: true }
      - { value: 'Constructor property promotion', correct: true }
    help: |
      PHP 8.0 introduced several new features, including Union Types, the Nullsafe operator (`?->`), and Constructor Property Promotion. Arrow functions were introduced in PHP 7.4.
      https://www.php.net/manual/en/migration80.new-features.php

  -
    question: >
      What is the purpose of the `#[ReturnTypeWillChange]` attribute in PHP 8.1+?
    answers:
      - { value: 'To indicate that a method''s return type will change in a future PHP version, suppressing deprecation warnings.', correct: true }
      - { value: 'To enforce a specific return type for a method.', correct: false }
      - { value: 'To make a method return multiple values.', correct: false }
      - { value: 'To mark a method as deprecated.', correct: false }
    help: |
      The `#[ReturnTypeWillChange]` attribute is used to suppress deprecation warnings for methods that have changed their return type in a new PHP version, allowing for smoother upgrades.
      https://www.php.net/manual/en/migration81.deprecated.php#migration81.deprecated.return-type-will-change

  -
    question: >
      Which SPL class provides a way to iterate over an array recursively?
    answers:
      - { value: '`ArrayIterator`', correct: false }
      - { value: '`RecursiveArrayIterator`', correct: true }
      - { value: '`SplFixedArray`', correct: false }
      - { value: '`SplObjectStorage`', correct: false }
    help: |
      The `RecursiveArrayIterator` class provides an iterator for recursive iteration over arrays.
      https://www.php.net/manual/en/class.recursivearrayiterator.php

  -
    question: >
      What is the purpose of the `#[NoReturn]` attribute in PHP 8.1+?
    answers:
      - { value: 'To indicate that a function or method will never return, typically by throwing an exception or exiting the script.', correct: true }
      - { value: 'To prevent a function from returning any value.', correct: false }
      - { value: 'To make a function return `void`.', correct: false }
      - { value: 'To mark a function as asynchronous.', correct: false }
    help: |
      The `#[NoReturn]` attribute indicates that a function or method will never return to the caller, meaning it will always terminate execution (e.g., via `throw`, `die`, `exit`).
      https://php.watch/versions/8.1/noreturn-attribute