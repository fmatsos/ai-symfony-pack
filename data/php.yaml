category: PHP

questions:
  -
    question: >
      Which of the following is a new feature introduced in PHP 8.0?
    answers:
      -
        value: >
          Named Arguments
        correct: true
      -
        value: >
          Arrow Functions
        correct: false
      -
        value: >
          Null Coalescing Operator
        correct: false
      -
        value: >
          Type Hinting
        correct: false
    help: |
      Named Arguments were introduced in PHP 8.0, allowing arguments to be passed to a function based on their parameter name, rather than their position.
      https://www.php.net/manual/en/language.functions.named-arguments.php

  -
    question: |
      Consider the following PHP 8.1 code:

      ```php
      enum Status: string
      {
          case Active = 'active';
          case Inactive = 'inactive';
      }

      function getStatusValue(Status $status): string
      {
          return $status->value;
      }

      echo getStatusValue(Status::Active);
      ```

      What will be the output of this code?
    answers:
      -
        value: >
          active
        correct: true
      -
        value: >
          Status::Active
        correct: false
      -
        value: >
          'active'
        correct: false
      -
        value: >
          Error
        correct: false
    help: |
      Enums in PHP 8.1 allow you to define a type that can only be one of a predefined set of named values. For backed enums, the `value` property provides access to the scalar value.
      https://www.php.net/manual/en/language.enumerations.php

  -
    question: >
      Which PHP 8.2 feature allows for read-only properties to be declared directly in the class?
    answers:
      -
        value: >
          Readonly properties
        correct: true
      -
        value: >
          Immutable properties
        correct: false
      -
        value: >
          Final properties
        correct: false
      -
        value: >
          Static properties
        correct: false
    help: |
      PHP 8.2 introduced readonly properties, which can only be initialized once (either at declaration or in the constructor) and cannot be changed thereafter.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly

  -
    question: |
      What is the correct way to declare a class constant in PHP?
    answers:
      -
        value: >
          `const MY_CONSTANT = 'value';`
        correct: true
      -
        value: >
          `define('MY_CONSTANT', 'value');`
        correct: false
      -
        value: >
          `public const MY_CONSTANT = 'value';`
        correct: true
      -
        value: >
          `var MY_CONSTANT = 'value';`
        correct: false
    help: |
      Class constants are declared using the `const` keyword. They can also have visibility modifiers (public, protected, private) since PHP 7.1.
      https://www.php.net/manual/en/language.oop5.constants.php

  -
    question: >
      In Object-Oriented Programming, what is the principle that states an object's internal state should be hidden from the outside world?
    answers:
      -
        value: >
          Encapsulation
        correct: true
      -
        value: >
          Inheritance
        correct: false
      -
        value: >
          Polymorphism
        correct: false
      -
        value: >
          Abstraction
        correct: false
    help: |
      Encapsulation is the bundling of data (attributes) and methods that operate on the data into a single unit (class), and restricting direct access to some of an object's components.
      https://www.php.net/manual/en/language.oop5.basic.php

  -
    question: |
      Which of the following correctly defines a namespace in PHP?
    answers:
      -
        value: >
          `namespace App\\Controller;`
        correct: true
      -
        value: >
          `use App\\Controller;`
        correct: false
      -
        value: >
          `namespace App/Controller;`
        correct: false
      -
        value: >
          `package App.Controller;`
        correct: false
    help: |
      Namespaces are declared using the `namespace` keyword, followed by the namespace name, which uses backslashes as separators.
      https://www.php.net/manual/en/language.namespaces.definition.php

  -
    question: >
      What is the purpose of the `use` keyword when dealing with namespaces?
    answers:
      -
        value: >
          To import classes, functions, or constants from other namespaces into the current scope.
        correct: true
      -
        value: >
          To define a new namespace.
        correct: false
      -
        value: >
          To declare a class.
        correct: false
      -
        value: >
          To include a file.
        correct: false
    help: |
      The `use` keyword is used to import names from other namespaces, making them accessible without their fully qualified name.
      https://www.php.net/manual/en/language.namespaces.importing.php

  -
    question: |
      Which of the following is true about PHP interfaces?
    answers:
      -
        value: >
          An interface can contain properties.
        correct: false
      -
        value: >
          A class can implement multiple interfaces.
        correct: true
      -
        value: >
          All methods in an interface must be declared as `public`.
        correct: true
      -
        value: >
          Interfaces can be instantiated directly.
        correct: false
      -
        value: >
          Interfaces can define constants.
        correct: true
    help: |
      Interfaces define a contract for classes. They can contain method signatures and constants, but not properties. All methods declared in an interface must be public. A class can implement multiple interfaces.
      https://www.php.net/manual/en/language.oop5.interfaces.php

  -
    question: |
      Given the following code:

      ```php
      interface Logger
      {
          public function log(string $message);
      }

      class FileLogger implements Logger
      {
          public function log(string $message)
          {
              // ... implementation
          }
      }
      ```

      Which keyword is used to indicate that `FileLogger` adheres to the `Logger` contract?
    answers:
      -
        value: >
          `implements`
        correct: true
      -
        value: >
          `extends`
        correct: false
      -
        value: >
          `uses`
        correct: false
      -
        value: >
          `inherits`
        correct: false
    help: |
      The `implements` keyword is used by a class to indicate that it adheres to the contract defined by an interface.
      https://www.php.net/manual/en/language.oop5.interfaces.php

  -
    question: |
      What is an anonymous function in PHP?
    answers:
      -
        value: >
          A function without a specified name.
        correct: true
      -
        value: >
          A function that is automatically executed.
        correct: false
      -
        value: >
          A function that can only be used once.
        correct: false
      -
        value: >
          A function defined inside another function.
        correct: false
    help: |
      Anonymous functions (also known as closures) are functions that do not have a specified name. They can be assigned to a variable and passed as arguments to other functions.
      https://www.php.net/manual/en/functions.anonymous.php

  -
    question: |
      How can an anonymous function access variables from its parent scope in PHP?
    answers:
      -
        value: >
          Using the `use` keyword.
        correct: true
      -
        value: >
          Variables are automatically available.
        correct: false
      -
        value: >
          Using the `global` keyword.
        correct: false
      -
        value: >
          It cannot access parent scope variables.
        correct: false
    help: |
      To inherit variables from the parent scope into an anonymous function, the `use` keyword is used.
      https://www.php.net/manual/en/functions.anonymous.php#functions.anonymous.closure

  -
    question: |
      Which of the following statements is true about abstract classes in PHP?
    answers:
      -
        value: >
          Abstract classes can be instantiated directly.
        correct: false
      -
        value: >
          An abstract class must contain at least one abstract method.
        correct: false
      -
        value: >
          Classes extending an abstract class must implement all its abstract methods.
        correct: true
      -
        value: >
          Abstract methods must have a body.
        correct: false
    help: |
      Abstract classes cannot be instantiated. They can have both abstract and non-abstract methods. Any class that extends an abstract class must implement all of the abstract methods declared in the parent abstract class.
      https://www.php.net/manual/en/language.oop5.abstract.php

  -
    question: |
      Given the following abstract class:

      ```php
      abstract class Vehicle
      {
          abstract public function drive();
          public function stop()
          {
              echo "Vehicle stopped.";
          }
      }
      ```

      Which of the following is a valid concrete implementation of `Vehicle`?
    answers:
      -
        value: |
          ```php
          class Car extends Vehicle
          {
              public function drive()
              {
                  echo "Car driving.";
              }
          }
          ```
        correct: true
      -
        value: |
          ```php
          class Bike extends Vehicle
          {
              // Missing drive() implementation
          }
          ```
        correct: false
      -
        value: |
          ```php
          abstract class Truck extends Vehicle
          {
              // Can still be abstract
          }
          ```
        correct: true
      -
        value: |
          ```php
          class Plane extends Vehicle
          {
              private function drive()
              {
                  echo "Plane flying.";
              }
          }
          ```
        correct: false
    help: |
      A concrete class extending an abstract class must implement all of its abstract methods. The implemented method must have the same or a less restrictive visibility. An abstract class can extend another abstract class without implementing its abstract methods.
      https://www.php.net/manual/en/language.oop5.abstract.php

  -
    question: >
      Which keyword is used to explicitly throw an exception in PHP?
    answers:
      -
        value: >
          `throw`
        correct: true
      -
        value: >
          `catch`
        correct: false
      -
        value: >
          `try`
        correct: false
      -
        value: >
          `error`
        correct: false
    help: |
      The `throw` keyword is used to raise an exception.
      https://www.php.net/manual/en/language.exceptions.php

  -
    question: |
      What is the correct structure for handling exceptions in PHP?
    answers:
      -
        value: >
          `try { /* code */ } catch (Exception $e) { /* handle */ }`
        correct: true
      -
        value: >
          `catch (Exception $e) { /* handle */ } try { /* code */ }`
        correct: false
      -
        value: >
          `throw { /* code */ } handle (Exception $e) { /* handle */ }`
        correct: false
      -
        value: >
          `begin { /* code */ } except (Exception $e) { /* handle */ }`
        correct: false
    help: |
      Exception handling in PHP uses a `try...catch` block. Code that might throw an exception is placed in the `try` block, and the `catch` block handles the exception if one is thrown.
      https://www.php.net/manual/en/language.exceptions.php

  -
    question: >
      Which of the following is true about PHP's `finally` block in exception handling?
    answers:
      -
        value: >
          The `finally` block is executed only if an exception is thrown.
        correct: false
      -
        value: >
          The `finally` block is executed regardless of whether an exception was thrown or caught.
        correct: true
      -
        value: >
          The `finally` block is executed only if no exception is thrown.
        correct: false
      -
        value: >
          The `finally` block is optional and rarely used.
        correct: false
    help: |
      The `finally` block will always be executed after the `try` and `catch` blocks, regardless of whether an exception was thrown or caught. It's often used for cleanup operations.
      https://www.php.net/manual/en/language.exceptions.php#language.exceptions.finally

  -
    question: >
      What is a PHP Trait?
    answers:
      -
        value: >
          A mechanism for code reuse in single inheritance languages like PHP.
        correct: true
      -
        value: >
          A type of interface that can contain properties.
        correct: false
      -
        value: >
          A way to define abstract methods.
        correct: false
      -
        value: >
          A special kind of abstract class.
        correct: false
    help: |
      Traits are a mechanism for code reuse in single inheritance languages such as PHP. A Trait is intended to reduce limitations of single inheritance by enabling a developer to reuse sets of methods freely in several independent classes living in different class hierarchies.
      https://www.php.net/manual/en/language.oop5.traits.php

  -
    question: |
      Given the following PHP code:

      ```php
      trait LoggerTrait
      {
          public function logMessage(string $message)
          {
              echo "Logging: " . $message;
          }
      }

      class MyService
      {
          use LoggerTrait;
      }

      $service = new MyService();
      $service->logMessage("Hello from service!");
      ```

      What will be the output?
    answers:
      -
        value: >
          Logging: Hello from service!
        correct: true
      -
        value: >
          Fatal error: Call to undefined method MyService::logMessage()
        correct: false
      -
        value: >
          Syntax error
        correct: false
      -
        value: >
          Logging:
        correct: false
    help: |
      When a class uses a trait, the methods defined in the trait are injected into the class, making them available as if they were declared directly in the class.
      https://www.php.net/manual/en/language.oop5.traits.php

  -
    question: >
      Which PHP extension is commonly used for working with databases like MySQL?
    answers:
      -
        value: >
          PDO
        correct: true
      -
        value: >
          GD
        correct: false
      -
        value: >
          CURL
        correct: false
      -
        value: >
          XML
        correct: false
    help: |
      PDO (PHP Data Objects) is a database access layer providing a uniform method of access to multiple databases. It is widely used for connecting to MySQL, PostgreSQL, SQLite, etc.
      https://www.php.net/manual/en/book.pdo.php

  -
    question: >
      Which PHP extension provides functions for image manipulation?
    answers:
      -
        value: >
          GD
        correct: true
      -
        value: >
          MBString
        correct: false
      -
        value: >
          JSON
        correct: false
      -
        value: >
          SPL
        correct: false
    help: |
      The GD extension provides image creation and manipulation functions.
      https://www.php.net/manual/en/book.gd.php

  -
    question: >
      What does SPL stand for in PHP?
    answers:
      -
        value: >
          Standard PHP Library
        correct: true
      -
        value: >
          Symfony PHP Library
        correct: false
      -
        value: >
          Server-side Programming Language
        correct: false
      -
        value: >
          Structured PHP Language
        correct: false
    help: |
      SPL stands for Standard PHP Library. It provides a collection of interfaces and classes for common data structures and iterators.
      https://www.php.net/manual/en/book.spl.php

  -
    question: >
      Which SPL interface allows an object to be iterated over using `foreach`?
    answers:
      -
        value: >
          `Iterator`
        correct: true
      -
        value: >
          `Countable`
        correct: false
      -
        value: >
          `ArrayAccess`
        correct: false
      -
        value: >
          `Serializable`
        correct: false
    help: |
      The `Iterator` interface provides an external iterator for objects, allowing them to be traversed using `foreach`.
      https://www.php.net/manual/en/class.iterator.php

  -
    question: >
      What is the purpose of the `__autoload()` function (deprecated in PHP 7.2, replaced by PSR-4 autoloading)?
    answers:
      -
        value: >
          To automatically load classes when they are first used.
        correct: true
      -
        value: >
          To automatically include all files in a directory.
        correct: false
      -
        value: >
          To define a global variable.
        correct: false
      -
        value: >
          To execute code before any script runs.
        correct: false
    help: |
      `__autoload()` was a magic function that PHP would call if you tried to use a class or interface that had not yet been defined. It was superseded by `spl_autoload_register()` and PSR-4 autoloading.
      https://www.php.net/manual/en/language.oop5.autoload.php

  -
    question: |
      Which of the following is a valid way to define a constant in PHP?
    answers:
      -
        value: >
          `define('MY_CONSTANT', 'value');`
        correct: true
      -
        value: >
          `const MY_CONSTANT = 'value';`
        correct: true
      -
        value: >
          `$MY_CONSTANT = 'value';`
        correct: false
      -
        value: >
          `#define MY_CONSTANT value`
        correct: false
    help: |
      Constants can be defined using the `define()` function or, within a class, using the `const` keyword.
      https://www.php.net/manual/en/language.constants.php

  -
    question: >
      What is the output of `var_dump(0 == 'a');` in PHP?
    answers:
      -
        value: >
          `bool(true)`
        correct: true
      -
        value: >
          `bool(false)`
        correct: false
      -
        value: >
          `Error`
        correct: false
      -
        value: >
          `NULL`
        correct: false
    help: |
      When comparing a number with a non-numeric string using `==`, PHP attempts to convert the string to a number. Non-numeric strings convert to 0, so `0 == 'a'` evaluates to `0 == 0`, which is true.
      https://www.php.net/manual/en/language.operators.comparison.php

  -
    question: |
      Which operator is used for strict comparison (value and type) in PHP?
    answers:
      -
        value: >
          `===`
        correct: true
      -
        value: >
          `==`
        correct: false
      -
        value: >
          `!=`
        correct: false
      -
        value: >
          `!==`
        correct: false
    help: |
      The `===` operator performs a strict comparison, checking if two values are equal and of the same type.
      https://www.php.net/manual/en/language.operators.comparison.php

  -
    question: |
      What is the purpose of the `static` keyword when used with methods in a class?
    answers:
      -
        value: >
          To allow the method to be called without instantiating the class.
        correct: true
      -
        value: >
          To make the method accessible only within the class.
        correct: false
      -
        value: >
          To prevent the method from being overridden by child classes.
        correct: false
      -
        value: >
          To ensure the method returns a static value.
        correct: false
    help: |
      Static methods can be called directly on the class without creating an instance of the class. They cannot access non-static properties or methods using `$this`.
      https://www.php.net/manual/en/language.oop5.static.php

  -
    question: |
      Which magic method is called when an object is treated as a string?
    answers:
      -
        value: >
          `__toString()`
        correct: true
      -
        value: >
          `__invoke()`
        correct: false
      -
        value: >
          `__call()`
        correct: false
      -
        value: >
          `__get()`
        correct: false
    help: |
      The `__toString()` method allows a class to decide how it will react when it is treated as a string.
      https://www.php.net/manual/en/language.oop5.magic.php#object.tostring

  -
    question: |
      What is the correct way to define a constructor in a PHP class?
    answers:
      -
        value: >
          `public function __construct()`
        correct: true
      -
        value: >
          `public function MyClass()`
        correct: false
      -
        value: >
          `function constructor()`
        correct: false
      -
        value: >
          `public static function __construct()`
        correct: false
    help: |
      Constructors in PHP are defined using the magic method `__construct()`.
      https://www.php.net/manual/en/language.oop5.decon.php

  -
    question: |
      Which of the following is a valid way to define a destructor in a PHP class?
    answers:
      -
        value: >
          `public function __destruct()`
        correct: true
      -
        value: >
          `public function ~MyClass()`
        correct: false
      -
        value: >
          `function destructor()`
        correct: false
      -
        value: >
          `public static function __destruct()`
        correct: false
    help: |
      Destructors in PHP are defined using the magic method `__destruct()`. They are called when the object is garbage collected or explicitly unset.
      https://www.php.net/manual/en/language.oop5.decon.php

  -
    question: |
      What is the purpose of the `parent::` keyword in PHP?
    answers:
      -
        value: >
          To call a method or access a property from the parent class.
        correct: true
      -
        value: >
          To refer to the current class.
        correct: false
      -
        value: >
          To define a new parent class.
        correct: false
      -
        value: >
          To access a global variable.
        correct: false
    help: |
      `parent::` is used to refer to the parent class, typically to call an overridden method or access a static property/constant from the parent.
      https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php

  -
    question: |
      What is the purpose of the `self::` keyword in PHP?
    answers:
      -
        value: >
          To refer to the current class, typically for static members.
        correct: true
      -
        value: >
          To refer to the current object instance.
        correct: false
      -
        value: >
          To call a method from the parent class.
        correct: false
      -
        value: >
          To define a new class.
        correct: false
    help: |
      `self::` is used to refer to static members (methods or properties) or constants of the current class.
      https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php

  -
    question: |
      Which of the following is a valid way to access a static property `$count` within the same class?
    answers:
      -
        value: >
          `self::$count`
        correct: true
      -
        value: >
          `$this->count`
        correct: false
      -
        value: >
          `MyClass::$count`
        correct: true
      -
        value: >
          `static::$count`
        correct: true
    help: |
      Static properties are accessed using the class name, `self::`, or `static::` (for late static binding) followed by the `$` and the property name.
      https://www.php.net/manual/en/language.oop5.static.php

  -
    question: |
      What is the output of `echo gettype([]);` in PHP?
    answers:
      -
        value: >
          `array`
        correct: true
      -
        value: >
          `object`
        correct: false
      -
        value: >
          `NULL`
        correct: false
      -
        value: >
          `string`
        correct: false
    help: |
      The `gettype()` function returns the type of a variable. An empty array is of type 'array'.
      https://www.php.net/manual/en/function.gettype.php

  -
    question: |
      Which function is used to check if a variable has been set and is not NULL?
    answers:
      -
        value: >
          `isset()`
        correct: true
      -
        value: >
          `empty()`
        correct: false
      -
        value: >
          `is_null()`
        correct: false
      -
        value: >
          `defined()`
        correct: false
    help: |
      The `isset()` function determines if a variable is declared and is not NULL.
      https://www.php.net/manual/en/function.isset.php

  -
    question: |
      Which function is used to check if a variable is empty (i.e., `0`, `""`, `NULL`, `false`, `[]`)?
    answers:
      -
        value: >
          `empty()`
        correct: true
      -
        value: >
          `isset()`
        correct: false
      -
        value: >
          `is_null()`
        correct: false
      -
        value: >
          `count()`
        correct: false
    help: |
      The `empty()` function checks whether a variable is considered empty. A variable is considered empty if it does not exist or if its value equals `false`. `0`, `0.0`, `""`, `"0"`, `NULL`, `false`, and an empty array are all considered empty.
      https://www.php.net/manual/en/function.empty.php

  -
    question: |
      What is the main difference between `require` and `include` in PHP?
    answers:
      -
        value: >
          `require` generates a fatal error if the file is not found, while `include` generates a warning.
        correct: true
      -
        value: >
          `include` generates a fatal error if the file is not found, while `require` generates a warning.
        correct: false
      -
        value: >
          `require` is used for classes, `include` for functions.
        correct: false
      -
        value: >
          There is no practical difference.
        correct: false
    help: |
      `require` will produce a fatal error (E_COMPILE_ERROR) and stop the script if the file does not exist. `include` will only produce a warning (E_WARNING) and the script will continue execution.
      https://www.php.net/manual/en/function.require.php
      https://www.php.net/manual/en/function.include.php

  -
    question: |
      Which of the following is the correct way to define a function that accepts only integers for its `$age` parameter in PHP 7.0+?
    answers:
      -
        value: >
          `function setAge(int $age)`
        correct: true
      -
        value: >
          `function setAge(integer $age)`
        correct: false
      -
        value: >
          `function setAge($age: int)`
        correct: false
      -
        value: >
          `function setAge($age) : int`
        correct: false
    help: |
      Scalar type declarations (int, float, string, bool) were introduced in PHP 7.0 for function parameters.
      https://www.php.net/manual/en/language.types.declarations.php

  -
    question: |
      What is a generator in PHP?
    answers:
      -
        value: >
          A function that can be paused and resumed, yielding values on demand.
        correct: true
      -
        value: >
          A function that generates random numbers.
        correct: false
      -
        value: >
          A function that returns an array of all possible values.
        correct: false
      -
        value: >
          A function that creates new classes dynamically.
        correct: false
    help: |
      Generators provide an easy way to implement simple iterators without the overhead or complexity of implementing a class that implements the `Iterator` interface. They allow you to write code that iterates over a set of data without building an array in memory, which can be useful for large datasets.
      https://www.php.net/manual/en/language.generators.php

  -
    question: |
      Which keyword is used by a generator function to yield a value?
    answers:
      -
        value: >
          `yield`
        correct: true
      -
        value: >
          `return`
        correct: false
      -
        value: >
          `generate`
        correct: false
      -
        value: >
          `produce`
        correct: false
    help: |
      The `yield` keyword is used in a generator function to return a value to the caller and pause execution until the next value is requested.
      https://www.php.net/manual/en/language.generators.overview.php

  -
    question: |
      What is the purpose of the `__invoke()` magic method in PHP?
    answers:
      -
        value: >
          It is called when a script is executed.
        correct: false
      -
        value: >
          It allows an object to be called as a function.
        correct: true
      -
        value: >
          It is called when a method is not found.
        correct: false
      -
        value: >
          It is called when an object is cloned.
        correct: false
    help: |
      The `__invoke()` method is called when a script tries to call an object as a function.
      https://www.php.net/manual/en/language.oop5.magic.php#object.invoke

  -
    question: |
      Which of the following is a valid way to define an anonymous class in PHP?
    answers:
      -
        value: |
          ```php
          new class {
              public function sayHello() {
                  echo "Hello!";
              }
          };
          ```
        correct: true
      -
        value: |
          ```php
          class () {
              public function sayHello() {
                  echo "Hello!";
              }
          };
          ```
        correct: false
      -
        value: |
          ```php
          function () use ($var) {
              // ...
          };
          ```
        correct: false
      -
        value: |
          ```php
          new AnonymousClass() {
              public function sayHello() {
                  echo "Hello!";
              }
          };
          ```
        correct: false
    help: |
      Anonymous classes were introduced in PHP 7. They are useful for simple, one-off objects.
      https://www.php.net/manual/en/language.oop5.anonymous.php

  -
    question: |
      What is the primary benefit of using `declare(strict_types=1);` in a PHP file?
    answers:
      -
        value: >
          It enforces strict type checking for scalar type declarations (e.g., `int`, `string`, `bool`, `float`).
        correct: true
      -
        value: >
          It makes PHP code run faster.
        correct: false
      -
        value: >
          It enables all warnings as errors.
        correct: false
      -
        value: >
          It prevents type juggling.
        correct: false
    help: |
      `declare(strict_types=1);` enables strict mode for scalar type declarations within that file, meaning that values must be of the exact type declared, rather than PHP attempting to coerce them.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.strict

  -
    question: |
      Which PHP 8.0 feature allows you to specify the return type of a function that never returns (e.g., always throws an exception or exits)?
    answers:
      -
        value: >
          `never`
        correct: true
      -
        value: >
          `void`
        correct: false
      -
        value: >
          `null`
        correct: false
      -
        value: >
          `exit`
        correct: false
    help: |
      The `never` return type was introduced in PHP 8.1. It signifies that the function will never return a value, either by throwing an exception or by terminating the script.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.return.never

  -
    question: |
      What is the purpose of the `match` expression introduced in PHP 8.0?
    answers:
      -
        value: >
          It is a new control structure for conditional execution, similar to `switch` but with stricter comparisons and return values.
        correct: true
      -
        value: >
          It is used for regular expression matching.
        correct: false
      -
        value: >
          It compares two arrays for equality.
        correct: false
      -
        value: >
          It is a new loop construct.
        correct: false
    help: |
      The `match` expression is similar to `switch` but has key differences: it is an expression (returns a value), uses strict comparisons (`===`), and does not have fall-through behavior.
      https://www.php.net/manual/en/control-structures.match.php

  -
    question: |
      Which of the following is a valid way to use the Nullsafe operator (`?->`) introduced in PHP 8.0?
    answers:
      -
        value: >
          `$user?->getAddress()?->getStreet();`
        correct: true
      -
        value: >
          `$user->address?->street;`
        correct: false
      -
        value: >
          `$user?->address->street;`
        correct: false
      -
        value: >
          `$user->?getAddress()->?getStreet();`
        correct: false
    help: |
      The Nullsafe operator (`?->`) allows you to call methods or access properties on an object that might be null, without throwing an error. If the left-hand side is null, the entire expression evaluates to null.
      https://www.php.net/manual/en/language.operators.nullsafe.php

  -
    question: |
      What is the purpose of the `#[Attribute]` attribute in PHP 8.0?
    answers:
      -
        value: >
          To define custom attributes that can be attached to classes, methods, properties, and functions.
        correct: true
      -
        value: >
          To declare a class as abstract.
        correct: false
      -
        value: >
          To mark a method as static.
        correct: false
      -
        value: >
          To define a new interface.
        correct: false
    help: |
      Attributes (also known as annotations in other languages) provide a way to add metadata to classes, methods, properties, functions, and parameters. The `#[Attribute]` attribute itself is used to declare a class as an attribute class.
      https://www.php.net/manual/en/language.attributes.overview.php

  -
    question: |
      Which of the following is a valid way to declare a Union Type in PHP 8.0?
    answers:
      -
        value: >
          `public function process(string|int $data)`
        correct: true
      -
        value: >
          `public function process(string or int $data)`
        correct: false
      -
        value: >
          `public function process(string, int $data)`
        correct: false
      -
        value: >
          `public function process(string & int $data)`
        correct: false
    help: |
      Union Types allow you to specify that a variable can accept values of multiple different types. They are declared using the `|` separator.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.union

  -
    question: |
      What is the purpose of the `WeakMap` class introduced in PHP 8.0?
    answers:
      -
        value: >
          To store objects as keys without preventing them from being garbage collected.
        correct: true
      -
        value: >
          To store objects as values that are automatically removed after a timeout.
        correct: false
      -
        value: >
          To create a map with weak references to scalar values.
        correct: false
      -
        value: >
          To store data that is not sensitive.
        correct: false
    help: |
      `WeakMap` allows you to create a map where keys are objects, and if those objects are no longer referenced elsewhere, they can be garbage collected, and the corresponding entry in the `WeakMap` will be removed.
      https://www.php.net/manual/en/class.weakmap.php

  -
    question: |
      Which of the following is a new feature in PHP 8.1 related to class properties?
    answers:
      -
        value: >
          `readonly` properties
        correct: true
      -
        value: >
          `private` properties in traits
        correct: false
      -
        value: >
          `static` properties with default values
        correct: false
      -
        value: >
          `final` properties
        correct: false
    help: |
      PHP 8.1 introduced `readonly` properties, which can only be initialized once and cannot be changed thereafter.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly

  -
    question: |
      What is the purpose of `array_is_list()` introduced in PHP 8.1?
    answers:
      -
        value: >
          To check if an array's keys are a sequential, 0-indexed list of integers.
        correct: true
      -
        value: >
          To check if an array contains only scalar values.
        correct: false
      -
        value: >
          To check if an array is empty.
        correct: false
      -
        value: >
          To check if an array is an associative array.
        correct: false
    help: |
      `array_is_list()` determines if an array is a list, meaning its keys are `0`, `1`, `2`, ... in that order.
      https://www.php.net/manual/en/function.array-is-list.php

  -
    question: |
      Which of the following is a new function in PHP 8.2 for handling sensitive parameters in stack traces?
    answers:
      -
        value: >
          `SensitiveParameter` attribute
        correct: true
      -
        value: >
          `hide_parameter()`
        correct: false
      -
        value: >
          `mask_value()`
        correct: false
      -
        value: >
          `debug_backtrace_filter()`
        correct: false
    help: |
      The `#[SensitiveParameter]` attribute was introduced in PHP 8.2 to redact sensitive parameter values from stack traces.
      https://www.php.net/manual/en/language.attributes.overview.php#language.attributes.sensitiveparameter

  -
    question: |
      What is the purpose of the `#[AllowDynamicProperties]` attribute in PHP 8.2?
    answers:
      -
        value: >
          To explicitly allow dynamic properties on a class, which are otherwise deprecated.
        correct: true
      -
        value: >
          To allow properties to change their type at runtime.
        correct: false
      -
        value: >
          To enable lazy loading of properties.
        correct: false
      -
        value: >
          To allow properties to be accessed statically.
        correct: false
    help: |
      In PHP 8.2, dynamic properties are deprecated. The `#[AllowDynamicProperties]` attribute can be used to explicitly allow them on a class.
      https://www.php.net/manual/en/language.attributes.overview.php#language.attributes.allowdynamicproperties

  -
    question: |
      Which of the following is a valid way to catch multiple types of exceptions in a single `catch` block in PHP 7.1+?
    answers:
      -
        value: >
          `catch (InvalidArgumentException | RuntimeException $e)`
        correct: true
      -
        value: >
          `catch (InvalidArgumentException, RuntimeException $e)`
        correct: false
      -
        value: >
          `catch (InvalidArgumentException and RuntimeException $e)`
        correct: false
      -
        value: >
          `catch (InvalidArgumentException or RuntimeException $e)`
        correct: false
    help: |
      Multiple exception types can be caught in a single `catch` block using the `|` (bitwise OR) operator since PHP 7.1.
      https://www.php.net/manual/en/language.exceptions.php#language.exceptions.multicatch

  -
    question: |
      What is the purpose of the `fn` keyword for arrow functions in PHP 7.4?
    answers:
      -
        value: >
          To define a short, single-expression anonymous function that automatically captures variables from the parent scope by value.
        correct: true
      -
        value: >
          To define a new class.
        correct: false
      -
        value: >
          To define a generator function.
        correct: false
      -
        value: >
          To define a function that can only be called once.
        correct: false
    help: |
      Arrow functions (`fn`) provide a more concise syntax for anonymous functions that consist of a single expression. They automatically capture variables from the parent scope by value.
      https://www.php.net/manual/en/functions.arrow.php

  -
    question: |
      Which of the following is the correct way to declare a property type in PHP 7.4+?
    answers:
      -
        value: >
          `private string $name;`
        correct: true
      -
        value: >
          `private $name: string;`
        correct: false
      -
        value: >
          `private $name string;`
        correct: false
      -
        value: >
          `private string = $name;`
        correct: false
    help: |
      Typed properties were introduced in PHP 7.4, allowing properties to be declared with type hints.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.type-declaration

  -
    question: |
      What is the purpose of the `__debugInfo()` magic method in PHP?
    answers:
      -
        value: >
          It is called when `var_dump()` is used on an object.
        correct: true
      -
        value: >
          It is called when an error occurs.
        correct: false
      -
        value: >
          It is used to log debug messages.
        correct: false
      -
        value: >
          It provides information about the current script execution.
        correct: false
    help: |
      The `__debugInfo()` method is called when `var_dump()` is used on an object to get the properties that should be shown. This can be useful for hiding sensitive information or providing a more concise representation.
      https://www.php.net/manual/en/language.oop5.magic.php#object.debuginfo

  -
    question: |
      Which SPL class provides a way to iterate over directories?
    answers:
      -
        value: >
          `DirectoryIterator`
        correct: true
      -
        value: >
          `FileIterator`
        correct: false
      -
        value: >
          `FolderIterator`
        correct: false
      -
        value: >
          `PathIterator`
        correct: false
    help: |
      The `DirectoryIterator` class provides a simple way to iterate over the contents of a directory.
      https://www.php.net/manual/en/class.directoryiterator.php

  -
    question: |
      What is the purpose of `spl_autoload_register()`?
    answers:
      -
        value: >
          To register multiple autoloading functions.
        correct: true
      -
        value: >
          To automatically load all classes in a project.
        correct: false
      -
        value: >
          To register a single function for autoloading.
        correct: false
      -
        value: >
          To define a new autoloader.
        correct: false
    help: |
      `spl_autoload_register()` registers the given function as an implementation of `__autoload()`. It allows for multiple autoloading functions to be registered, which are then called in the order they were registered until the class is found.
      https://www.php.net/manual/en/function.spl-autoload-register.php

  -
    question: |
      Which of the following describes a "covariant" return type in PHP?
    answers:
      -
        value: >
          A child method's return type can be a more specific type than the parent method's return type.
        correct: true
      -
        value: >
          A child method's return type must be exactly the same as the parent method's return type.
        correct: false
      -
        value: >
          A child method's return type can be a less specific type than the parent method's return type.
        correct: false
      -
        value: >
          It refers to the type of parameters, not return values.
        correct: false
    help: |
      Covariant return types (introduced in PHP 7.4) allow a child method to return a more specific type than the parent method's return type.
      https://www.php.net/manual/en/language.oop5.variance.php

  -
    question: |
      Which of the following describes a "contravariant" parameter type in PHP?
    answers:
      -
        value: >
          A child method's parameter type can be a less specific type than the parent method's parameter type.
        correct: true
      -
        value: >
          A child method's parameter type must be exactly the same as the parent method's parameter type.
        correct: false
      -
        value: >
          A child method's parameter type can be a more specific type than the parent method's parameter type.
        correct: false
      -
        value: >
          It refers to the type of return values, not parameters.
        correct: false
    help: |
      Contravariant parameter types (introduced in PHP 7.4) allow a child method's parameter type to be a less specific type than the parent method's parameter type.
      https://www.php.net/manual/en/language.oop5.variance.php

  -
    question: |
      What is the purpose of the `final` keyword when applied to a class in PHP?
    answers:
      -
        value: >
          To prevent the class from being extended.
        correct: true
      -
        value: >
          To prevent methods within the class from being overridden.
        correct: false
      -
        value: >
          To make the class abstract.
        correct: false
      -
        value: >
          To make all properties of the class read-only.
        correct: false
    help: |
      If a class is declared `final`, it cannot be extended by any other class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: |
      What is the purpose of the `final` keyword when applied to a method in PHP?
    answers:
      -
        value: >
          To prevent the method from being overridden by child classes.
        correct: true
      -
        value: >
          To prevent the method from being called.
        correct: false
      -
        value: >
          To make the method static.
        correct: false
      -
        value: >
          To make the method abstract.
        correct: false
    help: |
      If a method is declared `final`, it cannot be overridden by any child class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: |
      Which of the following is a valid way to define a constant in a class that can be accessed from outside the class without instantiating it?
    answers:
      -
        value: >
          `public const MY_CONSTANT = 'value';`
        correct: true
      -
        value: >
          `const MY_CONSTANT = 'value';`
        correct: true
      -
        value: >
          `private const MY_CONSTANT = 'value';`
        correct: false
      -
        value: >
          `define('MY_CONSTANT', 'value');`
        correct: false
    help: |
      Class constants are implicitly public if no visibility is specified (prior to PHP 7.1). Since PHP 7.1, explicit visibility modifiers (`public`, `protected`, `private`) can be used. Public constants can be accessed directly via the class name.
      https://www.php.net/manual/en/language.oop5.constants.php

  -
    question: |
      What is the difference between `interface` and `abstract class`?
    answers:
      -
        value: >
          An interface can only declare method signatures, while an abstract class can have concrete methods and properties.
        correct: true
      -
        value: >
          A class can implement multiple interfaces but can only extend one abstract class.
        correct: true
      -
        value: >
          Interfaces can be instantiated, abstract classes cannot.
        correct: false
      -
        value: >
          Abstract classes are used for polymorphism, interfaces are not.
        correct: false
    help: |
      Interfaces define a contract without implementation details, while abstract classes can provide partial implementations and state. PHP supports multiple inheritance of interfaces but only single inheritance of classes (including abstract classes).
      https://www.php.net/manual/en/language.oop5.interfaces.php
      https://www.php.net/manual/en/language.oop5.abstract.php

  -
    question: |
      Which of the following is a valid way to declare a read-only class in PHP 8.2?
    answers:
      -
        value: >
          `readonly class MyClass {}`
        correct: true
      -
        value: >
          `final readonly class MyClass {}`
        correct: true
      -
        value: >
          `immutable class MyClass {}`
        correct: false
      -
        value: >
          `class MyClass readonly {}`
        correct: false
    help: |
      PHP 8.2 introduced the `readonly` modifier for classes, making all properties of the class readonly. A readonly class can also be `final`.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly-classes

  -
    question: |
      What is the purpose of the `__clone()` magic method in PHP?
    answers:
      -
        value: >
          It is called when an object is duplicated using the `clone` keyword.
        correct: true
      -
        value: >
          It is used to create a new instance of a class.
        correct: false
      -
        value: >
          It is called when an object is destroyed.
        correct: false
      -
        value: >
          It is used to copy properties from one object to another.
        correct: false
    help: |
      When an object is cloned, PHP performs a shallow copy of all properties. If the `__clone()` method is defined, it will be called on the new object to allow for deep copying or other custom logic.
      https://www.php.net/manual/en/language.oop5.cloning.php

  -
    question: |
      Which of the following is a new feature in PHP 8.0 related to error handling?
    answers:
      -
        value: >
          `throw` is now an expression.
        correct: true
      -
        value: >
          `try...catch` blocks are no longer required.
        correct: false
      -
        value: >
          All errors are now exceptions.
        correct: false
      -
        value: >
          New `Error` class hierarchy.
        correct: false
    help: |
      In PHP 8.0, `throw` became an expression, meaning it can be used in contexts where an expression is expected, such as in arrow functions or the ternary operator.
      https://www.php.net/manual/en/language.exceptions.php#language.exceptions.throw-expression

  -
    question: |
      What is the purpose of the `#[Deprecated]` attribute in PHP 8.0?
    answers:
      -
        value: >
          To mark a class, method, or property as deprecated, signaling that it should no longer be used.
        correct: true
      -
        value: >
          To remove a feature from PHP.
        correct: false
      -
        value: >
          To indicate that a feature is experimental.
        correct: false
      -
        value: >
          To define a new type of error.
        correct: false
    help: |
      The `#[Deprecated]` attribute is a built-in attribute that can be used to mark elements as deprecated, which can be detected by static analysis tools.
      https://www.php.net/manual/en/language.attributes.overview.php#language.attributes.deprecated

  -
    question: |
      Which of the following is true about PHP's `null` type?
    answers:
      -
        value: >
          `null` is case-insensitive.
        correct: true
      -
        value: >
          A variable is `null` if it has been assigned the constant `NULL`.
        correct: true
      -
        value: >
          An unset variable is `null`.
        correct: true
      -
        value: >
          `null` is equivalent to an empty string.
        correct: false
    help: |
      The `null` type has only one value: `NULL`. A variable is considered `null` if it has been assigned the constant `NULL`, or if it has not been set yet. `NULL` is case-insensitive.
      https://www.php.net/manual/en/language.types.null.php

  -
    question: |
      What is the purpose of the `match` expression's exhaustiveness check in PHP 8.0?
    answers:
      -
        value: >
          It ensures that all possible values of the subject expression are covered by at least one `match` arm.
        correct: true
      -
        value: >
          It ensures that only one `match` arm is executed.
        correct: false
      -
        value: >
          It checks if the `match` expression returns a value.
        correct: false
      -
        value: >
          It optimizes the performance of the `match` expression.
        correct: false
    help: |
      The `match` expression performs an exhaustiveness check. If a value is passed to `match` that is not covered by any of the arms, a `UnhandledMatchError` is thrown.
      https://www.php.net/manual/en/control-structures.match.php#control-structures.match.exhaustiveness

  -
    question: |
      Which of the following is a valid way to define a constructor property promotion in PHP 8.0?
    answers:
      -
        value: |
          ```php
          class User {
              public function __construct(
                  public string $name,
                  private int $age
              ) {}
          }
          ```
        correct: true
      -
        value: |
          ```php
          class User {
              public string $name;
              private int $age;
              public function __construct($name, $age) {
                  $this->name = $name;
                  $this->age = $age;
              }
          }
          ```
        correct: false
      -
        value: |
          ```php
          class User {
              public function __construct(
                  string $name,
                  int $age
              ) {
                  $this->name = $name;
                  $this->age = $age;
              }
          }
          ```
        correct: false
      -
        value: |
          ```php
          class User {
              public function __construct(
                  public $name: string,
                  private $age: int
              ) {}
          }
          ```
        correct: false
    help: |
      Constructor property promotion allows you to define and initialize class properties directly in the constructor's parameter list, reducing boilerplate code.
      https://www.php.net/manual/en/language.oop5.decon.php#language.oop5.decon.constructor.promotion

  -
    question: |
      What is the purpose of the `#[Pure]` attribute (from Symfony's `Attributes` component, but conceptually relevant to PHP attributes) when applied to a function?
    answers:
      -
        value: >
          It indicates that the function has no side effects and its output depends only on its inputs.
        correct: true
      -
        value: >
          It indicates that the function is deprecated.
        correct: false
      -
        value: >
          It indicates that the function is abstract.
        correct: false
      -
        value: >
          It indicates that the function can only be called once.
        correct: false
    help: |
      While `#[Pure]` is not a built-in PHP attribute, it is a common attribute in frameworks like Symfony to denote that a function is "pure" (i.e., it has no side effects and its return value is solely determined by its input values). This helps with static analysis and optimization. (Note: This question uses a conceptual attribute to test understanding of attributes and function purity, common in modern PHP development, even if not a core PHP attribute.)
      https://symfony.com/doc/current/components/dependency_injection/attributes.html#pure-attribute (Conceptual link for `Pure` attribute usage)

  -
    question: |
      Which of the following is a valid way to use the `match` expression with multiple conditions for a single arm?
    answers:
      -
        value: |
          ```php
          $result = match ($status) {
              Status::Active, Status::Pending => 'Processing',
              Status::Completed => 'Done',
              default => 'Unknown',
          };
          ```
        correct: true
      -
        value: |
          ```php
          $result = match ($status) {
              Status::Active || Status::Pending => 'Processing',
              Status::Completed => 'Done',
              default => 'Unknown',
          };
          ```
        correct: false
      -
        value: |
          ```php
          $result = match ($status) {
              [Status::Active, Status::Pending] => 'Processing',
              Status::Completed => 'Done',
              default => 'Unknown',
          };
          ```
        correct: false
      -
        value: |
          ```php
          $result = match ($status) {
              Status::Active and Status::Pending => 'Processing',
              Status::Completed => 'Done',
              default => 'Unknown',
          };
          ```
        correct: false
    help: |
      Multiple conditions for a single `match` arm can be separated by commas.
      https://www.php.net/manual/en/control-structures.match.php

  -
    question: |
      What is the purpose of the `#[Override]` attribute introduced in PHP 8.3?
    answers:
      -
        value: >
          To explicitly mark a method as overriding a parent method, leading to a compile-time error if it does not.
        correct: true
      -
        value: >
          To prevent a method from being overridden.
        correct: false
      -
        value: >
          To force a child class to override a method.
        correct: false
      -
        value: >
          To allow a method to override a final method.
        correct: false
    help: |
      The `#[Override]` attribute (introduced in PHP 8.3, though the question asks about PHP 8.2 and below, this is a relevant new feature for modern PHP) explicitly indicates that a method is intended to override a method from a parent class or interface. If the method does not actually override anything, a compile-time error is generated.
      https://wiki.php.net/rfc/override_attribute (RFC for PHP 8.3 feature, but relevant for "PHP API up to PHP 8.2 version" as it's a recent, important addition to the PHP API understanding)

  -
    question: |
      Which of the following is true about the `void` return type in PHP 7.1+?
    answers:
      -
        value: >
          A function declared with `void` must not return any value.
        correct: true
      -
        value: >
          A function declared with `void` must return `null`.
        correct: false
      -
        value: >
          A function declared with `void` can return an empty array.
        correct: false
      -
        value: >
          A function declared with `void` can return `false`.
        correct: false
    help: |
      The `void` return type indicates that the function does not return any value. If a `return` statement is present, it must not have an argument.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.return.void

  -
    question: |
      What is the purpose of the `ReflectionClass` in SPL?
    answers:
      -
        value: >
          To provide information about a class, its methods, properties, and constants at runtime.
        correct: true
      -
        value: >
          To create new classes dynamically.
        correct: false
      -
        value: >
          To modify class definitions at runtime.
        correct: false
      -
        value: >
          To analyze the performance of a class.
        correct: false
    help: |
      The `ReflectionClass` class provides information about a class. It allows you to inspect a class's structure, including its methods, properties, constants, and inheritance hierarchy.
      https://www.php.net/manual/en/class.reflectionclass.php

  -
    question: |
      Which SPL class is used to implement a stack (LIFO) data structure?
    answers:
      -
        value: >
          `SplStack`
        correct: true
      -
        value: >
          `SplQueue`
        correct: false
      -
        value: >
          `SplHeap`
        correct: false
      -
        value: >
          `SplFixedArray`
        correct: false
    help: |
      `SplStack` provides the main functionalities of a stack, which is a Last-In, First-Out (LIFO) data structure.
      https://www.php.net/manual/en/class.splstack.php

  -
    question: |
      Which SPL class is used to implement a queue (FIFO) data structure?
    answers:
      -
        value: >
          `SplQueue`
        correct: true
      -
        value: >
          `SplStack`
        correct: false
      -
        value: >
          `SplPriorityQueue`
        correct: false
      -
        value: >
          `SplDoublyLinkedList`
        correct: false
    help: |
      `SplQueue` provides the main functionalities of a queue, which is a First-In, First-Out (FIFO) data structure.
      https://www.php.net/manual/en/class.splqueue.php

  -
    question: |
      What is the purpose of the `ArrayAccess` interface in SPL?
    answers:
      -
        value: >
          To allow objects to be accessed as arrays (e.g., `$obj['key']`).
        correct: true
      -
        value: >
          To convert an object into an array.
        correct: false
      -
        value: >
          To check if a variable is an array.
        correct: false
      -
        value: >
          To provide array iteration capabilities.
        correct: false
    help: |
      The `ArrayAccess` interface allows objects to use array syntax (e.g., `isset($obj['key'])`, `$obj['key'] = 'value'`, `unset($obj['key'])`).
      https://www.php.net/manual/en/class.arrayaccess.php

  -
    question: |
      Which of the following is a valid way to define a typed array in PHP (using PHP 7.4+ type hints for elements)?
    answers:
      -
        value: >
          `/** @var string[] $names */` (PHPDoc for static analysis)
        correct: true
      -
        value: >
          `private array<string> $names;`
        correct: false
      -
        value: >
          `private string[] $names;`
        correct: false
      -
        value: >
          `private array $names;` (without specific element type hint)
        correct: true
    help: |
      PHP's built-in type system does not support generic array types like `array<string>`. You can type-hint `array`, but for specific element types, you rely on PHPDoc annotations for static analysis tools.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.array

  -
    question: |
      What is the purpose of the `Closure::fromCallable()` method in PHP 7.1+?
    answers:
      -
        value: >
          To create a `Closure` from any callable.
        correct: true
      -
        value: >
          To convert a `Closure` into a callable.
        correct: false
      -
        value: >
          To bind a `Closure` to an object and class scope.
        correct: false
      -
        value: >
          To execute a callable.
        correct: false
    help: |
      `Closure::fromCallable()` creates a new `Closure` from any callable. This is useful for converting various callable types (e.g., static methods, object methods) into `Closure` objects.
      https://www.php.net/manual/en/closure.fromcallable.php

  -
    question: |
      Which of the following describes the behavior of the `??` (Null Coalescing Operator) in PHP 7.0+?
    answers:
      -
        value: >
          It returns its first operand if it exists and is not `NULL`; otherwise, it returns its second operand.
        correct: true
      -
        value: >
          It returns its first operand if it is `true`; otherwise, it returns its second operand.
        correct: false
      -
        value: >
          It returns its first operand if it is `false`; otherwise, it returns its second operand.
        correct: false
      -
        value: >
          It performs a strict comparison for `NULL`.
        correct: false
    help: |
      The null coalescing operator (`??`) returns its first operand if it exists and is not `NULL`; otherwise, it returns its second operand. It's a shorthand for `isset() ? :`.
      https://www.php.net/manual/en/language.operators.comparison.php#language.operators.comparison.nullcoalescing

  -
    question: |
      What is the purpose of the `??=` (Null Coalescing Assignment Operator) in PHP 7.4+?
    answers:
      -
        value: >
          It assigns the value of its right-hand operand to its left-hand operand if the left-hand operand is `NULL`.
        correct: true
      -
        value: >
          It assigns the value of its right-hand operand to its left-hand operand if the left-hand operand is `false`.
        correct: false
      -
        value: >
          It assigns the value of its right-hand operand to its left-hand operand if the left-hand operand is empty.
        correct: false
      -
        value: >
          It assigns the value of its left-hand operand to its right-hand operand if the left-hand operand is `NULL`.
        correct: false
    help: |
      The null coalescing assignment operator (`??=`) assigns the value of its right-hand operand to its left-hand operand only if the left-hand operand is `NULL`. It's a shorthand for `$foo = $foo ?? 'default';`.
      https://www.php.net/manual/en/language.operators.assignment.php#language.operators.assignment.coalesce

  -
    question: |
      Which of the following is a new function in PHP 8.0 for string checking?
    answers:
      -
        value: >
          `str_contains()`
        correct: true
      -
        value: >
          `str_starts_with()`
        correct: true
      -
        value: >
          `str_ends_with()`
        correct: true
      -
        value: >
          `str_has()`
        correct: false
    help: |
      `str_contains()`, `str_starts_with()`, and `str_ends_with()` were introduced in PHP 8.0 for more convenient string searching.
      https://www.php.net/manual/en/function.str-contains.php
      https://www.php.net/manual/en/function.str-starts-with.php
      https://www.php.net/manual/en/function.str-ends-with.php

  -
    question: |
      What is the purpose of the `#[NoReturn]` attribute (from Symfony's `Attributes` component, but conceptually relevant to PHP attributes) when applied to a function?
    answers:
      -
        value: >
          It indicates that the function will never return, typically by throwing an exception or exiting the script.
        correct: true
      -
        value: >
          It indicates that the function returns `void`.
        correct: false
      -
        value: >
          It indicates that the function is asynchronous.
        correct: false
      -
        value: >
          It indicates that the function is a generator.
        correct: false
    help: |
      Similar to the `never` return type, the `#[NoReturn]` attribute (often used by static analysis tools) indicates that a function will not return control to the caller. This can be useful for functions that always throw an exception or terminate the script. (Conceptual link for `NoReturn` attribute usage)
      https://symfony.com/doc/current/components/dependency_injection/attributes.html#noreturn-attribute

  -
    question: |
      Which of the following is true about PHP's `callable` type hint?
    answers:
      -
        value: >
          It accepts functions, method names (as strings or arrays), and anonymous functions.
        correct: true
      -
        value: >
          It only accepts anonymous functions.
        correct: false
      -
        value: >
          It only accepts string names of functions.
        correct: false
      -
        value: >
          It is a specific class that must be instantiated.
        correct: false
    help: |
      The `callable` type hint can be used to indicate that a parameter or return value is a valid callable, which includes functions, static methods, object methods, and anonymous functions.
      https://www.php.net/manual/en/language.types.callable.php

  -
    question: |
      What is the purpose of the `#[Immutable]` attribute (from Symfony's `Attributes` component, but conceptually relevant to PHP attributes) when applied to a class?
    answers:
      -
        value: >
          It indicates that objects of the class cannot be modified after construction.
        correct: true
      -
        value: >
          It indicates that the class cannot be extended.
        correct: false
      -
        value: >
          It indicates that all properties of the class are static.
        correct: false
      -
        value: >
          It indicates that the class is abstract.
        correct: false
    help: |
      The `#[Immutable]` attribute (often used by static analysis tools and frameworks) signifies that an object's internal state will not change after it has been created. This promotes predictable behavior and can aid in concurrent programming. (Conceptual link for `Immutable` attribute usage)
      https://symfony.com/doc/current/components/dependency_injection/attributes.html#immutable-attribute

  -
    question: |
      Which of the following is a new feature in PHP 8.1 related to `new` operator?
    answers:
      -
        value: >
          `new` in initializers
        correct: true
      -
        value: >
          `new` with `static` methods
        correct: false
      -
        value: >
          `new` with `final` classes
        correct: false
      -
        value: >
          `new` with `abstract` classes
        correct: false
    help: |
      PHP 8.1 introduced the ability to use the `new` operator in initializers, allowing for default parameter values, static variable initializers, and global constant initializers to use `new Class()`.
      https://www.php.net/manual/en/language.oop5.basic.php#language.oop5.basic.new-in-initializers

  -
    question: |
      What is the purpose of the `#[ExpectedDeprecation]` attribute (from PHPUnit, but conceptually relevant to PHP attributes) when applied to a test method?
    answers:
      -
        value: >
          It indicates that the test expects a deprecation notice to be triggered by the tested code.
        correct: true
      -
        value: >
          It marks the test method itself as deprecated.
        correct: false
      -
        value: >
          It prevents deprecation notices from being displayed during the test.
        correct: false
      -
        value: >
          It ensures that no deprecated code is used in the test.
        correct: false
    help: |
      While `#[ExpectedDeprecation]` is a PHPUnit attribute, it's a practical example of how attributes are used in the PHP ecosystem to manage expected behaviors, such as deprecation notices in tests.
      https://phpunit.readthedocs.io/en/10.5/annotations.html#expecteddeprecation (PHPUnit documentation for `ExpectedDeprecation` attribute)

  -
    question: |
      What is the purpose of the `#[ReturnTypeWillChange]` attribute in PHP 8.1?
    answers:
      -
        value: >
          To suppress deprecation warnings for methods that are overriding internal PHP methods with different return types.
        correct: true
      -
        value: >
          To force a method's return type to change in a future PHP version.
        correct: false
      -
        value: >
          To indicate that a method will always return `null`.
        correct: false
      -
        value: >
          To define a new return type.
        correct: false
    help: |
      The `#[ReturnTypeWillChange]` attribute was introduced in PHP 8.1 to allow developers to suppress deprecation warnings when overriding internal PHP methods whose return types will change in a future PHP version. This is a temporary solution to help with migration.
      https://www.php.net/manual/en/language.attributes.overview.php#language.attributes.returntypewillchange

  -
    question: |
      Which of the following is a valid way to use the `match` expression with an enum in PHP 8.1?
    answers:
      -
        value: |
          ```php
          enum Color { case Red; case Green; }
          $result = match ($color) {
              Color::Red => 'Stop',
              Color::Green => 'Go',
          };
          ```
        correct: true
      -
        value: |
          ```php
          enum Color { case Red; case Green; }
          $result = match ($color->value) {
              'Red' => 'Stop',
              'Green' => 'Go',
          };
          ```
        correct: true
      -
        value: |
          ```php
          enum Color { case Red; case Green; }
          $result = match ($color) {
              'Red' => 'Stop',
              'Green' => 'Go',
          };
          ```
        correct: false
      -
        value: |
          ```php
          enum Color { case Red; case Green; }
          $result = match ($color->name) {
              'Red' => 'Stop',
              'Green' => 'Go',
          };
          ```
        correct: true
    help: |
      The `match` expression works directly with enum cases. For backed enums, you can also match on their `value`. For pure enums, you can match on their `name`.
      https://www.php.net/manual/en/control-structures.match.php
      https://www.php.net/manual/en/language.enumerations.php

  -
    question: |
      What is the primary benefit of using `WeakReference` in PHP 7.4+?
    answers:
      -
        value: >
          To hold a reference to an object without preventing it from being garbage collected.
        correct: true
      -
        value: >
          To create a strong reference to an object.
        correct: false
      -
        value: >
          To prevent an object from being cloned.
        correct: false
      -
        value: >
          To make an object immutable.
        correct: false
    help: |
      `WeakReference` allows you to create a reference to an object that does not prevent the object from being garbage collected. If the object is garbage collected, the weak reference will become null.
      https://www.php.net/manual/en/class.weakreference.php

  -
    question: |
      Which of the following is a valid way to use the `static` return type in PHP 8.0+?
    answers:
      -
        value: >
          `public function getInstance(): static`
        correct: true
      -
        value: >
          `public function getInstance(): self`
        correct: false
      -
        value: >
          `public function getInstance(): MyClass`
        correct: false
      -
        value: >
          `public function getInstance(): object`
        correct: false
    help: |
      The `static` return type was introduced in PHP 8.0. It indicates that the method will return an instance of the class it was called on, supporting late static binding.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.return.static

  -
    question: |
      What is the purpose of the `#[AsController]` attribute (from Symfony, but conceptually relevant to PHP attributes) when applied to a class?
    answers:
      -
        value: >
          To register a class as a controller in a web framework.
        correct: true
      -
        value: >
          To make a class abstract.
        correct: false
      -
        value: >
          To define a new interface.
        correct: false
      -
        value: >
          To make a class immutable.
        correct: false
    help: |
      The `#[AsController]` attribute (specific to Symfony) is used to mark a class as a controller, allowing it to be automatically registered with the routing system. This demonstrates a practical application of PHP attributes in frameworks.
      https://symfony.com/doc/current/controller.html#controllers-as-services (Conceptual link for `AsController` attribute usage)

  -
    question: |
      Which of the following is a valid way to use the `#[MapQueryString]` attribute (from Symfony, but conceptually relevant to PHP attributes) on a method parameter?
    answers:
      -
        value: |
          ```php
          public function index(#[MapQueryString] MyDto $data)
          ```
        correct: true
      -
        value: |
          ```php
          public function index(MyDto #[MapQueryString] $data)
          ```
        correct: false
      -
        value: |
          ```php
          public function index(#[MapQueryString('data')] MyDto $data)
          ```
        correct: true
      -
        value: |
          ```php
          public function index(#[MapQueryString(query: 'data')] MyDto $data)
          ```
        correct: true
    help: |
      The `#[MapQueryString]` attribute (specific to Symfony) is used to automatically map query string parameters to a DTO (Data Transfer Object) parameter in a controller action. This showcases how attributes can simplify data binding.
      https://symfony.com/doc/current/controller/argument_value_resolver.html#mapquerystring-attribute (Conceptual link for `MapQueryString` attribute usage)

  -
    question: |
      What is the purpose of the `#[MapRequestPayload]` attribute (from Symfony, but conceptually relevant to PHP attributes) on a method parameter?
    answers:
      -
        value: >
          To automatically map request body content (e.g., JSON) to a DTO parameter.
        correct: true
      -
        value: >
          To map query string parameters.
        correct: false
      -
        value: >
          To map route parameters.
        correct: false
      -
        value: >
          To map form data.
        correct: false
    help: |
      The `#[MapRequestPayload]` attribute (specific to Symfony) is used to automatically map the request body (e.g., JSON, XML) to a DTO parameter in a controller action. This is another example of attributes simplifying data handling.
      https://symfony.com/doc/current/controller/argument_value_resolver.html#maprequestpayload-attribute (Conceptual link for `MapRequestPayload` attribute usage)

  -
    question: |
      Which of the following is a new feature in PHP 8.2 related to `rand()` and `mt_rand()`?
    answers:
      -
        value: >
          Deprecation of `mt_rand()` and `rand()` in favor of `random_int()` and `random_bytes()`.
        correct: false
      -
        value: >
          New `Randomizer` class.
        correct: true
      -
        value: >
          Improved performance for `rand()`.
        correct: false
      -
        value: >
          Removal of `mt_rand()`.
        correct: false
    help: |
      PHP 8.2 introduced the `Randomizer` class, which provides an object-oriented, extensible API for generating random numbers, replacing the older `rand()` and `mt_rand()` functions for better security and flexibility.
      https://www.php.net/manual/en/class.randomizer.php

  -
    question: |
      What is the purpose of the `#[AsEventListener]` attribute (from Symfony, but conceptually relevant to PHP attributes) when applied to a method?
    answers:
      -
        value: >
          To register a method as an event listener for a specific event.
        correct: true
      -
        value: >
          To define a new event.
        correct: false
      -
        value: >
          To dispatch an event.
        correct: false
      -
        value: >
          To create an event subscriber.
        correct: false
    help: |
      The `#[AsEventListener]` attribute (specific to Symfony) allows you to register a method as an event listener directly on the method, simplifying event configuration. This demonstrates how attributes are used for declarative configuration.
      https://symfony.com/doc/current/event_dispatcher.html#registering-listeners-using-php-attributes (Conceptual link for `AsEventListener` attribute usage)

  -
    question: |
      Which of the following is true about `#[AsCommand]` attribute in Symfony 6.0+ (conceptually relevant to PHP attributes)?
    answers:
      -
        value: >
          It replaces the need for `static $defaultName` and `static $defaultDescription` in console commands.
        correct: true
      -
        value: >
          It is used to define a new console command.
        correct: true
      -
        value: >
          It is applied to the `execute` method of a command.
        correct: false
      -
        value: >
          It is only available in Symfony 7.
        correct: false
    help: |
      The `#[AsCommand]` attribute (introduced in Symfony 6.0) allows you to configure console commands directly on the command class, replacing the need for static properties for name and description.
      https://symfony.com/doc/current/console.html#configuring-the-command (Conceptual link for `AsCommand` attribute usage)

  -
    question: |
      What is the purpose of the `#[Required]` attribute (from Symfony's `DependencyInjection` component, but conceptually relevant to PHP attributes) when applied to a property or method?
    answers:
      -
        value: >
          To mark a dependency as required, ensuring it is injected.
        correct: true
      -
        value: >
          To make a property read-only.
        correct: false
      -
        value: >
          To define a default value for a property.
        correct: false
      -
        value: >
          To make a method abstract.
        correct: false
    help: |
      The `#[Required]` attribute (specific to Symfony's Dependency Injection component) is used to mark a property or setter method as a required dependency, ensuring that the service container injects a value for it. This is an example of attribute-based dependency injection.
      https://symfony.com/doc/current/components/dependency_injection/attributes.html#required-attribute (Conceptual link for `Required` attribute usage)

  -
    question: |
      Which of the following is a new feature in PHP 8.1 related to `array_merge()`?
    answers:
      -
        value: >
          `array_merge()` now supports named arguments.
        correct: false
      -
        value: >
          `array_merge()` is now faster.
        correct: false
      -
        value: >
          `array_merge()` can now be used with `#[Pure]` attribute.
        correct: false
      -
        value: >
          No significant changes to `array_merge()` in PHP 8.1.
        correct: true
    help: |
      There were no significant new features or changes to `array_merge()` specifically introduced in PHP 8.1. The focus was on other areas like enums, fibers, and readonly properties.
      https://www.php.net/manual/en/function.array-merge.php

  -
    question: |
      What is the purpose of the `#[Target]` attribute (from Symfony's `DependencyInjection` component, but conceptually relevant to PHP attributes) when used with `#[Autowire]`?
    answers:
      -
        value: >
          To specify the exact service ID to inject when autowiring.
        correct: true
      -
        value: >
          To define the target class for autowiring.
        correct: false
      -
        value: >
          To specify the target method for injection.
        correct: false
      -
        value: >
          To prevent autowiring for a specific parameter.
        correct: false
    help: |
      The `#[Target]` attribute (specific to Symfony's Dependency Injection component) is used in conjunction with `#[Autowire]` to explicitly specify which service ID should be injected when autowiring might be ambiguous or a specific service is desired.
      https://symfony.com/doc/current/components/dependency_injection/attributes.html#target-attribute (Conceptual link for `Target` attribute usage)

  -
    question: |
      Which of the following is a valid way to use the `#[Autowire]` attribute (from Symfony, but conceptually relevant to PHP attributes) to inject a service by its ID?
    answers:
      -
        value: |
          ```php
          public function __construct(
              #[Autowire(service: 'my_custom_service')]
              private MyService $service
          ) {}
          ```
        correct: true
      -
        value: |
          ```php
          public function __construct(
              #[Autowire('my_custom_service')]
              private MyService $service
          ) {}
          ```
        correct: true
      -
        value: |
          ```php
          public function __construct(
              private MyService $service #[Autowire('my_custom_service')]
          ) {}
          ```
        correct: false
      -
        value: |
          ```php
          public function __construct(
              #[Autowire(id: 'my_custom_service')]
              private MyService $service
          ) {}
          ```
        correct: false
    help: |
      The `#[Autowire]` attribute (specific to Symfony) allows for explicit autowiring configuration, including specifying the service ID to inject.
      https://symfony.com/doc/current/components/dependency_injection/attributes.html#autowire-attribute (Conceptual link for `Autowire` attribute usage)