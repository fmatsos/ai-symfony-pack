category: PHP

questions:
  -
    question: >
      Which of the following is a new feature introduced in PHP 8.0?
    answers:
      -
        value: >
          Named Arguments
        correct: true
      -
        value: >
          Arrow Functions
        correct: false
      -
        value: >
          Null Coalescing Operator
        correct: false
      -
        value: >
          Spread Operator in array expressions
        correct: false
    help: |
      Named Arguments were introduced in PHP 8.0, allowing arguments to be passed to a function based on their parameter name, rather than their position.
      https://www.php.net/manual/en/language.functions.named-arguments.php
  -
    question: |
      Consider the following PHP code:

      ```php
      class MyClass {
          public function __construct() {
              echo "Constructor called.";
          }
          public function __destruct() {
              echo "Destructor called.";
          }
      }

      $obj = new MyClass();
      unset($obj);
      ```
      What will be the output of this code?
    answers:
      -
        value: >
          Constructor called.Destructor called.
        correct: true
      -
        value: >
          Constructor called.
        correct: false
      -
        value: >
          Destructor called.Constructor called.
        correct: false
      -
        value: >
          No output, as `unset` prevents destructor from being called.
        correct: false
    help: |
      The `__construct` method is called when an object is created, and `__destruct` is called when all references to an object are removed or when the script ends. `unset()` explicitly destroys the variable, triggering the destructor.
      https://www.php.net/manual/en/language.oop5.decon.php
  -
    question: >
      What is the primary purpose of namespaces in PHP?
    answers:
      -
        value: >
          To resolve naming conflicts between classes, functions, and constants.
        correct: true
      -
        value: >
          To improve the performance of PHP applications.
        correct: false
      -
        value: >
          To define global variables.
        correct: false
      -
        value: >
          To enable multiple inheritance.
        correct: false
    help: |
      Namespaces are used to solve the problem of name collisions that can occur when combining code from different libraries or applications.
      https://www.php.net/manual/en/language.namespaces.php
  -
    question: |
      Which of the following statements about PHP interfaces is true?
    answers:
      -
        value: >
          A class can implement multiple interfaces.
        correct: true
      -
        value: >
          Interfaces can contain properties.
        correct: false
      -
        value: >
          Methods in an interface can have a body.
        correct: false
      -
        value: >
          Interfaces can extend classes.
        correct: false
    help: |
      Interfaces define a contract for classes. A class can implement multiple interfaces, but interfaces cannot contain properties or method bodies.
      https://www.php.net/manual/en/language.oop5.interfaces.php
  -
    question: |
      Given the following code, what will be the output?

      ```php
      $message = 'Hello';

      $example = function () use ($message) {
          echo $message;
      };

      $message = 'World';

      $example();
      ```
    answers:
      -
        value: >
          Hello
        correct: true
      -
        value: >
          World
        correct: false
      -
        value: >
          Fatal error
        correct: false
      -
        value: >
          Undefined variable
        correct: false
    help: |
      When a variable is imported into a closure using `use`, its value is captured at the time the closure is defined, not when it is executed.
      https://www.php.net/manual/en/functions.anonymous.php
  -
    question: >
      Which of the following is a characteristic of an abstract class in PHP?
    answers:
      -
        value: >
          It cannot be instantiated directly.
        correct: true
      -
        value: >
          All its methods must be abstract.
        correct: false
      -
        value: >
          It cannot contain concrete methods.
        correct: false
      -
        value: >
          It must implement all methods from its parent interface.
        correct: false
    help: |
      Abstract classes cannot be instantiated directly. They can contain both abstract and concrete methods.
      https://www.php.net/manual/en/language.oop5.abstract.php
  -
    question: |
      What is the correct way to catch an exception of type `InvalidArgumentException` in PHP?
    answers:
      -
        value: |
          ```php
          try {
              // code that might throw InvalidArgumentException
          } catch (InvalidArgumentException $e) {
              // handle exception
          }
          ```
        correct: true
      -
        value: |
          ```php
          try {
              // code that might throw InvalidArgumentException
          } catch (Exception $e) {
              // handle exception
          }
          ```
        correct: false
      -
        value: |
          ```php
          handle (InvalidArgumentException $e) {
              // handle exception
          }
          ```
        correct: false
      -
        value: |
          ```php
          if (throws InvalidArgumentException) {
              // handle exception
          }
          ```
        correct: false
    help: |
      Exceptions are caught using a `try...catch` block. You can specify the type of exception to catch.
      https://www.php.net/manual/en/language.exceptions.php
  -
    question: >
      What problem do Traits primarily solve in PHP?
    answers:
      -
        value: >
          Simulating multiple inheritance for classes.
        correct: true
      -
        value: >
          Defining constants within an interface.
        correct: false
      -
        value: >
          Enforcing method signatures across unrelated classes.
        correct: false
      -
        value: >
          Managing dependencies between services.
        correct: false
    help: |
      Traits are a mechanism for code reuse in single inheritance languages like PHP. They allow a class to use methods from multiple traits, effectively simulating multiple inheritance of behavior.
      https://www.php.net/manual/en/language.oop5.traits.php
  -
    question: >
      Which PHP extension is commonly used for working with databases like MySQL?
    answers:
      -
        value: >
          PDO
        correct: true
      -
        value: >
          GD
        correct: false
      -
        value: >
          cURL
        correct: false
      -
        value: >
          XML
        correct: false
    help: |
      PDO (PHP Data Objects) is a database access layer providing a uniform method of access to multiple databases.
      https://www.php.net/manual/en/book.pdo.php
  -
    question: >
      Which SPL class provides a way to iterate over objects that implement the `Traversable` interface?
    answers:
      -
        value: >
          `ArrayIterator`
        correct: false
      -
        value: >
          `SplFixedArray`
        correct: false
      -
        value: >
          `IteratorIterator`
        correct: true
      -
        value: >
          `RecursiveIteratorIterator`
        correct: false
    help: |
      `IteratorIterator` allows you to iterate over any object that implements `Traversable`.
      https://www.php.net/manual/en/class.iteratoriterator.php
  -
    question: >
      Which of the following features was introduced in PHP 8.1?
    answers:
      -
        value: >
          Enums
        correct: true
      -
        value: >
          Match expression
        correct: false
      -
        value: >
          Attributes
        correct: false
      -
        value: >
          Union Types
        correct: false
    help: |
      Enums (enumerations) were introduced in PHP 8.1, providing a way to define a custom type that is limited to one of a few possible values.
      https://www.php.net/manual/en/language.enumerations.php
  -
    question: >
      Which of the following is a new feature in PHP 8.2?
    answers:
      -
        value: >
          Readonly classes
        correct: true
      -
        value: >
          DNF Types (Disjunctive Normal Form Types)
        correct: true
      -
        value: >
          New `Random` extension
        correct: true
      -
        value: >
          `true`, `false`, `null` as standalone types
        correct: false
    help: |
      PHP 8.2 introduced readonly classes, DNF types, and the new `Random` extension. `true`, `false`, `null` as standalone types were introduced in PHP 8.0.
      https://www.php.net/manual/en/migration82.php
  -
    question: >
      What is the visibility scope of a method declared as `protected` in a PHP class?
    answers:
      -
        value: >
          Accessible only from within the class itself.
        correct: false
      -
        value: >
          Accessible from within the class itself and by its child classes.
        correct: true
      -
        value: >
          Accessible from anywhere.
        correct: false
      -
        value: >
          Accessible only from outside the class.
        correct: false
    help: |
      Protected members can be accessed within the class itself and by its inheriting (child) classes.
      https://www.php.net/manual/en/language.oop5.visibility.php
  -
    question: |
      Consider the following PHP code:

      ```php
      class Counter {
          public static int $count = 0;

          public function increment(): void {
              self::$count++;
          }
      }

      $c1 = new Counter();
      $c2 = new Counter();

      $c1->increment();
      $c2->increment();

      echo Counter::$count;
      ```
      What will be the output?
    answers:
      -
        value: >
          2
        correct: true
      -
        value: >
          0
        correct: false
      -
        value: >
          1
        correct: false
      -
        value: >
          Fatal error
        correct: false
    help: |
      Static properties and methods belong to the class itself, not to any specific instance. All instances share the same static property.
      https://www.php.net/manual/en/language.oop5.static.php
  -
    question: >
      What is the purpose of the `use` keyword when dealing with namespaces in PHP?
    answers:
      -
        value: >
          To import classes, interfaces, or functions into the current scope, allowing them to be referred to by their unqualified name.
        correct: true
      -
        value: >
          To define a new namespace.
        correct: false
      -
        value: >
          To declare a variable as global.
        correct: false
      -
        value: >
          To include a file.
        correct: false
    help: |
      The `use` keyword is used to import names from other namespaces, making them easier to reference without their fully qualified name.
      https://www.php.net/manual/en/language.namespaces.importing.php
  -
    question: >
      Can interfaces define constants in PHP?
    answers:
      -
        value: >
          Yes, interfaces can define constants, which are implicitly public.
        correct: true
      -
        value: >
          No, interfaces cannot define constants.
        correct: false
      -
        value: >
          Yes, but they must be declared as `private`.
        correct: false
      -
        value: >
          Only if the interface extends another interface.
        correct: false
    help: |
      Interfaces can define constants. Interface constants work exactly like class constants.
      https://www.php.net/manual/en/language.oop5.interfaces.php#language.oop5.interfaces.constants
  -
    question: >
      Which method of the `Closure` class can be used to duplicate a closure with a new bound object and class scope?
    answers:
      -
        value: >
          `bindTo()`
        correct: true
      -
        value: >
          `call()`
        correct: false
      -
        value: >
          `fromCallable()`
        correct: false
      -
        value: >
          `__invoke()`
        correct: false
    help: |
      The `Closure::bindTo()` method allows you to duplicate a closure with a new bound object and class scope.
      https://www.php.net/manual/en/closure.bindto.php
  -
    question: >
      What is true about abstract methods in PHP?
    answers:
      -
        value: >
          They must be declared with the `abstract` keyword and contain no body.
        correct: true
      -
        value: >
          They must be implemented by the abstract class itself.
        correct: false
      -
        value: >
          They can be declared as `private`.
        correct: false
      -
        value: >
          They are optional for abstract classes.
        correct: false
    help: |
      Abstract methods are declared with the `abstract` keyword and only define the method signature, without an implementation. Subclasses must provide the implementation.
      https://www.php.net/manual/en/language.oop5.abstract.php
  -
    question: >
      When is the code inside a `finally` block executed in PHP's exception handling?
    answers:
      -
        value: >
          Always, regardless of whether an exception was thrown or caught.
        correct: true
      -
        value: >
          Only if an exception was thrown and caught.
        correct: false
      -
        value: >
          Only if no exception was thrown.
        correct: false
      -
        value: >
          Only if the `try` block completed successfully.
        correct: false
    help: |
      The `finally` block will always be executed after the `try` and `catch` blocks, regardless of whether an exception was thrown or caught.
      https://www.php.net/manual/en/language.exceptions.php#language.exceptions.finally
  -
    question: >
      How can method conflicts be resolved when using multiple traits in a single class in PHP?
    answers:
      -
        value: >
          Using the `insteadof` operator.
        correct: true
      -
        value: >
          Using the `as` operator to alias methods.
        correct: true
      -
        value: >
          By defining the conflicting method directly in the class.
        correct: true
      -
        value: >
          It's not possible to resolve conflicts; a fatal error occurs.
        correct: false
    help: |
      PHP provides the `insteadof` operator to choose which method to use when multiple traits define methods with the same name. The `as` operator can be used to alias methods, and defining the method directly in the class overrides trait methods.
      https://www.php.net/manual/en/language.oop5.traits.php#language.oop5.traits.conflict
  -
    question: >
      Which SPL class provides a double-linked list implementation?
    answers:
      -
        value: >
          `SplDoublyLinkedList`
        correct: true
      -
        value: >
          `SplQueue`
        correct: false
      -
        value: >
          `SplStack`
        correct: false
      -
        value: >
          `SplHeap`
        correct: false
    help: |
      `SplDoublyLinkedList` provides the functionality of a doubly-linked list.
      https://www.php.net/manual/en/class.spldoublylinkedlist.php
  -
    question: >
      Which of the following is true about the `match` expression introduced in PHP 8.0 compared to `switch`?
    answers:
      -
        value: >
          It is an expression and can return a value.
        correct: true
      -
        value: >
          It uses strict comparisons (`===`) by default.
        correct: true
      -
        value: >
          It requires explicit `break` statements for each arm.
        correct: false
      -
        value: >
          It supports fall-through behavior.
        correct: false
    help: |
      The `match` expression is a new control flow construct in PHP 8.0. It is an expression (returns a value), uses strict comparisons, and does not have fall-through behavior.
      https://www.php.net/manual/en/control-structures.match.php
  -
    question: >
      Which PHP 8.0 feature allows for a more concise way to declare and initialize class properties directly in the constructor?
    answers:
      -
        value: >
          Constructor Property Promotion
        correct: true
      -
        value: >
          Named Arguments
        correct: false
      -
        value: >
          Union Types
        correct: false
      -
        value: >
          Attributes
        correct: false
    help: |
      Constructor Property Promotion, introduced in PHP 8.0, allows properties to be declared with visibility (public, protected, private) directly in the constructor arguments, automatically creating and assigning them.
      https://www.php.net/manual/en/language.oop5.decon.php#language.oop5.decon.constructor.promotion
  -
    question: >
      How do you refer to a class or function in the global namespace from within a namespaced code?
    answers:
      -
        value: >
          By prefixing the name with a backslash (`\`).
        correct: true
      -
        value: >
          By using the `global` keyword.
        correct: false
      -
        value: >
          It's not possible without a `use` statement.
        correct: false
      -
        value: >
          By using `self::`
        correct: false
    help: |
      To refer to a global class, function, or constant from within a namespaced code, you must prefix it with `\`.
      https://www.php.net/manual/en/language.namespaces.global.php
  -
    question: |
      Given the following interface and class:

      ```php
      interface LoggerInterface {
          public function log(string $message): void;
      }

      class FileLogger implements LoggerInterface {
          public function log(string $message): void {
              // ...
          }
      }

      function process(LoggerInterface $logger): void {
          $logger->log("Processing data.");
      }
      ```
      What is the benefit of type-hinting with `LoggerInterface` in the `process` function?
    answers:
      -
        value: >
          It ensures that any object passed to `process` will have a `log` method.
        correct: true
      -
        value: >
          It makes the `process` function faster.
        correct: false
      -
        value: >
          It allows `process` to accept any type of object.
        correct: false
      -
        value: >
          It automatically instantiates `FileLogger`.
        correct: false
    help: |
      Type-hinting with an interface ensures that the passed object adheres to the contract defined by the interface, guaranteeing the existence of specific methods.
      https://www.php.net/manual/en/language.oop5.typehinting.php
  -
    question: >
      What is a characteristic of a `static` anonymous function (closure) in PHP?
    answers:
      -
        value: >
          It cannot access `$this`.
        correct: true
      -
        value: >
          It can only be defined inside a static method.
        correct: false
      -
        value: >
          It automatically binds to the class it's defined in.
        correct: false
      -
        value: >
          It cannot use variables from the parent scope.
        correct: false
    help: |
      Static anonymous functions do not have a bound object (`$this`) and cannot access it. They can still use variables from the parent scope via `use`.
      https://www.php.net/manual/en/functions.anonymous.php#functions.anonymous.static
  -
    question: >
      If a class extends an abstract class, what must be true?
    answers:
      -
        value: >
          The child class must implement all abstract methods of the parent abstract class.
        correct: true
      -
        value: >
          The child class must also be declared as abstract.
        correct: false
      -
        value: >
          The child class cannot define its own methods.
        correct: false
      -
        value: >
          The child class cannot override concrete methods of the parent.
        correct: false
    help: |
      When a class extends an abstract class, it must implement all inherited abstract methods, or it must itself be declared abstract.
      https://www.php.net/manual/en/language.oop5.abstract.php
  -
    question: >
      In PHP 7 and later, what is the base interface for all errors and exceptions that can be thrown?
    answers:
      -
        value: >
          `Throwable`
        correct: true
      -
        value: >
          `Exception`
        correct: false
      -
        value: >
          `Error`
        correct: false
      -
        value: >
          `RuntimeException`
        correct: false
    help: |
      The `Throwable` interface is the base interface for any object that can be thrown via a `throw` statement, including both `Exception` and `Error` classes.
      https://www.php.net/manual/en/class.throwable.php
  -
    question: |
      Where should the `use` statement for including a trait be placed within a class definition?
    answers:
      -
        value: >
          Inside the class body, after the opening brace.
        correct: true
      -
        value: >
          Before the class declaration.
        correct: false
      -
        value: >
          Inside the constructor.
        correct: false
      -
        value: >
          After the class closing brace.
        correct: false
    help: |
      The `use` statement for traits is placed inside the class body, after the opening brace.
      https://www.php.net/manual/en/language.oop5.traits.php
  -
    question: >
      Which SPL interface must a class implement to be traversable using `foreach`?
    answers:
      -
        value: >
          `Iterator` or `IteratorAggregate`
        correct: true
      -
        value: >
          `Countable`
        correct: false
      -
        value: >
          `ArrayAccess`
        correct: false
      -
        value: >
          `Serializable`
        correct: false
    help: |
      To be traversable with `foreach`, a class must implement either the `Iterator` interface or the `IteratorAggregate` interface.
      https://www.php.net/manual/en/language.oop5.iterations.php
  -
    question: >
      Which of the following describes a Union Type in PHP 8.0?
    answers:
      -
        value: >
          A declaration that accepts values of multiple different types.
        correct: true
      -
        value: >
          A type that combines two or more interfaces.
        correct: false
      -
        value: >
          A type that can be either an object or null.
        correct: false
      -
        value: >
          A type that allows for dynamic type changes at runtime.
        correct: false
    help: |
      Union Types allow a variable to accept values of multiple different types, specified using the `|` operator.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.union
  -
    question: >
      What is the effect of declaring a class as `final` in PHP?
    answers:
      -
        value: >
          The class cannot be extended.
        correct: true
      -
        value: >
          All methods within the class become `final` implicitly.
        correct: false
      -
        value: >
          The class cannot be instantiated.
        correct: false
      -
        value: >
          It prevents properties from being modified.
        correct: false
    help: |
      A `final` class cannot be extended by any other class.
      https://www.php.net/manual/en/language.oop5.final.php
  -
    question: |
      Given the following code:

      ```php
      namespace App\Controller;

      use App\Service\Mailer as MyMailer;

      class UserController {
          public function __construct(MyMailer $mailer) {
              // ...
          }
      }
      ```
      What is the purpose of `as MyMailer`?
    answers:
      -
        value: >
          To create an alias for the `App\\Service\\Mailer` class within the current namespace.
        correct: true
      -
        value: >
          To rename the `Mailer` class globally.
        correct: false
      -
        value: >
          To define a new class named `MyMailer`.
        correct: false
      -
        value: >
          To make `Mailer` a private class.
        correct: false
    help: |
      The `as` keyword is used to alias imported names, allowing them to be referred to by a different name in the current namespace.
      https://www.php.net/manual/en/language.namespaces.importing.php#language.namespaces.importing.alias
  -
    question: >
      How does PHP achieve a form of "multiple inheritance" for behavior, given it only supports single class inheritance?
    answers:
      -
        value: >
          Through the use of Traits.
        correct: true
      -
        value: >
          Through the use of multiple interfaces.
        correct: false
      -
        value: >
          Through abstract classes.
        correct: false
      -
        value: >
          It does not support any form of multiple inheritance.
        correct: false
    help: |
      While PHP supports single class inheritance, traits provide a mechanism for code reuse that allows a class to inherit behavior from multiple sources, simulating multiple inheritance.
      https://www.php.net/manual/en/language.oop5.traits.php
  -
    question: >
      What happens if you bind a closure to `null` using `Closure::bindTo()`?
    answers:
      -
        value: >
          The closure becomes unbound, losing its associated object and class scope.
        correct: true
      -
        value: >
          A fatal error occurs.
        correct: false
      -
        value: >
          The closure's scope becomes global.
        correct: false
      -
        value: >
          The closure is destroyed.
        correct: false
    help: |
      Binding a closure to `null` using `Closure::bindTo()` effectively unbinds it, making `$this` unavailable within the closure.
      https://www.php.net/manual/en/closure.bindto.php
  -
    question: >
      When is it appropriate to use an abstract class over an interface in PHP?
    answers:
      -
        value: >
          When you want to provide a common base implementation for some methods while forcing subclasses to implement others.
        correct: true
      -
        value: >
          When you only need to define a contract without any implementation.
        correct: false
      -
        value: >
          When you need to allow multiple inheritance of state.
        correct: false
      -
        value: >
          When you want to define constants that can be overridden by child classes.
        correct: false
    help: |
      Abstract classes are suitable when you want to share common code among subclasses and also enforce that certain methods are implemented by those subclasses. Interfaces only define contracts.
      https://www.php.net/manual/en/language.oop5.abstract.php
  -
    question: >
      To create a custom exception class in PHP, which class should it extend?
    answers:
      -
        value: >
          `Exception`
        correct: true
      -
        value: >
          `Error`
        correct: false
      -
        value: >
          `Throwable`
        correct: false
      -
        value: >
          `RuntimeException`
        correct: true
    help: |
      Custom exception classes should extend the built-in `Exception` class or any of its descendants (like `RuntimeException`).
      https://www.php.net/manual/en/language.exceptions.php#language.exceptions.extending
  -
    question: >
      What happens if two traits used by the same class define a property with the same name?
    answers:
      -
        value: >
          A fatal error occurs, unless the property is explicitly defined in the class.
        correct: true
      -
        value: >
          The property from the first trait used is prioritized.
        correct: false
      -
        value: >
          The property from the last trait used is prioritized.
        correct: false
      -
        value: >
          The properties are merged.
        correct: false
    help: |
      If two traits define the same property, a fatal error will occur unless the class explicitly defines that property, which takes precedence.
      https://www.php.net/manual/en/language.oop5.traits.php#language.oop5.traits.properties
  -
    question: >
      Which SPL interface allows objects to be accessed as arrays using `[]` syntax?
    answers:
      -
        value: >
          `ArrayAccess`
        correct: true
      -
        value: >
          `Iterator`
        correct: false
      -
        value: >
          `Countable`
        correct: false
      -
        value: >
          `Serializable`
        correct: false
    help: |
      The `ArrayAccess` interface allows objects to be accessed as arrays.
      https://www.php.net/manual/en/class.arrayaccess.php
  -
    question: >
      What is the primary purpose of Attributes (formerly Annotations) introduced in PHP 8.0?
    answers:
      -
        value: >
          To add structured, machine-readable metadata to declarations in code.
        correct: true
      -
        value: >
          To replace comments in code.
        correct: false
      -
        value: >
          To define new language keywords.
        correct: false
      -
        value: >
          To improve code execution performance.
        correct: false
    help: |
      Attributes provide a way to add metadata to classes, methods, properties, functions, and parameters, which can then be read at runtime via Reflection.
      https://www.php.net/manual/en/language.attributes.php
  -
    question: >
      Which of the following type declarations were introduced in PHP 7.0?
    answers:
      -
        value: >
          Scalar type declarations (int, float, string, bool)
        correct: true
      -
        value: >
          Return type declarations
        correct: true
      -
        value: >
          Void return type
        correct: false
      -
        value: >
          Nullable types
        correct: false
    help: |
      PHP 7.0 introduced scalar type declarations and return type declarations. Void return type and Nullable types were introduced in PHP 7.1.
      https://www.php.net/manual/en/migration70.new-features.php
  -
    question: >
      If a class `MyClass` is defined in the global namespace, and you try to instantiate `new MyClass()` from within a namespace `App\Controller` without a `use` statement or leading backslash, what happens?
    answers:
      -
        value: >
          PHP will look for `App\\Controller\\MyClass` and then fallback to `MyClass` in the global namespace if not found.
        correct: false
      -
        value: >
          A fatal error occurs because `MyClass` is not found in `App\\Controller`.
        correct: true
      -
        value: >
          PHP automatically resolves it to the global `MyClass`.
        correct: false
      -
        value: >
          It depends on the `autoload` configuration.
        correct: false
    help: |
      When referring to an unqualified name (without a leading backslash) within a namespace, PHP will first look for the name within the current namespace. It does not automatically fall back to the global namespace for classes.
      https://www.php.net/manual/en/language.namespaces.faq.php#language.namespaces.faq.global
  -
    question: >
      Which operator can be used to check if an object implements a specific interface?
    answers:
      -
        value: >
          `instanceof`
        correct: true
      -
        value: >
          `implements`
        correct: false
      -
        value: >
          `is_a()`
        correct: true
      -
        value: >
          `class_exists()`
        correct: false
    help: |
      The `instanceof` operator can be used to determine if an object is an instance of a certain class or implements a certain interface. `is_a()` also works for this purpose.
      https://www.php.net/manual/en/language.operators.type.php
  -
    question: >
      What is the purpose of the `Closure::fromCallable()` static method?
    answers:
      -
        value: >
          To create a `Closure` from any callable.
        correct: true
      -
        value: >
          To execute a callable.
        correct: false
      -
        value: >
          To check if a variable is callable.
        correct: false
      -
        value: >
          To bind a callable to an object.
        correct: false
    help: |
      `Closure::fromCallable()` creates a new `Closure` from any valid callable.
      https://www.php.net/manual/en/closure.fromcallable.php
  -
    question: >
      Can an abstract class have a constructor in PHP?
    answers:
      -
        value: >
          Yes, an abstract class can have a constructor, which can be called by child classes.
        correct: true
      -
        value: >
          No, abstract classes cannot have constructors.
        correct: false
      -
        value: >
          Only if all its methods are concrete.
        correct: false
      -
        value: >
          Only if it doesn't have any abstract methods.
        correct: false
    help: |
      Abstract classes can have constructors, and these constructors can be called from the constructors of their child classes using `parent::__construct()`.
      https://www.php.net/manual/en/language.oop5.abstract.php
  -
    question: >
      Which PHP function can be used to set a user-defined function to handle all uncaught exceptions?
    answers:
      -
        value: >
          `set_exception_handler()`
        correct: true
      -
        value: >
          `register_shutdown_function()`
        correct: false
      -
        value: >
          `set_error_handler()`
        correct: false
      -
        value: >
          `trigger_error()`
        correct: false
    help: |
      The `set_exception_handler()` function sets a default handler for uncaught exceptions.
      https://www.php.net/manual/en/function.set-exception-handler.php
  -
    question: >
      If a class uses a trait and also defines a method with the same name as a method in the trait, which method takes precedence?
    answers:
      -
        value: >
          The method defined in the class.
        correct: true
      -
        value: >
          The method from the trait.
        correct: false
      -
        value: >
          A fatal error occurs.
        correct: false
      -
        value: >
          It depends on the order of `use` statements.
        correct: false
    help: |
      Methods defined in the class itself override methods from traits.
      https://www.php.net/manual/en/language.oop5.traits.php#language.oop5.traits.precedence
  -
    question: >
      Which SPL class provides an object-oriented interface for file handling?
    answers:
      -
        value: >
          `SplFileObject`
        correct: true
      -
        value: >
          `SplFileInfo`
        correct: false
      -
        value: >
          `SplTempFileObject`
        correct: false
      -
        value: >
          `FilesystemIterator`
        correct: false
    help: |
      `SplFileObject` provides an object-oriented interface for file system objects.
      https://www.php.net/manual/en/class.splfileobject.php
  -
    question: >
      What does the `never` return type declaration, introduced in PHP 8.1, signify?
    answers:
      -
        value: >
          The function or method will never return, either by throwing an exception or by terminating script execution.
        correct: true
      -
        value: >
          The function or method returns `void`.
        correct: false
      -
        value: >
          The function or method returns `null`.
        correct: false
      -
        value: >
          The function or method is deprecated.
        correct: false
    help: |
      The `never` return type indicates that the function or method will not return a value. It either throws an exception or terminates the script.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.never
  -
    question: >
      Which of the following is deprecated in PHP 8.2?
    answers:
      -
        value: >
          Dynamic properties
        correct: true
      -
        value: >
          `#[\AllowDynamicProperties]` attribute
        correct: false
      -
        value: >
          `utf8_encode()` and `utf8_decode()` functions
        correct: true
      -
        value: >
          `mb_convert_encoding()` function
        correct: false
    help: |
      PHP 8.2 deprecates dynamic properties (unless a class uses the `#[AllowDynamicProperties]` attribute or inherits from a class that does) and the `utf8_encode()`/`utf8_decode()` functions.
      https://www.php.net/manual/en/migration82.deprecated.php
  -
    question: >
      Which PHP 8.0 feature allows for a more concise way to declare and initialize class properties directly in the constructor?
    answers:
      -
        value: >
          Constructor Property Promotion
        correct: true
      -
        value: >
          Named Arguments
        correct: false
      -
        value: >
          Union Types
        correct: false
      -
        value: >
          Attributes
        correct: false
    help: |
      Constructor Property Promotion, introduced in PHP 8.0, allows properties to be declared with visibility (public, protected, private) directly in the constructor arguments, automatically creating and assigning them.
      https://www.php.net/manual/en/language.oop5.decon.php#language.oop5.decon.constructor.promotion
  -
    question: >
      Which of the following describes a Union Type in PHP 8.0?
    answers:
      -
        value: >
          A declaration that accepts values of multiple different types.
        correct: true
      -
        value: >
          A type that combines two or more interfaces.
        correct: false
      -
        value: >
          A type that can be either an object or null.
        correct: false
      -
        value: >
          A type that allows for dynamic type changes at runtime.
        correct: false
    help: |
      Union Types allow a variable to accept values of multiple different types, specified using the `|` operator.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.union
  -
    question: >
      What is the effect of declaring a class as `final` in PHP?
    answers:
      -
        value: >
          The class cannot be extended.
        correct: true
      -
        value: >
          All methods within the class become `final` implicitly.
        correct: false
      -
        value: >
          The class cannot be instantiated.
        correct: false
      -
        value: >
          It prevents properties from being modified.
        correct: false
    help: |
      A `final` class cannot be extended by any other class.
      https://www.php.net/manual/en/language.oop5.final.php
  -
    question: >
      How does PHP achieve a form of "multiple inheritance" for behavior, given it only supports single class inheritance?
    answers:
      -
        value: >
          Through the use of Traits.
        correct: true
      -
        value: >
          Through the use of multiple interfaces.
        correct: false
      -
        value: >
          Through abstract classes.
        correct: false
      -
        value: >
          It does not support any form of multiple inheritance.
        correct: false
    help: |
      While PHP supports single class inheritance, traits provide a mechanism for code reuse that allows a class to inherit behavior from multiple sources, simulating multiple inheritance.
      https://www.php.net/manual/en/language.oop5.traits.php
  -
    question: >
      What happens if you bind a closure to `null` using `Closure::bindTo()`?
    answers:
      -
        value: >
          The closure becomes unbound, losing its associated object and class scope.
        correct: true
      -
        value: >
          A fatal error occurs.
        correct: false
      -
        value: >
          The closure's scope becomes global.
        correct: false
      -
        value: >
          The closure is destroyed.
        correct: false
    help: |
      Binding a closure to `null` using `Closure::bindTo()` effectively unbinds it, making `$this` unavailable within the closure.
      https://www.php.net/manual/en/closure.bindto.php
  -
    question: >
      When is it appropriate to use an abstract class over an interface in PHP?
    answers:
      -
        value: >
          When you want to provide a common base implementation for some methods while forcing subclasses to implement others.
        correct: true
      -
        value: >
          When you only need to define a contract without any implementation.
        correct: false
      -
        value: >
          When you need to allow multiple inheritance of state.
        correct: false
      -
        value: >
          When you want to define constants that can be overridden by child classes.
        correct: false
    help: |
      Abstract classes are suitable when you want to share common code among subclasses and also enforce that certain methods are implemented by those subclasses. Interfaces only define contracts.
      https://www.php.net/manual/en/language.oop5.abstract.php
  -
    question: >
      To create a custom exception class in PHP, which class should it extend?
    answers:
      -
        value: >
          `Exception`
        correct: true
      -
        value: >
          `Error`
        correct: false
      -
        value: >
          `Throwable`
        correct: false
      -
        value: >
          `RuntimeException`
        correct: true
    help: |
      Custom exception classes should extend the built-in `Exception` class or any of its descendants (like `RuntimeException`).
      https://www.php.net/manual/en/language.exceptions.php#language.exceptions.extending
  -
    question: >
      What happens if two traits used by the same class define a property with the same name?
    answers:
      -
        value: >
          A fatal error occurs, unless the property is explicitly defined in the class.
        correct: true
      -
        value: >
          The property from the first trait used is prioritized.
        correct: false
      -
        value: >
          The property from the last trait used is prioritized.
        correct: false
      -
        value: >
          The properties are merged.
        correct: false
    help: |
      If two traits define the same property, a fatal error will occur unless the class explicitly defines that property, which takes precedence.
      https://www.php.net/manual/en/language.oop5.traits.php#language.oop5.traits.properties
  -
    question: >
      Which SPL interface allows objects to be accessed as arrays using `[]` syntax?
    answers:
      -
        value: >
          `ArrayAccess`
        correct: true
      -
        value: >
          `Iterator`
        correct: false
      -
        value: >
          `Countable`
        correct: false
      -
        value: >
          `Serializable`
        correct: false
    help: |
      The `ArrayAccess` interface allows objects to be accessed as arrays.
      https://www.php.net/manual/en/class.arrayaccess.php
  -
    question: >
      What is the primary purpose of Attributes (formerly Annotations) introduced in PHP 8.0?
    answers:
      -
        value: >
          To add structured, machine-readable metadata to declarations in code.
        correct: true
      -
        value: >
          To replace comments in code.
        correct: false
      -
        value: >
          To define new language keywords.
        correct: false
      -
        value: >
          To improve code execution performance.
        correct: false
    help: |
      Attributes provide a way to add metadata to classes, methods, properties, functions, and parameters, which can then be read at runtime via Reflection.
      https://www.php.net/manual/en/language.attributes.php
  -
    question: >
      Which of the following type declarations were introduced in PHP 7.0?
    answers:
      -
        value: >
          Scalar type declarations (int, float, string, bool)
        correct: true
      -
        value: >
          Return type declarations
        correct: true
      -
        value: >
          Void return type
        correct: false
      -
        value: >
          Nullable types
        correct: false
    help: |
      PHP 7.0 introduced scalar type declarations and return type declarations. Void return type and Nullable types were introduced in PHP 7.1.
      https://www.php.net/manual/en/migration70.new-features.php
  -
    question: >
      If a class `MyClass` is defined in the global namespace, and you try to instantiate `new MyClass()` from within a namespace `App\Controller` without a `use` statement or leading backslash, what happens?
    answers:
      -
        value: >
          PHP will look for `App\\Controller\\MyClass` and then fallback to `MyClass` in the global namespace if not found.
        correct: false
      -
        value: >
          A fatal error occurs because `MyClass` is not found in `App\\Controller`.
        correct: true
      -
        value: >
          PHP automatically resolves it to the global `MyClass`.
        correct: false
      -
        value: >
          It depends on the `autoload` configuration.
        correct: false
    help: |
      When referring to an unqualified name (without a leading backslash) within a namespace, PHP will first look for the name within the current namespace. It does not automatically fall back to the global namespace for classes.
      https://www.php.net/manual/en/language.namespaces.faq.php#language.namespaces.faq.global
  -
    question: >
      Which operator can be used to check if an object implements a specific interface?
    answers:
      -
        value: >
          `instanceof`
        correct: true
      -
        value: >
          `implements`
        correct: false
      -
        value: >
          `is_a()`
        correct: true
      -
        value: >
          `class_exists()`
        correct: false
    help: |
      The `instanceof` operator can be used to determine if an object is an instance of a certain class or implements a certain interface. `is_a()` also works for this purpose.
      https://www.php.net/manual/en/language.operators.type.php
  -
    question: >
      What is the purpose of the `Closure::fromCallable()` static method?
    answers:
      -
        value: >
          To create a `Closure` from any callable.
        correct: true
      -
        value: >
          To execute a callable.
        correct: false
      -
        value: >
          To check if a variable is callable.
        correct: false
      -
        value: >
          To bind a callable to an object.
        correct: false
    help: |
      `Closure::fromCallable()` creates a new `Closure` from any valid callable.
      https://www.php.net/manual/en/closure.fromcallable.php
  -
    question: >
      Can an abstract class have a constructor in PHP?
    answers:
      -
        value: >
          Yes, an abstract class can have a constructor, which can be called by child classes.
        correct: true
      -
        value: >
          No, abstract classes cannot have constructors.
        correct: false
      -
        value: >
          Only if all its methods are concrete.
        correct: false
      -
        value: >
          Only if it doesn't have any abstract methods.
        correct: false
    help: |
      Abstract classes can have constructors, and these constructors can be called from the constructors of their child classes using `parent::__construct()`.
      https://www.php.net/manual/en/language.oop5.abstract.php
  -
    question: >
      Which PHP function can be used to set a user-defined function to handle all uncaught exceptions?
    answers:
      -
        value: >
          `set_exception_handler()`
        correct: true
      -
        value: >
          `register_shutdown_function()`
        correct: false
      -
        value: >
          `set_error_handler()`
        correct: false
      -
        value: >
          `trigger_error()`
        correct: false
    help: |
      The `set_exception_handler()` function sets a default handler for uncaught exceptions.
      https://www.php.net/manual/en/function.set-exception-handler.php
  -
    question: >
      If a class uses a trait and also defines a method with the same name as a method in the trait, which method takes precedence?
    answers:
      -
        value: >
          The method defined in the class.
        correct: true
      -
        value: >
          The method from the trait.
        correct: false
      -
        value: >
          A fatal error occurs.
        correct: false
      -
        value: >
          It depends on the order of `use` statements.
        correct: false
    help: |
      Methods defined in the class itself override methods from traits.
      https://www.php.net/manual/en/language.oop5.traits.php#language.oop5.traits.precedence
  -
    question: >
      Which SPL class provides an object-oriented interface for file handling?
    answers:
      -
        value: >
          `SplFileObject`
        correct: true
      -
        value: >
          `SplFileInfo`
        correct: false
      -
        value: >
          `SplTempFileObject`
        correct: false
      -
        value: >
          `FilesystemIterator`
        correct: false
    help: |
      `SplFileObject` provides an object-oriented interface for file system objects.
      https://www.php.net/manual/en/class.splfileobject.php
  -
    question: >
      What does the `never` return type declaration, introduced in PHP 8.1, signify?
    answers:
      -
        value: >
          The function or method will never return, either by throwing an exception or by terminating script execution.
        correct: true
      -
        value: >
          The function or method returns `void`.
        correct: false
      -
        value: >
          The function or method returns `null`.
        correct: false
      -
        value: >
          The function or method is deprecated.
        correct: false
    help: |
      The `never` return type indicates that the function or method will not return a value. It either throws an exception or terminates the script.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.never
  -
    question: >
      Which of the following is deprecated in PHP 8.2?
    answers:
      -
        value: >
          Dynamic properties
        correct: true
      -
        value: >
          `#[\AllowDynamicProperties]` attribute
        correct: false
      -
        value: >
          `utf8_encode()` and `utf8_decode()` functions
        correct: true
      -
        value: >
          `mb_convert_encoding()` function
        correct: false
    help: |
      PHP 8.2 deprecates dynamic properties (unless a class uses the `#[AllowDynamicProperties]` attribute or inherits from a class that does) and the `utf8_encode()`/`utf8_decode()` functions.
      https://www.php.net/manual/en/migration82.deprecated.php