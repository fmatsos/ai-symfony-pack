category: PHP
questions:
  -
    question: >
      Which of the following statements about PHP 8.0's Nullsafe Operator (`?->`) is true?
    answers:
      - { value: 'It can be used to chain method calls and property accesses, returning null if any part of the chain is null.', correct: true }
      - { value: 'It throws an exception if any part of the chain is null.', correct: false }
      - { value: 'It is only applicable to method calls, not property accesses.', correct: false }
      - { value: 'It requires explicit null checks for each part of the chain.', correct: false }
    help: |
      The nullsafe operator allows chaining calls without needing to check if each intermediate result is null. If any part of the chain is null, the entire expression evaluates to null.
      https://www.php.net/manual/en/language.operators.nullsafe.php

  -
    question: >
      In PHP 8.1, what is the primary purpose of the `readonly` property modifier?
    answers:
      - { value: 'To make a property immutable after its initial assignment.', correct: true }
      - { value: 'To prevent a property from being accessed outside its defining class.', correct: false }
      - { value: 'To make a property read-only during compile time.', correct: false }
      - { value: 'To allow a property to be assigned only once, but only in the constructor.', correct: true }
      - { value: 'To ensure a property can only be read, never assigned, even during initialization.', correct: false }
    help: |
      Readonly properties can only be initialized once, either at the declaration site or in the constructor. After initialization, they cannot be modified.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly

  -
    question: >
      Consider the following PHP code snippet:
      ```php
      <?php
      namespace App\Controller;

      class ProductController
      {
          public function show()
          {
              // ...
          }
      }

      namespace App\Service;

      class ProductService
      {
          public function getProduct()
          {
              // ...
          }
      }
      ?>
      ```
      If you are in the `App\Service` namespace, how would you correctly instantiate `ProductController`?
    answers:
      - { value: '`$controller = new \App\Controller\ProductController();`', correct: true }
      - { value: '`$controller = new ProductController();`', correct: false }
      - { value: '`$controller = new Controller\ProductController();`', correct: false }
      - { value: '`$controller = new \ProductController();`', correct: false }
    help: |
      When referencing a class from a different namespace, you must either use its fully qualified name (prefixed with `\`) or import it with a `use` statement.
      https://www.php.net/manual/en/language.namespaces.basics.php

  -
    question: >
      Which of the following statements correctly describes PHP interfaces?
    answers:
      - { value: 'An interface can contain concrete method implementations.', correct: false }
      - { value: 'A class can implement multiple interfaces.', correct: true }
      - { value: 'All methods declared in an interface must be public.', correct: true }
      - { value: 'Interfaces can define properties.', correct: false }
      - { value: 'A class implementing an interface must implement all methods declared in the interface.', correct: true }
    help: |
      Interfaces define a contract that classes must adhere to. They cannot contain method implementations or properties, and all methods are implicitly public. A class can implement multiple interfaces.
      https://www.php.net/manual/en/language.oop5.interfaces.php

  -
    question: >
      What is the purpose of the `use` keyword inside an anonymous function (closure) in PHP?
    answers:
      - { value: 'To import classes from a namespace.', correct: false }
      - { value: 'To make variables from the parent scope available inside the closure.', correct: true }
      - { value: 'To define a new namespace for the closure.', correct: false }
      - { value: 'To declare global variables within the closure.', correct: false }
    help: |
      The `use` keyword allows a closure to inherit variables from the parent scope. These variables are passed by value by default, but can be passed by reference.
      https://www.php.net/manual/en/functions.anonymous.php

  -
    question: >
      Which of the following is true regarding abstract classes in PHP?
    answers:
      - { value: 'An abstract class can be instantiated directly.', correct: false }
      - { value: 'An abstract class must contain at least one abstract method.', correct: false }
      - { value: 'Abstract methods must be implemented by non-abstract child classes.', correct: true }
      - { value: 'Abstract classes cannot have concrete (non-abstract) methods.', correct: false }
      - { value: 'Abstract classes can define properties.', correct: true }
    help: |
      Abstract classes cannot be instantiated and serve as blueprints for other classes. They can contain both abstract and concrete methods, and abstract methods must be implemented by non-abstract child classes.
      https://www.php.net/manual/en/language.oop5.abstract.php

  -
    question: >
      Consider the following PHP code:
      ```php
      <?php
      try {
          // Some code that might throw an exception
          throw new \InvalidArgumentException('Invalid data');
      } catch (\InvalidArgumentException $e) {
          echo "Caught InvalidArgumentException: " . $e->getMessage();
      } catch (\Exception $e) {
          echo "Caught general Exception: " . $e->getMessage();
      }
      ?>
      ```
      What will be the output of this code?
    answers:
      - { value: 'Caught InvalidArgumentException: Invalid data', correct: true }
      - { value: 'Caught general Exception: Invalid data', correct: false }
      - { value: 'A fatal error will occur.', correct: false }
      - { value: 'No output, as the exception is not handled correctly.', correct: false }
    help: |
      When multiple catch blocks are present, PHP will try to match the exception with the first compatible catch block. Since `InvalidArgumentException` is a subclass of `Exception`, the more specific `InvalidArgumentException` catch block will be executed first.
      https://www.php.net/manual/en/language.exceptions.php

  -
    question: >
      Which statement about PHP traits is correct?
    answers:
      - { value: 'Traits allow you to reuse methods by copying them into a class.', correct: true }
      - { value: 'A class can only use one trait at a time.', correct: false }
      - { value: 'Traits can define properties, but not methods.', correct: false }
      - { value: 'Traits are a form of multiple inheritance in PHP.', correct: false }
      - { value: 'If a trait and a class define a method with the same name, the trait''s method takes precedence.', correct: false }
    help: |
      Traits are a mechanism for code reuse in single inheritance languages like PHP. They allow a class to use methods from multiple traits. If a name conflict occurs between a trait method and a class method, the class's method takes precedence.
      https://www.php.net/manual/en/language.oop5.traits.php

  -
    question: >
      Which of the following is a common PHP extension used for interacting with databases?
    answers:
      - { value: 'GD', correct: false }
      - { value: 'cURL', correct: false }
      - { value: 'PDO', correct: true }
      - { value: 'XML', correct: false }
    help: |
      PDO (PHP Data Objects) is a database access layer providing a uniform method of access to multiple databases. GD is for image manipulation, cURL for URL requests, and XML for XML parsing.
      https://www.php.net/manual/en/book.pdo.php

  -
    question: >
      What is the primary purpose of the Standard PHP Library (SPL) in PHP?
    answers:
      - { value: 'To provide a collection of interfaces and classes for common data structures and iterators.', correct: true }
      - { value: 'To manage PHP extensions.', correct: false }
      - { value: 'To handle file system operations.', correct: false }
      - { value: 'To provide a framework for web development.', correct: false }
    help: |
      The SPL provides a set of standard interfaces and classes for common problems, such as data structures (e.g., SplStack, SplQueue), iterators, and autoloading.
      https://www.php.net/manual/en/book.spl.php

  -
    question: >
      Which of the following is a new feature introduced in PHP 8.0?
    answers:
      - { value: 'Named Arguments', correct: true }
      - { value: 'Arrow Functions', correct: false }
      - { value: 'Type Hinting', correct: false }
      - { value: 'Null Coalescing Operator', correct: false }
    help: |
      Named Arguments were introduced in PHP 8.0, allowing arguments to be passed to a function based on their parameter name, rather than their position. Arrow functions were PHP 7.4, type hinting PHP 5, null coalescing operator PHP 7.0.
      https://www.php.net/manual/en/language.functions.named-arguments.php

  -
    question: >
      In PHP 8.1, what is the significance of `final` constants?
    answers:
      - { value: 'They can be overridden by child classes.', correct: false }
      - { value: 'They prevent child classes from overriding the constant.', correct: true }
      - { value: 'They can only be defined in interfaces.', correct: false }
      - { value: 'They are only accessible within the class they are defined in.', correct: false }
    help: |
      The `final` keyword can be used with class constants to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      Which of the following is the correct way to define a constant inside a class in PHP?
    answers:
      - { value: '`const MY_CONSTANT = "value";`', correct: true }
      - { value: '`define("MY_CONSTANT", "value");`', correct: false }
      - { value: '`public const MY_CONSTANT = "value";`', correct: true }
      - { value: '`var MY_CONSTANT = "value";`', correct: false }
    help: |
      Class constants are defined using the `const` keyword. They can also have visibility modifiers (e.g., `public`, `protected`, `private`).
      https://www.php.net/manual/en/language.oop5.constants.php

  -
    question: >
      What is the purpose of the `__autoload()` magic function (deprecated in PHP 7.2)?
    answers:
      - { value: 'To automatically load classes when they are first used.', correct: true }
      - { value: 'To automatically include files at the beginning of a script.', correct: false }
      - { value: 'To define a global error handler.', correct: false }
      - { value: 'To register a shutdown function.', correct: false }
    help: |
      `__autoload()` was a magic function that PHP would call if you tried to use a class or interface that had not yet been defined. It has been superseded by `spl_autoload_register()`.
      https://www.php.net/manual/en/function.autoload.php (Note: This page explicitly mentions its deprecation and replacement by SPL autoloading functions).

  -
    question: >
      Which of the following is a valid way to catch multiple specific exceptions in PHP 8.0+?
    answers:
      - { value: '`catch (ExceptionA | ExceptionB $e)`', correct: true }
      - { value: '`catch (ExceptionA, ExceptionB $e)`', correct: false }
      - { value: '`catch (ExceptionA || ExceptionB $e)`', correct: false }
      - { value: '`catch (ExceptionA or ExceptionB $e)`', correct: false }
    help: |
      PHP 8.0 introduced the ability to catch multiple exceptions with a single `catch` block using the `|` (bitwise OR) operator.
      https://www.php.net/manual/en/language.exceptions.php#language.exceptions.catching

  -
    question: >
      What is the correct way to define an anonymous class in PHP?
    answers:
      - { value: '`$object = new class {};`', correct: true }
      - { value: '`$object = new anonymous class {};`', correct: false }
      - { value: '`$object = new ClassName();`', correct: false }
      - { value: '`$object = new function() {};`', correct: false }
    help: |
      Anonymous classes are defined using `new class` followed by a class body.
      https://www.php.net/manual/en/language.oop5.anonymous.php

  -
    question: >
      Which of the following PHP functions can be used to register multiple autoload functions?
    answers:
      - { value: '`__autoload()`', correct: false }
      - { value: '`spl_autoload_register()`', correct: true }
      - { value: '`class_exists()`', correct: false }
      - { value: '`require_once()`', correct: false }
    help: |
      `spl_autoload_register()` provides a more flexible way to register multiple autoload functions, allowing for a chain of autoloaders.
      https://www.php.net/manual/en/function.spl-autoload-register.php

  -
    question: >
      What is the purpose of the `declare(strict_types=1);` directive in PHP?
    answers:
      - { value: 'To enforce strict type checking for function arguments and return values in the current file.', correct: true }
      - { value: 'To enable strict mode for database queries.', correct: false }
      - { value: 'To prevent type juggling globally.', correct: false }
      - { value: 'To make all variables strictly typed.', correct: false }
    help: |
      The `declare(strict_types=1);` directive, when placed at the top of a file, enforces strict type checking for all function calls and return values within that file.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.strict

  -
    question: >
      Which of the following is a valid way to define a static method in a PHP class?
    answers:
      - { value: '`public static function myStaticMethod() {}`', correct: true }
      - { value: '`static public function myStaticMethod() {}`', correct: true }
      - { value: '`function static myStaticMethod() {}`', correct: false }
      - { value: '`public function static myStaticMethod() {}`', correct: false }
    help: |
      Static methods are declared using the `static` keyword. The order of `public` and `static` does not matter.
      https://www.php.net/manual/en/language.oop5.static.php

  -
    question: >
      What is the correct way to access a static property `count` within the same class in PHP?
    answers:
      - { value: '`self::$count`', correct: true }
      - { value: '`$this->count`', correct: false }
      - { value: '`ClassName::$count`', correct: true }
      - { value: '`static::$count`', correct: true }
    help: |
      Static properties are accessed using `self::`, `static::`, or the class name followed by `::`. `$this` is used for non-static properties.
      https://www.php.net/manual/en/language.oop5.static.php

  -
    question: >
      Which PHP 8.0 feature allows you to define a single expression function?
    answers:
      - { value: 'Arrow Functions (short closures)', correct: true }
      - { value: 'Anonymous Classes', correct: false }
      - { value: 'Match Expression', correct: false }
      - { value: 'Union Types', correct: false }
    help: |
      Arrow functions (introduced in PHP 7.4, but heavily used in PHP 8.x contexts) provide a concise syntax for defining functions that return a single expression.
      https://www.php.net/manual/en/functions.arrow.php

  -
    question: >
      What is the purpose of the `final` keyword when applied to a class in PHP?
    answers:
      - { value: 'It prevents the class from being extended.', correct: true }
      - { value: 'It prevents methods within the class from being overridden.', correct: false }
      - { value: 'It makes all methods in the class static.', correct: false }
      - { value: 'It ensures the class can only be instantiated once.', correct: false }
    help: |
      When a class is declared `final`, it cannot be extended by any other class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      Which of the following is a valid way to define a constant in PHP outside of a class?
    answers:
      - { value: '`define("APP_VERSION", "1.0");`', correct: true }
      - { value: '`const APP_VERSION = "1.0";`', correct: true }
      - { value: '`$APP_VERSION = "1.0";`', correct: false }
      - { value: '`global APP_VERSION = "1.0";`', correct: false }
    help: |
      Global constants can be defined using `define()` or the `const` keyword.
      https://www.php.net/manual/en/language.constants.php

  -
    question: >
      What is the correct way to include a file named `config.php` only once in a PHP script, even if it's referenced multiple times?
    answers:
      - { value: '`include ''config.php'';`', correct: false }
      - { value: '`require ''config.php'';`', correct: false }
      - { value: '`include_once ''config.php'';`', correct: true }
      - { value: '`require_once ''config.php'';`', correct: true }
    help: |
      `include_once` and `require_once` ensure that a file is included only once during the execution of a script, preventing issues like re-declaration of functions or classes.
      https://www.php.net/manual/en/function.include-once.php
      https://www.php.net/manual/en/function.require-once.php

  -
    question: >
      Which of the following is a valid use case for PHP traits?
    answers:
      - { value: 'To achieve multiple inheritance for class properties and methods.', correct: false }
      - { value: 'To share common functionality across unrelated classes without using inheritance.', correct: true }
      - { value: 'To define a contract that classes must implement.', correct: false }
      - { value: 'To create singleton patterns.', correct: false }
    help: |
      Traits are used to reuse sets of methods freely in independent classes that belong to different class hierarchies.
      https://www.php.net/manual/en/language.oop5.traits.php

  -
    question: >
      In PHP 8.0, what is the purpose of the `match` expression?
    answers:
      - { value: 'It is a new control structure similar to `switch` but with stricter comparisons and returns a value.', correct: true }
      - { value: 'It is used for regular expression matching.', correct: false }
      - { value: 'It replaces the `if-else if-else` structure entirely.', correct: false }
      - { value: 'It allows for pattern matching on objects.', correct: false }
    help: |
      The `match` expression is a new control structure in PHP 8.0. It is similar to `switch` but provides stricter comparisons (identity check `===`), supports multiple expressions per arm, and returns a value.
      https://www.php.net/manual/en/control-structures.match.php

  -
    question: >
      Which of the following PHP functions is used to check if a class exists?
    answers:
      - { value: '`class_exists()`', correct: true }
      - { value: '`interface_exists()`', correct: false }
      - { value: '`method_exists()`', correct: false }
      - { value: '`function_exists()`', correct: false }
    help: |
      `class_exists()` checks whether the given class has been defined.
      https://www.php.net/manual/en/function.class-exists.php

  -
    question: >
      What is the primary benefit of using namespaces in PHP?
    answers:
      - { value: 'To prevent name collisions between classes, functions, and constants.', correct: true }
      - { value: 'To improve script execution speed.', correct: false }
      - { value: 'To enable multiple inheritance.', correct: false }
      - { value: 'To define global variables.', correct: false }
    help: |
      Namespaces provide a way to group related code, preventing name collisions with other codebases.
      https://www.php.net/manual/en/language.namespaces.php

  -
    question: >
      Which of the following is a characteristic of PHP 8.2's `#[AllowDynamicProperties]` attribute?
    answers:
      - { value: 'It allows dynamic properties on a class that would otherwise trigger a deprecation warning.', correct: true }
      - { value: 'It makes all properties of a class dynamic by default.', correct: false }
      - { value: 'It prevents any dynamic properties from being added to a class.', correct: false }
      - { value: 'It is applied to individual properties to make them dynamic.', correct: false }
    help: |
      In PHP 8.2, dynamic properties are deprecated. The `#[AllowDynamicProperties]` attribute can be added to a class to explicitly allow dynamic properties and suppress the deprecation warning.
      https://www.php.net/manual/en/language.attributes.predefined.php#language.attributes.predefined.allowdynamicproperties

  -
    question: >
      What is the correct way to define a constructor in a PHP class?
    answers:
      - { value: '`public function __construct() {}`', correct: true }
      - { value: '`public function constructor() {}`', correct: false }
      - { value: '`function __construct() {}`', correct: true }
      - { value: '`public function init() {}`', correct: false }
    help: |
      The constructor method in PHP is named `__construct()`. It is automatically called when a new object is created.
      https://www.php.net/manual/en/language.oop5.decon.php

  -
    question: >
      Consider the following code:
      ```php
      <?php
      class MyClass {
          public function __toString() {
              return "This is MyClass object.";
          }
      }
      $obj = new MyClass();
      echo $obj;
      ?>
      ```
      What will be the output?
    answers:
      - { value: 'This is MyClass object.', correct: true }
      - { value: 'Error: Object of class MyClass could not be converted to string.', correct: false }
      - { value: 'No output.', correct: false }
      - { value: 'Fatal error: Class MyClass has no __toString method.', correct: false }
    help: |
      The `__toString()` magic method allows a class to decide how it will react when it is treated as a string.
      https://www.php.net/manual/en/language.oop5.magic.php#object.tostring

  -
    question: >
      Which of the following is a valid way to define a method as `private` in a PHP class?
    answers:
      - { value: '`private function myMethod() {}`', correct: true }
      - { value: '`function private myMethod() {}`', correct: false }
      - { value: '`protected function myMethod() {}`', correct: false }
      - { value: '`public function myMethod() {}`', correct: false }
    help: |
      The `private` keyword is used to declare methods that can only be accessed from within the class itself.
      https://www.php.net/manual/en/language.oop5.visibility.php

  -
    question: >
      What is the purpose of the `yield` keyword in PHP?
    answers:
      - { value: 'To return a value from a function and then terminate its execution.', correct: false }
      - { value: 'To create a generator, allowing a function to be paused and resumed.', correct: true }
      - { value: 'To declare a variable as global.', correct: false }
      - { value: 'To define an anonymous function.', correct: false }
    help: |
      The `yield` keyword is used to create generator functions, which allow you to write iterable functions that can be paused and resumed, yielding values one at a time.
      https://www.php.net/manual/en/language.generators.overview.php

  -
    question: >
      Which of the following is true about PHP's `finally` block in exception handling?
    answers:
      - { value: 'The `finally` block is executed only if an exception is thrown.', correct: false }
      - { value: 'The `finally` block is executed regardless of whether an exception was thrown or caught.', correct: true }
      - { value: 'The `finally` block must always be followed by a `catch` block.', correct: false }
      - { value: 'Code in the `finally` block can prevent an exception from propagating.', correct: false }
    help: |
      The `finally` block is always executed after the `try` and `catch` blocks, regardless of whether an exception was thrown or caught. It's typically used for cleanup operations.
      https://www.php.net/manual/en/language.exceptions.php#language.exceptions.finally

  -
    question: >
      What is the correct way to define a constant in an interface in PHP?
    answers:
      - { value: '`const MY_INTERFACE_CONSTANT = "value";`', correct: true }
      - { value: '`public const MY_INTERFACE_CONSTANT = "value";`', correct: true }
      - { value: '`define("MY_INTERFACE_CONSTANT", "value");`', correct: false }
      - { value: '`var MY_INTERFACE_CONSTANT = "value";`', correct: false }
    help: |
      Interfaces can define constants using the `const` keyword. These constants are implicitly public.
      https://www.php.net/manual/en/language.oop5.interfaces.php#language.oop5.interfaces.constants

  -
    question: >
      Which of the following is a superglobal variable in PHP that contains information about the server and execution environment?
    answers:
      - { value: '`$_GET`', correct: false }
      - { value: '`$_POST`', correct: false }
      - { value: '`$_SERVER`', correct: true }
      - { value: '`$_SESSION`', correct: false }
    help: |
      `$_SERVER` is an array containing information such as headers, paths, and script locations.
      https://www.php.net/manual/en/reserved.variables.server.php

  -
    question: >
      What is the purpose of the `instanceof` operator in PHP?
    answers:
      - { value: 'To check if an object is an instance of a particular class or implements a specific interface.', correct: true }
      - { value: 'To create a new instance of a class.', correct: false }
      - { value: 'To compare two objects for equality.', correct: false }
      - { value: 'To determine the type of a variable.', correct: false }
    help: |
      The `instanceof` operator is used to determine if an object is an instantiated instance of a certain class, or if it inherits from a certain class, or implements a certain interface.
      https://www.php.net/manual/en/language.operators.type.php

  -
    question: >
      Which of the following is a valid way to define a trait in PHP?
    answers:
      - { value: '`trait MyTrait { /* ... */ }`', correct: true }
      - { value: '`class MyTrait { /* ... */ }`', correct: false }
      - { value: '`interface MyTrait { /* ... */ }`', correct: false }
      - { value: '`abstract trait MyTrait { /* ... */ }`', correct: false }
    help: |
      Traits are defined using the `trait` keyword.
      https://www.php.net/manual/en/language.oop5.traits.php

  -
    question: >
      What is the difference between `include` and `require` in PHP for file inclusion?
    answers:
      - { value: '`include` generates a warning and continues execution if the file is not found, while `require` generates a fatal error.', correct: true }
      - { value: '`require` generates a warning and continues execution if the file is not found, while `include` generates a fatal error.', correct: false }
      - { value: 'There is no functional difference; they are interchangeable.', correct: false }
      - { value: '`include` is for HTML files, `require` is for PHP files.', correct: false }
    help: |
      `include` will issue a warning (E_WARNING) and allow the script to continue. `require` will issue a fatal error (E_COMPILE_ERROR) and halt the script.
      https://www.php.net/manual/en/function.include.php
      https://www.php.net/manual/en/function.require.php

  -
    question: >
      Which of the following is a new feature in PHP 8.2 related to deprecations?
    answers:
      - { value: 'Deprecation of dynamic properties without `#[AllowDynamicProperties]` attribute.', correct: true }
      - { value: 'Deprecation of `var` keyword for property declaration.', correct: false }
      - { value: 'Deprecation of `__autoload()` function.', correct: false }
      - { value: 'Deprecation of `each()` function.', correct: false }
    help: |
      PHP 8.2 deprecates dynamic properties, meaning assigning properties to an object that were not declared in its class will trigger a deprecation warning, unless the class uses the `#[AllowDynamicProperties]` attribute.
      https://www.php.net/manual/en/migration82.deprecated.php#migration82.deprecated.dynamic-properties

  -
    question: >
      What is the purpose of the `parent::` keyword in PHP?
    answers:
      - { value: 'To call a method or access a property of the current class.', correct: false }
      - { value: 'To call a method or access a property of the parent class.', correct: true }
      - { value: 'To call a static method or access a static property of the current class.', correct: false }
      - { value: 'To call a method or access a property of an interface.', correct: false }
    help: |
      `parent::` is used to refer to the parent class's methods or properties.
      https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php

  -
    question: >
      Which of the following is the correct way to define a method as `protected` in a PHP class?
    answers:
      - { value: '`protected function myMethod() {}`', correct: true }
      - { value: '`function protected myMethod() {}`', correct: false }
      - { value: '`private function myMethod() {}`', correct: false }
      - { value: '`public function myMethod() {}`', correct: false }
    help: |
      The `protected` keyword is used to declare methods that can be accessed from within the class itself and by its child classes.
      https://www.php.net/manual/en/language.oop5.visibility.php

  -
    question: >
      What is the purpose of the `__call()` magic method in PHP?
    answers:
      - { value: 'It is called when an object is used as a function.', correct: false }
      - { value: 'It is called when invoking inaccessible methods in an object context.', correct: true }
      - { value: 'It is called when a static method is called on a class.', correct: false }
      - { value: 'It is called when an object is converted to a string.', correct: false }
    help: |
      `__call()` is triggered when invoking inaccessible or non-existent methods in an object context.
      https://www.php.net/manual/en/language.oop5.magic.php#object.call

  -
    question: >
      Which of the following is a valid way to define a class that implements an interface `MyInterface`?
    answers:
      - { value: '`class MyClass implements MyInterface {}`', correct: true }
      - { value: '`class MyClass extends MyInterface {}`', correct: false }
      - { value: '`class MyClass uses MyInterface {}`', correct: false }
      - { value: '`class MyClass includes MyInterface {}`', correct: false }
    help: |
      The `implements` keyword is used to indicate that a class will implement one or more interfaces.
      https://www.php.net/manual/en/language.oop5.interfaces.php

  -
    question: >
      What is the correct way to throw a custom exception in PHP?
    answers:
      - { value: '`throw new MyCustomException("Something went wrong.");`', correct: true }
      - { value: '`catch MyCustomException("Something went wrong.");`', correct: false }
      - { value: '`try MyCustomException("Something went wrong.");`', correct: false }
      - { value: '`error_log("Something went wrong.", E_ERROR);`', correct: false }
    help: |
      Exceptions are thrown using the `throw` keyword followed by an instance of an `Exception` class (or a class that extends `Exception`).
      https://www.php.net/manual/en/language.exceptions.php

  -
    question: >
      Which of the following is a new feature in PHP 8.0 that allows for more concise and type-safe comparisons?
    answers:
      - { value: 'Union Types', correct: true }
      - { value: 'Nullsafe Operator', correct: true }
      - { value: 'Match Expression', correct: true }
      - { value: 'Attributes (Annotations)', correct: true }
    help: |
      PHP 8.0 introduced several new features, including Union Types (allowing a variable to accept multiple types), the Nullsafe Operator (`?->`), the `match` expression, and Attributes (for adding metadata to code).
      https://www.php.net/manual/en/migration80.new-features.php

  -
    question: >
      What is the purpose of the `static` keyword when used with a variable inside a function in PHP?
    answers:
      - { value: 'To make the variable accessible globally.', correct: false }
      - { value: 'To ensure the variable retains its value between function calls.', correct: true }
      - { value: 'To make the variable a class property.', correct: false }
      - { value: 'To define a constant within the function.', correct: false }
    help: |
      A static variable exists only in a local function scope but does not lose its value when the function exits.
      https://www.php.net/manual/en/language.variables.scope.php#language.variables.scope.static

  -
    question: >
      Which SPL class provides a way to iterate over directories?
    answers:
      - { value: '`SplFileObject`', correct: false }
      - { value: '`DirectoryIterator`', correct: true }
      - { value: '`FilesystemIterator`', correct: true }
      - { value: '`SplQueue`', correct: false }
    help: |
      `DirectoryIterator` and `FilesystemIterator` are SPL classes that provide object-oriented ways to iterate over the contents of a directory.
      https://www.php.net/manual/en/class.directoryiterator.php
      https://www.php.net/manual/en/class.filesystemiterator.php

  -
    question: >
      In PHP 8.1, what is the purpose of `enum` (enumerations)?
    answers:
      - { value: 'To define a type that can only be one of a predefined set of named values.', correct: true }
      - { value: 'To create a list of constants that can be modified at runtime.', correct: false }
      - { value: 'To define a new type of array.', correct: false }
      - { value: 'To allow multiple inheritance for classes.', correct: false }
    help: |
      Enums provide a way to define a type that has a fixed, limited set of possible values. They are useful for representing a set of distinct states or options.
      https://www.php.net/manual/en/language.enumerations.php

  -
    question: >
      Which of the following is a valid way to define a class method as `abstract`?
    answers:
      - { value: '`abstract public function myAbstractMethod();`', correct: true }
      - { value: '`public abstract function myAbstractMethod() {}`', correct: false }
      - { value: '`function abstract myAbstractMethod();`', correct: false }
      - { value: '`abstract function myAbstractMethod();`', correct: true }
    help: |
      Abstract methods are declared with the `abstract` keyword and only define the method signature, without an implementation. They must be implemented by non-abstract child classes.
      https://www.php.net/manual/en/language.oop5.abstract.php

  -
    question: >
      What is the purpose of the `__invoke()` magic method in PHP?
    answers:
      - { value: 'It is called when an object is serialized.', correct: false }
      - { value: 'It is called when an object is treated as a function.', correct: true }
      - { value: 'It is called when an object is cloned.', correct: false }
      - { value: 'It is called when a property is accessed that does not exist.', correct: false }
    help: |
      The `__invoke()` method is called when a script tries to call an object as a function.
      https://www.php.net/manual/en/language.oop5.magic.php#object.invoke

  -
    question: >
      Which of the following is a common use case for PHP's `Reflection` API (part of SPL)?
    answers:
      - { value: 'To dynamically inspect classes, interfaces, functions, and methods at runtime.', correct: true }
      - { value: 'To encrypt data for secure transmission.', correct: false }
      - { value: 'To optimize database queries.', correct: false }
      - { value: 'To generate random numbers.', correct: false }
    help: |
      The Reflection API provides classes that report information about classes, interfaces, functions, methods, and extensions.
      https://www.php.net/manual/en/book.reflection.php

  -
    question: >
      What is the correct way to handle a custom error using `set_error_handler()` in PHP?
    answers:
      - { value: '`set_error_handler("myErrorHandler");`', correct: true }
      - { value: '`register_shutdown_function("myErrorHandler");`', correct: false }
      - { value: '`try { /* ... */ } catch (Error $e) { /* ... */ }`', correct: false }
      - { value: '`ini_set("display_errors", 0);`', correct: false }
    help: |
      `set_error_handler()` sets a user-defined function to handle errors. This function will bypass the standard PHP error handler.
      https://www.php.net/manual/en/function.set-error-handler.php

  -
    question: >
      Which of the following is true about PHP's `Throwable` interface?
    answers:
      - { value: 'It is the base interface for all objects that can be thrown via the `throw` statement, including `Exception` and `Error`.', correct: true }
      - { value: 'It is an interface that only `Exception` classes implement.', correct: false }
      - { value: 'It is used to define custom error types that are not exceptions.', correct: false }
      - { value: 'It is only available in PHP 8.0 and later.', correct: false }
    help: |
      The `Throwable` interface was introduced in PHP 7 and is the base interface for any object that can be thrown. Both `Exception` and `Error` classes implement `Throwable`.
      https://www.php.net/manual/en/class.throwable.php

  -
    question: >
      What is the purpose of the `use function` statement in PHP?
    answers:
      - { value: 'To import a function from a namespace into the current scope.', correct: true }
      - { value: 'To define a new function.', correct: false }
      - { value: 'To execute a function immediately.', correct: false }
      - { value: 'To create an anonymous function.', correct: false }
    help: |
      The `use function` statement allows you to import specific functions from other namespaces, making them callable without their fully qualified name.
      https://www.php.net/manual/en/language.namespaces.importing.php

  -
    question: >
      Which of the following is a valid way to define a property as `public` in a PHP class?
    answers:
      - { value: '`public $myProperty;`', correct: true }
      - { value: '`var $myProperty;`', correct: true }
      - { value: '`private $myProperty;`', correct: false }
      - { value: '`protected $myProperty;`', correct: false }
    help: |
      Properties can be declared with `public`, `protected`, or `private` visibility. The `var` keyword is an alias for `public` for backward compatibility.
      https://www.php.net/manual/en/language.oop5.properties.php

  -
    question: >
      What is the output of the following PHP code using the Null Coalescing Operator (`??`)?
      ```php
      <?php
      $name = $_GET['user'] ?? 'Guest';
      echo $name;
      ?>
      ```
      If the URL is `http://example.com/script.php`, what will be displayed?
    answers:
      - { value: 'Guest', correct: true }
      - { value: 'Undefined index: user', correct: false }
      - { value: 'Null', correct: false }
      - { value: 'An empty string.', correct: false }
    help: |
      The null coalescing operator (`??`) returns its first operand if it exists and is not `null`; otherwise, it returns its second operand. In this case, `$_GET['user']` is not set, so 'Guest' is used.
      https://www.php.net/manual/en/language.operators.comparison.php#language.operators.comparison.coalesce

  -
    question: >
      Which SPL class can be used to implement a Last-In, First-Out (LIFO) data structure?
    answers:
      - { value: '`SplStack`', correct: true }
      - { value: '`SplQueue`', correct: false }
      - { value: '`SplHeap`', correct: false }
      - { value: '`SplFixedArray`', correct: false }
    help: |
      `SplStack` provides the functionality of a stack, which is a LIFO data structure.
      https://www.php.net/manual/en/class.splstack.php

  -
    question: >
      What is the purpose of the `use const` statement in PHP?
    answers:
      - { value: 'To import a constant from a namespace into the current scope.', correct: true }
      - { value: 'To define a new constant.', correct: false }
      - { value: 'To use a class constant.', correct: false }
      - { value: 'To declare a global constant.', correct: false }
    help: |
      The `use const` statement allows you to import specific constants from other namespaces, making them accessible without their fully qualified name.
      https://www.php.net/manual/en/language.namespaces.importing.php

  -
    question: >
      Which of the following is a valid way to define a class that extends another class `ParentClass`?
    answers:
      - { value: '`class MyClass extends ParentClass {}`', correct: true }
      - { value: '`class MyClass implements ParentClass {}`', correct: false }
      - { value: '`class MyClass uses ParentClass {}`', correct: false }
      - { value: '`class MyClass inherits ParentClass {}`', correct: false }
    help: |
      The `extends` keyword is used to indicate that a class inherits from another class.
      https://www.php.net/manual/en/language.oop5.inheritance.php

  -
    question: >
      What is the correct way to declare a function that accepts only integers for its `$id` parameter in PHP 7.0+?
    answers:
      - { value: '`function processId(int $id) {}`', correct: true }
      - { value: '`function processId(integer $id) {}`', correct: false }
      - { value: '`function processId($id: int) {}`', correct: false }
      - { value: '`function processId($id) { if (!is_int($id)) throw new TypeError(); }`', correct: false }
    help: |
      PHP 7.0 introduced scalar type declarations, allowing type hints for `int`, `float`, `string`, and `bool`.
      https://www.php.net/manual/en/functions.arguments.php#functions.arguments.type-declarations

  -
    question: >
      Which of the following is a valid return type declaration for a function that might return either a string or `null` in PHP 7.1+?
    answers:
      - { value: '`function getName(): ?string {}`', correct: true }
      - { value: '`function getName(): string|null {}`', correct: true }
      - { value: '`function getName(): string or null {}`', correct: false }
      - { value: '`function getName(): (string, null) {}`', correct: false }
    help: |
      PHP 7.1 introduced nullable types using the `?` prefix. PHP 8.0 introduced Union Types using the `|` operator. Both are valid for this scenario.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.nullable
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.union

  -
    question: >
      What is the purpose of the `__debugInfo()` magic method in PHP?
    answers:
      - { value: 'It is called when `var_dump()` is used on an object.', correct: true }
      - { value: 'It is called when an object is converted to a string.', correct: false }
      - { value: 'It is called when an object is serialized.', correct: false }
      - { value: 'It is called when a method is called that does not exist.', correct: false }
    help: |
      The `__debugInfo()` method is called when `var_dump()` is used on an object to provide custom debug information.
      https://www.php.net/manual/en/language.oop5.magic.php#object.debuginfo

  -
    question: >
      Which of the following is a common PHP extension used for image manipulation?
    answers:
      - { value: 'PDO', correct: false }
      - { value: 'cURL', correct: false }
      - { value: 'GD', correct: true }
      - { value: 'JSON', correct: false }
    help: |
      The GD extension provides image creation and manipulation capabilities.
      https://www.php.net/manual/en/book.gd.php

  -
    question: >
      What is the purpose of the `static` keyword when used with a method in a trait in PHP?
    answers:
      - { value: 'It allows the method to be called without instantiating the trait.', correct: true }
      - { value: 'It makes the method accessible only within the trait.', correct: false }
      - { value: 'It prevents the method from being overridden by the consuming class.', correct: false }
      - { value: 'It makes the method abstract.', correct: false }
    help: |
      Static methods in traits behave like static methods in classes; they can be called without an object instance.
      https://www.php.net/manual/en/language.oop5.traits.php#language.oop5.traits.static

  -
    question: >
      Which of the following is a valid way to define a class property with a default value?
    answers:
      - { value: '`public string $name = "Default Name";`', correct: true }
      - { value: '`public $name = "Default Name";`', correct: true }
      - { value: '`public $name; $name = "Default Name";`', correct: false }
      - { value: '`public $name = new stdClass();`', correct: true }
    help: |
      Class properties can be initialized with a default value directly in their declaration. This can include scalar values, arrays, or objects (since PHP 5.6 for scalar expressions, PHP 7.4 for more complex expressions like `new`).
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.initialization

  -
    question: >
      What is the purpose of the `__clone()` magic method in PHP?
    answers:
      - { value: 'It is called when an object is created.', correct: false }
      - { value: 'It is called when an object is duplicated using the `clone` keyword.', correct: true }
      - { value: 'It is called when an object is destroyed.', correct: false }
      - { value: 'It is called when an object is serialized.', correct: false }
    help: |
      When an object is cloned, PHP will perform a shallow copy of all its properties. If the `__clone()` method is defined, it will be called on the new object to allow for deep copying or other custom cloning logic.
      https://www.php.net/manual/en/language.oop5.cloning.php

  -
    question: >
      Which of the following SPL classes represents a doubly linked list?
    answers:
      - { value: '`SplDoublyLinkedList`', correct: true }
      - { value: '`SplQueue`', correct: false }
      - { value: '`SplStack`', correct: false }
      - { value: '`SplHeap`', correct: false }
    help: |
      `SplDoublyLinkedList` provides the functionality of a doubly linked list.
      https://www.php.net/manual/en/class.spldoublylinkedlist.php

  -
    question: >
      What is the primary difference between `Error` and `Exception` in PHP 7+?
    answers:
      - { value: '`Error` represents internal PHP errors (e.g., parse errors, type errors) that are typically unrecoverable, while `Exception` represents user-defined errors that can be caught and handled.', correct: true }
      - { value: '`Error` can be caught with a `try-catch` block, but `Exception` cannot.', correct: false }
      - { value: '`Error` is for fatal errors, `Exception` is for warnings.', correct: false }
      - { value: 'There is no functional difference; they are interchangeable.', correct: false }
    help: |
      In PHP 7, `Error` classes were introduced to represent internal PHP errors that were previously fatal errors. Both `Error` and `Exception` implement the `Throwable` interface, but `Error` typically indicates unrecoverable issues.
      https://www.php.net/manual/en/language.errors.php7.php
      https://www.php.net/manual/en/language.exceptions.php

  -
    question: >
      Which PHP 8.0 feature allows you to add structured, machine-readable metadata to declarations in your code?
    answers:
      - { value: 'Attributes (formerly Annotations)', correct: true }
      - { value: 'Traits', correct: false }
      - { value: 'Interfaces', correct: false }
      - { value: 'Generators', correct: false }
    help: |
      Attributes (often referred to as annotations in other languages) provide a way to add metadata to classes, methods, properties, functions, and parameters.
      https://www.php.net/manual/en/language.attributes.php

  -
    question: >
      What is the correct syntax for declaring a Union Type for a function parameter in PHP 8.0+?
    answers:
      - { value: '`function processData(string|int $data) {}`', correct: true }
      - { value: '`function processData(string or int $data) {}`', correct: false }
      - { value: '`function processData(string, int $data) {}`', correct: false }
      - { value: '`function processData(array $data) {}`', correct: false }
    help: |
      Union Types allow a declaration to specify that a variable can be of multiple different types, separated by a pipe `|`.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.union

  -
    question: >
      Which of the following is a common PHP extension used for making HTTP requests?
    answers:
      - { value: 'PDO', correct: false }
      - { value: 'cURL', correct: true }
      - { value: 'XML', correct: false }
      - { value: 'SPL', correct: false }
    help: |
      The cURL extension provides functions for sending requests and receiving responses using various protocols, including HTTP.
      https://www.php.net/manual/en/book.curl.php

  -
    question: >
      What is the purpose of the `__sleep()` and `__wakeup()` magic methods in PHP?
    answers:
      - { value: 'They are called when an object is serialized and unserialized, respectively.', correct: true }
      - { value: 'They are called when an object is created and destroyed.', correct: false }
      - { value: 'They are used for database connection management.', correct: false }
      - { value: 'They control the behavior of `sleep()` and `wakeup()` functions.', correct: false }
    help: |
      `__sleep()` is called prior to serialization, and `__wakeup()` is called after unserialization, allowing for cleanup or re-initialization of object properties.
      https://www.php.net/manual/en/language.oop5.magic.php#object.sleep
      https://www.php.net/manual/en/language.oop5.magic.php#object.wakeup

  -
    question: >
      Which of the following is a new feature in PHP 8.1 that allows for more concise array unpacking?
    answers:
      - { value: 'Array unpacking with string keys', correct: true }
      - { value: 'Named arguments for array functions', correct: false }
      - { value: 'First-class callable syntax', correct: false }
      - { value: 'Fibers', correct: false }
    help: |
      PHP 8.1 introduced support for array unpacking with string keys, allowing `...` operator to be used with associative arrays.
      https://www.php.net/manual/en/migration81.new-features.php#migration81.new-features.array-unpacking-string-keys

  -
    question: >
      What is the purpose of the `fn` keyword in PHP 7.4+?
    answers:
      - { value: 'To define a new class.', correct: false }
      - { value: 'To define an arrow function (short closure).', correct: true }
      - { value: 'To declare a final method.', correct: false }
      - { value: 'To create a generator function.', correct: false }
    help: |
      The `fn` keyword is used to define arrow functions, which are a more concise syntax for anonymous functions with a single expression.
      https://www.php.net/manual/en/functions.arrow.php

  -
    question: >
      Which of the following is true about `const` vs `define()` for defining constants in PHP?
    answers:
      - { value: '`const` defines constants at compile time, while `define()` defines them at runtime.', correct: true }
      - { value: '`define()` can be used inside classes, while `const` cannot.', correct: false }
      - { value: '`const` can define case-insensitive constants, while `define()` cannot.', correct: false }
      - { value: '`define()` is preferred for performance reasons.', correct: false }
    help: |
      `const` is a language construct that defines constants at compile time and can be used inside classes. `define()` is a function that defines constants at runtime and cannot be used inside classes directly. `define()` can define case-insensitive constants (though this is discouraged).
      https://www.php.net/manual/en/language.constants.php

  -
    question: >
      What is the purpose of the `__get()` and `__set()` magic methods in PHP?
    answers:
      - { value: 'They are called when accessing inaccessible or non-existent properties.', correct: true }
      - { value: 'They are used for serializing and unserializing objects.', correct: false }
      - { value: 'They are called when an object is created and destroyed.', correct: false }
      - { value: 'They are used for method overloading.', correct: false }
    help: |
      `__get()` is triggered when reading inaccessible or non-existent properties. `__set()` is triggered when writing to inaccessible or non-existent properties.
      https://www.php.net/manual/en/language.oop5.magic.php#object.get
      https://www.php.net/manual/en/language.oop5.magic.php#object.set

  -
    question: >
      Which of the following is a valid way to define a function that returns nothing (void) in PHP 7.1+?
    answers:
      - { value: '`function doSomething(): void {}`', correct: true }
      - { value: '`function doSomething(): null {}`', correct: false }
      - { value: '`function doSomething(): {}`', correct: false }
      - { value: '`function doSomething() {}`', correct: false }
    help: |
      The `void` return type declaration indicates that the function does not return any value. If a `void` function returns a value, it will result in a `TypeError`.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.void