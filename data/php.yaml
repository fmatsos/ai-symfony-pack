category: PHP
questions:
  -
    question: 'Which of the following are valid ways to declare a class in PHP?'
    answers:
      - { value: 'class MyClass { }', correct: true }
      - { value: 'new class MyClass { }', correct: false }
      - { value: 'abstract class MyClass { }', correct: true }
      - { value: 'final class MyClass { }', correct: true }
    help: |
      Classes in PHP can be declared using `class`, `abstract class`, or `final class`. Anonymous classes use `new class`.
      https://www.php.net/manual/en/language.oop5.basic.php
  -
    question: 'In PHP 8.2, which visibility keyword makes a property or method accessible only within the class itself and by its children classes?'
    answers:
      - { value: 'public', correct: false }
      - { value: 'private', correct: false }
      - { value: 'protected', correct: true }
      - { value: 'internal', correct: false }
    help: |
      The `protected` keyword allows access within the class and by its inherited classes.
      https://www.php.net/manual/en/language.oop5.visibility.php
  -
    question: 'What is the purpose of the `__construct()` method in a PHP class?'
    answers:
      - { value: 'It is called automatically when an object is destroyed.', correct: false }
      - { value: 'It is used to define static properties.', correct: false }
      - { value: 'It is a special method called automatically when a new object is created.', correct: true }
      - { value: 'It is used for type hinting.', correct: false }
    help: |
      The `__construct()` method is a constructor, automatically called upon object creation.
      https://www.php.net/manual/en/language.oop5.decon.php
  -
    question: 'Which of the following statements about `static` properties and methods in PHP are true?'
    answers:
      - { value: 'Static properties can be accessed using the `->` operator.', correct: false }
      - { value: 'Static methods can be called without creating an instance of the class.', correct: true }
      - { value: 'Static properties are unique to each instance of the class.', correct: false }
      - { value: 'The `self` keyword is used to refer to static members within the class.', correct: true }
    help: |
      Static members belong to the class itself, not to any specific instance. They are accessed using `::` and `self`.
      https://www.php.net/manual/en/language.oop5.static.php
  -
    question: 'Consider the following PHP code snippet:'
    answers:
      - { value: 'It will output "Hello World!".', correct: true }
      - { value: 'It will cause a fatal error because `greet` is private.', correct: false }
      - { value: 'It will output nothing.', correct: false }
      - { value: 'It will cause a parse error.', correct: false }
    help: |
      Private methods can be called from within the class.
      https://www.php.net/manual/en/language.oop5.visibility.php
    question: |
      ```php
      class Greeter {
          private function greet() {
              echo "Hello World!";
          }

          public function sayHello() {
              $this->greet();
          }
      }

      $obj = new Greeter();
      $obj->sayHello();
      ```
  -
    question: 'What is the primary purpose of an `interface` in PHP?'
    answers:
      - { value: 'To provide a base implementation for classes to inherit from.', correct: false }
      - { value: 'To define a contract that classes must adhere to, by implementing specific methods.', correct: true }
      - { value: 'To prevent a class from being extended.', correct: false }
      - { value: 'To create a singleton pattern.', correct: false }
    help: |
      Interfaces define a set of methods that a class must implement.
      https://www.php.net/manual/en/language.oop5.interfaces.php
  -
    question: 'Which keyword is used to implement an interface in a PHP class?'
    answers:
      - { value: 'extends', correct: false }
      - { value: 'uses', correct: false }
      - { value: 'implements', correct: true }
      - { value: 'inherits', correct: false }
    help: |
      The `implements` keyword is used to indicate that a class will adhere to an interface's contract.
      https://www.php.net/manual/en/language.oop5.interfaces.php
  -
    question: 'Can an interface define properties in PHP?'
    answers:
      - { value: 'Yes, both public and protected properties.', correct: false }
      - { value: 'No, interfaces can only define method signatures and constants.', correct: true }
      - { value: 'Only public properties.', correct: false }
      - { value: 'Only static properties.', correct: false }
    help: |
      Interfaces in PHP cannot define properties, only method signatures and constants.
      https://www.php.net/manual/en/language.oop5.interfaces.php
  -
    question: 'What is the purpose of `abstract` classes in PHP?'
    answers:
      - { value: 'They can be instantiated directly.', correct: false }
      - { value: 'They can contain abstract methods that must be implemented by child classes.', correct: true }
      - { value: 'They cannot have any concrete (non-abstract) methods.', correct: false }
      - { value: 'They are used to prevent inheritance.', correct: false }
    help: |
      Abstract classes cannot be instantiated and can contain abstract methods that child classes must implement.
      https://www.php.net/manual/en/language.oop5.abstract.php
  -
    question: 'Which of the following is true about abstract methods?'
    answers:
      - { value: 'They must define a body.', correct: false }
      - { value: 'They can only be declared in concrete classes.', correct: false }
      - { value: 'They must be implemented by non-abstract child classes.', correct: true }
      - { value: 'They can be private.', correct: false }
    help: |
      Abstract methods are declared without an implementation and must be implemented by any non-abstract child class. They cannot be private.
      https://www.php.net/manual/en/language.oop5.abstract.php
  -
    question: 'Consider the following PHP code:'
    answers:
      - { value: 'The code will run without errors and output "Hello from Child".', correct: false }
      - { value: 'The code will cause a fatal error because `ChildClass` does not implement `abstractMethod`.', correct: true }
      - { value: 'The code will cause a fatal error because `AbstractClass` cannot have a concrete method.', correct: false }
      - { value: 'The code will output "Hello from Abstract".', correct: false }
    help: |
      A non-abstract child class must implement all abstract methods of its parent abstract class.
      https://www.php.net/manual/en/language.oop5.abstract.php
    question: |
      ```php
      abstract class AbstractClass {
          abstract protected function abstractMethod();

          public function concreteMethod() {
              echo "Hello from Abstract";
          }
      }

      class ChildClass extends AbstractClass {
          // Missing implementation of abstractMethod()
      }

      $obj = new ChildClass();
      $obj->concreteMethod();
      ```
  -
    question: 'What is the purpose of `Traits` in PHP?'
    answers:
      - { value: 'To allow multiple inheritance of classes.', correct: false }
      - { value: 'To enable horizontal reuse of methods in independent class hierarchies.', correct: true }
      - { value: 'To define a contract for classes to implement.', correct: false }
      - { value: 'To create singleton instances of classes.', correct: false }
    help: |
      Traits are used to reuse sets of methods freely in different classes, overcoming some limitations of single inheritance.
      https://www.php.net/manual/en/language.oop5.traits.php
  -
    question: 'How do you include a `Trait` in a PHP class?'
    answers:
      - { value: 'include MyTrait;', correct: false }
      - { value: 'use MyTrait;', correct: true }
      - { value: 'implements MyTrait;', correct: false }
      - { value: 'extends MyTrait;', correct: false }
    help: |
      The `use` keyword is used to include a trait within a class.
      https://www.php.net/manual/en/language.oop5.traits.php
  -
    question: 'Consider the following PHP code:'
    answers:
      - { value: 'The code will cause a fatal error due to method name conflict.', correct: false }
      - { value: 'The code will output "Hello from MyClass".', correct: true }
      - { value: 'The code will output "Hello from MyTrait".', correct: false }
      - { value: 'The code will output both "Hello from MyTrait" and "Hello from MyClass".', correct: false }
    help: |
      When a class uses a trait and defines a method with the same name as a method in the trait, the class's method takes precedence.
      https://www.php.net/manual/en/language.oop5.traits.php#language.oop5.traits.precedence
    question: |
      ```php
      trait MyTrait {
          public function sayHello() {
              echo "Hello from MyTrait";
          }
      }

      class MyClass {
          use MyTrait;

          public function sayHello() {
              echo "Hello from MyClass";
          }
      }

      $obj = new MyClass();
      $obj->sayHello();
      ```
  -
    question: 'What is the purpose of `Namespaces` in PHP?'
    answers:
      - { value: 'To define global constants.', correct: false }
      - { value: 'To prevent naming collisions between classes, functions, and constants.', correct: true }
      - { value: 'To enforce strict type checking.', correct: false }
      - { value: 'To create private methods.', correct: false }
    help: |
      Namespaces provide a way to group related code, preventing name conflicts.
      https://www.php.net/manual/en/language.namespaces.php
  -
    question: 'How do you import a class from another namespace in PHP?'
    answers:
      - { value: 'require "MyNamespace\\MyClass.php";', correct: false }
      - { value: 'include MyNamespace\\MyClass;', correct: false }
      - { value: 'use MyNamespace\\MyClass;', correct: true }
      - { value: 'import MyNamespace\\MyClass;', correct: false }
    help: |
      The `use` keyword is used to import classes, functions, or constants from other namespaces.
      https://www.php.net/manual/en/language.namespaces.importing.php
  -
    question: 'Consider the following PHP code:'
    answers:
      - { value: 'The code will cause a fatal error due to undefined class `MyClass`.', correct: false }
      - { value: 'The code will output "Hello from Foo\\MyClass".', correct: true }
      - { value: 'The code will output "Hello from GlobalMyClass".', correct: false }
      - { value: 'The code will cause a parse error.', correct: false }
    help: |
      The `use` statement imports `Foo\\MyClass` as `MyClass`, making it accessible without its full namespace.
      https://www.php.net/manual/en/language.namespaces.importing.php
    question: |
      ```php
      namespace Bar;

      use Foo\MyClass;

      class GlobalMyClass {
          public function __construct() {
              echo "Hello from GlobalMyClass";
          }
      }

      $obj = new MyClass();
      ```
  -
    question: 'Which of the following is the correct way to define a namespace in a PHP file?'
    answers:
      - { value: 'namespace MyNamespace;', correct: true }
      - { value: 'define namespace MyNamespace;', correct: false }
      - { value: 'namespace = "MyNamespace";', correct: false }
      - { value: 'use namespace MyNamespace;', correct: false }
    help: |
      The `namespace` keyword is used to declare a namespace at the top of a PHP file.
      https://www.php.net/manual/en/language.namespaces.definition.php
  -
    question: 'What is an `Anonymous function` (closure) in PHP?'
    answers:
      - { value: 'A function that can only be called once.', correct: false }
      - { value: 'A function without a specified name, typically used as a callback.', correct: true }
      - { value: 'A function that automatically executes when the script starts.', correct: false }
      - { value: 'A function that can only be defined inside a class.', correct: false }
    help: |
      Anonymous functions, also known as closures, are functions that do not have a specified name. They are often used as callback functions.
      https://www.php.net/manual/en/functions.anonymous.php
  -
    question: 'How can an anonymous function access variables from its parent scope in PHP?'
    answers:
      - { value: 'By default, all parent scope variables are accessible.', correct: false }
      - { value: 'Using the `global` keyword.', correct: false }
      - { value: 'Using the `use` keyword followed by the variable names.', correct: true }
      - { value: 'It cannot access parent scope variables.', correct: false }
    help: |
      To inherit variables from the parent scope, the `use` keyword is used.
      https://www.php.net/manual/en/functions.anonymous.php#functions.anonymous.variables
  -
    question: 'Consider the following PHP code:'
    answers:
      - { value: 'The code will cause an error because `$message` is not defined inside the closure.', correct: false }
      - { value: 'The code will output "Hello World!".', correct: true }
      - { value: 'The code will output "Hello".', correct: false }
      - { value: 'The code will output nothing.', correct: false }
    help: |
      The `use` keyword correctly imports `$message` into the closure's scope.
      https://www.php.net/manual/en/functions.anonymous.php#functions.anonymous.variables
    question: |
      ```php
      $message = "World";
      $greet = function () use ($message) {
          echo "Hello " . $message . "!";
      };
      $greet();
      ```
  -
    question: 'Which of the following is a valid way to create an anonymous function in PHP 8.2?'
    answers:
      - { value: 'function($a, $b) { return $a + $b; };', correct: false }
      - { value: 'fn($a, $b) => $a + $b;', correct: true }
      - { value: 'new Function($a, $b) { return $a + $b; };', correct: false }
      - { value: 'lambda($a, $b) { return $a + $b; };', correct: false }
    help: |
      PHP 7.4 introduced arrow functions (`fn`) as a more concise syntax for anonymous functions.
      https://www.php.net/manual/en/functions.anonymous.php
      https://www.php.net/manual/en/functions.arrow.php
  -
    question: 'What is the base class for all built-in PHP exceptions?'
    answers:
      - { value: 'Error', correct: false }
      - { value: 'Throwable', correct: true }
      - { value: 'RuntimeException', correct: false }
      - { value: 'Exception', correct: true }
    help: |
      In PHP 7 and later, `Throwable` is the base interface for all objects that can be thrown via the `throw` statement, including `Error` and `Exception`. `Exception` is the base class for userland exceptions.
      https://www.php.net/manual/en/class.throwable.php
      https://www.php.net/manual/en/class.exception.php
  -
    question: 'Which block is used to catch exceptions in PHP?'
    answers:
      - { value: 'try...finally', correct: false }
      - { value: 'try...catch', correct: true }
      - { value: 'throw...catch', correct: false }
      - { value: 'handle...error', correct: false }
    help: |
      Exceptions are caught using a `try...catch` block.
      https://www.php.net/manual/en/language.exceptions.php
  -
    question: 'Consider the following PHP code:'
    answers:
      - { value: 'The code will output "Caught an exception: Division by zero".', correct: true }
      - { value: 'The code will cause a fatal error.', correct: false }
      - { value: 'The code will output "Result: 0".', correct: false }
      - { value: 'The code will output nothing.', correct: false }
    help: |
      The `try...catch` block handles the `DivisionByZeroError` which is a type of `Throwable`.
      https://www.php.net/manual/en/language.exceptions.php
      https://www.php.net/manual/en/class.divisionbyzeroerror.php
    question: |
      ```php
      function divide($a, $b) {
          if ($b === 0) {
              throw new DivisionByZeroError("Division by zero");
          }
          return $a / $b;
      }

      try {
          echo "Result: " . divide(10, 0);
      } catch (DivisionByZeroError $e) {
          echo "Caught an exception: " . $e->getMessage();
      }
      ```
  -
    question: 'What is the purpose of the `finally` block in exception handling?'
    answers:
      - { value: 'It executes only if an exception is thrown.', correct: false }
      - { value: 'It executes only if no exception is thrown.', correct: false }
      - { value: 'It always executes, regardless of whether an exception was thrown or caught.', correct: true }
      - { value: 'It is used to re-throw an exception.', correct: false }
    help: |
      The `finally` block is executed after the `try` and `catch` blocks, regardless of whether an exception was thrown or caught.
      https://www.php.net/manual/en/language.exceptions.php#language.exceptions.finally
  -
    question: 'Which of the following are considered `Errors` (implementing `Throwable` but not `Exception`) in PHP 7+?'
    answers:
      - { value: 'TypeError', correct: true }
      - { value: 'InvalidArgumentException', correct: false }
      - { value: 'ParseError', correct: true }
      - { value: 'RuntimeException', correct: false }
    help: |
      `TypeError` and `ParseError` are examples of `Errors` introduced in PHP 7, which are distinct from `Exceptions` but both implement `Throwable`.
      https://www.php.net/manual/en/language.errors.php7.php
  -
    question: 'What is the purpose of the `declare(strict_types=1);` directive in PHP?'
    answers:
      - { value: 'It enables strict mode for all functions and methods in the current file, requiring exact type matches for scalar type declarations.', correct: true }
      - { value: 'It makes all variables strictly typed by default.', correct: false }
      - { value: 'It prevents type coercion for array and object types only.', correct: false }
      - { value: 'It is a comment and has no effect on execution.', correct: false }
    help: |
      `declare(strict_types=1);` enables strict type checking for scalar type declarations within that file.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.strict
  -
    question: 'Which of the following are valid scalar type declarations in PHP 8.2?'
    answers:
      - { value: 'int', correct: true }
      - { value: 'string', correct: true }
      - { value: 'float', correct: true }
      - { value: 'array', correct: true }
      - { value: 'object', correct: true }
    help: |
      PHP supports scalar type declarations for `int`, `float`, `string`, and `bool`. `array` and `object` are also valid type declarations.
      https://www.php.net/manual/en/language.types.declarations.php
  -
    question: 'Consider the following PHP code with `declare(strict_types=1);`:'
    answers:
      - { value: 'The code will output "Sum: 5".', correct: false }
      - { value: 'The code will output "Sum: 3".', correct: false }
      - { value: 'The code will cause a `TypeError`.', correct: true }
      - { value: 'The code will output "Sum: 12".', correct: false }
    help: |
      With `strict_types=1`, PHP will throw a `TypeError` if the argument type does not exactly match the declared type. '2' is a string, not an integer.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.strict
    question: |
      ```php
      <?php declare(strict_types=1);

      function add(int $a, int $b): int {
          return $a + $b;
      }

      echo "Sum: " . add(3, '2');
      ```
  -
    question: 'What is the purpose of the `match` expression introduced in PHP 8?'
    answers:
      - { value: 'It is a control structure for looping through arrays.', correct: false }
      - { value: 'It is a more powerful and concise alternative to the `switch` statement for equality checks.', correct: true }
      - { value: 'It is used for regular expression matching only.', correct: false }
      - { value: 'It allows for multiple inheritance.', correct: false }
    help: |
      The `match` expression is a new control flow construct in PHP 8, similar to `switch` but with more features like strict type checking and returning a value.
      https://www.php.net/manual/en/control-structures.match.php
  -
    question: 'Which of the following is true about the `match` expression compared to `switch`?'
    answers:
      - { value: '`match` uses loose comparison (==) by default, while `switch` uses strict comparison (===).', correct: false }
      - { value: '`match` requires a `break` statement after each arm, while `switch` does not.', correct: false }
      - { value: '`match` is an expression and returns a value, while `switch` is a statement.', correct: true }
      - { value: '`match` does not support multiple conditions per arm, unlike `switch`.', correct: false }
    help: |
      `match` is an expression that returns a value, uses strict comparison, and does not require `break`.
      https://www.php.net/manual/en/control-structures.match.php
  -
    question: 'Consider the following PHP 8.2 code:'
    answers:
      - { value: 'The code will output "It''s a string".', correct: true }
      - { value: 'The code will output "It''s a number".', correct: false }
      - { value: 'The code will cause a fatal error because `match` does not support strings.', correct: false }
      - { value: 'The code will output "Unknown type".', correct: false }
    help: |
      The `match` expression uses strict comparison, so '1' (string) matches 'string'.
      https://www.php.net/manual/en/control-structures.match.php
    question: |
      ```php
      $value = '1';
      $type = match (gettype($value)) {
          'integer', 'double' => 'It''s a number',
          'string' => 'It''s a string',
          default => 'Unknown type',
      };
      echo $type;
      ```
  -
    question: 'What does SPL stand for in PHP, and what is its primary purpose?'
    answers:
      - { value: 'Standard PHP Library; provides a collection of interfaces and classes for common data structures and algorithms.', correct: true }
      - { value: 'Symfony Project Loader; a tool for managing Symfony dependencies.', correct: false }
      - { value: 'Server-Side Programming Language; a general term for PHP.', correct: false }
      - { value: 'Secure PHP Layer; an encryption library.', correct: false }
    help: |
      SPL (Standard PHP Library) provides a set of interfaces and classes to solve standard problems, e.g., data structures, iterators, and autoloading.
      https://www.php.net/manual/en/book.spl.php
  -
    question: 'Which SPL class is commonly used for iterating over objects like arrays or Traversable objects?'
    answers:
      - { value: 'SplFixedArray', correct: false }
      - { value: 'ArrayObject', correct: true }
      - { value: 'SplQueue', correct: false }
      - { value: 'SplStack', correct: false }
    help: |
      `ArrayObject` allows objects to be handled as arrays, making them traversable.
      https://www.php.net/manual/en/class.arrayobject.php
  -
    question: 'Consider the following PHP code using SPL:'
    answers:
      - { value: 'The code will output "applebananaorange".', correct: true }
      - { value: 'The code will cause a fatal error because `ArrayObject` cannot be iterated.', correct: false }
      - { value: 'The code will output "Array".', correct: false }
      - { value: 'The code will output "012".', correct: false }
    help: |
      `ArrayObject` implements `Traversable`, allowing it to be used with `foreach`.
      https://www.php.net/manual/en/class.arrayobject.php
    question: |
      ```php
      $fruits = new ArrayObject(['apple', 'banana', 'orange']);
      foreach ($fruits as $fruit) {
          echo $fruit;
      }
      ```
  -
    question: 'Which SPL function is commonly used for autoloading classes in PHP?'
    answers:
      - { value: 'spl_autoload_register()', correct: true }
      - { value: 'spl_autoload_call()', correct: false }
      - { value: 'spl_autoload_unregister()', correct: false }
      - { value: 'spl_autoload_exists()', correct: false }
    help: |
      `spl_autoload_register()` registers a given function as an __autoload implementation.
      https://www.php.net/manual/en/function.spl-autoload-register.php
  -
    question: 'What is the purpose of the `readonly` property modifier introduced in PHP 8.1?'
    answers:
      - { value: 'It makes a property immutable after its initial assignment.', correct: true }
      - { value: 'It makes a property accessible only for reading, even within the class.', correct: false }
      - { value: 'It prevents a property from being serialized.', correct: false }
      - { value: 'It makes a property static.', correct: false }
    help: |
      `readonly` properties can only be initialized once, either at declaration or in the constructor. After that, they cannot be modified.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly
  -
    question: 'Consider the following PHP 8.2 code:'
    answers:
      - { value: 'The code will output "Value: Initial Value".', correct: true }
      - { value: 'The code will cause a fatal error when trying to reassign `$value`.', correct: true }
      - { value: 'The code will output "Value: New Value".', correct: false }
      - { value: 'The code will cause a parse error.', correct: false }
    help: |
      A `readonly` property can only be initialized once. Attempting to reassign it will result in a `Error` exception.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly
    question: |
      ```php
      class MyImmutableClass {
          public readonly string $value;

          public function __construct(string $value) {
              $this->value = $value;
          }

          public function setValue(string $newValue) {
              $this->value = $newValue; // This line will cause an error
          }
      }

      $obj = new MyImmutableClass("Initial Value");
      echo "Value: " . $obj->value . "\n";
      $obj->setValue("New Value");
      ```
  -
    question: 'Which of the following is a new feature related to enumerations (Enums) introduced in PHP 8.1?'
    answers:
      - { value: 'Enums can have methods.', correct: true }
      - { value: 'Enums can extend classes.', correct: false }
      - { value: 'Enums can implement interfaces.', correct: true }
      - { value: 'Enums can be instantiated using `new`.', correct: false }
    help: |
      Enums in PHP 8.1 are full-fledged objects that can have methods and implement interfaces. They cannot extend classes or be instantiated directly with `new`.
      https://www.php.net/manual/en/language.enumerations.php
  -
    question: 'Consider the following PHP 8.2 Enum definition:'
    answers:
      - { value: 'The code will output "Red color code is #FF0000".', correct: true }
      - { value: 'The code will cause a fatal error because Enums cannot have methods.', correct: false }
      - { value: 'The code will output "Red".', correct: false }
      - { value: 'The code will cause a parse error.', correct: false }
    help: |
      Enums can have methods, and their cases are instances of the Enum itself.
      https://www.php.net/manual/en/language.enumerations.php#language.enumerations.methods
    question: |
      ```php
      enum Color: string {
          case Red = '#FF0000';
          case Green = '#00FF00';

          public function getCode(): string {
              return $this->value;
          }
      }

      echo "Red color code is " . Color::Red->getCode();
      ```
  -
    question: 'What is the purpose of `fibers` introduced in PHP 8.1?'
    answers:
      - { value: 'To provide a new way to handle asynchronous I/O operations without blocking.', correct: true }
      - { value: 'To replace traditional threads for parallel processing.', correct: false }
      - { value: 'To automatically optimize database queries.', correct: false }
      - { value: 'To create lightweight, isolated processes.', correct: false }
    help: |
      Fibers are a low-level mechanism for implementing non-blocking I/O and asynchronous programming in PHP.
      https://www.php.net/manual/en/language.fibers.php
  -
    question: 'Which of the following functions are used to interact with a Fiber?'
    answers:
      - { value: 'Fiber::start()', correct: true }
      - { value: 'Fiber::resume()', correct: true }
      - { value: 'Fiber::yield()', correct: true }
      - { value: 'Fiber::stop()', correct: false }
    help: |
      `Fiber::start()`, `Fiber::resume()`, and `Fiber::yield()` are key functions for controlling Fiber execution.
      https://www.php.net/manual/en/class.fiber.php
  -
    question: 'Consider the following PHP 8.2 code using Fibers:'
    answers:
      - { value: 'The code will output "Fiber started.Fiber resumed.Fiber finished.". ', correct: true }
      - { value: 'The code will cause a fatal error.', correct: false }
      - { value: 'The code will only output "Fiber started.". ', correct: false }
      - { value: 'The code will output "Fiber started.Fiber resumed.". ', correct: false }
    help: |
      The fiber yields, then is resumed, and finally completes its execution.
      https://www.php.net/manual/en/class.fiber.php
    question: |
      ```php
      $fiber = new Fiber(function (): void {
          echo "Fiber started.\n";
          Fiber::yield();
          echo "Fiber finished.\n";
      });

      $fiber->start();
      echo "Fiber resumed.\n";
      $fiber->resume();
      ```
  -
    question: 'What is the purpose of the `constructor property promotion` feature introduced in PHP 8.0?'
    answers:
      - { value: 'It automatically generates getters and setters for class properties.', correct: false }
      - { value: 'It allows defining and initializing class properties directly in the constructor signature, reducing boilerplate code.', correct: true }
      - { value: 'It promotes private properties to public properties during object creation.', correct: false }
      - { value: 'It enables constructor overloading.', correct: false }
    help: |
      Constructor property promotion allows for a more concise way to declare and initialize class properties.
      https://www.php.net/manual/en/language.oop5.decon.php#language.oop5.decon.constructor.promotion
  -
    question: 'Which of the following is a valid example of constructor property promotion in PHP 8.2?'
    answers:
      - { value: 'class User { public function __construct(public $name) {} }', correct: true }
      - { value: 'class User { public $name; public function __construct($name) { $this->name = $name; } }', correct: false }
      - { value: 'class User { public function __construct(private string $name) {} }', correct: true }
      - { value: 'class User { public function __construct(string $name) { $this->name = $name; } }', correct: false }
    help: |
      Properties can be promoted by adding a visibility keyword (public, protected, private) before the parameter name in the constructor.
      https://www.php.net/manual/en/language.oop5.decon.php#language.oop5.decon.constructor.promotion
  -
    question: 'Consider the following PHP 8.2 code using constructor property promotion:'
    answers:
      - { value: 'The code will output "Name: Alice, Age: 30".', correct: true }
      - { value: 'The code will cause a fatal error.', correct: false }
      - { value: 'The code will output "Name: , Age: ".', correct: false }
      - { value: 'The code will cause a parse error.', correct: false }
    help: |
      Constructor property promotion correctly initializes the properties.
      https://www.php.net/manual/en/language.oop5.decon.php#language.oop5.decon.constructor.promotion
    question: |
      ```php
      class Person {
          public function __construct(
              public string $name,
              public int $age
          ) {}
      }

      $person = new Person("Alice", 30);
      echo "Name: " . $person->name . ", Age: " . $person->age;
      ```
  -
    question: 'What is the purpose of `Union Types` introduced in PHP 8.0?'
    answers:
      - { value: 'To allow a variable or parameter to accept values of multiple different types.', correct: true }
      - { value: 'To combine multiple interfaces into a single type.', correct: false }
      - { value: 'To create new complex data types.', correct: false }
      - { value: 'To define a type that can be null.', correct: false }
    help: |
      Union types allow a variable, parameter, or return type to accept values of several different types.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.union
  -
    question: 'Which of the following is a valid syntax for a Union Type in PHP 8.2?'
    answers:
      - { value: 'int|string', correct: true }
      - { value: 'int, string', correct: false }
      - { value: 'int or string', correct: false }
      - { value: 'array<int|string>', correct: false }
    help: |
      Union types are declared using the `|` separator.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.union
  -
    question: 'Consider the following PHP 8.2 code with Union Types:'
    answers:
      - { value: 'The code will output "Value: Hello" then "Value: 123".', correct: true }
      - { value: 'The code will cause a fatal error when passing an integer.', correct: false }
      - { value: 'The code will cause a fatal error when passing a string.', correct: false }
      - { value: 'The code will output nothing.', correct: false }
    help: |
      The `int|string` union type allows the parameter to accept either an integer or a string.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.union
    question: |
      ```php
      function processValue(int|string $value): void {
          echo "Value: " . $value . "\n";
      }

      processValue("Hello");
      processValue(123);
      ```
  -
    question: 'What is the purpose of the `nullsafe operator` (`?->`) introduced in PHP 8.0?'
    answers:
      - { value: 'To perform null checks and method calls in a single, concise expression, returning null if the left-hand side is null.', correct: true }
      - { value: 'To assign a default value if a variable is null.', correct: false }
      - { value: 'To throw an exception if a variable is null.', correct: false }
      - { value: 'To allow nullable method parameters.', correct: false }
    help: |
      The nullsafe operator allows chaining method calls and property access, returning `null` if any part of the chain is `null` without throwing an error.
      https://www.php.net/manual/en/language.operators.nullsafe.php
  -
    question: 'Consider the following PHP 8.2 code with the nullsafe operator:'
    answers:
      - { value: 'The code will output "User name: John Doe".', correct: true }
      - { value: 'The code will output "User name: ".', correct: false }
      - { value: 'The code will cause a fatal error.', correct: false }
      - { value: 'The code will output "User name: Null".', correct: false }
    help: |
      The nullsafe operator allows accessing properties of a potentially null object without throwing an error. If `$user` is not null, `getName()` is called.
      https://www.php.net/manual/en/language.operators.nullsafe.php
    question: |
      ```php
      class User {
          public function getName(): string {
              return "John Doe";
          }
      }

      $user = new User();
      $userName = $user?->getName();
      echo "User name: " . $userName;
      ```
  -
    question: 'Consider the following PHP 8.2 code with the nullsafe operator and a null object:'
    answers:
      - { value: 'The code will output "User name: ".', correct: true }
      - { value: 'The code will cause a fatal error.', correct: false }
      - { value: 'The code will output "User name: John Doe".', correct: false }
      - { value: 'The code will output "User name: Null".', correct: false }
    help: |
      When the left-hand side of the nullsafe operator is null, the expression short-circuits and evaluates to null.
      https://www.php.net/manual/en/language.operators.nullsafe.php
    question: |
      ```php
      class User {
          public function getName(): string {
              return "John Doe";
          }
      }

      $user = null;
      $userName = $user?->getName();
      echo "User name: " . ($userName ?? ''); // Using null coalescing to handle null output
      ```
  -
    question: 'What is the purpose of the `#[Attribute]` syntax in PHP 8.0?'
    answers:
      - { value: 'To define custom attributes that can be attached to classes, methods, properties, functions, and parameters.', correct: true }
      - { value: 'To declare a new type of class.', correct: false }
      - { value: 'To create a new kind of interface.', correct: false }
      - { value: 'To define a global constant.', correct: false }
    help: |
      Attributes provide a way to add metadata to declarations in PHP code.
      https://www.php.net/manual/en/language.attributes.php
  -
    question: 'How do you define a custom attribute in PHP 8.2?'
    answers:
      - { value: 'class MyAttribute extends Attribute { }', correct: false }
      - { value: '#[Attribute] class MyAttribute { }', correct: true }
      - { value: 'interface MyAttribute extends Attribute { }', correct: false }
      - { value: 'trait MyAttribute extends Attribute { }', correct: false }
    help: |
      Attributes are defined as classes prefixed with `#[Attribute]`.
      https://www.php.net/manual/en/language.attributes.php#language.attributes.defining
  -
    question: 'Consider the following PHP 8.2 code with a custom attribute:'
    answers:
      - { value: 'The code will output "Method description: This is a test method.". ', correct: true }
      - { value: 'The code will cause a fatal error.', correct: false }
      - { value: 'The code will output nothing.', correct: false }
      - { value: 'The code will output "Method description: ".', correct: false }
    help: |
      Reflection API can be used to read attributes at runtime.
      https://www.php.net/manual/en/language.attributes.php#language.attributes.reading
    question: |
      ```php
      #[Attribute]
      class MyMethodDescription {
          public function __construct(public string $description) {}
      }

      class MyClass {
          #[MyMethodDescription("This is a test method.")]
          public function testMethod() {
              // ...
          }
      }

      $reflectionMethod = new ReflectionMethod(MyClass::class, 'testMethod');
      $attributes = $reflectionMethod->getAttributes(MyMethodDescription::class);

      foreach ($attributes as $attribute) {
          $instance = $attribute->newInstance();
          echo "Method description: " . $instance->description;
      }
      ```
  -
    question: 'What is the purpose of the `WeakMap` class introduced in PHP 8.0?'
    answers:
      - { value: 'It stores key-value pairs where keys are objects, and the map does not prevent the garbage collection of the key objects.', correct: true }
      - { value: 'It is a map that only stores weak references to values, not keys.', correct: false }
      - { value: 'It is a map that automatically removes entries after a certain time.', correct: false }
      - { value: 'It is a map that stores only primitive types as keys.', correct: false }
    help: |
      `WeakMap` allows storing references to objects without preventing those objects from being garbage collected.
      https://www.php.net/manual/en/class.weakmap.php
  -
    question: 'Consider the following PHP 8.2 code using `WeakMap`:'
    answers:
      - { value: 'The code will output "Value: Data for Object A".', correct: true }
      - { value: 'The code will cause a fatal error.', correct: false }
      - { value: 'The code will output nothing.', correct: false }
      - { value: 'The code will output "Value: ".', correct: false }
    help: |
      `WeakMap` allows associating data with objects without preventing their garbage collection.
      https://www.php.net/manual/en/class.weakmap.php
    question: |
      ```php
      $map = new WeakMap();
      $objA = new stdClass();
      $objB = new stdClass();

      $map[$objA] = "Data for Object A";
      $map[$objB] = "Data for Object B";

      echo "Value: " . $map[$objA];
      ```
  -
    question: 'What happens to an entry in a `WeakMap` if its key object is garbage collected?'
    answers:
      - { value: 'The entry remains in the map, but the value becomes null.', correct: false }
      - { value: 'The entry is automatically removed from the `WeakMap`.', correct: true }
      - { value: 'A fatal error is thrown.', correct: false }
      - { value: 'The value is also garbage collected immediately.', correct: false }
    help: |
      When a key object in a `WeakMap` is garbage collected, the corresponding entry is automatically removed from the map.
      https://www.php.net/manual/en/class.weakmap.php
  -
    question: 'Which of the following are valid ways to define a constant in PHP?'
    answers:
      - { value: 'const MY_CONSTANT = 123;', correct: true }
      - { value: 'define("MY_CONSTANT", 123);', correct: true }
      - { value: '$MY_CONSTANT = 123; const;', correct: false }
      - { value: 'static MY_CONSTANT = 123;', correct: false }
    help: |
      Constants can be defined using the `const` keyword (within classes or globally) or the `define()` function (globally).
      https://www.php.net/manual/en/language.constants.php
  -
    question: 'What is the scope of a constant defined using `define()`?'
    answers:
      - { value: 'It is always global.', correct: true }
      - { value: 'It is always local to the function where it''s defined.', correct: false }
      - { value: 'It is local to the class where it''s defined.', correct: false }
      - { value: 'It depends on the namespace.', correct: false }
    help: |
      Constants defined with `define()` are global.
      https://www.php.net/manual/en/function.define.php
  -
    question: 'Which of the following magic methods are called when an object is serialized and unserialized, respectively?'
    answers:
      - { value: '`__sleep()` and `__wakeup()`', correct: true }
      - { value: '`__serialize()` and `__unserialize()`', correct: true }
      - { value: '`__toString()` and `__fromString()`', correct: false }
      - { value: '`__clone()` and `__destruct()`', correct: false }
    help: |
      `__sleep()` and `__wakeup()` are older methods for serialization. PHP 7.4 introduced `__serialize()` and `__unserialize()` as a more robust alternative.
      https://www.php.net/manual/en/language.oop5.magic.php#object.sleep
      https://www.php.net/manual/en/language.oop5.magic.php#object.unserialize
  -
    question: 'What is the purpose of the `__toString()` magic method?'
    answers:
      - { value: 'It is called when an object is converted to a string.', correct: true }
      - { value: 'It is called when an object is cloned.', correct: false }
      - { value: 'It is called when an object is destroyed.', correct: false }
      - { value: 'It is called when an object is created.', correct: false }
    help: |
      The `__toString()` method allows a class to decide how it will react when it is treated as a string.
      https://www.php.net/manual/en/language.oop5.magic.php#object.tostring
  -
    question: 'Consider the following PHP code:'
    answers:
      - { value: 'The code will output "My Object as a string".', correct: true }
      - { value: 'The code will cause a fatal error because the object cannot be echoed directly.', correct: false }
      - { value: 'The code will output "Object of class MyClass".', correct: false }
      - { value: 'The code will output nothing.', correct: false }
    help: |
      When an object with a `__toString()` method is used in a string context (like `echo`), the `__toString()` method is invoked.
      https://www.php.net/manual/en/language.oop5.magic.php#object.tostring
    question: |
      ```php
      class MyClass {
          public function __toString(): string {
              return "My Object as a string";
          }
      }

      $obj = new MyClass();
      echo $obj;
      ```
  -
    question: 'What is the purpose of the `__invoke()` magic method?'
    answers:
      - { value: 'It is called when an object is used as a function.', correct: true }
      - { value: 'It is called when an object is serialized.', correct: false }
      - { value: 'It is called when an object is cloned.', correct: false }
      - { value: 'It is called when an object is accessed as an array.', correct: false }
    help: |
      The `__invoke()` method is called when a script tries to call an object as a function.
      https://www.php.net/manual/en/language.oop5.magic.php#object.invoke
  -
    question: 'Consider the following PHP code:'
    answers:
      - { value: 'The code will output "Hello from invoke!".', correct: true }
      - { value: 'The code will cause a fatal error because `MyCallableClass` is not a function.', correct: false }
      - { value: 'The code will output nothing.', correct: false }
      - { value: 'The code will output "Object".', correct: false }
    help: |
      The `__invoke()` method allows an object to be called like a function.
      https://www.php.net/manual/en/language.oop5.magic.php#object.invoke
    question: |
      ```php
      class MyCallableClass {
          public function __invoke($name) {
              echo "Hello from invoke! " . $name;
          }
      }

      $obj = new MyCallableClass();
      $obj("World");
      ```
  -
    question: 'What is the purpose of `Generators` in PHP?'
    answers:
      - { value: 'To create functions that can be paused and resumed, yielding values on demand, which is memory-efficient for large datasets.', correct: true }
      - { value: 'To generate random numbers.', correct: false }
      - { value: 'To create new classes dynamically.', correct: false }
      - { value: 'To handle asynchronous operations using callbacks.', correct: false }
    help: |
      Generators provide an easy way to implement iterators without implementing a class that implements the `Iterator` interface.
      https://www.php.net/manual/en/language.generators.php
  -
    question: 'Which keyword is used in a generator function to yield a value?'
    answers:
      - { value: 'return', correct: false }
      - { value: 'yield', correct: true }
      - { value: 'send', correct: false }
      - { value: 'next', correct: false }
    help: |
      The `yield` keyword is used to return a value from a generator.
      https://www.php.net/manual/en/language.generators.overview.php
  -
    question: 'Consider the following PHP code using a Generator:'
    answers:
      - { value: 'The code will output "123".', correct: true }
      - { value: 'The code will output "012".', correct: false }
      - { value: 'The code will cause a fatal error.', correct: false }
      - { value: 'The code will output nothing.', correct: false }
    help: |
      The `yield` keyword pauses the function and returns a value, resuming from where it left off on the next iteration.
      https://www.php.net/manual/en/language.generators.overview.php
    question: |
      ```php
      function generateNumbers() {
          yield 1;
          yield 2;
          yield 3;
      }

      foreach (generateNumbers() as $number) {
          echo $number;
      }
      ```
  -
    question: 'What is the purpose of the `final` keyword when applied to a class?'
    answers:
      - { value: 'It prevents the class from being extended (inherited).', correct: true }
      - { value: 'It prevents methods within the class from being overridden.', correct: false }
      - { value: 'It makes all properties in the class constant.', correct: false }
      - { value: 'It makes the class a singleton.', correct: false }
    help: |
      If a class is declared `final`, it cannot be extended.
      https://www.php.net/manual/en/language.oop5.final.php
  -
    question: 'What is the purpose of the `final` keyword when applied to a method?'
    answers:
      - { value: 'It prevents the method from being called.', correct: false }
      - { value: 'It prevents the method from being overridden by child classes.', correct: true }
      - { value: 'It makes the method static.', correct: false }
      - { value: 'It makes the method private.', correct: false }
    help: |
      If a method is declared `final`, it cannot be overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php
  -
    question: 'Consider the following PHP code with the `final` keyword:'
    answers:
      - { value: 'The code will output "Hello from Parent".', correct: true }
      - { value: 'The code will cause a fatal error because `ChildClass` tries to override a final method.', correct: true }
      - { value: 'The code will output "Hello from Child".', correct: false }
      - { value: 'The code will cause a parse error.', correct: false }
    help: |
      A `final` method cannot be overridden by a child class.
      https://www.php.net/manual/en/language.oop5.final.php
    question: |
      ```php
      class ParentClass {
          final public function sayHello() {
              echo "Hello from Parent";
          }
      }

      class ChildClass extends ParentClass {
          public function sayHello() { // This will cause a fatal error
              echo "Hello from Child";
          }
      }

      $obj = new ChildClass();
      $obj->sayHello();
      ```
  -
    question: 'Which of the following are valid ways to define a constant within a class in PHP?'
    answers:
      - { value: 'const MY_CLASS_CONSTANT = "value";', correct: true }
      - { value: 'define("MY_CLASS_CONSTANT", "value");', correct: false }
      - { value: 'public const MY_CLASS_CONSTANT = "value";', correct: true }
      - { value: 'static const MY_CLASS_CONSTANT = "value";', correct: false }
    help: |
      Class constants are defined using the `const` keyword. Visibility modifiers (`public`, `protected`, `private`) can be used since PHP 7.1.
      https://www.php.net/manual/en/language.oop5.constants.php
  -
    question: 'How do you access a class constant from outside the class?'
    answers:
      - { value: 'MyClass::MY_CONSTANT', correct: true }
      - { value: 'MyClass->MY_CONSTANT', correct: false }
      - { value: '$myObject->MY_CONSTANT', correct: false }
      - { value: 'MyClass::constant(MY_CONSTANT)', correct: false }
    help: |
      Class constants are accessed using the `::` operator.
      https://www.php.net/manual/en/language.oop5.constants.php
  -
    question: 'Consider the following PHP code accessing a class constant:'
    answers:
      - { value: 'The code will output "The value is 100".', correct: true }
      - { value: 'The code will cause a fatal error.', correct: false }
      - { value: 'The code will output nothing.', correct: false }
      - { value: 'The code will output "The value is ".', correct: false }
    help: |
      Class constants are accessed using the class name followed by `::` and the constant name.
      https://www.php.net/manual/en/language.oop5.constants.php
    question: |
      ```php
      class MyConstants {
          public const MAX_VALUE = 100;
      }

      echo "The value is " . MyConstants::MAX_VALUE;
      ```
  -
    question: 'What is the purpose of the `declare(ticks=N);` directive in PHP?'
    answers:
      - { value: 'It specifies that a low-level operation should be executed after every N "ticks" (statements).', correct: true }
      - { value: 'It sets the maximum execution time for the script to N seconds.', correct: false }
      - { value: 'It defines the number of iterations for a loop.', correct: false }
      - { value: 'It is used for performance benchmarking.', correct: false }
    help: |
      `ticks` are events that occur after a certain number of low-level statements have been executed by the parser. It's often used with `register_tick_function()`.
      https://www.php.net/manual/en/control-structures.declare.php#control-structures.declare.ticks
  -
    question: 'Which PHP function is used to register a function to be executed on each tick?'
    answers:
      - { value: 'register_tick_function()', correct: true }
      - { value: 'set_tick_handler()', correct: false }
      - { value: 'add_tick_callback()', correct: false }
      - { value: 'on_tick()', correct: false }
    help: |
      `register_tick_function()` registers a function to be executed by the interpreter every N ticks.
      https://www.php.net/manual/en/function.register-tick-function.php
  -
    question: 'Consider the following PHP code using `ticks`:'
    answers:
      - { value: 'The code will output "Tick!Tick!Tick!Done.". ', correct: true }
      - { value: 'The code will output "Done.". ', correct: false }
      - { value: 'The code will cause a fatal error.', correct: false }
      - { value: 'The code will output "Tick!Done.". ', correct: false }
    help: |
      The registered function `tick_handler` is called after every 2 statements.
      https://www.php.net/manual/en/control-structures.declare.php#control-structures.declare.ticks
      https://www.php.net/manual/en/function.register-tick-function.php
    question: |
      ```php
      <?php
      declare(ticks=2);

      function tick_handler() {
          echo "Tick!";
      }

      register_tick_function('tick_handler');

      $a = 1; // tick 1
      $b = 2; // tick 2
      $c = 3; // tick 3
      $d = 4; // tick 4

      echo "Done.";
      ?>
      ```
  -
    question: 'What is the purpose of `Reflection` in PHP?'
    answers:
      - { value: 'To analyze and manipulate classes, interfaces, functions, methods, and extensions at runtime.', correct: true }
      - { value: 'To encrypt and decrypt data.', correct: false }
      - { value: 'To optimize database queries.', correct: false }
      - { value: 'To create graphical user interfaces.', correct: false }
    help: |
      The Reflection API provides classes that allow introspection of classes, interfaces, functions, methods, and extensions.
      https://www.php.net/manual/en/book.reflection.php
  -
    question: 'Which `Reflection` class is used to inspect a class''s properties and methods?'
    answers:
      - { value: 'ReflectionFunction', correct: false }
      - { value: 'ReflectionClass', correct: true }
      - { value: 'ReflectionMethod', correct: false }
      - { value: 'ReflectionProperty', correct: false }
    help: |
      `ReflectionClass` provides information about a class.
      https://www.php.net/manual/en/class.reflectionclass.php
  -
    question: 'Consider the following PHP code using Reflection:'
    answers:
      - { value: 'The code will output "Class Name: MyClass".', correct: true }
      - { value: 'The code will cause a fatal error.', correct: false }
      - { value: 'The code will output nothing.', correct: false }
      - { value: 'The code will output "Class Name: ".', correct: false }
    help: |
      `ReflectionClass::getName()` returns the name of the reflected class.
      https://www.php.net/manual/en/class.reflectionclass.php
    question: |
      ```php
      class MyClass {
          public function myMethod() {}
      }

      $reflectionClass = new ReflectionClass('MyClass');
      echo "Class Name: " . $reflectionClass->getName();
      ```
  -
    question: 'What is the difference between `include` and `require` in PHP?'
    answers:
      - { value: '`include` generates a warning and continues execution if the file is not found, while `require` generates a fatal error and stops execution.', correct: true }
      - { value: '`require` is faster than `include`.', correct: false }
      - { value: '`include` can only be used for HTML files, while `require` is for PHP files.', correct: false }
      - { value: 'There is no functional difference; they are aliases.', correct: false }
    help: |
      `include` and `require` differ in how they handle file not found errors. `require` is critical for script execution.
      https://www.php.net/manual/en/function.include.php
      https://www.php.net/manual/en/function.require.php
  -
    question: 'What is the purpose of `include_once` and `require_once`?'
    answers:
      - { value: 'They ensure that the file is included/required only once during the script execution, preventing redeclaration errors.', correct: true }
      - { value: 'They include/require files only if they have changed since the last execution.', correct: false }
      - { value: 'They are deprecated in PHP 8.2.', correct: false }
      - { value: 'They are used for including external libraries only.', correct: false }
    help: |
      `_once` variants prevent multiple inclusions of the same file, which is useful for preventing function/class redeclaration errors.
      https://www.php.net/manual/en/function.include-once.php
      https://www.php.net/manual/en/function.require-once.php
  -
    question: 'What is the purpose of the `__debugInfo()` magic method in PHP?'
    answers:
      - { value: 'It is called when `var_dump()` is used on an object, allowing custom output for debugging.', correct: true }
      - { value: 'It is called when an error occurs in the class.', correct: false }
      - { value: 'It provides information about the object''s memory usage.', correct: false }
      - { value: 'It is used to log debug messages to a file.', correct: false }
    help: |
      The `__debugInfo()` method is called when `var_dump()` is used on an object.
      https://www.php.net/manual/en/language.oop5.magic.php#object.debuginfo
  -
    question: 'Consider the following PHP code with `__debugInfo()`:'
    answers:
      - { value: 'The output of `var_dump($obj)` will be `object(MyDebugClass)#1 (1) { ["secret":protected]=> string(6) "hidden" }`.', correct: true }
      - { value: 'The output of `var_dump($obj)` will be `object(MyDebugClass)#1 (2) { ["publicData"]=> string(4) "data" ["secret"]=> string(6) "hidden" }`.', correct: false }
      - { value: 'The code will cause a fatal error.', correct: false }
      - { value: 'The output of `var_dump($obj)` will be empty.', correct: false }
    help: |
      `__debugInfo()` allows customizing the output of `var_dump()`. The returned array's keys and values are displayed.
      https://www.php.net/manual/en/language.oop5.magic.php#object.debuginfo
    question: |
      ```php
      class MyDebugClass {
          public string $publicData = "data";
          protected string $secret = "secret";

          public function __debugInfo(): array {
              return [
                  'secret' => 'hidden',
              ];
          }
      }

      $obj = new MyDebugClass();
      var_dump($obj);
      ```
  -
    question: 'What is the purpose of the `final` keyword when applied to a property in PHP 8.1?'
    answers:
      - { value: 'It makes the property immutable after its initial assignment.', correct: false }
      - { value: 'It prevents the property from being overridden in child classes.', correct: false }
      - { value: 'The `final` keyword cannot be applied directly to properties; `readonly` is used for immutability.', correct: true }
      - { value: 'It makes the property static.', correct: false }
    help: |
      The `final` keyword cannot be applied to properties. The `readonly` keyword is used for immutability.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly
  -
    question: 'Which of the following are valid ways to define a `readonly` property in PHP 8.2?'
    answers:
      - { value: 'public readonly string $name;', correct: true }
      - { value: 'private readonly int $age;', correct: true }
      - { value: 'readonly string $address;', correct: false }
      - { value: 'static readonly bool $isActive;', correct: false }
    help: |
      `readonly` properties must have a visibility modifier. They cannot be static.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly
  -
    question: 'What is the purpose of the `__serialize()` and `__unserialize()` magic methods (PHP 7.4+)?'
    answers:
      - { value: 'They provide a more robust and flexible way to handle object serialization and unserialization compared to `__sleep()` and `__wakeup()`.', correct: true }
      - { value: 'They are used for encrypting and decrypting object data.', correct: false }
      - { value: 'They define how an object is converted to and from a string representation.', correct: false }
      - { value: 'They are called when an object is cloned.', correct: false }
    help: |
      `__serialize()` and `__unserialize()` were introduced in PHP 7.4 as a new mechanism for object serialization, replacing `__sleep()` and `__wakeup()`.
      https://www.php.net/manual/en/language.oop5.magic.php#object.serialize
  -
    question: 'Consider the following PHP 8.2 code using `__serialize()` and `__unserialize()`:'
    answers:
      - { value: 'The code will output "Data: serialized_data".', correct: true }
      - { value: 'The code will cause a fatal error.', correct: false }
      - { value: 'The code will output "Data: ".', correct: false }
      - { value: 'The code will output "Data: original_data".', correct: false }
    help: |
      `__serialize()` returns an array of data to be serialized. `__unserialize()` reconstructs the object from this data.
      https://www.php.net/manual/en/language.oop5.magic.php#object.serialize
    question: |
      ```php
      class MySerializableClass {
          public string $data;

          public function __construct(string $data) {
              $this->data = $data;
          }

          public function __serialize(): array {
              return ['data' => 'serialized_' . $this->data];
          }

          public function __unserialize(array $data): void {
              $this->data = $data['data'];
          }
      }

      $obj = new MySerializableClass('original_data');
      $serialized = serialize($obj);
      $unserialized = unserialize($serialized);

      echo "Data: " . $unserialized->data;
      ```
  -
    question: 'What is the purpose of the `match` expression''s `default` arm?'
    answers:
      - { value: 'It is executed if none of the preceding conditions match, and it is mandatory if not all possible values are covered.', correct: true }
      - { value: 'It is optional and only used for debugging.', correct: false }
      - { value: 'It is executed only if an exception occurs.', correct: false }
      - { value: 'It defines the default return type of the `match` expression.', correct: false }
    help: |
      The `default` arm in a `match` expression is executed if no other arm matches. It is mandatory unless all possible values are explicitly covered.
      https://www.php.net/manual/en/control-structures.match.php#control-structures.match.exhaustiveness
  -
    question: 'Consider the following PHP 8.2 `match` expression:'
    answers:
      - { value: 'The code will output "Unknown number".', correct: true }
      - { value: 'The code will output "One".', correct: false }
      - { value: 'The code will cause a fatal error because 3 is not covered.', correct: false }
      - { value: 'The code will output nothing.', correct: false }
    help: |
      The `default` arm catches any value not explicitly matched by other arms.
      https://www.php.net/manual/en/control-structures.match.php
    question: |
      ```php
      $number = 3;
      $result = match ($number) {
          1 => 'One',
          2 => 'Two',
          default => 'Unknown number',
      };
      echo $result;
      ```
  -
    question: 'What is the purpose of `Named Arguments` introduced in PHP 8.0?'
    answers:
      - { value: 'To allow passing arguments to functions and methods by their parameter name, making function calls more readable and order-independent.', correct: true }
      - { value: 'To define optional arguments with default values.', correct: false }
      - { value: 'To restrict the types of arguments that can be passed to a function.', correct: false }
      - { value: 'To create new functions with specific names.', correct: false }
    help: |
      Named arguments allow passing arguments to a function based on the parameter name, rather than the position.
      https://www.php.net/manual/en/functions.arguments.php#functions.named-arguments
  -
    question: 'Consider the following PHP 8.2 code using Named Arguments:'
    answers:
      - { value: 'The code will output "Hello, Alice! You are 30 years old.". ', correct: true }
      - { value: 'The code will cause a fatal error due to incorrect argument order.', correct: false }
      - { value: 'The code will output "Hello, ! You are 0 years old.". ', correct: false }
      - { value: 'The code will cause a parse error.', correct: false }
    help: |
      Named arguments allow specifying arguments by name, making their order irrelevant.
      https://www.php.net/manual/en/functions.arguments.php#functions.named-arguments
    question: |
      ```php
      function greet(string $name, int $age): string {
          return "Hello, " . $name . "! You are " . $age . " years old.";
      }

      echo greet(age: 30, name: "Alice");
      ```
  -
    question: 'Which of the following are benefits of using Named Arguments?'
    answers:
      - { value: 'Improved readability of function calls, especially for functions with many parameters.', correct: true }
      - { value: 'Ability to skip optional parameters without passing nulls.', correct: true }
      - { value: 'Automatic type conversion for arguments.', correct: false }
      - { value: 'Reduced memory consumption.', correct: false }
    help: |
      Named arguments improve readability and allow skipping optional parameters.
      https://www.php.net/manual/en/functions.arguments.php#functions.named-arguments
  -
    question: 'What is the purpose of the `#[Deprecated]` attribute in PHP 8.0?'
    answers:
      - { value: 'It marks a class, method, property, or constant as deprecated, indicating it should no longer be used and may be removed in future versions.', correct: true }
      - { value: 'It prevents the marked element from being used.', correct: false }
      - { value: 'It automatically removes the marked element from the code.', correct: false }
      - { value: 'It is a comment and has no functional effect.', correct: false }
    help: |
      The `#[Deprecated]` attribute is a standard attribute to mark code as deprecated.
      https://www.php.net/manual/en/language.attributes.php#language.attributes.predefined.deprecated
  -
    question: 'Consider the following PHP 8.2 code with the `#[Deprecated]` attribute:'
    answers:
      - { value: 'The code will output "This is an old method." and generate a deprecation notice.', correct: true }
      - { value: 'The code will cause a fatal error.', correct: false }
      - { value: 'The code will output nothing.', correct: false }
      - { value: 'The code will only output "This is an old method." without any notice.', correct: false }
    help: |
      Using a deprecated element will typically generate a deprecation notice.
      https://www.php.net/manual/en/language.attributes.php#language.attributes.predefined.deprecated
    question: |
      ```php
      class MyLegacyClass {
          #[Deprecated(reason: "Use newMethod instead.")]
          public function oldMethod() {
              echo "This is an old method.";
          }
      }

      $obj = new MyLegacyClass();
      $obj->oldMethod();
      ```
  -
    question: 'What is the purpose of the `Stringable` interface introduced in PHP 8.0?'
    answers:
      - { value: 'It is an interface that classes implementing `__toString()` automatically implement, allowing for type hinting objects that can be cast to a string.', correct: true }
      - { value: 'It provides methods for string manipulation.', correct: false }
      - { value: 'It is used to define string constants.', correct: false }
      - { value: 'It is a base class for all string-related types.', correct: false }
    help: |
      The `Stringable` interface is automatically added to any class that implements the `__toString()` method.
      https://www.php.net/manual/en/class.stringable.php
  -
    question: 'Consider the following PHP 8.2 code with `Stringable`:'
    answers:
      - { value: 'The code will output "My Object as a string".', correct: true }
      - { value: 'The code will cause a fatal error because `MyClass` does not explicitly implement `Stringable`.', correct: false }
      - { value: 'The code will output nothing.', correct: false }
      - { value: 'The code will output "Object".', correct: false }
    help: |
      Classes implementing `__toString()` automatically implement `Stringable`, making them type-hintable as such.
      https://www.php.net/manual/en/class.stringable.php
    question: |
      ```php
      class MyClass {
          public function __toString(): string {
              return "My Object as a string";
          }
      }

      function takesStringable(Stringable $obj) {
          echo $obj;
      }

      $obj = new MyClass();
      takesStringable($obj);
      ```
  -
    question: 'What is the purpose of the `WeakReference` class in PHP?'
    answers:
      - { value: 'It allows you to hold a reference to an object without preventing that object from being garbage collected.', correct: true }
      - { value: 'It creates a copy of an object that is not affected by changes to the original.', correct: false }
      - { value: 'It is used for strong encryption of object data.', correct: false }
      - { value: 'It provides a way to serialize objects to a file.', correct: false }
    help: |
      `WeakReference` allows you to maintain a reference to an object that does not prevent the object from being garbage collected.
      https://www.php.net/manual/en/class.weakreference.php
  -
    question: 'Consider the following PHP code using `WeakReference`:'
    answers:
      - { value: 'The code will output "Object exists: 1" then "Object exists: ".', correct: true }
      - { value: 'The code will output "Object exists: 1" twice.', correct: false }
      - { value: 'The code will cause a fatal error.', correct: false }
      - { value: 'The code will output "Object exists: " twice.', correct: false }
    help: |
      When the only strong reference to `$obj` is removed, it is garbage collected, and the weak reference becomes null.
      https://www.php.net/manual/en/class.weakreference.php
    question: |
      ```php
      $obj = new stdClass();
      $weakRef = WeakReference::create($obj);

      echo "Object exists: " . (int)($weakRef->get() !== null) . "\n";

      unset($obj); // Remove the strong reference

      echo "Object exists: " . (int)($weakRef->get() !== null) . "\n";
      ```
  -
    question: 'What is the purpose of the `readonly` modifier when applied to a class in PHP 8.2?'
    answers:
      - { value: 'It makes all properties of the class `readonly` implicitly, and prevents dynamic properties.', correct: true }
      - { value: 'It prevents the class from being extended.', correct: false }
      - { value: 'It makes all methods of the class `final`.', correct: false }
      - { value: 'It prevents the class from being instantiated.', correct: false }
    help: |
      A `readonly` class ensures that all its properties are `readonly` and prevents dynamic properties.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly.class
  -
    question: 'Which of the following is true about `readonly` classes in PHP 8.2?'
    answers:
      - { value: 'All properties declared within a `readonly` class must also be explicitly marked `readonly`.', correct: false }
      - { value: '`readonly` classes cannot have static properties.', correct: false }
      - { value: '`readonly` classes cannot have dynamic properties.', correct: true }
      - { value: '`readonly` classes cannot be extended.', correct: false }
    help: |
      All properties declared in a `readonly` class are implicitly `readonly`. Dynamic properties are forbidden. `readonly` classes can be extended.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly.class
  -
    question: 'Consider the following PHP 8.2 code with a `readonly` class:'
    answers:
      - { value: 'The code will output "Name: Alice".', correct: true }
      - { value: 'The code will cause a fatal error when trying to set `dynamicProperty`.', correct: true }
      - { value: 'The code will output nothing.', correct: false }
      - { value: 'The code will output "Name: Alice, Dynamic: dynamic".', correct: false }
    help: |
      `readonly` classes forbid dynamic properties.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly.class
    question: |
      ```php
      readonly class User {
          public string $name;

          public function __construct(string $name) {
              $this->name = $name;
          }
      }

      $user = new User("Alice");
      echo "Name: " . $user->name . "\n";
      $user->dynamicProperty = "dynamic"; // This will cause a fatal error
      ```
  -
    question: 'What is the purpose of the `#[AllowDynamicProperties]` attribute in PHP 8.2?'
    answers:
      - { value: 'It allows dynamic properties on classes that would otherwise forbid them (e.g., `readonly` classes or classes extending `stdClass` indirectly).', correct: true }
      - { value: 'It prevents dynamic properties on a class.', correct: false }
      - { value: 'It makes all properties dynamic by default.', correct: false }
      - { value: 'It is used for defining dynamic methods.', correct: false }
    help: |
      The `#[AllowDynamicProperties]` attribute allows dynamic properties on classes where they would otherwise be forbidden.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.dynamic
  -
    question: 'Consider the following PHP 8.2 code with `#[AllowDynamicProperties]`:'
    answers:
      - { value: 'The code will output "Name: Bob, Extra: new_data".', correct: true }
      - { value: 'The code will cause a fatal error because `readonly` classes forbid dynamic properties.', correct: false }
      - { value: 'The code will output nothing.', correct: false }
      - { value: 'The code will output "Name: Bob".', correct: false }
    help: |
      `#[AllowDynamicProperties]` explicitly permits dynamic properties even on `readonly` classes.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.dynamic
    question: |
      ```php
      #[AllowDynamicProperties]
      readonly class Person {
          public string $name;

          public function __construct(string $name) {
              $this->name = $name;
          }
      }

      $person = new Person("Bob");
      $person->extra = "new_data";

      echo "Name: " . $person->name . ", Extra: " . $person->extra;
      ```
  -
    question: 'What is the purpose of the `#[SensitiveParameter]` attribute in PHP 8.2?'
    answers:
      - { value: 'It marks a function or method parameter as sensitive, causing its value to be redacted from stack traces and error logs.', correct: true }
      - { value: 'It encrypts the parameter value automatically.', correct: false }
      - { value: 'It prevents the parameter from being passed by reference.', correct: false }
      - { value: 'It enforces strict type checking for the parameter.', correct: false }
    help: |
      The `#[SensitiveParameter]` attribute redacts sensitive parameter values from stack traces and error logs.
      https://www.php.net/manual/en/language.attributes.php#language.attributes.predefined.sensitiveparameter
  -
    question: 'Consider the following PHP 8.2 code with `#[SensitiveParameter]`:'
    answers:
      - { value: 'The stack trace will show `password` as `(sensitive value)` instead of `mysecretpassword`.', correct: true }
      - { value: 'The code will cause a fatal error.', correct: false }
      - { value: 'The error message will not contain any information about the `password` parameter.', correct: false }
      - { value: 'The code will output "Error: Invalid credentials".', correct: false }
    help: |
      The `#[SensitiveParameter]` attribute redacts the value of the marked parameter in stack traces.
      https://www.php.net/manual/en/language.attributes.php#language.attributes.predefined.sensitiveparameter
    question: |
      ```php
      #[SensitiveParameter]
      function login(string $username, string $password) {
          throw new Exception("Invalid credentials");
      }

      try {
          login("user", "mysecretpassword");
      } catch (Exception $e) {
          // In a real scenario, this would be logged, and the password would be redacted in the stack trace.
          // For this question, assume the effect on stack trace.
          // echo $e->getTraceAsString(); // This would show the redaction
      }
      ```
  -
    question: 'Which of the following are new features or improvements in PHP 8.2 related to `random number generation`?'
    answers:
      - { value: 'Introduction of a new `Randomizer` class for object-oriented random number generation.', correct: true }
      - { value: 'New functions like `random_bytes()` and `random_int()` are now the recommended way for cryptographic randomness.', correct: true }
      - { value: 'The `mt_rand()` function is now deprecated.', correct: false }
      - { value: 'The `rand()` function is now cryptographically secure by default.', correct: false }
    help: |
      PHP 8.2 introduced the `Randomizer` class and a new set of functions for better random number generation. `mt_rand()` and `rand()` are not deprecated but are not cryptographically secure.
      https://www.php.net/manual/en/book.random.php
  -
    question: 'Consider the following PHP 8.2 code using the new `Randomizer` class:'
    answers:
      - { value: 'The code will output a random integer between 1 and 10 (inclusive).', correct: true }
      - { value: 'The code will cause a fatal error because `Randomizer` is an abstract class.', correct: false }
      - { value: 'The code will output "1".', correct: false }
      - { value: 'The code will output "0".', correct: false }
    help: |
      The `Randomizer` class provides an object-oriented interface for generating random numbers.
      https://www.php.net/manual/en/class.randomizer.php
    question: |
      ```php
      $randomizer = new Randomizer();
      $randomNumber = $randomizer->getInt(1, 10);
      echo $randomNumber; // Will output a random integer between 1 and 10
      ```
  -
    question: 'What is the purpose of the `DnfType` (Disjunctive Normal Form Types) introduced in PHP 8.2?'
    answers:
      - { value: 'It allows combining union and intersection types in a more expressive way, ensuring a type is either A AND B, OR C AND D.', correct: true }
      - { value: 'It is a new type of array for storing complex data structures.', correct: false }
      - { value: 'It defines a new syntax for anonymous functions.', correct: false }
      - { value: 'It is used for defining database schemas.', correct: false }
    help: |
      DNF Types allow combining union and intersection types with parentheses, enabling more complex type declarations.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.dnf
  -
    question: 'Which of the following is a valid DNF type syntax in PHP 8.2?'
    answers:
      - { value: '(A&B)|C', correct: true }
      - { value: 'A&(B|C)', correct: false }
      - { value: 'A|B&C', correct: false }
      - { value: 'A, B | C', correct: false }
    help: |
      DNF types use `&` for intersection, `|` for union, and parentheses for grouping.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.dnf
  -
    question: 'Consider the following PHP 8.2 code with DNF types:'
    answers:
      - { value: 'The code will output "Processing data: 123".', correct: true }
      - { value: 'The code will cause a fatal error if `$data` is an object.', correct: false }
      - { value: 'The code will cause a fatal error if `$data` is an integer.', correct: false }
      - { value: 'The code will output nothing.', correct: false }
    help: |
      The DNF type `(Countable&ArrayAccess)|int` allows the parameter to be either an object that is both `Countable` and `ArrayAccess`, OR an `int`.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.dnf
    question: |
      ```php
      function processData((Countable&ArrayAccess)|int $data): void {
          echo "Processing data: ";
          if (is_int($data)) {
              echo $data;
          } else {
              echo "Count: " . count($data);
          }
      }

      processData(123);
      // processData(new ArrayObject([1, 2, 3])); // This would also be valid
      ```
  -
    question: 'What is the purpose of the `curl` extension in PHP?'
    answers:
      - { value: 'To interact with various servers using different protocols (HTTP, FTP, etc.).', correct: true }
      - { value: 'To perform cryptographic operations.', correct: false }
      - { value: 'To connect to MySQL databases.', correct: false }
      - { value: 'To parse XML documents.', correct: false }
    help: |
      The cURL extension allows PHP to make requests to other servers using a wide range of protocols.
      https://www.php.net/manual/en/book.curl.php
  -
    question: 'Which PHP extension is commonly used for working with JSON data?'
    answers:
      - { value: 'xml', correct: false }
      - { value: 'json', correct: true }
      - { value: 'pdo', correct: false }
      - { value: 'gd', correct: false }
    help: |
      The JSON extension provides functions for encoding and decoding JSON data.
      https://www.php.net/manual/en/book.json.php
  -
    question: 'Which of the following functions are part of the `json` extension?'
    answers:
      - { value: 'json_encode()', correct: true }
      - { value: 'json_decode()', correct: true }
      - { value: 'json_last_error()', correct: true }
      - { value: 'json_parse()', correct: false }
    help: |
      `json_encode()`, `json_decode()`, and `json_last_error()` are common functions in the JSON extension.
      https://www.php.net/manual/en/book.json.php
  -
    question: 'What is the purpose of the `GD` extension in PHP?'
    answers:
      - { value: 'To create and manipulate image files.', correct: true }
      - { value: 'To connect to PostgreSQL databases.', correct: false }
      - { value: 'To handle file uploads securely.', correct: false }
      - { value: 'To compress and decompress data.', correct: false }
    help: |
      The GD extension provides image creation and manipulation capabilities.
      https://www.php.net/manual/en/book.image.php
  -
    question: 'Which of the following are common functions provided by the `GD` extension?'
    answers:
      - { value: 'imagecreatefromjpeg()', correct: true }
      - { value: 'imagepng()', correct: true }
      - { value: 'imagerotate()', correct: true }
      - { value: 'image_resize()', correct: false }
    help: |
      `imagecreatefromjpeg()`, `imagepng()`, and `imagerotate()` are examples of GD functions.
      https://www.php.net/manual/en/book.image.php
  -
    question: 'What is the purpose of the `PDO` extension in PHP?'
    answers:
      - { value: 'To provide a lightweight interface for accessing databases in PHP.', correct: true }
      - { value: 'To manage PHP packages and dependencies.', correct: false }
      - { value: 'To handle session management.', correct: false }
      - { value: 'To parse HTML documents.', correct: false }
    help: |
      PDO (PHP Data Objects) is a database access layer providing a uniform method of access to multiple databases.
      https://www.php.net/manual/en/book.pdo.php
  -
    question: 'Which of the following are benefits of using PDO over traditional database extensions (e.g., `mysqli` directly)?'
    answers:
      - { value: 'Database abstraction layer, allowing easier switching between different database systems.', correct: true }
      - { value: 'Support for prepared statements, helping prevent SQL injection attacks.', correct: true }
      - { value: 'Consistent API across different databases.', correct: true }
      - { value: 'Automatic database schema migration.', correct: false }
    help: |
      PDO offers database abstraction, prepared statements, and a consistent API.
      https://www.php.net/manual/en/book.pdo.php
  -
    question: 'What is the purpose of the `Date/Time` extension in PHP?'
    answers:
      - { value: 'To provide functions for working with dates and times.', correct: true }
      - { value: 'To handle time zone conversions automatically.', correct: true }
      - { value: 'To manage cron jobs.', correct: false }
      - { value: 'To synchronize server time with external sources.', correct: false }
    help: |
      The Date/Time extension provides extensive functionality for date and time manipulation.
      https://www.php.net/manual/en/book.datetime.php
  -
    question: 'Which of the following are valid ways to create a `DateTime` object in PHP 8.2?'
    answers:
      - { value: 'new DateTime();', correct: true }
      - { value: 'new DateTime("2023-01-15");', correct: true }
      - { value: 'DateTime::createFromFormat("Y-m-d", "2023-01-15");', correct: true }
      - { value: 'date_create("2023-01-15");', correct: false }
    help: |
      `new DateTime()` and `DateTime::createFromFormat()` are common ways to create `DateTime` objects. `date_create()` is an alias for `new DateTime()`.
      https://www.php.net/manual/en/class.datetime.php
      https://www.php.net/manual/en/datetime.createfromformat.php
  -
    question: 'Consider the following PHP code with `DateTime`:'
    answers:
      - { value: 'The code will output the current date and time in "Y-m-d H:i:s" format.', correct: true }
      - { value: 'The code will cause a fatal error.', correct: false }
      - { value: 'The code will output nothing.', correct: false }
      - { value: 'The code will output "DateTime Object".', correct: false }
    help: |
      `DateTime::format()` is used to format the date and time string.
      https://www.php.net/manual/en/datetime.format.php
    question: |
      ```php
      $now = new DateTime();
      echo $now->format('Y-m-d H:i:s');
      ```
  -
    question: 'What is the purpose of the `Filter` extension in PHP?'
    answers:
      - { value: 'To validate and sanitize external input (e.g., from forms).', correct: true }
      - { value: 'To filter arrays based on a callback function.', correct: false }
      - { value: 'To filter email spam.', correct: false }
      - { value: 'To filter database query results.', correct: false }
    help: |
      The Filter extension provides functions for validating and sanitizing data.
      https://www.php.net/manual/en/book.filter.php
  -
    question: 'Which of the following functions are part of the `Filter` extension?'
    answers:
      - { value: 'filter_var()', correct: true }
      - { value: 'filter_input()', correct: true }
      - { value: 'filter_has_var()', correct: true }
      - { value: 'filter_array()', correct: false }
    help: |
      `filter_var()`, `filter_input()`, and `filter_has_var()` are key functions for input filtering.
      https://www.php.net/manual/en/book.filter.php
  -
    question: 'Consider the following PHP code using `filter_var()`:'
    answers:
      - { value: 'The code will output "Email is valid.". ', correct: true }
      - { value: 'The code will output "Email is invalid.". ', correct: false }
      - { value: 'The code will cause a fatal error.', correct: false }
      - { value: 'The code will output nothing.', correct: false }
    help: |
      `filter_var()` with `FILTER_VALIDATE_EMAIL` validates an email address.
      https://www.php.net/manual/en/function.filter-var.php
    question: |
      ```php
      $email = "test@example.com";
      if (filter_var($email, FILTER_VALIDATE_EMAIL)) {
          echo "Email is valid.";
      } else {
          echo "Email is invalid.";
      }
      ```
  -
    question: 'What is the purpose of the `SPL Autoloading` mechanism?'
    answers:
      - { value: 'To automatically load class files when they are first used, without explicit `require` or `include` statements.', correct: true }
      - { value: 'To automatically generate class files from a database schema.', correct: false }
      - { value: 'To automatically compile PHP code for faster execution.', correct: false }
      - { value: 'To automatically install PHP extensions.', correct: false }
    help: |
      SPL autoloading allows PHP to automatically load class definitions when they are needed.
      https://www.php.net/manual/en/language.oop5.autoload.php
  -
    question: 'Which function is typically used to register an autoloader function?'
    answers:
      - { value: 'spl_autoload_register()', correct: true }
      - { value: 'autoload_set()', correct: false }
      - { value: 'register_class_loader()', correct: false }
      - { value: '__autoload_register()', correct: false }
    help: |
      `spl_autoload_register()` registers a function as an autoloader.
      https://www.php.net/manual/en/function.spl-autoload-register.php
  -
    question: 'Consider the following PHP code demonstrating SPL autoloading:'
    answers:
      - { value: 'The code will output "MyClass loaded!".', correct: true }
      - { value: 'The code will cause a fatal error because `MyClass.php` is not explicitly included.', correct: false }
      - { value: 'The code will output nothing.', correct: false }
      - { value: 'The code will output "Class not found!".', correct: false }
    help: |
      The autoloader function attempts to include the class file when `MyClass` is first used.
      https://www.php.net/manual/en/function.spl-autoload-register.php
    question: |
      ```php
      // Assume MyClass.php exists in the same directory with:
      // <?php class MyClass { public function __construct() { echo "MyClass loaded!"; } } ?>

      spl_autoload_register(function ($className) {
          $file = $className . '.php';
          if (file_exists($file)) {
              require $file;
          }
      });

      $obj = new MyClass();
      ```
  -
    question: 'What is the purpose of `Weak References` in PHP (introduced in PHP 7.4)?'
    answers:
      - { value: 'To allow an object to be referenced without preventing its garbage collection.', correct: true }
      - { value: 'To create a copy of an object that is independent of the original.', correct: false }
      - { value: 'To store encrypted data within an object.', correct: false }
      - { value: 'To define a reference that can only be accessed by specific methods.', correct: false }
    help: |
      `WeakReference` allows you to maintain a reference to an object that does not prevent the object from being garbage collected.
      https://www.php.net/manual/en/class.weakreference.php
  -
    question: 'What happens to a `WeakReference` if the object it refers to is garbage collected?'
    answers:
      - { value: 'The `WeakReference` itself is also immediately garbage collected.', correct: false }
      - { value: 'The `WeakReference` remains, but its `get()` method will return `null`.', correct: true }
      - { value: 'A fatal error is thrown.', correct: false }
      - { value: 'The `WeakReference` automatically creates a new instance of the object.', correct: false }
    help: |
      If the object a `WeakReference` refers to is garbage collected, `get()` will return `null`.
      https://www.php.net/manual/en/class.weakreference.php
  -
    question: 'What is the purpose of the `Closure::fromCallable()` method in PHP?'
    answers:
      - { value: 'It creates a new `Closure` from a callable, binding its scope and object if applicable.', correct: true }
      - { value: 'It converts a `Closure` back into a regular function.', correct: false }
      - { value: 'It checks if a given variable is a callable.', correct: false }
      - { value: 'It executes a callable.', correct: false }
    help: |
      `Closure::fromCallable()` creates a new `Closure` from any callable.
      https://www.php.net/manual/en/closure.fromcallable.php
  -
    question: 'Consider the following PHP code using `Closure::fromCallable()`:'
    answers:
      - { value: 'The code will output "Hello, World!".', correct: true }
      - { value: 'The code will cause a fatal error because `myFunction` is not a `Closure`.', correct: false }
      - { value: 'The code will output nothing.', correct: false }
      - { value: 'The code will output "Callable".', correct: false }
    help: |
      `Closure::fromCallable()` successfully converts the function name into a callable `Closure`.
      https://www.php.net/manual/en/closure.fromcallable.php
    question: |
      ```php
      function myFunction($name) {
          echo "Hello, " . $name . "!";
      }

      $closure = Closure::fromCallable('myFunction');
      $closure("World");
      ```
  -
    question: 'What is the purpose of the `__clone()` magic method?'
    answers:
      - { value: 'It is called when an object is cloned, allowing for custom deep copying logic.', correct: true }
      - { value: 'It is called when an object is created.', correct: false }
      - { value: 'It is called when an object is destroyed.', correct: false }
      - { value: 'It is used to compare two objects for equality.', correct: false }
    help: |
      The `__clone()` method is called when a cloned object has been created.
      https://www.php.net/manual/en/language.oop5.cloning.php
  -
    question: 'Consider the following PHP code with `__clone()`:'
    answers:
      - { value: 'The code will output "Original ID: 1, Cloned ID: 2".', correct: true }
      - { value: 'The code will output "Original ID: 1, Cloned ID: 1".', correct: false }
      - { value: 'The code will cause a fatal error.', correct: false }
      - { value: 'The code will output nothing.', correct: false }
    help: |
      The `__clone()` method allows modifying the cloned object after the shallow copy.
      https://www.php.net/manual/en/language.oop5.cloning.php
    question: |
      ```php
      class MyCloneableClass {
          public int $id;
          private static int $nextId = 1;

          public function __construct() {
              $this->id = self::$nextId++;
          }

          public function __clone() {
              $this->id = self::$nextId++;
          }
      }

      $obj1 = new MyCloneableClass();
      $obj2 = clone $obj1;

      echo "Original ID: " . $obj1->id . ", Cloned ID: " . $obj2->id;
      ```
  -
    question: 'What is the purpose of the `__callStatic()` magic method?'
    answers:
      - { value: 'It is triggered when invoking inaccessible `static` methods in an object context.', correct: false }
      - { value: 'It is triggered when invoking inaccessible `static` methods in a static context.', correct: true }
      - { value: 'It is triggered when invoking inaccessible `public` methods.', correct: false }
      - { value: 'It is triggered when accessing inaccessible `static` properties.', correct: false }
    help: |
      `__callStatic()` is triggered when invoking inaccessible `static` methods in a static context.
      https://www.php.net/manual/en/language.oop5.magic.php#object.callstatic
  -
    question: 'Consider the following PHP code with `__callStatic()`:'
    answers:
      - { value: 'The code will output "Calling static method: doSomething with arguments: arg1, arg2".', correct: true }
      - { value: 'The code will cause a fatal error because `doSomething` is not defined.', correct: false }
      - { value: 'The code will output nothing.', correct: false }
      - { value: 'The code will output "Method not found".', correct: false }
    help: |
      `__callStatic()` catches calls to undefined static methods.
      https://www.php.net/manual/en/language.oop5.magic.php#object.callstatic
    question: |
      ```php
      class MyStaticHandler {
          public static function __callStatic($name, $arguments) {
              echo "Calling static method: " . $name . " with arguments: " . implode(", ", $arguments);
          }
      }

      MyStaticHandler::doSomething("arg1", "arg2");
      ```