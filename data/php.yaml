category: PHP

questions:
  -
    question: >
      Which of the following is a new feature introduced in PHP 8.0?
    answers:
      - { value: 'Named Arguments', correct: true }
      - { value: 'Arrow Functions', correct: false }
      - { value: 'Null Coalescing Operator', correct: false }
      - { value: 'Type Declarations for Scalar Types', correct: false }
    help: |
      Named Arguments were introduced in PHP 8.0, allowing arguments to be passed to a function based on their parameter name, rather than their position.
      https://www.php.net/manual/en/language.functions.named-arguments.php

  -
    question: |
      Consider the following PHP code:

      ```php
      class MyClass {
          public function __construct(
              private string $name,
              public int $age
          ) {}
      }

      $obj = new MyClass('Alice', 30);
      echo $obj->name;
      ```

      What will be the output of this code?
    answers:
      - { value: '`Alice`', correct: false }
      - { value: 'An `Error` because `name` is private.', correct: true }
      - { value: '`30`', correct: false }
      - { value: 'A `TypeError` due to incorrect type hinting.', correct: false }
    help: |
      Property promotion in PHP 8.0 automatically creates and assigns properties. However, `private` properties are only accessible within the class itself. Attempting to access `$obj->name` from outside the class will result in an `Error`.
      https://www.php.net/manual/en/language.oop5.decon.php#language.oop5.decon.constructor.promotion

  -
    question: >
      What is the purpose of the `match` expression introduced in PHP 8.0?
    answers:
      - { value: 'It is a stricter version of the `switch` statement, supporting multiple conditions.', correct: true }
      - { value: 'It is used for regular expression matching on strings.', correct: false }
      - { value: 'It provides a way to define anonymous functions with pattern matching.', correct: false }
      - { value: 'It allows for dynamic method invocation based on a string.', correct: false }
    help: |
      The `match` expression is similar to `switch` but provides stricter comparisons, does not fall through, and can return a value.
      https://www.php.net/manual/en/control-structures.match.php

  -
    question: >
      Which magic method is automatically called when an object is treated as a string?
    answers:
      - { value: '`__toString()`', correct: true }
      - { value: '`__invoke()`', correct: false }
      - { value: '`__call()`', correct: false }
      - { value: '`__debugInfo()`', correct: false }
    help: |
      The `__toString()` method allows a class to decide how it will react when it is converted to a string.
      https://www.php.net/manual/en/language.oop5.magic.php#object.tostring

  -
    question: >
      In Object-Oriented Programming (OOP) in PHP, what does "Encapsulation" refer to?
    answers:
      - { value: 'Bundling data and methods that operate on the data within a single unit (class).', correct: true }
      - { value: 'The ability of an object to take on many forms.', correct: false }
      - { value: 'Creating new classes from existing classes.', correct: false }
      - { { value: 'Hiding the implementation details of an object.', correct: true }
    help: |
      Encapsulation is the bundling of data with the methods that operate on that data, or the restricting of direct access to some of an object's components. It's often used to hide the internal state of an object.
      https://www.php.net/manual/en/language.oop5.php

  -
    question: |
      Which of the following correctly defines a PHP namespace?
    answers:
      - { value: '`namespace App\\Controller;`', correct: true }
      - { value: '`use App\\Controller;`', correct: false }
      - { value: '`namespace App/Controller;`', correct: false }
      - { value: '`require_namespace App\\Controller;`', correct: false }
    help: |
      Namespaces are declared using the `namespace` keyword at the top of a PHP file.
      https://www.php.net/manual/en/language.namespaces.definition.php

  -
    question: >
      What is the primary purpose of an interface in PHP?
    answers:
      - { value: 'To define a contract that classes must adhere to.', correct: true }
      - { value: 'To provide a base class with common functionality.', correct: false }
      - { value: 'To prevent a class from being instantiated directly.', correct: false }
      - { value: 'To allow multiple inheritance for classes.', correct: false }
    help: |
      Interfaces allow you to specify that a class must implement certain methods, without having to define how these methods are implemented.
      https://www.php.net/manual/en/language.oop5.interfaces.php

  -
    question: |
      Consider the following PHP code:

      ```php
      $multiplier = 2;
      $numbers = [1, 2, 3];
      $newNumbers = array_map(function ($n) use ($multiplier) {
          return $n * $multiplier;
      }, $numbers);

      print_r($newNumbers);
      ```

      What will be the output?
    answers:
      - { value: '`Array ( [0] => 2 [1] => 4 [2] => 6 )`', correct: true }
      - { value: '`Array ( [0] => 1 [1] => 2 [2] => 3 )`', correct: false }
      - { value: 'An `Error` because `$multiplier` is not defined in the closure scope.', correct: false }
      - { value: '`Array ( [0] => 0 [1] => 0 [2] => 0 )`', correct: false }
    help: |
      The `use` keyword allows an anonymous function (closure) to inherit variables from the parent scope. In this case, `$multiplier` is used to multiply each number in the array.
      https://www.php.net/manual/en/functions.anonymous.php

  -
    question: >
      Which statement about abstract classes in PHP is true?
    answers:
      - { value: 'An abstract class cannot be instantiated directly.', correct: true }
      - { value: 'An abstract class must contain at least one abstract method.', correct: false }
      - { value: 'Abstract methods must be implemented by the abstract class itself.', correct: false }
      - { value: 'A class can extend multiple abstract classes.', correct: false }
    help: |
      Abstract classes cannot be instantiated, and any class that contains at least one abstract method must be declared abstract. However, an abstract class can exist without any abstract methods.
      https://www.php.net/manual/en/language.oop5.abstract.php

  -
    question: >
      What is the correct way to catch multiple types of exceptions in a single `catch` block in PHP 8.0+?
    answers:
      - { value: '`catch (ExceptionTypeA | ExceptionTypeB $e)`', correct: true }
      - { value: '`catch (ExceptionTypeA, ExceptionTypeB $e)`', correct: false }
      - { value: '`catch (ExceptionTypeA || ExceptionTypeB $e)`', correct: false }
      - { value: '`catch (ExceptionTypeA and ExceptionTypeB $e)`', correct: false }
    help: |
      PHP 7.1 introduced the ability to catch multiple exception types using the `|` (bitwise OR) operator in a single `catch` block. This functionality is fully supported in PHP 8.0 and later.
      https://www.php.net/manual/en/language.exceptions.php

  -
    question: >
      What is a Trait in PHP?
    answers:
      - { value: 'A mechanism for code reuse in single inheritance languages like PHP.', correct: true }
      - { value: 'A special type of abstract class that can only contain static methods.', correct: false }
      - { value: 'An interface that provides default implementations for its methods.', correct: false }
      - { value: 'A way to define global constants accessible throughout an application.', correct: false }
    help: |
      Traits are a mechanism for code reuse in single inheritance languages such as PHP. A Trait is intended to reduce limitations of single inheritance by enabling a developer to reuse sets of methods freely in several independent classes living in different class hierarchies.
      https://www.php.net/manual/en/language.oop5.traits.php

  -
    question: >
      Which PHP extension is commonly used for working with JSON data?
    answers:
      - { value: '`json`', correct: true }
      - { value: '`xml`', correct: false }
      - { value: '`pdo`', correct: false }
      - { value: '`gd`', correct: false }
    help: |
      The `json` extension provides functions for encoding and decoding JSON data.
      https://www.php.net/manual/en/book.json.php

  -
    question: >
      What does SPL stand for in PHP?
    answers:
      - { value: 'Standard PHP Library', correct: true }
      - { value: 'Server-Side Programming Language', correct: false }
      - { value: 'Structured Program Logic', correct: false }
      - { value: 'System Process Layer', correct: false }
    help: |
      SPL stands for Standard PHP Library. It provides a set of interfaces and classes for common data structures and algorithms.
      https://www.php.net/manual/en/book.spl.php

  -
    question: |
      Which of the following is an example of an SPL Iterator?
    answers:
      - { value: '`ArrayIterator`', correct: true }
      - { value: '`DateTime`', correct: false }
      - { value: '`SplFileObject`', correct: true }
      - { value: '`stdClass`', correct: false }
    help: |
      `ArrayIterator` and `SplFileObject` are examples of SPL iterators that allow iteration over arrays and files, respectively.
      https://www.php.net/manual/en/book.spl.php

  -
    question: >
      What is the purpose of the `final` keyword when applied to a class in PHP?
    answers:
      - { value: 'It prevents the class from being extended.', correct: true }
      - { value: 'It prevents methods within the class from being overridden.', correct: false }
      - { value: 'It makes all methods in the class static.', correct: false }
      - { value: 'It ensures the class is a singleton.', correct: false }
    help: |
      If you declare a class as `final`, it cannot be extended.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      Which of the following is a valid way to define a constant in a PHP class?
    answers:
      - { value: '`const MY_CONSTANT = "value";`', correct: true }
      - { value: '`define("MY_CONSTANT", "value");`', correct: false }
      - { value: '`public const MY_CONSTANT = "value";`', correct: true }
      - { value: '`static $MY_CONSTANT = "value";`', correct: false }
    help: |
      Class constants are defined using the `const` keyword. They can also have visibility declarations (public, protected, private) since PHP 7.1.
      https://www.php.net/manual/en/language.oop5.constants.php

  -
    question: |
      What is the output of the following PHP 8.0+ code?

      ```php
      function sum(int ...$numbers): int {
          return array_sum($numbers);
      }
      echo sum(1, 2, 3, 4);
      ```
    answers:
      - { value: '`10`', correct: true }
      - { value: '`Error`', correct: false }
      - { value: '`Array`', correct: false }
      - { value: '`Fatal error: Uncaught TypeError`', correct: false }
    help: |
      The `...` (splat) operator allows a function to accept a variable number of arguments as an array. `array_sum()` then calculates their sum.
      https://www.php.net/manual/en/functions.arguments.php#functions.variable-arg-list

  -
    question: >
      Which PHP 8.1 feature allows you to declare a class property that can only be assigned once?
    answers:
      - { value: '`readonly` properties', correct: true }
      - { value: '`final` properties', correct: false }
      - { value: '`immutable` properties', correct: false }
      - { value: '`const` properties', correct: false }
    help: |
      `readonly` properties were introduced in PHP 8.1. They can only be initialized once, either at declaration or within the constructor.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly

  -
    question: >
      What is the purpose of the `use` keyword when importing namespaces?
    answers:
      - { value: 'To create an alias for a fully qualified class name.', correct: true }
      - { value: 'To define a new namespace.', correct: false }
      - { value: 'To include a file from another directory.', correct: false }
      - { value: 'To declare a global variable.', correct: false }
    help: |
      The `use` keyword is used to import namespaces, classes, functions, or constants into the current file, making them easier to reference without their full qualified name.
      https://www.php.net/manual/en/language.namespaces.importing.php

  -
    question: >
      Which of the following is true about PHP's `Throwable` interface?
    answers:
      - { value: 'Both `Exception` and `Error` classes implement `Throwable`.', correct: true }
      - { value: 'Only `Exception` classes implement `Throwable`.', correct: false }
      - { value: 'It is an abstract class that must be extended.', correct: false }
      - { value: 'It is used for type hinting only and cannot be caught.', correct: false }
    help: |
      The `Throwable` interface was introduced in PHP 7 and is the base interface for any object that can be thrown via a `throw` statement, including both `Exception` and `Error` classes.
      https://www.php.net/manual/en/class.throwable.php

  -
    question: >
      When should you use an anonymous class in PHP?
    answers:
      - { value: 'When you need a simple, one-off object that doesn''t require a formal class definition.', correct: true }
      - { value: 'When you want to create a class that cannot be extended.', correct: false }
      - { value: 'When you need to define a class with static methods only.', correct: false }
      - { value: 'When you are implementing a design pattern like Singleton.', correct: false }
    help: |
      Anonymous classes are useful when creating simple, one-off objects. They are particularly useful for implementing interfaces or extending classes without defining a full class.
      https://www.php.net/manual/en/language.oop5.anonymous.php

  -
    question: |
      Consider the following PHP code:

      ```php
      trait Logger {
          public function log(string $message) {
              echo "Log: " . $message;
          }
      }

      class MyService {
          use Logger;
      }

      $service = new MyService();
      $service->log('Hello Trait!');
      ```

      What will be the output?
    answers:
      - { value: '`Log: Hello Trait!`', correct: true }
      - { value: 'An `Error` because traits cannot be used directly.', correct: false }
      - { value: 'Nothing, as traits are abstract.', correct: false }
      - { value: '`Fatal error: Cannot redeclare method MyService::log()`', correct: false }
    help: |
      Traits allow methods to be reused in different classes. When a class uses a trait, the methods defined in the trait become part of the class.
      https://www.php.net/manual/en/language.oop5.traits.php

  -
    question: >
      Which PHP extension provides functions for database access using a consistent interface?
    answers:
      - { value: '`PDO` (PHP Data Objects)', correct: true }
      - { value: '`mysqli`', correct: false }
      - { value: '`pgsql`', correct: false }
      - { value: '`odbc`', correct: false }
    help: |
      PDO (PHP Data Objects) is a database access layer providing a uniform method of access to multiple databases.
      https://www.php.net/manual/en/book.pdo.php

  -
    question: >
      What is the purpose of `SplQueue` in SPL?
    answers:
      - { value: 'It provides the main functionalities of a queue.', correct: true }
      - { value: 'It is a specialized array for fast lookups.', correct: false }
      - { value: 'It implements a stack data structure.', correct: false }
      - { value: 'It is used for iterating over file system directories.', correct: false }
    help: |
      `SplQueue` is a class that provides the main functionalities of a queue, which is a First-In, First-Out (FIFO) data structure.
      https://www.php.net/manual/en/class.splqueue.php

  -
    question: >
      Which PHP 8.0 feature allows you to define a type that can be one of several types?
    answers:
      - { value: 'Union Types', correct: true }
      - { value: 'Intersection Types', correct: false }
      - { value: 'Mixed Type', correct: false }
      - { value: 'Generic Types', correct: false }
    help: |
      Union Types were introduced in PHP 8.0, allowing a variable to accept values of different types, e.g., `int|float`.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.union

  -
    question: |
      What is the output of the following PHP 8.1 code?

      ```php
      enum Status: string {
          case Active = 'active';
          case Inactive = 'inactive';
      }

      function getStatusString(Status $status): string {
          return $status->value;
      }

      echo getStatusString(Status::Active);
      ```
    answers:
      - { value: '`active`', correct: true }
      - { value: '`Status::Active`', correct: false }
      - { value: '`Active`', correct: false }
      - { value: 'An `Error` because enums cannot be passed as arguments.', correct: false }
    help: |
      Enums (enumerations) were introduced in PHP 8.1. Backed enums (like `Status: string`) have an associated scalar value that can be accessed via the `value` property.
      https://www.php.net/manual/en/language.enumerations.php

  -
    question: >
      Which of the following describes a "pure" function in the context of functional programming principles often applied in PHP?
    answers:
      - { value: 'It always returns the same output for the same input and has no side effects.', correct: true }
      - { value: 'It only uses static methods and properties.', correct: false }
      - { value: 'It is defined within an anonymous class.', correct: false }
      - { value: 'It can modify global state but must return a value.', correct: false }
    help: |
      A pure function is a function that, given the same inputs, will always return the same output and does not cause any observable side effects (e.g., modifying global variables, I/O operations).
      https://en.wikipedia.org/wiki/Pure_function

  -
    question: >
      What is the purpose of the `__invoke()` magic method in PHP?
    answers:
      - { value: 'It allows an object to be called as a function.', correct: true }
      - { value: 'It is called when an object is cloned.', correct: false }
      - { value: 'It is used for serialization of an object.', correct: false }
      - { value: 'It is triggered when an inaccessible method is called.', correct: false }
    help: |
      The `__invoke()` method is called when a script tries to call an object as a function.
      https://www.php.net/manual/en/language.oop5.magic.php#object.invoke

  -
    question: >
      Which of these is a valid way to define a constant in global scope in PHP?
    answers:
      - { value: '`define(''APP_VERSION'', ''1.0'');`', correct: true }
      - { value: '`const APP_VERSION = ''1.0'';`', correct: true }
      - { value: '`$APP_VERSION = ''1.0'';`', correct: false }
      - { value: '`public const APP_VERSION = ''1.0'';`', correct: false }
    help: |
      Global constants can be defined using `define()` or, since PHP 5.3, using the `const` keyword outside of a class definition.
      https://www.php.net/manual/en/language.constants.php

  -
    question: >
      What is the main difference between `require` and `include` in PHP?
    answers:
      - { value: '`require` produces a fatal error if the file is not found, while `include` produces a warning.', correct: true }
      - { value: '`include` is faster than `require`.', correct: false }
      - { value: '`require` can only be used for PHP files, `include` for any file type.', correct: false }
      - { value: '`include` executes the file only once, `require` multiple times.', correct: false }
    help: |
      `require` is identical to `include` except upon failure it will also produce a fatal `E_COMPILE_ERROR` level error. In other words, it will halt the script whereas `include` only emits a warning (`E_WARNING`) which allows the script to continue.
      https://www.php.net/manual/en/function.require.php

  -
    question: >
      Which of the following correctly describes the `static` keyword when used with class methods?
    answers:
      - { value: 'A static method can be called without instantiating the class.', correct: true }
      - { value: 'A static method can access non-static properties using `$this`.', correct: false }
      - { value: 'Static methods are automatically inherited by child classes and cannot be overridden.', correct: false }
      - { value: 'Static methods are only accessible within the class where they are defined.', correct: false }
    help: |
      Static methods can be called directly without creating an instance of the class. They cannot access non-static properties using `$this`.
      https://www.php.net/manual/en/language.oop5.static.php

  -
    question: |
      What will be the output of the following PHP code?

      ```php
      $x = 5;
      $y = &$x;
      $y = 10;
      echo $x;
      ```
    answers:
      - { value: '`10`', correct: true }
      - { value: '`5`', correct: false }
      - { value: '`Fatal error`', correct: false }
      - { value: '`Undefined variable $x`', correct: false }
    help: |
      `$y = &$x;` creates a reference, meaning `$y` and `$x` point to the same memory location. Changing `$y` also changes `$x`.
      https://www.php.net/manual/en/language.references.whatdo.php

  -
    question: >
      What is the purpose of the `declare(strict_types=1);` directive in PHP?
    answers:
      - { value: 'It enforces strict type checking for scalar type declarations in the current file.', correct: true }
      - { value: 'It enables strict mode for all PHP files in the application.', correct: false }
      - { value: 'It prevents type juggling in arithmetic operations.', correct: false }
      - { value: 'It forces all function arguments to be passed by reference.', correct: false }
    help: |
      The `declare(strict_types=1);` directive, when placed at the top of a file, enforces strict type checking for scalar type declarations within that file.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.strict

  -
    question: >
      Which of the following is a valid way to define an anonymous function (closure) that can be assigned to a variable?
    answers:
      - { value: '`$func = function() { /* ... */ };`', correct: true }
      - { value: '`$func = new Closure() { /* ... */ };`', correct: false }
      - { value: '`$func = fn() => { /* ... */ };`', correct: true }
      - { value: '`$func = function_create() { /* ... */ };`', correct: false }
    help: |
      Anonymous functions are defined using the `function` keyword without a name. Since PHP 7.4, arrow functions (`fn`) provide a more concise syntax for single-expression closures.
      https://www.php.net/manual/en/functions.anonymous.php
      https://www.php.net/manual/en/functions.arrow.php

  -
    question: >
      What is the primary benefit of using Traits over multiple inheritance in PHP?
    answers:
      - { value: 'Traits help avoid the "diamond problem" by providing a mechanism for horizontal reuse.', correct: true }
      - { value: 'Traits are faster to execute than inherited methods.', correct: false }
      - { value: 'Traits allow a class to extend multiple parent classes simultaneously.', correct: false }
      - { value: 'Traits enforce a stricter contract than interfaces.', correct: false }
    help: |
      Traits address the limitations of single inheritance by allowing horizontal reuse of methods, effectively avoiding the complexities and ambiguities (like the diamond problem) that arise with multiple inheritance.
      https://www.php.net/manual/en/language.oop5.traits.php

  -
    question: >
      Which PHP 8.0 feature allows you to define a type that is the intersection of multiple types?
    answers:
      - { value: 'Intersection Types', correct: true }
      - { value: 'Union Types', correct: false }
      - { value: 'Combined Types', correct: false }
      - { value: 'Generic Types', correct: false }
    help: |
      Intersection Types were introduced in PHP 8.1 (not 8.0, corrected from thought process) and allow a variable to be of multiple types simultaneously, e.g., `A&B`.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.intersection

  -
    question: >
      What is the correct way to throw a custom exception in PHP?
    answers:
      - { value: '`throw new MyCustomException("Something went wrong!");`', correct: true }
      - { value: '`catch MyCustomException("Something went wrong!");`', correct: false }
      - { value: '`trigger_error("Something went wrong!", E_USER_ERROR);`', correct: false }
      - { value: '`exit("Something went wrong!");`', correct: false }
    help: |
      Exceptions are thrown using the `throw` keyword, followed by an instance of a class that implements the `Throwable` interface (typically `Exception` or a subclass thereof).
      https://www.php.net/manual/en/language.exceptions.php

  -
    question: >
      Which SPL class provides a simple way to store and retrieve data using a key-value pair, similar to an array, but as an object?
    answers:
      - { value: '`SplFixedArray`', correct: false }
      - { value: '`ArrayObject`', correct: true }
      - { value: '`SplStack`', correct: false }
      - { value: '`SplHeap`', correct: false }
    help: |
      `ArrayObject` provides the functionality of an array with the benefits of an object. It can be used to access arrays as objects and implements `ArrayAccess`, `Traversable`, and `Serializable`.
      https://www.php.net/manual/en/class.arrayobject.php

  -
    question: >
      What is the purpose of the `yield` keyword in PHP?
    answers:
      - { value: 'To create a generator function.', correct: true }
      - { value: 'To return a value from a function and immediately exit.', correct: false }
      - { value: 'To pause execution until a promise is resolved.', correct: false }
      - { value: 'To define a coroutine.', correct: false }
    help: |
      The `yield` keyword is used to create generator functions, which allow you to write iterable functions without needing to build an entire array in memory.
      https://www.php.net/manual/en/language.generators.overview.php

  -
    question: >
      Which PHP 8.2 feature allows you to declare constants in traits?
    answers:
      - { value: 'Constants in Traits', correct: true }
      - { value: 'Trait Constants', correct: false }
      - { value: 'Static Trait Properties', correct: false }
      - { value: 'Trait Enums', correct: false }
    help: |
      PHP 8.2 introduced the ability to declare constants in traits, allowing for better encapsulation and organization of related constants.
      https://www.php.net/manual/en/language.oop5.traits.php#language.oop5.traits.constants

  -
    question: >
      What is the primary role of the `composer.json` file in a PHP project?
    answers:
      - { value: 'To define project dependencies and metadata for Composer.', correct: true }
      - { value: 'To configure the web server for the application.', correct: false }
      - { value: 'To store database connection details.', correct: false }
      - { value: 'To define PHP environment variables.', correct: false }
    help: |
      `composer.json` is the main configuration file for Composer, defining project dependencies, autoloading rules, scripts, and other metadata.
      https://getcomposer.org/doc/01-basic-usage.md#composer-json-project-setup

  -
    question: >
      Which of the following is a valid way to access a static property within the same class in PHP?
    answers:
      - { value: '`self::$propertyName`', correct: true }
      - { value: '`$this->propertyName`', correct: false }
      - { value: '`MyClass::$propertyName`', correct: true }
      - { value: '`static::$propertyName`', correct: true }
    help: |
      Static properties are accessed using `self::`, `static::`, or the class name itself (`MyClass::`). `$this` is used for non-static properties.
      https://www.php.net/manual/en/language.oop5.static.php

  -
    question: >
      What is the purpose of the `__debugInfo()` magic method?
    answers:
      - { value: 'It customizes the output when an object is dumped (e.g., by `var_dump`).', correct: true }
      - { value: 'It is called when an object is serialized.', correct: false }
      - { value: 'It provides a way to log debugging messages.', correct: false }
      - { value: 'It defines how an object should be converted to a string for debugging.', correct: false }
    help: |
      The `__debugInfo()` magic method is called when `var_dump()` is used on an object to get information that should be dumped.
      https://www.php.net/manual/en/language.oop5.magic.php#object.debuginfo

  -
    question: >
      Which PHP 8.0 feature allows you to define attributes (metadata) on classes, methods, properties, and functions?
    answers:
      - { value: 'Attributes (formerly Annotations)', correct: true }
      - { value: 'Decorators', correct: false }
      - { value: 'Metadata Tags', correct: false }
      - { value: 'DocBlocks', correct: false }
    help: |
      Attributes, introduced in PHP 8.0, provide a way to add structured, machine-readable metadata to declarations in code. They are denoted by `#[...]`.
      https://www.php.net/manual/en/language.attributes.overview.php

  -
    question: |
      Consider the following PHP code:

      ```php
      try {
          throw new Exception("Test Exception");
      } catch (Error $e) {
          echo "Caught Error: " . $e->getMessage();
      } catch (Exception $e) {
          echo "Caught Exception: " . $e->getMessage();
      } finally {
          echo "Finally block executed.";
      }
      ```

      What will be the output?
    answers:
      - { value: '`Caught Exception: Test ExceptionFinally block executed.`', correct: true }
      - { value: '`Caught Error: Test ExceptionFinally block executed.`', correct: false }
      - { value: '`Finally block executed.`', correct: false }
      - { value: 'A fatal error.', correct: false }
    help: |
      The `Exception` catch block will be executed because `Exception` is the type of the thrown object. The `finally` block always executes, regardless of whether an exception was caught or not.
      https://www.php.net/manual/en/language.exceptions.php

  -
    question: >
      What is the purpose of the `parent::` keyword in PHP?
    answers:
      - { value: 'To call a method or access a property from the parent class.', correct: true }
      - { value: 'To define a new parent class.', correct: false }
      - { value: 'To access a static method from any class.', correct: false }
      - { value: 'To refer to the current object instance.', correct: false }
    help: |
      The `parent::` keyword is used to refer to the parent class, typically to call an overridden method or access a parent's static property/method.
      https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php

  -
    question: >
      Which of the following SPL interfaces allows an object to be iterated over using `foreach`?
    answers:
      - { value: '`Iterator`', correct: true }
      - { value: '`ArrayAccess`', correct: false }
      - { value: '`Serializable`', correct: false }
      - { value: '`Countable`', correct: false }
    help: |
      The `Iterator` interface (and `Traversable`, which `Iterator` extends) allows an object to be iterated over using the `foreach` statement.
      https://www.php.net/manual/en/class.iterator.php

  -
    question: >
      What is the difference between `interface` and `abstract class` in PHP?
    answers:
      - { value: 'An interface can only declare methods, while an abstract class can have concrete methods and properties.', correct: true }
      - { value: 'A class can implement multiple interfaces but can only extend one abstract class.', correct: true }
      - { value: 'Interfaces can define constants, abstract classes cannot.', correct: false }
      - { value: 'Abstract classes can be instantiated, interfaces cannot.', correct: false }
    help: |
      Interfaces define a contract without implementation details, allowing only method signatures (and constants). Abstract classes can have both abstract and concrete methods, as well as properties, and can be extended but not instantiated directly. A class can implement multiple interfaces but only extend one class.
      https://www.php.net/manual/en/language.oop5.interfaces.php
      https://www.php.net/manual/en/language.oop5.abstract.php

  -
    question: >
      Which PHP 8.0 function is used to check if a string starts with a specific substring?
    answers:
      - { value: '`str_starts_with()`', correct: true }
      - { value: '`str_contains()`', correct: false }
      - { value: '`strpos()`', correct: false }
      - { value: '`substr_compare()`', correct: false }
    help: |
      `str_starts_with()` was introduced in PHP 8.0 for a more convenient way to check if a string begins with a given substring.
      https://www.php.net/manual/en/function.str-starts-with.php

  -
    question: >
      What is the purpose of the `#[Deprecated]` attribute in PHP 8.1+?
    answers:
      - { value: 'To mark a class, method, or property as deprecated, generating a warning upon use.', correct: true }
      - { value: 'To prevent a method from being called in future PHP versions.', correct: false }
      - { value: 'To remove a feature from the current codebase.', correct: false }
      - { value: 'To provide a fallback mechanism for older PHP versions.', correct: false }
    help: |
      The `#[Deprecated]` attribute, introduced in PHP 8.1, allows developers to mark parts of their code as deprecated, which will trigger a deprecation notice when used.
      https://www.php.net/manual/en/language.attributes.php#language.attributes.deprecated

  -
    question: >
      Which of the following is a valid way to define a typed property in a PHP class (PHP 7.4+)?
    answers:
      - { value: '`private string $name;`', correct: true }
      - { value: '`private $name: string;`', correct: false }
      - { value: '`private var string $name;`', correct: false }
      - { value: '`private $name = (string);`', correct: false }
    help: |
      Typed properties were introduced in PHP 7.4, allowing type declarations for class properties.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.type-declaration

  -
    question: >
      What is the purpose of the `nullsafe operator` (`?->`) introduced in PHP 8.0?
    answers:
      - { value: 'To prevent errors when attempting to access properties or methods on a `null` object.', correct: true }
      - { value: 'To perform a null check and assign a default value if null.', correct: false }
      - { value: 'To chain multiple method calls together without intermediate variables.', correct: false }
      - { value: 'To check if a variable is null before performing an operation.', correct: false }
    help: |
      The nullsafe operator (`?->`) allows you to call methods or access properties on an object that might be `null` without throwing an error. If the object is `null`, the entire expression evaluates to `null`.
      https://www.php.net/manual/en/language.operators.nullsafe.php

  -
    question: >
      Which PHP extension is essential for working with XML documents?
    answers:
      - { value: '`libxml`', correct: true }
      - { value: '`json`', correct: false }
      - { value: '`curl`', correct: false }
      - { value: '`pcre`', correct: false }
    help: |
      The `libxml` extension provides the core functionality for XML parsing and manipulation in PHP, underpinning other XML extensions like SimpleXML and DOM.
      https://www.php.net/manual/en/book.libxml.php

  -
    question: >
      What is the purpose of `SplStack` in SPL?
    answers:
      - { value: 'It provides the main functionalities of a stack (LIFO).', correct: true }
      - { value: 'It is used for managing a collection of unique items.', correct: false }
      - { value: 'It implements a queue data structure.', correct: false }
      - { value: 'It is a fixed-size array implementation.', correct: false }
    help: |
      `SplStack` is a class that provides the main functionalities of a stack, which is a Last-In, First-Out (LIFO) data structure.
      https://www.php.net/manual/en/class.splstack.php

  -
    question: >
      Which of the following is a valid way to define a class that cannot be extended by other classes?
    answers:
      - { value: '`final class MyClass {}`', correct: true }
      - { value: '`sealed class MyClass {}`', correct: false }
      - { value: '`private class MyClass {}`', correct: false }
      - { value: '`static class MyClass {}`', correct: false }
    help: |
      The `final` keyword prevents a class from being extended.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the output of `get_class(new class {})`?
    answers:
      - { value: '`class@anonymous`', correct: true }
      - { value: '`stdClass`', correct: false }
      - { value: '`Closure`', correct: false }
      - { value: 'An `Error`', correct: false }
    help: |
      Anonymous classes are given an internal name by PHP, typically `class@anonymous` followed by a hash, but `get_class()` will return `class@anonymous` for the basic case.
      https://www.php.net/manual/en/language.oop5.anonymous.php

  -
    question: >
      Which PHP 8.0 feature allows you to define a function that returns `never`?
    answers:
      - { value: '`never` return type', correct: true }
      - { value: '`void` return type', correct: false }
      - { value: '`null` return type', correct: false }
      - { value: '`exit` return type', correct: false }
    help: |
      The `never` return type was introduced in PHP 8.1 (not 8.0, corrected from thought process) and signifies that a function or method will never return, either by throwing an exception or by terminating script execution.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.never

  -
    question: >
      What is the primary use case for `SplObjectStorage` in SPL?
    answers:
      - { value: 'To map objects to data without modifying the objects themselves.', correct: true }
      - { value: 'To store a collection of scalar values efficiently.', correct: false }
      - { value: 'To manage a fixed-size array of objects.', correct: false }
      - { value: 'To serialize objects for storage.', correct: false }
    help: |
      `SplObjectStorage` is a special purpose class that maps objects to data or, if no data is provided, acts as a set of objects. It's useful for scenarios where you need to associate data with objects without adding properties to the objects themselves.
      https://www.php.net/manual/en/class.splobjectstorage.php

  -
    question: >
      Which PHP 8.1 feature allows you to define a class property that can only be assigned once, typically in the constructor?
    answers:
      - { value: '`readonly` properties', correct: true }
      - { value: '`immutable` properties', correct: false }
      - { value: '`final` properties', correct: false }
      - { value: '`const` properties', correct: false }
    help: |
      `readonly` properties, introduced in PHP 8.1, can only be initialized once. After initialization, their value cannot be changed.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly

  -
    question: >
      What is the purpose of the `#[AllowDynamicProperties]` attribute in PHP 8.2?
    answers:
      - { value: 'To explicitly allow dynamic properties on a class, overriding the default deprecation warning.', correct: true }
      - { value: 'To prevent dynamic properties from being added to a class.', correct: false }
      - { value: 'To enable dynamic method calling on an object.', correct: false }
      - { value: 'To allow properties to be defined without a type declaration.', correct: false }
    help: |
      In PHP 8.2, dynamic properties were deprecated. The `#[AllowDynamicProperties]` attribute can be used on a class to explicitly opt-in to allowing dynamic properties, suppressing the deprecation warning.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.dynamic

  -
    question: >
      Which of the following is a correct way to define a private constructor in PHP?
    answers:
      - { value: '`private function __construct() {}`', correct: true }
      - { value: '`protected function __construct() {}`', correct: false }
      - { value: '`final function __construct() {}`', correct: false }
      - { value: '`static function __construct() {}`', correct: false }
    help: |
      A constructor can be declared with `private` visibility to prevent direct instantiation of the class from outside, often used in the Singleton pattern.
      https://www.php.net/manual/en/language.oop5.decon.php

  -
    question: >
      What is the purpose of the `__serialize()` and `__unserialize()` magic methods (PHP 7.4+)?
    answers:
      - { value: 'To customize object serialization and unserialization, replacing `serialize()` and `unserialize()` methods.', correct: true }
      - { value: 'To define how an object is converted to a string and back.', correct: false }
      - { value: 'To handle dynamic property access during serialization.', correct: false }
      - { value: 'To encrypt and decrypt object data.', correct: false }
    help: |
      Introduced in PHP 7.4, `__serialize()` and `__unserialize()` provide a more robust and flexible mechanism for object serialization compared to the older `Serializable` interface and `__sleep()`/`__wakeup()` methods.
      https://www.php.net/manual/en/language.oop5.magic.php#object.serialize

  -
    question: >
      Which PHP extension is commonly used for making HTTP requests?
    answers:
      - { value: '`curl`', correct: true }
      - { value: '`sockets`', correct: false }
      - { value: '`ftp`', correct: false }
      - { value: '`zip`', correct: false }
    help: |
      The `curl` extension provides functions for communicating with many different types of servers with many different protocols, including HTTP, HTTPS, FTP, FTPS, SCP, SFTP, etc.
      https://www.php.net/manual/en/book.curl.php

  -
    question: >
      What is the purpose of the `match` expression in PHP 8.0 compared to a `switch` statement?
    answers:
      - { value: '`match` is an expression that returns a value, `switch` is a statement.', correct: true }
      - { value: '`match` uses strict comparison (`===`), `switch` uses loose comparison (`==`).', correct: true }
      - { value: '`match` requires a `default` case, `switch` does not.', correct: false }
      - { value: '`match` allows fall-through, `switch` does not.', correct: false }
    help: |
      The `match` expression is a new control flow structure in PHP 8.0. Key differences from `switch` include: it's an expression (returns a value), it uses strict comparison, and it does not fall through.
      https://www.php.net/manual/en/control-structures.match.php

  -
    question: >
      Which of the following describes a "covariant" return type in PHP?
    answers:
      - { value: 'A return type in a child method that is a subtype of the parent method''s return type.', correct: true }
      - { value: 'A return type in a child method that is a supertype of the parent method''s return type.', correct: false }
      - { value: 'A return type that can be any type.', correct: false }
      - { value: 'A return type that must be exactly the same as the parent method''s return type.', correct: false }
    help: |
      Covariant return types (introduced in PHP 7.4) allow a child method to return a more specific type than its parent method.
      https://www.php.net/manual/en/language.oop5.variance.php

  -
    question: >
      What is the purpose of the `#[SensitiveParameter]` attribute in PHP 8.2?
    answers:
      - { value: 'To mark a function parameter as sensitive, preventing its value from appearing in stack traces.', correct: true }
      - { value: 'To encrypt a parameter''s value automatically.', correct: false }
      - { value: 'To enforce a specific type for a parameter.', correct: false }
      - { value: 'To make a parameter optional.', correct: false }
    help: |
      The `#[SensitiveParameter]` attribute, introduced in PHP 8.2, allows developers to mark parameters that contain sensitive information, ensuring their values are redacted from stack traces.
      https://www.php.net/manual/en/language.attributes.php#language.attributes.sensitiveparameter

  -
    question: >
      Which of the following is true about `Error` exceptions in PHP (PHP 7+)?
    answers:
      - { value: 'They represent internal PHP errors that are typically unrecoverable by userland code.', correct: true }
      - { value: 'They are subclasses of `Exception`.', correct: false }
      - { value: 'They can only be caught by a global error handler.', correct: false }
      - { value: 'They are primarily used for validation failures in user input.', correct: false }
    help: |
      In PHP 7, many fatal errors were converted to `Error` exceptions. These represent internal PHP errors that indicate problems that cannot be recovered from by userland code, unlike `Exception`s which are typically for application-level issues. Both implement `Throwable`.
      https://www.php.net/manual/en/class.error.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.2?
    answers:
      - { value: 'To explicitly indicate that a method is intended to override a parent method, causing a compile-time error if it does not.', correct: true }
      - { value: 'To prevent a method from being overridden by child classes.', correct: false }
      - { value: 'To force a child class to implement a specific method.', correct: false }
      - { value: 'To mark a method as abstract.', correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.2, provides a compile-time check to ensure that a method actually overrides a parent method. If it doesn't, a fatal error is triggered.
      https://www.php.net/manual/en/language.attributes.php#language.attributes.override

  -
    question: >
      Which PHP 8.0 feature simplifies the creation of anonymous functions with a single expression?
    answers:
      - { value: 'Arrow Functions (`fn`)', correct: true }
      - { value: 'Short Closures', correct: false }
      - { value: 'Lambda Functions', correct: false }
      - { value: 'Inline Functions', correct: false }
    help: |
      Arrow functions (`fn`) were introduced in PHP 7.4 (not 8.0, corrected from thought process) as a more concise syntax for common single-expression closures.
      https://www.php.net/manual/en/functions.arrow.php

  -
    question: >
      What is the purpose of the `__clone()` magic method?
    answers:
      - { value: 'It is called when an object is cloned, allowing for deep copying or custom clone logic.', correct: true }
      - { value: 'It is used to create a new instance of a class.', correct: false }
      - { value: 'It defines how an object behaves when it is serialized.', correct: false }
      - { value: 'It is triggered when an object is destroyed.', correct: false }
    help: |
      When an object is cloned using the `clone` keyword, PHP will perform a shallow copy of all properties. If the `__clone()` method is defined, it will be called on the newly created object, allowing for custom deep copying or other post-clone operations.
      https://www.php.net/manual/en/language.oop5.cloning.php

  -
    question: >
      Which of the following is an example of a PHP built-in web server command?
    answers:
      - { value: '`php -S localhost:8000`', correct: true }
      - { value: '`php serve`', correct: false }
      - { value: '`php start-server`', correct: false }
      - { value: '`php web:run`', correct: false }
    help: |
      PHP has a built-in web server that can be started using the `-S` option, primarily for development purposes.
      https://www.php.net/manual/en/features.commandline.webserver.php

  -
    question: >
      What is the primary purpose of the `__sleep()` and `__wakeup()` magic methods?
    answers:
      - { value: 'To prepare an object for serialization and re-initialize it upon unserialization.', correct: true }
      - { value: 'To define how an object behaves when it is put to sleep and woken up by the operating system.', correct: false }
      - { value: 'To manage database connections when an object is stored in a session.', correct: false }
      - { value: 'To control the lifecycle of a background process.', correct: false }
    help: |
      `__sleep()` is called prior to serialization, allowing the object to clean up or commit pending data. `__wakeup()` is called after unserialization, allowing the object to re-establish connections or re-initialize resources.
      https://www.php.net/manual/en/language.oop5.magic.php#object.sleep

  -
    question: >
      Which PHP extension is commonly used for image manipulation?
    answers:
      - { value: '`GD`', correct: true }
      - { value: '`Imagick`', correct: true }
      - { value: '`Exif`', correct: false }
      - { value: '`FFmpeg`', correct: false }
    help: |
      The GD (Graphics Draw) and Imagick extensions are widely used in PHP for creating and manipulating image files.
      https://www.php.net/manual/en/book.gd.php
      https://www.php.net/manual/en/book.imagick.php

  -
    question: >
      What is the purpose of the `WeakMap` class introduced in PHP 8.0?
    answers:
      - { value: 'To store objects as keys without preventing them from being garbage collected.', correct: true }
      - { value: 'To create a map where values are automatically garbage collected when not referenced elsewhere.', correct: false }
      - { value: 'To provide a thread-safe map for concurrent programming.', correct: false }
      - { value: 'To store references to objects that can be easily retrieved by their hash.', correct: false }
    help: |
      `WeakMap` allows objects to be used as keys without preventing the objects from being garbage collected if there are no other references to them. This is useful for caching or memoization where you don't want the cache to keep objects alive.
      https://www.php.net/manual/en/class.weakmap.php

  -
    question: >
      Which of the following is a valid way to catch any type of `Throwable` in PHP 7+?
    answers:
      - { value: '`catch (Throwable $e)`', correct: true }
      - { value: '`catch (Error | Exception $e)`', correct: true }
      - { value: '`catch (object $e)`', correct: false }
      - { value: '`catch (mixed $e)`', correct: false }
    help: |
      The `Throwable` interface is the base interface for all objects that can be thrown, including both `Error` and `Exception`. Therefore, catching `Throwable` or explicitly catching both `Error` and `Exception` will handle all throwables.
      https://www.php.net/manual/en/class.throwable.php

  -
    question: >
      What is the primary benefit of using namespaces in PHP?
    answers:
      - { value: 'To avoid name collisions between classes, functions, and constants.', correct: true }
      - { value: 'To improve the performance of PHP applications.', correct: false }
      - { value: 'To enable multiple inheritance in PHP.', correct: false }
      - { value: 'To automatically load classes without `require` or `include`.', correct: false }
    help: |
      Namespaces provide a way to group related code, primarily to solve the problem of name collisions when combining code from different sources.
      https://www.php.net/manual/en/language.namespaces.rationale.php