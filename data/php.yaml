category: PHP

questions:
  -
    question: >
      Which of the following is a new feature introduced in PHP 8.0?
    answers:
      - { value: "Named Arguments", correct: true }
      - { value: "Arrow Functions", correct: false }
      - { value: "Null Coalescing Operator", correct: false }
      - { value: "Type Hinting for Scalar Types", correct: false }
    help: |
      Named arguments allow passing arguments to a function based on the parameter name, rather than the position. This was introduced in PHP 8.0.
      https://www.php.net/manual/en/language.functions.named-arguments.php

  -
    question: |
      Consider the following PHP code:

      ```php
      <?php
      namespace App\Controller;

      use App\Service\MyService;
      use App\Repository\UserRepository as UserRepo;

      class HomeController
      {
          public function __construct(MyService $service, UserRepo $repository)
          {
              // ...
          }
      }
      ?>
      ```
      Which of the following statements about the `use` statements are true?
    answers:
      - { value: "The `MyService` class is imported directly from the `App\\Service` namespace.", correct: true }
      - { value: "The `UserRepository` class is aliased as `UserRepo` within the `App\\Controller` namespace.", correct: true }
      - { value: "Without the `use` statements, `MyService` and `UserRepository` would be resolved relative to the global namespace.", correct: false }
      - { value: "The `use` statements affect the visibility of classes.", correct: false }
    help: |
      `use` statements are used to import namespaces, classes, functions, or constants into the current file, making them accessible without their fully qualified name. Aliasing allows renaming imported elements to avoid name collisions.
      https://www.php.net/manual/en/language.namespaces.importing.php

  -
    question: >
      In Object-Oriented Programming in PHP, what is the purpose of an `abstract` class?
    answers:
      - { value: "To prevent instantiation of the class itself and force child classes to implement abstract methods.", correct: true }
      - { value: "To define a contract that a class must follow, similar to an interface, but allowing method implementations.", correct: true }
      - { value: "To declare methods that can only be accessed by child classes.", correct: false }
      - { value: "To provide a blueprint for creating objects without any concrete implementation.", correct: false }
    help: |
      Abstract classes cannot be instantiated directly. They can contain both abstract methods (which must be implemented by non-abstract child classes) and concrete methods. They serve as a base for other classes to inherit from.
      https://www.php.net/manual/en/language.oop5.abstract.php

  -
    question: |
      Which of the following correctly defines an interface in PHP?
    answers:
      - { value: "```php interface Logger { public function log(string $message); } ```", correct: true }
      - { value: "```php abstract interface Logger { public function log(string $message); } ```", correct: false }
      - { value: "```php class Logger implements Interface { public function log(string $message); } ```", correct: false }
      - { value: "```php interface Logger { private function log(string $message); } ```", correct: false }
    help: |
      Interfaces define a contract for classes to implement. All methods declared in an interface must be public and cannot contain any implementation.
      https://www.php.net/manual/en/language.oop5.interfaces.php

  -
    question: |
      Given the following code, what will be the output?

      ```php
      <?php
      $message = 'Hello';

      $greet = function () use ($message) {
          echo $message;
      };

      $message = 'World';

      $greet();
      ?>
      ```
    answers:
      - { value: "Hello", correct: true }
      - { value: "World", correct: false }
      - { value: "Undefined variable message", correct: false }
      - { value: "An error will occur because `$message` is modified after the closure is defined.", correct: false }
    help: |
      When a variable is imported into a closure using `use`, it is imported by value by default. Changes to the original variable outside the closure do not affect the value captured by the closure. To capture by reference, use `&` (e.g., `use (&$message)`).
      https://www.php.net/manual/en/language.closures.use.php

  -
    question: >
      Which magic method is automatically called when an object is treated as a string (e.g., with `echo` or `print`)?
    answers:
      - { value: "`__toString()`", correct: true }
      - { value: "`__invoke()`", correct: false }
      - { value: "`__call()`", correct: false }
      - { value: "`__convert()`", correct: false }
    help: |
      The `__toString()` method allows a class to decide how it will react when it is treated as a string. For example, what `echo $obj;` will print.
      https://www.php.net/manual/en/language.oop5.magic.php#object.tostring

  -
    question: |
      Which of the following is the correct way to define a trait and use it in a class?
    answers:
      - { value: "```php trait MyTrait { public function doSomething() { echo 'Done!'; } } class MyClass { use MyTrait; } ```", correct: true }
      - { value: "```php interface MyTrait { public function doSomething(); } class MyClass implements MyTrait { } ```", correct: false }
      - { value: "```php abstract class MyTrait { public function doSomething() { echo 'Done!'; } } class MyClass extends MyTrait { } ```", correct: false }
      - { value: "```php trait MyTrait { public static function doSomething() { echo 'Done!'; } } class MyClass { include MyTrait; } ```", correct: false }
    help: |
      Traits are a mechanism for code reuse in single inheritance languages like PHP. A trait is declared using the `trait` keyword, and used in a class with the `use` keyword.
      https://www.php.net/manual/en/language.oop5.traits.php

  -
    question: >
      What is the purpose of the `finally` block in a `try-catch-finally` construct in PHP?
    answers:
      - { value: "It is always executed, regardless of whether an exception was thrown or caught.", correct: true }
      - { value: "It is executed only if an exception was thrown but not caught.", correct: false }
      - { value: "It is executed only if no exception was thrown.", correct: false }
      - { value: "It is optional and used for resource cleanup only if an exception occurs.", correct: false }
    help: |
      The `finally` block will always be executed after the `try` and `catch` blocks, regardless of whether an exception was thrown or not. It's commonly used for cleanup operations.
      https://www.php.net/manual/en/language.exceptions.php#language.exceptions.finally

  -
    question: |
      Which of the following correctly describes the `readonly` property feature introduced in PHP 8.1?
    answers:
      - { value: "A `readonly` property can only be initialized once, either at declaration or in the constructor.", correct: true }
      - { value: "A `readonly` property can be modified only within the class methods, not from outside.", correct: false }
      - { value: "A `readonly` property must be initialized with a default value at declaration.", correct: false }
      - { value: "A `readonly` property can be re-assigned multiple times as long as it's within the same method.", correct: false }
    help: |
      Readonly properties, introduced in PHP 8.1, can only be initialized once. After initialization, they cannot be modified. This ensures immutability for object properties.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly

  -
    question: >
      What is the primary benefit of using SPL (Standard PHP Library) data structures like `SplFixedArray` over native PHP arrays for certain use cases?
    answers:
      - { value: "Improved memory efficiency and performance for fixed-size collections.", correct: true }
      - { value: "Automatic sorting and indexing of elements.", correct: false }
      - { value: "Built-in serialization and deserialization capabilities.", correct: false }
      - { value: "Support for multi-dimensional arrays with strict type checking.", correct: false }
    help: |
      `SplFixedArray` provides a fixed-size array that can be more memory efficient and faster than a regular PHP array when the size is known beforehand and doesn't change.
      https://www.php.net/manual/en/class.splfixedarray.php

  -
    question: |
      Consider the following PHP 8.0 `match` expression:

      ```php
      <?php
      $status = 2;
      $result = match ($status) {
          1 => 'Pending',
          2, 3 => 'Processing',
          default => 'Unknown',
      };
      echo $result;
      ?>
      ```
      What will be the output?
    answers:
      - { value: "Processing", correct: true }
      - { value: "Pending", correct: false }
      - { value: "Unknown", correct: false }
      - { value: "A fatal error due to incorrect syntax.", correct: false }
    help: |
      The `match` expression, introduced in PHP 8.0, is similar to a `switch` statement but provides more concise syntax, strict comparisons, and can return a value. Multiple comma-separated values can be used for a single match arm.
      https://www.php.net/manual/en/control-structures.match.php

  -
    question: >
      Which of the following is true regarding PHP's `Throwable` interface?
    answers:
      - { value: "Both `Exception` and `Error` classes implement the `Throwable` interface.", correct: true }
      - { value: "Only `Exception` classes implement the `Throwable` interface.", correct: false }
      - { value: "`Throwable` is a class that can be extended by custom exceptions.", correct: false }
      - { value: "It is used to catch only fatal errors.", correct: false }
    help: |
      The `Throwable` interface was introduced in PHP 7 to unify error and exception handling. Both `Exception` and `Error` classes implement this interface, allowing a single `catch (Throwable $e)` block to handle both.
      https://www.php.net/manual/en/class.throwable.php

  -
    question: |
      Which of the following best describes the purpose of the `#[AllowDynamicProperties]` attribute in PHP 8.2?
    answers:
      - { value: "It allows a class to have dynamic (undeclared) properties, suppressing the deprecation warning.", correct: true }
      - { value: "It enforces strict type checking for all properties in a class.", correct: false }
      - { value: "It prevents the creation of new properties after object instantiation.", correct: false }
      - { value: "It makes all properties of a class public by default.", correct: false }
    help: |
      In PHP 8.2, dynamic properties were deprecated. The `#[AllowDynamicProperties]` attribute can be added to a class to explicitly allow dynamic properties for that class, suppressing the deprecation warning.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.dynamic

  -
    question: >
      When should you use an anonymous function (closure) instead of a regular named function in PHP?
    answers:
      - { value: "When you need a function as an argument to another function (callback).", correct: true }
      - { value: "When you need to define a function that captures variables from its surrounding scope.", correct: true }
      - { value: "When you want to define a function that can be called recursively.", correct: false }
      - { value: "When you need to define a method within a class.", correct: false }
    help: |
      Anonymous functions (closures) are useful for short, one-off functions, especially as callbacks or when they need to "close over" variables from their parent scope using the `use` keyword.
      https://www.php.net/manual/en/language.closures.php

  -
    question: |
      What is the correct way to define a constant within a class in PHP?
    answers:
      - { value: "```php class MyClass { const MY_CONSTANT = 'value'; } ```", correct: true }
      - { value: "```php class MyClass { public $MY_CONSTANT = 'value'; } ```", correct: false }
      - { value: "```php class MyClass { define('MY_CONSTANT', 'value'); } ```", correct: false }
      - { value: "```php class MyClass { static MY_CONSTANT = 'value'; } ```", correct: false }
    help: |
      Class constants are defined using the `const` keyword. They are immutable and are accessed using the class name and the scope resolution operator (`::`), e.g., `MyClass::MY_CONSTANT`.
      https://www.php.net/manual/en/language.oop5.constants.php

  -
    question: >
      Which of the following is a valid use case for PHP's `SplQueue` class?
    answers:
      - { value: "Implementing a First-In, First-Out (FIFO) data structure.", correct: true }
      - { value: "Storing key-value pairs with efficient lookup by key.", correct: false }
      - { value: "Managing a collection of unique elements without duplicates.", correct: false }
      - { value: "Creating a fixed-size array for numerical data.", correct: false }
    help: |
      `SplQueue` provides the functionality of a queue, where elements are added to one end (`enqueue`) and removed from the other (`dequeue`), following the FIFO principle.
      https://www.php.net/manual/en/class.splqueue.php

  -
    question: |
      Which PHP 8.1 feature allows you to define a limited set of allowed values for a type, similar to constants but with more structure?
    answers:
      - { value: "Enums", correct: true }
      - { value: "Typed Properties", correct: false }
      - { value: "Readonly Properties", correct: false }
      - { value: "Match Expression", correct: false }
    help: |
      Enums (enumerations), introduced in PHP 8.1, allow defining a custom type that has a finite set of possible values. They provide type safety and better readability than using plain constants.
      https://www.php.net/manual/en/language.enumerations.php

  -
    question: >
      What is the purpose of the `__invoke()` magic method in PHP?
    answers:
      - { value: "It allows an object to be called as if it were a function.", correct: true }
      - { value: "It is called when an object is cloned.", correct: false }
      - { value: "It is called when an object is serialized.", correct: false }
      - { value: "It is called when an undefined method is accessed.", correct: false }
    help: |
      The `__invoke()` method is called when a script tries to call an object as a function.
      https://www.php.net/manual/en/language.oop5.magic.php#object.invoke

  -
    question: |
      Consider the following PHP code:

      ```php
      <?php
      class MyClass {
          public function __construct() {
              echo "Constructor called\n";
          }

          public function __destruct() {
              echo "Destructor called\n";
          }
      }

      $obj = new MyClass();
      unset($obj);
      echo "Script end\n";
      ?>
      ```
      What will be the output?
    answers:
      - { value: "Constructor called\nDestructor called\nScript end\n", correct: true }
      - { value: "Constructor called\nScript end\nDestructor called\n", correct: false }
      - { value: "Constructor called\nScript end\n", correct: false }
      - { value: "Destructor called\nConstructor called\nScript end\n", correct: false }
    help: |
      The `__construct()` method is called upon object creation. The `__destruct()` method is called when all references to an object are removed or when the object is explicitly destroyed (e.g., via `unset()`) or at the end of the script execution.
      https://www.php.net/manual/en/language.oop5.decon.php

  -
    question: >
      Which of the following correctly describes the concept of "Polymorphism" in PHP OOP?
    answers:
      - { value: "The ability of objects of different classes to respond to the same method call in their own specific way.", correct: true }
      - { value: "The ability to hide the internal implementation details of an object.", correct: false }
      - { value: "The process of creating new classes from existing classes.", correct: false }
      - { value: "The bundling of data and methods that operate on the data within a single unit.", correct: false }
    help: |
      Polymorphism (meaning "many forms") allows objects of different classes that implement the same interface or extend the same base class to be treated as objects of the common type, while still executing their specific implementations.
      https://www.php.net/manual/en/language.oop5.polymorphism.php

  -
    question: >
      What is the primary purpose of the `#[Override]` attribute introduced in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a valid way to define and use an arrow function (short closures) in PHP 7.4+?
    answers:
      - { value: "```php $add = fn($a, $b) => $a + $b; echo $add(1, 2); ```", correct: true }
      - { value: "```php $add = function ($a, $b) use ($a, $b) { return $a + $b; }; echo $add(1, 2); ```", correct: false }
      - { value: "```php $add = ($a, $b) => { return $a + $b; }; echo $add(1, 2); ```", correct: false }
      - { value: "```php $add = fn($a, $b) { return $a + $b; }; echo $add(1, 2); ```", correct: false }
    help: |
      Arrow functions provide a more concise syntax for closures that only contain a single expression. They implicitly capture variables from the parent scope by value. They were introduced in PHP 7.4.
      https://www.php.net/manual/en/functions.arrow.php

  -
    question: >
      What is the primary difference between `public`, `protected`, and `private` visibility keywords for class members in PHP?
    answers:
      - { value: "`public` members are accessible everywhere; `protected` members are accessible within the class and by its descendants; `private` members are accessible only within the class itself.", correct: true }
      - { value: "`public` members are accessible within the class only; `protected` members are accessible by its descendants; `private` members are accessible everywhere.", correct: false }
      - { value: "`public` members are accessible by its descendants; `protected` members are accessible everywhere; `private` members are accessible within the class only.", correct: false }
      - { value: "All members are accessible everywhere by default unless explicitly declared `private`.", correct: false }
    help: |
      Visibility keywords control the access to properties and methods of a class. `public` means accessible from anywhere, `protected` means accessible within the class and by inherited classes, and `private` means accessible only within the class itself.
      https://www.php.net/manual/en/language.oop5.visibility.php

  -
    question: |
      Which of the following is a key characteristic of a `static` method in PHP?
    answers:
      - { value: "It can be called directly on the class without creating an object instance.", correct: true }
      - { value: "It can access non-static properties of the class using `$this`.", correct: false }
      - { value: "It must be declared as `abstract`.", correct: false }
      - { value: "It is automatically inherited by all child classes and cannot be overridden.", correct: false }
    help: |
      Static methods can be called without instantiating the class. They cannot access non-static properties using `$this` because they are not associated with a specific object instance.
      https://www.php.net/manual/en/language.oop5.static.php

  -
    question: >
      What is the purpose of the `SplAutoloadRegister` function in PHP?
    answers:
      - { value: "To register multiple functions as implementations of `__autoload()` for automatic class loading.", correct: true }
      - { value: "To automatically include all files in a specified directory.", correct: false }
      - { value: "To register a global error handler for uncaught exceptions.", correct: false }
      - { value: "To define a new PHP extension at runtime.", correct: false }
    help: |
      `spl_autoload_register()` registers the given function as an `__autoload()` implementation. This allows for more flexible and robust autoloading mechanisms than relying solely on the deprecated `__autoload()` magic function.
      https://www.php.net/manual/en/function.spl-autoload-register.php

  -
    question: |
      Which of the following types can be used in a Union Type declaration (PHP 8.0+)?
    answers:
      - { value: "```php function process(int|float $number) { /* ... */ } ```", correct: true }
      - { value: "```php function process(string|null $text) { /* ... */ } ```", correct: true }
      - { value: "```php function process(array|object $data) { /* ... */ } ```", correct: true }
      - { value: "```php function process(void|int $value) { /* ... */ } ```", correct: false }
    help: |
      Union Types, introduced in PHP 8.0, allow a variable to accept values of multiple different types. `void` cannot be part of a union type as it means "no return value".
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.union

  -
    question: >
      What is the correct way to catch both `Exception` and `Error` types in a single `try-catch` block in PHP 7+?
    answers:
      - { value: "```php try { /* ... */ } catch (Throwable $e) { /* ... */ } ```", correct: true }
      - { value: "```php try { /* ... */ } catch (Exception $e) { /* ... */ } catch (Error $e) { /* ... */ } ```", correct: true }
      - { value: "```php try { /* ... */ } catch (Exception|Error $e) { /* ... */ } ```", correct: true }
      - { value: "```php try { /* ... */ } catch (mixed $e) { /* ... */ } ```", correct: false }
    help: |
      Since PHP 7, both `Exception` and `Error` implement the `Throwable` interface, allowing a single `catch (Throwable $e)` block. Union types for catch blocks were introduced in PHP 8.0. You can also catch them separately.
      https://www.php.net/manual/en/language.exceptions.php#language.exceptions.catch

  -
    question: |
      Consider the following trait:

      ```php
      <?php
      trait LoggerTrait {
          public function log(string $message) {
              echo "Log: " . $message . "\n";
          }
      }

      class ServiceA {
          use LoggerTrait;
      }

      class ServiceB {
          use LoggerTrait;
          public function log(string $message, string $level = 'info') {
              echo "ServiceB Log [$level]: " . $message . "\n";
          }
      }

      $serviceA = new ServiceA();
      $serviceA->log("Hello from A");

      $serviceB = new ServiceB();
      $serviceB->log("Hello from B");
      ?>
      ```
      What will be the output?
    answers:
      - { value: "Log: Hello from A\nServiceB Log [info]: Hello from B\n", correct: true }
      - { value: "Log: Hello from A\nLog: Hello from B\n", correct: false }
      - { value: "ServiceB Log [info]: Hello from B\nLog: Hello from A\n", correct: false }
      - { value: "A fatal error due to method conflict in ServiceB.", correct: false }
    help: |
      When a class uses a trait, and the class itself defines a method with the same name as a method in the trait, the class's method takes precedence.
      https://www.php.net/manual/en/language.oop5.traits.php#language.oop5.traits.precedence

  -
    question: >
      Which of the following is a valid way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `__debugInfo()` magic method?
    answers:
      - { value: "It is called when `var_dump()` is used on an object, allowing custom debug output.", correct: true }
      - { value: "It is called when an object is converted to a string.", correct: false }
      - { value: "It is used to define custom serialization logic for an object.", correct: false }
      - { value: "It provides information about the class's methods and properties at runtime.", correct: false }
    help: |
      The `__debugInfo()` magic method is called when `var_dump()` is used on an object. It allows you to customize the information that is displayed, which can be useful for hiding sensitive data or simplifying complex object structures during debugging.
      https://www.php.net/manual/en/language.oop5.magic.php#object.debuginfo

  -
    question: |
      Which of the following is true about PHP's `Iterator` interface (part of SPL)?
    answers:
      - { value: "It allows an object to be iterated over using `foreach`.", correct: true }
      - { value: "It requires the implementation of `current()`, `key()`, `next()`, `rewind()`, and `valid()` methods.", correct: true }
      - { value: "It is automatically implemented by all arrays.", correct: false }
      - { value: "It provides methods for adding and removing elements from a collection.", correct: false }
    help: |
      The `Iterator` interface is part of the SPL and allows an object to be iterated over, such as with the `foreach` loop. Classes implementing this interface must provide specific methods to control the iteration process.
      https://www.php.net/manual/en/class.iterator.php

  -
    question: >
      Which PHP 8.2 feature allows for the disjunction of Nullable Types and Union Types, enabling more complex type declarations?
    answers:
      - { value: "Disjunctive Normal Form (DNF) Types", correct: true }
      - { value: "Intersection Types", correct: false }
      - { value: "Strict Types", correct: false }
      - { value: "Generic Types", correct: false }
    help: |
      Disjunctive Normal Form (DNF) Types, introduced in PHP 8.2, allow combining intersection types and union types in a more expressive way, enabling declarations like `(A&B)|C`.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.composite.dnf

  -
    question: |
      Given the following code, what will be the output?

      ```php
      <?php
      class ParentClass {
          public function greet() {
              echo "Hello from Parent!\n";
          }
      }

      class ChildClass extends ParentClass {
          public function greet() {
              echo "Hello from Child!\n";
          }

          public function callParentGreet() {
              parent::greet();
          }
      }

      $obj = new ChildClass();
      $obj->callParentGreet();
      ?>
      ```
    answers:
      - { value: "Hello from Parent!\n", correct: true }
      - { value: "Hello from Child!\n", correct: false }
      - { value: "A fatal error due to infinite recursion.", correct: false }
      - { value: "Nothing, as the method is not public.", correct: false }
    help: |
      The `parent::` keyword is used to call a method from the parent class, even if the method has been overridden in the child class.
      https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php

  -
    question: >
      What is the purpose of the `#[SensitiveParameter]` attribute in PHP 8.2?
    answers:
      - { value: "To mark a parameter as sensitive, preventing its value from appearing in stack traces.", correct: true }
      - { value: "To encrypt the parameter's value automatically.", correct: false }
      - { value: "To restrict the type of the parameter to sensitive data types only.", correct: false }
      - { value: "To ensure the parameter is always passed by reference.", correct: false }
    help: |
      The `#[SensitiveParameter]` attribute, introduced in PHP 8.2, allows marking parameters that contain sensitive information (like passwords) so that their actual values are redacted from stack traces, improving security.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.sensitiveparameter

  -
    question: >
      Which of the following is a correct way to define a namespace in a PHP file?
    answers:
      - { value: "```php namespace App\\Http\\Controller; ```", correct: true }
      - { value: "```php use namespace App\\Http\\Controller; ```", correct: false }
      - { value: "```php namespace App/Http/Controller; ```", correct: false }
      - { value: "```php define_namespace('App\\Http\\Controller'); ```", correct: false }
    help: |
      Namespaces are declared using the `namespace` keyword at the top of a PHP file. They help organize code and prevent name collisions.
      https://www.php.net/manual/en/language.namespaces.definition.php

  -
    question: |
      Which of the following accurately describes the behavior of PHP's `set_error_handler()` function?
    answers:
      - { value: "It sets a user-defined function to handle errors during script execution.", correct: true }
      - { value: "The registered error handler can convert PHP errors into `ErrorException` instances.", correct: true }
      - { value: "It completely disables PHP's default error reporting mechanism.", correct: false }
      - { value: "It is primarily used for catching fatal errors that stop script execution.", correct: false }
    help: |
      `set_error_handler()` allows you to define your own way of handling PHP errors. The handler can decide whether to process the error, ignore it, or convert it into an `ErrorException` to be caught by a `try-catch` block.
      https://www.php.net/manual/en/function.set-error-handler.php

  -
    question: >
      What is the purpose of the `__clone()` magic method in PHP?
    answers:
      - { value: "It is called when an object is duplicated using the `clone` keyword, allowing custom logic for the new object.", correct: true }
      - { value: "It is called when an object is destroyed.", correct: false }
      - { value: "It is used to create a new instance of a class without calling the constructor.", correct: false }
      - { value: "It defines how an object should be serialized.", correct: false }
    help: |
      The `__clone()` method is called when an object is cloned. It allows you to customize the cloning process, for example, by deep copying objects that are properties of the original object.
      https://www.php.net/manual/en/language.oop5.cloning.php

  -
    question: |
      Which of the following is a valid way to define a PHP 8.1 readonly class?
    answers:
      - { value: "```php readonly class MyClass { public string $name; public function __construct(string $name) { $this->name = $name; } } ```", correct: true }
      - { value: "```php class MyClass { public readonly string $name; public function __construct(string $name) { $this->name = $name; } } ```", correct: false }
      - { value: "```php final readonly class MyClass { public string $name; } ```", correct: false }
      - { value: "```php class MyClass { private readonly string $name; } ```", correct: false }
    help: |
      PHP 8.1 introduced `readonly` classes. When a class is declared `readonly`, all its properties are implicitly `readonly`. Properties must be typed and initialized in the constructor or at declaration.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly.classes

  -
    question: >
      What is the main difference between `include` / `require` and `include_once` / `require_once` in PHP?
    answers:
      - { value: "The `_once` versions ensure that the file is included/required only once during the script execution, preventing re-declarations.", correct: true }
      - { value: "The `_once` versions are faster because they cache the file content.", correct: false }
      - { value: "The `_once` versions throw an exception on failure, while the others only issue a warning.", correct: false }
      - { value: "There is no functional difference; `_once` is just a stylistic choice.", correct: false }
    help: |
      `include_once` and `require_once` behave identically to their `_once`-less counterparts, except that PHP will check if the file has already been included, and if it has, it will not include (or require) it again.
      https://www.php.net/manual/en/function.include-once.php
      https://www.php.net/manual/en/function.require-once.php

  -
    question: |
      Consider the following code:

      ```php
      <?php
      class MyClass {
          public function __call($name, $arguments) {
              echo "Calling method '{$name}' with arguments: " . implode(', ', $arguments) . "\n";
          }

          public static function __callStatic($name, $arguments) {
              echo "Calling static method '{$name}' with arguments: " . implode(', ', $arguments) . "\n";
          }
      }

      $obj = new MyClass();
      $obj->nonExistentMethod('arg1', 'arg2');

      MyClass::nonExistentStaticMethod('static_arg');
      ?>
      ```
      What will be the output?
    answers:
      - { value: "Calling method 'nonExistentMethod' with arguments: arg1, arg2\nCalling static method 'nonExistentStaticMethod' with arguments: static_arg\n", correct: true }
      - { value: "A fatal error will occur because the methods do not exist.", correct: false }
      - { value: "Calling method 'nonExistentMethod' with arguments: arg1, arg2\n", correct: false }
      - { value: "Calling static method 'nonExistentStaticMethod' with arguments: static_arg\n", correct: false }
    help: |
      The `__call()` magic method is triggered when invoking inaccessible or non-existent methods in an object context. The `__callStatic()` magic method is triggered when invoking inaccessible or non-existent methods in a static context.
      https://www.php.net/manual/en/language.oop5.magic.php#object.call
      https://www.php.net/manual/en/language.oop5.magic.php#object.callstatic

  -
    question: >
      Which of the following is true about PHP's `PDO` (PHP Data Objects) extension?
    answers:
      - { value: "It provides a lightweight, consistent interface for accessing databases.", correct: true }
      - { value: "It supports prepared statements, helping to prevent SQL injection attacks.", correct: true }
      - { value: "It is a database-specific extension, requiring a different API for each database.", correct: false }
      - { value: "It automatically handles all database connection pooling.", correct: false }
    help: |
      PDO is a database access layer providing a uniform method of access to multiple databases. It supports prepared statements, which are crucial for security against SQL injection.
      https://www.php.net/manual/en/book.pdo.php

  -
    question: |
      What is the purpose of the `#[Deprecated]` attribute in PHP 8.0+?
    answers:
      - { value: "To mark a class, method, property, or constant as deprecated, indicating it will be removed in future versions.", correct: true }
      - { value: "To prevent a method from being called.", correct: false }
      - { value: "To automatically remove the marked code from the application.", correct: false }
      - { value: "To suggest an alternative implementation for the marked code.", correct: false }
    help: |
      The `#[Deprecated]` attribute allows developers to mark parts of their code (classes, methods, properties, constants) as deprecated, providing a clear signal that they are no longer recommended for use and may be removed in future versions.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.deprecated

  -
    question: >
      Which of the following is a key characteristic of an `abstract` method in PHP?
    answers:
      - { value: "It is declared in an abstract class or interface but has no implementation.", correct: true }
      - { value: "It must be implemented by any non-abstract child class that extends the abstract class or implements the interface.", correct: true }
      - { value: "It can be called directly on the abstract class without instantiation.", correct: false }
      - { value: "It must be declared as `private`.", correct: false }
    help: |
      Abstract methods are declared with the `abstract` keyword and contain no body. They must be implemented by concrete (non-abstract) child classes.
      https://www.php.net/manual/en/language.oop5.abstract.php

  -
    question: |
      What is the correct way to declare a class property that can only be accessed from within the class itself?
    answers:
      - { value: "```php private string $name; ```", correct: true }
      - { value: "```php protected string $name; ```", correct: false }
      - { value: "```php public string $name; ```", correct: false }
      - { value: "```php static string $name; ```", correct: false }
    help: |
      The `private` visibility keyword ensures that a property or method is only accessible from within the class where it is defined.
      https://www.php.net/manual/en/language.oop5.visibility.php

  -
    question: >
      Which of the following is true about PHP's `Reflection` API?
    answers:
      - { value: "It provides the ability to introspect classes, interfaces, functions, methods, and extensions.", correct: true }
      - { value: "It allows dynamic creation of classes at runtime.", correct: true }
      - { value: "It is primarily used for debugging and analysis of code structure.", correct: true }
      - { value: "It is a performance-critical API used for everyday application logic.", correct: false }
    help: |
      The Reflection API provides classes that allow you to reverse-engineer classes, interfaces, functions, methods, and extensions. It's powerful for introspection and dynamic code manipulation, often used in frameworks and tools.
      https://www.php.net/manual/en/book.reflection.php

  -
    question: |
      Consider the following PHP 8.0 code:

      ```php
      <?php
      function processValue(int|float $value): int|float {
          return $value * 2;
      }

      echo processValue(5) . "\n";
      echo processValue(2.5) . "\n";
      ?>
      ```
      What will be the output?
    answers:
      - { value: "10\n5\n", correct: true }
      - { value: "10\n5.0\n", correct: true }
      - { value: "A fatal error due to type mismatch.", correct: false }
      - { value: "5\n2.5\n", correct: false }
    help: |
      Union types allow a parameter or return type to accept multiple types. In this case, both `int` and `float` are accepted and returned. PHP's type juggling will convert `5.0` to `5` if echoed as an integer, but `5.0` is also a correct representation of the float.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.union

  -
    question: >
      What is the primary purpose of the `#[Pure]` attribute in PHP 8.1+?
    answers:
      - { value: "To indicate that a function or method has no side effects and its return value depends only on its inputs.", correct: true }
      - { value: "To enforce strict type checking for all function parameters.", correct: false }
      - { value: "To mark a function as immutable.", correct: false }
      - { value: "To optimize function calls by inlining the code.", correct: false }
    help: |
      The `#[Pure]` attribute, introduced in PHP 8.1, signals that a function or method is "pure", meaning it produces no side effects and its output depends solely on its inputs. This can be useful for static analysis and potential future optimizations.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.pure

  -
    question: |
      Which of the following is a valid way to create an anonymous class in PHP?
    answers:
      - { value: "```php $obj = new class { public function greet() { echo 'Hello!'; } }; $obj->greet(); ```", correct: true }
      - { value: "```php $obj = new AnonymousClass() { public function greet() { echo 'Hello!'; } }; $obj->greet(); ```", correct: false }
      - { value: "```php $obj = new class implements MyInterface { /* ... */ }; ```", correct: true }
      - { value: "```php $obj = new class extends MyAbstractClass { /* ... */ }; ```", correct: true }
    help: |
      Anonymous classes, introduced in PHP 7, are useful for simple, one-off objects. They can implement interfaces and extend abstract classes.
      https://www.php.net/manual/en/language.oop5.anonymous.php

  -
    question: >
      What is the difference between `Error` and `Exception` in PHP 7+?
    answers:
      - { value: "`Error` represents internal PHP errors (e.g., parse errors, type errors), while `Exception` represents errors that can be caught and handled by userland code.", correct: true }
      - { value: "Both `Error` and `Exception` are equally catchable by default.", correct: false }
      - { value: "`Error` is a subclass of `Exception`.", correct: false }
      - { value: "`Exception` is used for fatal errors, and `Error` for warnings.", correct: false }
    help: |
      In PHP 7, `Error` was introduced for internal PHP errors that were previously fatal errors (e.g., `TypeError`, `ParseError`). `Exception` is for errors that userland code can throw and catch. Both implement `Throwable`.
      https://www.php.net/manual/en/language.errors.php7.php

  -
    question: |
      Which of the following is a valid way to use the `match` expression with an enum in PHP 8.1+?
    answers:
      - { value: "```php enum Status { case Active; case Inactive; } function getLabel(Status $status): string { return match ($status) { Status::Active => 'User is Active', Status::Inactive => 'User is Inactive', }; } ```", correct: true }
      - { value: "```php enum Status { case Active; case Inactive; } function getLabel(Status $status): string { switch ($status) { case Status::Active: return 'User is Active'; case Status::Inactive: return 'User is Inactive'; } } ```", correct: false }
      - { value: "```php enum Status { case Active; case Inactive; } function getLabel(Status $status): string { return match ($status->value) { 'Active' => 'User is Active', 'Inactive' => 'User is Inactive', }; } ```", correct: false }
      - { value: "```php enum Status { case Active; case Inactive; } function getLabel(Status $status): string { return match ($status->name) { 'Active' => 'User is Active', 'Inactive' => 'User is Inactive', }; } ```", correct: false }
    help: |
      Enums can be directly used in `match` expressions, providing a concise and type-safe way to handle different enum cases.
      https://www.php.net/manual/en/language.enumerations.match.php

  -
    question: >
      What is the purpose of the `#[ReturnTypeWillChange]` attribute in PHP 8.1+?
    answers:
      - { value: "To suppress deprecation warnings when a method's return type signature differs from a parent method, indicating an intentional change.", correct: true }
      - { value: "To force a method to return a specific type, regardless of its implementation.", correct: false }
      - { value: "To mark a method as having a dynamic return type.", correct: false }
      - { value: "To indicate that a method will always return `void`.", correct: false }
    help: |
      The `#[ReturnTypeWillChange]` attribute, introduced in PHP 8.1, is used to suppress deprecation warnings when a child class method intentionally changes its return type signature from that of a parent method or interface, typically due to a change in the parent library.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.returntypewillchange

  -
    question: |
      Which of the following is a valid way to define a class that implements multiple interfaces?
    answers:
      - { value: "```php class MyClass implements InterfaceA, InterfaceB { /* ... */ } ```", correct: true }
      - { value: "```php class MyClass implements InterfaceA and InterfaceB { /* ... */ } ```", correct: false }
      - { value: "```php class MyClass implements [InterfaceA, InterfaceB] { /* ... */ } ```", correct: false }
      - { value: "```php class MyClass extends InterfaceA, InterfaceB { /* ... */ } ```", correct: false }
    help: |
      A class can implement multiple interfaces by listing them after the `implements` keyword, separated by commas.
      https://www.php.net/manual/en/language.oop5.interfaces.php

  -
    question: >
      What is the purpose of the `#[NoReturn]` attribute in PHP 8.1+?
    answers:
      - { value: "To indicate that a function or method will terminate script execution or throw an exception, never returning to the caller.", correct: true }
      - { value: "To prevent a function from returning any value.", correct: false }
      - { value: "To mark a function as a generator.", correct: false }
      - { value: "To ensure a function always returns `null`.", correct: false }
    help: |
      The `#[NoReturn]` attribute, introduced in PHP 8.1, signals to static analysis tools that a function or method will not return to its caller, either by terminating the script (e.g., `die()`, `exit()`) or by throwing an exception.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.noreturn

  -
    question: |
      Which of the following is true about PHP's `SplStack` class?
    answers:
      - { value: "It implements a Last-In, First-Out (LIFO) data structure.", correct: true }
      - { value: "Elements are added using `push()` and removed using `pop()`.", correct: true }
      - { value: "It is optimized for random access to elements by index.", correct: false }
      - { value: "It is a fixed-size collection.", correct: false }
    help: |
      `SplStack` provides the functionality of a stack, where elements are added and removed from the same end, following the LIFO principle.
      https://www.php.net/manual/en/class.splstack.php

  -
    question: >
      What is the correct way to define a property that can only be accessed by the class itself and its child classes?
    answers:
      - { value: "```php protected string $name; ```", correct: true }
      - { value: "```php private string $name; ```", correct: false }
      - { value: "```php public string $name; ```", correct: false }
      - { value: "```php internal string $name; ```", correct: false }
    help: |
      The `protected` visibility keyword allows access to a property or method from within the class itself and from any class that inherits from it.
      https://www.php.net/manual/en/language.oop5.visibility.php

  -
    question: |
      Which of the following is a valid way to define a constructor property promotion in PHP 8.0+?
    answers:
      - { value: "```php class User { public function __construct(public string $name, private int $age) {} } ```", correct: true }
      - { value: "```php class User { public string $name; private int $age; public function __construct($name, $age) { $this->name = $name; $this->age = $age; } } ```", correct: false }
      - { value: "```php class User { public function __construct(string $name, int $age) { public $this->name = $name; private $this->age = $age; } } ```", correct: false }
      - { value: "```php class User { public function __construct(string $name, int $age) {} } ```", correct: false }
    help: |
      Constructor property promotion, introduced in PHP 8.0, allows defining and initializing class properties directly in the constructor's parameter list, reducing boilerplate code.
      https://www.php.net/manual/en/language.oop5.decon.php#language.oop5.decon.constructor.promotion

  -
    question: >
      What is the purpose of the `#[ArrayShape]` attribute in PHP 8.0+?
    answers:
      - { value: "To describe the expected keys and their types for an array, primarily for static analysis.", correct: true }
      - { value: "To enforce a fixed size for an array at runtime.", correct: false }
      - { value: "To automatically convert an array to an object.", correct: false }
      - { value: "To define a new array type with specific constraints.", correct: false }
    help: |
      The `#[ArrayShape]` attribute, introduced in PHP 8.0, allows developers to describe the expected keys and their types within an array. This is primarily used by static analysis tools to provide better type inference and error checking.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.arrayshape

  -
    question: |
      Which of the following describes the behavior of `null` in PHP 8+ type declarations?
    answers:
      - { value: "It can be explicitly added to a type declaration using the `?` prefix (e.g., `?string`).", correct: true }
      - { value: "It can be included in a union type (e.g., `string|null`).", correct: true }
      - { value: "A parameter without a `null` type hint can still implicitly accept `null` if its default value is `null`.", correct: false }
      - { value: "All type declarations implicitly allow `null` by default.", correct: false }
    help: |
      In PHP 7.1+, `null` can be explicitly allowed using nullable types (`?Type`) or as part of a union type (`Type|null`). Strict types (`declare(strict_types=1);`) affect how `null` is handled with non-nullable types.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.nullable

  -
    question: >
      What is the purpose of the `#[AllowDynamicProperties]` attribute in PHP 8.2?
    answers:
      - { value: "It allows a class to have dynamic (undeclared) properties, suppressing the deprecation warning.", correct: true }
      - { value: "It enforces strict type checking for all properties in a class.", correct: false }
      - { value: "It prevents the creation of new properties after object instantiation.", correct: false }
      - { value: "It makes all properties of a class public by default.", correct: false }
    help: |
      In PHP 8.2, dynamic properties were deprecated. The `#[AllowDynamicProperties]` attribute can be added to a class to explicitly allow dynamic properties for that class, suppressing the deprecation warning.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.dynamic

  -
    question: |
      Which of the following is an example of a PHP built-in function that operates on arrays?
    answers:
      - { value: "`array_map()`", correct: true }
      - { value: "`str_replace()`", correct: false }
      - { value: "`json_encode()`", correct: false }
      - { value: "`file_get_contents()`", correct: false }
    help: |
      `array_map()` applies a callback function to each element of a given array(s) and returns a new array.
      https://www.php.net/manual/en/function.array-map.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent a child class from overriding a method, you can declare the method as `final` in the parent class.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3?
    answers:
      - { value: "To explicitly mark methods that are intended to override a parent method, leading to a compile-time error if no parent method exists.", correct: true }
      - { value: "To make a method final, preventing child classes from overriding it.", correct: false }
      - { value: "To indicate that a method should be static and not require an object instance.", correct: false }
      - { value: "To allow a method to have a different signature than the parent method it overrides.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a new feature that helps prevent accidental bugs by ensuring that a method marked with this attribute actually overrides a method from a parent class or implemented interface. If it doesn't, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.predefined.php#attribute.override

  -
    question: |
      Which of the following is a correct way to define a class that cannot be extended by other classes?
    answers:
      - { value: "```php final class MyClass { /* ... */ } ```", correct: true }
      - { value: "```php abstract class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php private class MyClass { /* ... */ } ```", correct: false }
      - { value: "```php sealed class MyClass { /* ... */ } ```", correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be used on methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the primary benefit of using `Composer` for PHP projects?
    answers:
      - { value: "Dependency management: it declares, manages, and installs project dependencies.", correct: true }
      - { value: "Code compilation: it compiles PHP code into a faster binary format.", correct: false }
      - { value: "Database migration: it automates database schema changes.", correct: false }
      - { value: "Web server management: it provides a built-in web server for development.", correct: false }
    help: |
      Composer is a dependency manager for PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.
      https://getcomposer.org/doc/00-intro.md

  -
    question: |
      Which of the following is true about PHP's `final` keyword when applied to a method?
    answers:
      - { value: "It prevents child classes from overriding that specific method.", correct: true }
      - { value: "It makes the method static.", correct: false }
      - { value: "It makes the method abstract.", correct: false }
      - { value: "It prevents the method from being called from outside the class.", correct: false }
    help: |
      If you wish to prevent