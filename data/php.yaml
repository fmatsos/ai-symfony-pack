category: PHP
questions:
  - question: Which of the following correctly embeds PHP code within an HTML document?
    answers:
      - value: |-
          ```html
          <!DOCTYPE html>
          <html>
          <body>
             <?php echo "Hello!"; ?>
          </body>
          </html>
          ```
        correct: true
      - value: |-
          ```html
          <!DOCTYPE html>
          <html>
          <body>
             <php> echo "Hello!"; </php>
          </body>
          </html>
          ```
        correct: false
      - value: |-
          ```html
          <!DOCTYPE html>
          <html>
          <body>
             <%= "Hello!" %>
          </body>
          </html>
          ```
        correct: false
      - value: |-
          ```html
          <!DOCTYPE html>
          <html>
          <body>
             <script language="php"> echo "Hello!"; </script>
          </body>
          </html>
          ```
        correct: false
    help: PHP code is embedded within `<?php` and `?>` tags. This allows the server
      to process the PHP code and embed its output directly into the HTML.
  - question: Which of the following are valid PHP variable names?
    answers:
      - value: "`$myVariable`"
        correct: true
      - value: "`$_internal_var`"
        correct: true
      - value: "`$1stVariable`"
        correct: false
      - value: "`$variable-name`"
        correct: false
      - value: "`$StraÃŸe`"
        correct: true
    help: PHP variable names must start with a letter or an underscore, followed by
      alphanumeric characters or underscores. Extended ASCII characters are also
      allowed. Variable names are case-sensitive.
  - question: What is the default value of an uninitialized and unreferenced
      variable in PHP 8.2?
    answers:
      - value: "`NULL`"
        correct: true
      - value: "`0`"
        correct: false
      - value: An empty string (`""`)
        correct: false
      - value: An `E_ERROR` is thrown
        correct: false
    help: Accessing an uninitialized and unreferenced variable in PHP 8.0.0 and
      later results in a `NULL` value and an `E_WARNING` (or `E_NOTICE` prior to
      PHP 8.0.0).
  - question: >-
      Consider the following PHP code:


      ```php

      <?php

      $a = "Hello ";

      $b = $a . "World!";

      $c = "Hello ";

      $c .= "World!";

      ?>

      ```


      Which of the following statements are true after the execution of this
      code?
    answers:
      - value: '`$b` contains the value `"Hello World!"`'
        correct: true
      - value: '`$c` contains the value `"Hello World!"`'
        correct: true
      - value: The value of `$a` is changed by the line `$b = $a . "World!";`
        correct: false
      - value: The value of `$a` is changed by the line `$c .= "World!";`
        correct: true
    help: The `.` operator performs string concatenation, creating a new string. The
      `.=` operator is the concatenating assignment operator, which appends the
      right-hand side string to the left-hand side variable, modifying the
      variable in place.
  - question: |-
      In PHP 8.2, what is the result of the following comparison?

      ```php
      <?php
      var_dump(0 == "a");
      ?>
      ```
    answers:
      - value: "`bool(true)`"
        correct: false
      - value: "`bool(false)`"
        correct: true
      - value: An `E_WARNING` and `bool(false)`
        correct: false
      - value: An `E_NOTICE` and `bool(true)`
        correct: false
    help: As of PHP 8.0.0, when comparing a string to a numeric value using `==`,
      PHP no longer converts the string to a number if the string is not
      numeric. Instead, it converts the number to a string and performs a string
      comparison. Thus, `"0" == "a"` is `false`.
  - question: Which of the following are valid ways to create an associative array
      in PHP 8.2?
    answers:
      - value: |-
          ```php
          $arr = [
              "key1" => "value1",
              "key2" => "value2"
          ];
          ```
        correct: true
      - value: |-
          ```php
          $arr = array(
              "key1" => "value1",
              "key2" => "value2"
          );
          ```
        correct: true
      - value: |-
          ```php
          $arr = new Array(
              "key1" => "value1",
              "key2" => "value2"
          );
          ```
        correct: false
      - value: |-
          ```php
          $arr["key1"] = "value1";
          $arr["key2"] = "value2";
          ```
        correct: true
    help: PHP supports both the `array()` language construct and the short array
      syntax `[]` for creating arrays. Associative arrays are created by
      specifying key-value pairs. Individual elements can also be assigned using
      square bracket syntax.
  - question: Which statement is true regarding the `array()` construct in PHP?
    answers:
      - value: "`array()` is a language construct, not a regular function."
        correct: true
      - value: When an integer index is omitted, it automatically generates an index
          starting at 1.
        correct: false
      - value: When two identical string indices are defined, PHP merges their values.
        correct: false
      - value: A trailing comma after the last defined array entry is a syntax error.
        correct: false
    help: "`array()` is a language construct. When an index is omitted, it starts at
      0. If identical indices are defined, the last one overwrites the previous.
      A trailing comma is valid syntax."
  - question: |-
      Consider the following PHP code:

      ```php
      <?php
      $arr = array(5 => 1, 12 => 2);
      $arr[] = 56;
      unset($arr[5]);
      var_dump($arr);
      ?>
      ```

      What will be the output of `var_dump($arr)`?
    answers:
      - value: |-
          ```
          array(2) {
            [12]=>
            int(2)
            [13]=>
            int(56)
          }
          ```
        correct: true
      - value: |-
          ```
          array(2) {
            [5]=>
            int(1)
            [12]=>
            int(2)
          }
          ```
        correct: false
      - value: |-
          ```
          array(3) {
            [5]=>
            int(1)
            [12]=>
            int(2)
            [0]=>
            int(56)
          }
          ```
        correct: false
      - value: |-
          ```
          array(2) {
            [12]=>
            int(2)
            [0]=>
            int(56)
          }
          ```
        correct: false
    help: When an element is added to an array using `[]` without specifying a key,
      PHP assigns the next available integer key, which is the largest integer
      key in the array plus one. In this case, `12 + 1 = 13`. `unset($arr[5])`
      removes the element with key `5`.
  - question: Which of the following constant names are considered valid in PHP 8.2?
    answers:
      - value: "`FOO_BAR`"
        correct: true
      - value: "`_MY_CONSTANT`"
        correct: true
      - value: "`1ST_CONSTANT`"
        correct: false
      - value: "`__MAGIC_CONSTANT__`"
        correct: true
    help: Constants follow similar naming rules to variables, but without the
      leading `$`. They must start with a letter or underscore. While names like
      `__FOO__` are syntactically valid, they are generally discouraged to avoid
      conflicts with PHP's internal magic constants.
  - question: What is the primary purpose of the `phpinfo()` function?
    answers:
      - value: To output a large amount of information about the current state of PHP,
          including configuration, extensions, and server environment.
        correct: true
      - value: To display the PHP license agreement.
        correct: false
      - value: To check if a specific PHP extension is loaded.
        correct: false
      - value: To configure PHP runtime settings dynamically.
        correct: false
    help: "`phpinfo()` is a diagnostic tool that outputs comprehensive information
      about the PHP installation, useful for debugging and verifying settings."
  - question: |-
      What will the following PHP code output?

      ```php
      <?php
      echo chr(65);
      echo chr(97);
      echo chr(256);
      ?>
      ```
    answers:
      - value: |-
          A
          a
          \u0000
        correct: false
      - value: |-
          A
          a
          \u0000 (with a warning)
        correct: false
      - value: |-
          A
          a
          \u0000 (with an error)
        correct: false
      - value: |-
          A
          a
          \u0000
        correct: true
    help: The `chr()` function returns a one-character string from a specified ASCII
      value. Values outside 0-255 are bitwise ANDed with 255. As of PHP 7.4.0,
      unsupported codepoints are cast to 0, which corresponds to the null
      character.
  - question: Which of the following `version_compare()` calls will return `true` if
      `PHP_VERSION` is `8.2.5`?
    answers:
      - value: "`version_compare(PHP_VERSION, '8.2.0', '>=')`"
        correct: true
      - value: "`version_compare(PHP_VERSION, '8.3.0', '<')`"
        correct: true
      - value: "`version_compare(PHP_VERSION, '8.2.5')`"
        correct: false
      - value: "`version_compare(PHP_VERSION, '8.2.5', '==')`"
        correct: true
    help: "`version_compare()` compares two PHP version number strings. If the
      `operator` argument is specified, it will return `true` if the
      relationship is the one specified by the operator, `false` otherwise. If
      no operator is specified, it returns -1 if the first version is lower, 0
      if equal, and 1 if higher."
  - question: Given the string `"apple,banana,orange"`, which `explode()` call will
      result in an array `["apple", "banana", "orange"]`?
    answers:
      - value: "`explode(',', \"apple,banana,orange\")`"
        correct: true
      - value: '`explode(" ", "apple,banana,orange")`'
        correct: false
      - value: '`explode(", ", "apple,banana,orange")`'
        correct: false
      - value: '`explode("|", "apple,banana,orange")`'
        correct: false
    help: The `explode()` function splits a string by a specified delimiter. The
      first argument is the delimiter, and the second is the string to be split.
  - question: Which `php://` stream wrapper is used to read raw data from the
      request body, but is not available for `multipart/form-data` POST requests
      if `enable_post_data_reading` is enabled?
    answers:
      - value: "`php://input`"
        correct: true
      - value: "`php://stdin`"
        correct: false
      - value: "`php://post`"
        correct: false
      - value: "`php://raw`"
        correct: false
    help: "`php://input` is a read-only stream that allows you to read raw data from
      the request body. It is not available with `multipart/form-data` because
      PHP processes these types of requests automatically and populates `$_POST`
      and `$_FILES`."
  - question: What is the primary difference between `php://memory` and `php://temp`
      stream wrappers?
    answers:
      - value: "`php://memory` always stores data in memory, while `php://temp` uses a
          temporary file once data exceeds a predefined limit."
        correct: true
      - value: "`php://memory` is read-only, while `php://temp` is read-write."
        correct: false
      - value: "`php://temp` is faster for small amounts of data, while `php://memory`
          is better for large data."
        correct: false
      - value: "`php://memory` requires a specific memory limit to be set, while
          `php://temp` does not."
        correct: false
    help: Both are read-write streams for temporary data. `php://memory` keeps data
      entirely in RAM, while `php://temp` will switch to a temporary file on
      disk if the data size exceeds a configurable threshold (default 2MB).
  - question: |-
      Consider the following PHP code:

      ```php
      <?php
      file_put_contents('php://memory', 'Hello');
      echo file_get_contents('php://memory');
      ?>
      ```

      What will be the output?
    answers:
      - value: Nothing (empty string)
        correct: true
      - value: Hello
        correct: false
      - value: An error indicating the stream is closed
        correct: false
      - value: A warning and an empty string
        correct: false
    help: "`php://memory` and `php://temp` streams are not reusable after they have
      been closed. `file_put_contents` implicitly closes the stream, so the
      subsequent `file_get_contents` opens a new, empty `php://memory` stream."
  - question: Which `$_SERVER` array key typically contains the IP address from
      which the user is viewing the current page?
    answers:
      - value: "`REMOTE_ADDR`"
        correct: true
      - value: "`HTTP_CLIENT_IP`"
        correct: false
      - value: "`USER_IP`"
        correct: false
      - value: "`SERVER_ADDR`"
        correct: false
    help: "`$_SERVER['REMOTE_ADDR']` provides the IP address of the client that made
      the request. `$_SERVER['SERVER_ADDR']` is the IP address of the server."
  - question: Which of the following is the correct syntax for an `if-else` control
      structure in PHP?
    answers:
      - value: |-
          ```php
          if ($condition) {
              // code to execute if true
          } else {
              // code to execute if false
          }
          ```
        correct: true
      - value: |-
          ```php
          if ($condition):
              // code to execute if true
          else:
              // code to execute if false
          endif;
          ```
        correct: true
      - value: |-
          ```php
          if ($condition) then {
              // code to execute if true
          } else {
              // code to execute if false
          }
          ```
        correct: false
      - value: |-
          ```php
          if ($condition) {
              // code to execute if true
          } elseif {
              // code to execute if false
          }
          ```
        correct: false
    help: PHP supports both curly brace syntax and alternative syntax (colon and
      `endif;`) for control structures like `if-else`.
  - question: |-
      What will be the output of the following PHP code?

      ```php
      <?php
      $haystack = "Hello World";
      $needle = "world";
      var_dump(str_contains($haystack, $needle));
      ?>
      ```
    answers:
      - value: "`bool(false)`"
        correct: true
      - value: "`bool(true)`"
        correct: false
      - value: An `E_WARNING`
        correct: false
      - value: An `E_NOTICE`
        correct: false
    help: The `str_contains()` function performs a case-sensitive check. Since
      'World' and 'world' differ in case, the function returns `false`.
  - question: How did the behavior of `mb_strtoupper("StraÃŸe")` change between PHP
      7.2 and PHP 7.3?
    answers:
      - value: In PHP 7.2, it produced `"STRAÃŸE"`; in PHP 7.3, it produced `"STRASSE"`.
        correct: true
      - value: In PHP 7.2, it produced `"STRASSE"`; in PHP 7.3, it produced `"STRAÃŸE"`.
        correct: false
      - value: The function was deprecated in PHP 7.3.
        correct: false
      - value: There was no change in behavior.
        correct: false
    help: PHP 7.3 introduced changes to `mb_strtoupper` for full case-mapping,
      specifically affecting characters like 'ÃŸ' (Eszett) which is now mapped to
      'SS' in uppercase.
  - question: |-
      Consider the following PHP code:

      ```php
      <h1>This is an <?php # echo 'simple';?> example</h1>
      ```

      What will be rendered in the browser?
    answers:
      - value: <h1>This is an example</h1>
        correct: true
      - value: <h1>This is an simple example</h1>
        correct: false
      - value: "<h1>This is an # echo 'simple';?> example</h1>"
        correct: false
      - value: An error due to incorrect comment syntax.
        correct: false
    help: Single-line comments (`#` or `//`) in PHP comment out everything from the
      comment marker to the end of the line or the closing PHP tag `?>`,
      whichever comes first. In this case, `echo 'simple';` is commented out.
  - question: |-
      Consider the following PHP code:

      ```php
      <?php
      $a = 'hello';
      $$a = 'world';
      echo "$a {$$a}";
      ?>
      ```

      What will be the output?
    answers:
      - value: hello world
        correct: true
      - value: hello {hello}
        correct: false
      - value: $a $hello
        correct: false
      - value: hello $world
        correct: false
    help: Variable variables allow you to use the value of a variable as the name of
      another variable. `$$a` means the variable whose name is the value of `$a`
      (which is 'hello'), so `$$a` refers to `$hello`. The `$$a` in the string
      interpolation is correctly parsed.
  - question: How can you access a variable named `invalid-name` in PHP 8.2?
    answers:
      - value: |-
          ```php
          $var = 'invalid-name';
          echo $$var;
          ```
        correct: true
      - value: |-
          ```php
          echo ${'invalid-name'};
          ```
        correct: true
      - value: |-
          ```php
          echo $invalid-name;
          ```
        correct: false
      - value: |-
          ```php
          echo $this->{'invalid-name'};
          ```
        correct: false
    help: Variables with names that are not valid PHP identifiers (e.g., containing
      hyphens) can be accessed using curly braces `{}` with a string literal or
      a variable variable.
  - question: As of PHP 8.3.0, which of the following are valid initializations for
      a `static` variable?
    answers:
      - value: |-
          ```php
          static $int = 0;
          ```
        correct: true
      - value: |-
          ```php
          static $int = 1 + 2;
          ```
        correct: true
      - value: |-
          ```php
          static $int = sqrt(121);
          ```
        correct: true
      - value: |-
          ```php
          static $int = time();
          ```
        correct: true
    help: Prior to PHP 8.3.0, static variables could only be initialized with
      constant expressions. As of PHP 8.3.0, dynamic expressions are also
      allowed for static variable initialization.
  - question: Which of the following correctly uses `unset()` to destroy multiple
      variables?
    answers:
      - value: "`unset($var1, $var2, $var3);`"
        correct: true
      - value: "`unset([$var1, $var2, $var3]);`"
        correct: false
      - value: "`unset($var1); unset($var2); unset($var3);`"
        correct: true
      - value: "`unset($var1) && unset($var2);`"
        correct: false
    help: The `unset()` language construct can take multiple comma-separated
      variable arguments to destroy them. Calling `unset()` multiple times for
      individual variables also works.
  - question: When migrating PHP 5 exception handlers to PHP 7, why might a handler
      type-hinted with `Exception` cause a fatal error?
    answers:
      - value: In PHP 7, `Error` objects (which are not `Exception` instances) can be
          thrown, and they implement the new `Throwable` interface.
        correct: true
      - value: The `Exception` class was removed in PHP 7.
        correct: false
      - value: PHP 7 requires all exception handlers to be defined as anonymous
          functions.
        correct: false
      - value: The `set_exception_handler()` function was deprecated in PHP 7.
        correct: false
    help: PHP 7 introduced the `Throwable` interface, which is the base interface
      for both `Error` and `Exception` classes. To catch both errors and
      exceptions, exception handlers should type-hint against `Throwable`.
  - question: Which of the following are valid ways to define and call a static
      method `bar()` of a class `Foo` using complex callable types in PHP?
    answers:
      - value: |-
          ```php
          class Foo { static function bar() {} }
          $func = ["Foo", "bar"];
          $func();
          ```
        correct: true
      - value: |-
          ```php
          class Foo { static function bar() {} }
          $func = "Foo::bar";
          $func();
          ```
        correct: true
      - value: |-
          ```php
          class Foo { static function bar() {} }
          $func = "Foo->bar";
          $func();
          ```
        correct: false
      - value: |-
          ```php
          class Foo { static function bar() {} }
          $func = new Foo();
          $func->bar();
          ```
        correct: false
    help: Static methods can be called using array syntax `['ClassName',
      'methodName']` or string syntax `'ClassName::methodName'`. The object
      operator `->` is for instance methods.
  - question: What does the `fgetss()` function do when reading from a file?
    answers:
      - value: Reads a line from the file and strips HTML and PHP tags.
        correct: true
      - value: Reads a line from the file and returns it as a string, including all
          tags.
        correct: false
      - value: Reads the entire file content into a string, stripping tags.
        correct: false
      - value: Reads a line from the file and converts HTML entities to their
          corresponding characters.
        correct: false
    help: The `fgetss()` function is used to read a line from a file pointer and
      strip HTML and PHP tags from the returned string. It is similar to
      `fgets()` but with tag stripping functionality.
  - question: In which PHP SAPI did the `apache_request_headers()` function become
      available as of PHP 7.3.0?
    answers:
      - value: FPM
        correct: true
      - value: CLI
        correct: false
      - value: CGI
        correct: false
      - value: Apache module (mod_php)
        correct: false
    help: The `apache_request_headers()` function, which retrieves all HTTP request
      headers, became available in the FPM SAPI starting from PHP 7.3.0.
  - question: What change was introduced to the `jdtounix()` function in PHP 7.3.24?
    answers:
      - value: The upper limit for the `julian_day` parameter was extended.
        correct: true
      - value: It was deprecated.
        correct: false
      - value: It now accepts negative Julian day numbers.
        correct: false
      - value: Its return type was changed to `float`.
        correct: false
    help: In PHP 7.3.24, the `jdtounix()` function's `julian_day` parameter had its
      upper limit extended, allowing for conversion of a wider range of Julian
      day numbers to Unix timestamps.
  - question: Which `curl_setopt()` option was introduced in PHP 7.3.15?
    answers:
      - value: "`CURLOPT_HTTP09_ALLOWED`"
        correct: true
      - value: "`CURLOPT_HTTP_VERSION_2_0`"
        correct: false
      - value: "`CURLOPT_SSL_VERIFYSTATUS`"
        correct: false
      - value: "`CURLOPT_ALPN`"
        correct: false
    help: The `CURLOPT_HTTP09_ALLOWED` option was introduced in PHP 7.3.15 to
      control whether HTTP/0.9 responses are allowed.
  - question: Which `opcache` configuration directives are recommended to enable
      OpCache for both web requests and CLI scripts?
    answers:
      - value: |-
          ```ini
          opcache.enable=On
          opcache.enable_cli=On
          ```
        correct: true
      - value: |-
          ```ini
          opcache.enabled=1
          opcache.cli_enabled=1
          ```
        correct: false
      - value: |-
          ```ini
          opcache.enable=true
          opcache.cli=true
          ```
        correct: false
      - value: |-
          ```ini
          opcache.active=1
          opcache.cli_active=1
          ```
        correct: false
    help: "`opcache.enable` enables OpCache for web SAPI, and `opcache.enable_cli`
      enables it for the CLI SAPI. Both should be set to `On` for optimal
      performance."
  - question: How can you display only the general PHP credits (language design,
      authors) using `phpcredits()`?
    answers:
      - value: "`phpcredits(CREDITS_GENERAL);`"
        correct: true
      - value: "`phpcredits(PHP_CREDITS_GENERAL);`"
        correct: false
      - value: "`phpcredits('general');`"
        correct: false
      - value: "`phpcredits();` (then filter output)"
        correct: false
    help: The `phpcredits()` function accepts various constants to filter the type
      of credits displayed. `CREDITS_GENERAL` specifically shows general
      information about PHP.
  - question: Which of the following is a core principle of Object-Oriented
      Programming (OOP) in PHP?
    answers:
      - value: Encapsulation
        correct: true
      - value: Inheritance
        correct: true
      - value: Polymorphism
        correct: true
      - value: Global variables
        correct: false
    help: Encapsulation, Inheritance, and Polymorphism are the three fundamental
      pillars of Object-Oriented Programming. Global variables are generally
      discouraged in OOP for better maintainability and testability.
  - question: In PHP, what is the purpose of the `private` visibility keyword for
      class members (properties and methods)?
    answers:
      - value: Members declared `private` can only be accessed from within the class
          that defines them.
        correct: true
      - value: Members declared `private` can be accessed by the class itself and its
          child classes.
        correct: false
      - value: Members declared `private` can be accessed from anywhere.
        correct: false
      - value: Members declared `private` are visible only to other objects of the same
          class.
        correct: false
    help: "`private` members are strictly accessible only within the class where
      they are declared. They are not accessible from outside the class or from
      inherited classes."
  - question: Which magic method is automatically called when an object is created?
    answers:
      - value: "`__construct()`"
        correct: true
      - value: "`__init()`"
        correct: false
      - value: "`__create()`"
        correct: false
      - value: "`__new()`"
        correct: false
    help: The `__construct()` method is the constructor in PHP. It is automatically
      called when a new object of a class is instantiated.
  - question: What is the purpose of the `final` keyword when applied to a class in PHP?
    answers:
      - value: It prevents the class from being extended by other classes.
        correct: true
      - value: It prevents methods within the class from being overridden.
        correct: false
      - value: It makes all methods in the class static.
        correct: false
      - value: It makes the class a singleton.
        correct: false
    help: When a class is declared `final`, it means it cannot be inherited from. No
      other class can extend a `final` class.
  - question: Which keyword is used to refer to the current object's instance within
      a class method?
    answers:
      - value: "`$this`"
        correct: true
      - value: "`self`"
        correct: false
      - value: "`static`"
        correct: false
      - value: "`parent`"
        correct: false
    help: "`$this` refers to the instance of the class on which the method was
      called. `self` and `static` are used for static members, and `parent` for
      referring to the parent class."
  - question: What is the primary benefit of using namespaces in PHP?
    answers:
      - value: To solve the problem of name collisions between classes, functions, and
          constants.
        correct: true
      - value: To improve application performance by caching class definitions.
        correct: false
      - value: To enforce strict type checking for all variables.
        correct: false
      - value: To define global variables that are accessible everywhere.
        correct: false
    help: Namespaces provide a way to group related code, preventing naming
      conflicts when combining code from different libraries or applications.
  - question: |-
      Consider the following PHP code:

      ```php
      <?php
      namespace App\Controller;

      use App\Service\Mailer as MyMailer;

      class UserController
      {
          public function __construct(private MyMailer $mailer) {}
      }
      ?>
      ```

      What is the purpose of `as MyMailer` in the `use` statement?
    answers:
      - value: It creates an alias for the `App\Service\Mailer` class, allowing it to be
          referred to as `MyMailer` within the current file.
        correct: true
      - value: It renames the `App\Service\Mailer` class globally.
        correct: false
      - value: It specifies that `App\Service\Mailer` is a trait.
        correct: false
      - value: It defines a new namespace `MyMailer`.
        correct: false
    help: The `as` keyword in a `use` statement allows you to create an alias for a
      class, interface, function, or constant, resolving potential naming
      conflicts or providing a shorter, more convenient name.
  - question: Which of the following statements about PHP interfaces are true?
    answers:
      - value: Interfaces can contain constants.
        correct: true
      - value: All methods declared in an interface must be public.
        correct: true
      - value: Interfaces can contain properties.
        correct: false
      - value: A class can implement multiple interfaces.
        correct: true
    help: Interfaces define a contract for classes. They can declare constants and
      public methods (without implementation). They cannot declare properties. A
      class can implement any number of interfaces.
  - question: What is an anonymous function (or closure) in PHP?
    answers:
      - value: A function that has no specified name.
        correct: true
      - value: A function that can access variables from the scope in which it was
          created, even after that scope has terminated.
        correct: true
      - value: A function that is automatically executed when a script starts.
        correct: false
      - value: A function that can only be defined inside a class.
        correct: false
    help: Anonymous functions are functions without a name. Closures are anonymous
      functions that can inherit variables from the parent scope using the `use`
      keyword.
  - question: |-
      Consider the following PHP code:

      ```php
      <?php
      $message = 'Hello';
      $greet = function () use ($message) {
          echo $message;
      };
      $message = 'Goodbye';
      $greet();
      ?>
      ```

      What will be the output?
    answers:
      - value: Hello
        correct: true
      - value: Goodbye
        correct: false
      - value: An error, as `$message` is modified after the closure is defined.
        correct: false
      - value: Nothing, as `$message` is not passed by reference.
        correct: false
    help: When variables are imported into a closure using `use`, they are imported
      by value by default. Changes to the original variable outside the closure
      will not affect the variable inside the closure unless it is passed by
      reference (`use (&$message)`).
  - question: Which of the following statements about abstract classes in PHP are true?
    answers:
      - value: An abstract class cannot be instantiated directly.
        correct: true
      - value: An abstract class must contain at least one abstract method.
        correct: false
      - value: Classes extending an abstract class must implement all its abstract
          methods.
        correct: true
      - value: Abstract methods must declare their visibility.
        correct: true
    help: Abstract classes cannot be instantiated. They can contain abstract methods
      (methods without an implementation) but are not required to. Any class
      that extends an abstract class must implement all inherited abstract
      methods. Abstract methods must declare their visibility (public,
      protected).
  - question: What is the purpose of the `Throwable` interface introduced in PHP 7?
    answers:
      - value: It is the base interface for both `Error` and `Exception` classes,
          allowing a single `catch` block to handle both.
        correct: true
      - value: It replaces the `Exception` class entirely.
        correct: false
      - value: It provides methods for logging errors to a file.
        correct: false
      - value: It is used for type-hinting only in function parameters, not in `catch`
          blocks.
        correct: false
    help: The `Throwable` interface is the common ancestor of all objects that can
      be thrown via the `throw` statement, including both `Exception` and
      `Error` classes. This allows for more comprehensive error handling.
  - question: Which of the following is the correct way to throw a custom exception
      in PHP?
    answers:
      - value: |-
          ```php
          class MyCustomException extends Exception {}
          throw new MyCustomException("Something went wrong.");
          ```
        correct: true
      - value: |-
          ```php
          throw MyCustomException("Something went wrong.");
          ```
        correct: false
      - value: |-
          ```php
          catch (MyCustomException) {
              // ...
          }
          ```
        correct: false
      - value: |-
          ```php
          error("MyCustomException", "Something went wrong.");
          ```
        correct: false
    help: Custom exceptions must extend the built-in `Exception` class (or a class
      that extends `Exception`). They are thrown using the `throw new` syntax.
  - question: What is the purpose of a PHP Trait?
    answers:
      - value: To enable code reuse in single inheritance languages like PHP by allowing
          a class to use methods and properties from multiple traits.
        correct: true
      - value: To define an interface that a class must implement.
        correct: false
      - value: To create a singleton instance of a class.
        correct: false
      - value: To define abstract methods that must be implemented by child classes.
        correct: false
    help: Traits are a mechanism for code reuse in single inheritance languages like
      PHP. A trait is intended to reduce the limitations of single inheritance
      by enabling a developer to reuse sets of methods freely in several
      independent classes living in different class hierarchies.
  - question: Consider two traits, `TraitA` and `TraitB`, both defining a method
      `doSomething()`. If a class `MyClass` uses both traits, how can you
      resolve the method conflict?
    answers:
      - value: Using the `insteadof` operator.
        correct: true
      - value: Using the `as` operator to alias one of the methods.
        correct: true
      - value: By defining `doSomething()` directly in `MyClass` (which takes
          precedence).
        correct: true
      - value: By making one of the traits abstract.
        correct: false
    help: "PHP provides mechanisms to resolve method conflicts when using multiple
      traits: explicitly choosing which trait's method to use with `insteadof`,
      aliasing a method with `as`, or defining the method directly in the
      consuming class (which overrides trait methods)."
  - question: Which of the following is a common way to enable a PHP extension
      (e.g., `pdo_mysql`)?
    answers:
      - value: Adding `extension=pdo_mysql.so` (or `.dll` on Windows) to `php.ini`.
        correct: true
      - value: Running `composer require pdo_mysql`.
        correct: false
      - value: Using `dl('pdo_mysql.so');` in your PHP script.
        correct: false
      - value: Calling `enable_extension('pdo_mysql');` in your PHP script.
        correct: false
    help: PHP extensions are typically enabled by uncommenting or adding the
      `extension` directive in the `php.ini` configuration file. The file
      extension (`.so` for Unix/Linux, `.dll` for Windows) depends on the
      operating system.
  - question: What is the primary purpose of the Standard PHP Library (SPL)?
    answers:
      - value: To provide a collection of interfaces and classes for common data
          structures and iterators.
        correct: true
      - value: To replace all built-in PHP functions with object-oriented equivalents.
        correct: false
      - value: To offer a framework for building web applications.
        correct: false
      - value: To manage PHP's internal memory allocation.
        correct: false
    help: The SPL provides a set of interfaces and classes that solve standard
      problems, such as implementing data structures (stacks, queues, heaps) and
      providing iterators for various data sources.
  - question: Which SPL interface allows an object to be treated like an array,
      enabling access to its properties using array syntax (e.g.,
      `$obj['key']`)?
    answers:
      - value: "`ArrayAccess`"
        correct: true
      - value: "`Iterator`"
        correct: false
      - value: "`Countable`"
        correct: false
      - value: "`Serializable`"
        correct: false
    help: The `ArrayAccess` interface allows objects to use array-like syntax for
      accessing properties. It requires implementing methods like
      `offsetExists`, `offsetGet`, `offsetSet`, and `offsetUnset`.
  - question: Which SPL class provides a way to store objects and associate data
      with them, similar to a hash map where objects are keys?
    answers:
      - value: "`SplObjectStorage`"
        correct: true
      - value: "`SplFixedArray`"
        correct: false
      - value: "`SplStack`"
        correct: false
      - value: "`SplHeap`"
        correct: false
    help: "`SplObjectStorage` is a specialized collection that maps objects to data.
      It allows you to store objects and retrieve associated data based on the
      object's identity."
  - question: What is the purpose of the `declare(strict_types=1);` directive in PHP?
    answers:
      - value: It enables strict mode for type declarations (scalar type hints and
          return type declarations) in the current file.
        correct: true
      - value: It makes all variables strictly typed globally.
        correct: false
      - value: It forces all function arguments to be passed by reference.
        correct: false
      - value: It enables a faster execution mode for the script.
        correct: false
    help: The `declare(strict_types=1);` directive, when placed at the very top of a
      PHP file, enables strict mode for type declarations. In strict mode, if a
      value does not match the declared type, a `TypeError` is thrown instead of
      PHP attempting to coerce the value.
  - question: Which PHP 8.0 feature allows you to specify that a function parameter
      or return type can be one of several types?
    answers:
      - value: Union Types
        correct: true
      - value: Intersection Types
        correct: false
      - value: Generic Types
        correct: false
      - value: Mixed Types
        correct: false
    help: Union Types, introduced in PHP 8.0, allow you to declare that a variable
      can accept values of different types. For example, `int|float` means the
      variable can be either an integer or a float.
  - question: What is the primary difference between `public` and `protected`
      visibility in PHP classes?
    answers:
      - value: "`public` members are accessible from anywhere, while `protected` members
          are accessible only within the class itself and its child classes."
        correct: true
      - value: "`public` members are accessible only within the class, while `protected`
          members are accessible from anywhere."
        correct: false
      - value: "`public` members are for properties only, `protected` for methods only."
        correct: false
      - value: There is no functional difference; it's a matter of convention.
        correct: false
    help: "`public` members have the widest visibility. `protected` members are
      accessible within the class itself and by any class that inherits from it,
      but not from outside the class hierarchy."
  - question: Which of the following correctly defines an abstract method in an
      abstract class?
    answers:
      - value: |-
          ```php
          abstract class MyClass {
              abstract public function doSomething();
          }
          ```
        correct: true
      - value: |-
          ```php
          abstract class MyClass {
              public function abstract doSomething();
          }
          ```
        correct: false
      - value: |-
          ```php
          class MyClass {
              abstract public function doSomething();
          }
          ```
        correct: false
      - value: |-
          ```php
          abstract class MyClass {
              abstract private function doSomething();
          }
          ```
        correct: false
    help: Abstract methods are declared with the `abstract` keyword and must not
      contain an implementation. They must also define their visibility (public
      or protected, not private).
  - question: Which SPL class provides a double-linked list that can be used as a
      stack (LIFO) or a queue (FIFO)?
    answers:
      - value: "`SplDoublyLinkedList`"
        correct: true
      - value: "`SplStack`"
        correct: true
      - value: "`SplQueue`"
        correct: true
      - value: "`SplArray`"
        correct: false
    help: "`SplDoublyLinkedList` is the base class for `SplStack` and `SplQueue`.
      `SplStack` and `SplQueue` are specialized versions of
      `SplDoublyLinkedList` configured for LIFO and FIFO behavior respectively."
  - question: What is the purpose of the `__destruct()` magic method in PHP?
    answers:
      - value: It is called when the object is no longer referenced or when the script
          ends.
        correct: true
      - value: It is called immediately after the constructor.
        correct: false
      - value: It is used to explicitly delete an object from memory.
        correct: false
      - value: It is called when an error occurs within the object's methods.
        correct: false
    help: The destructor method `__destruct()` is called when the object is garbage
      collected, which typically happens when there are no more references to
      the object or at the end of script execution.
  - question: Which of the following is true about PHP's `E_NOTICE` error level?
    answers:
      - value: It indicates a run-time notice that the script encountered something that
          could indicate an error, but could also happen in the normal course of
          running a script.
        correct: true
      - value: It indicates a fatal run-time error that cannot be recovered from.
        correct: false
      - value: It indicates a compile-time parse error.
        correct: false
      - value: It indicates a warning that is not fatal but should be addressed.
        correct: false
    help: "`E_NOTICE` errors are minor issues that PHP encounters during runtime.
      They are typically non-critical and the script continues to execute, but
      they often point to potential bugs or bad practices."
  - question: In PHP 8.2, what is the correct way to define a read-only property?
    answers:
      - value: |-
          ```php
          class MyClass {
              public readonly string $name;

              public function __construct(string $name) {
                  $this->name = $name;
              }
          }
          ```
        correct: true
      - value: |-
          ```php
          class MyClass {
              public const string $name;
          }
          ```
        correct: false
      - value: |-
          ```php
          class MyClass {
              public final string $name;
          }
          ```
        correct: false
      - value: |-
          ```php
          class MyClass {
              public string $name { get; }
          }
          ```
        correct: false
    help: The `readonly` keyword, introduced in PHP 8.1, allows properties to be
      initialized only once (either at declaration or in the constructor). Once
      initialized, their value cannot be changed.
  - question: Which of the following correctly describes a PHP `Iterator`?
    answers:
      - value: An interface that allows an object to be iterated over using `foreach`.
        correct: true
      - value: A built-in function for looping through arrays.
        correct: false
      - value: A class that provides random access to elements in a collection.
        correct: false
      - value: A mechanism for lazy loading data from a database.
        correct: false
    help: The `Iterator` interface (part of SPL) specifies an interface for objects
      that can be iterated over, such as in a `foreach` loop. Classes
      implementing `Iterator` must provide `current()`, `key()`, `next()`,
      `rewind()`, and `valid()` methods.
  - question: What is the purpose of the `static` keyword when used with a class method?
    answers:
      - value: The method can be called without creating an instance of the class.
        correct: true
      - value: The method can only access static properties of the class.
        correct: false
      - value: The method becomes a global function.
        correct: false
      - value: The method's logic is shared across all instances of the class.
        correct: true
    help: Static methods belong to the class itself, not to any specific instance.
      They can be called directly on the class using the `::` operator (e.g.,
      `ClassName::method()`) and cannot access `$this`.
  - question: Which PHP 8.1 feature allows you to define constants within a class
      that can be used in property default values, static variable initializers,
      and attribute arguments?
    answers:
      - value: Final class constants
        correct: false
      - value: Readonly properties
        correct: false
      - value: Enums
        correct: true
      - value: First-class callable syntax
        correct: false
    help: Enums (enumerations), introduced in PHP 8.1, allow you to define a type
      that has a fixed set of possible values. Enum cases are essentially class
      constants and can be used in contexts where constant expressions are
      expected.
  - question: What is the main advantage of using `PDO` (PHP Data Objects) over
      older database extensions like `mysql_` or `mysqli_` (without prepared
      statements)?
    answers:
      - value: PDO provides a consistent interface for accessing various databases.
        correct: true
      - value: PDO inherently prevents SQL injection through prepared statements.
        correct: true
      - value: PDO is significantly faster for all database operations.
        correct: false
      - value: PDO automatically handles database connection pooling.
        correct: false
    help: PDO offers a lightweight, consistent interface for connecting to various
      databases and supports prepared statements, which are crucial for
      preventing SQL injection attacks. While performance can be good, it's not
      universally faster than optimized `mysqli` usage.
  - question: Which of the following PHP extensions is commonly used for working
      with images (e.g., creating thumbnails, adding watermarks)?
    answers:
      - value: GD
        correct: true
      - value: cURL
        correct: false
      - value: MBString
        correct: false
      - value: Intl
        correct: false
    help: The GD (Graphics Draw) extension provides image manipulation capabilities,
      including creating, modifying, and outputting images in various formats.
  - question: What is the purpose of the `use` keyword inside a closure's definition
      in PHP?
    answers:
      - value: To import variables from the parent scope into the closure's scope.
        correct: true
      - value: To define a new namespace for the closure.
        correct: false
      - value: To specify which classes the closure can access.
        correct: false
      - value: To declare a variable as global within the closure.
        correct: false
    help: The `use` keyword allows a closure to access variables from the scope in
      which it was created. These variables are imported by value by default,
      but can be imported by reference using `&`.
  - question: Which of the following is a valid way to catch multiple types of
      exceptions in a single `catch` block in PHP 8.2?
    answers:
      - value: |-
          ```php
          try {
              // ...
          } catch (MyExceptionA | MyExceptionB $e) {
              // handle both exceptions
          }
          ```
        correct: true
      - value: |-
          ```php
          try {
              // ...
          } catch (MyExceptionA, MyExceptionB $e) {
              // handle both exceptions
          }
          ```
        correct: false
      - value: |-
          ```php
          try {
              // ...
          } catch (array $e) {
              // handle both exceptions
          }
          ```
        correct: false
      - value: |-
          ```php
          try {
              // ...
          } catch (MyExceptionA && MyExceptionB $e) {
              // handle both exceptions
          }
          ```
        correct: false
    help: PHP 7.1 introduced the ability to catch multiple exception types using the
      `|` (bitwise OR) operator in a single `catch` block.
  - question: What is the purpose of the `finally` block in a `try-catch-finally`
      statement?
    answers:
      - value: It always executes, regardless of whether an exception was thrown or
          caught.
        correct: true
      - value: It executes only if no exception was thrown.
        correct: false
      - value: It executes only if an exception was caught.
        correct: false
      - value: It is used to re-throw an exception.
        correct: false
    help: The `finally` block is optional and is executed after the `try` and
      `catch` blocks, regardless of whether an exception was thrown or caught.
      It's typically used for cleanup code.
  - question: Which SPL class provides an array that allows you to specify a fixed
      size, and attempting to add more elements than its capacity will result in
      an error?
    answers:
      - value: "`SplFixedArray`"
        correct: true
      - value: "`SplArray`"
        correct: false
      - value: "`SplHeap`"
        correct: false
      - value: "`SplQueue`"
        correct: false
    help: "`SplFixedArray` is a specialized array that allows you to pre-allocate a
      fixed number of elements. Once its size is set, it cannot be changed
      without creating a new instance or resizing it explicitly."
  - question: What is the significance of the `parent` keyword in PHP OOP?
    answers:
      - value: It is used to call a method or access a property from the parent class.
        correct: true
      - value: It refers to the current object's instance.
        correct: false
      - value: It is used to define an abstract method.
        correct: false
      - value: It defines a new class that inherits from another.
        correct: false
    help: The `parent` keyword is used to refer to the parent class. It is commonly
      used to call a parent class's constructor or override a parent method
      while still calling the original implementation.
  - question: Which PHP 8.1 feature allows you to define a type that is a
      combination of two or more types, where a value must be of *all* specified
      types simultaneously?
    answers:
      - value: Intersection Types
        correct: true
      - value: Union Types
        correct: false
      - value: Mixed Types
        correct: false
      - value: Generic Types
        correct: false
    help: Intersection Types (`TypeA&TypeB`), introduced in PHP 8.1, specify that a
      value must be an instance of *all* the declared interfaces or classes.
      This is distinct from Union Types, where a value can be *any one* of the
      specified types.
  - question: Which of the following is a valid way to define a class constant in PHP?
    answers:
      - value: |-
          ```php
          class MyClass {
              const MY_CONSTANT = 'value';
          }
          ```
        correct: true
      - value: |-
          ```php
          class MyClass {
              public static $MY_CONSTANT = 'value';
          }
          ```
        correct: false
      - value: |-
          ```php
          class MyClass {
              define('MY_CONSTANT', 'value');
          }
          ```
        correct: false
      - value: |-
          ```php
          class MyClass {
              readonly string MY_CONSTANT = 'value';
          }
          ```
        correct: false
    help: Class constants are defined using the `const` keyword within a class. They
      are static properties whose value cannot be changed.
  - question: What is the purpose of the `__call()` magic method in PHP?
    answers:
      - value: It is triggered when invoking inaccessible methods in an object context.
        correct: true
      - value: It is triggered when calling a static method that is not defined.
        correct: false
      - value: It is triggered when an object is used as a function.
        correct: false
      - value: It is triggered when accessing an undefined property.
        correct: false
    help: The `__call()` method is a magic method that is invoked when a script
      attempts to call a method that is not defined or is inaccessible (e.g.,
      private or protected from outside access) in an object context.
  - question: Which SPL class can be used to iterate over the contents of a directory?
    answers:
      - value: "`DirectoryIterator`"
        correct: true
      - value: "`FileIterator`"
        correct: false
      - value: "`FolderIterator`"
        correct: false
      - value: "`SplDir`"
        correct: false
    help: The `DirectoryIterator` class provides a simple way to iterate over the
      contents of a directory, treating each entry as an object with various
      methods for information retrieval.
  - question: What is the primary role of the `composer.json` file in a PHP project?
    answers:
      - value: To declare project dependencies and metadata for Composer.
        correct: true
      - value: To configure PHP runtime settings.
        correct: false
      - value: To define database connection parameters.
        correct: false
      - value: To specify web server routing rules.
        correct: false
    help: The `composer.json` file is the heart of a Composer-managed PHP project.
      It lists the project's dependencies, autoloading rules, scripts, and other
      metadata.
  - question: Which of the following is a correct way to define a class in PHP?
    answers:
      - value: |-
          ```php
          class MyClass {
              // properties and methods
          }
          ```
        correct: true
      - value: |-
          ```php
          function class MyClass {
              // properties and methods
          }
          ```
        correct: false
      - value: |-
          ```php
          object MyClass {
              // properties and methods
          }
          ```
        correct: false
      - value: |-
          ```php
          new class MyClass {
              // properties and methods
          }
          ```
        correct: false
    help: Classes are defined using the `class` keyword followed by the class name
      and a block of code enclosed in curly braces, containing properties and
      methods.
  - question: What is the purpose of the `__clone()` magic method?
    answers:
      - value: It is called when an object is duplicated using the `clone` keyword.
        correct: true
      - value: It is used to create a new instance of a class.
        correct: false
      - value: It is called when an object is serialized.
        correct: false
      - value: It prevents an object from being duplicated.
        correct: false
    help: The `__clone()` method is called when an object is cloned. It allows you
      to perform deep copies of objects or adjust properties in the new cloned
      object.
  - question: Which PHP 8.0 feature allows you to define a function or method that
      takes a variable number of arguments, which are then passed as an array?
    answers:
      - value: Named Arguments
        correct: false
      - value: Attributes
        correct: false
      - value: Match Expression
        correct: false
      - value: Variadic Functions (using `...`)
        correct: true
    help: Variadic functions, using the `...` operator, allow a function to accept
      an arbitrary number of arguments. These arguments are then available as an
      array within the function body.
  - question: What is the purpose of the `declare(encoding='UTF-8');` directive?
    answers:
      - value: It specifies the encoding for the current PHP script, affecting how
          string literals are interpreted.
        correct: true
      - value: It sets the default character encoding for all HTTP responses.
        correct: false
      - value: It converts all input strings to UTF-8 automatically.
        correct: false
      - value: It is deprecated in PHP 8.2.
        correct: false
    help: The `declare(encoding='...');` directive specifies the encoding of the
      script. This affects how string literals and other string-related
      operations are handled within that specific file.
  - question: Which of the following is true about PHP's `E_WARNING` error level?
    answers:
      - value: It indicates a run-time warning, which is a non-fatal error.
        correct: true
      - value: It causes script execution to terminate immediately.
        correct: false
      - value: It is only triggered by syntax errors.
        correct: false
      - value: It is less severe than `E_NOTICE`.
        correct: false
    help: "`E_WARNING` indicates a non-fatal error. While it suggests a problem that
      should be addressed, the script will continue to execute. It is generally
      more severe than `E_NOTICE`."
  - question: What is the purpose of the `static` keyword when used with a class
      property?
    answers:
      - value: The property belongs to the class itself, not to any specific instance of
          the class.
        correct: true
      - value: The property can only be accessed from within static methods.
        correct: false
      - value: The property's value cannot be changed after initialization.
        correct: false
      - value: The property is automatically serialized when the object is saved.
        correct: false
    help: Static properties are shared across all instances of a class and can be
      accessed directly using the class name and the `::` operator (e.g.,
      `ClassName::$property`). They do not require an object instance.
  - question: Which of the following SPL interfaces is used to make an object
      countable using the `count()` function?
    answers:
      - value: "`Countable`"
        correct: true
      - value: "`Sizeable`"
        correct: false
      - value: "`Measurable`"
        correct: false
      - value: "`LengthAware`"
        correct: false
    help: The `Countable` interface (part of SPL) requires a class to implement the
      `count()` method, allowing instances of that class to be passed to the
      global `count()` function.
