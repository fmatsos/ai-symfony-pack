category: PHP

questions:
  -
    question: >
      Which of the following is a new feature introduced in PHP 8.2?
    answers:
      - { value: 'Readonly classes', correct: true }
      - { value: 'Named arguments', correct: false }
      - { value: 'Match expression', correct: false }
      - { value: 'Attributes', correct: false }
    help: |
      PHP 8.2 introduced readonly classes, allowing all properties within a class to be implicitly readonly.
      https://www.php.net/manual/en/migration82.new-features.php#migration82.new-features.readonly-classes

  -
    question: |
      Consider the following PHP code:

      ```php
      class Animal {
          public function makeSound() {
              return "Generic sound";
          }
      }

      class Dog extends Animal {
          public function makeSound() {
              return "Woof";
          }
      }

      $animal = new Dog();
      echo $animal->makeSound();
      ```

      What will be the output of this code?
    answers:
      - { value: 'Woof', correct: true }
      - { value: 'Generic sound', correct: false }
      - { value: 'Fatal error', correct: false }
      - { value: 'Parse error', correct: false }
    help: |
      This demonstrates method overriding in object-oriented programming. The `Dog` class overrides the `makeSound` method of its parent `Animal` class.
      https://www.php.net/manual/en/language.oop5.inheritance.php

  -
    question: |
      Given the following file structure:

      ```
      project/
      ├── src/
      │   ├── Controller/
      │   │   └── HomeController.php
      │   └── Service/
      │       └── UserService.php
      └── public/
          └── index.php
      ```

      If `HomeController.php` contains `namespace App\Controller;` and `UserService.php` contains `namespace App\Service;`, how would you correctly use `UserService` within `HomeController.php`?
    answers:
      - { value: '`use App\Service\UserService;`', correct: true }
      - { value: '`require_once ''../Service/UserService.php'';`', correct: false }
      - { value: '`use UserService;`', correct: false }
      - { value: '`new \App\Service\UserService();`', correct: true }
    help: |
      Namespaces help organize code and prevent naming collisions. The `use` keyword imports a class from a namespace, making it accessible by its short name. You can also use the fully qualified name directly.
      https://www.php.net/manual/en/language.namespaces.importing.php

  -
    question: >
      Which statement about PHP interfaces is true?
    answers:
      - { value: 'A class can implement multiple interfaces.', correct: true }
      - { value: 'Interfaces can define properties.', correct: false }
      - { value: 'All methods in an interface must be declared as `public`.', correct: true }
      - { value: 'Interfaces can contain concrete method implementations.', correct: false }
      - { value: 'Interfaces can extend classes.', correct: false }
    help: |
      Interfaces define a contract for classes to implement. They can only declare methods (without bodies) and constants. All methods declared in an interface must be public.
      https://www.php.net/manual/en/language.oop5.interfaces.php

  -
    question: |
      What will be the output of the following PHP code?

      ```php
      $multiplier = 2;
      $numbers = [1, 2, 3];

      $newNumbers = array_map(function ($n) use ($multiplier) {
          return $n * $multiplier;
      }, $numbers);

      print_r($newNumbers);
      ```
    answers:
      - { value: '`Array ( [0] => 2 [1] => 4 [2] => 6 )`', correct: true }
      - { value: '`Array ( [0] => 1 [1] => 2 [2] => 3 )`', correct: false }
      - { value: '`Fatal error: Undefined variable $multiplier`', correct: false }
      - { value: '`Array ( [0] => 1 [1] => 4 [2] => 9 )`', correct: false }
    help: |
      Anonymous functions (or closures) can inherit variables from the parent scope using the `use` construct. `array_map` applies a callback to each element of an array.
      https://www.php.net/manual/en/functions.anonymous.php

  -
    question: >
      Which of the following is a valid characteristic of abstract classes in PHP?
    answers:
      - { value: 'An abstract class cannot be instantiated directly.', correct: true }
      - { value: 'An abstract class must contain at least one abstract method.', correct: false }
      - { value: 'Abstract methods must be implemented by non-abstract child classes.', correct: true }
      - { value: 'Abstract classes can define private abstract methods.', correct: false }
    help: |
      Abstract classes serve as blueprints for other classes. They cannot be instantiated on their own, and any abstract methods they declare must be implemented by concrete (non-abstract) child classes.
      https://www.php.net/manual/en/language.oop5.abstract.php

  -
    question: >
      In PHP's exception handling, what is the purpose of the `finally` block?
    answers:
      - { value: 'It executes only if an exception is caught.', correct: false }
      - { value: 'It executes regardless of whether an exception was thrown or caught.', correct: true }
      - { value: 'It executes only if no exception was thrown.', correct: false }
      - { value: 'It is used to re-throw an exception.', correct: false }
    help: |
      The `finally` block is optional and executes after the `try` and `catch` blocks, regardless of whether an exception was thrown or caught. It's often used for cleanup operations.
      https://www.php.net/manual/en/language.exceptions.php#language.exceptions.finally

  -
    question: >
      When using traits in PHP, what happens if a class uses two traits that both declare a method with the same name?
    answers:
      - { value: 'A fatal error occurs unless the conflict is explicitly resolved.', correct: true }
      - { value: 'The method from the first trait listed in the `use` statement is used.', correct: false }
      - { value: 'The method from the second trait listed in the `use` statement is used.', correct: false }
      - { value: 'PHP automatically merges the methods.', correct: false }
    help: |
      When a naming conflict occurs between methods from different traits used by the same class, PHP requires explicit conflict resolution using the `insteadof` operator.
      https://www.php.net/manual/en/language.oop5.traits.php#language.oop5.traits.conflict

  -
    question: >
      What is the primary purpose of PHP extensions?
    answers:
      - { value: 'To provide additional functionality not built into the core PHP language.', correct: true }
      - { value: 'To replace core PHP functionalities with custom implementations.', correct: false }
      - { value: 'To allow PHP code to be compiled into standalone executables.', correct: false }
      - { value: 'To manage PHP dependencies in a project.', correct: false }
    help: |
      PHP extensions are compiled libraries that provide additional functionality to PHP, such as database access (PDO, MySQLi), image manipulation (GD), or XML parsing.
      https://www.php.net/manual/en/intro.extensions.php

  -
    question: >
      Which SPL (Standard PHP Library) interface is designed for objects that can be iterated over, such as arrays or collections?
    answers:
      - { value: '`Traversable`', correct: true }
      - { value: '`IteratorAggregate`', correct: true }
      - { value: '`ArrayAccess`', correct: false }
      - { value: '`Countable`', correct: false }
    help: |
      `Traversable` is the base interface for all traversable classes. `IteratorAggregate` is an interface for external iterators, allowing an object to return an iterator for itself.
      https://www.php.net/manual/en/class.traversable.php
      https://www.php.net/manual/en/class.iteratoraggregate.php

  -
    question: |
      Which of the following is the correct way to declare a typed property in a PHP class, ensuring it only accepts string values?
    answers:
      - { value: '`private string $name;`', correct: true }
      - { value: '`private var string $name;`', correct: false }
      - { value: '`private $name: string;`', correct: false }
      - { value: '`private (string) $name;`', correct: false }
    help: |
      PHP 7.4 introduced typed properties, allowing developers to declare the type of a class property.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.properties

  -
    question: |
      What will be the output of the following PHP 8.0 code snippet?

      ```php
      function greet(string $name): string
      {
          return match ($name) {
              'Alice' => 'Hello Alice!',
              'Bob' => 'Hi Bob!',
              default => 'Hello stranger!',
          };
      }

      echo greet('Charlie');
      ```
    answers:
      - { value: 'Hello stranger!', correct: true }
      - { value: 'Fatal error', correct: false }
      - { value: 'Hi Bob!', correct: false }
      - { value: 'Hello Charlie!', correct: false }
    help: |
      The `match` expression (introduced in PHP 8.0) is similar to `switch` but returns a value and requires exhaustive checks or a `default` arm.
      https://www.php.net/manual/en/control-structures.match.php

  -
    question: >
      What is the purpose of the `__autoload()` function in PHP?
    answers:
      - { value: 'It is a magic method that is automatically called when an undefined class is used.', correct: true }
      - { value: 'It is used to explicitly load a PHP file.', correct: false }
      - { value: 'It is used to register a custom autoloader function.', correct: false }
      - { value: 'It is a deprecated function for class loading, replaced by `spl_autoload_register()`.', correct: true }
    help: |
      `__autoload()` is a magic method that was used for automatic class loading. It has been deprecated in favor of `spl_autoload_register()` for more flexible and robust autoloading.
      https://www.php.net/manual/en/language.oop5.autoload.php

  -
    question: |
      Which of the following is true regarding `final` classes in PHP?
    answers:
      - { value: 'A `final` class cannot be extended.', correct: true }
      - { value: 'A `final` class cannot implement interfaces.', correct: false }
      - { value: 'Methods within a `final` class cannot be `final`.', correct: false }
      - { value: 'A `final` class must contain at least one `final` method.', correct: false }
    help: |
      The `final` keyword prevents a class from being inherited. It can also be applied to methods to prevent them from being overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: |
      Consider the following PHP code:

      ```php
      namespace MyProject\Utils;

      class Helper {
          public static function formatString(string $str): string {
              return strtoupper($str);
          }
      }

      namespace MyProject\App;

      use MyProject\Utils\Helper;

      echo Helper::formatString('hello');
      ```

      What will be the output of this code?
    answers:
      - { value: 'HELLO', correct: true }
      - { value: 'Fatal error: Class ''Helper'' not found', correct: false }
      - { value: 'Fatal error: Call to undefined method Helper::formatString()', correct: false }
      - { value: 'hello', correct: false }
    help: |
      The `use` statement imports the `Helper` class from the `MyProject\Utils` namespace into the `MyProject\App` namespace, allowing it to be used directly.
      https://www.php.net/manual/en/language.namespaces.importing.php

  -
    question: >
      What is the purpose of the `static` keyword when declaring a method in a PHP class?
    answers:
      - { value: 'The method can be called without creating an instance of the class.', correct: true }
      - { value: 'The method can only access static properties of the class.', correct: false }
      - { value: 'The method belongs to the class itself, not to any specific object.', correct: true }
      - { value: 'The method cannot be overridden by child classes.', correct: false }
    help: |
      Static methods can be called directly on the class without instantiating an object. They cannot access non-static properties or methods using `$this`.
      https://www.php.net/manual/en/language.oop5.static.php

  -
    question: |
      Which of the following is the correct way to catch multiple types of exceptions in a single `catch` block in PHP 8.0+?
    answers:
      - { value: '`catch (ExceptionTypeA | ExceptionTypeB $e)`', correct: true }
      - { value: '`catch (ExceptionTypeA, ExceptionTypeB $e)`', correct: false }
      - { value: '`catch (ExceptionTypeA || ExceptionTypeB $e)`', correct: false }
      - { value: '`catch (ExceptionTypeA and ExceptionTypeB $e)`', correct: false }
    help: |
      PHP 8.0 introduced the ability to catch multiple exceptions in a single `catch` block using the `|` (bitwise OR) operator.
      https://www.php.net/manual/en/language.exceptions.php#language.exceptions.multicatch

  -
    question: >
      What is the primary benefit of using traits in PHP?
    answers:
      - { value: 'To enable code reuse in single inheritance languages like PHP.', correct: true }
      - { value: 'To completely replace inheritance for all code sharing.', correct: false }
      - { value: 'To enforce strict type checking at compile time.', correct: false }
      - { value: 'To define abstract methods that must be implemented by child classes.', correct: false }
    help: |
      Traits are a mechanism for code reuse in single inheritance languages. They allow a class to use methods from multiple traits, effectively mimicking multiple inheritance for behavior.
      https://www.php.net/manual/en/language.oop5.traits.php

  -
    question: >
      Which SPL class provides a way to iterate over directory contents?
    answers:
      - { value: '`DirectoryIterator`', correct: true }
      - { value: '`FilesystemIterator`', correct: true }
      - { value: '`RecursiveDirectoryIterator`', correct: true }
      - { value: '`FileIterator`', correct: false }
    help: |
      The SPL provides several iterator classes for working with files and directories, including `DirectoryIterator`, `FilesystemIterator`, and `RecursiveDirectoryIterator`.
      https://www.php.net/manual/en/spl.files.php

  -
    question: |
      What will be the output of the following PHP 8.1 code?

      ```php
      enum Status: string
      {
          case Active = 'active';
          case Inactive = 'inactive';
      }

      echo Status::Active->value;
      ```
    answers:
      - { value: 'active', correct: true }
      - { value: 'Status::Active', correct: false }
      - { value: 'Fatal error', correct: false }
      - { value: '1', correct: false }
    help: |
      PHP 8.1 introduced Enums (enumerations), which are a special kind of class that represents a fixed set of named values. Backed Enums (like `Status: string`) have an associated scalar value.
      https://www.php.net/manual/en/language.enumerations.php

  -
    question: >
      Which magic method is automatically called when an object is treated as a string (e.g., when `echo`ing it)?
    answers:
      - { value: '`__toString()`', correct: true }
      - { value: '`__invoke()`', correct: false }
      - { value: '`__call()`', correct: false }
      - { value: '`__get()`', correct: false }
    help: |
      The `__toString()` method allows a class to decide how it will react when it is converted to a string.
      https://www.php.net/manual/en/language.oop5.magic.php#object.tostring

  -
    question: |
      Consider the following PHP code:

      ```php
      namespace My\App;

      class MyClass {
          public function doSomething() {
              return __NAMESPACE__;
          }
      }

      $obj = new MyClass();
      echo $obj->doSomething();
      ```

      What will be the output?
    answers:
      - { value: 'My\App', correct: true }
      - { value: 'MyClass', correct: false }
      - { value: '__NAMESPACE__', correct: false }
      - { value: 'Fatal error', correct: false }
    help: |
      The `__NAMESPACE__` magic constant returns the name of the current namespace.
      https://www.php.net/manual/en/language.namespaces.constants.php

  -
    question: >
      Which of the following is a valid way to define a constant within a PHP class?
    answers:
      - { value: '`const MY_CONSTANT = ''value'';`', correct: true }
      - { value: '`define(''MY_CONSTANT'', ''value'');`', correct: false }
      - { value: '`public const MY_CONSTANT = ''value'';`', correct: true }
      - { value: '`static $MY_CONSTANT = ''value'';`', correct: false }
    help: |
      Class constants are defined using the `const` keyword. They are implicitly public but can also be explicitly declared with visibility keywords (public, protected, private) since PHP 7.1.
      https://www.php.net/manual/en/language.oop5.constants.php

  -
    question: |
      What is the correct way to define a PHP 8.0 constructor property promotion?

      ```php
      class User {
          public function __construct(
              // ???
          ) {}
      }
      ```
    answers:
      - { value: '`public string $name, private int $age`', correct: true }
      - { value: '`string $name, int $age`', correct: false }
      - { value: '`public $name: string, private $age: int`', correct: false }
      - { value: '`public $name, private $age`', correct: false }
    help: |
      Constructor property promotion (PHP 8.0) allows defining and initializing class properties directly in the constructor signature. Visibility keywords are required.
      https://www.php.net/manual/en/language.oop5.decon.php#language.oop5.decon.constructor.promotion

  -
    question: >
      When should you use `throw new Error()` instead of `throw new Exception()` in modern PHP?
    answers:
      - { value: 'For internal PHP errors that indicate unrecoverable problems.', correct: true }
      - { value: 'For all types of errors in your application logic.', correct: false }
      - { value: 'When you want to catch the error using a `try-catch` block.', correct: false }
      - { value: 'When dealing with user input validation failures.', correct: false }
    help: |
      `Error` (and its subclasses) represent internal PHP errors that are generally unrecoverable, such as `TypeError` or `ParseError`. `Exception` is for recoverable errors in application logic.
      https://www.php.net/manual/en/class.error.php

  -
    question: >
      Which of the following is true about anonymous classes in PHP?
    answers:
      - { value: 'They are useful for creating one-off objects.', correct: true }
      - { value: 'They can be extended by other classes.', correct: false }
      - { value: 'They can implement interfaces.', correct: true }
      - { value: 'They must be assigned to a variable immediately after creation.', correct: false }
    help: |
      Anonymous classes (PHP 7.0+) are classes without a name. They are useful for simple, one-off objects and can extend classes or implement interfaces.
      https://www.php.net/manual/en/language.oop5.anonymous.php

  -
    question: >
      What is the purpose of the `use function` and `use const` statements in PHP?
    answers:
      - { value: 'To import functions and constants from other namespaces into the current namespace.', correct: true }
      - { value: 'To define new global functions and constants.', correct: false }
      - { value: 'To declare that a function or constant is deprecated.', correct: false }
      - { value: 'To make functions and constants available only within a specific class.', correct: false }
    help: |
      `use function` and `use const` (PHP 5.6+) allow importing individual functions and constants from other namespaces, similar to how `use` imports classes.
      https://www.php.net/manual/en/language.namespaces.importing.php#language.namespaces.importing.functions

  -
    question: |
      Which SPL class can be used to implement a stack (LIFO - Last In, First Out) data structure?
    answers:
      - { value: '`SplStack`', correct: true }
      - { value: '`SplQueue`', correct: false }
      - { value: '`SplHeap`', correct: false }
      - { value: '`SplFixedArray`', correct: false }
    help: |
      `SplStack` provides the functionality of a stack, where elements are added and removed from the same end (LIFO).
      https://www.php.net/manual/en/class.splstack.php

  -
    question: >
      What is the significance of the `#[Deprecated]` attribute (PHP 8.0+)?
    answers:
      - { value: 'It marks a class, method, or property as deprecated, indicating it will be removed in future versions.', correct: true }
      - { value: 'It prevents the marked code from being executed.', correct: false }
      - { value: 'It automatically removes the marked code during compilation.', correct: false }
      - { value: 'It is a comment that has no functional effect.', correct: false }
    help: |
      Attributes (PHP 8.0+) provide a way to add metadata to classes, methods, properties, functions, and parameters. The `#[Deprecated]` attribute is a built-in attribute used to signal deprecation.
      https://www.php.net/manual/en/language.attributes.php

  -
    question: |
      Which of the following is a valid way to define a read-only property in PHP 8.1?
    answers:
      - { value: '`public readonly string $name;`', correct: true }
      - { value: '`public const string $name;`', correct: false }
      - { value: '`public fixed string $name;`', correct: false }
      - { value: '`public string $name readonly;`', correct: false }
    help: |
      PHP 8.1 introduced the `readonly` keyword for properties, allowing them to be initialized only once (either at declaration or in the constructor).
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly

  -
    question: >
      What is the purpose of the `parent::` keyword in PHP?
    answers:
      - { value: 'To call a method or access a property from the parent class.', correct: true }
      - { value: 'To define a new parent class.', correct: false }
      - { value: 'To refer to the current class instance.', correct: false }
      - { value: 'To check if a class has a parent.', correct: false }
    help: |
      `parent::` is used to refer to the parent class, typically to call an overridden method or access a parent's static property/method.
      https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php

  -
    question: |
      Which of the following statements about PHP's `Throwable` interface is true?
    answers:
      - { value: 'Both `Exception` and `Error` classes implement the `Throwable` interface.', correct: true }
      - { value: 'You can directly `throw new Throwable();`.', correct: false }
      - { value: 'It was introduced in PHP 7 to unify error and exception handling.', correct: true }
      - { value: 'It is only for catching fatal errors.', correct: false }
    help: |
      The `Throwable` interface was introduced in PHP 7.0 to be the common base interface for both `Exception` and `Error` classes, allowing a single `catch (Throwable $e)` block to handle both.
      https://www.php.net/manual/en/class.throwable.php

  -
    question: >
      What is the purpose of the `__invoke()` magic method in PHP?
    answers:
      - { value: 'It is called when an object is used as a function.', correct: true }
      - { value: 'It is called when an object is cloned.', correct: false }
      - { value: 'It is called when a non-existent method is called on an object.', correct: false }
      - { value: 'It is called when an object is serialized.', correct: false }
    help: |
      The `__invoke()` method is called when a script tries to call an object as a function.
      https://www.php.net/manual/en/language.oop5.magic.php#object.invoke

  -
    question: >
      Which SPL class provides an interface for objects that can be accessed like arrays (e.g., using `[]` syntax)?
    answers:
      - { value: '`ArrayAccess`', correct: true }
      - { value: '`Iterator`', correct: false }
      - { value: '`Countable`', correct: false }
      - { value: '`Serializable`', correct: false }
    help: |
      The `ArrayAccess` interface allows objects to be accessed as arrays. It requires implementing methods like `offsetExists`, `offsetGet`, `offsetSet`, and `offsetUnset`.
      https://www.php.net/manual/en/class.arrayaccess.php

  -
    question: |
      Consider the following PHP 8.1 code:

      ```php
      class MyClass {
          public function __construct(
              public readonly string $name
          ) {}
      }

      $obj = new MyClass('Test');
      // $obj->name = 'New Test'; // Attempt to reassign

      echo $obj->name;
      ```

      What happens if the commented line `$obj->name = 'New Test';` is uncommented and executed?
    answers:
      - { value: 'A `readonly` property cannot be reinitialized after it has been initialized.', correct: true }
      - { value: 'The value of `$obj->name` will be updated to ''New Test''.', correct: false }
      - { value: 'A fatal error will occur because `readonly` properties cannot be modified at all.', correct: false }
      - { value: 'A warning will be issued, but the value will change.', correct: false }
    help: |
      Readonly properties can only be initialized once, either at declaration or in the constructor. Any subsequent attempt to modify them will result in a `Error` exception.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly

  -
    question: >
      What is the purpose of the `declare(strict_types=1);` statement in PHP?
    answers:
      - { value: 'It enables strict type checking for scalar type declarations in the current file.', correct: true }
      - { value: 'It makes all type declarations in the entire application strict.', correct: false }
      - { value: 'It forces PHP to use a specific encoding for the file.', correct: false }
      - { value: 'It prevents type juggling for all variables.', correct: false }
    help: |
      `declare(strict_types=1);` must be the very first statement in a file (after the opening `<?php` tag) to enable strict mode for scalar type declarations within that file.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.strict

  -
    question: |
      Which of the following is the correct way to define a type alias for a union type in PHP 8.2?
    answers:
      - { value: '`type MyType = string|int;`', correct: true }
      - { value: '`typedef MyType = string|int;`', correct: false }
      - { value: '`alias MyType = string|int;`', correct: false }
      - { value: '`using MyType = string|int;`', correct: false }
    help: |
      PHP 8.2 introduced `type` aliases, allowing developers to define aliases for existing types, including union and intersection types, improving readability.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.type-aliases

  -
    question: >
      What is the difference between `interface` and `abstract class` in PHP?
    answers:
      - { value: 'An interface can only declare methods, while an abstract class can have concrete methods and properties.', correct: true }
      - { value: 'A class can implement multiple interfaces but can only extend one abstract class.', correct: true }
      - { value: 'Interfaces define a contract, while abstract classes provide a partial implementation.', correct: true }
      - { value: 'Abstract classes can be instantiated, but interfaces cannot.', correct: false }
    help: |
      Interfaces define a contract (what a class must do) without implementation. Abstract classes can have both abstract and concrete methods, and can have properties, providing a partial implementation.
      https://www.php.net/manual/en/language.oop5.interfaces.php
      https://www.php.net/manual/en/language.oop5.abstract.php

  -
    question: |
      What will be the output of the following PHP code, demonstrating a closure?

      ```php
      function createGreeter(string $greeting) {
          return function (string $name) use ($greeting) {
              return "$greeting, $name!";
          };
      }

      $sayHello = createGreeter('Hello');
      echo $sayHello('Alice');
      ```
    answers:
      - { value: 'Hello, Alice!', correct: true }
      - { value: 'Fatal error', correct: false }
      - { value: 'Hello, !', correct: false }
      - { value: 'Alice', correct: false }
    help: |
      This example shows a higher-order function returning a closure. The closure "closes over" the `$greeting` variable from its lexical scope using `use`.
      https://www.php.net/manual/en/functions.anonymous.php

  -
    question: >
      Which SPL class is designed to provide a fixed-size array that cannot grow or shrink?
    answers:
      - { value: '`SplFixedArray`', correct: true }
      - { value: '`ArrayObject`', correct: false }
      - { value: '`SplDoublyLinkedList`', correct: false }
      - { value: '`SplQueue`', correct: false }
    help: |
      `SplFixedArray` provides a fixed-size array that is faster than a regular PHP array for certain use cases because its size cannot change after creation.
      https://www.php.net/manual/en/class.splfixedarray.php

  -
    question: >
      What is the purpose of the `#[AllowDynamicProperties]` attribute (PHP 8.2+)?
    answers:
      - { value: 'It explicitly allows dynamic properties on a class, overriding the default deprecation warning.', correct: true }
      - { value: 'It prevents any dynamic properties from being added to a class.', correct: false }
      - { value: 'It enables a class to be used as a DTO (Data Transfer Object).', correct: false }
      - { value: 'It is used to define properties that can change their type at runtime.', correct: false }
    help: |
      In PHP 8.2, dynamic properties were deprecated. `#[AllowDynamicProperties]` can be added to a class to explicitly allow them and suppress the deprecation warning.
      https://www.php.net/manual/en/migration82.deprecated.php#migration82.deprecated.dynamic-properties

  -
    question: |
      What will be the output of the following PHP 8.0 code?

      ```php
      class MyClass {
          public function __construct(
              private int $value
          ) {}

          public function getValue(): int {
              return $this->value;
          }
      }

      $obj = new MyClass(123);
      echo $obj->getValue();
      ```
    answers:
      - { value: '123', correct: true }
      - { value: 'Fatal error', correct: false }
      - { value: 'Undefined property: MyClass::$value', correct: false }
      - { value: 'Parse error', correct: false }
    help: |
      This demonstrates constructor property promotion (PHP 8.0), where properties are declared and initialized directly in the constructor signature.
      https://www.php.net/manual/en/language.oop5.decon.php#language.oop5.decon.constructor.promotion

  -
    question: >
      Which of the following is a valid use case for the `static` keyword within a class method, referring to the late static binding?
    answers:
      - { value: '`static::method()` to call a method from the class that was originally called at runtime.', correct: true }
      - { value: '`self::method()` to call a method from the class where the method was defined.', correct: false }
      - { value: '`$this->method()` to call a method on the current object instance.', correct: false }
      - { value: '`parent::method()` to call a method from the immediate parent class.', correct: false }
    help: |
      `static::` (late static binding) refers to the class that was originally called at runtime, even if the method is inherited. `self::` refers to the class where the method is defined.
      https://www.php.net/manual/en/language.oop5.late-static-bindings.php

  -
    question: >
      What is the purpose of the `__debugInfo()` magic method?
    answers:
      - { value: 'It is called when `var_dump()` is used on an object, allowing customization of debug output.', correct: true }
      - { value: 'It is used to log debug messages to a file.', correct: false }
      - { value: 'It is called when an object is converted to a string for debugging.', correct: false }
      - { value: 'It provides information about the object''s properties and methods at runtime.', correct: false }
    help: |
      The `__debugInfo()` method is called when `var_dump()` is used on an object. It allows you to customize the information that is displayed during debugging.
      https://www.php.net/manual/en/language.oop5.magic.php#object.debuginfo

  -
    question: >
      Which of the following is a core concept of Object-Oriented Programming (OOP)?
    answers:
      - { value: 'Encapsulation', correct: true }
      - { value: 'Inheritance', correct: true }
      - { value: 'Polymorphism', correct: true }
      - { value: 'Procedural programming', correct: false }
    help: |
      The three main pillars of OOP are Encapsulation (bundling data and methods that operate on the data), Inheritance (creating new classes from existing ones), and Polymorphism (objects of different classes responding to the same method call in different ways).
      https://www.php.net/manual/en/language.oop5.basic.php

  -
    question: >
      What is the primary benefit of using `spl_autoload_register()` over `__autoload()`?
    answers:
      - { value: 'It allows multiple autoloader functions to be registered and chained.', correct: true }
      - { value: 'It is faster than `__autoload()`.', correct: false }
      - { value: 'It automatically loads all classes in a project without configuration.', correct: false }
      - { value: 'It is the only way to load classes from composer.', correct: false }
    help: |
      `spl_autoload_register()` provides a more flexible autoloading mechanism by allowing multiple autoloader functions to be registered. These functions are then called in the order they were registered until the class is found.
      https://www.php.net/manual/en/function.spl-autoload-register.php

  -
    question: |
      Which of the following is a valid way to define a `readonly` class in PHP 8.2?

      ```php
      // ??? class MyClass {
      //     public string $name;
      // }
      ```
    answers:
      - { value: '`readonly class MyClass {`', correct: true }
      - { value: '`final readonly class MyClass {`', correct: true }
      - { value: '`abstract readonly class MyClass {`', correct: false }
      - { value: '`class MyClass readonly {`', correct: false }
    help: |
      PHP 8.2 introduced `readonly` classes. When a class is declared `readonly`, all its properties become implicitly `readonly`. A `readonly` class cannot have dynamic properties.
      https://www.php.net/manual/en/migration82.new-features.php#migration82.new-features.readonly-classes

  -
    question: >
      What is the purpose of the `#[Override]` attribute (PHP 8.1+)?
    answers:
      - { value: 'It explicitly marks a method as overriding a parent method, leading to a compile-time error if no parent method exists.', correct: true }
      - { value: 'It forces a child class to override a specific method from its parent.', correct: false }
      - { value: 'It makes a method `final` and prevents further overriding.', correct: false }
      - { value: 'It is used for method overloading in PHP.', correct: false }
    help: |
      The `#[Override]` attribute (PHP 8.1+) is a compile-time check that ensures a method is indeed overriding a parent method. If no parent method with the same signature exists, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.php#language.attributes.predefined.override

  -
    question: >
      Which SPL class is best suited for implementing a queue (FIFO - First In, First Out) data structure?
    answers:
      - { value: '`SplQueue`', correct: true }
      - { value: '`SplStack`', correct: false }
      - { value: '`SplPriorityQueue`', correct: false }
      - { value: '`SplHeap`', correct: false }
    help: |
      `SplQueue` provides the functionality of a queue, where elements are added at one end and removed from the other (FIFO).
      https://www.php.net/manual/en/class.splqueue.php

  -
    question: |
      What will be the output of the following PHP code, demonstrating a type error?

      ```php
      declare(strict_types=1);

      function sum(int $a, int $b): int {
          return $a + $b;
      }

      echo sum(5, '10');
      ```
    answers:
      - { value: '`TypeError`', correct: true }
      - { value: '`15`', correct: false }
      - { value: '`Fatal error: Uncaught TypeError`', correct: true }
      - { value: '`Parse error`', correct: false }
    help: |
      With `declare(strict_types=1);`, PHP will throw a `TypeError` if a function argument's type does not match the declared scalar type.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.strict

  -
    question: >
      What is the purpose of the `__clone()` magic method in PHP?
    answers:
      - { value: 'It is called when an object is duplicated using the `clone` keyword.', correct: true }
      - { value: 'It is used to create a new instance of a class.', correct: false }
      - { value: 'It is called before an object is destroyed.', correct: false }
      - { value: 'It is used for deep copying objects.', correct: false }
    help: |
      The `__clone()` method is called when an object is cloned. It can be used to adjust properties of the cloned object, especially for deep copying.
      https://www.php.net/manual/en/language.oop5.cloning.php

  -
    question: >
      Which of the following describes a key difference between `throw new Exception()` and `trigger_error()`?
    answers:
      - { value: '`Exception` can be caught with `try-catch`, while `trigger_error()` generates a warning/notice/error that can be handled by an error handler.', correct: true }
      - { value: '`Exception` always stops script execution, while `trigger_error()` never does.', correct: false }
      - { value: '`trigger_error()` is for fatal errors, `Exception` is for recoverable errors.', correct: false }
      - { value: '`Exception` is for user-defined errors, `trigger_error()` is for internal PHP errors.', correct: false }
    help: |
      Exceptions are part of structured error handling and can be caught. `trigger_error()` generates a user-level error, warning, or notice, which can be handled by a custom error handler but doesn't necessarily stop execution unless it's a fatal error type.
      https://www.php.net/manual/en/language.exceptions.php
      https://www.php.net/manual/en/function.trigger-error.php

  -
    question: >
      What is the purpose of the `__sleep()` and `__wakeup()` magic methods?
    answers:
      - { value: 'They are called during object serialization and unserialization, respectively.', correct: true }
      - { value: 'They are used to pause and resume script execution.', correct: false }
      - { value: 'They control when an object''s properties are loaded from a database.', correct: false }
      - { value: 'They are used for asynchronous programming.', correct: false }
    help: |
      `__sleep()` is called prior to serialization (e.g., by `serialize()`), allowing an object to prepare for serialization. `__wakeup()` is called immediately after unserialization, allowing an object to re-establish connections or resources.
      https://www.php.net/manual/en/language.oop5.magic.php#object.sleep

  -
    question: >
      Which SPL class provides an efficient way to store and retrieve data using a hash table (similar to PHP arrays)?
    answers:
      - { value: '`SplObjectStorage`', correct: true }
      - { value: '`SplFixedArray`', correct: false }
      - { value: '`SplQueue`', correct: false }
      - { value: '`SplStack`', correct: false }
    help: |
      `SplObjectStorage` is a special purpose class for storing objects. It allows you to store objects and associate data with them, acting like a hash map where objects are keys.
      https://www.php.net/manual/en/class.splobjectstorage.php

  -
    question: |
      Consider the following PHP code:

      ```php
      trait Logger {
          public function log(string $message) {
              echo "Log: $message\n";
          }
      }

      class MyService {
          use Logger;
      }

      $service = new MyService();
      $service->log('Operation complete');
      ```

      What will be the output?
    answers:
      - { value: 'Log: Operation complete', correct: true }
      - { value: 'Fatal error: Call to undefined method MyService::log()', correct: false }
      - { value: 'Parse error', correct: false }
      - { value: 'Log: ', correct: false }
    help: |
      Traits allow methods to be composed into classes. The `use Logger;` statement makes the `log` method available directly on the `MyService` instance.
      https://www.php.net/manual/en/language.oop5.traits.php

  -
    question: >
      What is the purpose of the `#[SensitiveParameter]` attribute (PHP 8.2+)?
    answers:
      - { value: 'It redacts the value of a parameter from stack traces.', correct: true }
      - { value: 'It encrypts the parameter value automatically.', correct: false }
      - { value: 'It makes the parameter optional.', correct: false }
      - { value: 'It marks the parameter as requiring a specific type.', correct: false }
    help: |
      The `#[SensitiveParameter]` attribute (PHP 8.2+) is used to mark parameters that contain sensitive information (e.g., passwords, API keys). When an exception is thrown, the value of such parameters will be redacted from stack traces.
      https://www.php.net/manual/en/language.attributes.php#language.attributes.predefined.sensitiveparameter

  -
    question: >
      Which of the following is a correct way to define an anonymous function that can be assigned to a variable?
    answers:
      - { value: '`$func = function() { /* ... */ };`', correct: true }
      - { value: '`$func = new Closure() { /* ... */ };`', correct: false }
      - { value: '`function $func() { /* ... */ }`', correct: false }
      - { value: '`$func = fn() => /* ... */;`', correct: true }
    help: |
      Anonymous functions can be defined using the `function` keyword without a name and assigned to a variable. Arrow functions (`fn`) (PHP 7.4+) provide a more concise syntax for simple closures.
      https://www.php.net/manual/en/functions.anonymous.php
      https://www.php.net/manual/en/functions.arrow.php

  -
    question: >
      What is the purpose of the `__get()` and `__set()` magic methods?
    answers:
      - { value: 'They are called when accessing inaccessible (private, protected, or non-existent) properties.', correct: true }
      - { value: 'They are used to define getters and setters for all properties automatically.', correct: false }
      - { value: 'They are called when an object is serialized or unserialized.', correct: false }
      - { value: 'They are used for dependency injection.', correct: false }
    help: |
      `__get()` is invoked when reading data from inaccessible properties. `__set()` is invoked when writing data to inaccessible properties. They allow for dynamic property handling.
      https://www.php.net/manual/en/language.oop5.magic.php#object.get

  -
    question: >
      Which SPL class can be used to store objects and associate arbitrary data with them, similar to a hash map where objects are keys?
    answers:
      - { value: '`SplObjectStorage`', correct: true }
      - { value: '`ArrayObject`', correct: false }
      - { value: '`SplHeap`', correct: false }
      - { value: '`SplFixedArray`', correct: false }
    help: |
      `SplObjectStorage` is a specialized collection that maps objects to data. It's particularly useful when you need to store unique objects and associate additional information with each object.
      https://www.php.net/manual/en/class.splobjectstorage.php

  -
    question: |
      Which of the following is a valid way to define a PHP 8.1 `never` return type?
    answers:
      - { value: '`function terminate(): never { die(); }`', correct: true }
      - { value: '`function terminate(): void { exit(); }`', correct: false }
      - { value: '`function terminate(): null { throw new Exception(); }`', correct: false }
      - { value: '`function terminate(): boolean { return false; }`', correct: false }
    help: |
      The `never` return type (PHP 8.1+) indicates that a function or method will never return. It either throws an exception, calls `die()`, `exit()`, or enters an infinite loop.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.return.never

  -
    question: >
      What is the purpose of the `__call()` and `__callStatic()` magic methods?
    answers:
      - { value: '`__call()` is for calling inaccessible object methods; `__callStatic()` is for calling inaccessible static methods.', correct: true }
      - { value: 'They are used to define method aliases.', correct: false }
      - { value: 'They are called when a method is invoked with incorrect arguments.', correct: false }
      - { value: 'They are used for method overloading.', correct: false }
    help: |
      `__call()` is triggered when invoking inaccessible object methods. `__callStatic()` is triggered when invoking inaccessible static methods in a static context.
      https://www.php.net/manual/en/language.oop5.magic.php#object.call

  -
    question: >
      Which SPL class provides a way to represent a standard PHP array as an object, allowing it to be used with SPL iterators and other object-oriented features?
    answers:
      - { value: '`ArrayObject`', correct: true }
      - { value: '`SplFixedArray`', correct: false }
      - { value: '`SplStack`', correct: false }
      - { value: '`SplQueue`', correct: false }
    help: |
      `ArrayObject` allows objects to work like arrays. It can wrap a PHP array or an object, providing array-like access and iteration capabilities.
      https://www.php.net/manual/en/class.arrayobject.php

  -
    question: >
      What is the purpose of `WeakMap` (PHP 8.0+)?
    answers:
      - { value: 'It allows objects to be used as keys without preventing them from being garbage collected.', correct: true }
      - { value: 'It is a map that stores only weak references to values.', correct: false }
      - { value: 'It is a faster alternative to `array` for all use cases.', correct: false }
      - { value: 'It is used for storing encrypted data.', correct: false }
    help: |
      `WeakMap` (PHP 8.0+) is a map that uses objects as keys. Unlike `SplObjectStorage` or regular arrays, if an object used as a key in a `WeakMap` is no longer referenced elsewhere, it can be garbage collected, and its entry will be removed from the `WeakMap`.
      https://www.php.net/manual/en/class.weakmap.php

  -
    question: >
      Which of the following is true about PHP's `Error` class hierarchy (PHP 7+)?
    answers:
      - { value: '`Error` is the base class for all internal PHP errors.', correct: true }
      - { value: '`TypeError` is a subclass of `Error`.', correct: true }
      - { value: '`ParseError` is a subclass of `Exception`.', correct: false }
      - { value: 'All `Error` types are fatal and cannot be caught.', correct: false }
    help: |
      In PHP 7, `Error` was introduced as a new base class for internal PHP errors, distinct from `Exception`. `TypeError` and `ParseError` are common subclasses of `Error`. While many `Error` types are fatal, they can be caught using a `try-catch` block for `Throwable` or `Error`.
      https://www.php.net/manual/en/class.error.php

  -
    question: >
      What is the primary purpose of the `#[Pure]` attribute (from third-party libraries, but conceptually relevant)?
    answers:
      - { value: 'It indicates that a function or method has no side effects and its output depends only on its inputs.', correct: true }
      - { value: 'It ensures that a function always returns the same value.', correct: false }
      - { value: 'It makes a function run faster.', correct: false }
      - { value: 'It marks a function as being part of the core PHP language.', correct: false }
    help: |
      While `#[Pure]` is not a built-in PHP attribute, it is a common attribute in static analysis tools and frameworks (like Symfony's `#[Pure]` from `symfony/contracts`) to indicate that a function is "pure" – meaning it has no side effects and its return value is solely determined by its input parameters.
      (Note: This question is conceptual and relates to common patterns in the PHP ecosystem, even if the attribute itself isn't native to PHP core.)
      https://github.com/symfony/symfony/blob/6.x/src/Symfony/Contracts/Service/Attribute/Pure.php (Example of a common usage)

  -
    question: >
      Which SPL class can be used to implement a min-heap or max-heap data structure?
    answers:
      - { value: '`SplMinHeap`', correct: true }
      - { value: '`SplMaxHeap`', correct: true }
      - { value: '`SplHeap`', correct: false }
      - { value: '`SplPriorityQueue`', correct: true }
    help: |
      `SplHeap` is an abstract base class for heaps. `SplMinHeap` and `SplMaxHeap` are concrete implementations for min-heaps and max-heaps, respectively. `SplPriorityQueue` also uses a heap internally.
      https://www.php.net/manual/en/class.splminheap.php
      https://www.php.net/manual/en/class.splmaxheap.php
      https://www.php.net/manual/en/class.splpriorityqueue.php

  -
    question: >
      What is the purpose of the `match` expression (PHP 8.0+)?
    answers:
      - { value: 'It is a control structure similar to `switch` but can return a value and requires exhaustive checks.', correct: true }
      - { value: 'It is used for pattern matching against regular expressions.', correct: false }
      - { value: 'It replaces the `if-else if-else` construct entirely.', correct: false }
      - { value: 'It is used to compare two objects for equality.', correct: false }
    help: |
      The `match` expression (PHP 8.0+) is a new control flow construct. Unlike `switch`, `match` is an expression (it returns a value), uses strict comparisons (`===`), and requires all possible cases to be covered (or a `default` arm).
      https://www.php.net/manual/en/control-structures.match.php

  -
    question: >
      Which of the following is a valid way to define an intersection type in PHP 8.1?
    answers:
      - { value: '`function process(LoggerInterface&Serializable $data)`', correct: true }
      - { value: '`function process(LoggerInterface|Serializable $data)`', correct: false }
      - { value: '`function process(LoggerInterface, Serializable $data)`', correct: false }
      - { value: '`function process(LoggerInterface and Serializable $data)`', correct: false }
    help: |
      Intersection types (PHP 8.1+) require a value to be an instance of *all* specified classes or interfaces. They are defined using the `&` operator.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.intersection

  -
    question: >
      What is the primary use case for the `#[AsCommand]` attribute in a Symfony console command?
    answers:
      - { value: 'To define the command''s name and description directly in the class.', correct: true }
      - { value: 'To inject services into the command.', correct: false }
      - { value: 'To execute the command automatically on a schedule.', correct: false }
      - { value: 'To link the command to a specific controller action.', correct: false }
    help: |
      The `#[AsCommand]` attribute (Symfony 5.3+ / PHP 8.0+) simplifies command configuration by allowing the command name, description, and other options to be defined directly on the command class, replacing the need for `static $defaultName` or `configure()` method calls for basic setup.
      https://symfony.com/doc/current/console.html#configuring-the-command
      (Note: This question is Symfony-specific but relies on PHP 8.0+ attributes, making it relevant to PHP knowledge in a Symfony context.)

  -
    question: >
      What is the purpose of the `#[ReturnTypeWillChange]` attribute (PHP 8.1+)?
    answers:
      - { value: 'It indicates that a method''s return type will change in a future PHP version, suppressing deprecation warnings for now.', correct: true }
      - { value: 'It forces a method to return a specific type.', correct: false }
      - { value: 'It allows a method to return multiple types.', correct: false }
      - { value: 'It is used to define a method that never returns.', correct: false }
    help: |
      The `#[ReturnTypeWillChange]` attribute (PHP 8.1+) is used to suppress deprecation warnings when a method in a child class or implementation of an interface has a different return type than its parent, but the parent's return type is expected to change in a future PHP version.
      https://www.php.net/manual/en/language.attributes.php#language.attributes.predefined.returntypewillchange

  -
    question: >
      Which of the following is true about `trait` precedence in PHP?
    answers:
      - { value: 'Methods from the current class override methods from traits.', correct: true }
      - { value: 'Methods from traits override methods from the parent class.', correct: true }
      - { value: 'Methods from traits always override methods from the current class.', correct: false }
      - { value: 'Methods from the parent class always override methods from traits.', correct: false }
    help: |
      When a class uses a trait, the methods provided by the trait are injected into the class. If there's a name collision:
      1. The current class's method takes precedence over a trait's method.
      2. A trait's method takes precedence over an inherited method from the parent class.
      https://www.php.net/manual/en/language.oop5.traits.php#language.oop5.traits.precedence

  -
    question: >
      What is the purpose of the `__serialize()` and `__unserialize()` magic methods (PHP 7.4+)?
    answers:
      - { value: 'They provide a more robust and flexible way to handle object serialization than `__sleep()` and `__wakeup()`.', correct: true }
      - { value: 'They are used for encrypting and decrypting object data.', correct: false }
      - { value: 'They replace the need for the `Serializable` interface.', correct: false }
      - { value: 'They are only called when using JSON serialization.', correct: false }
    help: |
      `__serialize()` and `__unserialize()` (PHP 7.4+) are new magic methods that provide a more powerful and less error-prone alternative to `__sleep()` and `__wakeup()` for controlling object serialization. They work directly with an array of properties.
      https://www.php.net/manual/en/language.oop5.magic.php#object.serialize

  -
    question: >
      What is the purpose of the `fn` keyword (arrow functions) introduced in PHP 7.4?
    answers:
      - { value: 'To provide a more concise syntax for anonymous functions with a single expression.', correct: true }
      - { value: 'To define named functions with a shorter syntax.', correct: false }
      - { value: 'To create generator functions.', correct: false }
      - { value: 'To define functions that always return `null`.', correct: false }
    help: |
      Arrow functions (`fn`) provide a shorthand syntax for anonymous functions. They automatically capture variables from the parent scope by value, making `use` unnecessary for such cases.
      https://www.php.net/manual/en/functions.arrow.php

  -
    question: >
      Which SPL class can be used to implement a priority queue?
    answers:
      - { value: '`SplPriorityQueue`', correct: true }
      - { value: '`SplQueue`', correct: false }
      - { value: '`SplStack`', correct: false }
      - { value: '`SplHeap`', correct: false }
    help: |
      `SplPriorityQueue` is a special type of queue where each element has a priority, and elements with higher priority are dequeued before elements with lower priority.
      https://www.php.net/manual/en/class.splpriorityqueue.php

  -
    question: >
      What is the purpose of the `__destruct()` magic method?
    answers:
      - { value: 'It is called when an object is no longer referenced and is about to be destroyed.', correct: true }
      - { value: 'It is called when an object is created.', correct: false }
      - { value: 'It is used to explicitly delete an object from memory.', correct: false }
      - { value: 'It is called before an exception is thrown.', correct: false }
    help: |
      The destructor method `__destruct()` is called as soon as there are no other references to a particular object, or in any shutdown sequence.
      https://www.php.net/manual/en/language.oop5.decon.php#object.destruct

  -
    question: >
      Which of the following describes the purpose of the `yield` keyword in PHP?
    answers:
      - { value: 'It is used to create generator functions, allowing lazy evaluation and iteration over large datasets efficiently.', correct: true }
      - { value: 'It is used to pause script execution for a specified duration.', correct: false }
      - { value: 'It is used to return a value from a function and then immediately exit.', correct: false }
      - { value: 'It is used for asynchronous I/O operations.', correct: false }
    help: |
      The `yield` keyword is used in generator functions. It allows a function to return an iterable value without building an array in memory, making it efficient for iterating over large datasets or infinite sequences.
      https://www.php.net/manual/en/language.generators.overview.php

  -
    question: >
      What is the purpose of the `#[NoReturn]` attribute (from third-party libraries, but conceptually relevant)?
    answers:
      - { value: 'It indicates that a function or method will never return, either by throwing an exception or terminating the script.', correct: true }
      - { value: 'It prevents a function from returning any value.', correct: false }
      - { value: 'It makes a function asynchronous.', correct: false }
      - { value: 'It is used to define a function that can be called only once.', correct: false }
    help: |
      Similar to `#[Pure]`, `#[NoReturn]` is a common attribute in static analysis tools and frameworks (like Symfony's `#[NoReturn]` from `symfony/contracts`) to indicate that a function will never return normally (e.g., it always throws an exception or calls `die()/exit()`). This helps static analyzers understand control flow.
      (Note: This question is conceptual and relates to common patterns in the PHP ecosystem, even if the attribute itself isn't native to PHP core.)
      https://github.com/symfony/symfony/blob/6.x/src/Symfony/Contracts/Service/Attribute/NoReturn.php (Example of a common usage)

  -
    question: >
      Which of the following is a valid way to check if a class exists in PHP?
    answers:
      - { value: '`class_exists(''MyClass'')`', correct: true }
      - { value: '`isset(MyClass)`', correct: false }
      - { value: '`is_class(''MyClass'')`', correct: false }
      - { value: '`defined(''MyClass'')`', correct: false }
    help: |
      The `class_exists()` function checks whether the given class has been defined.
      https://www.php.net/manual/en/function.class-exists.php

  -
    question: >
      What is the purpose of the `#[Attribute]` attribute (PHP 8.0+)?
    answers:
      - { value: 'It is used to declare a class as an attribute itself, making it usable with `#[...]` syntax.', correct: true }
      - { value: 'It marks a property as an attribute of the class.', correct: false }
      - { value: 'It is used to define a new HTML attribute.', correct: false }
      - { value: 'It marks a method as being an attribute getter.', correct: false }
    help: |
      The `#[Attribute]` attribute itself is used to define a class as an attribute. It takes flags to specify where the attribute can be used (e.g., `TARGET_CLASS`, `TARGET_METHOD`).
      https://www.php.net/manual/en/language.attributes.overview.php#language.attributes.declaring

  -
    question: >
      What is the purpose of the `#[Deprecated]` attribute (PHP 8.0+)?
    answers:
      - { value: 'It marks a class, method, or property as deprecated, indicating it will be removed in future versions.', correct: true }
      - { value: 'It prevents the marked code from being executed.', correct: false }
      - { value: 'It automatically removes the marked code during compilation.', correct: false }
      - { value: 'It is a comment that has no functional effect.', correct: false }
    help: |
      Attributes (PHP 8.0+) provide a way to add metadata to classes, methods, properties, functions, and parameters. The `#[Deprecated]` attribute is a built-in attribute used to signal deprecation.
      https://www.php.net/manual/en/language.attributes.php

  -
    question: >
      Which of the following is true about the `void` return type in PHP 7.1+?
    answers:
      - { value: 'It indicates that a function or method does not return any value.', correct: true }
      - { value: 'A function declared `void` must not have a `return` statement.', correct: false }
      - { value: 'A function declared `void` can return `null`.', correct: false }
      - { value: 'It is equivalent to not declaring a return type at all.', correct: false }
    help: |
      The `void` return type (PHP 7.1+) signifies that the function or method does not return a value. A `return;` statement without an expression is allowed, but `return null;` is not.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.return.void

  -
    question: >
      What is the purpose of the `__serialize()` and `__unserialize()` magic methods (PHP 7.4+)?
    answers:
      - { value: 'They provide a more robust and flexible way to handle object serialization than `__sleep()` and `__wakeup()`.', correct: true }
      - { value: 'They are used for encrypting and decrypting object data.', correct: false }
      - { value: 'They replace the need for the `Serializable` interface.', correct: false }
      - { value: 'They are only called when using JSON serialization.', correct: false }
    help: |
      `__serialize()` and `__unserialize()` (PHP 7.4+) are new magic methods that provide a more powerful and less error-prone alternative to `__sleep()` and `__wakeup()` for controlling object serialization. They work directly with an array of properties.
      https://www.php.net/manual/en/language.oop5.magic.php#object.serialize

  -
    question: >
      Which of the following is a valid way to define a static method in a PHP class?
    answers:
      - { value: '`public static function myStaticMethod() { /* ... */ }`', correct: true }
      - { value: '`static public function myStaticMethod() { /* ... */ }`', correct: true }
      - { value: '`function static myStaticMethod() { /* ... */ }`', correct: false }
      - { value: '`public function static myStaticMethod() { /* ... */ }`', correct: false }
    help: |
      Static methods are declared using the `static` keyword. The `public` visibility keyword can come before or after `static`.
      https://www.php.net/manual/en/language.oop5.static.php

  -
    question: >
      What is the purpose of the `#[AllowDynamicProperties]` attribute (PHP 8.2+)?
    answers:
      - { value: 'It explicitly allows dynamic properties on a class, overriding the default deprecation warning.', correct: true }
      - { value: 'It prevents any dynamic properties from being added to a class.', correct: false }
      - { value: 'It enables a class to be used as a DTO (Data Transfer Object).', correct: false }
      - { value: 'It is used to define properties that can change their type at runtime.', correct: false }
    help: |
      In PHP 8.2, dynamic properties were deprecated. `#[AllowDynamicProperties]` can be added to a class to explicitly allow them and suppress the deprecation warning.
      https://www.php.net/manual/en/migration82.deprecated.php#migration82.deprecated.dynamic-properties

  -
    question: >
      What is the purpose of the `#[SensitiveParameter]` attribute (PHP 8.2+)?
    answers:
      - { value: 'It redacts the value of a parameter from stack traces.', correct: true }
      - { value: 'It encrypts the parameter value automatically.', correct: false }
      - { value: 'It makes the parameter optional.', correct: false }
      - { value: 'It marks the parameter as requiring a specific type.', correct: false }
    help: |
      The `#[SensitiveParameter]` attribute (PHP 8.2+) is used to mark parameters that contain sensitive information (e.g., passwords, API keys). When an exception is thrown, the value of such parameters will be redacted from stack traces.
      https://www.php.net/manual/en/language.attributes.php#language.attributes.predefined.sensitiveparameter

  -
    question: >
      Which of the following is a key characteristic of a closure in PHP?
    answers:
      - { value: 'It is an anonymous function that can access variables from the scope in which it was created, even after that scope has terminated.', correct: true }
      - { value: 'It is a named function that can only access global variables.', correct: false }
      - { value: 'It is a class method that can only be called statically.', correct: false }
      - { value: 'It is a function that always returns a boolean value.', correct: false }
    help: |
      A closure is an anonymous function that can "close over" (capture) variables from its surrounding scope using the `use` keyword, allowing it to access those variables even when the original scope is no longer active.
      https://www.php.net/manual/en/functions.anonymous.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute (PHP 8.1+)?
    answers:
      - { value: 'It explicitly marks a method as overriding a parent method, leading to a compile-time error if no parent method exists.', correct: true }
      - { value: 'It forces a child class to override a specific method from its parent.', correct: false }
      - { value: 'It makes a method `final` and prevents further overriding.', correct: false }
      - { value: 'It is used for method overloading in PHP.', correct: false }
    help: |
      The `#[Override]` attribute (PHP 8.1+) is a compile-time check that ensures a method is indeed overriding a parent method. If no parent method with the same signature exists, a compile-time error is thrown.
      https://www.php.net/manual/en/language.attributes.php#language.attributes.predefined.override

  -
    question: >
      Which of the following is a valid way to define a read-only property in PHP 8.1?
    answers:
      - { value: '`public readonly string $name;`', correct: true }
      - { value: '`public const string $name;`', correct: false }
      - { value: '`public fixed string $name;`', correct: false }
      - { value: '`public string $name readonly;`', correct: false }
    help: |
      PHP 8.1 introduced the `readonly` keyword for properties, allowing them to be initialized only once (either at declaration or in the constructor).
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly