category: PHP

questions:
  -
    question: >
      Which of the following is a new feature introduced in PHP 8.2?
    answers:
      - { value: "Readonly classes", correct: true }
      - { value: "Union Types", correct: false }
      - { value: "Attributes", correct: false }
      - { value: "Match expression", correct: false }
    help: |
      PHP 8.2 introduced readonly classes, allowing all properties of a class to be implicitly readonly.
      https://www.php.net/manual/en/migration82.new-features.php#migration82.new-features.readonly-classes

  -
    question: |
      Consider the following PHP code:

      ```php
      class Animal {
          public function makeSound() {
              return "Generic sound";
          }
      }

      class Dog extends Animal {
          public function makeSound() {
              return "Woof";
          }
      }

      $animal = new Dog();
      echo $animal->makeSound();
      ```
      What will be the output of this code?
    answers:
      - { value: "Woof", correct: true }
      - { value: "Generic sound", correct: false }
      - { value: "Fatal error", correct: false }
      - { value: "Parse error", correct: false }
    help: |
      This demonstrates method overriding in object-oriented programming. The `makeSound` method in the `Dog` class overrides the one in the `Animal` class.
      https://www.php.net/manual/en/language.oop5.inheritance.php

  -
    question: |
      Given the following file structure:

      ```
      /
      ├── src/
      │   ├── Controller/
      │   │   └── HomeController.php
      │   └── Service/
      │       └── UserService.php
      └── index.php
      ```
      If `HomeController.php` contains `namespace App\Controller;` and `UserService.php` contains `namespace App\Service;`, how would you correctly use `UserService` within `HomeController`?
    answers:
      - { value: "```php use App\\Service\\UserService; ```", correct: true }
      - { value: "```php require_once '../Service/UserService.php'; ```", correct: false }
      - { value: "```php include 'UserService.php'; ```", correct: false }
      - { value: "```php new App\\Service\\UserService(); ```", correct: true }
      - { value: "```php use App\\Service; ```", correct: false }
    help: |
      Namespaces provide a way to group related classes, interfaces, functions, and constants. The `use` keyword is used to import fully qualified names.
      https://www.php.net/manual/en/language.namespaces.importing.php

  -
    question: |
      Which of the following correctly defines an interface in PHP?
    answers:
      - { value: "```php interface Logger { public function log(string $message); } ```", correct: true }
      - { value: "```php abstract class Logger { abstract public function log(string $message); } ```", correct: false }
      - { value: "```php class Logger implements LoggerInterface { public function log(string $message); } ```", correct: false }
      - { value: "```php interface Logger { private function log(string $message); } ```", correct: false }
    help: |
      Interfaces define a contract for classes to implement. All methods declared in an interface must be public.
      https://www.php.net/manual/en/language.oop5.interfaces.php

  -
    question: |
      What will be the output of the following PHP code?

      ```php
      $multiplier = 2;
      $numbers = [1, 2, 3];
      $newNumbers = array_map(function ($number) use ($multiplier) {
          return $number * $multiplier;
      }, $numbers);
      print_r($newNumbers);
      ```
    answers:
      - { value: "Array ( [0] => 2 [1] => 4 [2] => 6 )", correct: true }
      - { value: "Array ( [0] => 1 [1] => 2 [2] => 3 )", correct: false }
      - { value: "Fatal error", correct: false }
      - { value: "Array ( [0] => 0 [1] => 0 [2] => 0 )", correct: false }
    help: |
      Anonymous functions (closures) can inherit variables from the parent scope using the `use` keyword. `array_map` applies a callback to each element of an array.
      https://www.php.net/manual/en/functions.anonymous.php

  -
    question: >
      Which statement about abstract classes in PHP is true?
    answers:
      - { value: "An abstract class cannot be instantiated directly.", correct: true }
      - { value: "An abstract class must contain at least one abstract method.", correct: false }
      - { value: "Methods in an abstract class must be declared as abstract.", correct: false }
      - { value: "Abstract classes can be extended by interfaces.", correct: false }
    help: |
      Abstract classes are classes that cannot be instantiated directly. They can contain both abstract and non-abstract methods.
      https://www.php.net/manual/en/language.oop5.abstract.php

  -
    question: |
      What is the correct way to catch a specific exception in PHP?
    answers:
      - { value: "```php try { // code } catch (MySpecificException $e) { // handle } ```", correct: true }
      - { value: "```php try { // code } catch (Exception $e) { // handle } ```", correct: false }
      - { value: "```php try { // code } finally { // handle } ```", correct: false }
      - { value: "```php catch (MySpecificException $e) { // handle } ```", correct: false }
    help: |
      The `try...catch` block is used for exception handling. You can specify the type of exception to catch.
      https://www.php.net/manual/en/language.exceptions.php

  -
    question: >
      What is the primary purpose of traits in PHP?
    answers:
      - { value: "To enable code reuse in single inheritance languages like PHP.", correct: true }
      - { value: "To define a contract that classes must implement.", correct: false }
      - { value: "To create singleton instances of classes.", correct: false }
      - { value: "To provide a mechanism for multiple inheritance.", correct: false }
    help: |
      Traits are a mechanism for code reuse in single inheritance languages like PHP. A trait is intended to reduce limitations of single inheritance by enabling a developer to reuse sets of methods freely in several independent classes living in different class hierarchies.
      https://www.php.net/manual/en/language.oop5.traits.php

  -
    question: >
      Which SPL class provides an interface for objects that can be iterated over, such as arrays or objects implementing `Traversable`?
    answers:
      - { value: "Iterator", correct: true }
      - { value: "ArrayObject", correct: false }
      - { value: "SplStack", correct: false }
      - { value: "RecursiveIterator", correct: false }
    help: |
      The `Iterator` interface is part of the Standard PHP Library (SPL) and allows an object to be iterated upon.
      https://www.php.net/manual/en/class.iterator.php

  -
    question: >
      Which PHP extension is commonly used for working with relational databases like MySQL or PostgreSQL?
    answers:
      - { value: "PDO (PHP Data Objects)", correct: true }
      - { value: "GD", correct: false }
      - { value: "cURL", correct: false }
      - { value: "OpenSSL", correct: false }
    help: |
      PDO (PHP Data Objects) is a database access layer providing a uniform method of access to multiple databases.
      https://www.php.net/manual/en/book.pdo.php

  -
    question: |
      Which of the following is a valid way to declare a named argument in PHP 8.0+?
    answers:
      - { value: "```php myFunction(name: \"John\"); ```", correct: true }
      - { value: "```php myFunction(\"name\" => \"John\"); ```", correct: false }
      - { value: "```php myFunction(name = \"John\"); ```", correct: false }
      - { value: "```php myFunction(\"John\", name); ```", correct: false }
    help: |
      Named arguments allow passing arguments to a function based on the parameter name, rather than the parameter position. This feature was introduced in PHP 8.0.
      https://www.php.net/manual/en/functions.arguments.php#functions.named-arguments

  -
    question: >
      What is the purpose of the `final` keyword when applied to a class in PHP?
    answers:
      - { value: "It prevents the class from being extended.", correct: true }
      - { value: "It prevents methods within the class from being overridden.", correct: false }
      - { value: "It makes the class a singleton.", correct: false }
      - { value: "It marks the class as an abstract class.", correct: false }
    help: |
      If you declare a class as `final`, it cannot be extended. If you declare a method as `final`, it cannot be overridden.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: |
      Consider the following code:

      ```php
      namespace MyProject\Utils;

      class Helper {
          public static function greet() {
              return "Hello from Helper!";
          }
      }

      // In another file, in the global namespace:
      // echo MyProject\Utils\Helper::greet();
      ```
      If the code is executed from the global namespace, how would you correctly call the `greet` method?
    answers:
      - { value: "```php echo MyProject\\Utils\\Helper::greet(); ```", correct: true }
      - { value: "```php echo Helper::greet(); ```", correct: false }
      - { value: "```php use MyProject\\Utils; echo Utils\\Helper::greet(); ```", correct: false }
      - { value: "```php echo \\MyProject\\Utils\\Helper::greet(); ```", correct: true }
    help: |
      When referencing a namespaced class from the global namespace, you must use its fully qualified name. The leading backslash is optional but can be used to explicitly indicate a global namespace reference.
      https://www.php.net/manual/en/language.namespaces.basics.php

  -
    question: >
      Which magic method is automatically called when an object is treated as a string?
    answers:
      - { value: "`__toString()`", correct: true }
      - { value: "`__invoke()`", correct: false }
      - { value: "`__call()`", correct: false }
      - { value: "`__debugInfo()`", correct: false }
    help: |
      The `__toString()` method allows a class to decide how it will react when it is treated as a string.
      https://www.php.net/manual/en/language.oop5.magic.php#object.tostring

  -
    question: |
      What is the purpose of the `fn` keyword in PHP 7.4+?
    answers:
      - { value: "To define short arrow functions.", correct: true }
      - { value: "To declare a new function.", correct: false }
      - { value: "To create a generator function.", correct: false }
      - { value: "To define a global function.", correct: false }
    help: |
      Arrow functions (short closures) were introduced in PHP 7.4, providing a more concise syntax for simple closures.
      https://www.php.net/manual/en/functions.arrow.php

  -
    question: >
      What is the main difference between an `interface` and an `abstract class` in PHP?
    answers:
      - { value: "An interface defines a contract without implementation, while an abstract class can provide partial implementation.", correct: true }
      - { value: "An interface can have properties, while an abstract class cannot.", correct: false }
      - { value: "A class can implement multiple interfaces but can only extend one abstract class.", correct: true }
      - { value: "Abstract classes are used for type hinting, interfaces are not.", correct: false }
    help: |
      Interfaces define methods that a class must implement, without providing any implementation. Abstract classes can have both abstract and concrete methods and can have properties. A class can implement multiple interfaces but can only extend one class (including abstract classes).
      https://www.php.net/manual/en/language.oop5.interfaces.php
      https://www.php.net/manual/en/language.oop5.abstract.php

  -
    question: |
      Which of the following will trigger a `TypeError` in PHP 8.0+?
    answers:
      - { value: "```php function sum(int $a, int $b): int { return $a + $b; } sum(5, '10'); ```", correct: true }
      - { value: "```php function greet(string $name): string { return 'Hello ' . $name; } greet('World'); ```", correct: false }
      - { value: "```php function divide(float $a, float $b): float { return $a / $b; } divide(10.0, 2.0); ```", correct: false }
      - { value: "```php function process(array $data): array { return $data; } process([]); ```", correct: false }
    help: |
      PHP 7 introduced scalar type declarations, and PHP 8.0 strengthened type checking, leading to `TypeError` when types do not match.
      https://www.php.net/manual/en/language.types.declarations.php

  -
    question: |
      Consider the following trait:

      ```php
      trait LoggerTrait {
          public function log(string $message) {
              echo "LOG: " . $message . "\n";
          }
      }

      class MyClass {
          use LoggerTrait;
      }

      $obj = new MyClass();
      $obj->log("Test message");
      ```
      What will be the output of this code?
    answers:
      - { value: "LOG: Test message", correct: true }
      - { value: "Fatal error", correct: false }
      - { value: "Parse error", correct: false }
      - { value: "Undefined method call", correct: false }
    help: |
      Traits allow methods to be composed into classes. When a trait is used, its methods are effectively copied into the class.
      https://www.php.net/manual/en/language.oop5.traits.php

  -
    question: >
      Which SPL class allows you to treat arrays as objects, providing object-oriented access to array elements?
    answers:
      - { value: "ArrayObject", correct: true }
      - { value: "SplFixedArray", correct: false }
      - { value: "SplQueue", correct: false }
      - { value: "SplStack", correct: false }
    help: |
      The `ArrayObject` class provides an object-oriented interface to arrays, allowing them to be treated as objects.
      https://www.php.net/manual/en/class.arrayobject.php

  -
    question: >
      Which of the following is NOT a valid way to define a constant in PHP?
    answers:
      - { value: "```php const MY_CONST = 'value'; ```", correct: false }
      - { value: "```php define('MY_CONST', 'value'); ```", correct: false }
      - { value: "```php $MY_CONST = 'value'; ```", correct: true }
      - { value: "```php class MyClass { const CLASS_CONST = 'value'; } ```", correct: false }
    help: |
      Constants are defined using the `define()` function or the `const` keyword. Variables are defined with a dollar sign.
      https://www.php.net/manual/en/language.constants.php

  -
    question: >
      What is the purpose of the `__construct()` method in a PHP class?
    answers:
      - { value: "It is automatically called when a new object of the class is created.", correct: true }
      - { value: "It is used to destroy an object when it is no longer needed.", correct: false }
      - { value: "It defines the class's properties.", correct: false }
      - { value: "It is called when an undefined method is invoked.", correct: false }
    help: |
      The constructor method `__construct()` is called whenever a new object is created.
      https://www.php.net/manual/en/language.oop5.decon.php#object.construct

  -
    question: |
      Which of the following is a valid use of the `use` keyword for aliasing a class within a namespace?
    answers:
      - { value: "```php use MyProject\\Models\\User as UserModel; ```", correct: true }
      - { value: "```php use MyProject\\Models\\User; ```", correct: false }
      - { value: "```php use MyProject\\Models\\User->UserModel; ```", correct: false }
      - { value: "```php alias MyProject\\Models\\User as UserModel; ```", correct: false }
    help: |
      The `use` keyword can be used with `as` to alias a class, interface, or function name, or a namespace name.
      https://www.php.net/manual/en/language.namespaces.importing.php#language.namespaces.importing.alias

  -
    question: >
      Which PHP feature allows a class to enforce that certain methods must be implemented by its subclasses, but without providing the full method body?
    answers:
      - { value: "Abstract methods", correct: true }
      - { value: "Interfaces", correct: true }
      - { value: "Traits", correct: false }
      - { value: "Final methods", correct: false }
    help: |
      Both abstract methods (within abstract classes) and interface methods enforce implementation by subclasses/implementing classes.
      https://www.php.net/manual/en/language.oop5.abstract.php
      https://www.php.net/manual/en/language.oop5.interfaces.php

  -
    question: |
      What is the correct way to define a closure that can access variables from its parent scope without modifying them?
    answers:
      - { value: "```php $var = 10; $closure = function () use ($var) { echo $var; }; ```", correct: true }
      - { value: "```php $var = 10; $closure = function () { global $var; echo $var; }; ```", correct: false }
      - { value: "```php $var = 10; $closure = function ($var) { echo $var; }; ```", correct: false }
      - { value: "```php $var = 10; $closure = function () use (&$var) { echo $var; }; ```", correct: false }
    help: |
      The `use` keyword passes variables from the parent scope into the closure by value by default.
      https://www.php.net/manual/en/functions.anonymous.php

  -
    question: >
      Which of the following is a built-in PHP exception class that represents errors that should generally not be caught by user code, as they indicate programming errors?
    answers:
      - { value: "Error", correct: true }
      - { value: "Exception", correct: false }
      - { value: "RuntimeException", correct: false }
      - { value: "InvalidArgumentException", correct: false }
    help: |
      The `Error` class and its subclasses represent internal PHP errors that should generally not be caught by user code. `Exception` is the base class for user-defined exceptions.
      https://www.php.net/manual/en/class.error.php

  -
    question: >
      When a class uses multiple traits, and those traits define methods with the same name, how can the conflict be resolved?
    answers:
      - { value: "Using the `insteadof` operator.", correct: true }
      - { value: "Using the `as` operator for aliasing.", correct: true }
      - { value: "By defining the method in the class itself, which takes precedence.", correct: true }
      - { value: "It automatically resolves based on the order of `use` statements.", correct: false }
    help: |
      Conflicts between traits can be resolved using the `insteadof` operator to choose one method over another, or the `as` operator to alias one of the conflicting methods. A method defined in the class itself will override a method from a trait.
      https://www.php.net/manual/en/language.oop5.traits.php#language.oop5.traits.conflict

  -
    question: >
      Which SPL data structure is a Last-In, First-Out (LIFO) collection?
    answers:
      - { value: "SplStack", correct: true }
      - { value: "SplQueue", correct: false }
      - { value: "SplHeap", correct: false }
      - { value: "SplPriorityQueue", correct: false }
    help: |
      `SplStack` implements a stack, which is a LIFO data structure.
      https://www.php.net/manual/en/class.splstack.php

  -
    question: >
      Which PHP function is used to check if a class exists?
    answers:
      - { value: "`class_exists()`", correct: true }
      - { value: "`interface_exists()`", correct: false }
      - { value: "`trait_exists()`", correct: false }
      - { value: "`function_exists()`", correct: false }
    help: |
      `class_exists()` checks whether the given class has been defined.
      https://www.php.net/manual/en/function.class-exists.php

  -
    question: |
      What is the purpose of the `static` keyword when applied to a class method?
    answers:
      - { value: "The method can be called without instantiating the class.", correct: true }
      - { value: "The method can only access static properties.", correct: false }
      - { value: "The method belongs to the object, not the class.", correct: false }
      - { value: "The method cannot be overridden by subclasses.", correct: false }
    help: |
      Static methods can be called without creating an instance of the class. They cannot access non-static properties using `$this`.
      https://www.php.net/manual/en/language.oop5.static.php

  -
    question: |
      Consider the following code:

      ```php
      namespace MyNamespace;

      class MyClass {}

      // In another file:
      // $obj = new MyNamespace\MyClass();
      ```
      If you are in the global namespace, how would you instantiate `MyClass`?
    answers:
      - { value: "```php $obj = new MyNamespace\\MyClass(); ```", correct: true }
      - { value: "```php $obj = new MyClass(); ```", correct: false }
      - { value: "```php use MyNamespace; $obj = new MyNamespace\\MyClass(); ```", correct: false }
      - { value: "```php $obj = new \\MyNamespace\\MyClass(); ```", correct: true }
    help: |
      When instantiating a namespaced class from outside its namespace, you must use its fully qualified name. The leading backslash ensures it's resolved from the global namespace.
      https://www.php.net/manual/en/language.namespaces.basics.php

  -
    question: >
      Which of the following is true regarding `private` methods in PHP?
    answers:
      - { value: "They can only be accessed from within the class where they are defined.", correct: true }
      - { value: "They can be accessed by child classes.", correct: false }
      - { value: "They can be accessed from outside the class using the `->` operator.", correct: false }
      - { value: "They are automatically static.", correct: false }
    help: |
      Private methods and properties are only accessible from within the class that defines them.
      https://www.php.net/manual/en/language.oop5.visibility.php

  -
    question: >
      What is the purpose of the `yield` keyword in PHP?
    answers:
      - { value: "To create generator functions.", correct: true }
      - { value: "To return a value from a function.", correct: false }
      - { value: "To define a constant.", correct: false }
      - { value: "To include another file.", correct: false }
    help: |
      The `yield` keyword is used to create generator functions, which allow you to write iterable functions that can pause and resume execution.
      https://www.php.net/manual/en/language.generators.overview.php

  -
    question: >
      Which SPL class provides an interface for objects that can be counted, such as arrays or objects implementing `Countable`?
    answers:
      - { value: "Countable", correct: true }
      - { value: "SeekableIterator", correct: false }
      - { value: "OuterIterator", correct: false }
      - { value: "RecursiveIteratorIterator", correct: false }
    help: |
      The `Countable` interface is part of SPL and allows an object to be counted using the `count()` function.
      https://www.php.net/manual/en/class.countable.php

  -
    question: >
      What is the purpose of the `__invoke()` magic method?
    answers:
      - { value: "It is called when an object is treated as a function.", correct: true }
      - { value: "It is called when an undefined method is called.", correct: false }
      - { value: "It is called when an object is serialized.", correct: false }
      - { value: "It is called when an object is cloned.", correct: false }
    help: |
      The `__invoke()` method is called when a script tries to call an object as a function.
      https://www.php.net/manual/en/language.oop5.magic.php#object.invoke

  -
    question: >
      Which of the following is a new feature in PHP 8.1 related to object-oriented programming?
    answers:
      - { value: "Enums", correct: true }
      - { value: "Constructor property promotion", correct: false }
      - { value: "Attributes", correct: false }
      - { value: "Match expression", correct: false }
    help: |
      Enums (enumerations) were introduced in PHP 8.1, providing a way to define a type that has a fixed set of possible values.
      https://www.php.net/manual/en/language.enumerations.php

  -
    question: |
      What will be the output of the following code snippet?

      ```php
      try {
          throw new Exception("Something went wrong!");
      } catch (Exception $e) {
          echo "Caught: " . $e->getMessage();
      } finally {
          echo " - Finally block executed.";
      }
      ```
    answers:
      - { value: "Caught: Something went wrong! - Finally block executed.", correct: true }
      - { value: "Caught: Something went wrong!", correct: false }
      - { value: " - Finally block executed.", correct: false }
      - { value: "Fatal error", correct: false }
    help: |
      The `finally` block will always be executed, regardless of whether an exception was thrown or caught.
      https://www.php.net/manual/en/language.exceptions.php#language.exceptions.finally

  -
    question: >
      What is the purpose of the `parent::` keyword in a child class?
    answers:
      - { value: "To call a method or access a property from the parent class.", correct: true }
      - { value: "To call a static method from the current class.", correct: false }
      - { value: "To access a global variable.", correct: false }
      - { value: "To define a new parent class.", correct: false }
    help: |
      The `parent::` keyword is used to refer to the parent class, typically to call overridden methods or access parent properties.
      https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php

  -
    question: >
      Which SPL class provides a basic interface for objects that can be serialized and unserialized?
    answers:
      - { value: "Serializable", correct: true }
      - { value: "JsonSerializable", correct: false }
      - { value: "ArrayAccess", correct: false }
      - { value: "IteratorAggregate", correct: false }
    help: |
      The `Serializable` interface allows an object to control how it is serialized and unserialized.
      https://www.php.net/manual/en/class.serializable.php

  -
    question: >
      Which of the following is a valid way to define a constant within a class in PHP?
    answers:
      - { value: "```php class MyClass { const MY_CONSTANT = 'value'; } ```", correct: true }
      - { value: "```php class MyClass { define('MY_CONSTANT', 'value'); } ```", correct: false }
      - { value: "```php class MyClass { public $MY_CONSTANT = 'value'; } ```", correct: false }
      - { value: "```php class MyClass { static $MY_CONSTANT = 'value'; } ```", correct: false }
    help: |
      Class constants are defined using the `const` keyword inside a class.
      https://www.php.net/manual/en/language.oop5.constants.php

  -
    question: |
      What is the result of attempting to access a `private` property from outside its defining class?
    answers:
      - { value: "A Fatal Error will occur.", correct: true }
      - { value: "A Warning will be issued, but the script will continue.", correct: false }
      - { value: "The property will be accessible, but a notice will be issued.", correct: false }
      - { value: "It will return `null`.", correct: false }
    help: |
      Private members are only accessible from within the class that defines them. Attempting to access them from outside will result in a fatal error.
      https://www.php.net/manual/en/language.oop5.visibility.php

  -
    question: |
      Which of the following is a correct way to define an anonymous class in PHP 7.0+?
    answers:
      - { value: "```php $object = new class { public function greet() { return 'Hello!'; } }; ```", correct: true }
      - { value: "```php $object = function () { return 'Hello!'; }; ```", correct: false }
      - { value: "```php $object = new stdClass(); ```", correct: false }
      - { value: "```php $object = new AnonymousClass() { public function greet() { return 'Hello!'; } }; ```", correct: false }
    help: |
      Anonymous classes were introduced in PHP 7.0, allowing for the creation of simple, one-off objects without needing to define a full class.
      https://www.php.net/manual/en/language.oop5.anonymous.php

  -
    question: >
      What is the purpose of the `#[Deprecated]` attribute in PHP 8.1+?
    answers:
      - { value: "To mark a function, class, or property as deprecated, indicating it will be removed in future versions.", correct: true }
      - { value: "To prevent a function from being called.", correct: false }
      - { value: "To make a function private.", correct: false }
      - { value: "To indicate a function is experimental.", correct: false }
    help: |
      The `#[Deprecated]` attribute (introduced in PHP 8.1) is used to mark elements that are no longer recommended for use and may be removed in future versions.
      https://www.php.net/manual/en/language.attributes.php#language.attributes.deprecated

  -
    question: >
      Which SPL class provides a queue (First-In, First-Out - FIFO) data structure?
    answers:
      - { value: "SplQueue", correct: true }
      - { value: "SplStack", correct: false }
      - { value: "SplDoublyLinkedList", correct: true }
      - { value: "SplFixedArray", correct: false }
    help: |
      `SplQueue` implements a queue (FIFO). `SplDoublyLinkedList` can also be used to implement a queue.
      https://www.php.net/manual/en/class.splqueue.php
      https://www.php.net/manual/en/class.spldoublylinkedlist.php

  -
    question: >
      What is the correct way to declare a nullable type in PHP 7.1+?
    answers:
      - { value: "```php function foo(?string $bar): ?int { return null; } ```", correct: true }
      - { value: "```php function foo(string|null $bar): int|null { return null; } ```", correct: true }
      - { value: "```php function foo(string $bar = null): int { return null; } ```", correct: false }
      - { value: "```php function foo(string $bar): int|void { return null; } ```", correct: false }
    help: |
      Nullable types are declared by prefixing the type with a question mark (`?`). Union types (introduced in PHP 8.0) also allow `Type|null`.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.nullable

  -
    question: >
      What is the purpose of the `__destruct()` magic method?
    answers:
      - { value: "It is called when an object is garbage collected or the script ends.", correct: true }
      - { value: "It is called when an object is created.", correct: false }
      - { value: "It is used to clone an object.", correct: false }
      - { value: "It is called when an undefined property is accessed.", correct: false }
    help: |
      The destructor method `__destruct()` is called when the object is garbage collected or the script execution ends.
      https://www.php.net/manual/en/language.oop5.decon.php#object.destruct

  -
    question: >
      Which of the following is true about `protected` properties and methods in PHP?
    answers:
      - { value: "They are accessible within the class itself and by its child classes.", correct: true }
      - { value: "They are accessible from anywhere in the code.", correct: false }
      - { value: "They are only accessible within the class itself.", correct: false }
      - { value: "They can be accessed using the `->` operator from outside the class.", correct: false }
    help: |
      Protected members are accessible within the class itself and by classes that inherit from it.
      https://www.php.net/manual/en/language.oop5.visibility.php

  -
    question: >
      Which SPL class provides an interface for objects that can be accessed as arrays (e.g., using `[]` syntax)?
    answers:
      - { value: "ArrayAccess", correct: true }
      - { value: "IteratorAggregate", correct: false }
      - { value: "Serializable", correct: false }
      - { value: "Countable", correct: false }
    help: |
      The `ArrayAccess` interface allows objects to be accessed like arrays.
      https://www.php.net/manual/en/class.arrayaccess.php

  -
    question: |
      What is the correct way to throw a custom exception in PHP?
    answers:
      - { value: "```php throw new MyCustomException('Error message'); ```", correct: true }
      - { value: "```php catch (MyCustomException('Error message')); ```", correct: false }
      - { value: "```php trigger_error('Error message', E_USER_ERROR); ```", correct: false }
      - { value: "```php throw MyCustomException('Error message'); ```", correct: false }
    help: |
      Exceptions are thrown using the `throw` keyword, followed by an instance of an `Exception` (or a class that extends `Exception`).
      https://www.php.net/manual/en/language.exceptions.php

  -
    question: >
      What is the purpose of the `#[AllowDynamicProperties]` attribute in PHP 8.2?
    answers:
      - { value: "To explicitly allow dynamic properties on a class that would otherwise disallow them.", correct: true }
      - { value: "To prevent dynamic properties from being created.", correct: false }
      - { value: "To define dynamic properties for a class.", correct: false }
      - { value: "To enable magic methods for dynamic property handling.", correct: false }
    help: |
      In PHP 8.2, dynamic properties are deprecated. The `#[AllowDynamicProperties]` attribute can be used to explicitly allow them for a class.
      https://www.php.net/manual/en/migration82.deprecated.php#migration82.deprecated.dynamic-properties

  -
    question: >
      Which SPL class provides an interface for objects that can be iterated over using an external iterator?
    answers:
      - { value: "IteratorAggregate", correct: true }
      - { value: "Iterator", correct: false }
      - { value: "RecursiveIterator", correct: false }
      - { value: "FilterIterator", correct: false }
    help: |
      The `IteratorAggregate` interface allows an object to create an external iterator for itself.
      https://www.php.net/manual/en/class.iteratoraggregate.php

  -
    question: |
      What will be the output of the following code?

      ```php
      function process(callable $callback) {
          return $callback(5);
      }

      $result = process(function ($num) {
          return $num * 2;
      });

      echo $result;
      ```
    answers:
      - { value: "10", correct: true }
      - { value: "5", correct: false }
      - { value: "Fatal error", correct: false }
      - { value: "Parse error", correct: false }
    help: |
      The `callable` type hint ensures that the argument is a valid callback. The anonymous function is executed with `5` as its argument.
      https://www.php.net/manual/en/language.types.callable.php

  -
    question: >
      Which of the following is a valid way to define a read-only property in PHP 8.1+?
    answers:
      - { value: "```php class MyClass { public readonly string $name; } ```", correct: true }
      - { value: "```php class MyClass { private const string $name; } ```", correct: false }
      - { value: "```php class MyClass { public static string $name; } ```", correct: false }
      - { value: "```php class MyClass { public final string $name; } ```", correct: false }
    help: |
      Readonly properties were introduced in PHP 8.1, allowing properties to be initialized once and then remain immutable.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly

  -
    question: >
      What is the purpose of the `__get()` magic method?
    answers:
      - { value: "It is called when reading data from inaccessible (e.g., private or non-existent) properties.", correct: true }
      - { value: "It is called when writing data to inaccessible properties.", correct: false }
      - { value: "It is called when a method is invoked.", correct: false }
      - { value: "It is called when an object is cloned.", correct: false }
    help: |
      The `__get()` method is used for reading data from inaccessible properties.
      https://www.php.net/manual/en/language.oop5.magic.php#object.get

  -
    question: >
      Which SPL class provides a fixed-size array that can be resized only explicitly?
    answers:
      - { value: "SplFixedArray", correct: true }
      - { value: "ArrayObject", correct: false }
      - { value: "SplQueue", correct: false }
      - { value: "SplStack", correct: false }
    help: |
      `SplFixedArray` provides a fixed-size array, which can be more memory efficient than a regular PHP array for certain use cases.
      https://www.php.net/manual/en/class.splfixedarray.php

  -
    question: |
      What will be the output of the following code?

      ```php
      class MyTraitUser {
          use MyTrait;
          public function sayHello() {
              echo "Hello from MyTraitUser!";
          }
      }

      trait MyTrait {
          public function sayHello() {
              echo "Hello from Trait!";
          }
      }

      $obj = new MyTraitUser();
      $obj->sayHello();
      ```
    answers:
      - { value: "Hello from MyTraitUser!", correct: true }
      - { value: "Hello from Trait!", correct: false }
      - { value: "Fatal error", correct: false }
      - { value: "Parse error", correct: false }
    help: |
      When a class defines a method with the same name as a method in a trait it uses, the class's method takes precedence.
      https://www.php.net/manual/en/language.oop5.traits.php#language.oop5.traits.precedence

  -
    question: >
      Which PHP 8.0 feature allows you to define metadata for classes, methods, properties, and functions?
    answers:
      - { value: "Attributes", correct: true }
      - { value: "Annotations", correct: false }
      - { value: "Decorators", correct: false }
      - { value: "Traits", correct: false }
    help: |
      Attributes (often referred to as annotations in other languages) were introduced in PHP 8.0, providing a native way to add metadata to code.
      https://www.php.net/manual/en/language.attributes.overview.php

  -
    question: >
      What is the purpose of the `__set()` magic method?
    answers:
      - { value: "It is called when writing data to inaccessible (e.g., private or non-existent) properties.", correct: true }
      - { value: "It is called when reading data from inaccessible properties.", correct: false }
      - { value: "It is called when a method is invoked.", correct: false }
      - { value: "It is called when an object is cloned.", correct: false }
    help: |
      The `__set()` method is used for writing data to inaccessible properties.
      https://www.php.net/manual/en/language.oop5.magic.php#object.set

  -
    question: >
      Which SPL class provides a doubly linked list, allowing elements to be added and removed from both ends?
    answers:
      - { value: "SplDoublyLinkedList", correct: true }
      - { value: "SplQueue", correct: false }
      - { value: "SplStack", correct: false }
      - { value: "SplFixedArray", correct: false }
    help: |
      `SplDoublyLinkedList` implements a doubly linked list, which can be used as a stack, queue, or for general list operations.
      https://www.php.net/manual/en/class.spldoublylinkedlist.php

  -
    question: >
      What is the purpose of the `__clone()` magic method?
    answers:
      - { value: "It is called when an object is cloned.", correct: true }
      - { value: "It is called when an object is created.", correct: false }
      - { value: "It is called when an object is destroyed.", correct: false }
      - { value: "It is called when an undefined method is invoked.", correct: false }
    help: |
      The `__clone()` method is called when an object is cloned using the `clone` keyword.
      https://www.php.net/manual/en/language.oop5.cloning.php#object.clone

  -
    question: >
      Which PHP 8.0 feature allows a function to accept multiple types for a parameter or return multiple types?
    answers:
      - { value: "Union Types", correct: true }
      - { value: "Intersection Types", correct: false }
      - { value: "Nullable Types", correct: false }
      - { value: "Variadic Functions", correct: false }
    help: |
      Union Types were introduced in PHP 8.0, allowing a declaration to specify that a variable can be of multiple different types.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.union

  -
    question: >
      Which SPL class provides a heap data structure, useful for implementing priority queues?
    answers:
      - { value: "SplHeap", correct: true }
      - { value: "SplPriorityQueue", correct: true }
      - { value: "SplStack", correct: false }
      - { value: "SplQueue", correct: false }
    help: |
      `SplHeap` is the base class for heaps, and `SplPriorityQueue` is a specific implementation of a heap that maintains elements in a sorted order based on their priority.
      https://www.php.net/manual/en/class.splheap.php
      https://www.php.net/manual/en/class.splpriorityqueue.php

  -
    question: >
      What is the purpose of the `__isset()` magic method?
    answers:
      - { value: "It is triggered by calling `isset()` or `empty()` on inaccessible properties.", correct: true }
      - { value: "It is called when checking if a property exists.", correct: false }
      - { value: "It is called when setting a property.", correct: false }
      - { value: "It is called when unsetting a property.", correct: false }
    help: |
      The `__isset()` method is invoked when `isset()` or `empty()` is called on inaccessible properties.
      https://www.php.net/manual/en/language.oop5.magic.php#object.isset

  -
    question: >
      Which PHP 8.1 feature allows you to define a type that is the intersection of multiple types, meaning an object must implement all specified interfaces?
    answers:
      - { value: "Intersection Types", correct: true }
      - { value: "Union Types", correct: false }
      - { value: "Generic Types", correct: false }
      - { value: "Mixed Type", correct: false }
    help: |
      Intersection Types were introduced in PHP 8.1, allowing a variable to be declared as an instance of multiple interfaces (or classes and interfaces).
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.intersection

  -
    question: >
      What is the purpose of the `__unset()` magic method?
    answers:
      - { value: "It is triggered by calling `unset()` on inaccessible properties.", correct: true }
      - { value: "It is called when checking if a property exists.", correct: false }
      - { value: "It is called when setting a property.", correct: false }
      - { value: "It is called when reading a property.", correct: false }
    help: |
      The `__unset()` method is invoked when `unset()` is called on inaccessible properties.
      https://www.php.net/manual/en/language.oop5.magic.php#object.unset

  -
    question: >
      Which SPL class provides an interface for objects that can be used with `foreach` loops by returning an `Iterator`?
    answers:
      - { value: "IteratorAggregate", correct: true }
      - { value: "Iterator", correct: false }
      - { value: "Traversable", correct: false }
      - { value: "RecursiveIteratorIterator", correct: false }
    help: |
      Classes implementing `IteratorAggregate` must implement a `getIterator()` method which must return an instance of `Traversable`.
      https://www.php.net/manual/en/class.iteratoraggregate.php

  -
    question: >
      What is the purpose of the `__call()` magic method?
    answers:
      - { value: "It is triggered when invoking inaccessible (e.g., private or non-existent) methods in an object context.", correct: true }
      - { value: "It is triggered when invoking inaccessible static methods.", correct: false }
      - { value: "It is called when an object is treated as a function.", correct: false }
      - { value: "It is called when a method is successfully invoked.", correct: false }
    help: |
      The `__call()` method is invoked when an inaccessible method is called in an object context.
      https://www.php.net/manual/en/language.oop5.magic.php#object.call

  -
    question: >
      What is the purpose of the `__callStatic()` magic method?
    answers:
      - { value: "It is triggered when invoking inaccessible (e.g., private or non-existent) static methods.", correct: true }
      - { value: "It is triggered when invoking inaccessible methods in an object context.", correct: false }
      - { value: "It is called when a static property is accessed.", correct: false }
      - { value: "It is called when a static method is successfully invoked.", correct: false }
    help: |
      The `__callStatic()` method is invoked when an inaccessible static method is called.
      https://www.php.net/manual/en/language.oop5.magic.php#object.callstatic

  -
    question: >
      Which SPL class provides a general-purpose interface for iterators that can seek to an arbitrary position?
    answers:
      - { value: "SeekableIterator", correct: true }
      - { value: "Iterator", correct: false }
      - { value: "RecursiveIterator", correct: false }
      - { value: "FilterIterator", correct: false }
    help: |
      `SeekableIterator` extends `Iterator` and adds the `seek()` method, allowing random access to elements.
      https://www.php.net/manual/en/class.seekableiterator.php

  -
    question: >
      What is the purpose of the `__debugInfo()` magic method?
    answers:
      - { value: "It is called when `var_dump()` is used on an object.", correct: true }
      - { value: "It is called when an object is serialized.", correct: false }
      - { value: "It is called when an object is converted to a string.", correct: false }
      - { value: "It is called when an error occurs within the object.", correct: false }
    help: |
      The `__debugInfo()` method is called when `var_dump()` is used on an object to provide custom debug information.
      https://www.php.net/manual/en/language.oop5.magic.php#object.debuginfo

  -
    question: >
      Which SPL class provides an iterator that filters elements of another iterator?
    answers:
      - { value: "FilterIterator", correct: true }
      - { value: "RecursiveFilterIterator", correct: true }
      - { value: "LimitIterator", correct: false }
      - { value: "AppendIterator", correct: false }
    help: |
      `FilterIterator` is an abstract iterator that filters elements of another iterator. `RecursiveFilterIterator` extends this for recursive iteration.
      https://www.php.net/manual/en/class.filteriterator.php
      https://www.php.net/manual/en/class.recursivefilteriterator.php

  -
    question: >
      What is the purpose of the `__serialize()` and `__unserialize()` magic methods (PHP 7.4+)?
    answers:
      - { value: "To customize object serialization and deserialization, replacing `Serializable` interface.", correct: true }
      - { value: "To convert an object to a string representation.", correct: false }
      - { value: "To handle dynamic properties.", correct: false }
      - { value: "To define how an object is cloned.", correct: false }
    help: |
      `__serialize()` and `__unserialize()` were introduced in PHP 7.4 as a more robust and flexible alternative to the `Serializable` interface for custom serialization.
      https://www.php.net/manual/en/language.oop5.magic.php#object.serialize

  -
    question: >
      Which SPL class provides an iterator that limits the number of elements returned from another iterator?
    answers:
      - { value: "LimitIterator", correct: true }
      - { value: "CachingIterator", correct: false }
      - { value: "AppendIterator", correct: false }
      - { value: "CallbackFilterIterator", correct: false }
    help: |
      `LimitIterator` allows iterating over a subset of another iterator, specifying an offset and a limit.
      https://www.php.net/manual/en/class.limititerator.php

  -
    question: >
      Which PHP 8.0 feature allows you to define a type that accepts any value?
    answers:
      - { value: "mixed", correct: true }
      - { value: "any", correct: false }
      - { value: "dynamic", correct: false }
      - { value: "variant", correct: false }
    help: |
      The `mixed` type was introduced in PHP 8.0 to explicitly indicate that a parameter or return value can be of any type.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.mixed

  -
    question: >
      Which SPL class provides an iterator that can traverse recursive data structures (like trees)?
    answers:
      - { value: "RecursiveIterator", correct: true }
      - { value: "RecursiveIteratorIterator", correct: true }
      - { value: "IteratorIterator", correct: false }
      - { value: "AppendIterator", correct: false }
    help: |
      `RecursiveIterator` is an interface for iterators that can traverse recursive structures. `RecursiveIteratorIterator` is a concrete iterator that can traverse `RecursiveIterator` instances.
      https://www.php.net/manual/en/class.recursiveiterator.php
      https://www.php.net/manual/en/class.recursiveiteratoriterator.php

  -
    question: >
      What is the purpose of the `#[SensitiveParameter]` attribute in PHP 8.2?
    answers:
      - { value: "To redact the value of a parameter from stack traces.", correct: true }
      - { value: "To encrypt the parameter's value.", correct: false }
      - { value: "To mark a parameter as optional.", correct: false }
      - { value: "To enforce strict type checking on a parameter.", correct: false }
    help: |
      The `#[SensitiveParameter]` attribute (PHP 8.2) marks a parameter as sensitive, causing its value to be redacted from stack traces.
      https://www.php.net/manual/en/language.attributes.php#language.attributes.sensitiveparameter

  -
    question: >
      Which SPL class provides an iterator that can combine multiple iterators into a single one?
    answers:
      - { value: "AppendIterator", correct: true }
      - { value: "MultipleIterator", correct: false }
      - { value: "OuterIterator", correct: false }
      - { value: "IteratorIterator", correct: false }
    help: |
      `AppendIterator` allows appending multiple iterators to form a single, continuous iteration.
      https://www.php.net/manual/en/class.appenditerator.php

  -
    question: >
      What is the purpose of the `#[Override]` attribute in PHP 8.3? (Note: User asked for PHP 8.2, but this is a relevant upcoming feature for certification)
    answers:
      - { value: "To explicitly declare that a method is intended to override a parent method, leading to a compile-time error if it does not.", correct: true }
      - { value: "To prevent a method from being overridden.", correct: false }
      - { value: "To make a method static.", correct: false }
      - { value: "To mark a method as abstract.", correct: false }
    help: |
      The `#[Override]` attribute (introduced in PHP 8.3) is a new feature that explicitly marks methods intended to override a parent method. If a method marked with `#[Override]` does not actually override a parent method, a compile-time error is thrown. This helps prevent silent bugs caused by typos or refactoring.
      https://wiki.php.net/rfc/explicit_readonly_properties_and_override_attribute (RFC for PHP 8.3)

  -
    question: >
      Which SPL class provides an iterator that can cache the results of another iterator?
    answers:
      - { value: "CachingIterator", correct: true }
      - { value: "NoRewindIterator", correct: false }
      - { value: "OuterIterator", correct: false }
      - { value: "EmptyIterator", correct: false }
    help: |
      `CachingIterator` allows you to cache elements of an inner iterator, which can be useful for looking ahead or re-using elements.
      https://www.php.net/manual/en/class.cachingiterator.php

  -
    question: >
      What is the purpose of the `#[ReturnTypeWillChange]` attribute in PHP 8.1+?
    answers:
      - { value: "To suppress a deprecation warning when a method's return type signature differs from its parent/interface, but the change is intentional.", correct: true }
      - { value: "To force a method to return a specific type.", correct: false }
      - { value: "To indicate that a method will always return `null`.", correct: false }
      - { value: "To mark a method as experimental.", correct: false }
    help: |
      The `#[ReturnTypeWillChange]` attribute (PHP 8.1) is used to suppress a deprecation warning when a method's return type signature differs from its parent or interface, indicating that the change is intentional and will be aligned in a future major version.
      https://www.php.net/manual/en/language.attributes.php#language.attributes.returntypewillchange

  -
    question: >
      Which SPL class provides an iterator that does not allow rewinding?
    answers:
      - { value: "NoRewindIterator", correct: true }
      - { value: "CachingIterator", correct: false }
      - { value: "OuterIterator", correct: false }
      - { value: "EmptyIterator", correct: false }
    help: |
      `NoRewindIterator` is a wrapper iterator that ensures the wrapped iterator cannot be rewound.
      https://www.php.net/manual/en/class.norewinditerator.php

  -
    question: >
      What is the purpose of the `#[Pure]` attribute (from external libraries, but conceptually relevant for PHP 8.0+ attributes)?
    answers:
      - { value: "To indicate that a function has no side effects and its return value depends only on its inputs.", correct: false }
      - { value: "To mark a function as immutable.", correct: false }
      - { value: "To ensure a function always returns the same value.", correct: false }
      - { value: "To make a function's execution faster.", correct: false }
    help: |
      While not a built-in PHP attribute, the concept of "pure" functions (functions with no side effects and whose output depends only on their inputs) is important in modern programming paradigms. Attributes in PHP 8.0+ enable such metadata. (Note: This question acknowledges the attribute might be from a library but tests the concept of attributes for metadata).
      https://www.php.net/manual/en/language.attributes.overview.php

  -
    question: >
      Which SPL class provides an iterator that can iterate over a single element?
    answers:
      - { value: "EmptyIterator", correct: false }
      - { value: "ArrayIterator", correct: false }
      - { value: "CallbackFilterIterator", correct: false }
      - { value: "IteratorIterator", correct: false }
    help: |
      There isn't a specific SPL class designed *only* for a single element. `ArrayIterator` can iterate over an array containing one element. `EmptyIterator` is for an empty set. This question tests understanding of SPL iterators' primary purpose.
      https://www.php.net/manual/en/spl.iterators.php

  -
    question: >
      What is the purpose of the `#[Immutable]` attribute (from external libraries, but conceptually relevant for PHP 8.0+ attributes)?
    answers:
      - { value: "To indicate that an object's state cannot be modified after it is created.", correct: false }
      - { value: "To make all properties of a class `readonly`.", correct: false }
      - { value: "To prevent a class from being extended.", correct: false }
      - { value: "To ensure a class has no side effects.", correct: false }
    help: |
      While not a built-in PHP attribute, the concept of immutability (an object whose state cannot be changed after creation) is a common design pattern. Attributes in PHP 8.0+ allow libraries to define such metadata. (Note: This question acknowledges the attribute might be from a library but tests the concept of attributes for metadata).
      https://www.php.net/manual/en/language.attributes.overview.php

  -
    question: >
      Which SPL class provides an iterator that can apply a callback function to filter elements?
    answers:
      - { value: "CallbackFilterIterator", correct: true }
      - { value: "FilterIterator", correct: false }
      - { value: "RecursiveCallbackFilterIterator", correct: true }
      - { value: "RegexIterator", correct: false }
    help: |
      `CallbackFilterIterator` allows filtering elements based on a user-defined callback function. `RecursiveCallbackFilterIterator` extends this for recursive iteration.
      https://www.php.net/manual/en/class.callbackfilteriterator.php
      https://www.php.net/manual/en/class.recursivecallbackfilteriterator.php

  -
    question: >
      What is the purpose of the `#[Assert\Length]` attribute (from Symfony/Doctrine, but conceptually relevant for PHP 8.0+ attributes)?
    answers:
      - { value: "To define validation constraints on a property's length.", correct: false }
      - { value: "To specify the maximum length of a string.", correct: false }
      - { value: "To define the minimum length of an array.", correct: false }
      - { value: "To assert that a string has a specific length.", correct: false }
    help: |
      While this specific attribute comes from libraries like Symfony's Validator component, it demonstrates how PHP 8.0+ attributes are used to attach metadata (like validation rules) directly to properties or methods.
      https://symfony.com/doc/current/validation/attributes.html (Example of attribute usage in Symfony)
      https://www.php.net/manual/en/language.attributes.overview.php

  -
    question: >
      Which SPL class provides an iterator that can filter elements based on a regular expression?
    answers:
      - { value: "RegexIterator", correct: true }
      - { value: "CallbackFilterIterator", correct: false }
      - { value: "FilterIterator", correct: false }
      - { value: "RecursiveRegexIterator", correct: true }
    help: |
      `RegexIterator` filters elements of another iterator using a regular expression. `RecursiveRegexIterator` extends this for recursive iteration.
      https://www.php.net/manual/en/class.regexiterator.php
      https://www.php.net/manual/en/class.recursiveregexiterator.php