category: PHP

questions:
  -
    question: >
      Which of the following is a new feature introduced in PHP 8.0 that allows for more concise class property definitions?
    answers:
      - { value: "Constructor Property Promotion", correct: true }
      - { value: "Union Types", correct: false }
      - { value: "Named Arguments", correct: false }
      - { value: "Match Expression", correct: false }
    help: |
      Constructor property promotion allows defining class properties directly in the constructor signature, reducing boilerplate code.
      https://www.php.net/manual/en/language.oop5.decon.php#language.oop5.decon.constructor.promotion

  -
    question: |
      Consider the following PHP code:

      ```php
      <?php
      namespace App\Controller;

      use App\Service\MyService;

      class ProductController
      {
          public function __construct(MyService $service)
          {
              // ...
          }
      }
      ?>
      ```

      What is the primary purpose of the `namespace App\Controller;` declaration?
    answers:
      - { value: "To organize code and prevent naming collisions.", correct: true }
      - { value: "To define the class as a Symfony controller.", correct: false }
      - { value: "To automatically load the `MyService` class.", correct: false }
      - { value: "To declare a global constant for the application.", correct: false }
    help: |
      Namespaces provide a way to group related classes, interfaces, functions, and constants, preventing naming conflicts when combining code from different sources.
      https://www.php.net/manual/en/language.namespaces.php

  -
    question: >
      In PHP, what is the key characteristic of an `abstract` class?
    answers:
      - { value: "It cannot be instantiated directly.", correct: true }
      - { value: "All its methods must be declared as `abstract`.", correct: false }
      - { value: "It can only contain static methods.", correct: false }
      - { value: "It must implement all methods from any interface it declares.", correct: false }
    help: |
      Abstract classes are classes that cannot be instantiated on their own and must be extended by other classes. They can contain abstract methods, which must be implemented by child classes.
      https://www.php.net/manual/en/language.oop5.abstract.php

  -
    question: |
      Which of the following correctly defines an interface in PHP?

      ```php
      <?php
      // Option A
      interface Logger
      {
          public function log(string $message);
      }

      // Option B
      abstract interface Logger
      {
          public function log(string $message);
      }

      // Option C
      class interface Logger
      {
          public function log(string $message);
      }
      ?>
      ```
    answers:
      - { value: "Option A", correct: true }
      - { value: "Option B", correct: false }
      - { value: "Option C", correct: false }
    help: |
      Interfaces are defined using the `interface` keyword. They declare methods that a class must implement, but they do not contain method bodies.
      https://www.php.net/manual/en/language.oop5.interfaces.php

  -
    question: >
      What is the purpose of the `finally` block in a `try...catch...finally` statement in PHP?
    answers:
      - { value: "It executes only if an exception is caught.", correct: false }
      - { value: "It executes only if no exception is thrown.", correct: false }
      - { value: "It always executes, regardless of whether an exception was thrown or caught.", correct: true }
      - { value: "It is used to re-throw an exception.", correct: false }
    help: |
      The `finally` block will always be executed after the `try` and `catch` blocks, regardless of whether an exception was thrown or caught. It's often used for cleanup operations.
      https://www.php.net/manual/en/language.exceptions.php#language.exceptions.finally

  -
    question: |
      Given the following PHP code, what will be the output?

      ```php
      <?php
      $message = 'Hello';
      $greet = function ($name) use ($message) {
          echo "$message, $name!";
      };
      $message = 'Hi';
      $greet('Alice');
      ?>
      ```
    answers:
      - { value: "Hello, Alice!", correct: true }
      - { value: "Hi, Alice!", correct: false }
      - { value: "An error will occur.", correct: false }
      - { value: "Nothing will be output.", correct: false }
    help: |
      When a variable is imported into a closure using `use`, it is imported by value at the time the closure is defined, not by reference. Subsequent changes to the original variable do not affect the closure's captured value.
      https://www.php.net/manual/en/functions.anonymous.php

  -
    question: >
      Which PHP 8.0 feature allows you to specify a function argument by its parameter name, regardless of its position?
    answers:
      - { value: "Named Arguments", correct: true }
      - { value: "Positional Arguments", correct: false }
      - { value: "Spread Operator", correct: false }
      - { value: "Argument Unpacking", correct: false }
    help: |
      Named arguments allow passing arguments to a function based on their parameter name, making the code more readable and allowing for skipping optional parameters.
      https://www.php.net/manual/en/functions.arguments.php#functions.named-arguments

  -
    question: >
      What is a `trait` in PHP primarily used for?
    answers:
      - { value: "To achieve multiple inheritance of behavior in single inheritance languages.", correct: true }
      - { value: "To define a contract that a class must adhere to.", correct: false }
      - { value: "To declare abstract methods that must be implemented by child classes.", correct: false }
      - { value: "To create singleton instances of a class.", correct: false }
    help: |
      Traits are a mechanism for code reuse in single inheritance languages like PHP. They allow a class to use methods and properties from multiple traits, effectively providing a form of horizontal reuse.
      https://www.php.net/manual/en/language.oop5.traits.php

  -
    question: >
      Which of the following SPL (Standard PHP Library) classes provides an interface for iterating over objects that can be traversed, such as arrays or objects implementing `Traversable`?
    answers:
      - { value: "SplStack", correct: false }
      - { value: "SplQueue", correct: false }
      - { value: "Iterator", correct: true }
      - { value: "ArrayObject", correct: false }
    help: |
      The `Iterator` interface defines the methods that an object must implement to be used with the `foreach` construct. It is a fundamental part of PHP's iteration mechanism.
      https://www.php.net/manual/en/class.iterator.php

  -
    question: |
      Consider the following code snippet:

      ```php
      <?php
      class MyClass
      {
          public function __construct(
              private string $name,
              public int $age
          ) {}
      }

      $obj = new MyClass('John Doe', 30);
      echo $obj->name;
      ?>
      ```

      What will be the output of this code?
    answers:
      - { value: "John Doe", correct: false }
      - { value: "30", correct: false }
      - { value: "An error will occur because 'name' is private.", correct: true }
      - { value: "Nothing, as private properties cannot be accessed.", correct: false }
    help: |
      Private properties, even when promoted in the constructor, cannot be accessed directly from outside the class. Attempting to do so will result in a fatal error.
      https://www.php.net/manual/en/language.oop5.visibility.php

  -
    question: >
      Which PHP extension is commonly used for working with JSON data?
    answers:
      - { value: "XML", correct: false }
      - { value: "GD", correct: false }
      - { value: "JSON", correct: true }
      - { value: "CURL", correct: false }
    help: |
      The JSON extension provides functions for encoding and decoding JSON (JavaScript Object Notation) data.
      https://www.php.net/manual/en/book.json.php

  -
    question: |
      Which of the following is a valid way to declare a constant within a class in PHP?

      ```php
      <?php
      class MyConstants
      {
          // Option A
          const MY_CONSTANT = 'value';

          // Option B
          public const MY_CONSTANT = 'value';

          // Option C
          define('MY_CONSTANT', 'value');
      }
      ?>
      ```
    answers:
      - { value: "Option A", correct: true }
      - { value: "Option B", correct: true }
      - { value: "Option C", correct: false }
    help: |
      Class constants are declared using the `const` keyword. Since PHP 7.1, visibility modifiers (`public`, `protected`, `private`) can also be applied to class constants. `define()` is for global constants.
      https://www.php.net/manual/en/language.oop5.constants.php

  -
    question: >
      What is the purpose of the `__invoke()` magic method in PHP?
    answers:
      - { value: "It is called when an object is used as a function.", correct: true }
      - { value: "It is called when an object is converted to a string.", correct: false }
      - { value: "It is called when an object is cloned.", correct: false }
      - { value: "It is called when a non-existent method is called on an object.", correct: false }
    help: |
      The `__invoke()` method is called when a script tries to call an object as a function. This allows objects to be callable.
      https://www.php.net/manual/en/language.oop5.magic.php#object.invoke

  -
    question: |
      Which of the following PHP 8.0 features allows a function to return different types based on the input, without using `mixed`?
    answers:
      - { value: "Union Types", correct: true }
      - { value: "Intersection Types", correct: false }
      - { value: "Static Return Type", correct: false }
      - { value: "Nullable Types", correct: false }
    help: |
      Union types allow a variable, parameter, or return type to accept values of multiple different types. For example, `int|float` means it can be either an integer or a float.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.union

  -
    question: >
      In PHP, what is the correct way to check if a variable is an array and not empty?
    answers:
      - { value: "`is_array($var) && count($var) > 0`", correct: true }
      - { value: "`isset($var) && !empty($var)`", correct: false }
      - { value: "`is_array($var) && !is_null($var)`", correct: false }
      - { value: "`array_exists($var)`", correct: false }
    help: |
      `is_array()` checks if a variable is an array. `count($var) > 0` checks if the array has elements. `!empty()` would also work but `count($var) > 0` is more explicit for arrays.
      https://www.php.net/manual/en/function.is-array.php
      https://www.php.net/manual/en/function.count.php

  -
    question: >
      Which SPL class provides a way to treat objects as arrays, allowing array access syntax (e.g., `$obj['key']`)?
    answers:
      - { value: "SplFixedArray", correct: false }
      - { value: "ArrayIterator", correct: false }
      - { value: "ArrayAccess", correct: true }
      - { value: "SplObjectStorage", correct: false }
    help: |
      The `ArrayAccess` interface allows objects to be accessed like arrays. Classes implementing this interface must provide `offsetExists`, `offsetGet`, `offsetSet`, and `offsetUnset` methods.
      https://www.php.net/manual/en/class.arrayaccess.php

  -
    question: |
      What is the correct syntax for defining an anonymous class in PHP?

      ```php
      <?php
      // Option A
      $obj = new class {
          public function greet() {
              return "Hello!";
          }
      };

      // Option B
      $obj = new (function() {
          public function greet() {
              return "Hello!";
          }
      });

      // Option C
      $obj = new function() {
          public function greet() {
              return "Hello!";
          }
      };
      ?>
      ```
    answers:
      - { value: "Option A", correct: true }
      - { value: "Option B", correct: false }
      - { value: "Option C", correct: false }
    help: |
      Anonymous classes are defined using `new class` followed by the class body. They are useful for simple, one-off objects.
      https://www.php.net/manual/en/language.oop5.anonymous.php

  -
    question: >
      Which of the following is a valid way to catch multiple types of exceptions in a single `catch` block in PHP 8.0+?
    answers:
      - { value: "`catch (ExceptionA | ExceptionB $e)`", correct: true }
      - { value: "`catch (ExceptionA, ExceptionB $e)`", correct: false }
      - { value: "`catch (ExceptionA && ExceptionB $e)`", correct: false }
      - { value: "`catch (ExceptionA || ExceptionB $e)`", correct: false }
    help: |
      PHP 7.1 introduced multi-catch exception handling using the `|` (bitwise OR) operator. This allows catching multiple exception types in a single `catch` block.
      https://www.php.net/manual/en/language.exceptions.php#language.exceptions.multicatch

  -
    question: >
      What is the purpose of the `declare(strict_types=1);` directive in PHP?
    answers:
      - { value: "It enforces strict type checking for scalar type declarations in the current file.", correct: true }
      - { value: "It enables strict mode for all PHP files in the application.", correct: false }
      - { value: "It prevents type juggling in all functions.", correct: false }
      - { value: "It makes all variables strictly typed.", correct: false }
    help: |
      The `declare(strict_types=1);` directive, placed at the top of a file, enables strict mode for scalar type declarations within that file, preventing PHP from performing implicit type conversions.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.strict

  -
    question: >
      Which of the following is a common use case for the `SplObjectStorage` class in SPL?
    answers:
      - { value: "Storing a collection of objects and associating data with each object.", correct: true }
      - { value: "Implementing a fixed-size array of objects.", correct: false }
      - { value: "Creating a queue of objects for processing.", correct: false }
      - { value: "Iterating over an array in reverse order.", correct: false }
    help: |
      `SplObjectStorage` is a specialized collection that maps objects to data. It can be used to store objects and associate arbitrary data with them, or simply to track unique objects.
      https://www.php.net/manual/en/class.splobjectstorage.php

  -
    question: |
      Given the following PHP code, what will be the output?

      ```php
      <?php
      function sum(int ...$numbers): int {
          return array_sum($numbers);
      }

      echo sum(1, 2, 3, 4);
      ?>
      ```
    answers:
      - { value: "10", correct: true }
      - { value: "An error, as `...$numbers` is not valid.", correct: false }
      - { value: "0", correct: false }
      - { value: "1234", correct: false }
    help: |
      The `...` (splat operator) allows a function to accept a variable number of arguments as an array. This is known as variadic functions.
      https://www.php.net/manual/en/functions.variable-arg-list.php

  -
    question: >
      What is the main difference between `interface` and `abstract class` in PHP?
    answers:
      - { value: "An interface can only declare method signatures, while an abstract class can have concrete methods and properties.", correct: true }
      - { value: "An abstract class can be instantiated, while an interface cannot.", correct: false }
      - { value: "A class can implement multiple abstract classes, but only one interface.", correct: false }
      - { value: "Interfaces can define constants, but abstract classes cannot.", correct: false }
    help: |
      Interfaces define a contract for classes to implement, containing only method signatures (and constants). Abstract classes can have both abstract and concrete methods, properties, and cannot be instantiated directly.
      https://www.php.net/manual/en/language.oop5.interfaces.php
      https://www.php.net/manual/en/language.oop5.abstract.php

  -
    question: >
      Which PHP 8.0 feature allows for more concise conditional assignments, replacing the common `isset()` and ternary operator pattern?
    answers:
      - { value: "Nullsafe Operator (`?->`)", correct: false }
      - { value: "Null Coalescing Operator (`??`)", correct: false }
      - { value: "Null Coalescing Assignment Operator (`??=`)", correct: true }
      - { value: "Match Expression", correct: false }
    help: |
      The Null Coalescing Assignment Operator (`??=`) assigns the value of its right-hand operand to its left-hand operand only if the left-hand operand is null.
      https://www.php.net/manual/en/language.operators.comparison.php#language.operators.comparison.coalesce-assign

  -
    question: >
      When should you use `error_reporting(0);` in a production environment?
    answers:
      - { value: "Never, as it hides all errors and makes debugging impossible.", correct: true }
      - { value: "Always, to prevent errors from being displayed to users.", correct: false }
      - { value: "Only for specific, known errors that are not critical.", correct: false }
      - { value: "When deploying a new feature to production.", correct: false }
    help: |
      Setting `error_reporting(0)` in production is highly discouraged as it suppresses all errors, including critical ones, making it impossible to detect and fix issues. Errors should be logged, not hidden.
      https://www.php.net/manual/en/function.error-reporting.php

  -
    question: >
      What is the purpose of the `__autoload()` function (deprecated in PHP 7.2, replaced by PSR-4 autoloading)?
    answers:
      - { value: "To automatically load classes when they are first used.", correct: true }
      - { value: "To automatically include all files in a directory.", correct: false }
      - { value: "To execute a function before any script runs.", correct: false }
      - { value: "To define a global constant.", correct: false }
    help: |
      `__autoload()` was a magic function that PHP would call if it tried to use a class or interface that had not yet been defined. It has been superseded by `spl_autoload_register()` and PSR-4 autoloading.
      https://www.php.net/manual/en/function.autoload.php

  -
    question: |
      Which of the following is an example of a PHP extension?
    answers:
      - { value: "Symfony", correct: false }
      - { value: "Composer", correct: false }
      - { value: "PDO", correct: true }
      - { value: "Twig", correct: false }
    help: |
      PDO (PHP Data Objects) is a PHP extension that defines a lightweight, consistent interface for accessing databases. Extensions are compiled C libraries that add functionality to PHP.
      https://www.php.net/manual/en/book.pdo.php

  -
    question: >
      What is the primary benefit of using `final` keyword for a class or method in PHP?
    answers:
      - { value: "To prevent a class from being extended or a method from being overridden.", correct: true }
      - { value: "To make a class or method static.", correct: false }
      - { value: "To ensure a class is a singleton.", correct: false }
      - { value: "To mark a class or method as deprecated.", correct: false }
    help: |
      If a class is declared `final`, it cannot be extended. If a method is declared `final`, it cannot be overridden by child classes.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: |
      Which of the following is the correct way to define a read-only property in PHP 8.1?

      ```php
      <?php
      class User
      {
          // Option A
          public readonly string $name;

          // Option B
          public static string $name;

          // Option C
          public const string $name;
      }
      ?>
      ```
    answers:
      - { value: "Option A", correct: true }
      - { value: "Option B", correct: false }
      - { value: "Option C", correct: false }
    help: |
      PHP 8.1 introduced the `readonly` keyword for properties, allowing them to be initialized only once (typically in the constructor) and then remain immutable.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly

  -
    question: >
      What is the purpose of the `__toString()` magic method in PHP?
    answers:
      - { value: "It is called when an object is converted to a string.", correct: true }
      - { value: "It is called when an object is created.", correct: false }
      - { value: "It is called when an object is destroyed.", correct: false }
      - { value: "It is called when a method is called on an object.", correct: false }
    help: |
      The `__toString()` method allows a class to decide how it will react when it is treated as a string. For example, `echo $obj;` will call this method.
      https://www.php.net/manual/en/language.oop5.magic.php#object.tostring

  -
    question: >
      Which PHP function is used to convert a JSON string into a PHP variable (e.g., an array or object)?
    answers:
      - { value: "`json_encode()`", correct: false }
      - { value: "`json_decode()`", correct: true }
      - { value: "`json_parse()`", correct: false }
      - { value: "`json_to_array()`", correct: false }
    help: |
      `json_decode()` takes a JSON encoded string and converts it into a PHP value.
      https://www.php.net/manual/en/function.json-decode.php

  -
    question: >
      What is the primary use case for the `WeakMap` class introduced in PHP 8.0?
    answers:
      - { value: "To store objects as keys without preventing them from being garbage collected.", correct: true }
      - { value: "To store a fixed-size array of objects.", correct: false }
      - { value: "To create a map where keys are always strings.", correct: false }
      - { value: "To efficiently store large datasets in memory.", correct: false }
    help: |
      `WeakMap` allows objects to be used as keys without holding a strong reference to them. This means that if the object key is no longer referenced elsewhere, it can be garbage collected, and the entry will be removed from the `WeakMap`.
      https://www.php.net/manual/en/class.weakmap.php

  -
    question: |
      Which of the following is the correct way to define a static method in a PHP class?

      ```php
      <?php
      class MyUtility
      {
          // Option A
          public static function helper() { /* ... */ }

          // Option B
          public function static helper() { /* ... */ }

          // Option C
          static public function helper() { /* ... */ }
      }
      ?>
      ```
    answers:
      - { value: "Option A", correct: true }
      - { value: "Option C", correct: true }
      - { value: "Option B", correct: false }
    help: |
      Static methods are declared using the `static` keyword. They can be called directly on the class without needing an instance of the class. The order of `public` and `static` does not matter.
      https://www.php.net/manual/en/language.oop5.static.php

  -
    question: >
      What is the purpose of the `throw` keyword in PHP?
    answers:
      - { value: "To raise an exception.", correct: true }
      - { value: "To define a new class.", correct: false }
      - { value: "To include an external file.", correct: false }
      - { value: "To declare a variable.", correct: false }
    help: |
      The `throw` keyword is used to throw an exception, signaling that an error or exceptional condition has occurred.
      https://www.php.net/manual/en/language.exceptions.php

  -
    question: >
      Which of the following is a key advantage of using `spl_autoload_register()` over `__autoload()`?
    answers:
      - { value: "It allows multiple autoload functions to be registered.", correct: true }
      - { value: "It is faster than `__autoload()`.", correct: false }
      - { value: "It automatically resolves namespaces.", correct: false }
      - { value: "It is compatible with older PHP versions.", correct: false }
    help: |
      `spl_autoload_register()` provides a more flexible and robust autoloading mechanism by allowing multiple autoload functions to be registered, forming a queue. This is crucial for interoperability between libraries.
      https://www.php.net/manual/en/function.spl-autoload-register.php

  -
    question: >
      What is the output of `var_dump(null ?? 'default');` in PHP?
    answers:
      - { value: "string(7) \"default\"", correct: true }
      - { value: "NULL", correct: false }
      - { value: "bool(true)", correct: false }
      - { value: "An error will occur.", correct: false }
    help: |
      The Null Coalescing Operator (`??`) returns its first operand if it exists and is not null; otherwise, it returns its second operand.
      https://www.php.net/manual/en/language.operators.comparison.php#language.operators.comparison.coalesce

  -
    question: >
      Which of the following SPL data structures implements a LIFO (Last In, First Out) behavior?
    answers:
      - { value: "SplQueue", correct: false }
      - { value: "SplStack", correct: true }
      - { value: "SplHeap", correct: false }
      - { value: "SplDoublyLinkedList", correct: false }
    help: |
      `SplStack` provides the functionality of a stack, where the last element added is the first one to be removed (LIFO).
      https://www.php.net/manual/en/class.splstack.php

  -
    question: >
      What is the primary purpose of the `Match` expression introduced in PHP 8.0?
    answers:
      - { value: "To provide a more concise and type-safe alternative to the `switch` statement.", correct: true }
      - { value: "To perform regular expression matching on strings.", correct: false }
      - { value: "To define a new type of loop.", correct: false }
      - { value: "To compare two objects for equality.", correct: false }
    help: |
      The `match` expression is similar to `switch` but provides more concise syntax, supports multiple conditions per branch, and returns a value, making it an expression rather than a statement. It also uses strict comparison (`===`).
      https://www.php.net/manual/en/control-structures.match.php

  -
    question: |
      Given the following PHP code, what will be the output?

      ```php
      <?php
      function process(string|int $value): string {
          if (is_string($value)) {
              return "String: " . $value;
          }
          return "Number: " . $value;
      }

      echo process(123);
      ?>
      ```
    answers:
      - { value: "Number: 123", correct: true }
      - { value: "String: 123", correct: false }
      - { value: "An error will occur.", correct: false }
      - { value: "Nothing will be output.", correct: false }
    help: |
      The function uses a union type `string|int` for the `$value` parameter. When an integer `123` is passed, the `is_string()` check fails, and the second return statement is executed.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.union

  -
    question: >
      Which of the following is a valid way to define a constant in PHP that is accessible globally?
    answers:
      - { value: "`define('APP_VERSION', '1.0.0');`", correct: true }
      - { value: "`const APP_VERSION = '1.0.0';`", correct: false }
      - { value: "`global $APP_VERSION = '1.0.0';`", correct: false }
      - { value: "`$GLOBALS['APP_VERSION'] = '1.0.0';`", correct: false }
    help: |
      The `define()` function is used to define global constants. The `const` keyword is used for class constants or constants within a namespace (since PHP 5.6).
      https://www.php.net/manual/en/function.define.php

  -
    question: >
      What is the purpose of the `#[Deprecated]` attribute (introduced in PHP 8.0)?
    answers:
      - { value: "To mark a function, class, or property as deprecated, generating a deprecation notice when used.", correct: true }
      - { value: "To prevent a function from being called.", correct: false }
      - { value: "To remove a function from the PHP core.", correct: false }
      - { value: "To optimize the performance of a function.", correct: false }
    help: |
      Attributes (also known as annotations) provide a way to add metadata to classes, methods, properties, functions, and parameters. The `#[Deprecated]` attribute is a built-in attribute used to signal that a piece of code is no longer recommended for use.
      https://www.php.net/manual/en/language.attributes.php

  -
    question: >
      Which SPL class provides a double-linked list, allowing elements to be added and removed from both ends?
    answers:
      - { value: "SplQueue", correct: true }
      - { value: "SplStack", correct: false }
      - { value: "SplFixedArray", correct: false }
      - { value: "SplHeap", correct: false }
    help: |
      `SplQueue` extends `SplDoublyLinkedList` and implements a FIFO (First In, First Out) queue. `SplDoublyLinkedList` itself is a general-purpose double-linked list.
      https://www.php.net/manual/en/class.splqueue.php
      https://www.php.net/manual/en/class.spldoublylinkedlist.php

  -
    question: |
      What will be the output of the following PHP code?

      ```php
      <?php
      class MyTraitUser {
          use MyTrait;
          public function sayHello() {
              echo $this->message;
          }
      }

      trait MyTrait {
          private string $message = "Hello from Trait!";
      }

      $obj = new MyTraitUser();
      $obj->sayHello();
      ?>
      ```
    answers:
      - { value: "Hello from Trait!", correct: true }
      - { value: "An error, as private properties cannot be accessed from a trait.", correct: false }
      - { value: "An error, as the trait is defined after the class.", correct: false }
      - { value: "Nothing, as private properties are not inherited.", correct: false }
    help: |
      When a trait is used in a class, its methods and properties are "copied" into the class, effectively becoming part of the class. Private properties of the trait are accessible within the class that uses the trait.
      https://www.php.net/manual/en/language.oop5.traits.php

  -
    question: >
      Which of the following is the correct way to handle a custom exception in PHP?
    answers:
      - { value: "`try { /* ... */ } catch (MyCustomException $e) { /* ... */ }`", correct: true }
      - { value: "`try { /* ... */ } handle (MyCustomException $e) { /* ... */ }`", correct: false }
      - { value: "`catch (MyCustomException $e) { /* ... */ }`", correct: false }
      - { value: "`throw new MyCustomException();` is the only way.", correct: false }
    help: |
      Exceptions are caught using a `try...catch` block. The `catch` block specifies the type of exception it can handle.
      https://www.php.net/manual/en/language.exceptions.php

  -
    question: >
      What is the purpose of the `__debugInfo()` magic method in PHP?
    answers:
      - { value: "It is called when `var_dump()` is used on an object, allowing customization of debug output.", correct: true }
      - { value: "It is called when an object is serialized.", correct: false }
      - { value: "It is called when an object is converted to a string for logging.", correct: false }
      - { value: "It is used to define properties that should not be serialized.", correct: false }
    help: |
      The `__debugInfo()` method is called when `var_dump()` is used on an object. This allows you to customize the information that is displayed when debugging an object.
      https://www.php.net/manual/en/language.oop5.magic.php#object.debuginfo

  -
    question: >
      Which PHP 8.0 feature allows you to define a function that accepts either an integer or a float, but not both simultaneously?
    answers:
      - { value: "Union Types", correct: true }
      - { value: "Intersection Types", correct: false }
      - { value: "Mixed Type", correct: false }
      - { value: "Variadic Arguments", correct: false }
    help: |
      Union types allow you to specify that a parameter, property, or return type can be one of several types. For example, `int|float` means the value can be either an integer or a float.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.union

  -
    question: >
      What is the purpose of the `ReflectionClass` class in PHP's Reflection API?
    answers:
      - { value: "To obtain information about a class, including its methods, properties, and constants.", correct: true }
      - { value: "To create new instances of a class dynamically.", correct: false }
      - { value: "To modify the behavior of a class at runtime.", correct: false }
      - { value: "To inspect the call stack during execution.", correct: false }
    help: |
      The Reflection API provides classes that allow you to inspect classes, interfaces, functions, methods, and extensions. `ReflectionClass` specifically provides information about a given class.
      https://www.php.net/manual/en/class.reflectionclass.php

  -
    question: |
      What will be the output of the following PHP code?

      ```php
      <?php
      $numbers = [1, 2, 3];
      $doubled = array_map(fn($n) => $n * 2, $numbers);
      print_r($doubled);
      ?>
      ```
    answers:
      - { value: "Array\n(\n    [0] => 2\n    [1] => 4\n    [2] => 6\n)\n", correct: true }
      - { value: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n", correct: false }
      - { value: "An error will occur.", correct: false }
      - { value: "Nothing will be output.", correct: false }
    help: |
      Arrow functions (`fn`) introduced in PHP 7.4 provide a more concise syntax for anonymous functions, especially for single-expression callbacks. `array_map` applies the callback to each element of the array.
      https://www.php.net/manual/en/functions.arrow.php
      https://www.php.net/manual/en/function.array-map.php

  -
    question: >
      Which PHP extension is essential for secure communication over the internet (e.g., HTTPS)?
    answers:
      - { value: "OpenSSL", correct: true }
      - { value: "Exif", correct: false }
      - { value: "Zip", correct: false }
      - { value: "Bcmath", correct: false }
    help: |
      The OpenSSL extension provides cryptographic functionality, including support for SSL/TLS protocols, which are fundamental for secure web communication (HTTPS).
      https://www.php.net/manual/en/book.openssl.php

  -
    question: >
      What is the purpose of the `__clone()` magic method in PHP?
    answers:
      - { value: "It is called when an object is duplicated using the `clone` keyword.", correct: true }
      - { value: "It is called when an object is created.", correct: false }
      - { value: "It is called when an object is destroyed.", correct: false }
      - { value: "It is used to deep copy an object.", correct: false }
    help: |
      When an object is cloned, PHP performs a shallow copy of all its properties. If you need to perform a deep copy (e.g., clone objects within the object), you can implement the `__clone()` method to customize the cloning behavior.
      https://www.php.net/manual/en/language.oop5.cloning.php

  -
    question: >
      Which SPL class provides an iterator that can traverse over all files and directories within a specified path recursively?
    answers:
      - { value: "FilesystemIterator", correct: false }
      - { value: "DirectoryIterator", correct: false }
      - { value: "RecursiveDirectoryIterator", correct: true }
      - { value: "GlobIterator", correct: false }
    help: |
      `RecursiveDirectoryIterator` provides an iterator for traversing a directory and its subdirectories recursively. It is often used with `RecursiveIteratorIterator` for flat iteration.
      https://www.php.net/manual/en/class.recursivedirectoryiterator.php

  -
    question: >
      What is the correct way to access a static property within the same class in PHP?
    answers:
      - { value: "`self::$propertyName`", correct: true }
      - { value: "`$this->propertyName`", correct: false }
      - { value: "`MyClass::$propertyName`", correct: true }
      - { value: "`static::$propertyName`", correct: true }
    help: |
      Static properties are accessed using the `self::`, `static::`, or the class name followed by `::` and the property name. `self::` refers to the class where the code is written, `static::` refers to the class where the method is called (late static binding).
      https://www.php.net/manual/en/language.oop5.static.php

  -
    question: >
      Which of the following is a new function introduced in PHP 8.0 for checking if a string starts with a specific substring?
    answers:
      - { value: "`str_starts_with()`", correct: true }
      - { value: "`str_contains()`", correct: false }
      - { value: "`str_ends_with()`", correct: false }
      - { value: "`substr_starts_with()`", correct: false }
    help: |
      PHP 8.0 introduced `str_starts_with()`, `str_contains()`, and `str_ends_with()` for more convenient string manipulation.
      https://www.php.net/manual/en/function.str-starts-with.php

  -
    question: >
      What is the purpose of the `#[AllowDynamicProperties]` attribute introduced in PHP 8.2?
    answers:
      - { value: "To explicitly allow dynamic properties on a class that would otherwise trigger a deprecation warning.", correct: true }
      - { value: "To prevent any properties from being added dynamically to a class.", correct: false }
      - { value: "To make all properties of a class dynamic by default.", correct: false }
      - { value: "To allow dynamic method calls on an object.", correct: false }
    help: |
      PHP 8.2 deprecated dynamic properties. The `#[AllowDynamicProperties]` attribute can be used on a class to explicitly opt-in to allowing dynamic properties, suppressing the deprecation warning.
      https://www.php.net/manual/en/language.attributes.php#language.attributes.predefined.allowdynamicproperties

  -
    question: >
      Which SPL class provides a fixed-size array that can only store a specific number of elements?
    answers:
      - { value: "SplFixedArray", correct: true }
      - { value: "ArrayObject", correct: false }
      - { value: "SplQueue", correct: false }
      - { value: "SplStack", correct: false }
    help: |
      `SplFixedArray` provides a fixed-size array that is more memory-efficient than a regular PHP array when the size is known beforehand.
      https://www.php.net/manual/en/class.splfixedarray.php

  -
    question: |
      What will be the output of the following PHP code?

      ```php
      <?php
      class ParentClass {
          public function foo() {
              echo "Parent foo";
          }
      }

      class ChildClass extends ParentClass {
          public function foo() {
              echo "Child foo";
          }
          public function bar() {
              parent::foo();
          }
      }

      $obj = new ChildClass();
      $obj->bar();
      ?>
      ```
    answers:
      - { value: "Parent foo", correct: true }
      - { value: "Child foo", correct: false }
      - { value: "An error will occur.", correct: false }
      - { value: "Nothing will be output.", correct: false }
    help: |
      The `parent::` keyword is used to call a method from the parent class, even if the method has been overridden in the child class.
      https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php

  -
    question: >
      Which PHP function is used to convert a PHP value (e.g., an array or object) into a JSON string?
    answers:
      - { value: "`json_encode()`", correct: true }
      - { value: "`json_decode()`", correct: false }
      - { value: "`json_stringify()`", correct: false }
      - { value: "`array_to_json()`", correct: false }
    help: |
      `json_encode()` returns a JSON encoded string on success or `false` on failure.
      https://www.php.net/manual/en/function.json-encode.php

  -
    question: >
      What is the purpose of the `#[Pure]` attribute (not built-in, but commonly used by static analysis tools) in PHP?
    answers:
      - { value: "To indicate that a function has no side effects and its return value depends only on its inputs.", correct: true }
      - { value: "To mark a function as immutable.", correct: false }
      - { value: "To ensure a function always returns the same type.", correct: false }
      - { value: "To prevent a function from throwing exceptions.", correct: false }
    help: |
      While `#[Pure]` is not a built-in PHP attribute, it is widely recognized by static analysis tools (like Psalm, PHPStan) to denote that a function is "pure" – meaning it has no side effects and its output is solely determined by its inputs.
      https://psalm.dev/docs/annotating_code/attributes/#pure

  -
    question: >
      Which PHP extension provides functions for working with images, such as creating, manipulating, and outputting various image formats?
    answers:
      - { value: "GD", correct: true }
      - { value: "Imagick", correct: true }
      - { value: "Exif", correct: false }
      - { value: "FFmpeg", correct: false }
    help: |
      The GD (Graphics Draw) extension and Imagick (a wrapper for ImageMagick) are two common PHP extensions used for image manipulation.
      https://www.php.net/manual/en/book.gd.php
      https://www.php.net/manual/en/book.imagick.php

  -
    question: >
      What is the main difference between `throw new Exception()` and `trigger_error()` in PHP?
    answers:
      - { value: "`throw new Exception()` creates an object that can be caught, while `trigger_error()` generates a PHP error that can be handled by an error handler.", correct: true }
      - { value: "`trigger_error()` stops script execution, while `throw new Exception()` does not.", correct: false }
      - { value: "Exceptions are only for fatal errors, while errors are for warnings.", correct: false }
      - { value: "There is no functional difference; they are interchangeable.", correct: false }
    help: |
      Exceptions are part of structured error handling and can be caught and managed programmatically. `trigger_error()` generates a traditional PHP error (E_USER_NOTICE, E_USER_WARNING, E_USER_ERROR), which can be caught by a custom error handler but are generally less flexible than exceptions.
      https://www.php.net/manual/en/language.exceptions.php
      https://www.php.net/manual/en/function.trigger-error.php

  -
    question: >
      Which of the following is a new feature in PHP 8.1 that allows you to define a property that can only be set once?
    answers:
      - { value: "`readonly` properties", correct: true }
      - { value: "`final` properties", correct: false }
      - { value: "`const` properties", correct: false }
      - { value: "`immutable` properties", correct: false }
    help: |
      The `readonly` keyword, introduced in PHP 8.1, allows properties to be initialized once (typically in the constructor) and then become immutable for the lifetime of the object.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly

  -
    question: >
      What is the purpose of the `#[Override]` attribute introduced in PHP 8.3?
    answers:
      - { value: "To explicitly declare that a method is intended to override a parent method, leading to a compile-time error if it does not.", correct: true }
      - { value: "To prevent a method from being overridden by child classes.", correct: false }
      - { value: "To mark a method as abstract.", correct: false }
      - { value: "To allow a method to override a final method.", correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, provides a compile-time check to ensure that a method marked with it actually overrides a method from a parent class or implemented interface. This helps prevent subtle bugs due to typos or refactoring.
      https://www.php.net/manual/en/language.attributes.php#language.attributes.predefined.override

  -
    question: >
      Which SPL class provides a way to iterate over a collection of objects while also associating data with each object, similar to a map?
    answers:
      - { value: "SplObjectStorage", correct: true }
      - { value: "ArrayObject", correct: false }
      - { value: "SplFixedArray", correct: false }
      - { value: "SplQueue", correct: false }
    help: |
      `SplObjectStorage` is a specialized collection that maps objects to data. It can be used to store objects and associate arbitrary data with them, or simply to track unique objects.
      https://www.php.net/manual/en/class.splobjectstorage.php

  -
    question: >
      What is the purpose of the `__serialize()` and `__unserialize()` magic methods introduced in PHP 7.4?
    answers:
      - { value: "To provide custom serialization and deserialization logic for objects, replacing `serialize()` and `unserialize()`.", correct: true }
      - { value: "To convert an object to a string for debugging purposes.", correct: false }
      - { value: "To define how an object should be converted to JSON.", correct: false }
      - { value: "To automatically load class files during serialization.", correct: false }
    help: |
      `__serialize()` and `__unserialize()` were introduced as a more robust and flexible alternative to `__sleep()` and `__wakeup()` for custom object serialization, especially when dealing with internal object states.
      https://www.php.net/manual/en/language.oop5.magic.php#object.serialize

  -
    question: >
      Which of the following is a new feature in PHP 8.0 that allows for more flexible and powerful string comparisons?
    answers:
      - { value: "`str_contains()`, `str_starts_with()`, `str_ends_with()`", correct: true }
      - { value: "`str_find()`, `str_begin()`, `str_end()`", correct: false }
      - { value: "`preg_match_all()` improvements", correct: false }
      - { value: "`strcmp()` with new options", correct: false }
    help: |
      PHP 8.0 introduced these three new functions for common string operations, providing more readable and often faster alternatives to previous methods involving `strpos()` or `substr()`.
      https://www.php.net/manual/en/ref.strings.php#ref.strings.php8

  -
    question: >
      What is the primary benefit of using `Traits` over `Abstract Classes` for code reuse in PHP?
    answers:
      - { value: "Traits allow for horizontal reuse of methods and properties across unrelated class hierarchies.", correct: true }
      - { value: "Traits can be instantiated directly, unlike abstract classes.", correct: false }
      - { value: "Traits enforce a stricter contract than abstract classes.", correct: false }
      - { value: "Traits can define constructors, while abstract classes cannot.", correct: false }
    help: |
      Traits are a mechanism for code reuse that allows you to inject methods and properties into a class without requiring the class to extend a specific parent. This enables horizontal reuse, whereas abstract classes are part of a vertical inheritance hierarchy.
      https://www.php.net/manual/en/language.oop5.traits.php

  -
    question: >
      In PHP, what is the significance of the `mixed` pseudo-type introduced in PHP 8.0?
    answers:
      - { value: "It indicates that a parameter, property, or return type can be any type.", correct: true }
      - { value: "It is a synonym for `null`.", correct: false }
      - { value: "It is used for type hinting arrays only.", correct: false }
      - { value: "It forces strict type checking for all variables.", correct: false }
    help: |
      The `mixed` pseudo-type is equivalent to `array|bool|callable|int|float|object|resource|string|null`. It explicitly states that a value can be of any type, which is useful when a more specific union type is not feasible.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.mixed

  -
    question: >
      Which of the following is the correct way to specify a nullable type in a PHP 7.1+ function parameter?
    answers:
      - { value: "`function foo(?string $param)`", correct: true }
      - { value: "`function foo(string|null $param)`", correct: true }
      - { value: "`function foo(string $param = null)`", correct: false }
      - { value: "`function foo(string $param or null)`", correct: false }
    help: |
      PHP 7.1 introduced nullable types using the `?` prefix. PHP 8.0 introduced Union Types, making `string|null` also a valid way to declare a nullable string.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.nullable

  -
    question: >
      What is the purpose of the `DateTimeImmutable` class in PHP?
    answers:
      - { value: "It represents a date and time that cannot be modified after creation.", correct: true }
      - { value: "It is a faster alternative to `DateTime` for simple operations.", correct: false }
      - { value: "It automatically converts timezones.", correct: false }
      - { value: "It is used for parsing date strings only.", correct: false }
    help: |
      `DateTimeImmutable` objects, once created, cannot be changed. Any modification method (like `add()`, `modify()`) will return a new `DateTimeImmutable` instance, leaving the original untouched. This helps prevent unexpected side effects.
      https://www.php.net/manual/en/class.datetimeimmutable.php

  -
    question: >
      Which PHP 8.0 feature allows for more concise and readable comparisons against multiple values?
    answers:
      - { value: "Match Expression", correct: true }
      - { value: "Ternary Operator", correct: false }
      - { value: "Null Coalescing Operator", correct: false }
      - { value: "Spaceship Operator", correct: false }
    help: |
      The `match` expression provides a more structured and type-safe way to compare a value against multiple possible cases compared to the traditional `switch` statement.
      https://www.php.net/manual/en/control-structures.match.php

  -
    question: >
      What is the purpose of the `Throwable` interface in PHP 7 and later?
    answers:
      - { value: "It is the base interface for all objects that can be thrown via a `throw` statement, including `Error` and `Exception`.", correct: true }
      - { value: "It is a new type of exception that replaces `Exception`.", correct: false }
      - { value: "It is used to define custom error handlers.", correct: false }
      - { value: "It allows catching fatal errors directly.", correct: false }
    help: |
      In PHP 7, the error hierarchy was unified under the `Throwable` interface. Both `Error` (for fatal errors like `TypeError`, `ParseError`) and `Exception` (for user-defined and standard exceptions) implement `Throwable`. This allows catching both errors and exceptions with `catch (Throwable $e)`.
      https://www.php.net/manual/en/class.throwable.php

  -
    question: >
      Which of the following is a new feature in PHP 8.1 that allows you to define constants in interfaces with visibility modifiers?
    answers:
      - { value: "Constants with visibility modifiers in interfaces", correct: true }
      - { value: "Abstract constants in interfaces", correct: false }
      - { value: "Readonly constants in interfaces", correct: false }
      - { value: "Static constants in interfaces", correct: false }
    help: |
      Prior to PHP 8.1, interface constants were always implicitly public. PHP 8.1 allowed explicitly defining `public`, `protected`, or `private` visibility for interface constants.
      https://www.php.net/manual/en/language.oop5.interfaces.php#language.oop5.interfaces.constants

  -
    question: >
      Which SPL class provides a way to iterate over an array or an `ArrayAccess` object?
    answers:
      - { value: "ArrayIterator", correct: true }
      - { value: "RecursiveArrayIterator", correct: false }
      - { value: "SplFixedArray", correct: false }
      - { value: "IteratorAggregate", correct: false }
    help: |
      `ArrayIterator` allows you to iterate over arrays and objects that implement the `ArrayAccess` interface, providing a consistent way to traverse them.
      https://www.php.net/manual/en/class.arrayiterator.php

  -
    question: >
      What is the purpose of the `#[SensitiveParameter]` attribute introduced in PHP 8.2?
    answers:
      - { value: "To redact the value of a parameter from stack traces and error logs.", correct: true }
      - { value: "To encrypt the parameter's value automatically.", correct: false }
      - { value: "To prevent the parameter from being passed by reference.", correct: false }
      - { value: "To mark a parameter as optional.", correct: false }
    help: |
      The `#[SensitiveParameter]` attribute is used to mark parameters that contain sensitive information (like passwords, API keys). When an exception or error occurs, the value of such parameters will be redacted from stack traces and error logs, improving security.
      https://www.php.net/manual/en/language.attributes.php#language.attributes.predefined.sensitiveparameter

  -
    question: >
      Which of the following is a new feature in PHP 8.0 that allows for more concise and readable null checks in chained method calls?
    answers:
      - { value: "Nullsafe Operator (`?->`)", correct: true }
      - { value: "Null Coalescing Operator (`??`)", correct: false }
      - { value: "Ternary Operator", correct: false }
      - { value: "Optional Chaining", correct: false }
    help: |
      The Nullsafe Operator (`?->`) allows you to call methods or access properties on an object that might be null without throwing an error. If the object is null, the entire expression evaluates to null.
      https://www.php.net/manual/en/language.operators.nullsafe.php

  -
    question: >
      What is the purpose of the `__get()` and `__set()` magic methods in PHP?
    answers:
      - { value: "To handle attempts to read or write to inaccessible (e.g., non-existent or private) properties.", correct: true }
      - { value: "To define getters and setters for all properties automatically.", correct: false }
      - { value: "To serialize and deserialize object properties.", correct: false }
      - { value: "To prevent direct access to private properties.", correct: false }
    help: |
      `__get()` is invoked when reading data from inaccessible properties. `__set()` is invoked when writing data to inaccessible properties. They allow for dynamic property handling.
      https://www.php.net/manual/en/language.oop5.magic.php#object.get
      https://www.php.net/manual/en/language.oop5.magic.php#object.set

  -
    question: >
      Which SPL class provides a priority queue, where elements are retrieved based on their priority?
    answers:
      - { value: "SplPriorityQueue", correct: true }
      - { value: "SplQueue", correct: false }
      - { value: "SplStack", correct: false }
      - { value: "SplHeap", correct: false }
    help: |
      `SplPriorityQueue` is an implementation of a max heap, which allows elements to be retrieved in order of their priority.
      https://www.php.net/manual/en/class.splpriorityqueue.php

  -
    question: |
      What will be the output of the following PHP code?

      ```php
      <?php
      class MyClass {
          public function __construct(private string $name) {}

          public function __destruct() {
              echo "Destroying " . $this->name . "\n";
          }
      }

      $obj1 = new MyClass("Object 1");
      $obj2 = new MyClass("Object 2");
      unset($obj1);
      echo "Script end\n";
      ?>
      ```
    answers:
      - { value: "Destroying Object 1\nScript end\nDestroying Object 2\n", correct: true }
      - { value: "Script end\nDestroying Object 1\nDestroying Object 2\n", correct: false }
      - { value: "Destroying Object 1\nDestroying Object 2\nScript end\n", correct: false }
      - { value: "Script end\n", correct: false }
    help: |
      The `__destruct()` method is called when an object is destroyed or garbage collected. `unset()` explicitly destroys an object. Other objects are destroyed at the end of the script execution. The order of destruction for objects not explicitly unset is not guaranteed, but `unset($obj1)` will cause `__destruct()` for `obj1` to be called immediately.
      https://www.php.net/manual/en/language.oop5.decon.php#object.destruct

  -
    question: >
      Which PHP extension provides functions for interacting with a MySQL database?
    answers:
      - { value: "mysqli", correct: true }
      - { value: "pgsql", correct: false }
      - { value: "sqlite3", correct: false }
      - { value: "odbc", correct: false }
    help: |
      The `mysqli` (MySQL Improved Extension) extension provides an object-oriented interface to the MySQL database. PDO is another common choice.
      https://www.php.net/manual/en/book.mysqli.php

  -
    question: >
      What is the purpose of the `#[ReturnTypeWillChange]` attribute introduced in PHP 8.1?
    answers:
      - { value: "To suppress deprecation warnings when a method's return type signature differs from its parent/interface, but will be aligned in a future PHP version.", correct: true }
      - { value: "To force a method to return a specific type.", correct: false }
      - { value: "To indicate that a method's return type is dynamic.", correct: false }
      - { value: "To allow a method to return multiple types.", correct: false }
    help: |
      The `#[ReturnTypeWillChange]` attribute is a temporary solution to suppress deprecation warnings when a child class or implementation has a different return type than its parent or interface, but the intention is to align them in a future PHP version. It's often used during migrations.
      https://www.php.net/manual/en/language.attributes.php#language.attributes.predefined.returntypewillchange

  -
    question: >
      Which SPL class provides a way to iterate over a collection of objects in a specific order, such as a heap or a priority queue?
    answers:
      - { value: "IteratorAggregate", correct: false }
      - { value: "SplHeap", correct: true }
      - { value: "ArrayIterator", correct: false }
      - { value: "RecursiveIteratorIterator", correct: false }
    help: |
      `SplHeap` is an abstract base class for heaps, which are tree-based data structures that satisfy the heap property (e.g., min-heap or max-heap). `SplMinHeap` and `SplMaxHeap` are concrete implementations.
      https://www.php.net/manual/en/class.splheap.php

  -
    question: >
      What is the main difference between `include` and `require` in PHP?
    answers:
      - { value: "`require` generates a fatal error if the file is not found, while `include` generates a warning and continues script execution.", correct: true }
      - { value: "`include` is faster than `require`.", correct: false }
      - { value: "`require` can only be used for PHP files, while `include` can be used for any file type.", correct: false }
      - { value: "There is no difference; they are aliases.", correct: false }
    help: |
      `require` is used when the file is essential for the script's execution. If the file is not found, a fatal error is issued, and the script terminates. `include` will only produce a warning, and the script will continue execution.
      https://www.php.net/manual/en/function.include.php
      https://www.php.net/manual/en/function.require.php

  -
    question: >
      Which of the following is a new feature in PHP 8.0 that allows for more flexible array unpacking?
    answers:
      - { value: "Named Arguments", correct: false }
      - { value: "Spread Operator in array expressions", correct: true }
      - { value: "Match Expression", correct: false }
      - { value: "Union Types", correct: false }
    help: |
      PHP 8.0 introduced the spread operator (`...`) for array expressions, allowing you to unpack an array into another array.
      https://www.php.net/manual/en/language.operators.array.php#language.operators.array.spread

  -
    question: >
      What is the purpose of the `#[NoReturn]` attribute (not built-in, but commonly used by static analysis tools) in PHP?
    answers:
      - { value: "To indicate that a function or method will never return a value, typically because it always throws an exception or terminates the script.", correct: true }
      - { value: "To prevent a function from returning any value.", correct: false }
      - { value: "To ensure a function always returns `void`.", correct: false }
      - { value: "To mark a function as asynchronous.", correct: false }
    help: |
      Similar to `#[Pure]`, `#[NoReturn]` is a common attribute used by static analysis tools to signify that a function or method will never return normally (e.g., it always throws an exception, calls `die()`, `exit()`, or enters an infinite loop). This helps static analyzers understand control flow.
      https://psalm.dev/docs/annotating_code/attributes/#noreturn

  -
    question: >
      Which SPL class provides a way to iterate over a directory's contents?
    answers:
      - { value: "DirectoryIterator", correct: true }
      - { value: "FilesystemIterator", correct: true }
      - { value: "RecursiveDirectoryIterator", correct: false }
      - { value: "GlobIterator", correct: false }
    help: |
      `DirectoryIterator` and `FilesystemIterator` both provide ways to iterate over the contents of a directory. `FilesystemIterator` offers more control over how the iteration behaves (e.g., skipping dots, following symlinks).
      https://www.php.net/manual/en/class.directoryiterator.php
      https://www.php.net/manual/en/class.filesystemiterator.php

  -
    question: >
      What is the purpose of the `#[Immutable]` attribute (not built-in, but commonly used by static analysis tools) in PHP?
    answers:
      - { value: "To indicate that an object, once created, cannot be modified.", correct: true }
      - { value: "To prevent a class from being extended.", correct: false }
      - { value: "To make all properties of a class static.", correct: false }
      - { value: "To ensure all methods of a class are pure.", correct: false }
    help: |
      The `#[Immutable]` attribute, commonly used by static analysis tools, signifies that an object of the annotated class will not change its internal state after construction. This promotes predictable behavior and can simplify reasoning about code.
      https://psalm.dev/docs/annotating_code/attributes/#immutable

  -
    question: >
      Which of the following is the correct way to declare a class as `final` in PHP?
    answers:
      - { value: "`final class MyClass {}`", correct: true }
      - { value: "`class final MyClass {}`", correct: false }
      - { value: "`abstract final class MyClass {}`", correct: false }
      - { value: "`sealed class MyClass {}`", correct: false }
    help: |
      The `final` keyword is placed before the `class` keyword to prevent the class from being extended.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: >
      What is the purpose of the `#[Assert\Length]` attribute in Symfony (or `#[Length]` in PHP 8.0+ for custom attributes)?
    answers:
      - { value: "To define validation constraints for a property's length.", correct: true }
      - { value: "To limit the number of elements in an array.", correct: false }
      - { value: "To specify the maximum length of a string.", correct: false }
      - { value: "To define the size of a fixed-size array.", correct: false }
    help: |
      Attributes (introduced in PHP 8.0) allow adding metadata to code. While `#[Assert\Length]` is specific to Symfony's Validator component, the general concept of attributes is to attach structured, machine-readable metadata to declarations.
      https://symfony.com/doc/current/validation.html#length-constraint
      https://www.php.net/manual/en/language.attributes.php

  -
    question: >
      Which SPL class provides a way to iterate over a collection of objects and apply a filter to them?
    answers:
      - { value: "FilterIterator", correct: true }
      - { value: "RecursiveFilterIterator", correct: true }
      - { value: "CallbackFilterIterator", correct: true }
      - { value: "AppendIterator", correct: false }
    help: |
      `FilterIterator`, `RecursiveFilterIterator`, and `CallbackFilterIterator` are all SPL iterators that allow you to filter elements during iteration based on certain criteria.
      https://www.php.net/manual/en/class.filteriterator.php
      https://www.php.net/manual/en/class.recursivefilteriterator.php
      https://www.php.net/manual/en/class.callbackfilteriterator.php

  -
    question: >
      What is the purpose of the `#[ReadOnlyProperty]` attribute (not built-in, but commonly used by static analysis tools) in PHP?
    answers:
      - { value: "To indicate that a property should only be initialized once and then remain immutable.", correct: true }
      - { value: "To prevent a property from being accessed outside the class.", correct: false }
      - { value: "To make a property static.", correct: false }
      - { value: "To define a constant within a class.", correct: false }
    help: |
      The `#[ReadOnlyProperty]` attribute, often used by static analysis tools, signals that a property should be treated as read-only after its initial assignment, similar to PHP 8.1's built-in `readonly` keyword.
      https://psalm.dev/docs/annotating_code/attributes/#readonlyproperty

  -
    question: >
      What is the primary difference between `E_ERROR` and `E_WARNING` error levels in PHP?
    answers:
      - { value: "`E_ERROR` is a fatal error that stops script execution, while `E_WARNING` is a non-fatal error that allows the script to continue.", correct: true }
      - { value: "`E_WARNING` can be caught by a `try...catch` block, while `E_ERROR` cannot.", correct: false }
      - { value: "`E_ERROR` is only for syntax errors, while `E_WARNING` is for runtime issues.", correct: false }
      - { value: "There is no difference; they are handled identically.", correct: false }
    help: |
      `E_ERROR` represents a fatal run-time error. These indicate errors that cannot be recovered from, such as memory allocation problems. `E_WARNING` represents run-time warnings (non-fatal errors). These are not fatal errors.
      https://www.php.net/manual/en/errorfunc.constants.php

  -
    question: >
      Which of the following is a new feature in PHP 8.0 that allows for more precise type declarations by combining multiple types that must all be satisfied?
    answers:
      - { value: "Intersection Types", correct: true }
      - { value: "Union Types", correct: false }
      - { value: "Mixed Type", correct: false }
      - { value: "Generics", correct: false }
    help: |
      Intersection Types (`&`) allow you to specify that a variable must be an instance of *all* the given interfaces or classes. For example, `Countable&Iterator` means the object must implement both `Countable` and `Iterator`.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.intersection

  -
    question: >
      What is the purpose of the `#[Immutable]` attribute (not built-in, but commonly used by static analysis tools) in PHP?
    answers:
      - { value: "To indicate that an object, once created, cannot be modified.", correct: true }
      - { value: "To prevent a class from being extended.", correct: false }
      - { value: "To make all properties of a class static.", correct: false }
      - { value: "To ensure all methods of a class are pure.", correct: false }
    help: |
      The `#[Immutable]` attribute, commonly used by static analysis tools, signifies that an object of the annotated class will not change its internal state after construction. This promotes predictable behavior and can simplify reasoning about code.
      https://psalm.dev/docs/annotating_code/attributes/#immutable

  -
    question: >
      Which SPL class provides a way to iterate over multiple iterators as if they were a single iterator?
    answers:
      - { value: "AppendIterator", correct: true }
      - { value: "MultipleIterator", correct: false }
      - { value: "CachingIterator", correct: false }
      - { value: "LimitIterator", correct: false }
    help: |
      `AppendIterator` allows you to append several iterators together, making them appear as one single iterator.
      https://www.php.net/manual/en/class.appenditerator.php

  -
    question: >
      What is the output of `var_dump(0 == '0');` in PHP?
    answers:
      - { value: "bool(true)", correct: true }
      - { value: "bool(false)", correct: false }
      - { value: "An error will occur.", correct: false }
      - { value: "NULL", correct: false }
    help: |
      The `==` operator performs loose comparison, meaning it will attempt type coercion. In this case, the string '0' is coerced to the integer 0, resulting in `true`. For strict comparison, use `===`.
      https://www.php.net/manual/en/language.operators.comparison.php

  -
    question: >
      Which of the following is a new feature in PHP 8.0 that allows for more concise and readable conditional logic, returning a value based on matching conditions?
    answers:
      - { value: "Match Expression", correct: true }
      - { value: "Ternary Operator", correct: false }
      - { value: "Null Coalescing Operator", correct: false }
      - { value: "Spaceship Operator", correct: false }
    help: |
      The `match` expression is a new control flow structure that is similar to `switch` but has several advantages, including being an expression (it returns a value), using strict comparisons, and not falling through by default.
      https://www.php.net/manual/en/control-structures.match.php

  -
    question: >
      What is the purpose of the `#[AsCommand]` attribute in Symfony (or `#[Attribute]` in PHP 8.0+ for custom attributes)?
    answers:
      - { value: "To define a console command's configuration directly in its class.", correct: true }
      - { value: "To mark a class as a service.", correct: false }
      - { value: "To specify a route for a controller.", correct: false }
      - { value: "To inject dependencies into a class.", correct: false }
    help: |
      While `#[AsCommand]` is a Symfony-specific attribute, it leverages PHP 8.0's native attribute feature. Attributes allow adding metadata to code elements. `#[AsCommand]` is used by Symfony to automatically register console commands.
      https://symfony.com/doc/current/console.html#configuring-the-command
      https://www.php.net/manual/en/language.attributes.php

  -
    question: >
      Which SPL class provides a way to iterate over an inner iterator and cache the current element for later access?
    answers:
      - { value: "CachingIterator", correct: true }
      - { value: "AppendIterator", correct: false }
      - { value: "LimitIterator", correct: false }
      - { value: "NoRewindIterator", correct: false }
    help: |
      `CachingIterator` wraps an inner iterator and provides methods to peek at the next element or cache the current one, allowing for more flexible iteration patterns.
      https://www.php.net/manual/en/class.cachingiterator.php