category: PHP
questions:
  -
    question: 'Which of the following statements about `readonly` properties in PHP 8.2 are true?'
    answers:
      - { value: 'A `readonly` property can be initialized only once.', correct: true }
      - { value: 'A `readonly` property can be re-assigned within the constructor of the class.', correct: false }
      - { value: 'A `readonly` property must be typed.', correct: true }
      - { value: 'A `readonly` property can be initialized with a default value outside the constructor.', correct: false }
      - { value: 'A `readonly` property can be unset after initialization.', correct: false }
    help: |
      'Readonly properties were introduced in PHP 8.1 and enhanced in PHP 8.2. They must be typed and can only be initialized once, typically in the constructor.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly'
  -
    question: 'Consider the following PHP 8.0+ code snippet using Constructor Property Promotion. What will be the output?'
    answers:
      - { value: 'Name: John, Age: 30', correct: true }
      - { value: 'Name: , Age: ', correct: false }
      - { value: 'A fatal error due to incorrect syntax.', correct: false }
      - { value: 'Name: John, Age: ', correct: false }
    help: |
      'Constructor Property Promotion allows for a more concise way to declare and initialize class properties directly in the constructor signature.
      https://www.php.net/manual/en/language.oop5.decon.php#language.oop5.decon.constructor.promotion'
  -
    question: 'Which of the following are valid ways to import classes using namespaces in PHP?'
    answers:
      - { value: '`use MyProject\SubNamespace\MyClass;`', correct: true }
      - { value: '`use MyProject\SubNamespace\MyClass as Alias;`', correct: true }
      - { value: '`use function MyProject\SubNamespace\myFunction;`', correct: true }
      - { value: '`use const MyProject\SubNamespace\MY_CONST;`', correct: true }
      - { value: '`import MyProject\SubNamespace\MyClass;`', correct: false }
    help: |
      'The `use` keyword is used to import classes, interfaces, traits, functions, and constants from other namespaces.
      https://www.php.net/manual/en/language.namespaces.importing.php'
  -
    question: 'In PHP exception handling, what is the purpose of the `finally` block?'
    answers:
      - { value: 'The `finally` block is executed only if an exception is caught.', correct: false }
      - { value: 'The `finally` block is executed regardless of whether an exception was thrown or caught.', correct: true }
      - { value: 'The `finally` block is executed before the `try` block.', correct: false }
      - { value: 'The `finally` block is optional and primarily used for cleanup code.', correct: true }
      - { value: 'The `finally` block can catch exceptions that were not caught by any `catch` block.', correct: false }
    help: |
      'The `finally` block is always executed after the `try` and `catch` blocks, regardless of whether an exception was thrown or caught. It is commonly used for cleanup operations.
      https://www.php.net/manual/en/language.exceptions.php#language.exceptions.finally'
  -
    question: 'When using Traits in PHP, what is the correct way to resolve a method name conflict if two traits used by a class define a method with the same name?'
    answers:
      - { value: 'The conflict is automatically resolved by PHP, and the method from the first trait declared is used.', correct: false }
      - { value: 'You must use the `insteadof` operator within the `use` statement of the class.', correct: true }
      - { value: 'You must use the `as` operator to alias one of the conflicting methods.', correct: true }
      - { value: 'PHP will throw a fatal error if a conflict is not explicitly resolved.', correct: true }
      - { value: 'You must redefine the method in the consuming class, which will override the trait methods.', correct: true }
    help: |
      'When traits define methods with the same name, PHP requires explicit conflict resolution using `insteadof` to pick one, or `as` to alias one. Redefining the method in the class also resolves the conflict by overriding.
      https://www.php.net/manual/en/language.oop5.traits.php#language.oop5.traits.conflict'