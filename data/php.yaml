category: PHP
questions:
  - question: Which of the following is the correct way to define a constant in PHP?
    answers:
      - value: const MY_CONSTANT = 'value';
        correct: true
      - value: define('MY_CONSTANT', 'value');
        correct: true
      - value: $MY_CONSTANT = 'value';
        correct: false
      - value: final MY_CONSTANT = 'value';
        correct: false
    help: >-
      Constants can be defined using the `define()` function or the `const`
      keyword. `const` is preferred for class constants and generally for
      top-level constants as of PHP 5.3+.

      https://www.php.net/manual/en/language.constants.php
  - question: |-
      What will be the output of the following PHP code?

      ```php
      <?php
      $a = 'hello';
      $$a = 'world';
      echo "$a {$$a}";
      ?>
      ```
    answers:
      - value: hello world
        correct: true
      - value: hello {hello}
        correct: false
      - value: hello $hello
        correct: false
      - value: Parse error
        correct: false
    help: >-
      Variable variables allow you to use the value of a variable as the name of
      another variable. `$$a` evaluates to `$hello` because `$a` holds the
      string 'hello'.

      https://www.php.net/manual/en/language.variables.variable.php
  - question: In PHP 8.2, what is the default value of an uninitialized variable
      that is accessed without being referenced (e.g., directly echoed or
      var_dumped)?
    answers:
      - value: "`NULL` and an `E_WARNING` is issued."
        correct: true
      - value: "`NULL` and an `E_NOTICE` is issued."
        correct: false
      - value: An empty string `''`.
        correct: false
      - value: A fatal error.
        correct: false
    help: >-
      As of PHP 8.0.0, accessing an uninitialized variable that is not
      referenced results in a `NULL` value and an `E_WARNING`.

      https://www.php.net/manual/en/language.variables.basics.php
  - question: Which PHP stream wrapper allows direct access to the raw data from the
      request body?
    answers:
      - value: "`php://input`"
        correct: true
      - value: "`php://stdin`"
        correct: false
      - value: "`php://output`"
        correct: false
      - value: "`php://memory`"
        correct: false
    help: >-
      `php://input` is a read-only stream that allows you to read raw data from
      the request body. It is not available in `POST` requests with
      `enctype="multipart/form-data"` if `enable_post_data_reading` is enabled.

      https://www.php.net/manual/en/wrappers.php.php
  - question: What is the primary purpose of the `php://filter` stream wrapper?
    answers:
      - value: To apply filters to a stream at the time of opening.
        correct: true
      - value: To access the standard input stream.
        correct: false
      - value: To store temporary data in memory.
        correct: false
      - value: To read raw POST data.
        correct: false
    help: >-
      `php://filter` is a meta-wrapper designed to apply filters to a stream
      when it is opened. This is particularly useful with functions like
      `readfile()`, `file()`, or `file_get_contents()` where direct filter
      application is not possible.

      https://www.php.net/manual/en/wrappers.php.php
  - question: Which of the following correctly describes the behavior of
      `php://memory` and `php://temp` streams after they have been closed?
    answers:
      - value: The data stored in them is lost and cannot be retrieved by reopening the
          stream with the same name.
        correct: true
      - value: The data persists and can be retrieved by reopening the stream with the
          same name.
        correct: false
      - value: Only `php://temp` persists its data, `php://memory` does not.
        correct: false
      - value: They automatically save their content to a permanent file.
        correct: false
    help: >-
      `php://memory` and `php://temp` streams are not reusable after they have
      been closed. Once the stream handle is closed, the data is lost.

      https://www.php.net/manual/en/wrappers.php.php
  - question: Which PHP function is used to output a large amount of information
      about the current state of PHP, including compilation options, extensions,
      and configuration settings?
    answers:
      - value: "`phpinfo()`"
        correct: true
      - value: "`get_loaded_extensions()`"
        correct: false
      - value: "`ini_get_all()`"
        correct: false
      - value: "`print_r($_SERVER)`"
        correct: false
    help: >-
      The `phpinfo()` function outputs a comprehensive set of information about
      the PHP environment, useful for debugging and diagnostics.

      https://www.php.net/manual/en/function.phpinfo.php
  - question: What is the purpose of `$_SERVER['HTTP_USER_AGENT']`?
    answers:
      - value: It contains the User-Agent string of the current request, typically
          identifying the browser and operating system.
        correct: true
      - value: It stores the IP address of the client.
        correct: false
      - value: It provides the server software information.
        correct: false
      - value: It indicates the request method (e.g., GET, POST).
        correct: false
    help: >-
      `$_SERVER` is a superglobal array containing information created by the
      web server, headers, and script locations. `$_SERVER['HTTP_USER_AGENT']`
      specifically holds the User-Agent string sent by the client.

      https://www.php.net/manual/en/reserved.variables.server.php
  - question: Which function should you use to check if a string contains another
      string in a case-sensitive manner in PHP 8.2?
    answers:
      - value: "`str_contains()`"
        correct: true
      - value: "`strstr()`"
        correct: false
      - value: "`stripos()`"
        correct: false
      - value: "`preg_match()`"
        correct: false
    help: >-
      The `str_contains()` function, introduced in PHP 8.0, provides a simple
      and efficient way to check if a string contains another string. It is
      case-sensitive.

      https://www.php.net/manual/en/function.str-contains.php
  - question: What is the return type of the `strlen()` function?
    answers:
      - value: "`int`"
        correct: true
      - value: "`string`"
        correct: false
      - value: "`bool`"
        correct: false
      - value: "`float`"
        correct: false
    help: >-
      The `strlen()` function returns the length of the given string as an
      integer.

      https://www.php.net/manual/en/function.strlen.php
  - question: Which of the following statements about PHP comments is true?
    answers:
      - value: Single-line comments (`//` or `#`) comment out everything until the end
          of the line or the closing PHP tag `?>`.
        correct: true
      - value: Multi-line comments (`/* ... */`) can be nested.
        correct: false
      - value: Comments are sent to the client's browser.
        correct: false
      - value: PHP does not support C-style comments.
        correct: false
    help: >-
      Single-line comments (`//` or `#`) extend to the end of the line or the
      closing PHP tag. Multi-line comments (`/* ... */`) cannot be nested.

      https://www.php.net/manual/en/language.basic-syntax.comments.php
  - question: |-
      Consider the following PHP code:

      ```php
      <?php
      var_dump(0 == "a");
      var_dump("10" == "1e1");
      ?>
      ```

      What will be the output in PHP 8.2?
    answers:
      - value: |-
          bool(false)
          bool(true)
        correct: true
      - value: |-
          bool(true)
          bool(true)
        correct: false
      - value: |-
          bool(false)
          bool(false)
        correct: false
      - value: |-
          bool(true)
          bool(false)
        correct: false
    help: >-
      In PHP 8.0+, when comparing a string to a number using `==`, PHP converts
      the number to a string and performs a string comparison. `0 == "a"` is
      `false` because "a" is not a numeric string. `"10" == "1e1"` is `true`
      because "1e1" is treated as 10 in numeric context, and then converted back
      to "10" for string comparison.

      https://www.php.net/manual/en/language.operators.comparison.php
  - question: Which of the following is the correct way to initialize an indexed
      array with values 'a', 'b', 'c' in PHP 8.2?
    answers:
      - value: $arr = ['a', 'b', 'c'];
        correct: true
      - value: $arr = array('a', 'b', 'c');
        correct: true
      - value: $arr = new Array('a', 'b', 'c');
        correct: false
      - value: $arr = {'a', 'b', 'c'};
        correct: false
    help: >-
      PHP supports both the `array()` language construct and the short array
      syntax `[]` for initializing arrays.

      https://www.php.net/manual/en/language.types.array.php
  - question: How can you dynamically access a variable named `invalid-name` (which
      contains a hyphen) in PHP?
    answers:
      - value: "`${'invalid-name'}`"
        correct: true
      - value: "`$this->{'invalid-name'}`"
        correct: false
      - value: "`$invalid-name`"
        correct: false
      - value: It's not possible to access variables with hyphens in their names.
        correct: false
    help: >-
      For variable names that are not valid identifiers (e.g., containing
      hyphens), you can use curly braces `{}` with a string literal or a
      variable variable to access them dynamically.

      https://www.php.net/manual/en/language.variables.basics.php
  - question: What is the purpose of the `unset()` function in PHP?
    answers:
      - value: To destroy a specified variable.
        correct: true
      - value: To set a variable's value to `NULL`.
        correct: false
      - value: To check if a variable is set and not `NULL`.
        correct: false
      - value: To remove an element from an array without affecting other keys.
        correct: true
    help: >-
      `unset()` destroys the specified variables. It can be used to destroy a
      single variable, an element of an array, or multiple variables.

      https://www.php.net/manual/en/function.unset.php
  - question: Which operator is used for string concatenation in PHP?
    answers:
      - value: "` . ` (dot)"
        correct: true
      - value: "` + ` (plus)"
        correct: false
      - value: "` & ` (ampersand)"
        correct: false
      - value: "` ~ ` (tilde)"
        correct: false
    help: >-
      The dot (`.`) operator is used to concatenate two strings in PHP. The
      concatenating assignment operator (`.=`) can also be used.

      https://www.php.net/manual/en/language.operators.string.php
  - question: As of PHP 8.3.0, what kind of expressions can be used to initialize
      static variables?
    answers:
      - value: Both constant expressions and dynamic expressions (e.g., function calls).
        correct: true
      - value: Only constant expressions.
        correct: false
      - value: Only dynamic expressions.
        correct: false
      - value: Only literal values.
        correct: false
    help: >-
      Prior to PHP 8.3.0, static variables could only be initialized with
      constant expressions. As of PHP 8.3.0, dynamic expressions, such as
      function calls, are also allowed.

      https://www.php.net/manual/en/language.variables.scope.php
  - question: What is the purpose of the `version_compare()` function?
    answers:
      - value: To compare two PHP-standardized version number strings.
        correct: true
      - value: To get the current PHP version as a float.
        correct: false
      - value: To check if a specific PHP extension is loaded.
        correct: false
      - value: To compare the version of an installed library with a required version.
        correct: false
    help: >-
      The `version_compare()` function compares two 'PHP-standardized' version
      number strings. This is useful for checking if the current PHP version
      meets certain requirements.

      https://www.php.net/manual/en/function.version-compare.php
  - question: Which of the following is true regarding `mb_strtoupper()` behavior
      for full case-mapping of the German character 'ß' (Eszett) between PHP 7.2
      and PHP 7.3?
    answers:
      - value: PHP 7.2 produces 'STRAßE', while PHP 7.3 produces 'STRASSE'.
        correct: true
      - value: PHP 7.2 produces 'STRASSE', while PHP 7.3 produces 'STRAßE'.
        correct: false
      - value: Both PHP 7.2 and 7.3 produce 'STRAßE'.
        correct: false
      - value: Both PHP 7.2 and 7.3 produce 'STRASSE'.
        correct: false
    help: >-
      As of PHP 7.3, `mb_strtoupper()` changed its behavior for full
      case-mapping of 'ß' (Eszett) from 'ß' to 'SS'.

      https://www.php.net/manual/en/migration73.new-features.php
  - question: What is the correct way to declare a class `MyClass` in PHP?
    answers:
      - value: class MyClass {}
        correct: true
      - value: function class MyClass {}
        correct: false
      - value: declare class MyClass {}
        correct: false
      - value: MyClass class {}
        correct: false
    help: >-
      Classes are declared using the `class` keyword, followed by the class name
      and a pair of curly braces containing the class definition.

      https://www.php.net/manual/en/language.oop5.basic.php
  - question: Which visibility keyword allows a property or method to be accessed
      only from within the class itself and by its descendants?
    answers:
      - value: "`protected`"
        correct: true
      - value: "`private`"
        correct: false
      - value: "`public`"
        correct: false
      - value: "`internal`"
        correct: false
    help: >-
      The `protected` visibility keyword allows access to properties and methods
      from the defining class and any classes that inherit from it.

      https://www.php.net/manual/en/language.oop5.visibility.php
  - question: What is the purpose of the `__construct()` method in a PHP class?
    answers:
      - value: It is a special method that is automatically called when a new object of
          the class is created.
        correct: true
      - value: It is used to destroy an object when it is no longer needed.
        correct: false
      - value: It defines the public interface of the class.
        correct: false
      - value: It is used for static initialization of class properties.
        correct: false
    help: >-
      The `__construct()` method is a constructor, which is called automatically
      when an object is instantiated. It's typically used for initialization
      tasks.

      https://www.php.net/manual/en/language.oop5.decon.php
  - question: Which keyword is used to prevent a class from being inherited?
    answers:
      - value: "`final`"
        correct: true
      - value: "`abstract`"
        correct: false
      - value: "`static`"
        correct: false
      - value: "`sealed`"
        correct: false
    help: >-
      The `final` keyword can be used to prevent a class from being inherited or
      to prevent a method from being overridden by child classes.

      https://www.php.net/manual/en/language.oop5.final.php
  - question: What is an abstract class in PHP?
    answers:
      - value: A class that cannot be instantiated on its own and may contain abstract
          methods.
        correct: true
      - value: A class that contains only static methods and properties.
        correct: false
      - value: A class that must implement all methods from an interface.
        correct: false
      - value: A class that is designed to be a singleton.
        correct: false
    help: >-
      Abstract classes are classes that cannot be instantiated directly. They
      can define abstract methods, which must be implemented by any non-abstract
      child class.

      https://www.php.net/manual/en/language.oop5.abstract.php
  - question: Which keyword is used to implement an interface in a PHP class?
    answers:
      - value: "`implements`"
        correct: true
      - value: "`extends`"
        correct: false
      - value: "`uses`"
        correct: false
      - value: "`inherits`"
        correct: false
    help: >-
      The `implements` keyword is used by a class to declare that it will
      provide implementations for all methods defined in one or more interfaces.

      https://www.php.net/manual/en/language.oop5.interfaces.php
  - question: What is the primary benefit of using Namespaces in PHP?
    answers:
      - value: To resolve naming conflicts between classes, functions, and constants.
        correct: true
      - value: To improve application performance.
        correct: false
      - value: To enforce strict type checking.
        correct: false
      - value: To enable multiple inheritance.
        correct: false
    help: >-
      Namespaces provide a way to group related classes, interfaces, functions,
      and constants, preventing naming collisions with other code.

      https://www.php.net/manual/en/language.namespaces.php
  - question: Given the following code, how would you correctly use the `MyClass`
      from the `App\Controller` namespace in the global namespace?
    answers:
      - value: use App\Controller\MyClass;
        correct: true
      - value: import App\Controller\MyClass;
        correct: false
      - value: require 'App/Controller/MyClass.php';
        correct: false
      - value: include App\Controller\MyClass;
        correct: false
    help: >-
      The `use` keyword is used to import namespaces, classes, functions, or
      constants into the current scope, allowing them to be referenced by their
      unqualified name.

      https://www.php.net/manual/en/language.namespaces.importing.php
  - question: What is an anonymous function (closure) in PHP?
    answers:
      - value: A function that has no specified name.
        correct: true
      - value: A function that is automatically executed when a script starts.
        correct: false
      - value: A function that can only be called once.
        correct: false
      - value: A function that is defined within a class and can access private members.
        correct: false
    help: >-
      Anonymous functions, also known as closures, allow the creation of
      functions that do not have a specified name. They are most often used as
      callback functions.

      https://www.php.net/manual/en/language.closures.php
  - question: How can an anonymous function access variables from its parent scope
      that are not global?
    answers:
      - value: By using the `use` keyword.
        correct: true
      - value: By using the `global` keyword.
        correct: false
      - value: By passing them as arguments to the anonymous function.
        correct: false
      - value: Anonymous functions cannot access variables from their parent scope.
        correct: false
    help: >-
      Closures can inherit variables from the parent scope by using the `use`
      keyword. These variables must be passed to the `use` construct.

      https://www.php.net/manual/en/language.closures.php#language.closures.use
  - question: What is the purpose of the `Throwable` interface in PHP 7 and later?
    answers:
      - value: It is the base interface for all objects that can be thrown via the
          `throw` statement, including `Error` and `Exception`.
        correct: true
      - value: It replaces the `Exception` class entirely.
        correct: false
      - value: It is used only for fatal errors, not for exceptions.
        correct: false
      - value: It defines methods for logging errors.
        correct: false
    help: >-
      In PHP 7, the `Throwable` interface was introduced as the common base
      interface for both `Error` and `Exception` classes. This allows a single
      `catch (Throwable $e)` block to handle both types of throwables.

      https://www.php.net/manual/en/class.throwable.php
  - question: Which of the following is the correct way to catch both `Exception`
      and `Error` types in PHP 7+?
    answers:
      - value: try { /* ... */ } catch (Throwable $e) { /* ... */ }
        correct: true
      - value: try { /* ... */ } catch (Exception $e) { /* ... */ } catch (Error $e) {
          /* ... */ }
        correct: true
      - value: try { /* ... */ } catch (Exception | Error $e) { /* ... */ }
        correct: true
      - value: try { /* ... */ } catch (Exception $e, Error $err) { /* ... */ }
        correct: false
    help: >-
      Since both `Exception` and `Error` implement the `Throwable` interface,
      catching `Throwable` will handle both. Alternatively, multiple `catch`
      blocks or a single `catch` with a union type (PHP 8.0+) can be used.

      https://www.php.net/manual/en/language.exceptions.php
  - question: What is a Trait in PHP?
    answers:
      - value: A mechanism for code reuse in single inheritance languages like PHP.
        correct: true
      - value: A type of abstract class that can only contain abstract methods.
        correct: false
      - value: A way to define global utility functions.
        correct: false
      - value: An interface that provides default method implementations.
        correct: false
    help: >-
      Traits are a mechanism for code reuse in single inheritance languages such
      as PHP. A Trait is intended to reduce limitations of single inheritance by
      enabling a developer to reuse sets of methods freely in several
      independent classes living in different class hierarchies.

      https://www.php.net/manual/en/language.oop5.traits.php
  - question: How do you include a Trait in a PHP class?
    answers:
      - value: Using the `use` keyword inside the class definition.
        correct: true
      - value: Using the `include` keyword at the top of the file.
        correct: false
      - value: Using the `extends` keyword.
        correct: false
      - value: Using the `implements` keyword.
        correct: false
    help: >-
      Traits are included into classes using the `use` keyword, followed by the
      trait name, inside the class definition.

      https://www.php.net/manual/en/language.oop5.traits.php
  - question: Which SPL (Standard PHP Library) class provides an iterator for
      traversing over filesystem objects?
    answers:
      - value: "`FilesystemIterator`"
        correct: true
      - value: "`DirectoryIterator`"
        correct: true
      - value: "`RecursiveDirectoryIterator`"
        correct: true
      - value: "`FileIterator`"
        correct: false
    help: >-
      SPL provides several iterators for filesystem traversal, including
      `DirectoryIterator`, `FilesystemIterator`, and
      `RecursiveDirectoryIterator`.

      https://www.php.net/manual/en/spl.files.php
  - question: Which SPL data structure implements a stack (LIFO - Last In, First Out)?
    answers:
      - value: "`SplStack`"
        correct: true
      - value: "`SplQueue`"
        correct: false
      - value: "`SplHeap`"
        correct: false
      - value: "`SplFixedArray`"
        correct: false
    help: >-
      The `SplStack` class provides the main functionalities of a stack, which
      is a LIFO (Last In, First Out) data structure.

      https://www.php.net/manual/en/class.splstack.php
  - question: What is the primary function of `spl_autoload_register()`?
    answers:
      - value: To register functions that will be called when an undefined class or
          interface is used.
        correct: true
      - value: To load all classes from a specified directory at once.
        correct: false
      - value: To register a global error handler.
        correct: false
      - value: To define a new SPL data structure.
        correct: false
    help: >-
      `spl_autoload_register()` registers the given function as an
      implementation of `__autoload()`. This allows for flexible, on-demand
      loading of classes and interfaces.

      https://www.php.net/manual/en/function.spl-autoload-register.php
  - question: Which of the following describes the `php://stdout` stream wrapper?
    answers:
      - value: It is a write-only stream for accessing the standard output stream of the
          PHP process.
        correct: true
      - value: It is a read-only stream for accessing the standard input stream.
        correct: false
      - value: It provides access to the request body data.
        correct: false
      - value: It is used for temporary in-memory storage.
        correct: false
    help: >-
      `php://stdout` is a write-only stream that allows direct access to the
      standard output stream of the PHP process. For convenience, it is
      recommended to use the `STDOUT` constant instead.

      https://www.php.net/manual/en/wrappers.php.php
  - question: What is the correct way to get the length of a string containing
      multi-byte characters (e.g., UTF-8) accurately in PHP?
    answers:
      - value: "`mb_strlen($string, 'UTF-8')`"
        correct: true
      - value: "`strlen($string)`"
        correct: false
      - value: "`count($string)`"
        correct: false
      - value: "`str_length($string)`"
        correct: false
    help: >-
      For strings containing multi-byte characters, `strlen()` will return the
      number of bytes, not characters. `mb_strlen()` should be used with the
      appropriate encoding (e.g., 'UTF-8') to get the correct character count.

      https://www.php.net/manual/en/function.mb-strlen.php
  - question: Which PHP extension is highly recommended for all PHP applications to
      improve performance by caching compiled PHP scripts?
    answers:
      - value: OpCache
        correct: true
      - value: Xdebug
        correct: false
      - value: Memcached
        correct: false
      - value: GD
        correct: false
    help: >-
      OpCache is a PHP extension that improves PHP performance by storing
      precompiled script bytecode in shared memory, thereby removing the need
      for PHP to load and parse scripts on each request.

      https://www.php.net/manual/en/book.opcache.php
  - question: What is the purpose of the `chr()` function?
    answers:
      - value: Returns a one-character string from a specified ASCII codepoint.
        correct: true
      - value: Converts a character to its ASCII value.
        correct: false
      - value: Returns the character at a specific index in a string.
        correct: false
      - value: Encodes a string into a URL-safe format.
        correct: false
    help: >-
      The `chr()` function returns a one-character string containing the
      character specified by interpreting `codepoint` as an unsigned integer
      (0-255). It is not Unicode-aware.

      https://www.php.net/manual/en/function.chr.php
  - question: Which of the following is NOT a valid PHP variable name?
    answers:
      - value: "`$1var`"
        correct: true
      - value: "`$_var`"
        correct: false
      - value: "`$myVar`"
        correct: false
      - value: "`$var_name`"
        correct: false
    help: >-
      PHP variable names must start with a letter or an underscore, followed by
      any number of letters, numbers, or underscores. They cannot start with a
      number.

      https://www.php.net/manual/en/language.variables.basics.php
  - question: What is the output of `explode(":", "foo:bar:baz")`?
    answers:
      - value: "An array: `['foo', 'bar', 'baz']`"
        correct: true
      - value: "A string: `'foobarbaz'`"
        correct: false
      - value: "An array with a single element: `['foo:bar:baz']`"
        correct: false
      - value: An empty array.
        correct: false
    help: >-
      The `explode()` function splits a string by a given delimiter and returns
      an array of substrings.

      https://www.php.net/manual/en/function.explode.php
  - question: Which of the following is true about PHP's `apache_request_headers()`
      function as of PHP 7.3.0?
    answers:
      - value: It became available in the FPM SAPI.
        correct: true
      - value: It was deprecated.
        correct: false
      - value: It now returns an object instead of an array.
        correct: false
      - value: It requires the Apache module to be explicitly enabled.
        correct: false
    help: >-
      As of PHP 7.3.0, the `apache_request_headers()` function became available
      in the FPM SAPI, allowing its use beyond just the Apache SAPI.

      https://www.php.net/manual/en/function.apache-request-headers.php
  - question: What is the behavior of `array_fill(-2, 4, 'pear')` in PHP 8.2?
    answers:
      - value: It creates an array starting with index -2, then -1, 0, 1.
        correct: true
      - value: It creates an array with 4 elements, all indexed from 0.
        correct: false
      - value: It throws an error because negative start indices are not allowed.
        correct: false
      - value: It fills the array with 'pear' for 4 elements, but the starting index is
          ignored.
        correct: false
    help: >-
      In PHP 7 and later, `array_fill()` correctly handles negative
      `start_index` values, starting the array keys from the specified negative
      index.

      https://www.php.net/manual/en/function.array-fill.php
  - question: Which of the following is the correct way to define a namespace
      `App\Service`?
    answers:
      - value: namespace App\Service;
        correct: true
      - value: use namespace App\Service;
        correct: false
      - value: define namespace App\Service;
        correct: false
      - value: namespace = App\Service;
        correct: false
    help: >-
      Namespaces are declared using the `namespace` keyword at the top of a PHP
      file.

      https://www.php.net/manual/en/language.namespaces.definition.php
  - question: What is the purpose of the `static` keyword when declaring a method in
      a PHP class?
    answers:
      - value: It makes the method callable without creating an instance of the class.
        correct: true
      - value: It ensures the method can only be accessed from within the class itself.
        correct: false
      - value: It prevents the method from being overridden by child classes.
        correct: false
      - value: It makes the method's variables persist between calls.
        correct: false
    help: >-
      Static methods can be called without instantiating the class. They cannot
      access non-static properties or methods using `$this`.

      https://www.php.net/manual/en/language.oop5.static.php
  - question: Which magic method is automatically called when there are no more
      references to an object, or when the script ends?
    answers:
      - value: "`__destruct()`"
        correct: true
      - value: "`__cleanup()`"
        correct: false
      - value: "`__destroy()`"
        correct: false
      - value: "`__unset()`"
        correct: false
    help: >-
      The `__destruct()` method is called when the object is garbage collected
      or when the script execution finishes.

      https://www.php.net/manual/en/language.oop5.decon.php
  - question: What is polymorphism in Object-Oriented Programming (OOP) in PHP?
    answers:
      - value: The ability of an object to take on many forms, typically through
          inheritance or interface implementation.
        correct: true
      - value: The bundling of data and methods that operate on the data into a single
          unit.
        correct: false
      - value: The process of creating new classes from existing classes.
        correct: false
      - value: The hiding of internal implementation details from the outside world.
        correct: false
    help: |-
      Polymorphism allows objects of different classes to be treated as objects of a common type (e.g., a parent class or an interface), enabling a single interface to represent different underlying forms.
      https://www.php.net/manual/en/language.oop5.basic.php#language.oop5.basic.polymorphism
  - question: Which of the following is a valid way to call a static method
      `myStaticMethod()` on a class `MyClass`?
    answers:
      - value: "`MyClass::myStaticMethod();`"
        correct: true
      - value: "`$myObject->myStaticMethod();`"
        correct: false
      - value: "`MyClass->myStaticMethod();`"
        correct: false
      - value: "`static::myStaticMethod();` (from outside the class)"
        correct: false
    help: >-
      Static methods are called using the double colon (`::`) operator, known as
      the Paamayim Nekudotayim (double-colon) operator.

      https://www.php.net/manual/en/language.oop5.static.php
  - question: What is the purpose of the `parent::` keyword in a child class?
    answers:
      - value: To call a method or access a property from the parent class.
        correct: true
      - value: To refer to the current class itself.
        correct: false
      - value: To call a static method from any class.
        correct: false
      - value: To define an abstract method in the parent class.
        correct: false
    help: >-
      The `parent::` keyword is used to refer to the parent class, typically to
      call an overridden method or access a static property/method from the
      parent.

      https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php
  - question: Which SPL class can be used to implement a queue (FIFO - First In,
      First Out)?
    answers:
      - value: "`SplQueue`"
        correct: true
      - value: "`SplStack`"
        correct: false
      - value: "`SplDoublyLinkedList`"
        correct: false
      - value: "`SplPriorityQueue`"
        correct: false
    help: >-
      The `SplQueue` class provides the main functionalities of a queue, which
      is a FIFO (First In, First Out) data structure.

      https://www.php.net/manual/en/class.splqueue.php
  - question: What is the correct way to define an interface `LoggerInterface` with
      a method `log(string $message)`?
    answers:
      - value: |-
          interface LoggerInterface {
              public function log(string $message);
          }
        correct: true
      - value: |-
          abstract class LoggerInterface {
              abstract public function log(string $message);
          }
        correct: false
      - value: |-
          class LoggerInterface {
              public function log(string $message) {}
          }
        correct: false
      - value: |-
          interface LoggerInterface {
              function log(string $message) {}
          }
        correct: false
    help: >-
      Interfaces are defined using the `interface` keyword. All methods declared
      in an interface must be public and do not contain implementation.

      https://www.php.net/manual/en/language.oop5.interfaces.php
  - question: Which of the following is true about `E_NOTICE` errors in PHP?
    answers:
      - value: They are runtime notices that indicate something that could be an error,
          but is not necessarily a critical problem.
        correct: true
      - value: They are fatal errors that stop script execution immediately.
        correct: false
      - value: They are compile-time errors that prevent the script from running.
        correct: false
      - value: They are warnings that indicate a non-fatal error.
        correct: false
    help: >-
      `E_NOTICE` indicates a notice, which means the script encountered
      something that could indicate an error, but is not an error in itself. For
      example, accessing an undefined variable prior to PHP 8.0.0.

      https://www.php.net/manual/en/errorfunc.constants.php
  - question: What is the purpose of the `use` keyword when dealing with namespaces?
    answers:
      - value: To import a namespace, class, function, or constant into the current
          file, allowing for shorter references.
        correct: true
      - value: To define a new namespace.
        correct: false
      - value: To include a PHP file from another directory.
        correct: false
      - value: To declare a variable that will be used across multiple functions.
        correct: false
    help: >-
      The `use` keyword is used for importing names from namespaces, making it
      easier to refer to fully qualified names without typing the full path.

      https://www.php.net/manual/en/language.namespaces.importing.php
  - question: Which of the following is a valid way to create an associative array
      in PHP 8.2?
    answers:
      - value: $arr = ['key' => 'value', 'another' => 'data'];
        correct: true
      - value: $arr = array('key' => 'value', 'another' => 'data');
        correct: true
      - value: $arr = new Array('key' => 'value');
        correct: false
      - value: "$arr = {'key': 'value'};"
        correct: false
    help: >-
      Associative arrays can be created using both the `array()` construct and
      the short array syntax `[]`, by specifying key-value pairs.

      https://www.php.net/manual/en/language.types.array.php
  - question: What happens if a class implements an interface but does not provide
      an implementation for all of its methods?
    answers:
      - value: A fatal error is generated unless the class is declared as `abstract`.
        correct: true
      - value: The missing methods are automatically filled with empty implementations.
        correct: false
      - value: A warning is issued, but the script continues to run.
        correct: false
      - value: The class becomes a trait.
        correct: false
    help: >-
      When a class implements an interface, it must implement all methods
      declared in the interface. If it fails to do so, a fatal error will be
      generated, unless the class itself is declared as `abstract`.

      https://www.php.net/manual/en/language.oop5.interfaces.php
  - question: Which SPL class provides a fixed-size array that allows faster access
      than a regular PHP array for numeric indices?
    answers:
      - value: "`SplFixedArray`"
        correct: true
      - value: "`SplArray`"
        correct: false
      - value: "`SplVector`"
        correct: false
      - value: "`SplArrayList`"
        correct: false
    help: >-
      The `SplFixedArray` class provides the main functionalities of a
      fixed-size array. It is faster than a standard PHP array when the size is
      known, as it uses less memory and avoids reallocations.

      https://www.php.net/manual/en/class.splfixedarray.php
  - question: What is the correct way to define a class constant `MAX_ITEMS` with a
      value of 100 inside a class `MyCollection`?
    answers:
      - value: |-
          class MyCollection {
              const MAX_ITEMS = 100;
          }
        correct: true
      - value: |-
          class MyCollection {
              define('MAX_ITEMS', 100);
          }
        correct: false
      - value: |-
          class MyCollection {
              public $MAX_ITEMS = 100;
          }
        correct: false
      - value: |-
          class MyCollection {
              static $MAX_ITEMS = 100;
          }
        correct: false
    help: >-
      Class constants are defined using the `const` keyword inside a class
      definition. They are immutable and belong to the class, not to instances.

      https://www.php.net/manual/en/language.oop5.constants.php
  - question: Which of the following describes the `static` keyword when used with a
      variable inside a function?
    answers:
      - value: The variable retains its value between function calls.
        correct: true
      - value: The variable can be accessed globally.
        correct: false
      - value: The variable is initialized only once.
        correct: true
      - value: The variable is read-only.
        correct: false
    help: |-
      A `static` variable exists only in a local function scope but its value is not lost when the function exits. It is initialized only once.
      https://www.php.net/manual/en/language.variables.scope.php#language.variables.scope.static
  - question: What is the primary difference between `include` and `require` in PHP?
    answers:
      - value: "`require` generates a fatal error if the file is not found, while
          `include` generates a warning and continues execution."
        correct: true
      - value: "`include` generates a fatal error if the file is not found, while
          `require` generates a warning."
        correct: false
      - value: "`require` is used for class files, `include` for template files."
        correct: false
      - value: There is no functional difference; they are aliases.
        correct: false
    help: >-
      The main difference is in how they handle errors. `require` will produce a
      fatal error (E_COMPILE_ERROR) and halt the script, whereas `include` will
      only produce a warning (E_WARNING) and the script will continue.

      https://www.php.net/manual/en/function.include.php
  - question: Which PHP function is used to convert a string to uppercase?
    answers:
      - value: "`strtoupper()`"
        correct: true
      - value: "`ucfirst()`"
        correct: false
      - value: "`mb_convert_case()`"
        correct: false
      - value: "`toUpper()`"
        correct: false
    help: >-
      The `strtoupper()` function converts all alphabetic characters in a string
      to uppercase. For multi-byte characters, `mb_strtoupper()` should be used.

      https://www.php.net/manual/en/function.strtoupper.php
  - question: What does the `final` keyword do when applied to a method within a class?
    answers:
      - value: It prevents child classes from overriding that method.
        correct: true
      - value: It makes the method static.
        correct: false
      - value: It makes the method abstract.
        correct: false
      - value: It makes the method private.
        correct: false
    help: >-
      If you declare a method `final`, then any child class cannot override that
      method. This is useful for ensuring specific behavior is not altered in
      subclasses.

      https://www.php.net/manual/en/language.oop5.final.php
  - question: Which of the following is a characteristic of a PHP Trait?
    answers:
      - value: It can contain abstract methods.
        correct: true
      - value: It can be instantiated directly.
        correct: false
      - value: It can inherit from another class.
        correct: false
      - value: It can implement interfaces.
        correct: true
    help: >-
      Traits can contain methods and properties, including abstract methods that
      must be implemented by the consuming class. They can also define methods
      that implement interfaces.

      https://www.php.net/manual/en/language.oop5.traits.php
  - question: How do you explicitly refer to the current class within a class method
      (e.g., for static method calls or constants)?
    answers:
      - value: "`self::`"
        correct: true
      - value: "`$this->`"
        correct: false
      - value: "`current::`"
        correct: false
      - value: "`MyClass::` (assuming `MyClass` is the current class name)"
        correct: true
    help: >-
      `self::` is used to refer to the current class, typically for static
      properties or methods, or class constants. Using the class name directly
      also works.

      https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php
  - question: What is the purpose of the `static` keyword when used with an
      anonymous function (closure)?
    answers:
      - value: It prevents the closure from accessing `$this` from the parent scope.
        correct: true
      - value: It makes the closure's variables persist between calls.
        correct: false
      - value: It allows the closure to be called without being assigned to a variable.
        correct: false
      - value: It automatically binds `$this` to the current class instance.
        correct: false
    help: |-
      Static anonymous functions (closures) do not have access to `$this` from the parent scope. This can be useful for performance or to ensure the closure doesn't inadvertently capture an object reference.
      https://www.php.net/manual/en/language.closures.php#language.closures.static
  - question: Which SPL class provides a priority queue, where elements are
      retrieved based on their priority?
    answers:
      - value: "`SplPriorityQueue`"
        correct: true
      - value: "`SplQueue`"
        correct: false
      - value: "`SplHeap`"
        correct: false
      - value: "`SplStack`"
        correct: false
    help: >-
      The `SplPriorityQueue` class provides the main functionalities of a
      priority queue, which allows elements to be retrieved in order of their
      assigned priority.

      https://www.php.net/manual/en/class.splpriorityqueue.php
  - question: What is the correct way to catch a specific custom exception
      `MyCustomException`?
    answers:
      - value: try { /* ... */ } catch (MyCustomException $e) { /* ... */ }
        correct: true
      - value: try { /* ... */ } catch (Exception $e) { /* ... */ }
        correct: false
      - value: try { /* ... */ } catch (Throwable $e) { /* ... */ }
        correct: false
      - value: try { /* ... */ } catch (mycustomexception $e) { /* ... */ }
        correct: false
    help: >-
      Exceptions are caught using the `catch` block, specifying the type of
      exception to catch. Custom exceptions should extend `Exception` or
      implement `Throwable`.

      https://www.php.net/manual/en/language.exceptions.php
  - question: What is the purpose of the `use` keyword when aliasing a class from a
      namespace?
    answers:
      - value: To provide an alternative, shorter name for a fully qualified class name.
        correct: true
      - value: To include the class file into the current script.
        correct: false
      - value: To make the class static.
        correct: false
      - value: To define a new class within the current namespace.
        correct: false
    help: |-
      The `use` keyword can be used with the `as` operator to alias a class, function, or constant, providing a simpler name for use within the current file.
      https://www.php.net/manual/en/language.namespaces.importing.php#language.namespaces.importing.alias
  - question: Which of the following is true about PHP's `jdtounix()` function as of
      PHP 7.3.24?
    answers:
      - value: The upper limit for the `julian_day` parameter has been extended.
        correct: true
      - value: It was deprecated.
        correct: false
      - value: It now returns a float instead of an integer.
        correct: false
      - value: It requires a new mandatory parameter.
        correct: false
    help: >-
      As of PHP 7.3.24, the upper limit for the `julian_day` parameter in
      `jdtounix()` was extended, allowing for conversion of later Julian day
      numbers.

      https://www.php.net/manual/en/function.jdtounix.php
  - question: |-
      What is the output of the following PHP code?

      ```php
      <?php
      $arr = array(5 => 1, 12 => 2);
      $arr[] = 56;
      var_dump($arr);
      ?>
      ```
    answers:
      - value: |-
          array(3) {
            [5]=> int(1)
            [12]=> int(2)
            [13]=> int(56)
          }
        correct: true
      - value: |-
          array(3) {
            [0]=> int(1)
            [1]=> int(2)
            [2]=> int(56)
          }
        correct: false
      - value: |-
          array(2) {
            [5]=> int(1)
            [12]=> int(2)
          }
        correct: false
      - value: |-
          array(3) {
            [5]=> int(1)
            [12]=> int(2)
            [0]=> int(56)
          }
        correct: false
    help: >-
      When adding an element to an array using `[]` without specifying a key,
      PHP will assign the next available integer key, which is the largest
      integer key currently in the array plus one. In this case, 12 + 1 = 13.

      https://www.php.net/manual/en/language.types.array.php
  - question: Which of the following is a valid way to embed PHP code within an HTML
      document?
    answers:
      - value: "`<?php echo 'Hello World'; ?>`"
        correct: true
      - value: "`<?= 'Hello World'; ?>`"
        correct: true
      - value: "`<% echo 'Hello World'; %>`"
        correct: false
      - value: "`{{ echo 'Hello World'; }}`"
        correct: false
    help: >-
      PHP code can be embedded in HTML using the standard `<?php ... ?>` tags or
      the short echo tag `<?= ... ?>` (which is always enabled as of PHP 5.4).

      https://www.php.net/manual/en/language.basic-syntax.phptags.php
