category: PHP
questions:
  - question: Which of the following is a new feature introduced in PHP 8.2?
    answers:
      - value: Readonly classes
        correct: true
      - value: Enums
        correct: false
      - value: Named arguments
        correct: false
      - value: Match expression
        correct: false
    help: >-
      PHP 8.2 introduced readonly classes, allowing all properties declared in
      the class to be automatically readonly. Enums, named arguments, and the
      match expression were introduced in PHP 8.1 and PHP 8.0 respectively.

      https://www.php.net/manual/en/migration82.new-features.php
  - question: In Object-Oriented Programming (OOP) in PHP, what is the purpose of
      the `final` keyword when applied to a method?
    answers:
      - value: It prevents child classes from overriding the method.
        correct: true
      - value: It makes the method static.
        correct: false
      - value: It makes the method abstract.
        correct: false
      - value: It prevents the method from being called outside the class.
        correct: false
    help: >-
      If you wish to prevent a child class from overriding a method, prefix the
      method definition with `final`. If the class itself is declared `final`,
      then it cannot be extended.

      https://www.php.net/manual/en/language.oop5.final.php
  - question: >-
      Given the following directory structure:


      ```

      project/

      ├── src/

      │   ├── Controller/

      │   │   └── HomeController.php

      │   └── Service/

      │       └── UserService.php

      └── public/
          └── index.php
      ```


      If `HomeController.php` is in the `App\Controller` namespace and
      `UserService.php` is in the `App\Service` namespace, how would you
      correctly use `UserService` within `HomeController.php`?
    answers:
      - value: |-
          ```php
          namespace App\Controller;

          use App\Service\UserService;

          class HomeController
          {
              public function index()
              {
                  $userService = new UserService();
              }
          }
          ```
        correct: true
      - value: |-
          ```php
          namespace App\Controller;

          class HomeController
          {
              public function index()
              {
                  $userService = new \App\Service\UserService();
              }
          }
          ```
        correct: true
      - value: |-
          ```php
          namespace App\Controller;

          require_once '../src/Service/UserService.php';

          class HomeController
          {
              public function index()
              {
                  $userService = new UserService();
              }
          }
          ```
        correct: false
      - value: |-
          ```php
          namespace App\Controller;

          use UserService;

          class HomeController
          {
              public function index()
              {
                  $userService = new UserService();
              }
          }
          ```
        correct: false
    help: >-
      To use a class from another namespace, you can either import it using the
      `use` keyword or refer to it by its fully qualified name (FQN) starting
      with a backslash.

      https://www.php.net/manual/en/language.namespaces.importing.php
  - question: Which of the following statements about PHP interfaces is true?
    answers:
      - value: Interfaces can contain properties.
        correct: false
      - value: A class can implement multiple interfaces.
        correct: true
      - value: All methods declared in an interface must be public.
        correct: true
      - value: Interfaces can define method bodies.
        correct: false
      - value: Interfaces can extend classes.
        correct: false
    help: >-
      Interfaces define a contract for classes. They cannot contain properties
      or method bodies. All methods declared in an interface must be public. A
      class can implement multiple interfaces, providing polymorphism.

      https://www.php.net/manual/en/language.oop5.interfaces.php
  - question: |-
      Consider the following PHP code:

      ```php
      $message = 'Hello';
      $closure = function () use ($message) {
          echo $message;
      };
      $message = 'World';
      $closure();
      ```

      What will be the output of this code?
    answers:
      - value: Hello
        correct: true
      - value: World
        correct: false
      - value: An error will occur.
        correct: false
      - value: Nothing, as the closure is not executed.
        correct: false
    help: >-
      When a variable is imported into a closure using `use ($variable)`, it is
      imported by value at the time the closure is defined, not when it is
      executed. Therefore, the value of `$message` captured by the closure is
      'Hello'.

      https://www.php.net/manual/en/functions.anonymous.php
  - question: Which of the following is true about abstract classes in PHP?
    answers:
      - value: Abstract classes cannot be instantiated directly.
        correct: true
      - value: An abstract class must contain at least one abstract method.
        correct: false
      - value: Child classes extending an abstract class must implement all its abstract
          methods.
        correct: true
      - value: Abstract methods must be declared with a body.
        correct: false
    help: >-
      Abstract classes cannot be instantiated directly. While they can contain
      abstract methods (which must be implemented by non-abstract child
      classes), they are not required to have any. Abstract methods are declared
      without a body.

      https://www.php.net/manual/en/language.oop5.abstract.php
  - question: What is the correct way to catch multiple specific exceptions in PHP?
    answers:
      - value: |-
          ```php
          try {
              // Some code that might throw exceptions
          } catch (ExceptionTypeA | ExceptionTypeB $e) {
              // Handle ExceptionTypeA or ExceptionTypeB
          } catch (Exception $e) {
              // Handle any other exception
          }
          ```
        correct: true
      - value: |-
          ```php
          try {
              // Some code that might throw exceptions
          } catch (ExceptionTypeA $e) {
              // Handle ExceptionTypeA
          } catch (ExceptionTypeB $e) {
              // Handle ExceptionTypeB
          }
          ```
        correct: true
      - value: |-
          ```php
          try {
              // Some code that might throw exceptions
          } catch (ExceptionTypeA, ExceptionTypeB $e) {
              // Handle ExceptionTypeA or ExceptionTypeB
          }
          ```
        correct: false
      - value: |-
          ```php
          try {
              // Some code that might throw exceptions
          } catch (array $e) {
              // Handle exceptions from an array
          }
          ```
        correct: false
    help: >-
      PHP allows catching multiple exceptions in a single `catch` block using
      the `|` (bitwise OR) operator since PHP 7.1. You can also use separate
      `catch` blocks for different exception types.

      https://www.php.net/manual/en/language.exceptions.php
  - question: Which of the following statements accurately describes PHP traits?
    answers:
      - value: Traits are a form of multiple inheritance in PHP.
        correct: false
      - value: Traits allow for horizontal reuse of methods in independent class
          hierarchies.
        correct: true
      - value: A class can use only one trait.
        correct: false
      - value: Traits can define properties and methods.
        correct: true
      - value: Traits can be instantiated directly.
        correct: false
    help: >-
      Traits are a mechanism for code reuse in single inheritance languages like
      PHP. They allow a class to use methods and properties from multiple
      traits, effectively enabling horizontal reuse. Traits cannot be
      instantiated on their own.

      https://www.php.net/manual/en/language.oop5.traits.php
  - question: Which PHP extension is commonly used for interacting with relational
      databases like MySQL or PostgreSQL?
    answers:
      - value: PDO (PHP Data Objects)
        correct: true
      - value: GD
        correct: false
      - value: cURL
        correct: false
      - value: JSON
        correct: false
    help: >-
      PDO (PHP Data Objects) provides a lightweight, consistent interface for
      accessing databases in PHP. GD is for image manipulation, cURL for
      transferring data with various protocols, and JSON for JSON
      encoding/decoding.

      https://www.php.net/manual/en/book.pdo.php
  - question: Which SPL (Standard PHP Library) interface should a class implement to
      allow its objects to be iterated over using `foreach`?
    answers:
      - value: Iterator
        correct: true
      - value: ArrayAccess
        correct: false
      - value: Serializable
        correct: false
      - value: Countable
        correct: false
    help: >-
      The `Iterator` interface allows an object to be iterated over like an
      array using `foreach`. `ArrayAccess` allows objects to be accessed as
      arrays, `Serializable` for custom serialization, and `Countable` for using
      `count()` on an object.

      https://www.php.net/manual/en/class.iterator.php
  - question: What is the purpose of the `declare(strict_types=1);` directive in PHP?
    answers:
      - value: It enforces strict type checking for scalar type declarations in the
          current file.
        correct: true
      - value: It makes all type declarations mandatory.
        correct: false
      - value: It enables strict mode for database interactions.
        correct: false
      - value: It prevents type juggling.
        correct: false
    help: |-
      The `declare(strict_types=1);` directive, when placed at the top of a PHP file, enables strict mode for scalar type declarations (int, float, string, bool) within that file. This means that if a function expects an `int` and receives a `string` that could be coerced to an `int` (e.g., '5'), it will throw a `TypeError` instead of silently converting it.
      https://www.php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration.strict
  - question: Which of the following is a valid way to define a constant within a
      class in PHP?
    answers:
      - value: |-
          ```php
          class MyClass {
              const MY_CONSTANT = 'value';
          }
          ```
        correct: true
      - value: |-
          ```php
          class MyClass {
              public const MY_CONSTANT = 'value';
          }
          ```
        correct: true
      - value: |-
          ```php
          class MyClass {
              define('MY_CONSTANT', 'value');
          }
          ```
        correct: false
      - value: |-
          ```php
          class MyClass {
              var $MY_CONSTANT = 'value';
          }
          ```
        correct: false
    help: >-
      Class constants are defined using the `const` keyword. They can be
      declared with visibility modifiers (public, protected, private) since PHP
      7.1. The `define()` function is for global constants, and `var` is for
      properties.

      https://www.php.net/manual/en/language.oop5.constants.php
  - question: What is the primary benefit of using namespaces in PHP?
    answers:
      - value: To avoid naming collisions between classes, functions, and constants.
        correct: true
      - value: To improve script execution speed.
        correct: false
      - value: To encrypt sensitive code.
        correct: false
      - value: To define global variables.
        correct: false
    help: >-
      Namespaces provide a way to group related code, preventing naming
      conflicts when combining code from different libraries or applications.
      They do not directly impact execution speed or encryption.

      https://www.php.net/manual/en/language.namespaces.php
  - question: When a class implements an interface, what is required of the
      implementing class regarding the interface's methods?
    answers:
      - value: It must implement all methods declared in the interface.
        correct: true
      - value: It must implement only the public methods declared in the interface.
        correct: false
      - value: It can choose which methods to implement.
        correct: false
      - value: It can change the visibility of the implemented methods.
        correct: false
    help: >-
      When a class implements an interface, it must implement all methods
      declared in that interface. The visibility of the implemented methods must
      be at least as public as in the interface (typically, they must remain
      public).

      https://www.php.net/manual/en/language.oop5.interfaces.php
  - question: Which of the following is a valid way to create an anonymous function
      (closure) that can access a variable from its parent scope by reference?
    answers:
      - value: |-
          ```php
          $count = 0;
          $increment = function () use (&$count) {
              $count++;
          };
          ```
        correct: true
      - value: |-
          ```php
          $count = 0;
          $increment = function () use ($count) {
              $count++;
          };
          ```
        correct: false
      - value: |-
          ```php
          $count = 0;
          $increment = function () {
              global $count;
              $count++;
          };
          ```
        correct: false
      - value: |-
          ```php
          $count = 0;
          $increment = function () use_ref ($count) {
              $count++;
          };
          ```
        correct: false
    help: >-
      To pass a variable by reference into a closure, you must use the `&`
      symbol before the variable name in the `use` clause. Without `&`, the
      variable is passed by value.

      https://www.php.net/manual/en/functions.anonymous.php
  - question: What happens if a non-abstract class extends an abstract class but
      does not implement all of its abstract methods?
    answers:
      - value: A fatal error will be thrown.
        correct: true
      - value: A warning will be issued, but the script will continue.
        correct: false
      - value: The child class automatically becomes abstract.
        correct: false
      - value: The missing methods are automatically implemented as empty methods.
        correct: false
    help: >-
      If a child class is not declared abstract, it must provide an
      implementation for all abstract methods inherited from its parent abstract
      class. Failure to do so will result in a fatal error.

      https://www.php.net/manual/en/language.oop5.abstract.php
  - question: Which of the following is the base class for all user-defined
      exceptions in PHP?
    answers:
      - value: Exception
        correct: true
      - value: Throwable
        correct: false
      - value: Error
        correct: false
      - value: RuntimeException
        correct: false
    help: >-
      All user-defined exceptions should extend the `Exception` class.
      `Throwable` is the base interface for all throwables (Errors and
      Exceptions) since PHP 7. `Error` is for internal PHP errors.

      https://www.php.net/manual/en/language.exceptions.php
  - question: When a trait method has the same name as a method in the class using
      the trait, which method takes precedence?
    answers:
      - value: The method from the class takes precedence.
        correct: true
      - value: The method from the trait takes precedence.
        correct: false
      - value: A fatal error occurs.
        correct: false
      - value: It depends on the order of declaration.
        correct: false
    help: |-
      When a trait method conflicts with a method defined in the class itself, the class's method takes precedence. If multiple traits define methods with the same name, a fatal error occurs unless explicitly resolved using `insteadof`.
      https://www.php.net/manual/en/language.oop5.traits.php#language.oop5.traits.precedence
  - question: Which PHP extension provides functions for working with XML documents?
    answers:
      - value: SimpleXML
        correct: true
      - value: DOM
        correct: true
      - value: Exif
        correct: false
      - value: Sockets
        correct: false
    help: >-
      Both SimpleXML and DOM extensions provide robust APIs for parsing,
      manipulating, and querying XML documents. SimpleXML offers a simpler,
      object-oriented approach, while DOM provides a more powerful, W3C-standard
      compliant API.

      https://www.php.net/manual/en/book.simplexml.php

      https://www.php.net/manual/en/book.dom.php
  - question: Which SPL class can be used to treat an array as an object and access
      its elements using object property syntax?
    answers:
      - value: ArrayObject
        correct: true
      - value: SplFixedArray
        correct: false
      - value: SplQueue
        correct: false
      - value: SplStack
        correct: false
    help: >-
      The `ArrayObject` class provides the functionality of an array but with
      object syntax. `SplFixedArray` is for fixed-size arrays, `SplQueue` for
      queue functionality, and `SplStack` for stack functionality.

      https://www.php.net/manual/en/class.arrayobject.php
  - question: What is the purpose of the `__invoke()` magic method in PHP?
    answers:
      - value: It is called when an object is treated as a function.
        correct: true
      - value: It is called when an object is cloned.
        correct: false
      - value: It is called when an object is serialized.
        correct: false
      - value: It is called when an object is destroyed.
        correct: false
    help: >-
      The `__invoke()` method is called when a script tries to call an object as
      a function. This allows objects to behave like callable functions.

      https://www.php.net/manual/en/language.oop5.magic.php#object.invoke
  - question: Which of the following is a correct way to define a class that cannot
      be extended?
    answers:
      - value: |-
          ```php
          final class MyClass {
              // ...
          }
          ```
        correct: true
      - value: |-
          ```php
          sealed class MyClass {
              // ...
          }
          ```
        correct: false
      - value: |-
          ```php
          private class MyClass {
              // ...
          }
          ```
        correct: false
      - value: |-
          ```php
          static class MyClass {
              // ...
          }
          ```
        correct: false
    help: >-
      The `final` keyword, when applied to a class, prevents it from being
      extended by any other class. This is useful for ensuring that the class's
      behavior cannot be altered by subclasses.

      https://www.php.net/manual/en/language.oop5.final.php
  - question: |-
      Consider the following PHP code:

      ```php
      namespace MyProject\SubsystemA;

      class MyClass {}

      namespace MyProject\SubsystemB;

      use MyProject\SubsystemA\MyClass;

      $obj = new MyClass();
      ```

      In which namespace will `$obj` be an instance of `MyClass`?
    answers:
      - value: "`MyProject\\SubsystemA\\MyClass`"
        correct: true
      - value: "`MyProject\\SubsystemB\\MyClass`"
        correct: false
      - value: Global namespace
        correct: false
      - value: An error will occur.
        correct: false
    help: >-
      The `use` statement imports the `MyClass` from `MyProject\SubsystemA` into
      the current namespace (`MyProject\SubsystemB`), making `new MyClass()`
      refer to `MyProject\SubsystemA\MyClass`.

      https://www.php.net/manual/en/language.namespaces.importing.php
  - question: Which of the following is a valid way to define an interface that
      extends another interface?
    answers:
      - value: |-
          ```php
          interface MyInterfaceA {}
          interface MyInterfaceB extends MyInterfaceA {}
          ```
        correct: true
      - value: |-
          ```php
          interface MyInterfaceA {}
          interface MyInterfaceB implements MyInterfaceA {}
          ```
        correct: false
      - value: |-
          ```php
          interface MyInterfaceA {}
          interface MyInterfaceB use MyInterfaceA {}
          ```
        correct: false
      - value: |-
          ```php
          interface MyInterfaceA {}
          interface MyInterfaceB extends MyInterfaceA, AnotherInterface {}
          ```
        correct: true
    help: |-
      Interfaces can extend one or more other interfaces using the `extends` keyword, similar to classes. An interface cannot implement another interface.
      https://www.php.net/manual/en/language.oop5.interfaces.php#language.oop5.interfaces.extending
  - question: What is the primary difference between an anonymous function and an
      arrow function in PHP?
    answers:
      - value: Arrow functions implicitly capture variables from the parent scope by
          value, while anonymous functions require `use`.
        correct: true
      - value: Arrow functions are always single-line expressions, while anonymous
          functions can have multiple statements.
        correct: true
      - value: Anonymous functions are faster than arrow functions.
        correct: false
      - value: Arrow functions can be used as generators, but anonymous functions
          cannot.
        correct: false
    help: >-
      Arrow functions (introduced in PHP 7.4) provide a more concise syntax for
      simple, single-expression anonymous functions. They automatically capture
      variables from the parent scope by value, without needing the `use`
      keyword. Anonymous functions can have multiple statements.

      https://www.php.net/manual/en/functions.arrow.php
  - question: Which of the following is a valid characteristic of an abstract method
      in PHP?
    answers:
      - value: It must be declared in an abstract class or interface.
        correct: true
      - value: It must not contain a method body.
        correct: true
      - value: It must be public.
        correct: false
      - value: It can be static.
        correct: true
    help: >-
      Abstract methods are declared without an implementation (body) and must be
      defined within an abstract class or an interface. They can have any
      visibility (public, protected, private) in abstract classes, but must be
      public in interfaces. They can also be static.

      https://www.php.net/manual/en/language.oop5.abstract.php
  - question: What is the purpose of the `finally` block in a
      `try...catch...finally` statement?
    answers:
      - value: It is always executed, regardless of whether an exception was thrown or
          caught.
        correct: true
      - value: It is executed only if an exception is thrown.
        correct: false
      - value: It is executed only if no exception is thrown.
        correct: false
      - value: It is used to re-throw an exception.
        correct: false
    help: >-
      The `finally` block is optional and is always executed after the `try` and
      `catch` blocks, regardless of whether an exception was thrown or caught.
      It's typically used for cleanup operations.

      https://www.php.net/manual/en/language.exceptions.php
  - question: |-
      Consider the following code snippet:

      ```php
      trait Logger {
          public function log($message) {
              echo "Log: $message\n";
          }
      }

      trait Timestamp {
          public function log($message) {
              echo "Timestamped Log: $message at " . date('H:i:s') . "\n";
          }
      }

      class MyService {
          use Logger, Timestamp {
              Timestamp::log insteadof Logger;
          }
      }

      $service = new MyService();
      $service->log('Hello');
      ```

      What will be the output?
    answers:
      - value: "Timestamped Log: Hello at HH:MM:SS (where HH:MM:SS is the current time)"
        correct: true
      - value: "Log: Hello"
        correct: false
      - value: A fatal error due to method conflict.
        correct: false
      - value: Nothing, as the method is not called.
        correct: false
    help: |-
      The `insteadof` operator is used to resolve method name conflicts when using multiple traits. In this case, `Timestamp::log` is explicitly chosen over `Logger::log`.
      https://www.php.net/manual/en/language.oop5.traits.php#language.oop5.traits.conflict
  - question: Which PHP extension is essential for handling sessions in web applications?
    answers:
      - value: Session
        correct: true
      - value: SPL
        correct: false
      - value: Standard
        correct: false
      - value: Zlib
        correct: false
    help: >-
      The Session extension provides functions for managing user sessions,
      allowing data to persist across multiple page requests. SPL is the
      Standard PHP Library, Standard is a core extension, and Zlib is for
      compression.

      https://www.php.net/manual/en/book.session.php
  - question: Which SPL class provides a way to implement a stack (LIFO - Last In,
      First Out) data structure?
    answers:
      - value: SplStack
        correct: true
      - value: SplQueue
        correct: false
      - value: SplHeap
        correct: false
      - value: SplPriorityQueue
        correct: false
    help: >-
      The `SplStack` class implements a stack data structure, where elements are
      added and removed from the same end (LIFO). `SplQueue` implements a queue
      (FIFO), and `SplHeap`/`SplPriorityQueue` are for heap-based data
      structures.

      https://www.php.net/manual/en/class.splstack.php
  - question: What is the purpose of the `match` expression introduced in PHP 8.0?
    answers:
      - value: It provides a more concise and type-safe alternative to the `switch`
          statement.
        correct: true
      - value: It is used for regular expression matching.
        correct: false
      - value: It allows for pattern matching on objects.
        correct: false
      - value: It is a new loop construct.
        correct: false
    help: >-
      The `match` expression is a new control flow construct in PHP 8.0 that is
      similar to `switch` but offers more concise syntax, strict comparisons,
      and can return a value. It's an expression, not a statement.

      https://www.php.net/manual/en/control-structures.match.php
  - question: In PHP, what is the significance of the `static` keyword when used
      with class methods or properties?
    answers:
      - value: Static methods/properties belong to the class itself, not to any specific
          instance of the class.
        correct: true
      - value: Static methods/properties can only be accessed from within the class.
        correct: false
      - value: Static methods/properties are automatically inherited by child classes
          and cannot be overridden.
        correct: false
      - value: Static methods/properties are always public.
        correct: false
    help: >-
      Static methods and properties can be accessed without creating an instance
      of the class. They belong to the class definition. They can have different
      visibility (public, protected, private) and can be overridden by child
      classes unless declared `final`.

      https://www.php.net/manual/en/language.oop5.static.php
  - question: Which of the following is the correct way to define a global constant
      in PHP?
    answers:
      - value: |-
          ```php
          define('MY_GLOBAL_CONSTANT', 'some_value');
          ```
        correct: true
      - value: |-
          ```php
          const MY_GLOBAL_CONSTANT = 'some_value';
          ```
        correct: false
      - value: |-
          ```php
          $MY_GLOBAL_CONSTANT = 'some_value';
          ```
        correct: false
      - value: |-
          ```php
          var MY_GLOBAL_CONSTANT = 'some_value';
          ```
        correct: false
    help: >-
      Global constants are defined using the `define()` function. The `const`
      keyword is used for class constants or top-level constants in the global
      scope since PHP 5.3, but `define()` is the traditional way for global
      constants.

      https://www.php.net/manual/en/function.define.php
  - question: What is the purpose of the `use function` and `use const` statements
      in PHP namespaces?
    answers:
      - value: To import functions and constants from other namespaces, respectively.
        correct: true
      - value: To define new functions and constants within the current namespace.
        correct: false
      - value: To change the visibility of functions and constants.
        correct: false
      - value: To declare functions and constants as global.
        correct: false
    help: >-
      The `use function` and `use const` statements allow importing functions
      and constants, respectively, from other namespaces into the current scope,
      making them accessible without their fully qualified names.

      https://www.php.net/manual/en/language.namespaces.importing.php
  - question: Which of the following is NOT a valid magic method in PHP?
    answers:
      - value: "`__construct`"
        correct: false
      - value: "`__destruct`"
        correct: false
      - value: "`__get`"
        correct: false
      - value: "`__create`"
        correct: true
      - value: "`__toString`"
        correct: false
    help: >-
      PHP has a set of predefined 'magic' methods (e.g., `__construct`,
      `__destruct`, `__get`, `__set`, `__call`, `__toString`, `__invoke`, etc.)
      that perform special actions. `__create` is not a valid magic method.

      https://www.php.net/manual/en/language.oop5.magic.php
  - question: What is the primary use case for the `__clone()` magic method?
    answers:
      - value: To perform deep copying of objects, especially when they contain other
          objects.
        correct: true
      - value: To serialize an object into a string.
        correct: false
      - value: To destroy an object when it's no longer needed.
        correct: false
      - value: To convert an object to a string representation.
        correct: false
    help: >-
      When an object is cloned using the `clone` keyword, PHP performs a shallow
      copy. If the object contains other objects, those nested objects are still
      references to the original objects. The `__clone()` method is called on
      the new object and allows you to perform deep copying or other custom
      logic after the shallow copy is complete.

      https://www.php.net/manual/en/language.oop5.cloning.php
  - question: Which PHP extension provides cryptographic functions, such as hashing
      and encryption?
    answers:
      - value: OpenSSL
        correct: true
      - value: Mbstring
        correct: false
      - value: Intl
        correct: false
      - value: XML
        correct: false
    help: >-
      The OpenSSL extension offers a wide range of cryptographic functions,
      including hashing, encryption/decryption, and digital signatures. Mbstring
      is for multi-byte string functions, Intl for internationalization, and XML
      for XML parsing.

      https://www.php.net/manual/en/book.openssl.php
  - question: Which SPL class provides a way to implement a queue (FIFO - First In,
      First Out) data structure?
    answers:
      - value: SplQueue
        correct: true
      - value: SplStack
        correct: false
      - value: SplDoublyLinkedList
        correct: true
      - value: SplHeap
        correct: false
    help: >-
      The `SplQueue` class implements a queue data structure.
      `SplDoublyLinkedList` can also be used to implement a queue by using its
      `push()` and `shift()` methods. `SplStack` is for stacks, and `SplHeap`
      for heaps.

      https://www.php.net/manual/en/class.splqueue.php

      https://www.php.net/manual/en/class.spldoublylinkedlist.php
  - question: What is the correct way to declare a readonly property in a PHP 8.1+ class?
    answers:
      - value: |-
          ```php
          class User {
              public readonly string $name;

              public function __construct(string $name) {
                  $this->name = $name;
              }
          }
          ```
        correct: true
      - value: |-
          ```php
          class User {
              public const string $name;
          }
          ```
        correct: false
      - value: |-
          ```php
          class User {
              private final string $name;
          }
          ```
        correct: false
      - value: |-
          ```php
          class User {
              public string $name readonly;
          }
          ```
        correct: false
    help: |-
      Readonly properties (introduced in PHP 8.1) are declared using the `readonly` keyword. They can only be initialized once, either at declaration or within the constructor. After initialization, their value cannot be changed.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly
  - question: Which of the following describes the purpose of the `static` keyword
      when used with variables inside a function?
    answers:
      - value: The variable retains its value between function calls.
        correct: true
      - value: The variable becomes globally accessible.
        correct: false
      - value: The variable is initialized only once.
        correct: true
      - value: The variable is accessible only within the class where the function is
          defined.
        correct: false
    help: |-
      A static variable exists only in a local function scope but its value is not lost when the function exits. It retains its value between calls to the function and is initialized only once.
      https://www.php.net/manual/en/language.variables.scope.php#language.variables.scope.static
  - question: What is the correct way to define a namespace alias in PHP?
    answers:
      - value: |-
          ```php
          use My\Full\Namespace\ClassName as AliasName;
          ```
        correct: true
      - value: |-
          ```php
          alias My\Full\Namespace\ClassName as AliasName;
          ```
        correct: false
      - value: |-
          ```php
          namespace My\Full\Namespace\ClassName as AliasName;
          ```
        correct: false
      - value: |-
          ```php
          import My\Full\Namespace\ClassName as AliasName;
          ```
        correct: false
    help: |-
      The `use ... as ...` syntax is used to create an alias for a class, interface, trait, function, or constant imported from another namespace. This allows for shorter, more readable code.
      https://www.php.net/manual/en/language.namespaces.importing.php#language.namespaces.importing.aliases
  - question: Which of the following is true about PHP 8.0's `#[Attribute]`?
    answers:
      - value: Attributes provide a way to add metadata to classes, methods, properties,
          and functions.
        correct: true
      - value: Attributes are executed at runtime to modify code behavior.
        correct: false
      - value: Attributes replace annotations in PHP.
        correct: false
      - value: Attributes are defined using XML.
        correct: false
    help: >-
      Attributes (introduced in PHP 8.0) are structured, declarative metadata
      that can be added to declarations in PHP code (classes, methods,
      properties, functions, parameters, class constants). They are parsed by
      PHP but do not directly modify code behavior; rather, they provide
      information that can be read via reflection.

      https://www.php.net/manual/en/language.attributes.php
  - question: What is the purpose of the `__debugInfo()` magic method?
    answers:
      - value: It is called when `var_dump()` is used on an object, allowing custom
          debug output.
        correct: true
      - value: It is used to log debugging messages to a file.
        correct: false
      - value: It provides information about the object's memory usage.
        correct: false
      - value: It is called automatically when an error occurs.
        correct: false
    help: >-
      The `__debugInfo()` magic method is called when `var_dump()` is used on an
      object. It allows you to customize the information that is displayed,
      which can be useful for hiding sensitive data or simplifying complex
      object structures during debugging.

      https://www.php.net/manual/en/language.oop5.magic.php#object.debuginfo
  - question: Which PHP extension is commonly used for working with multi-byte
      character encodings, such as UTF-8?
    answers:
      - value: Mbstring
        correct: true
      - value: Iconv
        correct: false
      - value: Pcre
        correct: false
      - value: Standard
        correct: false
    help: >-
      The Mbstring (Multi-Byte String) extension provides functions for handling
      multi-byte character encodings, which are essential for working with
      languages that use characters outside the ASCII range. Iconv is for
      character set conversion, and PCRE for regular expressions.

      https://www.php.net/manual/en/book.mbstring.php
  - question: Which SPL class provides a way to implement a doubly linked list?
    answers:
      - value: SplDoublyLinkedList
        correct: true
      - value: SplFixedArray
        correct: false
      - value: SplQueue
        correct: false
      - value: SplStack
        correct: false
    help: >-
      The `SplDoublyLinkedList` class provides the functionality of a doubly
      linked list, allowing efficient insertion and deletion of elements at both
      ends and in the middle.

      https://www.php.net/manual/en/class.spldoublylinkedlist.php
  - question: What is the purpose of the `__serialize()` and `__unserialize()` magic
      methods (PHP 7.4+)?
    answers:
      - value: They allow custom serialization and deserialization logic for objects,
          replacing `Serializable` interface.
        correct: true
      - value: They are used for deep cloning objects.
        correct: false
      - value: They convert objects to JSON strings.
        correct: false
      - value: They handle database persistence for objects.
        correct: false
    help: >-
      Introduced in PHP 7.4, `__serialize()` and `__unserialize()` provide a new
      mechanism for custom object serialization, intended to replace the
      `Serializable` interface. They allow you to control which data is
      serialized and how it's restored.

      https://www.php.net/manual/en/language.oop5.magic.php#object.serialize
  - question: Which of the following is a new feature introduced in PHP 8.1?
    answers:
      - value: Enums
        correct: true
      - value: Union Types
        correct: false
      - value: Attributes
        correct: false
      - value: Nullsafe operator
        correct: false
    help: >-
      PHP 8.1 introduced Enums, which are a special kind of class that
      represents a fixed set of named values. Union Types, Attributes, and the
      Nullsafe operator were introduced in PHP 8.0.

      https://www.php.net/manual/en/migration81.new-features.php
  - question: What is the correct way to access a private method of a trait from the
      class that uses it, assuming no name conflict?
    answers:
      - value: You cannot directly access a private method of a trait from the class
          that uses it.
        correct: true
      - value: >-
          ```php

          class MyClass { use MyTrait; public function callTraitMethod() {
          $this->privateTraitMethod(); } }

          ```
        correct: false
      - value: >-
          ```php

          class MyClass { use MyTrait; public function callTraitMethod() {
          MyTrait::privateTraitMethod(); } }

          ```
        correct: false
      - value: >-
          ```php

          class MyClass { use MyTrait; public function callTraitMethod() {
          parent::privateTraitMethod(); } }

          ```
        correct: false
    help: >-
      Private methods of a trait remain private to the trait itself. They cannot
      be directly accessed from the class that uses the trait. They can only be
      called by other methods within the same trait.

      https://www.php.net/manual/en/language.oop5.traits.php
  - question: Which PHP extension is commonly used for image manipulation, such as
      creating thumbnails or adding watermarks?
    answers:
      - value: GD
        correct: true
      - value: Imagick
        correct: true
      - value: Exif
        correct: false
      - value: Fileinfo
        correct: false
    help: >-
      Both GD and Imagick are popular PHP extensions for image processing. GD is
      a built-in library for creating and manipulating images, while Imagick is
      a more powerful extension that wraps the ImageMagick library.

      https://www.php.net/manual/en/book.gd.php

      https://www.php.net/manual/en/book.imagick.php
  - question: Which SPL class can be used to iterate over a directory's contents
      recursively?
    answers:
      - value: RecursiveDirectoryIterator
        correct: true
      - value: DirectoryIterator
        correct: false
      - value: FilesystemIterator
        correct: false
      - value: GlobIterator
        correct: false
    help: >-
      The `RecursiveDirectoryIterator` class provides an interface for iterating
      recursively over filesystem directories. `DirectoryIterator` iterates over
      a single directory, `FilesystemIterator` provides additional flags, and
      `GlobIterator` iterates over files/directories matching a glob pattern.

      https://www.php.net/manual/en/class.recursivedirectoryiterator.php
  - question: What is the primary purpose of the `__toString()` magic method?
    answers:
      - value: To define how an object should be converted to a string.
        correct: true
      - value: To convert an object to a JSON string.
        correct: false
      - value: To serialize an object for storage.
        correct: false
      - value: To represent an object's state for debugging.
        correct: false
    help: >-
      The `__toString()` method allows a class to decide how it will react when
      it is treated as a string. For example, `echo $obj;` will call
      `$obj->__toString()`.

      https://www.php.net/manual/en/language.oop5.magic.php#object.tostring
  - question: Which of the following is a valid way to define a typed property in
      PHP 7.4+?
    answers:
      - value: |-
          ```php
          class MyClass {
              public string $name;
          }
          ```
        correct: true
      - value: |-
          ```php
          class MyClass {
              public $name: string;
          }
          ```
        correct: false
      - value: |-
          ```php
          class MyClass {
              public var string $name;
          }
          ```
        correct: false
      - value: |-
          ```php
          class MyClass {
              public string $name = null;
          }
          ```
        correct: true
    help: |-
      Typed properties (introduced in PHP 7.4) allow you to declare the type of a class property. They can be nullable by prefixing the type with a question mark (`?string`) or by assigning `null` as a default value if the type allows it.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.type-declaration
  - question: What is the purpose of the `use` keyword when applied to a class,
      interface, or trait in the global scope?
    answers:
      - value: To import a class, interface, or trait from another namespace into the
          current file.
        correct: true
      - value: To define a new class, interface, or trait.
        correct: false
      - value: To extend a class or implement an interface.
        correct: false
      - value: To make a class, interface, or trait globally accessible without a
          namespace.
        correct: false
    help: >-
      The `use` keyword is used to import (alias) classes, interfaces, traits,
      functions, or constants from other namespaces into the current file's
      namespace, allowing them to be referred to by their unqualified name.

      https://www.php.net/manual/en/language.namespaces.importing.php
  - question: Which of the following is a valid way to define a class that
      implements multiple interfaces?
    answers:
      - value: |-
          ```php
          class MyClass implements InterfaceA, InterfaceB {
              // ...
          }
          ```
        correct: true
      - value: |-
          ```php
          class MyClass implements InterfaceA and InterfaceB {
              // ...
          }
          ```
        correct: false
      - value: |-
          ```php
          class MyClass implements [InterfaceA, InterfaceB] {
              // ...
          }
          ```
        correct: false
      - value: |-
          ```php
          class MyClass implements InterfaceA, implements InterfaceB {
              // ...
          }
          ```
        correct: false
    help: >-
      A class can implement multiple interfaces by listing them after the
      `implements` keyword, separated by commas.

      https://www.php.net/manual/en/language.oop5.interfaces.php
  - question: |-
      Consider the following PHP code:

      ```php
      $func = function ($name) {
          return 'Hello, ' . $name;
      };

      echo $func('World');
      ```

      What type of callable is `$func`?
    answers:
      - value: An anonymous function (closure)
        correct: true
      - value: A named function
        correct: false
      - value: A static method
        correct: false
      - value: A class method
        correct: false
    help: >-
      The syntax `function (...) { ... }` defines an anonymous function, also
      known as a closure. It can be assigned to a variable and called like a
      regular function.

      https://www.php.net/manual/en/functions.anonymous.php
  - question: What is the purpose of the `Throwable` interface in PHP 7+?
    answers:
      - value: It is the base interface for all objects that can be thrown via the
          `throw` statement, including `Exception` and `Error`.
        correct: true
      - value: It is used to define custom error handlers.
        correct: false
      - value: It allows objects to be iterated over.
        correct: false
      - value: It is a marker interface for classes that can be serialized.
        correct: false
    help: >-
      The `Throwable` interface was introduced in PHP 7 and is the common base
      interface for all objects that can be thrown using the `throw` statement.
      This includes both `Exception` (for user-defined and standard exceptions)
      and `Error` (for internal PHP errors).

      https://www.php.net/manual/en/class.throwable.php
  - question: Which of the following is a valid way to use a trait in a class?
    answers:
      - value: |-
          ```php
          class MyClass {
              use MyTrait;
          }
          ```
        correct: true
      - value: |-
          ```php
          class MyClass extends MyTrait {
          }
          ```
        correct: false
      - value: |-
          ```php
          class MyClass implements MyTrait {
          }
          ```
        correct: false
      - value: |-
          ```php
          class MyClass {
              include MyTrait;
          }
          ```
        correct: false
    help: >-
      Traits are included into classes using the `use` keyword. They are not
      extended or implemented like classes or interfaces.

      https://www.php.net/manual/en/language.oop5.traits.php
  - question: Which PHP extension is commonly used for making HTTP requests to
      external resources?
    answers:
      - value: cURL
        correct: true
      - value: Sockets
        correct: false
      - value: FTP
        correct: false
      - value: Zip
        correct: false
    help: >-
      The cURL extension provides a powerful library for transferring data using
      various protocols, including HTTP, HTTPS, FTP, and more. It's widely used
      for making API calls and fetching web content.

      https://www.php.net/manual/en/book.curl.php
  - question: Which SPL class provides a way to implement a min-heap or max-heap
      data structure?
    answers:
      - value: SplHeap
        correct: true
      - value: SplPriorityQueue
        correct: true
      - value: SplFixedArray
        correct: false
      - value: SplQueue
        correct: false
    help: >-
      The `SplHeap` class is an abstract base class for heap implementations.
      Its concrete subclasses `SplMinHeap` and `SplMaxHeap` provide min-heap and
      max-heap functionality, respectively. `SplPriorityQueue` is a specific
      type of heap where elements are retrieved based on their priority.

      https://www.php.net/manual/en/class.splheap.php

      https://www.php.net/manual/en/class.splpriorityqueue.php
  - question: What is the purpose of the `readonly` keyword when applied to a class
      (PHP 8.2+)?
    answers:
      - value: It makes all properties declared in the class automatically readonly.
        correct: true
      - value: It prevents the class from being extended.
        correct: false
      - value: It makes all methods in the class static.
        correct: false
      - value: It prevents the class from being instantiated.
        correct: false
    help: |-
      Introduced in PHP 8.2, declaring a class as `readonly` automatically makes all its declared properties `readonly`. This means that once initialized (typically in the constructor), their values cannot be changed.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly-classes
  - question: Which of the following describes the behavior of `null` in PHP 8.0+
      when used with type declarations?
    answers:
      - value: A type can be made nullable by prefixing it with `?` (e.g., `?string`).
        correct: true
      - value: Null is implicitly allowed for all types unless `declare(strict_types=1)`
          is used.
        correct: false
      - value: Union types like `string|null` are used to explicitly allow null.
        correct: true
      - value: Assigning `null` to a non-nullable typed property will result in a
          `TypeError`.
        correct: true
    help: |-
      Since PHP 7.1, types can be made nullable using the `?` prefix. PHP 8.0 introduced Union Types, allowing `null` to be explicitly part of a type declaration (e.g., `string|null`). Assigning `null` to a non-nullable typed property or parameter will result in a `TypeError`.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.nullable
  - question: What is the purpose of the `__sleep()` and `__wakeup()` magic methods?
    answers:
      - value: They allow custom serialization and deserialization logic when
          `serialize()` and `unserialize()` are used.
        correct: true
      - value: They are used for database connection management.
        correct: false
      - value: They control object lifecycle within a framework.
        correct: false
      - value: They are called when an object is created and destroyed, respectively.
        correct: false
    help: >-
      The `__sleep()` method is called prior to serialization, allowing you to
      return an array of property names that should be serialized. The
      `__wakeup()` method is called immediately after deserialization, allowing
      you to re-establish any resources or re-initialize properties.

      https://www.php.net/manual/en/language.oop5.magic.php#object.sleep
  - question: Which PHP extension is crucial for internationalization and
      localization tasks, such as date/time formatting, number formatting, and
      collation?
    answers:
      - value: Intl
        correct: true
      - value: Gettext
        correct: false
      - value: Mbstring
        correct: false
      - value: XML
        correct: false
    help: >-
      The Intl (Internationalization) extension provides a wrapper for the ICU
      library, offering robust features for handling various
      internationalization tasks, including locale-aware formatting and
      collation. Gettext is for message translation, and Mbstring for multi-byte
      strings.

      https://www.php.net/manual/en/book.intl.php
  - question: Which SPL class can be used to filter iterators based on a condition?
    answers:
      - value: CallbackFilterIterator
        correct: true
      - value: RecursiveFilterIterator
        correct: true
      - value: LimitIterator
        correct: false
      - value: AppendIterator
        correct: false
    help: >-
      Both `CallbackFilterIterator` and `RecursiveFilterIterator` allow
      filtering elements during iteration. `CallbackFilterIterator` uses a
      callback function for filtering, while `RecursiveFilterIterator` is for
      recursive iterators. `LimitIterator` limits the number of elements, and
      `AppendIterator` appends multiple iterators.

      https://www.php.net/manual/en/class.callbackfilteriterator.php

      https://www.php.net/manual/en/class.recursivefilteriterator.php
  - question: What is the purpose of the `#[Deprecated]` attribute (PHP 8.1+)?
    answers:
      - value: It marks a class, method, property, or function as deprecated, indicating
          it should no longer be used.
        correct: true
      - value: It automatically removes deprecated code from the application.
        correct: false
      - value: It prevents the use of deprecated features.
        correct: false
      - value: It provides a mechanism for backward compatibility.
        correct: false
    help: |-
      The `#[Deprecated]` attribute (introduced in PHP 8.1) is a built-in attribute used to mark code elements as deprecated. Tools and IDEs can then use this information to warn developers about the use of deprecated features, encouraging migration to newer alternatives.
      https://www.php.net/manual/en/language.attributes.php#language.attributes.predefined.deprecated
  - question: Which of the following is a valid way to define a static method in a class?
    answers:
      - value: |-
          ```php
          class MyClass {
              public static function myStaticMethod() {
                  // ...
              }
          }
          ```
        correct: true
      - value: |-
          ```php
          class MyClass {
              static public function myStaticMethod() {
                  // ...
              }
          }
          ```
        correct: true
      - value: |-
          ```php
          class MyClass {
              function static myStaticMethod() {
                  // ...
              }
          }
          ```
        correct: false
      - value: |-
          ```php
          static function myStaticMethod() {
              // ...
          }
          ```
        correct: false
    help: >-
      Static methods are declared using the `static` keyword. They can be
      public, protected, or private. They belong to the class and can be called
      without creating an instance of the class.

      https://www.php.net/manual/en/language.oop5.static.php
  - question: What is the purpose of the `__call()` magic method?
    answers:
      - value: It is triggered when invoking inaccessible or non-existent methods in an
          object context.
        correct: true
      - value: It is called when a static method is invoked.
        correct: false
      - value: It is used to define the constructor of a class.
        correct: false
      - value: It is called when an object is treated as a function.
        correct: false
    help: >-
      The `__call()` method is triggered when invoking inaccessible (e.g.,
      private or protected from outside the class) or non-existent methods in an
      object context. It receives the method name and an array of arguments.

      https://www.php.net/manual/en/language.oop5.magic.php#object.call
  - question: Which PHP extension provides functions for working with JSON data?
    answers:
      - value: JSON
        correct: true
      - value: XML
        correct: false
      - value: PDO
        correct: false
      - value: Date
        correct: false
    help: >-
      The JSON extension provides functions for encoding and decoding JSON data,
      such as `json_encode()` and `json_decode()`. This is essential for
      interacting with web APIs and handling data in JSON format.

      https://www.php.net/manual/en/book.json.php
  - question: Which SPL class provides a way to iterate over a flat array as if it
      were a tree structure?
    answers:
      - value: RecursiveArrayIterator
        correct: true
      - value: ArrayIterator
        correct: false
      - value: RecursiveIteratorIterator
        correct: false
      - value: ParentIterator
        correct: false
    help: >-
      The `RecursiveArrayIterator` class provides an iterator for arrays that
      can be used with `RecursiveIteratorIterator` to traverse multi-dimensional
      arrays (or arrays representing tree structures) recursively.

      https://www.php.net/manual/en/class.recursivearrayiterator.php
  - question: What is the purpose of the `#[AllowDynamicProperties]` attribute (PHP
      8.2+)?
    answers:
      - value: It explicitly allows dynamic properties on a class, suppressing the
          deprecation warning in PHP 8.2.
        correct: true
      - value: It enables strict type checking for properties.
        correct: false
      - value: It makes all properties public.
        correct: false
      - value: It prevents the creation of new properties after object instantiation.
        correct: false
    help: |-
      In PHP 8.2, dynamic properties are deprecated. The `#[AllowDynamicProperties]` attribute can be used to explicitly allow dynamic properties on a class, thus suppressing the deprecation warning. This is primarily for backward compatibility.
      https://www.php.net/manual/en/language.attributes.php#language.attributes.predefined.allowdynamicproperties
  - question: Which of the following is true about the `parent` keyword in PHP?
    answers:
      - value: It refers to the parent class of the current class.
        correct: true
      - value: It can be used to call a parent class's constructor.
        correct: true
      - value: It can be used to access parent class's private methods.
        correct: false
      - value: It refers to the global scope.
        correct: false
    help: >-
      The `parent` keyword is used to refer to the parent class. It's commonly
      used to call overridden methods or the constructor of the parent class. It
      cannot access private members of the parent class.

      https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php
  - question: What is the purpose of the `#[SensitiveParameter]` attribute (PHP 8.2+)?
    answers:
      - value: It marks a parameter as sensitive, preventing its value from appearing in
          stack traces.
        correct: true
      - value: It encrypts the parameter's value automatically.
        correct: false
      - value: It validates the parameter's type strictly.
        correct: false
      - value: It makes the parameter optional.
        correct: false
    help: |-
      The `#[SensitiveParameter]` attribute (introduced in PHP 8.2) can be applied to function or method parameters. When an exception occurs and a stack trace is generated, the value of parameters marked as sensitive will be redacted from the trace, enhancing security by preventing sensitive data from being leaked in error logs.
      https://www.php.net/manual/en/language.attributes.php#language.attributes.predefined.sensitiveparameter
  - question: Which of the following describes the behavior of `static` properties
      in PHP?
    answers:
      - value: They are shared across all instances of a class.
        correct: true
      - value: They are initialized for each new object instance.
        correct: false
      - value: They can only be accessed from static methods.
        correct: false
      - value: They cannot be overridden by child classes.
        correct: false
    help: >-
      Static properties belong to the class itself, not to any specific object
      instance. This means their value is shared among all instances of that
      class. They can be accessed from both static and non-static methods and
      can be overridden by child classes.

      https://www.php.net/manual/en/language.oop5.static.php
  - question: What is the purpose of the `__set_state()` magic method?
    answers:
      - value: It is called when an object is exported by `var_export()`.
        correct: true
      - value: It is used to set the state of an object from a database.
        correct: false
      - value: It is called when a property is set dynamically.
        correct: false
      - value: It is used for debugging purposes only.
        correct: false
    help: >-
      The `__set_state()` static method is called for classes exported by
      `var_export()`. The method receives an array containing the exported
      properties in the format `['property' => value, ...]`. It allows you to
      customize how an object is reconstructed from its exported state.

      https://www.php.net/manual/en/language.oop5.magic.php#object.set-state
