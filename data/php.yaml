category: PHP
questions:
  -
    question: >
      What is the correct way to define a basic class named `MyClass` in PHP?
    answers:
      - { value: 'class MyClass {}', correct: true }
      - { value: 'function class MyClass {}', correct: false }
      - { value: 'define class MyClass;', correct: false }
      - { value: 'new class MyClass {};', correct: false }
    help: |
      Classes are defined using the `class` keyword.
      https://www.php.net/manual/en/language.oop5.basic.php#language.oop5.basic.class
  -
    question: >
      How do you declare a public property named `name` in a PHP class?
    answers:
      - { value: 'public $name;', correct: true }
      - { value: 'var $name;', correct: false }
      - { value: 'private $name;', correct: false }
      - { value: 'const name;', correct: false }
    help: |
      Properties are variables belonging to a class. Their visibility is defined by keywords like `public`, `protected`, or `private`.
      https://www.php.net/manual/en/language.oop5.properties.php
  -
    question: >
      What is the correct syntax for defining a public method named `greet` in a PHP class?
    answers:
      - { value: 'public function greet() {}', correct: true }
      - { value: 'function greet() {}', correct: false }
      - { value: 'method greet() {}', correct: false }
      - { value: 'public static greet() {}', correct: false }
    help: |
      Methods are functions that belong to a class. They are defined using the `function` keyword, preceded by a visibility keyword.
      https://www.php.net/manual/en/language.oop5.methods.php
  -
    question: >
      Given a class named `User`, how do you create a new instance of this class?
    answers:
      - { value: '$user = new User();', correct: true }
      - { value: '$user = create User;', correct: false }
      - { value: '$user = User::new();', correct: false }
      - { value: '$user = new User;', correct: true }
    help: |
      Objects are created using the `new` keyword. Parentheses are optional if no arguments are passed to the constructor.
      https://www.php.net/manual/en/language.oop5.basic.php#language.oop5.basic.instantiation
  -
    question: >
      Which special method in a PHP class is automatically called when a new object is created?
    answers:
      - { value: '__construct', correct: true }
      - { value: '__init', correct: false }
      - { value: 'constructor', correct: false }
      - { value: 'init', correct: false }
    help: |
      The `__construct()` method is a special method that is automatically called whenever a new object is created.
      https://www.php.net/manual/en/language.oop5.decon.php#object.construct
  -
    question: >
      Which of the following are valid visibility keywords for class members (properties and methods) in PHP?
    answers:
      - { value: 'public', correct: true }
      - { value: 'private', correct: true }
      - { value: 'protected', correct: true }
      - { value: 'internal', correct: false }
      - { value: 'friend', correct: false }
    help: |
      PHP supports three visibility keywords: `public`, `protected`, and `private`.
      https://www.php.net/manual/en/language.oop5.visibility.php
  -
    question: >
      How can a class `ChildClass` inherit from a class `ParentClass` in PHP?
    answers:
      - { value: 'class ChildClass extends ParentClass {}', correct: true }
      - { value: 'class ChildClass implements ParentClass {}', correct: false }
      - { value: 'class ChildClass uses ParentClass {}', correct: false }
      - { value: 'class ChildClass inherits ParentClass {}', correct: false }
    help: |
      Class inheritance is achieved using the `extends` keyword.
      https://www.php.net/manual/en/language.oop5.inheritance.php
  -
    question: >
      When a child class defines a method with the same name as a method in its parent class, what is this concept called?
    answers:
      - { value: 'Method Overriding', correct: true }
      - { value: 'Method Overloading', correct: false }
      - { value: 'Method Hiding', correct: false }
      - { value: 'Method Aliasing', correct: false }
    help: |
      Method overriding allows a child class to provide a specific implementation of a method that is already provided by one of its parent classes.
      https://www.php.net/manual/en/language.oop5.inheritance.php#language.oop5.inheritance.overriding
  -
    question: >
      What is the purpose of the `final` keyword when applied to a class or a method in PHP?
    answers:
      - { value: 'Prevents a class from being inherited.', correct: true }
      - { value: 'Prevents a method from being overridden by child classes.', correct: true }
      - { value: 'Makes a class property a constant.', correct: false }
      - { value: 'Makes a method static.', correct: false }
    help: |
      If a class is declared `final`, it cannot be extended. If a method is declared `final`, it cannot be overridden.
      https://www.php.net/manual/en/language.oop5.final.php
  -
    question: >
      Which statement about `static` properties and methods in PHP is true?
    answers:
      - { value: 'They can be accessed without creating an instance of the class.', correct: true }
      - { value: 'They belong to a specific instance of the class.', correct: false }
      - { value: 'They can be accessed using the `$this` keyword.', correct: false }
      - { value: 'They are always private.', correct: false }
    help: |
      Static properties and methods can be accessed without instantiating the class. They belong to the class itself.
      https://www.php.net/manual/en/language.oop5.static.php
  -
    question: >
      How do you declare a namespace `App\Controller` in a PHP file?
    answers:
      - { value: 'namespace App\\Controller;', correct: true }
      - { value: 'use namespace App\\Controller;', correct: false }
      - { value: 'declare namespace App\\Controller;', correct: false }
      - { value: 'namespace "App\\Controller";', correct: false }
    help: |
      Namespaces are declared using the `namespace` keyword at the top of a PHP file.
      https://www.php.net/manual/en/language.namespaces.definition.php
  -
    question: >
      What is the correct way to import the `Response` class from `Symfony\Component\HttpFoundation` into the current file, allowing you to refer to it simply as `Response`?
    answers:
      - { value: 'use Symfony\\Component\\HttpFoundation\\Response;', correct: true }
      - { value: 'import Symfony\\Component\\HttpFoundation\\Response;', correct: false }
      - { value: 'require Symfony\\Component\\HttpFoundation\\Response;', correct: false }
      - { value: 'include Symfony\\Component\\HttpFoundation\\Response;', correct: false }
    help: |
      The `use` keyword is used to import classes, interfaces, traits, or functions from other namespaces.
      https://www.php.net/manual/en/language.namespaces.importing.php
  -
    question: >
      If you have two classes named `Logger` in different namespaces (`App\Util\Logger` and `App\Service\Logger`), how can you use both in the same file without conflict?
    answers:
      - { value: 'Use their fully qualified names (FQCN) directly.', correct: true }
      - { value: 'Use the ''as'' keyword to create an alias for one or both classes.', correct: true }
      - { value: 'You cannot use two classes with the same short name in the same file.', correct: false }
      - { value: 'By using `include` statements for each.', correct: false }
    help: |
      Namespace aliasing with `as` or using the full qualified name allows resolving naming conflicts.
      https://www.php.net/manual/en/language.namespaces.importing.php#language.namespaces.importing.aliases
  -
    question: >
      How do you refer to a global function or class (i.e., one not defined within any namespace) from within a namespaced code block?
    answers:
      - { value: '\functionName()', correct: true }
      - { value: 'global::functionName()', correct: false }
      - { value: '::functionName()', correct: false }
      - { value: 'functionName() (it''s automatically global)', correct: false }
    help: |
      To refer to global functions or classes from within a namespace, you must prefix their name with a backslash (`\`).
      https://www.php.net/manual/en/language.namespaces.global.php
  -
    question: >
      What is the primary benefit of using namespaces in conjunction with autoloading (e.g., PSR-4 standard)?
    answers:
      - { value: 'To prevent naming collisions between classes and functions from different libraries or modules.', correct: true }
      - { value: 'To make PHP code execute faster by pre-compiling files.', correct: false }
      - { value: 'To reduce the overall file size of PHP applications.', correct: false }
      - { value: 'To encrypt PHP source code for security.', correct: false }
    help: |
      Namespaces provide a way to group related code, preventing naming conflicts when combining code from multiple sources, which is crucial for modern autoloading standards like PSR-4.
      https://www.php.net/manual/en/language.namespaces.rationale.php
  -
    question: >
      How do you define an interface named `LoggerInterface` in PHP?
    answers:
      - { value: 'interface LoggerInterface {}', correct: true }
      - { value: 'abstract interface LoggerInterface {}', correct: false }
      - { value: 'class interface LoggerInterface {}', correct: false }
      - { value: 'trait LoggerInterface {}', correct: false }
    help: |
      Interfaces are defined using the `interface` keyword.
      https://www.php.net/manual/en/language.oop5.interfaces.php
  -
    question: >
      Which keyword is used by a class to implement an interface in PHP?
    answers:
      - { value: 'implements', correct: true }
      - { value: 'extends', correct: false }
      - { value: 'uses', correct: false }
      - { value: 'inherits', correct: false }
    help: |
      A class uses the `implements` keyword to indicate that it will adhere to the contract defined by an interface.
      https://www.php.net/manual/en/language.oop5.interfaces.php#language.oop5.interfaces.implements
  -
    question: >
      What must be true about methods declared in a PHP interface?
    answers:
      - { value: 'They must be public and cannot have a body.', correct: true }
      - { value: 'They can be public, protected, or private.', correct: false }
      - { value: 'They must be static.', correct: false }
      - { value: 'They must have a default implementation.', correct: false }
    help: |
      All methods declared in an interface must be public and do not contain any implementation.
      https://www.php.net/manual/en/language.oop5.interfaces.php
  -
    question: >
      Can a PHP class implement multiple interfaces?
    answers:
      - { value: 'Yes, a class can implement multiple interfaces separated by commas.', correct: true }
      - { value: 'No, a class can only implement one interface.', correct: false }
      - { value: 'Only if the interfaces have no conflicting method names.', correct: false }
      - { value: 'Only if the interfaces are in the same namespace.', correct: false }
    help: |
      A class can implement more than one interface, separating each interface with a comma.
      https://www.php.net/manual/en/language.oop5.interfaces.php#language.oop5.interfaces.multiple
  -
    question: >
      What is a key difference between an interface and an abstract class in PHP?
    answers:
      - { value: 'An abstract class can have concrete (implemented) methods, while an interface can only declare method signatures.', correct: true }
      - { value: 'Interfaces can define properties, while abstract classes cannot.', correct: false }
      - { value: 'Abstract classes can be instantiated, while interfaces cannot.', correct: false }
      - { value: 'Interfaces can define constructors, while abstract classes cannot.', correct: false }
    help: |
      Abstract classes can have both abstract (unimplemented) and concrete (implemented) methods, and can define properties. Interfaces can only declare method signatures and cannot have properties.
      https://www.php.net/manual/en/language.oop5.abstract.php
      https://www.php.net/manual/en/language.oop5.interfaces.php
  -
    question: >
      What is the correct syntax for defining an anonymous function (closure) in PHP?
    answers:
      - { value: 'function () {}', correct: true }
      - { value: 'fn () => {};', correct: true }
      - { value: 'lambda () {};', correct: false }
      - { value: 'closure () {};', correct: false }
    help: |
      Anonymous functions are functions that do not have a specified name. Since PHP 7.4, arrow functions (`fn`) provide a more concise syntax for simple closures.
      https://www.php.net/manual/en/functions.anonymous.php
      https://www.php.net/manual/en/functions.arrow.php
  -
    question: >
      What is the purpose of the `use` keyword when defining a closure in PHP?
    answers:
      - { value: 'To import variables from the parent scope into the closure''s scope.', correct: true }
      - { value: 'To define a namespace for the closure.', correct: false }
      - { value: 'To include an external PHP file within the closure.', correct: false }
      - { value: 'To specify the return type of the closure.', correct: false }
    help: |
      Closures can inherit variables from the parent scope. Any such variables must be passed to the `use` language construct.
      https://www.php.net/manual/en/functions.anonymous.php#example-265
  -
    question: >
      Which of the following is true about PHP arrow functions (`fn` syntax), introduced in PHP 7.4?
    answers:
      - { value: 'They automatically capture variables from the parent scope by value.', correct: true }
      - { value: 'They can contain multiple expressions separated by semicolons.', correct: false }
      - { value: 'They can be used as generators.', correct: false }
      - { value: 'They must explicitly use the `use` keyword to import variables.', correct: false }
    help: |
      Arrow functions provide a concise syntax for closures. They automatically capture variables from the parent scope by value.
      https://www.php.net/manual/en/functions.arrow.php
  -
    question: >
      What does `Closure::bindTo()` allow you to do in PHP?
    answers:
      - { value: 'To change the object scope and class scope of a closure.', correct: true }
      - { value: 'To execute a closure immediately.', correct: false }
      - { value: 'To serialize a closure for storage.', correct: false }
      - { value: 'To convert a regular function into a closure.', correct: false }
    help: |
      The `bindTo()` method allows duplication of the closure with a new bound object and class scope.
      https://www.php.net/manual/en/closure.bindto.php
  -
    question: >
      How can an anonymous function be used as a callback in PHP?
    answers:
      - { value: 'By assigning it to a variable and then calling the variable.', correct: true }
      - { value: 'By passing it directly as an argument to functions that accept callables (e.g., `array_map`, `usort`).', correct: true }
      - { value: 'Only if it is a static method of a class.', correct: false }
      - { value: 'Only if it is defined within a class.', correct: false }
    help: |
      Anonymous functions are closures and can be used anywhere a callable is expected.
      https://www.php.net/manual/en/language.types.callable.php
  -
    question: >
      How do you define an abstract class named `Shape` in PHP?
    answers:
      - { value: 'abstract class Shape {}', correct: true }
      - { value: 'interface Shape {}', correct: false }
      - { value: 'trait Shape {}', correct: false }
      - { value: 'class Shape abstract {}', correct: false }
    help: |
      Abstract classes are declared with the `abstract` keyword.
      https://www.php.net/manual/en/language.oop5.abstract.php
  -
    question: >
      What is true about abstract methods in PHP?
    answers:
      - { value: 'They declare a method signature but no implementation, and must be implemented by non-abstract child classes.', correct: true }
      - { value: 'They can have a default implementation.', correct: false }
      - { value: 'They must be static.', correct: false }
      - { value: 'They can be private or protected.', correct: false }
    help: |
      Abstract methods are declared with the `abstract` keyword and cannot contain a body. Any class that contains at least one abstract method must be declared abstract.
      https://www.php.net/manual/en/language.oop5.abstract.php#language.oop5.abstract.abstract-method
  -
    question: >
      Can you directly instantiate an abstract class in PHP?
    answers:
      - { value: 'No, an abstract class cannot be instantiated directly.', correct: true }
      - { value: 'Yes, but only if it has no abstract methods.', correct: false }
      - { value: 'Yes, using a special factory method.', correct: false }
      - { value: 'Only if it implements an interface.', correct: false }
    help: |
      An abstract class cannot be instantiated, but requires any class that inherits from it to implement its abstract methods.
      https://www.php.net/manual/en/language.oop5.abstract.php
  -
    question: >
      An abstract class can have properties with different visibility (`public`, `protected`, `private`), while an interface cannot have properties at all. Is this statement true or false?
    answers:
      - { value: 'True', correct: true }
      - { value: 'False', correct: false }
    help: |
      Abstract classes are classes and can therefore have properties with any visibility. Interfaces define a contract and cannot have properties.
      https://www.php.net/manual/en/language.oop5.abstract.php
      https://www.php.net/manual/en/language.oop5.interfaces.php
  -
    question: >
      If a class `ConcreteShape` extends an abstract class `Shape` that has an abstract method `calculateArea()`, what must `ConcreteShape` do to be a valid non-abstract class?
    answers:
      - { value: 'It must implement the ''calculateArea()'' method.', correct: true }
      - { value: 'It must declare ''calculateArea()'' as abstract again.', correct: false }
      - { value: 'It does not need to implement ''calculateArea()'' if it has a constructor.', correct: false }
      - { value: 'It must use a trait that implements ''calculateArea()''.', correct: false }
    help: |
      When inheriting from an abstract class, all methods marked abstract in the parent's class declaration must be defined by the child; additionally, these methods must be defined with the same (or a less restricted) visibility.
      https://www.php.net/manual/en/language.oop5.abstract.php#language.oop5.abstract.abstract-method
  -
    question: >
      How do you throw a new exception in PHP?
    answers:
      - { value: 'throw new Exception("Error message");', correct: true }
      - { value: 'catch new Exception("Error message");', correct: false }
      - { value: 'raise Exception("Error message");', correct: false }
      - { value: 'new Exception("Error message");', correct: false }
    help: |
      Exceptions are thrown using the `throw` statement.
      https://www.php.net/manual/en/language.exceptions.php#language.exceptions.throwing
  -
    question: >
      What is the correct block structure to catch an exception in PHP?
    answers:
      - { value: 'try { /* code */ } catch (Exception $e) { /* handle */ }', correct: true }
      - { value: 'try { /* code */ } finally { /* handle */ }', correct: false }
      - { value: 'do { /* code */ } while (true); catch (Exception $e) { /* handle */ }', correct: false }
      - { value: 'catch (Exception $e) { /* handle */ } try { /* code */ }', correct: false }
    help: |
      A `try` block must be accompanied by either a `catch` or a `finally` block.
      https://www.php.net/manual/en/language.exceptions.php#language.exceptions.catching
  -
    question: >
      What is the purpose of the `finally` block in exception handling?
    answers:
      - { value: 'It always executes, regardless of whether an exception was thrown or caught.', correct: true }
      - { value: 'It only executes if an exception is thrown.', correct: false }
      - { value: 'It only executes if no exception is thrown.', correct: false }
      - { value: 'It is used to re-throw an exception.', correct: false }
    help: |
      The `finally` block will always be executed after the `try` and `catch` blocks, regardless of whether an exception was thrown or not.
      https://www.php.net/manual/en/language.exceptions.php#language.exceptions.finally
  -
    question: >
      How can you create a custom exception class in PHP?
    answers:
      - { value: 'By extending the built-in `Exception` class.', correct: true }
      - { value: 'By implementing the `Throwable` interface directly.', correct: false }
      - { value: 'By using a trait named `ExceptionTrait`.', correct: false }
      - { value: 'By declaring a class with the `exception` keyword.', correct: false }
    help: |
      To create a custom exception class, you must extend the base `Exception` class.
      https://www.php.net/manual/en/language.exceptions.php#language.exceptions.extending
  -
    question: >
      In PHP 7 and later, what is the fundamental difference between an `Error` and an `Exception`?
    answers:
      - { value: '`Errors` typically represent internal PHP errors (e.g., parse errors, type errors) and implement the `Throwable` interface, but not `Exception`.', correct: true }
      - { value: '`Exceptions` are primarily for user-defined error conditions or expected runtime issues, and they extend the `Exception` class.', correct: true }
      - { value: '`Errors` can be caught by a `catch (Exception $e)` block, while `Exceptions` cannot.', correct: false }
      - { value: '`Errors` are always fatal, while `Exceptions` are never fatal.', correct: false }
    help: |
      Both `Error` and `Exception` implement the `Throwable` interface. `Error` is used for internal PHP errors, while `Exception` is for user-defined or application-level exceptions.
      https://www.php.net/manual/en/class.throwable.php
      https://www.php.net/manual/en/class.error.php
  -
    question: >
      How do you define a trait named `Loggable` in PHP?
    answers:
      - { value: 'trait Loggable {}', correct: true }
      - { value: 'class Loggable {}', correct: false }
      - { value: 'interface Loggable {}', correct: false }
      - { value: 'abstract trait Loggable {}', correct: false }
    help: |
      Traits are declared using the `trait` keyword.
      https://www.php.net/manual/en/language.oop5.traits.php
  -
    question: >
      Which keyword is used by a class to incorporate a trait?
    answers:
      - { value: 'use', correct: true }
      - { value: 'implements', correct: false }
      - { value: 'extends', correct: false }
      - { value: 'include', correct: false }
    help: |
      Traits are included into classes using the `use` keyword.
      https://www.php.net/manual/en/language.oop5.traits.php#language.oop5.traits.usage
  -
    question: >
      What mechanism does PHP provide to resolve method name conflicts when a class uses multiple traits with methods of the same name?
    answers:
      - { value: 'The ''insteadof'' operator to explicitly choose which method to use.', correct: true }
      - { value: 'The ''as'' operator to alias one of the conflicting methods.', correct: true }
      - { value: 'PHP automatically resolves conflicts by prioritizing the last trait used.', correct: false }
      - { value: 'It throws a fatal error, requiring manual renaming in the traits.', correct: false }
    help: |
      PHP provides explicit control to resolve method name conflicts when using multiple traits, using `insteadof` and `as` operators.
      https://www.php.net/manual/en/language.oop5.traits.php#language.oop5.traits.conflict
  -
    question: >
      Can traits define properties in PHP?
    answers:
      - { value: 'Yes, traits can define properties (both public, protected, and private).', correct: true }
      - { value: 'No, traits can only define methods.', correct: false }
      - { value: 'Only static properties.', correct: false }
      - { value: 'Only if the properties are declared as constants.', correct: false }
    help: |
      Traits can define properties as well as methods.
      https://www.php.net/manual/en/language.oop5.traits.php#language.oop5.traits.properties
  -
    question: >
      What is the primary purpose of a trait in PHP?
    answers:
      - { value: 'To enable code reuse across unrelated class hierarchies in a language with single inheritance.', correct: true }
      - { value: 'To define a contract that classes must adhere to.', correct: false }
      - { value: 'To provide a base implementation that can be extended by child classes.', correct: false }
      - { value: 'To create singleton patterns easily.', correct: false }
    help: |
      Traits are a mechanism for code reuse in single inheritance languages like PHP.
      https://www.php.net/manual/en/language.oop5.traits.php#language.oop5.traits.purpose
  -
    question: >
      Which PHP extension is commonly used for encoding and decoding JSON data?
    answers:
      - { value: 'json', correct: true }
      - { value: 'xml', correct: false }
      - { value: 'dom', correct: false }
      - { value: 'pdo', correct: false }
    help: |
      The JSON extension provides functions to encode and decode data in JavaScript Object Notation (JSON) format.
      https://www.php.net/manual/en/book.json.php
  -
    question: >
      What is the primary purpose of the PDO (PHP Data Objects) extension?
    answers:
      - { value: 'To provide a lightweight, consistent interface for accessing databases in PHP.', correct: true }
      - { value: 'To parse XML documents.', correct: false }
      - { value: 'To perform image manipulation tasks.', correct: false }
      - { value: 'To handle network communication protocols.', correct: false }
    help: |
      PDO provides a data-access abstraction layer, which means that, regardless of which database you're using, you use the same functions to issue queries and fetch data.
      https://www.php.net/manual/en/book.pdo.php
  -
    question: >
      Which PHP extension is typically used for image manipulation tasks (e.g., resizing, watermarking, creating thumbnails)?
    answers:
      - { value: 'gd', correct: true }
      - { value: 'imagick', correct: false }
      - { value: 'exif', correct: false }
      - { value: 'zip', correct: false }
    help: |
      The GD library is most commonly used for creating and manipulating image files.
      https://www.php.net/manual/en/book.image.php
  -
    question: >
      What is the main benefit of enabling the Opcache extension in PHP?
    answers:
      - { value: 'It improves PHP performance by storing precompiled script bytecode in shared memory, avoiding recompilation on each request.', correct: true }
      - { value: 'It provides a mechanism for database connection pooling.', correct: false }
      - { value: 'It manages user sessions more efficiently.', correct: false }
      - { value: 'It enhances error logging capabilities.', correct: false }
    help: |
      OPcache improves PHP performance by storing precompiled script bytecode in shared memory, thereby removing the need for PHP to load and parse scripts on each request.
      https://www.php.net/manual/en/book.opcache.php
  -
    question: >
      For internationalization and localization tasks (e.g., date/number formatting, collation, character set conversions), which PHP extension is commonly used?
    answers:
      - { value: 'intl', correct: true }
      - { value: 'mbstring', correct: false }
      - { value: 'gettext', correct: false }
      - { value: 'iconv', correct: false }
    help: |
      The Internationalization extension (Intl) is a wrapper for the ICU library, enabling PHP programmers to perform various locale-aware operations.
      https://www.php.net/manual/en/book.intl.php
  -
    question: >
      Which SPL function is commonly used to register custom autoloading functions in PHP?
    answers:
      - { value: 'spl_autoload_register()', correct: true }
      - { value: '__autoload()', correct: false }
      - { value: 'class_autoload_register()', correct: false }
      - { value: 'register_autoload_function()', correct: false }
    help: |
      `spl_autoload_register()` registers the given function as an `__autoload()` implementation.
      https://www.php.net/manual/en/function.spl-autoload-register.php
  -
    question: >
      Which of the following are examples of data structures provided by the Standard PHP Library (SPL)?
    answers:
      - { value: 'SplStack', correct: true }
      - { value: 'SplQueue', correct: true }
      - { value: 'SplHeap', correct: true }
      - { value: 'SplArray', correct: false }
      - { value: 'SplList', correct: false }
    help: |
      SPL provides a set of interfaces and classes for common data structures like stacks, queues, heaps, and more.
      https://www.php.net/manual/en/book.spl.php
  -
    question: >
      What is the purpose of the `SplFileInfo` class in PHP?
    answers:
      - { value: 'To provide an object-oriented interface to information about a file or directory.', correct: true }
      - { value: 'To handle database connections.', correct: false }
      - { value: 'To manage HTTP requests and responses.', correct: false }
      - { value: 'To perform complex mathematical calculations.', correct: false }
    help: |
      The `SplFileInfo` class provides a high-level object-oriented interface to information about a file.
      https://www.php.net/manual/en/class.splfileinfo.php
  -
    question: >
      What is `SplObjectStorage` primarily used for in PHP?
    answers:
      - { value: 'To map objects to data or to store a set of unique objects.', correct: true }
      - { value: 'To store primitive data types efficiently.', correct: false }
      - { value: 'To manage object serialization and deserialization.', correct: false }
      - { value: 'To create a pool of reusable objects.', correct: false }
    help: |
      The `SplObjectStorage` class provides a way to map objects to data or to store a set of unique objects.
      https://www.php.net/manual/en/class.splobjectstorage.php
  -
    question: >
      Which SPL interface allows an object to be iterated over using the `foreach` construct?
    answers:
      - { value: 'Iterator', correct: true }
      - { value: 'Traversable', correct: false }
      - { value: 'ArrayAccess', correct: false }
      - { value: 'Countable', correct: false }
    help: |
      The `Iterator` interface is used to iterate over objects. Classes that implement this interface can be traversed using the `foreach` construct.
      https://www.php.net/manual/en/class.iterator.php
  -
    question: >
      Which of the following is a valid way to define a constant within a PHP class?
    answers:
      - { value: 'const MY_CONSTANT = ''value'';', correct: true }
      - { value: 'define(''MY_CONSTANT'', ''value'');', correct: false }
      - { value: 'public const MY_CONSTANT = ''value'';', correct: true }
      - { value: 'var MY_CONSTANT = ''value'';', correct: false }
    help: |
      Class constants are defined using the `const` keyword. They can be public, protected, or private since PHP 7.1.
      https://www.php.net/manual/en/language.oop5.constants.php
  -
    question: >
      What is the purpose of the `parent::` keyword in PHP?
    answers:
      - { value: 'To call a method or access a property from the parent class.', correct: true }
      - { value: 'To refer to the current class instance.', correct: false }
      - { value: 'To define a static method in the parent class.', correct: false }
      - { value: 'To access a global variable from within a class.', correct: false }
    help: |
      The `parent::` keyword is used to refer to the parent class, allowing you to call parent methods or access parent properties.
      https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php
  -
    question: >
      Consider the following PHP code:
      ```php
      class A {
          public function foo() {
              return "A";
          }
      }

      class B extends A {
          public function foo() {
              return "B";
          }
      }

      $obj = new B();
      echo $obj->foo();
      ```
      What will be the output of this code?
    answers:
      - { value: 'B', correct: true }
      - { value: 'A', correct: false }
      - { value: 'Fatal error', correct: false }
      - { value: 'Undefined method', correct: false }
    help: |
      When a method is overridden in a child class, the child class's implementation is called.
      https://www.php.net/manual/en/language.oop5.inheritance.php#language.oop5.inheritance.overriding
  -
    question: >
      Which of the following best describes the concept of "polymorphism" in object-oriented programming with PHP?
    answers:
      - { value: 'The ability of an object to take on many forms, typically through interface implementation or inheritance, allowing a single interface to represent different underlying forms.', correct: true }
      - { value: 'The bundling of data and methods that operate on the data within a single unit or class.', correct: false }
      - { value: 'The mechanism by which one class acquires the properties and behaviors of another class.', correct: false }
      - { value: 'The hiding of implementation details from the outside world.', correct: false }
    help: |
      Polymorphism allows objects of different classes to be treated as objects of a common type (e.g., an interface or parent class).
      https://www.php.net/manual/en/language.oop5.interfaces.php (as interfaces are a key aspect of polymorphism)
  -
    question: >
      Which PHP 8.0 feature allows you to define a property and assign constructor arguments to it in a single declaration?
    answers:
      - { value: 'Constructor Property Promotion', correct: true }
      - { value: 'Named Arguments', correct: false }
      - { value: 'Union Types', correct: false }
      - { value: 'Attributes', correct: false }
    help: |
      Constructor Property Promotion simplifies class definitions by allowing properties to be declared directly in the constructor signature.
      https://www.php.net/manual/en/language.oop5.decon.php#language.oop5.decon.constructor.promotion
  -
    question: >
      What is the purpose of the `__toString()` magic method in PHP?
    answers:
      - { value: 'To allow an object to be treated as a string, defining how it should be converted when used in a string context.', correct: true }
      - { value: 'To convert an object to an array.', correct: false }
      - { value: 'To define how an object should be serialized.', correct: false }
      - { value: 'To compare two objects for equality.', correct: false }
    help: |
      The `__toString()` method allows a class to decide how it will react when it is treated as a string.
      https://www.php.net/manual/en/language.oop5.magic.php#object.tostring
  -
    question: >
      Which of the following is a valid use case for PHP Attributes (introduced in PHP 8)?
    answers:
      - { value: 'Adding metadata to classes, methods, properties, or functions that can be read at runtime via Reflection.', correct: true }
      - { value: 'Defining new language keywords.', correct: false }
      - { value: 'Replacing traditional configuration files (e.g., YAML, XML).', correct: false }
      - { value: 'Creating new control structures (e.g., loops, conditionals).', correct: false }
    help: |
      Attributes provide a way to add structured, machine-readable metadata to declarations in code.
      https://www.php.net/manual/en/language.attributes.overview.php
  -
    question: >
      What is the main difference between `interface` and `trait` in PHP?
    answers:
      - { value: 'An `interface` defines a contract that a class must implement, while a `trait` provides a mechanism for code reuse by allowing classes to inherit methods and properties.', correct: true }
      - { value: 'An `interface` can have properties, while a `trait` cannot.', correct: false }
      - { value: 'A `trait` can be instantiated, while an `interface` cannot.', correct: false }
      - { value: 'An `interface` can contain concrete method implementations, while a `trait` cannot.', correct: false }
    help: |
      Interfaces define what a class must do, while traits define what a class can do.
      https://www.php.net/manual/en/language.oop5.interfaces.php
      https://www.php.net/manual/en/language.oop5.traits.php
  -
    question: >
      Which of the following PHP features allows you to define a class that cannot be instantiated directly but can serve as a base for other classes, potentially containing both abstract and concrete methods?
    answers:
      - { value: 'Abstract Class', correct: true }
      - { value: 'Interface', correct: false }
      - { value: 'Trait', correct: false }
      - { value: 'Final Class', correct: false }
    help: |
      Abstract classes are classes that cannot be instantiated directly and may contain abstract methods (methods declared but not implemented) that must be implemented by child classes.
      https://www.php.net/manual/en/language.oop5.abstract.php
  -
    question: >
      What is the correct way to declare a constant `MAX_USERS` with a value of `100` inside a class `Config`?
    answers:
      - { value: 'class Config { const MAX_USERS = 100; }', correct: true }
      - { value: 'class Config { public $MAX_USERS = 100; }', correct: false }
      - { value: 'class Config { define(''MAX_USERS'', 100); }', correct: false }
      - { value: 'class Config { var $MAX_USERS = 100; }', correct: false }
    help: |
      Class constants are defined using the `const` keyword.
      https://www.php.net/manual/en/language.oop5.constants.php
  -
    question: >
      Which of the following is NOT a valid magic method in PHP?
    answers:
      - { value: '__run()', correct: true }
      - { value: '__get()', correct: false }
      - { value: '__set()', correct: false }
      - { value: '__call()', correct: false }
      - { value: '__clone()', correct: false }
    help: |
      PHP has a set of predefined "magic methods" that are special methods that start with two underscores (`__`). `__run()` is not one of them.
      https://www.php.net/manual/en/language.oop5.magic.php
  -
    question: >
      What is the purpose of the `static::` keyword (Late Static Bindings) in PHP?
    answers:
      - { value: 'To refer to the called class in a static context, allowing for more flexible inheritance.', correct: true }
      - { value: 'To refer to the parent class in a static context.', correct: false }
      - { value: 'To define a static property that can be overridden by child classes.', correct: false }
      - { value: 'To ensure a method is always called statically.', correct: false }
    help: |
      `static::` refers to the class to which the method was originally called, even if it's inherited. This is known as Late Static Bindings.
      https://www.php.net/manual/en/language.oop5.late-static-bindings.php
  -
    question: >
      Which PHP 8.1 feature allows you to declare class properties that can only be assigned once?
    answers:
      - { value: 'Readonly Properties', correct: true }
      - { value: 'Immutable Properties', correct: false }
      - { value: 'Final Properties', correct: false }
      - { value: 'Const Properties', correct: false }
    help: |
      Readonly properties, introduced in PHP 8.1, can only be initialized once, either at declaration or in the constructor.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly
  -
    question: >
      What is the correct way to catch multiple types of exceptions in a single `catch` block in PHP 7.1+?
    answers:
      - { value: 'catch (MyException | AnotherException $e) { /* handle */ }', correct: true }
      - { value: 'catch (MyException, AnotherException $e) { /* handle */ }', correct: false }
      - { value: 'catch (MyException and AnotherException $e) { /* handle */ }', correct: false }
      - { value: 'catch (array $e) { /* handle */ }', correct: false }
    help: |
      Since PHP 7.1, a single `catch` block can catch multiple exceptions using the `|` (bitwise OR) operator.
      https://www.php.net/manual/en/language.exceptions.php#language.exceptions.multiple
  -
    question: >
      Which SPL class provides an object-oriented way to iterate over directories?
    answers:
      - { value: 'DirectoryIterator', correct: true }
      - { value: 'FileIterator', correct: false }
      - { value: 'PathIterator', correct: false }
      - { value: 'SplDir', correct: false }
    help: |
      The `DirectoryIterator` class provides a simple way to iterate over the contents of a directory.
      https://www.php.net/manual/en/class.directoryiterator.php
  -
    question: >
      What is the purpose of the `__invoke()` magic method in PHP?
    answers:
      - { value: 'It allows an object to be called as a function.', correct: true }
      - { value: 'It is called when an object is cloned.', correct: false }
      - { value: 'It is called when an object is serialized.', correct: false }
      - { value: 'It is called when an undefined method is accessed.', correct: false }
    help: |
      The `__invoke()` method is called when a script tries to call an object as a function.
      https://www.php.net/manual/en/language.oop5.magic.php#object.invoke
  -
    question: >
      Which of the following is true about PHP 8.2's new `readonly` classes?
    answers:
      - { value: 'All properties of a `readonly` class are automatically `readonly`.', correct: true }
      - { value: '`readonly` classes can be extended by non-`readonly` classes.', correct: false }
      - { value: '`readonly` classes can have dynamic properties.', correct: false }
      - { value: '`readonly` classes can have static properties that are not `readonly`.', correct: false }
    help: |
      In PHP 8.2, `readonly` classes ensure all properties are `readonly` and prevent dynamic properties.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly-classes
  -
    question: >
      What is the correct way to check if a class `MyClass` exists in PHP?
    answers:
      - { value: 'class_exists(''MyClass'')', correct: true }
      - { value: 'isset(MyClass)', correct: false }
      - { value: 'MyClass::exists()', correct: false }
      - { value: 'is_class(''MyClass'')', correct: false }
    help: |
      The `class_exists()` function checks whether the given class has been defined.
      https://www.php.net/manual/en/function.class-exists.php
  -
    question: >
      Which PHP built-in interface should a class implement to allow its objects to be accessed as arrays (e.g., `$obj['key']`)?
    answers:
      - { value: 'ArrayAccess', correct: true }
      - { value: 'Iterator', correct: false }
      - { value: 'Countable', correct: false }
      - { value: 'Serializable', correct: false }
    help: |
      The `ArrayAccess` interface allows objects to work as arrays.
      https://www.php.net/manual/en/class.arrayaccess.php
  -
    question: >
      What is the purpose of the `ReflectionClass` in PHP?
    answers:
      - { value: 'To retrieve information about a class, its methods, and properties at runtime.', correct: true }
      - { value: 'To create new instances of a class dynamically.', correct: false }
      - { value: 'To modify the structure of a class at runtime.', correct: false }
      - { value: 'To serialize and deserialize class objects.', correct: false }
    help: |
      The `ReflectionClass` class reports information about a class.
      https://www.php.net/manual/en/class.reflectionclass.php
  -
    question: >
      Which of the following is a key advantage of using type declarations (type hints) in PHP 7+?
    answers:
      - { value: 'Improved code readability and maintainability.', correct: true }
      - { value: 'Automatic type conversion for all variables.', correct: false }
      - { value: 'Faster script execution due to compile-time type checking.', correct: false }
      - { value: 'Elimination of all runtime errors.', correct: false }
    help: |
      Type declarations help ensure that code receives the expected types, leading to more robust and readable code.
      https://www.php.net/manual/en/language.types.declarations.php
  -
    question: >
      What is the difference between `throw new Exception()` and `trigger_error()` in PHP?
    answers:
      - { value: '`throw new Exception()` creates an object that can be caught and handled, representing an exceptional condition, while `trigger_error()` generates a PHP error message that can be caught by an error handler but typically halts execution if not handled.', correct: true }
      - { value: '`trigger_error()` is for fatal errors only, while `Exception` is for warnings.', correct: false }
      - { value: '`Exception` is deprecated in PHP 8, and `trigger_error()` should be used instead.', correct: false }
      - { value: 'They are interchangeable and serve the same purpose.', correct: false }
    help: |
      Exceptions are part of structured error handling, allowing for graceful recovery. `trigger_error()` is for generating user-level errors, warnings, or notices.
      https://www.php.net/manual/en/language.exceptions.php
      https://www.php.net/manual/en/function.trigger-error.php
  -
    question: >
      Which PHP extension is essential for working with multi-byte strings (e.g., UTF-8) to avoid issues with character encoding?
    answers:
      - { value: 'mbstring', correct: true }
      - { value: 'iconv', correct: false }
      - { value: 'intl', correct: false }
      - { value: 'xml', correct: false }
    help: |
      The `mbstring` extension provides multi-byte specific string functions that help you deal with multi-byte encodings in PHP.
      https://www.php.net/manual/en/book.mbstring.php
  -
    question: >
      What is the primary benefit of using `declare(strict_types=1);` at the top of a PHP file?
    answers:
      - { value: 'It enables strict type checking for scalar type declarations, preventing PHP from coercing types.', correct: true }
      - { value: 'It enforces strict mode for all PHP functions.', correct: false }
      - { value: 'It disables all error reporting.', correct: false }
      - { value: 'It makes all variables strictly typed.', correct: false }
    help: |
      `declare(strict_types=1);` enables strict mode for scalar type declarations within that file.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.strict
  -
    question: >
      Which SPL class provides a standard interface for objects that can be counted (e.g., by using `count()` function)?
    answers:
      - { value: 'Countable', correct: true }
      - { value: 'Sizable', correct: false }
      - { value: 'Measurable', correct: false }
      - { value: 'SplCount', correct: false }
    help: |
      The `Countable` interface is implemented by classes that can be counted using the `count()` function.
      https://www.php.net/manual/en/class.countable.php
  -
    question: >
      What is the purpose of the `__debugInfo()` magic method in PHP?
    answers:
      - { value: 'To customize the information shown when an object is dumped (e.g., with `var_dump()` or Symfony''s `dump()`).', correct: true }
      - { value: 'To log debug messages to a file.', correct: false }
      - { value: 'To define how an object should be converted to JSON for debugging.', correct: false }
      - { value: 'To enable step-by-step debugging of an object.', correct: false }
    help: |
      This magic method is called when `var_dump()` is invoked on an object to get the properties that should be shown.
      https://www.php.net/manual/en/language.oop5.magic.php#object.debuginfo
  -
    question: >
      Consider the following code snippet:
      ```php
      namespace MyNamespace;

      class MyClass {
          public function __construct() {
              echo "MyClass instantiated.";
          }
      }

      function createInstance() {
          new MyClass();
      }

      createInstance();
      ```
      What will be the output of this code?
    answers:
      - { value: 'Fatal error: Class "MyClass" not found', correct: true }
      - { value: 'MyClass instantiated.', correct: false }
      - { value: 'Parse error', correct: false }
      - { value: 'Warning: Undefined class MyClass', correct: false }
    help: |
      When calling `new MyClass()` from within the global namespace (as `createInstance()` is), PHP looks for `\MyClass`, not `\MyNamespace\MyClass`. To fix this, you would need `new \MyNamespace\MyClass();` or `use MyNamespace\MyClass;` within the global scope before calling `createInstance()`.
      https://www.php.net/manual/en/language.namespaces.basics.php
  -
    question: >
      Which of the following describes a "trait" in PHP?
    answers:
      - { value: 'A mechanism for code reuse in single inheritance languages, allowing a class to use methods and properties from multiple traits.', correct: true }
      - { value: 'A class that cannot be instantiated and must be extended.', correct: false }
      - { value: 'A contract that specifies methods a class must implement.', correct: false }
      - { value: 'A way to define global utility functions.', correct: false }
    help: |
      Traits are a mechanism for code reuse in single inheritance languages such as PHP. A Trait is intended to reduce limitations of single inheritance by enabling a developer to reuse sets of methods freely in several independent classes.
      https://www.php.net/manual/en/language.oop5.traits.php
  -
    question: >
      What is the purpose of the `__sleep()` and `__wakeup()` magic methods in PHP?
    answers:
      - { value: '`__sleep()` is called before serialization, and `__wakeup()` is called after deserialization, allowing for cleanup or re-establishment of resources.', correct: true }
      - { value: '`__sleep()` is for pausing script execution, and `__wakeup()` is for resuming it.', correct: false }
      - { value: 'They are used for asynchronous programming.', correct: false }
      - { value: 'They control object lifecycle within a database transaction.', correct: false }
    help: |
      `__sleep()` is called prior to serialization. `__wakeup()` is called when an object is deserialized.
      https://www.php.net/manual/en/language.oop5.magic.php#object.sleep
      https://www.php.net/manual/en/language.oop5.magic.php#object.wakeup
  -
    question: >
      Which PHP 8.0 feature allows you to define a specific type for a function's return value?
    answers:
      - { value: 'Return Type Declarations', correct: true }
      - { value: 'Union Types', correct: false }
      - { value: 'Mixed Type', correct: false }
      - { value: 'Type Hinting', correct: false }
    help: |
      Return type declarations specify the type of the value that will be returned from a function.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.return
  -
    question: >
      What is the significance of the `Throwable` interface in PHP 7 and later?
    answers:
      - { value: 'It is the base interface for all objects that can be thrown via the `throw` statement, including `Exception` and `Error`.', correct: true }
      - { value: 'It is an interface that only `Error` classes implement, not `Exception` classes.', correct: false }
      - { value: 'It allows any object to be caught by a `try...catch` block without implementing `Exception`.', correct: false }
      - { value: 'It is used for type hinting only and cannot be thrown.', correct: false }
    help: |
      The `Throwable` interface is the base interface for any object that can be thrown via the `throw` statement.
      https://www.php.net/manual/en/class.throwable.php
  -
    question: >
      Which of the following is an example of a PHP built-in SPL iterator?
    answers:
      - { value: 'ArrayIterator', correct: true }
      - { value: 'ObjectIterator', correct: false }
      - { value: 'StringIterator', correct: false }
      - { value: 'ResourceIterator', correct: false }
    help: |
      `ArrayIterator` allows to iterate over PHP arrays and objects.
      https://www.php.net/manual/en/class.arrayiterator.php
  -
    question: >
      What is the purpose of the `use function` and `use const` statements in PHP?
    answers:
      - { value: 'To import functions and constants from other namespaces, allowing them to be used without their fully qualified names.', correct: true }
      - { value: 'To define new functions and constants within the current namespace.', correct: false }
      - { value: 'To declare global functions and constants.', correct: false }
      - { value: 'To make functions and constants available only within a specific class.', correct: false }
    help: |
      The `use function` and `use const` statements are used to import functions and constants, respectively, into the current file scope.
      https://www.php.net/manual/en/language.namespaces.importing.php#language.namespaces.importing.functions
      https://www.php.net/manual/en/language.namespaces.importing.php#language.namespaces.importing.constants
  -
    question: >
      Which PHP 8.0 feature allows you to specify that a parameter can accept values of different types (e.g., `string|int`)?
    answers:
      - { value: 'Union Types', correct: true }
      - { value: 'Intersection Types', correct: false }
      - { value: 'Mixed Type', correct: false }
      - { value: 'Generics', correct: false }
    help: |
      Union Types allow you to declare that a variable can accept values of different types.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.union
  -
    question: >
      What is the purpose of the `__clone()` magic method in PHP?
    answers:
      - { value: 'It is called when an object is duplicated using the `clone` keyword, allowing for custom copy behavior.', correct: true }
      - { value: 'It creates a new instance of the class without calling the constructor.', correct: false }
      - { value: 'It is used to serialize an object.', correct: false }
      - { value: 'It defines how an object should be converted to an array.', correct: false }
    help: |
      When an object is cloned, PHP will perform a shallow copy of all of the object's properties. If the `__clone()` method is defined, then the new object's `__clone()` method will be called.
      https://www.php.net/manual/en/language.oop5.magic.php#object.clone
  -
    question: >
      Which of the following is a valid way to define an anonymous class in PHP?
    answers:
      - { value: '$object = new class {};', correct: true }
      - { value: '$object = anonymous class {};', correct: false }
      - { value: '$object = class {};', correct: false }
      - { value: '$object = new AnonymousClass();', correct: false }
    help: |
      Anonymous classes are classes that are not named. They are defined using `new class`.
      https://www.php.net/manual/en/language.oop5.anonymous.php
  -
    question: >
      What is the primary use case for the `SplDoublyLinkedList` class in SPL?
    answers:
      - { value: 'Implementing a double-ended queue or a stack.', correct: true }
      - { value: 'Storing key-value pairs with fast lookups.', correct: false }
      - { value: 'Representing a tree structure.', correct: false }
      - { value: 'Efficiently sorting large datasets.', correct: false }
    help: |
      `SplDoublyLinkedList` provides the functionalities of a Doubly Linked List. It can be used as a stack or a queue.
      https://www.php.net/manual/en/class.spldoublylinkedlist.php
  -
    question: >
      Which PHP 8.1 feature allows you to define a class that cannot be extended by other classes?
    answers:
      - { value: 'Final Class', correct: true }
      - { value: 'Abstract Class', correct: false }
      - { value: 'Sealed Class', correct: false }
      - { value: 'Static Class', correct: false }
    help: |
      A class declared as `final` cannot be extended.
      https://www.php.net/manual/en/language.oop5.final.php
  -
    question: >
      What is the purpose of the `yield` keyword in PHP?
    answers:
      - { value: 'To create a generator function, allowing iteration over a set of data without building an array in memory.', correct: true }
      - { value: 'To return a value from a function and immediately exit.', correct: false }
      - { value: 'To include an external file.', correct: false }
      - { value: 'To define a new variable.', correct: false }
    help: |
      The `yield` keyword is used to create generator functions, which allow you to write iterable code without the overhead of building an entire array in memory.
      https://www.php.net/manual/en/language.generators.overview.php
  -
    question: >
      Which PHP extension provides cryptographic functionalities, including hashing, encryption, and decryption?
    answers:
      - { value: 'OpenSSL', correct: true }
      - { value: 'Hash', correct: false }
      - { value: 'Crypto', correct: false }
      - { value: 'Mcrypt (deprecated)', correct: false }
    help: |
      The OpenSSL extension offers a wide range of cryptographic functions.
      https://www.php.net/manual/en/book.openssl.php
  -
    question: >
      What is the purpose of the `__serialize()` and `__unserialize()` magic methods (PHP 7.4+)?
    answers:
      - { value: 'They provide a more robust and flexible alternative to `__sleep()` and `__wakeup()` for custom serialization logic.', correct: true }
      - { value: 'They are used for converting objects to JSON and back.', correct: false }
      - { value: 'They define how objects interact with database serialization.', correct: false }
      - { value: 'They are called when an object is passed by reference.', correct: false }
    help: |
      `__serialize()` and `__unserialize()` were introduced in PHP 7.4 as a more robust and flexible alternative to `__sleep()` and `__wakeup()`.
      https://www.php.net/manual/en/language.oop5.magic.php#object.serialize
      https://www.php.net/manual/en/language.oop5.magic.php#object.unserialize
  -
    question: >
      Which of the following is a key characteristic of PHP 8.0's `match` expression compared to a `switch` statement?
    answers:
      - { value: '`match` is an expression and returns a value, while `switch` is a statement and does not.', correct: true }
      - { value: '`match` uses loose comparison by default, while `switch` uses strict comparison.', correct: false }
      - { value: '`match` requires explicit `break` statements, while `switch` does not.', correct: false }
      - { value: '`match` can only compare against string values, while `switch` can use any type.', correct: false }
    help: |
      The `match` expression is similar to `switch` statements but has key differences, including being an expression that returns a value and using strict comparison.
      https://www.php.net/manual/en/control-structures.match.php
  -
    question: >
      What is the purpose of the `ReflectionFunction` class in PHP?
    answers:
      - { value: 'To retrieve information about a function (parameters, return type, etc.) at runtime.', correct: true }
      - { value: 'To execute a function dynamically.', correct: false }
      - { value: 'To create new functions at runtime.', correct: false }
      - { value: 'To analyze the performance of a function.', correct: false }
    help: |
      The `ReflectionFunction` class reports information about a function.
      https://www.php.net/manual/en/class.reflectionfunction.php
  -
    question: >
      Which PHP 8.1 feature allows you to define a property that can only be set once, typically in the constructor, and then becomes immutable?
    answers:
      - { value: 'Readonly properties', correct: true }
      - { value: 'Immutable properties', correct: false }
      - { value: 'Const properties', correct: false }
      - { value: 'Final properties', correct: false }
    help: |
      Readonly properties, introduced in PHP 8.1, can only be initialized once.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly
  -
    question: >
      What is the purpose of the `SplFileObject` class in SPL?
    answers:
      - { value: 'To provide an object-oriented interface for file operations (reading, writing, seeking).', correct: true }
      - { value: 'To manage file permissions.', correct: false }
      - { value: 'To compress and decompress files.', correct: false }
      - { value: 'To handle file uploads.', correct: false }
    help: |
      The `SplFileObject` class provides an object-oriented interface for a file.
      https://www.php.net/manual/en/class.splfileobject.php
  -
    question: >
      Which of the following best describes "Encapsulation" in OOP with PHP?
    answers:
      - { value: 'The bundling of data (properties) and methods that operate on the data within a single unit (class), and restricting direct access to some of the object''s components.', correct: true }
      - { value: 'The ability of an object to take on many forms.', correct: false }
      - { value: 'The process of creating new objects from existing classes.', correct: false }
      - { value: 'The mechanism of inheriting properties and behaviors from a parent class.', correct: false }
    help: |
      Encapsulation is the practice of bundling data and the methods that operate on that data within a single unit, and restricting direct access to some of the object's components.
      https://www.php.net/manual/en/language.oop5.basic.php (general OOP concept)