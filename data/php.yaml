category: PHP

questions:
  -
    question: >
      Which of the following best describes the purpose of a `final` class in PHP?
    answers:
      - { value: 'A class that cannot be instantiated.', correct: false }
      - { value: 'A class whose methods cannot be overridden by child classes.', correct: false }
      - { value: 'A class that cannot be extended by any other class.', correct: true }
      - { value: 'A class that must implement all methods from its interfaces.', correct: false }
    help: |
      A `final` class cannot be inherited from. This is useful when you want to prevent further modification of a class's structure.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: |
      Consider the following PHP code snippet:

      ```php
      <?php
      class MyClass {
          public function __construct() {
              echo "Constructor called.";
          }
          public function __destruct() {
              echo "Destructor called.";
          }
      }

      $obj = new MyClass();
      unset($obj);
      ?>
      ```
      What will be the output of this script?
    answers:
      - { value: 'Constructor called.Destructor called.', correct: true }
      - { value: 'Constructor called.', correct: false }
      - { value: 'Destructor called.Constructor called.', correct: false }
      - { value: 'No output, as `unset` prevents destructor execution.', correct: false }
    help: |
      The constructor `__construct()` is called when an object is created. The destructor `__destruct()` is called when all references to an object are removed or when the script ends. `unset()` explicitly removes a reference, triggering the destructor.
      https://www.php.net/manual/en/language.oop5.decon.php

  -
    question: >
      In PHP, what is the primary difference between an `abstract` class and an `interface`?
    answers:
      - { value: 'An abstract class can have properties, while an interface cannot.', correct: true }
      - { value: 'An interface can define method implementations, while an abstract class cannot.', correct: false }
      - { value: 'A class can implement multiple abstract classes, but only one interface.', correct: false }
      - { value: 'Abstract classes are used for type hinting, interfaces are not.', correct: false }
    help: |
      Abstract classes can have properties, abstract methods, and concrete methods with implementations. Interfaces can only declare methods (and constants in PHP 8.1+), but not implement them, nor can they have properties. A class can extend only one abstract class but implement multiple interfaces.
      https://www.php.net/manual/en/language.oop5.abstract.php
      https://www.php.net/manual/en/language.oop5.interfaces.php

  -
    question: |
      Which PHP 8.0 feature allows for a more concise way to define class properties directly in the constructor?
    answers:
      - { value: 'Property Promotion', correct: true }
      - { value: 'Constructor Overloading', correct: false }
      - { value: 'Named Arguments', correct: false }
      - { value: 'Union Types', correct: false }
    help: |
      PHP 8.0 introduced Constructor Property Promotion, allowing properties to be declared and initialized directly within the constructor's parameter list, reducing boilerplate code.
      https://www.php.net/manual/en/language.oop5.decon.php#language.oop5.decon.constructor.promotion

  -
    question: >
      What is the correct way to define a constant within a PHP class?
    answers:
      - { value: '`const MY_CONSTANT = "value";`', correct: true }
      - { value: '`define("MY_CONSTANT", "value");`', correct: false }
      - { value: '`public $MY_CONSTANT = "value";`', correct: false }
      - { value: '`static $MY_CONSTANT = "value";`', correct: false }
    help: |
      Class constants are defined using the `const` keyword inside the class definition. They are accessed using the class name and the scope resolution operator (`::`).
      https://www.php.net/manual/en/language.oop5.constants.php

  -
    question: |
      Which of the following is true about `static` methods in PHP?
    answers:
      - { value: 'They can access non-static properties of the class using `$this`.', correct: false }
      - { value: 'They are called on the class itself, not on an object instance.', correct: true }
      - { value: 'They must be declared `public`.', correct: false }
      - { value: 'They cannot be overridden by child classes.', correct: false }
    help: |
      Static methods are associated with the class, not with any specific instance of the class. They are called using the class name and the scope resolution operator (`::`). They cannot access non-static properties or methods using `$this`.
      https://www.php.net/manual/en/language.oop5.static.php

  -
    question: >
      What is the purpose of the `use` keyword when working with traits in PHP?
    answers:
      - { value: 'To import a namespace into the current file.', correct: false }
      - { value: 'To include external PHP files.', correct: false }
      - { value: 'To incorporate methods and properties from a trait into a class.', correct: true }
      - { value: 'To define an alias for a class.', correct: false }
    help: |
      The `use` keyword within a class definition is used to include one or more traits, effectively copying their methods and properties into the class.
      https://www.php.net/manual/en/language.oop5.traits.php

  -
    question: |
      Given the following code, which line will cause a fatal error?

      ```php
      <?php
      class A {
          private $prop = 'A';
      }

      class B extends A {
          public function getProp() {
              return $this->prop; // Line X
          }
      }

      $obj = new B();
      echo $obj->getProp();
      ?>
      ```
    answers:
      - { value: '`$obj = new B();`', correct: false }
      - { value: '`echo $obj->getProp();`', correct: false }
      - { value: '`return $this->prop;` (Line X)', correct: true }
      - { value: '`class B extends A {`', correct: false }
    help: |
      Private properties and methods are only accessible from within the class where they are defined. A child class cannot directly access private members of its parent class.
      https://www.php.net/manual/en/language.oop5.visibility.php

  -
    question: >
      Which magic method in PHP is automatically called when an object is treated as a string?
    answers:
      - { value: '`__toString()`', correct: true }
      - { value: '`__invoke()`', correct: false }
      - { value: '`__call()`', correct: false }
      - { value: '`__debugInfo()`', correct: false }
    help: |
      The `__toString()` method allows a class to decide how it will react when it is treated as a string. For example, what `echo $obj;` will print.
      https://www.php.net/manual/en/language.oop5.magic.php#object.tostring

  -
    question: |
      What is the purpose of the `self` keyword in PHP OOP?
    answers:
      - { value: 'To refer to the current object instance.', correct: false }
      - { value: 'To refer to the parent class.', correct: false }
      - { value: 'To refer to the current class itself (for static members or constants).', correct: true }
      - { value: 'To refer to the child class.', correct: false }
    help: |
      `self` is used to refer to static members (properties or methods) or constants of the current class. It does not refer to the current object instance, for which `$this` is used.
      https://www.php.net/manual/en/language.oop5.basic.php#language.oop5.basic.class.static

  -
    question: >
      Which of the following is a valid way to define a namespace in PHP?
    answers:
      - { value: '`namespace App\\Controller;`', correct: true }
      - { value: '`use App\\Controller;`', correct: false }
      - { value: '`namespace App/Controller;`', correct: false }
      - { value: '`namespace App::Controller;`', correct: false }
    help: |
      Namespaces are declared using the `namespace` keyword, followed by the namespace name, which uses backslashes (`\`) as separators.
      https://www.php.net/manual/en/language.namespaces.definition.php

  -
    question: |
      Given the following directory structure and file content:

      ```
      src/
      ├── Controller/
      │   └── HomeController.php
      └── Service/
          └── UserService.php
      ```

      `src/Controller/HomeController.php`:
      ```php
      <?php
      namespace App\Controller;

      use App\Service\UserService; // Line X

      class HomeController
      {
          public function index(UserService $userService) {
              // ...
          }
      }
      ```

      `src/Service/UserService.php`:
      ```php
      <?php
      namespace App\Service;

      class UserService
      {
          // ...
      }
      ```
      What is the purpose of `use App\Service\UserService;` (Line X)?
    answers:
      - { value: 'To include the `UserService.php` file.', correct: false }
      - { value: 'To create an alias for the `UserService` class.', correct: false }
      - { value: 'To import the `UserService` class into the current namespace for easier referencing.', correct: true }
      - { value: 'To define a new namespace.', correct: false }
    help: |
      The `use` declaration is used to import a fully qualified name (class, interface, trait, or function/constant in PHP 5.6+) into the current namespace, allowing it to be referenced by its unqualified name. It does not include the file itself; that's handled by an autoloader.
      https://www.php.net/manual/en/language.namespaces.importing.php

  -
    question: >
      Which PHP feature allows you to group related classes, interfaces, functions, and constants under a unique name to prevent naming collisions?
    answers:
      - { value: 'Traits', correct: false }
      - { value: 'Namespaces', correct: true }
      - { value: 'Packages', correct: false }
      - { value: 'Modules', correct: false }
    help: |
      Namespaces are a way of encapsulating items. This creates a naming system that prevents name collisions between different components or libraries.
      https://www.php.net/manual/en/language.namespaces.php

  -
    question: |
      What is the correct way to access a global constant `APP_VERSION` defined in the global namespace from within a namespaced class?
    answers:
      - { value: '`\APP_VERSION`', correct: true }
      - { value: '`APP_VERSION`', correct: false }
      - { value: '`self::APP_VERSION`', correct: false }
      - { value: '`$this->APP_VERSION`', correct: false }
    help: |
      To access global constants, functions, or classes from within a namespaced code, you must prefix them with a backslash (`\`) to refer to the global namespace.
      https://www.php.net/manual/en/language.namespaces.global.php

  -
    question: >
      Which of the following is NOT a valid type of namespace declaration in PHP?
    answers:
      - { value: 'Single file namespace declaration', correct: false }
      - { value: 'Multiple namespace declaration in a single file', correct: false }
      - { value: 'Bracketed namespace declaration', correct: false }
      - { value: 'Inline namespace declaration', correct: true }
    help: |
      PHP supports two forms of namespace declaration: single file (non-bracketed) and multiple namespaces (bracketed) within the same file. "Inline" is not a recognized type.
      https://www.php.net/manual/en/language.namespaces.definition.php

  -
    question: >
      What is the primary purpose of an `interface` in PHP?
    answers:
      - { value: 'To define a blueprint for classes, specifying methods that implementing classes must provide.', correct: true }
      - { value: 'To provide a base class with common functionality for child classes.', correct: false }
      - { value: 'To encapsulate data and behavior into a single unit.', correct: false }
      - { value: 'To allow multiple inheritance in PHP.', correct: false }
    help: |
      Interfaces define a contract for classes. They specify which methods a class must implement, without providing any implementation details. This promotes polymorphism and ensures certain behaviors.
      https://www.php.net/manual/en/language.oop5.interfaces.php

  -
    question: |
      Given the following interface:

      ```php
      <?php
      interface LoggerInterface {
          public function log(string $message);
      }
      ```
      Which of the following class definitions correctly implements `LoggerInterface`?
    answers:
      - { value: '```php
class FileLogger implements LoggerInterface {
    public function log(string $message) { /* ... */ }
}
```', correct: true }
      - { value: '```php
class DatabaseLogger extends LoggerInterface {
    public function log(string $message) { /* ... */ }
}
```', correct: false }
      - { value: '```php
class ConsoleLogger implements LoggerInterface {
    private function log(string $message) { /* ... */ }
}
```', correct: false }
      - { value: '```php
class NullLogger implements LoggerInterface {
    public function write(string $message) { /* ... */ }
}
```', correct: false }
    help: |
      A class implements an interface using the `implements` keyword. All methods declared in the interface must be implemented in the class with the same visibility and signature (or compatible signature in PHP 8+).
      https://www.php.net/manual/en/language.oop5.interfaces.php

  -
    question: >
      Can an interface define properties (member variables) in PHP?
    answers:
      - { value: 'Yes, but only public properties.', correct: false }
      - { value: 'No, interfaces can only define method signatures and constants.', correct: true }
      - { value: 'Yes, but only static properties.', correct: false }
      - { value: 'Yes, but they must be initialized.', correct: false }
    help: |
      Interfaces in PHP cannot define properties. They are strictly for defining method signatures and constants (since PHP 8.1).
      https://www.php.net/manual/en/language.oop5.interfaces.php

  -
    question: >
      What happens if a class implements an interface but fails to implement all of its methods?
    answers:
      - { value: 'A warning is issued, but the script continues.', correct: false }
      - { value: 'A fatal error is triggered, preventing script execution.', correct: true }
      - { value: 'The unimplemented methods are automatically made abstract.', correct: false }
      - { value: 'The class becomes an abstract class automatically.', correct: false }
    help: |
      If a class implements an interface, it must implement all methods declared in that interface. Failing to do so will result in a fatal error, unless the class itself is declared `abstract`.
      https://www.php.net/manual/en/language.oop5.interfaces.php

  -
    question: >
      Which PHP version introduced the ability for interfaces to define constants?
    answers:
      - { value: 'PHP 5.3', correct: false }
      - { value: 'PHP 7.0', correct: false }
      - { value: 'PHP 8.1', correct: true }
      - { value: 'PHP 8.2', correct: false }
    help: |
      Prior to PHP 8.1, interfaces could only define method signatures. PHP 8.1 introduced the ability to define constants within interfaces.
      https://www.php.net/manual/en/language.oop5.interfaces.php#language.oop5.interfaces.constants

  -
    question: >
      What is an anonymous function in PHP?
    answers:
      - { value: 'A function that does not have a name and can be assigned to a variable.', correct: true }
      - { value: 'A function that is automatically executed without being called.', correct: false }
      - { value: 'A function defined inside another function.', correct: false }
      - { value: 'A function that cannot accept arguments.', correct: false }
    help: |
      Anonymous functions (also known as closures) are functions that do not have a specified name. They can be assigned to a variable and passed as arguments to other functions.
      https://www.php.net/manual/en/functions.anonymous.php

  -
    question: |
      Given the following code:

      ```php
      <?php
      $message = 'Hello';

      $greet = function () use ($message) {
          echo $message;
      };

      $message = 'World';
      $greet();
      ?>
      ```
      What will be the output?
    answers:
      - { value: 'Hello', correct: true }
      - { value: 'World', correct: false }
      - { value: 'Hello World', correct: false }
      - { value: 'An error, as `$message` is not passed by reference.', correct: false }
    help: |
      When a variable is imported into a closure using `use ($variable)`, it is imported by value at the time the closure is defined. Subsequent changes to the original variable outside the closure will not affect the value inside the closure, unless it's passed by reference (`use (&$variable)`).
      https://www.php.net/manual/en/functions.anonymous.php#example-263

  -
    question: >
      Which keyword is used to import variables from the parent scope into an anonymous function's scope?
    answers:
      - { value: '`global`', correct: false }
      - { value: '`import`', correct: false }
      - { value: '`use`', correct: true }
      - { value: '`with`', correct: false }
    help: |
      The `use` keyword is used with anonymous functions to import variables from the scope in which the anonymous function is defined into the anonymous function's scope.
      https://www.php.net/manual/en/functions.anonymous.php

  -
    question: |
      What is a "closure" in PHP, in the context of anonymous functions?
    answers:
      - { value: 'An anonymous function that has access to variables from the scope in which it was created.', correct: true }
      - { value: 'A function that automatically closes a database connection.', correct: false }
      - { value: 'A function that cannot be modified after its creation.', correct: false }
      - { value: 'A function that returns another function.', correct: false }
    help: |
      In PHP, anonymous functions are implemented as objects of the `Closure` class. A closure is an anonymous function that can access variables from its surrounding scope (the scope in which it was defined) even after that scope has ceased to exist.
      https://www.php.net/manual/en/class.closure.php

  -
    question: >
      Which of the following is a valid way to define an anonymous function that can be called immediately (IIFE - Immediately Invoked Function Expression)?
    answers:
      - { value: '```php
(function() { echo "Hello"; })();
```', correct: true }
      - { value: '```php
function() { echo "Hello"; }();
```', correct: false }
      - { value: '```php
$func = function() { echo "Hello"; }; $func();
```', correct: false }
      - { value: '```php
(new class { public function __invoke() { echo "Hello"; } })();
```', correct: false }
    help: |
      Anonymous functions can be immediately invoked by wrapping the function definition in parentheses and then adding `()` to call it.
      https://www.php.net/manual/en/functions.anonymous.php

  -
    question: >
      What is the main characteristic of an `abstract` class in PHP?
    answers:
      - { value: 'It cannot have any concrete (implemented) methods.', correct: false }
      - { value: 'It must be extended by at least one child class.', correct: false }
      - { value: 'It cannot be instantiated directly.', correct: true }
      - { value: 'All its methods must be declared `public`.', correct: false }
    help: |
      Abstract classes cannot be instantiated on their own. They serve as templates for other classes and can contain both abstract methods (without implementation) and concrete methods (with implementation).
      https://www.php.net/manual/en/language.oop5.abstract.php

  -
    question: |
      Given the following abstract class:

      ```php
      <?php
      abstract class Vehicle {
          public $speed;

          public function __construct($speed) {
              $this->speed = $speed;
          }

          abstract public function accelerate();
          public function getSpeed() {
              return $this->speed;
          }
      }
      ```
      Which of the following concrete classes correctly extends `Vehicle`?
    answers:
      - { value: '```php
class Car extends Vehicle {
    public function accelerate() {
        $this->speed += 10;
    }
}
```', correct: true }
      - { value: '```php
class Bicycle extends Vehicle {
    // Missing accelerate() implementation
}
```', correct: false }
      - { value: '```php
abstract class Truck extends Vehicle {
    // No implementation needed for abstract class
}
```', correct: false }
      - { value: '```php
class Plane implements Vehicle {
    public function accelerate() { /* ... */ }
}
```', correct: false }
    help: |
      A concrete class extending an abstract class must implement all abstract methods declared in the parent abstract class. If it doesn't, it must also be declared abstract.
      https://www.php.net/manual/en/language.oop5.abstract.php

  -
    question: >
      Can an `abstract` method have a body (implementation) in PHP?
    answers:
      - { value: 'Yes, but only if it''s a private method.', correct: false }
      - { value: 'No, abstract methods must only declare their signature.', correct: true }
      - { value: 'Yes, but only if the class is also `final`.', correct: false }
      - { value: 'It depends on the PHP version.', correct: false }
    help: |
      Abstract methods are declared with the `abstract` keyword and must not contain a body. Their implementation is provided by the concrete classes that extend the abstract class.
      https://www.php.net/manual/en/language.oop5.abstract.php#language.oop5.abstract.methods

  -
    question: >
      What is the minimum visibility an abstract method can have when implemented by a child class?
    answers:
      - { value: '`private`', correct: false }
      - { value: '`protected`', correct: false }
      - { value: 'The same or less restrictive visibility than in the abstract class.', correct: true }
      - { value: '`public`', correct: false }
    help: |
      When implementing an abstract method, the child class's method must have the same or a less restrictive visibility than the abstract method. For example, if the abstract method is `protected`, the implementing method can be `protected` or `public`, but not `private`.
      https://www.php.net/manual/en/language.oop5.abstract.php#language.oop5.abstract.methods

  -
    question: >
      Which of the following statements about abstract classes is true?
    answers:
      - { value: 'An abstract class cannot have a constructor.', correct: false }
      - { value: 'An abstract class can implement interfaces.', correct: true }
      - { value: 'An abstract class must contain at least one abstract method.', correct: false }
      - { value: 'An abstract class can be instantiated using `new` if all abstract methods are implemented.', correct: false }
    help: |
      An abstract class can have a constructor, implement interfaces, and does not necessarily need to contain any abstract methods (though it often does). It cannot be instantiated directly.
      https://www.php.net/manual/en/language.oop5.abstract.php

  -
    question: >
      Which of the following is used to catch expected runtime issues in PHP?
    answers:
      - { value: 'Errors', correct: false }
      - { value: 'Exceptions', correct: true }
      - { value: 'Warnings', correct: false }
      - { value: 'Notices', correct: false }
    help: |
      Exceptions are designed for handling anticipated problems or unusual conditions that can occur during program execution, allowing for graceful error recovery.
      https://www.php.net/manual/en/language.exceptions.php

  -
    question: |
      Consider the following PHP code:

      ```php
      <?php
      function divide($a, $b) {
          if ($b === 0) {
              throw new InvalidArgumentException("Division by zero is not allowed.");
          }
          return $a / $b;
      }

      try {
          echo divide(10, 0);
      } catch (InvalidArgumentException $e) {
          echo "Caught exception: " . $e->getMessage();
      } finally {
          echo "Finally block executed.";
      }
      ?>
      ```
      What will be the output of this script?
    answers:
      - { value: 'Caught exception: Division by zero is not allowed.Finally block executed.', correct: true }
      - { value: 'Division by zero is not allowed.Finally block executed.', correct: false }
      - { value: 'Caught exception: Division by zero is not allowed.', correct: false }
      - { value: 'Finally block executed.Caught exception: Division by zero is not allowed.', correct: false }
    help: |
      When an exception is thrown, the `try` block is immediately exited, and execution jumps to the matching `catch` block. The `finally` block is always executed, regardless of whether an exception was thrown or caught.
      https://www.php.net/manual/en/language.exceptions.php
      https://www.php.net/manual/en/language.exceptions.finally.php

  -
    question: >
      What is the purpose of the `finally` block in a `try...catch...finally` statement?
    answers:
      - { value: 'It is executed only if an exception is thrown.', correct: false }
      - { value: 'It is executed only if no exception is thrown.', correct: false }
      - { value: 'It is always executed, regardless of whether an exception was thrown or caught.', correct: true }
      - { value: 'It is used to re-throw an exception.', correct: false }
    help: |
      The `finally` block provides a way to execute code after `try` and `catch` blocks, regardless of whether an exception was thrown or caught. It's commonly used for cleanup operations.
      https://www.php.net/manual/en/language.exceptions.finally.php

  -
    question: >
      Which of the following is the base class for all user-defined exceptions in PHP?
    answers:
      - { value: '`Error`', correct: false }
      - { value: '`Throwable`', correct: false }
      - { value: '`Exception`', correct: true }
      - { value: '`RuntimeException`', correct: false }
    help: |
      All user-defined exceptions should extend the built-in `Exception` class. `Throwable` is the base interface for both `Exception` and `Error` in PHP 7+.
      https://www.php.net/manual/en/class.exception.php

  -
    question: >
      In PHP 7+, what is the difference between `Exception` and `Error`?
    answers:
      - { value: '`Exception` is for recoverable errors, while `Error` is for fatal, unrecoverable errors.', correct: true }
      - { value: '`Exception` can be caught, but `Error` cannot be caught.', correct: false }
      - { value: '`Error` is for user-defined issues, `Exception` is for internal PHP issues.', correct: false }
      - { value: 'There is no practical difference; they are interchangeable.', correct: false }
    help: |
      `Exception` represents conditions that a well-written application should be able to catch and handle. `Error` represents more severe, unrecoverable problems that typically indicate a bug in the code or environment issues. Both implement the `Throwable` interface.
      https://www.php.net/manual/en/language.errors.php7.php

  -
    question: >
      What is a `trait` in PHP?
    answers:
      - { value: 'A mechanism for achieving multiple inheritance.', correct: false }
      - { value: 'A set of methods that can be reused in multiple independent classes.', correct: true }
      - { value: 'A special type of abstract class.', correct: false }
      - { value: 'A way to define global utility functions.', correct: false }
    help: |
      Traits are a mechanism for code reuse in single inheritance languages like PHP. A trait is intended to reduce limitations of single inheritance by enabling a developer to reuse sets of methods freely in several independent classes living in different class hierarchies.
      https://www.php.net/manual/en/language.oop5.traits.php

  -
    question: |
      Given the following trait:

      ```php
      <?php
      trait LoggerTrait {
          public function logMessage(string $message) {
              echo "Log: " . $message;
          }
      }
      ```
      How would you use this trait in a class `MyService`?
    answers:
      - { value: '```php
class MyService {
    extends LoggerTrait;
}
```', correct: false }
      - { value: '```php
class MyService {
    use LoggerTrait;
}
```', correct: true }
      - { value: '```php
class MyService implements LoggerTrait {
    // ...
}
```', correct: false }
      - { value: '```php
class MyService {
    include LoggerTrait;
}
```', correct: false }
    help: |
      Traits are included in a class using the `use` keyword, similar to how namespaces are imported, but within the class definition.
      https://www.php.net/manual/en/language.oop5.traits.php

  -
    question: >
      What happens if a class using a trait defines a method with the same name as a method in the trait?
    answers:
      - { value: 'The trait''s method takes precedence.', correct: false }
      - { value: 'A fatal error occurs.', correct: false }
      - { value: 'The class''s method takes precedence.', correct: true }
      - { value: 'The methods are merged, combining their functionalities.', correct: false }
    help: |
      When a class uses a trait, and both the class and the trait define a method with the same name, the method defined in the class will override the trait's method. This is known as the "precedence of methods".
      https://www.php.net/manual/en/language.oop5.traits.php#language.oop5.traits.precedence

  -
    question: >
      Which of the following is true regarding traits and abstract methods?
    answers:
      - { value: 'Traits cannot contain abstract methods.', correct: false }
      - { value: 'A class using a trait with an abstract method must implement that method.', correct: true }
      - { value: 'Abstract methods in traits are automatically implemented by PHP.', correct: false }
      - { value: 'Only abstract classes can contain abstract methods, not traits.', correct: false }
    help: |
      Traits can contain abstract methods. If a trait declares an abstract method, any class that uses that trait must implement that abstract method, or be declared abstract itself.
      https://www.php.net/manual/en/language.oop5.traits.php#language.oop5.traits.abstract

  -
    question: >
      How can you resolve naming conflicts when a class uses multiple traits that define methods with the same name?
    answers:
      - { value: 'By using the `insteadof` operator in combination with `as`.', correct: true }
      - { value: 'By renaming one of the conflicting methods directly in the trait.', correct: false }
      - { value: 'By implementing an interface that defines the conflicting method.', correct: false }
      - { value: 'PHP automatically resolves conflicts by prioritizing the first trait used.', correct: false }
    help: |
      When multiple traits used by a class define methods with the same name, a fatal error occurs. This can be resolved using the `insteadof` operator to choose which method to use, and optionally `as` to alias it.
      https://www.php.net/manual/en/language.oop5.traits.php#language.oop5.traits.conflict

  -
    question: >
      Which PHP extension is commonly used for interacting with relational databases?
    answers:
      - { value: '`GD`', correct: false }
      - { value: '`PDO`', correct: true }
      - { value: '`XML`', correct: false }
      - { value: '`CURL`', correct: false }
    help: |
      PDO (PHP Data Objects) is a database access layer providing a uniform method of access to multiple databases. It's widely used for secure and efficient database interactions.
      https://www.php.net/manual/en/book.pdo.php

  -
    question: >
      Which PHP extension provides functions for image creation and manipulation?
    answers:
      - { value: '`Intl`', correct: false }
      - { value: '`OpenSSL`', correct: false }
      - { value: '`GD`', correct: true }
      - { value: '`Zip`', correct: false }
    help: |
      The GD extension provides image creation and manipulation functions, commonly used for generating thumbnails, watermarks, or dynamic images.
      https://www.php.net/manual/en/book.gd.php

  -
    question: >
      What is the purpose of the `cURL` extension in PHP?
    answers:
      - { value: 'To handle file uploads.', correct: false }
      - { value: 'To perform network requests (e.g., HTTP, FTP).', correct: true }
      - { value: 'To manage sessions.', correct: false }
      - { value: 'To parse XML documents.', correct: false }
    help: |
      The cURL extension allows PHP to communicate with many different types of servers and protocols, including HTTP, HTTPS, FTP, GOPHER, TELNET, DICT, FILE, and LDAP. It's commonly used for making API calls or fetching web content.
      https://www.php.net/manual/en/book.curl.php

  -
    question: >
      Which PHP extension is essential for working with JSON data?
    answers:
      - { value: '`Standard`', correct: false }
      - { value: '`JSON`', correct: true }
      - { value: '`XML`', correct: false }
      - { value: '`MBString`', correct: false }
    help: |
      The JSON extension provides functions for encoding and decoding JSON (JavaScript Object Notation) data, such as `json_encode()` and `json_decode()`.
      https://www.php.net/manual/en/book.json.php

  -
    question: >
      What is the role of the `Intl` extension in PHP?
    answers:
      - { value: 'To provide internationalization capabilities.', correct: true }
      - { value: 'To interact with integer types.', correct: false }
      - { value: 'To handle internal PHP functions.', correct: false }
      - { value: 'To manage network interfaces.', correct: false }
    help: |
      The Intl (Internationalization) extension provides various functions for handling locale-aware operations, such as formatting dates, numbers, and currencies, and performing string comparisons according to different locales.
      https://www.php.net/manual/en/book.intl.php

  -
    question: >
      What does SPL stand for in PHP?
    answers:
      - { value: 'Standard PHP Library', correct: true }
      - { value: 'Symfony PHP Library', correct: false }
      - { value: 'Server-Side Programming Language', correct: false }
      - { value: 'Structured PHP Language', correct: false }
    help: |
      SPL stands for Standard PHP Library. It is a collection of interfaces and classes that are intended to solve standard problems.
      https://www.php.net/manual/en/book.spl.php

  -
    question: >
      Which SPL interface is used to make objects iterable, allowing them to be used with `foreach`?
    answers:
      - { value: '`ArrayAccess`', correct: false }
      - { value: '`Countable`', correct: false }
      - { value: '`Iterator`', correct: true }
      - { value: '`Serializable`', correct: false }
    help: |
      The `Iterator` interface (and `IteratorAggregate`) allows objects to be iterated over using the `foreach` construct, providing methods like `current()`, `key()`, `next()`, `rewind()`, and `valid()`.
      https://www.php.net/manual/en/class.iterator.php

  -
    question: >
      Which SPL interface allows objects to be accessed as arrays (e.g., `$obj['key']`)?
    answers:
      - { value: '`Traversable`', correct: false }
      - { value: '`ArrayAccess`', correct: true }
      - { value: '`Serializable`', correct: false }
      - { value: '`RecursiveIterator`', correct: false }
    help: |
      The `ArrayAccess` interface allows objects to use array syntax (e.g., `isset($obj['key'])`, `$obj['key'] = 'value'`, `unset($obj['key'])`).
      https://www.php.net/manual/en/class.arrayaccess.php

  -
    question: >
      Which SPL class provides a way to automatically load classes when they are first used?
    answers:
      - { value: '`SplFileObject`', correct: false }
      - { value: '`SplStack`', correct: false }
      - { value: '`SplAutoloadRegister`', correct: false }
      - { value: '`SplAutoload` (or functions like `spl_autoload_register`)', correct: true }
    help: |
      The `spl_autoload_register()` function (part of SPL) registers a given function as an autoloader. This function is then called when a class or interface is used that has not yet been defined.
      https://www.php.net/manual/en/function.spl-autoload-register.php

  -
    question: >
      Which SPL data structure implements a LIFO (Last-In, First-Out) behavior?
    answers:
      - { value: '`SplQueue`', correct: false }
      - { value: '`SplStack`', correct: true }
      - { value: '`SplHeap`', correct: false }
      - { value: '`SplDoublyLinkedList`', correct: false }
    help: |
      `SplStack` provides the functionality of a stack, where the last element added is the first one to be removed (LIFO).
      https://www.php.net/manual/en/class.splstack.php

  -
    question: >
      Which of the following is a new feature introduced in PHP 8.0?
    answers:
      - { value: 'Short array syntax `[]`', correct: false }
      - { value: 'Null Coalescing Operator `??`', correct: false }
      - { value: 'Named Arguments', correct: true }
      - { value: 'Type Hinting for scalar types', correct: false }
    help: |
      PHP 8.0 introduced Named Arguments, allowing arguments to be passed to a function based on their parameter name, rather than their position.
      https://www.php.net/manual/en/language.functions.named-arguments.php

  -
    question: >
      What is the purpose of the `match` expression introduced in PHP 8.0?
    answers:
      - { value: 'To perform regular expression matching on strings.', correct: false }
      - { value: 'To execute different code blocks based on a value, offering a more concise alternative to `switch`.', correct: true }
      - { value: 'To compare two values for strict equality.', correct: false }
      - { value: 'To define a new type of conditional loop.', correct: false }
    help: |
      The `match` expression is a new control flow construct in PHP 8.0, similar to `switch` but with key differences: it's an expression (returns a value), handles strict comparisons, and doesn't require `break` statements.
      https://www.php.net/manual/en/control-structures.match.php

  -
    question: |
      Which of the following is a valid use of the Nullsafe operator (`?->`) introduced in PHP 8.0?
    answers:
      - { value: '`$user?->getAddress()->getStreet();`', correct: true }
      - { value: '`$user?->name ?? "Guest";`', correct: false }
      - { value: '`$array?->[0];`', correct: false }
      - { value: '`$object?->method();` (if method is static)', correct: false }
    help: |
      The Nullsafe operator (`?->`) allows calling methods or accessing properties on an object that might be null without throwing an error. If the left-hand side of the operator evaluates to null, the entire expression evaluates to null and no further operations are performed.
      https://www.php.net/manual/en/language.operators.nullsafe.php

  -
    question: >
      What is the purpose of `#[Attribute]` in PHP 8.0?
    answers:
      - { value: 'To define a new type of class.', correct: false }
      - { value: 'To add metadata to classes, methods, properties, or functions.', correct: true }
      - { value: 'To declare a global constant.', correct: false }
      - { value: 'To mark a method as deprecated.', correct: false }
    help: |
      Attributes (also known as annotations in other languages) provide a way to add structured, machine-readable metadata to declarations in code (classes, methods, properties, functions, etc.).
      https://www.php.net/manual/en/language.attributes.php

  -
    question: >
      Which of the following is a new feature related to type hinting in PHP 8.0?
    answers:
      - { value: 'Nullable types `?Type`', correct: false }
      - { value: 'Union Types `TypeA|TypeB`', correct: true }
      - { value: 'Return type declarations', correct: false }
      - { value: 'Scalar type declarations', correct: false }
    help: |
      PHP 8.0 introduced Union Types, allowing a variable, parameter, or return type to accept values of multiple different types.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.union

  -
    question: >
      What is the primary benefit of using `readonly` properties introduced in PHP 8.1?
    answers:
      - { value: 'They can only be read, never written to, even during initialization.', correct: false }
      - { value: 'They can only be initialized once, either at declaration or in the constructor, and cannot be changed afterward.', correct: true }
      - { value: 'They are automatically serialized and deserialized.', correct: false }
      - { value: 'They are accessible only within the class where they are declared.', correct: false }
    help: |
      `readonly` properties, introduced in PHP 8.1, can only be initialized once (either at declaration or in the constructor) and cannot be modified thereafter. This ensures immutability.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly

  -
    question: >
      Which of the following is a valid `enum` definition in PHP 8.1?
    answers:
      - { value: '```php
enum Status {
    case Draft;
    case Published;
}
```', correct: true }
      - { value: '```php
class Status extends Enum {
    const Draft = 1;
    const Published = 2;
}
```', correct: false }
      - { value: '```php
interface Status {
    enum Draft;
    enum Published;
}
```', correct: false }
      - { value: '```php
abstract enum Status {
    case Draft;
    case Published;
}
```', correct: false }
    help: |
      PHP 8.1 introduced Enums, which are special classes that represent a fixed set of named values. They are defined using the `enum` keyword.
      https://www.php.net/manual/en/language.enumerations.php

  -
    question: >
      What is the purpose of `new static()` in PHP, especially in the context of inheritance?
    answers:
      - { value: 'To create a new instance of the parent class.', correct: false }
      - { value: 'To create a new instance of the class where the method is defined.', correct: false }
      - { value: 'To create a new instance of the class that the method was called on (late static binding).', correct: true }
      - { value: 'To create a new static property.', correct: false }
    help: |
      `new static()` uses Late Static Bindings, meaning it creates an instance of the class that the method was originally called on, even if the method is defined in a parent class. This is different from `new self()`, which always creates an instance of the class where `self` is defined.
      https://www.php.net/manual/en/language.oop5.late-static-bindings.php

  -
    question: >
      Which PHP 8.1 feature allows you to define a property that can only be set once, either at declaration or in the constructor?
    answers:
      - { value: '`const` properties', correct: false }
      - { value: '`final` properties', correct: false }
      - { value: '`readonly` properties', correct: true }
      - { value: '`static` properties', correct: false }
    help: |
      `readonly` properties (PHP 8.1) are immutable after their initial assignment.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly

  -
    question: >
      What does the `never` return type declaration, introduced in PHP 8.1, signify?
    answers:
      - { value: 'The function always returns `null`.', correct: false }
      - { value: 'The function never returns a value; it either throws an exception or terminates execution.', correct: true }
      - { value: 'The function returns a value that cannot be `null`.', correct: false }
      - { value: 'The function is deprecated and should not be used.', correct: false }
    help: |
      The `never` return type indicates that the function or method will not return a value. Instead, it will either throw an exception, call `die()`, `exit()`, or enter an infinite loop.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.never

  -
    question: >
      Which of the following is a new feature in PHP 8.2?
    answers:
      - { value: '`true` type', correct: true }
      - { value: '`mixed` type', correct: false }
      - { value: '`object` type', correct: false }
      - { value: '`callable` type', correct: false }
    help: |
      PHP 8.2 introduced the `true` standalone type, allowing functions to explicitly declare that they always return `true`.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.true

  -
    question: >
      What is the primary purpose of `#[AllowDynamicProperties]` attribute in PHP 8.2?
    answers:
      - { value: 'To enable dynamic method calls on an object.', correct: false }
      - { value: 'To explicitly allow dynamic properties on a class, suppressing deprecation warnings.', correct: true }
      - { value: 'To prevent any properties from being added after object instantiation.', correct: false }
      - { value: 'To define properties that can change their type at runtime.', correct: false }
    help: |
      In PHP 8.2, dynamic properties are deprecated. The `#[AllowDynamicProperties]` attribute can be used on a class to explicitly allow dynamic properties and suppress the deprecation warning.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.dynamic

  -
    question: >
      Which of the following is a new feature in PHP 8.2 related to `readonly` properties?
    answers:
      - { value: '`readonly` classes', correct: true }
      - { value: '`readonly` methods', correct: false }
      - { value: '`readonly` interfaces', correct: false }
      - { value: '`readonly` traits', correct: false }
    help: |
      PHP 8.2 introduced `readonly` classes. When a class is declared `readonly`, all its properties are implicitly `readonly`.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly-classes

  -
    question: >
      What is the effect of declaring a class as `readonly` in PHP 8.2?
    answers:
      - { value: 'All methods within the class become `final`.', correct: false }
      - { value: 'All properties within the class are implicitly `readonly`.', correct: true }
      - { value: 'The class cannot be extended.', correct: false }
      - { value: 'Objects of the class cannot be serialized.', correct: false }
    help: |
      Declaring a class `readonly` ensures that all its properties are `readonly`, meaning they can only be initialized once (in the constructor or at declaration) and cannot be modified thereafter.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly-classes

  -
    question: >
      Which of the following is a new function introduced in PHP 8.2 for sensitive parameter handling?
    answers:
      - { value: '`filter_var_array()`', correct: false }
      - { value: '`mb_str_split()`', correct: false }
      - { value: '`str_contains()`', correct: false }
      - { value: '`SensitiveParameter` attribute', correct: true }
    help: |
      PHP 8.2 introduced the `#[SensitiveParameter]` attribute. When applied to a function or method parameter, its value will be redacted from stack traces and error logs, preventing sensitive information from being exposed.
      https://www.php.net/manual/en/language.attributes.sensitiveparameter.php

  -
    question: >
      Which of the following best describes the `#[Override]` attribute introduced in PHP 8.3 (but relevant for future-proofing)?
    answers:
      - { value: 'It ensures a method is always overridden by child classes.', correct: false }
      - { value: 'It indicates that a method is intended to override a parent method, causing a compile-time error if it does not.', correct: true }
      - { value: 'It prevents a method from being overridden.', correct: false }
      - { value: 'It allows overriding private methods.', correct: false }
    help: |
      The `#[Override]` attribute (PHP 8.3) is a new feature that explicitly marks a method as intended to override a parent method. If the method does not actually override a parent method (e.g., due to a typo or parent method removal), a compile-time error is triggered, helping to prevent subtle bugs.
      https://wiki.php.net/rfc/explicit_readonly_properties#override_attribute (RFC for PHP 8.3, but good to know for certification)

  -
    question: >
      What is the primary purpose of the `__invoke()` magic method in PHP?
    answers:
      - { value: 'To allow an object to be called as a function.', correct: true }
      - { value: 'To automatically convert an object to a string.', correct: false }
      - { value: 'To handle calls to undefined methods.', correct: false }
      - { value: 'To serialize an object.', correct: false }
    help: |
      The `__invoke()` method is called when a script tries to call an object as a function.
      https://www.php.net/manual/en/language.oop5.magic.php#object.invoke

  -
    question: >
      Which magic method is called when an object is cloned?
    answers:
      - { value: '`__copy()`', correct: false }
      - { value: '`__clone()`', correct: true }
      - { value: '`__duplicate()`', correct: false }
      - { value: '`__new()`', correct: false }
    help: |
      The `__clone()` method is called when an object is cloned using the `clone` keyword. It can be used to deep copy objects or handle other post-cloning logic.
      https://www.php.net/manual/en/language.oop5.cloning.php

  -
    question: >
      What is the purpose of the `__call()` magic method?
    answers:
      - { value: 'To handle calls to undefined static methods.', correct: false }
      - { value: 'To handle calls to undefined public methods on an object.', correct: true }
      - { value: 'To intercept all method calls on an object.', correct: false }
      - { value: 'To dynamically create new methods at runtime.', correct: false }
    help: |
      The `__call()` method is triggered when invoking inaccessible (e.g., `private` or `protected`) or non-existent methods in an object context.
      https://www.php.net/manual/en/language.oop5.magic.php#object.call

  -
    question: >
      Which magic method is triggered when trying to read data from inaccessible (e.g., `private` or non-existent) properties?
    answers:
      - { value: '`__set()`', correct: false }
      - { value: '`__get()`', correct: true }
      - { value: '`__isset()`', correct: false }
      - { value: '`__unset()`', correct: false }
    help: |
      The `__get()` method is used for reading data from inaccessible properties.
      https://www.php.net/manual/en/language.oop5.magic.php#object.get

  -
    question: >
      What is the purpose of the `__sleep()` and `__wakeup()` magic methods?
    answers:
      - { value: 'To pause and resume script execution.', correct: false }
      - { value: 'To prepare an object for serialization and restore it upon unserialization.', correct: true }
      - { value: 'To control when an object is loaded into memory.', correct: false }
      - { value: 'To manage asynchronous operations.', correct: false }
    help: |
      `__sleep()` is called prior to serialization (e.g., by `serialize()`) to return an array of property names to be serialized. `__wakeup()` is called immediately after unserialization to re-establish any resources or connections.
      https://www.php.net/manual/en/language.oop5.magic.php#object.sleep

  -
    question: >
      What is the purpose of the `__debugInfo()` magic method?
    answers:
      - { value: 'To provide custom debug information when an object is inspected (e.g., by `var_dump()`).', correct: true }
      - { value: 'To log debug messages to a file.', correct: false }
      - { value: 'To enable debugging mode for a class.', correct: false }
      - { value: 'To retrieve information about the current call stack.', correct: false }
    help: |
      The `__debugInfo()` method is called when `var_dump()` is used on an object to get information that should be output. This allows the object to customize the information that is shown.
      https://www.php.net/manual/en/language.oop5.magic.php#object.debuginfo

  -
    question: >
      Which of the following is a valid way to define a constant in PHP that is accessible globally?
    answers:
      - { value: '`const MY_GLOBAL_CONST = "value";`', correct: false }
      - { value: '`define("MY_GLOBAL_CONST", "value");`', correct: true }
      - { value: '`$GLOBALS[''MY_GLOBAL_CONST''] = "value";`', correct: false }
      - { value: '`public static $MY_GLOBAL_CONST = "value";`', correct: false }
    help: |
      The `define()` function is used to define global constants. The `const` keyword is used for class constants or top-level constants in the global namespace (since PHP 5.3). However, `define()` is the traditional way for truly global, non-class-bound constants.
      https://www.php.net/manual/en/function.define.php

  -
    question: >
      What is the purpose of the `fn` keyword introduced in PHP 7.4?
    answers:
      - { value: 'To define a new type of function that can be used as a generator.', correct: false }
      - { value: 'To define short, single-expression anonymous functions (arrow functions).', correct: true }
      - { value: 'To declare a function that can only be called once.', correct: false }
      - { value: 'To create a function that automatically returns `null`.', correct: false }
    help: |
      The `fn` keyword is used to define arrow functions, which are a more concise syntax for anonymous functions that contain only a single expression. They automatically capture variables from the parent scope by value.
      https://www.php.net/manual/en/functions.arrow.php

  -
    question: >
      Which of the following is true about `strict_types=1` in PHP?
    answers:
      - { value: 'It enforces strict type checking for all PHP built-in functions.', correct: false }
      - { value: 'It applies strict type checking to scalar type declarations for function arguments and return values in the file where it is declared.', correct: true }
      - { value: 'It converts all variable types to their strict equivalents automatically.', correct: false }
      - { value: 'It prevents any implicit type conversions in the entire application.', correct: false }
    help: |
      Declaring `declare(strict_types=1);` at the top of a PHP file enforces strict type checking for scalar type declarations (int, float, string, bool) within that specific file. It means that values must exactly match the declared type, without implicit type juggling.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.strict

  -
    question: >
      What is the purpose of `yield` keyword in PHP?
    answers:
      - { value: 'To return a value from a function and terminate its execution.', correct: false }
      - { value: 'To pause function execution and return a value, allowing the function to resume later (generators).', correct: true }
      - { value: 'To include an external file into the current scope.', correct: false }
      - { value: 'To define a new type of loop.', correct: false }
    help: |
      The `yield` keyword is used in generator functions. It allows a function to return a value to the caller, but unlike `return`, it pauses the function's execution and preserves its state, allowing it to be resumed later.
      https://www.php.net/manual/en/language.generators.overview.php

  -
    question: >
      Which of the following is a valid way to define a typed property in PHP 7.4+?
    answers:
      - { value: '`public string $name;`', correct: true }
      - { value: '`public var $name: string;`', correct: false }
      - { value: '`public $name = string;`', correct: false }
      - { value: '`public $name string;`', correct: false }
    help: |
      PHP 7.4 introduced typed properties, allowing developers to declare the type of a class property directly.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.typed

  -
    question: >
      What is the purpose of `WeakMap` introduced in PHP 8.0?
    answers:
      - { value: 'To store key-value pairs where keys are strings and values are objects.', correct: false }
      - { value: 'To store key-value pairs where keys are objects, and the map does not prevent the garbage collection of the key objects.', correct: true }
      - { value: 'To create a map that can only store weak references to objects.', correct: false }
      - { value: 'To store sensitive data securely.', correct: false }
    help: |
      `WeakMap` allows you to create a map from objects to arbitrary values, without preventing the key objects from being garbage collected. If a key object is garbage collected, its entry is removed from the `WeakMap`.
      https://www.php.net/manual/en/class.weakmap.php

  -
    question: >
      Which of the following is a correct way to declare a function that accepts either an `int` or a `float` as an argument in PHP 8.0+?
    answers:
      - { value: '`function sum(int|float $number)`', correct: true }
      - { value: '`function sum(int, float $number)`', correct: false }
      - { value: '`function sum(int or float $number)`', correct: false }
      - { value: '`function sum(mixed $number)`', correct: false }
    help: |
      PHP 8.0 introduced Union Types, allowing multiple types to be specified for parameters, return values, and properties using the `|` operator.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.union

  -
    question: >
      What is the primary benefit of using `#[Deprecated]` attribute (PHP 8.1+) compared to `@deprecated` docblock?
    answers:
      - { value: 'It automatically removes the deprecated code.', correct: false }
      - { value: 'It provides a compile-time warning/error when deprecated code is used.', correct: true }
      - { value: 'It is only for internal documentation purposes.', correct: false }
      - { value: 'It changes the behavior of the deprecated code.', correct: false }
    help: |
      The `#[Deprecated]` attribute (PHP 8.1+) provides a formal, machine-readable way to mark code as deprecated. Unlike docblock annotations, it can trigger deprecation notices at runtime when the deprecated element is used, making it more effective for signaling future removals.
      https://www.php.net/manual/en/language.attributes.php#language.attributes.deprecated

  -
    question: >
      Which of the following describes the `static` return type introduced in PHP 8.0?
    answers:
      - { value: 'It means the function returns an instance of the class it is defined in.', correct: false }
      - { value: 'It means the function returns an instance of the class that the method was called on (late static binding).', correct: true }
      - { value: 'It means the function returns a static variable.', correct: false }
      - { value: 'It means the function returns `null` if the method is called statically.', correct: false }
    help: |
      The `static` return type, introduced in PHP 8.0, indicates that the method will return an instance of the class that it was called on, leveraging Late Static Bindings. This is particularly useful in fluent interfaces or factory methods.
      https://www.php.net/manual/en/language.oop5.late-static-bindings.php

  -
    question: >
      What is the purpose of `WeakReference` introduced in PHP 7.4?
    answers:
      - { value: 'To create a strong reference to an object, preventing its garbage collection.', correct: false }
      - { value: 'To create a reference to an object that does not prevent the object from being garbage collected.', correct: true }
      - { value: 'To store a reference to a variable that can be modified by multiple functions.', correct: false }
      - { value: 'To provide a way to serialize and deserialize objects.', correct: false }
    help: |
      `WeakReference` allows you to hold a reference to an object without preventing that object from being garbage collected. If the object is garbage collected, the `WeakReference` becomes null.
      https://www.php.net/manual/en/class.weakreference.php

  -
    question: >
      Which of the following is a valid way to define a constant in an interface in PHP 8.1+?
    answers:
      - { value: '`const MY_INTERFACE_CONST = "value";`', correct: true }
      - { value: '`public $MY_INTERFACE_CONST = "value";`', correct: false }
      - { value: '`define("MY_INTERFACE_CONST", "value");`', correct: false }
      - { value: 'Interfaces cannot define constants.', correct: false }
    help: |
      Since PHP 8.1, interfaces can define constants using the `const` keyword.
      https://www.php.net/manual/en/language.oop5.interfaces.php#language.oop5.interfaces.constants

  -
    question: >
      What is the primary benefit of using the `#[Pure]` attribute (from PHP 8.3, but conceptual) in a function?
    answers:
      - { value: 'It ensures the function only uses primitive types.', correct: false }
      - { value: 'It indicates the function has no side effects and its output depends only on its inputs, allowing for potential optimizations.', correct: true }
      - { value: 'It makes the function run faster by compiling it to native code.', correct: false }
      - { value: 'It marks the function as safe for concurrent execution.', correct: false }
    help: |
      The `#[Pure]` attribute (proposed for PHP 8.3) indicates that a function is "pure" – meaning it has no side effects and its return value depends solely on its input parameters. This can enable static analysis tools and potential future optimizations.
      https://wiki.php.net/rfc/pure_functions (RFC for PHP 8.3, but good for conceptual understanding)

  -
    question: >
      Which of the following is a new feature in PHP 8.2 that affects traits?
    answers:
      - { value: 'Constants in traits', correct: false }
      - { value: '`#[AllowDynamicProperties]` attribute for traits', correct: false }
      - { value: 'Disjunctive Normal Form (DNF) Types in traits', correct: false }
      - { value: 'Deprecation of dynamic properties without `#[AllowDynamicProperties]`', correct: true }
    help: |
      While not directly a new trait *feature*, PHP 8.2 deprecated dynamic properties. If a trait adds a dynamic property to a class that doesn't explicitly allow them, it will trigger a deprecation notice unless the class or the trait itself uses `#[AllowDynamicProperties]`. This impacts how traits might be used with dynamic properties.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.dynamic

  -
    question: >
      What is the purpose of the `#[ReturnTypeWillChange]` attribute (PHP 8.1+)?
    answers:
      - { value: 'To force a function to return a specific type.', correct: false }
      - { value: 'To indicate that a method''s return type signature will change in a future PHP version, suppressing certain deprecation warnings.', correct: true }
      - { value: 'To define a union return type.', correct: false }
      - { value: 'To mark a function as returning a value that can be `null`.', correct: false }
    help: |
      The `#[ReturnTypeWillChange]` attribute (PHP 8.1+) is used to suppress deprecation warnings that arise when a method in a child class or implementation of an interface has a different return type signature than its parent/interface, but the parent/interface method's return type is expected to change in a future PHP version. It's a temporary measure for forward compatibility.
      https://www.php.net/manual/en/language.attributes.php#language.attributes.returntypewillchange

  -
    question: >
      Which of the following is true about `#[AsDeprecated]` attribute in PHP 8.1+?
    answers:
      - { value: 'It is used to mark a class as abstract.', correct: false }
      - { value: 'It is used to mark a function, method, class, or property as deprecated, triggering a runtime notice upon use.', correct: true }
      - { value: 'It automatically removes the deprecated code from the codebase.', correct: false }
      - { value: 'It only works for methods, not for classes or properties.', correct: false }
    help: |
      The `#[Deprecated]` attribute (PHP 8.1+) provides a formal way to mark code as deprecated. When applied, using the marked element will trigger a `E_DEPRECATED` notice at runtime, signaling that it should no longer be used.
      https://www.php.net/manual/en/language.attributes.php#language.attributes.deprecated

  -
    question: >
      What is the purpose of the `#[NoReturn]` attribute (PHP 8.1+)?
    answers:
      - { value: 'It ensures a function always returns `null`.', correct: false }
      - { value: 'It indicates that a function will never return normally; it will always throw an exception or terminate the script.', correct: true }
      - { value: 'It prevents a function from returning any value.', correct: false }
      - { value: 'It marks a function as a generator.', correct: false }
    help: |
      The `#[NoReturn]` attribute (PHP 8.1+) is an alias for the `never` return type. It signals to static analysis tools that the annotated function or method will not return normally, but will instead always throw an exception or terminate execution (e.g., via `die()`, `exit()`).
      https://www.php.net/manual/en/language.attributes.php#language.attributes.noreturn

  -
    question: >
      Which of the following is a new feature in PHP 8.2 related to constants?
    answers:
      - { value: 'Constants in traits', correct: false }
      - { value: 'Dynamic constant names', correct: false }
      - { value: 'Constants in interfaces (introduced in 8.1)', correct: false }
      - { value: '`null`, `false`, and `true` as stand-alone types for constants', correct: true }
    help: |
      While not directly about constants *definition*, PHP 8.2 introduced `null`, `false`, and `true` as stand-alone types. This impacts type declarations for constants (and other elements) if they are used in contexts where types are declared.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.true

  -
    question: >
      What is the significance of the `#[Target]` attribute when defining custom attributes in PHP 8.0+?
    answers:
      - { value: 'It specifies the target PHP version for the attribute.', correct: false }
      - { value: 'It defines which types of declarations (e.g., class, method, property) the attribute can be applied to.', correct: true }
      - { value: 'It indicates the target namespace for the attribute.', correct: false }
      - { value: 'It specifies the target value for the attribute.', correct: false }
    help: |
      When defining a custom attribute, the `#[Target]` attribute (from the `Attribute` class) is used to specify where the custom attribute can be applied (e.g., `Attribute::TARGET_CLASS`, `Attribute::TARGET_METHOD`, `Attribute::TARGET_PROPERTY`).
      https://www.php.net/manual/en/class.attribute.php#attribute.constants

  -
    question: >
      What is the purpose of the `#[Immutable]` attribute (conceptual, often used with `readonly`)?
    answers:
      - { value: 'It makes all methods of a class static.', correct: false }
      - { value: 'It ensures that an object''s state cannot be modified after its construction.', correct: true }
      - { value: 'It prevents a class from being extended.', correct: false }
      - { value: 'It makes all properties of a class private.', correct: false }
    help: |
      While not a built-in PHP attribute, the concept of `#[Immutable]` (often implemented using `readonly` properties and careful design) signifies that an object's internal state cannot be changed after it has been created. This promotes predictability and thread safety.
      (Conceptual, not a direct PHP attribute, but a common pattern in modern PHP)

  -
    question: >
      Which of the following is a characteristic of `WeakMap` in PHP 8.0?
    answers:
      - { value: 'Keys must be strings.', correct: false }
      - { value: 'Keys must be objects.', correct: true }
      - { value: 'Values must be objects.', correct: false }
      - { value: 'It prevents garbage collection of both keys and values.', correct: false }
    help: |
      In `WeakMap`, keys must be objects. The primary feature is that the map does not prevent the garbage collection of these key objects.
      https://www.php.net/manual/en/class.weakmap.php

  -
    question: >
      What is the purpose of the `#[SensitiveParameter]` attribute in PHP 8.2?
    answers:
      - { value: 'To encrypt the parameter value at runtime.', correct: false }
      - { value: 'To mark a parameter whose value should be redacted from stack traces and error logs.', correct: true }
      - { value: 'To make a parameter optional.', correct: false }
      - { value: 'To indicate that a parameter must be an object.', correct: false }
    help: |
      The `#[SensitiveParameter]` attribute (PHP 8.2) is used to prevent sensitive information (like passwords or API keys) from appearing in stack traces or error logs, enhancing security.
      https://www.php.net/manual/en/language.attributes.sensitiveparameter.phpcategory: PHP

questions:
  -
    question: >
      Which of the following best describes the purpose of a `final` class in PHP?
    answers:
      - { value: 'A class that cannot be instantiated.', correct: false }
      - { value: 'A class whose methods cannot be overridden by child classes.', correct: false }
      - { value: 'A class that cannot be extended by any other class.', correct: true }
      - { value: 'A class that must implement all methods from its interfaces.', correct: false }
    help: |
      A `final` class cannot be inherited from. This is useful when you want to prevent further modification of a class's structure.
      https://www.php.net/manual/en/language.oop5.final.php

  -
    question: |
      Consider the following PHP code snippet:

      ```php
      <?php
      class MyClass {
          public function __construct() {
              echo "Constructor called.";
          }
          public function __destruct() {
              echo "Destructor called.";
          }
      }

      $obj = new MyClass();
      unset($obj);
      ?>
      ```
      What will be the output of this script?
    answers:
      - { value: 'Constructor called.Destructor called.', correct: true }
      - { value: 'Constructor called.', correct: false }
      - { value: 'Destructor called.Constructor called.', correct: false }
      - { value: 'No output, as `unset` prevents destructor execution.', correct: false }
    help: |
      The constructor `__construct()` is called when an object is created. The destructor `__destruct()` is called when all references to an object are removed or when the script ends. `unset()` explicitly removes a reference, triggering the destructor.
      https://www.php.net/manual/en/language.oop5.decon.php

  -
    question: >
      In PHP, what is the primary difference between an `abstract` class and an `interface`?
    answers:
      - { value: 'An abstract class can have properties, while an interface cannot.', correct: true }
      - { value: 'An interface can define method implementations, while an abstract class cannot.', correct: false }
      - { value: 'A class can implement multiple abstract classes, but only one interface.', correct: false }
      - { value: 'Abstract classes are used for type hinting, interfaces are not.', correct: false }
    help: |
      Abstract classes can have properties, abstract methods, and concrete methods with implementations. Interfaces can only declare methods (and constants in PHP 8.1+), but not implement them, nor can they have properties. A class can extend only one abstract class but implement multiple interfaces.
      https://www.php.net/manual/en/language.oop5.abstract.php
      https://www.php.net/manual/en/language.oop5.interfaces.php

  -
    question: |
      Which PHP 8.0 feature allows for a more concise way to define class properties directly in the constructor?
    answers:
      - { value: 'Property Promotion', correct: true }
      - { value: 'Constructor Overloading', correct: false }
      - { value: 'Named Arguments', correct: false }
      - { value: 'Union Types', correct: false }
    help: |
      PHP 8.0 introduced Constructor Property Promotion, allowing properties to be declared and initialized directly within the constructor's parameter list, reducing boilerplate code.
      https://www.php.net/manual/en/language.oop5.decon.php#language.oop5.decon.constructor.promotion

  -
    question: >
      What is the correct way to define a constant within a PHP class?
    answers:
      - { value: '`const MY_CONSTANT = "value";`', correct: true }
      - { value: '`define("MY_CONSTANT", "value");`', correct: false }
      - { value: '`public $MY_CONSTANT = "value";`', correct: false }
      - { value: '`static $MY_CONSTANT = "value";`', correct: false }
    help: |
      Class constants are defined using the `const` keyword inside the class definition. They are accessed using the class name and the scope resolution operator (`::`).
      https://www.php.net/manual/en/language.oop5.constants.php

  -
    question: |
      Which of the following is true about `static` methods in PHP?
    answers:
      - { value: 'They can access non-static properties of the class using `$this`.', correct: false }
      - { value: 'They are called on the class itself, not on an object instance.', correct: true }
      - { value: 'They must be declared `public`.', correct: false }
      - { value: 'They cannot be overridden by child classes.', correct: false }
    help: |
      Static methods are associated with the class, not with any specific instance of the class. They are called using the class name and the scope resolution operator (`::`). They cannot access non-static properties or methods using `$this`.
      https://www.php.net/manual/en/language.oop5.static.php

  -
    question: >
      What is the purpose of the `use` keyword when working with traits in PHP?
    answers:
      - { value: 'To import a namespace into the current file.', correct: false }
      - { value: 'To include external PHP files.', correct: false }
      - { value: 'To incorporate methods and properties from a trait into a class.', correct: true }
      - { value: 'To define an alias for a class.', correct: false }
    help: |
      The `use` keyword within a class definition is used to include one or more traits, effectively copying their methods and properties into the class.
      https://www.php.net/manual/en/language.oop5.traits.php

  -
    question: |
      Given the following code, which line will cause a fatal error?

      ```php
      <?php
      class A {
          private $prop = 'A';
      }

      class B extends A {
          public function getProp() {
              return $this->prop; // Line X
          }
      }

      $obj = new B();
      echo $obj->getProp();
      ?>
      ```
    answers:
      - { value: '`$obj = new B();`', correct: false }
      - { value: '`echo $obj->getProp();`', correct: false }
      - { value: '`return $this->prop;` (Line X)', correct: true }
      - { value: '`class B extends A {`', correct: false }
    help: |
      Private properties and methods are only accessible from within the class where they are defined. A child class cannot directly access private members of its parent class.
      https://www.php.net/manual/en/language.oop5.visibility.php

  -
    question: >
      Which magic method in PHP is automatically called when an object is treated as a string?
    answers:
      - { value: '`__toString()`', correct: true }
      - { value: '`__invoke()`', correct: false }
      - { value: '`__call()`', correct: false }
      - { value: '`__debugInfo()`', correct: false }
    help: |
      The `__toString()` method allows a class to decide how it will react when it is treated as a string. For example, what `echo $obj;` will print.
      https://www.php.net/manual/en/language.oop5.magic.php#object.tostring

  -
    question: |
      What is the purpose of the `self` keyword in PHP OOP?
    answers:
      - { value: 'To refer to the current object instance.', correct: false }
      - { value: 'To refer to the parent class.', correct: false }
      - { value: 'To refer to the current class itself (for static members or constants).', correct: true }
      - { value: 'To refer to the child class.', correct: false }
    help: |
      `self` is used to refer to static members (properties or methods) or constants of the current class. It does not refer to the current object instance, for which `$this` is used.
      https://www.php.net/manual/en/language.oop5.basic.php#language.oop5.basic.class.static

  -
    question: >
      Which of the following is a valid way to define a namespace in PHP?
    answers:
      - { value: '`namespace App\\Controller;`', correct: true }
      - { value: '`use App\\Controller;`', correct: false }
      - { value: '`namespace App/Controller;`', correct: false }
      - { value: '`namespace App::Controller;`', correct: false }
    help: |
      Namespaces are declared using the `namespace` keyword, followed by the namespace name, which uses backslashes (`\`) as separators.
      https://www.php.net/manual/en/language.namespaces.definition.php

  -
    question: |
      Given the following directory structure and file content:

      ```
      src/
      ├── Controller/
      │   └── HomeController.php
      └── Service/
          └── UserService.php
      ```

      `src/Controller/HomeController.php`:
      ```php
      <?php
      namespace App\Controller;

      use App\Service\UserService; // Line X

      class HomeController
      {
          public function index(UserService $userService) {
              // ...
          }
      }
      ```

      `src/Service/UserService.php`:
      ```php
      <?php
      namespace App\Service;

      class UserService
      {
          // ...
      }
      ```
      What is the purpose of `use App\Service\UserService;` (Line X)?
    answers:
      - { value: 'To include the `UserService.php` file.', correct: false }
      - { value: 'To create an alias for the `UserService` class.', correct: false }
      - { value: 'To import the `UserService` class into the current namespace for easier referencing.', correct: true }
      - { value: 'To define a new namespace.', correct: false }
    help: |
      The `use` declaration is used to import a fully qualified name (class, interface, trait, or function/constant in PHP 5.6+) into the current namespace, allowing it to be referenced by its unqualified name. It does not include the file itself; that's handled by an autoloader.
      https://www.php.net/manual/en/language.namespaces.importing.php

  -
    question: >
      Which PHP feature allows you to group related classes, interfaces, functions, and constants under a unique name to prevent naming collisions?
    answers:
      - { value: 'Traits', correct: false }
      - { value: 'Namespaces', correct: true }
      - { value: 'Packages', correct: false }
      - { value: 'Modules', correct: false }
    help: |
      Namespaces are a way of encapsulating items. This creates a naming system that prevents name collisions between different components or libraries.
      https://www.php.net/manual/en/language.namespaces.php

  -
    question: |
      What is the correct way to access a global constant `APP_VERSION` defined in the global namespace from within a namespaced class?
    answers:
      - { value: '`\APP_VERSION`', correct: true }
      - { value: '`APP_VERSION`', correct: false }
      - { value: '`self::APP_VERSION`', correct: false }
      - { value: '`$this->APP_VERSION`', correct: false }
    help: |
      To access global constants, functions, or classes from within a namespaced code, you must prefix them with a backslash (`\`) to refer to the global namespace.
      https://www.php.net/manual/en/language.namespaces.global.php

  -
    question: >
      Which of the following is NOT a valid type of namespace declaration in PHP?
    answers:
      - { value: 'Single file namespace declaration', correct: false }
      - { value: 'Multiple namespace declaration in a single file', correct: false }
      - { value: 'Bracketed namespace declaration', correct: false }
      - { value: 'Inline namespace declaration', correct: true }
    help: |
      PHP supports two forms of namespace declaration: single file (non-bracketed) and multiple namespaces (bracketed) within the same file. "Inline" is not a recognized type.
      https://www.php.net/manual/en/language.namespaces.definition.php

  -
    question: >
      What is the primary purpose of an `interface` in PHP?
    answers:
      - { value: 'To define a blueprint for classes, specifying methods that implementing classes must provide.', correct: true }
      - { value: 'To provide a base class with common functionality for child classes.', correct: false }
      - { value: 'To encapsulate data and behavior into a single unit.', correct: false }
      - { value: 'To allow multiple inheritance in PHP.', correct: false }
    help: |
      Interfaces define a contract for classes. They specify which methods a class must implement, without providing any implementation details. This promotes polymorphism and ensures certain behaviors.
      https://www.php.net/manual/en/language.oop5.interfaces.php

  -
    question: |
      Given the following interface:

      ```php
      <?php
      interface LoggerInterface {
          public function log(string $message);
      }
      ```
      Which of the following class definitions correctly implements `LoggerInterface`?
    answers:
      - { value: '```php
class FileLogger implements LoggerInterface {
    public function log(string $message) { /* ... */ }
}
```', correct: true }
      - { value: '```php
class DatabaseLogger extends LoggerInterface {
    public function log(string $message) { /* ... */ }
}
```', correct: false }
      - { value: '```php
class ConsoleLogger implements LoggerInterface {
    private function log(string $message) { /* ... */ }
}
```', correct: false }
      - { value: '```php
class NullLogger implements LoggerInterface {
    public function write(string $message) { /* ... */ }
}
```', correct: false }
    help: |
      A class implements an interface using the `implements` keyword. All methods declared in the interface must be implemented in the class with the same visibility and signature (or compatible signature in PHP 8+).
      https://www.php.net/manual/en/language.oop5.interfaces.php

  -
    question: >
      Can an interface define properties (member variables) in PHP?
    answers:
      - { value: 'Yes, but only public properties.', correct: false }
      - { value: 'No, interfaces can only define method signatures and constants.', correct: true }
      - { value: 'Yes, but only static properties.', correct: false }
      - { value: 'Yes, but they must be initialized.', correct: false }
    help: |
      Interfaces in PHP cannot define properties. They are strictly for defining method signatures and constants (since PHP 8.1).
      https://www.php.net/manual/en/language.oop5.interfaces.php

  -
    question: >
      What happens if a class implements an interface but fails to implement all of its methods?
    answers:
      - { value: 'A warning is issued, but the script continues.', correct: false }
      - { value: 'A fatal error is triggered, preventing script execution.', correct: true }
      - { value: 'The unimplemented methods are automatically made abstract.', correct: false }
      - { value: 'The class becomes an abstract class automatically.', correct: false }
    help: |
      If a class implements an interface, it must implement all methods declared in that interface. Failing to do so will result in a fatal error, unless the class itself is declared `abstract`.
      https://www.php.net/manual/en/language.oop5.interfaces.php

  -
    question: >
      Which PHP version introduced the ability for interfaces to define constants?
    answers:
      - { value: 'PHP 5.3', correct: false }
      - { value: 'PHP 7.0', correct: false }
      - { value: 'PHP 8.1', correct: true }
      - { value: 'PHP 8.2', correct: false }
    help: |
      Prior to PHP 8.1, interfaces could only define method signatures. PHP 8.1 introduced the ability to define constants within interfaces.
      https://www.php.net/manual/en/language.oop5.interfaces.php#language.oop5.interfaces.constants

  -
    question: >
      What is an anonymous function in PHP?
    answers:
      - { value: 'A function that does not have a name and can be assigned to a variable.', correct: true }
      - { value: 'A function that is automatically executed without being called.', correct: false }
      - { value: 'A function defined inside another function.', correct: false }
      - { value: 'A function that cannot accept arguments.', correct: false }
    help: |
      Anonymous functions (also known as closures) are functions that do not have a specified name. They can be assigned to a variable and passed as arguments to other functions.
      https://www.php.net/manual/en/functions.anonymous.php

  -
    question: |
      Given the following code:

      ```php
      <?php
      $message = 'Hello';

      $greet = function () use ($message) {
          echo $message;
      };

      $message = 'World';
      $greet();
      ?>
      ```
      What will be the output?
    answers:
      - { value: 'Hello', correct: true }
      - { value: 'World', correct: false }
      - { value: 'Hello World', correct: false }
      - { value: 'An error, as `$message` is not passed by reference.', correct: false }
    help: |
      When a variable is imported into a closure using `use ($variable)`, it is imported by value at the time the closure is defined. Subsequent changes to the original variable outside the closure will not affect the value inside the closure, unless it's passed by reference (`use (&$variable)`).
      https://www.php.net/manual/en/functions.anonymous.php#example-263

  -
    question: >
      Which keyword is used to import variables from the parent scope into an anonymous function's scope?
    answers:
      - { value: '`global`', correct: false }
      - { value: '`import`', correct: false }
      - { value: '`use`', correct: true }
      - { value: '`with`', correct: false }
    help: |
      The `use` keyword is used with anonymous functions to import variables from the scope in which the anonymous function is defined into the anonymous function's scope.
      https://www.php.net/manual/en/functions.anonymous.php

  -
    question: |
      What is a "closure" in PHP, in the context of anonymous functions?
    answers:
      - { value: 'An anonymous function that has access to variables from the scope in which it was created.', correct: true }
      - { value: 'A function that automatically closes a database connection.', correct: false }
      - { value: 'A function that cannot be modified after its creation.', correct: false }
      - { value: 'A function that returns another function.', correct: false }
    help: |
      In PHP, anonymous functions are implemented as objects of the `Closure` class. A closure is an anonymous function that can access variables from its surrounding scope (the scope in which it was defined) even after that scope has ceased to exist.
      https://www.php.net/manual/en/class.closure.php

  -
    question: >
      Which of the following is a valid way to define an anonymous function that can be called immediately (IIFE - Immediately Invoked Function Expression)?
    answers:
      - { value: '```php
(function() { echo "Hello"; })();
```', correct: true }
      - { value: '```php
function() { echo "Hello"; }();
```', correct: false }
      - { value: '```php
$func = function() { echo "Hello"; }; $func();
```', correct: false }
      - { value: '```php
(new class { public function __invoke() { echo "Hello"; } })();
```', correct: false }
    help: |
      Anonymous functions can be immediately invoked by wrapping the function definition in parentheses and then adding `()` to call it.
      https://www.php.net/manual/en/functions.anonymous.php

  -
    question: >
      What is the main characteristic of an `abstract` class in PHP?
    answers:
      - { value: 'It cannot have any concrete (implemented) methods.', correct: false }
      - { value: 'It must be extended by at least one child class.', correct: false }
      - { value: 'It cannot be instantiated directly.', correct: true }
      - { value: 'All its methods must be declared `public`.', correct: false }
    help: |
      Abstract classes cannot be instantiated on their own. They serve as templates for other classes and can contain both abstract methods (without implementation) and concrete methods (with implementation).
      https://www.php.net/manual/en/language.oop5.abstract.php

  -
    question: |
      Given the following abstract class:

      ```php
      <?php
      abstract class Vehicle {
          public $speed;

          public function __construct($speed) {
              $this->speed = $speed;
          }

          abstract public function accelerate();
          public function getSpeed() {
              return $this->speed;
          }
      }
      ```
      Which of the following concrete classes correctly extends `Vehicle`?
    answers:
      - { value: '```php
class Car extends Vehicle {
    public function accelerate() {
        $this->speed += 10;
    }
}
```', correct: true }
      - { value: '```php
class Bicycle extends Vehicle {
    // Missing accelerate() implementation
}
```', correct: false }
      - { value: '```php
abstract class Truck extends Vehicle {
    // No implementation needed for abstract class
}
```', correct: false }
      - { value: '```php
class Plane implements Vehicle {
    public function accelerate() { /* ... */ }
}
```', correct: false }
    help: |
      A concrete class extending an abstract class must implement all abstract methods declared in the parent abstract class. If it doesn't, it must also be declared abstract.
      https://www.php.net/manual/en/language.oop5.abstract.php

  -
    question: >
      Can an `abstract` method have a body (implementation) in PHP?
    answers:
      - { value: 'Yes, but only if it''s a private method.', correct: false }
      - { value: 'No, abstract methods must only declare their signature.', correct: true }
      - { value: 'Yes, but only if the class is also `final`.', correct: false }
      - { value: 'It depends on the PHP version.', correct: false }
    help: |
      Abstract methods are declared with the `abstract` keyword and must not contain a body. Their implementation is provided by the concrete classes that extend the abstract class.
      https://www.php.net/manual/en/language.oop5.abstract.php#language.oop5.abstract.methods

  -
    question: >
      What is the minimum visibility an abstract method can have when implemented by a child class?
    answers:
      - { value: '`private`', correct: false }
      - { value: '`protected`', correct: false }
      - { value: 'The same or less restrictive visibility than in the abstract class.', correct: true }
      - { value: '`public`', correct: false }
    help: |
      When implementing an abstract method, the child class's method must have the same or a less restrictive visibility than the abstract method. For example, if the abstract method is `protected`, the implementing method can be `protected` or `public`, but not `private`.
      https://www.php.net/manual/en/language.oop5.abstract.php#language.oop5.abstract.methods

  -
    question: >
      Which of the following statements about abstract classes is true?
    answers:
      - { value: 'An abstract class cannot have a constructor.', correct: false }
      - { value: 'An abstract class can implement interfaces.', correct: true }
      - { value: 'An abstract class must contain at least one abstract method.', correct: false }
      - { value: 'An abstract class can be instantiated using `new` if all abstract methods are implemented.', correct: false }
    help: |
      An abstract class can have a constructor, implement interfaces, and does not necessarily need to contain any abstract methods (though it often does). It cannot be instantiated directly.
      https://www.php.net/manual/en/language.oop5.abstract.php

  -
    question: >
      Which of the following is used to catch expected runtime issues in PHP?
    answers:
      - { value: 'Errors', correct: false }
      - { value: 'Exceptions', correct: true }
      - { value: 'Warnings', correct: false }
      - { value: 'Notices', correct: false }
    help: |
      Exceptions are designed for handling anticipated problems or unusual conditions that can occur during program execution, allowing for graceful error recovery.
      https://www.php.net/manual/en/language.exceptions.php

  -
    question: |
      Consider the following PHP code:

      ```php
      <?php
      function divide($a, $b) {
          if ($b === 0) {
              throw new InvalidArgumentException("Division by zero is not allowed.");
          }
          return $a / $b;
      }

      try {
          echo divide(10, 0);
      } catch (InvalidArgumentException $e) {
          echo "Caught exception: " . $e->getMessage();
      } finally {
          echo "Finally block executed.";
      }
      ?>
      ```
      What will be the output of this script?
    answers:
      - { value: 'Caught exception: Division by zero is not allowed.Finally block executed.', correct: true }
      - { value: 'Division by zero is not allowed.Finally block executed.', correct: false }
      - { value: 'Caught exception: Division by zero is not allowed.', correct: false }
      - { value: 'Finally block executed.Caught exception: Division by zero is not allowed.', correct: false }
    help: |
      When an exception is thrown, the `try` block is immediately exited, and execution jumps to the matching `catch` block. The `finally` block is always executed, regardless of whether an exception was thrown or caught.
      https://www.php.net/manual/en/language.exceptions.php
      https://www.php.net/manual/en/language.exceptions.finally.php

  -
    question: >
      What is the purpose of the `finally` block in a `try...catch...finally` statement?
    answers:
      - { value: 'It is executed only if an exception is thrown.', correct: false }
      - { value: 'It is executed only if no exception is thrown.', correct: false }
      - { value: 'It is always executed, regardless of whether an exception was thrown or caught.', correct: true }
      - { value: 'It is used to re-throw an exception.', correct: false }
    help: |
      The `finally` block provides a way to execute code after `try` and `catch` blocks, regardless of whether an exception was thrown or caught. It's commonly used for cleanup operations.
      https://www.php.net/manual/en/language.exceptions.finally.php

  -
    question: >
      Which of the following is the base class for all user-defined exceptions in PHP?
    answers:
      - { value: '`Error`', correct: false }
      - { value: '`Throwable`', correct: false }
      - { value: '`Exception`', correct: true }
      - { value: '`RuntimeException`', correct: false }
    help: |
      All user-defined exceptions should extend the built-in `Exception` class. `Throwable` is the base interface for both `Exception` and `Error` in PHP 7+.
      https://www.php.net/manual/en/class.exception.php

  -
    question: >
      In PHP 7+, what is the difference between `Exception` and `Error`?
    answers:
      - { value: '`Exception` is for recoverable errors, while `Error` is for fatal, unrecoverable errors.', correct: true }
      - { value: '`Exception` can be caught, but `Error` cannot be caught.', correct: false }
      - { value: '`Error` is for user-defined issues, `Exception` is for internal PHP issues.', correct: false }
      - { value: 'There is no practical difference; they are interchangeable.', correct: false }
    help: |
      `Exception` represents conditions that a well-written application should be able to catch and handle. `Error` represents more severe, unrecoverable problems that typically indicate a bug in the code or environment issues. Both implement the `Throwable` interface.
      https://www.php.net/manual/en/language.errors.php7.php

  -
    question: >
      What is a `trait` in PHP?
    answers:
      - { value: 'A mechanism for achieving multiple inheritance.', correct: false }
      - { value: 'A set of methods that can be reused in multiple independent classes.', correct: true }
      - { value: 'A special type of abstract class.', correct: false }
      - { value: 'A way to define global utility functions.', correct: false }
    help: |
      Traits are a mechanism for code reuse in single inheritance languages like PHP. A trait is intended to reduce limitations of single inheritance by enabling a developer to reuse sets of methods freely in several independent classes living in different class hierarchies.
      https://www.php.net/manual/en/language.oop5.traits.php

  -
    question: |
      Given the following trait:

      ```php
      <?php
      trait LoggerTrait {
          public function logMessage(string $message) {
              echo "Log: " . $message;
          }
      }
      ```
      How would you use this trait in a class `MyService`?
    answers:
      - { value: '```php
class MyService {
    extends LoggerTrait;
}
```', correct: false }
      - { value: '```php
class MyService {
    use LoggerTrait;
}
```', correct: true }
      - { value: '```php
class MyService implements LoggerTrait {
    // ...
}
```', correct: false }
      - { value: '```php
class MyService {
    include LoggerTrait;
}
```', correct: false }
    help: |
      Traits are included in a class using the `use` keyword, similar to how namespaces are imported, but within the class definition.
      https://www.php.net/manual/en/language.oop5.traits.php

  -
    question: >
      What happens if a class using a trait defines a method with the same name as a method in the trait?
    answers:
      - { value: 'The trait''s method takes precedence.', correct: false }
      - { value: 'A fatal error occurs.', correct: false }
      - { value: 'The class''s method takes precedence.', correct: true }
      - { value: 'The methods are merged, combining their functionalities.', correct: false }
    help: |
      When a class uses a trait, and both the class and the trait define a method with the same name, the method defined in the class will override the trait's method. This is known as the "precedence of methods".
      https://www.php.net/manual/en/language.oop5.traits.php#language.oop5.traits.precedence

  -
    question: >
      Which of the following is true regarding traits and abstract methods?
    answers:
      - { value: 'Traits cannot contain abstract methods.', correct: false }
      - { value: 'A class using a trait with an abstract method must implement that method.', correct: true }
      - { value: 'Abstract methods in traits are automatically implemented by PHP.', correct: false }
      - { value: 'Only abstract classes can contain abstract methods, not traits.', correct: false }
    help: |
      Traits can contain abstract methods. If a trait declares an abstract method, any class that uses that trait must implement that abstract method, or be declared abstract itself.
      https://www.php.net/manual/en/language.oop5.traits.php#language.oop5.traits.abstract

  -
    question: >
      How can you resolve naming conflicts when a class uses multiple traits that define methods with the same name?
    answers:
      - { value: 'By using the `insteadof` operator in combination with `as`.', correct: true }
      - { value: 'By renaming one of the conflicting methods directly in the trait.', correct: false }
      - { value: 'By implementing an interface that defines the conflicting method.', correct: false }
      - { value: 'PHP automatically resolves conflicts by prioritizing the first trait used.', correct: false }
    help: |
      When multiple traits used by a class define methods with the same name, a fatal error occurs. This can be resolved using the `insteadof` operator to choose which method to use, and optionally `as` to alias it.
      https://www.php.net/manual/en/language.oop5.traits.php#language.oop5.traits.conflict

  -
    question: >
      Which PHP extension is commonly used for interacting with relational databases?
    answers:
      - { value: '`GD`', correct: false }
      - { value: '`PDO`', correct: true }
      - { value: '`XML`', correct: false }
      - { value: '`CURL`', correct: false }
    help: |
      PDO (PHP Data Objects) is a database access layer providing a uniform method of access to multiple databases. It's widely used for secure and efficient database interactions.
      https://www.php.net/manual/en/book.pdo.php

  -
    question: >
      Which PHP extension provides functions for image creation and manipulation?
    answers:
      - { value: '`Intl`', correct: false }
      - { value: '`OpenSSL`', correct: false }
      - { value: '`GD`', correct: true }
      - { value: '`Zip`', correct: false }
    help: |
      The GD extension provides image creation and manipulation functions, commonly used for generating thumbnails, watermarks, or dynamic images.
      https://www.php.net/manual/en/book.gd.php

  -
    question: >
      What is the purpose of the `cURL` extension in PHP?
    answers:
      - { value: 'To handle file uploads.', correct: false }
      - { value: 'To perform network requests (e.g., HTTP, FTP).', correct: true }
      - { value: 'To manage sessions.', correct: false }
      - { value: 'To parse XML documents.', correct: false }
    help: |
      The cURL extension allows PHP to communicate with many different types of servers and protocols, including HTTP, HTTPS, FTP, GOPHER, TELNET, DICT, FILE, and LDAP. It's commonly used for making API calls or fetching web content.
      https://www.php.net/manual/en/book.curl.php

  -
    question: >
      Which PHP extension is essential for working with JSON data?
    answers:
      - { value: '`Standard`', correct: false }
      - { value: '`JSON`', correct: true }
      - { value: '`XML`', correct: false }
      - { value: '`MBString`', correct: false }
    help: |
      The JSON extension provides functions for encoding and decoding JSON (JavaScript Object Notation) data, such as `json_encode()` and `json_decode()`.
      https://www.php.net/manual/en/book.json.php

  -
    question: >
      What is the role of the `Intl` extension in PHP?
    answers:
      - { value: 'To provide internationalization capabilities.', correct: true }
      - { value: 'To interact with integer types.', correct: false }
      - { value: 'To handle internal PHP functions.', correct: false }
      - { value: 'To manage network interfaces.', correct: false }
    help: |
      The Intl (Internationalization) extension provides various functions for handling locale-aware operations, such as formatting dates, numbers, and currencies, and performing string comparisons according to different locales.
      https://www.php.net/manual/en/book.intl.php

  -
    question: >
      What does SPL stand for in PHP?
    answers:
      - { value: 'Standard PHP Library', correct: true }
      - { value: 'Symfony PHP Library', correct: false }
      - { value: 'Server-Side Programming Language', correct: false }
      - { value: 'Structured PHP Language', correct: false }
    help: |
      SPL stands for Standard PHP Library. It is a collection of interfaces and classes that are intended to solve standard problems.
      https://www.php.net/manual/en/book.spl.php

  -
    question: >
      Which SPL interface is used to make objects iterable, allowing them to be used with `foreach`?
    answers:
      - { value: '`ArrayAccess`', correct: false }
      - { value: '`Countable`', correct: false }
      - { value: '`Iterator`', correct: true }
      - { value: '`Serializable`', correct: false }
    help: |
      The `Iterator` interface (and `IteratorAggregate`) allows objects to be iterated over using the `foreach` construct, providing methods like `current()`, `key()`, `next()`, `rewind()`, and `valid()`.
      https://www.php.net/manual/en/class.iterator.php

  -
    question: >
      Which SPL interface allows objects to be accessed as arrays (e.g., `$obj['key']`)?
    answers:
      - { value: '`Traversable`', correct: false }
      - { value: '`ArrayAccess`', correct: true }
      - { value: '`Serializable`', correct: false }
      - { value: '`RecursiveIterator`', correct: false }
    help: |
      The `ArrayAccess` interface allows objects to use array syntax (e.g., `isset($obj['key'])`, `$obj['key'] = 'value'`, `unset($obj['key'])`).
      https://www.php.net/manual/en/class.arrayaccess.php

  -
    question: >
      Which SPL class provides a way to automatically load classes when they are first used?
    answers:
      - { value: '`SplFileObject`', correct: false }
      - { value: '`SplStack`', correct: false }
      - { value: '`SplAutoloadRegister`', correct: false }
      - { value: '`SplAutoload` (or functions like `spl_autoload_register`)', correct: true }
    help: |
      The `spl_autoload_register()` function (part of SPL) registers a given function as an autoloader. This function is then called when a class or interface is used that has not yet been defined.
      https://www.php.net/manual/en/function.spl-autoload-register.php

  -
    question: >
      Which SPL data structure implements a LIFO (Last-In, First-Out) behavior?
    answers:
      - { value: '`SplQueue`', correct: false }
      - { value: '`SplStack`', correct: true }
      - { value: '`SplHeap`', correct: false }
      - { value: '`SplDoublyLinkedList`', correct: false }
    help: |
      `SplStack` provides the functionality of a stack, where the last element added is the first one to be removed (LIFO).
      https://www.php.net/manual/en/class.splstack.php

  -
    question: >
      Which of the following is a new feature introduced in PHP 8.0?
    answers:
      - { value: 'Short array syntax `[]`', correct: false }
      - { value: 'Null Coalescing Operator `??`', correct: false }
      - { value: 'Named Arguments', correct: true }
      - { value: 'Type Hinting for scalar types', correct: false }
    help: |
      PHP 8.0 introduced Named Arguments, allowing arguments to be passed to a function based on their parameter name, rather than their position.
      https://www.php.net/manual/en/language.functions.named-arguments.php

  -
    question: >
      What is the purpose of the `match` expression introduced in PHP 8.0?
    answers:
      - { value: 'To perform regular expression matching on strings.', correct: false }
      - { value: 'To execute different code blocks based on a value, offering a more concise alternative to `switch`.', correct: true }
      - { value: 'To compare two values for strict equality.', correct: false }
      - { value: 'To define a new type of conditional loop.', correct: false }
    help: |
      The `match` expression is a new control flow construct in PHP 8.0, similar to `switch` but with key differences: it's an expression (returns a value), handles strict comparisons, and doesn't require `break` statements.
      https://www.php.net/manual/en/control-structures.match.php

  -
    question: |
      Which of the following is a valid use of the Nullsafe operator (`?->`) introduced in PHP 8.0?
    answers:
      - { value: '`$user?->getAddress()->getStreet();`', correct: true }
      - { value: '`$user?->name ?? "Guest";`', correct: false }
      - { value: '`$array?->[0];`', correct: false }
      - { value: '`$object?->method();` (if method is static)', correct: false }
    help: |
      The Nullsafe operator (`?->`) allows calling methods or accessing properties on an object that might be null without throwing an error. If the left-hand side of the operator evaluates to null, the entire expression evaluates to null and no further operations are performed.
      https://www.php.net/manual/en/language.operators.nullsafe.php

  -
    question: >
      What is the purpose of `#[Attribute]` in PHP 8.0?
    answers:
      - { value: 'To define a new type of class.', correct: false }
      - { value: 'To add metadata to classes, methods, properties, or functions.', correct: true }
      - { value: 'To declare a global constant.', correct: false }
      - { value: 'To mark a method as deprecated.', correct: false }
    help: |
      Attributes (also known as annotations in other languages) provide a way to add structured, machine-readable metadata to declarations in code (classes, methods, properties, functions, etc.).
      https://www.php.net/manual/en/language.attributes.php

  -
    question: >
      Which of the following is a new feature related to type hinting in PHP 8.0?
    answers:
      - { value: 'Nullable types `?Type`', correct: false }
      - { value: 'Union Types `TypeA|TypeB`', correct: true }
      - { value: 'Return type declarations', correct: false }
      - { value: 'Scalar type declarations', correct: false }
    help: |
      PHP 8.0 introduced Union Types, allowing a variable, parameter, or return type to accept values of multiple different types.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.union

  -
    question: >
      What is the primary benefit of using `readonly` properties introduced in PHP 8.1?
    answers:
      - { value: 'They can only be read, never written to, even during initialization.', correct: false }
      - { value: 'They can only be initialized once, either at declaration or in the constructor, and cannot be changed afterward.', correct: true }
      - { value: 'They are automatically serialized and deserialized.', correct: false }
      - { value: 'They are accessible only within the class where they are declared.', correct: false }
    help: |
      `readonly` properties, introduced in PHP 8.1, can only be initialized once (either at declaration or in the constructor) and cannot be modified thereafter. This ensures immutability.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly

  -
    question: >
      Which of the following is a valid `enum` definition in PHP 8.1?
    answers:
      - { value: '```php
enum Status {
    case Draft;
    case Published;
}
```', correct: true }
      - { value: '```php
class Status extends Enum {
    const Draft = 1;
    const Published = 2;
}
```', correct: false }
      - { value: '```php
interface Status {
    enum Draft;
    enum Published;
}
```', correct: false }
      - { value: '```php
abstract enum Status {
    case Draft;
    case Published;
}
```', correct: false }
    help: |
      PHP 8.1 introduced Enums, which are special classes that represent a fixed set of named values. They are defined using the `enum` keyword.
      https://www.php.net/manual/en/language.enumerations.php

  -
    question: >
      What is the purpose of `new static()` in PHP, especially in the context of inheritance?
    answers:
      - { value: 'To create a new instance of the parent class.', correct: false }
      - { value: 'To create a new instance of the class where the method is defined.', correct: false }
      - { value: 'To create a new instance of the class that the method was called on (late static binding).', correct: true }
      - { value: 'To create a new static property.', correct: false }
    help: |
      `new static()` uses Late Static Bindings, meaning it creates an instance of the class that the method was originally called on, even if the method is defined in a parent class. This is different from `new self()`, which always creates an instance of the class where `self` is defined.
      https://www.php.net/manual/en/language.oop5.late-static-bindings.php

  -
    question: >
      Which PHP 8.1 feature allows you to define a property that can only be set once, either at declaration or in the constructor?
    answers:
      - { value: '`const` properties', correct: false }
      - { value: '`final` properties', correct: false }
      - { value: '`readonly` properties', correct: true }
      - { value: '`static` properties', correct: false }
    help: |
      `readonly` properties (PHP 8.1) are immutable after their initial assignment.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly

  -
    question: >
      What does the `never` return type declaration, introduced in PHP 8.1, signify?
    answers:
      - { value: 'The function always returns `null`.', correct: false }
      - { value: 'The function never returns a value; it either throws an exception or terminates execution.', correct: true }
      - { value: 'The function returns a value that cannot be `null`.', correct: false }
      - { value: 'The function is deprecated and should not be used.', correct: false }
    help: |
      The `never` return type indicates that the function or method will not return a value. Instead, it will either throw an exception, call `die()`, `exit()`, or enter an infinite loop.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.never

  -
    question: >
      Which of the following is a new feature in PHP 8.2?
    answers:
      - { value: '`true` type', correct: true }
      - { value: '`mixed` type', correct: false }
      - { value: '`object` type', correct: false }
      - { value: '`callable` type', correct: false }
    help: |
      PHP 8.2 introduced the `true` standalone type, allowing functions to explicitly declare that they always return `true`.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.true

  -
    question: >
      What is the primary purpose of `#[AllowDynamicProperties]` attribute in PHP 8.2?
    answers:
      - { value: 'To enable dynamic method calls on an object.', correct: false }
      - { value: 'To explicitly allow dynamic properties on a class, suppressing deprecation warnings.', correct: true }
      - { value: 'To prevent any properties from being added after object instantiation.', correct: false }
      - { value: 'To define properties that can change their type at runtime.', correct: false }
    help: |
      In PHP 8.2, dynamic properties are deprecated. The `#[AllowDynamicProperties]` attribute can be used on a class to explicitly allow dynamic properties and suppress the deprecation warning.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.dynamic

  -
    question: >
      Which of the following is a new feature in PHP 8.2 related to `readonly` properties?
    answers:
      - { value: '`readonly` classes', correct: true }
      - { value: '`readonly` methods', correct: false }
      - { value: '`readonly` interfaces', correct: false }
      - { value: '`readonly` traits', correct: false }
    help: |
      PHP 8.2 introduced `readonly` classes. When a class is declared `readonly`, all its properties are implicitly `readonly`.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly-classes

  -
    question: >
      What is the effect of declaring a class as `readonly` in PHP 8.2?
    answers:
      - { value: 'All methods within the class become `final`.', correct: false }
      - { value: 'All properties within the class are implicitly `readonly`.', correct: true }
      - { value: 'The class cannot be extended.', correct: false }
      - { value: 'Objects of the class cannot be serialized.', correct: false }
    help: |
      Declaring a class `readonly` ensures that all its properties are `readonly`, meaning they can only be initialized once (in the constructor or at declaration) and cannot be modified thereafter.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly-classes

  -
    question: >
      Which of the following is a new function introduced in PHP 8.2 for sensitive parameter handling?
    answers:
      - { value: '`filter_var_array()`', correct: false }
      - { value: '`mb_str_split()`', correct: false }
      - { value: '`str_contains()`', correct: false }
      - { value: '`SensitiveParameter` attribute', correct: true }
    help: |
      PHP 8.2 introduced the `#[SensitiveParameter]` attribute. When applied to a function or method parameter, its value will be redacted from stack traces and error logs, preventing sensitive information from being exposed.
      https://www.php.net/manual/en/language.attributes.sensitiveparameter.php

  -
    question: >
      Which of the following best describes the `#[Override]` attribute introduced in PHP 8.3 (but relevant for future-proofing)?
    answers:
      - { value: 'It ensures a method is always overridden by child classes.', correct: false }
      - { value: 'It indicates that a method is intended to override a parent method, causing a compile-time error if it does not.', correct: true }
      - { value: 'It prevents a method from being overridden.', correct: false }
      - { value: 'It allows overriding private methods.', correct: false }
    help: |
      The `#[Override]` attribute (PHP 8.3) is a new feature that explicitly marks a method as intended to override a parent method. If the method does not actually override a parent method (e.g., due to a typo or parent method removal), a compile-time error is triggered, helping to prevent subtle bugs.
      https://wiki.php.net/rfc/explicit_readonly_properties#override_attribute (RFC for PHP 8.3, but good to know for certification)

  -
    question: >
      What is the primary purpose of the `__invoke()` magic method in PHP?
    answers:
      - { value: 'To allow an object to be called as a function.', correct: true }
      - { value: 'To automatically convert an object to a string.', correct: false }
      - { value: 'To handle calls to undefined methods.', correct: false }
      - { value: 'To serialize an object.', correct: false }
    help: |
      The `__invoke()` method is called when a script tries to call an object as a function.
      https://www.php.net/manual/en/language.oop5.magic.php#object.invoke

  -
    question: >
      Which magic method is called when an object is cloned?
    answers:
      - { value: '`__copy()`', correct: false }
      - { value: '`__clone()`', correct: true }
      - { value: '`__duplicate()`', correct: false }
      - { value: '`__new()`', correct: false }
    help: |
      The `__clone()` method is called when an object is cloned using the `clone` keyword. It can be used to deep copy objects or handle other post-cloning logic.
      https://www.php.net/manual/en/language.oop5.cloning.php

  -
    question: >
      What is the purpose of the `__call()` magic method?
    answers:
      - { value: 'To handle calls to undefined static methods.', correct: false }
      - { value: 'To handle calls to undefined public methods on an object.', correct: true }
      - { value: 'To intercept all method calls on an object.', correct: false }
      - { value: 'To dynamically create new methods at runtime.', correct: false }
    help: |
      The `__call()` method is triggered when invoking inaccessible (e.g., `private` or `protected`) or non-existent methods in an object context.
      https://www.php.net/manual/en/language.oop5.magic.php#object.call

  -
    question: >
      Which magic method is triggered when trying to read data from inaccessible (e.g., `private` or non-existent) properties?
    answers:
      - { value: '`__set()`', correct: false }
      - { value: '`__get()`', correct: true }
      - { value: '`__isset()`', correct: false }
      - { value: '`__unset()`', correct: false }
    help: |
      The `__get()` method is used for reading data from inaccessible properties.
      https://www.php.net/manual/en/language.oop5.magic.php#object.get

  -
    question: >
      What is the purpose of the `__sleep()` and `__wakeup()` magic methods?
    answers:
      - { value: 'To pause and resume script execution.', correct: false }
      - { value: 'To prepare an object for serialization and restore it upon unserialization.', correct: true }
      - { value: 'To control when an object is loaded into memory.', correct: false }
      - { value: 'To manage asynchronous operations.', correct: false }
    help: |
      `__sleep()` is called prior to serialization (e.g., by `serialize()`) to return an array of property names to be serialized. `__wakeup()` is called immediately after unserialization to re-establish any resources or connections.
      https://www.php.net/manual/en/language.oop5.magic.php#object.sleep

  -
    question: >
      What is the purpose of the `__debugInfo()` magic method?
    answers:
      - { value: 'To provide custom debug information when an object is inspected (e.g., by `var_dump()`).', correct: true }
      - { value: 'To log debug messages to a file.', correct: false }
      - { value: 'To enable debugging mode for a class.', correct: false }
      - { value: 'To retrieve information about the current call stack.', correct: false }
    help: |
      The `__debugInfo()` method is called when `var_dump()` is used on an object to get information that should be output. This allows the object to customize the information that is shown.
      https://www.php.net/manual/en/language.oop5.magic.php#object.debuginfo

  -
    question: >
      Which of the following is a valid way to define a constant in PHP that is accessible globally?
    answers:
      - { value: '`const MY_GLOBAL_CONST = "value";`', correct: false }
      - { value: '`define("MY_GLOBAL_CONST", "value");`', correct: true }
      - { value: '`$GLOBALS[''MY_GLOBAL_CONST''] = "value";`', correct: false }
      - { value: '`public static $MY_GLOBAL_CONST = "value";`', correct: false }
    help: |
      The `define()` function is used to define global constants. The `const` keyword is used for class constants or top-level constants in the global namespace (since PHP 5.3). However, `define()` is the traditional way for truly global, non-class-bound constants.
      https://www.php.net/manual/en/function.define.php

  -
    question: >
      What is the purpose of the `fn` keyword introduced in PHP 7.4?
    answers:
      - { value: 'To define a new type of function that can be used as a generator.', correct: false }
      - { value: 'To define short, single-expression anonymous functions (arrow functions).', correct: true }
      - { value: 'To declare a function that can only be called once.', correct: false }
      - { value: 'To create a function that automatically returns `null`.', correct: false }
    help: |
      The `fn` keyword is used to define arrow functions, which are a more concise syntax for anonymous functions that contain only a single expression. They automatically capture variables from the parent scope by value.
      https://www.php.net/manual/en/functions.arrow.php

  -
    question: >
      Which of the following is true about `strict_types=1` in PHP?
    answers:
      - { value: 'It enforces strict type checking for all PHP built-in functions.', correct: false }
      - { value: 'It applies strict type checking to scalar type declarations for function arguments and return values in the file where it is declared.', correct: true }
      - { value: 'It converts all variable types to their strict equivalents automatically.', correct: false }
      - { value: 'It prevents any implicit type conversions in the entire application.', correct: false }
    help: |
      Declaring `declare(strict_types=1);` at the top of a PHP file enforces strict type checking for scalar type declarations (int, float, string, bool) within that specific file. It means that values must exactly match the declared type, without implicit type juggling.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.strict

  -
    question: >
      What is the purpose of `yield` keyword in PHP?
    answers:
      - { value: 'To return a value from a function and terminate its execution.', correct: false }
      - { value: 'To pause function execution and return a value, allowing the function to resume later (generators).', correct: true }
      - { value: 'To include an external file into the current scope.', correct: false }
      - { value: 'To define a new type of loop.', correct: false }
    help: |
      The `yield` keyword is used in generator functions. It allows a function to return a value to the caller, but unlike `return`, it pauses the function's execution and preserves its state, allowing it to be resumed later.
      https://www.php.net/manual/en/language.generators.overview.php

  -
    question: >
      Which of the following is a valid way to define a typed property in PHP 7.4+?
    answers:
      - { value: '`public string $name;`', correct: true }
      - { value: '`public var $name: string;`', correct: false }
      - { value: '`public $name = string;`', correct: false }
      - { value: '`public $name string;`', correct: false }
    help: |
      PHP 7.4 introduced typed properties, allowing developers to declare the type of a class property directly.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.typed

  -
    question: >
      What is the purpose of `WeakMap` introduced in PHP 8.0?
    answers:
      - { value: 'To store key-value pairs where keys are strings and values are objects.', correct: false }
      - { value: 'To store key-value pairs where keys are objects, and the map does not prevent the garbage collection of the key objects.', correct: true }
      - { value: 'To create a map that can only store weak references to objects.', correct: false }
      - { value: 'To store sensitive data securely.', correct: false }
    help: |
      `WeakMap` allows you to create a map from objects to arbitrary values, without preventing the key objects from being garbage collected. If a key object is garbage collected, its entry is removed from the `WeakMap`.
      https://www.php.net/manual/en/class.weakmap.php

  -
    question: >
      Which of the following is a correct way to declare a function that accepts either an `int` or a `float` as an argument in PHP 8.0+?
    answers:
      - { value: '`function sum(int|float $number)`', correct: true }
      - { value: '`function sum(int, float $number)`', correct: false }
      - { value: '`function sum(int or float $number)`', correct: false }
      - { value: '`function sum(mixed $number)`', correct: false }
    help: |
      PHP 8.0 introduced Union Types, allowing multiple types to be specified for parameters, return values, and properties using the `|` operator.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.union

  -
    question: >
      What is the primary benefit of using the `#[Deprecated]` attribute (PHP 8.1+) compared to `@deprecated` docblock?
    answers:
      - { value: 'It automatically removes the deprecated code.', correct: false }
      - { value: 'It provides a compile-time warning/error when deprecated code is used.', correct: true }
      - { value: 'It is only for internal documentation purposes.', correct: false }
      - { value: 'It changes the behavior of the deprecated code.', correct: false }
    help: |
      The `#[Deprecated]` attribute (PHP 8.1+) provides a formal, machine-readable way to mark code as deprecated. Unlike docblock annotations, it can trigger deprecation notices at runtime when the deprecated element is used, making it more effective for signaling future removals.
      https://www.php.net/manual/en/language.attributes.php#language.attributes.deprecated

  -
    question: >
      Which of the following describes the `static` return type introduced in PHP 8.0?
    answers:
      - { value: 'It means the function returns an instance of the class it is defined in.', correct: false }
      - { value: 'It means the function returns an instance of the class that the method was called on (late static binding).', correct: true }
      - { value: 'It means the function returns a static variable.', correct: false }
      - { value: 'It means the function returns `null` if the method is called statically.', correct: false }
    help: |
      The `static` return type, introduced in PHP 8.0, indicates that the method will return an instance of the class that it was called on, leveraging Late Static Bindings. This is particularly useful in fluent interfaces or factory methods.
      https://www.php.net/manual/en/language.oop5.late-static-bindings.php

  -
    question: >
      What is the purpose of `WeakReference` introduced in PHP 7.4?
    answers:
      - { value: 'To create a strong reference to an object, preventing its garbage collection.', correct: false }
      - { value: 'To create a reference to an object that does not prevent the object from being garbage collected.', correct: true }
      - { value: 'To store a reference to a variable that can be modified by multiple functions.', correct: false }
      - { value: 'To provide a way to serialize and deserialize objects.', correct: false }
    help: |
      `WeakReference` allows you to hold a reference to an object without preventing that object from being garbage collected. If the object is garbage collected, the `WeakReference` becomes null.
      https://www.php.net/manual/en/class.weakreference.php

  -
    question: >
      Which of the following is a valid way to define a constant in an interface in PHP 8.1+?
    answers:
      - { value: '`const MY_INTERFACE_CONST = "value";`', correct: true }
      - { value: '`public $MY_INTERFACE_CONST = "value";`', correct: false }
      - { value: '`define("MY_INTERFACE_CONST", "value");`', correct: false }
      - { value: 'Interfaces cannot define constants.', correct: false }
    help: |
      Since PHP 8.1, interfaces can define constants using the `const` keyword.
      https://www.php.net/manual/en/language.oop5.interfaces.php#language.oop5.interfaces.constants

  -
    question: >
      What is the primary benefit of using the `#[Pure]` attribute (from PHP 8.3, but conceptual) in a function?
    answers:
      - { value: 'It ensures the function only uses primitive types.', correct: false }
      - { value: 'It indicates the function has no side effects and its output depends only on its inputs, allowing for potential optimizations.', correct: true }
      - { value: 'It makes the function run faster by compiling it to native code.', correct: false }
      - { value: 'It marks the function as safe for concurrent execution.', correct: false }
    help: |
      The `#[Pure]` attribute (proposed for PHP 8.3) indicates that a function is "pure" – meaning it has no side effects and its return value depends solely on its input parameters. This can enable static analysis tools and potential future optimizations.
      https://wiki.php.net/rfc/pure_functions (RFC for PHP 8.3, but good for conceptual understanding)

  -
    question: >
      Which of the following is a new feature in PHP 8.2 that affects traits?
    answers:
      - { value: 'Constants in traits', correct: false }
      - { value: '`#[AllowDynamicProperties]` attribute for traits', correct: false }
      - { value: 'Disjunctive Normal Form (DNF) Types in traits', correct: false }
      - { value: 'Deprecation of dynamic properties without `#[AllowDynamicProperties]`', correct: true }
    help: |
      While not directly a new trait *feature*, PHP 8.2 deprecated dynamic properties. If a trait adds a dynamic property to a class that doesn't explicitly allow them, it will trigger a deprecation notice unless the class or the trait itself uses `#[AllowDynamicProperties]`. This impacts how traits might be used with dynamic properties.
      https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.dynamic

  -
    question: >
      What is the purpose of the `#[ReturnTypeWillChange]` attribute (PHP 8.1+)?
    answers:
      - { value: 'To force a function to return a specific type.', correct: false }
      - { value: 'To indicate that a method''s return type signature will change in a future PHP version, suppressing certain deprecation warnings.', correct: true }
      - { value: 'To define a union return type.', correct: false }
      - { value: 'To mark a function as returning a value that can be `null`.', correct: false }
    help: |
      The `#[ReturnTypeWillChange]` attribute (PHP 8.1+) is used to suppress deprecation warnings that arise when a method in a child class or implementation of an interface has a different return type signature than its parent/interface, but the parent/interface method's return type is expected to change in a future PHP version. It's a temporary measure for forward compatibility.
      https://www.php.net/manual/en/language.attributes.php#language.attributes.returntypewillchange

  -
    question: >
      Which of the following is true about `#[AsDeprecated]` attribute in PHP 8.1+?
    answers:
      - { value: 'It is used to mark a class as abstract.', correct: false }
      - { value: 'It is used to mark a function, method, class, or property as deprecated, triggering a runtime notice upon use.', correct: true }
      - { value: 'It automatically removes the deprecated code from the codebase.', correct: false }
      - { value: 'It only works for methods, not for classes or properties.', correct: false }
    help: |
      The `#[Deprecated]` attribute (PHP 8.1+) provides a formal way to mark code as deprecated. When applied, using the marked element will trigger a `E_DEPRECATED` notice at runtime, signaling that it should no longer be used.
      https://www.php.net/manual/en/language.attributes.php#language.attributes.deprecated

  -
    question: >
      What is the purpose of the `#[NoReturn]` attribute (PHP 8.1+)?
    answers:
      - { value: 'It ensures a function always returns `null`.', correct: false }
      - { value: 'It indicates that a function will never return normally; it will always throw an exception or terminate the script.', correct: true }
      - { value: 'It prevents a function from returning any value.', correct: false }
      - { value: 'It marks a function as a generator.', correct: false }
    help: |
      The `#[NoReturn]` attribute (PHP 8.1+) is an alias for the `never` return type. It signals to static analysis tools that the annotated function or method will not return normally, but will instead always throw an exception or terminate execution (e.g., via `die()`, `exit()`).
      https://www.php.net/manual/en/language.attributes.php#language.attributes.noreturn

  -
    question: >
      Which of the following is a new feature in PHP 8.2 related to constants?
    answers:
      - { value: 'Constants in traits', correct: false }
      - { value: 'Dynamic constant names', correct: false }
      - { value: 'Constants in interfaces (introduced in 8.1)', correct: false }
      - { value: '`null`, `false`, and `true` as stand-alone types for constants', correct: true }
    help: |
      While not directly about constants *definition*, PHP 8.2 introduced `null`, `false`, and `true` as stand-alone types. This impacts type declarations for constants (and other elements) if they are used in contexts where types are declared.
      https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.true

  -
    question: >
      What is the significance of the `#[Target]` attribute when defining custom attributes in PHP 8.0+?
    answers:
      - { value: 'It specifies the target PHP version for the attribute.', correct: false }
      - { value: 'It defines which types of declarations (e.g., class, method, property) the attribute can be applied to.', correct: true }
      - { value: 'It indicates the target namespace for the attribute.', correct: false }
      - { value: 'It specifies the target value for the attribute.', correct: false }
    help: |
      When defining a custom attribute, the `#[Target]` attribute (from the `Attribute` class) is used to specify where the custom attribute can be applied (e.g., `Attribute::TARGET_CLASS`, `Attribute::TARGET_METHOD`, `Attribute::TARGET_PROPERTY`).
      https://www.php.net/manual/en/class.attribute.php#attribute.constants

  -
    question: >
      What is the purpose of the `#[Immutable]` attribute (conceptual, often used with `readonly`)?
    answers:
      - { value: 'It makes all methods of a class static.', correct: false }
      - { value: 'It ensures that an object''s state cannot be modified after its construction.', correct: true }
      - { value: 'It prevents a class from being extended.', correct: false }
      - { value: 'It makes all properties of a class private.', correct: false }
    help: |
      While not a built-in PHP attribute, the concept of `#[Immutable]` (often implemented using `readonly` properties and careful design) signifies that an object's internal state cannot be changed after it has been created. This promotes predictability and thread safety.
      (Conceptual, not a direct PHP attribute, but a common pattern in modern PHP)

  -
    question: >
      Which of the following is a characteristic of `WeakMap` in PHP 8.0?
    answers:
      - { value: 'Keys must be strings.', correct: false }
      - { value: 'Keys must be objects.', correct: true }
      - { value: 'Values must be objects.', correct: false }
      - { value: 'It prevents garbage collection of both keys and values.', correct: false }
    help: |
      In `WeakMap`, keys must be objects. The primary feature is that the map does not prevent the garbage collection of these key objects.
      https://www.php.net/manual/en/class.weakmap.php

  -
    question: >
      What is the purpose of the `#[SensitiveParameter]` attribute in PHP 8.2?
    answers:
      - { value: 'To encrypt the parameter value at runtime.', correct: false }
      - { value: 'To mark a parameter whose value should be redacted from stack traces and error logs.', correct: true }
      - { value: 'To make a parameter optional.', correct: false }
      - { value: 'To indicate that a parameter must be an object.', correct: false }
    help: |
      The `#[SensitiveParameter]` attribute (PHP 8.2) is used to prevent sensitive information (like passwords or API keys) from appearing in stack traces or error logs, enhancing security.
      https://www.php.net/manual/en/language.attributes.sensitiveparameter.php