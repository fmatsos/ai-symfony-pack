category: PHP
questions:
  -
    question: |
      Which of the following is the correct way to define a basic class in PHP 8.2?
    answers:
      - { value: 'class MyClass { }', correct: true }
      - { value: 'define class MyClass { }', correct: false }
      - { value: 'new class MyClass { }', correct: false }
      - { value: 'function MyClass { }', correct: false }
    help: |
      Classes are defined using the `class` keyword. https://www.php.net/manual/en/language.oop5.basic.php
  -
    question: |
      In PHP 8.2, which visibility keyword makes a property accessible only from within the class itself and its descendants?
    answers:
      - { value: 'public', correct: false }
      - { value: 'private', correct: false }
      - { value: 'protected', correct: true }
      - { value: 'internal', correct: false }
    help: |
      Protected properties and methods can be accessed within the class itself, and by inheriting and parent classes. https://www.php.net/manual/en/language.oop5.visibility.php
  -
    question: |
      Consider the following PHP 8.2 code snippet:

      ```php
      class User {
          public function __construct(
              public string $name,
              private int $age
          ) {}
      }

      $user = new User("Alice", 30);
      echo $user->name;
      ```

      What will be the output of this code?
    answers:
      - { value: 'Alice', correct: true }
      - { value: '30', correct: false }
      - { value: 'Fatal error: Uncaught Error: Cannot access private property User::$age', correct: false }
      - { value: 'Parse error: syntax error, unexpected ''public'' (T_PUBLIC)', correct: false }
    help: |
      PHP 8.0 introduced Constructor Property Promotion, allowing properties to be declared directly in the constructor. Public properties are accessible from outside the class. https://www.php.net/manual/en/language.oop5.decon.php#language.oop5.decon.constructor.promotion
  -
    question: |
      What is the purpose of the `final` keyword when applied to a class in PHP 8.2?
    answers:
      - { value: 'It prevents the class from being instantiated.', correct: false }
      - { value: 'It prevents the class from being extended by other classes.', correct: true }
      - { value: 'It prevents methods within the class from being overridden.', correct: false }
      - { value: 'It makes all properties within the class immutable.', correct: false }
    help: |
      If you declare a class as final, it cannot be extended. https://www.php.net/manual/en/language.oop5.final.php
  -
    question: |
      Which of the following statements about `static` methods and properties in PHP 8.2 is true?
    answers:
      - { value: 'Static methods can access non-static properties using `$this`.', correct: false }
      - { value: 'Static properties are unique to each instance of a class.', correct: false }
      - { value: 'Static methods can be called directly on the class without creating an object instance.', correct: true }
      - { value: 'Static methods must be declared as `private`.', correct: false }
    help: |
      Static properties and methods can be accessed without creating an instance of the class. https://www.php.net/manual/en/language.oop5.static.php
  -
    question: |
      Consider the following PHP 8.2 code:

      ```php
      class Animal {
          public function makeSound() {
              return "Generic animal sound";
          }
      }

      class Dog extends Animal {
          public function makeSound() {
              return "Woof!";
          }
      }

      $dog = new Dog();
      echo $dog->makeSound();
      ```

      What will be the output?
    answers:
      - { value: 'Generic animal sound', correct: false }
      - { value: 'Woof!', correct: true }
      - { value: 'Fatal error: Cannot override final method Animal::makeSound()', correct: false }
      - { value: 'Parse error: syntax error, unexpected ''extends'' (T_EXTENDS)', correct: false }
    help: |
      When a child class defines a method with the same name as a method in its parent class, it overrides the parent method. https://www.php.net/manual/en/language.oop5.inheritance.php
  -
    question: |
      In PHP 8.2, what is the difference between `self::` and `static::` when calling a static method within an inheritance hierarchy?
    answers:
      - { value: '`self::` refers to the class where the method was originally defined, while `static::` refers to the class where the method is actually called (late static binding).', correct: true }
      - { value: '`self::` is used for non-static methods, and `static::` is used for static methods.', correct: false }
      - { value: 'There is no functional difference; they are interchangeable.', correct: false }
      - { value: '`self::` is deprecated in PHP 8.2, `static::` should always be used.', correct: false }
    help: |
      `static::` provides a way to reference the class that was originally called at runtime (Late Static Binding), whereas `self::` refers to the class in which the current method was defined. https://www.php.net/manual/en/language.oop5.late-static-bindings.php
  -
    question: |
      Which of the following is true about `readonly` properties introduced in PHP 8.1 and available in 8.2?
    answers:
      - { value: 'A `readonly` property can be modified multiple times after initialization.', correct: false }
      - { value: 'A `readonly` property must be initialized at the declaration or in the constructor.', correct: true }
      - { value: 'A `readonly` property can only be of scalar types.', correct: false }
      - { value: 'A `readonly` property automatically makes the class immutable.', correct: false }
    help: |
      Readonly properties can only be initialized once, either at the declaration or in the constructor. They cannot be modified afterwards. https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly
  -
    question: |
      What is the purpose of the `__toString()` magic method in PHP 8.2?
    answers:
      - { value: 'It is called when an object is converted to a string.', correct: true }
      - { value: 'It is called when an object is cloned.', correct: false }
      - { value: 'It is called when an object is serialized.', correct: false }
      - { value: 'It is called when an object is destroyed.', correct: false }
    help: |
      The `__toString()` method allows a class to decide how it will react when it is treated as a string. https://www.php.net/manual/en/language.oop5.magic.php#object.tostring
  -
    question: |
      Which statement correctly describes an abstract class in PHP 8.2?
    answers:
      - { value: 'An abstract class can be instantiated directly.', correct: false }
      - { value: 'An abstract class must contain at least one abstract method.', correct: false }
      - { value: 'An abstract class can define both abstract and non-abstract methods.', correct: true }
      - { value: 'Methods in an abstract class must always be declared as `private`.', correct: false }
    help: |
      Abstract classes can have methods with or without an implementation. Classes defined as abstract cannot be instantiated. https://www.php.net/manual/en/language.oop5.abstract.php
  -
    question: |
      Consider the following PHP 8.2 code:

      ```php
      namespace App\Controller;

      class ProductController {
          public function show() {
              return "Product details";
          }
      }

      // In another file, in the global namespace
      // $controller = new ProductController();
      // echo $controller->show();
      ```

      How would you correctly instantiate `ProductController` from the global namespace?
    answers:
      - { value: '$controller = new ProductController();', correct: false }
      - { value: '$controller = new \ProductController();', correct: false }
      - { value: '$controller = new App\Controller\ProductController();', correct: true }
      - { value: '$controller = new \App\Controller\ProductController();', correct: true }
    help: |
      When referencing a fully qualified name, the leading backslash is optional. https://www.php.net/manual/en/language.namespaces.basics.php
  -
    question: |
      What is the primary purpose of the `use` keyword in PHP 8.2 namespaces?
    answers:
      - { value: 'To define a new namespace.', correct: false }
      - { value: 'To include external PHP files.', correct: false }
      - { value: 'To import classes, interfaces, functions, or constants from other namespaces, allowing them to be referenced by their unqualified name.', correct: true }
      - { value: 'To declare a global variable.', correct: false }
    help: |
      The `use` keyword is used to import names from other namespaces into the current namespace. https://www.php.net/manual/en/language.namespaces.importing.php
  -
    question: |
      Given the following PHP 8.2 code:

      ```php
      namespace App\Service;

      use App\Model\User as UserModel;

      class UserService {
          public function getUser() {
              $user = new UserModel();
              // ...
          }
      }
      ```

      What does `UserModel` refer to in the `UserService` class?
    answers:
      - { value: 'A class named `UserModel` in the `App\Service` namespace.', correct: false }
      - { value: 'A class named `User` in the `App\Model` namespace.', correct: true }
      - { value: 'A global class named `UserModel`.', correct: false }
      - { value: 'An interface named `UserModel`.', correct: false }
    help: |
      The `as` keyword can be used to alias imported names, allowing them to be referenced by a different name in the current namespace. https://www.php.net/manual/en/language.namespaces.importing.php#language.namespaces.importing.aliasing
  -
    question: |
      How do you explicitly refer to a global class, function, or constant from within a namespaced code in PHP 8.2?
    answers:
      - { value: 'By simply using its name (e.g., `MyGlobalClass`).', correct: false }
      - { value: 'By prefixing its name with `global\` (e.g., `global\MyGlobalClass`).', correct: false }
      - { value: 'By prefixing its name with a backslash (e.g., `\MyGlobalClass`).', correct: true }
      - { value: 'It is not possible to access global elements from a namespace.', correct: false }
    help: |
      To refer to global classes, functions or constants, you can prefix them with a backslash. https://www.php.net/manual/en/language.namespaces.global.php
  -
    question: |
      Which of the following statements about interfaces in PHP 8.2 is true?
    answers:
      - { value: 'Interfaces can contain properties.', correct: false }
      - { value: 'Interfaces can define constants.', correct: true }
      - { value: 'Methods in an interface must have a body (implementation).', correct: false }
      - { value: 'A class can implement only one interface.', correct: false }
    help: |
      Interfaces can define constants, but not properties. All methods declared in an interface must be public and do not have a body. A class can implement multiple interfaces. https://www.php.net/manual/en/language.oop5.interfaces.php
  -
    question: |
      Consider the following PHP 8.2 code:

      ```php
      interface Logger {
          public function log(string $message);
      }

      class FileLogger implements Logger {
          // ...
      }
      ```

      What must the `FileLogger` class do to correctly implement the `Logger` interface?
    answers:
      - { value: 'It must declare a private method `log(string $message)`.', correct: false }
      - { value: 'It must declare a public method `log(string $message)` with an implementation.', correct: true }
      - { value: 'It must declare a static method `log(string $message)`.', correct: false }
      - { value: 'It does not need to implement `log` if it extends another class that does.', correct: false }
    help: |
      All methods in an interface must be implemented by the class that implements the interface, and they must have the same visibility. https://www.php.net/manual/en/language.oop5.interfaces.php
  -
    question: |
      How do interfaces help simulate multiple inheritance in PHP 8.2?
    answers:
      - { value: 'By allowing a class to extend multiple parent classes.', correct: false }
      - { value: 'By allowing a class to implement multiple interfaces, thereby inheriting method signatures from all of them.', correct: true }
      - { value: 'By providing a mechanism for method overloading.', correct: false }
      - { value: 'They do not simulate multiple inheritance in any way.', correct: false }
    help: |
      PHP does not support multiple inheritance; however, interfaces allow you to define common method signatures that multiple classes can implement, simulating aspects of multiple inheritance. https://www.php.net/manual/en/language.oop5.interfaces.php
  -
    question: |
      Which of the following is an example of an anonymous function (closure) in PHP 8.2?
    answers:
      - { value: 'function myFunc() { return "Hello"; }', correct: false }
      - { value: '$func = function() { return "Hello"; };', correct: true }
      - { value: 'class MyClass { public function __invoke() { } }', correct: false }
      - { value: 'new class { public function run() { } };', correct: false }
    help: |
      Anonymous functions, also known as closures, allow the creation of functions which do not specify a name. https://www.php.net/manual/en/functions.anonymous.php
  -
    question: |
      Consider the following PHP 8.2 code:

      ```php
      $name = "Alice";
      $greet = function() use ($name) {
          echo "Hello, $name!";
      };
      $name = "Bob";
      $greet();
      ```

      What will be the output of this code?
    answers:
      - { value: 'Hello, Alice!', correct: true }
      - { value: 'Hello, Bob!', correct: false }
      - { value: 'Fatal error: Undefined variable $name', correct: false }
      - { value: 'Parse error: syntax error, unexpected ''use'' (T_USE)', correct: false }
    help: |
      Closures can inherit variables from the parent scope. Variables must be passed to the `use` construct. The values are bound at the time the closure is created. https://www.php.net/manual/en/functions.anonymous.php#functions.anonymous.variables
  -
    question: |
      What is the primary benefit of declaring an anonymous function as `static` in PHP 8.2?
    answers:
      - { value: 'It allows the closure to access `$this` from the parent scope.', correct: false }
      - { value: 'It prevents the closure from accessing `$this` and makes it slightly more performant by avoiding binding the current scope.', correct: true }
      - { value: 'It makes the closure globally accessible.', correct: false }
      - { value: 'It allows the closure to be serialized.', correct: false }
    help: |
      Static anonymous functions do not have access to `$this`. This can lead to minor performance improvements as the runtime does not need to perform checks for `$this` or bind the current scope. https://www.php.net/manual/en/functions.anonymous.php#functions.anonymous.static
  -
    question: |
      Which of the following is a valid rule for abstract methods in PHP 8.2?
    answers:
      - { value: 'Abstract methods must be declared as `private`.', correct: false }
      - { value: 'Abstract methods must be implemented in the first non-abstract child class.', correct: true }
      - { value: 'Abstract methods can have a body (implementation).', correct: false }
      - { value: 'Abstract methods can be declared as `final`.', correct: false }
    help: |
      Abstract methods are declared with the `abstract` keyword and have no implementation. They must be implemented by any non-abstract child class. Abstract methods cannot be final. https://www.php.net/manual/en/language.oop5.abstract.php
  -
    question: |
      Consider the following PHP 8.2 code:

      ```php
      function divide($a, $b) {
          try {
              if ($b === 0) {
                  throw new \InvalidArgumentException("Cannot divide by zero.");
              }
              return $a / $b;
          } catch (\InvalidArgumentException $e) {
              echo "Caught exception: " . $e->getMessage();
              return null;
          } finally {
              echo "Finally block executed.";
          }
      }

      echo divide(10, 0);
      ```

      What will be the output?
    answers:
      - { value: 'Caught exception: Cannot divide by zero.Finally block executed.', correct: false }
      - { value: 'Caught exception: Cannot divide by zero.Finally block executed.null', correct: true }
      - { value: 'Fatal error: Uncaught InvalidArgumentException: Cannot divide by zero.', correct: false }
      - { value: 'Finally block executed.Caught exception: Cannot divide by zero.', correct: false }
    help: |
      The `finally` block will always be executed, regardless of whether an exception was thrown or caught. The return value from the `catch` block will be returned after `finally` executes. https://www.php.net/manual/en/language.exceptions.php
  -
    question: |
      In PHP 8.2, how are multiple `catch` blocks evaluated when an exception is thrown?
    answers:
      - { value: 'All matching `catch` blocks are executed.', correct: false }
      - { value: 'Only the first `catch` block that matches the exception type (or a parent type) is executed.', correct: true }
      - { value: '`catch` blocks are executed in reverse order of their definition.', correct: false }
      - { value: 'Only `catch` blocks for `\Exception` are executed.', correct: false }
    help: |
      When an exception is thrown, PHP will attempt to find the first `catch` block whose type declaration matches the thrown exception. https://www.php.net/manual/en/language.exceptions.php
  -
    question: |
      To create a custom exception in PHP 8.2, what class should it extend?
    answers:
      - { value: '`\Error`', correct: false }
      - { value: '`\Throwable`', correct: false }
      - { value: '`\Exception`', correct: true }
      - { value: '`\RuntimeException`', correct: false }
    help: |
      User-defined exceptions should extend the `\Exception` class. `\Throwable` is the base interface for all throwables, including `\Error` and `\Exception`. https://www.php.net/manual/en/language.exceptions.php#language.exceptions.extending
  -
    question: |
      What is the fundamental difference between `Error` and `Exception` in PHP 8.2?
    answers:
      - { value: '`Error` represents programmatic errors that should generally not be caught, while `Exception` represents conditions that can be gracefully handled.', correct: true }
      - { value: '`Error` is used for user input validation, and `Exception` is for database issues.', correct: false }
      - { value: '`Error` can be caught, but `Exception` cannot.', correct: false }
      - { value: 'There is no difference; they are interchangeable.', correct: false }
    help: |
      `Error` classes represent internal PHP errors that should generally not be caught by userland code (e.g., `TypeError`, `ParseError`). `Exception` classes represent conditions that can be caught and handled. Both implement the `Throwable` interface. https://www.php.net/manual/en/language.errors.php7.php
  -
    question: |
      What is the primary purpose of Traits in PHP 8.2?
    answers:
      - { value: 'To enable multiple inheritance for classes.', correct: false }
      - { value: 'To reuse methods and properties in multiple independent classes, avoiding the limitations of single inheritance.', correct: true }
      - { value: 'To define abstract methods that must be implemented by child classes.', correct: false }
      - { value: 'To create singleton patterns easily.', correct: false }
    help: |
      Traits are a mechanism for code reuse in single inheritance languages like PHP. A Trait is intended to reduce limitations of single inheritance by enabling a developer to reuse sets of methods freely in several independent classes living in different class hierarchies. https://www.php.net/manual/en/language.oop5.traits.php
  -
    question: |
      Consider the following PHP 8.2 code:

      ```php
      trait A {
          public function doSomething() { echo "From A"; }
      }

      trait B {
          public function doSomething() { echo "From B"; }
      }

      class MyClass {
          use A, B {
              A::doSomething insteadof B;
              B::doSomething as doSomethingElse;
          }
      }

      $obj = new MyClass();
      $obj->doSomething();
      $obj->doSomethingElse();
      ```

      What will be the output?
    answers:
      - { value: 'From AFrom B', correct: true }
      - { value: 'From AFrom A', correct: false }
      - { value: 'From BFrom A', correct: false }
      - { value: 'Fatal error: Trait method doSomething has not been applied, because there are multiple traits defining it', correct: false }
    help: |
      When two traits insert a method with the same name, a Fatal error is generated unless the conflict is explicitly resolved using `insteadof` and `as` operators. https://www.php.net/manual/en/language.oop5.traits.php#language.oop5.traits.conflict
  -
    question: |
      Can a Trait define abstract methods in PHP 8.2?
    answers:
      - { value: 'No, Traits cannot contain abstract methods.', correct: false }
      - { value: 'Yes, and the class using the trait must implement these abstract methods.', correct: true }
      - { value: 'Yes, but only if the class using the trait is also abstract.', correct: false }
      - { value: 'Yes, but they are automatically implemented by PHP.', correct: false }
    help: |
      Traits can define abstract methods. The class using the trait must implement these abstract methods. https://www.php.net/manual/en/language.oop5.traits.php#language.oop5.traits.abstract
  -
    question: |
      What is the primary role of PHP extensions?
    answers:
      - { value: 'To provide a graphical user interface for PHP applications.', correct: false }
      - { value: 'To extend PHP\'s core functionality, often by providing interfaces to external libraries or system features written in C/C++.', correct: true }
      - { value: 'To manage PHP dependencies and packages.', correct: false }
      - { value: 'To compile PHP code into machine code.', correct: false }
    help: |
      PHP extensions are compiled libraries that extend PHP's functionality, often by providing interfaces to external libraries or system features. Examples include `mysqli` for database access, `gd` for image manipulation, or `curl` for URL transfers. https://www.php.net/manual/en/about.install.php#about.install.extension
  -
    question: |
      Which of the following is a common way to enable a PHP extension (e.g., `pdo_mysql`) after it has been compiled and installed?
    answers:
      - { value: 'Adding `require_once("pdo_mysql.php");` to your script.', correct: false }
      - { value: 'Modifying the `php.ini` file by adding `extension=pdo_mysql.so` (or `.dll` on Windows).', correct: true }
      - { value: 'Running `composer install pdo_mysql`.', correct: false }
      - { value: 'Using the `dl()` function in your PHP script.', correct: false }
    help: |
      Most extensions require an entry in the `php.ini` file to be enabled. For example, `extension=pdo_mysql.so` (or `extension=php_pdo_mysql.dll` on Windows). The `dl()` function is deprecated and removed in PHP 8.0. https://www.php.net/manual/en/install.php#install.php.extensions
  -
    question: |
      What is the Standard PHP Library (SPL) primarily used for in PHP 8.2?
    answers:
      - { value: 'Providing a set of standard functions for mathematical operations.', correct: false }
      - { value: 'Offering a collection of interfaces and classes for common data structures and iterators.', correct: true }
      - { value: 'Managing network connections and protocols.', correct: false }
      - { value: 'Handling file system operations.', correct: false }
    help: |
      The Standard PHP Library (SPL) provides a collection of interfaces and classes for common data structures (e.g., `SplStack`, `SplQueue`), iterators (e.g., `DirectoryIterator`, `ArrayIterator`), and other utilities. https://www.php.net/manual/en/book.spl.php
  -
    question: |
      Which SPL class allows you to iterate over arrays and objects using the `foreach` construct as if they were objects?
    answers:
      - { value: '`SplFixedArray`', correct: false }
      - { value: '`ArrayObject`', correct: true }
      - { value: '`SplQueue`', correct: false }
      - { value: '`RecursiveIteratorIterator`', correct: false }
    help: |
      The `ArrayObject` class provides the functionality of an array as an object. It implements `ArrayAccess`, `IteratorAggregate`, and `Serializable`. https://www.php.net/manual/en/class.arrayobject.php
  -
    question: |
      Which SPL function is commonly used to register multiple autoloading functions in PHP 8.2?
    answers:
      - { value: '`__autoload()`', correct: false }
      - { value: '`spl_autoload_register()`', correct: true }
      - { value: '`class_exists()`', correct: false }
      - { value: '`require_once()`', correct: false }
    help: |
      `spl_autoload_register()` registers the given function as an implementation of `__autoload()`. It can register multiple autoload functions, which are called in the order they are registered. `__autoload()` is deprecated. https://www.php.net/manual/en/function.spl-autoload-register.php
  -
    question: |
      Consider the following PHP 8.2 code using the `match` expression:

      ```php
      $status = 200;
      $message = match ($status) {
          200 => "OK",
          300, 301 => "Redirect",
          400 => "Bad Request",
          default => "Unknown Status",
      };
      echo $message;
      ```

      What will be the output?
    answers:
      - { value: 'OK', correct: true }
      - { value: 'Unknown Status', correct: false }
      - { value: 'Parse error: syntax error, unexpected ''=>'' (T_DOUBLE_ARROW)', correct: false }
      - { value: 'Fatal error: Uncaught MatchError', correct: false }
    help: |
      The `match` expression was introduced in PHP 8.0. It is similar to `switch` but provides stricter type checking, supports multiple expressions, and returns a value. https://www.php.net/manual/en/control-structures.match.php
  -
    question: |
      What is the purpose of the nullsafe operator (`?->`) introduced in PHP 8.0 and available in 8.2?
    answers:
      - { value: 'To assign a default value if a variable is null.', correct: false }
      - { value: 'To call a method or access a property only if the object is not null, otherwise it returns null.', correct: true }
      - { value: 'To check if a variable is null and throw an exception if it is.', correct: false }
      - { value: 'To perform a null check and then immediately cast to a non-nullable type.', correct: false }
    help: |
      The nullsafe operator allows you to chain method calls and property accesses, where the chain will short-circuit and return `null` if any element in the chain is `null`. https://www.php.net/manual/en/language.operators.nullsafe.php
  -
    question: |
      Consider the following PHP 8.2 function call:

      ```php
      function createUser(string $name, int $age, string $email = 'no-email@example.com') {
          return "User: $name, Age: $age, Email: $email";
      }

      echo createUser(age: 25, name: "Charlie");
      ```

      What will be the output?
    answers:
      - { value: 'User: Charlie, Age: 25, Email: no-email@example.com', correct: true }
      - { value: 'Fatal error: Uncaught ArgumentCountError', correct: false }
      - { value: 'Parse error: syntax error, unexpected ''name'' (T_STRING)', correct: false }
      - { value: 'User: 25, Age: Charlie, Email: no-email@example.com', correct: false }
    help: |
      Named arguments, introduced in PHP 8.0, allow passing arguments to a function based on their parameter name, rather than their position. This allows skipping optional parameters and makes the code more readable. https://www.php.net/manual/en/functions.arguments.php#functions.named-arguments
  -
    question: |
      What is the purpose of Attributes (formerly Annotations) introduced in PHP 8.0 and available in 8.2?
    answers:
      - { value: 'To define new data types.', correct: false }
      - { value: 'To add metadata to classes, methods, properties, and functions in a structured way, which can be read at runtime using Reflection.', correct: true }
      - { value: 'To replace traditional comments in code.', correct: false }
      - { value: 'To declare global constants.', correct: false }
    help: |
      Attributes provide a way to add structured, machine-readable metadata to declarations in PHP code. This metadata can then be read at runtime using the Reflection API. https://www.php.net/manual/en/language.attributes.php
  -
    question: |
      Which PHP 8.0 function (available in 8.2) efficiently checks if a string contains a specific substring?
    answers:
      - { value: '`strpos()`', correct: false }
      - { value: '`strstr()`', correct: false }
      - { value: '`str_contains()`', correct: true }
      - { value: '`in_string()`', correct: false }
    help: |
      The `str_contains()` function checks if a string contains a given substring. It returns `true` if the substring is found, `false` otherwise. https://www.php.net/manual/en/function.str-contains.php
  -
    question: |
      What is the primary use case for `WeakMap` introduced in PHP 8.0 and available in 8.2?
    answers:
      - { value: 'To store key-value pairs where keys are objects, and the map does not prevent the garbage collection of those key objects.', correct: true }
      - { value: 'To create a map with strong references to all keys and values.', correct: false }
      - { value: 'To store only scalar values as keys.', correct: false }
      - { value: 'To implement a cache that never expires its entries.', correct: false }
    help: |
      `WeakMap` allows for the creation of a map from objects to arbitrary values, without preventing the garbage collection of the objects used as keys. When a key object is garbage collected, its entry is removed from the `WeakMap`. https://www.php.net/manual/en/class.weakmap.php
  -
    question: |
      Which of the following is true about Enums (enumerations) introduced in PHP 8.1 and available in 8.2?
    answers:
      - { value: 'Enums can extend classes.', correct: false }
      - { value: 'Enums can implement interfaces.', correct: true }
      - { value: 'Enum cases are regular objects and can be instantiated with `new`.', correct: false }
      - { value: 'Enums are primarily used for type hinting scalar values.', correct: false }
    help: |
      Enums can implement interfaces, but they cannot extend classes. Enum cases are singleton objects and cannot be instantiated with `new`. They provide a way to define a set of named values. https://www.php.net/manual/en/language.enumerations.php
  -
    question: |
      What is the effect of declaring a class as `readonly` in PHP 8.2?
    answers:
      - { value: 'All properties of the class become `readonly`, and no new dynamic properties can be added.', correct: true }
      - { value: 'Only public properties become `readonly`.', correct: false }
      - { value: 'The class cannot be extended.', correct: false }
      - { value: 'The class cannot be instantiated.', correct: false }
    help: |
      Declaring a class as `readonly` automatically makes all its properties `readonly`. Additionally, it prevents the addition of dynamic properties to instances of the class. https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly-classes
  -
    question: |
      In PHP 8.2, if you want to allow dynamic properties on a class while still benefiting from other strictness checks, which attribute would you use?
    answers:
      - { value: '`#[AllowDynamicProperties]`', correct: true }
      - { value: '`#[DynamicProperties]`', correct: false }
      - { value: '`#[AllowMagicProperties]`', correct: false }
      - { value: 'Dynamic properties are always forbidden in PHP 8.2.', correct: false }
    help: |
      The `#[AllowDynamicProperties]` attribute can be used to explicitly allow dynamic properties on a class, overriding the default behavior in PHP 8.2 where dynamic properties are deprecated without it. https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.dynamic
  -
    question: |
      Which of the following is true about `fn` (arrow functions) in PHP 8.2?
    answers:
      - { value: 'They automatically capture variables from the parent scope by value.', correct: true }
      - { value: 'They require the `use` keyword to import variables from the parent scope.', correct: false }
      - { value: 'They can contain multiple expressions and statements.', correct: false }
      - { value: 'They are only used for asynchronous operations.', correct: false }
    help: |
      Arrow functions provide a more concise syntax for anonymous functions. They automatically capture variables from the parent scope by value. https://www.php.net/manual/en/functions.arrow.php
  -
    question: |
      What is the purpose of the `__debugInfo()` magic method in PHP 8.2?
    answers:
      - { value: 'It is called when `var_dump()` or `print_r()` is used on an object, allowing custom debug information to be displayed.', correct: true }
      - { value: 'It is used to log errors to a file.', correct: false }
      - { value: 'It provides information about the object\'s memory usage.', correct: false }
      - { value: 'It is called when an object is serialized for debugging purposes.', correct: false }
    help: |
      The `__debugInfo()` method is called when `var_dump()` or `print_r()` is used on an object. This can be useful if you want to hide some properties or show others that are computed. https://www.php.net/manual/en/language.oop5.magic.php#object.debuginfo
  -
    question: |
      Which PHP 8.1 function (available in 8.2) determines if an array is a list (i.e., its keys are 0, 1, 2... in order)?
    answers:
      - { value: '`is_array_list()`', correct: false }
      - { value: '`array_is_list()`', correct: true }
      - { value: '`array_keys_sequential()`', correct: false }
      - { value: '`array_is_indexed()`', correct: false }
    help: |
      The `array_is_list()` function returns `true` if the array is a list, `false` otherwise. An array is considered a list if its keys are 0, 1, 2, ... in that order. https://www.php.net/manual/en/function.array-is-list.php
  -
    question: |
      In PHP 8.2, which functions are used to ensure that all buffered changes to a file's data and/or metadata are written to the underlying storage device?
    answers:
      - { value: '`fclose()` and `fflush()`', correct: false }
      - { value: '`fsync()` and `fdatasync()`', correct: true }
      - { value: '`file_put_contents()` and `file_get_contents()`', correct: false }
      - { value: '`sync_file()` and `sync_data()`', correct: false }
    help: |
      `fsync()` commits all buffered changes to a file (data and metadata) to disk. `fdatasync()` is similar but only commits data, not necessarily metadata. These functions are useful for ensuring data integrity. https://www.php.net/manual/en/function.fsync.php, https://www.php.net/manual/en/function.fdatasync.php
  -
    question: |
      What is the significance of `true` being a standalone type in PHP 8.2?
    answers:
      - { value: 'It allows functions to return only `true` and no other boolean value.', correct: false }
      - { value: 'It means `true` can now be used as a standalone type declaration for parameters and return types, distinct from `bool`.', correct: true }
      - { value: 'It implies that `false` is no longer a valid boolean value.', correct: false }
      - { value: 'It enables automatic type coercion of any value to `true`.', correct: false }
    help: |
      In PHP 8.2, `true` is a standalone type, meaning you can use `true` as a type declaration. This is useful for functions that are guaranteed to return `true` on success and nothing else. https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.union.true
  -
    question: |
      What happens if you try to assign a dynamic property to an object of a class that does not have the `#[AllowDynamicProperties]` attribute in PHP 8.2?
    answers:
      - { value: 'A fatal error is thrown.', correct: false }
      - { value: 'A deprecation warning is issued.', correct: true }
      - { value: 'The dynamic property is silently ignored.', correct: false }
      - { value: 'The object is automatically converted to an `stdClass`.', correct: false }
    help: |
      In PHP 8.2, dynamic properties are deprecated. Assigning a dynamic property to an object of a class that does not have the `#[AllowDynamicProperties]` attribute will issue a deprecation warning. In PHP 9.0, this will become a `FatalError`. https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.dynamic
  -
    question: |
      Which new function in PHP 8.2 simplifies the execution of prepared statements with `mysqli`?
    answers:
      - { value: '`mysqli_query_prepared()`', correct: false }
      - { value: '`mysqli_execute_query()`', correct: true }
      - { value: '`mysqli_run_statement()`', correct: false }
      - { value: '`mysqli_prepare_and_execute()`', correct: false }
    help: |
      The `mysqli_execute_query()` function, introduced in PHP 8.2, prepares, binds, executes, and fetches results from a statement in a single call, simplifying common use cases. https://www.php.net/manual/en/mysqli.execute-query.php
  -
    question: |
      In PHP 8.2, which new `curl` function allows upgrading a request to a different protocol (e.g., HTTP/1.1 to WebSockets)?
    answers:
      - { value: '`curl_set_protocol()`', correct: false }
      - { value: '`curl_upgrade_protocol()`', correct: false }
      - { value: '`curl_upgraderequest()`', correct: true }
      - { value: '`curl_negotiate_protocol()`', correct: false }
    help: |
      The `curl_upgraderequest()` function, new in PHP 8.2, allows a cURL handle to upgrade a request to a different protocol, such as upgrading an HTTP/1.1 request to a WebSocket connection. https://www.php.net/manual/en/function.curl-upgraderequest.php
  -
    question: |
      What is the purpose of the `__invoke()` magic method in PHP 8.2?
    answers:
      - { value: 'It is called when an object is treated as a function.', correct: true }
      - { value: 'It is called when an object is created.', correct: false }
      - { value: 'It is called when an object is serialized.', correct: false }
      - { value: 'It is called when an object is converted to a string.', correct: false }
    help: |
      The `__invoke()` method is called when a script tries to call an object as a function. https://www.php.net/manual/en/language.oop5.magic.php#object.invoke
  -
    question: |
      Which of the following is a valid way to define a constant within a class in PHP 8.2?
    answers:
      - { value: '`const MY_CONSTANT = "value";`', correct: true }
      - { value: '`define("MY_CONSTANT", "value");`', correct: false }
      - { value: '`public static $MY_CONSTANT = "value";`', correct: false }
      - { value: '`var MY_CONSTANT = "value";`', correct: false }
    help: |
      Class constants are defined using the `const` keyword. https://www.php.net/manual/en/language.oop5.constants.php
  -
    question: |
      What is the correct way to access a class constant from outside the class in PHP 8.2?
    answers:
      - { value: '`MyClass::MY_CONSTANT`', correct: true }
      - { value: '`MyClass->MY_CONSTANT`', correct: false }
      - { value: '`MyClass::constant(MY_CONSTANT)`', correct: false }
      - { value: '`$MyClass::MY_CONSTANT`', correct: false }
    help: |
      Class constants are accessed using the `::` operator. https://www.php.net/manual/en/language.oop5.constants.php
  -
    question: |
      In PHP 8.2, what is the purpose of the `__clone()` magic method?
    answers:
      - { value: 'It is called automatically when an object is duplicated using the `clone` keyword.', correct: true }
      - { value: 'It is used to create a new instance of a class without calling the constructor.', correct: false }
      - { value: 'It is called when an object is destroyed.', correct: false }
      - { value: 'It is used for deep copying objects, including their properties and nested objects.', correct: false }
    help: |
      When an object is cloned, PHP will perform a shallow copy of all of the object's properties. If the `__clone()` method is defined, then the newly created object's `__clone()` method will be called. https://www.php.net/manual/en/language.oop5.cloning.php
  -
    question: |
      Which of the following describes a valid use case for the `instanceof` operator in PHP 8.2?
    answers:
      - { value: 'To check if a variable is an array.', correct: false }
      - { value: 'To determine if an object is an instance of a particular class or implements a specific interface.', correct: true }
      - { value: 'To compare the values of two objects.', correct: false }
      - { value: 'To check if a class exists.', correct: false }
    help: |
      The `instanceof` operator is used to determine if a PHP variable is an instantiated object of a certain class or a class that inherits from it, or an object that implements a certain interface. https://www.php.net/manual/en/language.operators.type.php
  -
    question: |
      What is the correct way to declare a method that must be implemented by child classes, but without providing an implementation in the parent class in PHP 8.2?
    answers:
      - { value: '`public function myMethod();`', correct: false }
      - { value: '`abstract public function myMethod();`', correct: true }
      - { value: '`final public function myMethod();`', correct: false }
      - { value: '`static public function myMethod();`', correct: false }
    help: |
      Abstract methods are declared with the `abstract` keyword and have no implementation. They must be implemented by any non-abstract child class. https://www.php.net/manual/en/language.oop5.abstract.php
  -
    question: |
      In PHP 8.2, what does the `parent::` keyword refer to?
    answers:
      - { value: 'The current class itself.', correct: false }
      - { value: 'The class that extended the current class.', correct: false }
      - { value: 'The parent class of the current class.', correct: true }
      - { value: 'The global namespace.', correct: false }
    help: |
      The `parent::` keyword is used to refer to the parent class of the current class, typically for calling overridden methods or accessing parent static properties. https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php
  -
    question: |
      Which of the following is a key feature of PHP 8.2's strict types mode?
    answers:
      - { value: 'It automatically converts values to the declared type without any warnings.', correct: false }
      - { value: 'It enforces strict type checking for scalar type declarations, throwing a `TypeError` if types do not match exactly.', correct: true }
      - { value: 'It only applies to return type declarations, not parameter types.', correct: false }
      - { value: 'It is enabled by default in all PHP 8.2 scripts.', correct: false }
    help: |
      Strict mode for type declarations ensures that values strictly adhere to the declared types. It is enabled per-file using `declare(strict_types=1);`. https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.strict
  -
    question: |
      What is the purpose of the `#[Deprecated]` attribute in PHP 8.2?
    answers:
      - { value: 'To prevent a method or property from being used.', correct: false }
      - { value: 'To mark a class, method, property, or function as deprecated, indicating it should no longer be used and may be removed in future versions.', correct: true }
      - { value: 'To automatically remove deprecated code during compilation.', correct: false }
      - { value: 'To generate a fatal error when deprecated code is called.', correct: false }
    help: |
      The `#[Deprecated]` attribute can be used to mark functions, methods, classes, properties, and class constants as deprecated. This generates a deprecation notice when the deprecated element is used. https://www.php.net/manual/en/language.attributes.php#language.attributes.deprecated
  -
    question: |
      Which of the following best describes the purpose of the `__serialize()` and `__unserialize()` magic methods in PHP 8.2?
    answers:
      - { value: 'They are used for converting objects to JSON and back.', correct: false }
      - { value: 'They provide custom serialization and unserialization logic for objects, replacing `Serializable` interface in most cases.', correct: true }
      - { value: 'They are used for debugging object states.', correct: false }
      - { value: 'They automatically encrypt and decrypt object data.', correct: false }
    help: |
      `__serialize()` and `__unserialize()` were introduced in PHP 7.4 as an alternative to the `Serializable` interface, providing more control over the serialization process. They are fully supported in PHP 8.2. https://www.php.net/manual/en/language.oop5.magic.php#object.serialize
  -
    question: |
      What is the primary advantage of using `WeakReference` in PHP 8.2?
    answers:
      - { value: 'It allows objects to be stored in arrays without consuming memory.', correct: false }
      - { value: 'It provides a way to hold a reference to an object without preventing its garbage collection.', correct: true }
      - { value: 'It makes all object properties immutable.', correct: false }
      - { value: 'It automatically clones objects when they are assigned.', correct: false }
    help: |
      `WeakReference` allows you to keep a reference to an object that does not prevent the object from being garbage collected. This is useful for implementing caches or object maps where you don't want the reference to keep the object alive. https://www.php.net/manual/en/class.weakreference.php
  -
    question: |
      In PHP 8.2, what is the significance of the `#[SensitiveParameter]` attribute?
    answers:
      - { value: 'It encrypts the parameter value automatically.', correct: false }
      - { value: 'It prevents the parameter value from being logged or displayed in stack traces and error reports.', correct: true }
      - { value: 'It makes the parameter read-only.', correct: false }
      - { value: 'It forces the parameter to be passed by reference.', correct: false }
    help: |
      The `#[SensitiveParameter]` attribute can be used to mark parameters that contain sensitive information (e.g., passwords, API keys). Values passed to such parameters will be redacted in stack traces and error reports. https://www.php.net/manual/en/language.attributes.php#language.attributes.sensitiveparameter
  -
    question: |
      Which of the following SPL classes represents a doubly linked list?
    answers:
      - { value: '`SplStack`', correct: false }
      - { value: '`SplQueue`', correct: false }
      - { value: '`SplDoublyLinkedList`', correct: true }
      - { value: '`SplHeap`', correct: false }
    help: |
      The `SplDoublyLinkedList` class provides the functionality of a doubly linked list. It can be used as a stack, queue, or general-purpose list. https://www.php.net/manual/en/class.spldoublylinkedlist.php
  -
    question: |
      What is the primary use of `SplFileObject` in PHP 8.2?
    answers:
      - { value: 'To represent a file system directory.', correct: false }
      - { value: 'To provide an object-oriented interface for file operations, including reading, writing, and iterating over lines.', correct: true }
      - { value: 'To manage file permissions.', correct: false }
      - { value: 'To compress and decompress files.', correct: false }
    help: |
      The `SplFileObject` class offers an object-oriented way to interact with files, providing methods for reading, writing, seeking, and iterating over lines. https://www.php.net/manual/en/class.splfileobject.php
  -
    question: |
      Which SPL interface should a class implement to allow its objects to be iterated over using `foreach`?
    answers:
      - { value: '`Countable`', correct: false }
      - { value: '`ArrayAccess`', correct: false }
      - { value: '`IteratorAggregate` or `Iterator`', correct: true }
      - { value: '`Serializable`', correct: false }
    help: |
      Classes that want to be iterable with `foreach` must implement either the `Iterator` interface (for direct iteration) or the `IteratorAggregate` interface (to provide an `Iterator` object). https://www.php.net/manual/en/language.oop5.iterations.php
  -
    question: |
      What is the purpose of the `Countable` interface in SPL?
    answers:
      - { value: 'To allow objects to be used as array keys.', correct: false }
      - { value: 'To enable objects to be counted using the `count()` function.', correct: true }
      - { value: 'To define a fixed size for an object.', correct: false }
      - { value: 'To track the number of times an object has been accessed.', correct: false }
    help: |
      The `Countable` interface allows an object to be used with the `count()` function. It requires the implementation of the `count()` method. https://www.php.net/manual/en/class.countable.php
  -
    question: |
      Which of the following is a correct way to define a constant in PHP 8.2 at the global scope?
    answers:
      - { value: '`const MY_GLOBAL_CONSTANT = "value";`', correct: true }
      - { value: '`define("MY_GLOBAL_CONSTANT", "value");`', correct: true }
      - { value: '`$MY_GLOBAL_CONSTANT = "value";`', correct: false }
      - { value: '`global MY_GLOBAL_CONSTANT = "value";`', correct: false }
    help: |
      Global constants can be defined using the `const` keyword (since PHP 5.3) or the `define()` function. https://www.php.net/manual/en/language.constants.php
  -
    question: |
      In PHP 8.2, what is the default behavior for dynamic properties on classes without the `#[AllowDynamicProperties]` attribute?
    answers:
      - { value: 'They are silently ignored.', correct: false }
      - { value: 'A `TypeError` is thrown.', correct: false }
      - { value: 'A deprecation warning is issued.', correct: true }
      - { value: 'They are automatically converted to private properties.', correct: false }
    help: |
      As of PHP 8.2, dynamic properties are deprecated. Assigning a dynamic property to a class without the `#[AllowDynamicProperties]` attribute will issue a deprecation warning. https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.dynamic
  -
    question: |
      Which PHP 8.2 feature allows for more concise and readable conditional assignments?
    answers:
      - { value: 'Ternary operator (`?:`)', correct: false }
      - { value: 'Null coalescing operator (`??`)', correct: true }
      - { value: 'Spaceship operator (`<=>`)', correct: false }
      - { value: 'Elvis operator (`?:`)', correct: false }
    help: |
      The null coalescing operator (`??`), introduced in PHP 7.0, returns its first operand if it exists and is not `null`; otherwise, it returns its second operand. This is a common pattern for providing default values. https://www.php.net/manual/en/language.operators.comparison.php#language.operators.comparison.coalesce
  -
    question: |
      What is the primary purpose of the `throw` expression introduced in PHP 8.0 and available in 8.2?
    answers:
      - { value: 'To define a new exception class.', correct: false }
      - { value: 'To re-throw an exception from a `catch` block.', correct: false }
      - { value: 'To allow `throw` to be used in contexts where only an expression is allowed, such as arrow functions or the null coalescing operator.', correct: true }
      - { value: 'To silently suppress exceptions.', correct: false }
    help: |
      The `throw` keyword can now be used as an expression, meaning it can be used in contexts where only an expression is allowed, such as in arrow functions, the null coalescing operator, or ternary operations. https://www.php.net/manual/en/language.exceptions.php#language.exceptions.throw-expression
  -
    question: |
      Which of the following is a valid way to define a union type for a function parameter in PHP 8.2?
    answers:
      - { value: '`function myFunc(string|int $param)`', correct: true }
      - { value: '`function myFunc(string or int $param)`', correct: false }
      - { value: '`function myFunc(string, int $param)`', correct: false }
      - { value: '`function myFunc(mixed $param)`', correct: false }
    help: |
      Union types, introduced in PHP 8.0, allow a variable to accept values of multiple different types. They are declared using the `|` separator. https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.union
  -
    question: |
      What is the purpose of the `#[ReturnTypeWillChange]` attribute in PHP 8.2?
    answers:
      - { value: 'To force a function to return a specific type.', correct: false }
      - { value: 'To indicate that a method\'s return type signature will change in a future PHP version, suppressing deprecation warnings for incompatible return types in overridden methods.', correct: true }
      - { value: 'To define a union type for the return value.', correct: false }
      - { value: 'To make a method return `void`.', correct: false }
    help: |
      The `#[ReturnTypeWillChange]` attribute is used to suppress deprecation warnings when a method in a child class overrides a method in a parent class or implements an interface method, and the return type signature is incompatible, but the parent/interface method's return type is expected to change in a future PHP version. https://www.php.net/manual/en/language.attributes.php#language.attributes.returntypewillchange
  -
    question: |
      Which of the following is true about the `#[Pure]` attribute (from external libraries, but conceptually relevant for PHP 8.2)?
    answers:
      - { value: 'It indicates that a function has side effects.', correct: false }
      - { value: 'It indicates that a function is deterministic and has no side effects, making it safe to optimize or memoize.', correct: true }
      - { value: 'It is a built-in PHP attribute that forces strict type checking.', correct: false }
      - { value: 'It is used to declare abstract methods.', correct: false }
    help: |
      While `#[Pure]` is not a built-in PHP attribute, it is a common attribute used by static analysis tools (like PHPStan) to indicate that a function is "pure" (deterministic and without side effects), which helps in code analysis and optimization. (Conceptual question, not directly from PHP manual, but common in Symfony/PHP ecosystem). https://phpstan.org/blog/what-is-a-pure-function
  -
    question: |
      What is the purpose of the `#[Immutable]` attribute (from external libraries, but conceptually relevant for PHP 8.2)?
    answers:
      - { value: 'It makes all properties of a class mutable.', correct: false }
      - { value: 'It indicates that an object, once created, cannot be changed, meaning all its properties are effectively read-only after construction.', correct: true }
      - { value: 'It forces a class to be abstract.', correct: false }
      - { value: 'It allows dynamic properties to be added to a class.', correct: false }
    help: |
      Similar to `#[Pure]`, `#[Immutable]` is a common attribute used by static analysis tools (e.g., from `doctrine/annotations` or `symfony/property-info`) to mark classes as immutable, meaning their state cannot change after construction. (Conceptual question, not directly from PHP manual, but common in Symfony/PHP ecosystem). https://symfony.com/doc/current/components/property_info.html#immutable-objects
  -
    question: |
      In PHP 8.2, what is the behavior of the `str_starts_with()` function?
    answers:
      - { value: 'It checks if a string ends with a specific substring.', correct: false }
      - { value: 'It checks if a string contains a specific substring at any position.', correct: false }
      - { value: 'It checks if a string begins with a specific substring.', correct: true }
      - { value: 'It returns the starting position of a substring in a string.', correct: false }
    help: |
      The `str_starts_with()` function, introduced in PHP 8.0, checks if a string begins with a given substring. https://www.php.net/manual/en/function.str-starts-with.php
  -
    question: |
      Which PHP 8.0 function (available in 8.2) is used to check if a string ends with a specific substring?
    answers:
      - { value: '`str_ends_with()`', correct: true }
      - { value: '`substr_compare()`', correct: false }
      - { value: '`str_contains()`', correct: false }
      - { value: '`str_finish_with()`', correct: false }
    help: |
      The `str_ends_with()` function, introduced in PHP 8.0, checks if a string ends with a given substring. https://www.php.net/manual/en/function.str-ends-with.php
  -
    question: |
      What is the purpose of the `#[Override]` attribute introduced in PHP 8.3 (but important for understanding modern PHP development, even if not strictly 8.2)?
    answers:
      - { value: 'It forces a method to be overridden by child classes.', correct: false }
      - { value: 'It ensures that a method in a child class is indeed overriding a method from a parent class or implemented interface, leading to a compile-time error if it is not.', correct: true }
      - { value: 'It makes a method `final`.', correct: false }
      - { value: 'It allows a method to be overloaded with different signatures.', correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a compile-time check that ensures a method is actually overriding a parent method or implementing an interface method. If it's not, a compile-time error is thrown. (Note: While introduced in 8.3, it's a key modern PHP concept relevant for certification prep). https://www.php.net/manual/en/language.attributes.php#language.attributes.override
  -
    question: |
      Which of the following is a new feature related to class constants in PHP 8.2?
    answers:
      - { value: 'Constants can now be declared as `private`.', correct: false }
      - { value: 'Constants can now be declared as `readonly`.', correct: false }
      - { value: 'Constants can now be declared as `final`.', correct: true }
      - { value: 'Constants can now be overridden in child classes without restriction.', correct: false }
    help: |
      In PHP 8.2, class constants can be declared as `final`, preventing them from being overridden in child classes. https://www.php.net/manual/en/language.oop5.constants.php#language.oop5.constants.final
  -
    question: |
      What is the behavior of the `mysqli_fetch_column()` function introduced in PHP 8.1 (available in 8.2)?
    answers:
      - { value: 'It fetches an entire row as an associative array.', correct: false }
      - { value: 'It fetches a single column from the next row of a result set.', correct: true }
      - { value: 'It fetches all columns from all rows as a multi-dimensional array.', correct: false }
      - { value: 'It fetches the number of columns in a result set.', correct: false }
    help: |
      The `mysqli_fetch_column()` function, introduced in PHP 8.1, fetches a single column from the next row of a result set. This is useful when you only need one value from a query. https://www.php.net/manual/en/mysqli-result.fetch-column.php
  -
    question: |
      Which of the following is true regarding `null` as a standalone type in PHP 8.2?
    answers:
      - { value: '`null` can be used as a standalone type declaration for parameters and return types.', correct: true }
      - { value: '`null` can only be used in union types, not as a standalone type.', correct: false }
      - { value: 'Declaring a type as `null` makes it nullable by default.', correct: false }
      - { value: 'The `null` type is deprecated in PHP 8.2.', correct: false }
    help: |
      In PHP 8.2, `null` is a standalone type, meaning you can use `null` as a type declaration. This is useful for functions that are guaranteed to return `null` (e.g., a function that only has side effects and no meaningful return value). https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.union.null
  -
    question: |
      What is the primary purpose of the `#[AllowDynamicProperties]` attribute in PHP 8.2?
    answers:
      - { value: 'To make all properties of a class dynamic.', correct: false }
      - { value: 'To explicitly permit the use of dynamic properties on a class, suppressing the deprecation warning introduced in PHP 8.2.', correct: true }
      - { value: 'To convert all existing properties to dynamic properties.', correct: false }
      - { value: 'To prevent any properties from being added to an object after construction.', correct: false }
    help: |
      The `#[AllowDynamicProperties]` attribute allows you to explicitly opt-in to dynamic properties for a class, which are otherwise deprecated in PHP 8.2. https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.dynamic
  -
    question: |
      Which of the following is true about the `readonly` keyword when applied to a class in PHP 8.2?
    answers:
      - { value: 'It makes all properties of the class `readonly` by default.', correct: true }
      - { value: 'It prevents the class from being extended.', correct: false }
      - { value: 'It only affects public properties.', correct: false }
      - { value: 'It allows properties to be modified only within the constructor.', correct: false }
    help: |
      When a class is declared `readonly`, all its properties are implicitly `readonly`. This means they can only be initialized once (at declaration or in the constructor) and cannot be modified afterwards. https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly-classes
  -
    question: |
      In PHP 8.2, what is the main benefit of using `enum`s over class constants for a fixed set of named values?
    answers:
      - { value: 'Enums allow for dynamic values that can change at runtime.', correct: false }
      - { value: 'Enums provide type safety and allow for methods to be associated with individual cases, making them more robust and expressive.', correct: true }
      - { value: 'Enums are significantly faster to access than class constants.', correct: false }
      - { value: 'Enums can be used directly in arithmetic operations.', correct: false }
    help: |
      Enums, introduced in PHP 8.1, provide type-safe enumerations. Unlike class constants, enum cases are objects, allowing for methods, and they can be type-hinted, providing better type safety and expressiveness. https://www.php.net/manual/en/language.enumerations.php
  -
    question: |
      Which new function in PHP 8.2 allows fetching the value of an `enum` case?
    answers:
      - { value: '`enum_value()`', correct: false }
      - { value: '`enum->value` (property access)', correct: true }
      - { value: '`get_enum_value()`', correct: false }
      - { value: '`enum::value()`', correct: false }
    help: |
      For backed enums, the value can be accessed via the `value` property (e.g., `MyEnum::Case->value`). For pure enums, there is no associated scalar value. https://www.php.net/manual/en/language.enumerations.php#language.enumerations.backed
  -
    question: |
      What is the purpose of the `#[Override]` attribute in PHP 8.3 (relevant for modern PHP practices)?
    answers:
      - { value: 'It forces a method to be overridden by child classes.', correct: false }
      - { value: 'It ensures that a method in a child class is indeed overriding a method from a parent class or implemented interface, leading to a compile-time error if it is not.', correct: true }
      - { value: 'It makes a method `final`.', correct: false }
      - { value: 'It allows a method to be overloaded with different signatures.', correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a compile-time check that ensures a method is actually overriding a parent method or implementing an interface method. If it's not, a compile-time error is thrown. (Note: While introduced in 8.3, it's a key modern PHP concept relevant for certification prep). https://www.php.net/manual/en/language.attributes.php#language.attributes.override
  -
    question: |
      Which of the following is a new feature related to class constants in PHP 8.2?
    answers:
      - { value: 'Constants can now be declared as `private`.', correct: false }
      - { value: 'Constants can now be declared as `readonly`.', correct: false }
      - { value: 'Constants can now be declared as `final`.', correct: true }
      - { value: 'Constants can now be overridden in child classes without restriction.', correct: false }
    help: |
      In PHP 8.2, class constants can be declared as `final`, preventing them from being overridden in child classes. https://www.php.net/manual/en/language.oop5.constants.php#language.oop5.constants.final
  -
    question: |
      What is the behavior of the `mysqli_fetch_column()` function introduced in PHP 8.1 (available in 8.2)?
    answers:
      - { value: 'It fetches an entire row as an associative array.', correct: false }
      - { value: 'It fetches a single column from the next row of a result set.', correct: true }
      - { value: 'It fetches all columns from all rows as a multi-dimensional array.', correct: false }
      - { value: 'It fetches the number of columns in a result set.', correct: false }
    help: |
      The `mysqli_fetch_column()` function, introduced in PHP 8.1, fetches a single column from the next row of a result set. This is useful when you only need one value from a query. https://www.php.net/manual/en/mysqli-result.fetch-column.php
  -
    question: |
      Which of the following is true regarding `null` as a standalone type in PHP 8.2?
    answers:
      - { value: '`null` can be used as a standalone type declaration for parameters and return types.', correct: true }
      - { value: '`null` can only be used in union types, not as a standalone type.', correct: false }
      - { value: 'Declaring a type as `null` makes it nullable by default.', correct: false }
      - { value: 'The `null` type is deprecated in PHP 8.2.', correct: false }
    help: |
      In PHP 8.2, `null` is a standalone type, meaning you can use `null` as a type declaration. This is useful for functions that are guaranteed to return `null` (e.g., a function that only has side effects and no meaningful return value). https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.union.null
  -
    question: |
      What is the primary purpose of the `#[AllowDynamicProperties]` attribute in PHP 8.2?
    answers:
      - { value: 'To make all properties of a class dynamic.', correct: false }
      - { value: 'To explicitly permit the use of dynamic properties on a class, suppressing the deprecation warning introduced in PHP 8.2.', correct: true }
      - { value: 'To convert all existing properties to dynamic properties.', correct: false }
      - { value: 'To prevent any properties from being added to an object after construction.', correct: false }
    help: |
      The `#[AllowDynamicProperties]` attribute allows you to explicitly opt-in to dynamic properties for a class, which are otherwise deprecated in PHP 8.2. https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.dynamic
  -
    question: |
      Which of the following is true about the `readonly` keyword when applied to a class in PHP 8.2?
    answers:
      - { value: 'It makes all properties of the class `readonly` by default.', correct: true }
      - { value: 'It prevents the class from being extended.', correct: false }
      - { value: 'It only affects public properties.', correct: false }
      - { value: 'It allows properties to be modified only within the constructor.', correct: false }
    help: |
      When a class is declared `readonly`, all its properties are implicitly `readonly`. This means they can only be initialized once (at declaration or in the constructor) and cannot be modified afterwards. https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly-classes
  -
    question: |
      In PHP 8.2, what is the main benefit of using `enum`s over class constants for a fixed set of named values?
    answers:
      - { value: 'Enums allow for dynamic values that can change at runtime.', correct: false }
      - { value: 'Enums provide type safety and allow for methods to be associated with individual cases, making them more robust and expressive.', correct: true }
      - { value: 'Enums are significantly faster to access than class constants.', correct: false }
      - { value: 'Enums can be used directly in arithmetic operations.', correct: false }
    help: |
      Enums, introduced in PHP 8.1, provide type-safe enumerations. Unlike class constants, enum cases are objects, allowing for methods, and they can be type-hinted, providing better type safety and expressiveness. https://www.php.net/manual/en/language.enumerations.php
  -
    question: |
      Which new function in PHP 8.2 allows fetching the value of an `enum` case?
    answers:
      - { value: '`enum_value()`', correct: false }
      - { value: '`enum->value` (property access)', correct: true }
      - { value: '`get_enum_value()`', correct: false }
      - { value: '`enum::value()`', correct: false }
    help: |
      For backed enums, the value can be accessed via the `value` property (e.g., `MyEnum::Case->value`). For pure enums, there is no associated scalar value. https://www.php.net/manual/en/language.enumerations.php#language.enumerations.backed
  -
    question: |
      What is the primary purpose of the `#[AllowDynamicProperties]` attribute in PHP 8.2?
    answers:
      - { value: 'To make all properties of a class dynamic.', correct: false }
      - { value: 'To explicitly permit the use of dynamic properties on a class, suppressing the deprecation warning introduced in PHP 8.2.', correct: true }
      - { value: 'To convert all existing properties to dynamic properties.', correct: false }
      - { value: 'To prevent any properties from being added to an object after construction.', correct: false }
    help: |
      The `#[AllowDynamicProperties]` attribute allows you to explicitly opt-in to dynamic properties for a class, which are otherwise deprecated in PHP 8.2. https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.dynamic
  -
    question: |
      Which of the following is true about the `readonly` keyword when applied to a class in PHP 8.2?
    answers:
      - { value: 'It makes all properties of the class `readonly` by default.', correct: true }
      - { value: 'It prevents the class from being extended.', correct: false }
      - { value: 'It only affects public properties.', correct: false }
      - { value: 'It allows properties to be modified only within the constructor.', correct: false }
    help: |
      When a class is declared `readonly`, all its properties are implicitly `readonly`. This means they can only be initialized once (at declaration or in the constructor) and cannot be modified afterwards. https://www.php.net/manual/en/language.oop5.properties.php#language.oop5.properties.readonly-classes
  -
    question: |
      In PHP 8.2, what is the main benefit of using `enum`s over class constants for a fixed set of named values?
    answers:
      - { value: 'Enums allow for dynamic values that can change at runtime.', correct: false }
      - { value: 'Enums provide type safety and allow for methods to be associated with individual cases, making them more robust and expressive.', correct: true }
      - { value: 'Enums are significantly faster to access than class constants.', correct: false }
      - { value: 'Enums can be used directly in arithmetic operations.', correct: false }
    help: |
      Enums, introduced in PHP 8.1, provide type-safe enumerations. Unlike class constants, enum cases are objects, allowing for methods, and they can be type-hinted, providing better type safety and expressiveness. https://www.php.net/manual/en/language.enumerations.php
  -
    question: |
      Which new function in PHP 8.2 allows fetching the value of an `enum` case?
    answers:
      - { value: '`enum_value()`', correct: false }
      - { value: '`enum->value` (property access)', correct: true }
      - { value: '`get_enum_value()`', correct: false }
      - { value: '`enum::value()`', correct: false }
    help: |
      For backed enums, the value can be accessed via the `value` property (e.g., `MyEnum::Case->value`). For pure enums, there is no associated scalar value. https://www.php.net/manual/en/language.enumerations.php#language.enumerations.backed
  -
    question: |
      What is the purpose of the `#[Override]` attribute in PHP 8.3 (relevant for modern PHP practices)?
    answers:
      - { value: 'It forces a method to be overridden by child classes.', correct: false }
      - { value: 'It ensures that a method in a child class is indeed overriding a method from a parent class or implemented interface, leading to a compile-time error if it is not.', correct: true }
      - { value: 'It makes a method `final`.', correct: false }
      - { value: 'It allows a method to be overloaded with different signatures.', correct: false }
    help: |
      The `#[Override]` attribute, introduced in PHP 8.3, is a compile-time check that ensures a method is actually overriding a parent method or implementing an interface method. If it's not, a compile-time error is thrown. (Note: While introduced in 8.3, it's a key modern PHP concept relevant for certification prep). https://www.php.net/manual/en/language.attributes.php#language.attributes.override
  -
    question: |
      Which of the following is a new feature related to class constants in PHP 8.2?
    answers:
      - { value: 'Constants can now be declared as `private`.', correct: false }
      - { value: 'Constants can now be declared as `readonly`.', correct: false }
      - { value: 'Constants can now be declared as `final`.', correct: true }
      - { value: 'Constants can now be overridden in child classes without restriction.', correct: false }
    help: |
      In PHP 8.2, class constants can be declared as `final`, preventing them from being overridden in child classes. https://www.php.net/manual/en/language.oop5.constants.php#language.oop5.constants.final
  -
    question: |
      What is the behavior of the `mysqli_fetch_column()` function introduced in PHP 8.1 (available in 8.2)?
    answers:
      - { value: 'It fetches an entire row as an associative array.', correct: false }
      - { value: 'It fetches a single column from the next row of a result set.', correct: true }
      - { value: 'It fetches all columns from all rows as a multi-dimensional array.', correct: false }
      - { value: 'It fetches the number of columns in a result set.', correct: false }
    help: |
      The `mysqli_fetch_column()` function, introduced in PHP 8.1, fetches a single column from the next row of a result set. This is useful when you only need one value from a query. https://www.php.net/manual/en/mysqli-result.fetch-column.php
  -
    question: |
      Which of the following is true regarding `null` as a standalone type in PHP 8.2?
    answers:
      - { value: '`null` can be used as a standalone type declaration for parameters and return types.', correct: true }
      - { value: '`null` can only be used in union types, not as a standalone type.', correct: false }
      - { value: 'Declaring a type as `null` makes it nullable by default.', correct: false }
      - { value: 'The `null` type is deprecated in PHP 8.2.', correct: false }
    help: |
      In PHP 8.2, `null` is a standalone type, meaning you can use `null` as a type declaration. This is useful for functions that are guaranteed to return `null` (e.g., a function that only has side effects and no meaningful return value). https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.union.null