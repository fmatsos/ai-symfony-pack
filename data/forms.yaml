category: Forms

questions:
  -
    question: >
      What is the primary purpose of the `buildForm()` method in a Symfony form type class?
    answers:
      - { value: "To define the form's fields and their options.", correct: true }
      - { value: "To configure the default options for the form type.", correct: false }
      - { value: "To process the submitted data from the request.", correct: false }
      - { value: "To render the form in a Twig template.", correct: false }
    help: |
      The `buildForm()` method is where you add fields to your form using the `FormBuilderInterface`.
      https://symfony.com/doc/current/forms.html#creating-form-classes

  -
    question: >
      Which method is used in a Symfony controller to create a form instance based on a form type class?
    answers:
      - { value: "`$this->createFormBuilder()`", correct: false }
      - { value: "`$this->getFormFactory()->create()`", correct: false }
      - { value: "`$this->createForm()`", correct: true }
      - { value: "`new Form()`", correct: false }
    help: |
      In a controller extending `AbstractController`, you use the `createForm()` helper method to instantiate a form.
      https://symfony.com/doc/current/forms.html#creating-form-classes

  -
    question: >
      When creating a form using `createFormBuilder()` in a controller without passing a data object, what is the default data type for the form's underlying data?
    answers:
      - { value: "An empty object (`stdClass`).", correct: false }
      - { value: "An empty array.", correct: true }
      - { value: "Null.", correct: false }
      - { value: "A `FormData` object.", correct: false }
    help: |
      If you don't pass a data object to `createFormBuilder()`, the form will operate on an array by default.
      https://symfony.com/doc/current/forms.html#creating-forms-without-a-class

  -
    question: |
      Consider the following code snippet from a Symfony form type:

      ```php
      // src/Form/Type/TaskType.php
      namespace App\Form\Type;

      use Symfony\Component\Form\AbstractType;
      use Symfony\Component\Form\FormBuilderInterface;
      use Symfony\Component\OptionsResolver\OptionsResolver;

      class TaskType extends AbstractType
      {
          public function buildForm(FormBuilderInterface $builder, array $options): void
          {
              $builder->add('name');
          }

          public function configureOptions(OptionsResolver $resolver): void
          {
              $resolver->setDefaults([
                  'data_class' => Product::class,
              ]);
          }
      }
      ```
      What is the primary purpose of the `configureOptions()` method in this `TaskType`?
    answers:
      - { value: "To define the form's fields.", correct: false }
      - { value: "To set default options for the form type, such as the data class.", correct: true }
      - { value: "To handle form submission and validation.", correct: false }
      - { value: "To add event listeners to the form.", correct: false }
    help: |
      The `configureOptions()` method is used to define and configure the options that can be passed to the form type.
      https://symfony.com/doc/current/forms.html#configuring-your-form

  -
    question: >
      Which Composer command is used to install the Symfony Form component?
    answers:
      - { value: "`composer install symfony/form`", correct: false }
      - { value: "`composer require symfony/form`", correct: true }
      - { value: "`composer update symfony/form`", correct: false }
      - { value: "`composer add symfony/form`", correct: false }
    help: |
      The standard Composer command to add a new dependency to a Symfony project is `composer require`.
      https://symfony.com/doc/current/forms.html#installation

  -
    question: >
      After creating a form in a controller, which method is essential to call on the form object to process the incoming HTTP request and populate the form with submitted data?
    answers:
      - { value: "`$form->processRequest($request)`", correct: false }
      - { value: "`$form->bind($request)`", correct: false }
      - { value: "`$form->handleRequest($request)`", correct: true }
      - { value: "`$form->submit($request)`", correct: false }
    help: |
      The `handleRequest()` method is responsible for reading the request and populating the form with any submitted data.
      https://symfony.com/doc/current/forms.html#handling-form-submissions

  -
    question: >
      Given a form `$form` that has been handled by `handleRequest()`, how do you correctly check if the form was submitted and its data is valid?
    answers:
      - { value: "`if ($form->isSubmitted() && $form->isValid())`", correct: true }
      - { value: "`if ($form->isValid() && $form->isSubmitted())`", correct: true }
      - { value: "`if ($form->hasData() && $form->isValid())`", correct: false }
      - { value: "`if ($form->isProcessed() && $form->getErrors() === 0)`", correct: false }
    help: |
      The standard pattern for handling form submissions involves checking both `isSubmitted()` and `isValid()`. The order of these checks doesn't strictly matter for correctness, but `isSubmitted()` is often checked first.
      https://symfony.com/doc/current/forms.html#handling-form-submissions

  -
    question: >
      If a Symfony form is submitted and valid, how can you retrieve the submitted and transformed data?
    answers:
      - { value: "`$form->getSubmittedData()`", correct: false }
      - { value: "`$form->getData()`", correct: true }
      - { value: "`$form->getValues()`", correct: false }
      - { value: "`$form->getTransformedData()`", correct: false }
    help: |
      The `getData()` method returns the data that the form is bound to, which will be updated with the submitted and transformed values if the form is valid.
      https://symfony.com/doc/current/forms.html#handling-form-submissions

  -
    question: >
      What is the purpose of the `isSubmitted()` method on a Symfony `Form` object?
    answers:
      - { value: "To check if the form's data passes all validation constraints.", correct: false }
      - { value: "To determine if the form was sent by an HTTP POST request.", correct: false }
      - { value: "To check if the form was submitted by the user (i.e., if the request contains form data).", correct: true }
      - { value: "To verify if the form has a submit button.", correct: false }
    help: |
      `isSubmitted()` checks if the form was submitted, meaning the request contains data for this form.
      https://symfony.com/doc/current/forms.html#handling-form-submissions

  -
    question: >
      What is the purpose of the `isValid()` method on a Symfony `Form` object?
    answers:
      - { value: "To check if the form has been submitted.", correct: false }
      - { value: "To determine if all fields in the form have a value.", correct: false }
      - { value: "To verify if the submitted data conforms to all defined validation constraints.", correct: true }
      - { value: "To check if the form's CSRF token is valid.", correct: false }
    help: |
      `isValid()` runs the validation process on the submitted data and returns true if no validation errors are found.
      https://symfony.com/doc/current/forms.html#handling-form-submissions

  -
    question: >
      Which built-in Symfony form type is typically used for a simple single-line text input?
    answers:
      - { value: "`TextareaType::class`", correct: false }
      - { value: "`TextType::class`", correct: true }
      - { value: "`StringType::class`", correct: false }
      - { value: "`InputType::class`", correct: false }
    help: |
      `TextType` is the standard form type for single-line text inputs.
      https://symfony.com/doc/current/reference/forms/types/text.html

  -
    question: >
      To allow a user to select multiple options from a predefined list, which built-in form type would you most likely use?
    answers:
      - { value: "`ChoiceType::class` with `multiple` option set to `true`.", correct: true }
      - { value: "`CollectionType::class`", correct: false }
      - { value: "`EntityType::class` with `expanded` option set to `true`.", correct: false }
      - { value: "`SelectType::class`", correct: false }
    help: |
      `ChoiceType` is used for select boxes, radio buttons, or checkboxes. The `multiple` option allows selecting more than one choice.
      https://symfony.com/doc/current/reference/forms/types/choice.html

  -
    question: >
      Which built-in form type is used to embed a collection of other forms, such as a list of tags within a task form?
    answers:
      - { value: "`ArrayType::class`", correct: false }
      - { value: "`EmbeddedType::class`", correct: false }
      - { value: "`CollectionType::class`", correct: true }
      - { value: "`ListType::class`", correct: false }
    help: |
      `CollectionType` is specifically designed for handling collections of data, often rendered as a list of embedded forms.
      https://symfony.com/doc/current/reference/forms/types/collection.html

  -
    question: |
      When embedding a custom form type, `CategoryType`, into another form, `TaskType`, what is the correct way to add it to the `TaskType`'s `buildForm` method?
      ```php
      // src/Form/TaskType.php
      use App\Form\CategoryType;
      use Symfony\Component\Form\FormBuilderInterface;

      public function buildForm(FormBuilderInterface $builder, array $options): void
      {
          // ...
          $builder->add('category', /* ??? */);
      }
      ```
    answers:
      - { value: "`new CategoryType()`", correct: false }
      - { value: "`CategoryType::class`", correct: true }
      - { value: "`'category_type'`", correct: false }
      - { value: "`CategoryType`", correct: false }
    help: |
      When adding a form type, you pass its fully qualified class name (FQCN) using `::class`.
      https://symfony.com/doc/current/form/embedded.html

  -
    question: >
      What is the base class that all custom Symfony form types should extend?
    answers:
      - { value: "`Symfony\\Component\\Form\\FormType`", correct: false }
      - { value: "`Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType`", correct: false }
      - { value: "`Symfony\\Component\\Form\\AbstractType`", correct: true }
      - { value: "`Symfony\\Component\\Form\\Form`", correct: false }
    help: |
      All custom form types should extend `AbstractType` to benefit from Symfony's form component features.
      https://symfony.com/doc/current/forms.html#creating-form-classes

  -
    question: >
      To render the opening `<form>` tag in a Twig template for a Symfony form, which helper function should be used?
    answers:
      - { value: "`form_open(form)`", correct: false }
      - { value: "`form_start(form)`", correct: true }
      - { value: "`start_form(form)`", correct: false }
      - { value: "`render_form_start(form)`", correct: false }
    help: |
      `form_start()` is the Twig helper that renders the opening `<form>` tag, including the `action`, `method`, and `enctype` attributes.
      https://symfony.com/doc/current/forms.html#rendering-the-form

  -
    question: >
      Which Twig helper function is used to render a specific form field, including its label, errors, and widget?
    answers:
      - { value: "`form_widget(form.fieldName)`", correct: false }
      - { value: "`form_label(form.fieldName)`", correct: false }
      - { value: "`form_row(form.fieldName)`", correct: true }
      - { value: "`form_field(form.fieldName)`", correct: false }
    help: |
      `form_row()` is a convenience helper that renders the label, errors, and widget for a single form field.
      https://symfony.com/doc/current/forms.html#rendering-a-form-field

  -
    question: >
      To render the entire form, including all its fields, labels, errors, and the opening/closing `<form>` tags, with minimal code in Twig, which helper function can be used?
    answers:
      - { value: "`form_all(form)`", correct: false }
      - { value: "`form_complete(form)`", correct: false }
      - { value: "`form(form)`", correct: true }
      - { value: "`render_all(form)`", correct: false }
    help: |
      The `form()` helper renders the entire form, including `form_start`, `form_widget`, and `form_end`. It's useful for quick rendering but offers less control.
      https://symfony.com/doc/current/forms.html#rendering-the-entire-form

  -
    question: |
      You want to render only the HTML input element for a form field named `email` within your Twig template. Which helper function should you use?
    answers:
      - { value: "`form_row(form.email)`", correct: false }
      - { value: "`form_label(form.email)`", correct: false }
      - { value: "`form_widget(form.email)`", correct: true }
      - { value: "`form_input(form.email)`", correct: false }
    help: |
      `form_widget()` renders only the HTML input element (or select, textarea, etc.) for a given field.
      https://symfony.com/doc/current/forms.html#rendering-a-form-field

  -
    question: >
      How can you render only the global errors for a form (errors not associated with a specific field) in Twig?
    answers:
      - { value: "`form_errors(form)`", correct: true }
      - { value: "`form_errors(form.global)`", correct: false }
      - { value: "`form_widget(form.errors)`", correct: false }
      - { value: "`form_all_errors(form)`", correct: false }
    help: |
      `form_errors(form)` renders any errors that are not tied to a specific field (global errors).
      https://symfony.com/doc/current/forms.html#rendering-a-form-field

  -
    question: >
      To apply a custom Twig form theme named `form/my_custom_theme.html.twig` to a specific form variable named `myForm` within a Twig template, what is the correct syntax?
    answers:
      - { value: "`{% form_theme myForm 'form/my_custom_theme.html.twig' %}`", correct: true }
      - { value: "`{% theme myForm 'form/my_custom_theme.html.twig' %}`", correct: false }
      - { value: "`{{ myForm.setTheme('form/my_custom_theme.html.twig') }}`", correct: false }
      - { value: "`{% include 'form/my_custom_theme.html.twig' with { form: myForm } %}`", correct: false }
    help: |
      The `form_theme` Twig tag is used to apply one or more themes to a form.
      https://symfony.com/doc/current/form/form_themes.html#how-to-apply-a-theme

  -
    question: >
      You have multiple custom form themes (`theme1.html.twig`, `theme2.html.twig`) and want to apply them to a form, with `theme2.html.twig` overriding `theme1.html.twig` for conflicting blocks. How would you specify this in Twig?
    answers:
      - { value: "`{% form_theme form with ['theme2.html.twig', 'theme1.html.twig'] %}`", correct: false }
      - { value: "`{% form_theme form with ['theme1.html.twig', 'theme2.html.twig'] %}`", correct: true }
      - { value: "`{% form_theme form with theme1.html.twig, theme2.html.twig %}`", correct: false }
      - { value: "`{% form_theme form with { 'theme1': 'theme2' } %}`", correct: false }
    help: |
      When providing an array of themes, Symfony applies them in the order they are listed. Later themes in the array override blocks defined in earlier themes.
      https://symfony.com/doc/current/form/form_themes.html#applying-multiple-themes

  -
    question: >
      You want to apply a specific form theme to a child form named `address` within your main `userForm`. What is the correct Twig syntax?
    answers:
      - { value: "`{% form_theme userForm.address 'form/address_theme.html.twig' %}`", correct: true }
      - { value: "`{% form_theme address 'form/address_theme.html.twig' %}`", correct: false }
      - { value: "`{% form_theme userForm with { address: 'form/address_theme.html.twig' } %}`", correct: false }
      - { value: "`{{ form_theme_child(userForm.address, 'form/address_theme.html.twig') }}`", correct: false }
    help: |
      You can apply themes to specific child forms by referencing them directly in the `form_theme` tag.
      https://symfony.com/doc/current/form/form_themes.html#applying-themes-to-specific-fields

  -
    question: >
      What is the effect of adding the `only` keyword when applying a form theme in Twig, e.g., `{% form_theme form with ['my_theme.html.twig'] only %}`?
    answers:
      - { value: "It makes the theme apply only to the current form and not its children.", correct: false }
      - { value: "It ensures that only the specified themes are used, ignoring any globally configured themes.", correct: true }
      - { value: "It prevents the theme from being overridden by other themes.", correct: false }
      - { value: "It applies the theme only if no other themes have been applied before.", correct: false }
    help: |
      The `only` keyword tells Symfony to ignore any themes that were configured globally or inherited from parent templates, and to only use the themes explicitly listed.
      https://symfony.com/doc/current/form/form_themes.html#disabling-global-themes

  -
    question: >
      Where would you typically define global form themes that apply to all forms in your Symfony application?
    answers:
      - { value: "In `config/packages/twig.yaml` under the `form_themes` key.", correct: true }
      - { value: "In `config/services.yaml` as a service argument.", correct: false }
      - { value: "Directly in the base Twig template using `{% form_theme %}`.", correct: false }
      - { value: "In `config/form.yaml`.", correct: false }
    help: |
      Global form themes are configured in the Twig bundle's configuration, usually in `config/packages/twig.yaml`.
      https://symfony.com/doc/current/form/form_themes.html#global-themes

  -
    question: >
      By default, how does Symfony Forms provide CSRF (Cross-Site Request Forgery) protection?
    answers:
      - { value: "By checking the HTTP Referer header.", correct: false }
      - { value: "By automatically adding a hidden `_token` field with a unique, session-bound value.", correct: true }
      - { value: "By requiring a CAPTCHA for every form submission.", correct: false }
      - { value: "By validating the origin of the request using JavaScript.", correct: false }
    help: |
      Symfony's Form component automatically adds a hidden CSRF token field to forms, which is validated upon submission.
      https://symfony.com/doc/current/form/csrf.html

  -
    question: >
      Which form option can be used to disable CSRF protection for a specific form?
    answers:
      - { value: "`csrf_protection` set to `false`.", correct: true }
      - { value: "`enable_csrf` set to `false`.", correct: false }
      - { value: "`csrf_token_enabled` set to `false`.", correct: false }
      - { value: "`disable_csrf` set to `true`.", correct: false }
    help: |
      The `csrf_protection` option can be set to `false` in the form's `configureOptions` method or when creating the form.
      https://symfony.com/doc/current/form/csrf.html#disabling-csrf-protection

  -
    question: >
      What is the name of the hidden field that Symfony automatically adds to forms for CSRF protection?
    answers:
      - { value: "`_csrf_token`", correct: true }
      - { value: "`_token`", correct: false }
      - { value: "`csrf_token`", correct: false }
      - { value: "`_security_token`", correct: false }
    help: |
      The default name of the hidden field containing the CSRF token is `_csrf_token`.
      https://symfony.com/doc/current/form/csrf.html#csrf-token-id-and-field-name

  -
    question: >
      If you are building a form programmatically without a data class and want to ensure CSRF protection, what should you keep in mind?
    answers:
      - { value: "CSRF protection is automatically disabled for forms without a data class.", correct: false }
      - { value: "You must manually add a `HiddenType` field named `_csrf_token` and generate its value.", correct: false }
      - { value: "CSRF protection is enabled by default for all forms, regardless of whether they have a data class.", correct: true }
      - { value: "You need to explicitly enable CSRF protection via a service configuration.", correct: false }
    help: |
      CSRF protection is enabled by default for all forms, including those built without a data class.
      https://symfony.com/doc/current/form/csrf.html

  -
    question: >
      Which built-in Symfony form type should be used for handling file uploads?
    answers:
      - { value: "`FileType::class`", correct: true }
      - { value: "`ImageType::class`", correct: false }
      - { value: "`UploadType::class`", correct: false }
      - { value: "`BinaryType::class`", correct: false }
    help: |
      The `FileType` is specifically designed for handling file uploads in Symfony forms.
      https://symfony.com/doc/current/reference/forms/types/file.html

  -
    question: >
      When handling a file upload in a Symfony form, how do you access the uploaded file object (an instance of `UploadedFile`) after the form has been submitted and is valid?
    answers:
      - { value: "Directly from the `Request` object using `request->files->get('fieldName')`.", correct: false }
      - { value: "From the form's data using `$form->getData()->getFileName()`.", correct: false }
      - { value: "From the form's data for the specific file field, e.g., `$form->get('fileFieldName')->getData()`.", correct: true }
      - { value: "By injecting the `UploadedFileManager` service.", correct: false }
    help: |
      The `UploadedFile` object is available directly from the form field's data after submission and validation.
      https://symfony.com/doc/current/controller/upload_file.html#uploading-a-file

  -
    question: >
      What is the recommended way to move an uploaded file to a permanent location after a Symfony form submission?
    answers:
      - { value: "Use PHP's `move_uploaded_file()` function directly.", correct: false }
      - { value: "Call the `move()` method on the `UploadedFile` object.", correct: true }
      - { value: "Copy the file from the temporary directory to the target directory.", correct: false }
      - { value: "Use the `Filesystem` component's `copy()` method.", correct: false }
    help: |
      The `UploadedFile` object provides a convenient `move()` method to safely move the uploaded file.
      https://symfony.com/doc/current/controller/upload_file.html#moving-the-uploaded-file

  -
    question: >
      Which PHP configuration directive is crucial for enabling file uploads and setting the maximum allowed file size?
    answers:
      - { value: "`upload_max_filesize` and `post_max_size`.", correct: true }
      - { value: "`max_upload_size` and `max_post_size`.", correct: false }
      - { value: "`file_upload_limit` and `request_body_limit`.", correct: false }
      - { value: "`php_upload_size` and `http_post_size`.", correct: false }
    help: |
      `upload_max_filesize` sets the maximum size of an uploaded file, and `post_max_size` sets the maximum size of POST data that PHP will accept, which must be larger than or equal to `upload_max_filesize`.
      https://www.php.net/manual/en/ini.core.php#ini.upload-max-filesize
      https://www.php.net/manual/en/ini.core.php#ini.post-max-size

  -
    question: >
      Which built-in form type is suitable for a password input field?
    answers:
      - { value: "`TextType::class`", correct: false }
      - { value: "`PasswordType::class`", correct: true }
      - { value: "`SecretType::class`", correct: false }
      - { value: "`HiddenType::class`", correct: false }
    help: |
      `PasswordType` is specifically designed for password input fields, typically rendering as `<input type="password">`.
      https://symfony.com/doc/current/reference/forms/types/password.html

  -
    question: >
      To display a dropdown list of choices, which built-in form type would you use?
    answers:
      - { value: "`RadioType::class`", correct: false }
      - { value: "`CheckboxType::class`", correct: false }
      - { value: "`ChoiceType::class`", correct: true }
      - { value: "`SelectType::class`", correct: false }
    help: |
      `ChoiceType` is a versatile form type used for rendering select boxes, radio buttons, or checkboxes.
      https://symfony.com/doc/current/reference/forms/types/choice.html

  -
    question: >
      Which built-in form type is used to render a simple checkbox?
    answers:
      - { value: "`BooleanType::class`", correct: false }
      - { value: "`SwitchType::class`", correct: false }
      - { value: "`CheckboxType::class`", correct: true }
      - { value: "`ToggleType::class`", correct: false }
    help: |
      `CheckboxType` renders a single HTML checkbox input.
      https://symfony.com/doc/current/reference/forms/types/checkbox.html

  -
    question: >
      What is the purpose of the `EntityType` form type?
    answers:
      - { value: "To display a list of choices from a database entity.", correct: true }
      - { value: "To embed an entire Doctrine entity as a sub-form.", correct: false }
      - { value: "To automatically create form fields based on entity properties.", correct: false }
      - { value: "To manage relationships between different entities in a form.", correct: false }
    help: |
      `EntityType` is a specialized `ChoiceType` that fetches its choices from a Doctrine entity.
      https://symfony.com/doc/current/reference/forms/types/entity.html

  -
    question: >
      Which built-in form type is used for a multi-line text area?
    answers:
      - { value: "`TextType::class`", correct: false }
      - { value: "`LongTextType::class`", correct: false }
      - { value: "`TextareaType::class`", correct: true }
      - { value: "`RichTextType::class`", correct: false }
    help: |
      `TextareaType` renders an HTML `<textarea>` element.
      https://symfony.com/doc/current/reference/forms/types/textarea.html

  -
    question: >
      What is the primary purpose of a data transformer in Symfony Forms?
    answers:
      - { value: "To convert data between the format used in the underlying object and the format used in the form field.", correct: true }
      - { value: "To validate the data submitted by the user.", correct: false }
      - { value: "To encrypt and decrypt sensitive form data.", correct: false }
      - { value: "To modify the form's structure dynamically.", correct: false }
    help: |
      Data transformers are used to convert data between different representations, for example, a `DateTime` object to a string for a text field.
      https://symfony.com/doc/current/form/data_transformers.html

  -
    question: >
      Which interface must a custom data transformer implement?
    answers:
      - { value: "`Symfony\\Component\\Form\\DataTransformerInterface`", correct: true }
      - { value: "`Symfony\\Component\\Form\\FormTransformerInterface`", correct: false }
      - { value: "`Symfony\\Component\\Form\\DataConverterInterface`", correct: false }
      - { value: "`Symfony\\Component\\Form\\ValueTransformerInterface`", correct: false }
    help: |
      All custom data transformers must implement `DataTransformerInterface`, which defines `transform()` and `reverseTransform()` methods.
      https://symfony.com/doc/current/form/data_transformers.html#creating-a-data-transformer

  -
    question: >
      When applying a data transformer to a form field, which method of the `FormBuilderInterface` is used?
    answers:
      - { value: "`addTransformer()`", correct: false }
      - { value: "`setDataTransformer()`", correct: false }
      - { value: "`addModelTransformer()` or `addViewTransformer()`", correct: true }
      - { value: "`setTransformer()`", correct: false }
    help: |
      You can add model transformers (between normalized and model data) or view transformers (between view and normalized data) using `addModelTransformer()` or `addViewTransformer()`.
      https://symfony.com/doc/current/form/data_transformers.html#applying-a-data-transformer

  -
    question: >
      A data transformer has two main methods: `transform()` and `reverseTransform()`. What is the role of `transform()`?
    answers:
      - { value: "To convert data from the submitted (view) format to the underlying (model) format.", correct: false }
      - { value: "To convert data from the underlying (model) format to the format expected by the form field (view).", correct: true }
      - { value: "To validate the data before it's displayed in the form.", correct: false }
      - { value: "To apply a default value to the form field.", correct: false }
    help: |
      The `transform()` method converts data from the format used by your application (model) to the format expected by the form field (view).
      https://symfony.com/doc/current/form/data_transformers.html#how-data-transformers-work

  -
    question: >
      What is the role of `reverseTransform()` in a data transformer?
    answers:
      - { value: "To convert data from the underlying (model) format to the format expected by the form field (view).", correct: false }
      - { value: "To convert data from the format submitted by the form field (view) back to the underlying (model) format.", correct: true }
      - { value: "To validate the data after it's submitted.", correct: false }
      - { value: "To handle errors during data conversion.", correct: false }
    help: |
      The `reverseTransform()` method converts data from the format submitted by the form field (view) back to the format used by your application (model).
      https://symfony.com/doc/current/form/data_transformers.html#how-data-transformers-work

  -
    question: >
      Which form event is triggered *before* the form's data is bound to the underlying object, allowing you to modify the data or add/remove fields based on it?
    answers:
      - { value: "`FormEvents::POST_SET_DATA`", correct: false }
      - { value: "`FormEvents::PRE_SUBMIT`", correct: true }
      - { value: "`FormEvents::SUBMIT`", correct: false }
      - { value: "`FormEvents::PRE_BIND`", correct: false }
    help: |
      `FormEvents::PRE_SUBMIT` is triggered after the request data is read but before it's mapped to the form's fields. This is useful for dynamic form modifications based on submitted data.
      https://symfony.com/doc/current/form/events.html#formevents-pre-submit

  -
    question: >
      Which form event is triggered *after* the form's data has been bound to the underlying object but *before* validation, allowing you to modify the object based on submitted data?
    answers:
      - { value: "`FormEvents::POST_SUBMIT`", correct: true }
      - { value: "`FormEvents::PRE_SET_DATA`", correct: false }
      - { value: "`FormEvents::SUBMIT`", correct: false }
      - { value: "`FormEvents::POST_BIND`", correct: false }
    help: |
      `FormEvents::POST_SUBMIT` is triggered after the form is submitted and the data is mapped to the object, but before validation. This is useful for making final adjustments to the object.
      https://symfony.com/doc/current/form/events.html#formevents-post-submit

  -
    question: >
      To register a form event listener or subscriber, which method of the `FormBuilderInterface` is used?
    answers:
      - { value: "`addListener()` or `addSubscriber()`", correct: false }
      - { value: "`addEvent()` or `addEventSubscriber()`", correct: false }
      - { value: "`addEventListener()` or `addEventSubscriber()`", correct: true }
      - { value: "`onEvent()` or `onEventSubscriber()`", correct: false }
    help: |
      The `addEventListener()` and `addEventSubscriber()` methods are used to attach event listeners and subscribers to the form builder.
      https://symfony.com/doc/current/form/events.html#registering-event-listeners-and-subscribers

  -
    question: >
      What is the difference between `FormEvents::PRE_SUBMIT` and `FormEvents::POST_SUBMIT`?
    answers:
      - { value: "`PRE_SUBMIT` occurs before data is bound to the object, `POST_SUBMIT` occurs after data is bound but before validation.", correct: true }
      - { value: "`PRE_SUBMIT` is for modifying the request data, `POST_SUBMIT` is for modifying the form view.", correct: false }
      - { value: "`PRE_SUBMIT` is triggered on GET requests, `POST_SUBMIT` on POST requests.", correct: false }
      - { value: "`PRE_SUBMIT` is for adding fields, `POST_SUBMIT` is for removing fields.", correct: false }
    help: |
      `PRE_SUBMIT` allows manipulation of the raw submitted data array before it's mapped to the form. `POST_SUBMIT` allows manipulation of the form's underlying data object after mapping but before validation.
      https://symfony.com/doc/current/form/events.html

  -
    question: >
      If you need to add or remove fields dynamically based on data that is already set on the form's underlying object (e.g., when editing an existing entity), which event would be most suitable?
    answers:
      - { value: "`FormEvents::PRE_SUBMIT`", correct: false }
      - { value: "`FormEvents::POST_SUBMIT`", correct: false }
      - { value: "`FormEvents::PRE_SET_DATA`", correct: true }
      - { value: "`FormEvents::POST_SET_DATA`", correct: false }
    help: |
      `FormEvents::PRE_SET_DATA` is triggered before the form is populated with existing data from the underlying object. This is ideal for modifying the form structure based on that initial data.
      https://symfony.com/doc/current/form/events.html#formevents-pre-set-data

  -
    question: >
      What is the primary purpose of a Form Type Extension in Symfony?
    answers:
      - { value: "To create entirely new form types from scratch.", correct: false }
      - { value: "To add or override options, fields, or functionality of existing form types without modifying their original classes.", correct: true }
      - { value: "To provide a way to theme form fields in Twig.", correct: false }
      - { value: "To handle form submission events globally.", correct: false }
    help: |
      Form Type Extensions allow you to extend the functionality of existing form types (built-in or custom) by adding new options, listeners, or modifying their behavior.
      https://symfony.com/doc/current/form/type_extensions.html

  -
    question: >
      Which interface must a custom Form Type Extension implement, or which class should it extend?
    answers:
      - { value: "`Symfony\\Component\\Form\\FormTypeExtensionInterface` or extend `AbstractTypeExtension`.", correct: true }
      - { value: "`Symfony\\Component\\Form\\Extension\\TypeExtensionInterface` or extend `BaseTypeExtension`.", correct: false }
      - { value: "`Symfony\\Component\\Form\\FormExtensionInterface` or extend `FormExtension`.", correct: false }
      - { value: "`Symfony\\Component\\Form\\TypeExtension` or extend `TypeExtensionBase`.", correct: false }
    help: |
      Custom form type extensions should implement `FormTypeExtensionInterface` or, more commonly, extend `AbstractTypeExtension`.
      https://symfony.com/doc/current/form/type_extensions.html#creating-a-form-type-extension

  -
    question: >
      Which method in a Form Type Extension is used to specify which form type it extends?
    answers:
      - { value: "`getExtendedType()`", correct: true }
      - { value: "`extendsType()`", correct: false }
      - { value: "`getTargetType()`", correct: false }
      - { value: "`supportsType()`", correct: false }
    help: |
      The `getExtendedType()` method in a form type extension returns the FQCN of the form type it extends.
      https://symfony.com/doc/current/form/type_extensions.html#creating-a-form-type-extension

  -
    question: >
      When should you consider creating a Form Type Extension instead of a new custom Form Type?
    answers:
      - { value: "When you need to define a completely new set of fields for a specific entity.", correct: false }
      - { value: "When you want to add new options or modify the behavior of an existing form type (e.g., `TextType`) across your application.", correct: true }
      - { value: "When you need to embed one form type within another.", correct: false }
      - { value: "When you are building a form without an associated data class.", correct: false }
    help: |
      Form Type Extensions are ideal for adding generic functionality or options to existing form types without altering their core definition.
      https://symfony.com/doc/current/form/type_extensions.html#when-to-create-a-form-type-extension

  -
    question: >
      Which method in a Form Type Extension is analogous to `buildForm()` in a regular form type, allowing you to add fields or event listeners?
    answers:
      - { value: "`buildExtension()`", correct: false }
      - { value: "`buildForm()`", correct: true }
      - { value: "`extendForm()`", correct: false }
      - { value: "`modifyForm()`", correct: false }
    help: |
      Form type extensions also have a `buildForm()` method, which is called after the extended type's `buildForm()` method, allowing you to add or modify fields.
      https://symfony.com/doc/current/form/type_extensions.html#creating-a-form-type-extension

  -
    question: >
      What is the purpose of the `debug:form` console command in Symfony?
    answers:
      - { value: "To generate a visual representation of a form's structure.", correct: false }
      - { value: "To list all available form types, type extensions, and type guessers.", correct: true }
      - { value: "To validate a form's data against its constraints.", correct: false }
      - { value: "To clear the form cache.", correct: false }
    help: |
      The `debug:form` command is a powerful tool for inspecting the form component's configuration.
      https://symfony.com/doc/current/forms.html#debugging-forms

  -
    question: >
      Which option should you set to `false` if a form field does not map to a property on the underlying data object?
    answers:
      - { value: "`required`", correct: false }
      - { value: "`mapped`", correct: true }
      - { value: "`bind_on_submit`", correct: false }
      - { value: "`data_class`", correct: false }
    help: |
      Setting `mapped` to `false` tells Symfony that this field's data should not be read from or written to the underlying object.
      https://symfony.com/doc/current/forms.html#unmapped-fields

  -
    question: >
      When creating a form, how can you pass custom options from your controller to your form type class?
    answers:
      - { value: "As the second argument to `createForm()`.", correct: false }
      - { value: "As the third argument to `createForm()` (an array of options).", correct: true }
      - { value: "By defining them as public properties in the form type.", correct: false }
      - { value: "Via the `setOption()` method on the form builder.", correct: false }
    help: |
      The third argument to `createForm()` is an array of options that will be passed to the form type's `buildForm()` and `configureOptions()` methods.
      https://symfony.com/doc/current/forms.html#passing-options-to-your-form-type

  -
    question: >
      What is the purpose of the `entry_type` option when using `CollectionType`?
    answers:
      - { value: "It defines the Twig template used to render each entry in the collection.", correct: false }
      - { value: "It specifies the data class for each item in the collection.", correct: false }
      - { value: "It defines the form type to use for each item in the collection.", correct: true }
      - { value: "It sets the maximum number of entries allowed in the collection.", correct: false }
    help: |
      The `entry_type` option is crucial for `CollectionType` as it tells Symfony which form type to use for each element in the collection.
      https://symfony.com/doc/current/reference/forms/types/collection.html#entry-type

  -
    question: >
      Which Twig function is preferred to check if a form view is the root form (i.e., has no parent form view), especially to avoid issues with child forms named 'parent'?
    answers:
      - { value: "`form.parent is null`", correct: false }
      - { value: "`form is rootform`", correct: true }
      - { value: "`form_is_root(form)`", correct: false }
      - { value: "`form.isRoot()`", correct: false }
    help: |
      The `is rootform` test is the reliable way to check if a form view is the root, as `form.parent is null` can be ambiguous if a child form is named 'parent'.
      https://symfony.com/doc/current/form/form_customization.html#checking-if-a-form-is-the-root-form

  -
    question: >
      What is the purpose of the `#[Assert\NotBlank]` attribute in a Symfony entity property?
    answers:
      - { value: "To ensure the form field is always rendered as required in Twig.", correct: false }
      - { value: "To prevent the associated form field from being submitted with an empty value.", correct: true }
      - { value: "To automatically populate the field with a default value if it's empty.", correct: false }
      - { value: "To mark the field as non-nullable in the database schema.", correct: false }
    help: |
      The `NotBlank` constraint ensures that the value is not blank (null, empty string, or string containing only whitespace).
      https://symfony.com/doc/current/validation.html#not-blank

  -
    question: >
      When rendering a form, what is the purpose of the `attr` option in Twig helper functions like `form_start()` or `form_widget()`?
    answers:
      - { value: "To define custom data attributes for the form element.", correct: false }
      - { value: "To add HTML attributes (e.g., `class`, `id`, `placeholder`) to the rendered HTML tag.", correct: true }
      - { value: "To specify the Twig template to use for rendering that specific part of the form.", correct: false }
      - { value: "To pass additional variables to the form view.", correct: false }
    help: |
      The `attr` option allows you to pass an array of HTML attributes that will be applied to the rendered HTML tag.
      https://symfony.com/doc/current/form/form_customization.html#adding-html-attributes-to-form-elements

  -
    question: >
      You are creating a form and want to set a default value for a field, say `task`, when the form is initially displayed (before any submission). How would you typically achieve this?
    answers:
      - { value: "Set the `data` option for the `task` field in `buildForm()`.", correct: false }
      - { value: "Pass an object with the `task` property pre-filled as the second argument to `createForm()`.", correct: true }
      - { value: "Use `form.task.setData('Default Task')` in the controller.", correct: false }
      - { value: "Define a `default_value` option for the field in the form type.", correct: false }
    help: |
      When you pass an object (or an array for forms without a data class) as the second argument to `createForm()`, the form fields will be pre-populated with the data from that object's properties.
      https://symfony.com/doc/current/forms.html#creating-form-classes

  -
    question: >
      What is the purpose of the `block_name` option in a form type, particularly when working with `CollectionType`?
    answers:
      - { value: "To define the HTML `id` attribute for the form field.", correct: false }
      - { value: "To specify a custom Twig block name for rendering that form type within a theme.", correct: true }
      - { value: "To group related form fields together for validation.", correct: false }
      - { value: "To set the name of the form field in the HTML output.", correct: false }
    help: |
      The `block_name` option allows you to customize the Twig block name used for rendering a specific form type, which is useful for theming nested collections.
      https://symfony.com/doc/current/form/form_themes.html#customizing-a-collection-of-forms

  -
    question: >
      Which built-in form type is suitable for a date input field?
    answers:
      - { value: "`DateTimeType::class`", correct: false }
      - { value: "`DateType::class`", correct: true }
      - { value: "`CalendarType::class`", correct: false }
      - { value: "`TimestampType::class`", correct: false }
    help: |
      `DateType` is used for date input fields, offering various rendering options (text, single_text, choice).
      https://symfony.com/doc/current/reference/forms/types/date.html

  -
    question: >
      What is the main advantage of using a dedicated form type class (e.g., `TaskType`) over building a form inline in the controller using `createFormBuilder()`?
    answers:
      - { value: "Dedicated form types are faster to process.", correct: false }
      - { value: "Dedicated form types allow for better reusability and separation of concerns.", correct: true }
      - { value: "Inline forms do not support validation.", correct: false }
      - { value: "Inline forms cannot be bound to an object.", correct: false }
    help: |
      Dedicated form type classes promote reusability, testability, and a cleaner separation of concerns in your application.
      https://symfony.com/doc/current/forms.html#creating-form-classes

  -
    question: >
      When using `CollectionType` with `allow_add` and `allow_delete` options, what is typically required on the client-side (JavaScript) to enable dynamic adding/removing of collection entries?
    answers:
      - { value: "Automatic Symfony JavaScript bundles handle it.", correct: false }
      - { value: "Manual JavaScript code to manipulate the DOM and manage field names/indices.", correct: true }
      - { value: "A specific Twig helper function for dynamic collections.", correct: false }
      - { value: "A dedicated Symfony Flex recipe for collection management.", correct: false }
    help: |
      While Symfony provides the server-side logic for `CollectionType`, dynamic adding/removing of entries usually requires custom JavaScript to manipulate the DOM and ensure correct field naming.
      https://symfony.com/doc/current/form/form_collections.html#allowing-new-tags-with-javascript

  -
    question: >
      What is the purpose of the `required` option for a form field?
    answers:
      - { value: "It adds the HTML5 `required` attribute to the input field.", correct: true }
      - { value: "It automatically applies a `NotBlank` validation constraint to the field.", correct: false }
      - { value: "It ensures that the field's value is always present in the submitted data.", correct: false }
      - { value: "It makes the field visible in the form.", correct: false }
    help: |
      The `required` option primarily affects the HTML5 `required` attribute. For server-side validation, you should use validation constraints like `NotBlank`.
      https://symfony.com/doc/current/reference/forms/types/form.html#required

  -
    question: >
      Which built-in form type is used for a simple button that submits the form?
    answers:
      - { value: "`ButtonType::class`", correct: false }
      - { value: "`SubmitType::class`", correct: true }
      - { value: "`InputType::class` with `type` set to `submit`.", correct: false }
      - { value: "`FormButtonType::class`", correct: false }
    help: |
      `SubmitType` renders an HTML `<button type="submit">` element.
      https://symfony.com/doc/current/reference/forms/types/submit.html

  -
    question: >
      What is the purpose of `FormEvents::PRE_SET_DATA`?
    answers:
      - { value: "To modify the data before it is submitted from the client.", correct: false }
      - { value: "To modify the form's structure based on the initial data of the object.", correct: true }
      - { value: "To perform validation on the form's data.", correct: false }
      - { value: "To transform the data after it has been set.", correct: false }
    help: |
      `PRE_SET_DATA` is triggered before any data is set on the form. This is the earliest event and is useful for modifying the form structure based on the existing data.
      https://symfony.com/doc/current/form/events.html#formevents-pre-set-data

  -
    question: >
      What is the role of the `OptionsResolver` in a Symfony form type?
    answers:
      - { value: "To resolve the correct Twig template for rendering the form.", correct: false }
      - { value: "To define and validate the options that can be passed to the form type.", correct: true }
      - { value: "To resolve the data class associated with the form.", correct: false }
      - { value: "To resolve dependencies for services injected into the form type.", correct: false }
    help: |
      The `OptionsResolver` component is used in `configureOptions()` to define, validate, and set default values for the options available to a form type.
      https://symfony.com/doc/current/components/options_resolver.html

  -
    question: >
      Which method is used to get the underlying data object from a form after it has been submitted and is valid?
    answers:
      - { value: "`$form->getNormalizedData()`", correct: false }
      - { value: "`$form->getRawData()`", correct: false }
      - { value: "`$form->getData()`", correct: true }
      - { value: "`$form->getFormData()`", correct: false }
    help: |
      The `getData()` method returns the object (or array) that the form is bound to, populated with the submitted and validated data.
      https://symfony.com/doc/current/forms.html#handling-form-submissions

  -
    question: >
      When creating a form without a data class, how does Symfony handle the data submitted by the form?
    answers:
      - { value: "It automatically creates a `stdClass` object to hold the data.", correct: false }
      - { value: "It returns the data as an associative array.", correct: true }
      - { value: "It throws an exception as data classes are mandatory.", correct: false }
      - { value: "It stores the data in the session.", correct: false }
    help: |
      Forms created without a data class will return their data as an associative array when `getData()` is called.
      https://symfony.com/doc/current/forms.html#creating-forms-without-a-class

  -
    question: >
      What is the purpose of the `action` option when creating a form?
    answers:
      - { value: "To define the HTTP method for form submission (GET/POST).", correct: false }
      - { value: "To specify the URL where the form data should be submitted.", correct: true }
      - { value: "To set the name of the form in the HTML.", correct: false }
      - { value: "To define a JavaScript function to be executed on form submission.", correct: false }
    help: |
      The `action` option sets the `action` attribute of the HTML `<form>` tag, determining where the form data is sent.
      https://symfony.com/doc/current/reference/forms/types/form.html#action

  -
    question: >
      Which form type option allows you to add custom HTML attributes to the `label` element of a form field?
    answers:
      - { value: "`label_attr`", correct: true }
      - { value: "`attr`", correct: false }
      - { value: "`label_options`", correct: false }
      - { value: "`html_label`", correct: false }
    help: |
      The `label_attr` option is an array of HTML attributes that will be applied to the `label` tag.
      https://symfony.com/doc/current/reference/forms/types/form.html#label-attr

  -
    question: >
      What is the purpose of `FormEvents::POST_SET_DATA`?
    answers:
      - { value: "To modify the submitted data before it's bound to the object.", correct: false }
      - { value: "To modify the form's structure after the initial data has been set on the form.", correct: true }
      - { value: "To add validation constraints after the form is built.", correct: false }
      - { value: "To perform actions after the form has been successfully submitted and validated.", correct: false }
    help: |
      `POST_SET_DATA` is triggered after the form has been initialized with the data from the underlying object. It's useful for making final adjustments to the form based on this data.
      https://symfony.com/doc/current/form/events.html#formevents-post-set-data

  -
    question: >
      When creating a custom form field type, which method is typically used to set any extra variables needed when rendering the field in a form theme template?
    answers:
      - { value: "`buildForm()`", correct: false }
      - { value: "`configureOptions()`", correct: false }
      - { value: "`buildView()`", correct: true }
      - { value: "`finishView()`", correct: false }
    help: |
      The `buildView()` method is used to set variables that will be available in the Twig template for rendering the form field.
      https://symfony.com/doc/current/form/create_custom_field_type.html#the-buildview-method

  -
    question: >
      What is the purpose of the `data_class` option in `configureOptions()`?
    answers:
      - { value: "To specify the Twig template used for rendering the form.", correct: false }
      - { value: "To define the PHP class that the form will map its data to and from.", correct: true }
      - { value: "To set the default value for the form fields.", correct: false }
      - { value: "To indicate if the form should handle file uploads.", correct: false }
    help: |
      The `data_class` option tells Symfony which class the form should expect to receive and return data from.
      https://symfony.com/doc/current/forms.html#configuring-your-form

  -
    question: >
      Which form type option allows you to set a placeholder text for a text input field?
    answers:
      - { value: "`placeholder`", correct: false }
      - { value: "`attr` with `placeholder` key.", correct: true }
      - { value: "`default_value`", correct: false }
      - { value: "`input_placeholder`", correct: false }
    help: |
      The `placeholder` attribute is an HTML attribute, so it should be set within the `attr` option.
      https://symfony.com/doc/current/reference/forms/types/form.html#attr

  -
    question: >
      What is the purpose of the `empty_data` option in a form field?
    answers:
      - { value: "To define the value that should be used if the field is submitted empty.", correct: true }
      - { value: "To set the default value for the field when the form is first rendered.", correct: false }
      - { value: "To specify the value that represents a 'null' or 'no selection' state for choice types.", correct: false }
      - { value: "To determine if the field should be rendered when its value is empty.", correct: false }
    help: |
      The `empty_data` option allows you to specify the value that should be returned by `getData()` if the field is empty.
      https://symfony.com/doc/current/reference/forms/types/form.html#empty-data

  -
    question: >
      When using a `CollectionType` field, what is the effect of setting `allow_add` to `true`?
    answers:
      - { value: "It allows users to add new entries to the collection via JavaScript.", correct: true }
      - { value: "It ensures that the collection can never be empty.", correct: false }
      - { value: "It automatically adds a new empty entry to the collection when the form is rendered.", correct: false }
      - { value: "It enables server-side creation of new collection items.", correct: false }
    help: |
      The `allow_add` option, combined with client-side JavaScript, enables dynamically adding new entries to a collection.
      https://symfony.com/doc/current/form/form_collections.html#allowing-new-tags-with-javascript

  -
    question: >
      What is the purpose of the `by_reference` option in a form field, especially for nested forms or collections?
    answers:
      - { value: "To ensure that data is passed by value instead of by reference.", correct: false }
      - { value: "To control whether the form modifies the original object directly or a cloned version.", correct: true }
      - { value: "To prevent circular references in complex form structures.", correct: false }
      - { value: "To optimize performance by avoiding deep copying of data.", correct: false }
    help: |
      The `by_reference` option determines whether the form's data is updated directly on the underlying object (by reference) or if a new object is created and then set on the parent (by value). This is crucial for collections and embedded forms.
      https://symfony.com/doc/current/reference/forms/types/form.html#by-reference

  -
    question: >
      Which form type option is used to change the HTML tag used for rendering a form field's label?
    answers:
      - { value: "`label_html_tag`", correct: false }
      - { value: "`label_format`", correct: false }
      - { value: "`label_render`", correct: false }
      - { value: "`label_html` (deprecated in Symfony 6.x, but conceptually related to rendering HTML in label)", correct: false }
      - { value: "This is typically handled by overriding the `form_label` Twig block in a custom theme.", correct: true }
    help: |
      While there isn't a direct option to change the label's HTML tag via form options, this level of customization is achieved by overriding the `form_label` Twig block in your form theme.
      https://symfony.com/doc/current/form/form_customization.html#form-label-block

  -
    question: >
      What is the purpose of the `error_bubbling` option for a form field?
    answers:
      - { value: "To display validation errors at the top of the form instead of next to the field.", correct: true }
      - { value: "To prevent validation errors from being displayed.", correct: false }
      - { value: "To allow errors to be displayed on multiple fields simultaneously.", correct: false }
      - { value: "To define a custom error message for the field.", correct: false }
    help: |
      When `error_bubbling` is set to `true`, any errors for that field will "bubble up" and be displayed as global form errors, rather than specific field errors.
      https://symfony.com/doc/current/reference/forms/types/form.html#error-bubbling

  -
    question: >
      How can you add a custom validation constraint to a form field directly within the controller when using `createFormBuilder()`?
    answers:
      - { value: "By passing a `constraints` array in the field's options.", correct: true }
      - { value: "By calling `$form->get('fieldName')->addConstraint(new Constraint())`.", correct: false }
      - { value: "By defining a validation group for the field.", correct: false }
      - { value: "It's not possible; constraints must be defined in the entity or form type.", correct: false }
    help: |
      You can add constraints directly in the field options array when using `add()` on the form builder.
      https://symfony.com/doc/current/form/without_class.html#adding-validation

  -
    question: >
      Which form type option is used to specify the text displayed on a submit button?
    answers:
      - { value: "`value`", correct: false }
      - { value: "`label`", correct: true }
      - { value: "`text`", correct: false }
      - { value: "`button_text`", correct: false }
    help: |
      The `label` option is used to set the text displayed on buttons, as well as the label for other form fields.
      https://symfony.com/doc/current/reference/forms/types/submit.html#label

  -
    question: >
      What is the purpose of the `choice_label` option in `ChoiceType` or `EntityType`?
    answers:
      - { value: "To define the value that is submitted for each choice.", correct: false }
      - { value: "To specify a property or a callable that returns the human-readable label for each choice.", correct: true }
      - { value: "To set the default selected choice.", correct: false }
      - { value: "To group choices under a common label.", correct: false }
    help: |
      The `choice_label` option allows you to control how each choice is displayed to the user.
      https://symfony.com/doc/current/reference/forms/types/choice.html#choice-label

  -
    question: >
      What is the recommended way to handle form validation groups in Symfony Forms?
    answers:
      - { value: "By defining them in the `validation.yaml` file.", correct: false }
      - { value: "By passing the `validation_groups` option to the form when creating it.", correct: true }
      - { value: "By using annotations on the form type class.", correct: false }
      - { value: "By calling `setValidationGroups()` on the form builder.", correct: false }
    help: |
      Validation groups can be specified via the `validation_groups` option when creating the form.
      https://symfony.com/doc/current/validation.html#validation-groups

  -
    question: >
      When using `CollectionType`, what is the effect of setting `allow_delete` to `true`?
    answers:
      - { value: "It automatically removes entries from the collection if they are not present in the submitted data.", correct: true }
      - { value: "It adds a 'delete' button next to each collection entry.", correct: false }
      - { value: "It prevents users from removing existing entries.", correct: false }
      - { value: "It marks entries for deletion but doesn't remove them from the database.", correct: false }
    help: |
      The `allow_delete` option, when `true`, enables the form to remove entries from the underlying collection if they are no longer present in the submitted data.
      https://symfony.com/doc/current/form/form_collections.html#allowing-new-tags-with-javascript

  -
    question: >
      What is the primary role of the `FormFactory` service in Symfony?
    answers:
      - { value: "To handle HTTP requests and populate forms.", correct: false }
      - { value: "To create and configure form instances.", correct: true }
      - { value: "To manage form themes and rendering.", correct: false }
      - { value: "To validate form submissions.", correct: false }
    help: |
      The `FormFactory` is responsible for creating form instances, and it's what `AbstractController::createForm()` and `createFormBuilder()` internally use.
      https://symfony.com/doc/current/components/form.html#creating-forms-in-a-standalone-environment

  -
    question: >
      Which form type option allows you to set the HTML `id` attribute for the entire form?
    answers:
      - { value: "`id`", correct: false }
      - { value: "`form_id`", correct: false }
      - { value: "`attr` with `id` key.", correct: true }
      - { value: "`html_id`", correct: false }
    help: |
      The `attr` option is used to pass HTML attributes to the rendered form tag, including the `id` attribute.
      https://symfony.com/doc/current/forms.html#adding-html-attributes-to-form-elements

  -
    question: >
      What is the purpose of the `help` option for a form field?
    answers:
      - { value: "To provide a tooltip for the field.", correct: false }
      - { value: "To display a short, descriptive text below the field.", correct: true }
      - { value: "To link to external documentation for the field.", correct: false }
      - { value: "To define a validation message for the field.", correct: false }
    help: |
      The `help` option allows you to provide additional descriptive text that will be displayed below the form field.
      https://symfony.com/doc/current/reference/forms/types/form.html#help

  -
    question: >
      What is the purpose of `FormEvents::SUBMIT`?
    answers:
      - { value: "It's triggered before any data is set on the form.", correct: false }
      - { value: "It's triggered after the form is submitted and the data is mapped, but before validation.", correct: false }
      - { value: "It's triggered after the submitted data is transformed and validated, just before the data is written back to the object.", correct: true }
      - { value: "It's triggered when the form is rendered.", correct: false }
    help: |
      `FormEvents::SUBMIT` is triggered after `PRE_SUBMIT` and after data transformation, but before the final data is written back to the object. It's less commonly used than `PRE_SUBMIT` or `POST_SUBMIT`.
      https://symfony.com/doc/current/form/events.html#formevents-submit