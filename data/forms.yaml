category: Forms
questions:
  - question: Which of the following methods is primarily responsible for defining
      the fields and their types within a Symfony form class?
    answers:
      - value: "`configureOptions()`"
        correct: false
      - value: "`buildForm()`"
        correct: true
      - value: "`setDefaultOptions()`"
        correct: false
      - value: "`createForm()`"
        correct: false
    help: The `buildForm(FormBuilderInterface $builder, array $options)` method is
      where you add fields to your form using the `$builder` object.
      https://symfony.com/doc/current/form/create_custom_field_type.html#form-type-core-methods-overview
  - question: To process submitted data from an HTML form using a Symfony form
      object, which method must be called on the form instance?
    answers:
      - value: "`submit()`"
        correct: false
      - value: "`bind()`"
        correct: false
      - value: "`handleRequest()`"
        correct: true
      - value: "`process()`"
        correct: false
    help: The `handleRequest()` method inspects the current request and, if the form
      was submitted, populates the form with the submitted data.
      https://symfony.com/doc/current/forms.html#handling-form-submissions
  - question: Which Twig helper function is used to render the opening `<form>` tag
      in a Symfony template?
    answers:
      - value: "`form_start(form)`"
        correct: true
      - value: "`form_open(form)`"
        correct: false
      - value: "`start_form(form)`"
        correct: false
      - value: "`render_form_start(form)`"
        correct: false
    help: The `form_start(form)` Twig helper generates the opening HTML `<form>`
      tag, including attributes like `method`, `action`, and `enctype` if a file
      upload field is present.
      https://symfony.com/doc/current/forms.html#rendering-the-form
  - question: >-
      Consider the following code snippet:


      ```php

      // src/Form/Type/TaskType.php

      namespace App\Form\Type;


      use Symfony\Component\Form\AbstractType;

      use Symfony\Component\Form\FormBuilderInterface;

      use Symfony\Component\OptionsResolver\OptionsResolver;


      class TaskType extends AbstractType

      {
          public function buildForm(FormBuilderInterface $builder, array $options): void
          {
              $builder
                  ->add('task')
                  ->add('dueDate', null, ['required' => $options['is_required_due_date']])
              ;
          }

          public function configureOptions(OptionsResolver $resolver): void
          {
              $resolver->setDefaults([
                  'data_class' => null,
                  'is_required_due_date' => true,
              ]);
          }
      }

      ```


      How would you pass a custom option `is_required_due_date` with a value of
      `false` to this `TaskType` form from a controller?
    answers:
      - value: "`$form = $this->createForm(TaskType::class, $task,
          ['is_required_due_date' => false]);`"
        correct: true
      - value: "`$form = $this->createForm(TaskType::class,
          $task)->setOption('is_required_due_date', false);`"
        correct: false
      - value: "`$form = $this->createForm(TaskType::class, $task, ['options' =>
          ['is_required_due_date' => false]]);`"
        correct: false
      - value: "`$form = $this->createForm(TaskType::class, $task, ['default_options' =>
          ['is_required_due_date' => false]]);`"
        correct: false
    help: Custom options are passed as the third argument to the `createForm()`
      method in the controller. These options are then available in the
      `buildForm()` method via the `$options` array.
      https://symfony.com/doc/current/forms.html#passing-options-to-a-form-type
  - question: Which of the following is the correct way to apply a custom Twig form
      theme named `my_custom_theme.html.twig` to a specific form variable `form`
      within a Twig template?
    answers:
      - value: "`{% form_theme form 'my_custom_theme.html.twig' %}`"
        correct: true
      - value: "`{% theme_form form 'my_custom_theme.html.twig' %}`"
        correct: false
      - value: "`{{ form.setTheme('my_custom_theme.html.twig') }}`"
        correct: false
      - value: "`{% include 'my_custom_theme.html.twig' with {'form': form} %}`"
        correct: false
    help: The `form_theme` Twig tag is used to apply one or more themes to a form.
      The syntax is `{% form_theme form 'path/to/your_theme.html.twig' %}`.
      https://symfony.com/doc/current/form/form_themes.html#applying-form-themes
  - question: You have a form field for file uploads. Which built-in Symfony form
      type should you use?
    answers:
      - value: "`FileType::class`"
        correct: true
      - value: "`UploadType::class`"
        correct: false
      - value: "`ImageType::class`"
        correct: false
      - value: "`AttachmentType::class`"
        correct: false
    help: The `FileType` is the built-in Symfony form type specifically designed for
      handling file uploads.
      https://symfony.com/doc/current/reference/forms/types/file.html
  - question: When building a form without a data class (e.g., for a contact form),
      how do you retrieve the submitted data as an associative array after
      `handleRequest()` and `isValid()`?
    answers:
      - value: "`$form->getData()`"
        correct: true
      - value: "`$form->getSubmittedData()`"
        correct: false
      - value: "`$request->request->all()`"
        correct: false
      - value: "`$form->get('data')`"
        correct: false
    help: The `getData()` method on the form object returns the form's data. If the
      form is not mapped to an object, it will return the submitted data as an
      associative array.
      https://symfony.com/doc/current/forms.html#forms-without-a-class
  - question: Which of the following is NOT a standard built-in Symfony form type?
    answers:
      - value: "`TextType`"
        correct: false
      - value: "`EmailType`"
        correct: false
      - value: "`PasswordType`"
        correct: false
      - value: "`JsonType`"
        correct: true
    help: Symfony provides a wide range of built-in form types for common HTML
      elements and data types. `JsonType` is not a standard built-in form type.
      https://symfony.com/doc/current/reference/forms/types.html
  - question: What is the purpose of setting `mapped => false` for a form field?
    answers:
      - value: To prevent the field's data from being written to the underlying data
          object.
        correct: true
      - value: To make the field optional and not require submission.
        correct: false
      - value: To hide the field from rendering in the Twig template.
        correct: false
      - value: To disable validation for that specific field.
        correct: false
    help: The `mapped` option, when set to `false`, indicates that this field does
      not correspond to a property on the underlying data object. Its value will
      not be read from or written to the object. This is useful for fields like
      'agree to terms and conditions'.
      https://symfony.com/doc/current/forms.html#unmapped-fields
  - question: Which Symfony console command can you use to list all available form
      types, type extensions, and type guessers?
    answers:
      - value: "`debug:form`"
        correct: true
      - value: "`form:list`"
        correct: false
      - value: "`list:forms`"
        correct: false
      - value: "`form:debug`"
        correct: false
    help: The `debug:form` command provides detailed information about your form
      types, including their options and extensions. You can also inspect
      specific form types.
      https://symfony.com/doc/current/forms.html#listing-available-form-types
  - question: To embed one form type, `CategoryType`, directly within another form
      type, `TaskType`, which of the following code snippets is correct within
      the `TaskType`'s `buildForm` method?
    answers:
      - value: |-
          ```php
          $builder->add('category', CategoryType::class);
          ```
        correct: true
      - value: |-
          ```php
          $builder->add('category', 'App\\Form\\CategoryType');
          ```
        correct: false
      - value: |-
          ```php
          $builder->add('category', new CategoryType());
          ```
        correct: false
      - value: |-
          ```php
          $builder->add('category', 'category_type');
          ```
        correct: false
    help: To embed a form type, you simply add it as a field in the parent form
      type's `buildForm` method, specifying the embedded form type's FQCN as the
      second argument. https://symfony.com/doc/current/form/embedded.html
  - question: What is the primary purpose of the `configureOptions(OptionsResolver
      $resolver)` method in a Symfony form type?
    answers:
      - value: To define the default options and their validation rules for the form
          type.
        correct: true
      - value: To add fields to the form builder.
        correct: false
      - value: To set the data for the form.
        correct: false
      - value: To handle form submission and validation.
        correct: false
    help: The `configureOptions()` method is used to define, configure, and validate
      the options that can be passed to your form type. It uses the
      `OptionsResolver` component.
      https://symfony.com/doc/current/form/create_custom_field_type.html#form-type-core-methods-overview
  - question: Which of the following Twig functions is used to render a single form
      field's HTML widget (e.g., an `<input type="text">` for a TextType field)?
    answers:
      - value: "`form_row(form.field_name)`"
        correct: false
      - value: "`form_widget(form.field_name)`"
        correct: true
      - value: "`form_label(form.field_name)`"
        correct: false
      - value: "`form_errors(form.field_name)`"
        correct: false
    help: The `form_widget()` Twig helper renders the actual HTML input element for
      a form field. `form_row()` renders the label, errors, and widget together.
      https://symfony.com/doc/current/form/form_customization.html#form-rendering-functions
  - question: When handling a form submission in a controller, after calling
      `$form->handleRequest($request);`, what is the correct conditional check
      to determine if the form was submitted and all its data is valid?
    answers:
      - value: "`if ($form->isSubmitted() && $form->isValid())`"
        correct: true
      - value: "`if ($form->isValid() && $form->isSubmitted())`"
        correct: true
      - value: "`if ($form->submitted() && $form->valid())`"
        correct: false
      - value: "`if ($form->hasSubmitted() && $form->hasValidData())`"
        correct: false
    help: The `isSubmitted()` method checks if the form has been submitted, and
      `isValid()` checks if the submitted data passes all validation
      constraints. Both should be checked to ensure successful form processing.
      https://symfony.com/doc/current/forms.html#handling-form-submissions
  - question: Which of the following is the recommended approach for creating a
      reusable and well-organized Symfony form?
    answers:
      - value: Creating the form directly in the controller using `createFormBuilder()`.
        correct: false
      - value: Defining a dedicated form class that extends `AbstractType`.
        correct: true
      - value: Using a YAML configuration file to define the form structure.
        correct: false
      - value: Generating the form HTML manually in the Twig template.
        correct: false
    help: Defining a dedicated form class that extends `AbstractType` promotes
      reusability, separation of concerns, and better organization, especially
      for complex forms.
      https://symfony.com/doc/current/forms.html#creating-a-form-class
  - question: What is the primary benefit of using CSRF protection with Symfony forms?
    answers:
      - value: It encrypts sensitive data submitted through the form.
        correct: false
      - value: It prevents cross-site request forgery attacks by ensuring requests
          originate from your application.
        correct: true
      - value: It validates the data types of submitted fields.
        correct: false
      - value: It automatically sanitizes user input to prevent XSS vulnerabilities.
        correct: false
    help: CSRF (Cross-Site Request Forgery) protection adds a hidden token to your
      forms. Symfony checks this token upon submission to ensure the request
      originated from a legitimate form on your site, preventing malicious
      attacks. https://symfony.com/doc/current/form/csrf.html
  - question: Which form type is specifically designed to handle collections of
      embedded forms, such as a list of tags associated with a task?
    answers:
      - value: "`ArrayType`"
        correct: false
      - value: "`CollectionType`"
        correct: true
      - value: "`ListType`"
        correct: false
      - value: "`EntityType`"
        correct: false
    help: The `CollectionType` is used to render a collection of other form types.
      It's ideal for scenarios where you need to manage multiple instances of a
      sub-form (e.g., multiple addresses, multiple tags).
      https://symfony.com/doc/current/form/form_collections.html
  - question: When unit testing a custom Symfony form type, which base class should
      your test extend?
    answers:
      - value: "`KernelTestCase`"
        correct: false
      - value: "`WebTestCase`"
        correct: false
      - value: "`TypeTestCase`"
        correct: true
      - value: "`FormTestCase`"
        correct: false
    help: The `Symfony\Component\Form\Test\TypeTestCase` provides a convenient way
      to unit test your custom form types in isolation, without needing a full
      Symfony kernel. https://symfony.com/doc/current/form/unit_testing.html
  - question: What is the purpose of a 'Data Transformer' in Symfony forms?
    answers:
      - value: To convert data between the format expected by the form field and the
          format expected by the underlying data object.
        correct: true
      - value: To validate the submitted data against predefined constraints.
        correct: false
      - value: To render custom HTML for form fields.
        correct: false
      - value: To encrypt and decrypt sensitive form data.
        correct: false
    help: Data Transformers are used to convert data from the 'model' format (how
      it's stored in your object) to the 'norm' format (how the form processes
      it) and then to the 'view' format (how it's displayed in the HTML field),
      and vice-versa. This is crucial when the data representation in your
      object differs from what the form field expects (e.g., a DateTime object
      to a string input).
      https://symfony.com/doc/current/form/data_transformers.html
  - question: Which form event occurs before the form is populated with existing
      data (e.g., when editing an existing entity)?
    answers:
      - value: "`FormEvents::PRE_SET_DATA`"
        correct: true
      - value: "`FormEvents::POST_SET_DATA`"
        correct: false
      - value: "`FormEvents::PRE_SUBMIT`"
        correct: false
      - value: "`FormEvents::POST_SUBMIT`"
        correct: false
    help: The `FormEvents::PRE_SET_DATA` event is dispatched at the very beginning
      of the form's data setting process, before any data is mapped to the form.
      This is useful for modifying the form based on the initial data.
      https://symfony.com/doc/current/form/events.html
  - question: You want to apply a form theme only to a specific form instance, and
      disable any globally configured form themes for that instance. Which Twig
      syntax achieves this?
    answers:
      - value: "`{% form_theme form with ['my_theme.html.twig'] only %}`"
        correct: true
      - value: "`{% form_theme form with 'my_theme.html.twig' exclusive %}`"
        correct: false
      - value: "`{% form_theme form 'my_theme.html.twig' override %}`"
        correct: false
      - value: "`{% form_theme form 'my_theme.html.twig' no_global %}`"
        correct: false
    help: Adding the `only` keyword after the list of form themes ensures that only
      the specified themes are applied to that particular form, bypassing any
      global configurations.
      https://symfony.com/doc/current/form/form_themes.html#disabling-global-themes
  - question: Which of the following is the correct way to add a submit button to a
      Symfony form using the `FormBuilderInterface`?
    answers:
      - value: "`$builder->add('save', SubmitType::class);`"
        correct: true
      - value: "`$builder->add('submit', ButtonType::class);`"
        correct: false
      - value: "`$builder->add('button', 'submit');`"
        correct: false
      - value: "`$builder->addSubmit('save');`"
        correct: false
    help: The `SubmitType::class` is the correct form type to add a submit button to
      your form.
      https://symfony.com/doc/current/forms.html#adding-a-submit-button
  - question: What is the primary role of the `OptionsResolver` in Symfony form types?
    answers:
      - value: To resolve the data submitted by the form.
        correct: false
      - value: To define and validate the options available for a form type.
        correct: true
      - value: To resolve the Twig template used for rendering the form.
        correct: false
      - value: To resolve the entity associated with the form.
        correct: false
    help: The `OptionsResolver` component is used within the `configureOptions()`
      method to define, default, and validate the options that can be passed to
      a form type.
      https://symfony.com/doc/current/components/options_resolver.html
  - question: When creating a form in a controller, which method is typically used
      to bind the form to an existing data object (e.g., an entity)?
    answers:
      - value: "`$this->createForm(TaskType::class, $task);`"
        correct: true
      - value: "`$this->createFormBuilder($task);`"
        correct: false
      - value: "`$form->setData($task);`"
        correct: false
      - value: "`$form->bind($task);`"
        correct: false
    help: The second argument to `createForm()` is typically the data object that
      the form should be mapped to. Symfony will then read data from this object
      to populate the form fields and write submitted data back to it.
      https://symfony.com/doc/current/forms.html#creating-a-form-class
  - question: Which Twig test should you use to reliably check if a form view is the
      root form (i.e., it has no parent form view), even if a child form is
      named 'parent'?
    answers:
      - value: "`if form.parent is null`"
        correct: false
      - value: "`if form is rootform`"
        correct: true
      - value: "`if form.isRoot`"
        correct: false
      - value: "`if form_parent(form) is null`"
        correct: true
    help: The `is rootform` test or `form_parent(form) is null` are the reliable
      ways to check if a form view is the root form. Directly checking
      `form.parent is null` can be ambiguous if a child form field is also named
      'parent'.
      https://symfony.com/doc/current/form/form_customization.html#checking-if-a-form-is-the-root-form
  - question: What is the purpose of the `entry_type` option in a `CollectionType` field?
    answers:
      - value: It defines the type of each individual form within the collection.
        correct: true
      - value: It specifies the data class for the entire collection.
        correct: false
      - value: It sets the default value for new entries in the collection.
        correct: false
      - value: It determines how the collection is rendered in Twig.
        correct: false
    help: The `entry_type` option in `CollectionType` is crucial as it specifies the
      form type that will be used for each item in the collection. For example,
      if you have a collection of `Tag` entities, `entry_type` would be
      `TagType::class`.
      https://symfony.com/doc/current/form/form_collections.html
  - question: Which of the following describes the `FormEvents::POST_SUBMIT` event?
    answers:
      - value: It is dispatched before the form's data is set from the request.
        correct: false
      - value: It is dispatched after the form has been submitted and the data has been
          mapped to the underlying object, but before validation.
        correct: false
      - value: It is dispatched after the form has been submitted, the data mapped, and
          validation has occurred.
        correct: true
      - value: It is dispatched when the form is initially created.
        correct: false
    help: The `FormEvents::POST_SUBMIT` event is dispatched after the form has been
      submitted, the data has been mapped to the underlying object, and
      validation has been performed. This is a good place to perform actions
      after the form is fully processed.
      https://symfony.com/doc/current/form/events.html
  - question: When rendering a form in Twig, what is the difference between
      `form_row(form.field)` and `form_widget(form.field)`?
    answers:
      - value: "`form_row` renders the label, errors, and widget, while `form_widget`
          renders only the HTML input element."
        correct: true
      - value: "`form_row` is for collection fields, `form_widget` is for single
          fields."
        correct: false
      - value: "`form_row` applies styling, `form_widget` does not."
        correct: false
      - value: "`form_widget` includes CSRF token, `form_row` does not."
        correct: false
    help: "`form_row()` is a convenience helper that renders the label, errors, and
      the widget for a single field, wrapped in a `div`. `form_widget()` only
      renders the HTML input element itself.
      https://symfony.com/doc/current/form/form_customization.html#form-renderi\
      ng-functions"
  - question: Which of the following is the correct way to define a `NotBlank`
      constraint for a `task` field when building a form directly in a
      controller using `createFormBuilder`?
    answers:
      - value: |-
          ```php
          $form = $this->createFormBuilder()
              ->add('task', TextType::class, [
                  'constraints' => new NotBlank(),
              ])
              ->getForm();
          ```
        correct: true
      - value: |-
          ```php
          $form = $this->createFormBuilder()
              ->add('task', TextType::class, ['validation' => ['NotBlank']])
              ->getForm();
          ```
        correct: false
      - value: |-
          ```php
          $form = $this->createFormBuilder()
              ->add('task', TextType::class)
              ->addConstraint('task', new NotBlank())
              ->getForm();
          ```
        correct: false
      - value: |-
          ```php
          $form = $this->createFormBuilder()
              ->add('task', TextType::class, ['required' => true])
              ->getForm();
          ```
        correct: false
    help: Validation constraints can be added directly to form fields via the
      `constraints` option in the field's options array.
      https://symfony.com/doc/current/components/form.html#adding-validation
  - question: What is the purpose of the `data_class` option in `configureOptions()`?
    answers:
      - value: It specifies the class name of the underlying data object that the form
          will map to.
        correct: true
      - value: It defines the default data for the form when it is first displayed.
        correct: false
      - value: It determines the type of data that the form will return after
          submission.
        correct: false
      - value: It sets the HTML `class` attribute for the form's root element.
        correct: false
    help: The `data_class` option tells Symfony which class the form should map its
      data to. This is essential for forms that are designed to edit or create
      instances of a specific entity or DTO.
      https://symfony.com/doc/current/form/dynamic_form_modification.html#basic-symfony-form-type-class-definition
  - question: Which of the following form types is typically used for a single line
      text input?
    answers:
      - value: "`TextareaType`"
        correct: false
      - value: "`StringType`"
        correct: false
      - value: "`TextType`"
        correct: true
      - value: "`InputType`"
        correct: false
    help: The `TextType` is the standard form type for a single-line text input,
      typically rendering as an `<input type="text">` element.
      https://symfony.com/doc/current/reference/forms/types/text.html
  - question: If you create a form using `createFormBuilder()` without providing an
      initial data object, what will `$form->getData()` return after a
      successful submission?
    answers:
      - value: An empty object.
        correct: false
      - value: An associative array of the submitted data.
        correct: true
      - value: "`null`."
        correct: false
      - value: A `Form` object containing the data.
        correct: false
    help: When a form is created without an initial data object (i.e.,
      `createFormBuilder()` is called without an argument, or `data_class` is
      set to `null`), `getData()` will return an associative array of the
      submitted values.
      https://symfony.com/doc/current/forms.html#forms-without-a-class
  - question: What is the purpose of a 'Form Type Extension' in Symfony?
    answers:
      - value: To create entirely new form types from scratch.
        correct: false
      - value: To add new functionality or modify existing options of an already defined
          form type without changing its original class.
        correct: true
      - value: To extend the Twig rendering capabilities for forms.
        correct: false
      - value: To provide a way to embed one form type within another.
        correct: false
    help: Form Type Extensions allow you to 'extend' existing form types by adding
      new options, listeners, or modifying their behavior, without directly
      altering the original type's class. This is useful for adding generic
      functionality across multiple forms.
      https://symfony.com/doc/current/form/type_extensions.html
  - question: Which of the following is a valid way to add validation constraints to
      an entity property using PHP attributes in Symfony 7?
    answers:
      - value: |-
          ```php
          use Symfony\Component\Validator\Constraints as Assert;

          class Task
          {
              #[Assert\NotBlank]
              public string $task;
          }
          ```
        correct: true
      - value: |-
          ```php
          class Task
          {
              /**
               * @Assert\NotBlank
               */
              public string $task;
          }
          ```
        correct: false
      - value: |-
          ```php
          class Task
          {
              public string $task;
              public function __construct() {
                  $this->addConstraint('task', new NotBlank());
              }
          }
          ```
        correct: false
      - value: |-
          ```php
          class Task
          {
              #[NotBlank]
              public string $task;
          }
          ```
        correct: false
    help: In Symfony 7, PHP attributes are the recommended way to define validation
      constraints directly on entity properties. You need to import the `Assert`
      alias for `Symfony\Component\Validator\Constraints`.
      https://symfony.com/doc/current/validation.html#constraints-in-properties
  - question: What happens if you forget to call `$form->handleRequest($request);`
      in your controller when processing a form submission?
    answers:
      - value: The form will still be submitted, but validation will not occur.
        correct: false
      - value: The form will not be populated with the submitted data, and
          `isSubmitted()` will return `false`.
        correct: true
      - value: An exception will be thrown immediately.
        correct: false
      - value: The form will automatically redirect to the previous page.
        correct: false
    help: The `handleRequest()` method is crucial for the form to 'see' the incoming
      request data. Without it, the form will not be populated, and methods like
      `isSubmitted()` and `isValid()` will not reflect the actual submission
      state.
      https://symfony.com/doc/current/forms.html#handling-form-submissions
  - question: Which of the following options can be passed to `form_start()` in Twig
      to add an HTML `id` attribute to the generated `<form>` tag?
    answers:
      - value: "`{{ form_start(form, { 'id': 'my_form_id' }) }}`"
        correct: false
      - value: "`{{ form_start(form, { attr: { id: 'my_form_id' } }) }}`"
        correct: true
      - value: "`{{ form_start(form, { attributes: { id: 'my_form_id' } }) }}`"
        correct: false
      - value: "`{{ form_start(form, { html_id: 'my_form_id' }) }}`"
        correct: false
    help: To add HTML attributes to the `<form>` tag rendered by `form_start()`, you
      pass an `attr` array within the options.
      https://symfony.com/doc/current/form/form_customization.html#changing-the-action-method-and-other-form-attributes
  - question: What is the primary purpose of the `FormBuilderInterface` in Symfony?
    answers:
      - value: To render the form in Twig templates.
        correct: false
      - value: To define the structure of a form by adding fields and their options.
        correct: true
      - value: To handle the submission and validation of form data.
        correct: false
      - value: To manage the lifecycle of form events.
        correct: false
    help: The `FormBuilderInterface` is used to programmatically build a form by
      adding fields, setting their types, and configuring their options. It's
      the core component for defining form structures in PHP.
      https://symfony.com/doc/current/components/form.html#creating-a-form
  - question: By default, what HTTP method does a Symfony form use for submission if
      not explicitly configured?
    answers:
      - value: "`GET`"
        correct: false
      - value: "`PUT`"
        correct: false
      - value: "`POST`"
        correct: true
      - value: "`PATCH`"
        correct: false
    help: Symfony forms default to using the `POST` HTTP method for submission,
      which is the standard for forms that modify data on the server.
      https://symfony.com/doc/current/forms.html#rendering-the-form
  - question: To change the HTTP method of a form from `POST` to `GET`, which option
      should you set when creating the form?
    answers:
      - value: "`'method' => 'GET'`"
        correct: true
      - value: "`'http_method' => 'GET'`"
        correct: false
      - value: "`'type' => 'GET'`"
        correct: false
      - value: "`'action_method' => 'GET'`"
        correct: false
    help: The `method` option can be passed to the form when creating it (e.g.,
      `createForm(TaskType::class, $task, ['method' => 'GET'])`) to override the
      default HTTP method.
      https://symfony.com/doc/current/form/form_customization.html#changing-the-action-method-and-other-form-attributes
  - question: What is the primary purpose of `form_end(form)` in a Twig template?
    answers:
      - value: To render the closing `</form>` tag and any remaining hidden fields (like
          CSRF tokens).
        correct: true
      - value: To submit the form data to the server.
        correct: false
      - value: To validate the form fields before submission.
        correct: false
      - value: To clear the form data after submission.
        correct: false
    help: The `form_end(form)` Twig helper renders the closing `</form>` tag and any
      form fields that haven't been explicitly rendered (e.g., CSRF tokens).
      It's essential for a complete form.
      https://symfony.com/doc/current/forms.html#rendering-the-form
  - question: You want to add a custom event listener to your form to dynamically
      add or remove fields based on user input. Which method of
      `FormBuilderInterface` would you use?
    answers:
      - value: "`addEventSubscriber()`"
        correct: true
      - value: "`addEventListener()`"
        correct: true
      - value: "`attachListener()`"
        correct: false
      - value: "`onEvent()`"
        correct: false
    help: You can attach event listeners or subscribers to a form builder using
      `addEventSubscriber()` or `addEventListener()` to react to various form
      events (like `PRE_SET_DATA`, `PRE_SUBMIT`, `POST_SUBMIT`).
      https://symfony.com/doc/current/form/events.html
  - question: What is the role of the `FormFactory` in Symfony?
    answers:
      - value: It is responsible for creating new form instances.
        correct: true
      - value: It handles the rendering of forms in Twig.
        correct: false
      - value: It manages the persistence of form data to a database.
        correct: false
      - value: It validates form submissions.
        correct: false
    help: The `FormFactory` is the central component for creating form instances. In
      a Symfony application, you typically interact with it via the
      `createForm()` or `createFormBuilder()` methods in your controller, which
      delegate to the form factory.
      https://symfony.com/doc/current/components/form.html#the-form-factory
  - question: Which of the following is the correct way to render a specific form
      field's label in Twig?
    answers:
      - value: "`{{ form_label(form.field_name) }}`"
        correct: true
      - value: "`{{ form.field_name.label }}`"
        correct: false
      - value: "`{{ label(form.field_name) }}`"
        correct: false
      - value: "`{{ form_row(form.field_name).label }}`"
        correct: false
    help: The `form_label()` Twig helper is used to render the HTML `<label>` tag
      for a specific form field.
      https://symfony.com/doc/current/form/form_customization.html#form-rendering-functions
  - question: When defining a custom form type, which method is used to set any
      extra variables needed when rendering the field in a form theme template?
    answers:
      - value: "`buildView()`"
        correct: true
      - value: "`finishView()`"
        correct: true
      - value: "`renderView()`"
        correct: false
      - value: "`prepareView()`"
        correct: false
    help: Both `buildView()` and `finishView()` methods in `AbstractType` allow you
      to set variables that will be available in the form's Twig view.
      `buildView()` is generally preferred for simple cases, while
      `finishView()` is useful when you need to access child views.
      https://symfony.com/doc/current/form/create_custom_field_type.html#form-type-core-methods-overview
  - question: What is the purpose of the `empty_data` option in a form field?
    answers:
      - value: It defines the value that will be used if the field's submitted data is
          empty.
        correct: true
      - value: It specifies the default placeholder text for the input field.
        correct: false
      - value: It determines if the field is required or optional.
        correct: false
      - value: It sets the initial data for the form when no object is provided.
        correct: false
    help: The `empty_data` option specifies the value that will be used for the
      field's model data if the submitted value is empty. This is useful for
      ensuring a default value or a specific object is created when a field is
      optional and not submitted.
      https://symfony.com/doc/current/reference/forms/types/form.html#empty-data
  - question: Which of the following is the most appropriate way to handle multiple
      form themes for a single form in Twig, where later themes should override
      earlier ones?
    answers:
      - value: "`{% form_theme form with ['theme1.html.twig', 'theme2.html.twig'] %}`"
        correct: true
      - value: "`{% form_theme form 'theme1.html.twig' %}{% form_theme form
          'theme2.html.twig' %}`"
        correct: false
      - value: "`{{ form_theme(form, ['theme1.html.twig', 'theme2.html.twig']) }}`"
        correct: false
      - value: "`{% form_theme form.theme = ['theme1.html.twig', 'theme2.html.twig']
          %}`"
        correct: false
    help: You can pass an array of theme paths to the `form_theme` tag. The themes
      are applied in the order they are listed, meaning later themes can
      override blocks defined in earlier ones.
      https://symfony.com/doc/current/form/form_themes.html#applying-multiple-themes
  - question: When should you typically use `createFormBuilder()` in a Symfony
      controller instead of creating a dedicated form class?
    answers:
      - value: When the form is simple, used only once, and doesn't require complex
          logic or reusability.
        correct: true
      - value: When the form needs to be highly customizable with many options.
        correct: false
      - value: When the form is part of a complex collection of forms.
        correct: false
      - value: When you need to apply advanced data transformers.
        correct: false
    help: "`createFormBuilder()` is suitable for simple, one-off forms that don't
      require a dedicated class for reusability or complex configuration. For
      more complex or reusable forms, a dedicated form class is preferred.
      https://symfony.com/doc/current/forms.html#creating-forms-in-a-controller"
  - question: To render only the error messages for a specific form field
      `form.name` in Twig, which helper function would you use?
    answers:
      - value: "`{{ form_errors(form.name) }}`"
        correct: true
      - value: "`{{ form.name.errors }}`"
        correct: false
      - value: "`{{ errors(form.name) }}`"
        correct: false
      - value: "`{{ form_row(form.name).errors }}`"
        correct: false
    help: The `form_errors()` Twig helper is used to render any validation error
      messages associated with a specific form field or the entire form.
      https://symfony.com/doc/current/form/form_customization.html#form-rendering-functions
  - question: Which of the following describes the `FormEvents::PRE_SUBMIT` event?
    answers:
      - value: It is dispatched before the form's data is set from the request.
        correct: false
      - value: It is dispatched after the form has been submitted but before the data is
          mapped to the underlying object.
        correct: true
      - value: It is dispatched after the form has been submitted and validated.
        correct: false
      - value: It is dispatched when the form is initially created.
        correct: false
    help: The `FormEvents::PRE_SUBMIT` event is dispatched after the form has been
      submitted, but before the submitted data is mapped to the form's fields.
      This is useful for modifying the submitted data before it's processed.
      https://symfony.com/doc/current/form/events.html
  - question: What is the purpose of the `entry_options` option in a
      `CollectionType` field?
    answers:
      - value: It defines options that will be passed to each individual form type
          within the collection.
        correct: true
      - value: It sets options for the `CollectionType` itself, not its entries.
        correct: false
      - value: It specifies the default data for new entries in the collection.
        correct: false
      - value: It determines how the collection is rendered in Twig.
        correct: false
    help: The `entry_options` option in `CollectionType` allows you to pass an array
      of options to each individual form type created for the collection
      entries. This is useful for configuring specific behavior for each item in
      the collection. https://symfony.com/doc/current/form/form_collections.html
  - question: Which of the following is the correct way to set initial data for a
      form that is bound to an entity object?
    answers:
      - value: Pass the entity object as the second argument to `createForm()`.
        correct: true
      - value: Call `$form->setData($entity);` after creating the form.
        correct: false
      - value: Set the data in `configureOptions()` using `data_class`.
        correct: false
      - value: Pass the data as the first argument to `createFormBuilder()`.
        correct: false
    help: When creating a form that's bound to an object, you pass the object as the
      second argument to `createForm()`. Symfony will then read the object's
      properties to populate the form fields.
      https://symfony.com/doc/current/forms.html#creating-a-form-class
  - question: If you have a form field that you do not want to be rendered in the
      Twig template, how can you prevent its rendering?
    answers:
      - value: Do not call any `form_` Twig helper functions for that field.
        correct: true
      - value: Set the `rendered` option to `false` in the form type.
        correct: false
      - value: Set the `visible` option to `false` in the form type.
        correct: false
      - value: Use `form_ignore(form.field_name)` in Twig.
        correct: false
    help: Symfony's form rendering helpers only render what you explicitly ask them
      to. If you don't call `form_row()`, `form_widget()`, `form_label()`, or
      `form_errors()` for a specific field, it will not be rendered. Fields that
      are not rendered by individual helpers will be rendered by `form_end()`.
      To prevent a field from being rendered at all, you must ensure it's not
      included in any `form_` helper calls and is not a child of a form that is
      rendered with `form(form)` or `form_widget(form)`. You can also set the
      `block_prefix` option to `_` to prevent its rendering.
      https://symfony.com/doc/current/form/form_customization.html#rendering-each-field-by-hand
  - question: What is the primary difference between `form_theme form
      'theme.html.twig'` and `form_theme form.child 'theme.html.twig'`?
    answers:
      - value: The first applies the theme to the entire form, while the second applies
          it only to a specific child form.
        correct: true
      - value: The first is for global themes, the second is for local themes.
        correct: false
      - value: The first is for form types, the second is for form instances.
        correct: false
      - value: There is no functional difference; they are interchangeable.
        correct: false
    help: You can apply a form theme to the entire form or to a specific child form
      within it. This allows for granular control over the rendering of nested
      form elements.
      https://symfony.com/doc/current/form/form_themes.html#applying-different-themes-to-parent-and-child-forms
  - question: Which of the following is the correct way to render an entire Symfony
      form, including its fields and HTML form tags, using a single Twig helper?
    answers:
      - value: "`{{ form(form) }}`"
        correct: true
      - value: "`{{ render_form(form) }}`"
        correct: false
      - value: "`{{ form_all(form) }}`"
        correct: false
      - value: "`{{ form_render(form) }}`"
        correct: false
    help: The `form(form)` Twig helper is a shortcut to render the entire form,
      including `form_start`, `form_widget`, and `form_end`. It's useful for
      quick prototyping or when full control over individual field rendering
      isn't needed.
      https://symfony.com/doc/current/forms.html#rendering-the-form
  - question: When creating a form, if you don't explicitly specify a form type for
      a field (e.g., `$builder->add('name');`), what does Symfony use to
      determine the field's type?
    answers:
      - value: It defaults to `TextType`.
        correct: false
      - value: It uses form type guessers based on the underlying data's metadata (e.g.,
          Doctrine mapping, validation constraints).
        correct: true
      - value: It throws an exception, requiring an explicit type.
        correct: false
      - value: It uses the field name to infer the type (e.g., 'email' becomes
          `EmailType`).
        correct: false
    help: Symfony uses 'form type guessers' to automatically determine the best form
      type for a field if you don't explicitly specify one. These guessers look
      at metadata like validation constraints or Doctrine mapping.
      https://symfony.com/doc/current/form/type_guesser.html
  - question: Which of the following form types is suitable for a multi-line text input?
    answers:
      - value: "`TextType`"
        correct: false
      - value: "`TextareaType`"
        correct: true
      - value: "`RichTextType`"
        correct: false
      - value: "`LongTextType`"
        correct: false
    help: The `TextareaType` is the built-in form type for multi-line text inputs,
      rendering as an HTML `<textarea>` element.
      https://symfony.com/doc/current/reference/forms/types/textarea.html
  - question: What is the primary benefit of using form events (e.g.,
      `PRE_SET_DATA`, `POST_SUBMIT`)?
    answers:
      - value: To customize the form's rendering in Twig.
        correct: false
      - value: To dynamically modify the form's structure or data at different points in
          its lifecycle.
        correct: true
      - value: To add client-side validation to the form.
        correct: false
      - value: To encrypt and decrypt form data.
        correct: false
    help: Form events allow you to hook into various stages of the form's lifecycle
      (e.g., before data is set, before data is submitted, after data is
      submitted and validated) to dynamically add or remove fields, modify data,
      or perform other custom logic.
      https://symfony.com/doc/current/form/events.html
  - question: When working with `CollectionType`, how can you allow users to add new
      items to the collection dynamically (e.g., add new tags to a task)?
    answers:
      - value: Set the `allow_add` option to `true` and handle the client-side
          JavaScript.
        correct: true
      - value: Set the `dynamic_add` option to `true`.
        correct: false
      - value: Use the `add_entry_button` option.
        correct: false
      - value: It's handled automatically by Symfony; no special option is needed.
        correct: false
    help: To allow adding new items to a `CollectionType`, you must set the
      `allow_add` option to `true`. You then need to implement the client-side
      JavaScript to dynamically add new form rows to the DOM.
      https://symfony.com/doc/current/form/form_collections.html#allowing-new-tags
  - question: Which of the following form types is used for a single checkbox input?
    answers:
      - value: "`BooleanType`"
        correct: false
      - value: "`ChoiceType`"
        correct: false
      - value: "`CheckboxType`"
        correct: true
      - value: "`ToggleType`"
        correct: false
    help: The `CheckboxType` is the built-in form type for a single checkbox input,
      typically rendering as an `<input type="checkbox">` element.
      https://symfony.com/doc/current/reference/forms/types/checkbox.html
  - question: When is the `finishView()` method of a form type typically more useful
      than `buildView()`?
    answers:
      - value: When you need to access child views after they have been built.
        correct: true
      - value: When you need to define the form's fields.
        correct: false
      - value: When you need to configure the form's options.
        correct: false
      - value: When you need to handle form submission logic.
        correct: false
    help: While `buildView()` is generally sufficient for setting view variables,
      `finishView()` is useful when you need to access or modify the view
      variables of child forms, as they will have already been built at this
      stage.
      https://symfony.com/doc/current/form/create_custom_field_type.html#form-type-core-methods-overview
  - question: What is the purpose of the `action` option when creating a form?
    answers:
      - value: It defines the URL where the form data will be submitted.
        correct: true
      - value: It specifies the HTTP method for form submission.
        correct: false
      - value: It sets the name of the controller action to handle the form.
        correct: false
      - value: It determines the default value of the form fields.
        correct: false
    help: The `action` option sets the `action` attribute of the HTML `<form>` tag,
      determining the URL to which the form data will be submitted. By default,
      it submits to the current URL.
      https://symfony.com/doc/current/form/form_customization.html#changing-the-action-method-and-other-form-attributes
  - question: Which of the following is the correct way to render only the
      `description` field and then iterate over and render the `name` of each
      `tag` in a `tags` collection field, assuming `form.tags` is a
      `CollectionType`?
    answers:
      - value: |-
          ```twig
          {{ form_row(form.description) }}
          {% for tag in form.tags %}
              {{ form_row(tag.name) }}
          {% endfor %}
          ```
        correct: true
      - value: |-
          ```twig
          {{ form_row(form.description) }}
          {% for tag in form.tags.children %}
              {{ form_row(tag.name) }}
          {% endfor %}
          ```
        correct: false
      - value: |-
          ```twig
          {{ form_row(form.description) }}
          {% for tag in form.tags.data %}
              {{ form_row(tag.name) }}
          {% endfor %}
          ```
        correct: false
      - value: |-
          ```twig
          {{ form_row(form.description) }}
          {{ form_widget(form.tags) }}
          ```
        correct: false
    help: When rendering a `CollectionType` field, you typically loop through its
      child form views (e.g., `form.tags`) and render each sub-form's fields
      individually.
      https://symfony.com/doc/current/form/form_collections.html#rendering-the-collection
  - question: What is the purpose of a 'Form Type Guesser' in Symfony?
    answers:
      - value: To guess the correct Twig template for rendering a form field.
        correct: false
      - value: To automatically determine the form type and options for a field based on
          its underlying data's metadata.
        correct: true
      - value: To guess the appropriate validation constraints for a field.
        correct: false
      - value: To guess the default value for a form field.
        correct: false
    help: Form Type Guessers inspect the metadata of the underlying data (e.g.,
      Doctrine mapping, validation constraints) to automatically suggest the
      most appropriate form type and options when you don't explicitly define
      them. https://symfony.com/doc/current/form/type_guesser.html
  - question: Which form type is used for a dropdown select box?
    answers:
      - value: "`SelectType`"
        correct: false
      - value: "`ChoiceType`"
        correct: true
      - value: "`DropdownType`"
        correct: false
      - value: "`OptionType`"
        correct: false
    help: The `ChoiceType` is a versatile form type used for rendering various types
      of choice inputs, including dropdown select boxes, radio buttons, and
      checkboxes, depending on its options.
      https://symfony.com/doc/current/reference/forms/types/choice.html
  - question: When defining a custom form type, what is the purpose of the
      `getParent()` method?
    answers:
      - value: To specify the parent form type from which this type inherits its
          behavior and options.
        correct: true
      - value: To get the parent form instance in the form tree.
        correct: false
      - value: To define the parent entity of the form's data.
        correct: false
      - value: To retrieve the form's parent controller.
        correct: false
    help: The `getParent()` method in a form type specifies the parent type from
      which it inherits. Most custom form types extend `AbstractType` and
      implicitly inherit from `FormType` as their ultimate parent. This allows
      for a hierarchical structure and option inheritance.
      https://symfony.com/doc/current/form/create_custom_field_type.html#creating-a-custom-field-type
  - question: Which of the following is a valid way to add a `DateType` field to a
      form builder?
    answers:
      - value: "`$builder->add('dueDate', DateType::class);`"
        correct: true
      - value: "`$builder->add('dueDate', 'date');`"
        correct: false
      - value: "`$builder->addDate('dueDate');`"
        correct: false
      - value: "`$builder->add('dueDate', new DateType());`"
        correct: false
    help: When adding a field to the form builder, you specify the field name as the
      first argument and the fully qualified class name of the form type as the
      second argument.
      https://symfony.com/doc/current/forms.html#creating-a-form-class
  - question: What is the primary role of the `FormInterface::isValid()` method?
    answers:
      - value: To check if the form has been submitted.
        correct: false
      - value: To determine if the submitted data passes all configured validation
          constraints.
        correct: true
      - value: To check if the form's data has been synchronized with the underlying
          object.
        correct: false
      - value: To verify if the CSRF token is valid.
        correct: false
    help: The `isValid()` method returns `true` if the form has been submitted and
      all submitted data passes the validation rules defined for the form and
      its fields.
      https://symfony.com/doc/current/forms.html#handling-form-submissions
  - question: Which of the following is the correct way to render a specific form
      field's errors in Twig?
    answers:
      - value: "`{{ form_errors(form.field_name) }}`"
        correct: true
      - value: "`{{ form.field_name.errors }}`"
        correct: false
      - value: "`{{ errors(form.field_name) }}`"
        correct: false
      - value: "`{{ form_row(form.field_name).errors }}`"
        correct: false
    help: The `form_errors()` Twig helper is used to render any validation error
      messages associated with a specific form field or the entire form.
      https://symfony.com/doc/current/form/form_customization.html#form-rendering-functions
  - question: When defining validation constraints for an entity in Symfony, which
      of the following formats is NOT officially supported?
    answers:
      - value: PHP Attributes
        correct: false
      - value: YAML files
        correct: false
      - value: XML files
        correct: false
      - value: JSON files
        correct: true
    help: Symfony supports defining validation constraints using PHP attributes,
      YAML, XML, and PHP callbacks within the entity itself. JSON is not a
      supported format for defining validation constraints.
      https://symfony.com/doc/current/validation.html#configuration
  - question: What is the primary purpose of the `data` option in a form field?
    answers:
      - value: To set the initial value of the field when the form is displayed.
        correct: true
      - value: To define the data type of the field.
        correct: false
      - value: To specify the data class for the entire form.
        correct: false
      - value: To retrieve the submitted value of the field.
        correct: false
    help: The `data` option allows you to set the initial value of a specific form
      field, overriding any value that might come from the underlying data
      object. This is useful for setting default values or pre-populating
      fields.
      https://symfony.com/doc/current/reference/forms/types/form.html#data
  - question: Which of the following form types is typically used for a password
      input field?
    answers:
      - value: "`TextType`"
        correct: false
      - value: "`SecretType`"
        correct: false
      - value: "`PasswordType`"
        correct: true
      - value: "`HiddenType`"
        correct: false
    help: The `PasswordType` is the built-in form type for password input fields,
      rendering as an `<input type="password">` element. It automatically
      handles clearing the field on display for security.
      https://symfony.com/doc/current/reference/forms/types/password.html
  - question: When using `CollectionType` with `allow_delete => true`, what
      additional client-side functionality is typically required?
    answers:
      - value: JavaScript to dynamically remove form rows from the DOM.
        correct: true
      - value: A hidden field for each entry to mark it for deletion.
        correct: false
      - value: Automatic deletion of entries by Symfony without client-side interaction.
        correct: false
      - value: A confirmation dialog handled by Symfony's built-in JavaScript.
        correct: false
    help: Setting `allow_delete` to `true` enables Symfony to handle the removal of
      items from the underlying collection when they are no longer present in
      the submitted form data. However, you still need client-side JavaScript to
      physically remove the form rows from the DOM when a user wants to delete
      an item.
      https://symfony.com/doc/current/form/form_collections.html#allowing-items-to-be-deleted
  - question: Which form type is used for a single date input field?
    answers:
      - value: "`DateTimeType`"
        correct: false
      - value: "`DateType`"
        correct: true
      - value: "`CalendarType`"
        correct: false
      - value: "`TimeType`"
        correct: false
    help: The `DateType` is the built-in form type for a single date input field. It
      can be rendered in various ways (e.g., text input, select boxes) depending
      on its options.
      https://symfony.com/doc/current/reference/forms/types/date.html
  - question: What is the purpose of the `required` option for a form field?
    answers:
      - value: It adds an HTML5 `required` attribute to the input element and enables
          basic client-side validation.
        correct: true
      - value: It ensures that the field's value is not `null` after submission.
        correct: false
      - value: It automatically adds a `NotBlank` validation constraint to the field.
        correct: false
      - value: It makes the field visible to the user.
        correct: false
    help: The `required` option adds the HTML5 `required` attribute to the rendered
      input field, which provides basic client-side validation. It does not
      automatically add a `NotBlank` validation constraint; you should add that
      separately for server-side validation.
      https://symfony.com/doc/current/reference/forms/types/form.html#required
  - question: Which of the following is the correct way to render the entire form,
      including its start tag, all fields, and end tag, in a Twig template?
    answers:
      - value: |-
          ```twig
          {{ form_start(form) }}
              {{ form_widget(form) }}
          {{ form_end(form) }}
          ```
        correct: true
      - value: |-
          ```twig
          {{ form(form) }}
          ```
        correct: true
      - value: |-
          ```twig
          {{ form_start(form) }}
              {{ form_rows(form) }}
          {{ form_end(form) }}
          ```
        correct: false
      - value: |-
          ```twig
          {{ form_render(form) }}
          ```
        correct: false
    help: You can render the entire form using the `form(form)` helper for
      simplicity, or by manually rendering `form_start()`, `form_widget()` (for
      all fields), and `form_end()`.
      https://symfony.com/doc/current/forms.html#rendering-the-form
  - question: What is the purpose of the `block_prefix` option in a form type?
    answers:
      - value: It defines the prefix used for Twig block names when theming the form
          type.
        correct: true
      - value: It sets the HTML `id` prefix for all fields within the form type.
        correct: false
      - value: It specifies the translation domain for the form type's labels.
        correct: false
      - value: It determines the default value for the form type.
        correct: false
    help: The `block_prefix` option determines the prefix used for Twig block names
      when Symfony renders the form. This is crucial for customizing the
      rendering of specific form types through form themes.
      https://symfony.com/doc/current/reference/forms/types/form.html#block-prefix
  - question: Which form type is used for a hidden input field?
    answers:
      - value: "`InvisibleType`"
        correct: false
      - value: "`SecretType`"
        correct: false
      - value: "`HiddenType`"
        correct: true
      - value: "`GhostType`"
        correct: false
    help: The `HiddenType` is the built-in form type for hidden input fields,
      rendering as an `<input type="hidden">` element. It's used to store data
      that should be submitted with the form but not visible to the user.
      https://symfony.com/doc/current/reference/forms/types/hidden.html
  - question: When using `CollectionType` with `allow_add => true`, what additional
      client-side functionality is typically required?
    answers:
      - value: JavaScript to dynamically add new form rows to the DOM.
        correct: true
      - value: A button that automatically triggers a new form entry.
        correct: false
      - value: Automatic addition of entries by Symfony without client-side interaction.
        correct: false
      - value: A server-side endpoint to generate new form prototypes.
        correct: false
    help: Setting `allow_add` to `true` enables Symfony to handle new items added to
      the collection during form submission. However, you need to implement
      client-side JavaScript to dynamically add new form rows to the DOM when a
      user wants to add an item.
      https://symfony.com/doc/current/form/form_collections.html#allowing-new-tags
  - question: What is the purpose of the `by_reference` option in a form field,
      especially with `CollectionType`?
    answers:
      - value: It determines if the underlying object's setter method is called or if
          the collection is modified directly.
        correct: true
      - value: It specifies if the field's data is passed by value or by reference.
        correct: false
      - value: It controls whether the field's data is stored in the session or not.
        correct: false
      - value: It defines if the field is rendered as a reference or a direct input.
        correct: false
    help: The `by_reference` option (defaulting to `true` for collections)
      determines how the form interacts with the underlying data. If `true`,
      Symfony will try to call the setter (e.g., `setTags()`). If `false`,
      Symfony will directly manipulate the collection (e.g., `addTag()`,
      `removeTag()`). Setting it to `false` is often necessary when your
      collection uses `add` and `remove` methods instead of a single setter.
      https://symfony.com/doc/current/reference/forms/types/collection.html#by-reference
  - question: Which of the following is the correct way to render a specific form
      field's label with a custom text 'Due Date' in Twig?
    answers:
      - value: "`{{ form_label(form.dueDate, 'Due Date') }}`"
        correct: true
      - value: "`{{ form_label(form.dueDate, {'label': 'Due Date'}) }}`"
        correct: false
      - value: "`{{ form.dueDate.label('Due Date') }}`"
        correct: false
      - value: "`{{ label(form.dueDate, 'Due Date') }}`"
        correct: false
    help: The `form_label()` Twig helper accepts an optional second argument to
      override the default label text.
      https://symfony.com/doc/current/form/form_customization.html#rendering-a-field-s-label
  - question: What is the primary role of the `FormEvents::POST_SET_DATA` event?
    answers:
      - value: It is dispatched after the form's data has been set from the underlying
          object.
        correct: true
      - value: It is dispatched before the form's data is set from the underlying
          object.
        correct: false
      - value: It is dispatched after the form has been submitted and validated.
        correct: false
      - value: It is dispatched when the form is initially created.
        correct: false
    help: The `FormEvents::POST_SET_DATA` event is dispatched after the form has
      been populated with data from the underlying object. This is useful for
      performing actions or modifying the form after its initial data is
      available. https://symfony.com/doc/current/form/events.html
  - question: Which of the following form types is used for a single email input field?
    answers:
      - value: "`TextType`"
        correct: false
      - value: "`StringType`"
        correct: false
      - value: "`EmailType`"
        correct: true
      - value: "`MailType`"
        correct: false
    help: The `EmailType` is the built-in form type for email input fields,
      rendering as an `<input type="email">` element. It also provides basic
      HTML5 client-side validation for email format.
      https://symfony.com/doc/current/reference/forms/types/email.html
  - question: What is the purpose of the `attr` option when adding a field to a form
      builder?
    answers:
      - value: To add HTML attributes directly to the rendered input element.
        correct: true
      - value: To define custom PHP attributes for the field.
        correct: false
      - value: To set the data attributes for the field's label.
        correct: false
      - value: To specify the CSS class for the field's row.
        correct: false
    help: The `attr` option is an array of HTML attributes that will be applied
      directly to the main HTML element of the form field (e.g., the `<input>`,
      `<select>`, or `<textarea>` tag).
      https://symfony.com/doc/current/reference/forms/types/form.html#attr
  - question: Which form type is used for a number input field (e.g., for integers
      or decimals)?
    answers:
      - value: "`TextType`"
        correct: false
      - value: "`IntegerType`"
        correct: false
      - value: "`NumberType`"
        correct: true
      - value: "`DecimalType`"
        correct: false
    help: The `NumberType` is the built-in form type for numeric input fields. It
      can handle both integers and floating-point numbers. `IntegerType` and
      `PercentType` are specific variations.
      https://symfony.com/doc/current/reference/forms/types/number.html
  - question: What is the purpose of the `label` option for a form field?
    answers:
      - value: To define the text displayed in the HTML `<label>` for the field.
        correct: true
      - value: To set the name attribute of the input field.
        correct: false
      - value: To specify the placeholder text for the input field.
        correct: false
      - value: To define the translation key for the field's label.
        correct: false
    help: The `label` option allows you to explicitly set the text that will be
      displayed as the label for a form field in the rendered HTML. If not set,
      Symfony will guess it based on the field name.
      https://symfony.com/doc/current/reference/forms/types/form.html#label
  - question: Which form type is used for a URL input field?
    answers:
      - value: "`TextType`"
        correct: false
      - value: "`LinkType`"
        correct: false
      - value: "`UrlType`"
        correct: true
      - value: "`WebType`"
        correct: false
    help: The `UrlType` is the built-in form type for URL input fields, rendering as
      an `<input type="url">` element. It also provides basic HTML5 client-side
      validation for URL format.
      https://symfony.com/doc/current/reference/forms/types/url.html
  - question: What is the purpose of the `help` option for a form field?
    answers:
      - value: To provide additional descriptive text or instructions displayed near the
          field.
        correct: true
      - value: To define the tooltip text for the field.
        correct: false
      - value: To specify the validation error message for the field.
        correct: false
      - value: To link to external documentation for the field.
        correct: false
    help: The `help` option allows you to provide additional text that will be
      rendered near the form field, typically below the input, to give users
      more context or instructions.
      https://symfony.com/doc/current/reference/forms/types/form.html#help
  - question: Which form type is used for a color input field?
    answers:
      - value: "`TextType`"
        correct: false
      - value: "`ColorPickerType`"
        correct: false
      - value: "`ColorType`"
        correct: true
      - value: "`HexColorType`"
        correct: false
    help: The `ColorType` is the built-in form type for color input fields,
      rendering as an `<input type="color">` element.
      https://symfony.com/doc/current/reference/forms/types/color.html
  - question: What is the purpose of the `placeholder` option for a form field?
    answers:
      - value: To define the text that appears in the input field when it's empty.
        correct: true
      - value: To set the default value for the field.
        correct: false
      - value: To provide a hint for auto-completion.
        correct: false
      - value: To define the label for the field.
        correct: false
    help: The `placeholder` option sets the HTML `placeholder` attribute for the
      input element, providing a hint to the user about what kind of data to
      enter.
      https://symfony.com/doc/current/reference/forms/types/form.html#placeholder
  - question: Which form type is used for a range input field?
    answers:
      - value: "`NumberType`"
        correct: false
      - value: "`SliderType`"
        correct: false
      - value: "`RangeType`"
        correct: true
      - value: "`ScaleType`"
        correct: false
    help: The `RangeType` is the built-in form type for range input fields,
      rendering as an `<input type="range">` element.
      https://symfony.com/doc/current/reference/forms/types/range.html
  - question: What is the purpose of the `disabled` option for a form field?
    answers:
      - value: To prevent the user from interacting with the field and exclude its data
          from submission.
        correct: true
      - value: To hide the field from rendering in the Twig template.
        correct: false
      - value: To make the field read-only but still submit its data.
        correct: false
      - value: To apply a CSS class that visually disables the field.
        correct: false
    help: Setting the `disabled` option to `true` renders the HTML `disabled`
      attribute, making the field uneditable and preventing its data from being
      submitted with the form.
      https://symfony.com/doc/current/reference/forms/types/form.html#disabled
  - question: Which form type is used for a search input field?
    answers:
      - value: "`TextType`"
        correct: false
      - value: "`QueryType`"
        correct: false
      - value: "`SearchType`"
        correct: true
      - value: "`FilterType`"
        correct: false
    help: The `SearchType` is the built-in form type for search input fields,
      rendering as an `<input type="search">` element.
      https://symfony.com/doc/current/reference/forms/types/search.html
  - question: What is the purpose of the `read_only` option for a form field?
    answers:
      - value: To make the field's value uneditable by the user, but still include its
          data in the submission.
        correct: true
      - value: To prevent the field from being rendered.
        correct: false
      - value: To disable the field and exclude its data from submission.
        correct: false
      - value: To apply a CSS class that visually indicates it's read-only.
        correct: false
    help: Setting the `read_only` option to `true` renders the HTML `readonly`
      attribute, making the field's value uneditable by the user. Unlike
      `disabled`, the field's data will still be submitted with the form.
      https://symfony.com/doc/current/reference/forms/types/form.html#read-only
