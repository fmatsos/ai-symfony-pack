category: Forms

questions:
  -
    question: >
      Which method is primarily used in a Symfony controller to create a form instance based on a dedicated form type class?
    answers:
      - { value: "createFormBuilder()", correct: false }
      - { value: "createForm()", correct: true }
      - { value: "buildForm()", correct: false }
      - { value: "getFormFactory()->create()", correct: false }
    help: |
      The `createForm()` method in an `AbstractController` is the standard way to instantiate a form based on a form type class.
      https://symfony.com/doc/current/forms.html#creating-form-classes

  -
    question: |
      Consider the following Symfony form class:

      ```php
      namespace App\Form\Type;

      use Symfony\Component\Form\AbstractType;
      use Symfony\Component\Form\FormBuilderInterface;
      use Symfony\Component\OptionsResolver\OptionsResolver;
      use App\Entity\Product;

      class ProductType extends AbstractType
      {
          public function buildForm(FormBuilderInterface $builder, array $options): void
          {
              $builder->add('name');
              $builder->add('price');
          }

          public function configureOptions(OptionsResolver $resolver): void
          {
              $resolver->setDefaults([
                  'data_class' => Product::class,
              ]);
          }
      }
      ```

      Which method is responsible for defining the fields of the form?
    answers:
      - { value: "`configureOptions()`", correct: false }
      - { value: "`buildForm()`", correct: true }
      - { value: "`setDefaultOptions()`", correct: false }
      - { value: "`getForm()`", correct: false }
    help: |
      The `buildForm()` method is where you define the form fields and their types using the `FormBuilderInterface`.
      https://symfony.com/doc/current/form/create_custom_field_type.html#form-type-core-methods-overview

  -
    question: >
      What is the purpose of the `handleRequest()` method when processing a Symfony form submission?
    answers:
      - { value: "To render the form in the Twig template.", correct: false }
      - { value: "To validate the form data against constraints.", correct: false }
      - { value: "To populate the form with data from the HTTP request.", correct: true }
      - { value: "To redirect the user after a successful submission.", correct: false }
    help: |
      The `handleRequest()` method inspects the incoming `Request` object and populates the form with any submitted data.
      https://symfony.com/doc/current/forms.html#handling-form-submissions

  -
    question: >
      After calling `handleRequest($request)` on a form, which method should you call to check if the form has been successfully submitted and all its data is valid?
    answers:
      - { value: "`isSubmitted()`", correct: false }
      - { value: "`isValid()`", correct: false }
      - { value: "`isSubmitted() && isValid()`", correct: true }
      - { value: "`getData()`", correct: false }
    help: |
      You should check both `isSubmitted()` and `isValid()` to ensure the form was submitted and its data passes all validation rules.
      https://symfony.com/doc/current/forms.html#handling-form-submissions

  -
    question: >
      Which Twig function is used to render the opening `<form>` tag in a Symfony template?
    answers:
      - { value: "`form_widget()`", correct: false }
      - { value: "`form_row()`", correct: false }
      - { value: "`form_start()`", correct: true }
      - { value: "`form_end()`", correct: false }
    help: |
      `form_start(form)` generates the opening `<form>` tag, including attributes like `method` and `action`.
      https://symfony.com/doc/current/forms.html#rendering-the-form

  -
    question: >
      Which of the following built-in Symfony form types is typically used for selecting one or more options from a predefined list?
    answers:
      - { value: "TextType", correct: false }
      - { value: "ChoiceType", correct: true }
      - { value: "EntityType", correct: true }
      - { value: "CollectionType", correct: false }
      - { value: "HiddenType", correct: false }
    help: |
      `ChoiceType` is used for dropdowns, radio buttons, or checkboxes. `EntityType` is a specialized `ChoiceType` for Doctrine entities.
      https://symfony.com/doc/current/reference/forms/types/choice.html
      https://symfony.com/doc/current/reference/forms/types/entity.html

  -
    question: >
      What is the primary purpose of the `configureOptions()` method in a Symfony form type?
    answers:
      - { value: "To add form fields to the builder.", correct: false }
      - { value: "To define default options for the form type.", correct: true }
      - { value: "To handle form submission logic.", correct: false }
      - { value: "To set validation constraints for form fields.", correct: false }
    help: |
      The `configureOptions()` method allows you to define and configure options that can be passed to your form type when it's created.
      https://symfony.com/doc/current/form/create_custom_field_type.html#form-type-core-methods-overview

  -
    question: |
      Given the following Twig snippet, what is the effect of the `form_theme` tag?

      ```twig
      {% form_theme form 'form/my_custom_theme.html.twig' %}
      {{ form(form) }}
      ```
    answers:
      - { value: "It applies the theme globally to all forms in the application.", correct: false }
      - { value: "It applies the theme only to the specific `form` instance in this template.", correct: true }
      - { value: "It defines a new form type named `my_custom_theme`.", correct: false }
      - { value: "It renders the form using a custom CSS class.", correct: false }
    help: |
      The `form_theme` tag, when used with a specific form variable, applies the specified theme only to that form instance within the current template.
      https://symfony.com/doc/current/form/form_themes.html#how-to-apply-a-theme-to-a-specific-form

  -
    question: >
      By default, does Symfony's Form component include CSRF protection for forms?
    answers:
      - { value: "No, it must be explicitly enabled for each form.", correct: false }
      - { value: "Yes, it is enabled by default for all forms.", correct: true }
      - { value: "Only for forms that are mapped to an entity.", correct: false }
      - { value: "Only when using the `SubmitType` field.", correct: false }
    help: |
      Symfony's Form component automatically adds a CSRF token field to forms by default, providing protection against CSRF attacks.
      https://symfony.com/doc/current/form/csrf_protection.html

  -
    question: >
      When handling file uploads with a Symfony form, which built-in form type should be used for the file input field?
    answers:
      - { value: "TextType", correct: false }
      - { value: "UrlType", correct: false }
      - { value: "FileType", correct: true }
      - { value: "ImageType", correct: false }
    help: |
      The `FileType` is the dedicated form type for handling file uploads.
      https://symfony.com/doc/current/reference/forms/types/file.html

  -
    question: >
      What is the primary purpose of a Data Transformer in Symfony Forms?
    answers:
      - { value: "To convert submitted data from the HTML form format to the format expected by your underlying object.", correct: true }
      - { value: "To convert data from your underlying object to a format suitable for display in the HTML form.", correct: true }
      - { value: "To validate form data against constraints.", correct: false }
      - { value: "To add new fields dynamically to a form.", correct: false }
    help: |
      Data transformers are used to convert data between different representations (e.g., string to `DateTime` object, or a custom object to a string for display). They implement `transform()` and `reverseTransform()`.
      https://symfony.com/doc/current/form/data_transformers.html

  -
    question: >
      Which of the following `FormEvents` occurs *before* the form's data is submitted and validated, allowing you to modify the data?
    answers:
      - { value: "FormEvents::POST_SUBMIT", correct: false }
      - { value: "FormEvents::PRE_SET_DATA", correct: false }
      - { value: "FormEvents::PRE_SUBMIT", correct: true }
      - { value: "FormEvents::POST_SET_DATA", correct: false }
    help: |
      `FormEvents::PRE_SUBMIT` is dispatched before the submitted data is bound to the form, allowing for modifications to the raw submitted data.
      https://symfony.com/doc/current/form/events.html#pr_submit

  -
    question: >
      What is a Form Type Extension in Symfony?
    answers:
      - { value: "A way to create entirely new form types.", correct: false }
      - { value: "A mechanism to add or override behavior and options of existing form types.", correct: true }
      - { value: "A class that handles form submission and validation.", correct: false }
      - { value: "A Twig template for customizing form rendering.", correct: false }
    help: |
      Form type extensions allow you to modify existing form types (built-in or custom) by adding new options, fields, or listeners without altering the original type class.
      https://symfony.com/doc/current/form/create_form_type_extension.html

  -
    question: |
      You have a form field that should not be mapped to any property of the underlying data object. Which option should you set for this field?
    answers:
      - { value: "`required => false`", correct: false }
      - { value: "`mapped => false`", correct: true }
      - { value: "`data_class => null`", correct: false }
      - { value: "`by_reference => false`", correct: false }
    help: |
      Setting `mapped => false` for a form field indicates that it does not correspond to a property on the underlying data object.
      https://symfony.com/doc/current/forms.html#unmapped-fields

  -
    question: >
      Which of the following is the correct way to install the Symfony Form component using Composer?
    answers:
      - { value: "`composer install symfony/form`", correct: false }
      - { value: "`composer require symfony/form`", correct: true }
      - { value: "`php bin/console form:install`", correct: false }
      - { value: "`symfony new --form-component`", correct: false }
    help: |
      The command `composer require symfony/form` is used to add the Symfony Form component to your project.
      https://symfony.com/doc/current/forms.html#installation

  -
    question: |
      You want to render only the errors for a specific form field named `email`. Which Twig function should you use?
    answers:
      - { value: "`form_errors(form)`", correct: false }
      - { value: "`form_errors(form.email)`", correct: true }
      - { value: "`form_widget(form.email)`", correct: false }
      - { value: "`form_row(form.email)`", correct: false }
    help: |
      `form_errors(form.fieldName)` is used to render errors specifically for a given field.
      https://symfony.com/doc/current/form/form_customization.html#form-errors

  -
    question: >
      When embedding a collection of forms (e.g., a list of `TagType` forms within a `TaskType` form), which built-in form type is typically used for the collection field?
    answers:
      - { value: "ArrayType", correct: false }
      - { value: "EntityType", correct: false }
      - { value: "CollectionType", correct: true }
      - { value: "RepeatedType", correct: false }
    help: |
      `CollectionType` is designed to embed a collection of other form types, useful for managing lists of associated data.
      https://symfony.com/doc/current/reference/forms/types/collection.html

  -
    question: |
      What is the purpose of the `entry_type` option in a `CollectionType` field?
    answers:
      - { value: "It defines the data class for the entire collection.", correct: false }
      - { value: "It specifies the form type to be used for each item in the collection.", correct: true }
      - { value: "It sets the maximum number of entries allowed in the collection.", correct: false }
      - { value: "It determines if new entries can be added to the collection.", correct: false }
    help: |
      The `entry_type` option specifies the form type that will be used for each individual element within the collection.
      https://symfony.com/doc/current/reference/forms/types/collection.html#entry-type

  -
    question: >
      Which Twig function renders the HTML for a form field's label, errors, and widget together?
    answers:
      - { value: "`form_label()`", correct: false }
      - { value: "`form_widget()`", correct: false }
      - { value: "`form_row()`", correct: true }
      - { value: "`form_errors()`", correct: false }
    help: |
      `form_row()` is a convenience function that renders the label, errors, and widget for a single form field.
      https://symfony.com/doc/current/forms.html#rendering-each-field-by-hand

  -
    question: >
      When creating a form without an associated data class (e.g., `createFormBuilder()`), how can you retrieve the submitted data as an associative array?
    answers:
      - { value: "`$form->get('data')`", correct: false }
      - { value: "`$form->getData()`", correct: true }
      - { value: "`$form->getSubmittedData()`", correct: false }
      - { value: "`$form->toArray()`", correct: false }
    help: |
      When a form is not mapped to an object, `getData()` returns the submitted data as an associative array.
      https://symfony.com/doc/current/forms.html#forms-without-a-class

  -
    question: >
      Which of the following is a valid way to define validation constraints directly within a form type's `configureOptions()` method for a form not mapped to a class?
    answers:
      - { value: "`'constraints' => new NotBlank()`", correct: false }
      - { value: "`'constraints' => ['field_name' => new NotBlank()]`", correct: false }
      - { value: "`'constraints' => new Collection(['field_name' => new NotBlank()])`", correct: true }
      - { value: "`'validation_groups' => ['Default']`", correct: false }
    help: |
      When defining constraints directly in the form type for an unmapped form, you typically use a `Collection` constraint to apply rules to individual fields.
      https://symfony.com/doc/current/form/without_class.html#adding-validation

  -
    question: >
      What is the purpose of the `#[AsCommand]` attribute in the context of Symfony forms?
    answers:
      - { value: "It defines a console command for debugging forms.", correct: false }
      - { value: "It is not directly related to Symfony forms; it's for console commands.", correct: true }
      - { value: "It marks a form type as an asynchronous command.", correct: false }
      - { value: "It registers a form type as a service.", correct: false }
    help: |
      The `#[AsCommand]` attribute is used to configure console commands, not form types.
      https://symfony.com/doc/current/console.html#configuring-the-command

  -
    question: >
      Which Twig test can reliably determine if a form view is the root form, even if a child form is named 'parent'?
    answers:
      - { value: "`if form.parent is null`", correct: false }
      - { value: "`if form is rootform`", correct: true }
      - { value: "`if form.isRoot`", correct: false }
      - { value: "`if form.isParent`", correct: false }
    help: |
      The `is rootform` test is the reliable way to check if a form view is the root form, avoiding conflicts with child forms named 'parent'.
      https://symfony.com/doc/current/form/form_customization.html#checking-if-a-form-is-the-root-form

  -
    question: >
      When should you consider using `createFormBuilder()` instead of `createForm(FormType::class)` in a controller?
    answers:
      - { value: "When you need to bind the form to an existing entity.", correct: false }
      - { value: "When you want to create a simple form directly in the controller without a dedicated form class.", correct: true }
      - { value: "When you need to apply complex validation rules.", correct: false }
      - { value: "When you are building a reusable form component.", correct: false }
    help: |
      `createFormBuilder()` is suitable for simple forms or when the form structure is tightly coupled to a specific controller action and doesn't require a separate form class.
      https://symfony.com/doc/current/forms.html#creating-forms-in-a-controller

  -
    question: |
      What is the purpose of the `data_class` option in `configureOptions()`?
    answers:
      - { value: "It specifies the Twig template to render the form.", correct: false }
      - { value: "It defines the CSS class to apply to the form.", correct: false }
      - { value: "It tells the form which class the submitted data should be mapped to.", correct: true }
      - { value: "It sets the default data for the form fields.", correct: false }
    help: |
      The `data_class` option is crucial for mapping form data to an object of a specific class.
      https://symfony.com/doc/current/forms.html#creating-form-classes

  -
    question: >
      Which of the following is NOT a standard way to apply validation constraints to a Symfony form field?
    answers:
      - { value: "Using PHP attributes directly on entity properties.", correct: false }
      - { value: "Using YAML configuration files for validation mapping.", correct: false }
      - { value: "Using the `constraints` option directly in `add()` method of `FormBuilderInterface`.", correct: true }
      - { value: "Using XML configuration files for validation mapping.", correct: false }
    help: |
      While you can pass constraints to `add()` for unmapped forms or specific scenarios, the standard and recommended ways for mapped forms are via attributes, YAML, or XML on the entity itself. The `constraints` option in `add()` is more common for forms without a data class or for specific inline validation.
      https://symfony.com/doc/current/validation.html#configuration

  -
    question: >
      How can you pass custom options from a controller to a form type?
    answers:
      - { value: "By adding them as an array to the `add()` method in `buildForm()`.", correct: false }
      - { value: "By passing an array as the third argument to `createForm()`.", correct: true }
      - { value: "By defining them as public properties in the form type class.", correct: false }
      - { value: "By using a global configuration file.", correct: false }
    help: |
      Custom options can be passed as the third argument (an array) to the `createForm()` method in your controller.
      https://symfony.com/doc/current/forms.html#passing-options-to-a-form-type

  -
    question: >
      Which `FormEvents` listener is typically used to modify the form's data *before* it is set to the form, often used to populate choices or default values?
    answers:
      - { value: "FormEvents::PRE_SUBMIT", correct: false }
      - { value: "FormEvents::POST_SUBMIT", correct: false }
      - { value: "FormEvents::PRE_SET_DATA", correct: true }
      - { value: "FormEvents::SUBMIT", correct: false }
    help: |
      `FormEvents::PRE_SET_DATA` is dispatched before the form is populated with the initial data, allowing you to modify the data or the form itself.
      https://symfony.com/doc/current/form/events.html#pr-set-data

  -
    question: |
      You want to apply two different Twig form themes to a single form instance. Which syntax is correct?
    answers:
      - { value: "`{% form_theme form 'theme1.html.twig', 'theme2.html.twig' %}`", correct: false }
      - { value: "`{% form_theme form with ['theme1.html.twig', 'theme2.html.twig'] %}`", correct: true }
      - { value: "`{% form_theme form and 'theme1.html.twig' and 'theme2.html.twig' %}`", correct: false }
      - { value: "`{% form_theme [form, 'theme1.html.twig', 'theme2.html.twig'] %}`", correct: false }
    help: |
      To apply multiple themes, pass an array of theme paths to the `form_theme` tag using the `with` keyword.
      https://symfony.com/doc/current/form/form_themes.html#applying-multiple-themes

  -
    question: >
      What is the primary benefit of defining a dedicated form class (e.g., `TaskType` extending `AbstractType`) instead of building the form inline in the controller with `createFormBuilder()`?
    answers:
      - { value: "It automatically handles form submission and validation.", correct: false }
      - { value: "It promotes reusability and separation of concerns.", correct: true }
      - { value: "It makes the form render faster in Twig.", correct: false }
      - { value: "It disables CSRF protection by default.", correct: false }
    help: |
      Dedicated form classes enhance reusability, testability, and keep controller logic cleaner by separating form definition.
      https://symfony.com/doc/current/forms.html#creating-form-classes

  -
    question: >
      Which Twig function renders the HTML widget (e.g., `<input>`, `<textarea>`) for a specific form field?
    answers:
      - { value: "`form_label()`", correct: false }
      - { value: "`form_widget()`", correct: true }
      - { value: "`form_row()`", correct: false }
      - { value: "`form_errors()`", correct: false }
    help: |
      `form_widget()` is used to render the HTML input element for a form field.
      https://symfony.com/doc/current/form/form_customization.html#rendering-a-form-field

  -
    question: >
      When using a `CollectionType` for a list of embedded forms, what option must be set to allow adding new entries dynamically via JavaScript?
    answers:
      - { value: "`allow_delete => true`", correct: false }
      - { value: "`allow_add => true`", correct: true }
      - { value: "`by_reference => false`", correct: false }
      - { value: "`prototype => true`", correct: false }
    help: |
      The `allow_add` option enables the collection to accept new entries. You also often need `prototype` to render a template for new items.
      https://symfony.com/doc/current/reference/forms/types/collection.html#allow-add

  -
    question: >
      What is the purpose of the `by_reference` option in a form field, particularly for collections or embedded forms?
    answers:
      - { value: "It determines if the field's data is passed by value or by reference to the underlying object.", correct: true }
      - { value: "It specifies if the field should be rendered as a reference link.", correct: false }
      - { value: "It controls whether the field's data is stored in the session.", correct: false }
      - { value: "It indicates if the field is required for form submission.", correct: false }
    help: |
      The `by_reference` option controls whether the form modifies the underlying object's property directly (by reference) or through its setter (by value). For collections, setting it to `false` is often necessary for proper handling of added/removed items.
      https://symfony.com/doc/current/reference/forms/types/form.html#by-reference

  -
    question: >
      Which `FormEvents` listener is typically used to modify the form's data *after* it has been submitted and validated, but before it's persisted?
    answers:
      - { value: "FormEvents::PRE_SET_DATA", correct: false }
      - { value: "FormEvents::POST_SET_DATA", correct: false }
      - { value: "FormEvents::PRE_SUBMIT", correct: false }
      - { value: "FormEvents::POST_SUBMIT", correct: true }
    help: |
      `FormEvents::POST_SUBMIT` is dispatched after the form has been submitted and validated, allowing you to perform actions on the data after it has been bound to the object.
      https://symfony.com/doc/current/form/events.html#post-submit

  -
    question: >
      How do you register a custom form event subscriber with a form builder?
    answers:
      - { value: "By calling `$builder->addEventSubscriber(new MySubscriber());`", correct: true }
      - { value: "By calling `$builder->addEvent(new MySubscriber());`", correct: false }
      - { value: "By configuring it in `services.yaml`.", correct: false }
      - { value: "By implementing `EventSubscriberInterface` directly in the form type.", correct: false }
    help: |
      You use the `addEventSubscriber()` method on the `FormBuilderInterface` to register an event subscriber.
      https://symfony.com/doc/current/form/events.html#registering-event-listeners

  -
    question: >
      What is the purpose of the `label_attr` option for a form field?
    answers:
      - { value: "To add HTML attributes to the input widget.", correct: false }
      - { value: "To add HTML attributes to the field's label tag.", correct: true }
      - { value: "To set the default value of the label.", correct: false }
      - { value: "To define the CSS class for the entire form row.", correct: false }
    help: |
      The `label_attr` option allows you to add custom HTML attributes (like `class`, `id`) to the `<label>` tag of a form field.
      https://symfony.com/doc/current/reference/forms/types/form.html#label-attr

  -
    question: >
      Which of the following built-in form types is best suited for a password input field that requires confirmation?
    answers:
      - { value: "PasswordType", correct: false }
      - { value: "RepeatedType", correct: true }
      - { value: "TextType", correct: false }
      - { value: "HiddenType", correct: false }
    help: |
      `RepeatedType` is specifically designed for fields that need to be entered twice (e.g., password and password confirmation) to ensure consistency.
      https://symfony.com/doc/current/reference/forms/types/repeated.html

  -
    question: >
      What is the purpose of the `block_name` option in a form field, especially when dealing with form theming?
    answers:
      - { value: "It defines the HTML `id` attribute for the field.", correct: false }
      - { value: "It specifies the Twig block name to use for rendering that field's row.", correct: true }
      - { value: "It sets the name of the data property this field maps to.", correct: false }
      - { value: "It is used for internationalization of the field's label.", correct: false }
    help: |
      The `block_name` option allows you to define a custom Twig block name for a form field, which is useful for granular theming.
      https://symfony.com/doc/current/form/form_themes.html#customizing-individual-fields

  -
    question: >
      Which Twig function renders the HTML for the form's errors, typically placed at the top of the form?
    answers:
      - { value: "`form_errors(form)`", correct: true }
      - { value: "`form_widget(form)`", correct: false }
      - { value: "`form_row(form)`", correct: false }
      - { value: "`form_help(form)`", correct: false }
    help: |
      `form_errors(form)` renders all global errors for the form, or errors for a specific field if passed a field view.
      https://symfony.com/doc/current/form/form_customization.html#form-errors

  -
    question: >
      What is the correct way to disable global Twig form themes for a specific form instance and only apply a single custom theme?
    answers:
      - { value: "`{% form_theme form 'my_theme.html.twig' %}`", correct: false }
      - { value: "`{% form_theme form with ['my_theme.html.twig'] only %}`", correct: true }
      - { value: "`{% form_theme form 'my_theme.html.twig' no_globals %}`", correct: false }
      - { value: "`{% form_theme form 'my_theme.html.twig' exclude_default %}`", correct: false }
    help: |
      The `only` keyword after the list of themes ensures that only the specified themes are applied, ignoring any globally configured themes.
      https://symfony.com/doc/current/form/form_themes.html#disabling-global-themes

  -
    question: >
      When creating a custom form type, which method is used to set any extra variables needed when rendering the field in a form theme template?
    answers:
      - { value: "`buildForm()`", correct: false }
      - { value: "`configureOptions()`", correct: false }
      - { value: "`buildView()`", correct: true }
      - { value: "`finishView()`", correct: false }
    help: |
      The `buildView()` method is used to set any extra variables that will be available in the form's Twig view.
      https://symfony.com/doc/current/form/create_custom_field_type.html#form-type-core-methods-overview

  -
    question: >
      What is the purpose of the `required` option for a form field?
    answers:
      - { value: "It adds an HTML5 `required` attribute to the input element.", correct: true }
      - { value: "It automatically applies a `NotBlank` validation constraint.", correct: false }
      - { value: "It determines if the field's data must be an object.", correct: false }
      - { value: "It makes the field visible or hidden based on a condition.", correct: false }
    help: |
      The `required` option primarily adds the HTML5 `required` attribute. It does *not* automatically add a `NotBlank` constraint; validation should be handled separately.
      https://symfony.com/doc/current/reference/forms/types/form.html#required

  -
    question: >
      Which of the following is a key method of the `FormInterface` used to check if the submitted form data is valid according to defined constraints?
    answers:
      - { value: "`isSubmitted()`", correct: false }
      - { value: "`getData()`", correct: false }
      - { value: "`isValid()`", correct: true }
      - { value: "`getErrors()`", correct: false }
    help: |
      The `isValid()` method checks if the form's data passes all associated validation constraints.
      https://symfony.com/doc/current/forms.html#handling-form-submissions

  -
    question: >
      How can you programmatically submit a form in a functional test using Symfony's BrowserKit component?
    answers:
      - { value: "By calling `$client->request('POST', '/submit-url', $formData);`", correct: false }
      - { value: "By selecting the form with `selectButton()` and then calling `$client->submit($form);`", correct: true }
      - { value: "By directly calling `$form->submit($formData);` without a client.", correct: false }
      - { value: "By using `form_test_submit()` Twig function.", correct: false }
    help: |
      In BrowserKit, you typically select the form using `selectButton()` to get a `Form` object, populate its fields, and then submit it via `$client->submit($form)`.
      https://symfony.com/doc/current/components/browser_kit.html#submitting-forms

  -
    question: >
      What is the purpose of the `attr` option when rendering a form field's widget in Twig (e.g., `{{ form_widget(form.name, {'attr': {'class': 'my-class'}}) }}`)?
    answers:
      - { value: "To add HTML attributes to the field's label.", correct: false }
      - { value: "To add HTML attributes to the input element itself.", correct: true }
      - { value: "To set the default value for the field.", correct: false }
      - { value: "To define the validation messages.", correct: false }
    help: |
      The `attr` option allows you to pass an array of HTML attributes that will be applied directly to the rendered HTML input element of the form field.
      https://symfony.com/doc/current/form/form_customization.html#rendering-a-form-field

  -
    question: >
      Which `FormEvents` listener is typically used to modify the form's data *after* it has been submitted and validated, and after the data has been mapped to the object?
    answers:
      - { value: "FormEvents::PRE_SET_DATA", correct: false }
      - { value: "FormEvents::POST_SET_DATA", correct: false }
      - { value: "FormEvents::PRE_SUBMIT", correct: false }
      - { value: "FormEvents::POST_SUBMIT", correct: true }
    help: |
      `FormEvents::POST_SUBMIT` is triggered after the form has been submitted, validated, and the data has been mapped to the underlying object.
      https://symfony.com/doc/current/form/events.html#post-submit

  -
    question: >
      When creating a custom form type, which method is called after `buildView()` and is useful for accessing child views when the form type consists of many fields?
    answers:
      - { value: "`buildForm()`", correct: false }
      - { value: "`configureOptions()`", correct: false }
      - { value: "`buildView()`", correct: false }
      - { value: "`finishView()`", correct: true }
    help: |
      `finishView()` is called after `buildView()` and is particularly useful for manipulating child views.
      https://symfony.com/doc/current/form/create_custom_field_type.html#form-type-core-methods-overview

  -
    question: >
      What is the purpose of the `entry_options` option in a `CollectionType` field?
    answers:
      - { value: "To pass options to the `CollectionType` itself.", correct: false }
      - { value: "To pass options to each individual embedded form type within the collection.", correct: true }
      - { value: "To define the default data for new entries.", correct: false }
      - { value: "To set validation constraints for the collection.", correct: false }
    help: |
      `entry_options` allows you to pass an array of options that will be applied to each instance of the `entry_type` within the collection.
      https://symfony.com/doc/current/reference/forms/types/collection.html#entry-options

  -
    question: >
      Which built-in form type is suitable for a simple text input field?
    answers:
      - { value: "TextField", correct: false }
      - { value: "StringType", correct: false }
      - { value: "TextType", correct: true }
      - { value: "InputType", correct: false }
    help: |
      `TextType` is the basic form type for a single-line text input.
      https://symfony.com/doc/current/reference/forms/types/text.html

  -
    question: >
      How do you register a custom form type guesser when using the Symfony Form component standalone (outside of a full Symfony application)?
    answers:
      - { value: "By adding it to the `FormFactoryBuilder` using `addTypeGuesser()`.", correct: true }
      - { value: "By defining it as a service with a specific tag.", correct: false }
      - { value: "By extending `AbstractTypeGuesser` and placing it in `src/Form/TypeGuesser`.", correct: false }
      - { value: "Type guessers are automatically discovered.", correct: false }
    help: |
      When using the standalone component, you explicitly add type guessers to the `FormFactoryBuilder`. In a full Symfony app, they are usually auto-registered via service tags.
      https://symfony.com/doc/current/form/type_guesser.html#registering-a-type-guesser

  -
    question: >
      What is the primary purpose of `FormEvents::POST_SET_DATA`?
    answers:
      - { value: "To modify the form's data after it has been submitted and validated.", correct: false }
      - { value: "To modify the form's data after it has been initialized with the underlying object's data.", correct: true }
      - { value: "To add new fields to the form dynamically based on submitted data.", correct: false }
      - { value: "To perform actions immediately after the form is rendered.", correct: false }
    help: |
      `FormEvents::POST_SET_DATA` is dispatched after the form has been populated with the initial data from the underlying object.
      https://symfony.com/doc/current/form/events.html#post-set-data

  -
    question: >
      Which of the following built-in form types is used to render a standard HTML button for submitting a form?
    answers:
      - { value: "ButtonType", correct: false }
      - { value: "ClickType", correct: false }
      - { value: "SubmitType", correct: true }
      - { value: "ActionType", correct: false }
    help: |
      `SubmitType` is specifically designed for rendering submit buttons in forms.
      https://symfony.com/doc/current/reference/forms/types/submit.html

  -
    question: >
      What is the recommended way to apply a form theme to a specific child form within a larger form structure in Twig?
    answers:
      - { value: "`{% form_theme form.child_name 'my_theme.html.twig' %}`", correct: true }
      - { value: "`{% form_theme child_name 'my_theme.html.twig' %}`", correct: false }
      - { value: "`{% form_theme form with {child_name: 'my_theme.html.twig'} %}`", correct: false }
      - { value: "You cannot theme individual child forms.", correct: false }
    help: |
      You can apply a theme to a specific child form by referencing it directly in the `form_theme` tag (e.g., `form.a_child_form`).
      https://symfony.com/doc/current/form/form_themes.html#applying-a-theme-to-a-specific-child-form

  -
    question: >
      What is the purpose of the `action` option when creating a form?
    answers:
      - { value: "It defines the HTTP method (GET/POST) for form submission.", correct: false }
      - { value: "It specifies the URL where the form data will be submitted.", correct: true }
      - { value: "It sets the name of the controller action that handles the form.", correct: false }
      - { value: "It determines if the form should be rendered with JavaScript.", correct: false }
    help: |
      The `action` option corresponds to the `action` attribute of the HTML `<form>` tag, specifying the URL for submission.
      https://symfony.com/doc/current/reference/forms/types/form.html#action

  -
    question: >
      Which of the following is a common use case for a `DataTransformer`?
    answers:
      - { value: "Converting a string input from a text field into a `DateTime` object for an entity property.", correct: true }
      - { value: "Converting an array of IDs into a collection of entity objects.", correct: true }
      - { value: "Validating if an email address is in a correct format.", correct: false }
      - { value: "Dynamically adding or removing form fields based on user input.", correct: false }
    help: |
      Data transformers are ideal for converting data between the format used in the form (e.g., string) and the format expected by your application's data model (e.g., `DateTime` object, entity object).
      https://symfony.com/doc/current/form/data_transformers.html

  -
    question: >
      Which method must a custom form type extension implement to specify which form types it extends?
    answers:
      - { value: "`getExtendedType()`", correct: false }
      - { value: "`getExtendedTypes()`", correct: true }
      - { value: "`extendsType()`", correct: false }
      - { value: "`supportsType()`", correct: false }
    help: |
      A form type extension must implement the `getExtendedTypes()` method, which returns an iterable of the FQCNs of the form types it extends.
      https://symfony.com/doc/current/form/create_form_type_extension.html#the-getextendedtypes-method

  -
    question: >
      What is the purpose of the `prototype` option in a `CollectionType` field?
    answers:
      - { value: "It defines the default value for new collection entries.", correct: false }
      - { value: "It enables JavaScript to add new entries to the collection.", correct: false }
      - { value: "It renders a template for a new collection item, useful for JavaScript-driven dynamic forms.", correct: true }
      - { value: "It specifies the maximum number of items in the collection.", correct: false }
    help: |
      The `prototype` option, when `allow_add` is true, renders a "template" HTML block for a new collection item, which can be cloned by JavaScript to add new entries dynamically.
      https://symfony.com/doc/current/reference/forms/types/collection.html#prototype

  -
    question: >
      Which built-in form type is typically used for a multi-line text input area?
    answers:
      - { value: "TextType", correct: false }
      - { value: "TextAreaType", correct: true }
      - { value: "LongTextType", correct: false }
      - { value: "StringType", correct: false }
    help: |
      `TextareaType` is used for multi-line text input fields.
      https://symfony.com/doc/current/reference/forms/types/textarea.html

  -
    question: >
      When is `FormEvents::PRE_SUBMIT` dispatched during the form submission process?
    answers:
      - { value: "Before the form is populated with existing data.", correct: false }
      - { value: "Before the submitted data is bound to the form, allowing modification of raw data.", correct: true }
      - { value: "After the form has been submitted and validated.", correct: false }
      - { value: "After the form has been rendered.", correct: false }
    help: |
      `PRE_SUBMIT` is the first event in the submission process, giving you a chance to modify the raw submitted data before it's used to populate the form.
      https://symfony.com/doc/current/form/events.html#pr-submit

  -
    question: >
      What is the main difference between `form_widget(form)` and `form(form)` in Twig for rendering a form?
    answers:
      - { value: "`form_widget(form)` renders the entire form including `<form>` tags, while `form(form)` only renders the fields.", correct: false }
      - { value: "`form(form)` renders the entire form including `<form>` tags, while `form_widget(form)` only renders the fields' widgets.", correct: true }
      - { value: "There is no functional difference; they are aliases.", correct: false }
      - { value: "`form_widget(form)` is for individual fields, `form(form)` is for collections.", correct: false }
    help: |
      `form(form)` is a shortcut to render the entire form (start, errors, widgets, end). `form_widget(form)` only renders the widgets of the form's fields, without the `<form>` tags or labels/errors.
      https://symfony.com/doc/current/form/form_customization.html#rendering-a-complete-form

  -
    question: >
      Which of the following is the correct way to add a custom attribute (e.g., `id`) to the opening `<form>` tag when rendering it in Twig?
    answers:
      - { value: "`{{ form_start(form, {'id': 'my_form_id'}) }}`", correct: false }
      - { value: "`{{ form_start(form, { attr: { id: 'my_form_id' } }) }}`", correct: true }
      - { value: "`{{ form_start(form, { 'attr.id': 'my_form_id' }) }}`", correct: false }
      - { value: "`{{ form_start(form, id: 'my_form_id') }}`", correct: false }
    help: |
      To add attributes to the `<form>` tag, pass an `attr` array within the options of `form_start()`.
      https://symfony.com/doc/current/form/dynamic_form_modification.html#adding-a-new-field-with-javascript

  -
    question: >
      What is the primary role of the `FormFactory` in Symfony?
    answers:
      - { value: "To handle HTTP requests and populate forms.", correct: false }
      - { value: "To create and configure form instances.", correct: true }
      - { value: "To render forms in Twig templates.", correct: false }
      - { value: "To validate submitted form data.", correct: false }
    help: |
      The `FormFactory` is responsible for creating form builders and form instances. In a full Symfony application, you typically interact with it via `AbstractController::createForm()` or `createFormBuilder()`.
      https://symfony.com/doc/current/components/form.html#creating-a-form-factory

  -
    question: >
      Which built-in form type is best suited for a single checkbox input?
    answers:
      - { value: "BooleanType", correct: false }
      - { value: "ChoiceType", correct: false }
      - { value: "CheckboxType", correct: true }
      - { value: "ToggleType", correct: false }
    help: |
      `CheckboxType` is the dedicated form type for a single checkbox.
      https://symfony.com/doc/current/reference/forms/types/checkbox.html

  -
    question: >
      What happens if you try to bind an unmapped form field (i.e., `mapped => false`) to an entity property that doesn't exist?
    answers:
      - { value: "A validation error will occur.", correct: false }
      - { value: "The field will be ignored during submission.", correct: true }
      - { value: "An exception will be thrown during form creation.", correct: false }
      - { value: "Symfony will automatically create the property on the entity.", correct: false }
    help: |
      If `mapped` is set to `false`, the field's data is not read from or written to the underlying object, preventing errors if the property doesn't exist.
      https://symfony.com/doc/current/forms.html#unmapped-fields

  -
    question: >
      Which `FormEvents` listener is typically used to dynamically add or remove fields from a form based on the initial data?
    answers:
      - { value: "FormEvents::PRE_SUBMIT", correct: false }
      - { value: "FormEvents::POST_SUBMIT", correct: false }
      - { value: "FormEvents::PRE_SET_DATA", correct: true }
      - { value: "FormEvents::SUBMIT", correct: false }
    help: |
      `PRE_SET_DATA` is the ideal event for dynamic form modification based on the initial data, as it occurs before the form is populated.
      https://symfony.com/doc/current/form/events.html#pr-set-data

  -
    question: >
      What is the purpose of the `compound` option in a form type?
    answers:
      - { value: "It indicates that the form is composed of multiple fields.", correct: true }
      - { value: "It enables client-side validation for the form.", correct: false }
      - { value: "It specifies if the form should be rendered as a single HTML element.", correct: false }
      - { value: "It controls whether the form's data is an array or an object.", correct: false }
    help: |
      The `compound` option (defaulting to `true` for form types with children) indicates that the form is composed of multiple fields and should be treated as a single unit.
      https://symfony.com/doc/current/reference/forms/types/form.html#compound

  -
    question: >
      Which built-in form type is used for a single-line input field that is specifically for email addresses?
    answers:
      - { value: "TextType", correct: false }
      - { value: "StringType", correct: false }
      - { value: "EmailType", correct: true }
      - { value: "MailType", correct: false }
    help: |
      `EmailType` is a specialized text input for email addresses, often providing browser-level validation.
      https://symfony.com/doc/current/reference/forms/types/email.html

  -
    question: >
      When using `CollectionType`, what is the effect of setting `allow_delete => true`?
    answers:
      - { value: "It adds a delete button for each item in the collection automatically.", correct: false }
      - { value: "It allows items to be removed from the underlying collection when they are removed from the form.", correct: true }
      - { value: "It prevents users from deleting existing items.", correct: false }
      - { value: "It marks the collection as optional.", correct: false }
    help: |
      Setting `allow_delete => true` ensures that when an item is removed from the form submission, it is also removed from the underlying data collection. You still need to implement the UI for deletion.
      https://symfony.com/doc/current/reference/forms/types/collection.html#allow-delete

  -
    question: >
      What is the purpose of the `empty_data` option in a form field?
    answers:
      - { value: "It defines the placeholder text for the input field.", correct: false }
      - { value: "It specifies the value returned by `getData()` when the field is empty.", correct: true }
      - { value: "It sets the default value for the field when the form is first rendered.", correct: false }
      - { value: "It indicates if the field can be submitted with no value.", correct: false }
    help: |
      The `empty_data` option allows you to define what value `getData()` returns for a field if it's submitted empty. This is particularly useful for complex types or when you want a specific default object.
      https://symfony.com/doc/current/reference/forms/types/form.html#empty-data

  -
    question: >
      Which built-in form type is used for a date input field?
    answers:
      - { value: "CalendarType", correct: false }
      - { value: "DateTimeType", correct: false }
      - { value: "DateType", correct: true }
      - { value: "TimeType", correct: false }
    help: |
      `DateType` is used for inputting date values. `DateTimeType` combines date and time.
      https://symfony.com/doc/current/reference/forms/types/date.html

  -
    question: >
      How can you inspect all available form types, type extensions, and type guessers in a Symfony application using the console?
    answers:
      - { value: "`php bin/console debug:form`", correct: true }
      - { value: "`php bin/console form:list`", correct: false }
      - { value: "`php bin/console form:debug`", correct: false }
      - { value: "`php bin/console list:forms`", correct: false }
    help: |
      The `debug:form` command provides detailed information about all registered form types, extensions, and guessers.
      https://symfony.com/doc/current/forms.html#listing-available-form-types

  -
    question: >
      What is the purpose of the `mapped` option when set to `true` for a form field?
    answers:
      - { value: "It indicates that the field's data should be mapped to an underlying object property.", correct: true }
      - { value: "It makes the field required for submission.", correct: false }
      - { value: "It ensures the field is rendered as a specific HTML element.", correct: false }
      - { value: "It enables custom data transformation for the field.", correct: false }
    help: |
      When `mapped` is `true` (the default), the form field's data will be read from and written to the corresponding property of the underlying data object.
      https://symfony.com/doc/current/forms.html#unmapped-fields

  -
    question: >
      Which of the following is the correct way to render only the label for a form field named `username` in Twig?
    answers:
      - { value: "`{{ form_label(form.username) }}`", correct: true }
      - { value: "`{{ form_row(form.username).label }}`", correct: false }
      - { value: "`{{ form.username.label }}`", correct: false }
      - { value: "`{{ form_widget(form.username).label }}`", correct: false }
    help: |
      `form_label()` is specifically used to render the `<label>` tag for a form field.
      https://symfony.com/doc/current/form/form_customization.html#rendering-a-form-field

  -
    question: >
      What is the primary difference between a `FormEventSubscriber` and a `FormEventListener`?
    answers:
      - { value: "Subscribers define methods for specific events, while listeners use a single `onEvent()` method.", correct: false }
      - { value: "Subscribers implement `EventSubscriberInterface` and define subscribed events, while listeners are simple callables.", correct: true }
      - { value: "Listeners are always global, while subscribers are specific to one form.", correct: false }
      - { value: "There is no functional difference; they are interchangeable terms.", correct: false }
    help: |
      Subscribers implement `EventSubscriberInterface` and declare which events they listen to, promoting reusability. Listeners are simple callables (closures or method references) attached to specific events.
      https://symfony.com/doc/current/components/event_dispatcher.html#event-subscribers

  -
    question: >
      Which built-in form type is used for a number input field (integer or float)?
    answers:
      - { value: "IntegerType", correct: false }
      - { value: "FloatType", correct: false }
      - { value: "NumberType", correct: true }
      - { value: "NumericType", correct: false }
    help: |
      `NumberType` is used for numeric inputs, which can be integers or floats.
      https://symfony.com/doc/current/reference/forms/types/number.html

  -
    question: >
      What is the purpose of the `translation_domain` option for form fields?
    answers:
      - { value: "To specify the Twig template for rendering the field.", correct: false }
      - { value: "To define the domain used for translating the field's label and help messages.", correct: true }
      - { value: "To set the default language for the field.", correct: false }
      - { value: "To enable or disable internationalization for the field.", correct: false }
    help: |
      The `translation_domain` option specifies the message domain used by the Translator component for translating the field's label, help, and error messages.
      https://symfony.com/doc/current/reference/forms/types/form.html#translation-domain

  -
    question: >
      Which of the following is a valid way to embed a custom form type, `AddressType`, within another form type, `UserType`?
    answers:
      - { value: "`$builder->add('address', 'App\\Form\\Type\\AddressType');`", correct: false }
      - { value: "`$builder->add('address', AddressType::class);`", correct: true }
      - { value: "`$builder->embed('address', AddressType::class);`", correct: false }
      - { value: "`$builder->add('address', new AddressType());`", correct: false }
    help: |
      To embed a form type, you pass its FQCN (Fully Qualified Class Name) using `::class` to the `add()` method.
      https://symfony.com/doc/current/form/embedded.html

  -
    question: >
      What is the purpose of the `help` option for a form field?
    answers:
      - { value: "To define the error message for the field.", correct: false }
      - { value: "To provide a short description or hint for the user.", correct: true }
      - { value: "To link to external documentation for the field.", correct: false }
      - { value: "To enable context-sensitive help for the form.", correct: false }
    help: |
      The `help` option allows you to provide a small help message or description that will be rendered alongside the form field.
      https://symfony.com/doc/current/reference/forms/types/form.html#help

  -
    question: >
      Which built-in form type is used for a hidden input field?
    answers:
      - { value: "InvisibleType", correct: false }
      - { value: "SecretType", correct: false }
      - { value: "HiddenType", correct: true }
      - { value: "MaskedType", correct: false }
    help: |
      `HiddenType` renders an HTML `<input type="hidden">` element.
      https://symfony.com/doc/current/reference/forms/types/hidden.html

  -
    question: >
      When implementing a `DataTransformer`, what is the purpose of the `transform()` method?
    answers:
      - { value: "To convert data from the form's submitted format to the underlying object's format.", correct: false }
      - { value: "To convert data from the underlying object's format to the format suitable for the form field (view).", correct: true }
      - { value: "To validate the data before it is transformed.", correct: false }
      - { value: "To apply a filter to the data before it is displayed.", correct: false }
    help: |
      The `transform()` method converts data from the "model" format (e.g., `DateTime` object) to the "view" format (e.g., string) for display in the form.
      https://symfony.com/doc/current/form/data_transformers.html#the-transform-and-reversetransform-methods

  -
    question: >
      When implementing a `DataTransformer`, what is the purpose of the `reverseTransform()` method?
    answers:
      - { value: "To convert data from the form's submitted format (view) to the underlying object's format (model).", correct: true }
      - { value: "To convert data from the underlying object's format to the format suitable for the form field (view).", correct: false }
      - { value: "To validate the data after it has been transformed.", correct: false }
      - { value: "To revert any changes made by the `transform()` method.", correct: false }
    help: |
      The `reverseTransform()` method converts data from the "view" format (e.g., submitted string) back to the "model" format (e.g., `DateTime` object) for the underlying data object.
      https://symfony.com/doc/current/form/data_transformers.html#the-transform-and-reversetransform-methods

  -
    question: >
      Which built-in form type is used for a single-line input field that is specifically for URLs?
    answers:
      - { value: "TextType", correct: false }
      - { value: "LinkType", correct: false }
      - { value: "UrlType", correct: true }
      - { value: "WebType", correct: false }
    help: |
      `UrlType` is a specialized text input for URL addresses.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `placeholder` option for a form field?
    answers:
      - { value: "To set the default value of the input field.", correct: false }
      - { value: "To provide a hint or example input that appears when the field is empty.", correct: true }
      - { value: "To define a fallback value if the field is not submitted.", correct: false }
      - { value: "To specify a default CSS class for the input.", correct: false }
    help: |
      The `placeholder` option adds the HTML5 `placeholder` attribute, which provides a short hint in the input field before the user enters a value.
      https://symfony.com/doc/current/reference/forms/types/form.html#placeholder

  -
    question: >
      Which of the following is a valid way to add a custom attribute to a form field's widget (e.g., an `input` tag) in a form type's `buildForm` method?
    answers:
      - { value: "`->add('field', TextType::class, ['attr' => ['data-custom' => 'value']])`", correct: true }
      - { value: "`->add('field', TextType::class, ['widget_attr' => ['data-custom' => 'value']])`", correct: false }
      - { value: "`->add('field', TextType::class, ['html_attr' => ['data-custom' => 'value']])`", correct: false }
      - { value: "`->add('field', TextType::class, ['options' => ['attr' => ['data-custom' => 'value']]])`", correct: false }
    help: |
      The `attr` option within the field's options array is used to pass HTML attributes to the rendered widget.
      https://symfony.com/doc/current/reference/forms/types/form.html#attr

  -
    question: >
      What is the purpose of the `choice_label` option in `ChoiceType` or `EntityType`?
    answers:
      - { value: "To define the HTML `value` attribute for each choice.", correct: false }
      - { value: "To specify the property or method used to generate the visible label for each choice.", correct: true }
      - { value: "To set the CSS class for each choice option.", correct: false }
      - { value: "To determine if a choice is selected by default.", correct: false }
    help: |
      `choice_label` is used to specify how the label for each choice should be generated, typically by providing a property name or a callable.
      https://symfony.com/doc/current/reference/forms/types/choice.html#choice-label

  -
    question: >
      Which built-in form type is used for a password input field?
    answers:
      - { value: "TextType", correct: false }
      - { value: "StringType", correct: false }
      - { value: "PasswordType", correct: true }
      - { value: "SecretType", correct: false }
    help: |
      `PasswordType` is used for password input fields, which typically mask the input.
      https://symfony.com/doc/current/reference/forms/types/password.html

  -
    question: >
      What is the primary purpose of a `FormTypeGuesser`?
    answers:
      - { value: "To guess the correct form type based on the underlying data's metadata (e.g., Doctrine mapping or validation constraints).", correct: true }
      - { value: "To guess the best Twig theme for a form.", correct: false }
      - { value: "To guess the default value for a form field.", correct: false }
      - { value: "To guess the validation group for a form.", correct: false }
    help: |
      Form type guessers automatically determine the appropriate form type and options for a field based on metadata like Doctrine mapping or validation constraints.
      https://symfony.com/doc/current/form/type_guesser.html

  -
    question: >
      Which built-in form type is used for a file upload field?
    answers:
      - { value: "UploadType", correct: false }
      - { value: "BinaryType", correct: false }
      - { value: "FileType", correct: true }
      - { value: "AttachmentType", correct: false }
    help: |
      `FileType` is the standard form type for handling file uploads.
      https://symfony.com/doc/current/reference/forms/types/file.html

  -
    question: >
      What is the purpose of the `error_bubbling` option for a form field?
    answers:
      - { value: "It determines if errors for child fields should 'bubble up' and be displayed on the parent form.", correct: true }
      - { value: "It prevents errors from being displayed on the form.", correct: false }
      - { value: "It forces all errors to be displayed inline with their respective fields.", correct: false }
      - { value: "It defines the order in which errors are processed.", correct: false }
    help: |
      When `error_bubbling` is `true`, errors for a child field will also be displayed on its parent form. When `false`, errors only appear on the child field itself.
      https://symfony.com/doc/current/reference/forms/types/form.html#error-bubbling

  -
    question: >
      Which built-in form type is used for a collection of checkboxes where multiple options can be selected?
    answers:
      - { value: "CheckboxType", correct: false }
      - { value: "ChoiceType", correct: true }
      - { value: "CollectionType", correct: false }
      - { value: "MultiSelectType", correct: false }
    help: |
      `ChoiceType` with the `multiple` option set to `true` and the `expanded` option set to `true` is used for a collection of checkboxes.
      https://symfony.com/doc/current/reference/forms/types/choice.html#multiple-and-expanded

  -
    question: >
      What is the purpose of the `inherit_data` option in a form type?
    answers:
      - { value: "It allows the form to inherit data from its parent form.", correct: true }
      - { value: "It forces the form to use the parent's `data_class`.", correct: false }
      - { value: "It enables data transformation for the form.", correct: false }
      - { value: "It makes the form's data immutable.", correct: false }
    help: |
      The `inherit_data` option allows a child form to inherit the data of its parent form, useful for forms that don't map to their own object but operate on a subset of the parent's data.
      https://symfony.com/doc/current/reference/forms/types/form.html#inherit-data

  -
    question: >
      Which built-in form type is used for a single-line input field that is specifically for numbers with a step (e.g., for quantity)?
    answers:
      - { value: "NumberType", correct: false }
      - { value: "IntegerType", correct: false }
      - { value: "RangeType", correct: false }
      - { value: "MoneyType", correct: true }
    help: |
      `MoneyType` is used for monetary values and can include a step option. `NumberType` is more general for any number.
      https://symfony.com/doc/current/reference/forms/types/money.html

  -
    question: >
      What is the purpose of the `validation_groups` option in a form?
    answers:
      - { value: "To group form fields for rendering purposes.", correct: false }
      - { value: "To specify which validation groups should be applied when the form is submitted.", correct: true }
      - { value: "To define a set of default values for the form.", correct: false }
      - { value: "To categorize forms for debugging.", correct: false }
    help: |
      The `validation_groups` option allows you to control which validation groups are active when the form is validated, enabling conditional validation.
      https://symfony.com/doc/current/validation/groups.html#validation-groups-for-forms

  -
    question: >
      Which built-in form type is used for a single-line input field that is specifically for search queries?
    answers:
      - { value: "TextType", correct: false }
      - { value: "SearchType", correct: true }
      - { value: "QueryType", correct: false }
      - { value: "InputType", correct: false }
    help: |
      `SearchType` is a specialized text input for search queries, often rendering with a search icon in browsers.
      https://symfony.com/doc/current/reference/forms/types/search.html

  -
    question: >
      What is the purpose of the `label` option for a form field?
    answers:
      - { value: "To define the HTML `id` attribute for the field.", correct: false }
      - { value: "To set the text displayed as the field's label.", correct: true }
      - { value: "To specify the name of the associated data property.", correct: false }
      - { value: "To add a tooltip to the field.", correct: false }
    help: |
      The `label` option is used to set the human-readable text that appears next to the form field.
      https://symfony.com/doc/current/reference/forms/types/form.html#label

  -
    question: >
      Which built-in form type is used for a single-line input field that is specifically for telephone numbers?
    answers:
      - { value: "TextType", correct: false }
      - { value: "PhoneType", correct: true }
      - { value: "TelType", correct: false }
      - { value: "NumberType", correct: false }
    help: |
      `TelType` (or `PhoneType` in older versions/contexts) is a specialized text input for telephone numbers.
      https://symfony.com/doc/current/reference/forms/types/tel.html

  -
    question: >
      What is the purpose of the `data` option when creating a form?
    answers:
      - { value: "To set the initial data for the form fields.", correct: true }
      - { value: "To define the data type of the submitted values.", correct: false }
      - { value: "To specify the name of the data object.", correct: false }
      - { value: "To retrieve the submitted data after validation.", correct: false }
    help: |
      The `data` option allows you to explicitly set the initial data that the form will be populated with, overriding the data from the `data_class`.
      https://symfony.com/doc/current/reference/forms/types/form.html#data

  -
    question: >
      Which built-in form type is used for a single-line input field that is specifically for colors?
    answers:
      - { value: "TextType", correct: false }
      - { value: "ColorPickerType", correct: false }
      - { value: "ColorType", correct: true }
      - { value: "HexType", correct: false }
    help: |
      `ColorType` is a specialized text input for color values, often rendering as a color picker in browsers.
      https://symfony.com/doc/current/reference/forms/types/color.html

  -
    question: >
      What is the purpose of the `disabled` option for a form field?
    answers:
      - { value: "It prevents the field from being rendered.", correct: false }
      - { value: "It makes the field read-only and prevents user interaction.", correct: true }
      - { value: "It removes the field from the form's data.", correct: false }
      - { value: "It hides the field from view.", correct: false }
    help: |
      The `disabled` option adds the HTML `disabled` attribute, making the field uneditable and its value not submitted.
      https://symfony.com/doc/current/reference/forms/types/form.html#disabled

  -
    question: >
      Which built-in form type is used for a single-line input field that is specifically for dates and times?
    answers:
      - { value: "DateType", correct: false }
      - { value: "TimeType", correct: false }
      - { value: "DateTimeType", correct: true }
      - { value: "TimestampType", correct: false }
    help: |
      `DateTimeType` is used for inputting both date and time values.
      https://symfony.com/doc/current/reference/forms/types/datetime.html

  -
    question: >
      What is the purpose of the `read_only` option for a form field?
    answers:
      - { value: "It prevents the field from being submitted.", correct: false }
      - { value: "It makes the field's value unchangeable by the user, but its value is still submitted.", correct: true }
      - { value: "It hides the field from the user interface.", correct: false }
      - { value: "It disables validation for the field.", correct: false }
    help: |
      The `read_only` option adds the HTML `readonly` attribute, meaning the user cannot change the value, but the value will still be submitted with the form.
      https://symfony.com/doc/current/reference/forms/types/form.html#read-only

  -
    question: >
      Which built-in form type is used for a single-line input field that is specifically for email addresses, but also allows multiple email addresses?
    answers:
      - { value: "EmailType", correct: false }
      - { value: "CollectionType", correct: false }
      - { value: "ChoiceType", correct: false }
      - { value: "TextType with custom validation", correct: true }
    help: |
      While `EmailType` is for single emails, for multiple emails in a single field, you would typically use `TextType` and apply a custom validation constraint (e.g., `Email` with `multiple: true`) or a data transformer.
      https://symfony.com/doc/current/reference/forms/types/email.html

  -
    question: >
      What is the purpose of the `constraints` option when adding a field to a form builder (e.g., `->add('field', TextType::class, ['constraints' => ...])`)?
    answers:
      - { value: "To define the HTML attributes for the field.", correct: false }
      - { value: "To apply validation rules directly to that specific form field.", correct: true }
      - { value: "To set the default value for the field.", correct: false }
      - { value: "To specify the data transformer for the field.", correct: false }
    help: |
      The `constraints` option allows you to apply validation rules directly to a form field, which is particularly useful for unmapped fields or when you want to add form-specific validation.
      https://symfony.com/doc/current/components/form.html#creating-a-form-with-validation

  -
    question: >
      Which built-in form type is used for a single-line input field that is specifically for a range of numbers (e.g., a slider)?
    answers:
      - { value: "NumberType", correct: false }
      - { value: "IntegerType", correct: false }
      - { value: "RangeType", correct: true }
      - { value: "SliderType", correct: false }
    help: |
      `RangeType` renders an HTML `<input type="range">` element, typically displayed as a slider.
      https://symfony.com/doc/current/reference/forms/types/range.html

  -
    question: >
      What is the purpose of the `error_mapping` option in a form type?
    answers:
      - { value: "To map validation errors from one field to another, or to the form itself.", correct: true }
      - { value: "To define custom error messages for validation constraints.", correct: false }
      - { value: "To specify which validation groups to use for error display.", correct: false }
      - { value: "To translate error messages into different languages.", correct: false }
    help: |
      `error_mapping` allows you to remap validation errors from one property path to another, or to the form's global errors.
      https://symfony.com/doc/current/reference/forms/types/form.html#error-mapping

  -
    question: >
      Which built-in form type is used for a single-line input field that is specifically for a week (year and week number)?
    answers:
      - { value: "DateType", correct: false }
      - { value: "WeekType", correct: true }
      - { value: "CalendarType", correct: false }
      - { value: "MonthType", correct: false }
    help: |
      `WeekType` renders an HTML `<input type="week">` element.
      https://symfony.com/doc/current/reference/forms/types/week.html

  -
    question: >
      What is the purpose of the `block_prefix` option in a form type?
    answers:
      - { value: "It defines the HTML `id` prefix for all fields in the form.", correct: false }
      - { value: "It sets the prefix used for Twig block names when theming the form type.", correct: true }
      - { value: "It specifies the translation domain for the form type.", correct: false }
      - { value: "It determines the default name of the form type.", correct: false }
    help: |
      The `block_prefix` option defines the prefix used for Twig block names when customizing the rendering of a form type.
      https://symfony.com/doc/current/form/form_customization.html#block-prefixes

  -
    question: >
      Which built-in form type is used for a single-line input field that is specifically for a time?
    answers:
      - { value: "DateType", correct: false }
      - { value: "TimeType", correct: true }
      - { value: "DateTimeType", correct: false }
      - { value: "ClockType", correct: false }
    help: |
      `TimeType` is used for inputting time values.
      https://symfony.com/doc/current/reference/forms/types/time.html

  -
    question: >
      What is the purpose of the `row_attr` option for a form field?
    answers:
      - { value: "To add HTML attributes to the input widget.", correct: false }
      - { value: "To add HTML attributes to the `div` or `li` element that wraps the field's row.", correct: true }
      - { value: "To set the default value of the label.", correct: false }
      - { value: "To define the CSS class for the label.", correct: false }
    help: |
      The `row_attr` option allows you to add custom HTML attributes to the element that wraps the entire form row (e.g., `<div class="form-group">`).
      https://symfony.com/doc/current/reference/forms/types/form.html#row-attr

  -
    question: >
      Which built-in form type is used for a single-line input field that is specifically for a month (year and month)?
    answers:
      - { value: "DateType", correct: false }
      - { value: "MonthType", correct: true }
      - { value: "CalendarType", correct: false }
      - { value: "YearType", correct: false }
    help: |
      `MonthType` renders an HTML `<input type="month">` element.
      https://symfony.com/doc/current/reference/forms/types/month.html

  -
    question: >
      What is the purpose of the `widget_attr` option for a form field?
    answers:
      - { value: "To add HTML attributes to the field's label.", correct: false }
      - { value: "To add HTML attributes to the input element itself.", correct: true }
      - { value: "To set the default value for the field.", correct: false }
      - { value: "To define the CSS class for the entire form row.", correct: false }
    help: |
      The `widget_attr` option is an alias for `attr` and allows you to pass an array of HTML attributes that will be applied directly to the rendered HTML input element of the form field.
      https://symfony.com/doc/current/reference/forms/types/form.html#attr

  -
    question: >
      Which built-in form type is used for a single-line input field that is specifically for a local date and time without time zone information?
    answers:
      - { value: "DateType", correct: false }
      - { value: "TimeType", correct: false }
      - { value: "DateTimeType", correct: false }
      - { value: "DateTimeLocalType", correct: true }
    help: |
      `DateTimeLocalType` renders an HTML `<input type="datetime-local">` element.
      https://symfony.com/doc/current/reference/forms/types/datetimelocal.html

  -
    question: >
      What is the purpose of the `input` option in `DateType` or `DateTimeType`?
    answers:
      - { value: "To define the HTML input type (e.g., 'text', 'date').", correct: false }
      - { value: "To specify the format in which the data is stored in the underlying object (e.g., 'datetime_immutable', 'string').", correct: true }
      - { value: "To set the default value for the date/time field.", correct: false }
      - { value: "To control whether the date/time picker is enabled.", correct: false }
    help: |
      The `input` option determines the format of the data that is passed to and from the underlying object (e.g., `DateTimeImmutable` object, string, timestamp).
      https://symfony.com/doc/current/reference/forms/types/date.html#input

  -
    question: >
      Which built-in form type is used for a single-line input field that is specifically for a local time without time zone information?
    answers:
      - { value: "TimeType", correct: true }
      - { value: "DateTimeType", correct: false }
      - { value: "TimeLocalType", correct: false }
      - { value: "DurationType", correct: false }
    help: |
      `TimeType` is used for inputting time values.
      https://symfony.com/doc/current/reference/forms/types/time.html

  -
    question: >
      What is the purpose of the `format` option in `DateType` or `DateTimeType`?
    answers:
      - { value: "To specify the format in which the date/time is displayed in the HTML input.", correct: true }
      - { value: "To define the format for data storage in the underlying object.", correct: false }
      - { value: "To set the default locale for date/time formatting.", correct: false }
      - { value: "To control the precision of the time component.", correct: false }
    help: |
      The `format` option defines how the date or datetime value is rendered in the HTML input field.
      https://symfony.com/doc/current/reference/forms/types/date.html#format

  -
    question: >
      Which built-in form type is used for a single-line input field that is specifically for a range of dates?
    answers:
      - { value: "DateRangeType", correct: false }
      - { value: "DateType", correct: false }
      - { value: "CollectionType", correct: false }
      - { value: "DateIntervalType", correct: true }
    help: |
      `DateIntervalType` is used for inputting a duration or interval between two dates. For a range of dates (start and end), you would typically use two `DateType` fields.
      https://symfony.com/doc/current/reference/forms/types/dateinterval.html

  -
    question: >
      What is the purpose of the `html5` option in `DateType`, `TimeType`, or `DateTimeType`?
    answers:
      - { value: "To enable or disable HTML5 form validation for the field.", correct: false }
      - { value: "To control whether the field renders as an HTML5 input type (e.g., `type=\"date\"`) or a series of select tags.", correct: true }
      - { value: "To specify the HTML5 placeholder text.", correct: false }
      - { value: "To enable or disable client-side JavaScript for the field.", correct: false }
    help: |
      The `html5` option determines whether the field renders as a single HTML5 input type (e.g., `<input type="date">`) or as multiple select elements (year, month, day).
      https://symfony.com/doc/current/reference/forms/types/date.html#html5

  -
    question: >
      Which built-in form type is used for a single-line input field that is specifically for a URL, but also allows multiple URLs?
    answers:
      - { value: "UrlType", correct: false }
      - { value: "CollectionType", correct: false }
      - { value: "ChoiceType", correct: false }
      - { value: "TextType with custom validation", correct: true }
    help: |
      Similar to multiple emails, for multiple URLs in a single field, you would typically use `TextType` and apply a custom validation constraint (e.g., `Url` with `multiple: true`) or a data transformer.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `widget` option in `DateType`, `TimeType`, or `DateTimeType`?
    answers:
      - { value: "To define the HTML input type (e.g., 'single_text', 'choice').", correct: true }
      - { value: "To specify the format of the data for storage.", correct: false }
      - { value: "To control the appearance of the date/time picker.", correct: false }
      - { value: "To enable or disable JavaScript for the widget.", correct: false }
    help: |
      The `widget` option determines how the date/time field is rendered (e.g., as a single text input, a series of select boxes, or a hidden input).
      https://symfony.com/doc/current/reference/forms/types/date.html#widget

  -
    question: >
      Which built-in form type is used for a single-line input field that is specifically for a search query, but also allows multiple search terms?
    answers:
      - { value: "SearchType", correct: false }
      - { value: "CollectionType", correct: false }
      - { value: "ChoiceType", correct: false }
      - { value: "TextType with custom logic", correct: true }
    help: |
      For multiple search terms in a single field, you would typically use `TextType` and implement custom logic to parse the input (e.g., comma-separated values) and apply search filters.
      https://symfony.com/doc/current/reference/forms/types/search.html

  -
    question: >
      What is the purpose of the `model_timezone` option in `DateType`, `TimeType`, or `DateTimeType`?
    answers:
      - { value: "To specify the timezone in which the data is stored in the underlying object.", correct: true }
      - { value: "To define the timezone for displaying the date/time in the form.", correct: false }
      - { value: "To set the default timezone for the application.", correct: false }
      - { value: "To convert the timezone of the submitted data.", correct: false }
    help: |
      The `model_timezone` option specifies the timezone in which the date/time data is stored in the underlying model object.
      https://symfony.com/doc/current/reference/forms/types/date.html#model-timezone

  -
    question: >
      Which built-in form type is used for a single-line input field that is specifically for a color, but also allows multiple colors?
    answers:
      - { value: "ColorType", correct: false }
      - { value: "CollectionType", correct: false }
      - { value: "ChoiceType", correct: false }
      - { value: "TextType with custom parsing", correct: true }
    help: |
      For multiple colors in a single field, you would typically use `TextType` and implement custom parsing logic (e.g., comma-separated hex codes) and potentially a data transformer.
      https://symfony.com/doc/current/reference/forms/types/color.html

  -
    question: >
      What is the purpose of the `view_timezone` option in `DateType`, `TimeType`, or `DateTimeType`?
    answers:
      - { value: "To specify the timezone in which the data is stored in the underlying object.", correct: false }
      - { value: "To define the timezone for displaying the date/time in the form.", correct: true }
      - { value: "To set the default timezone for the application.", correct: false }
      - { value: "To convert the timezone of the submitted data.", correct: false }
    help: |
      The `view_timezone` option specifies the timezone in which the date/time data is displayed in the form (i.e., the timezone of the user).
      https://symfony.com/doc/current/reference/forms/types/date.html#view-timezone

  -
    question: >
      Which built-in form type is used for a single-line input field that is specifically for a telephone number, but also allows multiple telephone numbers?
    answers:
      - { value: "TelType", correct: false }
      - { value: "CollectionType", correct: false }
      - { value: "ChoiceType", correct: false }
      - { value: "TextType with custom validation", correct: true }
    help: |
      For multiple telephone numbers in a single field, you would typically use `TextType` and apply a custom validation constraint or a data transformer to handle the multiple values.
      https://symfony.com/doc/current/reference/forms/types/tel.html

  -
    question: >
      What is the purpose of the `input_format` option in `DateType`, `TimeType`, or `DateTimeType` when `input` is set to `'string'`?
    answers:
      - { value: "To define the format for displaying the date/time in the HTML input.", correct: false }
      - { value: "To specify the format of the string when reading/writing to the underlying model.", correct: true }
      - { value: "To set the default locale for date/time formatting.", correct: false }
      - { value: "To control the precision of the time component.", correct: false }
    help: |
      When the `input` option is `'string'`, `input_format` specifies the format of the string that is expected for the underlying model.
      https://symfony.com/doc/current/reference/forms/types/date.html#input-format

  -
    question: >
      Which built-in form type is used for a single-line input field that is specifically for a number, but also allows multiple numbers?
    answers:
      - { value: "NumberType", correct: false }
      - { value: "CollectionType", correct: false }
      - { value: "ChoiceType", correct: false }
      - { value: "TextType with custom parsing", correct: true }
    help: |
      For multiple numbers in a single field, you would typically use `TextType` and implement custom parsing logic (e.g., comma-separated values) and potentially a data transformer.
      https://symfony.com/doc/current/reference/forms/types/number.html

  -
    question: >
      What is the purpose of the `widget_format` option in `DateType`, `TimeType`, or `DateTimeType` when `widget` is set to `'single_text'`?
    answers:
      - { value: "To define the format for displaying the date/time in the HTML input.", correct: true }
      - { value: "To specify the format of the data for storage.", correct: false }
      - { value: "To set the default locale for date/time formatting.", correct: false }
      - { value: "To control the precision of the time component.", correct: false }
    help: |
      When `widget` is `'single_text'`, `widget_format` specifies the format of the string that is displayed in the HTML input field.
      https://symfony.com/doc/current/reference/forms/types/date.html#widget-format

  -
    question: >
      Which built-in form type is used for a single-line input field that is specifically for a range of numbers (e.g., for a price range, min/max)?
    answers:
      - { value: "NumberType", correct: false }
      - { value: "RangeType", correct: false }
      - { value: "MoneyType", correct: false }
      - { value: "CollectionType with two NumberType fields", correct: true }
    help: |
      For a price range (min/max), you would typically use a custom form type that embeds two `NumberType` (or `MoneyType`) fields, one for the minimum and one for the maximum.
      https://symfony.com/doc/current/reference/forms/types/number.html

  -
    question: >
      What is the purpose of the `years`, `months`, `days`, `hours`, `minutes`, `seconds` options in `DateType`, `TimeType`, or `DateTimeType`?
    answers:
      - { value: "To define the default values for each component.", correct: false }
      - { value: "To specify the available choices for each component when the widget is rendered as select boxes.", correct: true }
      - { value: "To control the display format of each component.", correct: false }
      - { value: "To enable or disable specific components in the input.", correct: false }
    help: |
      These options allow you to explicitly define the range of years, months, days, etc., that are available as choices when the widget is rendered as select boxes.
      https://symfony.com/doc/current/reference/forms/types/date.html#years-months-days-hours-minutes-seconds

  -
    question: >
      Which built-in form type is used for a single-line input field that is specifically for a password, but also allows multiple passwords?
    answers:
      - { value: "PasswordType", correct: false }
      - { value: "RepeatedType", correct: false }
      - { value: "CollectionType", correct: false }
      - { value: "TextType with custom validation", correct: true }
    help: |
      For multiple passwords in a single field, you would typically use `TextType` and apply custom validation or a data transformer to handle the multiple values, as `PasswordType` is designed for single password input.
      https://symfony.com/doc/current/reference/forms/types/password.html

  -
    question: >
      What is the purpose of the `choice_value` option in `ChoiceType` or `EntityType`?
    answers:
      - { value: "To define the visible label for each choice.", correct: false }
      - { value: "To specify the property or method used to generate the HTML `value` attribute for each choice.", correct: true }
      - { value: "To set the CSS class for each choice option.", correct: false }
      - { value: "To determine if a choice is selected by default.", correct: false }
    help: |
      `choice_value` is used to specify how the `value` attribute of each `<option>` tag should be generated, typically by providing a property name or a callable.
      https://symfony.com/doc/current/reference/forms/types/choice.html#choice-value

  -
    question: >
      Which built-in form type is used for a single-line input field that is specifically for a search query, but also allows multiple search terms?
    answers:
      - { value: "SearchType", correct: false }
      - { value: "CollectionType", correct: false }
      - { value: "ChoiceType", correct: false }
      - { value: "TextType with custom logic", correct: true }
    help: |
      For multiple search terms in a single field, you would typically use `TextType` and implement custom logic to parse the input (e.g., comma-separated values) and apply search filters.
      https://symfony.com/doc/current/reference/forms/types/search.html