category: Forms

questions:
  -
    question: >
      Which Symfony command is used to list all available form types, type extensions, and type guessers?
    answers:
      -
        value: >
          `php bin/console debug:form`
        correct: true
      -
        value: >
          `php bin/console form:list`
        correct: false
      -
        value: >
          `php bin/console form:debug`
        correct: false
      -
        value: >
          `php bin/console list:forms`
        correct: false
    help: |
      The `debug:form` command provides detailed information about all registered form types, their options, and any applied type extensions or guessers.
      https://symfony.com/doc/current/forms.html#listing-form-types

  -
    question: |
      Consider the following Twig snippet for rendering a form:

      ```twig
      {{ form(form) }}
      ```

      What is the default HTTP method used when rendering a form this way?
    answers:
      -
        value: >
          `POST`
        correct: true
      -
        value: >
          `GET`
        correct: false
      -
        value: >
          `PUT`
        correct: false
      -
        value: >
          `PATCH`
        correct: false
    help: |
      By default, `form(form)` renders the form with the `POST` method. You can override this by passing options, e.g., `{{ form(form, {'method': 'GET'}) }}`.
      https://symfony.com/doc/current/forms.html#rendering-the-form

  -
    question: >
      What is the primary purpose of the `handleRequest()` method on a Symfony Form instance?
    answers:
      -
        value: >
          To validate the form data against its constraints.
        correct: false
      -
        value: >
          To populate the form with data from the HTTP request.
        correct: true
      -
        value: >
          To render the form in a Twig template.
        correct: false
      -
        value: >
          To retrieve the submitted data from the form.
        correct: false
    help: |
      The `handleRequest()` method inspects the incoming `Request` object and, if the form was submitted, populates the form fields with the submitted data.
      https://symfony.com/doc/current/forms.html#handling-form-submissions

  -
    question: |
      Which of the following methods are essential for defining a custom Symfony Form Type class?
    answers:
      -
        value: >
          `buildForm(FormBuilderInterface $builder, array $options)`
        correct: true
      -
        value: >
          `configureOptions(OptionsResolver $resolver)`
        correct: true
      -
        value: >
          `createFormBuilder()`
        correct: false
      -
        value: >
          `getData()`
        correct: false
      -
        value: >
          `isValid()`
        correct: false
    help: |
      Custom form types extend `AbstractType` and typically implement `buildForm()` to define fields and `configureOptions()` to set default options and data class.
      https://symfony.com/doc/current/forms.html#creating-a-form-class

  -
    question: >
      When creating a form in a Symfony controller, which method is used to instantiate a form based on a dedicated form type class (e.g., `TaskType::class`)?
    answers:
      -
        value: >
          `$this->get('form.factory')->create(TaskType::class, $data);`
        correct: false
      -
        value: >
          `$this->createFormBuilder($data)->add(TaskType::class)->getForm();`
        correct: false
      -
        value: >
          `$this->createForm(TaskType::class, $data);`
        correct: true
      -
        value: >
          `new TaskType($data);`
        correct: false
    help: |
      The `AbstractController::createForm()` method is the standard way to create a form instance from a form type class.
      https://symfony.com/doc/current/forms.html#creating-a-form-class

  -
    question: |
      Given the following form field definition:

      ```php
      $builder->add('agreeTerms', CheckboxType::class, ['mapped' => false]);
      ```

      What is the effect of setting `'mapped' => false`?
    answers:
      -
        value: >
          The field will not be rendered in the Twig template.
        correct: false
      -
        value: >
          The field's data will not be synchronized with the underlying data object.
        correct: true
      -
        value: >
          The field will be read-only.
        correct: false
      -
        value: >
          The field will not be validated.
        correct: false
    help: |
      Setting `'mapped' => false` means the form field does not correspond to a property on the underlying data object. Its value will not be read from or written to the object.
      https://symfony.com/doc/current/forms.html#unmapped-fields

  -
    question: >
      Which Twig helper function should you use to render the HTML `label` for a specific form field?
    answers:
      -
        value: >
          `form_widget()`
        correct: false
      -
        value: >
          `form_row()`
        correct: false
      -
        value: >
          `form_label()`
        correct: true
      -
        value: >
          `form_errors()`
        correct: false
    help: |
      `form_label(form.fieldName)` renders only the `<label>` tag for a form field. `form_row()` renders the label, widget, and errors together.
      https://symfony.com/doc/current/form/form_customization.html#form-rendering-functions

  -
    question: >
      How can you apply a custom Twig form theme to a specific form instance within a template, overriding any global themes?
    answers:
      -
        value: >
          `{% form_theme form 'my_theme.html.twig' %}`
        correct: true
      -
        value: >
          `{{ form(form, {'theme': 'my_theme.html.twig'}) }}`
        correct: false
      -
        value: >
          `{% include 'my_theme.html.twig' with {'form': form} %}`
        correct: false
      -
        value: >
          `{% form_theme 'my_theme.html.twig' for form %}`
        correct: false
    help: |
      The `form_theme` tag is used to apply themes. Placing it before `form_start()` or `form()` in the template applies it to that specific form.
      https://symfony.com/doc/current/form/form_themes.html#applying-themes-to-a-specific-form

  -
    question: >
      Which of the following is the correct way to embed one form type (e.g., `CategoryType`) into another form type (e.g., `TaskType`)?
    answers:
      -
        value: >
          `$builder->add('category', new CategoryType());`
        correct: false
      -
        value: >
          `$builder->add('category', 'App\\Form\\CategoryType');`
        correct: false
      -
        value: >
          `$builder->add('category', CategoryType::class);`
        correct: true
      -
        value: >
          `$builder->add('category', 'category_type');`
        correct: false
    help: |
      To embed a form type, you pass its fully qualified class name (FQCN) using `::class` as the second argument to the `add()` method.
      https://symfony.com/doc/current/form/embedded.html

  -
    question: >
      What is the purpose of the `data_class` option in `configureOptions()` of a form type?
    answers:
      -
        value: >
          To specify the Twig template used for rendering the form.
        correct: false
      -
        value: >
          To define the default data for the form fields.
        correct: false
      -
        value: >
          To link the form type to a specific PHP class (entity or DTO) for data mapping.
        correct: true
      -
        value: >
          To enable or disable CSRF protection for the form.
        correct: false
    help: |
      The `data_class` option tells Symfony which class the form should map its data to. This is crucial for data binding between the form and your application's objects.
      https://symfony.com/doc/current/forms.html#creating-a-form-class

  -
    question: |
      You want to add a validation constraint to a form field directly in the controller using `createFormBuilder`. Which of the following is a valid way to do this?
    answers:
      -
        value: >
          `->add('task', TextType::class, ['validation' => new NotBlank()])`
        correct: false
      -
        value: >
          `->add('task', TextType::class, ['constraints' => new NotBlank()])`
        correct: true
      -
        value: >
          `->add('task', TextType::class)->setConstraint(new NotBlank())`
        correct: false
      -
        value: >
          `->add('task', TextType::class, ['assert' => new NotBlank()])`
        correct: false
    help: |
      Validation constraints are passed to the `constraints` option of a form field. For multiple constraints, an array of constraints can be provided.
      https://symfony.com/doc/current/forms.html#adding-validation

  -
    question: >
      Which of the following Twig functions is the most comprehensive for rendering a form field, including its label, widget, and any errors?
    answers:
      -
        value: >
          `form_widget()`
        correct: false
      -
        value: >
          `form_label()`
        correct: false
      -
        value: >
          `form_errors()`
        correct: false
      -
        value: >
          `form_row()`
        correct: true
    help: |
      `form_row()` is a convenience function that renders the label, errors, and widget for a single field, wrapped in a `div` by default.
      https://symfony.com/doc/current/form/form_customization.html#form-rendering-functions

  -
    question: >
      What is the primary benefit of defining a form using a dedicated form class (e.g., `TaskType.php`) instead of `createFormBuilder()` directly in a controller?
    answers:
      -
        value: >
          It automatically handles form submission and validation.
        correct: false
      -
        value: >
          It promotes reusability and separation of concerns.
        correct: true
      -
        value: >
          It disables CSRF protection by default.
        correct: false
      -
        value: >
          It allows direct database interaction without an ORM.
        correct: false
    help: |
      Dedicated form classes encapsulate the form's structure and logic, making them reusable across different controllers or parts of your application, and improving code organization.
      https://symfony.com/doc/current/forms.html#creating-a-form-class

  -
    question: >
      Which built-in form type is used to manage a collection of embedded forms, such as a list of tags associated with a task?
    answers:
      -
        value: >
          `EntityType`
        correct: false
      -
        value: >
          `ArrayType`
        correct: false
      -
        value: >
          `CollectionType`
        correct: true
      -
        value: >
          `ChoiceType`
        correct: false
    help: |
      `CollectionType` is specifically designed to handle collections of data, where each item in the collection is represented by an embedded form.
      https://symfony.com/doc/current/reference/forms/types/collection.html

  -
    question: |
      You want to pass a custom option, `require_description`, to your `TaskType` form from the controller. How would you do this?
    answers:
      -
        value: >
          `$form = $this->createForm(TaskType::class, $task, ['require_description' => true]);`
        correct: true
      -
        value: >
          `$form = $this->createForm(TaskType::class, $task)->addOption('require_description', true);`
        correct: false
      -
        value: >
          `$form = $this->createForm(TaskType::class, $task, ['options' => ['require_description' => true]]);`
        correct: false
      -
        value: >
          `$form = $this->createForm(TaskType::class, $task)->setOption('require_description', true);`
        correct: false
    help: |
      Custom options are passed as the third argument (an array) to the `createForm()` method. These options are then available in the `buildForm()` method of your form type.
      https://symfony.com/doc/current/forms.html#passing-options-to-a-form-type

  -
    question: >
      By default, is CSRF protection enabled for Symfony forms?
    answers:
      -
        value: >
          No, it must be explicitly enabled.
        correct: false
      -
        value: >
          Yes, for all forms unless explicitly disabled.
        correct: true
      -
        value: >
          Only for forms that are bound to an entity.
        correct: false
      -
        value: >
          Only for forms submitted via POST requests.
        correct: false
    help: |
      Symfony forms have CSRF protection enabled by default. A hidden `_token` field is automatically added to the form.
      https://symfony.com/doc/current/forms.html#csrf-protection

  -
    question: |
      Which Twig helper function is used to render only the HTML input (widget) for a form field?
    answers:
      -
        value: >
          `form_row()`
        correct: false
      -
        value: >
          `form_widget()`
        correct: true
      -
        value: >
          `form_label()`
        correct: false
      -
        value: >
          `form_errors()`
        correct: false
    help: |
      `form_widget(form.fieldName)` renders only the HTML input element for the specified form field.
      https://symfony.com/doc/current/form/form_customization.html#form-rendering-functions

  -
    question: >
      What is the purpose of a "data transformer" in Symfony forms?
    answers:
      -
        value: >
          To convert data between the format used in the underlying object and the format used in the form field.
        correct: true
      -
        value: >
          To transform the Twig template for form rendering.
        correct: false
      -
        value: >
          To encrypt sensitive data before submission.
        correct: false
      -
        value: >
          To validate form data against custom rules.
        correct: false
    help: |
      Data transformers are used to convert data between three representations: the model (your entity/object), the normalized format (what Symfony's form component understands), and the view format (what the user sees in the HTML input).
      https://symfony.com/doc/current/form/data_transformers.html

  -
    question: |
      Which of the following `FormEvents` is triggered *before* the form's data is mapped to the underlying object, allowing you to modify the submitted data?
    answers:
      -
        value: >
          `FormEvents::POST_SUBMIT`
        correct: false
      -
        value: >
          `FormEvents::PRE_SET_DATA`
        correct: false
      -
        value: >
          `FormEvents::PRE_SUBMIT`
        correct: true
      -
        value: >
          `FormEvents::POST_SET_DATA`
        correct: false
    help: |
      `FormEvents::PRE_SUBMIT` is dispatched after the request data has been submitted but before it's mapped to the form's fields and then to the underlying object. This is ideal for modifying submitted data.
      https://symfony.com/doc/current/form/events.html#pr_submit

  -
    question: >
      How do you disable CSRF protection for a specific form in Symfony?
    answers:
      -
        value: >
          Set the `csrf_protection` option to `false` in the form type's `configureOptions()` method or when creating the form.
        correct: true
      -
        value: >
          Remove the `_token` field from the form builder.
        correct: false
      -
        value: >
          Set the `enable_csrf` parameter to `false` in `config/packages/framework.yaml`.
        correct: false
      -
        value: >
          Add a `#[NoCsrf]` attribute to the form type class.
        correct: false
    help: |
      CSRF protection can be disabled by setting the `csrf_protection` option to `false` in the form's options.
      https://symfony.com/doc/current/reference/forms/types/form.html#csrf-protection

  -
    question: |
      When handling a file upload with a Symfony form, which built-in form type should be used for the file input field?
    answers:
      -
        value: >
          `ImageType`
        correct: false
      -
        value: >
          `UploadType`
        correct: false
      -
        value: >
          `FileType`
        correct: true
      -
        value: >
          `FileFieldType`
        correct: false
    help: |
      The `FileType` is the dedicated form type for handling file uploads in Symfony forms.
      https://symfony.com/doc/current/reference/forms/types/file.html

  -
    question: |
      You have a `Task` entity with a `dueDate` property of type `DateTimeImmutable`. Which built-in form type is most suitable for this property?
    answers:
      -
        value: >
          `TextType`
        correct: false
      -
        value: >
          `DateType`
        correct: true
      -
        value: >
          `DateTimeType`
        correct: true
      -
        value: >
          `TimeType`
        correct: false
    help: |
      Both `DateType` and `DateTimeType` are suitable for handling `DateTimeImmutable` objects, depending on whether you need to capture time information as well.
      https://symfony.com/doc/current/reference/forms/types/date.html
      https://symfony.com/doc/current/reference/forms/types/datetime.html

  -
    question: |
      Which of the following options is used with `CollectionType` to specify the form type of each item in the collection?
    answers:
      -
        value: >
          `item_type`
        correct: false
      -
        value: >
          `entry_type`
        correct: true
      -
        value: >
          `child_type`
        correct: false
      -
        value: >
          `collection_type`
        correct: false
    help: |
      The `entry_type` option is required for `CollectionType` to define the form type used for each element within the collection.
      https://symfony.com/doc/current/reference/forms/types/collection.html#entry-type

  -
    question: |
      When using `form_theme` in Twig, what does the `only` keyword achieve?

      ```twig
      {% form_theme form with ['foundation_5_layout.html.twig'] only %}
      ```
    answers:
      -
        value: >
          It applies the theme only to the root form, not its children.
        correct: false
      -
        value: >
          It ensures that only the specified themes are applied, ignoring any globally configured themes.
        correct: true
      -
        value: >
          It applies the theme only if no other themes have been previously applied.
        correct: false
      -
        value: >
          It makes the theme apply only to the form's widget, not its label or errors.
        correct: false
    help: |
      The `only` keyword prevents the form from inheriting themes from the global configuration or parent templates, ensuring only the explicitly listed themes are used.
      https://symfony.com/doc/current/form/form_themes.html#applying-multiple-themes

  -
    question: >
      What is the purpose of the `buildView()` method in a custom form type?
    answers:
      -
        value: >
          To build the HTML structure of the form.
        correct: false
      -
        value: >
          To set any extra variables needed when rendering the field in a form theme template.
        correct: true
      -
        value: >
          To define the form's fields and their types.
        correct: false
      -
        value: >
          To process the submitted data before validation.
        correct: false
    help: |
      The `buildView()` method allows you to add or modify variables that will be available in the Twig template when rendering the form field.
      https://symfony.com/doc/current/form/create_custom_field_type.html#the-buildview-method

  -
    question: |
      Which of the following is the correct way to check if a form has been submitted and is valid in a Symfony controller?
    answers:
      -
        value: >
          `if ($form->isSubmitted() && $form->isValid())`
        correct: true
      -
        value: >
          `if ($form->isValid() && $form->isSubmitted())`
        correct: true
      -
        value: >
          `if ($form->submit() && $form->validate())`
        correct: false
      -
        value: >
          `if ($form->isPosted() && $form->hasNoErrors())`
        correct: false
    help: |
      The `isSubmitted()` method checks if the form was submitted, and `isValid()` checks if the submitted data passes all validation constraints. Both should be checked.
      https://symfony.com/doc/current/forms.html#handling-form-submissions

  -
    question: >
      When rendering a Symfony form in Twig, which function is used to render the opening `<form>` tag, including attributes like `method` and `action`?
    answers:
      -
        value: >
          `form_widget()`
        correct: false
      -
        value: >
          `form_start()`
        correct: true
      -
        value: >
          `form()`
        correct: false
      -
        value: >
          `form_end()`
        correct: false
    help: |
      `form_start(form)` generates the opening `<form>` tag and includes necessary attributes like `method`, `action`, and `enctype` for file uploads.
      https://symfony.com/doc/current/form/form_customization.html#form-rendering-functions

  -
    question: |
      You need to modify the data of a form *before* it's set to the form fields, for example, to initialize default values. Which `FormEvents` listener should you use?
    answers:
      -
        value: >
          `FormEvents::PRE_SUBMIT`
        correct: false
      -
        value: >
          `FormEvents::POST_SUBMIT`
        correct: false
      -
        value: >
          `FormEvents::PRE_SET_DATA`
        correct: true
      -
        value: >
          `FormEvents::POST_SET_DATA`
        correct: false
    help: |
      `FormEvents::PRE_SET_DATA` is dispatched before the form's data is populated from the initial data (e.g., an entity). This is the ideal place to modify the data before it's displayed in the form.
      https://symfony.com/doc/current/form/events.html#pr_set_data

  -
    question: >
      Which built-in form type is typically used for a simple text input field?
    answers:
      -
        value: >
          `StringType`
        correct: false
      -
        value: >
          `TextInputType`
        correct: false
      -
        value: >
          `TextType`
        correct: true
      -
        value: >
          `InputType`
        correct: false
    help: |
      `TextType` is the most common form type for single-line text inputs.
      https://symfony.com/doc/current/reference/forms/types/text.html

  -
    question: |
      Consider the following Twig snippet:

      ```twig
      {% if form is rootform %}
          {{ form_errors(form) }}
      {% endif %}
      ```

      What is the purpose of the `is rootform` test?
    answers:
      -
        value: >
          To check if the form has any validation errors.
        correct: false
      -
        value: >
          To determine if the current form view is the top-level form, not an embedded child form.
        correct: true
      -
        value: >
          To verify if the form is bound to an entity.
        correct: false
      -
        value: >
          To ensure the form is submitted via the root URL.
        correct: false
    help: |
      The `is rootform` test is a reliable way to check if the current form view is the main form, preventing issues if a child form happens to be named 'parent'.
      https://symfony.com/doc/current/form/form_customization.html#checking-if-a-form-is-the-root-form

  -
    question: >
      What is the recommended way to add validation constraints to an entity that will be used with a Symfony form?
    answers:
      -
        value: >
          Define them directly in the form type using the `constraints` option for each field.
        correct: false
      -
        value: >
          Use PHP attributes (`#[Assert\NotBlank]`) directly on the entity properties.
        correct: true
      -
        value: >
          Define them in a separate YAML or XML validation file.
        correct: true
      -
        value: >
          Implement the `validate()` method in the entity class.
        correct: false
    help: |
      Symfony's Validator component allows defining constraints using PHP attributes, YAML, or XML files. Using attributes directly on the entity is a common and recommended approach.
      https://symfony.com/doc/current/forms.html#adding-validation

  -
    question: >
      Which built-in form type is used to create a button that submits the form?
    answers:
      -
        value: >
          `ButtonType`
        correct: false
      -
        value: >
          `SubmitType`
        correct: true
      -
        value: >
          `FormButtonType`
        correct: false
      -
        value: >
          `ActionType`
        correct: false
    help: |
      `SubmitType` creates a submit button for the form.
      https://symfony.com/doc/current/reference/forms/types/submit.html

  -
    question: |
      You want to apply different Twig form themes to a parent form and one of its child forms. Which of the following approaches is correct?
    answers:
      -
        value: >
          `{% form_theme form 'parent_theme.html.twig' %}` then `{% form_theme form.child_form 'child_theme.html.twig' %}`
        correct: true
      -
        value: >
          `{% form_theme form with ['parent_theme.html.twig', 'child_form': 'child_theme.html.twig'] %}`
        correct: false
      -
        value: >
          Define the child form's theme directly in its `buildView()` method.
        correct: false
      -
        value: >
          It's not possible to apply different themes to parent and child forms independently.
        correct: false
    help: |
      You can apply themes to specific child forms by referencing them directly in the `form_theme` tag, e.g., `form.a_child_form`.
      https://symfony.com/doc/current/form/form_themes.html#applying-different-themes-to-parent-and-child-forms

  -
    question: >
      What is the primary role of a "form type extension" in Symfony?
    answers:
      -
        value: >
          To create entirely new form types from scratch.
        correct: false
      -
        value: >
          To add or override options and functionality for existing form types.
        correct: true
      -
        value: >
          To transform data between different formats.
        correct: false
      -
        value: >
          To guess the correct form type based on data.
        correct: false
    help: |
      Form type extensions allow you to modify or add behavior to existing form types without altering their original code, promoting reusability and modularity.
      https://symfony.com/doc/current/form/type_extensions.html

  -
    question: |
      Which of the following `FormEvents` is triggered *after* the form's data has been submitted and mapped to the underlying object, allowing you to perform actions like saving to the database?
    answers:
      -
        value: >
          `FormEvents::PRE_SET_DATA`
        correct: false
      -
        value: >
          `FormEvents::PRE_SUBMIT`
        correct: false
      -
        value: >
          `FormEvents::POST_SUBMIT`
        correct: true
      -
        value: >
          `FormEvents::SUBMIT`
        correct: false
    help: |
      `FormEvents::POST_SUBMIT` is dispatched after the form has been submitted, validated, and its data mapped to the object. This is typically where you'd persist the data.
      https://symfony.com/doc/current/form/events.html#post_submit

  -
    question: >
      When creating a form without a data class (e.g., for a contact form), what will `getData()` return after a successful submission?
    answers:
      -
        value: >
          An instance of `stdClass`.
        correct: false
      -
        value: >
          An empty array.
        correct: false
      -
        value: >
          An associative array of the submitted field values.
        correct: true
      -
        value: >
          `null`
        correct: false
    help: |
      If a form is not bound to an object (i.e., `data_class` is null), `getData()` will return an associative array containing the submitted values.
      https://symfony.com/doc/current/forms.html#forms-without-a-class

  -
    question: |
      You want to add a `textarea` field to your form. Which built-in form type should you use?
    answers:
      -
        value: >
          `TextType`
        correct: false
      -
        value: >
          `LongTextType`
        correct: false
      -
        value: >
          `TextareaType`
        correct: true
      -
        value: >
          `HtmlType`
        correct: false
    help: |
      `TextareaType` is specifically designed for multi-line text input fields, rendering as an HTML `<textarea>` element.
      https://symfony.com/doc/current/reference/forms/types/textarea.html

  -
    question: >
      What is the purpose of the `finishView()` method in a custom form type?
    answers:
      -
        value: >
          To finalize the form submission process.
        correct: false
      -
        value: >
          To perform cleanup operations after the form is rendered.
        correct: false
      -
        value: >
          To set extra variables for the view, especially when needing to access child views.
        correct: true
      -
        value: >
          To apply final validation rules to the form.
        correct: false
    help: |
      `finishView()` is similar to `buildView()` but is called after all child views have been built, making it useful for accessing child views (e.g., `form['child_name']`) to modify their view variables.
      https://symfony.com/doc/current/form/create_custom_field_type.html#the-finishview-method

  -
    question: |
      Which of the following is the correct way to render only the error messages for a specific form field in Twig?
    answers:
      -
        value: >
          `{{ form_row(form.fieldName).errors }}`
        correct: false
      -
        value: >
          `{{ form_errors(form.fieldName) }}`
        correct: true
      -
        value: >
          `{{ form.fieldName.errors }}`
        correct: false
      -
        value: >
          `{{ form_widget(form.fieldName).errors }}`
        correct: false
    help: |
      `form_errors(form.fieldName)` renders only the error messages associated with that specific form field.
      https://symfony.com/doc/current/form/form_customization.html#form-rendering-functions

  -
    question: >
      What is the primary difference between `createFormBuilder()` and `createForm()` in a Symfony controller?
    answers:
      -
        value: >
          `createFormBuilder()` is for creating forms that are not bound to an entity, while `createForm()` is for entity-bound forms.
        correct: false
      -
        value: >
          `createFormBuilder()` is used for inline form creation, while `createForm()` is used for dedicated form classes.
        correct: true
      -
        value: >
          `createFormBuilder()` automatically handles form submission, while `createForm()` requires manual handling.
        correct: false
      -
        value: >
          `createFormBuilder()` is deprecated in Symfony 7.
        correct: false
    help: |
      `createFormBuilder()` is used to build a form directly in the controller (inline). `createForm()` is used to instantiate a form from a dedicated form type class.
      https://symfony.com/doc/current/forms.html#creating-forms

  -
    question: |
      You want to add an `email` input field to your form. Which built-in form type should you use?
    answers:
      -
        value: >
          `TextType`
        correct: false
      -
        value: >
          `StringType`
        correct: false
      -
        value: >
          `EmailType`
        correct: true
      -
        value: >
          `MailType`
        correct: false
    help: |
      `EmailType` is specifically designed for email input fields, rendering as an HTML `type="email"` input.
      https://symfony.com/doc/current/reference/forms/types/email.html

  -
    question: >
      What is the purpose of the `configureOptions()` method in a custom form type?
    answers:
      -
        value: >
          To define the form's fields.
        correct: false
      -
        value: >
          To set default options for the form type, including `data_class` and validation constraints.
        correct: true
      -
        value: >
          To configure the form's action and method.
        correct: false
      -
        value: >
          To resolve the form's submitted data.
        correct: false
    help: |
      `configureOptions()` is where you define and configure the options that can be passed to your form type, including default values and option requirements.
      https://symfony.com/doc/current/forms.html#the-configureoptions-method

  -
    question: |
      Which of the following is the correct way to render the closing `</form>` tag in Twig?
    answers:
      -
        value: >
          `{{ form_end(form) }}`
        correct: true
      -
        value: >
          `{{ form_close(form) }}`
        correct: false
      -
        value: >
          `{{ form_stop(form) }}`
        correct: false
      -
        value: >
          `{{ form_finish(form) }}`
        correct: false
    help: |
      `form_end(form)` renders the closing `</form>` tag and any remaining unrendered fields (like CSRF tokens).
      https://symfony.com/doc/current/form/form_customization.html#form-rendering-functions

  -
    question: |
      You want to add a `checkbox` field to your form. Which built-in form type should you use?
    answers:
      -
        value: >
          `BooleanType`
        correct: false
      -
        value: >
          `ToggleType`
        correct: false
      -
        value: >
          `CheckboxType`
        correct: true
      -
        value: >
          `SwitchType`
        correct: false
    help: |
      `CheckboxType` is used for rendering HTML checkboxes.
      https://symfony.com/doc/current/reference/forms/types/checkbox.html

  -
    question: |
      What is the purpose of the `entry_options` option when using `CollectionType`?
    answers:
      -
        value: >
          To pass options to the `CollectionType` itself.
        correct: false
      -
        value: >
          To pass options to each individual embedded form (entry) within the collection.
        correct: true
      -
        value: >
          To define the default data for new entries in the collection.
        correct: false
      -
        value: >
          To specify the HTML attributes for the collection's container.
        correct: false
    help: |
      `entry_options` allows you to pass an array of options that will be applied to each form type created for the collection entries.
      https://symfony.com/doc/current/reference/forms/types/collection.html#entry-options

  -
    question: |
      Which of the following methods of `FormInterface` is responsible for checking if the submitted form data is valid according to defined constraints?
    answers:
      -
        value: >
          `validate()`
        correct: false
      -
        value: >
          `isValid()`
        correct: true
      -
        value: >
          `hasErrors()`
        correct: false
      -
        value: >
          `isClean()`
        correct: false
    help: |
      The `isValid()` method returns `true` if the form has been submitted and all submitted data passes the validation constraints.
      https://symfony.com/doc/current/forms.html#handling-form-submissions

  -
    question: |
      When rendering a form, how can you add a custom HTML class attribute to the form's `input` widget using `form_widget()`?
    answers:
      -
        value: >
          `{{ form_widget(form.name, {'class': 'my-class'}) }}`
        correct: false
      -
        value: >
          `{{ form_widget(form.name, {'attr': {'class': 'my-class'}}) }}`
        correct: true
      -
        value: >
          `{{ form_widget(form.name).addClass('my-class') }}`
        correct: false
      -
        value: >
          `{{ form_widget(form.name, {'options': {'class': 'my-class'}}) }}`
        correct: false
    help: |
      HTML attributes for the widget are passed via the `attr` option within the second argument of `form_widget()`.
      https://symfony.com/doc/current/form/form_customization.html#rendering-a-form-field-widget

  -
    question: |
      Which built-in form type is commonly used for a dropdown select box or radio buttons?
    answers:
      -
        value: >
          `SelectType`
        correct: false
      -
        value: >
          `RadioType`
        correct: false
      -
        value: >
          `ChoiceType`
        correct: true
      -
        value: >
          `OptionType`
        correct: false
    help: |
      `ChoiceType` is a versatile form type used for rendering various types of choice fields, including select dropdowns, radio buttons, and checkboxes, depending on its options.
      https://symfony.com/doc/current/reference/forms/types/choice.html

  -
    question: |
      What is the purpose of a "form type guesser" in Symfony?
    answers:
      -
        value: >
          To guess the correct Twig template for a form type.
        correct: false
      -
        value: >
          To automatically determine the appropriate form type and options based on the underlying data (e.g., entity metadata).
        correct: true
      -
        value: >
          To guess the user's input based on previous entries.
        correct: false
      -
        value: >
          To suggest validation constraints for form fields.
        correct: false
    help: |
      Form type guessers inspect the metadata of the underlying data (e.g., Doctrine mappings, validation constraints) to suggest the most appropriate form type and options for a field.
      https://symfony.com/doc/current/form/type_guesser.html

  -
    question: |
      When creating a form, how can you set the HTML `action` attribute of the form tag to a specific route?
    answers:
      -
        value: >
          Set the `action` option when creating the form, e.g., `['action' => $this->generateUrl('my_route')]`.
        correct: true
      -
        value: >
          Set the `route` option when creating the form.
        correct: false
      -
        value: >
          It's automatically set to the current URL, and cannot be changed.
        correct: false
      -
        value: >
          Use `form_start(form, {'action': path('my_route')})` in Twig.
        correct: true
    help: |
      The `action` option can be set when creating the form in the controller, or directly in Twig using `form_start()`.
      https://symfony.com/doc/current/reference/forms/types/form.html#action

  -
    question: |
      Which of the following built-in form types is used to display a static, non-editable text or HTML content within a form?
    answers:
      -
        value: >
          `LabelType`
        correct: false
      -
        value: >
          `HtmlType`
        correct: false
      -
        value: >
          `TextType` with `disabled` option.
        correct: false
      -
        value: >
          `HiddenType`
        correct: false
      -
        value: >
          `RepeatedType`
        correct: false
    help: |
      While there isn't a direct "display only" type, `TextType` with the `disabled` or `readonly` option, or simply rendering text outside of form fields, are common approaches. `HiddenType` is for data not visible to the user.
      https://symfony.com/doc/current/reference/forms/types/text.html#disabled

  -
    question: |
      What is the purpose of the `POST_SET_DATA` event in Symfony forms?
    answers:
      -
        value: >
          To modify the submitted data after it has been validated.
        correct: false
      -
        value: >
          To add or remove fields dynamically after the initial data has been set to the form.
        correct: true
      -
        value: >
          To perform actions before any data is set to the form.
        correct: false
      -
        value: >
          To save the form data to the database.
        correct: false
    help: |
      `POST_SET_DATA` is dispatched after the form's data has been populated from the initial data. This event is useful for performing actions that depend on the initial data, such as dynamically adding or removing fields.
      https://symfony.com/doc/current/form/events.html#post_set_data

  -
    question: |
      You want to create a form field that requires the user to enter a password twice for confirmation. Which built-in form type is designed for this purpose?
    answers:
      -
        value: >
          `PasswordType`
        correct: false
      -
        value: >
          `ConfirmType`
        correct: false
      -
        value: >
          `RepeatedType`
        correct: true
      -
        value: >
          `DoubleEntryType`
        correct: false
    help: |
      `RepeatedType` is used to render two fields that must have the same value, commonly used for password confirmation.
      https://symfony.com/doc/current/reference/forms/types/repeated.html

  -
    question: |
      Which of the following is the correct way to install the Symfony Form component using Composer?
    answers:
      -
        value: >
          `composer install symfony/form`
        correct: false
      -
        value: >
          `composer add symfony/form`
        correct: false
      -
        value: >
          `composer require symfony/form`
        correct: true
      -
        value: >
          `composer update symfony/form`
        correct: false
    help: |
      The `composer require` command is used to add new dependencies to your project.
      https://symfony.com/doc/current/forms.html#installation

  -
    question: |
      What is the significance of the `data` option when creating a form (e.g., `$this->createForm(TaskType::class, $task);`)?
    answers:
      -
        value: >
          It defines the default values for the form fields if no data is submitted.
        correct: false
      -
        value: >
          It specifies the object or array that the form will read data from and write data to.
        correct: true
      -
        value: >
          It determines the HTTP method for form submission.
        correct: false
      -
        value: >
          It sets the validation group for the form.
        correct: false
    help: |
      The second argument to `createForm()` is the initial data for the form. Symfony will read values from this object/array to populate the form fields and write submitted values back to it.
      https://symfony.com/doc/current/forms.html#creating-a-form-class

  -
    question: |
      You want to add a `number` input field to your form. Which built-in form type should you use?
    answers:
      -
        value: >
          `IntegerType`
        correct: false
      -
        value: >
          `NumberType`
        correct: true
      -
        value: >
          `NumericType`
        correct: false
      -
        value: >
          `FloatType`
        correct: false
    help: |
      `NumberType` is used for numeric input fields, rendering as an HTML `type="number"` input.
      https://symfony.com/doc/current/reference/forms/types/number.html

  -
    question: |
      Which method is used to register an event listener or subscriber with a `FormBuilderInterface` instance?
    answers:
      -
        value: >
          `addListener()` or `addSubscriber()`
        correct: false
      -
        value: >
          `addEvent()` or `addEventHandler()`
        correct: false
      -
        value: >
          `addEventListener()` or `addEventSubscriber()`
        correct: true
      -
        value: >
          `onEvent()` or `onSubscribe()`
        correct: false
    help: |
      The `FormBuilderInterface` provides `addEventListener()` for single callbacks and `addEventSubscriber()` for classes implementing `EventSubscriberInterface`.
      https://symfony.com/doc/current/form/events.html#registering-event-listeners

  -
    question: |
      What is the purpose of the `block_name` option in `CollectionType`?
    answers:
      -
        value: >
          To define the HTML `id` attribute for the collection.
        correct: false
      -
        value: >
          To specify a custom Twig block name for rendering the collection's wrapper.
        correct: true
      -
        value: >
          To set the name of the JavaScript function used for dynamic collection manipulation.
        correct: false
      -
        value: >
          To group validation errors for the collection.
        correct: false
    help: |
      The `block_name` option allows you to define a custom Twig block name for the collection, which is useful for advanced form theming and customization.
      https://symfony.com/doc/current/reference/forms/types/collection.html#block-name

  -
    question: |
      You want to add a `URL` input field to your form. Which built-in form type should you use?
    answers:
      -
        value: >
          `TextType`
        correct: false
      -
        value: >
          `LinkType`
        correct: false
      -
        value: >
          `UrlType`
        correct: true
      -
        value: >
          `UriType`
        correct: false
    help: |
      `UrlType` is specifically designed for URL input fields, rendering as an HTML `type="url"` input.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: |
      What happens if you try to render a form field that has not been added to the form builder in your form type?
    answers:
      -
        value: >
          It will be rendered as an empty input field.
        correct: false
      -
        value: >
          A Twig error will occur, indicating the field does not exist.
        correct: true
      -
        value: >
          Symfony will automatically guess the field type and render it.
        correct: false
      -
        value: >
          The field will be silently ignored.
        correct: false
    help: |
      Attempting to render a non-existent form field in Twig will result in an error, as the `form` view object does not contain that child.
      https://symfony.com/doc/current/form/form_customization.html

  -
    question: |
      Which of the following built-in form types is used to create a dropdown list of choices?
    answers:
      -
        value: >
          `EntityType`
        correct: false
      -
        value: >
          `ChoiceType`
        correct: true
      -
        value: >
          `SelectType`
        correct: false
      -
        value: >
          `OptionType`
        correct: false
    help: |
      `ChoiceType` is used to create select dropdowns, radio buttons, or checkboxes, depending on its configuration.
      https://symfony.com/doc/current/reference/forms/types/choice.html

  -
    question: |
      What is the purpose of the `mapped` option when defining a form field?
    answers:
      -
        value: >
          To specify if the field should be displayed in the form.
        correct: false
      -
        value: >
          To indicate whether the field's data should be synchronized with the underlying data object.
        correct: true
      -
        value: >
          To define the database column mapping for the field.
        correct: false
      -
        value: >
          To set the validation mapping for the field.
        correct: false
    help: |
      The `mapped` option (defaulting to `true`) controls whether the form field's data is read from and written to the underlying data object.
      https://symfony.com/doc/current/forms.html#unmapped-fields

  -
    question: |
      You want to add a `password` input field to your form. Which built-in form type should you use?
    answers:
      -
        value: >
          `TextType`
        correct: false
      -
        value: >
          `SecretType`
        correct: false
      -
        value: >
          `PasswordType`
        correct: true
      -
        value: >
          `HiddenType`
        correct: false
    help: |
      `PasswordType` is used for password input fields, rendering as an HTML `type="password"` input.
      https://symfony.com/doc/current/reference/forms/types/password.html

  -
    question: |
      What is the purpose of the `POST_SUBMIT` event listener in a Symfony form?
    answers:
      -
        value: >
          To modify the form data before it is submitted.
        correct: false
      -
        value: >
          To perform actions after the form has been submitted and validated, such as persisting data.
        correct: true
      -
        value: >
          To pre-populate the form with initial data.
        correct: false
      -
        value: >
          To add dynamic fields to the form based on user input.
        correct: false
    help: |
      The `POST_SUBMIT` event is triggered after the form has been submitted and validated, making it a suitable place to perform operations like saving data to a database.
      https://symfony.com/doc/current/form/events.html#post_submit

  -
    question: |
      Which built-in form type is used for a single-line text input that is specifically for a search query?
    answers:
      -
        value: >
          `TextType`
        correct: false
      -
        value: >
          `SearchType`
        correct: true
      -
        value: >
          `QueryType`
        correct: false
      -
        value: >
          `StringType`
        correct: false
    help: |
      `SearchType` is used for search input fields, rendering as an HTML `type="search"` input.
      https://symfony.com/doc/current/reference/forms/types/search.html

  -
    question: |
      How can you pass HTML attributes (e.g., `id`, `class`) to the opening `<form>` tag when rendering it with `form_start()`?
    answers:
      -
        value: >
          `{{ form_start(form, {'id': 'my_form_id', 'class': 'my-form-class'}) }}`
        correct: false
      -
        value: >
          `{{ form_start(form, {'attr': {'id': 'my_form_id', 'class': 'my-form-class'}}) }}`
        correct: true
      -
        value: >
          `{{ form_start(form).setAttr({'id': 'my_form_id', 'class': 'my-form-class'}) }}`
        correct: false
      -
        value: >
          `{{ form_start(form, {'options': {'id': 'my_form_id', 'class': 'my-form-class'}}) }}`
        correct: false
    help: |
      HTML attributes for the `<form>` tag itself are passed via the `attr` option within the second argument of `form_start()`.
      https://symfony.com/doc/current/form/form_customization.html#form-rendering-functions

  -
    question: |
      Which of the following built-in form types is used to create a hidden input field?
    answers:
      -
        value: >
          `InvisibleType`
        correct: false
      -
        value: >
          `HiddenType`
        correct: true
      -
        value: >
          `SecretType`
        correct: false
      -
        value: >
          `InvisibleInputType`
        correct: false
    help: |
      `HiddenType` is used for hidden input fields, rendering as an HTML `type="hidden"` input.
      https://symfony.com/doc/current/reference/forms/types/hidden.html

  -
    question: |
      What is the purpose of the `by_reference` option in `CollectionType`?
    answers:
      -
        value: >
          To specify if the collection should be passed by value or by reference to the form.
        correct: true
      -
        value: >
          To indicate if the collection items should be stored in a database relation.
        correct: false
      -
        value: >
          To control whether new items can be added to the collection.
        correct: false
      -
        value: >
          To define the sorting order of the collection items.
        correct: false
    help: |
      The `by_reference` option controls whether the form modifies the collection directly (by reference) or through its setter method (by value). For Doctrine collections, it's often set to `false`.
      https://symfony.com/doc/current/reference/forms/types/collection.html#by-reference

  -
    question: |
      You want to add a `color` input field to your form. Which built-in form type should you use?
    answers:
      -
        value: >
          `TextType`
        correct: false
      -
        value: >
          `ColorPickerType`
        correct: false
      -
        value: >
          `ColorType`
        correct: true
      -
        value: >
          `HexColorType`
        correct: false
    help: |
      `ColorType` is used for color input fields, rendering as an HTML `type="color"` input.
      https://symfony.com/doc/current/reference/forms/types/color.html

  -
    question: |
      What is the primary function of the `data_collector.forms` service in Symfony's Web Profiler?
    answers:
      -
        value: >
          To automatically submit forms in the profiler.
        correct: false
      -
        value: >
          To collect and display information about forms, their data, and validation errors during development.
        correct: true
      -
        value: >
          To generate form definitions from database schemas.
        correct: false
      -
        value: >
          To provide a visual form builder interface.
        correct: false
    help: |
      The forms data collector in the Web Profiler helps debug forms by showing submitted data, validation errors, and form structure.
      https://symfony.com/doc/current/profiler/data_collectors.html#forms

  -
    question: |
      Which of the following built-in form types is used to create a file upload field?
    answers:
      -
        value: >
          `InputFileType`
        correct: false
      -
        value: >
          `AttachmentType`
        correct: false
      -
        value: >
          `FileType`
        correct: true
      -
        value: >
          `UploadType`
        correct: false
    help: |
      `FileType` is the standard form type for handling file uploads.
      https://symfony.com/doc/current/reference/forms/types/file.html

  -
    question: |
      What is the purpose of the `allow_add` option in `CollectionType`?
    answers:
      -
        value: >
          To allow adding new entries to the collection dynamically on the client-side.
        correct: true
      -
        value: >
          To enable adding new fields to the form type.
        correct: false
      -
        value: >
          To permit adding new validation constraints to the collection.
        correct: false
      -
        value: >
          To allow the form to be submitted even if the collection is empty.
        correct: false
    help: |
      When `allow_add` is set to `true`, the `CollectionType` will allow new entries to be added to the collection when the form is submitted, typically used with JavaScript for dynamic forms.
      https://symfony.com/doc/current/reference/forms/types/collection.html#allow-add

  -
    question: |
      Which of the following built-in form types is used to create a range input field (slider)?
    answers:
      -
        value: >
          `NumberType`
        correct: false
      -
        value: >
          `SliderType`
        correct: false
      -
        value: >
          `RangeType`
        correct: true
      -
        value: >
          `ScaleType`
        correct: false
    help: |
      `RangeType` is used for range input fields, rendering as an HTML `type="range"` input.
      https://symfony.com/doc/current/reference/forms/types/range.html

  -
    question: |
      What is the purpose of the `allow_delete` option in `CollectionType`?
    answers:
      -
        value: >
          To allow deleting existing entries from the collection dynamically on the client-side.
        correct: true
      -
        value: >
          To enable deleting form fields from the form type.
        correct: false
      -
        value: >
          To permit deleting validation constraints from the collection.
        correct: false
      -
        value: >
          To allow the form to be submitted even if some collection items are removed.
        correct: false
    help: |
      When `allow_delete` is set to `true`, the `CollectionType` will allow existing entries to be removed from the collection when the form is submitted, typically used with JavaScript for dynamic forms.
      https://symfony.com/doc/current/reference/forms/types/collection.html#allow-delete

  -
    question: |
      You want to add a `tel` (telephone number) input field to your form. Which built-in form type should you use?
    answers:
      -
        value: >
          `TextType`
        correct: false
      -
        value: >
          `PhoneType`
        correct: false
      -
        value: >
          `TelType`
        correct: true
      -
        value: >
          `ContactType`
        correct: false
    help: |
      `TelType` is used for telephone number input fields, rendering as an HTML `type="tel"` input.
      https://symfony.com/doc/current/reference/forms/types/tel.html

  -
    question: |
      What is the role of the `data` option when defining a form field (e.g., `->add('task', TextType::class, ['data' => 'Default task']);`)?
    answers:
      -
        value: >
          To set the initial value of the form field, overriding any data from the bound object.
        correct: true
      -
        value: >
          To define the data type for the field's input.
        correct: false
      -
        value: >
          To specify the validation constraints for the field.
        correct: false
      -
        value: >
          To map the field to a specific property on the data object.
        correct: false
    help: |
      The `data` option sets the initial value of a form field, explicitly overriding any value that would normally be read from the underlying data object.
      https://symfony.com/doc/current/reference/forms/types/form.html#data

  -
    question: |
      Which of the following built-in form types is used to create a date and time input field?
    answers:
      -
        value: >
          `DateType`
        correct: false
      -
        value: >
          `TimeType`
        correct: false
      -
        value: >
          `DateTimeType`
        correct: true
      -
        value: >
          `TimestampType`
        correct: false
    help: |
      `DateTimeType` is used for input fields that capture both date and time information.
      https://symfony.com/doc/current/reference/forms/types/datetime.html

  -
    question: |
      What is the purpose of the `empty_data` option in a form field?
    answers:
      -
        value: >
          To define the value that will be used if the field is submitted empty.
        correct: true
      -
        value: >
          To specify the default placeholder text for the field.
        correct: false
      -
        value: >
          To indicate that the field is optional.
        correct: false
      -
        value: >
          To set the data type for an empty field.
        correct: false
    help: |
      The `empty_data` option allows you to specify the value that will be returned by `getData()` for that field if the submitted value is empty.
      https://symfony.com/doc/current/reference/forms/types/form.html#empty-data

  -
    question: |
      Which of the following built-in form types is used to create a simple button (not necessarily a submit button)?
    answers:
      -
        value: >
          `SubmitType`
        correct: false
      -
        value: >
          `ButtonType`
        correct: true
      -
        value: >
          `ResetType`
        correct: false
      -
        value: >
          `ClickType`
        correct: false
    help: |
      `ButtonType` renders a basic HTML `<button>` element that does not automatically submit the form.
      https://symfony.com/doc/current/reference/forms/types/button.html

  -
    question: |
      What is the purpose of the `error_bubbling` option in a form field?
    answers:
      -
        value: >
          To display validation errors at the top of the form.
        correct: false
      -
        value: >
          To make validation errors "bubble up" from child fields to their parent form.
        correct: true
      -
        value: >
          To prevent validation errors from being displayed.
        correct: false
      -
        value: >
          To group validation errors by field.
        correct: false
    help: |
      When `error_bubbling` is `true`, any errors for that field will "bubble up" and be displayed on the parent form (or the root form if it continues bubbling).
      https://symfony.com/doc/current/reference/forms/types/form.html#error-bubbling

  -
    question: |
      Which of the following built-in form types is used to create a single checkbox?
    answers:
      -
        value: >
          `BooleanType`
        correct: false
      -
        value: >
          `ChoiceType` with `multiple => false`
        correct: false
      -
        value: >
          `CheckboxType`
        correct: true
      -
        value: >
          `ToggleType`
        correct: false
    help: |
      `CheckboxType` is specifically for rendering a single checkbox.
      https://symfony.com/doc/current/reference/forms/types/checkbox.html

  -
    question: |
      What is the purpose of the `compound` option in a form type?
    answers:
      -
        value: >
          To indicate that the form type is composed of multiple fields.
        correct: true
      -
        value: >
          To specify that the form should use a compound data transformer.
        correct: false
      -
        value: >
          To enable client-side validation for the form.
        correct: false
      -
        value: >
          To define a custom data mapping for the form.
        correct: false
    help: |
      The `compound` option (defaulting to `true` for form types that add children) indicates that the form type is a "compound" form, meaning it's composed of multiple child fields.
      https://symfony.com/doc/current/reference/forms/types/form.html#compound

  -
    question: |
      When creating a custom form type, how can you ensure that it can be used to edit an existing entity (e.g., `Product` entity)?
    answers:
      -
        value: >
          By setting the `data_class` option to `Product::class` in `configureOptions()`.
        correct: true
      -
        value: >
          By passing the `Product` object as the first argument to `buildForm()`.
        correct: false
      -
        value: >
          By implementing `ProductAwareInterface` in the form type.
        correct: false
      -
        value: >
          By using `EntityType` as the base type for the form.
        correct: false
    help: |
      Setting the `data_class` option in `configureOptions()` tells Symfony to map the form's data to an instance of the specified class.
      https://symfony.com/doc/current/forms.html#the-configureoptions-method

  -
    question: |
      Which of the following built-in form types is used to create a date input field without time?
    answers:
      -
        value: >
          `DateTimeType`
        correct: false
      -
        value: >
          `DateType`
        correct: true
      -
        value: >
          `CalendarType`
        correct: false
      -
        value: >
          `TimeType`
        correct: false
    help: |
      `DateType` is used for input fields that capture only date information.
      https://symfony.com/doc/current/reference/forms/types/date.html

  -
    question: |
      What is the purpose of the `inherit_data` option in a form type?
    answers:
      -
        value: >
          To inherit validation constraints from the parent form.
        correct: false
      -
        value: >
          To make the form type inherit data from its parent form, rather than having its own data object.
        correct: true
      -
        value: >
          To inherit Twig themes from the parent form.
        correct: false
      -
        value: >
          To inherit options from the parent form type.
        correct: false
    help: |
      When `inherit_data` is `true`, the form type will use the same data object as its parent form, which is useful for creating forms that represent a subset of a larger data object.
      https://symfony.com/doc/current/reference/forms/types/form.html#inherit-data

  -
    question: |
      Which of the following built-in form types is used to create a time input field?
    answers:
      -
        value: >
          `DateType`
        correct: false
      -
        value: >
          `DateTimeType`
        correct: false
      -
        value: >
          `TimeType`
        correct: true
      -
        value: >
          `ClockType`
        correct: false
    help: |
      `TimeType` is used for input fields that capture only time information.
      https://symfony.com/doc/current/reference/forms/types/time.html

  -
    question: |
      What is the purpose of the `property_path` option in a form field?
    answers:
      -
        value: >
          To specify the HTML `name` attribute of the form field.
        correct: false
      -
        value: >
          To define the path to the property on the underlying data object that the field should map to.
        correct: true
      -
        value: >
          To set the validation group for the field.
        correct: false
      -
        value: >
          To specify the Twig template path for rendering the field.
        correct: false
    help: |
      The `property_path` option allows you to explicitly define which property on the underlying data object a form field should map to, overriding the default behavior.
      https://symfony.com/doc/current/reference/forms/types/form.html#property-path

  -
    question: |
      Which of the following built-in form types is used to create a file input field that allows multiple file selections?
    answers:
      -
        value: >
          `FileType` with `multiple => true`
        correct: true
      -
        value: >
          `CollectionType` with `FileType`
        correct: false
      -
        value: >
          `MultiFileType`
        correct: false
      -
        value: >
          `ArrayFileType`
        correct: false
    help: |
      The `FileType` supports multiple file uploads by setting the `multiple` option to `true`.
      https://symfony.com/doc/current/reference/forms/types/file.html#multiple

  -
    question: |
      What is the purpose of the `validation_groups` option in a form?
    answers:
      -
        value: >
          To group form fields for rendering purposes.
        correct: false
      -
        value: >
          To specify which validation groups should be applied when the form is validated.
        correct: true
      -
        value: >
          To group form events for listeners.
        correct: false
      -
        value: >
          To define a set of default values for the form.
        correct: false
    help: |
      The `validation_groups` option allows you to control which validation groups are active when the form is submitted and validated, enabling conditional validation.
      https://symfony.com/doc/current/forms.html#validation-groups

  -
    question: |
      Which of the following built-in form types is used to create a URL input field?
    answers:
      -
        value: >
          `TextType`
        correct: false
      -
        value: >
          `LinkType`
        correct: false
      -
        value: >
          `UrlType`
        correct: true
      -
        value: >
          `UriType`
        correct: false
    help: |
      `UrlType` is specifically designed for URL input fields, rendering as an HTML `type="url"` input.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: |
      What is the purpose of the `label` option in a form field?
    answers:
      -
        value: >
          To define the HTML `id` attribute for the label.
        correct: false
      -
        value: >
          To set the text displayed for the field's label.
        correct: true
      -
        value: >
          To specify the CSS class for the label.
        correct: false
      -
        value: >
          To link the label to a specific translation domain.
        correct: false
    help: |
      The `label` option allows you to set the human-readable text that will be displayed as the label for the form field.
      https://symfony.com/doc/current/reference/forms/types/form.html#label

  -
    question: |
      Which of the following built-in form types is used to create a search input field?
    answers:
      -
        value: >
          `TextType`
        correct: false
      -
        value: >
          `QueryType`
        correct: false
      -
        value: >
          `SearchType`
        correct: true
      -
        value: >
          `FindType`
        correct: false
    help: |
      `SearchType` is used for search input fields, rendering as an HTML `type="search"` input.
      https://symfony.com/doc/current/reference/forms/types/search.html

  -
    question: |
      What is the purpose of the `required` option in a form field?
    answers:
      -
        value: >
          To indicate that the field must be present in the submitted data.
        correct: true
      -
        value: >
          To add a `*` next to the label in the Twig template.
        correct: false
      -
        value: >
          To ensure the field has a default value.
        correct: false
      -
        value: >
          To make the field read-only.
        correct: false
    help: |
      The `required` option (defaulting to `true`) indicates whether the form field is required to be submitted with a non-empty value. This also affects HTML5 `required` attribute.
      https://symfony.com/doc/current/reference/forms/types/form.html#required

  -
    question: |
      Which of the following built-in form types is used to create a telephone number input field?
    answers:
      -
        value: >
          `TextType`
        correct: false
      -
        value: >
          `PhoneType`
        correct: false
      -
        value: >
          `TelType`
        correct: true
      -
        value: >
          `ContactType`
        correct: false
    help: |
      `TelType` is used for telephone number input fields, rendering as an HTML `type="tel"` input.
      https://symfony.com/doc/current/reference/forms/types/tel.html

  -
    question: |
      What is the purpose of the `disabled` option in a form field?
    answers:
      -
        value: >
          To prevent the field from being rendered.
        correct: false
      -
        value: >
          To make the field read-only and prevent user interaction.
        correct: true
      -
        value: >
          To disable validation for the field.
        correct: false
      -
        value: >
          To hide the field from the user.
        correct: false
    help: |
      When `disabled` is `true`, the form field will be rendered with the HTML `disabled` attribute, preventing user interaction and excluding its value from submission.
      https://symfony.com/doc/current/reference/forms/types/form.html#disabled

  -
    question: |
      Which of the following built-in form types is used to create a week input field?
    answers:
      -
        value: >
          `DateType`
        correct: false
      -
        value: >
          `WeekType`
        correct: true
      -
        value: >
          `CalendarType`
        correct: false
      -
        value: >
          `MonthType`
        correct: false
    help: |
      `WeekType` is used for week input fields, rendering as an HTML `type="week"` input.
      https://symfony.com/doc/current/reference/forms/types/week.html

  -
    question: |
      What is the purpose of the `attr` option in a form field?
    answers:
      -
        value: >
          To define the HTML attributes for the field's label.
        correct: false
      -
        value: >
          To specify arbitrary HTML attributes (e.g., `class`, `placeholder`) to be applied to the field's widget.
        correct: true
      -
        value: >
          To set the validation attributes for the field.
        correct: false
      -
        value: >
          To define the data attributes for the field.
        correct: false
    help: |
      The `attr` option is an array that allows you to pass arbitrary HTML attributes directly to the rendered HTML input element (widget) of the form field.
      https://symfony.com/doc/current/reference/forms/types/form.html#attr

  -
    question: |
      Which of the following built-in form types is used to create a month input field?
    answers:
      -
        value: >
          `DateType`
        correct: false
      -
        value: >
          `MonthType`
        correct: true
      -
        value: >
          `CalendarType`
        correct: false
      -
        value: >
          `YearType`
        correct: false
    help: |
      `MonthType` is used for month input fields, rendering as an HTML `type="month"` input.
      https://symfony.com/doc/current/reference/forms/types/month.html

  -
    question: |
      What is the purpose of the `help` option in a form field?
    answers:
      -
        value: >
          To provide a tooltip for the field.
        correct: false
      -
        value: >
          To display additional descriptive text or instructions below the field's widget.
        correct: true
      -
        value: >
          To link to external documentation for the field.
        correct: false
      -
        value: >
          To define the validation error message for the field.
        correct: false
    help: |
      The `help` option allows you to add a small piece of descriptive text or instructions that will be rendered below the form field's widget.
      https://symfony.com/doc/current/reference/forms/types/form.html#help

  -
    question: |
      Which of the following built-in form types is used to create a datetime-local input field?
    answers:
      -
        value: >
          `DateTimeType`
        correct: false
      -
        value: >
          `DateType`
        correct: false
      -
        value: >
          `TimeType`
        correct: false
      -
        value: >
          `DateTimeLocalType`
        correct: true
    help: |
      `DateTimeLocalType` is used for datetime-local input fields, rendering as an HTML `type="datetime-local"` input.
      https://symfony.com/doc/current/reference/forms/types/datetime_local.html

  -
    question: |
      What is the purpose of the `placeholder` option in a form field?
    answers:
      -
        value: >
          To define the default value of the field.
        correct: false
      -
        value: >
          To display a short hint in the input field before the user enters a value.
        correct: true
      -
        value: >
          To set the label for the field.
        correct: false
      -
        value: >
          To provide a fallback value if the field is empty.
        correct: false
    help: |
      The `placeholder` option sets the `placeholder` HTML attribute, which displays a short hint in the input field when it is empty and not focused.
      https://symfony.com/doc/current/reference/forms/types/form.html#placeholder

  -
    question: |
      Which of the following built-in form types is used to create a search input field?
    answers:
      -
        value: >
          `TextType`
        correct: false
      -
        value: >
          `QueryType`
        correct: false
      -
        value: >
          `SearchType`
        correct: true
      -
        value: >
          `FindType`
        correct: false
    help: |
      `SearchType` is used for search input fields, rendering as an HTML `type="search"` input.
      https://symfony.com/doc/current/reference/forms/types/search.html

  -
    question: |
      What is the purpose of the `row_attr` option in a form field?
    answers:
      -
        value: >
          To specify HTML attributes for the field's widget.
        correct: false
      -
        value: >
          To specify HTML attributes for the `div` element that wraps the field's label, widget, and errors when using `form_row()`.
        correct: true
      -
        value: >
          To define attributes for the form's entire row.
        correct: false
      -
        value: >
          To set attributes for the field's label.
        correct: false
    help: |
      The `row_attr` option allows you to pass HTML attributes to the wrapper element (typically a `div`) that `form_row()` generates for the field.
      https://symfony.com/doc/current/reference/forms/types/form.html#row-attr

  -
    question: |
      Which of the following built-in form types is used to create a `textarea` input field?
    answers:
      -
        value: >
          `TextType`
        correct: false
      -
        value: >
          `LongTextType`
        correct: false
      -
        value: >
          `TextareaType`
        correct: true
      -
        value: >
          `MultilineTextType`
        correct: false
    help: |
      `TextareaType` is specifically designed for multi-line text input fields, rendering as an HTML `<textarea>` element.
      https://symfony.com/doc/current/reference/forms/types/textarea.html

  -
    question: |
      What is the purpose of the `label_attr` option in a form field?
    answers:
      -
        value: >
          To specify HTML attributes for the field's widget.
        correct: false
      -
        value: >
          To specify HTML attributes for the field's label.
        correct: true
      -
        value: >
          To define attributes for the form's entire row.
        correct: false
      -
        value: >
          To set attributes for the field's help text.
        correct: false
    help: |
      The `label_attr` option allows you to pass HTML attributes directly to the rendered HTML `<label>` element of the form field.
      https://symfony.com/doc/current/reference/forms/types/form.html#label-attr

  -
    question: |
      Which of the following built-in form types is used to create a `color` input field?
    answers:
      -
        value: >
          `TextType`
        correct: false
      -
        value: >
          `ColorPickerType`
        correct: false
      -
        value: >
          `ColorType`
        correct: true
      -
        value: >
          `HexColorType`
        correct: false
    help: |
      `ColorType` is used for color input fields, rendering as an HTML `type="color"` input.
      https://symfony.com/doc/current/reference/forms/types/color.html

  -
    question: |
      What is the purpose of the `help_attr` option in a form field?
    answers:
      -
        value: >
          To specify HTML attributes for the field's label.
        correct: false
      -
        value: >
          To specify HTML attributes for the field's widget.
        correct: false
      -
        value: >
          To specify HTML attributes for the field's help text.
        correct: true
      -
        value: >
          To define attributes for the form's entire row.
        correct: false
    help: |
      The `help_attr` option allows you to pass HTML attributes directly to the rendered HTML element that contains the field's help text.
      https://symfony.com/doc/current/reference/forms/types/form.html#help-attr

  -
    question: |
      Which of the following built-in form types is used to create a `range` input field (slider)?
    answers:
      -
        value: >
          `NumberType`
        correct: false
      -
        value: >
          `SliderType`
        correct: false
      -
        value: >
          `RangeType`
        correct: true
      -
        value: >
          `ScaleType`
        correct: false
    help: |
      `RangeType` is used for range input fields, rendering as an HTML `type="range"` input.
      https://symfony.com/doc/current/reference/forms/types/range.html

  -
    question: |
      What is the purpose of the `html5` option in `DateType` or `DateTimeType`?
    answers:
      -
        value: >
          To enable client-side validation for the date/time input.
        correct: false
      -
        value: >
          To render the field using HTML5 input types (e.g., `type="date"`, `type="datetime-local"`).
        correct: true
      -
        value: >
          To ensure the date/time format is compatible with HTML5 standards.
        correct: false
      -
        value: >
          To use a JavaScript date picker instead of native browser controls.
        correct: false
    help: |
      When `html5` is `true` (default), `DateType` and `DateTimeType` will render HTML5 input types, leveraging native browser date/time pickers.
      https://symfony.com/doc/current/reference/forms/types/date.html#html5
      https://symfony.com/doc/current/reference/forms/types/datetime.html#html5

  -
    question: |
      Which of the following built-in form types is used to create a `week` input field?
    answers:
      -
        value: >
          `DateType`
        correct: false
      -
        value: >
          `WeekType`
        correct: true
      -
        value: >
          `CalendarType`
        correct: false
      -
        value: >
          `MonthType`
        correct: false
    help: |
      `WeekType` is used for week input fields, rendering as an HTML `type="week"` input.
      https://symfony.com/doc/current/reference/forms/types/week.html

  -
    question: |
      What is the purpose of the `widget` option in `DateType` or `DateTimeType`?
    answers:
      -
        value: >
          To specify the HTML input type (e.g., `single_text`, `choice`, `text`).
        correct: true
      -
        value: >
          To define the JavaScript widget used for the date/time picker.
        correct: false
      -
        value: >
          To set the default value for the date/time field.
        correct: false
      -
        value: >
          To control the format of the displayed date/time.
        correct: false
    help: |
      The `widget` option determines how the date/time field is rendered (e.g., as a single text input, a series of select boxes, or text inputs).
      https://symfony.com/doc/current/reference/forms/types/date.html#widget
      https://symfony.com/doc/current/reference/forms/types/datetime.html#widget

  -
    question: |
      Which of the following built-in form types is used to create a `month` input field?
    answers:
      -
        value: >
          `DateType`
        correct: false
      -
        value: >
          `MonthType`
        correct: true
      -
        value: >
          `CalendarType`
        correct: false
      -
        value: >
          `YearType`
        correct: false
    help: |
      `MonthType` is used for month input fields, rendering as an HTML `type="month"` input.
      https://symfony.com/doc/current/reference/forms/types/month.html

  -
    question: |
      What is the purpose of the `format` option in `DateType` or `DateTimeType`?
    answers:
      -
        value: >
          To define the display format of the date/time in the HTML input.
        correct: true
      -
        value: >
          To specify the internal data format used by the form.
        correct: false
      -
        value: >
          To set the validation format for the date/time.
        correct: false
      -
        value: >
          To determine the format for saving the date/time to the database.
        correct: false
    help: |
      The `format` option controls the string format used for displaying and parsing the date/time value when the `widget` option is set to `single_text`.
      https://symfony.com/doc/current/reference/forms/types/date.html#format
      https://symfony.com/doc/current/reference/forms/types/datetime.html#format

  -
    question: |
      Which of the following built-in form types is used to create a `datetime-local` input field?
    answers:
      -
        value: >
          `DateTimeType`
        correct: false
      -
        value: >
          `DateType`
        correct: false
      -
        value: >
          `TimeType`
        correct: false
      -
        value: >
          `DateTimeLocalType`
        correct: true
    help: |
      `DateTimeLocalType` is used for datetime-local input fields, rendering as an HTML `type="datetime-local"` input.
      https://symfony.com/doc/current/reference/forms/types/datetime_local.html

  -
    question: |
      What is the purpose of the `input` option in `DateType` or `DateTimeType`?
    answers:
      -
        value: >
          To specify the format of the data that the form expects from the underlying object (e.g., `string`, `datetime_immutable`).
        correct: true
      -
        value: >
          To define the HTML input type (e.g., `text`, `date`).
        correct: false
      -
        value: >
          To control whether the input field is enabled or disabled.
        correct: false
      -
        value: >
          To set the default value for the input.
        correct: false
    help: |
      The `input` option defines the format in which the date/time data is expected from the underlying object (e.g., `string`, `datetime`, `datetime_immutable`, `timestamp`).
      https://symfony.com/doc/current/reference/forms/types/date.html#input
      https://symfony.com/doc/current/reference/forms/types/datetime.html#input

  -
    question: |
      Which of the following built-in form types is used to create a `url` input field?
    answers:
      -
        value: >
          `TextType`
        correct: false
      -
        value: >
          `LinkType`
        correct: false
      -
        value: >
          `UrlType`
        correct: true
      -
        value: >
          `UriType`
        correct: false
    help: |
      `UrlType` is specifically designed for URL input fields, rendering as an HTML `type="url"` input.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: |
      What is the purpose of the `model_timezone` and `view_timezone` options in `DateTimeType`?
    answers:
      -
        value: >
          To define the timezone for the underlying data object and the timezone for displaying the date/time in the form, respectively.
        correct: true
      -
        value: >
          To set the server's default timezone and the user's local timezone.
        correct: false
      -
        value: >
          To specify the timezone for validation and the timezone for rendering.
        correct: false
      -
        value: >
          To convert the date/time between different timezones automatically.
        correct: false
    help: |
      `model_timezone` defines the timezone of the data in your underlying object, while `view_timezone` defines the timezone in which the data is displayed to the user in the form.
      https://symfony.com/doc/current/reference/forms/types/datetime.html#model-timezone

  -
    question: |
      Which of the following built-in form types is used to create a `number` input field?
    answers:
      -
        value: >
          `IntegerType`
        correct: false
      -
        value: >
          `NumberType`
        correct: true
      -
        value: >
          `NumericType`
        correct: false
      -
        value: >
          `FloatType`
        correct: false
    help: |
      `NumberType` is used for numeric input fields, rendering as an HTML `type="number"` input.
      https://symfony.com/doc/current/reference/forms/types/number.html

  -
    question: |
      What is the purpose of the `choice_label` option in `ChoiceType`?
    answers:
      -
        value: >
          To define the HTML `value` attribute for each choice.
        correct: false
      -
        value: >
          To specify the property or a callable that returns the label for each choice in the dropdown/radio list.
        correct: true
      -
        value: >
          To set the default label for the entire choice field.
        correct: false
      -
        value: >
          To define the translation domain for the choices.
        correct: false
    help: |
      The `choice_label` option is used to determine how each choice in a `ChoiceType` field is displayed to the user. It can be a property path or a callable.
      https://symfony.com/doc/current/reference/forms/types/choice.html#choice-label

  -
    question: |
      Which of the following built-in form types is used to create a `email` input field?
    answers:
      -
        value: >
          `TextType`
        correct: false
      -
        value: >
          `StringType`
        correct: false
      -
        value: >
          `EmailType`
        correct: true
      -
        value: >
          `MailType`
        correct: false
    help: |
      `EmailType` is specifically designed for email input fields, rendering as an HTML `type="email"` input.
      https://symfony.com/doc/current/reference/forms/types/email.html

  -
    question: |
      What is the purpose of the `choices` option in `ChoiceType`?
    answers:
      -
        value: >
          To define the default selected choice.
        correct: false
      -
        value: >
          To provide the list of available options for the dropdown, radio buttons, or checkboxes.
        correct: true
      -
        value: >
          To specify the data type of the choices.
        correct: false
      -
        value: >
          To enable or disable multiple selections.
        correct: false
    help: |
      The `choices` option is a required array that defines all the available options for a `ChoiceType` field.
      https://symfony.com/doc/current/reference/forms/types/choice.html#choices

  -
    question: |
      Which of the following built-in form types is used to create a `hidden` input field?
    answers:
      -
        value: >
          `InvisibleType`
        correct: false
      -
        value: >
          `HiddenType`
        correct: true
      -
        value: >
          `SecretType`
        correct: false
      -
        value: >
          `InvisibleInputType`
        correct: false
    help: |
      `HiddenType` is used for hidden input fields, rendering as an HTML `type="hidden"` input.
      https://symfony.com/doc/current/reference/forms/types/hidden.html

  -
    question: |
      What is the purpose of the `multiple` option in `ChoiceType`?
    answers:
      -
        value: >
          To allow the user to select multiple options from the list.
        correct: true
      -
        value: >
          To display the choices as multiple columns.
        correct: false
      -
        value: >
          To enable multiple choice questions.
        correct: false
      -
        value: >
          To allow the form to be submitted multiple times.
        correct: false
    help: |
      When `multiple` is `true`, the `ChoiceType` will render a select box that allows multiple selections or a series of checkboxes.
      https://symfony.com/doc/current/reference/forms/types/choice.html#multiple

  -
    question: |
      Which of the following built-in form types is used to create a `password` input field?
    answers:
      -
        value: >
          `TextType`
        correct: false
      -
        value: >
          `SecretType`
        correct: false
      -
        value: >
          `PasswordType`
        correct: true
      -
        value: >
          `HiddenType`
        correct: false
    help: |
      `PasswordType` is used for password input fields, rendering as an HTML `type="password"` input.
      https://symfony.com/doc/current/reference/forms/types/password.html

  -
    question: |
      What is the purpose of the `expanded` option in `ChoiceType`?
    answers:
      -
        value: >
          To expand the dropdown list by default.
        correct: false
      -
        value: >
          To render the choices as radio buttons or checkboxes instead of a select dropdown.
        correct: true
      -
        value: >
          To expand the size of the input field.
        correct: false
      -
        value: >
          To show additional information for each choice.
        correct: false
    help: |
      When `expanded` is `true`, `ChoiceType` will render the choices as radio buttons (if `multiple` is `false`) or checkboxes (if `multiple` is `true`). If `false`, it renders a select dropdown.
      https://symfony.com/doc/current/reference/forms/types/choice.html#expanded

  -
    question: |
      Which of the following built-in form types is used to create a `RepeatedType` field, typically for password confirmation?
    answers:
      -
        value: >
          `PasswordType`
        correct: false
      -
        value: >
          `ConfirmType`
        correct: false
      -
        value: >
          `RepeatedType`
        correct: true
      -
        value: >
          `DoubleEntryType`
        correct: false
    help: |
      `RepeatedType` is used to render two fields that must have the same value, commonly used for password confirmation.
      https://symfony.com/doc/current/reference/forms/types/repeated.html

  -
    question: |
      What is the purpose of the `first_options` and `second_options` in `RepeatedType`?
    answers:
      -
        value: >
          To define options for the first and second fields of the repeated type, respectively.
        correct: true
      -
        value: >
          To set the default values for the first and second fields.
        correct: false
      -
        value: >
          To specify the validation constraints for each field.
        correct: false
      -
        value: >
          To control the order of the fields.
        correct: false
    help: |
      `first_options` and `second_options` allow you to pass specific options to the individual underlying form fields of the `RepeatedType`.
      https://symfony.com/doc/current/reference/forms/types/repeated.html#first-options

  -
    question: |
      Which of the following built-in form types is used to create a `submit` button?
    answers:
      -
        value: >
          `ButtonType`
        correct: false
      -
        value: >
          `SubmitType`
        correct: true
      -
        value: >
          `FormButtonType`
        correct: false
      -
        value: >
          `ActionType`
        correct: false
    help: |
      `SubmitType` creates a submit button for the form.
      https://symfony.com/doc/current/reference/forms/types/submit.html

  -
    question: |
      What is the purpose of the `type` option in `RepeatedType`?
    answers:
      -
        value: >
          To specify the base form type to be used for the repeated fields (e.g., `PasswordType`, `EmailType`).
        correct: true
      -
        value: >
          To define the data type of the repeated value.
        correct: false
      -
        value: >
          To set the HTML `type` attribute for the input fields.
        correct: false
      -
        value: >
          To indicate whether the fields are required.
        correct: false
    help: |
      The `type` option in `RepeatedType` specifies the underlying form type that will be used for both the first and second fields (e.g., `PasswordType::class` for password confirmation).
      https://symfony.com/doc/current/reference/forms/types/repeated.html#type

  -
    question: |
      Which of the following built-in form types is used to create a `reset` button?
    answers:
      -
        value: >
          `ButtonType`
        correct: false
      -
        value: >
          `SubmitType`
        correct: false
      -
        value: >
          `ResetType`
        correct: true
      -
        value: >
          `ClearType`
        correct: false
    help: |
      `ResetType` creates a reset button for the form, which clears all form fields.
      https://symfony.com/doc/current/reference/forms/types/reset.html

  -
    question: |
      What is the purpose of the `error_mapping` option in a form type?
    answers:
      -
        value: >
          To map validation errors from one field to another.
        correct: true
      -
        value: >
          To define custom error messages for validation.
        correct: false
      -
        value: >
          To specify the Twig template for rendering errors.
        correct: false
      -
        value: >
          To group validation errors by type.
        correct: false
    help: |
      The `error_mapping` option allows you to remap validation errors from one form field to another, or from a property path to a form field.
      https://symfony.com/doc/current/reference/forms/types/form.html#error-mapping

  -
    question: >
      What is the purpose of the `translation_domain` option in a form field?
    answers:
      -
        value: >
          To specify the domain for translating the field's label and help text.
        correct: true
      -
        value: >
          To define the language of the form.
        correct: false
      -
        value: >
          To enable or disable translation for the form.
        correct: false
      -
        value: >
          To provide a fallback translation for the field.
        correct: false
    help: |
      The `translation_domain` option specifies the message domain to use when translating the field's label, help text, and error messages.
      https://symfony.com/doc/current/reference/forms/types/form.html#translation-domain

  -
    question: |
      Which of the following built-in form types is used to create a `button` (not necessarily a submit or reset button)?
    answers:
      -
        value: >
          `SubmitType`
        correct: false
      -
        value: >
          `ButtonType`
        correct: true
      -
        value: >
          `ResetType`
        correct: false
      -
        value: >
          `ClickType`
        correct: false
    help: |
      `ButtonType` renders a basic HTML `<button>` element that does not automatically submit the form.
      https://symfony.com/doc/current/reference/forms/types/button.html

  -
    question: |
      What is the purpose of the `block_prefix` option in a form type?
    answers:
      -
        value: >
          To define the HTML `id` prefix for all fields in the form type.
        correct: false
      -
        value: >
          To specify a custom prefix for the Twig block names used when theming the form type.
        correct: true
      -
        value: >
          To set the prefix for the form field names in the HTML.
        correct: false
      -
        value: >
          To define a unique identifier for the form type.
        correct: false
    help: |
      The `block_prefix` option allows you to override the default block prefix used for Twig form themes, giving you more control over naming conventions in your custom themes.
      https://symfony.com/doc/current/reference/forms/types/form.html#block-prefix

  -
    question: |
      Which of the following built-in form types is used to create a `file` upload field?
    answers:
      -
        value: >
          `InputFileType`
        correct: false
      -
        value: >
          `AttachmentType`
        correct: false
      -
        value: >
          `FileType`
        correct: true
      -
        value: >
          `UploadType`
        correct: false
    help: |
      `FileType` is the standard form type for handling file uploads.
      https://symfony.com/doc/current/reference/forms/types/file.html

  -
    question: |
      What is the purpose of the `constraints` option when adding a field to a form builder?
    answers:
      -
        value: >
          To define the HTML attributes for the field.
        correct: false
      -
        value: >
          To specify the validation rules that apply to the field's submitted data.
        correct: true
      -
        value: >
          To set the default value for the field.
        correct: false
      -
        value: >
          To mark the field as required.
        correct: false
    help: |
      The `constraints` option takes a single constraint object or an array of constraint objects that will be applied to the field's data during validation.
      https://symfony.com/doc/current/forms.html#adding-validation

  -
    question: |
      Which of the following built-in form types is used to create a `text` input field?
    answers:
      -
        value: >
          `StringType`
        correct: false
      -
        value: >
          `TextInputType`
        correct: false
      -
        value: >
          `TextType`
        correct: true
      -
        value: >
          `InputType`
        correct: false
    help: |
      `TextType` is the most common form type for single-line text inputs.
      https://symfony.com/doc/current/reference/forms/types/text.html

  -
    question: |
      What is the purpose of the `mapped` option when defining a form field?
    answers:
      -
        value: >
          To specify if the field should be displayed in the form.
        correct: false
      -
        value: >
          To indicate whether the field's data should be synchronized with the underlying data object.
        correct: true
      -
        value: >
          To define the database column mapping for the field.
        correct: false
      -
        value: >
          To set the validation mapping for the field.
        correct: false
    help: |
      The `mapped` option (defaulting to `true`) controls whether the form field's data is read from and written to the underlying data object.
      https://symfony.com/doc/current/forms.html#unmapped-fields

  -
    question: |
      Which of the following built-in form types is used to create a `choice` field (dropdown, radio, or checkbox list)?
    answers:
      -
        value: >
          `SelectType`
        correct: false
      -
        value: >
          `RadioType`
        correct: false
      -
        value: >
          `ChoiceType`
        correct: true
      -
        value: >
          `OptionType`
        correct: false
    help: |
      `ChoiceType` is a versatile form type used for rendering various types of choice fields, including select dropdowns, radio buttons, and checkboxes, depending on its options.
      https://symfony.com/doc/current/reference/forms/types/choice.html

  -
    question: |
      What is the purpose of the `data_empty_message` option in a form field?
    answers:
      -
        value: >
          To provide a custom message when the field is submitted empty and `required` is true.
        correct: false
      -
        value: >
          To define the default value for the field if it's empty.
        correct: false
      -
        value: >
          To set the error message when the field fails validation due to being empty.
        correct: true
      -
        value: >
          To display a placeholder text when the field is empty.
        correct: false
    help: |
      The `data_empty_message` option allows you to customize the validation error message specifically for when a required field is left empty.
      https://symfony.com/doc/current/reference/forms/types/form.html#data-empty-message

  -
    question: |
      Which of the following built-in form types is used to create a `collection` of embedded forms?
    answers:
      -
        value: >
          `EntityType`
        correct: false
      -
        value: >
          `ArrayType`
        correct: false
      -
        value: >
          `CollectionType`
        correct: true
      -
        value: >
          `ChoiceType`
        correct: false
    help: |
      `CollectionType` is specifically designed to handle collections of data, where each item in the collection is represented by an embedded form.
      https://symfony.com/doc/current/reference/forms/types/collection.htmlcategory: Forms

questions:
  -
    question: >
      Which Symfony command is used to list all available form types, type extensions, and type guessers?
    answers:
      -
        value: >
          `php bin/console debug:form`
        correct: true
      -
        value: >
          `php bin/console form:list`
        correct: false
      -
        value: >
          `php bin/console form:debug`
        correct: false
      -
        value: >
          `php bin/console list:forms`
        correct: false
    help: |
      The `debug:form` command provides detailed information about all registered form types, their options, and any applied type extensions or guessers.
      https://symfony.com/doc/current/forms.html#listing-form-types

  -
    question: |
      Consider the following Twig snippet for rendering a form:

      ```twig
      {{ form(form) }}
      ```

      What is the default HTTP method used when rendering a form this way?
    answers:
      -
        value: >
          `POST`
        correct: true
      -
        value: >
          `GET`
        correct: false
      -
        value: >
          `PUT`
        correct: false
      -
        value: >
          `PATCH`
        correct: false
    help: |
      By default, `form(form)` renders the form with the `POST` method. You can override this by passing options, e.g., `{{ form(form, {'method': 'GET'}) }}`.
      https://symfony.com/doc/current/forms.html#rendering-the-form

  -
    question: >
      What is the primary purpose of the `handleRequest()` method on a Symfony Form instance?
    answers:
      -
        value: >
          To validate the form data against its constraints.
        correct: false
      -
        value: >
          To populate the form with data from the HTTP request.
        correct: true
      -
        value: >
          To render the form in a Twig template.
        correct: false
      -
        value: >
          To retrieve the submitted data from the form.
        correct: false
    help: |
      The `handleRequest()` method inspects the incoming `Request` object and, if the form was submitted, populates the form fields with the submitted data.
      https://symfony.com/doc/current/forms.html#handling-form-submissions

  -
    question: |
      Which of the following methods are essential for defining a custom Symfony Form Type class?
    answers:
      -
        value: >
          `buildForm(FormBuilderInterface $builder, array $options)`
        correct: true
      -
        value: >
          `configureOptions(OptionsResolver $resolver)`
        correct: true
      -
        value: >
          `createFormBuilder()`
        correct: false
      -
        value: >
          `getData()`
        correct: false
      -
        value: >
          `isValid()`
        correct: false
    help: |
      Custom form types extend `AbstractType` and typically implement `buildForm()` to define fields and `configureOptions()` to set default options and data class.
      https://symfony.com/doc/current/forms.html#creating-a-form-class

  -
    question: >
      When creating a form in a Symfony controller, which method is used to instantiate a form based on a dedicated form type class (e.g., `TaskType::class`)?
    answers:
      -
        value: >
          `$this->get('form.factory')->create(TaskType::class, $data);`
        correct: false
      -
        value: >
          `$this->createFormBuilder($data)->add(TaskType::class)->getForm();`
        correct: false
      -
        value: >
          `$this->createForm(TaskType::class, $data);`
        correct: true
      -
        value: >
          `new TaskType($data);`
        correct: false
    help: |
      The `AbstractController::createForm()` method is the standard way to create a form instance from a form type class.
      https://symfony.com/doc/current/forms.html#creating-a-form-class

  -
    question: |
      Given the following form field definition:

      ```php
      $builder->add('agreeTerms', CheckboxType::class, ['mapped' => false]);
      ```

      What is the effect of setting `'mapped' => false`?
    answers:
      -
        value: >
          The field will not be rendered in the Twig template.
        correct: false
      -
        value: >
          The field's data will not be synchronized with the underlying data object.
        correct: true
      -
        value: >
          The field will be read-only.
        correct: false
      -
        value: >
          The field will not be validated.
        correct: false
    help: |
      Setting `'mapped' => false` means the form field does not correspond to a property on the underlying data object. Its value will not be read from or written to the object.
      https://symfony.com/doc/current/forms.html#unmapped-fields

  -
    question: >
      Which Twig helper function should you use to render the HTML `label` for a specific form field?
    answers:
      -
        value: >
          `form_widget()`
        correct: false
      -
        value: >
          `form_row()`
        correct: false
      -
        value: >
          `form_label()`
        correct: true
      -
        value: >
          `form_errors()`
        correct: false
    help: |
      `form_label(form.fieldName)` renders only the `<label>` tag for a form field. `form_row()` renders the label, widget, and errors together.
      https://symfony.com/doc/current/form/form_customization.html#form-rendering-functions

  -
    question: >
      How can you apply a custom Twig form theme to a specific form instance within a template, overriding any global themes?
    answers:
      -
        value: >
          `{% form_theme form 'my_theme.html.twig' %}`
        correct: true
      -
        value: >
          `{{ form(form, {'theme': 'my_theme.html.twig'}) }}`
        correct: false
      -
        value: >
          `{% include 'my_theme.html.twig' with {'form': form} %}`
        correct: false
      -
        value: >
          `{% form_theme 'my_theme.html.twig' for form %}`
        correct: false
    help: |
      The `form_theme` tag is used to apply themes. Placing it before `form_start()` or `form()` in the template applies it to that specific form.
      https://symfony.com/doc/current/form/form_themes.html#applying-themes-to-a-specific-form

  -
    question: >
      Which of the following is the correct way to embed one form type (e.g., `CategoryType`) into another form type (e.g., `TaskType`)?
    answers:
      -
        value: >
          `$builder->add('category', new CategoryType());`
        correct: false
      -
        value: >
          `$builder->add('category', 'App\\Form\\CategoryType');`
        correct: false
      -
        value: >
          `$builder->add('category', CategoryType::class);`
        correct: true
      -
        value: >
          `$builder->add('category', 'category_type');`
        correct: false
    help: |
      To embed a form type, you pass its fully qualified class name (FQCN) using `::class` as the second argument to the `add()` method.
      https://symfony.com/doc/current/form/embedded.html

  -
    question: >
      What is the purpose of the `data_class` option in `configureOptions()` of a form type?
    answers:
      -
        value: >
          To specify the Twig template used for rendering the form.
        correct: false
      -
        value: >
          To define the default data for the form fields.
        correct: false
      -
        value: >
          To link the form type to a specific PHP class (entity or DTO) for data mapping.
        correct: true
      -
        value: >
          To enable or disable CSRF protection for the form.
        correct: false
    help: |
      The `data_class` option tells Symfony which class the form should map its data to. This is crucial for data binding between the form and your application's objects.
      https://symfony.com/doc/current/forms.html#creating-a-form-class

  -
    question: |
      You want to add a validation constraint to a form field directly in the controller using `createFormBuilder`. Which of the following is a valid way to do this?
    answers:
      -
        value: >
          `->add('task', TextType::class, ['validation' => new NotBlank()])`
        correct: false
      -
        value: >
          `->add('task', TextType::class, ['constraints' => new NotBlank()])`
        correct: true
      -
        value: >
          `->add('task', TextType::class)->setConstraint(new NotBlank())`
        correct: false
      -
        value: >
          `->add('task', TextType::class, ['assert' => new NotBlank()])`
        correct: false
    help: |
      Validation constraints are passed to the `constraints` option of a form field. For multiple constraints, an array of constraints can be provided.
      https://symfony.com/doc/current/forms.html#adding-validation

  -
    question: >
      Which of the following Twig functions is the most comprehensive for rendering a form field, including its label, widget, and any errors?
    answers:
      -
        value: >
          `form_widget()`
        correct: false
      -
        value: >
          `form_label()`
        correct: false
      -
        value: >
          `form_errors()`
        correct: false
      -
        value: >
          `form_row()`
        correct: true
    help: |
      `form_row()` is a convenience function that renders the label, errors, and widget for a single field, wrapped in a `div` by default.
      https://symfony.com/doc/current/form/form_customization.html#form-rendering-functions

  -
    question: >
      What is the primary benefit of defining a form using a dedicated form class (e.g., `TaskType.php`) instead of `createFormBuilder()` directly in a controller?
    answers:
      -
        value: >
          It automatically handles form submission and validation.
        correct: false
      -
        value: >
          It promotes reusability and separation of concerns.
        correct: true
      -
        value: >
          It disables CSRF protection by default.
        correct: false
      -
        value: >
          It allows direct database interaction without an ORM.
        correct: false
    help: |
      Dedicated form classes encapsulate the form's structure and logic, making them reusable across different controllers or parts of your application, and improving code organization.
      https://symfony.com/doc/current/forms.html#creating-a-form-class

  -
    question: >
      Which built-in form type is used to manage a collection of embedded forms, such as a list of tags associated with a task?
    answers:
      -
        value: >
          `EntityType`
        correct: false
      -
        value: >
          `ArrayType`
        correct: false
      -
        value: >
          `CollectionType`
        correct: true
      -
        value: >
          `ChoiceType`
        correct: false
    help: |
      `CollectionType` is specifically designed to handle collections of data, where each item in the collection is represented by an embedded form.
      https://symfony.com/doc/current/reference/forms/types/collection.html

  -
    question: |
      You want to pass a custom option, `require_description`, to your `TaskType` form from the controller. How would you do this?
    answers:
      -
        value: >
          `$form = $this->createForm(TaskType::class, $task, ['require_description' => true]);`
        correct: true
      -
        value: >
          `$form = $this->createForm(TaskType::class, $task)->addOption('require_description', true);`
        correct: false
      -
        value: >
          `$form = $this->createForm(TaskType::class, $task, ['options' => ['require_description' => true]]);`
        correct: false
      -
        value: >
          `$form = $this->createForm(TaskType::class, $task)->setOption('require_description', true);`
        correct: false
    help: |
      Custom options are passed as the third argument (an array) to the `createForm()` method. These options are then available in the `buildForm()` method of your form type.
      https://symfony.com/doc/current/forms.html#passing-options-to-a-form-type

  -
    question: >
      By default, is CSRF protection enabled for Symfony forms?
    answers:
      -
        value: >
          No, it must be explicitly enabled.
        correct: false
      -
        value: >
          Yes, for all forms unless explicitly disabled.
        correct: true
      -
        value: >
          Only for forms that are bound to an entity.
        correct: false
      -
        value: >
          Only for forms submitted via POST requests.
        correct: false
    help: |
      Symfony forms have CSRF protection enabled by default. A hidden `_token` field is automatically added to the form.
      https://symfony.com/doc/current/forms.html#csrf-protection

  -
    question: |
      Which Twig helper function is used to render only the HTML input (widget) for a form field?
    answers:
      -
        value: >
          `form_row()`
        correct: false
      -
        value: >
          `form_widget()`
        correct: true
      -
        value: >
          `form_label()`
        correct: false
      -
        value: >
          `form_errors()`
        correct: false
    help: |
      `form_widget(form.fieldName)` renders only the HTML input element for the specified form field.
      https://symfony.com/doc/current/form/form_customization.html#form-rendering-functions

  -
    question: >
      What is the purpose of a "data transformer" in Symfony forms?
    answers:
      -
        value: >
          To convert data between the format used in the underlying object and the format used in the form field.
        correct: true
      -
        value: >
          To transform the Twig template for form rendering.
        correct: false
      -
        value: >
          To encrypt sensitive data before submission.
        correct: false
      -
        value: >
          To validate form data against custom rules.
        correct: false
    help: |
      Data transformers are used to convert data between three representations: the model (your entity/object), the normalized format (what Symfony's form component understands), and the view format (what the user sees in the HTML input).
      https://symfony.com/doc/current/form/data_transformers.html

  -
    question: |
      Which of the following `FormEvents` is triggered *before* the form's data is mapped to the underlying object, allowing you to modify the submitted data?
    answers:
      -
        value: >
          `FormEvents::POST_SUBMIT`
        correct: false
      -
        value: >
          `FormEvents::PRE_SET_DATA`
        correct: false
      -
        value: >
          `FormEvents::PRE_SUBMIT`
        correct: true
      -
        value: >
          `FormEvents::POST_SET_DATA`
        correct: false
    help: |
      `FormEvents::PRE_SUBMIT` is dispatched after the request data has been submitted but before it's mapped to the form's fields and then to the underlying object. This is ideal for modifying submitted data.
      https://symfony.com/doc/current/form/events.html#pr_submit

  -
    question: >
      How do you disable CSRF protection for a specific form in Symfony?
    answers:
      -
        value: >
          Set the `csrf_protection` option to `false` in the form type's `configureOptions()` method or when creating the form.
        correct: true
      -
        value: >
          Remove the `_token` field from the form builder.
        correct: false
      -
        value: >
          Set the `enable_csrf` parameter to `false` in `config/packages/framework.yaml`.
        correct: false
      -
        value: >
          Add a `#[NoCsrf]` attribute to the form type class.
        correct: false
    help: |
      CSRF protection can be disabled by setting the `csrf_protection` option to `false` in the form's options.
      https://symfony.com/doc/current/reference/forms/types/form.html#csrf-protection

  -
    question: |
      When handling a file upload with a Symfony form, which built-in form type should be used for the file input field?
    answers:
      -
        value: >
          `ImageType`
        correct: false
      -
        value: >
          `UploadType`
        correct: false
      -
        value: >
          `FileType`
        correct: true
      -
        value: >
          `FileFieldType`
        correct: false
    help: |
      The `FileType` is the dedicated form type for handling file uploads in Symfony forms.
      https://symfony.com/doc/current/reference/forms/types/file.html

  -
    question: |
      You have a `Task` entity with a `dueDate` property of type `DateTimeImmutable`. Which built-in form type is most suitable for this property?
    answers:
      -
        value: >
          `TextType`
        correct: false
      -
        value: >
          `DateType`
        correct: true
      -
        value: >
          `DateTimeType`
        correct: true
      -
        value: >
          `TimeType`
        correct: false
    help: |
      Both `DateType` and `DateTimeType` are suitable for handling `DateTimeImmutable` objects, depending on whether you need to capture time information as well.
      https://symfony.com/doc/current/reference/forms/types/date.html
      https://symfony.com/doc/current/reference/forms/types/datetime.html

  -
    question: |
      Which of the following options is used with `CollectionType` to specify the form type of each item in the collection?
    answers:
      -
        value: >
          `item_type`
        correct: false
      -
        value: >
          `entry_type`
        correct: true
      -
        value: >
          `child_type`
        correct: false
      -
        value: >
          `collection_type`
        correct: false
    help: |
      The `entry_type` option is required for `CollectionType` to define the form type used for each element within the collection.
      https://symfony.com/doc/current/reference/forms/types/collection.html#entry-type

  -
    question: |
      When using `form_theme` in Twig, what does the `only` keyword achieve?

      ```twig
      {% form_theme form with ['foundation_5_layout.html.twig'] only %}
      ```
    answers:
      -
        value: >
          It applies the theme only to the root form, not its children.
        correct: false
      -
        value: >
          It ensures that only the specified themes are applied, ignoring any globally configured themes.
        correct: true
      -
        value: >
          It applies the theme only if no other themes have been previously applied.
        correct: false
      -
        value: >
          It makes the theme apply only to the form's widget, not its label or errors.
        correct: false
    help: |
      The `only` keyword prevents the form from inheriting themes from the global configuration or parent templates, ensuring only the explicitly listed themes are used.
      https://symfony.com/doc/current/form/form_themes.html#applying-multiple-themes

  -
    question: >
      What is the purpose of the `buildView()` method in a custom form type?
    answers:
      -
        value: >
          To build the HTML structure of the form.
        correct: false
      -
        value: >
          To set any extra variables needed when rendering the field in a form theme template.
        correct: true
      -
        value: >
          To define the form's fields and their types.
        correct: false
      -
        value: >
          To process the submitted data before validation.
        correct: false
    help: |
      The `buildView()` method allows you to add or modify variables that will be available in the Twig template when rendering the form field.
      https://symfony.com/doc/current/form/create_custom_field_type.html#the-buildview-method

  -
    question: |
      Which of the following is the correct way to check if a form has been submitted and is valid in a Symfony controller?
    answers:
      -
        value: >
          `if ($form->isSubmitted() && $form->isValid())`
        correct: true
      -
        value: >
          `if ($form->isValid() && $form->isSubmitted())`
        correct: true
      -
        value: >
          `if ($form->submit() && $form->validate())`
        correct: false
      -
        value: >
          `if ($form->isPosted() && $form->hasNoErrors())`
        correct: false
    help: |
      The `isSubmitted()` method checks if the form was submitted, and `isValid()` checks if the submitted data passes all validation constraints. Both should be checked.
      https://symfony.com/doc/current/forms.html#handling-form-submissions

  -
    question: >
      When rendering a Symfony form in Twig, which function is used to render the opening `<form>` tag, including attributes like `method` and `action`?
    answers:
      -
        value: >
          `form_widget()`
        correct: false
      -
        value: >
          `form_start()`
        correct: true
      -
        value: >
          `form()`
        correct: false
      -
        value: >
          `form_end()`
        correct: false
    help: |
      `form_start(form)` generates the opening `<form>` tag and includes necessary attributes like `method`, `action`, and `enctype` for file uploads.
      https://symfony.com/doc/current/form/form_customization.html#form-rendering-functions

  -
    question: |
      You need to modify the data of a form *before* it's set to the form fields, for example, to initialize default values. Which `FormEvents` listener should you use?
    answers:
      -
        value: >
          `FormEvents::PRE_SUBMIT`
        correct: false
      -
        value: >
          `FormEvents::POST_SUBMIT`
        correct: false
      -
        value: >
          `FormEvents::PRE_SET_DATA`
        correct: true
      -
        value: >
          `FormEvents::POST_SET_DATA`
        correct: false
    help: |
      `FormEvents::PRE_SET_DATA` is dispatched before the form's data is populated from the initial data (e.g., an entity). This is the ideal place to modify the data before it's displayed in the form.
      https://symfony.com/doc/current/form/events.html#pr_set_data

  -
    question: >
      Which built-in form type is typically used for a simple text input field?
    answers:
      -
        value: >
          `StringType`
        correct: false
      -
        value: >
          `TextInputType`
        correct: false
      -
        value: >
          `TextType`
        correct: true
      -
        value: >
          `InputType`
        correct: false
    help: |
      `TextType` is the most common form type for single-line text inputs.
      https://symfony.com/doc/current/reference/forms/types/text.html

  -
    question: |
      Consider the following Twig snippet:

      ```twig
      {% if form is rootform %}
          {{ form_errors(form) }}
      {% endif %}
      ```

      What is the purpose of the `is rootform` test?
    answers:
      -
        value: >
          To check if the form has any validation errors.
        correct: false
      -
        value: >
          To determine if the current form view is the top-level form, not an embedded child form.
        correct: true
      -
        value: >
          To verify if the form is bound to an entity.
        correct: false
      -
        value: >
          To ensure the form is submitted via the root URL.
        correct: false
    help: |
      The `is rootform` test is a reliable way to check if the current form view is the main form, preventing issues if a child form happens to be named 'parent'.
      https://symfony.com/doc/current/form/form_customization.html#checking-if-a-form-is-the-root-form

  -
    question: >
      What is the recommended way to add validation constraints to an entity that will be used with a Symfony form?
    answers:
      -
        value: >
          Define them directly in the form type using the `constraints` option for each field.
        correct: false
      -
        value: >
          Use PHP attributes (`#[Assert\NotBlank]`) directly on the entity properties.
        correct: true
      -
        value: >
          Define them in a separate YAML or XML validation file.
        correct: true
      -
        value: >
          Implement the `validate()` method in the entity class.
        correct: false
    help: |
      Symfony's Validator component allows defining constraints using PHP attributes, YAML, or XML files. Using attributes directly on the entity is a common and recommended approach.
      https://symfony.com/doc/current/forms.html#adding-validation

  -
    question: >
      Which built-in form type is used to create a button that submits the form?
    answers:
      -
        value: >
          `ButtonType`
        correct: false
      -
        value: >
          `SubmitType`
        correct: true
      -
        value: >
          `FormButtonType`
        correct: false
      -
        value: >
          `ActionType`
        correct: false
    help: |
      `SubmitType` creates a submit button for the form.
      https://symfony.com/doc/current/reference/forms/types/submit.html

  -
    question: |
      You want to apply different Twig form themes to a parent form and one of its child forms. Which of the following approaches is correct?
    answers:
      -
        value: >
          `{% form_theme form 'parent_theme.html.twig' %}` then `{% form_theme form.child_form 'child_theme.html.twig' %}`
        correct: true
      -
        value: >
          `{% form_theme form with ['parent_theme.html.twig', 'child_form': 'child_theme.html.twig'] %}`
        correct: false
      -
        value: >
          Define the child form's theme directly in its `buildView()` method.
        correct: false
      -
        value: >
          It's not possible to apply different themes to parent and child forms independently.
        correct: false
    help: |
      You can apply themes to specific child forms by referencing them directly in the `form_theme` tag, e.g., `form.a_child_form`.
      https://symfony.com/doc/current/form/form_themes.html#applying-different-themes-to-parent-and-child-forms

  -
    question: >
      What is the primary role of a "form type extension" in Symfony?
    answers:
      -
        value: >
          To create entirely new form types from scratch.
        correct: false
      -
        value: >
          To add or override options and functionality for existing form types.
        correct: true
      -
        value: >
          To transform data between different formats.
        correct: false
      -
        value: >
          To guess the correct form type based on data.
        correct: false
    help: |
      Form type extensions allow you to modify or add behavior to existing form types without altering their original code, promoting reusability and modularity.
      https://symfony.com/doc/current/form/type_extensions.html

  -
    question: |
      Which of the following `FormEvents` is triggered *after* the form's data has been submitted and mapped to the underlying object, allowing you to perform actions like saving to the database?
    answers:
      -
        value: >
          `FormEvents::PRE_SET_DATA`
        correct: false
      -
        value: >
          `FormEvents::PRE_SUBMIT`
        correct: false
      -
        value: >
          `FormEvents::POST_SUBMIT`
        correct: true
      -
        value: >
          `FormEvents::SUBMIT`
        correct: false
    help: |
      `FormEvents::POST_SUBMIT` is dispatched after the form has been submitted, validated, and its data mapped to the object. This is typically where you'd persist the data.
      https://symfony.com/doc/current/form/events.html#post_submit

  -
    question: >
      When creating a form without a data class (e.g., for a contact form), what will `getData()` return after a successful submission?
    answers:
      -
        value: >
          An instance of `stdClass`.
        correct: false
      -
        value: >
          An empty array.
        correct: false
      -
        value: >
          An associative array of the submitted field values.
        correct: true
      -
        value: >
          `null`
        correct: false
    help: |
      If a form is not bound to an object (i.e., `data_class` is null), `getData()` will return an associative array containing the submitted values.
      https://symfony.com/doc/current/forms.html#forms-without-a-class

  -
    question: |
      You want to add a `textarea` field to your form. Which built-in form type should you use?
    answers:
      -
        value: >
          `TextType`
        correct: false
      -
        value: >
          `LongTextType`
        correct: false
      -
        value: >
          `TextareaType`
        correct: true
      -
        value: >
          `HtmlType`
        correct: false
    help: |
      `TextareaType` is specifically designed for multi-line text input fields, rendering as an HTML `<textarea>` element.
      https://symfony.com/doc/current/reference/forms/types/textarea.html

  -
    question: >
      What is the purpose of the `finishView()` method in a custom form type?
    answers:
      -
        value: >
          To finalize the form submission process.
        correct: false
      -
        value: >
          To perform cleanup operations after the form is rendered.
        correct: false
      -
        value: >
          To set extra variables for the view, especially when needing to access child views.
        correct: true
      -
        value: >
          To apply final validation rules to the form.
        correct: false
    help: |
      `finishView()` is similar to `buildView()` but is called after all child views have been built, making it useful for accessing child views (e.g., `form['child_name']`) to modify their view variables.
      https://symfony.com/doc/current/form/create_custom_field_type.html#the-finishview-method

  -
    question: |
      Which of the following is the correct way to render only the error messages for a specific form field in Twig?
    answers:
      -
        value: >
          `{{ form_row(form.fieldName).errors }}`
        correct: false
      -
        value: >
          `{{ form_errors(form.fieldName) }}`
        correct: true
      -
        value: >
          `{{ form.fieldName.errors }}`
        correct: false
      -
        value: >
          `{{ form_widget(form.fieldName).errors }}`
        correct: false
    help: |
      `form_errors(form.fieldName)` renders only the error messages associated with that specific form field.
      https://symfony.com/doc/current/form/form_customization.html#form-rendering-functions

  -
    question: >
      What is the primary difference between `createFormBuilder()` and `createForm()` in a Symfony controller?
    answers:
      -
        value: >
          `createFormBuilder()` is for creating forms that are not bound to an entity, while `createForm()` is for entity-bound forms.
        correct: false
      -
        value: >
          `createFormBuilder()` is used for inline form creation, while `createForm()` is used for dedicated form classes.
        correct: true
      -
        value: >
          `createFormBuilder()` automatically handles form submission, while `createForm()` requires manual handling.
        correct: false
      -
        value: >
          `createFormBuilder()` is deprecated in Symfony 7.
        correct: false
    help: |
      `createFormBuilder()` is used to build a form directly in the controller (inline). `createForm()` is used to instantiate a form from a dedicated form type class.
      https://symfony.com/doc/current/forms.html#creating-forms

  -
    question: |
      You want to add an `email` input field to your form. Which built-in form type should you use?
    answers:
      -
        value: >
          `TextType`
        correct: false
      -
        value: >
          `StringType`
        correct: false
      -
        value: >
          `EmailType`
        correct: true
      -
        value: >
          `MailType`
        correct: false
    help: |
      `EmailType` is specifically designed for email input fields, rendering as an HTML `type="email"` input.
      https://symfony.com/doc/current/reference/forms/types/email.html

  -
    question: >
      What is the purpose of the `configureOptions()` method in a custom form type?
    answers:
      -
        value: >
          To define the form's fields.
        correct: false
      -
        value: >
          To set default options for the form type, including `data_class` and validation constraints.
        correct: true
      -
        value: >
          To configure the form's action and method.
        correct: false
      -
        value: >
          To resolve the form's submitted data.
        correct: false
    help: |
      `configureOptions()` is where you define and configure the options that can be passed to your form type, including default values and option requirements.
      https://symfony.com/doc/current/forms.html#the-configureoptions-method

  -
    question: |
      Which of the following is the correct way to render the closing `</form>` tag in Twig?
    answers:
      -
        value: >
          `{{ form_end(form) }}`
        correct: true
      -
        value: >
          `{{ form_close(form) }}`
        correct: false
      -
        value: >
          `{{ form_stop(form) }}`
        correct: false
      -
        value: >
          `{{ form_finish(form) }}`
        correct: false
    help: |
      `form_end(form)` renders the closing `</form>` tag and any remaining unrendered fields (like CSRF tokens).
      https://symfony.com/doc/current/form/form_customization.html#form-rendering-functions

  -
    question: |
      You want to add a `checkbox` field to your form. Which built-in form type should you use?
    answers:
      -
        value: >
          `BooleanType`
        correct: false
      -
        value: >
          `ToggleType`
        correct: false
      -
        value: >
          `CheckboxType`
        correct: true
      -
        value: >
          `SwitchType`
        correct: false
    help: |
      `CheckboxType` is used for rendering HTML checkboxes.
      https://symfony.com/doc/current/reference/forms/types/checkbox.html

  -
    question: |
      What is the purpose of the `entry_options` option when using `CollectionType`?
    answers:
      -
        value: >
          To pass options to the `CollectionType` itself.
        correct: false
      -
        value: >
          To pass options to each individual embedded form (entry) within the collection.
        correct: true
      -
        value: >
          To define the default data for new entries in the collection.
        correct: false
      -
        value: >
          To specify the HTML attributes for the collection's container.
        correct: false
    help: |
      `entry_options` allows you to pass an array of options that will be applied to each form type created for the collection entries.
      https://symfony.com/doc/current/reference/forms/types/collection.html#entry-options

  -
    question: |
      Which of the following methods of `FormInterface` is responsible for checking if the submitted form data is valid according to defined constraints?
    answers:
      -
        value: >
          `validate()`
        correct: false
      -
        value: >
          `isValid()`
        correct: true
      -
        value: >
          `hasErrors()`
        correct: false
      -
        value: >
          `isClean()`
        correct: false
    help: |
      The `isValid()` method returns `true` if the form has been submitted and all submitted data passes the validation constraints.
      https://symfony.com/doc/current/forms.html#handling-form-submissions

  -
    question: |
      When rendering a form, how can you add a custom HTML class attribute to the form's `input` widget using `form_widget()`?
    answers:
      -
        value: >
          `{{ form_widget(form.name, {'class': 'my-class'}) }}`
        correct: false
      -
        value: >
          `{{ form_widget(form.name, {'attr': {'class': 'my-class'}}) }}`
        correct: true
      -
        value: >
          `{{ form_widget(form.name).addClass('my-class') }}`
        correct: false
      -
        value: >
          `{{ form_widget(form.name, {'options': {'class': 'my-class'}}) }}`
        correct: false
    help: |
      HTML attributes for the widget are passed via the `attr` option within the second argument of `form_widget()`.
      https://symfony.com/doc/current/form/form_customization.html#rendering-a-form-field-widget

  -
    question: |
      Which built-in form type is commonly used for a dropdown select box or radio buttons?
    answers:
      -
        value: >
          `SelectType`
        correct: false
      -
        value: >
          `RadioType`
        correct: false
      -
        value: >
          `ChoiceType`
        correct: true
      -
        value: >
          `OptionType`
        correct: false
    help: |
      `ChoiceType` is a versatile form type used for rendering various types of choice fields, including select dropdowns, radio buttons, and checkboxes, depending on its options.
      https://symfony.com/doc/current/reference/forms/types/choice.html

  -
    question: |
      What is the purpose of a "form type guesser" in Symfony?
    answers:
      -
        value: >
          To guess the correct Twig template for a form type.
        correct: false
      -
        value: >
          To automatically determine the appropriate form type and options based on the underlying data (e.g., entity metadata).
        correct: true
      -
        value: >
          To guess the user's input based on previous entries.
        correct: false
      -
        value: >
          To suggest validation constraints for form fields.
        correct: false
    help: |
      Form type guessers inspect the metadata of the underlying data (e.g., Doctrine mappings, validation constraints) to suggest the most appropriate form type and options for a field.
      https://symfony.com/doc/current/form/type_guesser.html

  -
    question: |
      When creating a form, how can you set the HTML `action` attribute of the form tag to a specific route?
    answers:
      -
        value: >
          Set the `action` option when creating the form, e.g., `['action' => $this->generateUrl('my_route')]`.
        correct: true
      -
        value: >
          Set the `route` option when creating the form.
        correct: false
      -
        value: >
          It's automatically set to the current URL, and cannot be changed.
        correct: false
      -
        value: >
          Use `form_start(form, {'action': path('my_route')})` in Twig.
        correct: true
    help: |
      The `action` option can be set when creating the form in the controller, or directly in Twig using `form_start()`.
      https://symfony.com/doc/current/reference/forms/types/form.html#action

  -
    question: |
      Which of the following built-in form types is used to display a static, non-editable text or HTML content within a form?
    answers:
      -
        value: >
          `LabelType`
        correct: false
      -
        value: >
          `HtmlType`
        correct: false
      -
        value: >
          `TextType` with `disabled` option.
        correct: false
      -
        value: >
          `HiddenType`
        correct: false
      -
        value: >
          `RepeatedType`
        correct: false
    help: |
      While there isn't a direct "display only" type, `TextType` with the `disabled` or `readonly` option, or simply rendering text outside of form fields, are common approaches. `HiddenType` is for data not visible to the user.
      https://symfony.com/doc/current/reference/forms/types/text.html#disabled

  -
    question: |
      What is the purpose of the `POST_SET_DATA` event in Symfony forms?
    answers:
      -
        value: >
          To modify the submitted data after it has been validated.
        correct: false
      -
        value: >
          To add or remove fields dynamically after the initial data has been set to the form.
        correct: true
      -
        value: >
          To perform actions before any data is set to the form.
        correct: false
      -
        value: >
          To save the form data to the database.
        correct: false
    help: |
      `POST_SET_DATA` is dispatched after the form's data has been populated from the initial data. This event is useful for performing actions that depend on the initial data, such as dynamically adding or removing fields.
      https://symfony.com/doc/current/form/events.html#post_set_data

  -
    question: |
      You want to create a form field that requires the user to enter a password twice for confirmation. Which built-in form type is designed for this purpose?
    answers:
      -
        value: >
          `PasswordType`
        correct: false
      -
        value: >
          `ConfirmType`
        correct: false
      -
        value: >
          `RepeatedType`
        correct: true
      -
        value: >
          `DoubleEntryType`
        correct: false
    help: |
      `RepeatedType` is used to render two fields that must have the same value, commonly used for password confirmation.
      https://symfony.com/doc/current/reference/forms/types/repeated.html

  -
    question: |
      Which of the following is the correct way to install the Symfony Form component using Composer?
    answers:
      -
        value: >
          `composer install symfony/form`
        correct: false
      -
        value: >
          `composer add symfony/form`
        correct: false
      -
        value: >
          `composer require symfony/form`
        correct: true
      -
        value: >
          `composer update symfony/form`
        correct: false
    help: |
      The `composer require` command is used to add new dependencies to your project.
      https://symfony.com/doc/current/forms.html#installation

  -
    question: |
      What is the significance of the `data` option when creating a form (e.g., `$this->createForm(TaskType::class, $task);`)?
    answers:
      -
        value: >
          It defines the default values for the form fields if no data is submitted.
        correct: false
      -
        value: >
          It specifies the object or array that the form will read data from and write data to.
        correct: true
      -
        value: >
          It determines the HTTP method for form submission.
        correct: false
      -
        value: >
          It sets the validation group for the form.
        correct: false
    help: |
      The second argument to `createForm()` is the initial data for the form. Symfony will read values from this object/array to populate the form fields and write submitted values back to it.
      https://symfony.com/doc/current/forms.html#creating-a-form-class

  -
    question: |
      You want to add a `number` input field to your form. Which built-in form type should you use?
    answers:
      -
        value: >
          `IntegerType`
        correct: false
      -
        value: >
          `NumberType`
        correct: true
      -
        value: >
          `NumericType`
        correct: false
      -
        value: >
          `FloatType`
        correct: false
    help: |
      `NumberType` is used for numeric input fields, rendering as an HTML `type="number"` input.
      https://symfony.com/doc/current/reference/forms/types/number.html

  -
    question: |
      Which method is used to register an event listener or subscriber with a `FormBuilderInterface` instance?
    answers:
      -
        value: >
          `addListener()` or `addSubscriber()`
        correct: false
      -
        value: >
          `addEvent()` or `addEventHandler()`
        correct: false
      -
        value: >
          `addEventListener()` or `addEventSubscriber()`
        correct: true
      -
        value: >
          `onEvent()` or `onSubscribe()`
        correct: false
    help: |
      The `FormBuilderInterface` provides `addEventListener()` for single callbacks and `addEventSubscriber()` for classes implementing `EventSubscriberInterface`.
      https://symfony.com/doc/current/form/events.html#registering-event-listeners

  -
    question: |
      What is the purpose of the `block_name` option in `CollectionType`?
    answers:
      -
        value: >
          To define the HTML `id` attribute for the collection.
        correct: false
      -
        value: >
          To specify a custom Twig block name for rendering the collection's wrapper.
        correct: true
      -
        value: >
          To set the name of the JavaScript function used for dynamic collection manipulation.
        correct: false
      -
        value: >
          To group validation errors for the collection.
        correct: false
    help: |
      The `block_name` option allows you to define a custom Twig block name for the collection, which is useful for advanced form theming and customization.
      https://symfony.com/doc/current/reference/forms/types/collection.html#block-name

  -
    question: |
      You want to add a `URL` input field to your form. Which built-in form type should you use?
    answers:
      -
        value: >
          `TextType`
        correct: false
      -
        value: >
          `LinkType`
        correct: false
      -
        value: >
          `UrlType`
        correct: true
      -
        value: >
          `UriType`
        correct: false
    help: |
      `UrlType` is specifically designed for URL input fields, rendering as an HTML `type="url"` input.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: |
      What happens if you try to render a form field that has not been added to the form builder in your form type?
    answers:
      -
        value: >
          It will be rendered as an empty input field.
        correct: false
      -
        value: >
          A Twig error will occur, indicating the field does not exist.
        correct: true
      -
        value: >
          Symfony will automatically guess the field type and render it.
        correct: false
      -
        value: >
          The field will be silently ignored.
        correct: false
    help: |
      Attempting to render a non-existent form field in Twig will result in an error, as the `form` view object does not contain that child.
      https://symfony.com/doc/current/form/form_customization.html

  -
    question: |
      Which of the following built-in form types is used to create a dropdown list of choices?
    answers:
      -
        value: >
          `EntityType`
        correct: false
      -
        value: >
          `ChoiceType`
        correct: true
      -
        value: >
          `SelectType`
        correct: false
      -
        value: >
          `OptionType`
        correct: false
    help: |
      `ChoiceType` is used to create select dropdowns, radio buttons, or checkboxes, depending on its configuration.
      https://symfony.com/doc/current/reference/forms/types/choice.html

  -
    question: |
      What is the purpose of the `mapped` option when defining a form field?
    answers:
      -
        value: >
          To specify if the field should be displayed in the form.
        correct: false
      -
        value: >
          To indicate whether the field's data should be synchronized with the underlying data object.
        correct: true
      -
        value: >
          To define the database column mapping for the field.
        correct: false
      -
        value: >
          To set the validation mapping for the field.
        correct: false
    help: |
      The `mapped` option (defaulting to `true`) controls whether the form field's data is read from and written to the underlying data object.
      https://symfony.com/doc/current/forms.html#unmapped-fields

  -
    question: |
      You want to add a `password` input field to your form. Which built-in form type should you use?
    answers:
      -
        value: >
          `TextType`
        correct: false
      -
        value: >
          `SecretType`
        correct: false
      -
        value: >
          `PasswordType`
        correct: true
      -
        value: >
          `HiddenType`
        correct: false
    help: |
      `PasswordType` is used for password input fields, rendering as an HTML `type="password"` input.
      https://symfony.com/doc/current/reference/forms/types/password.html

  -
    question: |
      What is the purpose of the `POST_SUBMIT` event listener in a Symfony form?
    answers:
      -
        value: >
          To modify the form data before it is submitted.
        correct: false
      -
        value: >
          To perform actions after the form has been submitted and validated, such as persisting data.
        correct: true
      -
        value: >
          To pre-populate the form with initial data.
        correct: false
      -
        value: >
          To add dynamic fields to the form based on user input.
        correct: false
    help: |
      The `POST_SUBMIT` event is triggered after the form has been submitted and validated, making it a suitable place to perform operations like saving data to a database.
      https://symfony.com/doc/current/form/events.html#post_submit

  -
    question: |
      Which of the following built-in form types is used for a single-line text input that is specifically for a search query?
    answers:
      -
        value: >
          `TextType`
        correct: false
      -
        value: >
          `SearchType`
        correct: true
      -
        value: >
          `QueryType`
        correct: false
      -
        value: >
          `StringType`
        correct: false
    help: |
      `SearchType` is used for search input fields, rendering as an HTML `type="search"` input.
      https://symfony.com/doc/current/reference/forms/types/search.html

  -
    question: |
      How can you pass HTML attributes (e.g., `id`, `class`) to the opening `<form>` tag when rendering it with `form_start()`?
    answers:
      -
        value: >
          `{{ form_start(form, {'id': 'my_form_id', 'class': 'my-form-class'}) }}`
        correct: false
      -
        value: >
          `{{ form_start(form, {'attr': {'id': 'my_form_id', 'class': 'my-form-class'}}) }}`
        correct: true
      -
        value: >
          `{{ form_start(form).setAttr({'id': 'my_form_id', 'class': 'my-form-class'}) }}`
        correct: false
      -
        value: >
          `{{ form_start(form, {'options': {'id': 'my_form_id', 'class': 'my-form-class'}}) }}`
        correct: false
    help: |
      HTML attributes for the `<form>` tag itself are passed via the `attr` option within the second argument of `form_start()`.
      https://symfony.com/doc/current/form/form_customization.html#form-rendering-functions

  -
    question: |
      Which of the following built-in form types is used to create a hidden input field?
    answers:
      -
        value: >
          `InvisibleType`
        correct: false
      -
        value: >
          `HiddenType`
        correct: true
      -
        value: >
          `SecretType`
        correct: false
      -
        value: >
          `InvisibleInputType`
        correct: false
    help: |
      `HiddenType` is used for hidden input fields, rendering as an HTML `type="hidden"` input.
      https://symfony.com/doc/current/reference/forms/types/hidden.html

  -
    question: |
      What is the purpose of the `by_reference` option in `CollectionType`?
    answers:
      -
        value: >
          To specify if the collection should be passed by value or by reference to the form.
        correct: true
      -
        value: >
          To indicate if the collection items should be stored in a database relation.
        correct: false
      -
        value: >
          To control whether new items can be added to the collection.
        correct: false
      -
        value: >
          To define the sorting order of the collection items.
        correct: false
    help: |
      The `by_reference` option controls whether the form modifies the collection directly (by reference) or through its setter method (by value). For Doctrine collections, it's often set to `false`.
      https://symfony.com/doc/current/reference/forms/types/collection.html#by-reference

  -
    question: |
      You want to add a `color` input field to your form. Which built-in form type should you use?
    answers:
      -
        value: >
          `TextType`
        correct: false
      -
        value: >
          `ColorPickerType`
        correct: false
      -
        value: >
          `ColorType`
        correct: true
      -
        value: >
          `HexColorType`
        correct: false
    help: |
      `ColorType` is used for color input fields, rendering as an HTML `type="color"` input.
      https://symfony.com/doc/current/reference/forms/types/color.html

  -
    question: |
      What is the primary function of the `data_collector.forms` service in Symfony's Web Profiler?
    answers:
      -
        value: >
          To automatically submit forms in the profiler.
        correct: false
      -
        value: >
          To collect and display information about forms, their data, and validation errors during development.
        correct: true
      -
        value: >
          To generate form definitions from database schemas.
        correct: false
      -
        value: >
          To provide a visual form builder interface.
        correct: false
    help: |
      The forms data collector in the Web Profiler helps debug forms by showing submitted data, validation errors, and form structure.
      https://symfony.com/doc/current/profiler/data_collectors.html#forms

  -
    question: |
      Which of the following built-in form types is used to create a file upload field?
    answers:
      -
        value: >
          `InputFileType`
        correct: false
      -
        value: >
          `AttachmentType`
        correct: false
      -
        value: >
          `FileType`
        correct: true
      -
        value: >
          `UploadType`
        correct: false
    help: |
      `FileType` is the standard form type for handling file uploads.
      https://symfony.com/doc/current/reference/forms/types/file.html

  -
    question: |
      What is the purpose of the `allow_add` option in `CollectionType`?
    answers:
      -
        value: >
          To allow adding new entries to the collection dynamically on the client-side.
        correct: true
      -
        value: >
          To enable adding new fields to the form type.
        correct: false
      -
        value: >
          To permit adding new validation constraints to the collection.
        correct: false
      -
        value: >
          To allow the form to be submitted even if the collection is empty.
        correct: false
    help: |
      When `allow_add` is set to `true`, the `CollectionType` will allow new entries to be added to the collection when the form is submitted, typically used with JavaScript for dynamic forms.
      https://symfony.com/doc/current/reference/forms/types/collection.html#allow-add

  -
    question: |
      Which of the following built-in form types is used to create a range input field (slider)?
    answers:
      -
        value: >
          `NumberType`
        correct: false
      -
        value: >
          `SliderType`
        correct: false
      -
        value: >
          `RangeType`
        correct: true
      -
        value: >
          `ScaleType`
        correct: false
    help: |
      `RangeType` is used for range input fields, rendering as an HTML `type="range"` input.
      https://symfony.com/doc/current/reference/forms/types/range.html

  -
    question: |
      What is the purpose of the `allow_delete` option in `CollectionType`?
    answers:
      -
        value: >
          To allow deleting existing entries from the collection dynamically on the client-side.
        correct: true
      -
        value: >
          To enable deleting form fields from the form type.
        correct: false
      -
        value: >
          To permit deleting validation constraints from the collection.
        correct: false
      -
        value: >
          To allow the form to be submitted even if some collection items are removed.
        correct: false
    help: |
      When `allow_delete` is set to `true`, the `CollectionType` will allow existing entries to be removed from the collection when the form is submitted, typically used with JavaScript for dynamic forms.
      https://symfony.com/doc/current/reference/forms/types/collection.html#allow-delete

  -
    question: |
      You want to add a `tel` (telephone number) input field to your form. Which built-in form type should you use?
    answers:
      -
        value: >
          `TextType`
        correct: false
      -
        value: >
          `PhoneType`
        correct: false
      -
        value: >
          `TelType`
        correct: true
      -
        value: >
          `ContactType`
        correct: false
    help: |
      `TelType` is used for telephone number input fields, rendering as an HTML `type="tel"` input.
      https://symfony.com/doc/current/reference/forms/types/tel.html

  -
    question: |
      What is the role of the `data` option when defining a form field (e.g., `->add('task', TextType::class, ['data' => 'Default task']);`)?
    answers:
      -
        value: >
          To set the initial value of the form field, overriding any data from the bound object.
        correct: true
      -
        value: >
          To define the data type for the field's input.
        correct: false
      -
        value: >
          To specify the validation constraints for the field.
        correct: false
      -
        value: >
          To map the field to a specific property on the data object.
        correct: false
    help: |
      The `data` option sets the initial value of a form field, explicitly overriding any value that would normally be read from the underlying data object.
      https://symfony.com/doc/current/reference/forms/types/form.html#data

  -
    question: |
      Which of the following built-in form types is used to create a date and time input field?
    answers:
      -
        value: >
          `DateType`
        correct: false
      -
        value: >
          `TimeType`
        correct: false
      -
        value: >
          `DateTimeType`
        correct: true
      -
        value: >
          `TimestampType`
        correct: false
    help: |
      `DateTimeType` is used for input fields that capture both date and time information.
      https://symfony.com/doc/current/reference/forms/types/datetime.html

  -
    question: |
      What is the purpose of the `empty_data` option in a form field?
    answers:
      -
        value: >
          To define the value that will be used if the field is submitted empty.
        correct: true
      -
        value: >
          To specify the default placeholder text for the field.
        correct: false
      -
        value: >
          To indicate that the field is optional.
        correct: false
      -
        value: >
          To set the data type for an empty field.
        correct: false
    help: |
      The `empty_data` option allows you to specify the value that will be returned by `getData()` for that field if the submitted value is empty.
      https://symfony.com/doc/current/reference/forms/types/form.html#empty-data

  -
    question: |
      Which of the following built-in form types is used to create a simple button (not necessarily a submit button)?
    answers:
      -
        value: >
          `ButtonType`
        correct: true
      -
        value: >
          `SubmitType`
        correct: false
      -
        value: >
          `FormButtonType`
        correct: false
      -
        value: >
          `ActionType`
        correct: false
    help: |
      `ButtonType` renders a basic HTML `<button>` element that does not automatically submit the form.
      https://symfony.com/doc/current/reference/forms/types/button.html

  -
    question: |
      What is the purpose of the `error_bubbling` option in a form field?
    answers:
      -
        value: >
          To display validation errors at the top of the form.
        correct: false
      -
        value: >
          To make validation errors "bubble up" from child fields to their parent form.
        correct: true
      -
        value: >
          To prevent validation errors from being displayed.
        correct: false
      -
        value: >
          To group validation errors by field.
        correct: false
    help: |
      When `error_bubbling` is `true`, any errors for that field will "bubble up" and be displayed on the parent form (or the root form if it continues bubbling).
      https://symfony.com/doc/current/reference/forms/types/form.html#error-bubbling

  -
    question: |
      Which of the following built-in form types is used to create a single checkbox?
    answers:
      -
        value: >
          `BooleanType`
        correct: false
      -
        value: >
          `ChoiceType` with `multiple => false`
        correct: false
      -
        value: >
          `CheckboxType`
        correct: true
      -
        value: >
          `ToggleType`
        correct: false
    help: |
      `CheckboxType` is specifically for rendering a single checkbox.
      https://symfony.com/doc/current/reference/forms/types/checkbox.html

  -
    question: |
      What is the purpose of the `compound` option in a form type?
    answers:
      -
        value: >
          To indicate that the form type is composed of multiple fields.
        correct: true
      -
        value: >
          To specify that the form should use a compound data transformer.
        correct: false
      -
        value: >
          To enable client-side validation for the form.
        correct: false
      -
        value: >
          To define a custom data mapping for the form.
        correct: false
    help: |
      The `compound` option (defaulting to `true` for form types that add children) indicates that the form type is a "compound" form, meaning it's composed of multiple child fields.
      https://symfony.com/doc/current/reference/forms/types/form.html#compound

  -
    question: |
      When creating a custom form type, how can you ensure that it can be used to edit an existing entity (e.g., `Product` entity)?
    answers:
      -
        value: >
          By setting the `data_class` option to `Product::class` in `configureOptions()`.
        correct: true
      -
        value: >
          By passing the `Product` object as the first argument to `buildForm()`.
        correct: false
      -
        value: >
          By implementing `ProductAwareInterface` in the form type.
        correct: false
      -
        value: >
          By using `EntityType` as the base type for the form.
        correct: false
    help: |
      Setting the `data_class` option in `configureOptions()` tells Symfony to map the form's data to an instance of the specified class.
      https://symfony.com/doc/current/forms.html#the-configureoptions-method

  -
    question: |
      Which of the following built-in form types is used to create a date input field without time?
    answers:
      -
        value: >
          `DateTimeType`
        correct: false
      -
        value: >
          `DateType`
        correct: true
      -
        value: >
          `CalendarType`
        correct: false
      -
        value: >
          `TimeType`
        correct: false
    help: |
      `DateType` is used for input fields that capture only date information.
      https://symfony.com/doc/current/reference/forms/types/date.html

  -
    question: |
      What is the purpose of the `inherit_data` option in a form type?
    answers:
      -
        value: >
          To inherit validation constraints from the parent form.
        correct: false
      -
        value: >
          To make the form type inherit data from its parent form, rather than having its own data object.
        correct: true
      -
        value: >
          To inherit Twig themes from the parent form.
        correct: false
      -
        value: >
          To inherit options from the parent form type.
        correct: false
    help: |
      When `inherit_data` is `true`, the form type will use the same data object as its parent form, which is useful for creating forms that represent a subset of a larger data object.
      https://symfony.com/doc/current/reference/forms/types/form.html#inherit-data

  -
    question: |
      Which of the following built-in form types is used to create a time input field?
    answers:
      -
        value: >
          `DateType`
        correct: false
      -
        value: >
          `DateTimeType`
        correct: false
      -
        value: >
          `TimeType`
        correct: true
      -
        value: >
          `ClockType`
        correct: false
    help: |
      `TimeType` is used for input fields that capture only time information.
      https://symfony.com/doc/current/reference/forms/types/time.html

  -
    question: |
      What is the purpose of the `property_path` option in a form field?
    answers:
      -
        value: >
          To specify the HTML `name` attribute of the form field.
        correct: false
      -
        value: >
          To define the path to the property on the underlying data object that the field should map to.
        correct: true
      -
        value: >
          To set the validation group for the field.
        correct: false
      -
        value: >
          To specify the Twig template path for rendering the field.
        correct: false
    help: |
      The `property_path` option allows you to explicitly define which property on the underlying data object a form field should map to, overriding the default behavior.
      https://symfony.com/doc/current/reference/forms/types/form.html#property-path

  -
    question: |
      Which of the following built-in form types is used to create a file input field that allows multiple file selections?
    answers:
      -
        value: >
          `FileType` with `multiple => true`
        correct: true
      -
        value: >
          `CollectionType` with `FileType`
        correct: false
      -
        value: >
          `MultiFileType`
        correct: false
      -
        value: >
          `ArrayFileType`
        correct: false
    help: |
      The `FileType` supports multiple file uploads by setting the `multiple` option to `true`.
      https://symfony.com/doc/current/reference/forms/types/file.html#multiple

  -
    question: |
      What is the purpose of the `validation_groups` option in a form?
    answers:
      -
        value: >
          To group form fields for rendering purposes.
        correct: false
      -
        value: >
          To specify which validation groups should be applied when the form is validated.
        correct: true
      -
        value: >
          To group form events for listeners.
        correct: false
      -
        value: >
          To define a set of default values for the form.
        correct: false
    help: |
      The `validation_groups` option allows you to control which validation groups are active when the form is submitted and validated, enabling conditional validation.
      https://symfony.com/doc/current/forms.html#validation-groups

  -
    question: |
      Which of the following built-in form types is used to create a URL input field?
    answers:
      -
        value: >
          `TextType`
        correct: false
      -
        value: >
          `LinkType`
        correct: false
      -
        value: >
          `UrlType`
        correct: true
      -
        value: >
          `UriType`
        correct: false
    help: |
      `UrlType` is specifically designed for URL input fields, rendering as an HTML `type="url"` input.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: |
      What is the purpose of the `label` option in a form field?
    answers:
      -
        value: >
          To define the HTML `id` attribute for the label.
        correct: false
      -
        value: >
          To set the text displayed for the field's label.
        correct: true
      -
        value: >
          To specify the CSS class for the label.
        correct: false
      -
        value: >
          To link the label to a specific translation domain.
        correct: false
    help: |
      The `label` option allows you to set the human-readable text that will be displayed as the label for the form field.
      https://symfony.com/doc/current/reference/forms/types/form.html#label

  -
    question: |
      Which of the following built-in form types is used to create a search input field?
    answers:
      -
        value: >
          `TextType`
        correct: false
      -
        value: >
          `QueryType`
        correct: false
      -
        value: >
          `SearchType`
        correct: true
      -
        value: >
          `FindType`
        correct: false
    help: |
      `SearchType` is used for search input fields, rendering as an HTML `type="search"` input.
      https://symfony.com/doc/current/reference/forms/types/search.html

  -
    question: |
      What is the purpose of the `required` option in a form field?
    answers:
      -
        value: >
          To indicate that the field must be present in the submitted data.
        correct: true
      -
        value: >
          To add a `*` next to the label in the Twig template.
        correct: false
      -
        value: >
          To ensure the field has a default value.
        correct: false
      -
        value: >
          To make the field read-only.
        correct: false
    help: |
      The `required` option (defaulting to `true`) indicates whether the form field is required to be submitted with a non-empty value. This also affects HTML5 `required` attribute.
      https://symfony.com/doc/current/reference/forms/types/form.html#required

  -
    question: |
      Which of the following built-in form types is used to create a telephone number input field?
    answers:
      -
        value: >
          `TextType`
        correct: false
      -
        value: >
          `PhoneType`
        correct: false
      -
        value: >
          `TelType`
        correct: true
      -
        value: >
          `ContactType`
        correct: false
    help: |
      `TelType` is used for telephone number input fields, rendering as an HTML `type="tel"` input.
      https://symfony.com/doc/current/reference/forms/types/tel.html

  -
    question: |
      What is the purpose of the `disabled` option in a form field?
    answers:
      -
        value: >
          To prevent the field from being rendered.
        correct: false
      -
        value: >
          To make the field read-only and prevent user interaction.
        correct: true
      -
        value: >
          To disable validation for the field.
        correct: false
      -
        value: >
          To hide the field from the user.
        correct: false
    help: |
      When `disabled` is `true`, the form field will be rendered with the HTML `disabled` attribute, preventing user interaction and excluding its value from submission.
      https://symfony.com/doc/current/reference/forms/types/form.html#disabled

  -
    question: |
      Which of the following built-in form types is used to create a week input field?
    answers:
      -
        value: >
          `DateType`
        correct: false
      -
        value: >
          `WeekType`
        correct: true
      -
        value: >
          `CalendarType`
        correct: false
      -
        value: >
          `MonthType`
        correct: false
    help: |
      `WeekType` is used for week input fields, rendering as an HTML `type="week"` input.
      https://symfony.com/doc/current/reference/forms/types/week.html

  -
    question: |
      What is the purpose of the `attr` option in a form field?
    answers:
      -
        value: >
          To define the HTML attributes for the field's label.
        correct: false
      -
        value: >
          To specify arbitrary HTML attributes (e.g., `class`, `placeholder`) to be applied to the field's widget.
        correct: true
      -
        value: >
          To set the validation attributes for the field.
        correct: false
      -
        value: >
          To define the data attributes for the field.
        correct: false
    help: |
      The `attr` option is an array that allows you to pass arbitrary HTML attributes directly to the rendered HTML input element (widget) of the form field.
      https://symfony.com/doc/current/reference/forms/types/form.html#attr

  -
    question: |
      Which of the following built-in form types is used to create a month input field?
    answers:
      -
        value: >
          `DateType`
        correct: false
      -
        value: >
          `MonthType`
        correct: true
      -
        value: >
          `CalendarType`
        correct: false
      -
        value: >
          `YearType`
        correct: false
    help: |
      `MonthType` is used for month input fields, rendering as an HTML `type="month"` input.
      https://symfony.com/doc/current/reference/forms/types/month.html

  -
    question: |
      What is the purpose of the `help` option in a form field?
    answers:
      -
        value: >
          To provide a tooltip for the field.
        correct: false
      -
        value: >
          To display additional descriptive text or instructions below the field's widget.
        correct: true
      -
        value: >
          To link to external documentation for the field.
        correct: false
      -
        value: >
          To define the validation error message for the field.
        correct: false
    help: |
      The `help` option allows you to add a small piece of descriptive text or instructions that will be rendered below the form field's widget.
      https://symfony.com/doc/current/reference/forms/types/form.html#help

  -
    question: |
      Which of the following built-in form types is used to create a datetime-local input field?
    answers:
      -
        value: >
          `DateTimeType`
        correct: false
      -
        value: >
          `DateType`
        correct: false
      -
        value: >
          `TimeType`
        correct: false
      -
        value: >
          `DateTimeLocalType`
        correct: true
    help: |
      `DateTimeLocalType` is used for datetime-local input fields, rendering as an HTML `type="datetime-local"` input.
      https://symfony.com/doc/current/reference/forms/types/datetime_local.html

  -
    question: |
      What is the purpose of the `placeholder` option in a form field?
    answers:
      -
        value: >
          To define the default value of the field.
        correct: false
      -
        value: >
          To display a short hint in the input field before the user enters a value.
        correct: true
      -
        value: >
          To set the label for the field.
        correct: false
      -
        value: >
          To provide a fallback value if the field is empty.
        correct: false
    help: |
      The `placeholder` option sets the `placeholder` HTML attribute, which displays a short hint in the input field when it is empty and not focused.
      https://symfony.com/doc/current/reference/forms/types/form.html#placeholder

  -
    question: |
      Which of the following built-in form types is used to create a search input field?
    answers:
      -
        value: >
          `TextType`
        correct: false
      -
        value: >
          `QueryType`
        correct: false
      -
        value: >
          `SearchType`
        correct: true
      -
        value: >
          `FindType`
        correct: false
    help: |
      `SearchType` is used for search input fields, rendering as an HTML `type="search"` input.
      https://symfony.com/doc/current/reference/forms/types/search.html

  -
    question: |
      What is the purpose of the `row_attr` option in a form field?
    answers:
      -
        value: >
          To specify HTML attributes for the field's widget.
        correct: false
      -
        value: >
          To specify HTML attributes for the `div` element that wraps the field's label, widget, and errors when using `form_row()`.
        correct: true
      -
        value: >
          To define attributes for the form's entire row.
        correct: false
      -
        value: >
          To set attributes for the field's label.
        correct: false
    help: |
      The `row_attr` option allows you to pass HTML attributes to the wrapper element (typically a `div`) that `form_row()` generates for the field.
      https://symfony.com/doc/current/reference/forms/types/form.html#row-attr

  -
    question: |
      Which of the following built-in form types is used to create a `textarea` input field?
    answers:
      -
        value: >
          `TextType`
        correct: false
      -
        value: >
          `LongTextType`
        correct: false
      -
        value: >
          `TextareaType`
        correct: true
      -
        value: >
          `MultilineTextType`
        correct: false
    help: |
      `TextareaType` is specifically designed for multi-line text input fields, rendering as an HTML `<textarea>` element.
      https://symfony.com/doc/current/reference/forms/types/textarea.html

  -
    question: |
      What is the purpose of the `label_attr` option in a form field?
    answers:
      -
        value: >
          To specify HTML attributes for the field's widget.
        correct: false
      -
        value: >
          To specify HTML attributes for the field's label.
        correct: true
      -
        value: >
          To define attributes for the form's entire row.
        correct: false
      -
        value: >
          To set attributes for the field's help text.
        correct: false
    help: |
      The `label_attr` option allows you to pass HTML attributes directly to the rendered HTML `<label>` element of the form field.
      https://symfony.com/doc/current/reference/forms/types/form.html#label-attr

  -
    question: |
      Which of the following built-in form types is used to create a `color` input field?
    answers:
      -
        value: >
          `TextType`
        correct: false
      -
        value: >
          `ColorPickerType`
        correct: false
      -
        value: >
          `ColorType`
        correct: true
      -
        value: >
          `HexColorType`
        correct: false
    help: |
      `ColorType` is used for color input fields, rendering as an HTML `type="color"` input.
      https://symfony.com/doc/current/reference/forms/types/color.html

  -
    question: |
      What is the purpose of the `help_attr` option in a form field?
    answers:
      -
        value: >
          To specify HTML attributes for the field's label.
        correct: false
      -
        value: >
          To specify HTML attributes for the field's widget.
        correct: false
      -
        value: >
          To specify HTML attributes for the field's help text.
        correct: true
      -
        value: >
          To define attributes for the form's entire row.
        correct: false
    help: |
      The `help_attr` option allows you to pass HTML attributes directly to the rendered HTML element that contains the field's help text.
      https://symfony.com/doc/current/reference/forms/types/form.html#help-attr

  -
    question: |
      Which of the following built-in form types is used to create a `range` input field (slider)?
    answers:
      -
        value: >
          `NumberType`
        correct: false
      -
        value: >
          `SliderType`
        correct: false
      -
        value: >
          `RangeType`
        correct: true
      -
        value: >
          `ScaleType`
        correct: false
    help: |
      `RangeType` is used for range input fields, rendering as an HTML `type="range"` input.
      https://symfony.com/doc/current/reference/forms/types/range.html

  -
    question: |
      What is the purpose of the `html5` option in `DateType` or `DateTimeType`?
    answers:
      -
        value: >
          To enable client-side validation for the date/time input.
        correct: false
      -
        value: >
          To render the field using HTML5 input types (e.g., `type="date"`, `type="datetime-local"`).
        correct: true
      -
        value: >
          To ensure the date/time format is compatible with HTML5 standards.
        correct: false
      -
        value: >
          To use a JavaScript date picker instead of native browser controls.
        correct: false
    help: |
      When `html5` is `true` (default), `DateType` and `DateTimeType` will render HTML5 input types, leveraging native browser date/time pickers.
      https://symfony.com/doc/current/reference/forms/types/date.html#html5
      https://symfony.com/doc/current/reference/forms/types/datetime.html#html5

  -
    question: |
      Which of the following built-in form types is used to create a `week` input field?
    answers:
      -
        value: >
          `DateType`
        correct: false
      -
        value: >
          `WeekType`
        correct: true
      -
        value: >
          `CalendarType`
        correct: false
      -
        value: >
          `MonthType`
        correct: false
    help: |
      `WeekType` is used for week input fields, rendering as an HTML `type="week"` input.
      https://symfony.com/doc/current/reference/forms/types/week.html

  -
    question: |
      What is the purpose of the `widget` option in `DateType` or `DateTimeType`?
    answers:
      -
        value: >
          To specify the HTML input type (e.g., `single_text`, `choice`, `text`).
        correct: true
      -
        value: >
          To define the JavaScript widget used for the date/time picker.
        correct: false
      -
        value: >
          To set the default value for the date/time field.
        correct: false
      -
        value: >
          To control the format of the displayed date/time.
        correct: false
    help: |
      The `widget` option determines how the date/time field is rendered (e.g., as a single text input, a series of select boxes, or text inputs).
      https://symfony.com/doc/current/reference/forms/types/date.html#widget
      https://symfony.com/doc/current/reference/forms/types/datetime.html#widget

  -
    question: |
      Which of the following built-in form types is used to create a `month` input field?
    answers:
      -
        value: >
          `DateType`
        correct: false
      -
        value: >
          `MonthType`
        correct: true
      -
        value: >
          `CalendarType`
        correct: false
      -
        value: >
          `YearType`
        correct: false
    help: |
      `MonthType` is used for month input fields, rendering as an HTML `type="month"` input.
      https://symfony.com/doc/current/reference/forms/types/month.html

  -
    question: |
      What is the purpose of the `format` option in `DateType` or `DateTimeType`?
    answers:
      -
        value: >
          To define the display format of the date/time in the HTML input.
        correct: true
      -
        value: >
          To specify the internal data format used by the form.
        correct: false
      -
        value: >
          To set the validation format for the date/time.
        correct: false
      -
        value: >
          To determine the format for saving the date/time to the database.
        correct: false
    help: |
      The `format` option controls the string format used for displaying and parsing the date/time value when the `widget` option is set to `single_text`.
      https://symfony.com/doc/current/reference/forms/types/date.html#format
      https://symfony.com/doc/current/reference/forms/types/datetime.html#format

  -
    question: |
      Which of the following built-in form types is used to create a `datetime-local` input field?
    answers:
      -
        value: >
          `DateTimeType`
        correct: false
      -
        value: >
          `DateType`
        correct: false
      -
        value: >
          `TimeType`
        correct: false
      -
        value: >
          `DateTimeLocalType`
        correct: true
    help: |
      `DateTimeLocalType` is used for datetime-local input fields, rendering as an HTML `type="datetime-local"` input.
      https://symfony.com/doc/current/reference/forms/types/datetime_local.html

  -
    question: |
      What is the purpose of the `input` option in `DateType` or `DateTimeType`?
    answers:
      -
        value: >
          To specify the format of the data that the form expects from the underlying object (e.g., `string`, `datetime_immutable`).
        correct: true
      -
        value: >
          To define the HTML input type (e.g., `text`, `date`).
        correct: false
      -
        value: >
          To control whether the input field is enabled or disabled.
        correct: false
      -
        value: >
          To set the default value for the input.
        correct: false
    help: |
      The `input` option defines the format in which the date/time data is expected from the underlying object (e.g., `string`, `datetime`, `datetime_immutable`, `timestamp`).
      https://symfony.com/doc/current/reference/forms/types/date.html#input
      https://symfony.com/doc/current/reference/forms/types/datetime.html#input

  -
    question: |
      Which of the following built-in form types is used to create a `url` input field?
    answers:
      -
        value: >
          `TextType`
        correct: false
      -
        value: >
          `LinkType`
        correct: false
      -
        value: >
          `UrlType`
        correct: true
      -
        value: >
          `UriType`
        correct: false
    help: |
      `UrlType` is specifically designed for URL input fields, rendering as an HTML `type="url"` input.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: |
      What is the purpose of the `model_timezone` and `view_timezone` options in `DateTimeType`?
    answers:
      -
        value: >
          To define the timezone for the underlying data object and the timezone for displaying the date/time in the form, respectively.
        correct: true
      -
        value: >
          To set the server's default timezone and the user's local timezone.
        correct: false
      -
        value: >
          To specify the timezone for validation and the timezone for rendering.
        correct: false
      -
        value: >
          To convert the date/time between different timezones automatically.
        correct: false
    help: |
      `model_timezone` defines the timezone of the data in your underlying object, while `view_timezone` defines the timezone in which the data is displayed to the user in the form.
      https://symfony.com/doc/current/reference/forms/types/datetime.html#model-timezone

  -
    question: |
      Which of the following built-in form types is used to create a `number` input field?
    answers:
      -
        value: >
          `IntegerType`
        correct: false
      -
        value: >
          `NumberType`
        correct: true
      -
        value: >
          `NumericType`
        correct: false
      -
        value: >
          `FloatType`
        correct: false
    help: |
      `NumberType` is used for numeric input fields, rendering as an HTML `type="number"` input.
      https://symfony.com/doc/current/reference/forms/types/number.html

  -
    question: |
      What is the purpose of the `choice_label` option in `ChoiceType`?
    answers:
      -
        value: >
          To define the HTML `value` attribute for each choice.
        correct: false
      -
        value: >
          To specify the property or a callable that returns the label for each choice in the dropdown/radio list.
        correct: true
      -
        value: >
          To set the default label for the entire choice field.
        correct: false
      -
        value: >
          To define the translation domain for the choices.
        correct: false
    help: |
      The `choice_label` option is used to determine how each choice in a `ChoiceType` field is displayed to the user. It can be a property path or a callable.
      https://symfony.com/doc/current/reference/forms/types/choice.html#choice-label

  -
    question: |
      Which of the following built-in form types is used to create a `email` input field?
    answers:
      -
        value: >
          `TextType`
        correct: false
      -
        value: >
          `StringType`
        correct: false
      -
        value: >
          `EmailType`
        correct: true
      -
        value: >
          `MailType`
        correct: false
    help: |
      `EmailType` is specifically designed for email input fields, rendering as an HTML `type="email"` input.
      https://symfony.com/doc/current/reference/forms/types/email.html

  -
    question: |
      What is the purpose of the `choices` option in `ChoiceType`?
    answers:
      -
        value: >
          To define the default selected choice.
        correct: false
      -
        value: >
          To provide the list of available options for the dropdown, radio buttons, or checkboxes.
        correct: true
      -
        value: >
          To specify the data type of the choices.
        correct: false
      -
        value: >
          To enable or disable multiple selections.
        correct: false
    help: |
      The `choices` option is a required array that defines all the available options for a `ChoiceType` field.
      https://symfony.com/doc/current/reference/forms/types/choice.html#choices

  -
    question: |
      Which of the following built-in form types is used to create a `hidden` input field?
    answers:
      -
        value: >
          `InvisibleType`
        correct: false
      -
        value: >
          `HiddenType`
        correct: true
      -
        value: >
          `SecretType`
        correct: false
      -
        value: >
          `InvisibleInputType`
        correct: false
    help: |
      `HiddenType` is used for hidden input fields, rendering as an HTML `type="hidden"` input.
      https://symfony.com/doc/current/reference/forms/types/hidden.html

  -
    question: |
      What is the purpose of the `multiple` option in `ChoiceType`?
    answers:
      -
        value: >
          To allow the user to select multiple options from the list.
        correct: true
      -
        value: >
          To display the choices as multiple columns.
        correct: false
      -
        value: >
          To enable multiple choice questions.
        correct: false
      -
        value: >
          To allow the form to be submitted multiple times.
        correct: false
    help: |
      When `multiple` is `true`, the `ChoiceType` will render a select box that allows multiple selections or a series of checkboxes.
      https://symfony.com/doc/current/reference/forms/types/choice.html#multiple

  -
    question: |
      Which of the following built-in form types is used to create a `password` input field?
    answers:
      -
        value: >
          `TextType`
        correct: false
      -
        value: >
          `SecretType`
        correct: false
      -
        value: >
          `PasswordType`
        correct: true
      -
        value: >
          `HiddenType`
        correct: false
    help: |
      `PasswordType` is used for password input fields, rendering as an HTML `type="password"` input.
      https://symfony.com/doc/current/reference/forms/types/password.html

  -
    question: |
      What is the purpose of the `expanded` option in `ChoiceType`?
    answers:
      -
        value: >
          To expand the dropdown list by default.
        correct: false
      -
        value: >
          To render the choices as radio buttons or checkboxes instead of a select dropdown.
        correct: true
      -
        value: >
          To expand the size of the input field.
        correct: false
      -
        value: >
          To show additional information for each choice.
        correct: false
    help: |
      When `expanded` is `true`, `ChoiceType` will render the choices as radio buttons (if `multiple` is `false`) or checkboxes (if `multiple` is `true`). If `false`, it renders a select dropdown.
      https://symfony.com/doc/current/reference/forms/types/choice.html#expanded

  -
    question: |
      Which of the following built-in form types is used to create a `RepeatedType` field, typically for password confirmation?
    answers:
      -
        value: >
          `PasswordType`
        correct: false
      -
        value: >
          `ConfirmType`
        correct: false
      -
        value: >
          `RepeatedType`
        correct: true
      -
        value: >
          `DoubleEntryType`
        correct: false
    help: |
      `RepeatedType` is used to render two fields that must have the same value, commonly used for password confirmation.
      https://symfony.com/doc/current/reference/forms/types/repeated.html

  -
    question: |
      What is the purpose of the `first_options` and `second_options` in `RepeatedType`?
    answers:
      -
        value: >
          To define options for the first and second fields of the repeated type, respectively.
        correct: true
      -
        value: >
          To set the default values for the first and second fields.
        correct: false
      -
        value: >
          To specify the validation constraints for each field.
        correct: false
      -
        value: >
          To control the order of the fields.
        correct: false
    help: |
      `first_options` and `second_options` allow you to pass specific options to the individual underlying form fields of the `RepeatedType`.
      https://symfony.com/doc/current/reference/forms/types/repeated.html#first-options

  -
    question: |
      Which of the following built-in form types is used to create a `submit` button?
    answers:
      -
        value: >
          `ButtonType`
        correct: false
      -
        value: >
          `SubmitType`
        correct: true
      -
        value: >
          `FormButtonType`
        correct: false
      -
        value: >
          `ActionType`
        correct: false
    help: |
      `SubmitType` creates a submit button for the form.
      https://symfony.com/doc/current/reference/forms/types/submit.html

  -
    question: |
      What is the purpose of the `type` option in `RepeatedType`?
    answers:
      -
        value: >
          To specify the base form type to be used for the repeated fields (e.g., `PasswordType`, `EmailType`).
        correct: true
      -
        value: >
          To define the data type of the repeated value.
        correct: false
      -
        value: >
          To set the HTML `type` attribute for the input fields.
        correct: false
      -
        value: >
          To indicate whether the fields are required.
        correct: false
    help: |
      The `type` option in `RepeatedType` specifies the underlying form type that will be used for both the first and second fields (e.g., `PasswordType::class` for password confirmation).
      https://symfony.com/doc/current/reference/forms/types/repeated.html#type

  -
    question: |
      Which of the following built-in form types is used to create a `reset` button?
    answers:
      -
        value: >
          `ButtonType`
        correct: false
      -
        value: >
          `SubmitType`
        correct: false
      -
        value: >
          `ResetType`
        correct: true
      -
        value: >
          `ClearType`
        correct: false
    help: |
      `ResetType` creates a reset button for the form, which clears all form fields.
      https://symfony.com/doc/current/reference/forms/types/reset.html

  -
    question: |
      What is the purpose of the `error_mapping` option in a form type?
    answers:
      -
        value: >
          To map validation errors from one field to another.
        correct: true
      -
        value: >
          To define custom error messages for validation.
        correct: false
      -
        value: >
          To specify the Twig template for rendering errors.
        correct: false
      -
        value: >
          To group validation errors by type.
        correct: false
    help: |
      The `error_mapping` option allows you to remap validation errors from one form field to another, or from a property path to a form field.
      https://symfony.com/doc/current/reference/forms/types/form.html#error-mapping

  -
    question: >
      What is the purpose of the `translation_domain` option in a form field?
    answers:
      -
        value: >
          To specify the domain for translating the field's label and help text.
        correct: true
      -
        value: >
          To define the language of the form.
        correct: false
      -
        value: >
          To enable or disable translation for the form.
        correct: false
      -
        value: >
          To provide a fallback translation for the field.
        correct: false
    help: |
      The `translation_domain` option specifies the message domain to use when translating the field's label, help text, and error messages.
      https://symfony.com/doc/current/reference/forms/types/form.html#translation-domain

  -
    question: |
      Which of the following built-in form types is used to create a `button` (not necessarily a submit or reset button)?
    answers:
      -
        value: >
          `SubmitType`
        correct: false
      -
        value: >
          `ButtonType`
        correct: true
      -
        value: >
          `ResetType`
        correct: false
      -
        value: >
          `ClickType`
        correct: false
    help: |
      `ButtonType` renders a basic HTML `<button>` element that does not automatically submit the form.
      https://symfony.com/doc/current/reference/forms/types/button.html

  -
    question: |
      What is the purpose of the `block_prefix` option in a form type?
    answers:
      -
        value: >
          To define the HTML `id` prefix for all fields in the form type.
        correct: false
      -
        value: >
          To specify a custom prefix for the Twig block names used when theming the form type.
        correct: true
      -
        value: >
          To set the prefix for the form field names in the HTML.
        correct: false
      -
        value: >
          To define a unique identifier for the form type.
        correct: false
    help: |
      The `block_prefix` option allows you to override the default block prefix used for Twig form themes, giving you more control over naming conventions in your custom themes.
      https://symfony.com/doc/current/reference/forms/types/form.html#block-prefix

  -
    question: |
      Which of the following built-in form types is used to create a `file` upload field?
    answers:
      -
        value: >
          `InputFileType`
        correct: false
      -
        value: >
          `AttachmentType`
        correct: false
      -
        value: >
          `FileType`
        correct: true
      -
        value: >
          `UploadType`
        correct: false
    help: |
      `FileType` is the standard form type for handling file uploads.
      https://symfony.com/doc/current/reference/forms/types/file.html

  -
    question: |
      What is the purpose of the `constraints` option when adding a field to a form builder?
    answers:
      -
        value: >
          To define the HTML attributes for the field.
        correct: false
      -
        value: >
          To specify the validation rules that apply to the field's submitted data.
        correct: true
      -
        value: >
          To set the default value for the field.
        correct: false
      -
        value: >
          To mark the field as required.
        correct: false
    help: |
      The `constraints` option takes a single constraint object or an array of constraint objects that will be applied to the field's data during validation.
      https://symfony.com/doc/current/forms.html#adding-validation

  -
    question: |
      Which of the following built-in form types is used to create a `text` input field?
    answers:
      -
        value: >
          `StringType`
        correct: false
      -
        value: >
          `TextInputType`
        correct: false
      -
        value: >
          `TextType`
        correct: true
      -
        value: >
          `InputType`
        correct: false
    help: |
      `TextType` is the most common form type for single-line text inputs.
      https://symfony.com/doc/current/reference/forms/types/text.html

  -
    question: |
      What is the purpose of the `mapped` option when defining a form field?
    answers:
      -
        value: >
          To specify if the field should be displayed in the form.
        correct: false
      -
        value: >
          To indicate whether the field's data should be synchronized with the underlying data object.
        correct: true
      -
        value: >
          To define the database column mapping for the field.
        correct: false
      -
        value: >
          To set the validation mapping for the field.
        correct: false
    help: |
      The `mapped` option (defaulting to `true`) controls whether the form field's data is read from and written to the underlying data object.
      https://symfony.com/doc/current/forms.html#unmapped-fields

  -
    question: |
      Which of the following built-in form types is used to create a `choice` field (dropdown, radio, or checkbox list)?
    answers:
      -
        value: >
          `SelectType`
        correct: false
      -
        value: >
          `RadioType`
        correct: false
      -
        value: >
          `ChoiceType`
        correct: true
      -
        value: >
          `OptionType`
        correct: false
    help: |
      `ChoiceType` is a versatile form type used for rendering various types of choice fields, including select dropdowns, radio buttons, and checkboxes, depending on its options.
      https://symfony.com/doc/current/reference/forms/types/choice.html

  -
    question: |
      What is the purpose of the `data_empty_message` option in a form field?
    answers:
      -
        value: >
          To provide a custom message when the field is submitted empty and `required` is true.
        correct: false
      -
        value: >
          To define the default value for the field if it's empty.
        correct: false
      -
        value: >
          To set the error message when the field fails validation due to being empty.
        correct: true
      -
        value: >
          To display a placeholder text when the field is empty.
        correct: false
    help: |
      The `data_empty_message` option allows you to customize the validation error message specifically for when a required field is left empty.
      https://symfony.com/doc/current/reference/forms/types/form.html#data-empty-message

  -
    question: |
      Which of the following built-in form types is used to create a `collection` of embedded forms?
    answers:
      -
        value: >
          `EntityType`
        correct: false
      -
        value: >
          `ArrayType`
        correct: false
      -
        value: >
          `CollectionType`
        correct: true
      -
        value: >
          `ChoiceType`
        correct: false
    help: |
      `CollectionType` is specifically designed to handle collections of data, where each item in the collection is represented by an embedded form.
      https://symfony.com/doc/current/reference/forms/types/collection.html