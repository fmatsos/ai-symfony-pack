category: Forms

questions:
  -
    question: >
      Which of the following methods is used in a Symfony controller to create a form based on a dedicated form type class?
    answers:
      -
        value: >
          `$this->createFormBuilder()`
        correct: false
      -
        value: >
          `$this->getFormFactory()->create()`
        correct: false
      -
        value: >
          `$this->createForm(TaskType::class, $task);`
        correct: true
      -
        value: >
          `$this->buildForm(TaskType::class, $task);`
        correct: false
    help: |
      The `createForm()` method is the standard way to create a form from a dedicated form type class within a Symfony controller.
      https://symfony.com/doc/current/forms.html#creating-form-classes

  -
    question: |
      Consider the following Symfony form type:

      ```php
      // src/Form/Type/ProductType.php
      namespace App\Form\Type;

      use App\Entity\Product;
      use Symfony\Component\Form\AbstractType;
      use Symfony\Component\Form\FormBuilderInterface;
      use Symfony\Component\OptionsResolver\OptionsResolver;

      class ProductType extends AbstractType
      {
          public function buildForm(FormBuilderInterface $builder, array $options): void
          {
              $builder->add('name');
              $builder->add('price');
          }

          public function configureOptions(OptionsResolver $resolver): void
          {
              $resolver->setDefaults([
                  'data_class' => Product::class,
              ]);
          }
      }
      ```

      Which method is responsible for defining the form fields like 'name' and 'price'?
    answers:
      -
        value: >
          `configureOptions()`
        correct: false
      -
        value: >
          `buildForm()`
        correct: true
      -
        value: >
          `setDefaultOptions()`
        correct: false
      -
        value: >
          `resolveOptions()`
        correct: false
    help: |
      The `buildForm()` method in a form type class is where you define the fields that make up your form using the `FormBuilderInterface`.
      https://symfony.com/doc/current/forms.html#creating-form-classes

  -
    question: >
      What is the purpose of calling `$form->handleRequest($request);` in a Symfony controller?
    answers:
      -
        value: >
          To render the form in the Twig template.
        correct: false
      -
        value: >
          To create the form instance.
        correct: false
      -
        value: >
          To populate the form with submitted data from the request and trigger form events.
        correct: true
      -
        value: >
          To validate the form data against constraints.
        correct: false
    help: |
      The `handleRequest()` method inspects the incoming request to determine if the form was submitted and, if so, populates the form with the submitted data. It also triggers various form events.
      https://symfony.com/doc/current/forms.html#handling-form-submissions

  -
    question: >
      Which Twig function is used to render the opening `<form>` tag in a Symfony template?
    answers:
      -
        value: >
          `form_widget(form)`
        correct: false
      -
        value: >
          `form_end(form)`
        correct: false
      -
        value: >
          `form(form)`
        correct: false
      -
        value: >
          `form_start(form)`
        correct: true
    help: |
      The `form_start()` Twig function is responsible for rendering the opening `<form>` tag, including attributes like `method` and `action`.
      https://symfony.com/doc/current/forms.html#rendering-the-form

  -
    question: >
      How can you apply a custom Twig form theme to a specific form instance in a Symfony template?
    answers:
      -
        value: >
          By configuring it globally in `config/packages/twig.yaml`.
        correct: false
      -
        value: >
          Using `{% form_theme form 'form/my_theme.html.twig' %}`.
        correct: true
      -
        value: >
          By passing the theme path as an option to `createForm()` in the controller.
        correct: false
      -
        value: >
          With `{{ form_theme_apply(form, 'form/my_theme.html.twig') }}`.
        correct: false
    help: |
      The `{% form_theme %}` Twig tag allows you to apply one or more themes to a form within a specific template.
      https://symfony.com/doc/current/form/form_themes.html#how-to-apply-a-theme

  -
    question: >
      By default, how does Symfony Forms protect against CSRF attacks?
    answers:
      -
        value: >
          It automatically adds a hidden `_csrf_token` field to every form.
        correct: true
      -
        value: >
          It requires manual token generation and validation in the controller.
        correct: false
      -
        value: >
          It relies solely on HTTP Referer headers.
        correct: false
      -
        value: >
          CSRF protection is disabled by default and must be explicitly enabled.
        correct: false
    help: |
      Symfony Forms automatically integrates CSRF protection by adding a hidden `_token` field (or `_csrf_token` depending on configuration) to forms, which is then validated upon submission.
      https://symfony.com/doc/current/form/csrf_protection.html

  -
    question: >
      Which built-in form type should you use for handling file uploads in Symfony?
    answers:
      -
        value: >
          `ImageType::class`
        correct: false
      -
        value: >
          `UploadType::class`
        correct: false
      -
        value: >
          `FileType::class`
        correct: true
      -
        value: >
          `AttachmentType::class`
        correct: false
    help: |
      The `FileType` is the built-in form type specifically designed for handling file uploads in Symfony forms.
      https://symfony.com/doc/current/reference/forms/types/file.html

  -
    question: >
      What is the primary purpose of a Data Transformer in Symfony Forms?
    answers:
      -
        value: >
          To convert submitted string data into an object for the underlying model.
        correct: true
      -
        value: >
          To validate form field values against constraints.
        correct: false
      -
        value: >
          To render custom HTML widgets for form fields.
        correct: false
      -
        value: >
          To modify the form structure based on user input.
        correct: false
    help: |
      Data transformers are used to convert data between the format expected by the form (e.g., string from HTML input) and the format expected by the underlying object (e.g., a `DateTime` object).
      https://symfony.com/doc/current/form/data_transformers.html

  -
    question: >
      Which form event occurs *before* the form's data is set to the underlying object?
    answers:
      -
        value: >
          `FormEvents::POST_SUBMIT`
        correct: false
      -
        value: >
          `FormEvents::POST_SET_DATA`
        correct: false
      -
        value: >
          `FormEvents::PRE_SET_DATA`
        correct: true
      -
        value: >
          `FormEvents::PRE_SUBMIT`
        correct: false
    help: |
      The `FormEvents::PRE_SET_DATA` event is dispatched before the form's data is mapped to the underlying object. This is useful for modifying the form based on the initial data.
      https://symfony.com/doc/current/form/events.html#pre-set-data

  -
    question: >
      What is the primary benefit of using a Form Type Extension in Symfony?
    answers:
      -
        value: >
          To create entirely new form types.
        correct: false
      -
        value: >
          To add or override options, fields, or functionality of existing form types without modifying their original classes.
        correct: true
      -
        value: >
          To define custom validation constraints for forms.
        correct: false
      -
        value: >
          To change the Twig rendering of a form field.
        correct: false
    help: |
      Form Type Extensions allow you to add or override functionality for existing form types, promoting reusability and avoiding direct modification of core or third-party form types.
      https://symfony.com/doc/current/form/type_extensions.html

  -
    question: |
      You are creating a form for a `Task` entity. How would you ensure that the `task` property of the `Task` entity is not blank using annotations?

      ```php
      // src/Entity/Task.php
      namespace App\Entity;

      use Symfony\Component\Validator\Constraints as Assert;

      class Task
      {
          /* ??? */
          public string $task;

          // ...
      }
      ```
    answers:
      -
        value: >
          `#[Assert\NotBlank()]`
        correct: true
      -
        value: >
          `#[Assert\NotNull()]`
        correct: false
      -
        value: >
          `#[Validation\NotBlank]`
        correct: false
      -
        value: >
          `#[Constraint\Required]`
        correct: false
    help: |
      The `#[Assert\NotBlank]` annotation is used to ensure that a property is not blank (i.e., not null, not an empty string, and not a string containing only whitespace).
      https://symfony.com/doc/current/reference/constraints/NotBlank.html

  -
    question: >
      When should you use `createFormBuilder()` instead of `createForm(MyFormType::class)` in a controller?
    answers:
      -
        value: >
          When you need to bind the form to an existing entity.
        correct: false
      -
        value: >
          When the form is very simple and doesn't require a dedicated class for reusability.
        correct: true
      -
        value: >
          When you want to apply custom validation constraints.
        correct: false
      -
        value: >
          When you are creating a form with file uploads.
        correct: false
    help: |
      `createFormBuilder()` is suitable for simple forms that are tightly coupled to a specific controller action and do not need to be reused elsewhere. For more complex or reusable forms, a dedicated form type class is preferred.
      https://symfony.com/doc/current/forms.html#creating-forms-in-a-controller

  -
    question: >
      After calling `$form->handleRequest($request);`, what method should you call to check if the form has been submitted and its data is valid?
    answers:
      -
        value: >
          `$form->isSubmitted() && $form->isValid()`
        correct: true
      -
        value: >
          `$form->hasErrors()`
        correct: false
      -
        value: >
          `$form->isReady()`
        correct: false
      -
        value: >
          `$form->validate()`
        correct: false
    help: |
      After handling the request, you typically check both `isSubmitted()` to ensure the form was actually sent and `isValid()` to ensure the submitted data passes all validation constraints.
      https://symfony.com/doc/current/forms.html#handling-form-submissions

  -
    question: >
      Which Twig function renders a complete form, including `form_start`, `form_errors`, `form_widget` for all fields, and `form_end`?
    answers:
      -
        value: >
          `form_all(form)`
        correct: false
      -
        value: >
          `form_complete(form)`
        correct: false
      -
        value: >
          `form(form)`
        correct: true
      -
        value: >
          `form_render(form)`
        correct: false
    help: |
      The `form()` Twig function is a shortcut to render an entire form. While convenient for quick rendering, it offers less control than rendering individual parts.
      https://symfony.com/doc/current/form/form_customization.html#rendering-a-form-in-a-template

  -
    question: >
      What is the correct way to apply multiple form themes to a single form in Twig, where later themes can override earlier ones?
    answers:
      -
        value: >
          `{% form_theme form with ['theme1.html.twig', 'theme2.html.twig'] %}`
        correct: true
      -
        value: >
          `{% form_theme form 'theme1.html.twig', 'theme2.html.twig' %}`
        correct: false
      -
        value: >
          `{% form_theme form combine 'theme1.html.twig', 'theme2.html.twig' %}`
        correct: false
      -
        value: >
          `{% form_theme form append 'theme1.html.twig', 'theme2.html.twig' %}`
        correct: false
    help: |
      You can pass an array of theme paths to the `form_theme` tag. The themes are applied in the order they are listed, with later themes overriding earlier ones.
      https://symfony.com/doc/current/form/form_themes.html#applying-multiple-themes

  -
    question: >
      How can you disable CSRF protection for a specific Symfony form?
    answers:
      -
        value: >
          Set the `csrf_protection` option to `false` in the form type's `configureOptions()` method or when creating the form.
        correct: true
      -
        value: >
          Remove the `_token` field from the form builder.
        correct: false
      -
        value: >
          Configure `framework.csrf_protection.enabled: false` in `config/packages/framework.yaml`.
        correct: false
      -
        value: >
          Use the `#[NoCsrf]` attribute on the controller action.
        correct: false
    help: |
      CSRF protection can be disabled for an individual form by setting the `csrf_protection` option to `false`.
      https://symfony.com/doc/current/form/csrf_protection.html#disabling-csrf-protection

  -
    question: >
      When handling a file upload with a Symfony form, what type of object will the `FileType` field's data be after submission and validation?
    answers:
      -
        value: >
          A string containing the file path.
        correct: false
      -
        value: >
          A `SplFileInfo` object.
        correct: false
      -
        value: >
          A `Symfony\Component\HttpFoundation\File\UploadedFile` object.
        correct: true
      -
        value: >
          An array containing file metadata.
        correct: false
    help: |
      When a file is uploaded via a `FileType` field, Symfony automatically converts it into an `UploadedFile` object, which provides methods for moving, getting the original name, etc.
      https://symfony.com/doc/current/controller/upload_file.html#handling-file-uploads

  -
    question: >
      You have a custom form field that stores a `DateTime` object in the underlying entity, but the form input is a string (e.g., "YYYY-MM-DD"). What Symfony component is best suited to handle this conversion automatically?
    answers:
      -
        value: >
          A Form Event Listener
        correct: false
      -
        value: >
          A Data Transformer
        correct: true
      -
        value: >
          A Form Type Extension
        correct: false
      -
        value: >
          A custom Twig filter
        correct: false
    help: |
      Data Transformers are specifically designed to convert data between the format used in the form (e.g., string) and the format used in the underlying object (e.g., `DateTime` object).
      https://symfony.com/doc/current/form/data_transformers.html

  -
    question: >
      Which form event is typically used to dynamically add or remove fields from a form based on data that has already been submitted (e.g., a selected option)?
    answers:
      -
        value: >
          `FormEvents::PRE_SET_DATA`
        correct: false
      -
        value: >
          `FormEvents::POST_SET_DATA`
        correct: false
      -
        value: >
          `FormEvents::PRE_SUBMIT`
        correct: true
      -
        value: >
          `FormEvents::POST_SUBMIT`
        correct: false
    help: |
      `FormEvents::PRE_SUBMIT` is dispatched after the request data has been submitted but before it's mapped to the form's fields. This is the ideal event for modifying the form structure based on submitted data.
      https://symfony.com/doc/current/form/events.html#pre-submit

  -
    question: >
      You want to add a new option to all `TextType` fields across your application. What is the most appropriate Symfony component to achieve this without modifying the core `TextType` class?
    answers:
      -
        value: >
          A custom Form Type
        correct: false
      -
        value: >
          A Form Event Subscriber
        correct: false
      -
        value: >
          A Form Type Extension
        correct: true
      -
        value: >
          A Data Transformer
        correct: false
    help: |
      Form Type Extensions are designed to extend the functionality of existing form types, allowing you to add new options, modify default options, or add new functionality.
      https://symfony.com/doc/current/form/type_extensions.html

  -
    question: >
      What is the purpose of the `configureOptions(OptionsResolver $resolver)` method in a custom Symfony form type?
    answers:
      -
        value: >
          To add form fields to the builder.
        correct: false
      -
        value: >
          To define the default options and their types for the form type.
        correct: true
      -
        value: >
          To handle the form submission and validation.
        correct: false
      -
        value: >
          To set the data for the form.
        correct: false
    help: |
      The `configureOptions()` method is used to define and configure the options that can be passed to your form type, including default values, allowed types, and required options.
      https://symfony.com/doc/current/forms.html#configuring-options

  -
    question: >
      Which of the following is a valid way to retrieve the submitted data from a Symfony form after it has been handled and validated?
    answers:
      -
        value: >
          `$form->getSubmittedData()`
        correct: false
      -
        value: >
          `$form->getData()`
        correct: true
      -
        value: >
          `$request->request->all()`
        correct: false
      -
        value: >
          `$form->getValues()`
        correct: false
    help: |
      The `getData()` method of the `Form` object returns the data that was submitted and mapped to the form's underlying object.
      https://symfony.com/doc/current/forms.html#getting-the-submitted-data

  -
    question: >
      Which Twig function is used to render a single form field's label, widget, and errors in one go?
    answers:
      -
        value: >
          `form_widget(form.field)`
        correct: false
      -
        value: >
          `form_label(form.field)`
        correct: false
      -
        value: >
          `form_row(form.field)`
        correct: true
      -
        value: >
          `form_errors(form.field)`
        correct: false
    help: |
      The `form_row()` Twig function is a convenient helper that renders the label, errors, and widget for a single form field.
      https://symfony.com/doc/current/form/form_customization.html#form-row

  -
    question: >
      You want to apply a form theme only to a specific form instance and ignore any globally configured themes. Which keyword should you use with `form_theme`?
    answers:
      -
        value: >
          `override`
        correct: false
      -
        value: >
          `only`
        correct: true
      -
        value: >
          `exclusive`
        correct: false
      -
        value: >
          `strict`
        correct: false
    help: |
      Adding the `only` keyword to the `form_theme` tag ensures that only the specified themes are applied, ignoring any themes configured globally.
      https://symfony.com/doc/current/form/form_themes.html#applying-multiple-themes

  -
    question: >
      What is the default name of the hidden CSRF token field in a Symfony form?
    answers:
      -
        value: >
          `_csrf`
        correct: false
      -
        value: >
          `_token`
        correct: true
      -
        value: >
          `_security_token`
        correct: false
      -
        value: >
          `_form_token`
        correct: false
    help: |
      By default, Symfony's CSRF protection adds a hidden field named `_token` to the form.
      https://symfony.com/doc/current/form/csrf_protection.html

  -
    question: >
      When a form field is defined with `mapped => false`, what does this signify?
    answers:
      -
        value: >
          The field's data will not be validated.
        correct: false
      -
        value: >
          The field will not be rendered in the Twig template.
        correct: false
      -
        value: >
          The field does not correspond to a property on the underlying data object.
        correct: true
      -
        value: >
          The field's data will be encrypted.
        correct: false
    help: |
      The `mapped` option, when set to `false`, indicates that a form field does not correspond to a property on the underlying object. This is useful for fields like "agree to terms" checkboxes.
      https://symfony.com/doc/current/forms.html#unmapped-fields

  -
    question: >
      Which built-in form type is typically used for a collection of embedded forms, such as a list of tags associated with a task?
    answers:
      -
        value: >
          `EntityType::class`
        correct: false
      -
        value: >
          `ArrayType::class`
        correct: false
      -
        value: >
          `CollectionType::class`
        correct: true
      -
        value: >
          `EmbeddedType::class`
        correct: false
    help: |
      The `CollectionType` is used to manage a collection of embedded forms, where each entry in the collection is an instance of another form type.
      https://symfony.com/doc/current/reference/forms/types/collection.html

  -
    question: >
      In a custom data transformer, which method is responsible for converting the data from the normalized format (e.g., `DateTime` object) to the format expected by the form (e.g., string)?
    answers:
      -
        value: >
          `transform()`
        correct: true
      -
        value: >
          `reverseTransform()`
        correct: false
      -
        value: >
          `normalize()`
        correct: false
      -
        value: >
          `denormalize()`
        correct: false
    help: |
      The `transform()` method in a data transformer converts the data from the model/normalized format to the format displayed in the form.
      https://symfony.com/doc/current/form/data_transformers.html#how-to-use-a-data-transformer

  -
    question: >
      You want to add an event listener to a form that modifies the form's fields based on user input *before* validation. Which method of `FormBuilderInterface` should you use?
    answers:
      -
        value: >
          `addEventSubscriber()`
        correct: true
      -
        value: >
          `addEventListener()`
        correct: true
      -
        value: >
          `addHook()`
        correct: false
      -
        value: >
          `attachListener()`
        correct: false
    help: |
      Both `addEventSubscriber()` (for subscribers) and `addEventListener()` (for individual listeners) can be used on the `FormBuilderInterface` to attach event listeners that respond to form events.
      https://symfony.com/doc/current/form/events.html#registering-event-listeners

  -
    question: >
      Which method in a Form Type Extension is used to specify which form types the extension applies to?
    answers:
      -
        value: >
          `getExtendedTypes()`
        correct: true
      -
        value: >
          `appliesTo()`
        correct: false
      -
        value: >
          `supports()`
        correct: false
      -
        value: >
          `extendForm()`
        correct: false
    help: |
      The `getExtendedTypes()` method in a form type extension must return an array of fully qualified class names of the form types it extends.
      https://symfony.com/doc/current/form/type_extensions.html#creating-a-form-type-extension

  -
    question: >
      What is the primary purpose of the `data_class` option in a Symfony form type?
    answers:
      -
        value: >
          To define the HTML class attribute for the form.
        correct: false
      -
        value: >
          To specify the PHP class that the form's data will be mapped to.
        correct: true
      -
        value: >
          To set the default data for the form.
        correct: false
      -
        value: >
          To enable or disable form validation.
        correct: false
    help: |
      The `data_class` option tells Symfony which class the form should map its data to and from.
      https://symfony.com/doc/current/forms.html#creating-form-classes

  -
    question: >
      After a successful form submission and validation, what is a common practice in a Symfony controller to prevent resubmission upon page refresh?
    answers:
      -
        value: >
          Render the form again with a success message.
        correct: false
      -
        value: >
          Redirect the user to another page (e.g., a success page or the entity's show page).
        correct: true
      -
        value: >
          Clear the form data using `$form->clear()`.
        correct: false
      -
        value: >
          Display a JavaScript alert.
        correct: false
    help: |
      The Post/Redirect/Get (PRG) pattern is a common practice to prevent duplicate form submissions. After a successful POST, the user is redirected to a GET request.
      https://symfony.com/doc/current/forms.html#handling-form-submissions

  -
    question: |
      Given the following Twig snippet, what will `form_widget(form.name, {'attr': {'class': 'my-input'}})` render?

      ```twig
      {{ form_widget(form.name, {'attr': {'class': 'my-input'}}) }}
      ```
    answers:
      -
        value: >
          `<input type="text" id="..." name="..." class="my-input" />`
        correct: true
      -
        value: >
          `<label for="...">Name</label><input type="text" id="..." name="..." class="my-input" />`
        correct: false
      -
        value: >
          Only the value of the `name` field.
        correct: false
      -
        value: >
          An error because `attr` is not a valid option for `form_widget`.
        correct: false
    help: |
      The `form_widget()` function renders only the HTML input element for a field. The `attr` option allows you to pass additional HTML attributes to the rendered widget.
      https://symfony.com/doc/current/form/form_customization.html#form-widget

  -
    question: >
      Which of the following built-in form types is suitable for selecting one or more options from a predefined list, typically rendered as a select box, radio buttons, or checkboxes?
    answers:
      -
        value: >
          `ChoiceType::class`
        correct: true
      -
        value: >
          `EntityType::class`
        correct: false
      -
        value: >
          `SelectType::class`
        correct: false
      -
        value: >
          `OptionType::class`
        correct: false
    help: |
      The `ChoiceType` is a versatile form type used for fields where the user chooses from a list of predefined options. It can render as a select tag, radio buttons, or checkboxes depending on its options.
      https://symfony.com/doc/current/reference/forms/types/choice.html

  -
    question: >
      What is the purpose of the `entry_type` option when using `CollectionType`?
    answers:
      -
        value: >
          To specify the HTML tag used for each entry.
        correct: false
      -
        value: >
          To define the data class for the entire collection.
        correct: false
      -
        value: >
          To specify the form type that will be used for each item in the collection.
        correct: true
      -
        value: >
          To set the default value for new entries.
        correct: false
    help: |
      The `entry_type` option in `CollectionType` specifies the form type that should be used to render and handle each individual item within the collection.
      https://symfony.com/doc/current/reference/forms/types/collection.html#entry-type

  -
    question: >
      When embedding one form type into another (e.g., `CategoryType` into `TaskType`), what is the correct way to add the embedded form?
    answers:
      -
        value: >
          `$builder->add('category', new CategoryType());`
        correct: false
      -
        value: >
          `$builder->add('category', CategoryType::class);`
        correct: true
      -
        value: >
          `$builder->embed('category', CategoryType::class);`
        correct: false
      -
        value: >
          `$builder->add('category', 'category_type');`
        correct: false
    help: |
      To embed a form type, you simply add it as a field to the parent form using its FQCN (Fully Qualified Class Name).
      https://symfony.com/doc/current/form/embedded_forms.html

  -
    question: >
      Which of the following built-in form types is specifically designed for selecting an entity from a database?
    answers:
      -
        value: >
          `ChoiceType::class`
        correct: false
      -
        value: >
          `EntityType::class`
        correct: true
      -
        value: >
          `DoctrineType::class`
        correct: false
      -
        value: >
          `ModelType::class`
        correct: false
    help: |
      The `EntityType` is a specialized `ChoiceType` that retrieves its choices from a Doctrine entity.
      https://symfony.com/doc/current/reference/forms/types/entity.html

  -
    question: >
      What is the purpose of the `#[AsCommand]` attribute in the context of Symfony forms?
    answers:
      -
        value: >
          It is not directly related to Symfony forms; it's for console commands.
        correct: true
      -
        value: >
          It registers a form type as a service.
        correct: false
      -
        value: >
          It defines a custom form validation constraint.
        correct: false
      -
        value: >
          It marks a form as a root form.
        correct: false
    help: |
      The `#[AsCommand]` attribute is used to register console commands, not directly related to the functionality or definition of Symfony forms.
      https://symfony.com/doc/current/console.html#configuring-the-command

  -
    question: >
      You are debugging a form and want to see all available form types, type extensions, and type guessers. Which console command would you use?
    answers:
      -
        value: >
          `php bin/console debug:form`
        correct: true
      -
        value: >
          `php bin/console form:list`
        correct: false
      -
        value: >
          `php bin/console form:debug`
        correct: false
      -
        value: >
          `php bin/console debug:container --tag=form.type`
        correct: false
    help: |
      The `debug:form` command provides detailed information about registered form types, type extensions, and type guessers.
      https://symfony.com/doc/current/forms.html#listing-available-form-types

  -
    question: >
      When defining a form field, what is the default value for the `required` option if not explicitly set?
    answers:
      -
        value: >
          `true`
        correct: true
      -
        value: >
          `false`
        correct: false
      -
        value: >
          `null`
        correct: false
      -
        value: >
          It depends on the field type.
        correct: false
    help: |
      By default, most form fields are `required` unless explicitly set to `false`. This means the HTML `required` attribute will be rendered, and client-side validation will apply.
      https://symfony.com/doc/current/reference/forms/types/form.html#required

  -
    question: >
      Which Twig function is used to render only the HTML input element (widget) of a form field, without its label or errors?
    answers:
      -
        value: >
          `form_row(form.field)`
        correct: false
      -
        value: >
          `form_widget(form.field)`
        correct: true
      -
        value: >
          `form_input(form.field)`
        correct: false
      -
        value: >
          `form_element(form.field)`
        correct: false
    help: |
      The `form_widget()` function renders only the HTML input element for a given form field.
      https://symfony.com/doc/current/form/form_customization.html#form-widget

  -
    question: >
      What is the primary purpose of the `POST_SET_DATA` event in Symfony forms?
    answers:
      -
        value: >
          To modify the form's data after it has been submitted by the user.
        correct: false
      -
        value: >
          To perform actions after the form's data has been set to the underlying object.
        correct: true
      -
        value: >
          To add or remove fields dynamically before the form is rendered.
        correct: false
      -
        value: >
          To validate the form's data.
        correct: false
    help: |
      The `POST_SET_DATA` event is dispatched after the form's data has been set to the underlying object. It's useful for performing actions that depend on the initial data.
      https://symfony.com/doc/current/form/events.html#post-set-data

  -
    question: >
      When creating a custom form type, which base class should it extend?
    answers:
      -
        value: >
          `Symfony\Component\Form\FormType`
        correct: false
      -
        value: >
          `Symfony\Component\Form\Extension\Core\Type\FormType`
        correct: false
      -
        value: >
          `Symfony\Component\Form\AbstractType`
        correct: true
      -
        value: >
          `Symfony\Component\Form\Form`
        correct: false
    help: |
      All custom form types in Symfony should extend `Symfony\Component\Form\AbstractType`.
      https://symfony.com/doc/current/forms.html#creating-form-classes

  -
    question: >
      Which of the following built-in form types is typically used for a single line of text input?
    answers:
      -
        value: >
          `TextareaType::class`
        correct: false
      -
        value: >
          `StringType::class`
        correct: false
      -
        value: >
          `TextType::class`
        correct: true
      -
        value: >
          `InputType::class`
        correct: false
    help: |
      The `TextType` is the most common form type for rendering a single-line text input field (`<input type="text">`).
      https://symfony.com/doc/current/reference/forms/types/text.html

  -
    question: >
      What is the purpose of the `block_name` option in a form field, especially when dealing with form theming?
    answers:
      -
        value: >
          To define the HTML `id` attribute for the field.
        correct: false
      -
        value: >
          To specify a custom Twig block name for rendering that specific field.
        correct: true
      -
        value: >
          To group fields together for validation.
        correct: false
      -
        value: >
          To set the default value of the field.
        correct: false
    help: |
      The `block_name` option allows you to override the default block name used for rendering a form field in Twig, giving you more granular control over theming.
      https://symfony.com/doc/current/form/form_themes.html#customizing-individual-fields

  -
    question: >
      When implementing a custom data transformer, which method is responsible for converting the submitted data (e.g., string from form) back to the format expected by the underlying model (e.g., `DateTime` object)?
    answers:
      -
        value: >
          `transform()`
        correct: false
      -
        value: >
          `reverseTransform()`
        correct: true
      -
        value: >
          `convertBack()`
        correct: false
      -
        value: >
          `denormalize()`
        correct: false
    help: |
      The `reverseTransform()` method in a data transformer converts the submitted data from the form's format back to the model's format.
      https://symfony.com/doc/current/form/data_transformers.html#how-to-use-a-data-transformer

  -
    question: >
      Which of the following built-in form types is used to render a large multiline text input area?
    answers:
      -
        value: >
          `TextType::class`
        correct: false
      -
        value: >
          `StringType::class`
        correct: false
      -
        value: >
          `TextareaType::class`
        correct: true
      -
        value: >
          `LongTextType::class`
        correct: false
    help: |
      The `TextareaType` is used to render a `<textarea>` HTML element for multiline text input.
      https://symfony.com/doc/current/reference/forms/types/textarea.html

  -
    question: >
      What is the purpose of the `empty_data` option in a form field?
    answers:
      -
        value: >
          To set the placeholder text for an empty field.
        correct: false
      -
        value: >
          To define the value that will be used if the field is submitted empty.
        correct: true
      -
        value: >
          To clear the field's data after submission.
        correct: false
      -
        value: >
          To mark the field as optional.
        correct: false
    help: |
      The `empty_data` option allows you to specify the value that will be returned by `getData()` for a field if its submitted value is empty. This is particularly useful for fields that map to objects.
      https://symfony.com/doc/current/reference/forms/types/form.html#empty-data

  -
    question: >
      Which built-in form type is used for a checkbox input?
    answers:
      -
        value: >
          `BooleanType::class`
        correct: false
      -
        value: >
          `ToggleType::class`
        correct: false
      -
        value: >
          `CheckboxType::class`
        correct: true
      -
        value: >
          `SwitchType::class`
        correct: false
    help: |
      The `CheckboxType` is used to render a single checkbox (`<input type="checkbox">`).
      https://symfony.com/doc/current/reference/forms/types/checkbox.html

  -
    question: >
      You want to add a custom HTML attribute (e.g., `data-controller="my-js"`) to the `<input>` tag of a form field when rendering it in Twig. How would you achieve this using `form_widget`?
    answers:
      -
        value: >
          `{{ form_widget(form.field, {'data-controller': 'my-js'}) }}`
        correct: false
      -
        value: >
          `{{ form_widget(form.field, {'attr': {'data-controller': 'my-js'}}) }}`
        correct: true
      -
        value: >
          `{{ form_widget(form.field, {'html_attr': {'data-controller': 'my-js'}}) }}`
        correct: false
      -
        value: >
          `{{ form_widget(form.field, {'options': {'data-controller': 'my-js'}}) }}`
        correct: false
    help: |
      The `attr` option within `form_widget()` allows you to pass an array of HTML attributes that will be applied directly to the rendered input element.
      https://symfony.com/doc/current/form/form_customization.html#form-widget

  -
    question: >
      What is the purpose of the `form_parent(form_view)` Twig function?
    answers:
      -
        value: >
          To get the name of the parent form.
        correct: false
      -
        value: >
          To check if a form has a parent.
        correct: false
      -
        value: >
          To return the parent form view of a given form view, or `null` if it's the root form.
        correct: true
      -
        value: >
          To render the parent form.
        correct: false
    help: |
      The `form_parent()` Twig function is a reliable way to get the parent form view, which is useful for conditional rendering in themes.
      https://symfony.com/doc/current/form/form_customization.html#checking-if-a-form-is-the-root-form

  -
    question: >
      Which of the following built-in form types is suitable for a password input field?
    answers:
      -
        value: >
          `TextType::class`
        correct: false
      -
        value: >
          `SecretType::class`
        correct: false
      -
        value: >
          `PasswordType::class`
        correct: true
      -
        value: >
          `HiddenType::class`
        correct: false
    help: |
      The `PasswordType` is specifically designed for password input fields, rendering an `<input type="password">` element.
      https://symfony.com/doc/current/reference/forms/types/password.html

  -
    question: >
      When using a custom form theme, what is the correct Twig block name for customizing the rendering of a specific form field's errors (e.g., for a field named `email`)?
    answers:
      -
        value: >
          `form_errors_email`
        correct: false
      -
        value: >
          `email_errors`
        correct: false
      -
        value: >
          `_email_errors`
        correct: false
      -
        value: >
          `email_row_errors`
        correct: false
    help: |
      The standard naming convention for customizing errors for a specific field is `[field_name]_errors`.
      https://symfony.com/doc/current/form/form_themes.html#form-field-blocks

  -
    question: >
      What is the purpose of the `TRANSLATION_DOMAIN` option in a form type?
    answers:
      -
        value: >
          To define the domain for form field labels and error messages for translation.
        correct: true
      -
        value: >
          To specify the database table for form data.
        correct: false
      -
        value: >
          To set the default locale for the form.
        correct: false
      -
        value: >
          To enable or disable translation for the form.
        correct: false
    help: |
      The `translation_domain` option specifies the message domain used for translating labels, help messages, and error messages associated with the form.
      https://symfony.com/doc/current/reference/forms/types/form.html#translation-domain

  -
    question: >
      Which built-in form type is used for a date input field, allowing various rendering options (text, single_text, choice)?
    answers:
      -
        value: >
          `DateTimeType::class`
        correct: false
      -
        value: >
          `DateType::class`
        correct: true
      -
        value: >
          `CalendarType::class`
        correct: false
      -
        value: >
          `DatePickerType::class`
        correct: false
    help: |
      The `DateType` is used for date input fields and offers different rendering options, including a single text input, or multiple select boxes for year, month, and day.
      https://symfony.com/doc/current/reference/forms/types/date.html

  -
    question: >
      What is the correct way to pass custom options from a controller to a form type when creating the form?
    answers:
      -
        value: >
          `$form = $this->createForm(TaskType::class, $task, ['custom_option' => 'value']);`
        correct: true
      -
        value: >
          `$form = $this->createForm(TaskType::class, $task)->setOption('custom_option', 'value');`
        correct: false
      -
        value: >
          `$form = $this->createForm(TaskType::class, $task, ['options' => ['custom_option' => 'value']]);`
        correct: false
      -
        value: >
          `$form = $this->createForm(TaskType::class, $task)->addOption('custom_option', 'value');`
        correct: false
    help: |
      Custom options are passed as the third argument (an array) to the `createForm()` method. These options are then available in the `buildForm()` and `configureOptions()` methods of the form type.
      https://symfony.com/doc/current/forms.html#passing-options-to-a-form-type

  -
    question: >
      Which built-in form type is used for a number input field?
    answers:
      -
        value: >
          `IntegerType::class`
        correct: false
      -
        value: >
          `FloatType::class`
        correct: false
      -
        value: >
          `NumberType::class`
        correct: true
      -
        value: >
          `NumericType::class`
        correct: false
    help: |
      The `NumberType` is used for numerical input fields, allowing for both integer and float values.
      https://symfony.com/doc/current/reference/forms/types/number.html

  -
    question: >
      What is the purpose of the `label` option in a form field?
    answers:
      -
        value: >
          To define the HTML `id` attribute for the label.
        correct: false
      -
        value: >
          To set the text displayed for the field's label.
        correct: true
      -
        value: >
          To associate the label with a specific CSS class.
        correct: false
      -
        value: >
          To make the field required.
        correct: false
    help: |
      The `label` option is used to set the text that will be displayed as the label for the form field.
      https://symfony.com/doc/current/reference/forms/types/form.html#label

  -
    question: >
      Which built-in form type is used for a submit button?
    answers:
      -
        value: >
          `ButtonType::class`
        correct: false
      -
        value: >
          `SubmitType::class`
        correct: true
      -
        value: >
          `ActionType::class`
        correct: false
      -
        value: >
          `FormButtonType::class`
        correct: false
    help: |
      The `SubmitType` is used to create a submit button for the form.
      https://symfony.com/doc/current/reference/forms/types/submit.html

  -
    question: >
      What is the primary difference between `form_widget(form.field)` and `form_row(form.field)` in Twig?
    answers:
      -
        value: >
          `form_widget` renders the label and errors, while `form_row` only renders the input.
        correct: false
      -
        value: >
          `form_widget` renders only the input element, while `form_row` renders the label, errors, and input.
        correct: true
      -
        value: >
          `form_widget` is for single fields, `form_row` is for collections.
        correct: false
      -
        value: >
          There is no functional difference; they are aliases.
        correct: false
    help: |
      `form_widget` renders just the HTML input element. `form_row` is a convenience helper that renders the label, errors, and widget for a field, typically wrapped in a `div`.
      https://symfony.com/doc/current/form/form_customization.html#form-widget

  -
    question: >
      Which of the following built-in form types is used for an email input field?
    answers:
      -
        value: >
          `TextType::class`
        correct: false
      -
        value: >
          `EmailType::class`
        correct: true
      -
        value: >
          `MailType::class`
        correct: false
      -
        value: >
          `ContactType::class`
        correct: false
    help: |
      The `EmailType` is specifically designed for email input fields, rendering an `<input type="email">` element.
      https://symfony.com/doc/current/reference/forms/types/email.html

  -
    question: >
      What is the purpose of the `attr` option when defining a form field in `buildForm()`?
    answers:
      -
        value: >
          To add HTML attributes directly to the rendered input element.
        correct: true
      -
        value: >
          To define the data attributes for the field.
        correct: false
      -
        value: >
          To specify the CSS class for the field's label.
        correct: false
      -
        value: >
          To set the `id` attribute of the field.
        correct: false
    help: |
      The `attr` option in a form field's definition allows you to pass an array of HTML attributes that will be applied to the rendered HTML input element.
      https://symfony.com/doc/current/reference/forms/types/form.html#attr

  -
    question: >
      Which form event is dispatched *after* the form has been submitted and its data has been mapped to the underlying object, but *before* validation?
    answers:
      -
        value: >
          `FormEvents::PRE_SET_DATA`
        correct: false
      -
        value: >
          `FormEvents::POST_SET_DATA`
        correct: false
      -
        value: >
          `FormEvents::PRE_SUBMIT`
        correct: false
      -
        value: >
          `FormEvents::POST_SUBMIT`
        correct: false
    help: |
      The `FormEvents::POST_SUBMIT` event is dispatched after the form has been submitted and its data mapped, but before validation. This is incorrect. The correct event for *before* validation is `PRE_SUBMIT`. `POST_SUBMIT` is *after* validation. Let me re-evaluate this.

      Re-evaluation:
      - `PRE_SET_DATA`: Before data is set to form.
      - `POST_SET_DATA`: After data is set to form.
      - `PRE_SUBMIT`: After request data is submitted, but before it's mapped to form fields. This is where you modify form structure based on submitted data.
      - `POST_SUBMIT`: After data is submitted and mapped, and *after* validation.

      The question asks for "after the form has been submitted and its data has been mapped to the underlying object, but *before* validation". This implies a state where the data is already on the object but not yet validated. This is actually `POST_SUBMIT` if the validation happens *after* the `POST_SUBMIT` listener. However, the documentation states `POST_SUBMIT` happens *after* validation.

      Let's check the lifecycle again.
      1. `PRE_SET_DATA`
      2. `POST_SET_DATA`
      3. `PRE_SUBMIT` (raw data from request)
      4. `SUBMIT` (data transformed, mapped to object)
      5. `POST_SUBMIT` (after data is mapped, and after validation)

      The phrasing "after the form has been submitted and its data has been mapped to the underlying object, but *before* validation" is tricky. If validation is part of `isValid()`, then `POST_SUBMIT` occurs *after* `isValid()` is checked internally.

      Let's rephrase the question or the answer.
      The standard flow is: `handleRequest` -> `PRE_SUBMIT` -> `SUBMIT` -> `POST_SUBMIT`.
      Validation happens *after* `SUBMIT` and before `POST_SUBMIT` in the internal flow, or when `isValid()` is called.

      If the question implies an event that allows modification *before* the final validation check by `isValid()`, then `PRE_SUBMIT` is the closest for modifying the form itself based on raw submitted data. If it's about the *object* data, then it's more complex.

      Let's assume the question refers to the state of the form object *before* the `isValid()` method is explicitly called by the developer.

      The `POST_SUBMIT` event is triggered *after* the form has been submitted and the data has been mapped to the underlying object. At this point, the data is on the object, and *then* validation typically occurs when `isValid()` is called. So, `POST_SUBMIT` is indeed *before* the explicit `isValid()` check in the controller, but internally, some validation might have already run.

      Let's stick to the common understanding that `POST_SUBMIT` is the last event in the submission process before the developer calls `isValid()`.

      The documentation states: "The `POST_SUBMIT` event is dispatched after the form has been submitted and its data has been mapped to the underlying object. This event is dispatched even if the submitted data is not valid. This event is useful for performing actions that depend on the submitted data, such as saving the data to the database, or sending an email." This implies validation has already happened or is about to happen.

      Let's reconsider the phrasing "but *before* validation". This is the tricky part.
      If the question means "before the final validation results are available via `isValid()`", then `POST_SUBMIT` is correct.
      If it means "before any validation logic runs", then it's `PRE_SUBMIT`.

      Given the options, and the typical use case for `POST_SUBMIT` (acting on the mapped data), it's often used *before* the `if ($form->isValid())` check in the controller, but after the internal mapping.

      Let's re-read the doc for `POST_SUBMIT`: "This event is dispatched even if the submitted data is not valid." This confirms it happens *before* the `isValid()` check determines the overall validity. So, the data is mapped, and then `POST_SUBMIT` fires, and *then* `isValid()` is called.

      Therefore, `POST_SUBMIT` is the correct answer.

    answers:
      -
        value: >
          `FormEvents::PRE_SET_DATA`
        correct: false
      -
        value: >
          `FormEvents::POST_SET_DATA`
        correct: false
      -
        value: >
          `FormEvents::PRE_SUBMIT`
        correct: false
      -
        value: >
          `FormEvents::POST_SUBMIT`
        correct: true
    help: |
      The `FormEvents::POST_SUBMIT` event is dispatched after the form has been submitted and its data has been mapped to the underlying object. This event occurs even if the submitted data is not valid, making it suitable for actions that need to access the mapped data before the final validation check.
      https://symfony.com/doc/current/form/events.html#post-submit

  -
    question: >
      What is the purpose of the `help` option in a form field?
    answers:
      -
        value: >
          To provide a tooltip for the field.
        correct: false
      -
        value: >
          To display additional descriptive text or instructions below the field.
        correct: true
      -
        value: >
          To link to external documentation for the field.
        correct: false
      -
        value: >
          To define a custom error message for the field.
        correct: false
    help: |
      The `help` option allows you to provide additional descriptive text or instructions that will be displayed below the form field.
      https://symfony.com/doc/current/reference/forms/types/form.html#help

  -
    question: >
      Which built-in form type is used for a hidden input field?
    answers:
      -
        value: >
          `InvisibleType::class`
        correct: false
      -
        value: >
          `HiddenType::class`
        correct: true
      -
        value: >
          `SecretType::class`
        correct: false
      -
        value: >
          `BlindType::class`
        correct: false
    help: |
      The `HiddenType` is used to render an `<input type="hidden">` element, which is not visible to the user but can store data.
      https://symfony.com/doc/current/reference/forms/types/hidden.html

  -
    question: >
      When creating a form without a data class (e.g., using `createFormBuilder([])`), how can you retrieve the submitted data?
    answers:
      -
        value: >
          The data is automatically available in `$request->request->all()`.
        correct: false
      -
        value: >
          Call `$form->getData()`, which will return an associative array.
        correct: true
      -
        value: >
          You cannot retrieve data from forms without a data class.
        correct: false
      -
        value: >
          Call `$form->getRawData()`.
        correct: false
    help: |
      Even when a form is not bound to a specific data class, `getData()` will return the submitted data as an associative array.
      https://symfony.com/doc/current/forms.html#forms-without-a-class

  -
    question: >
      What is the purpose of the `label_attr` option in a form field?
    answers:
      -
        value: >
          To add HTML attributes to the input element.
        correct: false
      -
        value: >
          To add HTML attributes to the `label` element associated with the field.
        correct: true
      -
        value: >
          To define the label text.
        correct: false
      -
        value: >
          To set the `for` attribute of the label.
        correct: false
    help: |
      The `label_attr` option allows you to pass an array of HTML attributes that will be applied to the `<label>` element rendered for the form field.
      https://symfony.com/doc/current/reference/forms/types/form.html#label-attr

  -
    question: >
      Which of the following built-in form types is used for a URL input field?
    answers:
      -
        value: >
          `TextType::class`
        correct: false
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `placeholder` option in a form field?
    answers:
      -
        value: >
          To set the default value of the field.
        correct: false
      -
        value: >
          To display a hint or example text inside the input field when it's empty.
        correct: true
      -
        value: >
          To define a fallback value if the field is not submitted.
        correct: false
      -
        value: >
          To mark the field as optional.
        correct: false
    help: |
      The `placeholder` option sets the `placeholder` HTML attribute, which displays a short hint in the input field before the user enters a value.
      https://symfony.com/doc/current/reference/forms/types/form.html#placeholder

  -
    question: >
      Which built-in form type is used for a range input field (slider)?
    answers:
      -
        value: >
          `SliderType::class`
        correct: false
      -
        value: >
          `RangeType::class`
        correct: true
      -
        value: >
          `ScaleType::class`
        correct: false
      -
        value: >
          `ValueType::class`
        correct: false
    help: |
      The `RangeType` is used to render an `<input type="range">` element, typically displayed as a slider.
      https://symfony.com/doc/current/reference/forms/types/range.html

  -
    question: >
      What is the purpose of the `disabled` option in a form field?
    answers:
      -
        value: >
          To prevent the field from being rendered.
        correct: false
      -
        value: >
          To make the field read-only and prevent user interaction.
        correct: true
      -
        value: >
          To hide the field from the user.
        correct: false
      -
        value: >
          To remove the field from validation.
        correct: false
    help: |
      When the `disabled` option is set to `true`, the field will be rendered with the HTML `disabled` attribute, preventing user interaction and making its value not submitted.
      https://symfony.com/doc/current/reference/forms/types/form.html#disabled

  -
    question: >
      Which built-in form type is used for a color input field?
    answers:
      -
        value: >
          `ColorPickerType::class`
        correct: false
      -
        value: >
          `SwatchType::class`
        correct: false
      -
        value: >
          `ColorType::class`
        correct: true
      -
        value: >
          `PaletteType::class`
        correct: false
    help: |
      The `ColorType` is used to render an `<input type="color">` element, allowing users to select a color.
      https://symfony.com/doc/current/reference/forms/types/color.html

  -
    question: >
      What is the purpose of the `read_only` option in a form field?
    answers:
      -
        value: >
          To prevent the field's value from being submitted.
        correct: false
      -
        value: >
          To make the field's value uneditable by the user, but still allow it to be submitted.
        correct: true
      -
        value: >
          To hide the field from the user.
        correct: false
      -
        value: >
          To disable client-side validation for the field.
        correct: false
    help: |
      When the `read_only` option is set to `true`, the field will be rendered with the HTML `readonly` attribute, preventing user modification but still allowing its value to be submitted.
      https://symfony.com/doc/current/reference/forms/types/form.html#read-only

  -
    question: >
      Which built-in form type is used for a search input field?
    answers:
      -
        value: >
          `TextType::class`
        correct: false
      -
        value: >
          `QueryType::class`
        correct: false
      -
        value: >
          `SearchType::class`
        correct: true
      -
        value: >
          `FilterType::class`
        correct: false
    help: |
      The `SearchType` is used to render an `<input type="search">` element, which often includes browser-specific styling for search fields.
      https://symfony.com/doc/current/reference/forms/types/search.html

  -
    question: >
      What is the purpose of the `row_attr` option in a form field?
    answers:
      -
        value: >
          To add HTML attributes to the input element.
        correct: false
      -
        value: >
          To add HTML attributes to the `div` element that wraps the label, widget, and errors when using `form_row()`.
        correct: true
      -
        value: >
          To define attributes for the entire form row.
        correct: false
      -
        value: >
          To set attributes for the field's errors.
        correct: false
    help: |
      The `row_attr` option allows you to pass an array of HTML attributes that will be applied to the `div` element (or other tag, depending on the theme) that wraps the label, widget, and errors when `form_row()` is used.
      https://symfony.com/doc/current/reference/forms/types/form.html#row-attr

  -
    question: >
      Which built-in form type is used for a time input field?
    answers:
      -
        value: >
          `DateTimeType::class`
        correct: false
      -
        value: >
          `TimeType::class`
        correct: true
      -
        value: >
          `ClockType::class`
        correct: false
      -
        value: >
          `HourType::class`
        correct: false
    help: |
      The `TimeType` is used for time input fields, allowing various rendering options (text, single_text, choice).
      https://symfony.com/doc/current/reference/forms/types/time.html

  -
    question: >
      What is the purpose of the `error_bubbling` option in a form field?
    answers:
      -
        value: >
          To display errors only at the top of the form.
        correct: false
      -
        value: >
          To prevent errors from being displayed for this field.
        correct: false
      -
        value: >
          To make errors for this field appear on the parent form or the form itself, rather than directly next to the field.
        correct: true
      -
        value: >
          To group errors from multiple fields together.
        correct: false
    help: |
      When `error_bubbling` is set to `true`, any errors for that field will "bubble up" and be displayed on the parent form or the form itself, instead of directly next to the field.
      https://symfony.com/doc/current/reference/forms/types/form.html#error-bubbling

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `compound` option in a form type?
    answers:
      -
        value: >
          To indicate that the form type is a collection of fields.
        correct: false
      -
        value: >
          To specify that the form type is composed of multiple child form types.
        correct: true
      -
        value: >
          To enable or disable CSRF protection for the form.
        correct: false
      -
        value: >
          To define if the form should be rendered as a single input or multiple inputs.
        correct: false
    help: |
      The `compound` option indicates whether the form type is a "compound" form type, meaning it's composed of multiple child fields. This is typically `true` for forms that contain other fields (like a `FormType` or a custom type with `add()` calls) and `false` for simple field types like `TextType`.
      https://symfony.com/doc/current/reference/forms/types/form.html#compound

  -
    question: >
      Which built-in form type is used for a week input field?
    answers:
      -
        value: >
          `DateType::class`
        correct: false
      -
        value: >
          `WeekType::class`
        correct: true
      -
        value: >
          `CalendarType::class`
        correct: false
      -
        value: >
          `PeriodType::class`
        correct: false
    help: |
      The `WeekType` is used to render an `<input type="week">` element, allowing users to select a week and year.
      https://symfony.com/doc/current/reference/forms/types/week.html

  -
    question: >
      What is the purpose of the `by_reference` option in a form field, especially with collections?
    answers:
      -
        value: >
          To pass the data by value instead of by reference.
        correct: false
      -
        value: >
          To determine if the setter method of the underlying object should be called when setting data.
        correct: true
      -
        value: >
          To specify if the field's data should be stored in the session.
        correct: false
      -
        value: >
          To link the field to a specific database reference.
        correct: false
    help: |
      The `by_reference` option determines whether the form should attempt to call the setter method (e.g., `setTags()`) on the underlying object or directly modify the collection (e.g., `getTags()->add()`). For collections, it's often set to `false` to allow direct manipulation of the collection.
      https://symfony.com/doc/current/reference/forms/types/form.html#by-reference

  -
    question: >
      Which built-in form type is used for a telephone number input field?
    answers:
      -
        value: >
          `TextType::class`
        correct: false
      -
        value: >
          `PhoneType::class`
        correct: false
      -
        value: >
          `TelType::class`
        correct: true
      -
        value: >
          `ContactType::class`
        correct: false
    help: |
      The `TelType` is used to render an `<input type="tel">` element, specifically for telephone numbers.
      https://symfony.com/doc/current/reference/forms/types/tel.html

  -
    question: >
      What is the purpose of the `inherit_data` option in a form type?
    answers:
      -
        value: >
          To inherit options from a parent form type.
        correct: false
      -
        value: >
          To make the form use the data of its parent form.
        correct: true
      -
        value: >
          To inherit validation constraints from the parent entity.
        correct: false
      -
        value: >
          To allow the form to be embedded in other forms.
        correct: false
    help: |
      When `inherit_data` is set to `true`, the form will use the same data object as its parent form, rather than creating its own. This is useful for forms that represent a subset of the parent's data.
      https://symfony.com/doc/current/reference/forms/types/form.html#inherit-data

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `auto_initialize` option in a form field?
    answers:
      -
        value: >
          To automatically populate the field with default data.
        correct: false
      -
        value: >
          To automatically initialize the form field when the form is created.
        correct: true
      -
        value: >
          To automatically validate the field on the client-side.
        correct: false
      -
        value: >
          To automatically add the field to the form builder.
        correct: false
    help: |
      The `auto_initialize` option, typically used internally or in advanced scenarios, controls whether the form field's internal data is initialized automatically when the form is built.
      https://symfony.com/doc/current/reference/forms/types/form.html#auto-initialize

  -
    question: >
      Which built-in form type is used for a file input field?
    answers:
      -
        value: >
          `UploadType::class`
        correct: false
      -
        value: >
          `AttachmentType::class`
        correct: false
      -
        value: >
          `FileType::class`
        correct: true
      -
        value: >
          `DocumentType::class`
        correct: false
    help: |
      The `FileType` is the built-in form type specifically designed for handling file uploads.
      https://symfony.com/doc/current/reference/forms/types/file.html

  -
    question: >
      What is the purpose of the `mapped` option in a form field?
    answers:
      -
        value: >
          To define if the field's value should be displayed in the browser.
        correct: false
      -
        value: >
          To indicate whether the field's data should be mapped to a property of the underlying data object.
        correct: true
      -
        value: >
          To specify the database column the field maps to.
        correct: false
      -
        value: >
          To control if the field is part of the form's validation.
        correct: false
    help: |
      The `mapped` option determines whether the field's data is read from and written to the underlying data object. If `false`, the field's data is not mapped to the object.
      https://symfony.com/doc/current/forms.html#unmapped-fields

  -
    question: >
      Which built-in form type is used for a hidden input field?
    answers:
      -
        value: >
          `InvisibleType::class`
        correct: false
      -
        value: >
          `HiddenType::class`
        correct: true
      -
        value: >
          `SecretType::class`
        correct: false
      -
        value: >
          `BlindType::class`
        correct: false
    help: |
      The `HiddenType` is used to render an `<input type="hidden">` element.
      https://symfony.com/doc/current/reference/forms/types/hidden.html

  -
    question: >
      What is the purpose of the `constraints` option when defining a form field?
    answers:
      -
        value: >
          To apply validation rules directly to the form field.
        correct: true
      -
        value: >
          To limit the number of characters allowed in the field.
        correct: false
      -
        value: >
          To restrict the type of data that can be entered.
        correct: false
      -
        value: >
          To define database constraints for the associated entity property.
        correct: false
    help: |
      The `constraints` option allows you to apply one or more validation constraints directly to a form field, which will be checked when the form is validated.
      https://symfony.com/doc/current/forms.html#form-validation

  -
    question: >
      Which built-in form type is used for a datetime input field?
    answers:
      -
        value: >
          `DateType::class`
        correct: false
      -
        value: >
          `TimeType::class`
        correct: false
      -
        value: >
          `DateTimeType::class`
        correct: true
      -
        value: >
          `TimestampType::class`
        correct: false
    help: |
      The `DateTimeType` is used for date and time input fields, allowing various rendering options.
      https://symfony.com/doc/current/reference/forms/types/datetime.html

  -
    question: >
      What is the purpose of the `property_path` option in a form field?
    answers:
      -
        value: >
          To specify the HTML `name` attribute of the field.
        correct: false
      -
        value: >
          To override the default property name on the underlying data object that the field maps to.
        correct: true
      -
        value: >
          To define the path to the Twig template for rendering the field.
        correct: false
      -
        value: >
          To set the validation group for the field.
        correct: false
    help: |
      The `property_path` option allows you to explicitly define which property on the underlying data object the form field should read from and write to, overriding the default behavior (which uses the field's name).
      https://symfony.com/doc/current/reference/forms/types/form.html#property-path

  -
    question: >
      Which built-in form type is used for a checkbox input field?
    answers:
      -
        value: >
          `BooleanType::class`
        correct: false
      -
        value: >
          `ToggleType::class`
        correct: false
      -
        value: >
          `CheckboxType::class`
        correct: true
      -
        value: >
          `SwitchType::class`
        correct: false
    help: |
      The `CheckboxType` is used to render a single checkbox (`<input type="checkbox">`).
      https://symfony.com/doc/current/reference/forms/types/checkbox.html

  -
    question: >
      What is the purpose of the `validation_groups` option in a form?
    answers:
      -
        value: >
          To define which fields should be validated.
        correct: false
      -
        value: >
          To specify a subset of validation constraints to apply during form submission.
        correct: true
      -
        value: >
          To group form fields for rendering purposes.
        correct: false
      -
        value: >
          To enable or disable all validation for the form.
        correct: false
    help: |
      The `validation_groups` option allows you to specify which validation groups should be applied when the form is validated, enabling conditional validation.
      https://symfony.com/doc/current/forms.html#validation-groups

  -
    question: >
      Which built-in form type is used for a collection of file uploads?
    answers:
      -
        value: >
          `CollectionType::class` with `entry_type` set to `FileType::class`.
        correct: true
      -
        value: >
          `MultiFileType::class`
        correct: false
      -
        value: >
          `FilesType::class`
        correct: false
      -
        value: >
          `CollectionType::class` with `entry_type` set to `UploadType::class`.
        correct: false
    help: |
      To handle multiple file uploads, you use the `CollectionType` and set its `entry_type` option to `FileType::class`.
      https://symfony.com/doc/current/reference/forms/types/collection.html

  -
    question: >
      What is the purpose of the `csrf_token_id` option in a form?
    answers:
      -
        value: >
          To define the HTML `id` attribute for the CSRF token field.
        correct: false
      -
        value: >
          To set a unique identifier for the CSRF token, useful for forms that share the same token.
        correct: true
      -
        value: >
          To enable or disable CSRF protection.
        correct: false
      -
        value: >
          To specify the name of the CSRF token field.
        correct: false
    help: |
      The `csrf_token_id` option allows you to set a custom identifier for the CSRF token. This is particularly useful when you have multiple forms on a page and want them to share the same CSRF token.
      https://symfony.com/doc/current/reference/forms/types/form.html#csrf-token-id

  -
    question: >
      Which built-in form type is used for a button that resets the form?
    answers:
      -
        value: >
          `ButtonType::class`
        correct: false
      -
        value: >
          `ResetType::class`
        correct: true
      -
        value: >
          `ClearType::class`
        correct: false
      -
        value: >
          `CancelType::class`
        correct: false
    help: |
      The `ResetType` is used to create a reset button (`<input type="reset">`) that clears the form fields.
      https://symfony.com/doc/current/reference/forms/types/reset.html

  -
    question: >
      What is the purpose of the `action` option in a form?
    answers:
      -
        value: >
          To define the HTTP method for form submission.
        correct: false
      -
        value: >
          To specify the URL where the form data will be submitted.
        correct: true
      -
        value: >
          To set the name of the controller action that handles the form.
        correct: false
      -
        value: >
          To define a JavaScript function to execute on form submission.
        correct: false
    help: |
      The `action` option sets the `action` attribute of the `<form>` tag, specifying the URL to which the form data will be submitted.
      https://symfony.com/doc/current/reference/forms/types/form.html#action

  -
    question: >
      Which built-in form type is used for a button that performs a client-side action without submitting the form?
    answers:
      -
        value: >
          `SubmitType::class`
        correct: false
      -
        value: >
          `ResetType::class`
        correct: false
      -
        value: >
          `ButtonType::class`
        correct: true
      -
        value: >
          `ActionType::class`
        correct: false
    help: |
      The `ButtonType` is used to create a generic button (`<button type="button">`) that does not submit the form by default, often used for JavaScript interactions.
      https://symfony.com/doc/current/reference/forms/types/button.html

  -
    question: >
      What is the purpose of the `method` option in a form?
    answers:
      -
        value: >
          To define the HTTP method for form submission (e.g., `GET`, `POST`).
        correct: true
      -
        value: >
          To specify the controller method that handles the form.
        correct: false
      -
        value: >
          To set the JavaScript method to call on form submission.
        correct: false
      -
        value: >
          To define the data transformation method.
        correct: false
    help: |
      The `method` option sets the `method` attribute of the `<form>` tag, specifying the HTTP method (e.g., `POST`, `GET`) used for form submission.
      https://symfony.com/doc/current/reference/forms/types/form.html#method

  -
    question: >
      Which built-in form type is used for a month input field?
    answers:
      -
        value: >
          `DateType::class`
        correct: false
      -
        value: >
          `MonthType::class`
        correct: true
      -
        value: >
          `CalendarType::class`
        correct: false
      -
        value: >
          `PeriodType::class`
        correct: false
    help: |
      The `MonthType` is used to render an `<input type="month">` element, allowing users to select a month and year.
      https://symfony.com/doc/current/reference/forms/types/month.html

  -
    question: >
      What is the purpose of the `html5` option in date and time types (e.g., `DateType`, `TimeType`, `DateTimeType`)?
    answers:
      -
        value: >
          To enable or disable client-side validation.
        correct: false
      -
        value: >
          To control whether the field renders an HTML5 input type (e.g., `<input type="date">`) or separate select boxes.
        correct: true
      -
        value: >
          To force the use of JavaScript date pickers.
        correct: false
      -
        value: >
          To enable or disable the display of seconds.
        correct: false
    help: |
      The `html5` option, when set to `true`, tells date and time types to render a single HTML5 input element (e.g., `<input type="date">`) instead of separate select boxes for year, month, day, etc.
      https://symfony.com/doc/current/reference/forms/types/date.html#html5

  -
    question: >
      Which built-in form type is used for a number input field with a specific step value?
    answers:
      -
        value: >
          `NumberType::class`
        correct: false
      -
        value: >
          `IntegerType::class`
        correct: false
      -
        value: >
          `RangeType::class`
        correct: false
      -
        value: >
          `NumberType::class` with `step` option.
        correct: true
    help: |
      The `NumberType` can be configured with a `step` option to define the granularity of the input value.
      https://symfony.com/doc/current/reference/forms/types/number.html#step

  -
    question: >
      What is the purpose of the `widget` option in date and time types?
    answers:
      -
        value: >
          To specify the HTML input type (e.g., `text`, `single_text`, `choice`).
        correct: true
      -
        value: >
          To define the CSS class for the widget.
        correct: false
      -
        value: >
          To enable or disable the display of the calendar icon.
        correct: false
      -
        value: >
          To set the default value of the widget.
        correct: false
    help: |
      The `widget` option in date and time types controls how the field is rendered: as a single text input (`single_text`), a text input with a date/time picker (`text`), or separate select boxes (`choice`).
      https://symfony.com/doc/current/reference/forms/types/date.html#widget

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `input` option in date and time types?
    answers:
      -
        value: >
          To specify the format of the data that the form expects from the underlying model (e.g., `string`, `datetime_immutable`).
        correct: true
      -
        value: >
          To define the HTML input type.
        correct: false
      -
        value: >
          To set the default value for the input.
        correct: false
      -
        value: >
          To control whether the field is required.
        correct: false
    help: |
      The `input` option in date and time types specifies the format in which the data is stored in the underlying model (e.g., `string`, `datetime`, `datetime_immutable`, `timestamp`).
      https://symfony.com/doc/current/reference/forms/types/date.html#input

  -
    question: >
      Which built-in form type is used for a number input field with a minimum and maximum value?
    answers:
      -
        value: >
          `NumberType::class` with `min` and `max` options.
        correct: true
      -
        value: >
          `RangeType::class`
        correct: false
      -
        value: >
          `IntegerType::class`
        correct: false
      -
        value: >
          `BoundedNumberType::class`
        correct: false
    help: |
      The `NumberType` can be configured with `min` and `max` options to define the allowed range of input values.
      https://symfony.com/doc/current/reference/forms/types/number.html#min-and-max

  -
    question: >
      What is the purpose of the `model_timezone` option in date and time types?
    answers:
      -
        value: >
          To specify the timezone of the data in the underlying model.
        correct: true
      -
        value: >
          To set the timezone for the user's input.
        correct: false
      -
        value: >
          To define the timezone for displaying the date/time.
        correct: false
      -
        value: >
          To convert the timezone of the submitted data.
        correct: false
    help: |
      The `model_timezone` option specifies the timezone in which the date/time data is stored in the underlying model.
      https://symfony.com/doc/current/reference/forms/types/date.html#model-timezone

  -
    question: >
      Which built-in form type is used for a number input field with a specific precision?
    answers:
      -
        value: >
          `NumberType::class` with `scale` option.
        correct: true
      -
        value: >
          `FloatType::class`
        correct: false
      -
        value: >
          `DecimalType::class`
        correct: false
      -
        value: >
          `PrecisionType::class`
        correct: false
    help: |
      The `NumberType` can be configured with a `scale` option to define the number of decimal places allowed.
      https://symfony.com/doc/current/reference/forms/types/number.html#scale

  -
    question: >
      What is the purpose of the `view_timezone` option in date and time types?
    answers:
      -
        value: >
          To specify the timezone in which the date/time data is displayed to the user.
        correct: true
      -
        value: >
          To set the timezone of the underlying model.
        correct: false
      -
        value: >
          To define the timezone for internal processing.
        correct: false
      -
        value: >
          To convert the timezone of the submitted data.
        correct: false
    help: |
      The `view_timezone` option specifies the timezone in which the date/time data is displayed to the user in the form.
      https://symfony.com/doc/current/reference/forms/types/date.html#view-timezone

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `format` option in date and time types when `widget` is set to `single_text`?
    answers:
      -
        value: >
          To define the HTML `input type` attribute.
        correct: false
      -
        value: >
          To specify the string format used for displaying and parsing the date/time.
        correct: true
      -
        value: >
          To set the default value of the field.
        correct: false
      -
        value: >
          To control the number of select boxes rendered.
        correct: false
    help: |
      When `widget` is `single_text`, the `format` option defines the string format (e.g., `yyyy-MM-dd`) used for displaying and parsing the date/time value in the single text input.
      https://symfony.com/doc/current/reference/forms/types/date.html#format

  -
    question: >
      Which built-in form type is used for a range input field (slider)?
    answers:
      -
        value: >
          `SliderType::class`
        correct: false
      -
        value: >
          `RangeType::class`
        correct: true
      -
        value: >
          `ScaleType::class`
        correct: false
      -
        value: >
          `ValueType::class`
        correct: false
    help: |
      The `RangeType` is used to render an `<input type="range">` element, typically displayed as a slider.
      https://symfony.com/doc/current/reference/forms/types/range.html

  -
    question: >
      What is the purpose of the `years`, `months`, `days`, `hours`, `minutes`, `seconds` options in date and time types when `widget` is set to `choice`?
    answers:
      -
        value: >
          To define the default values for each part of the date/time.
        correct: false
      -
        value: >
          To specify the available choices (e.g., range of years) for the select boxes.
        correct: true
      -
        value: >
          To set the order of the select boxes.
        correct: false
      -
        value: >
          To enable or disable specific select boxes.
        correct: false
    help: |
      When `widget` is `choice`, these options allow you to specify the exact choices (e.g., an array of years, months) that will be available in the respective select boxes.
      https://symfony.com/doc/current/reference/forms/types/date.html#years-months-days-hours-minutes-seconds

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `rounding_mode` option in `NumberType`?
    answers:
      -
        value: >
          To define how the number is rounded when displayed.
        correct: false
      -
        value: >
          To specify the rounding mode to use when transforming the value (e.g., `HALF_UP`, `DOWN`).
        correct: true
      -
        value: >
          To set the precision of the number.
        correct: false
      -
        value: >
          To control if the number is an integer or a float.
        correct: false
    help: |
      The `rounding_mode` option in `NumberType` specifies the rounding mode (e.g., `\NumberFormatter::ROUND_HALFUP`) to apply when the number is transformed.
      https://symfony.com/doc/current/reference/forms/types/number.html#rounding-mode

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `grouping` option in `NumberType`?
    answers:
      -
        value: >
          To group numbers for validation.
        correct: false
      -
        value: >
          To enable or disable the display of thousands separators.
        correct: true
      -
        value: >
          To define the number of decimal places.
        correct: false
      -
        value: >
          To control the input type (e.g., `text`, `number`).
        correct: false
    help: |
      The `grouping` option in `NumberType` determines whether thousands separators should be displayed when rendering the number.
      https://symfony.com/doc/current/reference/forms/types/number.html#grouping

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `trim` option in `TextType` and `TextareaType`?
    answers:
      -
        value: >
          To remove all whitespace from the input.
        correct: false
      -
        value: >
          To remove leading and trailing whitespace from the submitted string.
        correct: true
      -
        value: >
          To limit the length of the string.
        correct: false
      -
        value: >
          To convert the string to lowercase.
        correct: false
    help: |
      The `trim` option, when set to `true` (which is the default), automatically removes leading and trailing whitespace from the submitted string data for `TextType` and `TextareaType`.
      https://symfony.com/doc/current/reference/forms/types/text.html#trim

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `multiple` option in `ChoiceType`?
    answers:
      -
        value: >
          To allow the user to select multiple choices.
        correct: true
      -
        value: >
          To render the choices as radio buttons instead of a select box.
        correct: false
      -
        value: >
          To enable client-side validation for multiple selections.
        correct: false
      -
        value: >
          To display the choices in multiple columns.
        correct: false
    help: |
      When `multiple` is set to `true`, the `ChoiceType` will render a select box that allows multiple selections (or checkboxes if `expanded` is also `true`).
      https://symfony.com/doc/current/reference/forms/types/choice.html#multiple

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `expanded` option in `ChoiceType`?
    answers:
      -
        value: >
          To display the choices as radio buttons or checkboxes instead of a select box.
        correct: true
      -
        value: >
          To expand the height of the select box.
        correct: false
      -
        value: >
          To show all available choices at once.
        correct: false
      -
        value: >
          To enable a search filter for the choices.
        correct: false
    help: |
      When `expanded` is set to `true`, the `ChoiceType` will render the choices as radio buttons (if `multiple` is `false`) or checkboxes (if `multiple` is `true`). If `false`, it renders a select box.
      https://symfony.com/doc/current/reference/forms/types/choice.html#expanded

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `choices` option in `ChoiceType`?
    answers:
      -
        value: >
          To define the data source for the choices (e.g., from a database).
        correct: false
      -
        value: >
          To provide the list of available options for the choice field.
        correct: true
      -
        value: >
          To set the default selected choice.
        correct: false
      -
        value: >
          To enable a search filter for the choices.
        correct: false
    help: |
      The `choices` option is an array that defines the available options for the `ChoiceType` field. The keys are the labels displayed to the user, and the values are the actual data submitted.
      https://symfony.com/doc/current/reference/forms/types/choice.html#choices

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `choice_label` option in `ChoiceType`?
    answers:
      -
        value: >
          To define the HTML `label` attribute for each choice.
        correct: false
      -
        value: >
          To specify a property path or a callable that returns the label for each choice object.
        correct: true
      -
        value: >
          To set the default label for all choices.
        correct: false
      -
        value: >
          To translate the choice labels.
        correct: false
    help: |
      When `choices` are objects, `choice_label` is used to specify which property of the object (or a callable) should be used as the label displayed to the user.
      https://symfony.com/doc/current/reference/forms/types/choice.html#choice-label

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `choice_value` option in `ChoiceType`?
    answers:
      -
        value: >
          To define the HTML `value` attribute for each choice.
        correct: false
      -
        value: >
          To specify a property path or a callable that returns the underlying value for each choice object.
        correct: true
      -
        value: >
          To set the default value for all choices.
        correct: false
      -
        value: >
          To validate the choice values.
        correct: false
    help: |
      When `choices` are objects, `choice_value` is used to specify which property of the object (or a callable) should be used as the actual value submitted to the form.
      https://symfony.com/doc/current/reference/forms/types/choice.html#choice-value

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `preferred_choices` option in `ChoiceType`?
    answers:
      -
        value: >
          To mark certain choices as required.
        correct: false
      -
        value: >
          To display a subset of choices at the top of the list, separated from the rest.
        correct: true
      -
        value: >
          To pre-select certain choices by default.
        correct: false
      -
        value: >
          To disable certain choices.
        correct: false
    help: |
      The `preferred_choices` option allows you to define a subset of choices that will be displayed at the top of the list, typically separated by a divider, making them more prominent.
      https://symfony.com/doc/current/reference/forms/types/choice.html#preferred-choices

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `group_by` option in `ChoiceType`?
    answers:
      -
        value: >
          To group choices into optgroups based on a property path or callable.
        correct: true
      -
        value: >
          To define validation groups for choices.
        correct: false
      -
        value: >
          To sort the choices alphabetically.
        correct: false
      -
        value: >
          To filter choices based on a condition.
        correct: false
    help: |
      The `group_by` option allows you to group choices into HTML `<optgroup>` elements based on a property path or a callable, which is useful for organizing long lists of choices.
      https://symfony.com/doc/current/reference/forms/types/choice.html#group-by

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `placeholder` option in `ChoiceType`?
    answers:
      -
        value: >
          To define the default selected value.
        correct: false
      -
        value: >
          To display a "Please Select" or similar option at the top of the select box.
        correct: true
      -
        value: >
          To provide a tooltip for the select box.
        correct: false
      -
        value: >
          To enable a search filter for the choices.
        correct: false
    help: |
      The `placeholder` option in `ChoiceType` adds an empty option at the top of the select box, typically with text like "Choose an option" or "Please Select", which is useful for indicating that no option is selected.
      https://symfony.com/doc/current/reference/forms/types/choice.html#placeholder

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `query_builder` option in `EntityType`?
    answers:
      -
        value: >
          To define a custom DQL query to fetch the entities for the choices.
        correct: true
      -
        value: >
          To specify the entity manager to use.
        correct: false
      -
        value: >
          To set the default selected entity.
        correct: false
      -
        value: >
          To enable caching for the entity choices.
        correct: false
    help: |
      The `query_builder` option in `EntityType` allows you to provide a custom query builder instance or a callable that returns one, giving you fine-grained control over which entities are displayed as choices.
      https://symfony.com/doc/current/reference/forms/types/entity.html#query-builder

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `choice_attr` option in `ChoiceType`?
    answers:
      -
        value: >
          To add HTML attributes to the `<select>` element.
        correct: false
      -
        value: >
          To add HTML attributes to individual `<option>` or `<input type="radio/checkbox">` elements.
        correct: true
      -
        value: >
          To define the CSS class for the choices.
        correct: false
      -
        value: >
          To set the `id` attribute for each choice.
        correct: false
    help: |
      The `choice_attr` option allows you to provide an array or a callable that returns an array of HTML attributes to be applied to each individual choice element (e.g., `<option>`, `<input type="radio">`, `<input type="checkbox">`).
      https://symfony.com/doc/current/reference/forms/types/choice.html#choice-attr

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `error_mapping` option in a form?
    answers:
      -
        value: >
          To map validation errors to specific Twig templates.
        correct: false
      -
        value: >
          To map errors from one field to another, or to the form itself.
        correct: true
      -
        value: >
          To define custom error messages.
        correct: false
      -
        value: >
          To enable or disable error bubbling.
        correct: false
    help: |
      The `error_mapping` option allows you to remap validation errors from one property path to another, or to the form itself, which is useful for displaying errors in a more user-friendly way.
      https://symfony.com/doc/current/reference/forms/types/form.html#error-mapping

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `allow_add` option in `CollectionType`?
    answers:
      -
        value: >
          To allow new entries to be added to the collection by the user.
        correct: true
      -
        value: >
          To allow existing entries to be modified.
        correct: false
      -
        value: >
          To enable JavaScript for adding new collection items.
        correct: false
      -
        value: >
          To set the maximum number of entries allowed.
        correct: false
    help: |
      When `allow_add` is set to `true`, it signals that new entries can be added to the collection. This is typically used in conjunction with JavaScript to dynamically add new form rows.
      https://symfony.com/doc/current/reference/forms/types/collection.html#allow-add

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `allow_delete` option in `CollectionType`?
    answers:
      -
        value: >
          To allow existing entries to be removed from the collection by the user.
        correct: true
      -
        value: >
          To allow the entire collection to be deleted.
        correct: false
      -
        value: >
          To enable JavaScript for deleting collection items.
        correct: false
      -
        value: >
          To set the minimum number of entries allowed.
        correct: false
    help: |
      When `allow_delete` is set to `true`, it signals that existing entries can be removed from the collection. This is typically used with JavaScript to dynamically remove form rows.
      https://symfony.com/doc/current/reference/forms/types/collection.html#allow-delete

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `delete_empty` option in `CollectionType`?
    answers:
      -
        value: >
          To automatically remove entries from the collection if they are submitted with empty data.
        correct: true
      -
        value: >
          To prevent empty entries from being added to the collection.
        correct: false
      -
        value: >
          To delete the entire collection if it's empty.
        correct: false
      -
        value: >
          To hide empty entries from the display.
        correct: false
    help: |
      When `delete_empty` is set to `true`, if a submitted entry in a `CollectionType` is empty (e.g., all its fields are blank), that entry will be automatically removed from the collection.
      https://symfony.com/doc/current/reference/forms/types/collection.html#delete-empty

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `entry_options` option in `CollectionType`?
    answers:
      -
        value: >
          To pass options to the `CollectionType` itself.
        correct: false
      -
        value: >
          To pass options to each individual form type within the collection.
        correct: true
      -
        value: >
          To define options for new entries only.
        correct: false
      -
        value: >
          To set default options for all collection types.
        correct: false
    help: |
      The `entry_options` option is an array of options that will be passed to each individual form type instance (`entry_type`) within the collection.
      https://symfony.com/doc/current/reference/forms/types/collection.html#entry-options

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `prototype` option in `CollectionType`?
    answers:
      -
        value: >
          To define the initial number of entries in the collection.
        correct: false
      -
        value: >
          To render a template for new, dynamically added collection items.
        correct: true
      -
        value: >
          To specify the data for the first entry.
        correct: false
      -
        value: >
          To enable or disable the display of existing entries.
        correct: false
    help: |
      When `allow_add` is `true`, the `prototype` option, if enabled, renders a template for a new collection item. This HTML can then be used by JavaScript to dynamically add new form rows.
      https://symfony.com/doc/current/reference/forms/types/collection.html#prototype

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `translation_domain` option in a form?
    answers:
      -
        value: >
          To define the domain for form field labels and error messages for translation.
        correct: true
      -
        value: >
          To specify the database table for form data.
        correct: false
      -
        value: >
          To set the default locale for the form.
        correct: false
      -
        value: >
          To enable or disable translation for the form.
        correct: false
    help: |
      The `translation_domain` option specifies the message domain used for translating labels, help messages, and error messages associated with the form.
      https://symfony.com/doc/current/reference/forms/types/form.html#translation-domain

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `attr` option when defining a form field in `buildForm()`?
    answers:
      -
        value: >
          To add HTML attributes directly to the rendered input element.
        correct: true
      -
        value: >
          To define the data attributes for the field.
        correct: false
      -
        value: >
          To specify the CSS class for the field's label.
        correct: false
      -
        value: >
          To set the `id` attribute of the field.
        correct: false
    help: |
      The `attr` option in a form field's definition allows you to pass an array of HTML attributes that will be applied to the rendered HTML input element.
      https://symfony.com/doc/current/reference/forms/types/form.html#attr

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `label_attr` option in a form field?
    answers:
      -
        value: >
          To add HTML attributes to the input element.
        correct: false
      -
        value: >
          To add HTML attributes to the `label` element associated with the field.
        correct: true
      -
        value: >
          To define the label text.
        correct: false
      -
        value: >
          To set the `for` attribute of the label.
        correct: false
    help: |
      The `label_attr` option allows you to pass an array of HTML attributes that will be applied to the `<label>` element rendered for the form field.
      https://symfony.com/doc/current/reference/forms/types/form.html#label-attr

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `row_attr` option in a form field?
    answers:
      -
        value: >
          To add HTML attributes to the input element.
        correct: false
      -
        value: >
          To add HTML attributes to the `div` element that wraps the label, widget, and errors when using `form_row()`.
        correct: true
      -
        value: >
          To define attributes for the entire form row.
        correct: false
      -
        value: >
          To set attributes for the field's errors.
        correct: false
    help: |
      The `row_attr` option allows you to pass an array of HTML attributes that will be applied to the `div` element (or other tag, depending on the theme) that wraps the label, widget, and errors when `form_row()` is used.
      https://symfony.com/doc/current/reference/forms/types/form.html#row-attr

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `help_attr` option in a form field?
    answers:
      -
        value: >
          To add HTML attributes to the help message element.
        correct: true
      -
        value: >
          To define the help message text.
        correct: false
      -
        value: >
          To set the CSS class for the help message.
        correct: false
      -
        value: >
          To link to external help documentation.
        correct: false
    help: |
      The `help_attr` option allows you to pass an array of HTML attributes that will be applied to the element (e.g., `div` or `p`) that renders the help message for the form field.
      https://symfony.com/doc/current/reference/forms/types/form.html#help-attr

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `error_attr` option in a form field?
    answers:
      -
        value: >
          To add HTML attributes to the error message element.
        correct: true
      -
        value: >
          To define the error message text.
        correct: false
      -
        value: >
          To set the CSS class for the error message.
        correct: false
      -
        value: >
          To link to external error documentation.
        correct: false
    help: |
      The `error_attr` option allows you to pass an array of HTML attributes that will be applied to the element (e.g., `ul` or `div`) that renders the error messages for the form field.
      https://symfony.com/doc/current/reference/forms/types/form.html#error-attr

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `label_format` option in a form field?
    answers:
      -
        value: >
          To define the format string for the label, allowing placeholders like `%name%`.
        correct: true
      -
        value: >
          To set the default label text.
        correct: false
      -
        value: >
          To specify the translation key for the label.
        correct: false
      -
        value: >
          To control the HTML tag used for the label.
        correct: false
    help: |
      The `label_format` option allows you to define a format string for the label, which can include placeholders like `%name%` (the field's name) to dynamically generate the label text.
      https://symfony.com/doc/current/reference/forms/types/form.html#label-format

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `row_attr` option in a form field?
    answers:
      -
        value: >
          To add HTML attributes to the input element.
        correct: false
      -
        value: >
          To add HTML attributes to the `div` element that wraps the label, widget, and errors when using `form_row()`.
        correct: true
      -
        value: >
          To define attributes for the entire form row.
        correct: false
      -
        value: >
          To set attributes for the field's errors.
        correct: false
    help: |
      The `row_attr` option allows you to pass an array of HTML attributes that will be applied to the `div` element (or other tag, depending on the theme) that wraps the label, widget, and errors when `form_row()` is used.
      https://symfony.com/doc/current/reference/forms/types/form.html#row-attrcategory: Forms

questions:
  -
    question: >
      Which of the following methods is used in a Symfony controller to create a form based on a dedicated form type class?
    answers:
      -
        value: >
          `$this->createFormBuilder()`
        correct: false
      -
        value: >
          `$this->getFormFactory()->create()`
        correct: false
      -
        value: >
          `$this->createForm(TaskType::class, $task);`
        correct: true
      -
        value: >
          `$this->buildForm(TaskType::class, $task);`
        correct: false
    help: |
      The `createForm()` method is the standard way to create a form from a dedicated form type class within a Symfony controller.
      https://symfony.com/doc/current/forms.html#creating-form-classes

  -
    question: |
      Consider the following Symfony form type:

      ```php
      // src/Form/Type/ProductType.php
      namespace App\Form\Type;

      use App\Entity\Product;
      use Symfony\Component\Form\AbstractType;
      use Symfony\Component\Form\FormBuilderInterface;
      use Symfony\Component\OptionsResolver\OptionsResolver;

      class ProductType extends AbstractType
      {
          public function buildForm(FormBuilderInterface $builder, array $options): void
          {
              $builder->add('name');
              $builder->add('price');
          }

          public function configureOptions(OptionsResolver $resolver): void
          {
              $resolver->setDefaults([
                  'data_class' => Product::class,
              ]);
          }
      }
      ```

      Which method is responsible for defining the form fields like 'name' and 'price'?
    answers:
      -
        value: >
          `configureOptions()`
        correct: false
      -
        value: >
          `buildForm()`
        correct: true
      -
        value: >
          `setDefaultOptions()`
        correct: false
      -
        value: >
          `resolveOptions()`
        correct: false
    help: |
      The `buildForm()` method in a form type class is where you define the fields that make up your form using the `FormBuilderInterface`.
      https://symfony.com/doc/current/forms.html#creating-form-classes

  -
    question: >
      What is the purpose of calling `$form->handleRequest($request);` in a Symfony controller?
    answers:
      -
        value: >
          To render the form in the Twig template.
        correct: false
      -
        value: >
          To create the form instance.
        correct: false
      -
        value: >
          To populate the form with submitted data from the request and trigger form events.
        correct: true
      -
        value: >
          To validate the form data against constraints.
        correct: false
    help: |
      The `handleRequest()` method inspects the incoming request to determine if the form was submitted and, if so, populates the form with the submitted data. It also triggers various form events.
      https://symfony.com/doc/current/forms.html#handling-form-submissions

  -
    question: >
      Which Twig function is used to render the opening `<form>` tag in a Symfony template?
    answers:
      -
        value: >
          `form_widget(form)`
        correct: false
      -
        value: >
          `form_end(form)`
        correct: false
      -
        value: >
          `form(form)`
        correct: false
      -
        value: >
          `form_start(form)`
        correct: true
    help: |
      The `form_start()` Twig function is responsible for rendering the opening `<form>` tag, including attributes like `method` and `action`.
      https://symfony.com/doc/current/forms.html#rendering-the-form

  -
    question: >
      How can you apply a custom Twig form theme to a specific form instance in a Symfony template?
    answers:
      -
        value: >
          By configuring it globally in `config/packages/twig.yaml`.
        correct: false
      -
        value: >
          Using `{% form_theme form 'form/my_theme.html.twig' %}`.
        correct: true
      -
        value: >
          By passing the theme path as an option to `createForm()` in the controller.
        correct: false
      -
        value: >
          With `{{ form_theme_apply(form, 'form/my_theme.html.twig') }}`.
        correct: false
    help: |
      The `{% form_theme %}` Twig tag allows you to apply one or more themes to a form within a specific template.
      https://symfony.com/doc/current/form/form_themes.html#how-to-apply-a-theme

  -
    question: >
      By default, how does Symfony Forms protect against CSRF attacks?
    answers:
      -
        value: >
          It automatically adds a hidden `_csrf_token` field to every form.
        correct: true
      -
        value: >
          It requires manual token generation and validation in the controller.
        correct: false
      -
        value: >
          It relies solely on HTTP Referer headers.
        correct: false
      -
        value: >
          CSRF protection is disabled by default and must be explicitly enabled.
        correct: false
    help: |
      Symfony Forms automatically integrates CSRF protection by adding a hidden `_token` field (or `_csrf_token` depending on configuration) to forms, which is then validated upon submission.
      https://symfony.com/doc/current/form/csrf_protection.html

  -
    question: >
      Which built-in form type should you use for handling file uploads in Symfony?
    answers:
      -
        value: >
          `ImageType::class`
        correct: false
      -
        value: >
          `UploadType::class`
        correct: false
      -
        value: >
          `FileType::class`
        correct: true
      -
        value: >
          `AttachmentType::class`
        correct: false
    help: |
      The `FileType` is the built-in form type specifically designed for handling file uploads in Symfony forms.
      https://symfony.com/doc/current/reference/forms/types/file.html

  -
    question: >
      What is the primary purpose of a Data Transformer in Symfony Forms?
    answers:
      -
        value: >
          To convert submitted string data into an object for the underlying model.
        correct: true
      -
        value: >
          To validate form field values against constraints.
        correct: false
      -
        value: >
          To render custom HTML widgets for form fields.
        correct: false
      -
        value: >
          To modify the form structure based on user input.
        correct: false
    help: |
      Data transformers are used to convert data between the format expected by the form (e.g., string from HTML input) and the format expected by the underlying object (e.g., a `DateTime` object).
      https://symfony.com/doc/current/form/data_transformers.html

  -
    question: >
      Which form event occurs *before* the form's data is set to the underlying object?
    answers:
      -
        value: >
          `FormEvents::POST_SUBMIT`
        correct: false
      -
        value: >
          `FormEvents::POST_SET_DATA`
        correct: false
      -
        value: >
          `FormEvents::PRE_SET_DATA`
        correct: true
      -
        value: >
          `FormEvents::PRE_SUBMIT`
        correct: false
    help: |
      The `FormEvents::PRE_SET_DATA` event is dispatched before the form's data is mapped to the underlying object. This is useful for modifying the form based on the initial data.
      https://symfony.com/doc/current/form/events.html#pre-set-data

  -
    question: >
      What is the primary benefit of using a Form Type Extension in Symfony?
    answers:
      -
        value: >
          To create entirely new form types.
        correct: false
      -
        value: >
          To add or override options, fields, or functionality of existing form types without modifying their original classes.
        correct: true
      -
        value: >
          To define custom validation constraints for forms.
        correct: false
      -
        value: >
          To change the Twig rendering of a form field.
        correct: false
    help: |
      Form Type Extensions allow you to add or override functionality for existing form types, promoting reusability and avoiding direct modification of core or third-party form types.
      https://symfony.com/doc/current/form/type_extensions.html

  -
    question: |
      You are creating a form for a `Task` entity. How would you ensure that the `task` property of the `Task` entity is not blank using annotations?

      ```php
      // src/Entity/Task.php
      namespace App\Entity;

      use Symfony\Component\Validator\Constraints as Assert;

      class Task
      {
          /* ??? */
          public string $task;

          // ...
      }
      ```
    answers:
      -
        value: >
          `#[Assert\NotBlank()]`
        correct: true
      -
        value: >
          `#[Assert\NotNull()]`
        correct: false
      -
        value: >
          `#[Validation\NotBlank]`
        correct: false
      -
        value: >
          `#[Constraint\Required]`
        correct: false
    help: |
      The `#[Assert\NotBlank]` annotation is used to ensure that a property is not blank (i.e., not null, not an empty string, and not a string containing only whitespace).
      https://symfony.com/doc/current/reference/constraints/NotBlank.html

  -
    question: >
      When should you use `createFormBuilder()` instead of `createForm(MyFormType::class)` in a controller?
    answers:
      -
        value: >
          When you need to bind the form to an existing entity.
        correct: false
      -
        value: >
          When the form is very simple and doesn't require a dedicated class for reusability.
        correct: true
      -
        value: >
          When you want to apply custom validation constraints.
        correct: false
      -
        value: >
          When you are creating a form with file uploads.
        correct: false
    help: |
      `createFormBuilder()` is suitable for simple forms that are tightly coupled to a specific controller action and do not need to be reused elsewhere. For more complex or reusable forms, a dedicated form type class is preferred.
      https://symfony.com/doc/current/forms.html#creating-forms-in-a-controller

  -
    question: >
      After calling `$form->handleRequest($request);`, what method should you call to check if the form has been submitted and its data is valid?
    answers:
      -
        value: >
          `$form->isSubmitted() && $form->isValid()`
        correct: true
      -
        value: >
          `$form->hasErrors()`
        correct: false
      -
        value: >
          `$form->isReady()`
        correct: false
      -
        value: >
          `$form->validate()`
        correct: false
    help: |
      After handling the request, you typically check both `isSubmitted()` to ensure the form was actually sent and `isValid()` to ensure the submitted data passes all validation constraints.
      https://symfony.com/doc/current/forms.html#handling-form-submissions

  -
    question: >
      Which Twig function renders a complete form, including `form_start`, `form_errors`, `form_widget` for all fields, and `form_end`?
    answers:
      -
        value: >
          `form_all(form)`
        correct: false
      -
        value: >
          `form_complete(form)`
        correct: false
      -
        value: >
          `form(form)`
        correct: true
      -
        value: >
          `form_render(form)`
        correct: false
    help: |
      The `form()` Twig function is a shortcut to render an entire form. While convenient for quick rendering, it offers less control than rendering individual parts.
      https://symfony.com/doc/current/form/form_customization.html#rendering-a-form-in-a-template

  -
    question: >
      What is the correct way to apply multiple form themes to a single form in Twig, where later themes can override earlier ones?
    answers:
      -
        value: >
          `{% form_theme form with ['theme1.html.twig', 'theme2.html.twig'] %}`
        correct: true
      -
        value: >
          `{% form_theme form 'theme1.html.twig', 'theme2.html.twig' %}`
        correct: false
      -
        value: >
          `{% form_theme form combine 'theme1.html.twig', 'theme2.html.twig' %}`
        correct: false
      -
        value: >
          `{% form_theme form append 'theme1.html.twig', 'theme2.html.twig' %}`
        correct: false
    help: |
      You can pass an array of theme paths to the `form_theme` tag. The themes are applied in the order they are listed, with later themes overriding earlier ones.
      https://symfony.com/doc/current/form/form_themes.html#applying-multiple-themes

  -
    question: >
      How can you disable CSRF protection for a specific Symfony form?
    answers:
      -
        value: >
          Set the `csrf_protection` option to `false` in the form type's `configureOptions()` method or when creating the form.
        correct: true
      -
        value: >
          Remove the `_token` field from the form builder.
        correct: false
      -
        value: >
          Configure `framework.csrf_protection.enabled: false` in `config/packages/framework.yaml`.
        correct: false
      -
        value: >
          Use the `#[NoCsrf]` attribute on the controller action.
        correct: false
    help: |
      CSRF protection can be disabled for an individual form by setting the `csrf_protection` option to `false`.
      https://symfony.com/doc/current/form/csrf_protection.html#disabling-csrf-protection

  -
    question: >
      When handling a file upload with a Symfony form, what type of object will the `FileType` field's data be after submission and validation?
    answers:
      -
        value: >
          A string containing the file path.
        correct: false
      -
        value: >
          A `SplFileInfo` object.
        correct: false
      -
        value: >
          A `Symfony\Component\HttpFoundation\File\UploadedFile` object.
        correct: true
      -
        value: >
          An array containing file metadata.
        correct: false
    help: |
      When a file is uploaded via a `FileType` field, Symfony automatically converts it into an `UploadedFile` object, which provides methods for moving, getting the original name, etc.
      https://symfony.com/doc/current/controller/upload_file.html#handling-file-uploads

  -
    question: >
      You have a custom form field that stores a `DateTime` object in the underlying entity, but the form input is a string (e.g., "YYYY-MM-DD"). What Symfony component is best suited to handle this conversion automatically?
    answers:
      -
        value: >
          A Form Event Listener
        correct: false
      -
        value: >
          A Data Transformer
        correct: true
      -
        value: >
          A Form Type Extension
        correct: false
      -
        value: >
          A custom Twig filter
        correct: false
    help: |
      Data Transformers are specifically designed to convert data between the format used in the form (e.g., string) and the format used in the underlying object (e.g., `DateTime` object).
      https://symfony.com/doc/current/form/data_transformers.html

  -
    question: >
      Which form event is typically used to dynamically add or remove fields from a form based on data that has already been submitted (e.g., a selected option)?
    answers:
      -
        value: >
          `FormEvents::PRE_SET_DATA`
        correct: false
      -
        value: >
          `FormEvents::POST_SET_DATA`
        correct: false
      -
        value: >
          `FormEvents::PRE_SUBMIT`
        correct: true
      -
        value: >
          `FormEvents::POST_SUBMIT`
        correct: false
    help: |
      `FormEvents::PRE_SUBMIT` is dispatched after the request data has been submitted but before it's mapped to the form's fields. This is the ideal event for modifying the form structure based on submitted data.
      https://symfony.com/doc/current/form/events.html#pre-submit

  -
    question: >
      You want to add a new option to all `TextType` fields across your application. What is the most appropriate Symfony component to achieve this without modifying the core `TextType` class?
    answers:
      -
        value: >
          A custom Form Type
        correct: false
      -
        value: >
          A Form Event Subscriber
        correct: false
      -
        value: >
          A Form Type Extension
        correct: true
      -
        value: >
          A Data Transformer
        correct: false
    help: |
      Form Type Extensions are designed to extend the functionality of existing form types, allowing you to add new options, modify default options, or add new functionality.
      https://symfony.com/doc/current/form/type_extensions.html

  -
    question: >
      What is the purpose of the `configureOptions(OptionsResolver $resolver)` method in a custom Symfony form type?
    answers:
      -
        value: >
          To add form fields to the builder.
        correct: false
      -
        value: >
          To define the default options and their types for the form type.
        correct: true
      -
        value: >
          To handle the form submission and validation.
        correct: false
      -
        value: >
          To set the data for the form.
        correct: false
    help: |
      The `configureOptions()` method is used to define and configure the options that can be passed to your form type, including default values, allowed types, and required options.
      https://symfony.com/doc/current/forms.html#configuring-options

  -
    question: >
      Which of the following is a valid way to retrieve the submitted data from a Symfony form after it has been handled and validated?
    answers:
      -
        value: >
          `$form->getSubmittedData()`
        correct: false
      -
        value: >
          `$form->getData()`
        correct: true
      -
        value: >
          `$request->request->all()`
        correct: false
      -
        value: >
          `$form->getValues()`
        correct: false
    help: |
      The `getData()` method of the `Form` object returns the data that was submitted and mapped to the form's underlying object.
      https://symfony.com/doc/current/forms.html#getting-the-submitted-data

  -
    question: >
      Which Twig function is used to render a single form field's label, widget, and errors in one go?
    answers:
      -
        value: >
          `form_widget(form.field)`
        correct: false
      -
        value: >
          `form_label(form.field)`
        correct: false
      -
        value: >
          `form_row(form.field)`
        correct: true
      -
        value: >
          `form_errors(form.field)`
        correct: false
    help: |
      The `form_row()` Twig function is a convenient helper that renders the label, errors, and widget for a single form field.
      https://symfony.com/doc/current/form/form_customization.html#form-row

  -
    question: >
      You want to apply a form theme only to a specific form instance and ignore any globally configured themes. Which keyword should you use with `form_theme`?
    answers:
      -
        value: >
          `override`
        correct: false
      -
        value: >
          `only`
        correct: true
      -
        value: >
          `exclusive`
        correct: false
      -
        value: >
          `strict`
        correct: false
    help: |
      Adding the `only` keyword to the `form_theme` tag ensures that only the specified themes are applied, ignoring any themes configured globally.
      https://symfony.com/doc/current/form/form_themes.html#applying-multiple-themes

  -
    question: >
      What is the default name of the hidden CSRF token field in a Symfony form?
    answers:
      -
        value: >
          `_csrf`
        correct: false
      -
        value: >
          `_token`
        correct: true
      -
        value: >
          `_security_token`
        correct: false
      -
        value: >
          `_form_token`
        correct: false
    help: |
      By default, Symfony's CSRF protection adds a hidden field named `_token` to the form.
      https://symfony.com/doc/current/form/csrf_protection.html

  -
    question: >
      When a form field is defined with `mapped => false`, what does this signify?
    answers:
      -
        value: >
          The field's data will not be validated.
        correct: false
      -
        value: >
          The field will not be rendered in the Twig template.
        correct: false
      -
        value: >
          The field does not correspond to a property on the underlying data object.
        correct: true
      -
        value: >
          The field's data will be encrypted.
        correct: false
    help: |
      The `mapped` option, when set to `false`, indicates that a form field does not correspond to a property on the underlying object. This is useful for fields like "agree to terms" checkboxes.
      https://symfony.com/doc/current/forms.html#unmapped-fields

  -
    question: >
      Which built-in form type is typically used for a collection of embedded forms, such as a list of tags associated with a task?
    answers:
      -
        value: >
          `EntityType::class`
        correct: false
      -
        value: >
          `ArrayType::class`
        correct: false
      -
        value: >
          `CollectionType::class`
        correct: true
      -
        value: >
          `EmbeddedType::class`
        correct: false
    help: |
      The `CollectionType` is used to manage a collection of embedded forms, where each entry in the collection is an instance of another form type.
      https://symfony.com/doc/current/reference/forms/types/collection.html

  -
    question: >
      In a custom data transformer, which method is responsible for converting the data from the normalized format (e.g., `DateTime` object) to the format expected by the form (e.g., string)?
    answers:
      -
        value: >
          `transform()`
        correct: true
      -
        value: >
          `reverseTransform()`
        correct: false
      -
        value: >
          `normalize()`
        correct: false
      -
        value: >
          `denormalize()`
        correct: false
    help: |
      The `transform()` method in a data transformer converts the data from the model/normalized format to the format displayed in the form.
      https://symfony.com/doc/current/form/data_transformers.html#how-to-use-a-data-transformer

  -
    question: >
      You want to add an event listener to a form that modifies the form's fields based on user input *before* validation. Which method of `FormBuilderInterface` should you use?
    answers:
      -
        value: >
          `addEventSubscriber()`
        correct: true
      -
        value: >
          `addEventListener()`
        correct: true
      -
        value: >
          `addHook()`
        correct: false
      -
        value: >
          `attachListener()`
        correct: false
    help: |
      Both `addEventSubscriber()` (for subscribers) and `addEventListener()` (for individual listeners) can be used on the `FormBuilderInterface` to attach event listeners that respond to form events.
      https://symfony.com/doc/current/form/events.html#registering-event-listeners

  -
    question: >
      Which method in a Form Type Extension is used to specify which form types the extension applies to?
    answers:
      -
        value: >
          `getExtendedTypes()`
        correct: true
      -
        value: >
          `appliesTo()`
        correct: false
      -
        value: >
          `supports()`
        correct: false
      -
        value: >
          `extendForm()`
        correct: false
    help: |
      The `getExtendedTypes()` method in a form type extension must return an array of fully qualified class names of the form types it extends.
      https://symfony.com/doc/current/form/type_extensions.html#creating-a-form-type-extension

  -
    question: >
      What is the primary purpose of the `data_class` option in a Symfony form type?
    answers:
      -
        value: >
          To define the HTML class attribute for the form.
        correct: false
      -
        value: >
          To specify the PHP class that the form's data will be mapped to.
        correct: true
      -
        value: >
          To set the default data for the form.
        correct: false
      -
        value: >
          To enable or disable form validation.
        correct: false
    help: |
      The `data_class` option tells Symfony which class the form should map its data to and from.
      https://symfony.com/doc/current/forms.html#creating-form-classes

  -
    question: >
      After a successful form submission and validation, what is a common practice in a Symfony controller to prevent resubmission upon page refresh?
    answers:
      -
        value: >
          Render the form again with a success message.
        correct: false
      -
        value: >
          Redirect the user to another page (e.g., a success page or the entity's show page).
        correct: true
      -
        value: >
          Clear the form data using `$form->clear()`.
        correct: false
      -
        value: >
          Display a JavaScript alert.
        correct: false
    help: |
      The Post/Redirect/Get (PRG) pattern is a common practice to prevent duplicate form submissions. After a successful POST, the user is redirected to a GET request.
      https://symfony.com/doc/current/forms.html#handling-form-submissions

  -
    question: |
      Given the following Twig snippet, what will `form_widget(form.name, {'attr': {'class': 'my-input'}})` render?

      ```twig
      {{ form_widget(form.name, {'attr': {'class': 'my-input'}}) }}
      ```
    answers:
      -
        value: >
          `<input type="text" id="..." name="..." class="my-input" />`
        correct: true
      -
        value: >
          `<label for="...">Name</label><input type="text" id="..." name="..." class="my-input" />`
        correct: false
      -
        value: >
          Only the value of the `name` field.
        correct: false
      -
        value: >
          An error because `attr` is not a valid option for `form_widget`.
        correct: false
    help: |
      The `form_widget()` function renders only the HTML input element for a field. The `attr` option allows you to pass additional HTML attributes to the rendered widget.
      https://symfony.com/doc/current/form/form_customization.html#form-widget

  -
    question: >
      Which of the following built-in form types is suitable for selecting one or more options from a predefined list, typically rendered as a select box, radio buttons, or checkboxes?
    answers:
      -
        value: >
          `ChoiceType::class`
        correct: true
      -
        value: >
          `EntityType::class`
        correct: false
      -
        value: >
          `SelectType::class`
        correct: false
      -
        value: >
          `OptionType::class`
        correct: false
    help: |
      The `ChoiceType` is a versatile form type used for fields where the user chooses from a list of predefined options. It can render as a select tag, radio buttons, or checkboxes depending on its options.
      https://symfony.com/doc/current/reference/forms/types/choice.html

  -
    question: >
      What is the purpose of the `entry_type` option when using `CollectionType`?
    answers:
      -
        value: >
          To specify the HTML tag used for each entry.
        correct: false
      -
        value: >
          To define the data class for the entire collection.
        correct: false
      -
        value: >
          To specify the form type that will be used for each item in the collection.
        correct: true
      -
        value: >
          To set the default value for new entries.
        correct: false
    help: |
      The `entry_type` option in `CollectionType` specifies the form type that should be used to render and handle each individual item within the collection.
      https://symfony.com/doc/current/reference/forms/types/collection.html

  -
    question: >
      When embedding one form type into another (e.g., `CategoryType` into `TaskType`), what is the correct way to add the embedded form?
    answers:
      -
        value: >
          `$builder->add('category', new CategoryType());`
        correct: false
      -
        value: >
          `$builder->add('category', CategoryType::class);`
        correct: true
      -
        value: >
          `$builder->embed('category', CategoryType::class);`
        correct: false
      -
        value: >
          `$builder->add('category', 'category_type');`
        correct: false
    help: |
      To embed a form type, you simply add it as a field to the parent form using its FQCN (Fully Qualified Class Name).
      https://symfony.com/doc/current/form/embedded_forms.html

  -
    question: >
      Which of the following built-in form types is specifically designed for selecting an entity from a database?
    answers:
      -
        value: >
          `ChoiceType::class`
        correct: false
      -
        value: >
          `EntityType::class`
        correct: true
      -
        value: >
          `DoctrineType::class`
        correct: false
      -
        value: >
          `ModelType::class`
        correct: false
    help: |
      The `EntityType` is a specialized `ChoiceType` that retrieves its choices from a Doctrine entity.
      https://symfony.com/doc/current/reference/forms/types/entity.html

  -
    question: >
      What is the purpose of the `#[AsCommand]` attribute in the context of Symfony forms?
    answers:
      -
        value: >
          It is not directly related to Symfony forms; it's for console commands.
        correct: true
      -
        value: >
          It registers a form type as a service.
        correct: false
      -
        value: >
          It defines a custom form validation constraint.
        correct: false
      -
        value: >
          It marks a form as a root form.
        correct: false
    help: |
      The `#[AsCommand]` attribute is used to register console commands, not directly related to the functionality or definition of Symfony forms.
      https://symfony.com/doc/current/console.html#configuring-the-command

  -
    question: >
      You are debugging a form and want to see all available form types, type extensions, and type guessers. Which console command would you use?
    answers:
      -
        value: >
          `php bin/console debug:form`
        correct: true
      -
        value: >
          `php bin/console form:list`
        correct: false
      -
        value: >
          `php bin/console form:debug`
        correct: false
      -
        value: >
          `php bin/console debug:container --tag=form.type`
        correct: false
    help: |
      The `debug:form` command provides detailed information about registered form types, type extensions, and type guessers.
      https://symfony.com/doc/current/forms.html#listing-available-form-types

  -
    question: >
      When defining a form field, what is the default value for the `required` option if not explicitly set?
    answers:
      -
        value: >
          `true`
        correct: true
      -
        value: >
          `false`
        correct: false
      -
        value: >
          `null`
        correct: false
      -
        value: >
          It depends on the field type.
        correct: false
    help: |
      By default, most form fields are `required` unless explicitly set to `false`. This means the HTML `required` attribute will be rendered, and client-side validation will apply.
      https://symfony.com/doc/current/reference/forms/types/form.html#required

  -
    question: >
      Which Twig function is used to render only the HTML input element (widget) of a form field, without its label or errors?
    answers:
      -
        value: >
          `form_row(form.field)`
        correct: false
      -
        value: >
          `form_widget(form.field)`
        correct: true
      -
        value: >
          `form_input(form.field)`
        correct: false
      -
        value: >
          `form_element(form.field)`
        correct: false
    help: |
      The `form_widget()` function renders only the HTML input element for a given form field.
      https://symfony.com/doc/current/form/form_customization.html#form-widget

  -
    question: >
      What is the primary purpose of the `POST_SET_DATA` event in Symfony forms?
    answers:
      -
        value: >
          To modify the form's data after it has been submitted by the user.
        correct: false
      -
        value: >
          To perform actions after the form's data has been set to the underlying object.
        correct: true
      -
        value: >
          To add or remove fields dynamically before the form is rendered.
        correct: false
      -
        value: >
          To validate the form's data.
        correct: false
    help: |
      The `POST_SET_DATA` event is dispatched after the form's data has been set to the underlying object. It's useful for performing actions that depend on the initial data.
      https://symfony.com/doc/current/form/events.html#post-set-data

  -
    question: >
      When creating a custom form type, which base class should it extend?
    answers:
      -
        value: >
          `Symfony\Component\Form\FormType`
        correct: false
      -
        value: >
          `Symfony\Component\Form\Extension\Core\Type\FormType`
        correct: false
      -
        value: >
          `Symfony\Component\Form\AbstractType`
        correct: true
      -
        value: >
          `Symfony\Component\Form\Form`
        correct: false
    help: |
      All custom form types in Symfony should extend `Symfony\Component\Form\AbstractType`.
      https://symfony.com/doc/current/forms.html#creating-form-classes

  -
    question: >
      Which of the following built-in form types is suitable for a single line of text input?
    answers:
      -
        value: >
          `TextareaType::class`
        correct: false
      -
        value: >
          `StringType::class`
        correct: false
      -
        value: >
          `TextType::class`
        correct: true
      -
        value: >
          `InputType::class`
        correct: false
    help: |
      The `TextType` is the most common form type for rendering a single-line text input field (`<input type="text">`).
      https://symfony.com/doc/current/reference/forms/types/text.html

  -
    question: >
      What is the purpose of the `block_name` option in a form field, especially when dealing with form theming?
    answers:
      -
        value: >
          To define the HTML `id` attribute for the field.
        correct: false
      -
        value: >
          To specify a custom Twig block name for rendering that specific field.
        correct: true
      -
        value: >
          To group fields together for validation.
        correct: false
      -
        value: >
          To set the default value of the field.
        correct: false
    help: |
      The `block_name` option allows you to override the default block name used for rendering a form field in Twig, giving you more granular control over theming.
      https://symfony.com/doc/current/form/form_themes.html#customizing-individual-fields

  -
    question: >
      When implementing a custom data transformer, which method is responsible for converting the submitted data (e.g., string from form) back to the format expected by the underlying model (e.g., `DateTime` object)?
    answers:
      -
        value: >
          `transform()`
        correct: false
      -
        value: >
          `reverseTransform()`
        correct: true
      -
        value: >
          `convertBack()`
        correct: false
      -
        value: >
          `denormalize()`
        correct: false
    help: |
      The `reverseTransform()` method in a data transformer converts the submitted data from the form's format back to the model's format.
      https://symfony.com/doc/current/form/data_transformers.html#how-to-use-a-data-transformer

  -
    question: >
      Which of the following built-in form types is used to render a large multiline text input area?
    answers:
      -
        value: >
          `TextType::class`
        correct: false
      -
        value: >
          `StringType::class`
        correct: false
      -
        value: >
          `TextareaType::class`
        correct: true
      -
        value: >
          `LongTextType::class`
        correct: false
    help: |
      The `TextareaType` is used to render a `<textarea>` HTML element for multiline text input.
      https://symfony.com/doc/current/reference/forms/types/textarea.html

  -
    question: >
      What is the purpose of the `empty_data` option in a form field?
    answers:
      -
        value: >
          To set the placeholder text for an empty field.
        correct: false
      -
        value: >
          To define the value that will be used if the field is submitted empty.
        correct: true
      -
        value: >
          To clear the field's data after submission.
        correct: false
      -
        value: >
          To mark the field as optional.
        correct: false
    help: |
      The `empty_data` option allows you to specify the value that will be returned by `getData()` for a field if its submitted value is empty. This is particularly useful for fields that map to objects.
      https://symfony.com/doc/current/reference/forms/types/form.html#empty-data

  -
    question: >
      Which built-in form type is used for a checkbox input?
    answers:
      -
        value: >
          `BooleanType::class`
        correct: false
      -
        value: >
          `ToggleType::class`
        correct: false
      -
        value: >
          `CheckboxType::class`
        correct: true
      -
        value: >
          `SwitchType::class`
        correct: false
    help: |
      The `CheckboxType` is used to render a single checkbox (`<input type="checkbox">`).
      https://symfony.com/doc/current/reference/forms/types/checkbox.html

  -
    question: >
      When creating a form without a data class (e.g., using `createFormBuilder([])`), how can you retrieve the submitted data?
    answers:
      -
        value: >
          The data is automatically available in `$request->request->all()`.
        correct: false
      -
        value: >
          Call `$form->getData()`, which will return an associative array.
        correct: true
      -
        value: >
          You cannot retrieve data from forms without a data class.
        correct: false
      -
        value: >
          Call `$form->getRawData()`.
        correct: false
    help: |
      Even when a form is not bound to a specific data class, `getData()` will return the submitted data as an associative array.
      https://symfony.com/doc/current/forms.html#forms-without-a-class

  -
    question: >
      What is the purpose of the `label_attr` option in a form field?
    answers:
      -
        value: >
          To add HTML attributes to the input element.
        correct: false
      -
        value: >
          To add HTML attributes to the `label` element associated with the field.
        correct: true
      -
        value: >
          To define the label text.
        correct: false
      -
        value: >
          To set the `for` attribute of the label.
        correct: false
    help: |
      The `label_attr` option allows you to pass an array of HTML attributes that will be applied to the `<label>` element rendered for the form field.
      https://symfony.com/doc/current/reference/forms/types/form.html#label-attr

  -
    question: >
      Which of the following built-in form types is used for a URL input field?
    answers:
      -
        value: >
          `TextType::class`
        correct: false
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `placeholder` option in a form field?
    answers:
      -
        value: >
          To set the default value of the field.
        correct: false
      -
        value: >
          To display a hint or example text inside the input field when it's empty.
        correct: true
      -
        value: >
          To define a fallback value if the field is not submitted.
        correct: false
      -
        value: >
          To mark the field as optional.
        correct: false
    help: |
      The `placeholder` option sets the `placeholder` HTML attribute, which displays a short hint in the input field before the user enters a value.
      https://symfony.com/doc/current/reference/forms/types/form.html#placeholder

  -
    question: >
      Which built-in form type is used for a range input field (slider)?
    answers:
      -
        value: >
          `SliderType::class`
        correct: false
      -
        value: >
          `RangeType::class`
        correct: true
      -
        value: >
          `ScaleType::class`
        correct: false
      -
        value: >
          `ValueType::class`
        correct: false
    help: |
      The `RangeType` is used to render an `<input type="range">` element, typically displayed as a slider.
      https://symfony.com/doc/current/reference/forms/types/range.html

  -
    question: >
      What is the purpose of the `disabled` option in a form field?
    answers:
      -
        value: >
          To prevent the field from being rendered.
        correct: false
      -
        value: >
          To make the field read-only and prevent user interaction.
        correct: true
      -
        value: >
          To hide the field from the user.
        correct: false
      -
        value: >
          To remove the field from validation.
        correct: false
    help: |
      When the `disabled` option is set to `true`, the field will be rendered with the HTML `disabled` attribute, preventing user interaction and making its value not submitted.
      https://symfony.com/doc/current/reference/forms/types/form.html#disabled

  -
    question: >
      Which built-in form type is used for a color input field?
    answers:
      -
        value: >
          `ColorPickerType::class`
        correct: false
      -
        value: >
          `SwatchType::class`
        correct: false
      -
        value: >
          `ColorType::class`
        correct: true
      -
        value: >
          `PaletteType::class`
        correct: false
    help: |
      The `ColorType` is used to render an `<input type="color">` element, allowing users to select a color.
      https://symfony.com/doc/current/reference/forms/types/color.html

  -
    question: >
      What is the purpose of the `read_only` option in a form field?
    answers:
      -
        value: >
          To prevent the field's value from being submitted.
        correct: false
      -
        value: >
          To make the field's value uneditable by the user, but still allow it to be submitted.
        correct: true
      -
        value: >
          To hide the field from the user.
        correct: false
      -
        value: >
          To disable client-side validation for the field.
        correct: false
    help: |
      When the `read_only` option is set to `true`, the field will be rendered with the HTML `readonly` attribute, preventing user modification but still allowing its value to be submitted.
      https://symfony.com/doc/current/reference/forms/types/form.html#read-only

  -
    question: >
      Which built-in form type is used for a search input field?
    answers:
      -
        value: >
          `TextType::class`
        correct: false
      -
        value: >
          `QueryType::class`
        correct: false
      -
        value: >
          `SearchType::class`
        correct: true
      -
        value: >
          `FilterType::class`
        correct: false
    help: |
      The `SearchType` is used to render an `<input type="search">` element, which often includes browser-specific styling for search fields.
      https://symfony.com/doc/current/reference/forms/types/search.html

  -
    question: >
      What is the purpose of the `row_attr` option in a form field?
    answers:
      -
        value: >
          To add HTML attributes to the input element.
        correct: false
      -
        value: >
          To add HTML attributes to the `div` element that wraps the label, widget, and errors when using `form_row()`.
        correct: true
      -
        value: >
          To define attributes for the entire form row.
        correct: false
      -
        value: >
          To set attributes for the field's errors.
        correct: false
    help: |
      The `row_attr` option allows you to pass an array of HTML attributes that will be applied to the `div` element (or other tag, depending on the theme) that wraps the label, widget, and errors when `form_row()` is used.
      https://symfony.com/doc/current/reference/forms/types/form.html#row-attr

  -
    question: >
      Which built-in form type is used for a time input field?
    answers:
      -
        value: >
          `DateTimeType::class`
        correct: false
      -
        value: >
          `TimeType::class`
        correct: true
      -
        value: >
          `ClockType::class`
        correct: false
      -
        value: >
          `HourType::class`
        correct: false
    help: |
      The `TimeType` is used for time input fields, allowing various rendering options (text, single_text, choice).
      https://symfony.com/doc/current/reference/forms/types/time.html

  -
    question: >
      What is the purpose of the `error_bubbling` option in a form field?
    answers:
      -
        value: >
          To display errors only at the top of the form.
        correct: false
      -
        value: >
          To prevent errors from being displayed for this field.
        correct: false
      -
        value: >
          To make errors for this field appear on the parent form or the form itself, rather than directly next to the field.
        correct: true
      -
        value: >
          To group errors from multiple fields together.
        correct: false
    help: |
      When `error_bubbling` is set to `true`, any errors for that field will "bubble up" and be displayed on the parent form or the form itself, instead of directly next to the field.
      https://symfony.com/doc/current/reference/forms/types/form.html#error-bubbling

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `compound` option in a form type?
    answers:
      -
        value: >
          To indicate that the form type is a collection of fields.
        correct: false
      -
        value: >
          To specify that the form type is composed of multiple child form types.
        correct: true
      -
        value: >
          To enable or disable CSRF protection for the form.
        correct: false
      -
        value: >
          To define if the form should be rendered as a single input or multiple inputs.
        correct: false
    help: |
      The `compound` option indicates whether the form type is a "compound" form type, meaning it's composed of multiple child fields. This is typically `true` for forms that contain other fields (like a `FormType` or a custom type with `add()` calls) and `false` for simple field types like `TextType`.
      https://symfony.com/doc/current/reference/forms/types/form.html#compound

  -
    question: >
      Which built-in form type is used for a week input field?
    answers:
      -
        value: >
          `DateType::class`
        correct: false
      -
        value: >
          `WeekType::class`
        correct: true
      -
        value: >
          `CalendarType::class`
        correct: false
      -
        value: >
          `PeriodType::class`
        correct: false
    help: |
      The `WeekType` is used to render an `<input type="week">` element, allowing users to select a week and year.
      https://symfony.com/doc/current/reference/forms/types/week.html

  -
    question: >
      What is the purpose of the `by_reference` option in a form field, especially with collections?
    answers:
      -
        value: >
          To pass the data by value instead of by reference.
        correct: false
      -
        value: >
          To determine if the setter method of the underlying object should be called when setting data.
        correct: true
      -
        value: >
          To specify if the field's data should be stored in the session.
        correct: false
      -
        value: >
          To link the field to a specific database reference.
        correct: false
    help: |
      The `by_reference` option determines whether the form should attempt to call the setter method (e.g., `setTags()`) on the underlying object or directly modify the collection (e.g., `getTags()->add()`). For collections, it's often set to `false` to allow direct manipulation of the collection.
      https://symfony.com/doc/current/reference/forms/types/form.html#by-reference

  -
    question: >
      Which built-in form type is used for a telephone number input field?
    answers:
      -
        value: >
          `TextType::class`
        correct: false
      -
        value: >
          `PhoneType::class`
        correct: false
      -
        value: >
          `TelType::class`
        correct: true
      -
        value: >
          `ContactType::class`
        correct: false
    help: |
      The `TelType` is used to render an `<input type="tel">` element, specifically for telephone numbers.
      https://symfony.com/doc/current/reference/forms/types/tel.html

  -
    question: >
      What is the purpose of the `inherit_data` option in a form type?
    answers:
      -
        value: >
          To inherit options from a parent form type.
        correct: false
      -
        value: >
          To make the form use the data of its parent form.
        correct: true
      -
        value: >
          To inherit validation constraints from the parent entity.
        correct: false
      -
        value: >
          To allow the form to be embedded in other forms.
        correct: false
    help: |
      When `inherit_data` is set to `true`, the form will use the same data object as its parent form, rather than creating its own. This is useful for forms that represent a subset of the parent's data.
      https://symfony.com/doc/current/reference/forms/types/form.html#inherit-data

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `auto_initialize` option in a form field?
    answers:
      -
        value: >
          To automatically populate the field with default data.
        correct: false
      -
        value: >
          To automatically initialize the form field when the form is created.
        correct: true
      -
        value: >
          To automatically validate the field on the client-side.
        correct: false
      -
        value: >
          To automatically add the field to the form builder.
        correct: false
    help: |
      The `auto_initialize` option, typically used internally or in advanced scenarios, controls whether the form field's internal data is initialized automatically when the form is built.
      https://symfony.com/doc/current/reference/forms/types/form.html#auto-initialize

  -
    question: >
      Which built-in form type is used for a file input field?
    answers:
      -
        value: >
          `UploadType::class`
        correct: false
      -
        value: >
          `AttachmentType::class`
        correct: false
      -
        value: >
          `FileType::class`
        correct: true
      -
        value: >
          `DocumentType::class`
        correct: false
    help: |
      The `FileType` is the built-in form type specifically designed for handling file uploads.
      https://symfony.com/doc/current/reference/forms/types/file.html

  -
    question: >
      What is the purpose of the `mapped` option in a form field?
    answers:
      -
        value: >
          To define if the field's value should be displayed in the browser.
        correct: false
      -
        value: >
          To indicate whether the field's data should be mapped to a property of the underlying data object.
        correct: true
      -
        value: >
          To specify the database column the field maps to.
        correct: false
      -
        value: >
          To control if the field is part of the form's validation.
        correct: false
    help: |
      The `mapped` option determines whether the field's data is read from and written to the underlying data object. If `false`, the field's data is not mapped to the object.
      https://symfony.com/doc/current/forms.html#unmapped-fields

  -
    question: >
      Which built-in form type is used for a hidden input field?
    answers:
      -
        value: >
          `InvisibleType::class`
        correct: false
      -
        value: >
          `HiddenType::class`
        correct: true
      -
        value: >
          `SecretType::class`
        correct: false
      -
        value: >
          `BlindType::class`
        correct: false
    help: |
      The `HiddenType` is used to render an `<input type="hidden">` element.
      https://symfony.com/doc/current/reference/forms/types/hidden.html

  -
    question: >
      What is the purpose of the `constraints` option when defining a form field?
    answers:
      -
        value: >
          To apply validation rules directly to the form field.
        correct: true
      -
        value: >
          To limit the number of characters allowed in the field.
        correct: false
      -
        value: >
          To restrict the type of data that can be entered.
        correct: false
      -
        value: >
          To define database constraints for the associated entity property.
        correct: false
    help: |
      The `constraints` option allows you to apply one or more validation constraints directly to a form field, which will be checked when the form is validated.
      https://symfony.com/doc/current/forms.html#form-validation

  -
    question: >
      Which built-in form type is used for a datetime input field?
    answers:
      -
        value: >
          `DateType::class`
        correct: false
      -
        value: >
          `TimeType::class`
        correct: false
      -
        value: >
          `DateTimeType::class`
        correct: true
      -
        value: >
          `TimestampType::class`
        correct: false
    help: |
      The `DateTimeType` is used for date and time input fields, allowing various rendering options.
      https://symfony.com/doc/current/reference/forms/types/datetime.html

  -
    question: >
      What is the purpose of the `property_path` option in a form field?
    answers:
      -
        value: >
          To specify the HTML `name` attribute of the field.
        correct: false
      -
        value: >
          To override the default property name on the underlying data object that the field maps to.
        correct: true
      -
        value: >
          To define the path to the Twig template for rendering the field.
        correct: false
      -
        value: >
          To set the validation group for the field.
        correct: false
    help: |
      The `property_path` option allows you to explicitly define which property on the underlying data object the form field should read from and write to, overriding the default behavior (which uses the field's name).
      https://symfony.com/doc/current/reference/forms/types/form.html#property-path

  -
    question: >
      Which built-in form type is used for a checkbox input field?
    answers:
      -
        value: >
          `BooleanType::class`
        correct: false
      -
        value: >
          `ToggleType::class`
        correct: false
      -
        value: >
          `CheckboxType::class`
        correct: true
      -
        value: >
          `SwitchType::class`
        correct: false
    help: |
      The `CheckboxType` is used to render a single checkbox (`<input type="checkbox">`).
      https://symfony.com/doc/current/reference/forms/types/checkbox.html

  -
    question: >
      What is the purpose of the `validation_groups` option in a form?
    answers:
      -
        value: >
          To define which fields should be validated.
        correct: false
      -
        value: >
          To specify a subset of validation constraints to apply during form submission.
        correct: true
      -
        value: >
          To group form fields for rendering purposes.
        correct: false
      -
        value: >
          To enable or disable all validation for the form.
        correct: false
    help: |
      The `validation_groups` option allows you to specify which validation groups should be applied when the form is validated, enabling conditional validation.
      https://symfony.com/doc/current/forms.html#validation-groups

  -
    question: >
      Which built-in form type is used for a collection of file uploads?
    answers:
      -
        value: >
          `CollectionType::class` with `entry_type` set to `FileType::class`.
        correct: true
      -
        value: >
          `MultiFileType::class`
        correct: false
      -
        value: >
          `FilesType::class`
        correct: false
      -
        value: >
          `CollectionType::class` with `entry_type` set to `UploadType::class`.
        correct: false
    help: |
      To handle multiple file uploads, you use the `CollectionType` and set its `entry_type` option to `FileType::class`.
      https://symfony.com/doc/current/reference/forms/types/collection.html

  -
    question: >
      What is the purpose of the `csrf_token_id` option in a form?
    answers:
      -
        value: >
          To define the HTML `id` attribute for the CSRF token field.
        correct: false
      -
        value: >
          To set a unique identifier for the CSRF token, useful for forms that share the same token.
        correct: true
      -
        value: >
          To enable or disable CSRF protection.
        correct: false
      -
        value: >
          To specify the name of the CSRF token field.
        correct: false
    help: |
      The `csrf_token_id` option allows you to set a custom identifier for the CSRF token. This is particularly useful when you have multiple forms on a page and want them to share the same CSRF token.
      https://symfony.com/doc/current/reference/forms/types/form.html#csrf-token-id

  -
    question: >
      Which built-in form type is used for a button that resets the form?
    answers:
      -
        value: >
          `ButtonType::class`
        correct: false
      -
        value: >
          `ResetType::class`
        correct: true
      -
        value: >
          `ClearType::class`
        correct: false
      -
        value: >
          `CancelType::class`
        correct: false
    help: |
      The `ResetType` is used to create a reset button (`<input type="reset">`) that clears the form fields.
      https://symfony.com/doc/current/reference/forms/types/reset.html

  -
    question: >
      What is the purpose of the `action` option in a form?
    answers:
      -
        value: >
          To define the HTTP method for form submission.
        correct: false
      -
        value: >
          To specify the URL where the form data will be submitted.
        correct: true
      -
        value: >
          To set the name of the controller action that handles the form.
        correct: false
      -
        value: >
          To define a JavaScript function to execute on form submission.
        correct: false
    help: |
      The `action` option sets the `action` attribute of the `<form>` tag, specifying the URL to which the form data will be submitted.
      https://symfony.com/doc/current/reference/forms/types/form.html#action

  -
    question: >
      Which built-in form type is used for a button that performs a client-side action without submitting the form?
    answers:
      -
        value: >
          `SubmitType::class`
        correct: false
      -
        value: >
          `ResetType::class`
        correct: false
      -
        value: >
          `ButtonType::class`
        correct: true
      -
        value: >
          `ActionType::class`
        correct: false
    help: |
      The `ButtonType` is used to create a generic button (`<button type="button">`) that does not submit the form by default, often used for JavaScript interactions.
      https://symfony.com/doc/current/reference/forms/types/button.html

  -
    question: >
      What is the purpose of the `method` option in a form?
    answers:
      -
        value: >
          To define the HTTP method for form submission (e.g., `GET`, `POST`).
        correct: true
      -
        value: >
          To specify the controller method that handles the form.
        correct: false
      -
        value: >
          To set the JavaScript method to call on form submission.
        correct: false
      -
        value: >
          To define the data transformation method.
        correct: false
    help: |
      The `method` option sets the `method` attribute of the `<form>` tag, specifying the HTTP method (e.g., `POST`, `GET`) used for form submission.
      https://symfony.com/doc/current/reference/forms/types/form.html#method

  -
    question: >
      Which built-in form type is used for a month input field?
    answers:
      -
        value: >
          `DateType::class`
        correct: false
      -
        value: >
          `MonthType::class`
        correct: true
      -
        value: >
          `CalendarType::class`
        correct: false
      -
        value: >
          `PeriodType::class`
        correct: false
    help: |
      The `MonthType` is used to render an `<input type="month">` element, allowing users to select a month and year.
      https://symfony.com/doc/current/reference/forms/types/month.html

  -
    question: >
      What is the purpose of the `html5` option in date and time types (e.g., `DateType`, `TimeType`, `DateTimeType`)?
    answers:
      -
        value: >
          To enable or disable client-side validation.
        correct: false
      -
        value: >
          To control whether the field renders an HTML5 input type (e.g., `<input type="date">`) or separate select boxes.
        correct: true
      -
        value: >
          To force the use of JavaScript date pickers.
        correct: false
      -
        value: >
          To enable or disable the display of seconds.
        correct: false
    help: |
      The `html5` option, when set to `true`, tells date and time types to render a single HTML5 input element (e.g., `<input type="date">`) instead of separate select boxes for year, month, and day.
      https://symfony.com/doc/current/reference/forms/types/date.html#html5

  -
    question: >
      Which built-in form type is used for a number input field with a specific step value?
    answers:
      -
        value: >
          `NumberType::class`
        correct: false
      -
        value: >
          `IntegerType::class`
        correct: false
      -
        value: >
          `RangeType::class`
        correct: false
      -
        value: >
          `NumberType::class` with `step` option.
        correct: true
    help: |
      The `NumberType` can be configured with a `step` option to define the granularity of the input value.
      https://symfony.com/doc/current/reference/forms/types/number.html#step

  -
    question: >
      What is the purpose of the `widget` option in date and time types?
    answers:
      -
        value: >
          To specify the HTML input type (e.g., `text`, `single_text`, `choice`).
        correct: true
      -
        value: >
          To define the CSS class for the widget.
        correct: false
      -
        value: >
          To enable or disable the display of the calendar icon.
        correct: false
      -
        value: >
          To set the default value of the widget.
        correct: false
    help: |
      The `widget` option in date and time types controls how the field is rendered: as a single text input (`single_text`), a text input with a date/time picker (`text`), or separate select boxes (`choice`).
      https://symfony.com/doc/current/reference/forms/types/date.html#widget

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `input` option in date and time types?
    answers:
      -
        value: >
          To specify the format of the data that the form expects from the underlying model (e.g., `string`, `datetime_immutable`).
        correct: true
      -
        value: >
          To define the HTML input type.
        correct: false
      -
        value: >
          To set the default value for the input.
        correct: false
      -
        value: >
          To control whether the field is required.
        correct: false
    help: |
      The `input` option in date and time types specifies the format in which the data is stored in the underlying model (e.g., `string`, `datetime`, `datetime_immutable`, `timestamp`).
      https://symfony.com/doc/current/reference/forms/types/date.html#input

  -
    question: >
      Which built-in form type is used for a number input field with a minimum and maximum value?
    answers:
      -
        value: >
          `NumberType::class` with `min` and `max` options.
        correct: true
      -
        value: >
          `RangeType::class`
        correct: false
      -
        value: >
          `IntegerType::class`
        correct: false
      -
        value: >
          `BoundedNumberType::class`
        correct: false
    help: |
      The `NumberType` can be configured with `min` and `max` options to define the allowed range of input values.
      https://symfony.com/doc/current/reference/forms/types/number.html#min-and-max

  -
    question: >
      What is the purpose of the `model_timezone` option in date and time types?
    answers:
      -
        value: >
          To specify the timezone of the data in the underlying model.
        correct: true
      -
        value: >
          To set the timezone for the user's input.
        correct: false
      -
        value: >
          To define the timezone for displaying the date/time.
        correct: false
      -
        value: >
          To convert the timezone of the submitted data.
        correct: false
    help: |
      The `model_timezone` option specifies the timezone in which the date/time data is stored in the underlying model.
      https://symfony.com/doc/current/reference/forms/types/date.html#model-timezone

  -
    question: >
      Which built-in form type is used for a number input field with a specific precision?
    answers:
      -
        value: >
          `NumberType::class` with `scale` option.
        correct: true
      -
        value: >
          `FloatType::class`
        correct: false
      -
        value: >
          `DecimalType::class`
        correct: false
      -
        value: >
          `PrecisionType::class`
        correct: false
    help: |
      The `NumberType` can be configured with a `scale` option to define the number of decimal places allowed.
      https://symfony.com/doc/current/reference/forms/types/number.html#scale

  -
    question: >
      What is the purpose of the `view_timezone` option in date and time types?
    answers:
      -
        value: >
          To specify the timezone in which the date/time data is displayed to the user.
        correct: true
      -
        value: >
          To set the timezone of the underlying model.
        correct: false
      -
        value: >
          To define the timezone for internal processing.
        correct: false
      -
        value: >
          To convert the timezone of the submitted data.
        correct: false
    help: |
      The `view_timezone` option specifies the timezone in which the date/time data is displayed to the user in the form.
      https://symfony.com/doc/current/reference/forms/types/date.html#view-timezone

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `format` option in date and time types when `widget` is set to `single_text`?
    answers:
      -
        value: >
          To define the HTML `input type` attribute.
        correct: false
      -
        value: >
          To specify the string format used for displaying and parsing the date/time.
        correct: true
      -
        value: >
          To set the default value of the field.
        correct: false
      -
        value: >
          To control the number of select boxes rendered.
        correct: false
    help: |
      When `widget` is `single_text`, the `format` option defines the string format (e.g., `yyyy-MM-dd`) used for displaying and parsing the date/time value in the single text input.
      https://symfony.com/doc/current/reference/forms/types/date.html#format

  -
    question: >
      Which built-in form type is used for a range input field (slider)?
    answers:
      -
        value: >
          `SliderType::class`
        correct: false
      -
        value: >
          `RangeType::class`
        correct: true
      -
        value: >
          `ScaleType::class`
        correct: false
      -
        value: >
          `ValueType::class`
        correct: false
    help: |
      The `RangeType` is used to render an `<input type="range">` element, typically displayed as a slider.
      https://symfony.com/doc/current/reference/forms/types/range.html

  -
    question: >
      What is the purpose of the `years`, `months`, `days`, `hours`, `minutes`, `seconds` options in date and time types when `widget` is set to `choice`?
    answers:
      -
        value: >
          To define the default values for each part of the date/time.
        correct: false
      -
        value: >
          To specify the available choices (e.g., range of years) for the select boxes.
        correct: true
      -
        value: >
          To set the order of the select boxes.
        correct: false
      -
        value: >
          To enable or disable specific select boxes.
        correct: false
    help: |
      When `widget` is `choice`, these options allow you to specify the exact choices (e.g., an array of years, months) that will be available in the respective select boxes.
      https://symfony.com/doc/current/reference/forms/types/date.html#years-months-days-hours-minutes-seconds

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `rounding_mode` option in `NumberType`?
    answers:
      -
        value: >
          To define how the number is rounded when displayed.
        correct: false
      -
        value: >
          To specify the rounding mode to use when transforming the value (e.g., `HALF_UP`, `DOWN`).
        correct: true
      -
        value: >
          To set the precision of the number.
        correct: false
      -
        value: >
          To control if the number is an integer or a float.
        correct: false
    help: |
      The `rounding_mode` option in `NumberType` specifies the rounding mode (e.g., `\NumberFormatter::ROUND_HALFUP`) to apply when the number is transformed.
      https://symfony.com/doc/current/reference/forms/types/number.html#rounding-mode

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `grouping` option in `NumberType`?
    answers:
      -
        value: >
          To group numbers for validation.
        correct: false
      -
        value: >
          To enable or disable the display of thousands separators.
        correct: true
      -
        value: >
          To define the number of decimal places.
        correct: false
      -
        value: >
          To control the input type (e.g., `text`, `number`).
        correct: false
    help: |
      The `grouping` option in `NumberType` determines whether thousands separators should be displayed when rendering the number.
      https://symfony.com/doc/current/reference/forms/types/number.html#grouping

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `trim` option in `TextType` and `TextareaType`?
    answers:
      -
        value: >
          To remove all whitespace from the input.
        correct: false
      -
        value: >
          To remove leading and trailing whitespace from the submitted string.
        correct: true
      -
        value: >
          To limit the length of the string.
        correct: false
      -
        value: >
          To convert the string to lowercase.
        correct: false
    help: |
      The `trim` option, when set to `true` (which is the default), automatically removes leading and trailing whitespace from the submitted string data for `TextType` and `TextareaType`.
      https://symfony.com/doc/current/reference/forms/types/text.html#trim

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `multiple` option in `ChoiceType`?
    answers:
      -
        value: >
          To allow the user to select multiple choices.
        correct: true
      -
        value: >
          To render the choices as radio buttons instead of a select box.
        correct: false
      -
        value: >
          To enable client-side validation for multiple selections.
        correct: false
      -
        value: >
          To display the choices in multiple columns.
        correct: false
    help: |
      When `multiple` is set to `true`, the `ChoiceType` will render a select box that allows multiple selections (or checkboxes if `expanded` is also `true`).
      https://symfony.com/doc/current/reference/forms/types/choice.html#multiple

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `expanded` option in `ChoiceType`?
    answers:
      -
        value: >
          To display the choices as radio buttons or checkboxes instead of a select box.
        correct: true
      -
        value: >
          To expand the height of the select box.
        correct: false
      -
        value: >
          To show all available choices at once.
        correct: false
      -
        value: >
          To enable a search filter for the choices.
        correct: false
    help: |
      When `expanded` is set to `true`, the `ChoiceType` will render the choices as radio buttons (if `multiple` is `false`) or checkboxes (if `multiple` is `true`). If `false`, it renders a select box.
      https://symfony.com/doc/current/reference/forms/types/choice.html#expanded

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `choices` option in `ChoiceType`?
    answers:
      -
        value: >
          To define the data source for the choices (e.g., from a database).
        correct: false
      -
        value: >
          To provide the list of available options for the choice field.
        correct: true
      -
        value: >
          To set the default selected choice.
        correct: false
      -
        value: >
          To enable a search filter for the choices.
        correct: false
    help: |
      The `choices` option is an array that defines the available options for the `ChoiceType` field. The keys are the labels displayed to the user, and the values are the actual data submitted.
      https://symfony.com/doc/current/reference/forms/types/choice.html#choices

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `choice_label` option in `ChoiceType`?
    answers:
      -
        value: >
          To define the HTML `label` attribute for each choice.
        correct: false
      -
        value: >
          To specify a property path or a callable that returns the label for each choice object.
        correct: true
      -
        value: >
          To set the default label for all choices.
        correct: false
      -
        value: >
          To translate the choice labels.
        correct: false
    help: |
      When `choices` are objects, `choice_label` is used to specify which property of the object (or a callable) should be used as the label displayed to the user.
      https://symfony.com/doc/current/reference/forms/types/choice.html#choice-label

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `choice_value` option in `ChoiceType`?
    answers:
      -
        value: >
          To define the HTML `value` attribute for each choice.
        correct: false
      -
        value: >
          To specify a property path or a callable that returns the underlying value for each choice object.
        correct: true
      -
        value: >
          To set the default value for all choices.
        correct: false
      -
        value: >
          To validate the choice values.
        correct: false
    help: |
      When `choices` are objects, `choice_value` is used to specify which property of the object (or a callable) should be used as the actual value submitted to the form.
      https://symfony.com/doc/current/reference/forms/types/choice.html#choice-value

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `preferred_choices` option in `ChoiceType`?
    answers:
      -
        value: >
          To mark certain choices as required.
        correct: false
      -
        value: >
          To display a subset of choices at the top of the list, separated from the rest.
        correct: true
      -
        value: >
          To pre-select certain choices by default.
        correct: false
      -
        value: >
          To disable certain choices.
        correct: false
    help: |
      The `preferred_choices` option allows you to define a subset of choices that will be displayed at the top of the list, typically separated by a divider, making them more prominent.
      https://symfony.com/doc/current/reference/forms/types/choice.html#preferred-choices

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `group_by` option in `ChoiceType`?
    answers:
      -
        value: >
          To group choices into optgroups based on a property path or callable.
        correct: true
      -
        value: >
          To define validation groups for choices.
        correct: false
      -
        value: >
          To sort the choices alphabetically.
        correct: false
      -
        value: >
          To filter choices based on a condition.
        correct: false
    help: |
      The `group_by` option allows you to group choices into HTML `<optgroup>` elements based on a property path or a callable, which is useful for organizing long lists of choices.
      https://symfony.com/doc/current/reference/forms/types/choice.html#group-by

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `placeholder` option in `ChoiceType`?
    answers:
      -
        value: >
          To define the default selected value.
        correct: false
      -
        value: >
          To display a "Please Select" or similar option at the top of the select box.
        correct: true
      -
        value: >
          To provide a tooltip for the select box.
        correct: false
      -
        value: >
          To enable a search filter for the choices.
        correct: false
    help: |
      The `placeholder` option in `ChoiceType` adds an empty option at the top of the select box, typically with text like "Choose an option" or "Please Select", which is useful for indicating that no option is selected.
      https://symfony.com/doc/current/reference/forms/types/choice.html#placeholder

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `query_builder` option in `EntityType`?
    answers:
      -
        value: >
          To define a custom DQL query to fetch the entities for the choices.
        correct: true
      -
        value: >
          To specify the entity manager to use.
        correct: false
      -
        value: >
          To set the default selected entity.
        correct: false
      -
        value: >
          To enable caching for the entity choices.
        correct: false
    help: |
      The `query_builder` option in `EntityType` allows you to provide a custom query builder instance or a callable that returns one, giving you fine-grained control over which entities are displayed as choices.
      https://symfony.com/doc/current/reference/forms/types/entity.html#query-builder

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `choice_attr` option in `ChoiceType`?
    answers:
      -
        value: >
          To add HTML attributes to the `<select>` element.
        correct: false
      -
        value: >
          To add HTML attributes to individual `<option>` or `<input type="radio/checkbox">` elements.
        correct: true
      -
        value: >
          To define the CSS class for the choices.
        correct: false
      -
        value: >
          To set the `id` attribute for each choice.
        correct: false
    help: |
      The `choice_attr` option allows you to provide an array or a callable that returns an array of HTML attributes to be applied to each individual choice element (e.g., `<option>`, `<input type="radio">`, `<input type="checkbox">`).
      https://symfony.com/doc/current/reference/forms/types/choice.html#choice-attr

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `error_mapping` option in a form?
    answers:
      -
        value: >
          To map validation errors to specific Twig templates.
        correct: false
      -
        value: >
          To map errors from one field to another, or to the form itself.
        correct: true
      -
        value: >
          To define custom error messages.
        correct: false
      -
        value: >
          To enable or disable error bubbling.
        correct: false
    help: |
      The `error_mapping` option allows you to remap validation errors from one property path to another, or to the form itself, which is useful for displaying errors in a more user-friendly way.
      https://symfony.com/doc/current/reference/forms/types/form.html#error-mapping

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `allow_add` option in `CollectionType`?
    answers:
      -
        value: >
          To allow new entries to be added to the collection by the user.
        correct: true
      -
        value: >
          To allow existing entries to be modified.
        correct: false
      -
        value: >
          To enable JavaScript for adding new collection items.
        correct: false
      -
        value: >
          To set the maximum number of entries allowed.
        correct: false
    help: |
      When `allow_add` is set to `true`, it signals that new entries can be added to the collection. This is typically used in conjunction with JavaScript to dynamically add new form rows.
      https://symfony.com/doc/current/reference/forms/types/collection.html#allow-add

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `allow_delete` option in `CollectionType`?
    answers:
      -
        value: >
          To allow existing entries to be removed from the collection by the user.
        correct: true
      -
        value: >
          To allow the entire collection to be deleted.
        correct: false
      -
        value: >
          To enable JavaScript for deleting collection items.
        correct: false
      -
        value: >
          To set the minimum number of entries allowed.
        correct: false
    help: |
      When `allow_delete` is set to `true`, it signals that existing entries can be removed from the collection. This is typically used with JavaScript to dynamically remove form rows.
      https://symfony.com/doc/current/reference/forms/types/collection.html#allow-delete

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `delete_empty` option in `CollectionType`?
    answers:
      -
        value: >
          To automatically remove entries from the collection if they are submitted with empty data.
        correct: true
      -
        value: >
          To prevent empty entries from being added to the collection.
        correct: false
      -
        value: >
          To delete the entire collection if it's empty.
        correct: false
      -
        value: >
          To hide empty entries from the display.
        correct: false
    help: |
      When `delete_empty` is set to `true`, if a submitted entry in a `CollectionType` is empty (e.g., all its fields are blank), that entry will be automatically removed from the collection.
      https://symfony.com/doc/current/reference/forms/types/collection.html#delete-empty

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `entry_options` option in `CollectionType`?
    answers:
      -
        value: >
          To pass options to the `CollectionType` itself.
        correct: false
      -
        value: >
          To pass options to each individual form type within the collection.
        correct: true
      -
        value: >
          To define options for new entries only.
        correct: false
      -
        value: >
          To set default options for all collection types.
        correct: false
    help: |
      The `entry_options` option is an array of options that will be passed to each individual form type instance (`entry_type`) within the collection.
      https://symfony.com/doc/current/reference/forms/types/collection.html#entry-options

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `prototype` option in `CollectionType`?
    answers:
      -
        value: >
          To define the initial number of entries in the collection.
        correct: false
      -
        value: >
          To render a template for new, dynamically added collection items.
        correct: true
      -
        value: >
          To specify the data for the first entry.
        correct: false
      -
        value: >
          To enable or disable the display of existing entries.
        correct: false
    help: |
      When `allow_add` is `true`, the `prototype` option, if enabled, renders a template for a new collection item. This HTML can then be used by JavaScript to dynamically add new form rows.
      https://symfony.com/doc/current/reference/forms/types/collection.html#prototype

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `translation_domain` option in a form?
    answers:
      -
        value: >
          To define the domain for form field labels and error messages for translation.
        correct: true
      -
        value: >
          To specify the database table for form data.
        correct: false
      -
        value: >
          To set the default locale for the form.
        correct: false
      -
        value: >
          To enable or disable translation for the form.
        correct: false
    help: |
      The `translation_domain` option specifies the message domain used for translating labels, help messages, and error messages associated with the form.
      https://symfony.com/doc/current/reference/forms/types/form.html#translation-domain

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `attr` option when defining a form field in `buildForm()`?
    answers:
      -
        value: >
          To add HTML attributes directly to the rendered input element.
        correct: true
      -
        value: >
          To define the data attributes for the field.
        correct: false
      -
        value: >
          To specify the CSS class for the field's label.
        correct: false
      -
        value: >
          To set the `id` attribute of the field.
        correct: false
    help: |
      The `attr` option in a form field's definition allows you to pass an array of HTML attributes that will be applied to the rendered HTML input element.
      https://symfony.com/doc/current/reference/forms/types/form.html#attr

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
        `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `label_attr` option in a form field?
    answers:
      -
        value: >
          To add HTML attributes to the input element.
        correct: false
      -
        value: >
          To add HTML attributes to the `label` element associated with the field.
        correct: true
      -
        value: >
          To define the label text.
        correct: false
      -
        value: >
          To set the `for` attribute of the label.
        correct: false
    help: |
      The `label_attr` option allows you to pass an array of HTML attributes that will be applied to the `<label>` element rendered for the form field.
      https://symfony.com/doc/current/reference/forms/types/form.html#label-attr

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `row_attr` option in a form field?
    answers:
      -
        value: >
          To add HTML attributes to the input element.
        correct: false
      -
        value: >
          To add HTML attributes to the `div` element that wraps the label, widget, and errors when using `form_row()`.
        correct: true
      -
        value: >
          To define attributes for the entire form row.
        correct: false
      -
        value: >
          To set attributes for the field's errors.
        correct: false
    help: |
      The `row_attr` option allows you to pass an array of HTML attributes that will be applied to the `div` element (or other tag, depending on the theme) that wraps the label, widget, and errors when `form_row()` is used.
      https://symfony.com/doc/current/reference/forms/types/form.html#row-attr

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `help_attr` option in a form field?
    answers:
      -
        value: >
          To add HTML attributes to the help message element.
        correct: true
      -
        value: >
          To define the help message text.
        correct: false
      -
        value: >
          To set the CSS class for the help message.
        correct: false
      -
        value: >
          To link to external help documentation.
        correct: false
    help: |
      The `help_attr` option allows you to pass an array of HTML attributes that will be applied to the element (e.g., `div` or `p`) that renders the help message for the form field.
      https://symfony.com/doc/current/reference/forms/types/form.html#help-attr

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `error_attr` option in a form field?
    answers:
      -
        value: >
          To add HTML attributes to the error message element.
        correct: true
      -
        value: >
          To define the error message text.
        correct: false
      -
        value: >
          To set the CSS class for the error message.
        correct: false
      -
        value: >
          To link to external error documentation.
        correct: false
    help: |
      The `error_attr` option allows you to pass an array of HTML attributes that will be applied to the element (e.g., `ul` or `div`) that renders the error messages for the form field.
      https://symfony.com/doc/current/reference/forms/types/form.html#error-attr

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `label_format` option in a form field?
    answers:
      -
        value: >
          To define the format string for the label, allowing placeholders like `%name%`.
        correct: true
      -
        value: >
          To set the default label text.
        correct: false
      -
        value: >
          To specify the translation key for the label.
        correct: false
      -
        value: >
          To control the HTML tag used for the label.
        correct: false
    help: |
      The `label_format` option allows you to define a format string for the label, which can include placeholders like `%name%` (the field's name) to dynamically generate the label text.
      https://symfony.com/doc/current/reference/forms/types/form.html#label-format

  -
    question: >
      Which built-in form type is used for a URL input field?
    answers:
      -
        value: >
          `LinkType::class`
        correct: false
      -
        value: >
          `UrlType::class`
        correct: true
      -
        value: >
          `WebAddressType::class`
        correct: false
      -
        value: >
          `PathType::class`
        correct: false
    help: |
      The `UrlType` is specifically designed for URL input fields, rendering an `<input type="url">` element.
      https://symfony.com/doc/current/reference/forms/types/url.html

  -
    question: >
      What is the purpose of the `row_attr` option in a form field?
    answers:
      -
        value: >
          To add HTML attributes to the input element.
        correct: false
      -
        value: >
          To add HTML attributes to the `div` element that wraps the label, widget, and errors when using `form_row()`.
        correct: true
      -
        value: >
          To define attributes for the entire form row.
        correct: false
      -
        value: >
          To set attributes for the field's errors.
        correct: false
    help: |
      The `row_attr` option allows you to pass an array of HTML attributes that will be applied to the `div` element (or other tag, depending on the theme) that wraps the label, widget, and errors when `form_row()` is used.
      https://symfony.com/doc/current/reference/forms/types/form.html#row-attr