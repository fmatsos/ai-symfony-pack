category: Forms
questions:
  - question: What is the primary method used in a Symfony controller (extending
      `AbstractController`) to create a form instance from a dedicated form type
      class?
    answers:
      - value: "`$this->createForm(TaskType::class, $task);`"
        correct: true
      - value: "`$this->createFormBuilder($task);`"
        correct: false
      - value: "`$this->get('form.factory')->create(TaskType::class, $task);`"
        correct: false
      - value: "`$this->getForm(TaskType::class, $task);`"
        correct: false
    help: >-
      The `createForm()` method is provided by `AbstractController` as a
      convenient way to create a form instance from a form type class.

      https://github.com/fmatsos/symfony-docs/blob/v7.0/forms.rst#_snippet_6
  - question: Which method is used on a Symfony `Form` object to process the
      incoming HTTP request and populate the form with submitted data?
    answers:
      - value: "`handleRequest($request)`"
        correct: true
      - value: "`submit($request)`"
        correct: false
      - value: "`bind($request)`"
        correct: false
      - value: "`process($request)`"
        correct: false
    help: |-
      The `handleRequest()` method is responsible for inspecting the request and populating the form with any submitted data.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/components/form.rst#_snippet_2
  - question: In a Twig template, which function can be used to render an entire
      Symfony form, including all its fields, labels, and errors, with a single
      call?
    answers:
      - value: "`{{ form(form) }}`"
        correct: true
      - value: "`{{ form_render(form) }}`"
        correct: false
      - value: "`{{ render_form(form) }}`"
        correct: false
      - value: "`{{ form_all(form) }}`"
        correct: false
    help: |-
      The `form()` Twig function renders the HTML of a complete form.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/forms.rst#_snippet_10
  - question: When creating a custom form type in Symfony, which class should it
      typically extend?
    answers:
      - value: "`Symfony\\Component\\Form\\AbstractType`"
        correct: true
      - value: "`Symfony\\Component\\Form\\FormType`"
        correct: false
      - value: "`Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType`"
        correct: false
      - value: "`Symfony\\Component\\Form\\FormBuilder`"
        correct: false
    help: >-
      Custom form types typically extend `Symfony\Component\Form\AbstractType`
      and implement the `buildForm()` and `configureOptions()` methods.

      https://github.com/fmatsos/symfony-docs/blob/v7.0/forms.rst#_snippet_5
  - question: How can you configure a global form theme for all forms in a Symfony
      application using YAML configuration?
    answers:
      - value: By adding the theme path to `twig.form_themes` in
          `config/packages/twig.yaml`.
        correct: true
      - value: By adding the theme path to `framework.form.themes` in
          `config/packages/framework.yaml`.
        correct: false
      - value: By calling `Form::setDefaultTheme()` in a service.
        correct: false
      - value: By registering a form extension with the theme.
        correct: false
    help: |-
      Global form themes are configured under `twig.form_themes` in the Twig configuration file.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/form_themes.rst#_snippet_0
  - question: Which option can be set to `false` when creating a form to disable
      CSRF protection for that specific form?
    answers:
      - value: "`csrf_protection`"
        correct: true
      - value: "`enable_csrf`"
        correct: false
      - value: "`security_enabled`"
        correct: false
      - value: "`protect_csrf`"
        correct: false
    help: |-
      The `csrf_protection` option can be set to `false` to disable CSRF protection for a particular form.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/components/form.rst#_snippet_7
  - question: >-
      Consider the following `buildForm` method:


      ```php

      public function buildForm(FormBuilderInterface $builder, array $options):
      void

      {
          $builder
              ->add('task', TextType::class)
              ->add('dueDate', DateType::class);
      }

      ```


      Which Symfony component provides `TextType` and `DateType`?
    answers:
      - value: "`Symfony\\Component\\Form\\Extension\\Core\\Type`"
        correct: true
      - value: "`Symfony\\Component\\Form\\Type`"
        correct: false
      - value: "`Symfony\\Bundle\\FrameworkBundle\\Form\\Type`"
        correct: false
      - value: "`Symfony\\Component\\Form\\BuiltinTypes`"
        correct: false
    help: >-
      Built-in form types like `TextType` and `DateType` are part of the
      `Symfony\Component\Form\Extension\Core\Type` namespace.

      https://github.com/fmatsos/symfony-docs/blob/v7.0/forms.rst#_snippet_9
  - question: What is the purpose of the `transform()` method in a Symfony Form Data
      Transformer?
    answers:
      - value: To convert model data to normalized data (for model transformers).
        correct: true
      - value: To convert normalized data to view data (for view transformers).
        correct: true
      - value: To convert view data to normalized data.
        correct: false
      - value: To convert normalized data to model data.
        correct: false
    help: |-
      The `transform()` method converts data from a more complex format (model or normalized) to a simpler format (normalized or view) suitable for the form field.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/data_transformers.rst#_snippet_11
  - question: Which `FormEvents` constant is dispatched at the beginning of the
      `Form::setData()` method and allows modification of the data given during
      pre-population?
    answers:
      - value: "`FormEvents::PRE_SET_DATA`"
        correct: true
      - value: "`FormEvents::POST_SET_DATA`"
        correct: false
      - value: "`FormEvents::PRE_SUBMIT`"
        correct: false
      - value: "`FormEvents::POST_SUBMIT`"
        correct: false
    help: |-
      `FormEvents::PRE_SET_DATA` is dispatched at the beginning of `Form::setData()` and is used to modify the data before it's bound to the form.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/events.rst#_snippet_1
  - question: What is the purpose of a Symfony Form Type Extension?
    answers:
      - value: To add new options, modify existing options, or add new fields to
          existing form types without modifying their original classes.
        correct: true
      - value: To create entirely new form types.
        correct: false
      - value: To handle form submission and validation logic.
        correct: false
      - value: To render form fields in Twig templates.
        correct: false
    help: |-
      Form Type Extensions allow you to extend the functionality of existing form types, including built-in ones, by adding or modifying options and fields.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/create_form_type_extension.rst#_snippet_6 (implied from usage)
  - question: Which method of `AbstractController` provides a shortcut to get the
      `FormBuilderInterface` for creating a standalone form?
    answers:
      - value: "`createFormBuilder()`"
        correct: true
      - value: "`getFormBuilder()`"
        correct: false
      - value: "`buildForm()`"
        correct: false
      - value: "`get('form.factory')->createBuilder()`"
        correct: false
    help: |-
      The `createFormBuilder()` method is a shortcut provided by `AbstractController` to obtain a `FormBuilderInterface` instance.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/components/form.rst#_snippet_16
  - question: After calling `handleRequest($request)` on a form, which two methods
      should you typically call to check if the form was submitted and if its
      data is valid?
    answers:
      - value: "`isSubmitted()` and `isValid()`"
        correct: true
      - value: "`isPosted()` and `isValid()`"
        correct: false
      - value: "`hasData()` and `isValidated()`"
        correct: false
      - value: "`isHandled()` and `hasErrors()`"
        correct: false
    help: |-
      The common pattern for form handling involves checking `isSubmitted()` and `isValid()` after `handleRequest()`.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/components/form.rst#_snippet_23
  - question: To render only the HTML widget for a specific form field named `age`
      in Twig, which function should be used?
    answers:
      - value: "`{{ form_widget(form.age) }}`"
        correct: true
      - value: "`{{ form_row(form.age) }}`"
        correct: false
      - value: "`{{ form.age.widget }}`"
        correct: false
      - value: "`{{ form_field(form.age) }}`"
        correct: false
    help: |-
      The `form_widget()` Twig function renders the HTML widget of a given field.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/form_themes.rst#_snippet_8
  - question: How can you apply a specific Twig form theme, e.g.,
      `my_custom_theme.html.twig`, to only a single form instance within a Twig
      template?
    answers:
      - value: "`{% form_theme form 'form/my_custom_theme.html.twig' %}`"
        correct: true
      - value: "`{{ form(form, {'theme': 'form/my_custom_theme.html.twig'}) }}`"
        correct: false
      - value: "`{% include 'form/my_custom_theme.html.twig' with {'form': form} %}`"
        correct: false
      - value: By setting a `theme` option in the form type.
        correct: false
    help: |-
      The `form_theme` Twig tag allows applying a theme to specific form instances within a template.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/form_themes.rst#_snippet_20
  - question: What is the purpose of `SubmitType::class` when added to a form builder?
    answers:
      - value: To render a submit button for the form.
        correct: true
      - value: To define the form's submission URL.
        correct: false
      - value: To handle form validation on submission.
        correct: false
      - value: To automatically submit the form when rendered.
        correct: false
    help: |-
      `SubmitType` represents a submit button in a Symfony form.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/forms.rst#_snippet_9
  - question: In a data transformer, which method is responsible for converting
      "norm data" to "model data"?
    answers:
      - value: "`reverseTransform()` (for model transformers)"
        correct: true
      - value: "`transform()` (for model transformers)"
        correct: false
      - value: "`reverseTransform()` (for view transformers)"
        correct: false
      - value: "`mapToModel()`"
        correct: false
    help: |-
      The `reverseTransform()` method in a model transformer converts normalized data back into the application's model format.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/data_transformers.rst#_snippet_11
  - question: Which method of `FormBuilderInterface` is used to attach an event
      listener to a form?
    answers:
      - value: "`addEventListener()`"
        correct: true
      - value: "`addSubscriber()`"
        correct: false
      - value: "`onEvent()`"
        correct: false
      - value: "`listen()`"
        correct: false
    help: |-
      The `addEventListener()` method is used to register a callback function for a specific form event.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/events.rst#_snippet_0
  - question: Which Symfony console command can be used to inspect available form
      types and form type extensions?
    answers:
      - value: "`php bin/console debug:form`"
        correct: true
      - value: "`php bin/console form:debug`"
        correct: false
      - value: "`php bin/console list:forms`"
        correct: false
      - value: "`php bin/console show:form-types`"
        correct: false
    help: >-
      The `debug:form` command provides detailed information about registered
      form types, extensions, and guessers.

      https://github.com/fmatsos/symfony-docs/blob/v7.0/forms.rst#_snippet_2
  - question: When creating a form using `createForm()`, how can you pass custom
      options like `action` and `method`?
    answers:
      - value: As an associative array in the third argument of `createForm()`.
        correct: true
      - value: By calling `setOption()` on the form object after creation.
        correct: false
      - value: Through a dedicated `configureForm()` method in the controller.
        correct: false
      - value: These options can only be defined within the form type's
          `configureOptions()` method.
        correct: false
    help: >-
      Options like `action` and `method` can be passed as an array to the
      `createForm()` method.

      https://github.com/fmatsos/symfony-docs/blob/v7.0/forms.rst#_snippet_20
  - question: After a form is submitted and valid, how do you retrieve the submitted
      and mapped data from the form object?
    answers:
      - value: "`$form->getData()`"
        correct: true
      - value: "`$form->getSubmittedData()`"
        correct: false
      - value: "`$form->getValues()`"
        correct: false
      - value: "`$form->getMappedData()`"
        correct: false
    help: |-
      The `getData()` method retrieves the 'model data' from the form, which is the data mapped to the underlying object after submission and transformation.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/components/form.rst#_snippet_23
  - question: Which Twig function is used to render the opening HTML `<form>` tag,
      including `action`, `method`, and `enctype` attributes?
    answers:
      - value: "`{{ form_start(form) }}`"
        correct: true
      - value: "`{{ form_open(form) }}`"
        correct: false
      - value: "`{{ form_begin(form) }}`"
        correct: false
      - value: "`{{ form_header(form) }}`"
        correct: false
    help: |-
      The `form_start()` Twig function renders the start tag of a form and handles its attributes.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/form_collections.rst#_snippet_5
  - question: If you want to create a custom form theme that reuses blocks from
      Symfony's built-in `form_div_layout.html.twig`, which Twig keyword should
      you use in your custom theme file?
    answers:
      - value: "`use`"
        correct: true
      - value: "`extends`"
        correct: false
      - value: "`import`"
        correct: false
      - value: "`include`"
        correct: false
    help: |-
      The `use` keyword in Twig is used to import blocks from other templates, which is essential for extending built-in form themes.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/form_themes.rst#_snippet_7
  - question: To allow a form to manage a collection of embedded entities (e.g.,
      multiple `Tag` entities within a `Task` form), which built-in form type
      should be used?
    answers:
      - value: "`CollectionType::class`"
        correct: true
      - value: "`EntityType::class`"
        correct: false
      - value: "`ArrayType::class`"
        correct: false
      - value: "`EmbeddedType::class`"
        correct: false
    help: |-
      The `CollectionType` is used to render a collection of forms, typically for managing multiple related entities.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/form_collections.rst#_snippet_3
  - question: Which method in a view transformer converts "norm data" to "view data"
      for display in form fields?
    answers:
      - value: "`transform()`"
        correct: true
      - value: "`reverseTransform()`"
        correct: false
      - value: "`mapToView()`"
        correct: false
      - value: "`format()`"
        correct: false
    help: |-
      The `transform()` method in a view transformer converts normalized data into the format used to fill form fields (view data).
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/data_transformers.rst#_snippet_11
  - question: What is the primary purpose of the `FormEvents::PRE_SUBMIT` event?
    answers:
      - value: To change data from the request before submitting it to the form.
        correct: true
      - value: To modify the form's underlying model data after submission.
        correct: false
      - value: To modify the data given during form pre-population.
        correct: false
      - value: To perform actions after the form has been successfully submitted and
          validated.
        correct: false
    help: |-
      The `PRE_SUBMIT` event is dispatched at the beginning of `Form::submit()` and allows modification of request data or form fields before data binding.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/events.rst#_snippet_3
  - question: When building a form using `FormFactory::createBuilder()` outside of a
      controller, how do you typically get the final `FormInterface` object?
    answers:
      - value: By calling `->getForm()` on the `FormBuilderInterface` instance.
        correct: true
      - value: By calling `->build()` on the `FormBuilderInterface` instance.
        correct: false
      - value: The `createBuilder()` method directly returns the `FormInterface`.
        correct: false
      - value: By calling `->create()` on the `FormBuilderInterface` instance.
        correct: false
    help: |-
      The `getForm()` method on a `FormBuilderInterface` instance returns the final `FormInterface` object.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/components/form.rst#_snippet_19
  - question: Which method of `FormInterface` can be used to programmatically submit
      data to a form, bypassing `handleRequest()`?
    answers:
      - value: "`submit()`"
        correct: true
      - value: "`setData()`"
        correct: false
      - value: "`fill()`"
        correct: false
      - value: "`populate()`"
        correct: false
    help: |-
      The `submit()` method allows programmatic submission of data to a form, triggering the submission events.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/direct_submit.rst#_snippet_0
  - question: To render only the global errors of a form (errors not associated with
      any specific field) in Twig, which function should be used?
    answers:
      - value: "`{{ form_errors(form) }}`"
        correct: true
      - value: "`{{ form_errors(form.global) }}`"
        correct: false
      - value: "`{{ form_global_errors(form) }}`"
        correct: false
      - value: "`{{ form.errors.global }}`"
        correct: false
    help: |-
      Calling `form_errors()` with the main form view object renders any 'global' errors not associated with specific fields.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/form_customization.rst#_snippet_8
  - question: How can you apply a specific form theme to a form while explicitly
      disabling any globally defined form themes?
    answers:
      - value: "`{% form_theme form with ['my_theme.html.twig'] only %}`"
        correct: true
      - value: "`{% form_theme form 'my_theme.html.twig' without_global %}`"
        correct: false
      - value: "`{% form_theme form 'my_theme.html.twig' override %}`"
        correct: false
      - value: By setting `render_global_themes` to `false` in the form options.
        correct: false
    help: |-
      The `only` keyword in `form_theme` ensures that only the listed themes are used, ignoring global themes.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/form_themes.rst#_snippet_6
  - question: >-
      Given the following code snippet, what is the effect of the
      `csrf_protection` option?


      ```php

      $form = $formFactory->createBuilder(FormType::class, null,
      ['csrf_protection' => false])
          ->getForm();
      ```
    answers:
      - value: It disables CSRF protection for this specific form instance.
        correct: true
      - value: It enables CSRF protection for this specific form instance.
        correct: false
      - value: It configures the CSRF token manager for the entire application.
        correct: false
      - value: It only affects the rendering of the CSRF token field, not its
          validation.
        correct: false
    help: |-
      Setting `csrf_protection` to `false` explicitly disables CSRF protection for the form being built.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/components/form.rst#_snippet_7
  - question: What is the purpose of setting the `mapped` option to `false` for a
      form field?
    answers:
      - value: The field's data will not be read from or written to the underlying data
          object (entity).
        correct: true
      - value: The field will not be rendered in the Twig template.
        correct: false
      - value: The field will not be validated.
        correct: false
      - value: The field will be hidden from the user interface.
        correct: false
    help: >-
      The `mapped` option, when set to `false`, indicates that the field is not
      mapped to a property on the underlying object.

      https://github.com/fmatsos/symfony-docs/blob/v7.0/forms.rst#_snippet_27
  - question: For immutable data objects, which interface should a custom form type
      implement to handle the mapping between form fields and the object?
    answers:
      - value: "`Symfony\\Component\\Form\\DataMapperInterface`"
        correct: true
      - value: "`Symfony\\Component\\Form\\DataTransformerInterface`"
        correct: false
      - value: "`Symfony\\Component\\Form\\FormInterface`"
        correct: false
      - value: "`Symfony\\Component\\Form\\FormTypeInterface`"
        correct: false
    help: |-
      The `DataMapperInterface` is used for custom mapping logic, particularly useful for immutable objects where direct property setting is not possible.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/data_mappers.rst#_snippet_1
  - question: When is the `FormEvents::POST_SET_DATA` event dispatched, and what is
      its primary purpose?
    answers:
      - value: At the end of `Form::setData()`; to modify a form (e.g., add/remove
          fields) depending on the populated data.
        correct: true
      - value: At the beginning of `Form::setData()`; to modify the data given during
          pre-population.
        correct: false
      - value: After form submission and validation; to perform actions with the
          submitted data.
        correct: false
      - value: Before form submission; to modify request data.
        correct: false
    help: |-
      `FormEvents::POST_SET_DATA` is dispatched at the end of `Form::setData()` and is suitable for dynamic form modifications based on the initial data.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/events.rst#_snippet_1
  - question: If you want a form type extension to apply to multiple built-in form
      types (e.g., `DateTimeType`, `DateType`, `TimeType`), how should the
      `getExtendedTypes()` method be implemented?
    answers:
      - value: It should return an iterable (e.g., an array) containing the FQCNs of all
          extended types.
        correct: true
      - value: It should return a single FQCN, and you need multiple extensions for
          multiple types.
        correct: false
      - value: It should return a string with comma-separated type names.
        correct: false
      - value: It should return `null` to apply to all types.
        correct: false
    help: |-
      The `getExtendedTypes()` method in a form type extension should return an iterable of class names that the extension applies to.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/create_form_type_extension.rst#_snippet_6
  - question: Which `FormFactoryInterface` method allows you to explicitly set the
      HTML `name` attribute of the form?
    answers:
      - value: "`createNamed()`"
        correct: true
      - value: "`createForm()` with a `name` option."
        correct: false
      - value: "`setName()` on the form builder."
        correct: false
      - value: "`setHtmlName()` on the form object."
        correct: false
    help: >-
      The `createNamed()` method allows you to specify a custom name for the
      form, which will be used as the HTML `name` attribute.

      https://github.com/fmatsos/symfony-docs/blob/v7.0/forms.rst#_snippet_23
  - question: The `Symfony\Component\Form\Form::handleRequest` method can be called
      without any arguments. In this case, where does it read the submitted data
      from?
    answers:
      - value: PHP superglobals (`$_POST` or `$_GET`) based on the form's configured
          HTTP method.
        correct: true
      - value: The request body as JSON.
        correct: false
      - value: A globally accessible form data container.
        correct: false
      - value: It will throw an exception if no `Request` object is provided.
        correct: false
    help: |-
      If no `Request` object is provided, `handleRequest()` uses a `NativeRequestHandler` to read data from PHP superglobals (`$_POST` or `$_GET`).
      https://github.com/fmatsos/symfony-docs/blob/v7.0/components/form.rst#_snippet_2
  - question: Which Twig function is used to render the closing HTML `</form>` tag?
    answers:
      - value: "`{{ form_end(form) }}`"
        correct: true
      - value: "`{{ form_close(form) }}`"
        correct: false
      - value: "`{{ form_finish(form) }}`"
        correct: false
      - value: "`{{ form_footer(form) }}`"
        correct: false
    help: |-
      The `form_end()` Twig function renders the end tag of a form.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/form_themes.rst#_snippet_2
  - question: How can you define a form theme directly within the same Twig template
      where the form is rendered, overriding specific field widgets or rows for
      that single form instance?
    answers:
      - value: "`{% form_theme form _self %}`"
        correct: true
      - value: "`{% form_theme form 'inline_theme' %}`"
        correct: false
      - value: "`{% form_theme form with self %}`"
        correct: false
      - value: By defining Twig blocks with `_form_field_widget` naming convention.
        correct: false
    help: |-
      Using `{% form_theme form _self %}` allows defining form theme blocks directly within the current template.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/form_themes.rst#_snippet_17
  - question: To enable the deletion of items within a `CollectionType` field when
      items are removed from the submitted data, which option should be set to
      `true`?
    answers:
      - value: "`allow_delete`"
        correct: true
      - value: "`delete_empty`"
        correct: false
      - value: "`can_delete`"
        correct: false
      - value: "`enable_deletion`"
        correct: false
    help: |-
      The `allow_delete` option for `CollectionType` enables the removal of items from the collection upon form submission.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/form_collections.rst#_snippet_21
  - question: >-
      Consider the following incorrect usage of a data transformer. Why is this
      problematic?


      ```php

      $builder->add('issue', TextType::class)
          ->addModelTransformer($transformer);
      ```
    answers:
      - value: The `addModelTransformer()` method is called on the `FormBuilder` for the
          entire form, not on the specific field's builder.
        correct: true
      - value: Data transformers can only be added in the `configureOptions()` method.
        correct: false
      - value: The `TextType` does not support model transformers.
        correct: false
      - value: The transformer should be passed as an option to the `add()` method.
        correct: false
    help: |-
      Model transformers should be applied to the specific field's builder, not the main form builder, to ensure they only affect the intended field.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/data_transformers.rst#_snippet_8
  - question: Instead of adding an anonymous function as an event listener, what is
      the recommended way to encapsulate form event logic into a reusable class?
    answers:
      - value: Create a class that implements `EventSubscriberInterface` and register it
          with `addEventSubscriber()`.
        correct: true
      - value: Create a service and inject it into the form type, then call its methods
          directly.
        correct: false
      - value: Define a static method in the form type and call it from the listener.
        correct: false
      - value: Use a trait to include event handling methods.
        correct: false
    help: |-
      Implementing `EventSubscriberInterface` and registering the subscriber with `addEventSubscriber()` is the recommended way for reusable event logic.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/events.rst#_snippet_11
  - question: How can you add validation constraints directly to individual form
      fields when building a form with `createFormBuilder` without a dedicated
      form type class?
    answers:
      - value: By passing a `constraints` option array to the `add()` method for each
          field.
        correct: true
      - value: By defining a `validation_rules` option on the form builder.
        correct: false
      - value: By calling `addConstraint()` on the `FormBuilderInterface`.
        correct: false
      - value: Constraints can only be defined in the entity or in a dedicated form
          type.
        correct: false
    help: |-
      Constraints can be added directly to fields using the `constraints` option in the `add()` method.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/without_class.rst#_snippet_2
  - question: When creating a custom Twig form layout, how can you define default
      CSS classes for form elements like rows, widgets, labels, help texts, and
      errors?
    answers:
      - value: By overriding specific Twig blocks (e.g., `form_row`,
          `widget_attributes`) and setting `_class` variables within them.
        correct: true
      - value: By defining a `default_classes` option in the form type.
        correct: false
      - value: By using a global Twig variable for CSS classes.
        correct: false
      - value: By using `form_theme` with a YAML file specifying classes.
        correct: false
    help: |-
      Custom form themes can override specific blocks to define default classes for various form elements.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/tailwindcss.rst#_snippet_2
  - question: What is the purpose of setting the `inherit_data` option to `true` in
      a custom form type?
    answers:
      - value: It allows the form type to inherit data from its parent form, accessing
          properties of the parent entity.
        correct: true
      - value: It makes the form type's data immutable.
        correct: false
      - value: It ensures that the form's data is automatically persisted to the
          database.
        correct: false
      - value: It makes the form type extend the data class of its parent form.
        correct: false
    help: |-
      The `inherit_data` option is used when a form type should map its fields directly to the data of its parent form, rather than to its own data object.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/inherit_data_option.rst#_snippet_2
  - question: What does the `form_row()` Twig function typically render for a form field?
    answers:
      - value: The label, the widget (input field), and any errors and help text for the
          field.
        correct: true
      - value: Only the HTML input tag for the field.
        correct: false
      - value: Only the label and the input tag for the field.
        correct: false
      - value: The entire form, including its start and end tags.
        correct: false
    help: |-
      The `form_row()` helper renders the label, widget, errors, and help text for a single form field within a common HTML structure (e.g., a `div`).
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/dynamic_form_modification.rst#_snippet_15
  - question: In Symfony's `DomCrawler` component, which method on a `Form` object
      retrieves form values in a multi-dimensional array structure, mimicking
      `$_POST` or `$_GET`?
    answers:
      - value: "`getPhpValues()`"
        correct: true
      - value: "`getValues()`"
        correct: false
      - value: "`getArrayValues()`"
        correct: false
      - value: "`getFormData()`"
        correct: false
    help: |-
      The `getPhpValues()` method returns the form's values as a PHP array, similar to how `$_POST` or `$_GET` would be structured.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/components/dom_crawler.rst#_snippet_28
  - question: Which form event is commonly used to dynamically add or remove form
      fields based on the initial data or submitted data?
    answers:
      - value: "`FormEvents::PRE_SET_DATA` and `FormEvents::PRE_SUBMIT`"
        correct: true
      - value: "`FormEvents::POST_SUBMIT`"
        correct: false
      - value: "`FormEvents::POST_SET_DATA`"
        correct: false
      - value: "`FormEvents::BUILD`"
        correct: false
    help: |-
      `PRE_SET_DATA` is used for dynamic fields based on initial data, while `PRE_SUBMIT` is used for dynamic fields based on submitted data.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/dynamic_form_modification.rst#_snippet_1 and https://github.com/fmatsos/symfony-docs/blob/v7.0/form/events.rst#_snippet_3
  - question: Which Symfony component is primarily responsible for managing CSRF
      tokens in forms?
    answers:
      - value: "`Symfony\\Component\\Security\\Csrf`"
        correct: true
      - value: "`Symfony\\Component\\Form\\Extension\\Security`"
        correct: false
      - value: "`Symfony\\Component\\HttpFoundation\\Session`"
        correct: false
      - value: "`Symfony\\Component\\Validator`"
        correct: false
    help: |-
      The `Symfony\Component\Security\Csrf` component provides the necessary classes for CSRF token generation and validation.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/components/form.rst#_snippet_5
  - question: Why is `form_parent(form_view)` preferred over `form.parent` when
      checking for a parent form view in Twig?
    answers:
      - value: To avoid conflicts if a child form is named 'parent'.
        correct: true
      - value: "`form.parent` is deprecated in Symfony 7."
        correct: false
      - value: "`form_parent()` provides more detailed information about the parent."
        correct: false
      - value: "`form.parent` only works for root forms."
        correct: false
    help: |-
      The `form_parent()` function is a reliable way to get the parent form view, preventing issues if a child field is named 'parent'.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/form_customization.rst#_snippet_14
  - question: When working with `CollectionType` and Doctrine entities, why is it
      often recommended to set `by_reference` to `false`?
    answers:
      - value: To ensure Symfony uses the entity's `add` and `remove` methods for the
          collection, crucial for proper ORM integration.
        correct: true
      - value: To prevent direct modification of the underlying collection object.
        correct: false
      - value: To improve form rendering performance.
        correct: false
      - value: To disable JavaScript-based collection management.
        correct: false
    help: |-
      Setting `by_reference` to `false` for `CollectionType` ensures that Symfony interacts with the collection via the entity's adder/remover methods, which is vital for Doctrine relationships.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/form_collections.rst#_snippet_17
  - question: Which method in a custom form type is used to add fields to the form
      builder?
    answers:
      - value: "`buildForm(FormBuilderInterface $builder, array $options): void`"
        correct: true
      - value: "`configureFields(OptionsResolver $resolver): void`"
        correct: false
      - value: "`defineForm(FormBuilderInterface $builder): void`"
        correct: false
      - value: "`createFields(array $options): array`"
        correct: false
    help: |-
      The `buildForm()` method is where you define the fields of your form type.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/forms.rst#_snippet_5
  - question: "What is the purpose of the `configureOptions(OptionsResolver
      $resolver): void` method in a Symfony form type?"
    answers:
      - value: To define and configure options for the form type, including default
          values, allowed types, and required options.
        correct: true
      - value: To add validation constraints to the form fields.
        correct: false
      - value: To build the form fields dynamically based on options.
        correct: false
      - value: To map form data to the underlying entity.
        correct: false
    help: >-
      The `configureOptions()` method is used to configure the options for the
      form type, typically setting `data_class` and other custom options.

      https://github.com/fmatsos/symfony-docs/blob/v7.0/forms.rst#_snippet_7
  - question: When handling a file upload with a Symfony form, which attribute is
      automatically added to the `<form>` tag by `form_start()` if the form
      contains file input fields?
    answers:
      - value: '`enctype="multipart/form-data"`'
        correct: true
      - value: '`method="POST"`'
        correct: false
      - value: '`accept-charset="UTF-8"`'
        correct: false
      - value: '`data-turbo="true"`'
        correct: false
    help: |-
      The `form_start()` function automatically includes the correct `enctype` property if the form contains upload fields.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/form_customization.rst#_snippet_8
  - question: Which Twig function is used to render the label for a specific form field?
    answers:
      - value: "`{{ form_label(form.fieldName) }}`"
        correct: true
      - value: "`{{ form.fieldName.label }}`"
        correct: false
      - value: "`{{ form_text_label(form.fieldName) }}`"
        correct: false
      - value: "`{{ label(form.fieldName) }}`"
        correct: false
    help: |-
      The `form_label()` Twig function renders the label for the given field.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/form_customization.rst#_snippet_8
  - question: What is the purpose of the `#[Assert\Valid]` attribute on a property
      in a Symfony entity that is mapped to an embedded form type?
    answers:
      - value: To cascade validation to the embedded entity.
        correct: true
      - value: To mark the embedded form as always valid.
        correct: false
      - value: To ensure the embedded form is always present.
        correct: false
      - value: To automatically save the embedded entity to the database.
        correct: false
    help: |-
      The `#[Assert\Valid]` attribute ensures that validation is also performed on the embedded object.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/embedded.rst#_snippet_1
  - question: When dynamically adding elements to a form collection using
      JavaScript, what is the purpose of the `__name__` placeholder in the form
      prototype?
    answers:
      - value: It is a placeholder that needs to be replaced with a unique index to
          generate unique field names and IDs for new collection items.
        correct: true
      - value: It defines the default value for new collection items.
        correct: false
      - value: It indicates a required field in the collection.
        correct: false
      - value: It is a reserved keyword for Symfony's internal collection management.
        correct: false
    help: |-
      The `__name__` placeholder in the prototype is replaced by a unique index when adding new items to a collection dynamically.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/form_collections.rst#_snippet_13
  - question: Which form option, when set to `true` for a `CollectionType` field,
      makes a `prototype` available for JavaScript-based dynamic addition of new
      items?
    answers:
      - value: "`allow_add`"
        correct: true
      - value: "`enable_prototype`"
        correct: false
      - value: "`can_add`"
        correct: false
      - value: "`dynamic`"
        correct: false
    help: |-
      The `allow_add` option for `CollectionType` enables the prototype for adding new items dynamically.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/form_collections.rst#_snippet_7
  - question: What is the purpose of the `label_attr` option when configuring a form
      field?
    answers:
      - value: To add HTML attributes to the `<label>` tag of the field.
        correct: true
      - value: To set the text of the label.
        correct: false
      - value: To add HTML attributes to the input widget of the field.
        correct: false
      - value: To define the CSS class for the entire form row.
        correct: false
    help: |-
      The `label_attr` option is inherited from `FormType` and allows adding HTML attributes to the label element.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/reference/forms/types/money.rst#_snippet_3
  - question: Which Twig function is used to render any errors associated with a
      specific form field?
    answers:
      - value: "`{{ form_errors(form.fieldName) }}`"
        correct: true
      - value: "`{{ form.fieldName.errors }}`"
        correct: false
      - value: "`{{ field_errors(form.fieldName) }}`"
        correct: false
      - value: "`{{ errors(form.fieldName) }}`"
        correct: false
    help: |-
      The `form_errors()` Twig function can be used to render error messages for a specific field.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/form_customization.rst#_snippet_8
  - question: "What is the primary benefit of using `#[Autowire(service:
      'monolog.logger')]` or type-hinting `Psr\\Log\\LoggerInterface` in a form
      type's constructor?"
    answers:
      - value: To inject the logger service for logging within the form type.
        correct: true
      - value: To automatically log all form submissions.
        correct: false
      - value: To enable automatic validation logging.
        correct: false
      - value: To configure the form's logging channel.
        correct: false
    help: |-
      While the provided docs don't explicitly show `#[Autowire]` for a logger in a form type, the general principle of autowiring services (like `Security` in `FriendMessageFormType`) applies. Injecting `LoggerInterface` is standard for logging within services or form types.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/dynamic_form_modification.rst#_snippet_6 (demonstrates service injection)
  - question: When is the `required` option for a form field automatically guessed
      by Symfony?
    answers:
      - value: Based on validation rules (e.g., `NotBlank`) or Doctrine metadata (e.g.,
          if the field is `nullable`).
        correct: true
      - value: Only if the field has a default value.
        correct: false
      - value: When the field type is `TextType`.
        correct: false
      - value: It is never guessed; it must always be explicitly set.
        correct: false
    help: >-
      The `required` option is guessed based on validation constraints like
      `NotBlank` or Doctrine's `nullable` setting.

      https://github.com/fmatsos/symfony-docs/blob/v7.0/forms.rst#_snippet_29
  - question: In Symfony form testing, which base class should you extend for unit
      testing custom form types?
    answers:
      - value: "`Symfony\\Component\\Form\\Test\\TypeTestCase`"
        correct: true
      - value: "`Symfony\\Bundle\\FrameworkBundle\\Test\\WebTestCase`"
        correct: false
      - value: "`PHPUnit\\Framework\\TestCase`"
        correct: false
      - value: "`Symfony\\Component\\Form\\Test\\FormIntegrationTestCase`"
        correct: false
    help: |-
      `TypeTestCase` is the recommended base class for unit testing Symfony form types.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/unit_testing.rst#_snippet_0
  - question: Which method in a form type extension is used to specify which form
      types the extension applies to?
    answers:
      - value: "`getExtendedTypes(): iterable`"
        correct: true
      - value: "`getSupportedTypes(): array`"
        correct: false
      - value: "`getTargetTypes(): array`"
        correct: false
      - value: "`getApplicableTypes(): iterable`"
        correct: false
    help: |-
      The `getExtendedTypes()` method returns an iterable of fully qualified class names of the form types that the extension modifies.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/create_form_type_extension.rst#_snippet_6
  - question: What is the primary purpose of `FormEvents::PRE_SET_DATA`?
    answers:
      - value: To allow modification of the data given during pre-population of the
          form.
        correct: true
      - value: To modify the submitted data before it is bound to the form.
        correct: false
      - value: To perform actions after the form has been successfully submitted.
        correct: false
      - value: To add or remove fields based on user input.
        correct: false
    help: |-
      `FormEvents::PRE_SET_DATA` is dispatched at the beginning of `Form::setData()` and is used to modify the data before it's bound to the form.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/events.rst#_snippet_1
  - question: How can you add an 'input-group' class to the row of an email field in
      a Symfony form using PHP configuration?
    answers:
      - value: Set the `row_attr` option with `['class' => 'input-group']` for the
          field.
        correct: true
      - value: Set the `attr` option with `['class' => 'input-group']` for the field.
        correct: false
      - value: Use a custom form theme to wrap the email field in an input group.
        correct: false
      - value: Add a `form_row_class` option to the form type.
        correct: false
    help: |-
      The `row_attr` option allows adding HTML attributes to the form row element.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/bootstrap5.rst#_snippet_5
  - question: When testing form submissions in functional tests using
      `Symfony\Component\BrowserKit\HttpBrowser`, which method is commonly used
      to submit a form by targeting a button?
    answers:
      - value: "`submitForm('Button Text')`"
        correct: true
      - value: "`clickButton('Button Text')`"
        correct: false
      - value: "`submit('Button Text')`"
        correct: false
      - value: "`findButton('Button Text')->submit()`"
        correct: false
    help: |-
      The `submitForm()` method is used to submit forms in functional tests by targeting a button's text, ID, value, or name.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/components/browser_kit.rst#_snippet_10
  - question: What is the purpose of `Form::createView()`?
    answers:
      - value: To create a `FormView` object that is used for rendering the form in
          Twig.
        correct: true
      - value: To process the submitted data and update the form's underlying object.
        correct: false
      - value: To validate the form's data.
        correct: false
      - value: To generate the HTML output of the form directly.
        correct: false
    help: |-
      The `createView()` method creates a form view for rendering the form, and it should be called after `handleRequest()`.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/components/form.rst#_snippet_25
  - question: Which of the following is NOT a common variable available on
      `FormView` objects in Twig templates via the `vars` property?
    answers:
      - value: "`form.fieldName.vars.controller`"
        correct: true
      - value: "`form.fieldName.vars.id`"
        correct: false
      - value: "`form.fieldName.vars.label`"
        correct: false
      - value: "`form.fieldName.vars.errors`"
        correct: false
      - value: "`form.fieldName.vars.required`"
        correct: false
    help: |-
      Common variables on `FormView` objects include `id`, `label`, `errors`, `required`, `action`, `attr`, `block_prefixes`, `cache_key`, `compound`, `data`, and `disabled`.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/form_customization.rst#_snippet_15
  - question: What is the correct way to register a custom `FormEventSubscriber` in
      a form type's `buildForm` method?
    answers:
      - value: "`$builder->addEventSubscriber(new MyEventSubscriber());`"
        correct: true
      - value: "`$builder->addSubscriber(new MyEventSubscriber());`"
        correct: false
      - value: "`$builder->registerSubscriber(new MyEventSubscriber());`"
        correct: false
      - value: "`$builder->getEventManager()->addSubscriber(new MyEventSubscriber());`"
        correct: false
    help: |-
      The `addEventSubscriber()` method on the `FormBuilderInterface` is used to register an event subscriber.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/dynamic_form_modification.rst#_snippet_4
  - question: Which of the following is a valid way to define validation constraints
      for an entity property in Symfony 7?
    answers:
      - value: Using PHP attributes (e.g., `#[Assert\NotBlank]`).
        correct: true
      - value: Using YAML configuration files.
        correct: true
      - value: Using XML configuration files.
        correct: true
      - value: Using a `loadValidatorMetadata()` static method in the entity class.
        correct: true
    help: >-
      Symfony supports defining validation constraints using PHP attributes,
      YAML, XML, and the `loadValidatorMetadata()` method.

      https://github.com/fmatsos/symfony-docs/blob/v7.0/forms.rst#_snippet_14
  - question: What is the purpose of the `help` option for a form field?
    answers:
      - value: To provide additional explanatory text or instructions for the user about
          the field.
        correct: true
      - value: To define the tooltip text for the field.
        correct: false
      - value: To display validation error messages.
        correct: false
      - value: To link to external documentation for the field.
        correct: false
    help: |-
      The `help` option is inherited from `FormType` and is used to display help text for a field.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/reference/forms/types/money.rst#_snippet_3
  - question: When embedding a custom form type (e.g., `CategoryType`) into another
      form type (e.g., `TaskType`), how is it typically added to the `buildForm`
      method?
    answers:
      - value: "`$builder->add('category', CategoryType::class);`"
        correct: true
      - value: "`$builder->embed('category', CategoryType::class);`"
        correct: false
      - value: "`$builder->add('category', 'category_type');`"
        correct: false
      - value: "`$builder->include(CategoryType::class);`"
        correct: false
    help: |-
      Embedded form types are added using the `add()` method, just like other fields, specifying the embedded form type's class.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/embedded.rst#_snippet_3
  - question: Which of the following is a valid way to apply multiple Twig form
      themes to a single form instance?
    answers:
      - value: "`{% form_theme form with ['theme1.html.twig', 'theme2.html.twig'] %}`"
        correct: true
      - value: "`{% form_theme form 'theme1.html.twig', 'theme2.html.twig' %}`"
        correct: false
      - value: "`{{ form(form, {'themes': ['theme1.html.twig', 'theme2.html.twig']})
          }}`"
        correct: false
      - value: "`{% form_theme form extends 'theme1.html.twig', 'theme2.html.twig' %}`"
        correct: false
    help: |-
      Multiple form themes can be applied by providing an array of theme paths to the `form_theme` tag.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/form_themes.rst#_snippet_3
  - question: What is the purpose of the `data_class` option in a Symfony form
      type's `configureOptions` method?
    answers:
      - value: To specify the fully qualified class name of the object that the form
          will map its data to.
        correct: true
      - value: To define the default data for the form when it's initially rendered.
        correct: false
      - value: To indicate that the form should not be mapped to any object.
        correct: false
      - value: To set the class used for form validation.
        correct: false
    help: >-
      The `data_class` option sets the class that the form will map its data to,
      crucial for data binding.

      https://github.com/fmatsos/symfony-docs/blob/v7.0/forms.rst#_snippet_7
  - question: When unit testing a custom form type that relies on the Validator
      component, which extension should you add in your
      `TypeTestCase::getExtensions()` method?
    answers:
      - value: "`Symfony\\Component\\Form\\Extension\\Validator\\ValidatorExtension`"
        correct: true
      - value: "`Symfony\\Component\\Form\\Extension\\Core\\CoreExtension`"
        correct: false
      - value: "`Symfony\\Bridge\\Twig\\Extension\\FormExtension`"
        correct: false
      - value: "`Symfony\\Component\\Validator\\ValidationExtension`"
        correct: false
    help: |-
      To test forms with validation, you need to register the `ValidatorExtension` in your `TypeTestCase`.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/unit_testing.rst#_snippet_2
  - question: What is the significance of the `#[AsCommand]` attribute in the
      context of Symfony forms?
    answers:
      - value: It is not directly related to Symfony forms; it's used for defining
          console commands.
        correct: true
      - value: It registers a form type as a console command.
        correct: false
      - value: It defines a form's command-line interface.
        correct: false
      - value: It enables form submission via console commands.
        correct: false
    help: >-
      The `#[AsCommand]` attribute is used for defining console commands, not
      for Symfony forms.

      (Internal knowledge, as the provided docs for forms only mention
      `#[AsCommand]` in a general context, not related to forms directly)
  - question: Which of the following is a valid way to retrieve errors from a
      specific form field named `firstName`?
    answers:
      - value: "`$form['firstName']->getErrors()`"
        correct: true
      - value: "`$form->getErrors('firstName')`"
        correct: false
      - value: "`$form->get('firstName')->getErrors()`"
        correct: false
      - value: "`$form->errors['firstName']`"
        correct: false
    help: |-
      Errors for a specific field can be retrieved by accessing the field and then calling `getErrors()` on it.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/components/form.rst#_snippet_28
  - question: What is the purpose of the `empty_data` option in a form field?
    answers:
      - value: To define the value that will be used when the form field is submitted
          with no data.
        correct: true
      - value: To set the placeholder text for an empty input field.
        correct: false
      - value: To specify the default value for the field when the form is initially
          rendered.
        correct: false
      - value: To determine if the field is allowed to be empty.
        correct: false
    help: |-
      The `empty_data` option is inherited from `FormType` and allows defining the value used when the field is empty.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/reference/forms/types/money.rst#_snippet_3
  - question: When creating a custom data mapper, which method is responsible for
      populating the form fields from an existing data object?
    answers:
      - value: "`mapDataToForms($viewData, \\Traversable $forms): void`"
        correct: true
      - value: "`mapFormsToData(\\Traversable $forms, &$viewData): void`"
        correct: false
      - value: "`populateForms(object $data): void`"
        correct: false
      - value: "`setDataToForms(array $data): void`"
        correct: false
    help: |-
      The `mapDataToForms()` method in a `DataMapperInterface` implementation is used to convert the model data into view data for the form fields.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/data_mappers.rst#_snippet_1
  - question: To ensure that a Symfony form collection correctly updates both sides
      of a Doctrine relationship (e.g., adding a Tag to a Task and vice-versa),
      what should be implemented in the entity classes?
    answers:
      - value: Adder and remover methods (e.g., `addTag()`, `removeTag()`) that manage
          both sides of the relationship.
        correct: true
      - value: A custom data transformer for the collection.
        correct: false
      - value: The `CascadePersist` option in the form type.
        correct: false
      - value: A listener for `FormEvents::POST_SUBMIT` to manually update the
          relationship.
        correct: false
    help: |-
      For proper ORM integration with collections, entities should have adder and remover methods that update both sides of the relationship.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/form_collections.rst#_snippet_20
  - question: Which of the following is a valid way to render the help text for a
      form field named `name` in Twig?
    answers:
      - value: "`{{ form_help(form.name) }}`"
        correct: true
      - value: "`{{ form.name.help }}`"
        correct: false
      - value: "`{{ help_text(form.name) }}`"
        correct: false
      - value: "`{{ form_label(form.name, null, {'help': true}) }}`"
        correct: false
    help: |-
      The `form_help()` Twig function renders the help text for the given field.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/form_customization.rst#_snippet_8
  - question: What is the default HTTP method used by a Symfony form if not
      explicitly configured?
    answers:
      - value: POST
        correct: true
      - value: GET
        correct: false
      - value: PUT
        correct: false
      - value: It depends on the browser.
        correct: false
    help: |-
      The `handleRequest()` method uses a `NativeRequestHandler` which defaults to reading from `$_POST`.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/components/form.rst#_snippet_2
  - question: When creating a form type, how can you dynamically add or remove
      fields based on the current user (e.g., using the `Security` service)?
    answers:
      - value: Inject the `Security` service into the form type's constructor and use it
          within `buildForm` or an event listener.
        correct: true
      - value: Access the `Security` service directly from the global container within
          the form type.
        correct: false
      - value: Pass the user object as an option to the form type from the controller.
        correct: false
      - value: It's not possible to dynamically change form fields based on the user.
        correct: false
    help: |-
      The `Security` service can be injected into a form type's constructor to enable dynamic modifications based on the current user.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/dynamic_form_modification.rst#_snippet_6
