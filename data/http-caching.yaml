category: HTTP Caching
questions:
  - question: Which HTTP header is primarily used by both browser and shared caches
      (like proxies and reverse-proxies) to determine the freshness of a
      resource based on a maximum age?
    answers:
      - value: Expires
        correct: false
      - value: Cache-Control
        correct: true
      - value: Last-Modified
        correct: false
      - value: ETag
        correct: false
    help: The `Cache-Control` header is the primary mechanism for controlling
      caching behavior, including setting a maximum age for freshness. `Expires`
      is an older, less flexible alternative.
  - question: "In Symfony, what is the purpose of the `#[Cache(public: true, maxage:
      600)]` attribute on a controller method?"
    answers:
      - value: To make the response cacheable only by the client's browser for 600
          seconds.
        correct: false
      - value: To make the response cacheable by shared caches (proxies) and browsers
          for 600 seconds.
        correct: true
      - value: To force the client to revalidate the cache every 600 seconds.
        correct: false
      - value: To set the `s-maxage` directive to 600 seconds.
        correct: false
    help: "The `public: true` directive indicates that the response can be cached by
      any cache, including shared caches like proxies. `maxage` sets the maximum
      age for freshness in seconds for both public and private caches."
  - question: |-
      Consider the following PHP code snippet:

      ```php
      $response = new Response();
      $response->setPublic();
      $response->setMaxAge(3600);
      $response->headers->addCacheControlDirective('must-revalidate', true);
      ```

      Which `Cache-Control` header will be generated by this code?
    answers:
      - value: "Cache-Control: private, max-age=3600, must-revalidate"
        correct: false
      - value: "Cache-Control: public, max-age=3600, must-revalidate"
        correct: true
      - value: "Cache-Control: public, s-maxage=3600, must-revalidate"
        correct: false
      - value: "Cache-Control: no-cache, max-age=3600"
        correct: false
    help: "`setPublic()` adds the `public` directive, `setMaxAge(3600)` adds
      `max-age=3600`, and `addCacheControlDirective('must-revalidate', true)`
      adds `must-revalidate`."
  - question: Which of the following `Cache-Control` directives indicates that the
      response is intended for a single user and must not be stored by a shared
      cache?
    answers:
      - value: public
        correct: false
      - value: private
        correct: true
      - value: no-store
        correct: false
      - value: no-cache
        correct: false
    help: The `private` directive explicitly marks a response as intended for a
      single user, preventing shared caches from storing it. Browsers can still
      cache it.
  - question: To enable Symfony's built-in HTTP cache reverse proxy in a production
      environment using YAML configuration, which setting should be used?
    answers:
      - value: |-
          framework:
              cache:
                  http_cache: true
        correct: false
      - value: |-
          when@prod:
              framework:
                  http_cache: true
        correct: true
      - value: |-
          framework:
              http_cache:
                  enabled: true
        correct: false
      - value: |-
          framework:
              reverse_proxy:
                  enabled: true
        correct: false
    help: "The correct configuration to enable the built-in HTTP cache reverse proxy
      for the production environment is `when@prod: framework: http_cache:
      true`."
  - question: What is the primary benefit of using
      `Response::isNotModified($request)` in a Symfony controller for HTTP
      caching?
    answers:
      - value: "It automatically sets the `Cache-Control: no-cache` header."
        correct: false
      - value: It forces the client to re-download the full content on every request.
        correct: false
      - value: It allows the server to return a 304 Not Modified response if the
          client's cached version is still valid, saving bandwidth and
          processing.
        correct: true
      - value: It generates a new ETag for every response.
        correct: false
    help: "`isNotModified()` checks the request's `If-None-Match` and
      `If-Modified-Since` headers against the response's `ETag` and
      `Last-Modified` headers. If they match, it sets a 304 status, indicating
      the client's cache is fresh."
  - question: Which of the following HTTP headers are used for cache validation,
      rather than expiration?
    answers:
      - value: Expires
        correct: false
      - value: "Cache-Control: max-age"
        correct: false
      - value: ETag
        correct: true
      - value: Last-Modified
        correct: true
    help: "`ETag` and `Last-Modified` are validation headers. They allow the client
      to ask the server if its cached version is still valid, leading to a 304
      Not Modified response if it is."
  - question: When configuring HTTP caching in Symfony, what does the `s-maxage`
      directive in `Cache-Control` specifically control?
    answers:
      - value: The maximum age for private caches only.
        correct: false
      - value: The maximum age for shared caches (proxies) only.
        correct: true
      - value: The total time a resource can be cached by any cache.
        correct: false
      - value: The time after which the resource must be revalidated by the origin
          server.
        correct: false
    help: "`s-maxage` (shared max-age) is a Cache-Control directive that applies
      only to shared caches, overriding `max-age` for them."
  - question: Which Symfony component provides the `Response` class, allowing you to
      manipulate HTTP headers for caching?
    answers:
      - value: HttpKernel
        correct: false
      - value: HttpFoundation
        correct: true
      - value: Cache
        correct: false
      - value: WebProfilerBundle
        correct: false
    help: The `Symfony\Component\HttpFoundation\Response` class is part of the
      HttpFoundation component and is used to manage HTTP responses, including
      setting cache headers.
  - question: What is the primary use case for Edge Side Includes (ESI) in Symfony?
    answers:
      - value: To cache entire pages for faster delivery.
        correct: false
      - value: To allow different parts of a page to be cached with different strategies
          or not cached at all.
        correct: true
      - value: To replace server-side rendering with client-side rendering.
        correct: false
      - value: To manage database query caching.
        correct: false
    help: ESI enables granular caching by allowing specific parts of a page to be
      fetched via sub-requests and cached independently, while the rest of the
      page might be cached differently or not at all.
  - question: To explicitly mark an HTTP response as stale, forcing caches to
      revalidate the content with the origin server before serving it again,
      which method of the `Response` object should be used?
    answers:
      - value: setExpires(new DateTime('now'))
        correct: false
      - value: setMaxAge(0)
        correct: false
      - value: expire()
        correct: true
      - value: setNotModified()
        correct: false
    help: "The `Response::expire()` method explicitly marks the response as stale,
      which typically results in the `Cache-Control: max-age=0, must-revalidate`
      header being sent."
  - question: Which of the following `Cache-Control` directives prevents any cache
      from storing any part of either the request or response?
    answers:
      - value: no-cache
        correct: false
      - value: no-store
        correct: true
      - value: private
        correct: false
      - value: must-revalidate
        correct: false
    help: The `no-store` directive is the most restrictive, ensuring that no part of
      the request or response is ever stored in a cache.
  - question: What is the purpose of the `Vary` HTTP header in the context of caching?
    answers:
      - value: To specify that the response should never be cached.
        correct: false
      - value: To indicate that the cached response should vary based on specific
          request headers, leading to different cached versions.
        correct: true
      - value: To set the expiration date for the cached content.
        correct: false
      - value: To define the maximum age for a cached resource.
        correct: false
    help: "The `Vary` header informs caches that the response content varies
      depending on the values of specified request headers (e.g., `Vary:
      Accept-Encoding, User-Agent`)."
  - question: When implementing ETag validation in Symfony, what is the typical flow
      after computing the ETag and setting it on the `Response` object?
    answers:
      - value: Immediately return the response.
        correct: false
      - value: Call `Response::setPublic()` and then
          `Response::isNotModified($request)`.
        correct: true
      - value: Call `Response::setMaxAge(0)`.
        correct: false
      - value: Set the `Expires` header to a future date.
        correct: false
    help: After setting the ETag and making the response public (if applicable),
      `Response::isNotModified($request)` should be called. If it returns true,
      a 304 response is automatically sent, short-circuiting further processing.
  - question: Which of the following options can be passed to the
      `Response::setCache()` method to make the response immutable?
    answers:
      - value: "`['immutable' => true]`"
        correct: true
      - value: "`['no_transform' => true]`"
        correct: false
      - value: "`['must_revalidate' => false]`"
        correct: false
      - value: "`['stale_if_error' => 0]`"
        correct: false
    help: The `immutable` directive in `Cache-Control` indicates that the response
      will not change over time. It is set via the `immutable` option in
      `setCache()`.
  - question: What is the primary role of a reverse proxy in HTTP caching?
    answers:
      - value: To cache responses on the client's browser.
        correct: false
      - value: To act as an intermediary between clients and the origin server, caching
          responses to reduce load on the origin.
        correct: true
      - value: To encrypt HTTP traffic.
        correct: false
      - value: To manage database connections.
        correct: false
    help: A reverse proxy (like Symfony's HttpCache or Varnish) sits in front of the
      application server and caches responses, serving them directly to clients
      for subsequent requests, thus reducing the load on the backend.
  - question: When using `#[Cache]` attribute in Symfony, how can you set the
      `Expires` header to expire in 10 minutes?
    answers:
      - value: "`#[Cache(expires: '+10 minutes')]`"
        correct: true
      - value: "`#[Cache(maxage: 600)]`"
        correct: false
      - value: "`#[Cache(ttl: 600)]`"
        correct: false
      - value: "`#[Cache(expires: 'P10M')]`"
        correct: false
    help: The `expires` option in the `#[Cache]` attribute accepts a string that can
      be parsed by `DateTime`, such as `'+10 minutes'`.
  - question: Which of the following is NOT a valid type of HTTP cache?
    answers:
      - value: Browser Cache
        correct: false
      - value: Proxy Cache
        correct: false
      - value: Database Cache
        correct: true
      - value: Reverse Proxy Cache
        correct: false
    help: Browser, Proxy, and Reverse Proxy caches are all types of HTTP caches.
      Database caching is an application-level caching mechanism, not directly
      an HTTP cache.
  - question: What is the significance of the `must-revalidate` directive in the
      `Cache-Control` header?
    answers:
      - value: It allows caches to serve stale responses without revalidation.
        correct: false
      - value: It forces caches to revalidate stale cached entries with the origin
          server before serving them.
        correct: true
      - value: It indicates that the response should never be cached.
        correct: false
      - value: It specifies the maximum age for shared caches.
        correct: false
    help: "`must-revalidate` ensures that once a cached response becomes stale, a
      cache must revalidate it with the origin server before using it,
      preventing the serving of outdated content."
  - question: How can you disable Symfony's automatic session cache control, which
      typically makes responses uncacheable when a session is started?
    answers:
      - value: "By setting `session.storage.options.cache_limiter: 0` in
          `config/services.yaml`."
        correct: true
      - value: By calling `$response->setPrivate()`.
        correct: false
      - value: "By setting the `Cache-Control: no-cache` header."
        correct: false
      - value: By calling
          `$response->headers->set(AbstractSessionListener::NO_AUTO_CACHE_CONTROL_HEADER,
          'true');`
        correct: true
    help: Both setting the `session.storage.options.cache_limiter` parameter to `0`
      and explicitly setting the
      `AbstractSessionListener::NO_AUTO_CACHE_CONTROL_HEADER` to `'true'` on the
      response headers can disable Symfony's automatic session-related cache
      control.
  - question: Which HTTP status code is returned by the server when a client's
      cached version of a resource is still valid, based on `ETag` or
      `Last-Modified` validation?
    answers:
      - value: 200 OK
        correct: false
      - value: 301 Moved Permanently
        correct: false
      - value: 304 Not Modified
        correct: true
      - value: 404 Not Found
        correct: false
    help: A 304 Not Modified status code indicates that the resource has not been
      modified since the version specified by the request headers, and the
      client can use its cached copy.
  - question: When configuring Symfony's `HttpCache` in debug mode, what additional
      HTTP header is added to responses to provide insights into cache behavior?
    answers:
      - value: X-Cache-Status
        correct: false
      - value: X-Debug-Cache
        correct: false
      - value: X-Symfony-Cache
        correct: true
      - value: Cache-Debug
        correct: false
    help: Enabling debug mode for `HttpCache` adds the `X-Symfony-Cache` header,
      which provides detailed information like `stale`, `fresh`, `invalid`, and
      `store`.
  - question: What is the primary purpose of the `Expires` HTTP header?
    answers:
      - value: To specify the maximum age for a resource in seconds.
        correct: false
      - value: To provide a specific date and time after which the response is
          considered stale.
        correct: true
      - value: To indicate that the resource should never be cached.
        correct: false
      - value: To define a unique identifier for the resource's content.
        correct: false
    help: The `Expires` header specifies a date/time after which the response is
      considered stale. It's an older header, largely superseded by
      `Cache-Control`.
  - question: Which of the following is a key advantage of using `ETag` over
      `Last-Modified` for cache validation?
    answers:
      - value: It is simpler to implement.
        correct: false
      - value: It can detect changes more precisely than a timestamp, even if the
          modification time remains the same (e.g., content changes without file
          modification).
        correct: true
      - value: It is always supported by all caches.
        correct: false
      - value: It reduces the size of HTTP headers.
        correct: false
    help: ETags are more robust for validation because they can be generated based
      on content hashes, allowing detection of changes even if the last modified
      timestamp doesn't change.
  - question: When embedding an ESI include in a Twig template, what tag is used?
    answers:
      - value: "`{{ render_esi('/path/to/controller') }}`"
        correct: true
      - value: '`<esi:include src="/path/to/controller"/>`'
        correct: true
      - value: "`{{ esi('/path/to/controller') }}`"
        correct: false
      - value: "`{% include_esi '/path/to/controller' %}`"
        correct: false
    help: Both the Twig function `render_esi()` and the raw ESI tag `<esi:include>`
      are used to embed ESI includes. Symfony's `HttpCache` component processes
      these tags.
  - question: What is the purpose of the `stale-while-revalidate` directive in
      `Cache-Control`?
    answers:
      - value: It forces the cache to revalidate the content before serving it.
        correct: false
      - value: It allows the cache to serve a stale response immediately while it
          revalidates the content in the background.
        correct: true
      - value: It specifies that the response should never be cached.
        correct: false
      - value: It defines the maximum age for a resource in shared caches.
        correct: false
    help: "`stale-while-revalidate` improves user experience by allowing a cache to
      serve stale content quickly while asynchronously fetching a fresh
      version."
  - question: Which Symfony component provides the `HttpCache` class, which acts as
      a reverse proxy?
    answers:
      - value: HttpFoundation
        correct: false
      - value: HttpKernel
        correct: true
      - value: Cache
        correct: false
      - value: FrameworkBundle
        correct: false
    help: The `Symfony\Component\HttpKernel\HttpCache\HttpCache` class is part of
      the HttpKernel component and provides the built-in reverse proxy
      functionality.
  - question: To programmatically set the `Last-Modified` HTTP header on a Symfony
      `Response` object, which method should you use?
    answers:
      - value: setExpires(new DateTime())
        correct: false
      - value: setLastModified(new DateTime())
        correct: true
      - value: setModifiedTime(time())
        correct: false
      - value: setCache(['last_modified' => new DateTime()])
        correct: true
    help: The `Response::setLastModified()` method directly sets the `Last-Modified`
      header. Alternatively, you can use the `setCache()` method with the
      `last_modified` option.
  - question: What is the default behavior of Symfony's `HttpCache` regarding
      private headers like `Authorization` or `Cookie`?
    answers:
      - value: It caches responses containing these headers by default.
        correct: false
      - value: It makes responses containing these headers private by default,
          preventing shared caching.
        correct: true
      - value: It strips these headers from the response before caching.
        correct: false
      - value: It ignores these headers for caching purposes.
        correct: false
    help: Symfony's `HttpCache` is configured with `private_headers` (defaulting to
      `Authorization` and `Cookie`) which cause responses not explicitly marked
      public to be treated as private, preventing shared caches from storing
      them.
  - question: Which `Cache-Control` directive indicates that a cache must not store
      any part of either the request or response?
    answers:
      - value: no-cache
        correct: false
      - value: no-store
        correct: true
      - value: private
        correct: false
      - value: max-age=0
        correct: false
    help: "`no-store` is the strongest directive for preventing caching, ensuring no
      data is ever stored."
  - question: When should you use a 'weak' ETag (e.g., `W/"etag_value"`) instead of
      a 'strong' ETag?
    answers:
      - value: When the content is guaranteed to be byte-for-byte identical.
        correct: false
      - value: When the content is semantically equivalent but not necessarily
          byte-for-byte identical (e.g., minor formatting changes).
        correct: true
      - value: When you want to force revalidation on every request.
        correct: false
      - value: Weak ETags are deprecated in HTTP/1.1.
        correct: false
    help: Weak ETags are used when two representations are semantically equivalent
      but might differ in minor, inconsequential ways (e.g., whitespace,
      compression). Strong ETags require byte-for-byte identity.
  - question: What is the role of `HttpKernel\HttpCache\Store` when setting up
      Symfony's built-in HTTP cache?
    answers:
      - value: It defines the cache validation strategy (ETag or Last-Modified).
        correct: false
      - value: It manages the storage of cached responses on the filesystem or other
          backend.
        correct: true
      - value: It handles the parsing of ESI tags.
        correct: false
      - value: It determines the cache expiration time.
        correct: false
    help: The `Store` class is responsible for persisting the cached HTTP responses,
      typically to the filesystem, but custom implementations can use other
      storage backends.
  - question: Which of the following is a valid way to set the `ETag` header on a
      Symfony `Response` object?
    answers:
      - value: $response->setEtag(md5($response->getContent()));
        correct: true
      - value: $response->headers->set('ETag', 'some_value');
        correct: false
      - value: $response->setCache(['etag' => 'some_value']);
        correct: true
      - value: $response->generateEtag();
        correct: false
    help: The `Response::setEtag()` method is the direct way to set the ETag.
      Alternatively, the `setCache()` method with the `etag` option can be used.
  - question: What is the primary purpose of the `allow_reload` option under
      `framework.http_cache` configuration?
    answers:
      - value: To allow the server to automatically reload cache entries.
        correct: false
      - value: "To specify whether the client can force a cache reload by including a
          `Cache-Control: no-cache` directive in the request."
        correct: true
      - value: To enable automatic cache invalidation on deployment.
        correct: false
      - value: To control the frequency of cache revalidation.
        correct: false
    help: "The `allow_reload` option (defaulting to `false`) determines if the cache
      should respect a client's `Cache-Control: no-cache` request, which forces
      a reload from the origin."
  - question: When integrating `HttpCache` with ESI support, which class is passed
      to the `HttpCache` constructor?
    answers:
      - value: "`HttpKernel\\HttpCache\\Store`"
        correct: false
      - value: "`HttpKernel\\HttpCache\\Esi`"
        correct: true
      - value: "`HttpKernel\\HttpCache\\TraceableHttpCache`"
        correct: false
      - value: "`HttpKernel\\HttpCache\\Logger`"
        correct: false
    help: To enable ESI support, an instance of `HttpKernel\HttpCache\Esi` must be
      passed as the third argument to the `HttpCache` constructor.
  - question: Which of the following `Cache-Control` directives is specifically for
      shared caches and overrides `max-age`?
    answers:
      - value: private
        correct: false
      - value: public
        correct: false
      - value: s-maxage
        correct: true
      - value: proxy-revalidate
        correct: false
    help: "`s-maxage` (shared max-age) is a Cache-Control directive that applies
      only to shared caches, overriding `max-age` for them."
  - question: What is the purpose of the `stale-if-error` directive in `Cache-Control`?
    answers:
      - value: To force a cache to revalidate content if an error occurs.
        correct: false
      - value: To allow a cache to serve a stale response when an error is encountered
          by the origin server.
        correct: true
      - value: To prevent caching when an error occurs.
        correct: false
      - value: To log errors related to caching.
        correct: false
    help: "`stale-if-error` allows a cache to serve a stale response if the origin
      server returns an error, improving resilience."
  - question: To configure a Symfony `Response` to be cached for 10 seconds using
      the `setTtl()` method, what would be the correct call?
    answers:
      - value: $response->setTtl(10);
        correct: true
      - value: $response->setMaxAge(10);
        correct: false
      - value: $response->setExpires(new DateTime('+10 seconds'));
        correct: false
      - value: $response->setSharedMaxAge(10);
        correct: false
    help: The `Response::setTtl()` method sets the Time-To-Live for the response,
      which is then translated into appropriate `Cache-Control` headers.
  - question: "What is the main difference between `Cache-Control: no-cache` and
      `Cache-Control: no-store`?"
    answers:
      - value: "`no-cache` prevents any caching, while `no-store` allows caching but
          requires revalidation."
        correct: false
      - value: "`no-cache` requires revalidation with the origin server before serving a
          cached copy, while `no-store` prevents any cache from storing the
          response."
        correct: true
      - value: "`no-store` is for private caches, and `no-cache` is for shared caches."
        correct: false
      - value: There is no functional difference; they are synonyms.
        correct: false
    help: "`no-cache` means the cache must revalidate with the origin before
      serving. `no-store` means the response must not be stored by any cache at
      all."
  - question: Which method of the `Response` object allows you to set multiple HTTP
      cache-related headers in a single call using an associative array?
    answers:
      - value: setHeaders()
        correct: false
      - value: configureCache()
        correct: false
      - value: setCache()
        correct: true
      - value: addCacheControl()
        correct: false
    help: The `Response::setCache()` method is designed for this purpose, accepting
      an array of options like `max_age`, `public`, `etag`, `last_modified`,
      etc.
  - question: When implementing a custom `CacheKernel` to handle `PURGE` requests
      for cache invalidation, what is a crucial security consideration?
    answers:
      - value: Ensuring the `PURGE` request is always public.
        correct: false
      - value: Restricting `PURGE` requests to trusted IP addresses (e.g., `127.0.0.1`).
        correct: true
      - value: Using a weak ETag for the purged resource.
        correct: false
      - value: Setting a very short `max-age` for purged content.
        correct: false
    help: Allowing arbitrary `PURGE` requests from any IP address would be a major
      security vulnerability. It's crucial to restrict them to trusted sources.
  - question: What is the purpose of the `trace_header` and `trace_level` options
      under `framework.http_cache` configuration?
    answers:
      - value: They control the logging of cache hits and misses.
        correct: false
      - value: They define the name of the debug header and the level of detail for
          cache traces.
        correct: true
      - value: They are used for cache invalidation strategies.
        correct: false
      - value: They configure the cache storage backend.
        correct: false
    help: "`trace_header` specifies the name of the header (default
      `X-Symfony-Cache`) and `trace_level` (`none`, `short`, `full`) controls
      the verbosity of the cache debugging information in that header."
  - question: Which of the following is a correct way to set the `Vary` header to
      `Accept-Encoding` and `User-Agent` using the `#[Cache]` attribute?
    answers:
      - value: "`#[Cache(vary: 'Accept-Encoding, User-Agent')]`"
        correct: false
      - value: "`#[Cache(vary: ['Accept-Encoding', 'User-Agent'])]`"
        correct: true
      - value: "`#[Cache(vary: 'Accept-Encoding'), Cache(vary: 'User-Agent')]`"
        correct: false
      - value: "`#[Cache(vary: ['Accept-Encoding User-Agent'])]`"
        correct: false
    help: The `vary` option of the `#[Cache]` attribute expects an array of header
      names when multiple headers are specified.
  - question: What does the `immutable` directive in `Cache-Control` signify for a
      cached response?
    answers:
      - value: The response must be revalidated on every request.
        correct: false
      - value: The response will not change over time and can be cached indefinitely
          without revalidation (until its `max-age` or `Expires` is met).
        correct: true
      - value: The response is private and cannot be stored by shared caches.
        correct: false
      - value: The response content is encrypted and cannot be modified.
        correct: false
    help: The `immutable` directive tells caches that the response body is not
      expected to change over its lifetime, allowing them to serve it without
      revalidation, even if it's stale, until its freshness lifetime expires.
  - question: Which of the following describes client-side caching?
    answers:
      - value: Caching responses on a dedicated server like Varnish.
        correct: false
      - value: Caching responses within the user's web browser.
        correct: true
      - value: Caching database queries within the application.
        correct: false
      - value: Caching API responses on an intermediate proxy server.
        correct: false
    help: Client-side caching refers to the browser storing copies of resources to
      avoid re-downloading them, primarily controlled by `Cache-Control` and
      `Expires` headers.
  - question: What is the primary benefit of using `ConfigCache` in Symfony?
    answers:
      - value: To cache HTTP responses from external APIs.
        correct: false
      - value: To manage caching of configuration resources, regenerating cached files
          only when source resources are modified.
        correct: true
      - value: To store user session data securely.
        correct: false
      - value: To provide a tag-aware cache pool for application data.
        correct: false
    help: "`ConfigCache` is specifically designed for caching generated code or
      compiled configurations, ensuring they are only regenerated when their
      source files change."
  - question: When is the `Response::setNotModified()` method typically called in a
      Symfony application?
    answers:
      - value: At the beginning of every controller action.
        correct: false
      - value: After the `Response::isNotModified($request)` method returns `true`.
        correct: true
      - value: When an error occurs during response generation.
        correct: false
      - value: Only for responses that should never be cached.
        correct: false
    help: "`setNotModified()` is usually called internally by `isNotModified()` when
      it determines that the resource has not been modified, to correctly set
      the 304 status and remove content/headers."
  - question: What is the purpose of the `proxy-revalidate` directive in `Cache-Control`?
    answers:
      - value: It forces all caches to revalidate stale entries.
        correct: false
      - value: It is similar to `must-revalidate`, but applies specifically to shared
          caches.
        correct: true
      - value: It prevents proxy servers from modifying the content.
        correct: false
      - value: It indicates that the response is private to a proxy.
        correct: false
    help: "`proxy-revalidate` acts like `must-revalidate` but is specifically for
      shared caches, ensuring they revalidate stale responses before serving
      them."
  - question: Which of the following is a valid way to programmatically set the
      `Vary` header to `Accept-Encoding` on a Symfony `Response` object?
    answers:
      - value: $response->headers->set('Vary', 'Accept-Encoding');
        correct: false
      - value: $response->setVary('Accept-Encoding');
        correct: true
      - value: $response->setCache(['vary' => 'Accept-Encoding']);
        correct: false
      - value: $response->addVaryHeader('Accept-Encoding');
        correct: false
    help: The `Response::setVary()` method is the correct way to set the `Vary`
      header. It can accept a string or an array of strings.
  - question: What is the primary function of `CachingHttpClient` in Symfony?
    answers:
      - value: To cache responses of incoming HTTP requests to a Symfony application.
        correct: false
      - value: To cache responses from outgoing HTTP requests made by the Symfony HTTP
          Client.
        correct: true
      - value: To provide a cache for Doctrine entities.
        correct: false
      - value: To manage session caching.
        correct: false
    help: "`CachingHttpClient` wraps the standard `HttpClient` to provide a caching
      layer for requests made *from* your Symfony application to external
      resources."
  - question: When configuring `HttpCache` in Symfony, what does the `default_ttl`
      option control?
    answers:
      - value: The maximum age for responses that explicitly define freshness
          information.
        correct: false
      - value: The number of seconds a cache entry should be considered fresh when no
          explicit freshness information is provided in a response.
        correct: true
      - value: The time after which a cached entry is automatically purged.
        correct: false
      - value: The default time for client-side caching.
        correct: false
    help: "`default_ttl` provides a fallback freshness lifetime for responses that
      don't specify `Cache-Control` or `Expires` headers."
  - question: Which of the following scenarios would typically benefit most from
      Edge Side Includes (ESI)?
    answers:
      - value: A static marketing page that rarely changes.
        correct: false
      - value: A product page with a highly dynamic 'recommended products' section that
          changes frequently, while the main product information is static.
        correct: true
      - value: An API endpoint returning JSON data.
        correct: false
      - value: A login form.
        correct: false
    help: ESI is ideal for pages where most content is cacheable but small, dynamic
      sections need to be rendered and cached separately or not at all, allowing
      the main page to be served from cache.
  - question: What is the significance of the `debug` option when initializing
      Symfony's `HttpCache`?
    answers:
      - value: It enables detailed logging of all HTTP requests.
        correct: false
      - value: It throws exceptions when caching issues occur, and adds the
          `X-Symfony-Cache` header for debugging.
        correct: true
      - value: It disables all caching for easier development.
        correct: false
      - value: It forces all responses to be revalidated.
        correct: false
    help: When `debug` is true, `HttpCache` will provide more verbose error
      reporting and add the `X-Symfony-Cache` header to responses, which is
      invaluable for understanding cache behavior.
  - question: How can you programmatically set the `Expires` header on a Symfony
      `Response` object to be 1 hour from now?
    answers:
      - value: $response->setExpires(new DateTime('+1 hour'));
        correct: true
      - value: $response->setMaxAge(3600);
        correct: false
      - value: $response->headers->set('Expires', date('r', strtotime('+1 hour')));
        correct: false
      - value: $response->setCache(['expires' => new DateTime('+1 hour')]);
        correct: true
    help: The `Response::setExpires()` method accepts a `DateTimeInterface` object.
      Alternatively, `setCache()` with the `expires` option can be used.
  - question: Which of the following is a valid configuration for enabling tag-aware
      caching for a Symfony cache pool in YAML?
    answers:
      - value: |-
          framework:
              cache:
                  pools:
                      my_cache_pool:
                          adapter: cache.adapter.filesystem
                          tags: true
        correct: false
      - value: |-
          framework:
              cache:
                  pools:
                      my_cache_pool:
                          adapter: cache.adapter.redis_tag_aware
                          tags: true
        correct: true
      - value: |-
          framework:
              cache:
                  my_cache_pool:
                      tag_aware: true
        correct: false
      - value: |-
          framework:
              cache:
                  pools:
                      my_cache_pool:
                          tag_support: true
        correct: false
    help: "Tag-aware caching requires a tag-aware adapter (like `redis_tag_aware`)
      and the `tags: true` option for the pool."
  - question: What is the primary role of the `HttpKernelInterface` in Symfony's
      request-response flow, especially concerning caching?
    answers:
      - value: It defines how to render templates.
        correct: false
      - value: It provides the `handle` method, which is the core entry point for
          processing HTTP requests and returning responses, allowing caching
          layers to wrap it.
        correct: true
      - value: It manages database connections.
        correct: false
      - value: It handles routing and controller resolution.
        correct: false
    help: The `HttpKernelInterface` defines the contract for a kernel that can
      handle a request and return a response. This allows caching layers (like
      `HttpCache`) to wrap the main application kernel and intercept
      requests/responses.
  - question: Which `Cache-Control` directive indicates that the response must not
      be served from a cache without revalidation?
    answers:
      - value: no-store
        correct: false
      - value: no-cache
        correct: true
      - value: must-revalidate
        correct: false
      - value: private
        correct: false
    help: "`no-cache` means the cache must revalidate the response with the origin
      server before using it, even if it's still fresh according to `max-age`."
  - question: What is the purpose of `probabilistic early expiration` (using the
      `beta` parameter in `CacheInterface::get`) in Symfony's Cache component?
    answers:
      - value: To ensure cache entries are always recomputed exactly at their expiration
          time.
        correct: false
      - value: To recompute cache values slightly before their expiration, preventing
          cache stampedes by distributing the recomputation load.
        correct: true
      - value: To randomly delete cache entries.
        correct: false
      - value: To prioritize certain cache entries for faster retrieval.
        correct: false
    help: Probabilistic early expiration helps mitigate cache stampedes by allowing
      a small percentage of requests to trigger a recomputation of a cache item
      *before* it fully expires, while others continue to receive the stale
      item.
  - question: Which of the following describes server-side caching in the context of
      HTTP?
    answers:
      - value: Caching static assets on a CDN.
        correct: true
      - value: Caching responses by a reverse proxy like Symfony's `HttpCache` or
          Varnish.
        correct: true
      - value: Caching data in a browser's local storage.
        correct: false
      - value: Caching database query results in an ORM.
        correct: false
    help: Server-side HTTP caching involves caching mechanisms on the server side,
      such as reverse proxies or CDNs, to serve responses without hitting the
      application backend.
  - question: What is the primary difference between `max-age` and `s-maxage` in the
      `Cache-Control` header?
    answers:
      - value: "`max-age` applies to all caches, while `s-maxage` applies only to
          private caches."
        correct: false
      - value: "`max-age` applies to all caches, while `s-maxage` applies only to shared
          caches and overrides `max-age` for them."
        correct: true
      - value: "`max-age` is for validation, `s-maxage` is for expiration."
        correct: false
      - value: There is no difference; they are interchangeable.
        correct: false
    help: "`s-maxage` is specifically for shared caches and takes precedence over
      `max-age` for those caches."
  - question: When using `ConfigCache` in debug mode, what is the purpose of the
      `.meta` file?
    answers:
      - value: It stores the cached code itself.
        correct: false
      - value: It contains serialized resources (e.g., `FileResource` objects) used to
          check the freshness of the cached file.
        correct: true
      - value: It logs all cache hits and misses.
        correct: false
      - value: It stores configuration parameters for the cache.
        correct: false
    help: In debug mode, `ConfigCache` creates a `.meta` file alongside the cached
      file. This `.meta` file contains information about the resources that
      generated the cache, allowing `isFresh()` to determine if the cache needs
      to be regenerated.
  - question: Which class is used to instantiate a filesystem-based cache pool in
      Symfony's Cache component?
    answers:
      - value: RedisAdapter
        correct: false
      - value: MemcachedAdapter
        correct: false
      - value: FilesystemAdapter
        correct: true
      - value: ArrayAdapter
        correct: false
    help: "`FilesystemAdapter` is the concrete implementation for a cache pool that
      stores its data on the local filesystem."
  - question: "What is the consequence of setting `Cache-Control: public` on a response?"
    answers:
      - value: Only the client's browser can cache the response.
        correct: false
      - value: The response can be cached by any cache, including shared caches like
          proxies and reverse proxies.
        correct: true
      - value: The response must always be revalidated before being served.
        correct: false
      - value: The response is encrypted for public access.
        correct: false
    help: The `public` directive explicitly marks a response as cacheable by any
      cache, making it suitable for shared caches.
  - question: When implementing cache versioning using `withSubNamespace` in
      Symfony's Cache component, what is a common strategy for invalidating the
      cache when user data changes?
    answers:
      - value: Using a static version number for all users.
        correct: false
      - value: Including a checksum of the user's `updatedAt` timestamp in the
          sub-namespace.
        correct: true
      - value: Setting a very short `expiresAfter` for all user-related cache items.
        correct: false
      - value: Manually deleting all user-related cache items on every request.
        correct: false
    help: Including a checksum (e.g., hash of `updatedAt`) in the sub-namespace
      ensures that a new cache key is generated whenever the user data is
      updated, effectively invalidating the old cache entry.
  - question: What is the primary function of the `allow_revalidate` option under
      `framework.http_cache` configuration?
    answers:
      - value: It allows the server to automatically revalidate cache entries.
        correct: false
      - value: "It specifies whether the client can force a cache revalidate by
          including a `Cache-Control: max-age=0` directive in the request."
        correct: true
      - value: It enables automatic cache revalidation on every request.
        correct: false
      - value: It controls the level of detail in cache traces.
        correct: false
    help: "The `allow_revalidate` option (defaulting to `false`) determines if the
      cache should respect a client's `Cache-Control: max-age=0` request, which
      forces a revalidation with the origin."
  - question: Which of the following is a benefit of using `ETag` and
      `Last-Modified` for cache validation?
    answers:
      - value: They eliminate the need for any caching.
        correct: false
      - value: They allow the server to send a full response every time, regardless of
          freshness.
        correct: false
      - value: They reduce bandwidth usage and server load by allowing clients to use
          cached copies if content hasn't changed.
        correct: true
      - value: They only work for static files.
        correct: false
    help: Validation headers enable conditional requests, where the client asks if
      the content has changed. If not, a 304 response is sent, avoiding the
      transfer of the full resource.
  - question: When configuring Symfony's `HttpCache`, what does the
      `skip_response_headers` option control?
    answers:
      - value: Headers that are always cached.
        correct: false
      - value: Headers that will never be cached, even if the response is cacheable and
          public.
        correct: true
      - value: Headers that trigger private cache behavior.
        correct: false
      - value: Headers that are used for cache invalidation.
        correct: false
    help: "`skip_response_headers` allows you to specify headers (e.g.,
      `Set-Cookie`) that should never be stored in the cache, even if the
      response itself is cacheable."
  - question: What is the primary difference between `browser cache` and `proxy cache`?
    answers:
      - value: Browser cache is for static files, proxy cache is for dynamic content.
        correct: false
      - value: Browser cache is client-side and specific to a single user, while proxy
          cache is server-side (often shared) and serves multiple users.
        correct: true
      - value: Browser cache uses `ETag`, proxy cache uses `Last-Modified`.
        correct: false
      - value: There is no functional difference; they are synonyms.
        correct: false
    help: Browser cache is local to the user's machine. Proxy caches are
      intermediate servers that cache responses for multiple users, often shared
      across a network.
  - question: Which of the following is a valid way to instantiate a
      `MemcachedAdapter` in Symfony's Cache component?
    answers:
      - value: new MemcachedAdapter();
        correct: false
      - value: new MemcachedAdapter($memcachedClient);
        correct: true
      - value: new MemcachedAdapter('memcached://localhost');
        correct: false
      - value: MemcachedAdapter::create();
        correct: false
    help: The `MemcachedAdapter` constructor requires a `\Memcached` client object
      as its first argument.
  - question: What is the main purpose of the `no-transform` directive in
      `Cache-Control`?
    answers:
      - value: To prevent content from being compressed.
        correct: false
      - value: To prevent proxy servers from modifying the content of the response
          (e.g., image reformatting).
        correct: true
      - value: To ensure the response is always served fresh.
        correct: false
      - value: To disallow any caching of the response.
        correct: false
    help: "`no-transform` is used to tell intermediate caches and proxies not to
      alter the content of the response, such as converting image formats or
      stripping metadata."
  - question: When using `#[Cache]` attribute, how can you make a response public
      and set its `max-age` to 10 minutes?
    answers:
      - value: "`#[Cache(private: false, maxage: 600)]`"
        correct: false
      - value: "`#[Cache(public: true, maxage: 600)]`"
        correct: true
      - value: "`#[Cache(smaxage: 600)]`"
        correct: false
      - value: "`#[Cache(expires: '+10 minutes')]`"
        correct: false
    help: "The `public: true` option makes the response public, and `maxage: 600`
      sets the maximum age for freshness to 600 seconds (10 minutes)."
  - question: What is the primary purpose of the `resolve` option under
      `framework.http_client` configuration?
    answers:
      - value: To resolve service dependencies for the HTTP client.
        correct: false
      - value: To pre-populate the DNS cache for specific hostnames, avoiding DNS
          lookups.
        correct: true
      - value: To resolve HTTP redirects automatically.
        correct: false
      - value: To resolve relative URLs to absolute URLs.
        correct: false
    help: The `resolve` option allows you to map hostnames to specific IP addresses,
      which can be useful for security (ensuring requests go to known IPs) or
      testing (mocking DNS).
  - question: "Which of the following is true regarding the `Expires` header
      compared to `Cache-Control: max-age`?"
    answers:
      - value: "`Expires` takes precedence over `Cache-Control: max-age`."
        correct: false
      - value: "`Cache-Control: max-age` takes precedence over `Expires`."
        correct: true
      - value: They are functionally identical.
        correct: false
      - value: "`Expires` is for shared caches, `max-age` is for private caches."
        correct: false
    help: According to HTTP/1.1, `Cache-Control` directives take precedence over the
      `Expires` header if both are present.
  - question: What is the benefit of decorating the `http_cache` service with a
      custom `CacheKernel` in Symfony?
    answers:
      - value: It allows you to completely disable Symfony's HTTP cache.
        correct: false
      - value: It enables you to add custom logic, such as handling `PURGE` requests for
          cache invalidation, while retaining Symfony's built-in caching
          features.
        correct: true
      - value: It automatically integrates with third-party caching solutions like
          Varnish.
        correct: false
      - value: It simplifies the configuration of HTTP cache headers.
        correct: false
    help: Decorating the `http_cache` service allows you to extend or modify its
      behavior, for example, by overriding the `invalidate` method to implement
      custom cache invalidation strategies like handling `PURGE` requests.
