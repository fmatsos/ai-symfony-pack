category: HTTP Caching
questions:
  - question: Which Symfony component is primarily responsible for providing a
      PHP-based reverse proxy for HTTP caching?
    answers:
      - value: Symfony\Component\HttpKernel\HttpCache\HttpCache
        correct: true
      - value: Symfony\Component\Cache\Adapter\FilesystemAdapter
        correct: false
      - value: Symfony\Component\HttpClient\HttpClient
        correct: false
      - value: Symfony\Component\HttpFoundation\Response
        correct: false
    help: The `HttpCache` class acts as a PHP-based reverse proxy, providing
      transparent caching based on HTTP cache headers.
  - question: How can you programmatically set a response to be publicly cacheable
      for 3600 seconds in a Symfony controller?
    answers:
      - value: $response->setPublic()->setMaxAge(3600);
        correct: true
      - value: $response->setCache(['public' => true, 'max_age' => 3600]);
        correct: true
      - value: $response->headers->set('Cache-Control', 'public, max-age=3600');
        correct: true
      - value: $response->setPrivate()->setTtl(3600);
        correct: false
    help: You can use `setPublic()` and `setMaxAge()` methods or the `setCache()`
      method with an array to configure public caching with a maximum age.
  - question: Which HTTP header is used to indicate that a cached response's content
      might vary depending on specific request headers (e.g., Accept-Encoding,
      User-Agent)?
    answers:
      - value: Vary
        correct: true
      - value: Cache-Control
        correct: false
      - value: ETag
        correct: false
      - value: Expires
        correct: false
    help: The `Vary` header specifies which request headers should trigger different
      cached representations of the resource.
  - question: |-
      Consider the following Symfony controller action:

      ```php
      use Symfony\Component\HttpKernel\Attribute\Cache;
      use Symfony\Component\HttpFoundation\Response;

      class BlogController extends AbstractController
      {
          #[Cache(public: true, maxage: 600)]
          public function index(): Response
          {
              // ...
          }
      }
      ```

      What `Cache-Control` header will be generated by this attribute?
    answers:
      - value: "Cache-Control: public, max-age=600"
        correct: true
      - value: "Cache-Control: private, max-age=600"
        correct: false
      - value: "Cache-Control: no-cache, max-age=600"
        correct: false
      - value: "Cache-Control: public, s-maxage=600"
        correct: false
    help: "The `#[Cache]` attribute with `public: true` and `maxage: 600` directly
      translates to `Cache-Control: public, max-age=600`."
  - question: To enable the built-in Symfony reverse proxy (HTTP cache) in a
      production environment, which configuration snippet is correct?
    answers:
      - value: |-
          ```yaml
          # config/packages/framework.yaml
          when@prod:
              framework:
                  http_cache: true
          ```
        correct: true
      - value: |-
          ```yaml
          # config/packages/framework.yaml
          framework:
              http_cache:
                  enabled: true
          ```
        correct: false
      - value: |-
          ```yaml
          # config/packages/framework.yaml
          framework:
              cache:
                  http_cache: true
          ```
        correct: false
    help: The `framework.http_cache` option should be set to `true` within a
      `when@prod` block to enable it specifically for production.
  - question: Which `Response` method is used to explicitly set the HTTP status code
      to 304 Not Modified and clear the response content and inappropriate
      headers?
    answers:
      - value: setNotModified()
        correct: true
      - value: isNotModified($request)
        correct: false
      - value: expire()
        correct: false
      - value: setStatusCode(304)
        correct: false
    help: "`setNotModified()` explicitly sets the 304 status and handles
      header/content removal for a valid 304 response. `isNotModified()` checks
      and sets it if applicable."
  - question: What is the purpose of the `X-Symfony-Cache` header when Symfony's
      `HttpCache` debug mode is enabled?
    answers:
      - value: To provide insights into the cache's behavior, such as 'stale', 'fresh',
          or 'store'.
        correct: true
      - value: To indicate the remaining time-to-live (TTL) of a cached response.
        correct: false
      - value: To specify the cache key used for the current request.
        correct: false
      - value: To signal to the client that the response should not be cached.
        correct: false
    help: The `X-Symfony-Cache` header is a debug header that provides detailed
      information about how `HttpCache` processed the request and response.
  - question: Which of the following `Response` methods can be used to set the
      `Expires` HTTP header?
    answers:
      - value: setExpires(DateTimeInterface $date = null)
        correct: true
      - value: setMaxAge(int $value)
        correct: false
      - value: setTtl(int $value)
        correct: false
      - value: setLastModified(DateTimeInterface $date = null)
        correct: false
    help: The `setExpires()` method is specifically designed to set the `Expires`
      HTTP header, accepting a `DateTimeInterface` object.
  - question: When configuring HTTP caching in Symfony using the `#[Cache]`
      attribute, which parameter is used to set the `s-maxage` directive for
      shared caches?
    answers:
      - value: smaxage
        correct: true
      - value: max_age
        correct: false
      - value: sharedMaxAge
        correct: false
      - value: proxy_maxage
        correct: false
    help: The `smaxage` parameter in the `#[Cache]` attribute corresponds to the
      `s-maxage` Cache-Control directive.
  - question: What is the primary benefit of using `ETag` and `Last-Modified`
      headers for HTTP caching validation?
    answers:
      - value: They allow the server to send a 304 Not Modified response, reducing
          bandwidth and server load.
        correct: true
      - value: They force the client to always re-download the full resource.
        correct: false
      - value: They are primarily used for client-side JavaScript caching.
        correct: false
      - value: They prevent any form of caching from occurring.
        correct: false
    help: ETag and Last-Modified enable conditional GET requests. If the resource
      hasn't changed, the server responds with a 304 Not Modified, telling the
      client to use its cached version.
  - question: Which of the following methods on a `Response` object marks it as
      stale, forcing revalidation?
    answers:
      - value: $response->expire();
        correct: true
      - value: $response->setNotModified();
        correct: false
      - value: $response->setMaxAge(0);
        correct: false
      - value: $response->setPublic(false);
        correct: false
    help: The `expire()` method explicitly marks the response as stale, prompting
      caches to revalidate it on the next request.
  - question: When implementing a custom `CacheKernel` to handle `PURGE` requests,
      what is a crucial security consideration?
    answers:
      - value: Restricting `PURGE` requests to trusted IP addresses.
        correct: true
      - value: Ensuring the `PURGE` method is always publicly accessible.
        correct: false
      - value: Logging all `PURGE` requests to a public log file.
        correct: false
      - value: Using a different port for `PURGE` requests.
        correct: false
    help: It is critical to restrict `PURGE` requests to trusted sources (e.g.,
      localhost or specific internal IPs) to prevent unauthorized cache
      invalidation.
  - question: What is the purpose of the `HttpKernelInterface` in Symfony's HTTP
      caching context?
    answers:
      - value: It defines the contract for handling an HTTP Request and returning an
          HTTP Response.
        correct: true
      - value: It provides methods for managing cache invalidation.
        correct: false
      - value: It is responsible for storing cached responses on the filesystem.
        correct: false
      - value: It is used to configure ESI (Edge Side Includes).
        correct: false
    help: The `HttpKernelInterface` is the fundamental contract that Symfony's
      `HttpCache` wraps to intercept and cache responses.
  - question: Which HTML tag is used to embed dynamic content that can be fetched by
      a reverse proxy using Edge Side Includes (ESI)?
    answers:
      - value: <esi:include src="/path/to/content"/>
        correct: true
      - value: <symfony:include url="/path/to/content"/>
        correct: false
      - value: <cache:include path="/path/to/content"/>
        correct: false
      - value: <http:fragment url="/path/to/content"/>
        correct: false
    help: The `<esi:include>` tag is the standard way to mark content for ESI
      processing by a compatible reverse proxy.
  - question: To enable ESI support and debug mode for Symfony's `HttpCache`, which
      of the following is the correct way to instantiate `HttpCache`?
    answers:
      - value: |-
          ```php
          $framework = new HttpKernel\HttpCache\HttpCache(
              $framework,
              new HttpKernel\HttpCache\Store(__DIR__.'/../cache'),
              new HttpKernel\HttpCache\Esi(),
              ['debug' => true]
          );
          ```
        correct: true
      - value: |-
          ```php
          $framework = new HttpKernel\HttpCache\HttpCache(
              $framework,
              new HttpKernel\HttpCache\Store(__DIR__.'/../cache'),
              true,
              true
          );
          ```
        correct: false
      - value: |-
          ```php
          $framework = new HttpKernel\HttpCache\HttpCache(
              $framework,
              new HttpKernel\HttpCache\Store(__DIR__.'/../cache'),
              ['esi' => true, 'debug' => true]
          );
          ```
        correct: false
    help: You need to pass an `Esi` instance and a configuration array with `debug`
      set to `true` to the `HttpCache` constructor.
  - question: Which of the following `Response` object methods is used to set the
      `ETag` HTTP header?
    answers:
      - value: setEtag(string $value = null, bool $weak = false)
        correct: true
      - value: setLastModified(DateTimeInterface $date = null)
        correct: false
      - value: setVary(string|array $headers, bool $replace = true)
        correct: false
      - value: setCache(['etag' => 'value'])
        correct: true
    help: The `setEtag()` method is used to set the ETag header. The `setCache()`
      method can also set multiple cache directives, including ETag.
  - question: What is the purpose of setting
      `AbstractSessionListener::NO_AUTO_CACHE_CONTROL_HEADER` to `true` on a
      Symfony `Response`?
    answers:
      - value: To prevent Symfony from automatically making responses uncacheable when a
          session is started.
        correct: true
      - value: To force all responses to be cached, regardless of session status.
        correct: false
      - value: To enable automatic session management for cached responses.
        correct: false
      - value: To disable all HTTP caching for requests involving sessions.
        correct: false
    help: By default, Symfony makes responses uncacheable if a session is started.
      This header allows overriding that behavior for custom caching logic.
  - question: Which console command can be used to prune expired cache items from
      all cache pools that implement `PruneableInterface`?
    answers:
      - value: cache:pool:prune
        correct: true
      - value: cache:clear
        correct: false
      - value: cache:pool:clear --all
        correct: false
      - value: cache:warmup
        correct: false
    help: The `cache:pool:prune` command is specifically designed to remove expired
      entries from cache pools that support pruning.
  - question: Which of the following accurately describes the `isNotModified()`
      method on a Symfony `Response` object?
    answers:
      - value: It compares 'If-Modified-Since' and 'If-None-Match' headers from the
          request with 'Last-Modified' and 'ETag' headers of the response.
        correct: true
      - value: It automatically sets the status code to 304 if the response is not
          modified.
        correct: true
      - value: It returns `true` if the response was modified to 304, `false` otherwise.
        correct: true
      - value: It always returns `true` if an ETag is present.
        correct: false
    help: "`isNotModified()` is a powerful method for implementing conditional GETs,
      handling both Last-Modified and ETag validation and setting the 304 status
      if applicable."
  - question: What is the purpose of the `framework.http_cache.trace_level`
      configuration option in Symfony?
    answers:
      - value: It controls the level of detail in the `X-Symfony-Cache` header for
          debugging.
        correct: true
      - value: It defines how many levels of ESI sub-requests are traced.
        correct: false
      - value: It sets the verbosity of cache-related logs.
        correct: false
      - value: It determines the maximum number of cache hits to trace.
        correct: false
    help: The `trace_level` option (with values like 'none', 'short', 'full')
      directly impacts the content of the `X-Symfony-Cache` debug header.
  - question: Which of the following is a valid way to set the `Vary` header on a
      Symfony `Response` object?
    answers:
      - value: $response->setVary('Accept-Encoding');
        correct: true
      - value: $response->setVary(['Accept-Encoding', 'User-Agent']);
        correct: true
      - value: $response->headers->set('Vary', 'Accept-Encoding, User-Agent');
        correct: true
      - value: $response->addVaryHeader('User-Agent');
        correct: false
    help: The `setVary()` method accepts either a single string or an array of
      strings for the Vary header. You can also directly set the header via
      `headers->set()`.
  - question: When using `ConfigCache` in Symfony, what is the primary mechanism for
      ensuring the cached content is regenerated only when necessary?
    answers:
      - value: Tracking `FileResource` objects associated with the source configuration
          files.
        correct: true
      - value: Periodically clearing the cache based on a cron job.
        correct: false
      - value: Manually calling `warmUp()` on the cache adapter.
        correct: false
      - value: Relying on the `default_lifetime` of the cache pool.
        correct: false
    help: "`ConfigCache` uses `FileResource` objects to monitor the freshness of the
      cached file by comparing timestamps of its dependencies."
  - question: Which Symfony component provides the `CacheInterface` and
      `ItemInterface` for interacting with cache pools in a PSR-6 compliant
      manner?
    answers:
      - value: symfony/cache-contracts
        correct: true
      - value: symfony/http-foundation
        correct: false
      - value: symfony/http-kernel
        correct: false
      - value: symfony/dependency-injection
        correct: false
    help: The `symfony/cache-contracts` component provides the `CacheInterface` and
      `ItemInterface` for standardized cache interaction.
  - question: What is the default value for `framework.http_cache.enabled` in Symfony?
    answers:
      - value: "false"
        correct: true
      - value: "true"
        correct: false
      - value: "null"
        correct: false
      - value: auto
        correct: false
    help: By default, the Symfony built-in HTTP cache is disabled and needs to be
      explicitly enabled, typically in production environments.
  - question: When configuring a Symfony cache pool, which option allows you to
      enable tag-based invalidation for that pool?
    answers:
      - value: "tags: true"
        correct: true
      - value: "taggable: true"
        correct: false
      - value: "enable_tags: true"
        correct: false
      - value: "invalidate_by_tag: true"
        correct: false
    help: The `tags` option within a cache pool's configuration enables tag-based
      invalidation. It can be a boolean or the service ID of another pool for
      tags.
  - question: Which console command is used to clear cache entries from a specific
      cache pool named `my_cache_pool`?
    answers:
      - value: php bin/console cache:pool:clear my_cache_pool
        correct: true
      - value: php bin/console cache:clear my_cache_pool
        correct: false
      - value: php bin/console cache:pool:delete my_cache_pool --all
        correct: false
      - value: php bin/console cache:clear --pool=my_cache_pool
        correct: false
    help: The `cache:pool:clear` command is used to clear specific cache pools by
      name.
  - question: What is the primary purpose of the `PhpArrayAdapter` in Symfony's
      Cache component?
    answers:
      - value: To cache static data as native PHP code, optimized for OPcache.
        correct: true
      - value: To store cache items in a database using PDO.
        correct: false
      - value: To provide a distributed cache across multiple servers.
        correct: false
      - value: To act as an in-memory cache for development environments.
        correct: false
    help: The `PhpArrayAdapter` is designed to store cache values as PHP arrays,
      which can be highly performant when OPcache is enabled.
  - question: Which of the following is true regarding
      `Psr\Cache\CacheItemPoolInterface::getItem(string $key)`?
    answers:
      - value: It always returns a `CacheItemInterface` object, even if the item is not
          found.
        correct: true
      - value: It returns `null` if the item is not found in the cache.
        correct: false
      - value: It throws an exception if the key does not exist.
        correct: false
      - value: It automatically populates the item if it's a cache miss.
        correct: false
    help: The PSR-6 `getItem()` method is guaranteed to return a
      `CacheItemInterface` object, which you then check with `isHit()`.
  - question: To convert a PSR-6 cache pool into a PSR-16 compatible cache, which
      Symfony class would you use?
    answers:
      - value: Symfony\Component\Cache\Psr16Cache
        correct: true
      - value: Symfony\Component\Cache\Adapter\ProxyAdapter
        correct: false
      - value: Symfony\Component\Cache\Adapter\ChainAdapter
        correct: false
      - value: Symfony\Component\Cache\Adapter\Psr6Adapter
        correct: false
    help: The `Psr16Cache` class acts as a bridge, allowing a PSR-6 cache pool to be
      used where a PSR-16 `CacheInterface` is expected.
  - question: Which PHP `ini` settings are recommended to optimize PHP's `realpath`
      cache for Symfony applications?
    answers:
      - value: realpath_cache_size and realpath_cache_ttl
        correct: true
      - value: opcache.revalidate_freq and opcache.max_accelerated_files
        correct: false
      - value: memory_limit and max_execution_time
        correct: false
      - value: upload_max_filesize and post_max_size
        correct: false
    help: "`realpath_cache_size` and `realpath_cache_ttl` directly control the size
      and duration of PHP's realpath cache, which is beneficial for frameworks
      like Symfony."
  - question: What is the primary benefit of using `saveDeferred()` followed by
      `commit()` for saving cache items in Symfony?
    answers:
      - value: It allows for batching multiple write operations, improving performance.
        correct: true
      - value: It ensures immediate persistence of all cache items.
        correct: false
      - value: It automatically clears the cache after saving.
        correct: false
      - value: It is only used for asynchronous cache operations.
        correct: false
    help: "`saveDeferred()` adds items to a queue, and `commit()` then writes them
      all at once, which can be more efficient than individual `save()` calls."
  - question: "When configuring `framework.http_cache` in Symfony, which option
      controls whether the client can force a cache reload with a
      `Cache-Control: no-cache` directive?"
    answers:
      - value: allow_reload
        correct: true
      - value: allow_revalidate
        correct: false
      - value: debug
        correct: false
      - value: trace_level
        correct: false
    help: "The `allow_reload` option (default: `false`) determines whether the
      Symfony HTTP cache respects the client's `no-cache` directive for forcing
      a reload."
  - question: Which of the following is a valid way to set a cache item's expiration
      to 60 seconds using `ItemInterface`?
    answers:
      - value: $item->expiresAfter(60);
        correct: true
      - value: $item->setTtl(60);
        correct: false
      - value: $item->setExpiration(60);
        correct: false
      - value: $item->expiresAt(new \DateTime('+60 seconds'));
        correct: true
    help: "`expiresAfter()` takes an integer (seconds) or a `DateInterval`.
      `expiresAt()` takes a `DateTimeInterface` object."
  - question: What is the purpose of the
      `framework.http_cache.stale_while_revalidate` configuration option?
    answers:
      - value: It defines the number of seconds a stale response can be served while a
          fresh one is revalidated in the background.
        correct: true
      - value: It specifies the maximum age for a response to be considered fresh.
        correct: false
      - value: It forces the client to revalidate the cache on every request.
        correct: false
      - value: It determines how long a response can be served from cache if an error
          occurs during revalidation.
        correct: false
    help: The `stale_while_revalidate` option implements the RFC 5861 extension,
      allowing a cache to serve stale content while asynchronously fetching a
      fresh version.
  - question: When configuring a `RedisAdapter` in Symfony, which class is typically
      used to create the Redis connection object?
    answers:
      - value: \Redis
        correct: true
      - value: \RedisClient
        correct: false
      - value: \Predis\Client
        correct: true
      - value: Symfony\Component\Cache\Redis
        correct: false
    help: The `RedisAdapter` can accept various Redis client objects, including the
      native `\Redis` extension or `\Predis\Client`.
  - question: What is the primary benefit of using a `ChainAdapter` in Symfony's
      Cache component?
    answers:
      - value: It allows combining multiple cache adapters (e.g., in-memory and
          persistent) for layered caching.
        correct: true
      - value: It automatically invalidates cache items across all connected adapters.
        correct: false
      - value: It provides a distributed caching solution across multiple servers.
        correct: false
      - value: It ensures that cache items are always serialized before storage.
        correct: false
    help: A `ChainAdapter` allows you to stack multiple cache adapters, providing a
      fallback mechanism and optimizing for different caching scenarios (e.g.,
      fast in-memory first, then slower persistent storage).
  - question: Which of the following is a valid way to configure a custom cache pool
      named `my_cache_pool` to use the `cache.adapter.filesystem` adapter in
      Symfony?
    answers:
      - value: |-
          ```yaml
          framework:
              cache:
                  pools:
                      my_cache_pool:
                          adapter: cache.adapter.filesystem
          ```
        correct: true
      - value: |-
          ```yaml
          framework:
              cache:
                  my_cache_pool:
                      adapter: filesystem
          ```
        correct: false
      - value: |-
          ```yaml
          framework:
              cache:
                  pools:
                      my_cache_pool:
                          type: filesystem
          ```
        correct: false
    help: Custom cache pools are defined under `framework.cache.pools`, and the
      `adapter` key specifies the service ID of the cache adapter to use.
  - question: What is the purpose of the `framework.http_cache.private_headers`
      configuration option?
    answers:
      - value: It defines a set of request headers that, if present, will cause
          responses to be treated as private by default.
        correct: true
      - value: It lists headers that should always be removed from cached responses.
        correct: false
      - value: It specifies headers that are only accessible to private caches.
        correct: false
      - value: It dictates which headers are sent to the client for private responses.
        correct: false
    help: Headers like `Authorization` and `Cookie` are typically in
      `private_headers`, making responses uncacheable by shared caches unless
      explicitly marked public.
  - question: Which console command is used to invalidate cache entries associated
      with specific tags, for example, `tag1` and `tag2`, from all taggable
      cache pools?
    answers:
      - value: php bin/console cache:pool:invalidate-tags tag1 tag2
        correct: true
      - value: php bin/console cache:clear --tags=tag1,tag2
        correct: false
      - value: php bin/console cache:pool:delete --tags=tag1,tag2
        correct: false
      - value: php bin/console cache:tag:clear tag1 tag2
        correct: false
    help: The `cache:pool:invalidate-tags` command is specifically designed for
      tag-based cache invalidation.
  - question: When using `UrlPackage` for asset versioning in Symfony, how does it
      ensure deterministic selection of domains for assets when multiple base
      URLs are provided?
    answers:
      - value: It uses a deterministic algorithm based on the asset's path to select a
          domain.
        correct: true
      - value: It randomly selects a domain for each asset request.
        correct: false
      - value: It cycles through the provided domains in a round-robin fashion.
        correct: false
      - value: It always uses the first domain in the list.
        correct: false
    help: The `UrlPackage` uses a deterministic approach to ensure that a given
      asset always resolves to the same domain, which simplifies HTTP caching.
  - question: What is the purpose of the `framework.http_cache.default_ttl`
      configuration option?
    answers:
      - value: It sets the default number of seconds a cache entry is considered fresh
          if no explicit freshness information is provided.
        correct: true
      - value: It defines the maximum time a response can be stored in the browser
          cache.
        correct: false
      - value: It specifies the default `s-maxage` for shared caches.
        correct: false
      - value: It controls the lifetime of cache items in the internal Symfony cache.
        correct: false
    help: The `default_ttl` acts as a fallback for cache freshness when
      `Cache-Control` or `Expires` headers are missing.
  - question: Which of the following is the correct way to delete a single cache
      item with the key `user_123` from a cache pool named `cache.app` using a
      console command?
    answers:
      - value: php bin/console cache:pool:delete cache.app user_123
        correct: true
      - value: php bin/console cache:delete cache.app user_123
        correct: false
      - value: php bin/console cache:pool:clear cache.app --key=user_123
        correct: false
      - value: php bin/console cache:remove cache.app user_123
        correct: false
    help: The `cache:pool:delete` command requires the cache pool name and the
      specific cache key to be deleted.
  - question: When defining a Symfony route that uses `TemplateController` for a
      static Twig template, which option is used to set the `maxAge` and
      `sharedAge` for HTTP caching?
    answers:
      - value: maxAge and sharedAge within the `defaults` array.
        correct: true
      - value: cache_control and expires within the `defaults` array.
        correct: false
      - value: ttl and s_ttl within the `defaults` array.
        correct: false
      - value: You cannot set caching headers directly on `TemplateController` routes.
        correct: false
    help: The `TemplateController` allows setting `maxAge` and `sharedAge` directly
      in the route defaults for convenient static content caching.
  - question: Which of the following is a valid way to retrieve a cache item's value
      and key using `ItemInterface`?
    answers:
      - value: $value = $cacheItem->get(); $key = $cacheItem->getKey();
        correct: true
      - value: $value = $cacheItem->getValue(); $key = $cacheItem->getId();
        correct: false
      - value: $value = $cacheItem->content(); $key = $cacheItem->name();
        correct: false
      - value: $value = $cacheItem->data(); $key = $cacheItem->index();
        correct: false
    help: The `get()` method retrieves the stored value, and `getKey()` retrieves
      the unique identifier of the cache item.
  - question: What is the primary purpose of the
      `framework.http_cache.stale_if_error` configuration option?
    answers:
      - value: It defines the number of seconds a stale response can be served when an
          error is encountered during revalidation.
        correct: true
      - value: It specifies how long a cache entry remains valid after a server error.
        correct: false
      - value: It forces the cache to always return an error if the origin server is
          down.
        correct: false
      - value: It controls the error logging level for cache-related issues.
        correct: false
    help: The `stale_if_error` option allows a cache to serve stale content if the
      origin server returns an error, improving resilience.
  - question: Which of the following is a valid way to configure a Symfony cache
      pool to use a dedicated cache pool named `tag_pool` for storing tags?
    answers:
      - value: |-
          ```yaml
          framework:
              cache:
                  pools:
                      my_cache_pool:
                          adapter: cache.adapter.redis
                          tags: tag_pool
                      tag_pool:
                          adapter: cache.adapter.apcu
          ```
        correct: true
      - value: |-
          ```yaml
          framework:
              cache:
                  pools:
                      my_cache_pool:
                          adapter: cache.adapter.redis
                          tag_adapter: tag_pool
                      tag_pool:
                          adapter: cache.adapter.apcu
          ```
        correct: false
      - value: |-
          ```yaml
          framework:
              cache:
                  pools:
                      my_cache_pool:
                          adapter: cache.adapter.redis
                          tag_pool_id: tag_pool
                      tag_pool:
                          adapter: cache.adapter.apcu
          ```
        correct: false
    help: The `tags` option can accept the service ID of another cache pool to be
      used specifically for tag storage.
  - question: What is the default value for `framework.http_cache.trace_level` when
      Symfony is in debug mode?
    answers:
      - value: full
        correct: true
      - value: short
        correct: false
      - value: none
        correct: false
      - value: debug
        correct: false
    help: When debug is enabled, the `trace_level` defaults to 'full' to provide
      comprehensive caching insights.
  - question: Which of the following describes the `isHit()` method on a
      `CacheItemInterface`?
    answers:
      - value: It returns `true` if the cache item was found in the cache and is valid
          (not expired).
        correct: true
      - value: It returns `true` if the item was successfully saved to the cache.
        correct: false
      - value: It indicates if the item's value has been modified since it was last
          retrieved.
        correct: false
      - value: It checks if the cache pool contains an item for the specified key,
          regardless of validity.
        correct: false
    help: "`isHit()` is crucial for implementing cache-first logic, as it tells you
      if the cached data is available and usable."
  - question: Which of the following is a valid way to attach multiple tags to a
      cache item using `ItemInterface`?
    answers:
      - value: $item->tag(['tag_2', 'tag_3']);
        correct: true
      - value: $item->addTag('tag_2', 'tag_3');
        correct: false
      - value: $item->setTags(['tag_2', 'tag_3']);
        correct: false
      - value: $item->tag('tag_2')->tag('tag_3');
        correct: true
    help: The `tag()` method can accept either a single string or an array of
      strings for multiple tags.
  - question: Which of the following is NOT a default cache adapter available in
      Symfony's `framework.cache` configuration?
    answers:
      - value: cache.adapter.mongodb
        correct: true
      - value: cache.adapter.apcu
        correct: false
      - value: cache.adapter.filesystem
        correct: false
      - value: cache.adapter.redis
        correct: false
    help: Symfony provides adapters for common caching backends like APCu,
      Filesystem, Redis, Memcached, PDO, and Doctrine DBAL, but not MongoDB by
      default.
  - question: What is the purpose of the
      `framework.http_cache.skip_response_headers` configuration option?
    answers:
      - value: It specifies a list of response headers that will never be cached, even
          if the response is otherwise cacheable.
        correct: true
      - value: It defines headers that should be removed before sending the response to
          the client.
        correct: false
      - value: It lists headers that are only relevant for client-side caching.
        correct: false
      - value: It determines which headers are used for cache key generation.
        correct: false
    help: Headers like `Set-Cookie` are typically in `skip_response_headers` to
      prevent them from being cached, as they are specific to a user session.
  - question: Which of the following methods on a `Response` object is used to set
      the Time-To-Live (TTL) for the response in seconds, primarily for the
      `HttpCache` reverse proxy?
    answers:
      - value: setTtl(int $value)
        correct: true
      - value: setMaxAge(int $value)
        correct: false
      - value: setSharedMaxAge(int $value)
        correct: false
      - value: setExpires(DateTimeInterface $date = null)
        correct: false
    help: The `setTtl()` method is a Symfony-specific helper for setting the
      internal TTL used by the `HttpCache`.
  - question: When configuring asset versioning in Symfony to bust browser caches,
      what is the effect of setting `framework.assets.version`?
    answers:
      - value: A query parameter with the specified version string is appended to asset
          URLs.
        correct: true
      - value: The asset file names are automatically renamed to include the version.
        correct: false
      - value: A unique hash is generated for each asset and added to its URL.
        correct: false
      - value: It forces the browser to ignore its cache for all assets.
        correct: false
    help: Setting `framework.assets.version` appends a version query parameter
      (e.g., `?v=v2`) to asset URLs, forcing browsers to re-fetch them.
  - question: What is the primary benefit of using `DeflateMarshaller` with a
      `RedisAdapter` in Symfony's Cache component?
    answers:
      - value: It compresses data before storing it in Redis, reducing storage space.
        correct: true
      - value: It encrypts data for secure storage in Redis.
        correct: false
      - value: It improves the speed of data retrieval from Redis.
        correct: false
      - value: It enables automatic cache invalidation based on data changes.
        correct: false
    help: The `DeflateMarshaller` is used to compress the cached data, which can
      significantly reduce the memory footprint in Redis.
  - question: When configuring a cache pool for asynchronous cache value computation
      in Symfony, which component is typically involved in delegating the
      computation to a background worker?
    answers:
      - value: Symfony Messenger
        correct: true
      - value: Symfony EventDispatcher
        correct: false
      - value: Symfony Workflow
        correct: false
      - value: Symfony Process
        correct: false
    help: Symfony Messenger is used to dispatch `EarlyExpirationMessage` messages to
      a background worker for asynchronous cache recomputation.
  - question: Which of the following is a valid way to configure the
      `framework.cache.app` pool to use the `cache.adapter.filesystem` adapter?
    answers:
      - value: |-
          ```yaml
          framework:
              cache:
                  app: cache.adapter.filesystem
          ```
        correct: true
      - value: |-
          ```yaml
          framework:
              cache:
                  default_adapter: cache.adapter.filesystem
          ```
        correct: false
      - value: |-
          ```yaml
          framework:
              cache:
                  pools:
                      cache.app:
                          adapter: cache.adapter.filesystem
          ```
        correct: true
    help: The `app` key directly under `framework.cache` sets the adapter for the
      default application cache pool. Alternatively, you can define it
      explicitly under `pools`.
  - question: Which of the following Memcached client configuration options controls
      automatic ejection of hosts that have exceeded the configured
      `server_failure_limit`?
    answers:
      - value: auto_eject_hosts
        correct: true
      - value: retry_timeout
        correct: false
      - value: server_failure_limit
        correct: false
      - value: connect_timeout
        correct: false
    help: "`auto_eject_hosts` is specifically designed to manage the automatic
      removal of unresponsive Memcached servers from the pool."
  - question: What is the default value for `framework.http_cache.debug`?
    answers:
      - value: "%kernel.debug%"
        correct: true
      - value: "false"
        correct: false
      - value: "true"
        correct: false
      - value: "null"
        correct: false
    help: The `debug` option for HTTP cache defaults to the value of `kernel.debug`,
      meaning it's typically enabled in development and disabled in production.
  - question: Which of the following is the correct way to manually prune expired
      cache entries from a `FilesystemAdapter` instance?
    answers:
      - value: $cache->prune();
        correct: true
      - value: $cache->clearExpired();
        correct: false
      - value: $cache->deleteExpiredItems();
        correct: false
      - value: $cache->cleanup();
        correct: false
    help: Adapters implementing `PruneableInterface` (like `FilesystemAdapter`)
      provide a `prune()` method for manual cleanup of expired items.
  - question: When configuring a `PdoAdapter` for database caching, what happens
      automatically upon the first save operation if the necessary database
      table does not exist?
    answers:
      - value: The adapter automatically creates the database table.
        correct: true
      - value: An exception is thrown, requiring manual table creation.
        correct: false
      - value: The cache operation fails silently.
        correct: false
      - value: It falls back to a filesystem cache.
        correct: false
    help: The `PdoAdapter` is designed to be convenient and will create its required
      database table automatically on the first write if it doesn't exist.
  - question: What is the purpose of the `framework.http_cache.trace_header`
      configuration option?
    answers:
      - value: "It defines the name of the HTTP header used for cache tracing (default:
          `X-Symfony-Cache`)."
        correct: true
      - value: It specifies the header used to indicate cache hits or misses.
        correct: false
      - value: It controls which headers are included in the cache key.
        correct: false
      - value: It sets the header for ESI sub-request identification.
        correct: false
    help: The `trace_header` option allows customizing the name of the debug header
      that provides cache tracing information.
  - question: Which of the following is true about the `ArrayAdapter` in Symfony's
      Cache component?
    answers:
      - value: It stores data in memory and is primarily used for testing or temporary
          caching.
        correct: true
      - value: It persists cache items to the filesystem.
        correct: false
      - value: It requires a Redis or Memcached connection.
        correct: false
      - value: It automatically clears its contents when the PHP process finishes.
        correct: true
    help: The `ArrayAdapter` is an in-memory cache, meaning its contents are lost
      when the PHP process ends, making it suitable for short-lived data or
      testing.
  - question: When using `RetryableHttpClient` in Symfony, what is the benefit of
      providing a nested array for the `base_uri` option?
    answers:
      - value: It enables randomized selection of base URIs for each retry attempt,
          improving resilience.
        correct: true
      - value: It forces the client to use all provided base URIs simultaneously.
        correct: false
      - value: It defines a fallback order for base URIs in case of failure.
        correct: false
      - value: It allows specifying different authentication credentials for each base
          URI.
        correct: false
    help: A nested array for `base_uri` allows the `RetryableHttpClient` to randomly
      pick a URI from the inner array for the first request, and then use
      subsequent non-nested URIs in order for retries, distributing load and
      increasing robustness.
  - question: Which of the following methods on a `Response` object is used to set
      the `Last-Modified` HTTP header?
    answers:
      - value: setLastModified(DateTimeInterface $date = null)
        correct: true
      - value: setModifiedDate(DateTimeInterface $date = null)
        correct: false
      - value: setCache(['last_modified' => new \DateTime()])
        correct: true
      - value: setExpires(DateTimeInterface $date = null)
        correct: false
    help: The `setLastModified()` method is specifically for the `Last-Modified`
      header. `setCache()` can also be used to set it along with other cache
      directives.
  - question: What is the primary difference between `max-age` and `s-maxage` in the
      `Cache-Control` header?
    answers:
      - value: "`max-age` applies to both private and shared caches, while `s-maxage`
          applies only to shared (proxy) caches."
        correct: true
      - value: "`max-age` is for client-side caching, and `s-maxage` is for server-side
          caching."
        correct: false
      - value: "`max-age` is for validation, and `s-maxage` is for expiration."
        correct: false
      - value: "`max-age` is deprecated, and `s-maxage` is the modern equivalent."
        correct: false
    help: "`s-maxage` (shared max-age) specifically targets shared caches (like
      reverse proxies), overriding `max-age` for them."
  - question: Which of the following is true about the
      `framework.http_cache.allow_revalidate` configuration option?
    answers:
      - value: "It specifies whether the client can force a cache revalidation by
          including a `Cache-Control: max-age=0` directive."
        correct: true
      - value: It forces the cache to revalidate all responses on every request.
        correct: false
      - value: It is only relevant for ETag-based validation.
        correct: false
      - value: It determines if the cache should revalidate stale responses in the
          background.
        correct: false
    help: Setting `allow_revalidate` to `true` makes the Symfony HTTP cache
      compliant with RFC 2616 regarding client-forced revalidation.
  - question: What is the purpose of the `framework.http_cache.default_pdo_provider`
      configuration option?
    answers:
      - value: It specifies the service ID of the default PDO or Doctrine DBAL
          connection to be used by PDO cache adapters.
        correct: true
      - value: It defines the DSN for connecting to a PostgreSQL database for caching.
        correct: false
      - value: It sets the default lifetime for cache items stored in a database.
        correct: false
      - value: It configures the database table name for PDO caching.
        correct: false
    help: The `default_pdo_provider` allows you to define a global default database
      connection for `PdoAdapter` and `DoctrineDbalAdapter`.
  - question: When configuring a `TagAwareAdapter` with two separate adapters, one
      for items and one for tags, what is the primary reason for this setup?
    answers:
      - value: To optimize performance and synchronization across multiple cache fronts
          by using different backends for items and tags.
        correct: true
      - value: To enable automatic replication of cache items across different storage
          types.
        correct: false
      - value: To ensure that tags are always stored in a persistent storage, even if
          items are in-memory.
        correct: false
      - value: To provide a fallback mechanism if one of the adapters fails.
        correct: false
    help: Using separate adapters for items and tags (e.g., `FilesystemAdapter` for
      items and `RedisAdapter` for tags) can improve performance and
      consistency, especially in distributed environments.
  - question: Which of the following is the correct way to clear all cache pools in
      Symfony using a console command, excluding `my_cache_pool` and
      `another_cache_pool`?
    answers:
      - value: php bin/console cache:pool:clear --all --exclude=my_cache_pool
          --exclude=another_cache_pool
        correct: true
      - value: php bin/console cache:clear --all
          --except=my_cache_pool,another_cache_pool
        correct: false
      - value: php bin/console cache:pool:clear *
          --ignore=my_cache_pool,another_cache_pool
        correct: false
      - value: php bin/console cache:pool:clear --exclude=my_cache_pool
          --exclude=another_cache_pool
        correct: false
    help: The `cache:pool:clear` command supports the `--all` option to clear all
      pools and repeatable `--exclude` options to skip specific ones.
  - question: What is the purpose of the
      `framework.http_cache.default_redis_provider` configuration option?
    answers:
      - value: It defines the DSN (Data Source Name) to be used by the Redis cache
          provider by default.
        correct: true
      - value: It specifies the service ID of a custom Redis client.
        correct: false
      - value: It sets the default database index for Redis caching.
        correct: false
      - value: It configures the Redis server's port.
        correct: false
    help: The `default_redis_provider` option allows setting a default DSN for Redis
      connections used by cache pools.
  - question: Which of the following methods on `ItemInterface` is used to control
      probabilistic early expiration for a cache item?
    answers:
      - value: beta(float $beta = 1.0)
        correct: false
      - value: The `beta` parameter in `CacheInterface::get()`
        correct: true
      - value: setEarlyExpiration(float $beta)
        correct: false
      - value: setProbabilisticExpiration(float $beta)
        correct: false
    help: Probabilistic early expiration is controlled by the `beta` parameter
      passed to the `CacheInterface::get()` method, not directly on the
      `ItemInterface`.
  - question: What is the primary function of
      `Symfony\Component\Cache\Adapter\ProxyAdapter`?
    answers:
      - value: It wraps an existing PSR-6 cache item pool, allowing for additional logic
          like namespace or default lifetime.
        correct: true
      - value: It provides a mechanism for distributed caching across multiple servers.
        correct: false
      - value: It automatically converts a PSR-16 cache to a PSR-6 cache.
        correct: false
      - value: It's a concrete implementation of a file-based cache.
        correct: false
    help: The `ProxyAdapter` acts as a decorator for another PSR-6 cache pool,
      allowing you to add a namespace or override the default lifetime without
      modifying the underlying pool.
  - question: When configuring a `MemcachedAdapter`, which option specifies the item
      key distribution method among servers, with `consistent` hashing providing
      better distribution?
    answers:
      - value: distribution
        correct: true
      - value: hash
        correct: false
      - value: serializer
        correct: false
      - value: libketama_compatible
        correct: false
    help: The `distribution` option (e.g., `modula`, `consistent`, `virtual_bucket`)
      controls how keys are mapped to Memcached servers. `consistent` is
      generally preferred.
  - question: What is the purpose of the `framework.http_cache.private_headers`
      configuration option?
    answers:
      - value: It defines a set of request headers that, if present, will cause
          responses to be treated as private by default.
        correct: true
      - value: It lists headers that should always be removed from cached responses.
        correct: false
      - value: It specifies headers that are only accessible to private caches.
        correct: false
      - value: It dictates which headers are sent to the client for private responses.
        correct: false
    help: Headers like `Authorization` and `Cookie` are typically in
      `private_headers`, making responses uncacheable by shared caches unless
      explicitly marked public.
  - question: Which console command is used to list all available cache pools
      configured in a Symfony application?
    answers:
      - value: cache:pool:list
        correct: true
      - value: cache:list
        correct: false
      - value: cache:pools
        correct: false
      - value: debug:cache
        correct: false
    help: The `cache:pool:list` command provides an overview of all configured cache
      pools.
  - question: What is the primary purpose of the
      `framework.http_cache.skip_response_headers` configuration option?
    answers:
      - value: It specifies a list of response headers that will never be cached, even
          if the response is otherwise cacheable.
        correct: true
      - value: It defines headers that should be removed before sending the response to
          the client.
        correct: false
      - value: It lists headers that are only relevant for client-side caching.
        correct: false
      - value: It determines which headers are used for cache key generation.
        correct: false
    help: Headers like `Set-Cookie` are typically in `skip_response_headers` to
      prevent them from being cached, as they are specific to a user session.
  - question: Which of the following methods on a `Response` object is used to set
      the Time-To-Live (TTL) for the response in seconds, primarily for the
      `HttpCache` reverse proxy?
    answers:
      - value: setTtl(int $value)
        correct: true
      - value: setMaxAge(int $value)
        correct: false
      - value: setSharedMaxAge(int $value)
        correct: false
      - value: setExpires(DateTimeInterface $date = null)
        correct: false
    help: The `setTtl()` method is a Symfony-specific helper for setting the
      internal TTL used by the `HttpCache`.
  - question: When configuring asset versioning in Symfony to bust browser caches,
      what is the effect of setting `framework.assets.version`?
    answers:
      - value: A query parameter with the specified version string is appended to asset
          URLs.
        correct: true
      - value: The asset file names are automatically renamed to include the version.
        correct: false
      - value: A unique hash is generated for each asset and added to its URL.
        correct: false
      - value: It forces the browser to ignore its cache for all assets.
        correct: false
    help: Setting `framework.assets.version` appends a version query parameter
      (e.g., `?v=v2`) to asset URLs, forcing browsers to re-fetch them.
  - question: What is the primary benefit of using `DeflateMarshaller` with a
      `RedisAdapter` in Symfony's Cache component?
    answers:
      - value: It compresses data before storing it in Redis, reducing storage space.
        correct: true
      - value: It encrypts data for secure storage in Redis.
        correct: false
      - value: It improves the speed of data retrieval from Redis.
        correct: false
      - value: It enables automatic cache invalidation based on data changes.
        correct: false
    help: The `DeflateMarshaller` is used to compress the cached data, which can
      significantly reduce the memory footprint in Redis.
  - question: When configuring a cache pool for asynchronous cache value computation
      in Symfony, which component is typically involved in delegating the
      computation to a background worker?
    answers:
      - value: Symfony Messenger
        correct: true
      - value: Symfony EventDispatcher
        correct: false
      - value: Symfony Workflow
        correct: false
      - value: Symfony Process
        correct: false
    help: Symfony Messenger is used to dispatch `EarlyExpirationMessage` messages to
      a background worker for asynchronous cache recomputation.
  - question: Which of the following is a valid way to configure the
      `framework.cache.app` pool to use the `cache.adapter.filesystem` adapter?
    answers:
      - value: |-
          ```yaml
          framework:
              cache:
                  app: cache.adapter.filesystem
          ```
        correct: true
      - value: |-
          ```yaml
          framework:
              cache:
                  default_adapter: cache.adapter.filesystem
          ```
        correct: false
      - value: |-
          ```yaml
          framework:
              cache:
                  pools:
                      cache.app:
                          adapter: cache.adapter.filesystem
          ```
        correct: true
    help: The `app` key directly under `framework.cache` sets the adapter for the
      default application cache pool. Alternatively, you can define it
      explicitly under `pools`.
  - question: Which of the following Memcached client configuration options controls
      automatic ejection of hosts that have exceeded the configured
      `server_failure_limit`?
    answers:
      - value: auto_eject_hosts
        correct: true
      - value: retry_timeout
        correct: false
      - value: server_failure_limit
        correct: false
      - value: connect_timeout
        correct: false
    help: "`auto_eject_hosts` is specifically designed to manage the automatic
      removal of unresponsive Memcached servers from the pool."
  - question: What is the default value for `framework.http_cache.debug`?
    answers:
      - value: "%kernel.debug%"
        correct: true
      - value: "false"
        correct: false
      - value: "true"
        correct: false
      - value: "null"
        correct: false
    help: The `debug` option for HTTP cache defaults to the value of `kernel.debug`,
      meaning it's typically enabled in development and disabled in production.
  - question: Which of the following is the correct way to manually prune expired
      cache entries from a `FilesystemAdapter` instance?
    answers:
      - value: $cache->prune();
        correct: true
      - value: $cache->clearExpired();
        correct: false
      - value: $cache->deleteExpiredItems();
        correct: false
      - value: $cache->cleanup();
        correct: false
    help: Adapters implementing `PruneableInterface` (like `FilesystemAdapter`)
      provide a `prune()` method for manual cleanup of expired items.
  - question: When configuring a `PdoAdapter` for database caching, what happens
      automatically upon the first save operation if the necessary database
      table does not exist?
    answers:
      - value: The adapter automatically creates the database table.
        correct: true
      - value: An exception is thrown, requiring manual table creation.
        correct: false
      - value: The cache operation fails silently.
        correct: false
      - value: It falls back to a filesystem cache.
        correct: false
    help: The `PdoAdapter` is designed to be convenient and will create its required
      database table automatically on the first write if it doesn't exist.
  - question: What is the purpose of the `framework.http_cache.trace_header`
      configuration option?
    answers:
      - value: "It defines the name of the HTTP header used for cache tracing (default:
          `X-Symfony-Cache`)."
        correct: true
      - value: It specifies the header used to indicate cache hits or misses.
        correct: false
      - value: It controls which headers are included in the cache key.
        correct: false
      - value: It sets the header for ESI sub-request identification.
        correct: false
    help: The `trace_header` option allows customizing the name of the debug header
      that provides cache tracing information.
  - question: Which of the following is true about the `ArrayAdapter` in Symfony's
      Cache component?
    answers:
      - value: It stores data in memory and is primarily used for testing or temporary
          caching.
        correct: true
      - value: It persists cache items to the filesystem.
        correct: false
      - value: It requires a Redis or Memcached connection.
        correct: false
      - value: It automatically clears its contents when the PHP process finishes.
        correct: true
    help: The `ArrayAdapter` is an in-memory cache, meaning its contents are lost
      when the PHP process ends, making it suitable for short-lived data or
      testing.
  - question: When using `RetryableHttpClient` in Symfony, what is the benefit of
      providing a nested array for the `base_uri` option?
    answers:
      - value: It enables randomized selection of base URIs for each retry attempt,
          improving resilience.
        correct: true
      - value: It forces the client to use all provided base URIs simultaneously.
        correct: false
      - value: It defines a fallback order for base URIs in case of failure.
        correct: false
      - value: It allows specifying different authentication credentials for each base
          URI.
        correct: false
    help: A nested array for `base_uri` allows the `RetryableHttpClient` to randomly
      pick a URI from the inner array for the first request, and then use
      subsequent non-nested URIs in order for retries, distributing load and
      increasing robustness.
  - question: Which of the following methods on a `Response` object is used to set
      the `Last-Modified` HTTP header?
    answers:
      - value: setLastModified(DateTimeInterface $date = null)
        correct: true
      - value: setModifiedDate(DateTimeInterface $date = null)
        correct: false
      - value: setCache(['last_modified' => new \DateTime()])
        correct: true
      - value: setExpires(DateTimeInterface $date = null)
        correct: false
    help: The `setLastModified()` method is specifically for the `Last-Modified`
      header. `setCache()` can also be used to set it along with other cache
      directives.
  - question: What is the primary difference between `max-age` and `s-maxage` in the
      `Cache-Control` header?
    answers:
      - value: "`max-age` applies to both private and shared caches, while `s-maxage`
          applies only to shared (proxy) caches."
        correct: true
      - value: "`max-age` is for client-side caching, and `s-maxage` is for server-side
          caching."
        correct: false
      - value: "`max-age` is for validation, and `s-maxage` is for expiration."
        correct: false
      - value: "`max-age` is deprecated, and `s-maxage` is the modern equivalent."
        correct: false
    help: "`s-maxage` (shared max-age) specifically targets shared caches (like
      reverse proxies), overriding `max-age` for them."
  - question: Which of the following is true about the
      `framework.http_cache.allow_revalidate` configuration option?
    answers:
      - value: "It specifies whether the client can force a cache revalidation by
          including a `Cache-Control: max-age=0` directive."
        correct: true
      - value: It forces the cache to revalidate all responses on every request.
        correct: false
      - value: It is only relevant for ETag-based validation.
        correct: false
      - value: It determines if the cache should revalidate stale responses in the
          background.
        correct: false
    help: Setting `allow_revalidate` to `true` makes the Symfony HTTP cache
      compliant with RFC 2616 regarding client-forced revalidation.
  - question: What is the purpose of the `framework.http_cache.default_pdo_provider`
      configuration option?
    answers:
      - value: It specifies the service ID of the default PDO or Doctrine DBAL
          connection to be used by PDO cache adapters.
        correct: true
      - value: It defines the DSN for connecting to a PostgreSQL database for caching.
        correct: false
      - value: It sets the default lifetime for cache items stored in a database.
        correct: false
      - value: It configures the database table name for PDO caching.
        correct: false
    help: The `default_pdo_provider` allows you to define a global default database
      connection for `PdoAdapter` and `DoctrineDbalAdapter`.
  - question: When configuring a `TagAwareAdapter` with two separate adapters, one
      for items and one for tags, what is the primary reason for this setup?
    answers:
      - value: To optimize performance and synchronization across multiple cache fronts
          by using different backends for items and tags.
        correct: true
      - value: To enable automatic replication of cache items across different storage
          types.
        correct: false
      - value: To ensure that tags are always stored in a persistent storage, even if
          items are in-memory.
        correct: false
      - value: To provide a fallback mechanism if one of the adapters fails.
        correct: false
    help: Using separate adapters for items and tags (e.g., `FilesystemAdapter` for
      items and `RedisAdapter` for tags) can improve performance and
      consistency, especially in distributed environments.
  - question: Which of the following is the correct way to clear all cache pools in
      Symfony using a console command, excluding `my_cache_pool` and
      `another_cache_pool`?
    answers:
      - value: php bin/console cache:pool:clear --all --exclude=my_cache_pool
          --exclude=another_cache_pool
        correct: true
      - value: php bin/console cache:clear --all
          --except=my_cache_pool,another_cache_pool
        correct: false
      - value: php bin/console cache:pool:clear *
          --ignore=my_cache_pool,another_cache_pool
        correct: false
      - value: php bin/console cache:pool:clear --exclude=my_cache_pool
          --exclude=another_cache_pool
        correct: false
    help: The `cache:pool:clear` command supports the `--all` option to clear all
      pools and repeatable `--exclude` options to skip specific ones.
  - question: What is the purpose of the
      `framework.http_cache.default_redis_provider` configuration option?
    answers:
      - value: It defines the DSN (Data Source Name) to be used by the Redis cache
          provider by default.
        correct: true
      - value: It specifies the service ID of a custom Redis client.
        correct: false
      - value: It sets the default database index for Redis caching.
        correct: false
      - value: It configures the Redis server's port.
        correct: false
    help: The `default_redis_provider` option allows setting a default DSN for Redis
      connections used by cache pools.
  - question: Which of the following methods on `ItemInterface` is used to control
      probabilistic early expiration for a cache item?
    answers:
      - value: beta(float $beta = 1.0)
        correct: false
      - value: The `beta` parameter in `CacheInterface::get()`
        correct: true
      - value: setEarlyExpiration(float $beta)
        correct: false
      - value: setProbabilisticExpiration(float $beta)
        correct: false
    help: Probabilistic early expiration is controlled by the `beta` parameter
      passed to the `CacheInterface::get()` method, not directly on the
      `ItemInterface`.
  - question: What is the primary function of
      `Symfony\Component\Cache\Adapter\ProxyAdapter`?
    answers:
      - value: It wraps an existing PSR-6 cache item pool, allowing for additional logic
          like namespace or default lifetime.
        correct: true
      - value: It provides a mechanism for distributed caching across multiple servers.
        correct: false
      - value: It automatically converts a PSR-16 cache to a PSR-6 cache.
        correct: false
      - value: It's a concrete implementation of a file-based cache.
        correct: false
    help: The `ProxyAdapter` acts as a decorator for another PSR-6 cache pool,
      allowing you to add a namespace or override the default lifetime without
      modifying the underlying pool.
  - question: When configuring a `MemcachedAdapter`, which option specifies the item
      key distribution method among servers, with `consistent` hashing providing
      better distribution?
    answers:
      - value: distribution
        correct: true
      - value: hash
        correct: false
      - value: serializer
        correct: false
      - value: libketama_compatible
        correct: false
    help: The `distribution` option (e.g., `modula`, `consistent`, `virtual_bucket`)
      controls how keys are mapped to Memcached servers. `consistent` is
      generally preferred.
