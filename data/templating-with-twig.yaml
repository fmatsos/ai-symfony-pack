category: Templating with Twig
questions:
  - question: Which Twig syntax is used to output the value of a variable?
    answers:
      - value: "`{{ variable }}`"
        correct: true
      - value: "`{% variable %}`"
        correct: false
      - value: "`{# variable #}`"
        correct: false
      - value: "`<?php echo $variable; ?>`"
        correct: false
    help: The `{{ ... }}` syntax is used in Twig to print the content of variables
      or expressions.
  - question: In Twig, what is the purpose of the `{% extends 'base.html.twig' %}` tag?
    answers:
      - value: To define a new block of content.
        correct: false
      - value: To include another template file.
        correct: false
      - value: To inherit the layout and blocks from a parent template.
        correct: true
      - value: To set a global variable for the current template.
        correct: false
    help: The `{% extends %}` tag is used to set up template inheritance, allowing a
      template to reuse the structure of a parent template.
  - question: Which global variable in Twig provides access to the currently
      authenticated user object?
    answers:
      - value: "`app.user`"
        correct: true
      - value: "`security.user`"
        correct: false
      - value: "`user`"
        correct: false
      - value: "`current_user`"
        correct: false
    help: The `app` global variable provides access to common application-specific
      variables, including `app.user` for the authenticated user.
  - question: How would you format a `DateTime` object named `comment.publishedAt`
      to display as 'YYYY-MM-DD' in Twig?
    answers:
      - value: "`{{ comment.publishedAt|date('Y-m-d') }}`"
        correct: true
      - value: "`{{ date(comment.publishedAt, 'Y-m-d') }}`"
        correct: false
      - value: "`{{ comment.publishedAt.format('Y-m-d') }}`"
        correct: false
      - value: "`{{ comment.publishedAt|format_date('Y-m-d') }}`"
        correct: false
    help: The `date` filter is used to format dates in Twig, accepting a format
      string as an argument.
  - question: Which Twig function is used to generate a relative URL for a named
      route in Symfony?
    answers:
      - value: "`url()`"
        correct: false
      - value: "`path()`"
        correct: true
      - value: "`route()`"
        correct: false
      - value: "`link()`"
        correct: false
    help: The `path()` function generates a relative URL for a given Symfony route,
      while `url()` generates an absolute URL.
  - question: In a Symfony controller extending `AbstractController`, which method
      is used to render a Twig template and return a `Response` object?
    answers:
      - value: "`renderView()`"
        correct: false
      - value: "`render()`"
        correct: true
      - value: "`display()`"
        correct: false
      - value: "`show()`"
        correct: false
    help: The `render()` method is the standard way to render a Twig template and
      return a `Response` object directly from a controller.
  - question: How do you correctly link to an image located at
      `public/images/logo.png` in a Twig template?
    answers:
      - value: "`<img src=\"{{ asset('images/logo.png') }}\" alt=\"Logo\">`"
        correct: true
      - value: '`<img src="/images/logo.png" alt="Logo">`'
        correct: false
      - value: "`<img src=\"{{ path('images/logo.png') }}\" alt=\"Logo\">`"
        correct: false
      - value: "`<img src=\"{{ url('images/logo.png') }}\" alt=\"Logo\">`"
        correct: false
    help: The `asset()` Twig function is used to generate URLs for static assets,
      automatically handling base paths.
  - question: Which Twig function is used to dump the contents of a variable to the
      Web Debug Toolbar for debugging purposes?
    answers:
      - value: "`{{ dump(variable) }}`"
        correct: true
      - value: "`{{ debug(variable) }}`"
        correct: false
      - value: "`{{ print_r(variable) }}`"
        correct: false
      - value: "`{{ var_dump(variable) }}`"
        correct: false
    help: The `dump()` function (and `{% dump %}` tag) are used for debugging
      variables in Twig. When used as a function, `{{ dump(variable) }}`
      typically outputs to the Web Debug Toolbar by default.
  - question: By default, how does Twig handle potentially unsafe content (e.g.,
      HTML tags, scripts) when outputting variables?
    answers:
      - value: It removes all HTML tags.
        correct: false
      - value: It escapes special characters into HTML entities.
        correct: true
      - value: It outputs the content as is, requiring manual escaping.
        correct: false
      - value: It converts all content to plain text.
        correct: false
    help: Twig has automatic output escaping enabled by default to prevent XSS
      attacks by converting special characters into HTML entities.
  - question: |-
      Consider the following Twig snippet:

      ```twig
      {% for item in items %}
          <p>{{ item.name }}</p>
      {% endfor %}
      ```

      What is the purpose of the `{% for %}` tag?
    answers:
      - value: To define a conditional block.
        correct: false
      - value: To iterate over a collection of items.
        correct: true
      - value: To include another template.
        correct: false
      - value: To set a loop counter.
        correct: false
    help: The `{% for %}` tag is Twig's construct for looping over arrays or objects.
  - question: Which Twig tag is used for conditional logic?
    answers:
      - value: "`{% loop %}`"
        correct: false
      - value: "`{% switch %}`"
        correct: false
      - value: "`{% if %}`"
        correct: true
      - value: "`{% case %}`"
        correct: false
    help: The `{% if %}`, `{% elseif %}`, and `{% else %}` tags are used to
      implement conditional logic in Twig templates.
  - question: How do you include another Twig template fragment named
      `_header.html.twig` within the current template?
    answers:
      - value: "`{% include '_header.html.twig' %}`"
        correct: false
      - value: "`{{ include('_header.html.twig') }}`"
        correct: true
      - value: "`{% import '_header.html.twig' %}`"
        correct: false
      - value: "`{{ import('_header.html.twig') }}`"
        correct: false
    help: The `include()` function is used to include a template and return its
      rendered content. It's typically used with `{{ }}` for output.
  - question: To translate a string 'Hello World!' in a Twig template, which filter
      would you use?
    answers:
      - value: "`|translate`"
        correct: false
      - value: "`|trans`"
        correct: true
      - value: "`|i18n`"
        correct: false
      - value: "`|t`"
        correct: false
    help: The `trans` filter (or `{% trans %}` tag) is used for translating strings
      in Twig templates.
  - question: You have configured a custom global variable named `app_name` in your
      `twig.yaml`. How do you access its value in a Twig template?
    answers:
      - value: "`{{ app_name }}`"
        correct: true
      - value: "`{{ global.app_name }}`"
        correct: false
      - value: "`{{ app.config.app_name }}`"
        correct: false
      - value: "`{{ get_global('app_name') }}`"
        correct: false
    help: Custom global variables configured in Twig are directly accessible by
      their name in templates.
  - question: In a child Twig template using inheritance, what does `{{ parent() }}`
      do within a `{% block %}`?
    answers:
      - value: It renders the content of the block from the parent template.
        correct: true
      - value: It includes the entire parent template.
        correct: false
      - value: It calls a PHP function named `parent()`.
        correct: false
      - value: It defines a new block for the parent.
        correct: false
    help: The `parent()` function allows you to render the content of the block from
      the parent template, enabling you to add to or wrap existing content.
  - question: Given an array `notifications`, how would you display the number of
      items in it using a Twig filter?
    answers:
      - value: "`{{ notifications|count }}`"
        correct: false
      - value: "`{{ notifications|size }}`"
        correct: false
      - value: "`{{ notifications|length }}`"
        correct: true
      - value: "`{{ notifications.length }}`"
        correct: false
    help: The `length` filter is used to get the number of items in an array or the
      length of a string.
  - question: Which Twig function generates an absolute URL for a named route?
    answers:
      - value: "`path()`"
        correct: false
      - value: "`route()`"
        correct: false
      - value: "`url()`"
        correct: true
      - value: "`absolute_path()`"
        correct: false
    help: The `url()` function generates an absolute URL for a given Symfony route,
      including the scheme and host.
  - question: What is the primary difference between `AbstractController::render()`
      and `AbstractController::renderView()` in Symfony?
    answers:
      - value: "`render()` returns a `Response` object, while `renderView()` returns the
          rendered HTML content as a string."
        correct: true
      - value: "`renderView()` is used for AJAX requests, while `render()` is for full
          page loads."
        correct: false
      - value: "`render()` is deprecated in Symfony 7, `renderView()` should be used
          instead."
        correct: false
      - value: "`renderView()` allows passing more variables than `render()`."
        correct: false
    help: "`render()` directly creates and returns a `Response` object, whereas
      `renderView()` only returns the HTML string, allowing for manual
      `Response` object creation or further manipulation."
  - question: To ensure an asset URL is always absolute (e.g., for emails or RSS
      feeds), which Twig function would you combine with `asset()`?
    answers:
      - value: "`full_url()`"
        correct: false
      - value: "`absolute_url()`"
        correct: true
      - value: "`base_url()`"
        correct: false
      - value: "`global_url()`"
        correct: false
    help: The `absolute_url()` function can be used to convert a relative URL (like
      one generated by `asset()`) into a full absolute URL.
  - question: Which Twig tag is used to dump the contents of a variable to the Web
      Debug Toolbar, without displaying it directly in the page content?
    answers:
      - value: "`{{ dump(variable) }}`"
        correct: false
      - value: "`{% dump variable %}`"
        correct: true
      - value: "`{% debug variable %}`"
        correct: false
      - value: "`{{ var_dump(variable) }}`"
        correct: false
    help: The `{% dump %}` tag sends the variable's contents to the Web Debug
      Toolbar, making it useful for debugging without altering the page's
      visible output.
  - question: You have a variable `user_input` that might contain malicious HTML.
      How can you display it in Twig without any escaping, explicitly indicating
      it's safe?
    answers:
      - value: "`{{ user_input|raw }}`"
        correct: true
      - value: "`{{ user_input|unescape }}`"
        correct: false
      - value: "`{{ user_input|html_decode }}`"
        correct: false
      - value: "`{{ user_input|safe }}`"
        correct: false
    help: The `raw` filter explicitly marks a variable as safe, preventing Twig's
      automatic escaping. Use with caution as it can introduce XSS
      vulnerabilities if the content is not truly safe.
  - question: Inside a `{% for item in items %}` loop, which special variable
      provides information about the current iteration, such as `loop.index` or
      `loop.first`?
    answers:
      - value: "`iterator`"
        correct: false
      - value: "`current`"
        correct: false
      - value: "`loop`"
        correct: true
      - value: "`for_loop`"
        correct: false
    help: The `loop` variable is automatically available inside `for` loops and
      provides useful information about the loop's state.
  - question: "When including a template with `{{ include('template.html.twig',
      {foo: 'bar'}) }}`, what happens to variables from the parent template?"
    answers:
      - value: They are not accessible in the included template by default.
        correct: false
      - value: They are automatically inherited by the included template.
        correct: true
      - value: They must be explicitly passed using the `with` keyword.
        correct: false
      - value: Only variables explicitly passed are available.
        correct: false
    help: By default, variables from the parent template are accessible within an
      included template. You can override or add to them by passing an array of
      variables.
  - question: To set a default translation domain for all subsequent `trans` filters
      and tags within a specific Twig template, which tag would you use?
    answers:
      - value: "`{% default_domain 'app' %}`"
        correct: false
      - value: "`{% set_trans_domain 'app' %}`"
        correct: false
      - value: "`{% trans_default_domain 'app' %}`"
        correct: true
      - value: "`{% use_domain 'app' %}`"
        correct: false
    help: The `trans_default_domain` tag allows you to specify a default translation
      domain for the current template, simplifying translation calls.
  - question: Which property of the `app` global variable in Twig provides access to
      the current application environment (e.g., 'dev', 'prod')?
    answers:
      - value: "`app.env`"
        correct: false
      - value: "`app.environment`"
        correct: true
      - value: "`app.getEnv()`"
        correct: false
      - value: "`app.kernel.environment`"
        correct: false
    help: The `app.environment` property provides the current environment string,
      useful for conditional rendering based on the application's mode.
  - question: |-
      Consider the following child template:

      ```twig
      {% extends 'base.html.twig' %}
      <p>Some content outside a block</p>
      {% block content %}My content{% endblock %}
      ```

      What will be the result when rendering this template?
    answers:
      - value: The content 'Some content outside a block' will be rendered before the
          `content` block.
        correct: false
      - value: A `SyntaxError` will be thrown because all content must be inside a
          `block` tag when extending another template.
        correct: true
      - value: The content 'Some content outside a block' will be ignored.
        correct: false
      - value: It will render correctly, but 'Some content outside a block' will be
          appended to the `body` block of the parent.
        correct: false
    help: In Twig template inheritance, any content outside a `{% block %}` tag
      after an `{% extends %}` tag will result in a `SyntaxError`.
  - question: You have a product price `product.price` (e.g., `1234.50`). How would
      you apply a custom `price` filter to format it with 2 decimal places, a
      comma as the decimal separator, and a dot as the thousands separator?
    answers:
      - value: "`{{ product.price|price(2, ',', '.') }}`"
        correct: true
      - value: "`{{ product.price|price(decimal=2, decimal_point=',',
          thousands_separator='.') }}`"
        correct: false
      - value: "`{{ product.price|format_price(2, ',', '.') }}`"
        correct: false
      - value: "`{{ product.price|currency(2, ',', '.') }}`"
        correct: false
    help: Custom filters can accept arguments. The `price` filter, as shown in the
      documentation, accepts arguments for decimal places, decimal point, and
      thousands separator in that order.
  - question: Which Twig function allows you to embed the output of a Symfony
      controller directly into a template?
    answers:
      - value: "`include_controller()`"
        correct: false
      - value: "`embed_controller()`"
        correct: false
      - value: "`render()`"
        correct: true
      - value: "`call_controller()`"
        correct: false
    help: The `render()` function in Twig can be used to embed the output of another
      controller, either by its route or by directly referencing the controller
      service.
  - question: You want to use the `#[Template]` attribute in a Symfony controller
      method. What is the correct return type for the method when using this
      attribute?
    answers:
      - value: "`Symfony\\Component\\HttpFoundation\\Response`"
        correct: false
      - value: "`void`"
        correct: false
      - value: "`array`"
        correct: true
      - value: "`string`"
        correct: false
    help: When using the `#[Template]` attribute, the controller method should
      return an `array` of parameters, and Symfony automatically creates the
      `Response` object.
  - question: To include Webpack Encore generated CSS and JavaScript files (e.g.,
      for an 'app' entrypoint) in your Twig template, which functions should you
      use?
    answers:
      - value: "`{{ encore_entry_css_files('app') }}` and `{{
          encore_entry_js_files('app') }}`"
        correct: false
      - value: "`{{ encore_entry_link_tags('app') }}` and `{{
          encore_entry_script_tags('app') }}`"
        correct: true
      - value: "`{{ webpack_css('app') }}` and `{{ webpack_js('app') }}`"
        correct: false
      - value: "`{{ asset_css('app') }}` and `{{ asset_js('app') }}`"
        correct: false
    help: Symfony's Webpack Encore integration provides `encore_entry_link_tags()`
      for CSS and `encore_entry_script_tags()` for JavaScript to include
      compiled assets.
  - question: Which Symfony console command can you use to list all available Twig
      functions, filters, and global variables, and also inspect the physical
      file path of a given template?
    answers:
      - value: "`php bin/console debug:container twig`"
        correct: false
      - value: "`php bin/console debug:twig`"
        correct: true
      - value: "`php bin/console twig:info`"
        correct: false
      - value: "`php bin/console cache:clear --env=twig`"
        correct: false
    help: The `debug:twig` command is a powerful tool for inspecting Twig's runtime
      configuration, including available extensions and template paths.
  - question: What is the correct syntax for adding a single-line comment in a Twig
      template?
    answers:
      - value: "`// This is a comment`"
        correct: false
      - value: "`<!-- This is a comment -->`"
        correct: false
      - value: "`{# This is a comment #}`"
        correct: true
      - value: "`/* This is a comment */`"
        correct: false
    help: "Twig comments are denoted by `{# ... #}` and are not rendered in the
      final HTML output."
  - question: When overriding a Twig template from a third-party bundle (e.g.,
      `AcmeUserBundle/registration/confirmed.html.twig`) in your application,
      and that bundle template itself extends another, what special prefix
      should you use in the `extends` tag to avoid infinite loop errors?
    answers:
      - value: "`@!BundleName/`"
        correct: true
      - value: "`@BundleName/original/`"
        correct: false
      - value: "`@~BundleName/`"
        correct: false
      - value: "`@_BundleName/`"
        correct: false
    help: The `!` prefix in `@!BundleName/template.html.twig` ensures that Twig
      extends the original template from the bundle, not your overridden
      version, preventing recursion.
  - question: How would you serialize a `person` object into JSON format directly
      within a Twig template?
    answers:
      - value: "`{{ person|json_encode }}`"
        correct: false
      - value: "`{{ person|serialize(format = 'json') }}`"
        correct: true
      - value: "`{{ person|to_json }}`"
        correct: false
      - value: "`{{ serialize(person, 'json') }}`"
        correct: false
    help: The `serialize` filter can be used to convert PHP objects into various
      formats, including JSON, directly in Twig.
  - question: Which Twig function allows you to display workflow, place, and
      transition metadata for an object configured with Symfony Workflow?
    answers:
      - value: "`workflow_status()`"
        correct: false
      - value: "`workflow_info()`"
        correct: false
      - value: "`workflow_metadata()`"
        correct: true
      - value: "`workflow_get_data()`"
        correct: false
    help: The `workflow_metadata()` Twig function is specifically designed to
      retrieve and display metadata associated with Symfony Workflow elements.
  - question: In a Symfony controller, which method would you use to render only a
      specific block from a Twig template and return its content as a string?
    answers:
      - value: "`renderBlock()`"
        correct: false
      - value: "`renderBlockView()`"
        correct: true
      - value: "`renderPartial()`"
        correct: false
      - value: "`getBlockContent()`"
        correct: false
    help: The `renderBlockView()` method returns the rendered content of a specific
      Twig block as a string, allowing you to manually create a `Response` or
      use the content elsewhere.
  - question: You need to generate a URL for a JavaScript variable in a Twig
      template. Which filter should you apply to the `path()` function output to
      ensure it's safely embedded in JavaScript?
    answers:
      - value: "`|escape('html')`"
        correct: false
      - value: "`|escape('js')`"
        correct: true
      - value: "`|json_encode`"
        correct: false
      - value: "`|raw`"
        correct: false
    help: The `escape('js')` filter is crucial for safely embedding Twig-generated
      strings, especially URLs, into JavaScript code by escaping characters that
      could break the JavaScript syntax.
  - question: When passing a `TranslatableMessage` object to the `trans` filter in
      Twig, what is the expected behavior?
    answers:
      - value: The message will be translated using the default domain and locale.
        correct: true
      - value: An error will occur as `TranslatableMessage` objects are not directly
          supported by the `trans` filter.
        correct: false
      - value: The raw message key will be displayed.
        correct: false
      - value: It will automatically detect the best translation based on context.
        correct: false
    help: Symfony's `TranslatableMessage` objects can be passed directly to the
      `trans` filter, simplifying translation logic in templates.
  - question: Given a `user` object with a `name` property and a `comment` object
      with a `publishedAt` property, how would you correctly display them in
      Twig?
    answers:
      - value: "`<p>{{ user.name }} added this comment on {{ comment.publishedAt|date
          }}</p>`"
        correct: true
      - value: "`<p>{{ user->name }} added this comment on {{ comment->publishedAt|date
          }}</p>`"
        correct: false
      - value: "`<p>{{ user['name'] }} added this comment on {{
          comment['publishedAt']|date }}</p>`"
        correct: false
      - value: "`<p>{{ user.getName() }} added this comment on {{
          comment.getPublishedAt()|date }}</p>`"
        correct: true
    help: Twig uses the `.` notation to access both public properties and methods
      (without parentheses) of objects. It also supports array-like access
      `['key']`.
  - question: To disable auto-escaping for a specific block of content in Twig,
      which tag pair would you use?
    answers:
      - value: "`{% noescape %}...{% endnoescape %}`"
        correct: false
      - value: "`{% autoescape false %}...{% endautoescape %}`"
        correct: true
      - value: "`{% raw %}...{% endraw %}`"
        correct: false
      - value: "`{% unescape %}...{% endunescape %}`"
        correct: false
    help: The `autoescape` tag allows you to control the auto-escaping behavior for
      a specific section of a template.
  - question: "When using `{{ include('template.html.twig', {foo: 'bar'},
      with_context = false) }}` or `{{ include('template.html.twig', {foo:
      'bar'}, only = true) }}`, what is the effect of `with_context = false` or
      `only = true`?"
    answers:
      - value: It makes all parent template variables unavailable in the included
          template, except those explicitly passed.
        correct: true
      - value: It forces the included template to be rendered in a new, isolated
          context, preventing any variable leakage from the parent.
        correct: true
      - value: It only includes the template if the variables `foo` and `bar` exist.
        correct: false
      - value: It prevents the included template from accessing any global variables.
        correct: false
    help: The `with_context = false` (or `only = true`) option creates an isolated
      context for the included template, meaning it will only have access to the
      variables explicitly passed to it and global variables, but not variables
      from the parent template.
  - question: You have a custom service registered as `App\Service\UuidGenerator`
      and made available as a global Twig variable `uuid`. Assuming it has a
      `generate()` method, how would you call this method in Twig?
    answers:
      - value: "`{{ uuid.generate() }}`"
        correct: false
      - value: "`{{ uuid.generate }}`"
        correct: true
      - value: "`{{ uuid->generate() }}`"
        correct: false
      - value: "`{{ call(uuid.generate) }}`"
        correct: false
    help: Twig's `.` notation can be used to access methods on objects, even if they
      are global variables, without needing parentheses for simple method calls.
  - question: Given a variable `message` containing 'Hello World', how would you
      apply both the `upper` filter and then the `reverse` filter in Twig?
    answers:
      - value: "`{{ message|upper|reverse }}`"
        correct: true
      - value: "`{{ message|upper, reverse }}`"
        correct: false
      - value: "`{{ reverse(upper(message)) }}`"
        correct: false
      - value: "`{{ message|reverse|upper }}`"
        correct: false
    help: Filters can be chained in Twig by applying them sequentially using the `|`
      operator. The output of the first filter becomes the input for the next.
  - question: Before attempting to render a Twig template, you want to
      programmatically check if it exists. Which method of the Twig loader would
      you use in PHP?
    answers:
      - value: "`load()`"
        correct: false
      - value: "`exists()`"
        correct: true
      - value: "`getTemplate()`"
        correct: false
      - value: "`resolve()`"
        correct: false
    help: The `exists()` method of the Twig loader (e.g., `FilesystemLoader`) allows
      you to check if a template can be found at a given path.
  - question: In a Symfony controller, which method is used to render only a
      specific block from a Twig template and return a `Response` object?
    answers:
      - value: "`renderBlock()`"
        correct: true
      - value: "`renderBlockView()`"
        correct: false
      - value: "`renderPartialBlock()`"
        correct: false
      - value: "`displayBlock()`"
        correct: false
    help: The `renderBlock()` method allows you to render a specific block from a
      Twig template and directly returns a `Response` object containing that
      block's content.
  - question: You are profiling your Symfony application. Which Twig tag can you use
      to measure the execution time and memory usage of a specific block of Twig
      code, visible in the Symfony profiler?
    answers:
      - value: "`{% profile %}...{% endprofile %}`"
        correct: false
      - value: "`{% stopwatch %}...{% endstopwatch %}`"
        correct: true
      - value: "`{% measure %}...{% endmeasure %}`"
        correct: false
      - value: "`{% timer %}...{% endtimer %}`"
        correct: false
    help: The `stopwatch` Twig tag integrates with the Symfony Stopwatch component,
      allowing you to profile specific sections of your Twig templates.
  - question: If you need to use custom variable delimiters in Twig (e.g., for
      compatibility with another frontend framework like Vue.js), which of the
      following is a valid example of how you might use them alongside standard
      Twig syntax?
    answers:
      - value: |-
          `{{ twig_variable }}   {# renders a Twig variable #}
          ${ vuejs_variable }$  {# renders a Vue.js variable #}`
        correct: true
      - value: |-
          `<% twig_variable %>   {# renders a Twig variable #}
          {{ vuejs_variable }}  {# renders a Vue.js variable #}`
        correct: false
      - value: |-
          `{{ twig_variable }}   {# renders a Twig variable #}
          @vuejs_variable@  {# renders a Vue.js variable #}`
        correct: false
      - value: |-
          `{{ twig_variable }}   {# renders a Twig variable #}
          [vuejs_variable]  {# renders a Vue.js variable #}`
        correct: false
    help: Twig allows configuring custom delimiters for variables and blocks, which
      is useful for integrating with other templating engines that use similar
      syntax.
  - question: In Symfony 7, when using `AbstractController::render()`, is it
      possible to pass a `Response` object directly to the `render` function?
    answers:
      - value: "Yes, as a named argument `response: $response`."
        correct: true
      - value: No, `render()` always creates a new `Response` object internally.
        correct: false
      - value: Only if the `Response` object is empty.
        correct: false
      - value: Yes, but only for `renderView()`.
        correct: false
    help: Symfony 7 allows passing an existing `Response` object to the `render()`
      method using the `response:` named argument, which can be useful for
      setting headers or status codes before rendering.
  - question: To change the default directory where Twig looks for templates (e.g.,
      from `templates/` to `resources/views/`), which configuration option would
      you modify in `config/packages/twig.yaml`?
    answers:
      - value: "`template_path`"
        correct: false
      - value: "`default_path`"
        correct: true
      - value: "`views_directory`"
        correct: false
      - value: "`template_root`"
        correct: false
    help: The `twig.default_path` configuration option allows you to specify a
      different base directory for your Twig templates.
  - question: Which of the following is NOT a valid way to access properties or
      methods of an object named `user` in Twig?
    answers:
      - value: "`{{ user.name }}`"
        correct: false
      - value: "`{{ user['name'] }}`"
        correct: false
      - value: "`{{ user->getName() }}`"
        correct: true
      - value: "`{{ user.getName }}`"
        correct: false
    help: Twig uses the `.` operator for accessing both properties and methods
      (without parentheses for methods) and array-like access `['key']`. The
      `->` syntax is PHP-specific.
  - question: What is the primary benefit of Twig's automatic output escaping?
    answers:
      - value: It improves template rendering performance.
        correct: false
      - value: It prevents Cross-Site Scripting (XSS) vulnerabilities.
        correct: true
      - value: It automatically formats all variable output for readability.
        correct: false
      - value: It reduces the bundle size of frontend assets.
        correct: false
    help: Automatic output escaping is a security feature that converts special
      characters in variable output into HTML entities, preventing malicious
      scripts from being executed.
  - question: You want to include a template `_user_profile.html.twig` and
      explicitly pass a `user` variable to it, but ensure no other variables
      from the parent template are accessible. Which `include` function syntax
      achieves this?
    answers:
      - value: "`{{ include('blog/_user_profile.html.twig', {user: blog_post.author})
          }}`"
        correct: false
      - value: "`{{ include('blog/_user_profile.html.twig', {user: blog_post.author},
          only = true) }}`"
        correct: true
      - value: "`{{ include('blog/_user_profile.html.twig', {user: blog_post.author},
          isolated = true) }}`"
        correct: false
      - value: "`{{ include('blog/_user_profile.html.twig', {user: blog_post.author})
          with_context false }}`"
        correct: true
    help: The `only = true` (or `with_context = false`) option in the `include`
      function creates an isolated context, meaning only the explicitly passed
      variables and global variables are available in the included template.
  - question: Which global variable in Twig provides access to the current `Request`
      object?
    answers:
      - value: "`app.request`"
        correct: true
      - value: "`request`"
        correct: false
      - value: "`app.http_request`"
        correct: false
      - value: "`server.request`"
        correct: false
    help: The `app.request` property of the `app` global variable provides access to
      the current `Symfony\Component\HttpFoundation\Request` object.
  - question: What is the correct way to render a Symfony form named `form` in a
      Twig template, including its opening `<form>` tag?
    answers:
      - value: "`{{ form_open(form) }}`"
        correct: false
      - value: "`{{ form_start(form) }}`"
        correct: true
      - value: "`{% form_start(form) %}`"
        correct: false
      - value: "`{{ form(form) }}`"
        correct: false
    help: The `form_start()` Twig function is used to render the opening `<form>`
      tag for a Symfony form.
  - question: To embed content asynchronously using Hinclude in Twig, which function
      would you use?
    answers:
      - value: "`{{ render_async() }}`"
        correct: false
      - value: "`{{ render_hinclude() }}`"
        correct: true
      - value: "`{{ include_async() }}`"
        correct: false
      - value: "`{{ hinclude() }}`"
        correct: false
    help: The `render_hinclude()` Twig function is specifically designed for
      embedding content asynchronously using the Hinclude library.
  - question: You want to configure an additional directory
      `email/default/templates` to be used by Twig, but without assigning it a
      specific namespace. How would you do this in `config/packages/twig.yaml`?
    answers:
      - value: |-
          `paths:
              'email/default/templates': ~`
        correct: true
      - value: |-
          `paths:
              'email/default/templates': null`
        correct: true
      - value: |-
          `paths:
              'email/default/templates': ''`
        correct: false
      - value: |-
          `paths:
              'email/default/templates': default`
        correct: false
    help: To add a path without a namespace, you can set its value to `~` (YAML
      null) or `null` in PHP configuration. This makes templates in that
      directory accessible directly by their filename.
  - question: Which Symfony console command is used to check Twig templates for
      syntax errors?
    answers:
      - value: "`php bin/console twig:validate`"
        correct: false
      - value: "`php bin/console lint:twig`"
        correct: true
      - value: "`php bin/console twig:check`"
        correct: false
      - value: "`php bin/console debug:template`"
        correct: false
    help: The `lint:twig` command is used to validate the syntax of Twig templates,
      which is useful for catching errors early in development or CI/CD
      pipelines.
  - question: When creating a `TemplatedEmail` in Symfony, how do you specify the
      Twig template to be used for the email's HTML content?
    answers:
      - value: "`->template('emails/signup.html.twig')`"
        correct: false
      - value: "`->htmlTemplate('emails/signup.html.twig')`"
        correct: true
      - value: "`->setHtmlTemplate('emails/signup.html.twig')`"
        correct: false
      - value: "`->twigTemplate('emails/signup.html.twig')`"
        correct: false
    help: The `htmlTemplate()` method of `TemplatedEmail` is used to specify the
      path to the Twig template for the email's HTML body.
  - question: What is the purpose of the `{% block stylesheets %}` and `{% block
      javascripts %}` blocks when integrating Webpack Encore with Twig template
      inheritance?
    answers:
      - value: They are required to define global stylesheets and JavaScript files for
          the entire application.
        correct: false
      - value: They allow child templates to add their own page-specific CSS and JS
          files while inheriting from a base layout.
        correct: true
      - value: They automatically inject all compiled assets without needing
          `encore_entry_link_tags()` or `encore_entry_script_tags()`.
        correct: false
      - value: They are used for defining inline styles and scripts only.
        correct: false
    help: These blocks, combined with `parent()`, allow for modular asset
      management, where base templates define common assets and child templates
      add their specific ones.
  - question: You have a Twig template that extends `base.html.twig`. You want to
      define a new block named `page_contents` within the `content` block of
      `base.html.twig`. What is the correct structure?
    answers:
      - value: |-
          ```twig
          {% extends 'base.html.twig' %}
          {% block content %}
              <h1>Blog</h1>
              {% block page_contents %}{% endblock %}
          {% endblock %}
          ```
        correct: true
      - value: |-
          ```twig
          {% extends 'base.html.twig' %}
          {% block page_contents %}{% endblock %}
          {% block content %}
              <h1>Blog</h1>
          {% endblock %}
          ```
        correct: false
      - value: |-
          ```twig
          {% extends 'base.html.twig' %}
          {% block content %}
              <h1>Blog</h1>
          {% newblock page_contents %}{% endnewblock %}
          {% endblock %}
          ```
        correct: false
      - value: |-
          ```twig
          {% extends 'base.html.twig' %}
          {% block content %}
              <h1>Blog</h1>
              {{ block('page_contents') }}
          {% endblock %}
          ```
        correct: false
    help: Blocks can be nested within other blocks, allowing for multi-level
      template inheritance and granular control over content sections.
  - question: Which of the following is the correct way to configure a Twig template
      path with a namespace (e.g., `backend/templates` mapped to the `admin`
      namespace) in `config/packages/twig.yaml`?
    answers:
      - value: |-
          `paths:
              'backend/templates': admin`
        correct: true
      - value: |-
          `namespaces:
              admin: 'backend/templates'`
        correct: false
      - value: |-
          `template_namespaces:
              admin: 'backend/templates'`
        correct: false
      - value: "`admin_path: 'backend/templates'`"
        correct: false
    help: In `twig.yaml`, you define paths under the `paths` key, with the directory
      as the key and the namespace as the value. This allows referencing
      templates like `@admin/dashboard.html.twig`.
  - question: What is the primary benefit of using `render_hinclude()` in Twig for
      embedding controller output?
    answers:
      - value: It caches the embedded content for faster loading.
        correct: false
      - value: It allows the embedded content to be loaded asynchronously, improving
          initial page load time.
        correct: true
      - value: It ensures the embedded content is always rendered from the main request.
        correct: false
      - value: It automatically translates the embedded content.
        correct: false
    help: "`render_hinclude()` leverages Hinclude to load parts of your page via
      AJAX, making the initial page load faster and improving perceived
      performance."
  - question: When debugging variables in Twig, what is the difference between `{{
      dump(variable) }}` and `{% dump variable %}`?
    answers:
      - value: "`{{ dump(variable) }}` outputs directly into the page content, while `{%
          dump variable %}` sends it to the Web Debug Toolbar."
        correct: true
      - value: "`{% dump variable %}` outputs directly into the page content, while `{{
          dump(variable) }}` sends it to the Web Debug Toolbar."
        correct: false
      - value: There is no functional difference; they are interchangeable.
        correct: false
      - value: "`{{ dump(variable) }}` is for public variables, `{% dump variable %}` is
          for private variables."
        correct: false
    help: The `dump()` function outputs directly into the HTML, while the `{% dump
      %}` tag sends the output to the Symfony Web Debug Toolbar, keeping the
      HTML clean.
  - question: You are integrating Twig with the Symfony Mime component outside of a
      full-stack Symfony application. What are the essential Twig components you
      need to initialize to render email bodies from templates?
    answers:
      - value: "`Twig\\Loader\\ArrayLoader` and `Twig\\Environment`"
        correct: false
      - value: "`Twig\\Loader\\FilesystemLoader` and `Twig\\Environment`"
        correct: true
      - value: "`Twig\\Loader\\StringLoader` and `Twig\\Template`"
        correct: false
      - value: "`Twig\\Loader\\ChainLoader` and `Twig\\Extension\\CoreExtension`"
        correct: false
    help: To render templates, you need a Twig loader (like `FilesystemLoader` to
      locate template files) and a `Twig\Environment` instance to manage the
      Twig runtime.
  - question: Which of the following is NOT a valid way to configure Twig template
      paths in Symfony?
    answers:
      - value: Using `config/packages/twig.yaml` with the `paths` key.
        correct: false
      - value: Using `config/packages/twig.xml` with `<twig:path>` elements.
        correct: false
      - value: Using `config/packages/twig.php` with `$twig->path()` calls.
        correct: false
      - value: Directly modifying the `Twig\Environment` object in a service definition
          with `setPaths()`.
        correct: true
    help: While you can technically manipulate the `Twig\Environment` directly, the
      recommended and standard way to configure Twig paths in Symfony is through
      the framework's configuration files (YAML, XML, PHP) in
      `config/packages/twig.(yaml|xml|php)`.
  - question: You want to render a form collection in Twig, specifically iterating
      over `form.tags` to display each tag's name. Which Twig function is
      typically used to render individual form fields within a loop?
    answers:
      - value: "`{{ form_widget(tag.name) }}`"
        correct: false
      - value: "`{{ form_row(tag.name) }}`"
        correct: true
      - value: "`{{ form_label(tag.name) }}`"
        correct: false
      - value: "`{{ form_errors(tag.name) }}`"
        correct: false
    help: The `form_row()` function renders the label, errors, and widget for a form
      field, making it convenient for rendering individual fields in loops.
  - question: "What is the purpose of the `#[Template(block: 'price_block')]`
      attribute in a Symfony controller method, introduced in Symfony 7.2?"
    answers:
      - value: It renders the entire template and highlights the `price_block` for
          debugging.
        correct: false
      - value: It specifies that only the content of the `price_block` from the
          associated template should be rendered.
        correct: true
      - value: It injects a service named `price_block` into the controller.
        correct: false
      - value: It defines a new Twig block named `price_block` in the controller.
        correct: false
    help: The `block` argument in the `#[Template]` attribute allows you to specify
      that only a particular block from the template should be rendered,
      returning its content as the response.
  - question: Which of the following is a valid way to render a Twig template from a
      Symfony service by injecting the Twig environment?
    answers:
      - value: |-
          ```php
          use Twig\Environment;
          class MyService
          {
              public function __construct(private Environment $twig) {}
              public function renderTemplate(): string
              {
                  return $this->twig->render('template.html.twig', []);
              }
          }
          ```
        correct: true
      - value: |-
          ```php
          use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
          class MyService extends AbstractController
          {
              public function renderTemplate(): string
              {
                  return $this->renderView('template.html.twig', []);
              }
          }
          ```
        correct: false
      - value: |-
          ```php
          class MyService
          {
              public function renderTemplate(): string
              {
                  return twig_render('template.html.twig', []);
              }
          }
          ```
        correct: false
      - value: |-
          ```php
          use Twig\Environment;
          class MyService
          {
              public function __construct(private Environment $twig) {}
              public function renderTemplate(): string
              {
                  return $this->twig->load('template.html.twig')->render([]);
              }
          }
          ```
        correct: false
    help: To render Twig templates in a Symfony service, you should inject the
      `Twig\Environment` service and then use its `render()` method.
  - question: When using the `trans` filter or tag, how can you specify a different
      translation domain for a specific translation?
    answers:
      - value: "`{{ 'message'|trans(domain='my_domain') }}`"
        correct: true
      - value: "`{{ 'message'|trans_domain('my_domain') }}`"
        correct: false
      - value: "`{% trans from 'my_domain' %}message{% endtrans %}`"
        correct: true
      - value: "`{{ 'message'|trans(options={domain: 'my_domain'}) }}`"
        correct: false
    help: The `trans` filter and tag both support a `domain` argument to specify the
      translation domain. For the filter, it's `(domain='my_domain')`, and for
      the tag, it's `from 'my_domain'`.
  - question: Which of the following is the correct way to access the current
      application's debug status via the `app` global variable in Twig?
    answers:
      - value: "`{{ app.debug }}`"
        correct: true
      - value: "`{{ app.is_debug }}`"
        correct: false
      - value: "`{{ app.getDebug() }}`"
        correct: false
      - value: "`{{ app.env.debug }}`"
        correct: false
    help: The `app.debug` property provides a boolean indicating whether the
      application is running in debug mode.
  - question: You have a collection of `articles` and want to display their titles
      as links, using the `path()` function for URL generation. Which Twig
      snippet correctly achieves this?
    answers:
      - value: |-
          ```twig
          {% for article in articles %}
              <a href="{{ path('blog_show', {slug: article.slug}) }}">
                  {{ article.title }}
              </a>
          {% endfor %}
          ```
        correct: true
      - value: |-
          ```twig
          {% for article in articles %}
              <a href="{{ route('blog_show', {slug: article.slug}) }}">
                  {{ article.title }}
              </a>
          {% endfor %}
          ```
        correct: false
      - value: |-
          ```twig
          {% for article in articles %}
              <a href="{{ url('blog_show', {slug: article.slug}) }}">
                  {{ article.title }}
              </a>
          {% endfor %}
          ```
        correct: false
      - value: |-
          ```twig
          {% for article in articles %}
              <a href="{{ article.url }}">
                  {{ article.title }}
              </a>
          {% endfor %}
          ```
        correct: false
    help: The `{% for %}` loop iterates over the `articles` collection, and `path()`
      is used within the loop to generate a URL for each article based on its
      `slug`.
  - question: Which of the following `composer` commands is used to install the Twig
      templating engine and its integration with Symfony?
    answers:
      - value: "`composer require twig/twig`"
        correct: false
      - value: "`composer install twig`"
        correct: false
      - value: "`composer require symfony/twig-bundle`"
        correct: true
      - value: "`composer add twig`"
        correct: false
    help: The `symfony/twig-bundle` package provides the necessary integration of
      Twig with the Symfony framework, including services and configuration.
  - question: You have a variable `user_first_name` and an array `notifications`.
      How would you display 'Hello [user_first_name]! You have
      [number_of_notifications] new notifications.' in Twig?
    answers:
      - value: "`<h1>Hello {{ user_first_name }}!</h1><p>You have {{
          notifications|length }} new notifications.</p>`"
        correct: true
      - value: "`<h1>Hello {{ user_first_name }}!</h1><p>You have {{
          count(notifications) }} new notifications.</p>`"
        correct: false
      - value: "`<h1>Hello {{ user_first_name }}!</h1><p>You have {{ notifications.size
          }} new notifications.</p>`"
        correct: false
      - value: "`<h1>Hello {{ user_first_name }}!</h1><p>You have {{
          notifications.count() }} new notifications.</p>`"
        correct: false
    help: This demonstrates basic variable output and the use of the `length` filter
      to get the count of items in an array.
  - question: What is the primary purpose of the `FactoryRuntimeLoader` when
      configuring Twig for Symfony Form rendering outside of a full-stack
      application?
    answers:
      - value: To load Twig extensions dynamically.
        correct: false
      - value: To provide a way to lazily load runtime objects, such as `FormRenderer`,
          when they are needed by Twig.
        correct: true
      - value: To define custom Twig functions and filters.
        correct: false
      - value: To manage the caching of compiled Twig templates.
        correct: false
    help: The `FactoryRuntimeLoader` allows you to define a factory function that
      will be called to create a runtime object (like `FormRenderer`) only when
      Twig actually needs it, improving performance.
  - question: Which PHP class is specifically designed to create an email message
      whose content is rendered from a Twig template?
    answers:
      - value: "`Symfony\\Component\\Mailer\\Bridge\\Twig\\Mime\\TemplatedEmail`"
        correct: false
      - value: "`Symfony\\Bridge\\Twig\\Mime\\TemplatedEmail`"
        correct: true
      - value: "`Symfony\\Component\\Mime\\Email`"
        correct: false
      - value: "`Symfony\\Bundle\\TwigBundle\\Mime\\TemplatedEmail`"
        correct: false
    help: The `TemplatedEmail` class from `Symfony\Bridge\Twig\Mime` extends the
      basic `Email` class and adds methods for specifying Twig templates and
      context for email rendering.
  - question: You want to display a message with pluralization based on a `count`
      variable (e.g., '1 item' vs 'N items'). Which `trans` tag feature would
      you use?
    answers:
      - value: "`{% transchoice count %}...{% endtranschoice %}`"
        correct: true
      - value: "`{% trans with plural %}...{% endtrans %}`"
        correct: false
      - value: "`{{ 'message'|trans_plural(count) }}`"
        correct: false
      - value: "`{% plural count %}...{% endplural %}`"
        correct: false
    help: The `transchoice` tag is used for pluralization, allowing you to define
      different translation forms based on a given number.
  - question: What is the primary purpose of the `app.debug` global variable in Twig?
    answers:
      - value: To enable or disable Twig's caching mechanism.
        correct: false
      - value: To determine if the application is running in debug mode, allowing for
          conditional display of debugging information.
        correct: true
      - value: To control the level of error reporting in Twig templates.
        correct: false
      - value: To activate the Symfony Profiler for the current request.
        correct: false
    help: The `app.debug` variable is a boolean that reflects the `kernel.debug`
      parameter, useful for showing or hiding debugging elements in templates.
  - question: Which of the following is a valid way to access the current request
      method (e.g., 'GET', 'POST') using the `app` global variable in Twig?
    answers:
      - value: "`{{ app.request.method }}`"
        correct: true
      - value: "`{{ app.request.getMethod() }}`"
        correct: false
      - value: "`{{ app.request.type }}`"
        correct: false
      - value: "`{{ app.method }}`"
        correct: false
    help: The `app.request` object provides access to properties of the current HTTP
      request, including `method`.
  - question: You want to configure an additional directory `backend/templates` and
      assign it the namespace `admin` in Twig. Which YAML configuration is
      correct?
    answers:
      - value: |-
          ```yaml
          twig:
              paths:
                  'backend/templates': admin
          ```
        correct: true
      - value: |-
          ```yaml
          twig:
              namespaces:
                  admin: 'backend/templates'
          ```
        correct: false
      - value: |-
          ```yaml
          twig:
              template_dirs:
                  admin: 'backend/templates'
          ```
        correct: false
      - value: |-
          ```yaml
          twig:
              admin_path: 'backend/templates'
          ```
        correct: false
    help: To define a Twig namespace for a custom template path, you specify the
      directory and then the desired namespace as its value under the `paths`
      key in `twig.yaml`.
  - question: What is the primary purpose of the `lint:twig` Symfony console command?
    answers:
      - value: To optimize Twig template performance.
        correct: false
      - value: To check Twig templates for syntax errors and deprecations.
        correct: true
      - value: To generate Twig template boilerplate code.
        correct: false
      - value: To clear the Twig cache.
        correct: false
    help: The `lint:twig` command is a crucial tool for developers to ensure their
      Twig templates are syntactically correct and to identify any deprecated
      features being used.
  - question: "When configuring Twig, what is the significance of setting
      `default_path: '%kernel.project_dir%/resources/views'`?"
    answers:
      - value: It defines an additional path for Twig to search for templates.
        correct: false
      - value: It overrides the default `templates/` directory as the primary location
          for Twig templates.
        correct: true
      - value: It sets the path for Twig's cache directory.
        correct: false
      - value: It specifies the location of Twig extensions.
        correct: false
    help: The `default_path` option in Twig configuration allows you to change the
      root directory where Twig looks for templates by default, moving it from
      `templates/` to a custom location.
