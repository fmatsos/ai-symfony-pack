category: Templating with Twig
questions:
  - question: What is the correct Twig syntax to display the value of a variable
      named `productName`?
    answers:
      - value: "{{ productName }}"
        correct: true
      - value: "{% productName %}"
        correct: false
      - value: <?php echo $productName; ?>
        correct: false
      - value: "[[ productName ]]"
        correct: false
    help: Twig uses `{{ ... }}` to print the content of a variable or the result of
      an expression.
      https://symfony.com/doc/current/templates.html#basic-twig-template
  - question: How do you add a single-line comment in a Twig template?
    answers:
      - value: "{# This is a comment #}"
        correct: true
      - value: // This is a comment
        correct: false
      - value: <!-- This is a comment -->
        correct: false
      - value: /* This is a comment */
        correct: false
    help: "Twig comments are denoted by `{# ... #}` and are not included in the
      rendered output.
      https://symfony.com/doc/current/templates.html#basic-twig-template"
  - question: Given a `base.html.twig` file, what is the correct Twig tag to make a
      child template inherit from it?
    answers:
      - value: "{% extends 'base.html.twig' %}"
        correct: true
      - value: "{% import 'base.html.twig' %}"
        correct: false
      - value: "{% include 'base.html.twig' %}"
        correct: false
      - value: "{% use 'base.html.twig' %}"
        correct: false
    help: The `{% extends %}` tag is used to specify a parent template from which
      the current template inherits.
      https://symfony.com/doc/current/templates.html#template-inheritance
  - question: In Twig template inheritance, what happens if you place content
      outside of a `{% block %}` tag in a child template that extends a parent
      template?
    answers:
      - value: It will result in a `SyntaxError` during template rendering.
        correct: true
      - value: The content will be rendered at the very top of the page, before any
          blocks.
        correct: false
      - value: The content will be ignored and not rendered.
        correct: false
      - value: The content will be appended to the end of the `body` block.
        correct: false
    help: When extending a parent template, all content in the child template must
      be enclosed within `block` tags to ensure a structured inheritance model.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/templates.rst#_snippet_48
  - question: Which `app` global variable property in Twig provides access to the
      current authenticated user object?
    answers:
      - value: app.user
        correct: true
      - value: app.security.user
        correct: false
      - value: app.current_user
        correct: false
      - value: app.token.user
        correct: false
    help: The `app.user` property of the `app` global variable provides access to
      the current user object, or `null` if the user is not authenticated.
      https://symfony.com/doc/current/templates.html#the-app-global-variable
  - question: You want to display different content in your Twig template based on
      the current Symfony environment (e.g., `dev` or `prod`). Which `app`
      global variable property should you use?
    answers:
      - value: app.environment
        correct: true
      - value: app.env
        correct: false
      - value: app.debug
        correct: false
      - value: app.kernel.environment
        correct: false
    help: The `app.environment` property returns the name of the current
      configuration environment (e.g., `dev`, `prod`).
      https://symfony.com/doc/current/templates.html#the-app-global-variable
  - question: How would you apply the `upper` filter to a variable named `pageTitle`
      in Twig?
    answers:
      - value: "{{ pageTitle|upper }}"
        correct: true
      - value: "{{ upper(pageTitle) }}"
        correct: false
      - value: "{{ pageTitle.upper() }}"
        correct: false
      - value: "{% filter upper %}{{ pageTitle }}{% endfilter %}"
        correct: false
    help: Twig filters are applied using the pipe (`|`) symbol. The `upper` filter
      converts the string to uppercase.
      https://symfony.com/doc/current/templates.html#applying-filters
  - question: You have a custom Twig filter named `currency` that takes the symbol
      and precision as arguments. How would you apply this filter to a `price`
      variable, displaying it with 2 decimal places and a '$' symbol?
    answers:
      - value: "{{ price|currency(2, '$') }}"
        correct: true
      - value: "{{ price|currency:2,'$' }}"
        correct: false
      - value: "{{ currency(price, 2, '$') }}"
        correct: false
      - value: "{{ price|currency(precision=2, symbol='$') }}"
        correct: false
    help: Filters can accept arguments, which are passed in parentheses after the
      filter name, separated by commas.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/templates.rst#_snippet_53
  - question: What is the purpose of the `path()` Twig function?
    answers:
      - value: To generate relative URLs based on Symfony routing configuration.
        correct: true
      - value: To generate absolute URLs for static assets.
        correct: false
      - value: To include the content of another template file.
        correct: false
      - value: To execute a controller action and embed its output.
        correct: false
    help: The `path()` Twig function generates relative URLs based on the Symfony
      routing configuration.
      https://symfony.com/doc/current/templates.html#linking-to-pages
  - question: Given a Symfony route named `product_show` that requires a `slug`
      parameter, how would you generate a URL for a product with `product.slug`
      in Twig?
    answers:
      - value: "{{ path('product_show', {slug: product.slug}) }}"
        correct: true
      - value: "{{ path('product_show', product.slug) }}"
        correct: false
      - value: "{{ url('product_show', {slug: product.slug}) }}"
        correct: false
      - value: "{{ route('product_show', {slug: product.slug}) }}"
        correct: false
    help: The `path()` function takes the route name as the first argument and an
      associative array of parameters as the second argument.
      https://symfony.com/doc/current/templates.html#linking-to-pages
  - question: How do you include a Twig template fragment named `_header.html.twig`
      into another template?
    answers:
      - value: "{{ include('header.html.twig') }}"
        correct: true
      - value: "{% include 'header.html.twig' %}"
        correct: true
      - value: "{% embed 'header.html.twig' %}"
        correct: false
      - value: "{{ render('header.html.twig') }}"
        correct: false
    help: The `include` function (or tag) is used to include a template and render
      its contents. The `_` prefix is a common convention for partials but not
      strictly required by Twig.
      https://symfony.com/doc/current/templates.html#including-templates
  - question: You want to include `_user_card.html.twig` and pass a variable
      `currentUser` to it, but the included template expects a variable named
      `user`. How would you do this?
    answers:
      - value: "{{ include('user_card.html.twig', {user: currentUser}) }}"
        correct: true
      - value: "{{ include('user_card.html.twig', currentUser as user) }}"
        correct: false
      - value: "{% include 'user_card.html.twig' with {user: currentUser} %}"
        correct: true
      - value: "{% include 'user_card.html.twig' using {user: currentUser} %}"
        correct: false
    help: You can pass variables to an included template as an associative array,
      where the key is the variable name in the included template and the value
      is the variable from the parent template.
      https://symfony.com/doc/current/templates.html#passing-variables-to-included-templates
  - question: You have an array `items` in your Twig template. How do you iterate
      over this array to display each item's `name` property?
    answers:
      - value: |-
          {% for item in items %}
              {{ item.name }}
          {% endfor %}
        correct: true
      - value: |-
          {% foreach items as item %}
              {{ item.name }}
          {% endforeach %}
        correct: false
      - value: |-
          {% loop item in items %}
              {{ item.name }}
          {% endloop %}
        correct: false
      - value: "{{ items|map(item => item.name)|join(', ') }}"
        correct: false
    help: The `{% for %}` tag is used to iterate over arrays or traversable objects
      in Twig. https://symfony.com/doc/current/templates.html#loops
  - question: How would you display "Welcome Admin!" if a `user` object has an
      `isAdmin` property that is true, otherwise display "Welcome User!"?
    answers:
      - value: |-
          {% if user.isAdmin %}
              Welcome Admin!
          {% else %}
              Welcome User!
          {% endif %}
        correct: true
      - value: |-
          {% if user.isAdmin == true %}
              Welcome Admin!
          {% else %}
              Welcome User!
          {% endif %}
        correct: false
      - value: "{{ user.isAdmin ? 'Welcome Admin!' : 'Welcome User!' }}"
        correct: true
      - value: |-
          {% switch user.isAdmin %}
              {% case true %}Welcome Admin!
              {% default %}Welcome User!
          {% endswitch %}
        correct: false
    help: Twig supports standard `if`, `else`, and `elseif` conditional statements.
      The ternary operator `?:` can also be used for simple conditions.
      https://symfony.com/doc/current/templates.html#conditionals
  - question: You have a variable `htmlContent` that contains trusted HTML and you
      want to render it without Twig escaping it. Which filter should you use?
    answers:
      - value: "|raw"
        correct: true
      - value: "|unescape"
        correct: false
      - value: "|html_decode"
        correct: false
      - value: "|safe"
        correct: false
    help: The `raw` filter explicitly marks a value as 'safe' and prevents Twig's
      auto-escaping from modifying it. Use with caution to avoid XSS
      vulnerabilities.
      https://symfony.com/doc/current/templates.html#output-escaping
  - question: In a Symfony controller extending `AbstractController`, which method
      is used to render a Twig template and return a `Response` object?
    answers:
      - value: render()
        correct: true
      - value: renderView()
        correct: false
      - value: display()
        correct: false
      - value: show()
        correct: false
    help: The `render()` method is the most common way to render a Twig template
      from a controller and automatically wrap its content in a `Response`
      object.
      https://symfony.com/doc/current/templates.html#rendering-templates-in-controllers
  - question: Which method in `AbstractController` would you use if you need to
      render a Twig template's content as a string, without directly creating a
      `Response` object?
    answers:
      - value: renderView()
        correct: true
      - value: render()
        correct: false
      - value: getContent()
        correct: false
      - value: generateHtml()
        correct: false
    help: The `renderView()` method returns the rendered content of a Twig template
      as a string, allowing you to manipulate it further before creating a
      `Response`.
      https://symfony.com/doc/current/templates.html#rendering-templates-in-controllers
  - question: When using the `#[Template]` attribute on a controller method, what
      should the controller method return?
    answers:
      - value: An array with the parameters to pass to the template.
        correct: true
      - value: A `Response` object.
        correct: false
      - value: A string containing the rendered HTML.
        correct: false
      - value: Nothing (void).
        correct: false
    help: The `#[Template]` attribute automatically handles the creation of the
      `Response` object; the controller method only needs to provide the
      template parameters.
      https://symfony.com/doc/current/templates.html#the-template-attribute
  - question: How can you embed the output of another Symfony controller (e.g.,
      `App\Controller\WidgetController::latestPosts`) directly into a Twig
      template?
    answers:
      - value: "{{
          render(controller('App\\\\Controller\\\\WidgetController::latestPosts\
          ')) }}"
        correct: true
      - value: "{% embed
          controller('App\\\\Controller\\\\WidgetController::latestPosts') %}"
        correct: false
      - value: "{{
          include(controller('App\\\\Controller\\\\WidgetController::latestPost\
          s')) }}"
        correct: false
      - value: "{{ render(path('widget_latest_posts')) }}"
        correct: true
    help: The `render()` Twig function can embed the output of a controller, either
      by direct controller reference or by referencing a route that maps to a
      controller.
      https://symfony.com/doc/current/templates.html#embedding-controllers
  - question: For rendering a static Twig template directly from a route definition
      without a custom controller, which built-in Symfony controller can be
      used?
    answers:
      - value: Symfony\Bundle\FrameworkBundle\Controller\TemplateController
        correct: true
      - value: Symfony\Bundle\FrameworkBundle\Controller\AssetController
        correct: false
      - value: Symfony\Bundle\FrameworkBundle\Controller\RedirectController
        correct: false
      - value: Symfony\Bundle\FrameworkBundle\Controller\ErrorController
        correct: false
    help: The `TemplateController` is a special built-in controller designed for
      rendering static Twig templates directly from route configurations.
      https://symfony.com/doc/current/templates.html#rendering-a-template-directly-from-a-route
  - question: How do you mark a simple string "Hello World" for translation in a
      Twig template using the `trans` filter?
    answers:
      - value: "{{ 'Hello World'|trans }}"
        correct: true
      - value: "{% trans %}Hello World{% endtrans %}"
        correct: false
      - value: "{{ translate('Hello World') }}"
        correct: false
      - value: "{{ 'Hello World'|t }}"
        correct: false
    help: The `trans` filter is used to translate inline strings in Twig templates.
      https://symfony.com/doc/current/translation.html#translating-messages
  - question: How do you mark a block of text "Welcome to our site!" for translation
      using the `trans` tag?
    answers:
      - value: "{% trans %}Welcome to our site!{% endtrans %}"
        correct: true
      - value: "{{ 'Welcome to our site!'|trans }}"
        correct: false
      - value: "{% translate %}Welcome to our site!{% endtranslate %}"
        correct: false
      - value: <trans>Welcome to our site!</trans>
        correct: false
    help: The `trans` tag is used for translating blocks of text, especially when
      they contain placeholders or more complex structures.
      https://symfony.com/doc/current/translation.html#translating-messages
  - question: You want to translate "Hello %name%" and pass the `userName` variable
      as the placeholder. How would you do this using the `trans` tag?
    answers:
      - value: "{% trans with {'%name%': userName} %}Hello %name%{% endtrans %}"
        correct: true
      - value: "{% trans %}Hello {{ userName }}{% endtrans %}"
        correct: false
      - value: "{{ 'Hello %name%'|trans({'%name%': userName}) }}"
        correct: true
      - value: "{% trans name=userName %}Hello %name%{% endtrans %}"
        correct: false
    help: Placeholders in `trans` tags are defined using the `with` keyword, passing
      an associative array where keys match the placeholders (including `%`).
      https://symfony.com/doc/current/translation.html#placeholders
  - question: How do you set the default translation domain to `app` for an entire
      Twig template?
    answers:
      - value: "{% trans_default_domain 'app' %}"
        correct: true
      - value: "{% default_domain 'app' %}"
        correct: false
      - value: "{% set_translation_domain 'app' %}"
        correct: false
      - value: app.translation_domain = 'app'
        correct: false
    help: The `trans_default_domain` tag sets the default translation domain for all
      subsequent `trans` tags and filters within that template.
      https://symfony.com/doc/current/translation.html#translation-domains
  - question: You have an image located at `public/images/logo.png`. How would you
      generate its URL in a Twig template using the `asset()` function?
    answers:
      - value: <img src="{{ asset('images/logo.png') }}" />
        correct: true
      - value: <img src="{{ url('images/logo.png') }}" />
        correct: false
      - value: <img src="{{ public('images/logo.png') }}" />
        correct: false
      - value: <img src="{{ path('images/logo.png') }}" />
        correct: false
    help: The `asset()` Twig function generates public URLs for your assets,
      automatically handling the base path of your application.
      https://symfony.com/doc/current/templates.html#linking-to-assets
  - question: How would you generate a fully qualified (absolute) URL for an asset,
      such as `images/background.jpg`, in a Twig template?
    answers:
      - value: "{{ absolute_url(asset('images/background.jpg')) }}"
        correct: true
      - value: "{{ asset_url('images/background.jpg') }}"
        correct: false
      - value: "{{ url('images/background.jpg', true) }}"
        correct: false
      - value: "{{ absolute_path('images/background.jpg') }}"
        correct: false
    help: The `absolute_url()` Twig function converts a relative URL into a fully
      qualified URL, including the scheme and host. It's often used in
      conjunction with `asset()`.
      https://symfony.com/doc/current/templates.html#linking-to-assets
  - question: Which Twig helper function is used to include the compiled CSS entry
      points generated by Symfony Encore (e.g., for the `app` entry)?
    answers:
      - value: encore_entry_link_tags('app')
        correct: true
      - value: webpack_entry_css('app')
        correct: false
      - value: asset_css('app')
        correct: false
      - value: include_css_entry('app')
        correct: false
    help: The `encore_entry_link_tags()` function, provided by WebpackEncoreBundle,
      renders the `<link>` tags for CSS assets defined as entry points in
      Webpack Encore.
      https://symfony.com/doc/current/frontend/encore/simple-example.html#including-assets-in-twig
  - question: Which Twig helper function is used to include the compiled JavaScript
      entry points generated by Symfony Encore (e.g., for the `app` entry)?
    answers:
      - value: encore_entry_script_tags('app')
        correct: true
      - value: webpack_entry_js('app')
        correct: false
      - value: asset_js('app')
        correct: false
      - value: include_js_entry('app')
        correct: false
    help: The `encore_entry_script_tags()` function, provided by
      WebpackEncoreBundle, renders the `<script>` tags for JavaScript assets
      defined as entry points in Webpack Encore.
      https://symfony.com/doc/current/frontend/encore/simple-example.html#including-assets-in-twig
  - question: How do you dump the contents of a variable `userData` directly into
      the rendered HTML page for debugging purposes in Twig?
    answers:
      - value: "{{ dump(userData) }}"
        correct: true
      - value: "{% dump userData %}"
        correct: false
      - value: "{{ var_dump(userData) }}"
        correct: false
      - value: "{# dump userData #}"
        correct: false
    help: The `{{ dump() }}` function outputs the variable's contents directly into
      the HTML. The `{% dump %}` tag sends it to the Web Debug Toolbar.
      https://symfony.com/doc/current/templates.html#dumping-variables
  - question: You want to dump a variable `debugInfo` to the Symfony Web Debug
      Toolbar without affecting the rendered HTML. Which Twig tag should you
      use?
    answers:
      - value: "{% dump debugInfo %}"
        correct: true
      - value: "{{ dump(debugInfo) }}"
        correct: false
      - value: "{# debugInfo #}"
        correct: false
      - value: "{% debug debugInfo %}"
        correct: false
    help: The `{% dump %}` tag sends the variable's contents to the Web Debug
      Toolbar, making it useful for debugging without altering the page's
      layout. https://symfony.com/doc/current/templates.html#dumping-variables
  - question: Which Symfony console command can you use to lint Twig templates for
      syntax errors?
    answers:
      - value: php bin/console lint:twig
        correct: true
      - value: php bin/console twig:lint
        correct: false
      - value: php bin/console debug:twig:lint
        correct: false
      - value: php bin/console validate:twig
        correct: false
    help: The `lint:twig` command checks Twig templates for syntax errors. You can
      specify directories or individual files.
      https://symfony.com/doc/current/templates.html#debugging-twig
  - question: Which Symfony console command allows you to inspect registered Twig
      extensions, functions, filters, and global variables?
    answers:
      - value: php bin/console debug:twig
        correct: true
      - value: php bin/console twig:debug
        correct: false
      - value: php bin/console list:twig
        correct: false
      - value: php bin/console show:twig
        correct: false
    help: The `debug:twig` command provides detailed information about the Twig
      environment, including all available filters, functions, tags, and global
      variables. https://symfony.com/doc/current/templates.html#debugging-twig
  - question: What is the effect of setting the `strict_variables` option to `true`
      in your Twig configuration (`twig.yaml`)?
    answers:
      - value: Symfony will throw a `Twig\Error\RuntimeError` exception if a Twig
          variable, attribute, or method doesn't exist.
        correct: true
      - value: Non-existing variables will be replaced by an empty string instead of
          `null`.
        correct: false
      - value: Twig will automatically escape all variables, even if the `raw` filter is
          used.
        correct: false
      - value: It disables all Twig optimizations for easier debugging.
        correct: false
    help: When `strict_variables` is `true`, Twig will throw an exception for
      non-existent variables, attributes, or methods, making it easier to catch
      typos or logic errors. By default, it's `false` in production and `true`
      in debug mode.
      https://symfony.com/doc/current/reference/configuration/twig.html#strict-variables
  - question: Where does Symfony typically cache compiled Twig templates by default?
    answers:
      - value: "%kernel.cache_dir%/twig"
        correct: true
      - value: var/cache/twig
        correct: false
      - value: app/cache/twig
        correct: false
      - value: templates/cache
        correct: false
    help: The default cache directory for compiled Twig templates is
      `%kernel.cache_dir%/twig`.
      https://symfony.com/doc/current/reference/configuration/twig.html#cache
  - question: How can you configure additional directories for Twig to look for
      templates, besides the default `templates/` directory, using YAML
      configuration?
    answers:
      - value: |-
          twig:
              paths:
                  'email/default/templates': ~
        correct: true
      - value: |-
          twig:
              template_dirs:
                  - 'email/default/templates'
        correct: false
      - value: |-
          twig:
              directories:
                  email: 'email/default/templates'
        correct: false
      - value: |-
          twig:
              add_path: 'email/default/templates'
        correct: false
    help: The `twig.paths` configuration option allows you to define additional
      directories where Twig should look for templates. The `~` indicates no
      namespace. https://symfony.com/doc/current/templates.html#template-paths
  - question: How do you configure a Twig template path with a specific namespace
      (e.g., `backend/templates` mapped to `@Admin`) in `twig.yaml`?
    answers:
      - value: |-
          twig:
              paths:
                  'backend/templates': 'admin'
        correct: true
      - value: |-
          twig:
              namespaces:
                  admin: 'backend/templates'
        correct: false
      - value: |-
          twig:
              template_paths:
                  admin: 'backend/templates'
        correct: false
      - value: |-
          twig:
              path_aliases:
                  '@Admin': 'backend/templates'
        correct: false
    help: You can map a directory to a Twig namespace by specifying the namespace as
      the value for the path entry in `twig.paths`. Templates can then be
      referenced as `@Admin/template.html.twig`.
      https://symfony.com/doc/current/templates.html#template-paths
  - question: When creating a custom Twig extension, which method should you
      implement to register new filters?
    answers:
      - value: getFilters()
        correct: true
      - value: registerFilters()
        correct: false
      - value: defineFilters()
        correct: false
      - value: getTwigFilters()
        correct: false
    help: Custom Twig extensions extend `AbstractExtension` and implement the
      `getFilters()` method to return an array of `TwigFilter` objects.
      https://symfony.com/doc/current/templates.html#creating-your-own-twig-extensions
  - question: When creating a custom Twig extension, which method should you
      implement to register new functions?
    answers:
      - value: getFunctions()
        correct: true
      - value: registerFunctions()
        correct: false
      - value: defineFunctions()
        correct: false
      - value: getTwigFunctions()
        correct: false
    help: Custom Twig extensions extend `AbstractExtension` and implement the
      `getFunctions()` method to return an array of `TwigFunction` objects.
      https://symfony.com/doc/current/templates.html#creating-your-own-twig-extensions
  - question: What is the purpose of the `form_start(form)` Twig helper function
      when rendering a Symfony form?
    answers:
      - value: It renders the opening `<form>` tag, including `action`, `method`, and
          `enctype` attributes.
        correct: true
      - value: It renders all fields of the form.
        correct: false
      - value: It renders only the CSRF token for the form.
        correct: false
      - value: It initializes the form object in the template.
        correct: false
    help: The `form_start()` helper function is responsible for rendering the
      opening HTML `<form>` tag with all necessary attributes.
      https://symfony.com/doc/current/forms.html#rendering-a-form-in-a-template
  - question: Which Twig helper function renders all visible fields of a Symfony
      form, including labels and error messages?
    answers:
      - value: form_widget(form)
        correct: true
      - value: form_row(form)
        correct: false
      - value: form_fields(form)
        correct: false
      - value: form_all(form)
        correct: false
    help: The `form_widget()` helper function renders the HTML widget for a form
      field. When applied to the root form, it renders all its children.
      https://symfony.com/doc/current/forms.html#rendering-a-form-in-a-template
  - question: What does the `form_end(form)` Twig helper function render?
    answers:
      - value: The closing `</form>` tag and any remaining unrendered fields (like CSRF
          token).
        correct: true
      - value: Only the closing `</form>` tag.
        correct: false
      - value: A submit button for the form.
        correct: false
      - value: Any validation errors for the form.
        correct: false
    help: The `form_end()` helper function renders the closing `</form>` tag and any
      form fields that haven't been explicitly rendered (e.g., the CSRF token).
      https://symfony.com/doc/current/forms.html#rendering-a-form-in-a-template
  - question: How do you apply a specific form theme (e.g.,
      `bootstrap_5_layout.html.twig`) to a form within a single Twig template?
    answers:
      - value: "{% form_theme form 'bootstrap_5_layout.html.twig' %}"
        correct: true
      - value: "{{ form.setTheme('bootstrap_5_layout.html.twig') }}"
        correct: false
      - value: "{% use 'bootstrap_5_layout.html.twig' for form %}"
        correct: false
      - value: "{% include 'bootstrap_5_layout.html.twig' with {form: form} %}"
        correct: false
    help: The `{% form_theme %}` tag allows you to apply a specific form theme to
      forms rendered within the current template.
      https://symfony.com/doc/current/form/form_themes.html
  - question: To make a Symfony service `App\Service\UuidGenerator` available as a
      global Twig variable named `uuid`, how would you configure it in
      `twig.yaml`?
    answers:
      - value: |-
          twig:
              globals:
                  uuid: '@App\\Service\\UuidGenerator'
        correct: true
      - value: |-
          twig:
              services:
                  uuid: App\\Service\\UuidGenerator
        correct: false
      - value: |-
          twig:
              global_services:
                  uuid: App\\Service\\UuidGenerator
        correct: false
      - value: |-
          twig:
              variables:
                  uuid: service('App\\Service\\UuidGenerator')
        correct: false
    help: Services can be exposed as global Twig variables by referencing their
      service ID (prefixed with `@`) under the `twig.globals` configuration.
      https://symfony.com/doc/current/templates.html#global-variables
  - question: How would you configure a static global variable `ga_tracking` with
      the value `UA-xxxxx-x` in `twig.yaml` so it's available in all Twig
      templates?
    answers:
      - value: |-
          twig:
              globals:
                  ga_tracking: 'UA-xxxxx-x'
        correct: true
      - value: |-
          twig:
              parameters:
                  ga_tracking: 'UA-xxxxx-x'
        correct: false
      - value: |-
          twig:
              variables:
                  ga_tracking: 'UA-xxxxx-x'
        correct: false
      - value: |-
          twig:
              static_globals:
                  ga_tracking: 'UA-xxxxx-x'
        correct: false
    help: Static values can be defined as global Twig variables directly under the
      `twig.globals` configuration.
      https://symfony.com/doc/current/templates.html#global-variables
  - question: Which property of the `app` global variable provides access to the
      current `Request` object in a Twig template?
    answers:
      - value: app.request
        correct: true
      - value: app.http_request
        correct: false
      - value: app.current_request
        correct: false
      - value: app.get_request()
        correct: false
    help: The `app.request` property holds the
      `Symfony\Component\HttpFoundation\Request` object for the current request.
      https://symfony.com/doc/current/templates.html#the-app-global-variable
  - question: How do you display all flash messages of type `notice` in a Twig template?
    answers:
      - value: |-
          {% for message in app.flashes('notice') %}
              <div class="flash-notice">{{ message }}</div>
          {% endfor %}
        correct: true
      - value: "{{ app.session.flash('notice') }}"
        correct: false
      - value: |-
          {% for message in app.session.getFlashes('notice') %}
              <div class="flash-notice">{{ message }}</div>
          {% endfor %}
        correct: false
      - value: "{{ app.flashes.notice|join('\\n') }}"
        correct: false
    help: The `app.flashes` property returns an array of flash messages. You can
      pass a specific type (e.g., 'notice') to filter them.
      https://symfony.com/doc/current/session.html#flash-messages
  - question: How can you get the name of the current route in a Twig template using
      the `app` global variable?
    answers:
      - value: app.current_route
        correct: true
      - value: app.request.attributes.get('_route')
        correct: true
      - value: app.route_name
        correct: false
      - value: app.request.route
        correct: false
    help: The `app.current_route` property provides the name of the route associated
      with the current request. It's equivalent to
      `app.request.attributes.get('_route')`.
      https://symfony.com/doc/current/templates.html#the-app-global-variable
  - question: How can you conditionally render content in a Twig template only when
      Symfony is in debug mode?
    answers:
      - value: |-
          {% if app.debug %}
              Debug content here
          {% endif %}
        correct: true
      - value: |-
          {% if kernel.debug %}
              Debug content here
          {% endif %}
        correct: false
      - value: |-
          {% if app.environment == 'dev' %}
              Debug content here
          {% endif %}
        correct: false
      - value: |-
          {% if is_debug_mode() %}
              Debug content here
          {% endif %}
        correct: false
    help: The `app.debug` property is a boolean indicating whether the application
      is in debug mode.
      https://symfony.com/doc/current/templates.html#the-app-global-variable
  - question: What is the default format string used by the `date` filter in Twig if
      no specific format is provided?
    answers:
      - value: F j, Y H:i
        correct: true
      - value: Y-m-d H:i:s
        correct: false
      - value: d/m/Y H:i
        correct: false
      - value: m/d/Y H:i:s
        correct: false
    help: The default format for the `date` filter is `F j, Y H:i` (e.g., 'January
      1, 2023 15:30'). This can be configured in `twig.yaml`.
      https://symfony.com/doc/current/reference/configuration/twig.html#date
  - question: "When including a template, what does the `only` keyword do (e.g., `{%
      include 'template.html.twig' with { foo: 'bar' } only %}`)?"
    answers:
      - value: It makes sure that only the variables explicitly passed with `with` are
          available in the included template, and no variables from the parent
          context are passed.
        correct: true
      - value: It includes the template only if the `foo` variable is defined.
        correct: false
      - value: It prevents the included template from accessing any global variables.
        correct: false
      - value: It ensures the included template is rendered only once per request.
        correct: false
    help: The `only` keyword ensures that the included template only has access to
      the variables explicitly passed to it, isolating its context from the
      parent template. https://twig.symfony.com/doc/3.x/tags/include.html
  - question: Which of the following is the correct way to access a property `bar`
      on a variable `foo` in Twig, considering Twig's variable resolution order?
    answers:
      - value: "{{ foo.bar }}"
        correct: true
      - value: "{{ foo['bar'] }}"
        correct: true
      - value: "{{ foo->bar }}"
        correct: false
      - value: "{{ foo::bar }}"
        correct: false
    help: Twig's `foo.bar` notation is flexible. It first tries to access
      `foo['bar']` (array key), then `foo->bar` (public property), then
      `foo->bar()` (public method), then `foo->getBar()`, `foo->isBar()`, and
      `foo->hasBar()`. Using `foo['bar']` is also valid for array access.
      https://symfony.com/doc/current/templates.html#accessing-variables
  - question: When overriding a bundle's Twig template (e.g.,
      `AcmeUserBundle/registration/confirmed.html.twig`), what is the purpose of
      the `!` prefix in `{% extends
      "@!AcmeUser/registration/confirmed.html.twig" %}`?
    answers:
      - value: It prevents an infinite loop by ensuring the extension targets the
          original template file, not the overridden one.
        correct: true
      - value: It forces the template to be recompiled every time, ignoring the cache.
        correct: false
      - value: It indicates that the template is deprecated and should be updated.
        correct: false
      - value: It makes the template's blocks final, preventing further overrides.
        correct: false
    help: The `!` prefix is crucial when extending an overridden bundle template to
      avoid infinite loops, ensuring you extend the original bundle's template,
      not your own override.
      https://symfony.com/doc/current/bundles/override.html#overriding-any-part-of-a-bundle
  - question: You need to include a JavaScript file `app.js` and a CSS file
      `app.css` that are managed by Webpack Encore. Which Twig functions would
      you use in your `base.html.twig`?
    answers:
      - value: |-
          {{ encore_entry_link_tags('app') }}
          {{ encore_entry_script_tags('app') }}
        correct: true
      - value: |-
          {{ asset('build/app.css') }}
          {{ asset('build/app.js') }}
        correct: false
      - value: |-
          {% javascripts 'app' %}
          {% stylesheets 'app' %}
        correct: false
      - value: |-
          {{ webpack_entry('app.css') }}
          {{ webpack_entry('app.js') }}
        correct: false
    help: Symfony Encore provides `encore_entry_link_tags()` for CSS and
      `encore_entry_script_tags()` for JavaScript to include compiled assets.
      https://symfony.com/doc/current/frontend/encore/simple-example.html#including-assets-in-twig
  - question: Which Twig filter would you use to convert a string containing
      Markdown syntax into HTML within an email template?
    answers:
      - value: markdown_to_html
        correct: true
      - value: markdown
        correct: false
      - value: to_html
        correct: false
      - value: parse_markdown
        correct: false
    help: The `markdown_to_html` filter is used to convert Markdown formatted text
      into HTML, commonly used in email templating.
      https://symfony.com/doc/current/mailer.html#markdown-content
  - question: When defining a custom Twig filter in a `TwigExtension` class, what is
      the purpose of implementing `RuntimeExtensionInterface` in a separate
      `Runtime` class?
    answers:
      - value: To allow for lazy loading of the filter's dependencies, improving
          performance.
        correct: true
      - value: To enable the filter to be used with the `apply` tag.
        correct: false
      - value: To make the filter available globally without explicit registration.
        correct: false
      - value: To ensure the filter can be used in both Twig and PHP templates.
        correct: false
    help: Separating filter logic into a `RuntimeExtensionInterface` class allows
      Symfony to lazy-load the filter's dependencies only when the filter is
      actually used, optimizing performance.
      https://symfony.com/doc/current/templates.html#lazy-loaded-twig-extensions
  - question: You want to embed a controller's output asynchronously using
      `hinclude.js` in Twig. Which function should you use?
    answers:
      - value: render_hinclude()
        correct: true
      - value: render_async()
        correct: false
      - value: include_async()
        correct: false
      - value: hinclude()
        correct: false
    help: The `render_hinclude()` Twig function is used to embed content
      asynchronously using the `hinclude.js` library.
      https://symfony.com/doc/current/templates.html#asynchronous-content-with-hinclude-js
  - question: To embed content using ESI (Edge Side Includes) in a Twig template,
      which function should you use?
    answers:
      - value: render_esi()
        correct: true
      - value: include_esi()
        correct: false
      - value: esi()
        correct: false
      - value: embed_esi()
        correct: false
    help: The `render_esi()` Twig function generates ESI include tags, allowing
      parts of a page to be cached independently.
      https://symfony.com/doc/current/http_cache/esi.html
  - question: What is the primary benefit of using `render_ssi()` in Twig templates?
    answers:
      - value: It allows embedding content using Server-Side Includes (SSI), which can
          be processed by web servers like Nginx or Apache.
        correct: true
      - value: It enables asynchronous loading of content via JavaScript.
        correct: false
      - value: It provides a fallback mechanism for content that fails to load.
        correct: false
      - value: It renders content directly from a database query.
        correct: false
    help: The `render_ssi()` Twig function generates SSI directives, which are
      processed by the web server to include content. This is useful for
      server-side caching. https://symfony.com/doc/current/http_cache/ssi.html
  - question: You are passing validation errors from a Symfony controller to a Twig
      template. How would you iterate and display each error message in the
      template, assuming `errors` is a collection of error objects with a
      `message` property?
    answers:
      - value: |-
          {% for error in errors %}
              <li>{{ error.message }}</li>
          {% endfor %}
        correct: true
      - value: |-
          {% for message in errors %}
              <li>{{ message }}</li>
          {% endfor %}
        correct: false
      - value: "{{ errors|join(', ') }}"
        correct: false
      - value: |-
          {% if errors is not empty %}
              {{ errors.messages|join('<br>') }}
          {% endif %}
        correct: false
    help: When passing a collection of errors, you can iterate over them using a
      `for` loop and access properties like `message` on each error object.
      https://symfony.com/doc/current/validation.html#displaying-validation-errors
  - question: Which Symfony component needs to be installed to use the `asset()`
      Twig function for managing static assets?
    answers:
      - value: symfony/asset
        correct: true
      - value: symfony/webpack-encore-bundle
        correct: false
      - value: symfony/twig-bundle
        correct: false
      - value: symfony/http-foundation
        correct: false
    help: The `symfony/asset` component provides the `AssetExtension` for Twig,
      which includes the `asset()` function.
      https://symfony.com/doc/current/templates.html#linking-to-assets
  - question: You have a `TemplatedEmail` object in your Symfony Mailer setup. How
      do you specify the Twig template to be used for the email's HTML content?
    answers:
      - value: ->htmlTemplate('emails/signup.html.twig')
        correct: true
      - value: ->template('emails/signup.html.twig')
        correct: false
      - value: ->setTemplate('emails/signup.html.twig')
        correct: false
      - value: ->twigTemplate('emails/signup.html.twig')
        correct: false
    help: The `htmlTemplate()` method of `TemplatedEmail` is used to set the path to
      the Twig template for the email's HTML content.
      https://symfony.com/doc/current/mailer.html#creating-templated-emails
  - question: When embedding an image in a Twig email template using
      `email.image()`, what does `@images/logo.png` refer to?
    answers:
      - value: A Twig namespace configured to point to a directory containing images.
        correct: true
      - value: A public asset path relative to the `public/` directory.
        correct: false
      - value: A route name for an image controller.
        correct: false
      - value: A base64 encoded image string.
        correct: false
    help: The `@` prefix indicates a Twig namespace. When embedding images in
      emails, you often configure a namespace (e.g., `@images`) to simplify
      referencing image files.
      https://symfony.com/doc/current/mailer.html#embedding-images
  - question: What is the default behavior of Twig's `auto_reload` configuration
      option in a Symfony application when `kernel.debug` is true?
    answers:
      - value: It is set to `true`, meaning Symfony checks if template source code has
          changed and recompiles if necessary.
        correct: true
      - value: It is set to `false`, relying on manual cache clearing.
        correct: false
      - value: It is ignored, as templates are always recompiled in debug mode.
        correct: false
      - value: It depends on the `cache` setting.
        correct: false
    help: The `auto_reload` option defaults to `%kernel.debug%`. In debug mode, this
      means Twig automatically reloads templates when their source changes,
      which is convenient for development.
      https://symfony.com/doc/current/reference/configuration/twig.html#auto-reload
  - question: Which of the following describes the purpose of the `app.token` global
      variable in Twig?
    answers:
      - value: It represents the security token for the current user, providing access
          to user roles and credentials.
        correct: true
      - value: It is a CSRF token used for form submissions.
        correct: false
      - value: It is a unique identifier for the current request.
        correct: false
      - value: It stores the user's session ID.
        correct: false
    help: The `app.token` property provides access to the
      `Symfony\Component\Security\Core\Authentication\Token\TokenInterface`
      object, which contains security-related information about the current
      user.
      https://symfony.com/doc/current/templates.html#the-app-global-variable
  - question: What is the purpose of the `thousands_separator` option under `twig`
      configuration in Symfony?
    answers:
      - value: It defines the character used to separate the thousands part of numeric
          values when using the `number_format` filter without explicitly
          passing the character.
        correct: true
      - value: It sets the default character for separating decimals in the
          `number_format` filter.
        correct: false
      - value: It is used for formatting currency symbols.
        correct: false
      - value: It controls the number of digits displayed after the decimal point.
        correct: false
    help: The `thousands_separator` option configures the default character for
      grouping thousands in numbers when the `number_format` filter is used
      without specifying this argument.
      https://symfony.com/doc/current/reference/configuration/twig.html#thousands-separator
  - question: When configuring a route to render a static Twig template using
      `TemplateController`, how do you specify the template file path in
      `routes.yaml`?
    answers:
      - value: |-
          defaults:
              template: 'static/privacy.html.twig'
        correct: true
      - value: |-
          options:
              template: 'static/privacy.html.twig'
        correct: false
      - value: |-
          params:
              template: 'static/privacy.html.twig'
        correct: false
      - value: "template_path: 'static/privacy.html.twig'"
        correct: false
    help: The `template` key under `defaults` is used to specify the path to the
      Twig template for `TemplateController`.
      https://symfony.com/doc/current/templates.html#rendering-a-template-directly-from-a-route
  - question: You want to link to an uploaded brochure file named
      `product.brochureFilename` stored in `public/uploads/brochures/`. How
      would you generate this URL in Twig?
    answers:
      - value: "{{ asset('uploads/brochures/' ~ product.brochureFilename) }}"
        correct: true
      - value: "{{ path('uploads_brochures', {filename: product.brochureFilename}) }}"
        correct: false
      - value: "{{ url('uploads/brochures/' ~ product.brochureFilename) }}"
        correct: false
      - value: "{{ public_path('uploads/brochures/' ~ product.brochureFilename) }}"
        correct: false
    help: The `asset()` function can be used with string concatenation (`~`) to
      build paths to dynamic assets like uploaded files.
      https://symfony.com/doc/current/controller/upload_file.html#linking-to-uploaded-files
  - question: Which Twig filter is used to serialize an object into a specified
      format, such as JSON, directly within a Twig template?
    answers:
      - value: serialize(format = 'json')
        correct: true
      - value: json_encode
        correct: false
      - value: to_json
        correct: false
      - value: dump('json')
        correct: false
    help: The `serialize` filter allows converting an object into a string
      representation in a specified format, like JSON.
      https://symfony.com/doc/current/serializer.html#serializing-objects-in-twig
  - question: What is the purpose of the `autoescape_service` and
      `autoescape_service_method` options in the `twig` configuration?
    answers:
      - value: They define a Symfony service and its method to determine the default
          escaping strategy for templates, enhancing XSS prevention.
        correct: true
      - value: They automatically escape all service IDs used in Twig templates.
        correct: false
      - value: They are used to escape output from services injected into Twig.
        correct: false
      - value: They enable or disable auto-escaping globally for all Twig templates.
        correct: false
    help: These options allow you to specify a custom service that provides the
      logic for determining the default auto-escaping strategy for Twig
      templates.
      https://symfony.com/doc/current/reference/configuration/twig.html#autoescape-service
  - question: Which Twig global variable provides access to the current session
      object, or `null` if no session exists?
    answers:
      - value: app.session
        correct: true
      - value: app.request.session
        correct: false
      - value: session
        correct: false
      - value: app.get_session()
        correct: false
    help: The `app.session` property provides access to the
      `Symfony\Component\HttpFoundation\Session\Session` object.
      https://symfony.com/doc/current/templates.html#the-app-global-variable
  - question: You want to profile a specific section of your Twig template, such as
      a `for` loop, to measure its rendering time. Which Twig tag would you use?
    answers:
      - value: |-
          {% stopwatch 'loop_name' %}
              ...
          {% endstopwatch %}
        correct: true
      - value: |-
          {% profile 'loop_name' %}
              ...
          {% endprofile %}
        correct: false
      - value: |-
          {% timer 'loop_name' %}
              ...
          {% endtimer %}
        correct: false
      - value: "{{ measure('loop_name', ...) }}"
        correct: false
    help: The `{% stopwatch %}` tag, provided by the Symfony Stopwatch component,
      allows you to profile the execution time of specific blocks of code within
      your Twig templates.
      https://symfony.com/doc/current/performance.html#profiling-twig-templates
  - question: What is the purpose of the `app.locale` global variable in Twig?
    answers:
      - value: It provides the locale currently used in the locale switcher context.
        correct: true
      - value: It lists all enabled locales in the application.
        correct: false
      - value: It returns the default locale configured for the application.
        correct: false
      - value: It sets the locale for the current template.
        correct: false
    help: The `app.locale` property provides the locale used in the current locale
      switcher context.
      https://symfony.com/doc/current/templates.html#the-app-global-variable
  - question: You are using `UriTemplateHttpClient` in Symfony. Which Composer
      package is typically required to enable the expansion of URI templates
      into valid URLs?
    answers:
      - value: league/uri
        correct: true
      - value: guzzlehttp/uri-template
        correct: true
      - value: rize/uri-template
        correct: true
      - value: symfony/http-client
        correct: false
    help: While `symfony/http-client` provides `UriTemplateHttpClient`, it requires
      a third-party URI template expansion library like `league/uri`,
      `guzzlehttp/uri-template`, or `rize/uri-template`.
      https://symfony.com/doc/current/http_client.html#uri-templates
  - question: When using `render_hinclude()` in Twig, how can you specify a default
      template to display while the fragment loads or if it fails?
    answers:
      - value: "{{ render_hinclude(controller('...'), {default:
          'default/content.html.twig'}) }}"
        correct: true
      - value: "{{ render_hinclude(controller('...'), {fallback:
          'default/content.html.twig'}) }}"
        correct: false
      - value: "{{ render_hinclude(controller('...'), {placeholder:
          'default/content.html.twig'}) }}"
        correct: false
      - value: "{{ render_hinclude(controller('...'), {on_load:
          'default/content.html.twig'}) }}"
        correct: false
    help: The `default` option in `render_hinclude()` allows you to specify a Twig
      template or a simple string to be displayed as fallback content.
      https://symfony.com/doc/current/templates.html#asynchronous-content-with-hinclude-js
