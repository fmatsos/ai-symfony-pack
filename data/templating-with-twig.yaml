category: Templating with Twig

questions:
  -
    question: >
      Which Twig syntax is used to output the value of a variable?
    answers:
      - { value: '`{{ variable }}`', correct: true }
      - { value: '`{% variable %}`', correct: false }
      - { value: '`{# variable #}`', correct: false }
      - { value: '`<?php echo $variable; ?>`', correct: false }
    help: |
      Twig uses `{{ ... }}` for printing the content of variables or expressions.
      https://symfony.com/doc/current/templates.html#basic-twig-template-structure

  -
    question: >
      Which Twig syntax is used to execute statements, such as loops or conditionals?
    answers:
      - { value: '`{{ statement }}`', correct: false }
      - { value: '`{% statement %}`', correct: true }
      - { value: '`{# statement #}`', correct: false }
      - { value: '`<?php statement; ?>`', correct: false }
    help: |
      Twig uses `{% ... %}` for executing statements like `if`, `for`, `set`, etc.
      https://symfony.com/doc/current/templates.html#basic-twig-template-structure

  -
    question: >
      Which Twig syntax is used for comments?
    answers:
      - { value: '`// comment`', correct: false }
      - { value: '`{# comment #}`', correct: true }
      - { value: '`<!-- comment -->`', correct: false }
      - { value: '`/* comment */`', correct: false }
    help: |
      Twig uses `{# ... #}` for comments, which are not rendered in the final output.
      https://symfony.com/doc/current/templates.html#basic-twig-template-structure

  -
    question: >
      By default, how does Twig handle output from variables to prevent XSS attacks?
    answers:
      - { value: 'It automatically escapes potentially dangerous characters.', correct: true }
      - { value: 'It requires manual escaping using the `raw` filter.', correct: false }
      - { value: 'It only escapes output if the `escape` filter is explicitly applied.', correct: false }
      - { value: 'It relies on the browser''s built-in XSS protection.', correct: false }
    help: |
      Twig has automatic output escaping enabled by default, which converts special characters into HTML entities to prevent XSS.
      https://symfony.com/doc/current/templates.html#automatic-output-escaping

  -
    question: |
      Given the following Twig code, what will be the output if `user_input` contains `<script>alert('hello')</script>`?

      ```twig
      <p>Message: {{ user_input }}</p>
      ```
    answers:
      - { value: '<p>Message: &lt;script&gt;alert(&#39;hello&#39;)&lt;/script&gt;</p>', correct: true }
      - { value: '<p>Message: <script>alert(''hello'')</script></p>', correct: false }
      - { value: 'An alert box with "hello" will appear.', correct: false }
      - { value: 'A Twig error will be thrown.', correct: false }
    help: |
      Due to automatic output escaping, Twig converts HTML special characters into their entity equivalents, rendering the script harmlessly as text.
      https://symfony.com/doc/current/templates.html#automatic-output-escaping

  -
    question: >
      Which Twig filter can be used to disable automatic escaping for a specific variable?
    answers:
      - { value: '`safe`', correct: false }
      - { value: '`raw`', correct: true }
      - { value: '`unescape`', correct: false }
      - { value: '`html_decode`', correct: false }
    help: |
      The `raw` filter should be used with caution to mark content as safe and prevent Twig from escaping it.
      https://twig.symfony.com/doc/3.x/filters/raw.html

  -
    question: >
      What is the purpose of the `{% extends 'template.html.twig' %}` tag in Twig?
    answers:
      - { value: 'To include the content of another template at that point.', correct: false }
      - { value: 'To define a reusable block of content.', correct: false }
      - { value: 'To inherit the layout and blocks from a parent template.', correct: true }
      - { value: 'To import macros from another Twig file.', correct: false }
    help: |
      The `extends` tag is fundamental to Twig's template inheritance, allowing child templates to reuse and override parts of a parent layout.
      https://symfony.com/doc/current/templates.html#template-inheritance

  -
    question: >
      In template inheritance, what happens if content is placed outside a `{% block %}` tag in a child template that uses `{% extends %}`?
    answers:
      - { value: 'The content will be rendered before any blocks in the parent template.', correct: false }
      - { value: 'The content will be ignored and not rendered.', correct: false }
      - { value: 'A Twig `SyntaxError` will be thrown.', correct: true }
      - { value: 'The content will override the entire parent template.', correct: false }
    help: |
      All content in a child template that extends another must be within a defined block, otherwise, a `SyntaxError` occurs.
      https://symfony.com/doc/current/templates.html#template-inheritance

  -
    question: >
      How can a child template render the content of a block from its parent template while also adding its own content?
    answers:
      - { value: 'By using `{{ block(''<block_name>'') }}`', correct: false }
      - { value: 'By using `{{ parent() }}` inside the block.', correct: true }
      - { value: 'By using `{% include parent_block %}`.', correct: false }
      - { value: 'This is not possible; a block must be fully overridden or not at all.', correct: false }
    help: |
      The `parent()` function allows you to render the content of the parent block within an overridden block.
      https://twig.symfony.com/doc/3.x/functions/parent.html

  -
    question: >
      Which of the following is a correct way to define a block in a Twig template?
    answers:
      - { value: '`{% block content %}{% endblock %}`', correct: true }
      - { value: '`{{ block content }}{{ endblock }}`', correct: false }
      - { value: '`{# block content #}{# endblock #}`', correct: false }
      - { value: '`@block content @endblock`', correct: false }
    help: |
      Blocks are defined using the `{% block ... %}` and `{% endblock %}` tags.
      https://symfony.com/doc/current/templates.html#template-inheritance

  -
    question: >
      Which global variable in Twig provides access to common application-specific data like the current user, request, or environment?
    answers:
      - { value: '`symfony`', correct: false }
      - { value: '`app`', correct: true }
      - { value: '`kernel`', correct: false }
      - { value: '`global`', correct: false }
    help: |
      The `app` global variable provides access to the `AppVariable` object, which contains useful application-specific data.
      https://symfony.com/doc/current/templates.html#global-variables

  -
    question: |
      How would you access the current user's email address in a Twig template, assuming the user is authenticated?

      ```twig
      {# ... #}
      <p>Email: {{ /* ??? */ }}</p>
      {# ... #}
      ```
    answers:
      - { value: '`app.user.email`', correct: true }
      - { value: '`user.email`', correct: false }
      - { value: '`request.user.email`', correct: false }
      - { value: '`app.security.user.email`', correct: false }
    help: |
      The `app.user` property of the `app` global variable provides access to the current authenticated user object.
      https://symfony.com/doc/current/templates.html#global-variables

  -
    question: >
      Which Twig filter is commonly used to format dates and times?
    answers:
      - { value: '`format_date`', correct: false }
      - { value: '`date`', correct: true }
      - { value: '`datetime`', correct: false }
      - { value: '`time_format`', correct: false }
    help: |
      The `date` filter formats a date to a given format.
      https://twig.symfony.com/doc/3.x/filters/date.html

  -
    question: |
      What is the output of `{{ 'hello world'|length }}` in Twig?
    answers:
      - { value: '11', correct: true }
      - { value: '10', correct: false }
      - { value: 'hello world', correct: false }
      - { value: 'An error', correct: false }
    help: |
      The `length` filter returns the number of items of a sequence or mapping, or the length of a string.
      https://twig.symfony.com/doc/3.x/filters/length.html

  -
    question: >
      Which Twig function is used to generate URLs based on a Symfony route name?
    answers:
      - { value: '`url()`', correct: false }
      - { value: '`route()`', correct: false }
      - { value: '`path()`', correct: true }
      - { value: '`link()`', correct: false }
    help: |
      The `path()` function generates a relative URL for a given route.
      https://symfony.com/doc/current/routing.html#generating-urls-in-templates

  -
    question: |
      Given the route `blog_show` with a `slug` parameter, how would you generate a URL for the slug 'my-post' in Twig?
    answers:
      - { value: '`{{ path('blog_show', {slug: 'my-post'}) }}`', correct: true }
      - { value: '`{{ route('blog_show', 'my-post') }}`', correct: false }
      - { value: '`{{ url('blog_show', {slug: 'my-post'}) }}`', correct: false }
      - { value: '`{{ generate_path('blog_show', 'my-post') }}`', correct: false }
    help: |
      The `path()` function takes the route name and an array of parameters.
      https://symfony.com/doc/current/routing.html#generating-urls-in-templates

  -
    question: >
      What is the primary difference between `path()` and `url()` Twig functions?
    answers:
      - { value: '`path()` generates an absolute URL, while `url()` generates a relative URL.', correct: false }
      - { value: '`path()` generates a relative URL, while `url()` generates an absolute URL.', correct: true }
      - { value: '`path()` is for internal routes, `url()` is for external URLs.', correct: false }
      - { value: 'There is no functional difference; they are aliases.', correct: false }
    help: |
      `path()` generates a path relative to the web root, while `url()` generates a full absolute URL including the scheme and host.
      https://symfony.com/doc/current/routing.html#generating-urls-in-templates

  -
    question: >
      Which Twig function is used to include another template fragment within the current template?
    answers:
      - { value: '`embed()`', correct: false }
      - { value: '`import()`', correct: false }
      - { value: '`include()`', correct: true }
      - { value: '`render()`', correct: false }
    help: |
      The `include()` function includes a template and returns the rendered content of that template.
      https://symfony.com/doc/current/templates.html#including-templates

  -
    question: |
      Given the following Twig code, how would you include `_user_profile.html.twig` and pass a `user` variable, renaming it from `blog_post.author`?

      ```twig
      {# templates/blog/index.html.twig #}
      {{ /* ??? */ }}
      ```
    answers:
      - { value: '`include(''_user_profile.html.twig'', {user: blog_post.author})`', correct: true }
      - { value: '`include(''_user_profile.html.twig'', user = blog_post.author)`', correct: false }
      - { value: '`include(''_user_profile.html.twig'') with {user: blog_post.author}`', correct: false }
      - { value: '`include(''_user_profile.html.twig'', {author_as_user: blog_post.author})`', correct: false }
    help: |
      You can pass variables to an included template as a second argument, and rename them as needed.
      https://symfony.com/doc/current/templates.html#including-templates

  -
    question: >
      What is the default behavior of variables when including a template using `include()`?
    answers:
      - { value: 'No variables are passed by default; they must be explicitly passed.', correct: false }
      - { value: 'All variables from the parent template are inherited by default.', correct: true }
      - { value: 'Only global variables are inherited by default.', correct: false }
      - { value: 'Only variables with the same name are inherited.', correct: false }
    help: |
      By default, the included template has access to all variables from the active context of the template that includes it.
      https://symfony.com/doc/current/templates.html#including-templates

  -
    question: |
      Which Twig construct is used to iterate over arrays or objects?
    answers:
      - { value: '`{% loop %}`', correct: false }
      - { value: '`{% foreach %}`', correct: false }
      - { value: '`{% for %}`', correct: true }
      - { value: '`{% iterate %}`', correct: false }
    help: |
      The `for` tag is used to iterate over arrays, objects, or any traversable variable.
      https://twig.symfony.com/doc/3.x/tags/for.html

  -
    question: |
      How would you display a message only if a `user` variable is defined and `user.isLoggedIn` is true?

      ```twig
      {# ... #}
      {% /* ??? */ %}
          Hello {{ user.name }}!
      {% /* ??? */ %}
      {# ... #}
      ```
    answers:
      - { value: '`{% if user is defined and user.isLoggedIn %}` / `{% endif %}`', correct: true }
      - { value: '`{% if user.isLoggedIn %}` / `{% endif %}`', correct: false }
      - { value: '`{% if user and user.isLoggedIn %}` / `{% end_if %}`', correct: false }
      - { value: '`{% when user.isLoggedIn %}` / `{% endwhen %}`', correct: false }
    help: |
      The `if` tag is used for conditional execution. The `is defined` test checks if a variable exists.
      https://twig.symfony.com/doc/3.x/tags/if.html

  -
    question: >
      Which Symfony controller method is typically used to render a Twig template and return a `Response` object?
    answers:
      - { value: '`renderView()`', correct: false }
      - { value: '`display()`', correct: false }
      - { value: '`render()`', correct: true }
      - { value: '`showTemplate()`', correct: false }
    help: |
      The `render()` method, available when extending `AbstractController`, renders a Twig template and returns a `Response` object.
      https://symfony.com/doc/current/templates.html#rendering-templates-in-controllers

  -
    question: >
      What is the difference between `render()` and `renderView()` methods in a Symfony controller?
    answers:
      - { value: '`render()` returns a `Response` object, while `renderView()` returns the rendered template content as a string.', correct: true }
      - { value: '`render()` is for HTML templates, `renderView()` is for JSON responses.', correct: false }
      - { value: '`render()` automatically passes all controller variables, `renderView()` requires explicit variable passing.', correct: false }
      - { value: '`renderView()` is deprecated in Symfony 7.', correct: false }
    help: |
      `render()` creates and returns a `Response` object, while `renderView()` only returns the HTML content as a string, allowing you to manually create the `Response`.
      https://symfony.com/doc/current/templates.html#rendering-templates-in-controllers

  -
    question: |
      Which Symfony attribute allows a controller method to return an array of parameters, with Symfony automatically rendering a Twig template and creating the `Response`?
    answers:
      - { value: '`#[Route]`', correct: false }
      - { value: '`#[Template]`', correct: true }
      - { value: '`#[Render]`', correct: false }
      - { value: '`#[View]`', correct: false }
    help: |
      The `#[Template]` attribute (from `Symfony\Bridge\Twig\Attribute\Template`) simplifies controller methods by automatically rendering a template based on the returned array.
      https://symfony.com/doc/current/templates.html#rendering-templates-in-controllers

  -
    question: >
      Which Twig filter is used for translating strings?
    answers:
      - { value: '`translate`', correct: false }
      - { value: '`trans`', correct: true }
      - { value: '`i18n`', correct: false }
      - { value: '`localize`', correct: false }
    help: |
      The `trans` filter is used to translate a given message.
      https://symfony.com/doc/current/translation.html#twig-templates

  -
    question: |
      How can you specify a translation domain for a string in Twig using the `trans` filter?
    answers:
      - { value: '`{{ 'Hello'|trans(domain='messages') }}`', correct: false }
      - { value: '`{{ 'Hello'|trans({}, 'messages') }}`', correct: true }
      - { value: '`{{ 'Hello'|trans(domain='messages', locale='en') }}`', correct: false }
      - { value: '`{{ 'Hello'|trans(from='messages') }}`', correct: false }
    help: |
      The `trans` filter accepts an array of parameters (empty in this case) and then the domain as its second argument.
      https://symfony.com/doc/current/translation.html#twig-templates

  -
    question: >
      Which Twig tag can be used to set a default translation domain for all subsequent translations within a specific template?
    answers:
      - { value: '`{% default_domain %}`', correct: false }
      - { value: '`{% set_trans_domain %}`', correct: false }
      - { value: '`{% trans_default_domain %}`', correct: true }
      - { value: '`{% use_domain %}`', correct: false }
    help: |
      The `trans_default_domain` tag sets the default translation domain for the current template.
      https://symfony.com/doc/current/translation.html#twig-templates

  -
    question: >
      How does Twig handle pluralization for translations?
    answers:
      - { value: 'It automatically pluralizes based on the locale without special syntax.', correct: false }
      - { value: 'It uses a pipe (`|`) to separate plural forms within the translation key.', correct: true }
      - { value: 'It requires a separate `plural` filter to be applied.', correct: false }
      - { value: 'Symfony''s Translator component handles pluralization before the string reaches Twig.', correct: false }
    help: |
      Twig's `trans` filter and tag support pluralization using a pipe-separated string for different plural forms.
      https://symfony.com/doc/current/translation.html#pluralization

  -
    question: |
      Which Twig function should be used to generate a URL for a static asset located in the `public/images` directory, e.g., `logo.png`?
    answers:
      - { value: '`{{ asset('images/logo.png') }}`', correct: true }
      - { value: '`{{ static('images/logo.png') }}`', correct: false }
      - { value: '`{{ public('images/logo.png') }}`', correct: false }
      - { value: '`{{ url('images/logo.png') }}`', correct: false }
    help: |
      The `asset()` Twig function generates public URLs for your assets, automatically handling base paths.
      https://symfony.com/doc/current/templates.html#linking-to-assets

  -
    question: >
      How can you generate an absolute URL for an asset in Twig, including the scheme and host?
    answers:
      - { value: '`{{ asset('path/to/asset.css', absolute=true) }}`', correct: false }
      - { value: '`{{ absolute_url(asset('path/to/asset.css')) }}`', correct: true }
      - { value: '`{{ url('path/to/asset.css') }}`', correct: false }
      - { value: '`{{ asset_absolute('path/to/asset.css') }}`', correct: false }
    help: |
      Combine the `absolute_url()` function with `asset()` to get a full absolute URL for an asset.
      https://symfony.com/doc/current/templates.html#linking-to-assets

  -
    question: >
      Which Twig functions are provided by Symfony Webpack Encore for including generated JavaScript and CSS entry points?
    answers:
      - { value: '`encore_js_tags()` and `encore_css_tags()`', correct: false }
      - { value: '`encore_entry_script_tags()` and `encore_entry_link_tags()`', correct: true }
      - { value: '`webpack_script()` and `webpack_link()`', correct: false }
      - { value: '`asset_js()` and `asset_css()`', correct: false }
    help: |
      Webpack Encore provides `encore_entry_script_tags()` for JavaScript and `encore_entry_link_tags()` for CSS.
      https://symfony.com/doc/current/frontend/encore/simple-example.html#including-assets-in-twig

  -
    question: >
      What is the purpose of the `{% dump variable %}` Twig tag?
    answers:
      - { value: 'To display the raw content of a variable directly in the HTML output.', correct: false }
      - { value: 'To send the contents of a variable to the Symfony Web Debug Toolbar for inspection.', correct: true }
      - { value: 'To clear a variable from the Twig context.', correct: false }
      - { value: 'To serialize a variable into a JSON string.', correct: false }
    help: |
      The `dump` tag (and function) is used for debugging. When used as a tag, it sends the output to the Web Debug Toolbar.
      https://symfony.com/doc/current/templates.html#debugging-variables

  -
    question: >
      How can you display the contents of a variable directly within the HTML page for debugging purposes using Twig?
    answers:
      - { value: '`{% dump variable %}`', correct: false }
      - { value: '`{{ dump(variable) }}`', correct: true }
      - { value: '`{{ debug(variable) }}`', correct: false }
      - { value: '`{% var_dump variable %}`', correct: false }
    help: |
      The `dump()` function, when used within `{{ ... }}`, outputs the variable's content directly into the HTML.
      https://symfony.com/doc/current/templates.html#debugging-variables

  -
    question: >
      Which Symfony console command can be used to list all available Twig functions, filters, and global variables?
    answers:
      - { value: '`php bin/console twig:debug`', correct: false }
      - { value: '`php bin/console debug:twig`', correct: true }
      - { value: '`php bin/console list:twig`', correct: false }
      - { value: '`php bin/console twig:info`', correct: false }
    help: |
      The `debug:twig` command provides comprehensive information about the Twig environment.
      https://symfony.com/doc/current/templates.html#debugging-variables

  -
    question: >
      What is the default directory for Twig templates in a Symfony application?
    answers:
      - { value: '`src/Templates/`', correct: false }
      - { value: '`app/Resources/views/`', correct: false }
      - { value: '`templates/`', correct: true }
      - { value: '`views/`', correct: false }
    help: |
      By default, Symfony looks for Twig templates in the `templates/` directory at the project root.
      https://symfony.com/doc/current/templates.html#template-naming

  -
    question: |
      How can you configure an additional Twig template path with a namespace, for example, `backend/templates` mapped to the `admin` namespace?
    answers:
      - { value: '`twig.paths: { 'backend/templates': 'admin' }`', correct: true }
      - { value: '`twig.namespaces: { admin: 'backend/templates' }`', correct: false }
      - { value: '`twig.template_dirs: { admin: 'backend/templates' }`', correct: false }
      - { value: '`twig.add_path('backend/templates', 'admin')`', correct: false }
    help: |
      Additional template paths can be configured under `twig.paths` in `config/packages/twig.yaml`, with the directory as key and namespace as value.
      https://symfony.com/doc/current/templates.html#paths

  -
    question: >
      When rendering a specific block from a Twig template directly from a controller, which method should be used?
    answers:
      - { value: '`renderBlockView()`', correct: true }
      - { value: '`renderBlock()`', correct: true }
      - { value: '`renderPartial()`', correct: false }
      - { value: '`renderFragment()`', correct: false }
    help: |
      Both `renderBlock()` (returns `Response`) and `renderBlockView()` (returns string) can be used to render specific blocks from a template.
      https://symfony.com/doc/current/templates.html#rendering-template-blocks-in-controllers

  -
    question: >
      What is the purpose of embedding controllers in Twig templates using the `render()` function?
    answers:
      - { value: 'To include static HTML fragments.', correct: false }
      - { value: 'To execute a controller action and embed its output dynamically within a template.', correct: true }
      - { value: 'To pre-render entire pages for caching.', correct: false }
      - { value: 'To define new Twig functions.', correct: false }
    help: |
      Embedding controllers allows you to include dynamic content generated by a separate controller action directly into your Twig template.
      https://symfony.com/doc/current/templates.html#embedding-controllers

  -
    question: |
      Which of the following is a correct way to embed the output of a controller method `App\Controller\BlogController::recentArticles` with a `max` parameter of 3 into a Twig template?
    answers:
      - { value: '`{{ render(controller('App\\\\Controller\\\\BlogController::recentArticles', {max: 3})) }}`', correct: true }
      - { value: '`{{ include_controller('App\\\\Controller\\\\BlogController::recentArticles', {max: 3}) }}`', correct: false }
      - { value: '`{{ embed_controller('App\\\\Controller\\\\BlogController::recentArticles', {max: 3}) }}`', correct: false }
      - { value: '`{{ call_controller('App\\\\Controller\\\\BlogController::recentArticles', {max: 3}) }}`', correct: false }
    help: |
      The `render()` Twig function can take the result of the `controller()` function to embed its output.
      https://symfony.com/doc/current/templates.html#embedding-controllers

  -
    question: >
      What does the `render_hinclude()` Twig function primarily enable?
    answers:
      - { value: 'Synchronous rendering of large template sections.', correct: false }
      - { value: 'Asynchronous loading of content from a controller or URL, improving page load times.', correct: true }
      - { value: 'Server-side rendering for JavaScript frameworks.', correct: false }
      - { value: 'Rendering of Twig templates as PDF documents.', correct: false }
    help: |
      `render_hinclude()` is used for asynchronous content loading, often for parts of a page that can be loaded later.
      https://symfony.com/doc/current/templates.html#embedding-asynchronous-content-with-hinclude

  -
    question: >
      Which Symfony console command can be used to check Twig templates for syntax errors?
    answers:
      - { value: '`php bin/console twig:check`', correct: false }
      - { value: '`php bin/console lint:twig`', correct: true }
      - { value: '`php bin/console validate:twig`', correct: false }
      - { value: '`php bin/console analyze:twig`', correct: false }
    help: |
      The `lint:twig` command checks Twig templates for syntax errors, which is useful for CI/CD pipelines.
      https://symfony.com/doc/current/templates.html#linting-twig-templates

  -
    question: >
      How can you profile the performance of a specific block of Twig code within a template?
    answers:
      - { value: 'By using the `{% profile %}` tag.', correct: false }
      - { value: 'By using the `{% stopwatch %}` tag.', correct: true }
      - { value: 'By enabling Twig debugging in `config/packages/twig.yaml`.', correct: false }
      - { value: 'By wrapping the code in `{{ debug_start() }}` and `{{ debug_end() }}`.', correct: false }
    help: |
      The `stopwatch` Twig tag allows you to measure the execution time and memory usage of specific template sections, visible in the Symfony profiler.
      https://symfony.com/doc/current/performance.html#profiling-twig-templates

  -
    question: |
      When overriding a Twig template from a third-party bundle that itself extends another template, what special prefix should be used in the `extends` tag to prevent infinite loop errors?
    answers:
      - { value: '`@!`', correct: true }
      - { value: '`#`', correct: false }
      - { value: '`_`', correct: false }
      - { value: '`!`', correct: false }
    help: |
      The `!` prefix (e.g., `{% extends "@!BundleName/template.html.twig" %}`) ensures that the original template is extended, not the overridden one, preventing recursion.
      https://symfony.com/doc/current/bundles/override.html#overriding-bundle-templates

  -
    question: >
      Which Twig helper function is used to render the opening `<form>` tag for a Symfony form?
    answers:
      - { value: '`form_open(form)`', correct: false }
      - { value: '`form_start(form)`', correct: true }
      - { value: '`form_begin(form)`', correct: false }
      - { value: '`form_init(form)`', correct: false }
    help: |
      The `form_start()` Twig function renders the opening HTML `<form>` tag, including method, action, and enctype.
      https://symfony.com/doc/current/forms.html#rendering-a-form

  -
    question: >
      Which Twig helper function is typically used to render a single form field (label, errors, widget)?
    answers:
      - { value: '`form_widget(field)`', correct: false }
      - { value: '`form_label(field)`', correct: false }
      - { value: '`form_errors(field)`', correct: false }
      - { value: '`form_row(field)`', correct: true }
    help: |
      The `form_row()` Twig function renders the label, errors, and widget for a single form field.
      https://symfony.com/doc/current/forms.html#rendering-a-form

  -
    question: >
      What is the purpose of `TemplatedEmail` in Symfony's Mailer component?
    answers:
      - { value: 'To send emails without using Twig templates.', correct: false }
      - { value: 'To define email content using plain text only.', correct: false }
      - { value: 'To easily create and send emails using Twig templates for their content.', correct: true }
      - { value: 'To manage email attachments.', correct: false }
    help: |
      `TemplatedEmail` simplifies sending emails by allowing you to define the email's content using Twig templates.
      https://symfony.com/doc/current/mailer.html#creating-emails-with-twig

  -
    question: |
      How do you specify the Twig template to be used for the HTML content of an email when using `TemplatedEmail`?
    answers:
      - { value: '`->htmlTemplate('emails/signup.html.twig')`', correct: true }
      - { value: '`->template('emails/signup.html.twig')`', correct: false }
      - { value: '`->setHtmlTemplate('emails/signup.html.twig')`', correct: false }
      - { value: '`->twigTemplate('emails/signup.html.twig')`', correct: false }
    help: |
      The `htmlTemplate()` method of `TemplatedEmail` is used to set the path to the Twig template for the HTML body.
      https://symfony.com/doc/current/mailer.html#creating-emails-with-twig

  -
    question: >
      How can you pass variables from a PHP controller to a Twig template?
    answers:
      - { value: 'By defining them as global variables in `services.yaml`.', correct: false }
      - { value: 'By passing an array of key-value pairs as the second argument to the `render()` method.', correct: true }
      - { value: 'By using `$_GET` or `$_POST` in the Twig template.', correct: false }
      - { value: 'By injecting them as services into the Twig environment.', correct: false }
    help: |
      Variables are passed to Twig templates as an associative array in the `render()` method, where array keys become Twig variable names.
      https://symfony.com/doc/current/templates.html#rendering-templates-in-controllers

  -
    question: >
      Which Twig filter can be used to convert a PHP object into a serialized format like JSON directly in the template?
    answers:
      - { value: '`json_encode`', correct: false }
      - { value: '`serialize`', correct: true }
      - { value: '`to_json`', correct: false }
      - { value: '`dump`', correct: false }
    help: |
      The `serialize` filter (provided by the Symfony Serializer component integration) can convert objects to various formats, including JSON.
      https://symfony.com/doc/current/serializer.html#twig-integration

  -
    question: |
      What is the recommended naming convention for variables passed from a Symfony controller to a Twig template?
    answers:
      - { value: 'camelCase', correct: false }
      - { value: 'PascalCase', correct: false }
      - { value: 'snake_case', correct: true }
      - { value: 'kebab-case', correct: false }
    help: |
      Twig recommends using `snake_case` for variable names passed to templates (e.g., `user_first_name` instead of `userFirstName`).
      https://symfony.com/doc/current/templates.html#rendering-templates-in-controllers

  -
    question: >
      How can you programmatically check if a specific Twig template exists using the Twig loader in PHP?
    answers:
      - { value: '`$loader->has('template.html.twig')`', correct: false }
      - { value: '`$loader->exists('template.html.twig')`', correct: true }
      - { value: '`$loader->find('template.html.twig')`', correct: false }
      - { value: '`$loader->load('template.html.twig')`', correct: false }
    help: |
      The `exists()` method of the Twig loader (e.g., `FilesystemLoader`) can be used to check for template existence.
      https://symfony.com/doc/current/templates.html#checking-if-a-template-exists

  -
    question: >
      What is the purpose of the `#[Template]` attribute's `block` argument, introduced in Symfony 7.2?
    answers:
      - { value: 'To define a new block within the template.', correct: false }
      - { value: 'To specify which block from the template should be rendered by the controller method.', correct: true }
      - { value: 'To mark a block as cacheable.', correct: false }
      - { value: 'To set a default value for a block.', correct: false }
    help: |
      The `block` argument in `#[Template]` allows a controller method to render only a specific block from a Twig template.
      https://symfony.com/doc/current/templates.html#rendering-template-blocks-in-controllers

  -
    question: |
      Which Twig function allows you to retrieve metadata associated with a workflow, place, or transition?
    answers:
      - { value: '`workflow_get_metadata()`', correct: false }
      - { value: '`workflow_metadata()`', correct: true }
      - { value: '`workflow_info()`', correct: false }
      - { value: '`workflow_data()`', correct: false }
    help: |
      The `workflow_metadata()` Twig function is used to access metadata defined in your workflow configuration.
      https://symfony.com/doc/current/workflow.html#displaying-workflow-metadata-in-twig

  -
    question: >
      How can you change the default directory where Twig templates are located in a Symfony application?
    answers:
      - { value: 'By modifying the `twig.default_path` configuration option in `config/packages/twig.yaml`.', correct: true }
      - { value: 'By setting the `kernel.template_dir` parameter in `services.yaml`.', correct: false }
      - { value: 'By overriding the `TwigBundle` configuration in `src/Kernel.php`.', correct: false }
      - { value: 'By defining a `TWIG_TEMPLATES_PATH` environment variable.', correct: false }
    help: |
      The `default_path` option under the `twig` configuration in `twig.yaml` allows you to specify a custom template directory.
      https://symfony.com/doc/current/configuration/override_dir_structure.html#changing-the-default-templates-directory

  -
    question: >
      What is the purpose of `TranslatableMessage` objects when passed to the Twig `trans` filter?
    answers:
      - { value: 'They force the translation to be done on the client-side.', correct: false }
      - { value: 'They allow deferring the actual translation until the template is rendered, simplifying controller logic.', correct: true }
      - { value: 'They provide a way to bypass the translation process entirely.', correct: false }
      - { value: 'They are used for translating messages that contain HTML.', correct: false }
    help: |
      `TranslatableMessage` objects allow you to pass translation keys and parameters from PHP to Twig, deferring the translation process to the template.
      https://symfony.com/doc/current/translation.html#using-translatablemessage-in-twig

  -
    question: |
      Which Twig filter is commonly used to ensure a string is safe for inclusion in a JavaScript context, preventing XSS?
    answers:
      - { value: '`escape('js')`', correct: true }
      - { value: '`json_encode`', correct: false }
      - { value: '`raw`', correct: false }
      - { value: '`js_encode`', correct: false }
    help: |
      The `escape` filter with the `js` strategy is used to escape strings for safe inclusion in JavaScript.
      https://symfony.com/doc/current/routing.html#generating-urls-in-javascript

  -
    question: >
      What is the primary benefit of using template inheritance in Twig?
    answers:
      - { value: 'To reduce the number of files in the project.', correct: false }
      - { value: 'To improve performance by caching templates more effectively.', correct: false }
      - { value: 'To promote code reuse and maintain a consistent layout across multiple pages.', correct: true }
      - { value: 'To enable dynamic content loading via AJAX.', correct: false }
    help: |
      Template inheritance allows you to build a base "layout" template that contains all the common elements of your site and then extend it for individual pages.
      https://symfony.com/doc/current/templates.html#template-inheritance

  -
    question: >
      Which command is used to install the Twig templating engine package in a Symfony project?
    answers:
      - { value: '`composer install twig`', correct: false }
      - { value: '`composer require twig/twig`', correct: false }
      - { value: '`composer require symfony/twig-bundle`', correct: true }
      - { value: '`symfony install twig`', correct: false }
    help: |
      The `symfony/twig-bundle` package provides the integration of Twig with Symfony.
      https://symfony.com/doc/current/templates.html#installation

  -
    question: >
      What happens if you try to access an undefined variable in a Twig template by default?
    answers:
      - { value: 'A fatal PHP error occurs.', correct: false }
      - { value: 'The variable is rendered as an empty string or `null` without an error.', correct: true }
      - { value: 'A Twig exception is thrown, halting rendering.', correct: false }
      - { value: 'It automatically defaults to a variable with the same name from the global scope.', correct: false }
    help: |
      By default, accessing a non-existent variable in Twig results in `null` or an empty string, preventing fatal errors. You can configure strict variables if needed.
      https://twig.symfony.com/doc/3.x/templates.html#variables

  -
    question: |
      Consider the following Twig template structure:
      `base.html.twig` defines `{% block content %}`.
      `blog/layout.html.twig` extends `base.html.twig` and overrides `content`, also defining `{% block page_contents %}`.
      `blog/index.html.twig` extends `blog/layout.html.twig`.

      If `blog/index.html.twig` defines `{% block content %}`, which block will it override?
    answers:
      - { value: 'The `content` block in `base.html.twig` directly.', correct: false }
      - { value: 'The `content` block in `blog/layout.html.twig`.', correct: true }
      - { value: 'Both `content` blocks in `base.html.twig` and `blog/layout.html.twig`.', correct: false }
      - { value: 'It will cause a syntax error.', correct: false }
    help: |
      A child template always overrides blocks from its direct parent. In this chain, `blog/index.html.twig`'s parent is `blog/layout.html.twig`.
      https://symfony.com/doc/current/templates.html#template-inheritance

  -
    question: >
      Which of the following is NOT a valid way to configure additional Twig template paths without namespaces in `config/packages/twig.yaml`?
    answers:
      - { value: '`paths: { 'email/templates': ~ }`', correct: false }
      - { value: '`paths: [ 'email/templates' ]`', correct: true }
      - { value: '`paths: { 'email/templates': null }`', correct: false }
      - { value: '`paths: { email_templates: 'email/templates' }`', correct: false }
    help: |
      When defining paths without namespaces, the key is the path and the value is `~` (null) or `null`. An array of paths directly is not the correct YAML syntax for this configuration.
      https://symfony.com/doc/current/templates.html#paths

  -
    question: >
      What is the purpose of the `app.debug` global variable in Twig?
    answers:
      - { value: 'It indicates if the current user has debugging permissions.', correct: false }
      - { value: 'It controls whether the Web Debug Toolbar is displayed.', correct: false }
      - { value: 'It reflects the `APP_DEBUG` environment variable, indicating if the application is in debug mode.', correct: true }
      - { value: 'It enables verbose logging in Twig templates.', correct: false }
    help: |
      The `app.debug` variable is a boolean that indicates whether the application is running in debug mode, typically controlled by the `APP_DEBUG` environment variable.
      https://symfony.com/doc/current/templates.html#global-variables

  -
    question: >
      How can you access a custom global variable named `ga_tracking` that has been configured in Symfony's Twig extension?
    answers:
      - { value: '`{{ app.globals.ga_tracking }}`', correct: false }
      - { value: '`{{ ga_tracking }}`', correct: true }
      - { value: '`{{ twig.globals.ga_tracking }}`', correct: false }
      - { value: '`{{ get_global('ga_tracking') }}`', correct: false }
    help: |
      Once a global variable is configured in Twig, it can be accessed directly by its name in any Twig template.
      https://symfony.com/doc/current/templates.html#global-variables

  -
    question: >
      When rendering a form collection in Twig, which Twig helper is typically used to iterate over and render individual sub-forms (e.g., for a collection of tags)?
    answers:
      - { value: '`form_fields(collection)`', correct: false }
      - { value: '`for item in form.collection` and then `form_row(item)`', correct: true }
      - { value: '`form_collection_row(collection)`', correct: false }
      - { value: '`{% loop form.collection %}`', correct: false }
    help: |
      You can iterate over a form collection directly using a `for` loop and then render each item's row using `form_row()`.
      https://symfony.com/doc/current/form/form_collections.html#rendering-a-form-collection

  -
    question: >
      Which of the following is a valid way to define a text-only template for an email using `TemplatedEmail`?
    answers:
      - { value: '`->textTemplate('emails/signup.txt.twig')`', correct: true }
      - { value: '`->plainTextTemplate('emails/signup.txt.twig')`', correct: false }
      - { value: '`->textBodyTemplate('emails/signup.txt.twig')`', correct: false }
      - { value: '`->addTextTemplate('emails/signup.txt.twig')`', correct: false }
    help: |
      The `textTemplate()` method is used to specify a Twig template for the plain text version of the email.
      https://symfony.com/doc/current/mailer.html#creating-emails-with-twig

  -
    question: >
      What is the purpose of the `locale()` method when creating a `TemplatedEmail`?
    answers:
      - { value: 'To set the default locale for the entire Symfony application.', correct: false }
      - { value: 'To define the language in which the email content should be translated.', correct: true }
      - { value: 'To specify the locale of the recipient''s email client.', correct: false }
      - { value: 'To determine the timezone for date formatting within the email.', correct: false }
    help: |
      The `locale()` method on `TemplatedEmail` allows you to set the locale specifically for the rendering of that email's Twig template.
      https://symfony.com/doc/current/mailer.html#creating-emails-with-twig

  -
    question: >
      How can you pass custom variables to a `TemplatedEmail`'s Twig template?
    answers:
      - { value: 'Using the `with()` method.', correct: false }
      - { value: 'Using the `context()` method, passing an associative array.', correct: true }
      - { value: 'Using the `setVariables()` method.', correct: false }
      - { value: 'Variables are automatically passed from the controller context.', correct: false }
    help: |
      The `context()` method of `TemplatedEmail` allows you to pass an associative array of variables to the Twig template.
      https://symfony.com/doc/current/mailer.html#creating-emails-with-twig

  -
    question: >
      Which of the following is a valid way to define a custom Twig filter in a Symfony application?
    answers:
      - { value: 'By creating a service tagged with `twig.filter` and defining the filter method.', correct: true }
      - { value: 'By extending `Twig\Extension\AbstractExtension` and overriding the `getFilters()` method.', correct: true }
      - { value: 'By adding a new entry to the `twig.filters` configuration in `config/packages/twig.yaml`.', correct: false }
      - { value: 'By creating a PHP function prefixed with `twig_filter_` in the global namespace.', correct: false }
    help: |
      Custom Twig filters are typically defined by creating a Twig extension class that extends `AbstractExtension` and registers filters via `getFilters()`.
      https://symfony.com/doc/current/templating/twig_extension.html#creating-a-twig-extension

  -
    question: >
      What is the primary purpose of the `{% use 'template.html.twig' %}` tag in Twig?
    answers:
      - { value: 'To extend a template for inheritance.', correct: false }
      - { value: 'To import macros and functions from another template without inheriting its layout.', correct: true }
      - { value: 'To include the content of another template directly.', correct: false }
      - { value: 'To define a template as a reusable component.', correct: false }
    help: |
      The `use` tag allows you to import blocks from other templates into the current template, which is useful for reusing UI components or macros without full inheritance.
      https://twig.symfony.com/doc/3.x/tags/use.html

  -
    question: >
      How can you ensure that a Twig template is always reloaded from disk during development, bypassing the cache?
    answers:
      - { value: 'By setting `twig.cache` to `false` in `config/packages/twig.yaml`.', correct: false }
      - { value: 'By setting `twig.auto_reload` to `true` in `config/packages/twig.yaml`.', correct: true }
      - { value: 'By clearing the Symfony cache after every change.', correct: false }
      - { value: 'By using the `{% no_cache %}` tag in the template.', correct: false }
    help: |
      The `auto_reload` option in Twig configuration (typically `true` in `dev` environment) ensures templates are recompiled when their source changes.
      https://symfony.com/doc/current/reference/configuration/twig.html#auto-reload

  -
    question: >
      Which Twig function can be used to check if a variable is empty (e.g., `null`, empty string, empty array)?
    answers:
      - { value: '`empty()`', correct: false }
      - { value: '`is_empty()`', correct: false }
      - { value: '`variable is empty`', correct: true }
      - { value: '`variable == null`', correct: false }
    help: |
      The `empty` test checks if a variable is considered empty in Twig, similar to PHP's `empty()`.
      https://twig.symfony.com/doc/3.x/tests/empty.html

  -
    question: >
      What is the purpose of the `|default('fallback_value')` filter in Twig?
    answers:
      - { value: 'To set a default value if a variable is `null` or undefined.', correct: true }
      - { value: 'To convert a variable to its default data type.', correct: false }
      - { value: 'To define a default block content.', correct: false }
      - { value: 'To reset a variable to its initial state.', correct: false }
    help: |
      The `default` filter returns the default value if the variable is undefined or `null`.
      https://twig.symfony.com/doc/3.x/filters/default.html

  -
    question: |
      Given the following Twig code, what will be the output if `user.name` is `null`?

      ```twig
      Hello {{ user.name ?? 'Guest' }}!
      ```
    answers:
      - { value: 'Hello Guest!', correct: true }
      - { value: 'Hello !', correct: false }
      - { value: 'Hello null!', correct: false }
      - { value: 'A Twig error will be thrown.', correct: false }
    help: |
      The `??` (null-coalescing) operator in Twig provides a shorthand for the `default` filter, returning the right-hand side if the left-hand side is `null` or undefined.
      https://twig.symfony.com/doc/3.x/templates.html#null-coalescing-operator

  -
    question: >
      Which Twig filter is used to convert a string to uppercase?
    answers:
      - { value: '`upper`', correct: true }
      - { value: '`uppercase`', correct: false }
      - { value: '`to_upper`', correct: false }
      - { value: '`strtoupper`', correct: false }
    help: |
      The `upper` filter converts a string to uppercase.
      https://twig.symfony.com/doc/3.x/filters/upper.html

  -
    question: >
      Which Twig filter is used to remove whitespace from the beginning and end of a string?
    answers:
      - { value: '`trim`', correct: true }
      - { value: '`strip`', correct: false }
      - { value: '`whitespace_trim`', correct: false }
      - { value: '`clean`', correct: false }
    help: |
      The `trim` filter strips whitespace from the beginning and/or end of a string.
      https://twig.symfony.com/doc/3.x/filters/trim.html

  -
    question: |
      How can you concatenate two strings, `first_name` and `last_name`, with a space in between in Twig?
    answers:
      - { value: '`{{ first_name ~ ' ' ~ last_name }}`', correct: true }
      - { value: '`{{ first_name + ' ' + last_name }}`', correct: false }
      - { value: '`{{ concat(first_name, ' ', last_name) }}`', correct: false }
      - { value: '`{{ first_name . ' ' . last_name }}`', correct: false }
    help: |
      The `~` operator is used for string concatenation in Twig.
      https://twig.symfony.com/doc/3.x/templates.html#operators

  -
    question: >
      What is the purpose of the `{% apply filter %}` tag in Twig?
    answers:
      - { value: 'To define a new custom filter.', correct: false }
      - { value: 'To apply a filter to a block of template code.', correct: true }
      - { value: 'To conditionally apply a filter based on an expression.', correct: false }
      - { value: 'To escape a block of code.', correct: false }
    help: |
      The `apply` tag allows you to apply a Twig filter to a block of template data.
      https://twig.symfony.com/doc/3.x/tags/apply.html

  -
    question: >
      Which Twig function is used to convert a string to a `Slug` (URL-friendly string)?
    answers:
      - { value: '`slugify()`', correct: false }
      - { value: '`slug()`', correct: true }
      - { value: '`url_encode()`', correct: false }
      - { value: '`transliterate()`', correct: false }
    help: |
      The `slug()` function (provided by `Symfony\Bridge\Twig\Extension\StringExtension`) converts a string into a URL-friendly slug.
      https://symfony.com/doc/current/components/string.html#twig-integration

  -
    question: >
      How can you check if an array or string contains a specific value in Twig?
    answers:
      - { value: '`value in array` or `value in string`', correct: true }
      - { value: '`array.contains(value)` or `string.contains(value)`', correct: false }
      - { value: '`in_array(value, array)` or `str_contains(string, value)`', correct: false }
      - { value: '`array | has(value)` or `string | has(value)`', correct: false }
    help: |
      The `in` operator is used to check for the existence of a value within an array or a substring within a string.
      https://twig.symfony.com/doc/3.x/templates.html#operators

  -
    question: >
      What is the purpose of the `{% set variable = value %}` tag in Twig?
    answers:
      - { value: 'To define a global variable accessible throughout the application.', correct: false }
      - { value: 'To assign a value to a variable within the current template scope.', correct: true }
      - { value: 'To declare a constant value.', correct: false }
      - { value: 'To create a new Twig function.', correct: false }
    help: |
      The `set` tag assigns values to variables within the current template scope.
      https://twig.symfony.com/doc/3.x/tags/set.html

  -
    question: >
      Which Twig filter can be used to convert a string to lowercase?
    answers:
      - { value: '`lower`', correct: true }
      - { value: '`lowercase`', correct: false }
      - { value: '`to_lower`', correct: false }
      - { value: '`strtolower`', correct: false }
    help: |
      The `lower` filter converts a string to lowercase.
      https://twig.symfony.com/doc/3.x/filters/lower.html

  -
    question: >
      How can you access the current request method (e.g., GET, POST) in a Twig template?
    answers:
      - { value: '`{{ app.request.method }}`', correct: true }
      - { value: '`{{ request.method }}`', correct: false }
      - { value: '`{{ app.method }}`', correct: false }
      - { value: '`{{ app.http_method }}`', correct: false }
    help: |
      The `app.request` object provides access to the current `Request` object, including its method.
      https://symfony.com/doc/current/templates.html#global-variables

  -
    question: >
      What is the purpose of the `{% autoescape %}` tag in Twig?
    answers:
      - { value: 'To enable or disable automatic escaping for a specific block of template code.', correct: true }
      - { value: 'To define a custom escaping strategy for the entire template.', correct: false }
      - { value: 'To escape all variables within the block regardless of their context.', correct: false }
      - { value: 'To prevent any escaping from occurring within the block.', correct: false }
    help: |
      The `autoescape` tag allows you to enable or disable automatic escaping for a specific section of a template, or to change the escaping strategy.
      https://twig.symfony.com/doc/3.x/tags/autoescape.html

  -
    question: |
      Which Twig function is used to create an array?
    answers:
      - { value: '`array()`', correct: false }
      - { value: '`[]`', correct: true }
      - { value: '`list()`', correct: false }
      - { value: '`new Array()`', correct: false }
    help: |
      Twig supports array literals using square brackets `[]`.
      https://twig.symfony.com/doc/3.x/templates.html#literals

  -
    question: |
      How can you get the first element of an array named `items` in Twig?
    answers:
      - { value: '`{{ items[0] }}`', correct: true }
      - { value: '`{{ items.first }}`', correct: false }
      - { value: '`{{ first(items) }}`', correct: false }
      - { value: '`{{ items|first }}`', correct: false }
    help: |
      Array elements are accessed using square bracket notation with a zero-based index.
      https://twig.symfony.com/doc/3.x/templates.html#accessing-elements-of-an-array

  -
    question: >
      Which Twig filter is used to convert a value to JSON format?
    answers:
      - { value: '`json`', correct: true }
      - { value: '`to_json`', correct: false }
      - { value: '`json_encode`', correct: false }
      - { value: '`serialize('json')`', correct: false }
    help: |
      The `json` filter converts a value to JSON format.
      https://twig.symfony.com/doc/3.x/filters/json.html

  -
    question: >
      What is the purpose of the `{% verbatim %}` tag in Twig?
    answers:
      - { value: 'To prevent Twig from parsing the content within the tag, treating it as plain text.', correct: true }
      - { value: 'To include a file without parsing it as a Twig template.', correct: false }
      - { value: 'To comment out a large block of Twig code.', correct: false }
      - { value: 'To disable automatic escaping for the enclosed content.', correct: false }
    help: |
      The `verbatim` tag marks a section of a template as raw text that should not be parsed by Twig.
      https://twig.symfony.com/doc/3.x/tags/verbatim.html

  -
    question: >
      How can you check if a variable is an instance of a specific class or interface in Twig?
    answers:
      - { value: '`variable is of_type('ClassName')`', correct: false }
      - { value: '`variable is instance of 'ClassName'`', correct: true }
      - { value: '`is_instance_of(variable, 'ClassName')`', correct: false }
      - { value: '`variable.instanceof('ClassName')`', correct: false }
    help: |
      The `instance of` test checks if an object is an instance of a given class or interface.
      https://twig.symfony.com/doc/3.x/tests/instanceof.html

  -
    question: >
      Which Twig filter is used to format a number as currency, often with decimals and separators?
    answers:
      - { value: '`currency`', correct: false }
      - { value: '`money`', correct: false }
      - { value: '`price`', correct: true }
      - { value: '`number_format`', correct: false }
    help: |
      The `price` filter (if provided by a custom extension or a bundle like `IntlBundle`) is commonly used for currency formatting.
      https://symfony.com/doc/current/templates.html#using-a-custom-twig-price-filter-in-templates (referencing a custom filter example)

  -
    question: >
      What is the purpose of the `{% block %}...{% endblock %}` tag in Twig?
    answers:
      - { value: 'To define a reusable component that can be included anywhere.', correct: false }
      - { value: 'To define a section of content that can be overridden by child templates.', correct: true }
      - { value: 'To create a new Twig macro.', correct: false }
      - { value: 'To mark a section of code for caching.', correct: false }
    help: |
      Blocks are used in template inheritance to define areas of content that can be filled in or overridden by child templates.
      https://symfony.com/doc/current/templates.html#template-inheritance

  -
    question: >
      Which Twig function can be used to generate an absolute URL for a route, including the domain?
    answers:
      - { value: '`path()`', correct: false }
      - { value: '`url()`', correct: true }
      - { value: '`absolute_path()`', correct: false }
      - { value: '`route_url()`', correct: false }
    help: |
      The `url()` function generates a full absolute URL for a given route, including the scheme and host.
      https://symfony.com/doc/current/routing.html#generating-urls-in-templates

  -
    question: >
      What is the recommended way to manage page-specific JavaScript and CSS assets when using Webpack Encore with Twig?
    answers:
      - { value: 'Manually include `<script>` and `<link>` tags for each asset.', correct: false }
      - { value: 'Use `encore_entry_script_tags()` and `encore_entry_link_tags()` within Twig blocks that extend a base template.', correct: true }
      - { value: 'Inject asset paths directly into the controller and pass them to Twig.', correct: false }
      - { value: 'Store all assets in the `public/build` directory and link them directly.', correct: false }
    help: |
      Webpack Encore's Twig functions (`encore_entry_script_tags`, `encore_entry_link_tags`) are designed for including compiled entry points, often within `javascripts` and `stylesheets` blocks.
      https://symfony.com/doc/current/frontend/encore/simple-example.html#including-assets-in-twig

  -
    question: >
      Which Twig filter is used to format a number with thousands separators and a specific number of decimal places?
    answers:
      - { value: '`number_format`', correct: true }
      - { value: '`format_number`', correct: false }
      - { value: '`decimal_format`', correct: false }
      - { value: '`numeric`', correct: false }
    help: |
      The `number_format` filter formats a number with grouped thousands and a specified number of decimals.
      https://twig.symfony.com/doc/3.x/filters/number_format.html

  -
    question: >
      What is the purpose of the `app.environment` global variable in Twig?
    answers:
      - { value: 'It indicates the current PHP version being used.', correct: false }
      - { value: 'It provides the name of the current Symfony environment (e.g., 'dev', 'prod').', correct: true }
      - { value: 'It defines the default locale for translations.', correct: false }
      - { value: 'It specifies the current application version number.', correct: false }
    help: |
      The `app.environment` variable exposes the current Symfony environment name.
      https://symfony.com/doc/current/templates.html#global-variables

  -
    question: >
      How can you check if a variable is defined in Twig?
    answers:
      - { value: '`variable is exists`', correct: false }
      - { value: '`variable is defined`', correct: true }
      - { value: '`isset(variable)`', correct: false }
      - { value: '`variable is not null`', correct: false }
    help: |
      The `defined` test checks if a variable is defined in the current context.
      https://twig.symfony.com/doc/3.x/tests/defined.html

  -
    question: >
      What is the primary function of the `Twig\Environment` service in Symfony?
    answers:
      - { value: 'To manage all Twig template files on the filesystem.', correct: false }
      - { value: 'To compile Twig templates into PHP classes and render them.', correct: true }
      - { value: 'To provide a global registry for all Twig filters and functions.', correct: false }
      - { value: 'To handle asset versioning for Twig templates.', correct: false }
    help: |
      The `Twig\Environment` class is the central class of Twig and is used to load templates and render them.
      https://symfony.com/doc/current/templates.html#rendering-templates-in-services

  -
    question: >
      Which Twig filter is used to convert a string to title case (first letter of each word capitalized)?
    answers:
      - { value: '`title`', correct: true }
      - { value: '`capitalize`', correct: false }
      - { value: '`ucwords`', correct: false }
      - { value: '`to_title`', correct: false }
    help: |
      The `title` filter converts a string to title case.
      https://twig.symfony.com/doc/3.x/filters/title.html

  -
    question: >
      What is the purpose of the `app.session` global variable in Twig?
    answers:
      - { value: 'To access the current HTTP session data.', correct: true }
      - { value: 'To manage user authentication tokens.', correct: false }
      - { value: 'To store application-wide configuration settings.', correct: false }
      - { value: 'To handle flash messages only.', correct: false }
    help: |
      The `app.session` variable provides access to the current HTTP session, allowing you to retrieve session attributes and flash messages.
      https://symfony.com/doc/current/templates.html#global-variables

  -
    question: >
      How can you display a flash message named 'notice' in Twig?
    answers:
      - { value: '`{{ app.session.flash('notice') }}`', correct: false }
      - { value: '`{% for message in app.flashes('notice') %}{{ message }}{% endfor %}`', correct: true }
      - { value: '`{{ app.session.getFlashBag().get('notice') }}`', correct: false }
      - { value: '`{{ app.flash('notice') }}`', correct: false }
    help: |
      Flash messages are retrieved using `app.flashes('type')` which returns an array of messages for that type.
      https://symfony.com/doc/current/controller.html#flash-messages

  -
    question: >
      Which Twig function allows you to create a range of numbers or characters?
    answers:
      - { value: '`range()`', correct: true }
      - { value: '`sequence()`', correct: false }
      - { value: '`numbers()`', correct: false }
      - { value: '`series()`', correct: false }
    help: |
      The `range()` function creates a list containing an arithmetic progression of integers or characters.
      https://twig.symfony.com/doc/3.x/functions/range.html

  -
    question: >
      What is the purpose of the `app.request.query` global variable in Twig?
    answers:
      - { value: 'To access POST request parameters.', correct: false }
      - { value: 'To access GET request parameters (query string).', correct: true }
      - { value: 'To access HTTP headers.', correct: false }
      - { value: 'To access route parameters.', correct: false }
    help: |
      `app.request.query` provides access to the `ParameterBag` containing the GET parameters from the URL query string.
      https://symfony.com/doc/current/templates.html#global-variables

  -
    question: >
      Which Twig filter is used to reverse an array or a string?
    answers:
      - { value: '`reverse`', correct: true }
      - { value: '`flip`', correct: false }
      - { value: '`invert`', correct: false }
      - { value: '`array_reverse`', correct: false }
    help: |
      The `reverse` filter reverses a string or an array.
      https://twig.symfony.com/doc/3.x/filters/reverse.html

  -
    question: >
      How can you check if a variable is an array in Twig?
    answers:
      - { value: '`variable is array`', correct: true }
      - { value: '`is_array(variable)`', correct: false }
      - { value: '`variable.is_array`', correct: false }
      - { value: '`variable is a_list`', correct: false }
    help: |
      The `array` test checks if a variable is an array.
      https://twig.symfony.com/doc/3.x/tests/array.html

  -
    question: >
      What is the purpose of the `app.user` global variable in Twig?
    answers:
      - { value: 'To access the currently authenticated user object.', correct: true }
      - { value: 'To get a list of all users in the system.', correct: false }
      - { value: 'To manage user roles and permissions.', correct: false }
      - { value: 'To retrieve user-specific settings from the database.', correct: false }
    help: |
      The `app.user` variable provides access to the `UserInterface` object representing the currently authenticated user.
      https://symfony.com/doc/current/templates.html#global-variables

  -
    question: >
      Which Twig filter is used to convert a string to a URL-encoded string?
    answers:
      - { value: '`url_encode`', correct: true }
      - { value: '`encode_url`', correct: false }
      - { value: '`uri_encode`', correct: false }
      - { value: '`rawurlencode`', correct: false }
    help: |
      The `url_encode` filter URL-encodes a string.
      https://twig.symfony.com/doc/3.x/filters/url_encode.html

  -
    question: >
      What is the purpose of the `app.request.attributes` global variable in Twig?
    answers:
      - { value: 'To access HTTP headers from the request.', correct: false }
      - { value: 'To access attributes set by the router or other parts of the application (e.g., route parameters).', correct: true }
      - { value: 'To access POST request parameters.', correct: false }
      - { value: 'To access session attributes.', correct: false }
    help: |
      `app.request.attributes` provides access to the `ParameterBag` containing attributes set during the request lifecycle, including route parameters.
      https://symfony.com/doc/current/templates.html#global-variables

  -
    question: >
      Which Twig filter is used to remove HTML tags from a string?
    answers:
      - { value: '`strip_tags`', correct: true }
      - { value: '`remove_html`', correct: false }
      - { value: '`html_strip`', correct: false }
      - { value: '`clean_html`', correct: false }
    help: |
      The `strip_tags` filter strips HTML and PHP tags from a string.
      https://twig.symfony.com/doc/3.x/filters/striptags.html

  -
    question: >
      How can you check if a variable is iterable (e.g., an array or an object that can be looped over) in Twig?
    answers:
      - { value: '`variable is iterable`', correct: true }
      - { value: '`is_iterable(variable)`', correct: false }
      - { value: '`variable.is_iterable`', correct: false }
      - { value: '`variable is traversable`', correct: false }
    help: |
      The `iterable` test checks if a variable is iterable.
      https://twig.symfony.com/doc/3.x/tests/iterable.html

  -
    question: >
      Which Twig filter is used to sort an array?
    answers:
      - { value: '`sort`', correct: true }
      - { value: '`order`', correct: false }
      - { value: '`array_sort`', correct: false }
      - { value: '`sorted`', correct: false }
    help: |
      The `sort` filter sorts an array.
      https://twig.symfony.com/doc/3.x/filters/sort.html

  -
    question: >
      What is the purpose of the `app.debug` global variable in Twig?
    answers:
      - { value: 'It indicates if the current user has debugging permissions.', correct: false }
      - { value: 'It controls whether the Web Debug Toolbar is displayed.', correct: false }
      - { value: 'It reflects the `APP_DEBUG` environment variable, indicating if the application is in debug mode.', correct: true }
      - { value: 'It enables verbose logging in Twig templates.', correct: false }
    help: |
      The `app.debug` variable is a boolean that indicates whether the application is running in debug mode, typically controlled by the `APP_DEBUG` environment variable.
      https://symfony.com/doc/current/templates.html#global-variables

  -
    question: >
      Which Twig function is used to get the current date and time?
    answers:
      - { value: '`now()`', correct: true }
      - { value: '`current_datetime()`', correct: false }
      - { value: '`date()` with no arguments', correct: false }
      - { value: '`datetime()`', correct: false }
    help: |
      The `now()` function returns the current date and time as a `DateTime` object.
      https://twig.symfony.com/doc/3.x/functions/now.html

  -
    question: >
      How can you check if a variable is a string in Twig?
    answers:
      - { value: '`variable is string`', correct: true }
      - { value: '`is_string(variable)`', correct: false }
      - { value: '`variable.is_string`', correct: false }
      - { value: '`variable is text`', correct: false }
    help: |
      The `string` test checks if a variable is a string.
      https://twig.symfony.com/doc/3.x/tests/string.html

  -
    question: >
      What is the purpose of the `app.request.request` global variable in Twig?
    answers:
      - { value: 'To access GET request parameters.', correct: false }
      - { value: 'To access POST request parameters (form data).', correct: true }
      - { value: 'To access HTTP headers.', correct: false }
      - { value: 'To access route parameters.', correct: false }
    help: |
      `app.request.request` provides access to the `ParameterBag` containing the POST parameters (form data).
      https://symfony.com/doc/current/templates.html#global-variables

  -
    question: >
      Which Twig filter is used to truncate a string to a specified length, optionally adding an ellipsis?
    answers:
      - { value: '`truncate`', correct: true }
      - { value: '`limit`', correct: false }
      - { value: '`substring`', correct: false }
      - { value: '`cut`', correct: false }
    help: |
      The `truncate` filter truncates a string to the given length.
      https://twig.symfony.com/doc/3.x/filters/truncate.html

  -
    question: >
      How can you check if a variable is a number (integer or float) in Twig?
    answers:
      - { value: '`variable is number`', correct: true }
      - { value: '`is_numeric(variable)`', correct: false }
      - { value: '`variable.is_numeric`', correct: false }
      - { value: '`variable is int or variable is float`', correct: false }
    help: |
      The `number` test checks if a variable is a number (integer or float).
      https://twig.symfony.com/doc/3.x/tests/number.html

  -
    question: >
      What is the purpose of the `app.request.cookies` global variable in Twig?
    answers:
      - { value: 'To access HTTP headers from the request.', correct: false }
      - { value: 'To access cookies sent with the request.', correct: true }
      - { value: 'To set new cookies in the response.', correct: false }
      - { value: 'To manage session data.', correct: false }
    help: |
      `app.request.cookies` provides access to the `ParameterBag` containing the cookies sent with the request.
      https://symfony.com/doc/current/templates.html#global-variables

  -
    question: >
      Which Twig filter is used to replace all occurrences of a substring within a string?
    answers:
      - { value: '`replace`', correct: true }
      - { value: '`str_replace`', correct: false }
      - { value: '`substitute`', correct: false }
      - { value: '`change`', correct: false }
    help: |
      The `replace` filter replaces all occurrences of a string with the given replacement.
      https://twig.symfony.com/doc/3.x/filters/replace.html

  -
    question: >
      How can you check if a variable is a boolean (true or false) in Twig?
    answers:
      - { value: '`variable is boolean`', correct: true }
      - { value: '`is_bool(variable)`', correct: false }
      - { value: '`variable.is_bool`', correct: false }
      - { value: '`variable is true or variable is false`', correct: false }
    help: |
      The `boolean` test checks if a variable is a boolean.
      https://twig.symfony.com/doc/3.x/tests/boolean.html

  -
    question: >
      What is the purpose of the `app.request.headers` global variable in Twig?
    answers:
      - { value: 'To access GET request parameters.', correct: false }
      - { value: 'To access HTTP headers sent with the request.', correct: true }
      - { value: 'To access POST request parameters.', correct: false }
      - { value: 'To access server environment variables.', correct: false }
    help: |
      `app.request.headers` provides access to the `HeaderBag` containing the HTTP headers from the request.
      https://symfony.com/doc/current/templates.html#global-variables

  -
    question: >
      Which Twig filter is used to convert a string to a URL-decoded string?
    answers:
      - { value: '`url_decode`', correct: true }
      - { value: '`decode_url`', correct: false }
      - { value: '`uri_decode`', correct: false }
      - { value: '`rawurldecode`', correct: false }
    help: |
      The `url_decode` filter URL-decodes a string.
      https://twig.symfony.com/doc/3.x/filters/url_decode.html

  -
    question: >
      How can you check if a variable is an object in Twig?
    answers:
      - { value: '`variable is object`', correct: true }
      - { value: '`is_object(variable)`', correct: false }
      - { value: '`variable.is_object`', correct: false }
      - { value: '`variable is a_class`', correct: false }
    help: |
      The `object` test checks if a variable is an object.
      https://twig.symfony.com/doc/3.x/tests/object.html

  -
    question: >
      What is the purpose of the `app.request.server` global variable in Twig?
    answers:
      - { value: 'To access HTTP headers.', correct: false }
      - { value: 'To access server environment variables (e.g., `$_SERVER`).', correct: true }
      - { value: 'To access session data.', correct: false }
      - { value: 'To access application configuration parameters.', correct: false }
    help: |
      `app.request.server` provides access to the `ParameterBag` containing the server parameters, similar to PHP's `$_SERVER`.
      https://symfony.com/doc/current/templates.html#global-variables

  -
    question: >
      Which Twig filter is used to convert a string to a valid JSON string, handling special characters?
    answers:
      - { value: '`json_encode`', correct: false }
      - { value: '`json`', correct: true }
      - { value: '`to_json`', correct: false }
      - { value: '`serialize(format='json')`', correct: false }
    help: |
      The `json` filter converts a value to JSON format.
      https://twig.symfony.com/doc/3.x/filters/json.html

  -
    question: >
      How can you check if a variable is an integer in Twig?
    answers:
      - { value: '`variable is integer`', correct: true }
      - { value: '`is_int(variable)`', correct: false }
      - { value: '`variable.is_int`', correct: false }
      - { value: '`variable is whole_number`', correct: false }
    help: |
      The `integer` test checks if a variable is an integer.
      https://twig.symfony.com/doc/3.x/tests/integer.html

  -
    question: >
      What is the purpose of the `app.request.files` global variable in Twig?
    answers:
      - { value: 'To access uploaded files from a form submission.', correct: true }
      - { value: 'To list all files in the project''s `public` directory.', correct: false }
      - { value: 'To manage file system operations within Twig.', correct: false }
      - { value: 'To access file paths of included templates.', correct: false }
    help: |
      `app.request.files` provides access to the `FileBag` containing uploaded files, similar to PHP's `$_FILES`.
      https://symfony.com/doc/current/templates.html#global-variables

  -
    question: >
      Which Twig filter is used to join elements of an array into a single string with a specified separator?
    answers:
      - { value: '`join`', correct: true }
      - { value: '`implode`', correct: false }
      - { value: '`concat_array`', correct: false }
      - { value: '`merge`', correct: false }
    help: |
      The `join` filter returns a string which is the concatenation of the items of a sequence.
      https://twig.symfony.com/doc/3.x/filters/join.html

  -
    question: >
      How can you check if a variable is a float (decimal number) in Twig?
    answers:
      - { value: '`variable is float`', correct: true }
      - { value: '`is_float(variable)`', correct: false }
      - { value: '`variable.is_float`', correct: false }
      - { value: '`variable is decimal`', correct: false }
    help: |
      The `float` test checks if a variable is a float.
      https://twig.symfony.com/doc/current/filters/float.html

  -
    question: >
      What is the purpose of the `app.request.locale` global variable in Twig?
    answers:
      - { value: 'To set the locale for the current request.', correct: false }
      - { value: 'To access the locale determined for the current request.', correct: true }
      - { value: 'To get a list of all supported locales.', correct: false }
      - { value: 'To translate strings in the template.', correct: false }
    help: |
      `app.request.locale` provides access to the locale that has been determined for the current request.
      https://symfony.com/doc/current/templates.html#global-variables