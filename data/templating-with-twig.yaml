category: Templating with Twig

questions:
  -
    question: >
      Which Twig delimiter is used to execute statements such as loops or conditional logic?
    answers:
      -
        value: >
          `{{ ... }}`
        correct: false
      -
        value: >
          `{# ... #}`
        correct: false
      -
        value: >
          `{% ... %}`
        correct: true
      -
        value: >
          `<!-- ... -->`
        correct: false
    help: |
      The `{% ... %}` delimiter is used for control flow statements like `if`, `for`, `extends`, and `block`.
      https://symfony.com/doc/current/templates.html#basic-twig-template-structure-example

  -
    question: >
      By default, how does Twig handle output of variables to prevent Cross-Site Scripting (XSS) attacks?
    answers:
      -
        value: >
          It automatically escapes all output using the `e` filter.
        correct: true
      -
        value: >
          It requires manual escaping using the `raw` filter for safe content.
        correct: false
      -
        value: >
          It only escapes variables explicitly marked as unsafe.
        correct: false
      -
        value: >
          It relies on the browser's built-in XSS protection.
        correct: false
    help: |
      Twig automatically escapes all output by default to prevent XSS attacks. This behavior can be controlled, but it's enabled by default.
      https://symfony.com/doc/current/templates.html#automatic-output-escaping-in-twig

  -
    question: |
      Given the following Twig template, what is the correct way to extend a base layout?

      ```twig
      {# templates/blog/index.html.twig #}
      {# ??? #} 'base.html.twig' %}

      {% block content %}
          <h1>Welcome to the blog!</h1>
      {% endblock %}
      ```
    answers:
      -
        value: >
          `{% include %}`
        correct: false
      -
        value: >
          `{% uses %}`
        correct: false
      -
        value: >
          `{% extends %}`
        correct: true
      -
        value: >
          `{% import %}`
        correct: false
    help: |
      The `{% extends %}` tag is used to set up template inheritance, allowing a child template to inherit from a parent layout.
      https://symfony.com/doc/current/templates.html#template-inheritance

  -
    question: >
      Which global variable in Twig provides access to common application-specific data like the current user, request, and environment?
    answers:
      -
        value: >
          `symfony`
        correct: false
      -
        value: >
          `kernel`
        correct: false
      -
        value: >
          `app`
        correct: true
      -
        value: >
          `container`
        correct: false
    help: |
      The `app` global variable provides access to various application-specific data, including the authenticated user (`app.user`), the request object (`app.request`), and the application environment (`app.environment`).
      https://symfony.com/doc/current/templates.html#access-application-data-with-twig-app-global-variable

  -
    question: |
      What is the correct Twig syntax to display the current date formatted as "YYYY-MM-DD"?

      ```twig
      <p>Today's date: {{ 'now'|???('Y-m-d') }}</p>
      ```
    answers:
      -
        value: >
          `format`
        correct: false
      -
        value: >
          `date`
        correct: true
      -
        value: >
          `datetime`
        correct: false
      -
        value: >
          `time`
        correct: false
    help: |
      The `date` filter formats a date to a given format. The first argument is the format string.
      https://twig.symfony.com/doc/3.x/filters/date.html

  -
    question: |
      Consider the following Twig code:

      ```twig
      {# templates/blog/index.html.twig #}
      {{ include('blog/_user_profile.html.twig', {user: blog_post.author}) }}
      ```
      What is the purpose of `{user: blog_post.author}` in the `include` function?
    answers:
      -
        value: >
          It defines a new global variable named `user` for the entire application.
        correct: false
      -
        value: >
          It renames the `blog_post.author` variable to `user` specifically for the included template.
        correct: true
      -
        value: >
          It makes the `user` variable available only if `blog_post.author` is null.
        correct: false
      -
        value: >
          It passes the `user` variable by reference to the included template.
        correct: false
    help: |
      The second argument of the `include()` function is an array of variables to pass to the included template. This allows you to rename variables or pass additional context.
      https://symfony.com/doc/current/templates.html#include-twig-template-fragment-with-variable-renaming

  -
    question: |
      Which Twig tag is used to iterate over an array or traversable object?
    answers:
      -
        value: >
          `{% loop %}`
        correct: false
      -
        value: >
          `{% each %}`
        correct: false
      -
        value: >
          `{% iterate %}`
        correct: false
      -
        value: >
          `{% for %}`
        correct: true
    help: |
      The `{% for %}` tag is used to loop over arrays or objects that implement the `Traversable` interface.
      https://twig.symfony.com/doc/3.x/tags/for.html

  -
    question: |
      Which Twig function should you use to generate a relative URL to a Symfony route?
    answers:
      -
        value: >
          `url()`
        correct: false
      -
        value: >
          `route()`
        correct: false
      -
        value: >
          `path()`
        correct: true
      -
        value: >
          `link()`
        correct: false
    help: |
      The `path()` function generates a relative URL for a given route.
      https://symfony.com/doc/current/routing.html#generating-urls-in-twig-templates-for-javascript

  -
    question: >
      In a Symfony controller extending `AbstractController`, which method is used to render a Twig template and return a `Response` object directly?
    answers:
      -
        value: >
          `renderView()`
        correct: false
      -
        value: >
          `render()`
        correct: true
      -
        value: >
          `display()`
        correct: false
      -
        value: >
          `show()`
        correct: false
    help: |
      The `render()` method, available in controllers extending `AbstractController`, renders a Twig template and returns a `Response` object.
      https://symfony.com/doc/current/templates.html#render-twig-templates-in-symfony-controller-using-render-and-renderview

  -
    question: |
      What is the correct Twig filter to translate a string, optionally specifying a domain and locale?
    answers:
      -
        value: >
          `translate`
        correct: false
      -
        value: >
          `trans`
        correct: true
      -
        value: >
          `i18n`
        correct: false
      -
        value: >
          `locale`
        correct: false
    help: |
      The `trans` filter is used for translating strings in Twig templates. It supports specifying variables, a translation domain, and a locale.
      https://symfony.com/doc/current/reference/twig_reference.html#trans

  -
    question: |
      Which of the following is the correct Twig syntax for basic string interpolation (displaying a variable's value)?
    answers:
      -
        value: >
          `{% variable %}`
        correct: false
      -
        value: >
          `{{ variable }}`
        correct: true
      -
        value: >
          `{# variable #}`
        correct: false
      -
        value: >
          `<%= variable %>`
        correct: false
    help: |
      The `{{ ... }}` delimiter is used to output the content of a variable or the result of an expression.
      https://symfony.com/doc/current/templates.html#basic-twig-template-structure-example

  -
    question: |
      Which Twig function should be used to generate a URL to a static asset (e.g., an image, CSS, or JS file) located in the `public/` directory?
    answers:
      -
        value: >
          `url()`
        correct: false
      -
        value: >
          `resource()`
        correct: false
      -
        value: >
          `asset()`
        correct: true
      -
        value: >
          `static()`
        correct: false
    help: |
      The `asset()` Twig function is used to generate URLs for static assets, automatically handling base paths for application portability.
      https://symfony.com/doc/current/templates.html#link-static-assets-with-twig-asset-function

  -
    question: |
      Which Twig function or tag is primarily used for debugging variables by dumping their contents to the Web Debug Toolbar?
    answers:
      -
        value: >
          `{{ dump() }}`
        correct: false
      -
        value: >
          `{% var_dump %}`
        correct: false
      -
        value: >
          `{% dump %}`
        correct: true
      -
        value: >
          `{{ debug() }}`
        correct: false
    help: |
      The `{% dump %}` tag sends the contents of a variable to the Web Debug Toolbar, making it useful for debugging without cluttering the page output.
      https://symfony.com/doc/current/templates.html#use-twig-dump-tag-and-function

  -
    question: >
      What is the purpose of the `{# ... #}` delimiter in Twig?
    answers:
      -
        value: >
          To output the value of a variable.
        correct: false
      -
        value: >
          To define a block of executable code.
        correct: false
      -
        value: >
          To add comments that are ignored by the Twig parser and not rendered in the output.
        correct: true
      -
        value: >
          To include another template file.
        correct: false
    help: |
      The `{# ... #}` delimiter is used for comments in Twig templates. These comments are not included in the final rendered HTML.
      https://twig.symfony.com/doc/3.x/templates.html#comments

  -
    question: |
      If you want to explicitly disable auto-escaping for a specific variable in Twig, which filter should you use?
    answers:
      -
        value: >
          `safe`
        correct: false
      -
        value: >
          `raw`
        correct: true
      -
        value: >
          `unescape`
        correct: false
      -
        value: >
          `html`
        correct: false
    help: |
      The `raw` filter can be used to explicitly mark a variable as "safe" and prevent Twig from escaping its content. Use with caution as it can introduce XSS vulnerabilities if the content is not trusted.
      https://twig.symfony.com/doc/3.x/filters/raw.html

  -
    question: |
      In Twig template inheritance, how do you render the content of a block from the parent template within an overridden block in the child template?
    answers:
      -
        value: >
          `{{ super() }}`
        correct: false
      -
        value: >
          `{{ parent() }}`
        correct: true
      -
        value: >
          `{{ self() }}`
        correct: false
      -
        value: >
          `{{ block() }}`
        correct: false
    help: |
      The `{{ parent() }}` function is used inside a `{% block %}` to render the content of the block from the parent template.
      https://twig.symfony.com/doc/3.x/tags/extends.html#how-to-use-parent-blocks

  -
    question: |
      Which property of the `app` global variable in Twig allows you to check if a user is authenticated?
    answers:
      -
        value: >
          `app.security`
        correct: false
      -
        value: >
          `app.user`
        correct: true
      -
        value: >
          `app.session`
        correct: false
      -
        value: >
          `app.auth`
        correct: false
    help: |
      The `app.user` property provides access to the currently authenticated user object. You can check its existence or use `is_granted()` for more detailed access control.
      https://symfony.com/doc/current/security.html#fetch-authenticated-user-in-twig-template

  -
    question: |
      Which Twig filter is commonly used to count the number of items in an array or the length of a string?
    answers:
      -
        value: >
          `count`
        correct: false
      -
        value: >
          `size`
        correct: false
      -
        value: >
          `length`
        correct: true
      -
        value: >
          `num`
        correct: false
    help: |
      The `length` filter returns the number of items of a sequence or mapping, or the length of a string.
      https://twig.symfony.com/doc/3.x/filters/length.html

  -
    question: |
      What is the default behavior of variables passed to an included Twig template using `{{ include('template.html.twig') }}` without a second argument?
    answers:
      -
        value: >
          No variables are passed, the included template has an empty context.
        correct: false
      -
        value: >
          Only global variables are inherited by the included template.
        correct: false
      -
        value: >
          The included template inherits all variables from the parent template.
        correct: true
      -
        value: >
          The included template can only access variables explicitly defined within its own file.
        correct: false
    help: |
      By default, an included template has access to all variables of the active context.
      https://symfony.com/doc/current/templates.html#include-twig-template-fragment

  -
    question: |
      Which of the following is the correct way to use an `if` condition in Twig?
    answers:
      -
        value: >
          `{% if condition %}`
        correct: true
      -
        value: >
          `{{ if condition }}`
        correct: false
      -
        value: >
          `<if condition>`
        correct: false
      -
        value: >
          `<?php if (condition): ?>`
        correct: false
    help: |
      The `{% if %}` tag is used for conditional execution of blocks of code.
      https://twig.symfony.com/doc/3.x/tags/if.html

  -
    question: |
      When generating URLs in Twig for use in JavaScript, which filter should you apply to the `path()` function output to ensure it's safely embedded in a JavaScript string?
    answers:
      -
        value: >
          `|json_encode`
        correct: false
      -
        value: >
          `|escape('js')`
        correct: true
      -
        value: >
          `|raw`
        correct: false
      -
        value: >
          `|url_encode`
        correct: false
    help: |
      The `escape('js')` filter is crucial when embedding Twig-generated URLs into JavaScript to properly escape characters that could break the JavaScript string.
      https://symfony.com/doc/current/routing.html#generating-urls-in-twig-templates-for-javascript

  -
    question: >
      What is the primary difference between `render()` and `renderView()` methods in a Symfony controller when dealing with Twig templates?
    answers:
      -
        value: >
          `render()` returns the HTML content as a string, while `renderView()` returns a `Response` object.
        correct: false
      -
        value: >
          `render()` automatically handles caching, while `renderView()` does not.
        correct: false
      -
        value: >
          `render()` returns a `Response` object, while `renderView()` returns the rendered HTML content as a string.
        correct: true
      -
        value: >
          `render()` is for HTML templates, `renderView()` is for JSON responses.
        correct: false
    help: |
      `render()` is a shortcut that creates and returns a `Response` object with the rendered template content. `renderView()` only returns the rendered template content as a string, allowing you to create the `Response` object manually.
      https://symfony.com/doc/current/templates.html#render-twig-templates-in-symfony-controller-using-render-and-renderview

  -
    question: |
      To set a default translation domain for all subsequent translations within a specific Twig template, which tag should you use?
    answers:
      -
        value: >
          `{% default_domain 'app' %}`
        correct: false
      -
        value: >
          `{% trans_domain 'app' %}`
        correct: false
      -
        value: >
          `{% trans_default_domain 'app' %}`
        correct: true
      -
        value: >
          `{% set_translation_domain 'app' %}`
        correct: false
    help: |
      The `trans_default_domain` tag allows you to specify a default translation domain for all `trans` tags and filters in the current template.
      https://symfony.com/doc/current/translation.html#set-default-translation-domain-in-twig-template

  -
    question: |
      Which Symfony Encore Twig function is used to include the generated JavaScript files for a specific entry point?
    answers:
      -
        value: >
          `encore_entry_js_tags()`
        correct: false
      -
        value: >
          `encore_script_tags()`
        correct: false
      -
        value: >
          `encore_entry_script_tags()`
        correct: true
      -
        value: >
          `encore_javascript_tags()`
        correct: false
    help: |
      The `encore_entry_script_tags()` function is used to include the JavaScript files generated by Symfony Encore for a given entry point.
      https://symfony.com/doc/current/frontend/encore/simple-example.html#include-page-specific-assets-in-twig-templates

  -
    question: >
      What is the purpose of the `php bin/console debug:twig` command?
    answers:
      -
        value: >
          To clear the Twig cache.
        correct: false
      -
        value: >
          To list all available Twig functions, filters, and global variables.
        correct: true
      -
        value: >
          To compile Twig templates into PHP files.
        correct: false
      -
        value: >
          To generate new Twig templates.
        correct: false
    help: |
      The `debug:twig` command provides information about the Twig environment, including a list of all registered functions, filters, and global variables.
      https://symfony.com/doc/current/templates.html#inspect-twig-information-with-symfony-console

  -
    question: |
      Which attribute, introduced in Symfony 7.2, allows a controller method to return an array of parameters, with Symfony automatically rendering a Twig template and creating the `Response` object?
    answers:
      -
        value: >
          `#[Render]`
        correct: false
      -
        value: >
          `#[View]`
        correct: false
      -
        value: >
          `#[Template]`
        correct: true
      -
        value: >
          `#[Response]`
        correct: false
    help: |
      The `#[Template]` attribute (from `Symfony\Bridge\Twig\Attribute\Template`) allows a controller method to return an array of parameters, and Symfony automatically renders the associated Twig template and creates the `Response`.
      https://symfony.com/doc/current/templates.html#render-twig-templates-using-symfony-template-attribute

  -
    question: |
      Consider the following Twig template:

      ```twig
      <p>{{ user.name }} added this comment on {{ comment.publishedAt|date }}</p>
      ```
      Which of the following statements is TRUE regarding how Twig accesses `user.name` and `comment.publishedAt`?
    answers:
      -
        value: >
          Twig directly accesses public properties or calls public getter methods (e.g., `getName()`, `getPublishedAt()`).
        correct: true
      -
        value: >
          Twig only accesses public properties; getter methods are not supported.
        correct: false
      -
        value: >
          Twig requires explicit `get` prefixes for all method calls (e.g., `user.getName`).
        correct: false
      -
        value: >
          Twig uses PHP's magic `__get()` method exclusively for all property access.
        correct: false
    help: |
      Twig's dot notation (`.`) attempts to access a property, then a getter method (e.g., `getName()`), then an `is` or `has` method (e.g., `isName()`, `hasName()`), and finally checks if it's an array key.
      https://symfony.com/doc/current/templates.html#access-twig-template-variables

  -
    question: |
      Which of the following is an invalid Twig template inheritance scenario that would result in a `SyntaxError`?
    answers:
      -
        value: >
          Placing content outside a `{% block %}` tag after an `{% extends %}` declaration in a child template.
        correct: true
      -
        value: >
          Defining multiple blocks with the same name in a single template.
        correct: false
      -
        value: >
          Extending a template that itself extends another template.
        correct: false
      -
        value: >
          Using `{{ parent() }}` inside a block that is not overriding a parent block.
        correct: false
    help: |
      In Twig, when a template `extends` another, all content in the child template must be placed inside a `{% block %}` tag. Any content outside blocks will cause a `SyntaxError`.
      https://symfony.com/doc/current/templates.html#invalid-twig-template-inheritance-syntax

  -
    question: |
      To configure additional directories where Twig should look for templates, without assigning a namespace, which configuration option should be used in `config/packages/twig.yaml`?
    answers:
      -
        value: >
          `twig.template_dirs`
        correct: false
      -
        value: >
          `twig.paths` with a `~` (null) value for the namespace.
        correct: true
      -
        value: >
          `twig.directories`
        correct: false
      -
        value: >
          `twig.template_locations`
        correct: false
    help: |
      The `twig.paths` configuration option allows defining additional template directories. Using `~` (null) as the namespace value means templates in that directory are available without a namespace.
      https://symfony.com/doc/current/templates.html#configure-twig-template-paths-without-namespaces

  -
    question: |
      Which Twig function can be used to embed the output of another Symfony controller into the current template, either via a route or directly by controller service?
    answers:
      -
        value: >
          `include()`
        correct: false
      -
        value: >
          `embed()`
        correct: false
      -
        value: >
          `render()`
        correct: true
      -
        value: >
          `subrequest()`
        correct: false
    help: |
      The `render()` Twig function is used to embed the output of another controller into the current template, effectively making a sub-request.
      https://symfony.com/doc/current/templates.html#embed-symfony-controllers-in-twig-templates

  -
    question: |
      What is the purpose of the `stopwatch` Twig tag?
    answers:
      -
        value: >
          To pause the rendering of the template for a specified duration.
        correct: false
      -
        value: >
          To measure the execution time and memory usage of a specific block of Twig code for profiling.
        correct: true
      -
        value: >
          To prevent a block of code from being rendered on the page.
        correct: false
      -
        value: >
          To add a timestamp to the rendered output.
        correct: false
    help: |
      The `stopwatch` Twig tag allows you to profile the performance of specific sections within your Twig templates, with the data appearing in the Symfony profiler.
      https://symfony.com/doc/current/performance.html#profile-twig-template-code-with-stopwatch-tag

  -
    question: |
      When overriding a Twig template from a third-party bundle, why might you use the special `!` prefix in the `extends` tag (e.g., `{% extends "@!AcmeUser/registration/confirmed.html.twig" %}`)?
    answers:
      -
        value: >
          To force the template to be loaded from the bundle's original path, ignoring any local overrides.
        correct: false
      -
        value: >
          To prevent an infinite loop error when the overridden template itself extends the original template.
        correct: true
      -
        value: >
          To mark the template as deprecated.
        correct: false
      -
        value: >
          To indicate that the template should be cached aggressively.
        correct: false
    help: |
      The `!` prefix in `{% extends "@!BundleName/..." %}` is used to prevent infinite loop errors when overriding a template that itself extends the original template from the bundle. It ensures the original bundle template is extended.
      https://symfony.com/doc/current/bundles/override.html#override-twig-template-block-in-symfony-bundle

  -
    question: |
      Which console command can be used to check Twig templates for syntax errors and deprecations?
    answers:
      -
        value: >
          `php bin/console twig:lint`
        correct: false
      -
        value: >
          `php bin/console lint:twig`
        correct: true
      -
        value: >
          `php bin/console twig:validate`
        correct: false
      -
        value: >
          `php bin/console debug:twig --errors`
        correct: false
    help: |
      The `lint:twig` command is used to check Twig templates for syntax errors and can also show deprecated features used.
      https://symfony.com/doc/current/templates.html#lint-twig-templates-with-symfony-console

  -
    question: |
      How can you configure Twig to use a custom default path for templates, for example, `resources/views` instead of `templates/`?
    answers:
      -
        value: >
          By setting the `twig.template_dir` parameter in `services.yaml`.
        correct: false
      -
        value: >
          By setting the `twig.default_path` option in `config/packages/twig.yaml`.
        correct: true
      -
        value: >
          By modifying the `kernel.project_dir` parameter.
        correct: false
      -
        value: >
          By defining a new Twig loader service.
        correct: false
    help: |
      The `default_path` option under the `twig` configuration in `config/packages/twig.yaml` allows you to change the default directory where Twig looks for templates.
      https://symfony.com/doc/current/configuration/override_dir_structure.html#configure-twig-templates-directory

  -
    question: |
      When using `TemplatedEmail` to send emails with Twig, which method is used to specify the Twig template file for the HTML content of the email?
    answers:
      -
        value: >
          `setHtmlTemplate()`
        correct: false
      -
        value: >
          `htmlTemplate()`
        correct: true
      -
        value: >
          `templateHtml()`
        correct: false
      -
        value: >
          `renderHtml()`
        correct: false
    help: |
      The `htmlTemplate()` method of `TemplatedEmail` is used to specify the path to the Twig template that will render the HTML body of the email.
      https://symfony.com/doc/current/mailer.html#create-templatedemail-with-twig

  -
    question: |
      Which Twig filter can be used to serialize a PHP object into a specific format like JSON directly within the template?
    answers:
      -
        value: >
          `json_encode`
        correct: false
      -
        value: >
          `serialize`
        correct: true
      -
        value: >
          `to_json`
        correct: false
      -
        value: >
          `object_to_string`
        correct: false
    help: |
      The `serialize` filter can convert a PHP object into a specified format (e.g., JSON) using the Symfony Serializer component.
      https://symfony.com/doc/current/serializer.html#serialize-object-in-twig-template

  -
    question: |
      What is the correct way to render the opening `<form>` tag for a Symfony form named `form` in Twig?
    answers:
      -
        value: >
          `{{ form_start(form) }}`
        correct: true
      -
        value: >
          `{{ form(form) }}`
        correct: false
      -
        value: >
          `{% form_open(form) %}`
        correct: false
      -
        value: >
          `<form {{ form_attributes(form) }}>`
        correct: false
    help: |
      The `form_start(form)` Twig helper function renders the opening `<form>` tag, including the `action`, `method`, and `enctype` attributes.
      https://symfony.com/doc/current/form/form_collections.html#render-task-form-in-twig-template

  -
    question: |
      When configuring Twig template paths with namespaces (e.g., `@admin/dashboard.html.twig`), what is the correct YAML syntax in `config/packages/twig.yaml`?
    answers:
      -
        value: >
          ```yaml
          twig:
              paths:
                  'backend/templates': 'admin'
          ```
        correct: true
      -
        value: >
          ```yaml
          twig:
              namespaces:
                  'admin': 'backend/templates'
          ```
        correct: false
      -
        value: >
          ```yaml
          twig:
              template_namespaces:
                  admin: 'backend/templates'
          ```
        correct: false
      -
        value: >
          ```yaml
          twig:
              directories:
                  admin: 'backend/templates'
          ```
        correct: false
    help: |
      To assign a namespace to a custom template directory, you specify the directory path as the key and the namespace as the value under `twig.paths`.
      https://symfony.com/doc/current/templates.html#configure-twig-template-paths-with-namespaces

  -
    question: |
      Which Twig function is used to generate an absolute URL to a Symfony route?
    answers:
      -
        value: >
          `path()`
        correct: false
      -
        value: >
          `absolute_path()`
        correct: false
      -
        value: >
          `url()`
        correct: true
      -
        value: >
          `full_url()`
        correct: false
    help: |
      The `url()` function generates an absolute URL for a given route, including the scheme and host.
      https://symfony.com/doc/current/routing.html#generating-urls-in-twig-templates

  -
    question: |
      To render only a specific block from a Twig template directly from a Symfony controller method, which method should you use?
    answers:
      -
        value: >
          `renderBlock()`
        correct: true
      -
        value: >
          `renderPartial()`
        correct: false
      -
        value: >
          `renderSection()`
        correct: false
      -
        value: >
          `renderBlockView()` (returns string, not Response)
        correct: false
    help: |
      The `renderBlock()` method allows you to render a specific block from a Twig template and returns a `Response` object. `renderBlockView()` returns the content as a string.
      https://symfony.com/doc/current/templates.html#render-twig-template-blocks-in-symfony-controller

  -
    question: |
      When using `TranslatableMessage` objects in a controller, how can you pass them to a Twig template to be translated by the `trans` filter?
    answers:
      -
        value: >
          You must convert them to strings before passing to Twig.
        correct: false
      -
        value: >
          Twig's `trans` filter automatically handles `TranslatableMessage` objects.
        correct: true
      -
        value: >
          You need a custom Twig extension to process `TranslatableMessage` objects.
        correct: false
      -
        value: >
          `TranslatableMessage` objects are only for PHP-side translation, not Twig.
        correct: false
    help: |
      Twig's `trans` filter can directly handle `TranslatableMessage` objects, deferring the translation process to the template.
      https://symfony.com/doc/current/translation.html#use-translatablemessage-with-twig-trans-filter

  -
    question: |
      Which Symfony Encore Twig function is used to include the generated CSS files for a specific entry point?
    answers:
      -
        value: >
          `encore_entry_css_tags()`
        correct: false
      -
        value: >
          `encore_stylesheet_tags()`
        correct: false
      -
        value: >
          `encore_entry_link_tags()`
        correct: true
      -
        value: >
          `encore_style_tags()`
        correct: false
    help: |
      The `encore_entry_link_tags()` function is used to include the CSS files generated by Symfony Encore for a given entry point.
      https://symfony.com/doc/current/frontend/encore/simple-example.html#include-page-specific-assets-in-twig-templates

  -
    question: |
      Which method of the `Twig\Loader\FilesystemLoader` can be used to programmatically check if a specific Twig template exists?
    answers:
      -
        value: >
          `find()`
        correct: false
      -
        value: >
          `has()`
        correct: false
      -
        value: >
          `exists()`
        correct: true
      -
        value: >
          `locate()`
        correct: false
    help: |
      The `exists()` method of the Twig loader can be used to check if a template exists at a given path.
      https://symfony.com/doc/current/templates.html#check-twig-template-existence

  -
    question: |
      What is the correct way to inject the `Twig\Environment` service into a custom Symfony service to render templates programmatically?
    answers:
      -
        value: >
          Type-hint the constructor argument with `Twig\Environment`.
        correct: true
      -
        value: >
          Use the `#[Inject('twig')]` attribute.
        correct: false
      -
        value: >
          Call `Container::get('twig')` inside the service.
        correct: false
      -
        value: >
          Extend `AbstractController` in your service.
        correct: false
    help: |
      You can inject the `Twig\Environment` service into your own services by type-hinting it in the constructor, allowing you to use its `render()` method.
      https://symfony.com/doc/current/templates.html#render-twig-templates-in-symfony-service-by-injecting-twig-environment

  -
    question: |
      When defining a base Twig template (`base.html.twig`), what is the primary purpose of `{% block %}` tags?
    answers:
      -
        value: >
          To define reusable macros.
        correct: false
      -
        value: >
          To define sections of content that child templates can override or extend.
        correct: true
      -
        value: >
          To include external JavaScript files.
        correct: false
      -
        value: >
          To create new global variables.
        correct: false
    help: |
      `{% block %}` tags define areas in a parent template that child templates can fill in or override, enabling template inheritance.
      https://symfony.com/doc/current/templates.html#base-twig-template-structure-with-blocks

  -
    question: |
      Which global variable provides access to the current `Request` object in a Twig template?
    answers:
      -
        value: >
          `app.request`
        correct: true
      -
        value: >
          `request`
        correct: false
      -
        value: >
          `app.http_request`
        correct: false
      -
        value: >
          `app.current_request`
        correct: false
    help: |
      The `app.request` property of the `app` global variable provides access to the current `Request` object, allowing you to get information like the request method or path.
      https://symfony.com/doc/current/templates.html#access-application-data-with-twig-app-global-variable

  -
    question: |
      What is the correct way to include a Twig template fragment named `_sidebar.html.twig` in the current template?
    answers:
      -
        value: >
          `{% include '_sidebar.html.twig' %}`
        correct: true
      -
        value: >
          `{{ include('_sidebar.html.twig') }}`
        correct: false
      -
        value: >
          `{% import '_sidebar.html.twig' %}`
        correct: false
      -
        value: >
          `{{ render('_sidebar.html.twig') }}`
        correct: false
    help: |
      The `{% include %}` tag is used to include a template and return the rendered content of that template.
      https://twig.symfony.com/doc/3.x/tags/include.html

  -
    question: |
      Which of the following Twig functions is used to display workflow metadata for an object?
    answers:
      -
        value: >
          `workflow_get_metadata()`
        correct: false
      -
        value: >
          `workflow_metadata()`
        correct: true
      -
        value: >
          `get_workflow_info()`
        correct: false
      -
        value: >
          `workflow_data()`
        correct: false
    help: |
      The `workflow_metadata()` Twig function allows you to access and display metadata associated with workflows, places, and transitions.
      https://symfony.com/doc/current/workflow.html#displaying-workflow-metadata-in-twig-templates

  -
    question: |
      What is the purpose of the `default` option in the `render_hinclude` Twig function?
    answers:
      -
        value: >
          To specify a fallback template to render if the main content fails to load.
        correct: true
      -
        value: >
          To set the default HTTP method for the sub-request.
        correct: false
      -
        value: >
          To define default variables for the embedded controller.
        correct: false
      -
        value: >
          To specify the default cache lifetime for the embedded content.
        correct: false
    help: |
      The `default` option in `render_hinclude` specifies a template to be rendered as fallback content if the main embedded content cannot be loaded (e.g., due to a network error).
      https://symfony.com/doc/current/templates.html#specify-default-template-per-render-hinclude-call

  -
    question: |
      Which of the following is the correct way to check if a variable `user` is defined and not null in Twig?
    answers:
      -
        value: >
          `{% if user is defined and user is not null %}`
        correct: true
      -
        value: >
          `{% if user %}`
        correct: false
      -
        value: >
          `{% if user is not empty %}`
        correct: false
      -
        value: >
          `{% if user is set %}`
        correct: false
    help: |
      The `is defined` test checks if a variable is defined. Combining it with `is not null` ensures the variable exists and has a value. `{% if user %}` would also evaluate to false if `user` is `0`, `false`, or an empty string/array.
      https://twig.symfony.com/doc/3.x/tests/defined.html

  -
    question: |
      When using the `#[Template]` attribute on a controller method, what should the method return?
    answers:
      -
        value: >
          A `Response` object.
        correct: false
      -
        value: >
          A string representing the rendered HTML.
        correct: false
      -
        value: >
          An array of parameters to be passed to the template.
        correct: true
      -
        value: >
          `null`.
        correct: false
    help: |
      When using the `#[Template]` attribute, the controller method should return an array of parameters that will be passed to the Twig template. Symfony handles the creation of the `Response` object.
      https://symfony.com/doc/current/templates.html#render-twig-templates-using-symfony-template-attribute

  -
    question: |
      Which Twig filter is commonly used to format a numerical value as currency, often requiring custom implementation?
    answers:
      -
        value: >
          `currency`
        correct: false
      -
        value: >
          `money`
        correct: false
      -
        value: >
          `price` (if a custom filter is defined)
        correct: true
      -
        value: >
          `format_currency`
        correct: false
    help: |
      While Twig doesn't have a built-in `price` filter, this question refers to a common scenario where custom Twig filters are created to handle specific formatting needs like currency. The example provided in the documentation shows a custom `price` filter.
      https://symfony.com/doc/current/templates.html#using-a-custom-twig-price-filter-in-templates

  -
    question: |
      What is the recommended naming convention for variables passed from a Symfony controller to a Twig template?
    answers:
      -
        value: >
          `camelCase`
        correct: false
      -
        value: >
          `PascalCase`
        correct: false
      -
        value: >
          `snake_case`
        correct: true
      -
        value: >
          `kebab-case`
        correct: false
    help: |
      Twig recommends using `snake_case` for variable names passed to templates (e.g., `user_first_name` instead of `userFirstName`).
      https://symfony.com/doc/current/templates.html#symfony-controller-rendering-a-twig-template

  -
    question: |
      To explicitly define a text-only Twig template for an email when using `TemplatedEmail`, which method should be used in addition to `htmlTemplate()`?
    answers:
      -
        value: >
          `setTextTemplate()`
        correct: false
      -
        value: >
          `textTemplate()`
        correct: true
      -
        value: >
          `plainTextTemplate()`
        correct: false
      -
        value: >
          `addTextTemplate()`
        correct: false
    help: |
      The `textTemplate()` method of `TemplatedEmail` allows you to specify a Twig template for the plain text version of the email.
      https://symfony.com/doc/current/mailer.html#specify-text-only-twig-template-for-email

  -
    question: |
      Which of the following is NOT a valid way to configure additional Twig template paths in Symfony?
    answers:
      -
        value: >
          Using the `twig.paths` configuration in `config/packages/twig.yaml`.
        correct: false
      -
        value: >
          Using the `twig:path` XML element in `config/packages/twig.xml`.
        correct: false
      -
        value: >
          Calling `$twig->addPath()` in a service definition.
        correct: false
      -
        value: >
          Modifying the `kernel.root_dir` parameter in `services.yaml`.
        correct: true
    help: |
      While `kernel.project_dir` is used in path configurations, directly modifying `kernel.root_dir` in `services.yaml` is not the standard or correct way to configure Twig template paths. Twig paths are configured via `twig.yaml`, `twig.xml`, or `twig.php` configuration files.
      https://symfony.com/doc/current/reference/configuration/twig.html#paths

  -
    question: |
      When embedding content asynchronously using `render_hinclude` in Twig, what are the two primary ways to specify the content source?
    answers:
      -
        value: >
          By providing a template path or a service ID.
        correct: false
      -
        value: >
          By providing a controller reference or a URL.
        correct: true
      -
        value: >
          By providing an asset path or a database query.
        correct: false
      -
        value: >
          By providing a Twig block name or a Twig macro.
        correct: false
    help: |
      The `render_hinclude` function can embed content from a controller (using `controller()`) or a URL (using `url()`).
      https://symfony.com/doc/current/templates.html#embed-asynchronous-content-with-render-hinclude-in-twig

  -
    question: |
      What is the purpose of the `{{ dump(variable) }}` function in Twig, as opposed to the `{% dump variable %}` tag?
    answers:
      -
        value: >
          `{{ dump() }}` dumps the variable directly into the page content, while `{% dump %}` sends it to the Web Debug Toolbar.
        correct: true
      -
        value: >
          `{{ dump() }}` is for production, `{% dump %}` is for development.
        correct: false
      -
        value: >
          `{{ dump() }}` is for simple variables, `{% dump %}` is for complex objects.
        correct: false
      -
        value: >
          They are functionally identical, just different syntax.
        correct: false
    help: |
      The `{{ dump() }}` function outputs the variable's content directly into the HTML of the page, while the `{% dump %}` tag sends it to the Symfony Web Debug Toolbar.
      https://symfony.com/doc/current/templates.html#use-twig-dump-tag-and-function

  -
    question: |
      Which Composer command is used to install the Twig templating engine and its integration with Symfony?
    answers:
      -
        value: >
          `composer require twig/twig`
        correct: false
      -
        value: >
          `composer install symfony/twig`
        correct: false
      -
        value: >
          `composer require symfony/twig-bundle`
        correct: true
      -
        value: >
          `composer add twig`
        correct: false
    help: |
      The `symfony/twig-bundle` package provides the necessary integration of Twig with Symfony applications.
      https://symfony.com/doc/current/templates.html#install-twig-bundle-for-symfony

  -
    question: |
      When defining a base template (`base.html.twig`) for template inheritance, what is the typical structure for the `<body>` section to allow child templates to define their content?
    answers:
      -
        value: >
          `<body id="content"></body>`
        correct: false
      -
        value: >
          `<body>{% content %}{% endcontent %}</body>`
        correct: false
      -
        value: >
          `<body>{% block body %}{% endblock %}</body>`
        correct: true
      -
        value: >
          `<body>{{ content }}</body>`
        correct: false
    help: |
      The `{% block body %}{% endblock %}` structure within the `<body>` tag allows child templates to override the entire body content or define nested blocks within it.
      https://symfony.com/doc/current/templates.html#base-twig-template-structure-with-blocks

  -
    question: |
      Which of the following is the correct way to access the application's environment (e.g., `dev`, `prod`) in a Twig template?
    answers:
      -
        value: >
          `{{ app.env }}`
        correct: false
      -
        value: >
          `{{ app.environment }}`
        correct: true
      -
        value: >
          `{{ kernel.environment }}`
        correct: false
      -
        value: >
          `{{ symfony.environment }}`
        correct: false
    help: |
      The `app.environment` property of the `app` global variable provides access to the current application environment.
      https://symfony.com/doc/current/templates.html#access-application-data-with-twig-app-global-variable

  -
    question: |
      What is the primary benefit of using `renderBlock()` or `renderBlockView()` in a controller compared to rendering the entire template?
    answers:
      -
        value: >
          It allows for more efficient caching of template fragments.
        correct: false
      -
        value: >
          It enables rendering only a specific portion of a template, reducing overhead.
        correct: true
      -
        value: >
          It automatically injects all services into the rendered block.
        correct: false
      -
        value: >
          It bypasses Twig's auto-escaping for the rendered block.
        correct: false
    help: |
      `renderBlock()` and `renderBlockView()` are useful for rendering only a specific block from a template, which can be more efficient than rendering the entire template when only a small part is needed.
      https://symfony.com/doc/current/templates.html#render-twig-template-blocks-in-symfony-controller

  -
    question: |
      When creating a `TemplatedEmail` in Symfony, how do you pass variables (context) to the Twig template used for the email body?
    answers:
      -
        value: >
          Using the `setVariables()` method.
        correct: false
      -
        value: >
          Using the `with()` method.
        correct: false
      -
        value: >
          Using the `context()` method.
        correct: true
      -
        value: >
          Using the `passVariables()` method.
        correct: false
    help: |
      The `context()` method of `TemplatedEmail` is used to pass an array of variables (key-value pairs) to the Twig template.
      https://symfony.com/doc/current/mailer.html#create-templatedemail-with-twig

  -
    question: |
      Which of the following Twig functions would you use to generate an absolute URL for an asset, including the domain and scheme?
    answers:
      -
        value: >
          `asset()`
        correct: false
      -
        value: >
          `url_asset()`
        correct: false
      -
        value: >
          `absolute_url(asset('...'))`
        correct: true
      -
        value: >
          `full_asset_url()`
        correct: false
    help: |
      To get an absolute URL for an asset, you combine the `asset()` function with the `absolute_url()` function.
      https://symfony.com/doc/current/templates.html#generate-absolute-urls-for-assets-in-twig

  -
    question: |
      What is the primary purpose of the `app.debug` global variable in Twig?
    answers:
      -
        value: >
          To enable or disable Twig's internal caching.
        correct: false
      -
        value: >
          To indicate whether the application is running in debug mode, often used for conditional display of debug information.
        correct: true
      -
        value: >
          To force Twig to recompile all templates.
        correct: false
      -
        value: >
          To control the level of error reporting in Twig.
        correct: false
    help: |
      The `app.debug` variable is a boolean that indicates if the application is in debug mode. It's commonly used to conditionally display debug-related information or features in templates.
      https://symfony.com/doc/current/templates.html#access-application-data-with-twig-app-global-variable

  -
    question: |
      Which Twig tag is used to define a reusable piece of template code that can accept arguments, similar to a function?
    answers:
      -
        value: >
          `{% function %}`
        correct: false
      -
        value: >
          `{% macro %}`
        correct: true
      -
        value: >
          `{% snippet %}`
        correct: false
      -
        value: >
          `{% include %}`
        correct: false
    help: |
      The `{% macro %}` tag is used to define reusable blocks of Twig code that can be called with different arguments, similar to functions in programming languages.
      https://twig.symfony.com/doc/3.x/tags/macro.html

  -
    question: |
      What is the correct way to include a Twig template fragment and ensure it does NOT inherit variables from the parent template, forcing it to have an isolated context?
    answers:
      -
        value: >
          `{{ include('template.html.twig', with_context = false) }}`
        correct: true
      -
        value: >
          `{{ include('template.html.twig', only = true) }}`
        correct: false
      -
        value: >
          `{{ include('template.html.twig', isolated = true) }}`
        correct: false
      -
        value: >
          `{{ include('template.html.twig', inherit_vars = false) }}`
        correct: false
    help: |
      The `with_context = false` option in the `include` function ensures that the included template does not inherit variables from the parent template, providing an isolated context.
      https://twig.symfony.com/doc/3.x/functions/include.html#including-templates

  -
    question: |
      Which of the following is a valid way to define a custom global variable in Twig through Symfony's configuration?
    answers:
      -
        value: >
          ```yaml
          twig:
              globals:
                  my_global: '@App\\Service\\MyGlobalService'
          ```
        correct: true
      -
        value: >
          ```yaml
          twig:
              variables:
                  my_global: 'some_value'
          ```
        correct: false
      -
        value: >
          ```yaml
          twig:
              parameters:
                  my_global: 'some_value'
          ```
        correct: false
      -
        value: >
          ```yaml
          twig:
              context:
                  my_global: 'some_value'
          ```
        correct: false
    help: |
      The `twig.globals` configuration allows you to define global variables that are available in all Twig templates. You can assign a static value or reference a service.
      https://symfony.com/doc/current/reference/configuration/twig.html#globals

  -
    question: |
      What is the purpose of the `transchoice` filter in Twig?
    answers:
      -
        value: >
          To translate a string and apply pluralization rules based on a given number.
        correct: true
      -
        value: >
          To choose between multiple translation domains.
        correct: false
      -
        value: >
          To translate a string and convert it to uppercase or lowercase.
        correct: false
      -
        value: >
          To translate a string and replace placeholders with variables.
        correct: false
    help: |
      The `transchoice` filter (or tag) is used to translate messages that have different forms depending on a given count, handling pluralization rules.
      https://symfony.com/doc/current/translation.html#pluralization

  -
    question: |
      When iterating over an array in Twig using `{% for item in items %}`, how can you access the current loop index (starting from 0)?
    answers:
      -
        value: >
          `{{ loop.index0 }}`
        correct: true
      -
        value: >
          `{{ loop.index }}`
        correct: false
      -
        value: >
          `{{ loop.first }}`
        correct: false
      -
        value: >
          `{{ loop.key }}`
        correct: false
    help: |
      Inside a `for` loop, the `loop` variable provides useful information about the current iteration. `loop.index0` gives the current iteration index (0-based).
      https://twig.symfony.com/doc/3.x/tags/for.html#the-loop-variable

  -
    question: |
      Which of the following is the most efficient way to render a Symfony form field, including its label, errors, and widgets, in Twig?
    answers:
      -
        value: >
          `{{ form_widget(form.field) }}`
        correct: false
      -
        value: >
          `{{ form_label(form.field) }}`
        correct: false
      -
        value: >
          `{{ form_row(form.field) }}`
        correct: true
      -
        value: >
          `{{ form_errors(form.field) }}`
        correct: false
    help: |
      The `form_row()` helper renders the label, errors, and widget for a single form field, making it the most convenient way to render a field in Twig.
      https://symfony.com/doc/current/forms.html#rendering-a-form-in-a-twig-template

  -
    question: |
      What is the purpose of the `{% set %}` tag in Twig?
    answers:
      -
        value: >
          To define a new block for template inheritance.
        correct: false
      -
        value: >
          To assign a value to a variable within the current template scope.
        correct: true
      -
        value: >
          To include an external CSS file.
        correct: false
      -
        value: >
          To declare a global variable.
        correct: false
    help: |
      The `{% set %}` tag is used to assign values to variables within the current template scope.
      https://twig.symfony.com/doc/3.x/tags/set.html

  -
    question: |
      When dealing with form collections in Twig, how do you typically iterate over child forms (e.g., a collection of tags) to render each one?
    answers:
      -
        value: >
          Using a `{% for %}` loop directly on the parent form's collection field (e.g., `form.tags`).
        correct: true
      -
        value: >
          Using a custom Twig filter to extract the collection items.
        correct: false
      -
        value: >
          Calling `form_collection_items(form.tags)`.
        correct: false
      -
        value: >
          Accessing `form.tags.children`.
        correct: false
    help: |
      You can iterate over form collection fields directly using a `{% for %}` loop on the parent form's collection field (e.g., `form.tags`), and then render each child form's row.
      https://symfony.com/doc/current/form/form_collections.html#render-symfony-form-collection-with-existing-tags

  -
    question: |
      Which of the following is the correct way to check if a variable `items` is empty in Twig?
    answers:
      -
        value: >
          `{% if items is empty %}`
        correct: true
      -
        value: >
          `{% if count(items) == 0 %}`
        correct: false
      -
        value: >
          `{% if items.length == 0 %}`
        correct: false
      -
        value: >
          `{% if items == null %}`
        correct: false
    help: |
      The `is empty` test checks if a variable is an empty string, array, hash, or `null`.
      https://twig.symfony.com/doc/3.x/tests/empty.html

  -
    question: |
      What is the primary benefit of using template inheritance with `{% extends %}` and `{% block %}` tags?
    answers:
      -
        value: >
          It allows for dynamic loading of templates based on user roles.
        correct: false
      -
        value: >
          It promotes code reusability and maintains a consistent layout across multiple pages.
        correct: true
      -
        value: >
          It automatically optimizes template rendering performance.
        correct: false
      -
        value: >
          It enables direct database queries from within Twig templates.
        correct: false
    help: |
      Template inheritance is a powerful feature that allows you to build a base "skeleton" template that contains all the common elements of your site and defines "blocks" that child templates can override. This promotes reusability and consistency.
      https://symfony.com/doc/current/templates.html#template-inheritance

  -
    question: |
      Which Twig function allows you to generate a URL to a Symfony route, including query parameters?
    answers:
      -
        value: >
          `path('route_name', {param1: 'value1', param2: 'value2'})`
        correct: true
      -
        value: >
          `url('route_name?param1=value1&param2=value2')`
        correct: false
      -
        value: >
          `route('route_name', {param1: 'value1'})`
        correct: false
      -
        value: >
          `link('route_name', {query: {param1: 'value1'}})`
        correct: false
    help: |
      Both `path()` and `url()` functions accept an associative array as the second argument for route parameters, which will be included in the generated URL.
      https://symfony.com/doc/current/routing.html#generating-urls-in-twig-templates

  -
    question: |
      What is the correct way to render a Twig template from a Symfony controller and pass a `Response` object to the `render` function for further manipulation?
    answers:
      -
        value: >
          `return $this->render('template.html.twig')->setResponse($response);`
        correct: false
      -
        value: >
          `return $this->render('template.html.twig', ['response' => $response]);`
        correct: false
      -
        value: >
          `return $this->render('template.html.twig', response: $response);`
        correct: true
      -
        value: >
          `return $this->renderWithResponse('template.html.twig', $response);`
        correct: false
    help: |
      The `render()` method in `AbstractController` accepts a named argument `response` (since Symfony 6.2) to pass an existing `Response` object that will be used.
      https://symfony.com/doc/current/controller.html#render-twig-template-in-symfony-controller

  -
    question: |
      Which of the following is NOT a valid way to output a variable `product_name` in Twig?
    answers:
      -
        value: >
          `{{ product_name }}`
        correct: false
      -
        value: >
          `{% print product_name %}`
        correct: true
      -
        value: >
          `{{ product.name }}` (if product is an object/array)
        correct: false
      -
        value: >
          `{{ 'Product: ' ~ product_name }}`
        correct: false
    help: |
      Twig uses `{{ ... }}` for outputting variables and expressions. There is no `{% print %}` tag.
      https://twig.symfony.com/doc/3.x/templates.html#outputting-variables

  -
    question: |
      What is the purpose of the `|raw` filter in Twig?
    answers:
      -
        value: >
          To convert a variable to a raw string format.
        correct: false
      -
        value: >
          To prevent Twig from applying auto-escaping to the variable's content.
        correct: true
      -
        value: >
          To encode the variable's content for URL safety.
        correct: false
      -
        value: >
          To display the variable's original, unformatted value.
        correct: false
    help: |
      The `raw` filter marks a value as "safe" which means that Twig will not escape it. Use this filter only when you are sure the content is safe and does not contain any malicious code.
      https://twig.symfony.com/doc/3.x/filters/raw.html

  -
    question: |
      When building reusable Twig components, what is the best practice for organizing template fragments that are meant to be included by other templates (e.g., a user profile snippet)?
    answers:
      -
        value: >
          Store them in a `components/` directory.
        correct: false
      -
        value: >
          Prefix their filenames with an underscore (e.g., `_user_profile.html.twig`).
        correct: true
      -
        value: >
          Place them directly in the `templates/` root directory.
        correct: false
      -
        value: >
          Define them as Twig macros within the main template.
        correct: false
    help: |
      It's a common convention to prefix template fragments that are meant to be included (and not rendered directly as full pages) with an underscore, like `_user_profile.html.twig`.
      https://symfony.com/doc/current/templates.html#example-twig-template-fragment-for-reuse

  -
    question: |
      Which of the following is the correct way to use an `else` condition within an `if` statement in Twig?
    answers:
      -
        value: >
          `{% if condition %} ... {% else %} ... {% endif %}`
        correct: true
      -
        value: >
          `{% if condition %} ... {% then %} ... {% endif %}`
        correct: false
      -
        value: >
          `{{ if condition }} ... {{ else }} ... {{ endif }}`
        correct: false
      -
        value: >
          `{% if condition else %} ... {% endif %}`
        correct: false
    help: |
      The `{% else %}` tag can be used to provide an alternative block of code to execute if the `if` condition is false.
      https://twig.symfony.com/doc/3.x/tags/if.html

  -
    question: |
      What is the primary purpose of the `composer require symfony/twig-bundle` command?
    answers:
      -
        value: >
          To install the Twig templating engine only.
        correct: false
      -
        value: >
          To install the Twig templating engine and its integration with the Symfony framework.
        correct: true
      -
        value: >
          To generate a new Symfony project with Twig pre-configured.
        correct: false
      -
        value: >
          To update existing Twig templates to the latest version.
        correct: false
    help: |
      The `symfony/twig-bundle` package provides the necessary integration of the Twig templating engine with Symfony, including services, configuration, and Twig extensions.
      https://symfony.com/doc/current/templates.html#install-twig-bundle-for-symfony

  -
    question: |
      When embedding a controller using `render()` in Twig, what is the difference between using `path()` and `controller()`?
    answers:
      -
        value: >
          `path()` embeds via a route URL, while `controller()` embeds directly via the controller service.
        correct: true
      -
        value: >
          `path()` is for internal requests, `controller()` is for external requests.
        correct: false
      -
        value: >
          `path()` is more performant, `controller()` is for debugging.
        correct: false
      -
        value: >
          `path()` can pass parameters, `controller()` cannot.
        correct: false
    help: |
      `render(path(...))` makes a sub-request to a route, while `render(controller(...))` directly executes a controller method without going through the routing layer. `controller()` is useful when you don't want to expose the embedded controller with a public URL.
      https://symfony.com/doc/current/templates.html#embed-symfony-controllers-in-twig-templates

  -
    question: |
      Which of the following is a valid way to define a custom Twig filter in Symfony?
    answers:
      -
        value: >
          Creating a PHP class that extends `Twig_Extension` and registers the filter.
        correct: true
      -
        value: >
          Adding a new entry in `config/services.yaml` under `twig.filters`.
        correct: false
      -
        value: >
          Using the `#[AsTwigFilter]` attribute directly on a PHP function.
        correct: false
      -
        value: >
          Defining a new Twig macro with the filter's logic.
        correct: false
    help: |
      Custom Twig filters are typically defined by creating a PHP class that extends `AbstractExtension` (or implements `ExtensionInterface`) and registers the filter via the `getFilters()` method.
      https://symfony.com/doc/current/templating/twig_extension.html

  -
    question: |
      What is the primary benefit of using `render_hinclude` over a regular `render` for embedding content in Twig?
    answers:
      -
        value: >
          `render_hinclude` always caches the embedded content.
        correct: false
      -
        value: >
          `render_hinclude` embeds content asynchronously, improving initial page load time.
        correct: true
      -
        value: >
          `render_hinclude` provides better security for embedded content.
        correct: false
      -
        value: >
          `render_hinclude` allows for direct database access from the template.
        correct: false
    help: |
      `render_hinclude` is designed for asynchronous content inclusion, meaning the main page can load and render quickly, with the embedded content loading separately via an AJAX request.
      https://symfony.com/doc/current/templates.html#embed-asynchronous-content-with-render-hinclude-in-twig

  -
    question: |
      Which of the following is the correct way to iterate over an array `items` and display each `item`'s `name` property in Twig?
    answers:
      -
        value: >
          ```twig
          {% for item in items %}
              {{ item.name }}
          {% endfor %}
          ```
        correct: true
      -
        value: >
          ```twig
          {% loop items as item %}
              {{ item.name }}
          {% endloop %}
          ```
        correct: false
      -
        value: >
          ```twig
          {{ items | map(item => item.name) | join(', ') }}
          ```
        correct: false
      -
        value: >
          ```twig
          {% foreach items as item %}
              {{ item.name }}
          {% endforeach %}
          ```
        correct: false
    help: |
      The `{% for %}` tag is the standard way to iterate over arrays and objects in Twig.
      https://twig.symfony.com/doc/3.x/tags/for.html

  -
    question: |
      What is the correct way to access the current authenticated user's email in a Twig template, assuming the user object has an `email` property or `getEmail()` method?
    answers:
      -
        value: >
          `{{ app.user.email }}`
        correct: true
      -
        value: >
          `{{ user.email }}`
        correct: false
      -
        value: >
          `{{ app.security.user.email }}`
        correct: false
      -
        value: >
          `{{ app.current_user.email }}`
        correct: false
    help: |
      The `app.user` global variable provides access to the authenticated user object. You can then access its properties or call its methods using dot notation.
      https://symfony.com/doc/current/security.html#fetch-authenticated-user-in-twig-template

  -
    question: |
      When using the `#[Template]` attribute, how can you specify that only a particular block from the template should be rendered?
    answers:
      -
        value: >
          `#[Template('template.html.twig', block: 'block_name')]`
        correct: true
      -
        value: >
          `#[Template('template.html.twig', onlyBlock: 'block_name')]`
        correct: false
      -
        value: >
          `#[Template('template.html.twig', section: 'block_name')]`
        correct: false
      -
        value: >
          `#[Template('template.html.twig', renderBlock: 'block_name')]`
        correct: false
    help: |
      The `block` argument in the `#[Template]` attribute (introduced in Symfony 7.2) allows you to specify which block from the template should be rendered.
      https://symfony.com/doc/current/templates.html#render-specific-twig-template-block-using-symfony-template-attribute

  -
    question: |
      Which of the following is the correct way to include a Twig template fragment named `_header.html.twig` and pass a variable `title` to it?
    answers:
      -
        value: >
          `{{ include('_header.html.twig', {title: 'My Page'}) }}`
        correct: true
      -
        value: >
          `{% include '_header.html.twig' with {title: 'My Page'} %}`
        correct: false
      -
        value: >
          `{% include '_header.html.twig' vars {title: 'My Page'} %}`
        correct: false
      -
        value: >
          `{{ include('_header.html.twig').set('title', 'My Page') }}`
        correct: false
    help: |
      The `include()` function accepts an optional second argument, which is an array of variables to pass to the included template.
      https://symfony.com/doc/current/templates.html#include-twig-template-fragment-with-variable-renaming

  -
    question: |
      What is the primary purpose of the `composer require twig` command?
    answers:
      -
        value: >
          To install the Twig templating engine as a standalone library.
        correct: true
      -
        value: >
          To install the Symfony Twig Bundle.
        correct: false
      -
        value: >
          To generate Twig templates.
        correct: false
      -
        value: >
          To clear the Twig cache.
        correct: false
    help: |
      `composer require twig` installs the core Twig library. For Symfony integration, `symfony/twig-bundle` is typically required.
      https://symfony.com/doc/current/page_creation.html#install-twig-with-composer

  -
    question: |
      Which of the following Twig filters is used to convert a string to uppercase?
    answers:
      -
        value: >
          `upper`
        correct: true
      -
        value: >
          `uppercase`
        correct: false
      -
        value: >
          `up`
        correct: false
      -
        value: >
          `to_upper`
        correct: false
    help: |
      The `upper` filter converts a string to uppercase.
      https://twig.symfony.com/doc/3.x/filters/upper.html

  -
    question: |
      What is the purpose of the `app.request.method` property in Twig?
    answers:
      -
        value: >
          To get the HTTP method of the current request (e.g., 'GET', 'POST').
        correct: true
      -
        value: >
          To get the name of the controller method being executed.
        correct: false
      -
        value: >
          To get the request's content type.
        correct: false
      -
        value: >
          To get the request's ID for logging.
        correct: false
    help: |
      `app.request` provides access to the `Request` object, and `method` is a property of that object indicating the HTTP method used for the request.
      https://symfony.com/doc/current/templates.html#access-application-data-with-twig-app-global-variable

  -
    question: |
      Which Twig function would you use to generate an absolute URL for a route, including the scheme and host?
    answers:
      -
        value: >
          `path()`
        correct: false
      -
        value: >
          `url()`
        correct: true
      -
        value: >
          `absolute_path()`
        correct: false
      -
        value: >
          `full_url()`
        correct: false
    help: |
      The `url()` function generates an absolute URL (e.g., `http://example.com/blog/my-post`), whereas `path()` generates a relative URL (e.g., `/blog/my-post`).
      https://symfony.com/doc/current/routing.html#generating-urls-in-twig-templates

  -
    question: |
      What is the purpose of the `{% apply %}` tag in Twig?
    answers:
      -
        value: >
          To apply a filter or a chain of filters to a block of template code.
        correct: true
      -
        value: >
          To include a template fragment only if a condition is met.
        correct: false
      -
        value: >
          To define a new Twig function.
        correct: false
      -
        value: >
          To import macros from another template.
        correct: false
    help: |
      The `{% apply %}` tag allows you to apply a filter (or a chain of filters) to the content of a block.
      https://twig.symfony.com/doc/3.x/tags/apply.html

  -
    question: |
      When defining custom Twig template paths, what is the benefit of assigning a namespace (e.g., `admin`) to a directory?
    answers:
      -
        value: >
          It makes the templates in that directory load faster.
        correct: false
      -
        value: >
          It allows referencing templates using a shorter, more logical name (e.g., `@admin/dashboard.html.twig`).
        correct: true
      -
        value: >
          It automatically applies specific Twig filters to templates in that namespace.
        correct: false
      -
        value: >
          It restricts access to those templates based on user roles.
        correct: false
    help: |
      Namespaces provide a logical way to group templates and prevent naming conflicts, allowing you to reference them using the `@namespace/template.html.twig` syntax.
      https://symfony.com/doc/current/templates.html#configure-twig-template-paths-with-namespaces

  -
    question: |
      Which Twig filter is used to convert a string to lowercase?
    answers:
      -
        value: >
          `lower`
        correct: true
      -
        value: >
          `lowercase`
        correct: false
      -
        value: >
          `down`
        correct: false
      -
        value: >
          `to_lower`
        correct: false
    help: |
      The `lower` filter converts a string to lowercase.
      https://twig.symfony.com/doc/3.x/filters/lower.html

  -
    question: |
      What is the correct Twig syntax to check if a variable `user` is an instance of a specific class or interface?
    answers:
      -
        value: >
          `{% if user is instance of 'App\\Entity\\User' %}`
        correct: true
      -
        value: >
          `{% if user instanceof 'App\\Entity\\User' %}`
        correct: false
      -
        value: >
          `{% if user.isInstanceOf('App\\Entity\\User') %}`
        correct: false
      -
        value: >
          `{% if user is type 'App\\Entity\\User' %}`
        correct: false
    help: |
      The `is instance of` test checks if an object is an instance of a given class or implements a given interface.
      https://twig.symfony.com/doc/3.x/tests/instanceof.html

  -
    question: |
      Which Twig filter is used to remove HTML tags from a string?
    answers:
      -
        value: >
          `strip_tags`
        correct: true
      -
        value: >
          `remove_html`
        correct: false
      -
        value: >
          `html_decode`
        correct: false
      -
        value: >
          `plain_text`
        correct: false
    help: |
      The `strip_tags` filter removes all HTML and XML tags from a string.
      https://twig.symfony.com/doc/3.x/filters/striptags.html

  -
    question: |
      What is the purpose of the `{% autoescape %}` tag in Twig?
    answers:
      -
        value: >
          To enable or disable auto-escaping for a specific block of template code.
        correct: true
      -
        value: >
          To automatically escape all variables in the entire template.
        correct: false
      -
        value: >
          To define a custom escaping strategy for the template.
        correct: false
      -
        value: >
          To prevent any output from being escaped.
        correct: false
    help: |
      The `{% autoescape %}` tag allows you to enable or disable auto-escaping for a specific block of template code, overriding the global auto-escaping configuration.
      https://twig.symfony.com/doc/3.x/tags/autoescape.html

  -
    question: |
      Which of the following is the correct way to display a variable `message` and apply the `trans` filter with a specific domain `app`?
    answers:
      -
        value: >
          `{{ message|trans(domain='app') }}`
        correct: true
      -
        value: >
          `{{ message|trans('app') }}`
        correct: false
      -
        value: >
          `{% trans domain 'app' %} {{ message }} {% endtrans %}`
        correct: false
      -
        value: >
          `{{ trans(message, 'app') }}`
        correct: false
    help: |
      The `trans` filter accepts a `domain` argument to specify the translation domain.
      https://symfony.com/doc/current/reference/twig_reference.html#trans

  -
    question: |
      Which Twig filter is used to format a number with a specific number of decimal places, decimal point, and thousands separator?
    answers:
      -
        value: >
          `number_format`
        correct: true
      -
        value: >
          `format_number`
        correct: false
      -
        value: >
          `decimal_format`
        correct: false
      -
        value: >
          `money_format`
        correct: false
    help: |
      The `number_format` filter formats a number with grouped thousands, decimal point, and a specified number of decimals.
      https://twig.symfony.com/doc/3.x/filters/number_format.html

  -
    question: |
      What is the purpose of the `{% use %}` tag in Twig?
    answers:
      -
        value: >
          To import macros from another template without extending it.
        correct: true
      -
        value: >
          To include a template fragment and inherit its context.
        correct: false
      -
        value: >
          To define a new block that can be overridden.
        correct: false
      -
        value: >
          To apply a filter to a block of content.
        correct: false
    help: |
      The `{% use %}` tag allows you to import blocks from other templates into the current template, without extending the other template. This is useful for horizontal reuse of blocks.
      https://twig.symfony.com/doc/3.x/tags/use.html

  -
    question: |
      Which of the following is the correct way to check if a variable `name` is defined in Twig?
    answers:
      -
        value: >
          `{% if name is defined %}`
        correct: true
      -
        value: >
          `{% if name is set %}`
        correct: false
      -
        value: >
          `{% if name is not null %}`
        correct: false
      -
        value: >
          `{% if exists(name) %}`
        correct: false
    help: |
      The `is defined` test checks if a variable is defined in the current context.
      https://twig.symfony.com/doc/3.x/tests/defined.html

  -
    question: |
      What is the purpose of the `app.session` global variable in Twig?
    answers:
      -
        value: >
          To access session data and flash messages.
        correct: true
      -
        value: >
          To manage user authentication.
        correct: false
      -
        value: >
          To store application-wide configuration.
        correct: false
      -
        value: >
          To handle database connections.
        correct: false
    help: |
      The `app.session` global variable provides access to the current session object, allowing you to retrieve session attributes and flash messages.
      https://symfony.com/doc/current/components/http_foundation.html#session-in-twig

  -
    question: |
      Which Twig filter is used to convert a string to its URL-friendly slug version?
    answers:
      -
        value: >
          `slug`
        correct: true
      -
        value: >
          `url_encode`
        correct: false
      -
        value: >
          `sanitize`
        correct: false
      -
        value: >
          `urlize`
        correct: false
    help: |
      The `slug` filter (provided by `symfony/string` component and integrated with Twig) converts a string into a URL-friendly slug.
      https://symfony.com/doc/current/components/string.html#slugger-in-twig

  -
    question: |
      What is the purpose of the `{% verbatim %}` tag in Twig?
    answers:
      -
        value: >
          To prevent Twig from parsing the content within the tag, treating it as plain text.
        correct: true
      -
        value: >
          To include a file without rendering it.
        correct: false
      -
        value: >
          To display the raw, unescaped HTML content.
        correct: false
      -
        value: >
          To define a block that cannot be overridden by child templates.
        correct: false
    help: |
      The `{% verbatim %}` tag tells Twig to ignore any Twig syntax within its block, rendering the content as is. This is useful when you need to display code snippets that contain Twig-like delimiters.
      https://twig.symfony.com/doc/3.x/tags/verbatim.html

  -
    question: |
      Which of the following is the correct way to include a Twig template fragment and pass an array of variables, but also ensure that the included template does NOT inherit variables from the parent context?
    answers:
      -
        value: >
          `{{ include('template.html.twig', {foo: 'bar'}, with_context = false) }}`
        correct: true
      -
        value: >
          `{{ include('template.html.twig', {foo: 'bar'}, only = true) }}`
        correct: false
      -
        value: >
          `{{ include('template.html.twig', {foo: 'bar'}, isolated = true) }}`
        correct: false
      -
        value: >
          `{{ include('template.html.twig', {foo: 'bar'}, no_inherit = true) }}`
        correct: false
    help: |
      The `with_context = false` option ensures that the included template only has access to the variables explicitly passed to it, and not the context of the parent template.
      https://twig.symfony.com/doc/3.x/functions/include.html#including-templates

  -
    question: |
      What is the purpose of the `{% filter %}` tag in Twig?
    answers:
      -
        value: >
          To apply a filter to a single variable.
        correct: false
      -
        value: >
          To define a new custom filter.
        correct: false
      -
        value: >
          To apply a filter or a chain of filters to a section of template code.
        correct: true
      -
        value: >
          To escape HTML characters in a string.
        correct: false
    help: |
      The `{% filter %}` tag allows you to apply a filter (or a chain of filters) to the content of a block, similar to `{% apply %}`.
      https://twig.symfony.com/doc/3.x/tags/filter.html

  -
    question: |
      Which Twig filter is used to truncate a string to a specified length and append an ellipsis?
    answers:
      -
        value: >
          `truncate`
        correct: true
      -
        value: >
          `limit`
        correct: false
      -
        value: >
          `cut`
        correct: false
      -
        value: >
          `shorten`
        correct: false
    help: |
      The `truncate` filter truncates a string to the given length by cutting off the end and appending an ellipsis (or a custom string).
      https://twig.symfony.com/doc/3.x/filters/truncate.html

  -
    question: |
      What is the correct way to define a block named `javascripts` in a base Twig template that child templates can override?
    answers:
      -
        value: >
          `{% block javascripts %}{% endblock %}`
        correct: true
      -
        value: >
          `{{ javascripts }}`
        correct: false
      -
        value: >
          `{% define javascripts %}{% enddefine %}`
        correct: false
      -
        value: >
          `{% section javascripts %}{% endsection %}`
        correct: false
    help: |
      The `{% block %}` tag is used to define a section of content that can be overridden by child templates in template inheritance.
      https://symfony.com/doc/current/templates.html#base-twig-template-structure-with-blocks

  -
    question: |
      Which Twig filter is used to convert a string into a JSON representation?
    answers:
      -
        value: >
          `json_encode`
        correct: true
      -
        value: >
          `to_json`
        correct: false
      -
        value: >
          `serialize('json')`
        correct: false
      -
        value: >
          `encode_json`
        correct: false
    help: |
      The `json_encode` filter converts a value to JSON format.
      https://twig.symfony.com/doc/3.x/filters/json_encode.html

  -
    question: |
      What is the purpose of the `app.user.username` property in Twig, assuming a user is authenticated?
    answers:
      -
        value: >
          To get the username of the currently authenticated user.
        correct: true
      -
        value: >
          To get the user's full name.
        correct: false
      -
        value: >
          To get the user's unique identifier.
        correct: false
      -
        value: >
          To get the user's role.
        correct: false
    help: |
      The `app.user` global variable provides access to the authenticated user object, and `username` (or a corresponding getter like `getUsername()`) is a common property for retrieving the user's username.
      https://symfony.com/doc/current/templates.html#access-application-data-with-twig-app-global-variable

  -
    question: |
      Which Twig filter is used to join elements of an array into a single string with a specified separator?
    answers:
      -
        value: >
          `join`
        correct: true
      -
        value: >
          `concat`
        correct: false
      -
        value: >
          `implode`
        correct: false
      -
        value: >
          `merge`
        correct: false
    help: |
      The `join` filter concatenates the elements of an array into a string using a specified separator.
      https://twig.symfony.com/doc/3.x/filters/join.html

  -
    question: |
      What is the purpose of the `{% spaceless %}` tag in Twig?
    answers:
      -
        value: >
          To remove whitespace between HTML tags in the rendered output.
        correct: true
      -
        value: >
          To remove all whitespace from the template source code.
        correct: false
      -
        value: >
          To add extra spaces for readability.
        correct: false
      -
        value: >
          To prevent line breaks in the rendered output.
        correct: false
    help: |
      The `{% spaceless %}` tag removes whitespace between HTML tags, which can help reduce the size of the rendered HTML.
      https://twig.symfony.com/doc/3.x/tags/spaceless.html

  -
    question: |
      Which Twig filter is used to convert a string to title case (first letter of each word capitalized)?
    answers:
      -
        value: >
          `title`
        correct: true
      -
        value: >
          `capitalize`
        correct: false
      -
        value: >
          `ucwords`
        correct: false
      -
        value: >
          `title_case`
        correct: false
    help: |
      The `title` filter converts the first character of each word in a string to uppercase and the rest to lowercase.
      https://twig.symfony.com/doc/3.x/filters/title.html

  -
    question: |
      What is the purpose of the `{% do %}` tag in Twig?
    answers:
      -
        value: >
          To execute a statement that does not print anything, such as modifying a variable.
        correct: true
      -
        value: >
          To define a function within the template.
        correct: false
      -
        value: >
          To include a template fragment.
        correct: false
      -
        value: >
          To perform a database operation.
        correct: false
    help: |
      The `{% do %}` tag is used to execute one or more statements that do not print anything, such as calling a method that modifies an object or setting a variable.
      https://twig.symfony.com/doc/3.x/tags/do.html

  -
    question: |
      Which Twig filter is used to sort the elements of an array?
    answers:
      -
        value: >
          `sort`
        correct: true
      -
        value: >
          `order`
        correct: false
      -
        value: >
          `arrange`
        correct: false
      -
        value: >
          `asort`
        correct: false
    help: |
      The `sort` filter sorts an array.
      https://twig.symfony.com/doc/3.x/filters/sort.html

  -
    question: |
      What is the purpose of the `{% from ... import ... %}` tag in Twig?
    answers:
      -
        value: >
          To import specific macros from another template into the current template.
        correct: true
      -
        value: >
          To extend a base template and override its blocks.
        correct: false
      -
        value: >
          To include a template fragment with its own context.
        correct: false
      -
        value: >
          To define a new global variable.
        correct: false
    help: |
      The `{% from ... import ... %}` tag is used to import specific macros from a template into the current namespace, allowing you to use them without prefixing them with the template name.
      https://twig.symfony.com/doc/3.x/tags/from.html

  -
    question: |
      Which Twig filter is used to reverse the order of an array or a string?
    answers:
      -
        value: >
          `reverse`
        correct: true
      -
        value: >
          `flip`
        correct: false
      -
        value: >
          `invert`
        correct: false
      -
        value: >
          `revert`
        correct: false
    help: |
      The `reverse` filter reverses a string or an array.
      https://twig.symfony.com/doc/3.x/filters/reverse.html

  -
    question: |
      What is the purpose of the `{% block %} ... {{ parent() }} ... {% endblock %}` pattern in Twig template inheritance?
    answers:
      -
        value: >
          To completely replace the content of a parent block.
        correct: false
      -
        value: >
          To append content to a parent block.
        correct: false
      -
        value: >
          To prepend content to a parent block.
        correct: false
      -
        value: >
          To extend the content of a parent block by including its original content and adding new content.
        correct: true
    help: |
      The `{{ parent() }}` function inside a `{% block %}` allows you to render the content of the parent block, effectively extending or modifying it rather than completely replacing it.
      https://twig.symfony.com/doc/3.x/tags/extends.html#how-to-use-parent-blocks

  -
    question: |
      Which Twig filter is used to convert a string to a valid JSON string, escaping special characters?
    answers:
      -
        value: >
          `json_encode`
        correct: true
      -
        value: >
          `to_json`
        correct: false
      -
        value: >
          `escape('json')`
        correct: false
      -
        value: >
          `serialize('json')`
        correct: false
    help: |
      The `json_encode` filter converts a Twig value to its JSON representation, properly escaping characters for safe embedding in JSON contexts.
      https://twig.symfony.com/doc/3.x/filters/json_encode.html

  -
    question: |
      What is the purpose of the `{% filter %}` and `{% endfilter %}` tags in Twig?
    answers:
      -
        value: >
          To define a new custom filter.
        correct: false
      -
        value: >
          To apply a filter or a chain of filters to the content within the tags.
        correct: true
      -
        value: >
          To escape all HTML within the block.
        correct: false
      -
        value: >
          To include an external Twig extension.
        correct: false
    help: |
      The `{% filter %}` tag allows you to apply a filter (or a chain of filters) to the content of a block, similar to the `{% apply %}` tag.
      https://twig.symfony.com/doc/3.x/tags/filter.html

  -
    question: |
      Which Twig filter is used to convert the first character of a string to uppercase?
    answers:
      -
        value: >
          `capitalize`
        correct: true
      -
        value: >
          `ucfirst`
        correct: false
      -
        value: >
          `first_upper`
        correct: false
      -
        value: >
          `upper_first`
        correct: false
    help: |
      The `capitalize` filter converts the first character of a string to uppercase and the rest to lowercase.
      https://twig.symfony.com/doc/3.x/filters/capitalize.html

  -
    question: |
      What is the purpose of the `{% set %}` tag in Twig?
    answers:
      -
        value: >
          To define a new block for template inheritance.
        correct: false
      -
        value: >
          To assign a value to a variable within the current template.
        correct: true
      -
        value: >
          To include an external CSS file.
        correct: false
      -
        value: >
          To declare a global variable.
        correct: false
    help: |
      The `{% set %}` tag is used to assign values to variables within the current template scope.
      https://twig.symfony.com/doc/3.x/tags/set.html

  -
    question: |
      Which Twig filter is used to convert a string to a URL-safe string by replacing spaces with hyphens and converting to lowercase?
    answers:
      -
        value: >
          `url_encode`
        correct: false
      -
        value: >
          `slugify`
        correct: true
      -
        value: >
          `url_friendly`
        correct: false
      -
        value: >
          `sanitize_url`
        correct: false
    help: |
      The `slugify` filter (often provided by a bundle like `StofDoctrineExtensionsBundle` or custom implementation) converts a string into a URL-friendly slug. While `slug` is also used, `slugify` is a common name for this operation.
      (Note: This is a common filter in many Twig setups, though not a core Twig filter. Given the context of Symfony certification, it's a relevant concept often provided by bundles or custom extensions.)
      https://symfony.com/doc/current/components/string.html#slugger-in-twig (indirectly related, as slugger is the underlying component)

  -
    question: |
      What is the purpose of the `{% if ... else if ... else %}` structure in Twig?
    answers:
      -
        value: >
          To define multiple conditions for a loop.
        correct: false
      -
        value: >
          To execute different blocks of code based on multiple conditional expressions.
        correct: true
      -
        value: >
          To include different templates based on a condition.
        correct: false
      -
        value: >
          To define a switch statement.
        correct: false
    help: |
      The `{% if %}`, `{% else if %}`, and `{% else %}` tags allow for complex conditional logic, executing different blocks of code based on a series of conditions.
      https://twig.symfony.com/doc/3.x/tags/if.html

  -
    question: |
      Which Twig filter is used to remove leading and trailing whitespace from a string?
    answers:
      -
        value: >
          `trim`
        correct: true
      -
        value: >
          `strip`
        correct: false
      -
        value: >
          `clean`
        correct: false
      -
        value: >
          `whitespace_trim`
        correct: false
    help: |
      The `trim` filter removes leading and trailing whitespace from a string.
      https://twig.symfony.com/doc/3.x/filters/trim.html

  -
    question: |
      What is the purpose of the `{% embed %}` tag in Twig?
    answers:
      -
        value: >
          To include a template and allow it to define its own blocks, which can then be overridden within the `embed` tag.
        correct: true
      -
        value: >
          To include a template without inheriting any variables from the parent context.
        correct: false
      -
        value: >
          To define a new macro that can be used globally.
        correct: false
      -
        value: >
          To render a controller's output asynchronously.
        correct: false
    help: |
      The `{% embed %}` tag allows you to include another template and define or override blocks within that included template, providing a powerful way to reuse template structures with customizable content.
      https://twig.symfony.com/doc/3.x/tags/embed.html

  -
    question: |
      Which Twig filter is used to convert a string to a "camelCase" format?
    answers:
      -
        value: >
          `camel`
        correct: false
      -
        value: >
          `camel_case`
        correct: true
      -
        value: >
          `to_camel`
        correct: false
      -
        value: >
          `camelize`
        correct: false
    help: |
      The `camel_case` filter (provided by `symfony/string` component and integrated with Twig) converts a string to camelCase.
      https://symfony.com/doc/current/components/string.html#string-manipulation-in-twig

  -
    question: |
      What is the purpose of the `{% block title %}{% endblock %}` structure in a base Twig template?
    answers:
      -
        value: >
          To define a default title that can be overridden by child templates.
        correct: true
      -
        value: >
          To force all child templates to use the same title.
        correct: false
      -
        value: >
          To include an external title file.
        correct: false
      -
        value: >
          To display the current page's title automatically.
        correct: false
    help: |
      The `{% block %}` tag defines a section of content that can be overridden by templates that extend it. This is commonly used for elements like the page title.
      https://symfony.com/doc/current/templates.html#base-twig-template-structure-with-blocks

  -
    question: |
      Which Twig filter is used to convert a string to a "snake_case" format?
    answers:
      -
        value: >
          `snake`
        correct: false
      -
        value: >
          `snake_case`
        correct: true
      -
        value: >
          `to_snake`
        correct: false
      -
        value: >
          `underscore`
        correct: false
    help: |
      The `snake_case` filter (provided by `symfony/string` component and integrated with Twig) converts a string to snake_case.
      https://symfony.com/doc/current/components/string.html#string-manipulation-in-twig```yaml
category: Templating with Twig

questions:
  -
    question: >
      Which Twig delimiter is used to execute statements such as loops or conditional logic?
    answers:
      -
        value: >
          `{{ ... }}`
        correct: false
      -
        value: >
          `{# ... #}`
        correct: false
      -
        value: >
          `{% ... %}`
        correct: true
      -
        value: >
          `<!-- ... -->`
        correct: false
    help: |
      The `{% ... %}` delimiter is used for control flow statements like `if`, `for`, `extends`, and `block`.
      https://symfony.com/doc/current/templates.html#basic-twig-template-structure-example

  -
    question: >
      By default, how does Twig handle output of variables to prevent Cross-Site Scripting (XSS) attacks?
    answers:
      -
        value: >
          It automatically escapes all output using the `e` filter.
        correct: true
      -
        value: >
          It requires manual escaping using the `raw` filter for safe content.
        correct: false
      -
        value: >
          It only escapes variables explicitly marked as unsafe.
        correct: false
      -
        value: >
          It relies on the browser's built-in XSS protection.
        correct: false
    help: |
      Twig automatically escapes all output by default to prevent XSS attacks. This behavior can be controlled, but it's enabled by default.
      https://symfony.com/doc/current/templates.html#automatic-output-escaping-in-twig

  -
    question: |
      Given the following Twig template, what is the correct way to extend a base layout?

      ```twig
      {# templates/blog/index.html.twig #}
      {# ??? #} 'base.html.twig' %}

      {% block content %}
          <h1>Welcome to the blog!</h1>
      {% endblock %}
      ```
    answers:
      -
        value: >
          `{% include %}`
        correct: false
      -
        value: >
          `{% uses %}`
        correct: false
      -
        value: >
          `{% extends %}`
        correct: true
      -
        value: >
          `{% import %}`
        correct: false
    help: |
      The `{% extends %}` tag is used to set up template inheritance, allowing a child template to inherit from a parent layout.
      https://symfony.com/doc/current/templates.html#template-inheritance

  -
    question: >
      Which global variable in Twig provides access to common application-specific data like the current user, request, and environment?
    answers:
      -
        value: >
          `symfony`
        correct: false
      -
        value: >
          `kernel`
        correct: false
      -
        value: >
          `app`
        correct: true
      -
        value: >
          `container`
        correct: false
    help: |
      The `app` global variable provides access to various application-specific data, including the authenticated user (`app.user`), the request object (`app.request`), and the application environment (`app.environment`).
      https://symfony.com/doc/current/templates.html#access-application-data-with-twig-app-global-variable

  -
    question: |
      What is the correct Twig syntax to display the current date formatted as "YYYY-MM-DD"?

      ```twig
      <p>Today's date: {{ 'now'|???('Y-m-d') }}</p>
      ```
    answers:
      -
        value: >
          `format`
        correct: false
      -
        value: >
          `date`
        correct: true
      -
        value: >
          `datetime`
        correct: false
      -
        value: >
          `time`
        correct: false
    help: |
      The `date` filter formats a date to a given format. The first argument is the format string.
      https://twig.symfony.com/doc/3.x/filters/date.html

  -
    question: |
      Consider the following Twig code:

      ```twig
      {# templates/blog/index.html.twig #}
      {{ include('blog/_user_profile.html.twig', {user: blog_post.author}) }}
      ```
      What is the purpose of `{user: blog_post.author}` in the `include` function?
    answers:
      -
        value: >
          It defines a new global variable named `user` for the entire application.
        correct: false
      -
        value: >
          It renames the `blog_post.author` variable to `user` specifically for the included template.
        correct: true
      -
        value: >
          It makes the `user` variable available only if `blog_post.author` is null.
        correct: false
      -
        value: >
          It passes the `user` variable by reference to the included template.
        correct: false
    help: |
      The second argument of the `include()` function is an array of variables to pass to the included template. This allows you to rename variables or pass additional context.
      https://symfony.com/doc/current/templates.html#include-twig-template-fragment-with-variable-renaming

  -
    question: |
      Which Twig tag is used to iterate over an array or traversable object?
    answers:
      -
        value: >
          `{% loop %}`
        correct: false
      -
        value: >
          `{% each %}`
        correct: false
      -
        value: >
          `{% iterate %}`
        correct: false
      -
        value: >
          `{% for %}`
        correct: true
    help: |
      The `{% for %}` tag is used to loop over arrays or objects that implement the `Traversable` interface.
      https://twig.symfony.com/doc/3.x/tags/for.html

  -
    question: |
      Which Twig function should you use to generate a relative URL to a Symfony route?
    answers:
      -
        value: >
          `url()`
        correct: false
      -
        value: >
          `route()`
        correct: false
      -
        value: >
          `path()`
        correct: true
      -
        value: >
          `link()`
        correct: false
    help: |
      The `path()` function generates a relative URL for a given route.
      https://symfony.com/doc/current/routing.html#generating-urls-in-twig-templates-for-javascript

  -
    question: >
      In a Symfony controller extending `AbstractController`, which method is used to render a Twig template and return a `Response` object directly?
    answers:
      -
        value: >
          `renderView()`
        correct: false
      -
        value: >
          `render()`
        correct: true
      -
        value: >
          `display()`
        correct: false
      -
        value: >
          `show()`
        correct: false
    help: |
      The `render()` method, available in controllers extending `AbstractController`, renders a Twig template and returns a `Response` object.
      https://symfony.com/doc/current/templates.html#render-twig-templates-in-symfony-controller-using-render-and-renderview

  -
    question: |
      What is the correct Twig filter to translate a string, optionally specifying a domain and locale?
    answers:
      -
        value: >
          `translate`
        correct: false
      -
        value: >
          `trans`
        correct: true
      -
        value: >
          `i18n`
        correct: false
      -
        value: >
          `locale`
        correct: false
    help: |
      The `trans` filter is used for translating strings in Twig templates. It supports specifying variables, a translation domain, and a locale.
      https://symfony.com/doc/current/reference/twig_reference.html#trans

  -
    question: |
      Which of the following is the correct Twig syntax for basic string interpolation (displaying a variable's value)?
    answers:
      -
        value: >
          `{% variable %}`
        correct: false
      -
        value: >
          `{{ variable }}`
        correct: true
      -
        value: >
          `{# variable #}`
        correct: false
      -
        value: >
          `<%= variable %>`
        correct: false
    help: |
      The `{{ ... }}` delimiter is used to output the content of a variable or the result of an expression.
      https://symfony.com/doc/current/templates.html#basic-twig-template-structure-example

  -
    question: |
      Which Twig function should be used to generate a URL to a static asset (e.g., an image, CSS, or JS file) located in the `public/` directory?
    answers:
      -
        value: >
          `url()`
        correct: false
      -
        value: >
          `resource()`
        correct: false
      -
        value: >
          `asset()`
        correct: true
      -
        value: >
          `static()`
        correct: false
    help: |
      The `asset()` Twig function is used to generate URLs for static assets, automatically handling base paths for application portability.
      https://symfony.com/doc/current/templates.html#link-static-assets-with-twig-asset-function

  -
    question: |
      Which Twig function or tag is primarily used for debugging variables by dumping their contents to the Web Debug Toolbar?
    answers:
      -
        value: >
          `{{ dump() }}`
        correct: false
      -
        value: >
          `{% var_dump %}`
        correct: false
      -
        value: >
          `{% dump %}`
        correct: true
      -
        value: >
          `{{ debug() }}`
        correct: false
    help: |
      The `{% dump %}` tag sends the contents of a variable to the Web Debug Toolbar, making it useful for debugging without cluttering the page output.
      https://symfony.com/doc/current/templates.html#use-twig-dump-tag-and-function

  -
    question: >
      What is the purpose of the `{# ... #}` delimiter in Twig?
    answers:
      -
        value: >
          To output the value of a variable.
        correct: false
      -
        value: >
          To define a block of executable code.
        correct: false
      -
        value: >
          To add comments that are ignored by the Twig parser and not rendered in the output.
        correct: true
      -
        value: >
          To include another template file.
        correct: false
    help: |
      The `{# ... #}` delimiter is used for comments in Twig templates. These comments are not included in the final rendered HTML.
      https://twig.symfony.com/doc/3.x/templates.html#comments

  -
    question: |
      If you want to explicitly disable auto-escaping for a specific variable in Twig, which filter should you use?
    answers:
      -
        value: >
          `safe`
        correct: false
      -
        value: >
          `raw`
        correct: true
      -
        value: >
          `unescape`
        correct: false
      -
        value: >
          `html`
        correct: false
    help: |
      The `raw` filter can be used to explicitly mark a variable as "safe" and prevent Twig from escaping its content. Use with caution as it can introduce XSS vulnerabilities if the content is not trusted.
      https://twig.symfony.com/doc/3.x/filters/raw.html

  -
    question: |
      In Twig template inheritance, how do you render the content of a block from the parent template within an overridden block in the child template?
    answers:
      -
        value: >
          `{{ super() }}`
        correct: false
      -
        value: >
          `{{ parent() }}`
        correct: true
      -
        value: >
          `{{ self() }}`
        correct: false
      -
        value: >
          `{{ block() }}`
        correct: false
    help: |
      The `{{ parent() }}` function is used inside a `{% block %}` to render the content of the block from the parent template.
      https://twig.symfony.com/doc/3.x/tags/extends.html#how-to-use-parent-blocks

  -
    question: |
      Which property of the `app` global variable in Twig allows you to check if a user is authenticated?
    answers:
      -
        value: >
          `app.security`
        correct: false
      -
        value: >
          `app.user`
        correct: true
      -
        value: >
          `app.session`
        correct: false
      -
        value: >
          `app.auth`
        correct: false
    help: |
      The `app.user` property provides access to the currently authenticated user object. You can check its existence or use `is_granted()` for more detailed access control.
      https://symfony.com/doc/current/security.html#fetch-authenticated-user-in-twig-template

  -
    question: |
      Which Twig filter is commonly used to count the number of items in an array or the length of a string?
    answers:
      -
        value: >
          `count`
        correct: false
      -
        value: >
          `size`
        correct: false
      -
        value: >
          `length`
        correct: true
      -
        value: >
          `num`
        correct: false
    help: |
      The `length` filter returns the number of items of a sequence or mapping, or the length of a string.
      https://twig.symfony.com/doc/3.x/filters/length.html

  -
    question: |
      What is the default behavior of variables passed to an included Twig template using `{{ include('template.html.twig') }}` without a second argument?
    answers:
      -
        value: >
          No variables are passed, the included template has an empty context.
        correct: false
      -
        value: >
          Only global variables are inherited by the included template.
        correct: false
      -
        value: >
          The included template inherits all variables from the parent template.
        correct: true
      -
        value: >
          The included template can only access variables explicitly defined within its own file.
        correct: false
    help: |
      By default, an included template has access to all variables of the active context.
      https://symfony.com/doc/current/templates.html#include-twig-template-fragment

  -
    question: |
      Which of the following is the correct way to use an `if` condition in Twig?
    answers:
      -
        value: >
          `{% if condition %}`
        correct: true
      -
        value: >
          `{{ if condition }}`
        correct: false
      -
        value: >
          `<if condition>`
        correct: false
      -
        value: >
          `<?php if (condition): ?>`
        correct: false
    help: |
      The `{% if %}` tag is used for conditional execution of blocks of code.
      https://twig.symfony.com/doc/3.x/tags/if.html

  -
    question: |
      When generating URLs in Twig for use in JavaScript, which filter should you apply to the `path()` function output to ensure it's safely embedded in a JavaScript string?
    answers:
      -
        value: >
          `|json_encode`
        correct: false
      -
        value: >
          `|escape('js')`
        correct: true
      -
        value: >
          `|raw`
        correct: false
      -
        value: >
          `|url_encode`
        correct: false
    help: |
      The `escape('js')` filter is crucial when embedding Twig-generated URLs into JavaScript to properly escape characters that could break the JavaScript string.
      https://symfony.com/doc/current/routing.html#generating-urls-in-twig-templates-for-javascript

  -
    question: >
      What is the primary difference between `render()` and `renderView()` methods in a Symfony controller when dealing with Twig templates?
    answers:
      -
        value: >
          `render()` returns the HTML content as a string, while `renderView()` returns a `Response` object.
        correct: false
      -
        value: >
          `render()` automatically handles caching, while `renderView()` does not.
        correct: false
      -
        value: >
          `render()` returns a `Response` object, while `renderView()` returns the rendered HTML content as a string.
        correct: true
      -
        value: >
          `render()` is for HTML templates, `renderView()` is for JSON responses.
        correct: false
    help: |
      `render()` is a shortcut that creates and returns a `Response` object with the rendered template content. `renderView()` only returns the rendered template content as a string, allowing you to create the `Response` object manually.
      https://symfony.com/doc/current/templates.html#render-twig-templates-in-symfony-controller-using-render-and-renderview

  -
    question: |
      To set a default translation domain for all subsequent translations within a specific Twig template, which tag should you use?
    answers:
      -
        value: >
          `{% default_domain 'app' %}`
        correct: false
      -
        value: >
          `{% trans_domain 'app' %}`
        correct: false
      -
        value: >
          `{% trans_default_domain 'app' %}`
        correct: true
      -
        value: >
          `{% set_translation_domain 'app' %}`
        correct: false
    help: |
      The `trans_default_domain` tag allows you to specify a default translation domain for all `trans` tags and filters in the current template.
      https://symfony.com/doc/current/translation.html#set-default-translation-domain-in-twig-template

  -
    question: |
      Which Symfony Encore Twig function is used to include the generated JavaScript files for a specific entry point?
    answers:
      -
        value: >
          `encore_entry_js_tags()`
        correct: false
      -
        value: >
          `encore_script_tags()`
        correct: false
      -
        value: >
          `encore_entry_script_tags()`
        correct: true
      -
        value: >
          `encore_javascript_tags()`
        correct: false
    help: |
      The `encore_entry_script_tags()` function is used to include the JavaScript files generated by Symfony Encore for a given entry point.
      https://symfony.com/doc/current/frontend/encore/simple-example.html#include-page-specific-assets-in-twig-templates

  -
    question: >
      What is the purpose of the `php bin/console debug:twig` command?
    answers:
      -
        value: >
          To clear the Twig cache.
        correct: false
      -
        value: >
          To list all available Twig functions, filters, and global variables.
        correct: true
      -
        value: >
          To compile Twig templates into PHP files.
        correct: false
      -
        value: >
          To generate new Twig templates.
        correct: false
    help: |
      The `debug:twig` command provides information about the Twig environment, including a list of all registered functions, filters, and global variables.
      https://symfony.com/doc/current/templates.html#inspect-twig-information-with-symfony-console

  -
    question: |
      Which attribute, introduced in Symfony 7.2, allows a controller method to return an array of parameters, with Symfony automatically rendering a Twig template and creating the `Response` object?
    answers:
      -
        value: >
          `#[Render]`
        correct: false
      -
        value: >
          `#[View]`
        correct: false
      -
        value: >
          `#[Template]`
        correct: true
      -
        value: >
          `#[Response]`
        correct: false
    help: |
      The `#[Template]` attribute (from `Symfony\Bridge\Twig\Attribute\Template`) allows a controller method to return an array of parameters, and Symfony automatically renders the associated Twig template and creates the `Response`.
      https://symfony.com/doc/current/templates.html#render-twig-templates-using-symfony-template-attribute

  -
    question: |
      Consider the following Twig template:

      ```twig
      <p>{{ user.name }} added this comment on {{ comment.publishedAt|date }}</p>
      ```
      Which of the following statements is TRUE regarding how Twig accesses `user.name` and `comment.publishedAt`?
    answers:
      -
        value: >
          Twig directly accesses public properties or calls public getter methods (e.g., `getName()`, `getPublishedAt()`).
        correct: true
      -
        value: >
          Twig only accesses public properties; getter methods are not supported.
        correct: false
      -
        value: >
          Twig requires explicit `get` prefixes for all method calls (e.g., `user.getName`).
        correct: false
      -
        value: >
          Twig uses PHP's magic `__get()` method exclusively for all property access.
        correct: false
    help: |
      Twig's dot notation (`.`) attempts to access a property, then a getter method (e.g., `getName()`), then an `is` or `has` method (e.g., `isName()`, `hasName()`), and finally checks if it's an array key.
      https://symfony.com/doc/current/templates.html#access-twig-template-variables

  -
    question: |
      Which of the following is an invalid Twig template inheritance scenario that would result in a `SyntaxError`?
    answers:
      -
        value: >
          Placing content outside a `{% block %}` tag after an `{% extends %}` declaration in a child template.
        correct: true
      -
        value: >
          Defining multiple blocks with the same name in a single template.
        correct: false
      -
        value: >
          Extending a template that itself extends another template.
        correct: false
      -
        value: >
          Using `{{ parent() }}` inside a block that is not overriding a parent block.
        correct: false
    help: |
      In Twig, when a template `extends` another, all content in the child template must be placed inside a `{% block %}` tag. Any content outside blocks will cause a `SyntaxError`.
      https://symfony.com/doc/current/templates.html#invalid-twig-template-inheritance-syntax

  -
    question: |
      To configure additional directories where Twig should look for templates, without assigning a namespace, which configuration option should be used in `config/packages/twig.yaml`?
    answers:
      -
        value: >
          `twig.template_dirs`
        correct: false
      -
        value: >
          `twig.paths` with a `~` (null) value for the namespace.
        correct: true
      -
        value: >
          `twig.directories`
        correct: false
      -
        value: >
          `twig.template_locations`
        correct: false
    help: |
      The `twig.paths` configuration option allows defining additional template directories. Using `~` (null) as the namespace value means templates in that directory are available without a namespace.
      https://symfony.com/doc/current/templates.html#configure-twig-template-paths-without-namespaces

  -
    question: |
      Which Twig function can be used to embed the output of another Symfony controller into the current template, either via a route or directly by controller service?
    answers:
      -
        value: >
          `include()`
        correct: false
      -
        value: >
          `embed()`
        correct: false
      -
        value: >
          `render()`
        correct: true
      -
        value: >
          `subrequest()`
        correct: false
    help: |
      The `render()` Twig function is used to embed the output of another controller into the current template, effectively making a sub-request.
      https://symfony.com/doc/current/templates.html#embed-symfony-controllers-in-twig-templates

  -
    question: |
      What is the purpose of the `stopwatch` Twig tag?
    answers:
      -
        value: >
          To pause the rendering of the template for a specified duration.
        correct: false
      -
        value: >
          To measure the execution time and memory usage of a specific block of Twig code for profiling.
        correct: true
      -
        value: >
          To prevent a block of code from being rendered on the page.
        correct: false
      -
        value: >
          To add a timestamp to the rendered output.
        correct: false
    help: |
      The `stopwatch` Twig tag allows you to profile the performance of specific sections within your Twig templates, with the data appearing in the Symfony profiler.
      https://symfony.com/doc/current/performance.html#profile-twig-template-code-with-stopwatch-tag

  -
    question: |
      When overriding a Twig template from a third-party bundle, why might you use the special `!` prefix in the `extends` tag (e.g., `{% extends "@!AcmeUser/registration/confirmed.html.twig" %}`)?
    answers:
      -
        value: >
          To force the template to be loaded from the bundle's original path, ignoring any local overrides.
        correct: false
      -
        value: >
          To prevent an infinite loop error when the overridden template itself extends the original template.
        correct: true
      -
        value: >
          To mark the template as deprecated.
        correct: false
      -
        value: >
          To indicate that the template should be cached aggressively.
        correct: false
    help: |
      The `!` prefix in `{% extends "@!BundleName/..." %}` is used to prevent infinite loop errors when overriding a template that itself extends the original template from the bundle. It ensures the original bundle template is extended.
      https://symfony.com/doc/current/bundles/override.html#override-twig-template-block-in-symfony-bundle

  -
    question: |
      Which console command can be used to check Twig templates for syntax errors and deprecations?
    answers:
      -
        value: >
          `php bin/console twig:lint`
        correct: false
      -
        value: >
          `php bin/console lint:twig`
        correct: true
      -
        value: >
          `php bin/console twig:validate`
        correct: false
      -
        value: >
          `php bin/console debug:twig --errors`
        correct: false
    help: |
      The `lint:twig` command is used to check Twig templates for syntax errors and can also show deprecated features used.
      https://symfony.com/doc/current/templates.html#lint-twig-templates-with-symfony-console

  -
    question: |
      How can you configure Twig to use a custom default path for templates, for example, `resources/views` instead of `templates/`?
    answers:
      -
        value: >
          By setting the `twig.template_dir` parameter in `services.yaml`.
        correct: false
      -
        value: >
          By setting the `twig.default_path` option in `config/packages/twig.yaml`.
        correct: true
      -
        value: >
          By modifying the `kernel.project_dir` parameter.
        correct: false
      -
        value: >
          By defining a new Twig loader service.
        correct: false
    help: |
      The `default_path` option under the `twig` configuration in `config/packages/twig.yaml` allows you to change the default directory where Twig looks for templates.
      https://symfony.com/doc/current/configuration/override_dir_structure.html#configure-twig-templates-directory

  -
    question: |
      When using `TemplatedEmail` to send emails with Twig, which method is used to specify the Twig template file for the HTML content of the email?
    answers:
      -
        value: >
          `setHtmlTemplate()`
        correct: false
      -
        value: >
          `htmlTemplate()`
        correct: true
      -
        value: >
          `templateHtml()`
        correct: false
      -
        value: >
          `renderHtml()`
        correct: false
    help: |
      The `htmlTemplate()` method of `TemplatedEmail` is used to specify the path to the Twig template that will render the HTML body of the email.
      https://symfony.com/doc/current/mailer.html#create-templatedemail-with-twig

  -
    question: |
      Which Twig filter can be used to serialize a PHP object into a specific format like JSON directly within the template?
    answers:
      -
        value: >
          `json_encode`
        correct: false
      -
        value: >
          `serialize`
        correct: true
      -
        value: >
          `to_json`
        correct: false
      -
        value: >
          `object_to_string`
        correct: false
    help: |
      The `serialize` filter can convert a PHP object into a specified format (e.g., JSON) using the Symfony Serializer component.
      https://symfony.com/doc/current/serializer.html#serialize-object-in-twig-template

  -
    question: |
      What is the correct way to render the opening `<form>` tag for a Symfony form named `form` in Twig?
    answers:
      -
        value: >
          `{{ form_start(form) }}`
        correct: true
      -
        value: >
          `{{ form(form) }}`
        correct: false
      -
        value: >
          `{% form_open(form) %}`
        correct: false
      -
        value: >
          `<form {{ form_attributes(form) }}>`
        correct: false
    help: |
      The `form_start(form)` Twig helper function renders the opening `<form>` tag, including the `action`, `method`, and `enctype` attributes.
      https://symfony.com/doc/current/form/form_collections.html#render-task-form-in-twig-template

  -
    question: |
      When configuring Twig template paths with namespaces (e.g., `@admin/dashboard.html.twig`), what is the correct YAML syntax in `config/packages/twig.yaml`?
    answers:
      -
        value: >
          ```yaml
          twig:
              paths:
                  'backend/templates': 'admin'
          ```
        correct: true
      -
        value: >
          ```yaml
          twig:
              namespaces:
                  'admin': 'backend/templates'
          ```
        correct: false
      -
        value: >
          ```yaml
          twig:
              template_namespaces:
                  admin: 'backend/templates'
          ```
        correct: false
      -
        value: >
          ```yaml
          twig:
              directories:
                  admin: 'backend/templates'
          ```
        correct: false
    help: |
      To assign a namespace to a custom template directory, you specify the directory path as the key and the namespace as the value under `twig.paths`.
      https://symfony.com/doc/current/templates.html#configure-twig-template-paths-with-namespaces

  -
    question: |
      Which Twig function is used to generate an absolute URL to a Symfony route?
    answers:
      -
        value: >
          `path()`
        correct: false
      -
        value: >
          `absolute_path()`
        correct: false
      -
        value: >
          `url()`
        correct: true
      -
        value: >
          `full_url()`
        correct: false
    help: |
      The `url()` function generates an absolute URL for a given route, including the scheme and host.
      https://symfony.com/doc/current/routing.html#generating-urls-in-twig-templates

  -
    question: |
      To render only a specific block from a Twig template directly from a Symfony controller method, which method should you use?
    answers:
      -
        value: >
          `renderBlock()`
        correct: true
      -
        value: >
          `renderPartial()`
        correct: false
      -
        value: >
          `renderSection()`
        correct: false
      -
        value: >
          `renderBlockView()` (returns string, not Response)
        correct: false
    help: |
      The `renderBlock()` method allows you to render a specific block from a Twig template and returns a `Response` object. `renderBlockView()` returns the content as a string.
      https://symfony.com/doc/current/templates.html#render-twig-template-blocks-in-symfony-controller

  -
    question: |
      When using `TranslatableMessage` objects in a controller, how can you pass them to a Twig template to be translated by the `trans` filter?
    answers:
      -
        value: >
          You must convert them to strings before passing to Twig.
        correct: false
      -
        value: >
          Twig's `trans` filter automatically handles `TranslatableMessage` objects.
        correct: true
      -
        value: >
          You need a custom Twig extension to process `TranslatableMessage` objects.
        correct: false
      -
        value: >
          `TranslatableMessage` objects are only for PHP-side translation, not Twig.
        correct: false
    help: |
      Twig's `trans` filter can directly handle `TranslatableMessage` objects, deferring the translation process to the template.
      https://symfony.com/doc/current/translation.html#use-translatablemessage-with-twig-trans-filter

  -
    question: |
      Which Symfony Encore Twig function is used to include the generated CSS files for a specific entry point?
    answers:
      -
        value: >
          `encore_entry_css_tags()`
        correct: false
      -
        value: >
          `encore_stylesheet_tags()`
        correct: false
      -
        value: >
          `encore_entry_link_tags()`
        correct: true
      -
        value: >
          `encore_style_tags()`
        correct: false
    help: |
      The `encore_entry_link_tags()` function is used to include the CSS files generated by Symfony Encore for a given entry point.
      https://symfony.com/doc/current/frontend/encore/simple-example.html#include-page-specific-assets-in-twig-templates

  -
    question: |
      Which method of the `Twig\Loader\FilesystemLoader` can be used to programmatically check if a specific Twig template exists?
    answers:
      -
        value: >
          `find()`
        correct: false
      -
        value: >
          `has()`
        correct: false
      -
        value: >
          `exists()`
        correct: true
      -
        value: >
          `locate()`
        correct: false
    help: |
      The `exists()` method of the Twig loader can be used to check if a template exists at a given path.
      https://symfony.com/doc/current/templates.html#check-twig-template-existence

  -
    question: |
      What is the correct way to inject the `Twig\Environment` service into a custom Symfony service to render templates programmatically?
    answers:
      -
        value: >
          Type-hint the constructor argument with `Twig\Environment`.
        correct: true
      -
        value: >
          Use the `#[Inject('twig')]` attribute.
        correct: false
      -
        value: >
          Call `Container::get('twig')` inside the service.
        correct: false
      -
        value: >
          Extend `AbstractController` in your service.
        correct: false
    help: |
      You can inject the `Twig\Environment` service into your own services by type-hinting it in the constructor, allowing you to use its `render()` method.
      https://symfony.com/doc/current/templates.html#render-twig-templates-in-symfony-service-by-injecting-twig-environment

  -
    question: |
      When defining a base Twig template (`base.html.twig`), what is the primary purpose of `{% block %}` tags?
    answers:
      -
        value: >
          To define reusable macros.
        correct: false
      -
        value: >
          To define sections of content that child templates can override or extend.
        correct: true
      -
        value: >
          To include external JavaScript files.
        correct: false
      -
        value: >
          To create new global variables.
        correct: false
    help: |
      `{% block %}` tags define areas in a parent template that child templates can fill in or override, enabling template inheritance.
      https://symfony.com/doc/current/templates.html#base-twig-template-structure-with-blocks

  -
    question: |
      Which global variable provides access to the current `Request` object in a Twig template?
    answers:
      -
        value: >
          `app.request`
        correct: true
      -
        value: >
          `request`
        correct: false
      -
        value: >
          `app.http_request`
        correct: false
      -
        value: >
          `app.current_request`
        correct: false
    help: |
      The `app.request` property of the `app` global variable provides access to the current `Request` object, allowing you to get information like the request method or path.
      https://symfony.com/doc/current/templates.html#access-application-data-with-twig-app-global-variable

  -
    question: |
      What is the correct way to include a Twig template fragment named `_sidebar.html.twig` in the current template?
    answers:
      -
        value: >
          `{% include '_sidebar.html.twig' %}`
        correct: true
      -
        value: >
          `{{ include('_sidebar.html.twig') }}`
        correct: false
      -
        value: >
          `{% import '_sidebar.html.twig' %}`
        correct: false
      -
        value: >
          `{{ render('_sidebar.html.twig') }}`
        correct: false
    help: |
      The `{% include %}` tag is used to include a template and return the rendered content of that template.
      https://twig.symfony.com/doc/3.x/tags/include.html

  -
    question: |
      Which Twig function is used to display workflow metadata for an object?
    answers:
      -
        value: >
          `workflow_get_metadata()`
        correct: false
      -
        value: >
          `workflow_metadata()`
        correct: true
      -
        value: >
          `get_workflow_info()`
        correct: false
      -
        value: >
          `workflow_data()`
        correct: false
    help: |
      The `workflow_metadata()` Twig function allows you to access and display metadata associated with workflows, places, and transitions.
      https://symfony.com/doc/current/workflow.html#displaying-workflow-metadata-in-twig-templates

  -
    question: |
      What is the purpose of the `default` option in the `render_hinclude` Twig function?
    answers:
      -
        value: >
          To specify a fallback template to render if the main content fails to load.
        correct: true
      -
        value: >
          To set the default HTTP method for the sub-request.
        correct: false
      -
        value: >
          To define default variables for the embedded controller.
        correct: false
      -
        value: >
          To specify the default cache lifetime for the embedded content.
        correct: false
    help: |
      The `default` option in `render_hinclude` specifies a template to be rendered as fallback content if the main embedded content cannot be loaded (e.g., due to a network error).
      https://symfony.com/doc/current/templates.html#specify-default-template-per-render-hinclude-call

  -
    question: |
      Which of the following is the correct way to check if a variable `user` is defined and not null in Twig?
    answers:
      -
        value: >
          `{% if user is defined and user is not null %}`
        correct: true
      -
        value: >
          `{% if user %}`
        correct: false
      -
        value: >
          `{% if user is not empty %}`
        correct: false
      -
        value: >
          `{% if user is set %}`
        correct: false
    help: |
      The `is defined` test checks if a variable is defined. Combining it with `is not null` ensures the variable exists and has a value. `{% if user %}` would also evaluate to false if `user` is `0`, `false`, or an empty string/array.
      https://twig.symfony.com/doc/3.x/tests/defined.html

  -
    question: |
      When using the `#[Template]` attribute on a controller method, what should the method return?
    answers:
      -
        value: >
          A `Response` object.
        correct: false
      -
        value: >
          A string representing the rendered HTML.
        correct: false
      -
        value: >
          An array of parameters to be passed to the template.
        correct: true
      -
        value: >
          `null`.
        correct: false
    help: |
      When using the `#[Template]` attribute, the controller method should return an array of parameters that will be passed to the Twig template. Symfony handles the creation of the `Response` object.
      https://symfony.com/doc/current/templates.html#render-twig-templates-using-symfony-template-attribute

  -
    question: |
      Which Twig filter is commonly used to format a numerical value as currency, often requiring custom implementation?
    answers:
      -
        value: >
          `currency`
        correct: false
      -
        value: >
          `money`
        correct: false
      -
        value: >
          `price` (if a custom filter is defined)
        correct: true
      -
        value: >
          `format_currency`
        correct: false
    help: |
      While Twig doesn't have a built-in `price` filter, this question refers to a common scenario where custom Twig filters are created to handle specific formatting needs like currency. The example provided in the documentation shows a custom `price` filter.
      https://symfony.com/doc/current/templates.html#using-a-custom-twig-price-filter-in-templates

  -
    question: |
      What is the recommended naming convention for variables passed from a Symfony controller to a Twig template?
    answers:
      -
        value: >
          `camelCase`
        correct: false
      -
        value: >
          `PascalCase`
        correct: false
      -
        value: >
          `snake_case`
        correct: true
      -
        value: >
          `kebab-case`
        correct: false
    help: |
      Twig recommends using `snake_case` for variable names passed to templates (e.g., `user_first_name` instead of `userFirstName`).
      https://symfony.com/doc/current/templates.html#symfony-controller-rendering-a-twig-template

  -
    question: |
      To explicitly define a text-only Twig template for an email when using `TemplatedEmail`, which method should be used in addition to `htmlTemplate()`?
    answers:
      -
        value: >
          `setTextTemplate()`
        correct: false
      -
        value: >
          `textTemplate()`
        correct: true
      -
        value: >
          `plainTextTemplate()`
        correct: false
      -
        value: >
          `addTextTemplate()`
        correct: false
    help: |
      The `textTemplate()` method of `TemplatedEmail` allows you to specify a Twig template for the plain text version of the email.
      https://symfony.com/doc/current/mailer.html#specify-text-only-twig-template-for-email

  -
    question: |
      Which of the following is NOT a valid way to configure additional Twig template paths in Symfony?
    answers:
      -
        value: >
          Using the `twig.paths` configuration in `config/packages/twig.yaml`.
        correct: false
      -
        value: >
          Using the `twig:path` XML element in `config/packages/twig.xml`.
        correct: false
      -
        value: >
          Calling `$twig->addPath()` in a service definition.
        correct: false
      -
        value: >
          Modifying the `kernel.root_dir` parameter in `services.yaml`.
        correct: true
    help: |
      While `kernel.project_dir` is used in path configurations, directly modifying `kernel.root_dir` in `services.yaml` is not the standard or correct way to configure Twig template paths. Twig paths are configured via `twig.yaml`, `twig.xml`, or `twig.php` configuration files.
      https://symfony.com/doc/current/reference/configuration/twig.html#paths

  -
    question: |
      When embedding content asynchronously using `render_hinclude` in Twig, what are the two primary ways to specify the content source?
    answers:
      -
        value: >
          By providing a template path or a service ID.
        correct: false
      -
        value: >
          By providing a controller reference or a URL.
        correct: true
      -
        value: >
          By providing an asset path or a database query.
        correct: false
      -
        value: >
          By providing a Twig block name or a Twig macro.
        correct: false
    help: |
      The `render_hinclude` function can embed content from a controller (using `controller()`) or a URL (using `url()`).
      https://symfony.com/doc/current/templates.html#embed-asynchronous-content-with-render-hinclude-in-twig

  -
    question: |
      What is the purpose of the `{{ dump(variable) }}` function in Twig, as opposed to the `{% dump variable %}` tag?
    answers:
      -
        value: >
          `{{ dump() }}` dumps the variable directly into the page content, while `{% dump %}` sends it to the Web Debug Toolbar.
        correct: true
      -
        value: >
          `{{ dump() }}` is for production, `{% dump %}` is for development.
        correct: false
      -
        value: >
          `{{ dump() }}` is for simple variables, `{% dump %}` is for complex objects.
        correct: false
      -
        value: >
          They are functionally identical, just different syntax.
        correct: false
    help: |
      The `{{ dump() }}` function outputs the variable's content directly into the HTML of the page, while the `{% dump %}` tag sends it to the Symfony Web Debug Toolbar.
      https://symfony.com/doc/current/templates.html#use-twig-dump-tag-and-function

  -
    question: |
      Which Composer command is used to install the Twig templating engine and its integration with Symfony?
    answers:
      -
        value: >
          `composer require twig/twig`
        correct: false
      -
        value: >
          `composer install symfony/twig`
        correct: false
      -
        value: >
          `composer require symfony/twig-bundle`
        correct: true
      -
        value: >
          `composer add twig`
        correct: false
    help: |
      The `symfony/twig-bundle` package provides the necessary integration of Twig with Symfony applications.
      https://symfony.com/doc/current/templates.html#install-twig-bundle-for-symfony

  -
    question: |
      When defining a base Twig template (`base.html.twig`), what is the typical structure for the `<body>` section to allow child templates to define their content?
    answers:
      -
        value: >
          `<body id="content"></body>`
        correct: false
      -
        value: >
          `<body>{% content %}{% endcontent %}</body>`
        correct: false
      -
        value: >
          `<body>{% block body %}{% endblock %}</body>`
        correct: true
      -
        value: >
          `<body>{{ content }}</body>`
        correct: false
    help: |
      The `{% block body %}{% endblock %}` structure within the `<body>` tag allows child templates to override the entire body content or define nested blocks within it.
      https://symfony.com/doc/current/templates.html#base-twig-template-structure-with-blocks

  -
    question: |
      Which of the following is the correct way to access the application's environment (e.g., `dev`, `prod`) in a Twig template?
    answers:
      -
        value: >
          `{{ app.env }}`
        correct: false
      -
        value: >
          `{{ app.environment }}`
        correct: true
      -
        value: >
          `{{ kernel.environment }}`
        correct: false
      -
        value: >
          `{{ symfony.environment }}`
        correct: false
    help: |
      The `app.environment` property of the `app` global variable provides access to the current application environment.
      https://symfony.com/doc/current/templates.html#access-application-data-with-twig-app-global-variable

  -
    question: |
      What is the primary benefit of using `renderBlock()` or `renderBlockView()` in a controller compared to rendering the entire template?
    answers:
      -
        value: >
          It allows for more efficient caching of template fragments.
        correct: false
      -
        value: >
          It enables rendering only a specific portion of a template, reducing overhead.
        correct: true
      -
        value: >
          It automatically injects all services into the rendered block.
        correct: false
      -
        value: >
          It bypasses Twig's auto-escaping for the rendered block.
        correct: false
    help: |
      `renderBlock()` and `renderBlockView()` are useful for rendering only a specific block from a template, which can be more efficient than rendering the entire template when only a small part is needed.
      https://symfony.com/doc/current/templates.html#render-twig-template-blocks-in-symfony-controller

  -
    question: |
      When creating a `TemplatedEmail` in Symfony, how do you pass variables (context) to the Twig template used for the email body?
    answers:
      -
        value: >
          Using the `setVariables()` method.
        correct: false
      -
        value: >
          Using the `with()` method.
        correct: false
      -
        value: >
          Using the `context()` method.
        correct: true
      -
        value: >
          Using the `passVariables()` method.
        correct: false
    help: |
      The `context()` method of `TemplatedEmail` is used to pass an array of variables (key-value pairs) to the Twig template.
      https://symfony.com/doc/current/mailer.html#create-templatedemail-with-twig

  -
    question: |
      Which of the following Twig functions would you use to generate an absolute URL for an asset, including the domain and scheme?
    answers:
      -
        value: >
          `asset()`
        correct: false
      -
        value: >
          `url_asset()`
        correct: false
      -
        value: >
          `absolute_url(asset('...'))`
        correct: true
      -
        value: >
          `full_asset_url()`
        correct: false
    help: |
      To get an absolute URL for an asset, you combine the `asset()` function with the `absolute_url()` function.
      https://symfony.com/doc/current/templates.html#generate-absolute-urls-for-assets-in-twig

  -
    question: |
      What is the primary purpose of the `app.debug` global variable in Twig?
    answers:
      -
        value: >
          To enable or disable Twig's internal caching.
        correct: false
      -
        value: >
          To indicate whether the application is running in debug mode, often used for conditional display of debug information.
        correct: true
      -
        value: >
          To force Twig to recompile all templates.
        correct: false
      -
        value: >
          To control the level of error reporting in Twig.
        correct: false
    help: |
      The `app.debug` variable is a boolean that indicates if the application is in debug mode. It's commonly used to conditionally display debug-related information or features in templates.
      https://symfony.com/doc/current/templates.html#access-application-data-with-twig-app-global-variable

  -
    question: |
      Which Twig tag is used to define a reusable piece of template code that can accept arguments, similar to a function?
    answers:
      -
        value: >
          `{% function %}`
        correct: false
      -
        value: >
          `{% macro %}`
        correct: true
      -
        value: >
          `{% snippet %}`
        correct: false
      -
        value: >
          `{% include %}`
        correct: false
    help: |
      The `{% macro %}` tag is used to define reusable blocks of Twig code that can be called with different arguments, similar to functions in programming languages.
      https://twig.symfony.com/doc/3.x/tags/macro.html

  -
    question: |
      What is the correct way to include a Twig template fragment and ensure it does NOT inherit variables from the parent template, forcing it to have an isolated context?
    answers:
      -
        value: >
          `{{ include('template.html.twig', with_context = false) }}`
        correct: true
      -
        value: >
          `{{ include('template.html.twig', only = true) }}`
        correct: false
      -
        value: >
          `{{ include('template.html.twig', isolated = true) }}`
        correct: false
      -
        value: >
          `{{ include('template.html.twig', inherit_vars = false) }}`
        correct: false
    help: |
      The `with_context = false` option in the `include` function ensures that the included template does not inherit variables from the parent template, providing an isolated context.
      https://twig.symfony.com/doc/3.x/functions/include.html#including-templates

  -
    question: |
      Which of the following is a valid way to define a custom global variable in Twig through Symfony's configuration?
    answers:
      -
        value: >
          ```yaml
          twig:
              globals:
                  my_global: '@App\\Service\\MyGlobalService'
          ```
        correct: true
      -
        value: >
          ```yaml
          twig:
              variables:
                  my_global: 'some_value'
          ```
        correct: false
      -
        value: >
          ```yaml
          twig:
              parameters:
                  my_global: 'some_value'
          ```
        correct: false
      -
        value: >
          ```yaml
          twig:
              context:
                  my_global: 'some_value'
          ```
        correct: false
    help: |
      The `twig.globals` configuration allows you to define global variables that are available in all Twig templates. You can assign a static value or reference a service.
      https://symfony.com/doc/current/reference/configuration/twig.html#globals

  -
    question: |
      What is the purpose of the `transchoice` filter in Twig?
    answers:
      -
        value: >
          To translate a string and apply pluralization rules based on a given number.
        correct: true
      -
        value: >
          To choose between multiple translation domains.
        correct: false
      -
        value: >
          To translate a string and convert it to uppercase or lowercase.
        correct: false
      -
        value: >
          To translate a string and replace placeholders with variables.
        correct: false
    help: |
      The `transchoice` filter (or tag) is used to translate messages that have different forms depending on a given count, handling pluralization rules.
      https://symfony.com/doc/current/translation.html#pluralization

  -
    question: |
      When iterating over an array in Twig using `{% for item in items %}`, how can you access the current loop index (starting from 0)?
    answers:
      -
        value: >
          `{{ loop.index0 }}`
        correct: true
      -
        value: >
          `{{ loop.index }}`
        correct: false
      -
        value: >
          `{{ loop.first }}`
        correct: false
      -
        value: >
          `{{ loop.key }}`
        correct: false
    help: |
      Inside a `for` loop, the `loop` variable provides useful information about the current iteration. `loop.index0` gives the current iteration index (0-based).
      https://twig.symfony.com/doc/3.x/tags/for.html#the-loop-variable

  -
    question: |
      Which of the following is the most efficient way to render a Symfony form field, including its label, errors, and widgets, in Twig?
    answers:
      -
        value: >
          `{{ form_widget(form.field) }}`
        correct: false
      -
        value: >
          `{{ form_label(form.field) }}`
        correct: false
      -
        value: >
          `{{ form_row(form.field) }}`
        correct: true
      -
        value: >
          `{{ form_errors(form.field) }}`
        correct: false
    help: |
      The `form_row()` helper renders the label, errors, and widget for a single form field, making it the most convenient way to render a field in Twig.
      https://symfony.com/doc/current/forms.html#rendering-a-form-in-a-twig-template

  -
    question: |
      What is the purpose of the `{% set %}` tag in Twig?
    answers:
      -
        value: >
          To define a new block for template inheritance.
        correct: false
      -
        value: >
          To assign a value to a variable within the current template scope.
        correct: true
      -
        value: >
          To include an external CSS file.
        correct: false
      -
        value: >
          To declare a global variable.
        correct: false
    help: |
      The `{% set %}` tag is used to assign values to variables within the current template scope.
      https://twig.symfony.com/doc/3.x/tags/set.html

  -
    question: |
      When dealing with form collections in Twig, how do you typically iterate over child forms (e.g., a collection of tags) to render each one?
    answers:
      -
        value: >
          Using a `{% for %}` loop directly on the parent form's collection field (e.g., `form.tags`).
        correct: true
      -
        value: >
          Using a custom Twig filter to extract the collection items.
        correct: false
      -
        value: >
          Calling `form_collection_items(form.tags)`.
        correct: false
      -
        value: >
          Accessing `form.tags.children`.
        correct: false
    help: |
      You can iterate over form collection fields directly using a `{% for %}` loop on the parent form's collection field (e.g., `form.tags`), and then render each child form's row.
      https://symfony.com/doc/current/form/form_collections.html#render-symfony-form-collection-with-existing-tags

  -
    question: |
      Which of the following is the correct way to check if a variable `items` is empty in Twig?
    answers:
      -
        value: >
          `{% if items is empty %}`
        correct: true
      -
        value: >
          `{% if count(items) == 0 %}`
        correct: false
      -
        value: >
          `{% if items.length == 0 %}`
        correct: false
      -
        value: >
          `{% if items == null %}`
        correct: false
    help: |
      The `is empty` test checks if a variable is an empty string, array, hash, or `null`.
      https://twig.symfony.com/doc/3.x/tests/empty.html

  -
    question: |
      What is the primary benefit of using template inheritance with `{% extends %}` and `{% block %}` tags?
    answers:
      -
        value: >
          It allows for dynamic loading of templates based on user roles.
        correct: false
      -
        value: >
          It promotes code reusability and maintains a consistent layout across multiple pages.
        correct: true
      -
        value: >
          It automatically optimizes template rendering performance.
        correct: false
      -
        value: >
          It enables direct database queries from within Twig templates.
        correct: false
    help: |
      Template inheritance is a powerful feature that allows you to build a base "skeleton" template that contains all the common elements of your site and defines "blocks" that child templates can override. This promotes reusability and consistency.
      https://symfony.com/doc/current/templates.html#template-inheritance

  -
    question: |
      Which Twig function allows you to generate a URL to a Symfony route, including query parameters?
    answers:
      -
        value: >
          `path('route_name', {param1: 'value1', param2: 'value2'})`
        correct: true
      -
        value: >
          `url('route_name?param1=value1&param2=value2')`
        correct: false
      -
        value: >
          `route('route_name', {param1: 'value1'})`
        correct: false
      -
        value: >
          `link('route_name', {query: {param1: 'value1'}})`
        correct: false
    help: |
      Both `path()` and `url()` functions accept an associative array as the second argument for route parameters, which will be included in the generated URL.
      https://symfony.com/doc/current/routing.html#generating-urls-in-twig-templates

  -
    question: |
      What is the correct way to render a Twig template from a Symfony controller and pass a `Response` object to the `render` function for further manipulation?
    answers:
      -
        value: >
          `return $this->render('template.html.twig')->setResponse($response);`
        correct: false
      -
        value: >
          `return $this->render('template.html.twig', ['response' => $response]);`
        correct: false
      -
        value: >
          `return $this->render('template.html.twig', response: $response);`
        correct: true
      -
        value: >
          `return $this->renderWithResponse('template.html.twig', $response);`
        correct: false
    help: |
      The `render()` method in `AbstractController` accepts a named argument `response` (since Symfony 6.2) to pass an existing `Response` object that will be used.
      https://symfony.com/doc/current/controller.html#render-twig-template-in-symfony-controller

  -
    question: |
      Which of the following is NOT a valid way to output a variable `product_name` in Twig?
    answers:
      -
        value: >
          `{{ product_name }}`
        correct: false
      -
        value: >
          `{% print product_name %}`
        correct: true
      -
        value: >
          `{{ product.name }}` (if product is an object/array)
        correct: false
      -
        value: >
          `{{ 'Product: ' ~ product_name }}`
        correct: false
    help: |
      Twig uses `{{ ... }}` for outputting variables and expressions. There is no `{% print %}` tag.
      https://twig.symfony.com/doc/3.x/templates.html#outputting-variables

  -
    question: |
      What is the purpose of the `|raw` filter in Twig?
    answers:
      -
        value: >
          To convert a variable to a raw string format.
        correct: false
      -
        value: >
          To prevent Twig from applying auto-escaping to the variable's content.
        correct: true
      -
        value: >
          To encode the variable's content for URL safety.
        correct: false
      -
        value: >
          To display the variable's original, unformatted value.
        correct: false
    help: |
      The `raw` filter marks a value as "safe" which means that Twig will not escape it. Use this filter only when you are sure the content is safe and does not contain any malicious code.
      https://twig.symfony.com/doc/3.x/filters/raw.html

  -
    question: |
      When building reusable Twig components, what is the best practice for organizing template fragments that are meant to be included by other templates (e.g., a user profile snippet)?
    answers:
      -
        value: >
          Store them in a `components/` directory.
        correct: false
      -
        value: >
          Prefix their filenames with an underscore (e.g., `_user_profile.html.twig`).
        correct: true
      -
        value: >
          Place them directly in the `templates/` root directory.
        correct: false
      -
        value: >
          Define them as Twig macros within the main template.
        correct: false
    help: |
      It's a common convention to prefix template fragments that are meant to be included (and not rendered directly as full pages) with an underscore, like `_user_profile.html.twig`.
      https://symfony.com/doc/current/templates.html#example-twig-template-fragment-for-reuse

  -
    question: |
      Which of the following is the correct way to use an `else` condition within an `if` statement in Twig?
    answers:
      -
        value: >
          `{% if condition %} ... {% else %} ... {% endif %}`
        correct: true
      -
        value: >
          `{% if condition %} ... {% then %} ... {% endif %}`
        correct: false
      -
        value: >
          `{{ if condition }} ... {{ else }} ... {{ endif }}`
        correct: false
      -
        value: >
          `{% if condition else %} ... {% endif %}`
        correct: false
    help: |
      The `{% else %}` tag can be used to provide an alternative block of code to execute if the `if` condition is false.
      https://twig.symfony.com/doc/3.x/tags/if.html

  -
    question: |
      What is the primary purpose of the `composer require symfony/twig-bundle` command?
    answers:
      -
        value: >
          To install the Twig templating engine only.
        correct: false
      -
        value: >
          To install the Twig templating engine and its integration with the Symfony framework.
        correct: true
      -
        value: >
          To generate a new Symfony project with Twig pre-configured.
        correct: false
      -
        value: >
          To update existing Twig templates to the latest version.
        correct: false
    help: |
      The `symfony/twig-bundle` package provides the necessary integration of the Twig templating engine with Symfony, including services, configuration, and Twig extensions.
      https://symfony.com/doc/current/templates.html#install-twig-bundle-for-symfony

  -
    question: |
      When embedding a controller using `render()` in Twig, what is the difference between using `path()` and `controller()`?
    answers:
      -
        value: >
          `path()` embeds via a route URL, while `controller()` embeds directly via the controller service.
        correct: true
      -
        value: >
          `path()` is for internal requests, `controller()` is for external requests.
        correct: false
      -
        value: >
          `path()` is more performant, `controller()` is for debugging.
        correct: false
      -
        value: >
          `path()` can pass parameters, `controller()` cannot.
        correct: false
    help: |
      `render(path(...))` makes a sub-request to a route, while `render(controller(...))` directly executes a controller method without going through the routing layer. `controller()` is useful when you don't want to expose the embedded controller with a public URL.
      https://symfony.com/doc/current/templates.html#embed-symfony-controllers-in-twig-templates

  -
    question: |
      Which of the following is a valid way to define a custom Twig filter in Symfony?
    answers:
      -
        value: >
          Creating a PHP class that extends `Twig_Extension` and registers the filter.
        correct: true
      -
        value: >
          Adding a new entry in `config/services.yaml` under `twig.filters`.
        correct: false
      -
        value: >
          Using the `#[AsTwigFilter]` attribute directly on a PHP function.
        correct: false
      -
        value: >
          Defining a new Twig macro with the filter's logic.
        correct: false
    help: |
      Custom Twig filters are typically defined by creating a PHP class that extends `AbstractExtension` (or implements `ExtensionInterface`) and registers the filter via the `getFilters()` method.
      https://symfony.com/doc/current/templating/twig_extension.html

  -
    question: |
      What is the primary benefit of using `render_hinclude` over a regular `render` for embedding content in Twig?
    answers:
      -
        value: >
          `render_hinclude` always caches the embedded content.
        correct: false
      -
        value: >
          `render_hinclude` embeds content asynchronously, improving initial page load time.
        correct: true
      -
        value: >
          `render_hinclude` provides better security for embedded content.
        correct: false
      -
        value: >
          `render_hinclude` allows for direct database access from the template.
        correct: false
    help: |
      `render_hinclude` is designed for asynchronous content inclusion, meaning the main page can load and render quickly, with the embedded content loading separately via an AJAX request.
      https://symfony.com/doc/current/templates.html#embed-asynchronous-content-with-render-hinclude-in-twig

  -
    question: |
      Which of the following is the correct way to iterate over an array `items` and display each `item`'s `name` property in Twig?
    answers:
      -
        value: >
          ```twig
          {% for item in items %}
              {{ item.name }}
          {% endfor %}
          ```
        correct: true
      -
        value: >
          ```twig
          {% loop items as item %}
              {{ item.name }}
          {% endloop %}
          ```
        correct: false
      -
        value: >
          ```twig
          {{ items | map(item => item.name) | join(', ') }}
          ```
        correct: false
      -
        value: >
          ```twig
          {% foreach items as item %}
              {{ item.name }}
          {% endforeach %}
          ```
        correct: false
    help: |
      The `{% for %}` tag is the standard way to iterate over arrays and objects in Twig.
      https://twig.symfony.com/doc/3.x/tags/for.html

  -
    question: |
      What is the correct way to access the current authenticated user's email in a Twig template, assuming the user object has an `email` property or `getEmail()` method?
    answers:
      -
        value: >
          `{{ app.user.email }}`
        correct: true
      -
        value: >
          `{{ user.email }}`
        correct: false
      -
        value: >
          `{{ app.security.user.email }}`
        correct: false
      -
        value: >
          `{{ app.current_user.email }}`
        correct: false
    help: |
      The `app.user` global variable provides access to the authenticated user object, and `username` (or a corresponding getter like `getUsername()`) is a common property for retrieving the user's username.
      https://symfony.com/doc/current/security.html#fetch-authenticated-user-in-twig-template

  -
    question: |
      When using the `#[Template]` attribute, how can you specify that only a particular block from the template should be rendered?
    answers:
      -
        value: >
          `#[Template('template.html.twig', block: 'block_name')]`
        correct: true
      -
        value: >
          `#[Template('template.html.twig', onlyBlock: 'block_name')]`
        correct: false
      -
        value: >
          `#[Template('template.html.twig', section: 'block_name')]`
        correct: false
      -
        value: >
          `#[Template('template.html.twig', renderBlock: 'block_name')]`
        correct: false
    help: |
      The `block` argument in the `#[Template]` attribute (introduced in Symfony 7.2) allows you to specify which block from the template should be rendered.
      https://symfony.com/doc/current/templates.html#render-specific-twig-template-block-using-symfony-template-attribute

  -
    question: |
      Which of the following is the correct way to include a Twig template fragment named `_header.html.twig` and pass a variable `title` to it?
    answers:
      -
        value: >
          `{{ include('_header.html.twig', {title: 'My Page'}) }}`
        correct: true
      -
        value: >
          `{% include '_header.html.twig' with {title: 'My Page'} %}`
        correct: false
      -
        value: >
          `{% include '_header.html.twig' vars {title: 'My Page'} %}`
        correct: false
      -
        value: >
          `{{ include('_header.html.twig').set('title', 'My Page') }}`
        correct: false
    help: |
      The `include()` function accepts an optional second argument, which is an array of variables to pass to the included template.
      https://symfony.com/doc/current/templates.html#include-twig-template-fragment-with-variable-renaming

  -
    question: |
      What is the primary purpose of the `composer require twig` command?
    answers:
      -
        value: >
          To install the Twig templating engine as a standalone library.
        correct: true
      -
        value: >
          To install the Symfony Twig Bundle.
        correct: false
      -
        value: >
          To generate Twig templates.
        correct: false
      -
        value: >
          To clear the Twig cache.
        correct: false
    help: |
      `composer require twig` installs the core Twig library. For Symfony integration, `symfony/twig-bundle` is typically required.
      https://symfony.com/doc/current/page_creation.html#install-twig-with-composer

  -
    question: |
      Which Twig filter is used to convert a string to uppercase?
    answers:
      -
        value: >
          `upper`
        correct: true
      -
        value: >
          `uppercase`
        correct: false
      -
        value: >
          `up`
        correct: false
      -
        value: >
          `to_upper`
        correct: false
    help: |
      The `upper` filter converts a string to uppercase.
      https://twig.symfony.com/doc/3.x/filters/upper.html

  -
    question: |
      What is the purpose of the `app.request.method` property in Twig?
    answers:
      -
        value: >
          To get the HTTP method of the current request (e.g., 'GET', 'POST').
        correct: true
      -
        value: >
          To get the name of the controller method being executed.
        correct: false
      -
        value: >
          To get the request's content type.
        correct: false
      -
        value: >
          To get the request's ID for logging.
        correct: false
    help: |
      `app.request` provides access to the `Request` object, and `method` is a property of that object indicating the HTTP method used for the request.
      https://symfony.com/doc/current/templates.html#access-application-data-with-twig-app-global-variable

  -
    question: |
      Which Twig function would you use to generate an absolute URL for a route, including the scheme and host?
    answers:
      -
        value: >
          `path()`
        correct: false
      -
        value: >
          `url()`
        correct: true
      -
        value: >
          `absolute_path()`
        correct: false
      -
        value: >
          `full_url()`
        correct: false
    help: |
      The `url()` function generates an absolute URL (e.g., `http://example.com/blog/my-post`), whereas `path()` generates a relative URL (e.g., `/blog/my-post`).
      https://symfony.com/doc/current/routing.html#generating-urls-in-twig-templates

  -
    question: |
      What is the purpose of the `{% apply %}` tag in Twig?
    answers:
      -
        value: >
          To apply a filter or a chain of filters to a block of template code.
        correct: true
      -
        value: >
          To include a template fragment only if a condition is met.
        correct: false
      -
        value: >
          To define a new Twig function.
        correct: false
      -
        value: >
          To import macros from another template.
        correct: false
    help: |
      The `{% apply %}` tag allows you to apply a filter (or a chain of filters) to the content of a block.
      https://twig.symfony.com/doc/3.x/tags/apply.html

  -
    question: |
      When defining custom Twig template paths, what is the benefit of assigning a namespace (e.g., `admin`) to a directory?
    answers:
      -
        value: >
          It makes the templates in that directory load faster.
        correct: false
      -
        value: >
          It allows referencing templates using a shorter, more logical name (e.g., `@admin/dashboard.html.twig`).
        correct: true
      -
        value: >
          It automatically applies specific Twig filters to templates in that namespace.
        correct: false
      -
        value: >
          It restricts access to those templates based on user roles.
        correct: false
    help: |
      Namespaces provide a logical way to group templates and prevent naming conflicts, allowing you to reference them using the `@namespace/template.html.twig` syntax.
      https://symfony.com/doc/current/templates.html#configure-twig-template-paths-with-namespaces

  -
    question: |
      Which Twig filter is used to convert a string to lowercase?
    answers:
      -
        value: >
          `lower`
        correct: true
      -
        value: >
          `lowercase`
        correct: false
      -
        value: >
          `down`
        correct: false
      -
        value: >
          `to_lower`
        correct: false
    help: |
      The `lower` filter converts a string to lowercase.
      https://twig.symfony.com/doc/3.x/filters/lower.html

  -
    question: |
      What is the correct Twig syntax to check if a variable `user` is an instance of a specific class or interface?
    answers:
      -
        value: >
          `{% if user is instance of 'App\\Entity\\User' %}`
        correct: true
      -
        value: >
          `{% if user instanceof 'App\\Entity\\User' %}`
        correct: false
      -
        value: >
          `{% if user.isInstanceOf('App\\Entity\\User') %}`
        correct: false
      -
        value: >
          `{% if user is type 'App\\Entity\\User' %}`
        correct: false
    help: |
      The `is instance of` test checks if an object is an instance of a given class or implements a given interface.
      https://twig.symfony.com/doc/3.x/tests/instanceof.html

  -
    question: |
      Which Twig filter is used to remove HTML tags from a string?
    answers:
      -
        value: >
          `strip_tags`
        correct: true
      -
        value: >
          `remove_html`
        correct: false
      -
        value: >
          `html_decode`
        correct: false
      -
        value: >
          `plain_text`
        correct: false
    help: |
      The `strip_tags` filter removes all HTML and XML tags from a string.
      https://twig.symfony.com/doc/3.x/filters/striptags.html

  -
    question: |
      What is the purpose of the `{% verbatim %}` tag in Twig?
    answers:
      -
        value: >
          To prevent Twig from parsing the content within the tag, treating it as plain text.
        correct: true
      -
        value: >
          To include a file without rendering it.
        correct: false
      -
        value: >
          To display the raw, unescaped HTML content.
        correct: false
      -
        value: >
          To define a block that cannot be overridden by child templates.
        correct: false
    help: |
      The `{% verbatim %}` tag tells Twig to ignore any Twig syntax within its block, rendering the content as is. This is useful when you need to display code snippets that contain Twig-like delimiters.
      https://twig.symfony.com/doc/3.x/tags/verbatim.html

  -
    question: |
      Which of the following is the correct way to include a Twig template fragment and pass an array of variables, but also ensure that the included template does NOT inherit variables from the parent context?
    answers:
      -
        value: >
          `{{ include('template.html.twig', {foo: 'bar'}, with_context = false) }}`
        correct: true
      -
        value: >
          `{{ include('template.html.twig', {foo: 'bar'}, only = true) }}`
        correct: false
      -
        value: >
          `{{ include('template.html.twig', {foo: 'bar'}, isolated = true) }}`
        correct: false
      -
        value: >
          `{{ include('template.html.twig', {foo: 'bar'}, no_inherit = true) }}`
        correct: false
    help: |
      The `with_context = false` option ensures that the included template only has access to the variables explicitly passed to it, and not the context of the parent template.
      https://twig.symfony.com/doc/3.x/functions/include.html#including-templates

  -
    question: |
      What is the purpose of the `{% filter %}` tag in Twig?
    answers:
      -
        value: >
          To apply a filter to a single variable.
        correct: false
      -
        value: >
          To define a new custom filter.
        correct: false
      -
        value: >
          To apply a filter or a chain of filters to a section of template code.
        correct: true
      -
        value: >
          To escape HTML characters in a string.
        correct: false
    help: |
      The `{% filter %}` tag allows you to apply a filter (or a chain of filters) to the content of a block, similar to the `{% apply %}` tag.
      https://twig.symfony.com/doc/3.x/tags/filter.html

  -
    question: |
      Which Twig filter is used to truncate a string to a specified length and append an ellipsis?
    answers:
      -
        value: >
          `truncate`
        correct: true
      -
        value: >
          `limit`
        correct: false
      -
        value: >
          `cut`
        correct: false
      -
        value: >
          `shorten`
        correct: false
    help: |
      The `truncate` filter truncates a string to the given length by cutting off the end and appending an ellipsis (or a custom string).
      https://twig.symfony.com/doc/3.x/filters/truncate.html

  -
    question: |
      What is the correct way to define a block named `javascripts` in a base Twig template that child templates can override?
    answers:
      -
        value: >
          `{% block javascripts %}{% endblock %}`
        correct: true
      -
        value: >
          `{{ javascripts }}`
        correct: false
      -
        value: >
          `{% define javascripts %}{% enddefine %}`
        correct: false
      -
        value: >
          `{% section javascripts %}{% endsection %}`
        correct: false
    help: |
      The `{% block %}` tag is used to define a section of content that can be overridden by child templates in template inheritance.
      https://symfony.com/doc/current/templates.html#base-twig-template-structure-with-blocks

  -
    question: |
      Which Twig filter is used to convert a string into a JSON representation?
    answers:
      -
        value: >
          `json_encode`
        correct: true
      -
        value: >
          `to_json`
        correct: false
      -
        value: >
          `serialize('json')`
        correct: false
      -
        value: >
          `encode_json`
        correct: false
    help: |
      The `json_encode` filter converts a value to JSON format.
      https://twig.symfony.com/doc/3.x/filters/json_encode.html

  -
    question: |
      What is the purpose of the `{% spaceless %}` tag in Twig?
    answers:
      -
        value: >
          To remove whitespace between HTML tags in the rendered output.
        correct: true
      -
        value: >
          To remove all whitespace from the template source code.
        correct: false
      -
        value: >
          To add extra spaces for readability.
        correct: false
      -
        value: >
          To prevent line breaks in the rendered output.
        correct: false
    help: |
      The `{% spaceless %}` tag removes whitespace between HTML tags, which can help reduce the size of the rendered HTML.
      https://twig.symfony.com/doc/3.x/tags/spaceless.html

  -
    question: |
      Which Twig filter is used to convert a string to title case (first letter of each word capitalized)?
    answers:
      -
        value: >
          `title`
        correct: true
      -
        value: >
          `capitalize`
        correct: false
      -
        value: >
          `ucwords`
        correct: false
      -
        value: >
          `title_case`
        correct: false
    help: |
      The `title` filter converts the first character of each word in a string to uppercase and the rest to lowercase.
      https://twig.symfony.com/doc/3.x/filters/title.html

  -
    question: |
      What is the purpose of the `{% do %}` tag in Twig?
    answers:
      -
        value: >
          To execute a statement that does not print anything, such as modifying a variable.
        correct: true
      -
        value: >
          To define a function within the template.
        correct: false
      -
        value: >
          To include a template fragment.
        correct: false
      -
        value: >
          To perform a database operation.
        correct: false
    help: |
      The `{% do %}` tag is used to execute one or more statements that do not print anything, such as calling a method that modifies an object or setting a variable.
      https://twig.symfony.com/doc/3.x/tags/do.html

  -
    question: |
      Which Twig filter is used to sort the elements of an array?
    answers:
      -
        value: >
          `sort`
        correct: true
      -
        value: >
          `order`
        correct: false
      -
        value: >
          `arrange`
        correct: false
      -
        value: >
          `asort`
        correct: false
    help: |
      The `sort` filter sorts an array.
      https://twig.symfony.com/doc/3.x/filters/sort.html

  -
    question: |
      What is the purpose of the `{% from ... import ... %}` tag in Twig?
    answers:
      -
        value: >
          To import specific macros from another template into the current template.
        correct: true
      -
        value: >
          To extend a base template and override its blocks.
        correct: false
      -
        value: >
          To include a template fragment with its own context.
        correct: false
      -
        value: >
          To define a new global variable.
        correct: false
    help: |
      The `{% from ... import ... %}` tag is used to import specific macros from a template into the current namespace, allowing you to use them without prefixing them with the template name.
      https://twig.symfony.com/doc/3.x/tags/from.html

  -
    question: |
      Which Twig filter is used to reverse the order of an array or a string?
    answers:
      -
        value: >
          `reverse`
        correct: true
      -
        value: >
          `flip`
        correct: false
      -
        value: >
          `invert`
        correct: false
      -
        value: >
          `revert`
        correct: false
    help: |
      The `reverse` filter reverses a string or an array.
      https://twig.symfony.com/doc/3.x/filters/reverse.html

  -
    question: |
      What is the purpose of the `{% block %} ... {{ parent() }} ... {% endblock %}` pattern in Twig template inheritance?
    answers:
      -
        value: >
          To completely replace the content of a parent block.
        correct: false
      -
        value: >
          To append content to a parent block.
        correct: false
      -
        value: >
          To prepend content to a parent block.
        correct: false
      -
        value: >
          To extend the content of a parent block by including its original content and adding new content.
        correct: true
    help: |
      The `{{ parent() }}` function inside a `{% block %}` allows you to render the content of the parent block, effectively extending or modifying it rather than completely replacing it.
      https://twig.symfony.com/doc/3.x/tags/extends.html#how-to-use-parent-blocks

  -
    question: |
      Which Twig filter is used to convert a string to a valid JSON string, escaping special characters?
    answers:
      -
        value: >
          `json_encode`
        correct: true
      -
        value: >
          `to_json`
        correct: false
      -
        value: >
          `escape('json')`
        correct: false
      -
        value: >
          `serialize('json')`
        correct: false
    help: |
      The `json_encode` filter converts a Twig value to its JSON representation, properly escaping characters for safe embedding in JSON contexts.
      https://twig.symfony.com/doc/3.x/filters/json_encode.html

  -
    question: |
      What is the purpose of the `{% filter %}` and `{% endfilter %}` tags in Twig?
    answers:
      -
        value: >
          To define a new custom filter.
        correct: false
      -
        value: >
          To apply a filter or a chain of filters to the content within the tags.
        correct: true
      -
        value: >
          To escape all HTML within the block.
        correct: false
      -
        value: >
          To include an external Twig extension.
        correct: false
    help: |
      The `{% filter %}` tag allows you to apply a filter (or a chain of filters) to the content of a block, similar to the `{% apply %}` tag.
      https://twig.symfony.com/doc/3.x/tags/filter.html

  -
    question: |
      Which Twig filter is used to convert the first character of a string to uppercase?
    answers:
      -
        value: >
          `capitalize`
        correct: true
      -
        value: >
          `ucfirst`
        correct: false
      -
        value: >
          `first_upper`
        correct: false
      -
        value: >
          `upper_first`
        correct: false
    help: |
      The `capitalize` filter converts the first character of a string to uppercase and the rest to lowercase.
      https://twig.symfony.com/doc/3.x/filters/capitalize.html

  -
    question: |
      What is the purpose of the `{% set %}` tag in Twig?
    answers:
      -
        value: >
          To define a new block for template inheritance.
        correct: false
      -
        value: >
          To assign a value to a variable within the current template.
        correct: true
      -
        value: >
          To include an external CSS file.
        correct: false
      -
        value: >
          To declare a global variable.
        correct: false
    help: |
      The `{% set %}` tag is used to assign values to variables within the current template scope.
      https://twig.symfony.com/doc/3.x/tags/set.html

  -
    question: |
      Which Twig filter is used to convert a string to a URL-safe string by replacing spaces with hyphens and converting to lowercase?
    answers:
      -
        value: >
          `url_encode`
        correct: false
      -
        value: >
          `slugify`
        correct: true
      -
        value: >
          `url_friendly`
        correct: false
      -
        value: >
          `sanitize_url`
        correct: false
    help: |
      The `slugify` filter (often provided by a bundle like `StofDoctrineExtensionsBundle` or custom implementation) converts a string into a URL-friendly slug. While `slug` is also used, `slugify` is a common name for this operation.
      (Note: This is a common filter in many Twig setups, though not a core Twig filter. Given the context of Symfony certification, it's a relevant concept often provided by bundles or custom extensions.)
      https://symfony.com/doc/current/components/string.html#slugger-in-twig (indirectly related, as slugger is the underlying component)

  -
    question: |
      What is the purpose of the `{% if ... else if ... else %}` structure in Twig?
    answers:
      -
        value: >
          To define multiple conditions for a loop.
        correct: false
      -
        value: >
          To execute different blocks of code based on multiple conditional expressions.
        correct: true
      -
        value: >
          To include different templates based on a condition.
        correct: false
      -
        value: >
          To define a switch statement.
        correct: false
    help: |
      The `{% if %}`, `{% else if %}`, and `{% else %}` tags allow for complex conditional logic, executing different blocks of code based on a series of conditions.
      https://twig.symfony.com/doc/3.x/tags/if.html

  -
    question: |
      Which Twig filter is used to remove leading and trailing whitespace from a string?
    answers:
      -
        value: >
          `trim`
        correct: true
      -
        value: >
          `strip`
        correct: false
      -
        value: >
          `clean`
        correct: false
      -
        value: >
          `whitespace_trim`
        correct: false
    help: |
      The `trim` filter removes leading and trailing whitespace from a string.
      https://twig.symfony.com/doc/3.x/filters/trim.html

  -
    question: |
      What is the purpose of the `{% embed %}` tag in Twig?
    answers:
      -
        value: >
          To include a template and allow it to define its own blocks, which can then be overridden within the `embed` tag.
        correct: true
      -
        value: >
          To include a template without inheriting any variables from the parent context.
        correct: false
      -
        value: >
          To define a new macro that can be used globally.
        correct: false
      -
        value: >
          To render a controller's output asynchronously.
        correct: false
    help: |
      The `{% embed %}` tag allows you to include another template and define or override blocks within that included template, providing a powerful way to reuse template structures with customizable content.
      https://twig.symfony.com/doc/3.x/tags/embed.html

  -
    question: |
      Which Twig filter is used to convert a string to a "camelCase" format?
    answers:
      -
        value: >
          `camel`
        correct: false
      -
        value: >
          `camel_case`
        correct: true
      -
        value: >
          `to_camel`
        correct: false
      -
        value: >
          `camelize`
        correct: false
    help: |
      The `camel_case` filter (provided by `symfony/string` component and integrated with Twig) converts a string to camelCase.
      https://symfony.com/doc/current/components/string.html#string-manipulation-in-twig

  -
    question: |
      What is the purpose of the `{% block title %}{% endblock %}` structure in a base Twig template?
    answers:
      -
        value: >
          To define a default title that can be overridden by child templates.
        correct: true
      -
        value: >
          To force all child templates to use the same title.
        correct: false
      -
        value: >
          To include an external title file.
        correct: false
      -
        value: >
          To display the current page's title automatically.
        correct: false
    help: |
      The `{% block %}` tag defines a section of content that can be overridden by templates that extend it. This is commonly used for elements like the page title.
      https://symfony.com/doc/current/templates.html#base-twig-template-structure-with-blocks

  -
    question: |
      Which Twig filter is used to convert a string to a "snake_case" format?
    answers:
      -
        value: >
          `snake`
        correct: false
      -
        value: >
          `snake_case`
        correct: true
      -
        value: >
          `to_snake`
        correct: false
      -
        value: >
          `underscore`
        correct: false
    help: |
      The `snake_case` filter (provided by `symfony/string` component and integrated with Twig) converts a string to snake_case.
      https://symfony.com/doc/current/components/string.html#string-manipulation-in-twig