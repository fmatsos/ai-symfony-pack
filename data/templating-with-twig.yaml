category: Templating with Twig
questions:
  - question: What are the correct delimiters for displaying a variable's value in a
      Twig template?
    answers:
      - value: "`{{ ... }}`"
        correct: true
      - value: "`{% ... %}`"
        correct: false
      - value: "`{# ... #}`"
        correct: false
      - value: "`<?php ... ?>`"
        correct: false
    help: Twig uses `{{ ... }}` to print the content of a variable or expression.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/templates.rst#_snippet_0
  - question: Which Twig delimiter is used for executing statements like loops,
      conditionals, or setting variables?
    answers:
      - value: "`{% ... %}`"
        correct: true
      - value: "`{{ ... }}`"
        correct: false
      - value: "`{# ... #}`"
        correct: false
      - value: "`<!-- ... -->`"
        correct: false
    help: Twig uses `{% ... %}` for control flow statements like `if`, `for`, `set`,
      etc.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/templates.rst#_snippet_0
  - question: How do you add a comment in a Twig template that will not be rendered
      in the final HTML output?
    answers:
      - value: "`{# This is a comment #}`"
        correct: true
      - value: "`<!-- This is a comment -->`"
        correct: false
      - value: "`{{-- This is a comment --}}`"
        correct: false
      - value: "`// This is a comment`"
        correct: false
    help: "Twig comments are denoted by `{# ... #}` and are removed during
      compilation.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/templates.rst#_snippet_\
      0"
  - question: By default, how does Twig handle the output of variables to prevent
      Cross-Site Scripting (XSS) attacks?
    answers:
      - value: It automatically escapes HTML entities.
        correct: true
      - value: It automatically removes all HTML tags.
        correct: false
      - value: It requires manual escaping using a filter for all output.
        correct: false
      - value: It only escapes variables explicitly marked as unsafe.
        correct: false
    help: Twig's automatic escaping feature converts special characters into HTML
      entities to prevent XSS.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/templates.rst#_snippet_50
  - question: You have a variable `product.title` that contains trusted HTML and you
      want to render it without Twig escaping it. Which filter should you use?
    answers:
      - value: "`{{ product.title|raw }}`"
        correct: true
      - value: "`{{ product.title|safe }}`"
        correct: false
      - value: "`{{ product.title|unescaped }}`"
        correct: false
      - value: "`{{ product.title|html_decode }}`"
        correct: false
    help: The `raw` filter explicitly tells Twig to output the variable's content
      as-is, without escaping.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/templates.rst#_snippet_50
  - question: Which Twig tag is used to define a template as extending another
      template, enabling template inheritance?
    answers:
      - value: "`{% extends 'base.html.twig' %}`"
        correct: true
      - value: "`{% include 'base.html.twig' %}`"
        correct: false
      - value: "`{% import 'base.html.twig' %}`"
        correct: false
      - value: "`{% use 'base.html.twig' %}`"
        correct: false
    help: The `extends` tag is fundamental for template inheritance, allowing a
      child template to inherit and override blocks from a parent.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/quick_tour/flex_recipes.rst#_snippet_3
  - question: >-
      Consider the following child template extending a base template:


      ```twig

      {# app/Resources/views/blog/index.html.twig #}

      {% extends 'base.html.twig' %}


      <div class="alert">Some Alert</div>


      {% block content %}My cool blog posts{% endblock %}

      ```


      What will be the result of defining content outside of any `block` tags in
      a child template?
    answers:
      - value: A `SyntaxError` will be thrown during template rendering.
        correct: true
      - value: The content will be rendered before the `<!DOCTYPE html>` tag.
        correct: false
      - value: The content will be rendered after the `</html>` tag.
        correct: false
      - value: The content will be silently ignored.
        correct: false
    help: When extending a parent template, all content in the child template must
      be enclosed within `block` tags to avoid a `SyntaxError`.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/templates.rst#_snippet_48
  - question: How can you override a specific block named `content` from a parent
      template in a child template?
    answers:
      - value: By defining a `{% block content %}` with the same name in the child
          template.
        correct: true
      - value: By using the `{% parent %}` tag.
        correct: false
      - value: By using the `{% override %}` tag.
        correct: false
      - value: It's not possible to override blocks, only extend them.
        correct: false
    help: Child templates override parent blocks by defining a block with the same
      name.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/templates.rst#_snippet_46
  - question: To make a static value, like a Google Analytics tracking code,
      available globally in all Twig templates, which section of
      `config/packages/twig.yaml` would you configure?
    answers:
      - value: "`globals`"
        correct: true
      - value: "`paths`"
        correct: false
      - value: "`default_path`"
        correct: false
      - value: "`extensions`"
        correct: false
    help: The `globals` section in `twig.yaml` is used to define variables or
      services that are accessible in all Twig templates.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/templates.rst#_snippet_15
  - question: You have configured a service `App\Generator\UuidGenerator` as a
      global Twig variable named `uuid`. How would you call its `generate()`
      method in a Twig template?
    answers:
      - value: "`{{ uuid.generate }}`"
        correct: true
      - value: "`{{ uuid->generate() }}`"
        correct: false
      - value: "`{{ uuid::generate() }}`"
        correct: false
      - value: "`{{ service('uuid').generate() }}`"
        correct: false
    help: When a service is exposed as a global variable, its public methods can be
      called using dot notation.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/templates.rst#_snippet_17
  - question: Which Twig filter is commonly used to format a `DateTime` object for
      display?
    answers:
      - value: "`|date`"
        correct: true
      - value: "`|format_date`"
        correct: false
      - value: "`|datetime`"
        correct: false
      - value: "`|to_date`"
        correct: false
    help: The `date` filter formats a date according to a given format.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/mailer.rst#_snippet_38
  - question: Given a variable `notifications` which is an array, how would you
      display the number of elements in it using a Twig filter?
    answers:
      - value: "`{{ notifications|length }}`"
        correct: true
      - value: "`{{ notifications|count }}`"
        correct: false
      - value: "`{{ notifications.size }}`"
        correct: false
      - value: "`{{ count(notifications) }}`"
        correct: false
    help: The `length` filter returns the number of items in a sequence or mapping,
      or the length of a string.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/templates.rst#_snippet_2
  - question: You have a custom Twig filter named `price`. How would you apply it to
      a `product.price` variable, passing `2` decimals, a comma for the decimal
      point, and a dot for the thousands separator?
    answers:
      - value: "`{{ product.price|price(2, ',', '.') }}`"
        correct: true
      - value: "`{{ product.price|price(decimals=2, decimal_point=',',
          thousands_separator='.') }}`"
        correct: false
      - value: "`{{ product.price|price:2,',','.' }}`"
        correct: false
      - value: "`{{ price(product.price, 2, ',', '.') }}`"
        correct: false
    help: Filters can accept arguments, which are passed in parentheses after the
      filter name, separated by commas.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/templates.rst#_snippet_53
  - question: Which Twig filter can be used to convert an object into a specified
      format, such as JSON, directly within a Twig template?
    answers:
      - value: "`|serialize('json')`"
        correct: true
      - value: "`|json_encode`"
        correct: false
      - value: "`|to_json`"
        correct: false
      - value: "`|convert_to('json')`"
        correct: false
    help: The `serialize` filter can convert an object to a string representation in
      a given format.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/serializer.rst#_snippet_2
  - question: How do you include another Twig template fragment, for example
      `_user_profile.html.twig`, into the current template?
    answers:
      - value: "`{{ include('blog/_user_profile.html.twig') }}`"
        correct: true
      - value: "`{% include 'blog/_user_profile.html.twig' %}`"
        correct: true
      - value: "`{{ embed('blog/_user_profile.html.twig') }}`"
        correct: false
      - value: "`{% import 'blog/_user_profile.html.twig' %}`"
        correct: false
    help: The `include` function or tag is used to embed a template fragment.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/templates.rst#_snippet_33
  - question: You want to include `_user_profile.html.twig` and pass a variable
      `blog_post.author` to it, but the included template expects a variable
      named `user`. How would you do this?
    answers:
      - value: "`{{ include('blog/_user_profile.html.twig', {user: blog_post.author})
          }}`"
        correct: true
      - value: "`{{ include('blog/_user_profile.html.twig') with {user:
          blog_post.author} }}`"
        correct: false
      - value: "`{% include 'blog/_user_profile.html.twig' with user = blog_post.author
          %}`"
        correct: false
      - value: "`{{ include('blog/_user_profile.html.twig', user = blog_post.author)
          }}`"
        correct: false
    help: Variables can be passed to an included template as a hash (associative
      array).
      https://github.com/fmatsos/symfony-docs/blob/v7.0/templates.rst#_snippet_34
  - question: Which Twig tag is used to iterate over an array or traversable object?
    answers:
      - value: "`{% for item in items %}`"
        correct: true
      - value: "`{% foreach item in items %}`"
        correct: false
      - value: "`{% loop item in items %}`"
        correct: false
      - value: "`{% iterate item in items %}`"
        correct: false
    help: The `for` tag is used to loop over each item in a sequence.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/templates.rst#_snippet_37
  - question: |-
      Consider the following Twig snippet:

      ```twig
      {% if user.isLoggedIn %}
          Hello {{ user.name }}!
      {% endif %}
      ```

      What does this snippet primarily demonstrate?
    answers:
      - value: Conditional rendering based on a boolean variable.
        correct: true
      - value: Looping through user properties.
        correct: false
      - value: Defining a new user variable.
        correct: false
      - value: Including an external user profile.
        correct: false
    help: The `if` tag is used to execute a block of code conditionally.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/templates.rst#_snippet_0
  - question: >-
      You are iterating over `articles` in a Twig template. How would you
      display the `title` of each `article` as a clickable link to its detail
      page using a route named `blog_show` and a `slug` parameter?


      ```twig

      {% for article in articles %}
          <a href="{{ ??? }}">
              {{ article.title }}
          </a>
      {% endfor %}

      ```


      Which Twig function correctly generates the URL?
    answers:
      - value: "`path('blog_show', {slug: article.slug})`"
        correct: true
      - value: "`url('blog_show', {slug: article.slug})`"
        correct: true
      - value: "`route('blog_show', {slug: article.slug})`"
        correct: false
      - value: "`link('blog_show', {slug: article.slug})`"
        correct: false
    help: The `path()` function generates a relative URL, and `url()` generates an
      absolute URL for a given route and parameters.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/templates.rst#_snippet_37
  - question: To generate an absolute URL for a Symfony route named `homepage` in a
      Twig template, which function would you use?
    answers:
      - value: "`{{ url('homepage') }}`"
        correct: true
      - value: "`{{ path('homepage') }}`"
        correct: false
      - value: "`{{ absolute_url('homepage') }}`"
        correct: false
      - value: "`{{ route_url('homepage') }}`"
        correct: false
    help: The `url()` function generates an absolute URL for a given route. The
      `path()` function generates a relative URL.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/templates.rst#_snippet_45
  - question: You have an image located at `public/images/logo.png`. How would you
      generate its URL in a Twig template using the recommended Symfony approach
      for assets?
    answers:
      - value: "`{{ asset('images/logo.png') }}`"
        correct: true
      - value: "`{{ path('images/logo.png') }}`"
        correct: false
      - value: "`{{ url('images/logo.png') }}`"
        correct: false
      - value: '`<img src="/images/logo.png"/>`'
        correct: false
    help: The `asset()` Twig function generates public URLs for assets,
      automatically handling base paths.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/templates.rst#_snippet_10
  - question: In a Symfony controller extending `AbstractController`, which method
      is used to render a Twig template and return a `Response` object?
    answers:
      - value: "`$this->render('template.html.twig', [...])`"
        correct: true
      - value: "`$this->renderView('template.html.twig', [...])`"
        correct: false
      - value: "`$this->display('template.html.twig', [...])`"
        correct: false
      - value: "`$this->show('template.html.twig', [...])`"
        correct: false
    help: The `render()` method in `AbstractController` renders a Twig template and
      returns a `Response` object.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/templates.rst#_snippet_18
  - question: If you want to render a Twig template from a Symfony controller and
      get the HTML content as a string, without wrapping it in a `Response`
      object, which method should you use?
    answers:
      - value: "`$this->renderView('template.html.twig', [...])`"
        correct: true
      - value: "`$this->render('template.html.twig', [...])`"
        correct: false
      - value: "`$this->getTemplateContent('template.html.twig', [...])`"
        correct: false
      - value: "`$this->fetch('template.html.twig', [...])`"
        correct: false
    help: The `renderView()` method renders a view and returns its content as a
      string.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/templates.rst#_snippet_19
  - question: |-
      Consider the following Symfony controller method:

      ```php
      namespace App\Controller;

      use Symfony\Bridge\Twig\Attribute\Template;
      use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
      use Symfony\Component\HttpFoundation\Response;

      class ProductController extends AbstractController
      {
          #[Template('product/index.html.twig')]
          public function index(): array
          {
              // ...
              return [
                  'category' => '...',
                  'promotions' => ['...', '...'],
              ];
          }
      }
      ```

      What is the primary benefit of using the `#[Template]` attribute here?
    answers:
      - value: It automatically creates and returns the `Response` object, allowing the
          method to return just an array of parameters.
        correct: true
      - value: It allows the controller to render a template without extending
          `AbstractController`.
        correct: false
      - value: It enables asynchronous rendering of the template.
        correct: false
      - value: It automatically injects all services required by the template.
        correct: false
    help: The `#[Template]` attribute simplifies controller methods by handling
      `Response` object creation, requiring only an array of template parameters
      as a return value.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/templates.rst#_snippet_20
  - question: Which built-in Symfony controller can be used to directly render a
      static Twig template from a route definition without writing a custom
      controller method?
    answers:
      - value: "`Symfony\\Bundle\\FrameworkBundle\\Controller\\TemplateController`"
        correct: true
      - value: "`Symfony\\Bundle\\FrameworkBundle\\Controller\\StaticController`"
        correct: false
      - value: "`Symfony\\Bundle\\FrameworkBundle\\Controller\\TwigController`"
        correct: false
      - value: "`Symfony\\Bundle\\FrameworkBundle\\Controller\\ViewController`"
        correct: false
    help: The `TemplateController` is a special controller for rendering static Twig
      templates directly from routes.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/templates.rst#_snippet_23
  - question: You need to render only a specific block named `price_block` from
      `product/index.html.twig` and return it as a `Response` object from your
      controller. Which method would you use?
    answers:
      - value: "`$this->renderBlock('product/index.html.twig', 'price_block', [...])`"
        correct: true
      - value: "`$this->renderBlockView('product/index.html.twig', 'price_block',
          [...])`"
        correct: false
      - value: "`$this->render('product/index.html.twig#price_block', [...])`"
        correct: false
      - value: "`$this->getBlock('product/index.html.twig', 'price_block', [...])`"
        correct: false
    help: The `renderBlock()` method renders a specific block from a view and
      returns a `Response` object.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/templates.rst#_snippet_21
  - question: How can you embed the output of another controller into a Twig
      template synchronously using its route name?
    answers:
      - value: "`{{ render(path('latest_articles', {max: 3})) }}`"
        correct: true
      - value: "`{{ render(url('latest_articles', {max: 3})) }}`"
        correct: true
      - value: "`{{
          include(controller('App\\\\Controller\\\\BlogController::recentArticl\
          es', {max: 3})) }}`"
        correct: false
      - value: "`{{ embed(route('latest_articles', {max: 3})) }}`"
        correct: false
    help: The `render()` function can embed content from a controller via its route
      path or URL.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/templates.rst#_snippet_38
  - question: To embed content from a controller asynchronously in a Twig template,
      leveraging the `hinclude.js` library, which function should be used?
    answers:
      - value: "`{{ render_hinclude(controller('...')) }}`"
        correct: true
      - value: "`{{ render_hinclude(url('...')) }}`"
        correct: true
      - value: "`{{ render(controller('...')) }}`"
        correct: false
      - value: "`{{ include_async(controller('...')) }}`"
        correct: false
    help: The `render_hinclude()` function is used for asynchronous embedding of
      controller output.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/templates.rst#_snippet_40
  - question: How do you mark a simple string for translation within a Twig template
      using a tag?
    answers:
      - value: "`{% trans %}Symfony is great{% endtrans %}`"
        correct: true
      - value: "`{{ 'Symfony is great'|trans }}`"
        correct: true
      - value: "`{% translate 'Symfony is great' %}`"
        correct: false
      - value: "`{{ 'Symfony is great'|translate }}`"
        correct: false
    help: Messages can be translated using both the `trans` tag and the `trans`
      filter.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/translation.rst#_snippet_38
  - question: You want to set the default translation domain for an entire Twig
      template to `app`. Which tag would you use at the top of the template?
    answers:
      - value: "`{% trans_default_domain 'app' %}`"
        correct: true
      - value: "`{% default_domain 'app' %}`"
        correct: false
      - value: "`{% set_translation_domain 'app' %}`"
        correct: false
      - value: "`{% domain 'app' %}`"
        correct: false
    help: The `trans_default_domain` tag sets the default translation domain for the
      current template.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/translation.rst#_snippet_12
  - question: Given a variable `page_title`, how would you display its value in a
      Twig template?
    answers:
      - value: "`<h1>{{ page_title }}</h1>`"
        correct: true
      - value: "`<h1>{% page_title %}</h1>`"
        correct: false
      - value: "`<h1>{# page_title #}</h1>`"
        correct: false
      - value: "`<h1><?php echo $page_title; ?></h1>`"
        correct: false
    help: Variables are displayed using the `{{ ... }}` syntax.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/templates.rst#_snippet_0
  - question: Twig's `foo.bar` notation allows flexible access to variables. If
      `user` is an object, which of the following ways might `user.name` be
      resolved by Twig?
    answers:
      - value: By accessing the public property `name`.
        correct: true
      - value: By calling a public method `getName()`.
        correct: true
      - value: By calling a public method `isName()`.
        correct: true
      - value: By accessing an array key `name`.
        correct: true
      - value: By calling a private method `get_name()`.
        correct: false
    help: "Twig tries several ways to resolve `foo.bar`: as an array key, a public
      property, a public method (e.g., `getName()`, `isName()`, `hasName()`), or
      a magic `__call()` method.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/templates.rst#_snippet_\
      4"
  - question: When integrating Bootstrap 5 into a Symfony Twig base template
      (`base.html.twig`), where would you typically place the Bootstrap CSS
      link?
    answers:
      - value: Inside the `{% block stylesheets %}` block.
        correct: true
      - value: Inside the `{% block javascripts %}` block.
        correct: false
      - value: Directly in the `<head>` section outside any blocks.
        correct: false
      - value: In a separate `{% block css %}`.
        correct: false
    help: The `stylesheets` block is the standard place for CSS links in Symfony
      Twig base templates.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/bootstrap5.rst#_snippet_0
  - question: What is the main advantage of using the `asset()` Twig function for
      linking static assets (like CSS, JS, images) instead of hardcoding paths?
    answers:
      - value: It automatically handles base paths, making asset links portable
          regardless of deployment subdirectory.
        correct: true
      - value: It automatically minifies and concatenates assets.
        correct: false
      - value: It automatically adds versioning to asset URLs for cache busting.
        correct: false
      - value: It allows assets to be stored outside the `public/` directory.
        correct: false
    help: The `asset()` function generates correct public paths, adapting to the
      application's base path.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/templates.rst#_snippet_10
  - question: To dump the content of a variable `foo.bar` to the Symfony web debug
      toolbar without affecting the rendered HTML, which Twig tag would you use?
    answers:
      - value: "`{% dump foo.bar %}`"
        correct: true
      - value: "`{{ dump(foo.bar) }}`"
        correct: false
      - value: "`{% var_dump foo.bar %}`"
        correct: false
      - value: "`{{ debug(foo.bar) }}`"
        correct: false
    help: The `{% dump %}` tag outputs variable information to the web debug
      toolbar.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/components/var_dumper.rst#_snippet_10
  - question: To dump the content of a variable `foo.bar` directly into the HTML
      output of a Twig template, which Twig function would you use?
    answers:
      - value: "`{{ dump(foo.bar) }}`"
        correct: true
      - value: "`{% dump foo.bar %}`"
        correct: false
      - value: "`{{ var_dump(foo.bar) }}`"
        correct: false
      - value: "`{% debug foo.bar %}`"
        correct: false
    help: The `{{ dump() }}` function outputs variable information inline into the
      HTML.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/components/var_dumper.rst#_snippet_10
  - question: Which Symfony console command can be used to check for syntax errors
      and deprecations in all Twig templates within your application?
    answers:
      - value: "`php bin/console lint:twig`"
        correct: true
      - value: "`php bin/console debug:twig`"
        correct: false
      - value: "`php bin/console twig:validate`"
        correct: false
      - value: "`php bin/console cache:clear --env=dev`"
        correct: false
    help: The `lint:twig` command checks Twig template syntax and can show
      deprecations.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/templates.rst#_snippet_28
  - question: How can you profile specific sections of a Twig template to gain
      performance insights using a Twig tag?
    answers:
      - value: "`{% stopwatch 'render-blog-posts' %}`"
        correct: true
      - value: "`{% profile 'render-blog-posts' %}`"
        correct: false
      - value: "`{% timer 'render-blog-posts' %}`"
        correct: false
      - value: "`{% measure 'render-blog-posts' %}`"
        correct: false
    help: The `stopwatch` tag allows profiling of Twig template sections.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/performance.rst#_snippet_9
  - question: In `config/packages/twig.yaml`, what is the purpose of the
      `strict_variables` option?
    answers:
      - value: If set to `true`, Symfony throws an exception whenever a Twig variable,
          attribute, or method doesn't exist.
        correct: true
      - value: If set to `true`, it enables strict type checking for all variables.
        correct: false
      - value: If set to `true`, it disables automatic HTML escaping.
        correct: false
      - value: If set to `true`, it prevents variables from being overridden.
        correct: false
    help: The `strict_variables` option controls error reporting for non-existent
      Twig variables.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/reference/configuration/twig.rst#_snippet_8
  - question: Which `twig.yaml` configuration option controls the Twig `optimizer`
      extension, with `-1` enabling all optimizations and `0` disabling all?
    answers:
      - value: "`optimizations`"
        correct: true
      - value: "`auto_reload`"
        correct: false
      - value: "`cache`"
        correct: false
      - value: "`debug`"
        correct: false
    help: The `optimizations` option configures the Twig optimizer extension.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/reference/configuration/twig.rst#_snippet_8
  - question: You want to add an additional directory `email/default/templates` for
      Twig templates. How would you configure this in
      `config/packages/twig.yaml` without assigning a specific namespace?
    answers:
      - value: |-
          ```yaml
          twig:
              paths:
                  'email/default/templates': ~
          ```
        correct: true
      - value: |-
          ```yaml
          twig:
              paths:
                  'email/default/templates': null
          ```
        correct: true
      - value: |-
          ```yaml
          twig:
              email_paths:
                  - 'email/default/templates'
          ```
        correct: false
      - value: |-
          ```yaml
          twig:
              templates:
                  - 'email/default/templates'
          ```
        correct: false
    help: Additional template directories can be defined under `twig.paths` with `~`
      or `null` for no namespace.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/templates.rst#_snippet_51
  - question: You want to configure `backend/templates` to be accessible under the
      `admin` Twig namespace. How would you do this in
      `config/packages/twig.yaml`?
    answers:
      - value: |-
          ```yaml
          twig:
              paths:
                  'backend/templates': 'admin'
          ```
        correct: true
      - value: |-
          ```yaml
          twig:
              namespaces:
                  admin: 'backend/templates'
          ```
        correct: false
      - value: |-
          ```yaml
          twig:
              admin_templates:
                  - 'backend/templates'
          ```
        correct: false
      - value: |-
          ```yaml
          twig:
              paths:
                  admin: 'backend/templates'
          ```
        correct: false
    help: To assign a namespace to a template directory, specify the namespace as
      the value for the path.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/templates.rst#_snippet_52
  - question: When creating a templated email in Symfony using
      `Symfony\Bridge\Twig\Mime\TemplatedEmail`, which method is used to specify
      the Twig template file to render for the email's HTML content?
    answers:
      - value: "`htmlTemplate('emails/signup.html.twig')`"
        correct: true
      - value: "`template('emails/signup.html.twig')`"
        correct: false
      - value: "`setHtmlTemplate('emails/signup.html.twig')`"
        correct: false
      - value: "`twigTemplate('emails/signup.html.twig')`"
        correct: false
    help: The `htmlTemplate()` method of `TemplatedEmail` sets the path to the Twig
      template.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/mailer.rst#_snippet_37
  - question: How do you pass variables from a PHP `TemplatedEmail` object to its
      Twig template?
    answers:
      - value: Using the `context()` method with an associative array.
        correct: true
      - value: Using the `with()` method.
        correct: false
      - value: Variables are automatically passed from the controller.
        correct: false
      - value: They must be set as global Twig variables.
        correct: false
    help: The `context()` method is used to pass an array of variables to the Twig
      template for email rendering.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/mailer.rst#_snippet_37
  - question: To embed an image into a Twig email template, referencing it via a
      Twig namespace (e.g., `@images/logo.png`), which special helper should you
      use?
    answers:
      - value: "`{{ email.image('@images/logo.png') }}`"
        correct: true
      - value: "`{{ asset('@images/logo.png') }}`"
        correct: false
      - value: "`{{ embed_image('@images/logo.png') }}`"
        correct: false
      - value: "`{{ image('@images/logo.png') }}`"
        correct: false
    help: The `email.image()` helper is specifically designed for embedding images
      in email templates, ensuring they are correctly embedded with a CID.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/mailer.rst#_snippet_41
  - question: Which Twig function is used to render the opening HTML form tag,
      including `action`, `method`, and `enctype` attributes, for a Symfony form
      object named `form`?
    answers:
      - value: "`{{ form_start(form) }}`"
        correct: true
      - value: "`{{ form_open(form) }}`"
        correct: false
      - value: "`{{ form(form) }}`"
        correct: false
      - value: "`{{ form_begin(form) }}`"
        correct: false
    help: The `form_start()` function renders the opening HTML tag for a Symfony
      form.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/form_collections.rst#_snippet_5
  - question: How can you apply a specific form theme, e.g.,
      `foundation_5_layout.html.twig`, to only the forms rendered within a
      particular Twig template?
    answers:
      - value: "`{% form_theme form 'foundation_5_layout.html.twig' %}`"
        correct: true
      - value: "`{% use form_theme 'foundation_5_layout.html.twig' %}`"
        correct: false
      - value: "`{{ form.setTheme('foundation_5_layout.html.twig') }}`"
        correct: false
      - value: "`{% apply_theme 'foundation_5_layout.html.twig' for form %}`"
        correct: false
    help: The `form_theme` tag applies a specific theme to forms within the current
      template.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/form_themes.rst#_snippet_1
  - question: When extending a Symfony bundle's Twig template (e.g.,
      `@AcmeUser/registration/confirmed.html.twig`) to override a block, what
      special prefix should be used in the `extends` tag to prevent infinite
      loop errors?
    answers:
      - value: '`{% extends "@!AcmeUser/registration/confirmed.html.twig" %}`'
        correct: true
      - value: '`{% extends "@@AcmeUser/registration/confirmed.html.twig" %}`'
        correct: false
      - value: '`{% extends "AcmeUserBundle::registration/confirmed.html.twig" %}`'
        correct: false
      - value: '`{% extends "original:AcmeUser/registration/confirmed.html.twig" %}`'
        correct: false
    help: The special `!` prefix in the `extends` tag is used when overriding bundle
      templates to ensure the extension targets the original file.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/bundles/override.rst#_snippet_0
  - question: To generate an SSI (Server Side Include) directive in a Twig template,
      referencing a controller action, which function would you use?
    answers:
      - value: "`{{
          render_ssi(controller('App\\\\Controller\\\\ProfileController::gdpr'))
          }}`"
        correct: true
      - value: "`{{ render_ssi(path('profile_gdpr')) }}`"
        correct: true
      - value: "`{{ ssi(controller('App\\\\Controller\\\\ProfileController::gdpr')) }}`"
        correct: false
      - value: "`{{
          include_ssi(controller('App\\\\Controller\\\\ProfileController::gdpr'\
          )) }}`"
        correct: false
    help: The `render_ssi()` helper generates SSI include directives, supporting
      both controller references and paths.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/http_cache/ssi.rst#_snippet_3
  - question: When using `render_hinclude()` for asynchronous embedding, how can you
      specify a simple string to display as default content while the fragment
      loads or if it fails?
    answers:
      - value: "`{{ render_hinclude(controller('...'), {default: 'Loading...'}) }}`"
        correct: true
      - value: "`{{ render_hinclude(controller('...'), {fallback: 'Loading...'}) }}`"
        correct: false
      - value: "`{{ render_hinclude(controller('...'), 'Loading...') }}`"
        correct: false
      - value: "`{{ render_hinclude(controller('...')) | default('Loading...') }}`"
        correct: false
    help: The `default` option in `render_hinclude()` allows specifying fallback
      content as a string or a template path.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/templates.rst#_snippet_43
  - question: What is the convention for naming Twig template fragments that are
      intended to be included in other templates, but not rendered directly as
      full pages?
    answers:
      - value: Prefixing the filename with an underscore (e.g.,
          `_recent_articles.html.twig`).
        correct: true
      - value: Placing them in a `partials/` subdirectory.
        correct: false
      - value: Using a `.fragment.twig` extension.
        correct: false
      - value: There is no specific naming convention.
        correct: false
    help: It's a common convention to prefix template fragments with an underscore.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/templates.rst#_snippet_37
  - question: Which of the following describes the purpose of the
      `thousands_separator` configuration option in `twig.yaml`?
    answers:
      - value: The character used to separate the decimals from the integer part of
          numeric values when no specific character is passed as argument to the
          `number_format` filter.
        correct: false
      - value: The character used to separate the thousands in numeric values when no
          specific character is passed as argument to the `number_format`
          filter.
        correct: true
      - value: The default character for decimal points in Twig.
        correct: false
      - value: It defines the character used for string interpolation.
        correct: false
    help: The `thousands_separator` option defines the default thousands separator
      for the `number_format` filter.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/reference/configuration/twig.rst#_snippet_8
  - question: When defining a base layout template (`base.html.twig`), what is the
      primary purpose of defining Twig blocks (e.g., `{% block title %}`, `{%
      block body %}`)?
    answers:
      - value: To allow child templates to override or extend specific sections of the
          layout.
        correct: true
      - value: To define global variables accessible throughout the application.
        correct: false
      - value: To include external JavaScript or CSS files.
        correct: false
      - value: To create reusable components that can be included anywhere.
        correct: false
    help: Blocks define areas that can be overridden by child templates,
      facilitating template inheritance.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/templates.rst#_snippet_45
  - question: You have a Twig template `user/notifications.html.twig` that displays
      `user_first_name` and the `notifications` array. How would you pass these
      variables from a Symfony controller to this template?
    answers:
      - value: Return an associative array from the controller method, where keys are
          variable names.
        correct: true
      - value: Set them as attributes on the `Request` object.
        correct: false
      - value: Define them as global Twig variables in `twig.yaml`.
        correct: false
      - value: Inject them directly into the Twig environment service.
        correct: false
    help: Variables are passed to the `render()` method as an associative array,
      where keys become Twig variable names.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/templates.rst#_snippet_3
  - question: Which of the following is the correct Composer command to install the
      Twig templating engine in a Symfony project?
    answers:
      - value: "`composer require twig`"
        correct: true
      - value: "`composer install twig`"
        correct: false
      - value: "`symfony install twig`"
        correct: false
      - value: "`php bin/console twig:install`"
        correct: false
    help: The `composer require twig` command installs the Twig package.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/page_creation.rst#_snippet_3
  - question: When configuring additional template paths in Symfony, what is the
      purpose of assigning a namespace (e.g., `admin`) to a directory (e.g.,
      `backend/templates`)?
    answers:
      - value: To allow referencing templates using the `@namespace/template.html.twig`
          syntax (e.g., `@admin/dashboard.html.twig`).
        correct: true
      - value: To restrict access to templates based on user roles.
        correct: false
      - value: To automatically apply a specific Twig theme to templates in that
          directory.
        correct: false
      - value: To enable caching specifically for templates within that namespace.
        correct: false
    help: Namespaces allow for better organization and referencing of templates from
      different locations using the `@namespace` syntax.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/templates.rst#_snippet_52
  - question: You are debugging a Twig template and want to see if any deprecated
      features are being used. Which command-line option would you add to
      `lint:twig`?
    answers:
      - value: "`--show-deprecations`"
        correct: true
      - value: "`--deprecations`"
        correct: false
      - value: "`--lint-deprecations`"
        correct: false
      - value: "`--check-deprecated`"
        correct: false
    help: The `--show-deprecations` option displays deprecated features used in Twig
      templates.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/templates.rst#_snippet_28
  - question: In a Symfony application, where are Twig templates typically stored by
      default?
    answers:
      - value: In the `templates/` directory at the project root.
        correct: true
      - value: In the `src/Templates/` directory.
        correct: false
      - value: In the `var/cache/twig/` directory.
        correct: false
      - value: In the `public/templates/` directory.
        correct: false
    help: The default location for Twig templates in Symfony is the `templates/`
      directory.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/templates.rst#_snippet_3
  - question: What is the primary benefit of using
      `Symfony\Bundle\FrameworkBundle\Controller\TemplateController` for
      rendering simple static pages?
    answers:
      - value: It allows rendering a Twig template directly from a route definition
          without needing a dedicated controller method.
        correct: true
      - value: It enables server-side rendering for JavaScript-heavy applications.
        correct: false
      - value: It provides advanced caching mechanisms for static content.
        correct: false
      - value: It automatically generates forms based on template content.
        correct: false
    help: The `TemplateController` simplifies rendering static pages by linking a
      route directly to a Twig template.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/templates.rst#_snippet_25
  - question: When embedding an SVG icon directly into a Twig template for a Symfony
      profiler panel, which Twig function is commonly used to include the SVG
      file's content?
    answers:
      - value: "`{{ include('data_collector/icon.svg') }}`"
        correct: true
      - value: "`{{ asset('data_collector/icon.svg') }}`"
        correct: false
      - value: "`{{ source('data_collector/icon.svg') }}`"
        correct: false
      - value: "`{{ file_get_contents('data_collector/icon.svg') }}`"
        correct: false
    help: The `include()` function can embed the raw content of another file, useful
      for inline SVGs.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/profiler.rst#_snippet_13
  - question: What is the purpose of the `hinclude_default_template` configuration
      option under `framework.fragments` in `config/packages/framework.yaml`?
    answers:
      - value: It specifies a default Twig template to display when `hinclude.js` is
          used, but JavaScript is disabled or content takes long to load.
        correct: true
      - value: It defines the default template for all Twig rendering in the
          application.
        correct: false
      - value: It sets the default layout for all HTML responses.
        correct: false
      - value: It configures the default template for error pages.
        correct: false
    help: The `hinclude_default_template` provides a fallback template for
      `hinclude.js` fragments.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/templates.rst#_snippet_41
  - question: Which method of `AbstractController` allows you to render a specific
      block from a Twig template and retrieve its content as a string?
    answers:
      - value: "`$this->renderBlockView(view: string, blockName: string, parameters:
          array = [])`"
        correct: true
      - value: "`$this->renderBlock(view: string, blockName: string, parameters: array =
          [], response: Response = null)`"
        correct: false
      - value: "`$this->getBlockContent(view: string, blockName: string, parameters:
          array = [])`"
        correct: false
      - value: "`$this->getRenderedBlock(view: string, blockName: string, parameters:
          array = [])`"
        correct: false
    help: The `renderBlockView()` method returns the content of a specific block as
      a string.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/templates.rst#_snippet_24
  - question: What is the purpose of the `locale()` method when creating a
      `TemplatedEmail` in Symfony?
    answers:
      - value: To set the locale used for translations within the email's Twig template.
        correct: true
      - value: To define the language of the email's subject.
        correct: false
      - value: To specify the recipient's preferred language.
        correct: false
      - value: To automatically translate the email content into the user's browser
          language.
        correct: false
    help: The `locale()` method sets the locale that will be used when rendering the
      Twig template for the email.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/mailer.rst#_snippet_37
  - question: When rendering a Symfony form in Twig, after `form_start(form)`, which
      function is typically used to render an individual form field, such as
      `form.description`?
    answers:
      - value: "`{{ form_row(form.description) }}`"
        correct: true
      - value: "`{{ form_widget(form.description) }}`"
        correct: false
      - value: "`{{ form_label(form.description) }}`"
        correct: false
      - value: "`{{ form_field(form.description) }}`"
        correct: false
    help: The `form_row()` function renders the label, errors, and widget for a form
      field.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/form/form_collections.rst#_snippet_6
  - question: If you have a collection of validation errors (`$errors`) in your
      controller, how would you pass them to a Twig template named
      `author/validation.html.twig` for display?
    answers:
      - value: |-
          ```php
          return $this->render('author/validation.html.twig', [
              'errors' => $errors,
          ]);
          ```
        correct: true
      - value: >-
          ```php

          return
          $this->render('author/validation.html.twig')->withErrors($errors);

          ```
        correct: false
      - value: |-
          ```php
          $this->twig->addGlobal('errors', $errors);
          return $this->render('author/validation.html.twig');
          ```
        correct: false
      - value: >-
          ```php

          return $this->renderView('author/validation.html.twig',
          compact('errors'));

          ```
        correct: false
    help: Variables are passed to Twig templates via the second argument of the
      `render()` method as an associative array.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/validation.rst#_snippet_6
  - question: What is the primary purpose of the `{% block body %}` in a
      `base.html.twig` template?
    answers:
      - value: It defines the main content area that child templates can fill or
          override.
        correct: true
      - value: It includes the HTML `<body>` tag and its attributes.
        correct: false
      - value: It specifies the default content to be displayed if no child template
          overrides it.
        correct: false
      - value: It is a mandatory block that must be present in all Twig templates.
        correct: false
    help: The `body` block is a common block used to define the main content area of
      a page within a base layout.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/introduction/from_flat_php_to_symfony.rst#_snippet_21
  - question: Which of the following describes the behavior of Twig's variable
      access using dot notation (e.g., `user.name`)?
    answers:
      - value: It first tries to access `name` as an array key, then as a public
          property, then as a public method (e.g., `getName()`), and finally as
          an `isser` or `hasser` method.
        correct: true
      - value: It only accesses public properties of an object.
        correct: false
      - value: It only calls getter methods (e.g., `getName()`).
        correct: false
      - value: It requires explicit casting to an array or object before access.
        correct: false
    help: Twig's dot notation provides flexible access, attempting to resolve the
      value as an array key, object property, or method.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/templates.rst#_snippet_4
  - question: You have a Twig template `blog/layout.html.twig` that extends
      `base.html.twig`. You want to override the `content` block from
      `base.html.twig` and introduce a new `page_contents` block within it for
      further customization. How would you structure this?
    answers:
      - value: |-
          ```twig
          {# templates/blog/layout.html.twig #}
          {% extends 'base.html.twig' %}

          {% block content %}
              <h1>Blog</h1>
              {% block page_contents %}{% endblock %}
          {% endblock %}
          ```
        correct: true
      - value: |-
          ```twig
          {# templates/blog/layout.html.twig #}
          {% extends 'base.html.twig' %}

          {% block content %}
              <h1>Blog</h1>
          {% endblock %}
          {% block page_contents %}{% endblock %}
          ```
        correct: false
      - value: |-
          ```twig
          {# templates/blog/layout.html.twig #}
          {% include 'base.html.twig' %}

          {% block content %}
              <h1>Blog</h1>
              {% block page_contents %}{% endblock %}
          {% endblock %}
          ```
        correct: false
      - value: |-
          ```twig
          {# templates/blog/layout.html.twig #}
          {% extends 'base.html.twig' %}

          {% override block content %}
              <h1>Blog</h1>
              {% block page_contents %}{% endblock %}
          {% endoverride %}
          ```
        correct: false
    help: A child template can override a parent block and define new blocks within
      it for further inheritance.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/templates.rst#_snippet_46
  - question: What is the primary purpose of the `{% stopwatch %}` Twig tag?
    answers:
      - value: To measure the execution time of specific sections within a Twig template
          for performance analysis.
        correct: true
      - value: To pause the rendering of a template until a certain condition is met.
        correct: false
      - value: To create a delay in template rendering for debugging purposes.
        correct: false
      - value: To log events during template rendering to a file.
        correct: false
    help: The `stopwatch` tag integrates with the Symfony Stopwatch component to
      profile template rendering.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/performance.rst#_snippet_9
  - question: You are creating a simple Twig template to display a random number
      passed from a controller. Which snippet correctly displays the `number`
      variable?
    answers:
      - value: |-
          ```html
          <p>{{ number }}</p>
          ```
        correct: true
      - value: |-
          ```html
          <p>{% number %}</p>
          ```
        correct: false
      - value: |-
          ```html
          <p>{# number #}</p>
          ```
        correct: false
      - value: |-
          ```html
          <p><?php echo $number; ?></p>
          ```
        correct: false
    help: Variables are outputted using `{{ variable_name }}`.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/configuration/micro_kernel_trait.rst#_snippet_14
