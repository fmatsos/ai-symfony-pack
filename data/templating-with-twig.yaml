category: Templating with Twig

questions:
  -
    question: >
      Which of the following Twig delimiters is used to execute statements, such as loops or conditional logic?
    answers:
      - { value: "`{{ ... }}`", correct: false }
      - { value: "`{# ... #}`", correct: false }
      - { value: "`{% ... %}`", correct: true }
      - { value: "`<!-- ... -->`", correct: false }
    help: |
      The `{% ... %}` delimiter is used for executing statements like `for` loops, `if` conditions, or setting variables.
      https://symfony.com/doc/current/templates.html#basic-twig-template-structure

  -
    question: >
      By default, how does Twig handle output for variables to prevent Cross-Site Scripting (XSS) attacks?
    answers:
      - { value: "It automatically escapes all output unless explicitly disabled.", correct: true }
      - { value: "It escapes output only if the variable's name contains 'html' or 'script'.", correct: false }
      - { value: "It requires manual escaping using the `|escape` filter for all output.", correct: false }
      - { value: "It only escapes output when the `autoescape` setting is explicitly set to `true` in `twig.yaml`.", correct: false }
    help: |
      Twig's automatic output escaping converts potentially dangerous characters into HTML entities, preventing XSS attacks by default.
      https://symfony.com/doc/current/templates.html#automatic-output-escaping

  -
    question: |
      Given a base template `base.html.twig` with a `content` block, what is the correct way for `child.html.twig` to extend it and override the `content` block?

      ```twig
      {# templates/base.html.twig #}
      <!DOCTYPE html>
      <html>
          <body>
              {% block content %}{% endblock %}
          </body>
      </html>
      ```
    answers:
      - { value: "`{% include 'base.html.twig' %}\n{% block content %}...{% endblock %}`", correct: false }
      - { value: "`{% extends 'base.html.twig' %}\n{% block content %}...{% endblock %}`", correct: true }
      - { value: "`{% use 'base.html.twig' %}\n{% block content %}...{% endblock %}`", correct: false }
      - { value: "`{% import 'base.html.twig' %}\n{% block content %}...{% endblock %}`", correct: false }
    help: |
      The `{% extends 'template_name.html.twig' %}` tag is used to specify that the current template inherits from another. Content within `{% block %}` tags in the child template will override the corresponding blocks in the parent.
      https://symfony.com/doc/current/templates.html#template-inheritance

  -
    question: >
      Which global variable in Twig templates provides access to common application-specific data, such as the current user, request details, and environment?
    answers:
      - { value: "`symfony`", correct: false }
      - { value: "`kernel`", correct: false }
      - { value: "`app`", correct: true }
      - { value: "`container`", correct: false }
    help: |
      The `app` global variable is a `Symfony\\Bridge\\Twig\\AppVariable` instance that provides access to the `security`, `request`, `session`, `user`, `environment`, and `debug` objects.
      https://symfony.com/doc/current/templates.html#global-variables

  -
    question: |
      What will be the output of the following Twig snippet if `comment.publishedAt` is a `DateTime` object representing '2023-10-26 14:30:00'?

      ```twig
      {{ comment.publishedAt|date('Y-m-d H:i') }}
      ```
    answers:
      - { value: "2023-10-26 14:30", correct: true }
      - { value: "26-10-2023 14:30:00", correct: false }
      - { value: "October 26, 2023 2:30 PM", correct: false }
      - { value: "2023/10/26 14:30", correct: false }
    help: |
      The `date` filter formats a date according to the given format string, which follows PHP's `date()` function format.
      https://symfony.com/doc/current/templates.html#accessing-variables

  -
    question: >
      Which Twig function is used to generate a URL based on a Symfony route name and its parameters?
    answers:
      - { value: "`url()`", correct: false }
      - { value: "`route()`", correct: false }
      - { value: "`link()`", correct: false }
      - { value: "`path()`", correct: true }
    help: |
      The `path()` function generates a relative URL for a given route.
      https://symfony.com/doc/current/routing.html#generating-urls-in-templates

  -
    question: |
      Consider the following Twig template structure. What is the primary benefit of using `include()` for `_user_profile.html.twig`?

      ```twig
      {# templates/blog/index.html.twig #}
      {# ... #}
      {{ include('blog/_user_profile.html.twig') }}
      ```
    answers:
      - { value: "It allows `_user_profile.html.twig` to have its own independent context, ignoring parent variables.", correct: false }
      - { value: "It improves performance by compiling `_user_profile.html.twig` separately.", correct: false }
      - { value: "It promotes reusability of template fragments across different templates.", correct: true }
      - { value: "It automatically injects all services required by `_user_profile.html.twig`.", correct: false }
    help: |
      The `include()` function allows you to include another Twig template and reuse common template fragments. Included templates inherit variables from the parent template by default.
      https://symfony.com/doc/current/templates.html#including-templates

  -
    question: |
      What is the correct Twig syntax to iterate over a collection named `articles` and display the `title` property of each article?
    answers:
      - { value: "`{% for article in articles %}{{ article.title }}{% endfor %}`", correct: true }
      - { value: "`{% loop article in articles %}{{ article.title }}{% endloop %}`", correct: false }
      - { value: "`{% foreach articles as article %}{{ article.title }}{% endforeach %}`", correct: false }
      - { value: "`{% articles.each do |article| %}{{ article.title }}{% end %}`", correct: false }
    help: |
      The `for` tag is used to iterate over arrays or traversable objects.
      https://twig.symfony.com/doc/3.x/tags/for.html

  -
    question: >
      In a Symfony controller, which method is typically used to render a Twig template and return a `Response` object?
    answers:
      - { value: "`renderView()`", correct: false }
      - { value: "`display()`", correct: false }
      - { value: "`show()`", correct: false }
      - { value: "`render()`", correct: true }
    help: |
      The `render()` method, available when extending `AbstractController`, renders a Twig template and returns a `Response` object.
      https://symfony.com/doc/current/templates.html#rendering-templates-in-controllers

  -
    question: |
      Given the translation key `'hello.world'` and a `name` variable, which Twig snippet correctly translates the message and passes the `name` variable to it?
    answers:
      - { value: "`{{ 'hello.world'|trans({ '%name%': name }) }}`", correct: true }
      - { value: "`{{ trans('hello.world', { name: name }) }}`", correct: false }
      - { value: "`{% trans with { '%name%': name } %}hello.world{% endtrans %}`", correct: true }
      - { value: "`{{ 'hello.world'|translate(name) }}`", correct: false }
    help: |
      The `trans` filter and tag are used for translating messages. Variables can be passed as a map.
      https://symfony.com/doc/current/translation.html#twig-templates

  -
    question: >
      Which Twig function should you use to generate a URL for a static asset (e.g., an image, CSS, or JavaScript file) located in the `public/` directory?
    answers:
      - { value: "`url()`", correct: false }
      - { value: "`static()`", correct: false }
      - { value: "`asset()`", correct: true }
      - { value: "`resource()`", correct: false }
    help: |
      The `asset()` function generates a public path for your assets, automatically handling base paths.
      https://symfony.com/doc/current/templates.html#linking-to-assets

  -
    question: >
      Which Twig feature allows you to inspect the contents of a variable directly within your template, often displaying the output in the Web Debug Toolbar or directly on the page?
    answers:
      - { value: "`{{ debug(variable) }}`", correct: false }
      - { value: "`{{ inspect(variable) }}`", correct: false }
      - { value: "`{{ dump(variable) }}`", correct: true }
      - { value: "`{{ log(variable) }}`", correct: false }
    help: |
      The `dump()` function and `{% dump %}` tag are used for debugging variables in Twig.
      https://symfony.com/doc/current/templates.html#debugging-variables

  -
    question: |
      In template inheritance, if a child template wants to render the content of a block from its parent template *in addition* to its own content, which function should be used inside the child's block?
    answers:
      - { value: "`self()`", correct: false }
      - { value: "`super()`", correct: false }
      - { value: "`parent()`", correct: true }
      - { value: "`inherit()`", correct: false }
    help: |
      The `parent()` function renders the contents of the parent block.
      https://symfony.com/doc/current/templates.html#template-inheritance

  -
    question: |
      What is the correct Twig syntax for a conditional statement that displays "Welcome Admin!" if `user.isAdmin` is true, otherwise "Welcome User!"?
    answers:
      - { value: "`{% if user.isAdmin %}Welcome Admin!{% else %}Welcome User!{% endif %}`", correct: true }
      - { value: "`{% user.isAdmin ? 'Welcome Admin!' : 'Welcome User!' %}`", correct: false }
      - { value: "`{% case user.isAdmin when true %}Welcome Admin!{% else %}Welcome User!{% endcase %}`", correct: false }
      - { value: "`{% if user.isAdmin then %}Welcome Admin!{% else %}Welcome User!{% endif %}`", correct: false }
    help: |
      The `if` tag is used to test if a condition is true or false.
      https://twig.symfony.com/doc/3.x/tags/if.html

  -
    question: >
      Which Symfony attribute can be used on a controller method to automatically render a Twig template based on the method's return value (an array of parameters)?
    answers:
      - { value: "`#[Render]`", correct: false }
      - { value: "`#[View]`", correct: false }
      - { value: "`#[Template]`", correct: true }
      - { value: "`#[Response]`", correct: false }
    help: |
      The `#[Template]` attribute allows a controller method to return an array of parameters, and Symfony automatically renders the specified Twig template.
      https://symfony.com/doc/current/templates.html#the-template-attribute

  -
    question: >
      Which of the following is the correct way to add a single-line comment in a Twig template that will not be rendered in the final HTML output?
    answers:
      - { value: "`<!-- This is a comment -->`", correct: false }
      - { value: "`// This is a comment`", correct: false }
      - { value: "`{# This is a comment #}`", correct: true }
      - { value: "`/* This is a comment */`", correct: false }
    help: |
      The `{# ... #}` delimiter is used for comments in Twig templates.
      https://twig.symfony.com/doc/3.x/templates.html#comments

  -
    question: |
      What will be the output of `{{ notifications|length }}` if the `notifications` variable is an array containing 3 items?
    answers:
      - { value: "3", correct: true }
      - { value: "Undefined", correct: false }
      - { value: "Error", correct: false }
      - { value: "0", correct: false }
    help: |
      The `length` filter returns the number of items of a sequence or mapping, or the length of a string.
      https://twig.symfony.com/doc/3.x/filters/length.html

  -
    question: |
      When including a Twig template fragment, how can you pass a variable with a different name than its original in the parent template?

      ```twig
      {# parent.html.twig #}
      {% set user = { name: 'Alice' } %}
      {{ include('child.html.twig', { profile_user: user }) }}
      ```
      How would `child.html.twig` access the user data passed as `profile_user`?
    answers:
      - { value: "`{{ user.name }}`", correct: false }
      - { value: "`{{ profile_user.name }}`", correct: true }
      - { value: "`{{ included_user.name }}`", correct: false }
      - { value: "`{{ parent.user.name }}`", correct: false }
    help: |
      When including a template, you can pass an array of variables to the `include()` function. The keys of this array become the variable names available in the included template.
      https://symfony.com/doc/current/templates.html#including-templates

  -
    question: >
      To generate an *absolute* URL for an asset (e.g., for use in emails or external services), which Twig functions should be combined?
    answers:
      - { value: "`path() | absolute_url()`", correct: false }
      - { value: "`asset() | absolute_url()`", correct: true }
      - { value: "`url() | asset()`", correct: false }
      - { value: "`absolute_path() | asset()`", correct: false }
    help: |
      The `absolute_url()` function can be used in conjunction with `asset()` to generate a full absolute URL for an asset.
      https://symfony.com/doc/current/templates.html#linking-to-assets

  -
    question: |
      How can you set a default translation domain for all `trans` filters and tags within a specific Twig template?
    answers:
      - { value: "`{% default_trans_domain 'app' %}`", correct: false }
      - { value: "`{% trans_default_domain 'app' %}`", correct: true }
      - { value: "`{% set_translation_domain 'app' %}`", correct: false }
      - { value: "`twig.default_translation_domain: app` in `twig.yaml`", correct: false }
    help: |
      The `trans_default_domain` tag sets the default translation domain for the current template.
      https://symfony.com/doc/current/translation.html#twig-templates

  -
    question: >
      Which Symfony console command allows you to inspect all available Twig functions, filters, and global variables, and also check the physical file path of a given template?
    answers:
      - { value: "`debug:container`", correct: false }
      - { value: "`debug:router`", correct: false }
      - { value: "`debug:twig`", correct: true }
      - { value: "`lint:twig`", correct: false }
    help: |
      The `debug:twig` command provides detailed information about the Twig environment, including available extensions and template paths.
      https://symfony.com/doc/current/templates.html#debugging-twig

  -
    question: |
      Consider the following Twig template:

      ```twig
      {% extends 'base.html.twig' %}
      <p>This content is outside a block.</p>
      {% block content %}My cool blog posts{% endblock %}
      ```
      What will be the result of rendering this template?
    answers:
      - { value: "The content 'This content is outside a block.' will be rendered before the `content` block.", correct: false }
      - { value: "A `SyntaxError` will be thrown because content outside blocks is not allowed after `extends`.", correct: true }
      - { value: "The content 'This content is outside a block.' will be silently ignored.", correct: false }
      - { value: "The template will render, but the content will only appear if `base.html.twig` has a specific placeholder for unblocked content.", correct: false }
    help: |
      When using template inheritance with `extends`, all content in the child template (except for comments and whitespace) must be inside a `{% block %}` tag.
      https://symfony.com/doc/current/templates.html#template-inheritance

  -
    question: >
      In a Symfony controller, if you need to get the rendered HTML content of a Twig template as a string, without wrapping it in a `Response` object, which method should you use?
    answers:
      - { value: "`render()`", correct: false }
      - { value: "`getTemplateContent()`", correct: false }
      - { value: "`renderView()`", correct: true }
      - { value: "`fetch()`", correct: false }
    help: |
      The `renderView()` method returns the rendered template content as a string, allowing you to manually create a `Response` object or use the content for other purposes.
      https://symfony.com/doc/current/templates.html#rendering-templates-in-controllers

  -
    question: >
      How can you define a custom global variable that is accessible in all Twig templates throughout your Symfony application?
    answers:
      - { value: "By adding it to the `parameters.yaml` file.", correct: false }
      - { value: "By defining it under the `twig.globals` section in `config/packages/twig.yaml`.", correct: true }
      - { value: "By injecting it into the `Twig\\Environment` service definition.", correct: true }
      - { value: "By creating a Twig extension and defining a global function.", correct: false }
    help: |
      Global variables can be defined in `config/packages/twig.yaml` under the `twig.globals` key, or by injecting them into the Twig Environment.
      https://symfony.com/doc/current/templates.html#global-variables

  -
    question: |
      You have a custom Twig filter named `price` that formats a number as currency. How would you apply this filter to a `product.price` variable, also passing `2` for decimals, `','` for decimal point, and `'.'` for thousands separator?
    answers:
      - { value: "`{{ product.price|price(2, ',', '.') }}`", correct: true }
      - { value: "`{{ product.price|price(decimals=2, decimal_point=',', thousands_separator='.') }}`", correct: false }
      - { value: "`{{ price(product.price, 2, ',', '.') }}`", correct: false }
      - { value: "`{{ product.price|format_price(2, ',', '.') }}`", correct: false }
    help: |
      Twig filters can accept arguments, which are passed in parentheses after the filter name.
      https://twig.symfony.com/doc/3.x/filters/index.html

  -
    question: |
      Which Twig function allows you to embed the output of another Symfony controller directly into your current template by referencing its route?
    answers:
      - { value: "`include()`", correct: false }
      - { value: "`embed()`", correct: false }
      - { value: "`render()`", correct: true }
      - { value: "`call()`", correct: false }
    help: |
      The `render()` Twig function can embed the output of a controller by passing a route generated by `path()` or `url()`.
      https://symfony.com/doc/current/templates.html#embedding-controllers

  -
    question: |
      You want to embed the output of a controller method `App\\Controller\\BlogController::recentArticles` into a Twig template without exposing it via a public URL. Which Twig function and syntax should you use?
    answers:
      - { value: "`{{ include('App\\\\Controller\\\\BlogController::recentArticles') }}`", correct: false }
      - { value: "`{{ render(controller('App\\\\Controller\\\\BlogController::recentArticles', {max: 3})) }}`", correct: true }
      - { value: "`{{ embed_controller('App\\\\Controller\\\\BlogController::recentArticles') }}`", correct: false }
      - { value: "`{{ path('App\\\\Controller\\\\BlogController::recentArticles') }}`", correct: false }
    help: |
      The `render()` function with `controller()` allows embedding a controller's output directly without requiring a public route.
      https://symfony.com/doc/current/templates.html#embedding-controllers

  -
    question: |
      When using Symfony Webpack Encore, which Twig functions are used to include the generated CSS and JavaScript files for a specific entry point (e.g., 'checkout') in your template?
    answers:
      - { value: "`{{ encore_entry_css_tags('checkout') }}` and `{{ encore_entry_js_tags('checkout') }}`", correct: false }
      - { value: "`{{ encore_entry_link_tags('checkout') }}` and `{{ encore_entry_script_tags('checkout') }}`", correct: true }
      - { value: "`{{ webpack_css('checkout') }}` and `{{ webpack_js('checkout') }}`", correct: false }
      - { value: "`{{ asset('build/checkout.css') }}` and `{{ asset('build/checkout.js') }}`", correct: false }
    help: |
      `encore_entry_link_tags()` and `encore_entry_script_tags()` are the correct functions for including Encore-generated assets.
      https://symfony.com/doc/current/frontend/encore/simple-example.html#including-assets-in-twig

  -
    question: >
      When rendering Twig templates within a Symfony service, which Twig service should be injected into the service's constructor?
    answers:
      - { value: "`Twig\\Loader\\FilesystemLoader`", correct: false }
      - { value: "`Twig\\Environment`", correct: true }
      - { value: "`Symfony\\Bundle\\TwigBundle\\TwigBundle`", correct: false }
      - { value: "`Symfony\\Bridge\\Twig\\Extension\\TwigExtension`", correct: false }
    help: |
      To render templates in a service, inject the `Twig\\Environment` service, which provides the `render()` method.
      https://symfony.com/doc/current/templates.html#rendering-templates-in-a-service

  -
    question: >
      Which Symfony console command can be used to check Twig templates for syntax errors, including showing deprecated features used?
    answers:
      - { value: "`cache:clear`", correct: false }
      - { value: "`debug:twig`", correct: false }
      - { value: "`lint:twig`", correct: true }
      - { value: "`twig:validate`", correct: false }
    help: |
      The `lint:twig` command checks Twig templates for syntax errors and can also show deprecations.
      https://symfony.com/doc/current/templates.html#linting-twig-templates

  -
    question: >
      How can you programmatically check if a specific Twig template exists before attempting to render it?
    answers:
      - { value: "By calling `Twig\\Environment::hasTemplate('template_name.html.twig')`.", correct: false }
      - { value: "By calling `Twig\\Loader\\FilesystemLoader::exists('template_name.html.twig')`.", correct: true }
      - { value: "By using a `try-catch` block around the `render()` call.", correct: false }
      - { value: "There is no direct method; you must attempt to render and catch an exception.", correct: false }
    help: |
      The `exists()` method of the Twig loader can be used to check if a template is available.
      https://symfony.com/doc/current/templates.html#checking-if-a-template-exists

  -
    question: |
      When sending emails with `Symfony\\Bridge\\Twig\\Mime\\TemplatedEmail`, how do you specify a plain text version of the email template in addition to the HTML version?
    answers:
      - { value: "Call `->textBodyTemplate('emails/signup.txt.twig')` on the `TemplatedEmail` object.", correct: false }
      - { value: "Call `->textTemplate('emails/signup.txt.twig')` on the `TemplatedEmail` object.", correct: true }
      - { value: "Twig automatically generates a text version from the HTML template.", correct: false }
      - { value: "You must manually set the text content using `->text('...')`.", correct: false }
    help: |
      The `textTemplate()` method of `TemplatedEmail` allows you to specify a plain text Twig template for the email.
      https://symfony.com/doc/current/mailer.html#creating-templated-emails

  -
    question: >
      Which component is responsible for integrating Symfony Forms with Twig templates, allowing functions like `form_start()` and `form_row()` to be used?
    answers:
      - { value: "`Symfony\\Component\\Form`", correct: false }
      - { value: "`Symfony\\Bridge\\Twig\\Extension\\FormExtension`", correct: true }
      - { value: "`Symfony\\Bundle\\FrameworkBundle`", correct: false }
      - { value: "`Twig\\Form\\Renderer`", correct: false }
    help: |
      The `Symfony\\Bridge\\Twig\\Extension\\FormExtension` provides the necessary Twig functions and filters for rendering Symfony Forms.
      https://symfony.com/doc/current/components/form.html#rendering-a-form-in-a-template

  -
    question: >
      Which Twig function is used to display metadata associated with a Symfony Workflow, such as workflow titles, place properties, or transition priorities?
    answers:
      - { value: "`workflow_state()`", correct: false }
      - { value: "`workflow_info()`", correct: false }
      - { value: "`workflow_metadata()`", correct: true }
      - { value: "`workflow_get_data()`", correct: false }
    help: |
      The `workflow_metadata()` Twig function allows access to metadata defined in your workflow configuration.
      https://symfony.com/doc/current/workflow.html#displaying-workflow-metadata-in-twig

  -
    question: >
      How can you change the default directory where Twig looks for templates (e.g., from `templates/` to `resources/views/`) in your Symfony application?
    answers:
      - { value: "By setting the `twig.default_path` configuration option in `config/packages/twig.yaml`.", correct: true }
      - { value: "By modifying the `kernel.project_dir` parameter.", correct: false }
      - { value: "By creating a custom Twig loader service.", correct: false }
      - { value: "By configuring the `paths` option under `twig` in `config/packages/twig.yaml` without a namespace.", correct: false }
    help: |
      The `default_path` option under the `twig` configuration in `twig.yaml` allows you to change the default template directory.
      https://symfony.com/doc/current/configuration/override_dir_structure.html#changing-the-default-templates-directory

  -
    question: |
      You want to organize your Twig templates with namespaces, for example, having `backend/templates` accessible via `@admin/`. Which configuration snippet in `config/packages/twig.yaml` achieves this?
    answers:
      - { value: "`twig:\n    paths:\n        'backend/templates': admin`", correct: true }
      - { value: "`twig:\n    namespaces:\n        admin: 'backend/templates'`", correct: false }
      - { value: "`twig:\n    template_dirs:\n        admin: 'backend/templates'`", correct: false }
      - { value: "`twig:\n    mapping:\n        '@admin': 'backend/templates'`", correct: false }
    help: |
      The `paths` configuration under `twig` allows you to define additional template directories and assign them namespaces.
      https://symfony.com/doc/current/templates.html#template-namespaces

  -
    question: |
      You have a directory `email/default/templates` containing Twig templates that you want Twig to find, but without assigning them a specific namespace. Which configuration snippet in `config/packages/twig.yaml` achieves this?
    answers:
      - { value: "`twig:\n    paths:\n        'email/default/templates': ~`", correct: true }
      - { value: "`twig:\n    paths:\n        'email/default/templates': null`", correct: true }
      - { value: "`twig:\n    paths:\n        'email/default/templates': ''`", correct: false }
      - { value: "`twig:\n    default_paths:\n        - 'email/default/templates'`", correct: false }
    help: |
      To add a directory to Twig's lookup paths without assigning a namespace, set its value to `~` (YAML null) or `null` in PHP configuration.
      https://symfony.com/doc/current/templates.html#template-paths

  -
    question: >
      In Symfony 7, how can you pass a `Symfony\\Component\\Translation\\TranslatableMessage` object directly to the Twig `trans` filter to defer the translation process to the template?
    answers:
      - { value: "`{{ message|trans }}`", correct: true }
      - { value: "`{{ message.trans() }}`", correct: false }
      - { value: "`{{ message|translate_object }}`", correct: false }
      - { value: "You must call `->trans()` on the `TranslatableMessage` object in the controller before passing it to Twig.", correct: false }
    help: |
      `TranslatableMessage` objects can be passed directly to the `trans` filter in Twig, and Twig will handle the translation.
      https://symfony.com/doc/current/translation.html#translatablemessage

  -
    question: |
      If you need to use custom variable delimiters in your Twig templates (e.g., for compatibility with another JavaScript templating engine like Vue.js), which of the following is a valid Twig syntax example alongside standard Twig?
    answers:
      - { value: "`{{ twig_variable }}   ${ vuejs_variable }$`", correct: true }
      - { value: "`{{ twig_variable }}   [[ vuejs_variable ]]`", correct: false }
      - { value: "`{{ twig_variable }}   <%- vuejs_variable %>`", correct: false }
      - { value: "`{{ twig_variable }}   @{{ vuejs_variable }}`", correct: false }
    help: |
      Twig allows configuring custom delimiters, enabling coexistence with other templating engines. The example shows `${ ... }$` as a custom delimiter.
      https://symfony.com/doc/current/frontend/encore/vuejs.html#using-custom-delimiters

  -
    question: |
      To profile the performance of a specific section of your Twig template and see its execution time in the Symfony profiler, which Twig tag should you use?
    answers:
      - { value: "`{% profile 'block_name' %}...{% endprofile %}`", correct: false }
      - { value: "`{% stopwatch 'metric_name' %}...{% endstopwatch %}`", correct: true }
      - { value: "`{% debug 'timing' %}...{% enddebug %}`", correct: false }
      - { value: "`{% timer 'label' %}...{% endtimer %}`", correct: false }
    help: |
      The `stopwatch` Twig tag allows you to profile specific parts of your template code.
      https://symfony.com/doc/current/performance.html#profiling-twig-templates

  -
    question: |
      When overriding a Twig template from a third-party bundle (e.g., `AcmeUserBundle/registration/confirmed.html.twig`), what special prefix should be used in the `extends` tag to prevent infinite loop errors if the overridden template itself extends another?
    answers:
      - { value: "`@!`", correct: true }
      - { value: "`@bundle/`", correct: false }
      - { value: "`!bundle:`", correct: false }
      - { value: "`@original/`", correct: false }
    help: |
      The special `!` prefix in `@!BundleName/path/to/template.html.twig` ensures that the original template is extended, not the overridden one, preventing infinite loops.
      https://symfony.com/doc/current/bundles/override.html#overriding-bundle-templates

  -
    question: |
      When rendering a Symfony Form in Twig, which helper function is used to generate the opening `<form>` tag, including attributes like `method`, `action`, and `enctype`?
    answers:
      - { value: "`form_open(form)`", correct: false }
      - { value: "`form_start(form)`", correct: true }
      - { value: "`form_begin(form)`", correct: false }
      - { value: "`form_init(form)`", correct: false }
    help: |
      The `form_start(form)` Twig function renders the opening HTML `<form>` tag.
      https://symfony.com/doc/current/form/form_collections.html#rendering-a-form-in-a-template

  -
    question: |
      Given a Symfony Form named `form` with a collection field `tags`, and each tag has a `name` property, how would you iterate over the `tags` and render each `tag.name` field in Twig?
    answers:
      - { value: "`{% for tag in form.tags %}{{ form_row(tag.name) }}{% endfor %}`", correct: true }
      - { value: "`{% for tag in form.tags.children %}{{ form_row(tag.name) }}{% endfor %}`", correct: false }
      - { value: "`{{ form_widget(form.tags) }}`", correct: false }
      - { value: "`{% for tag in form.tags.data %}{{ form_row(tag.name) }}{% endfor %}`", correct: false }
    help: |
      You can iterate directly over the form's collection field (e.g., `form.tags`) in Twig, and each item in the loop will be a form view for the individual collection entry.
      https://symfony.com/doc/current/form/form_collections.html#rendering-a-form-collection

  -
    question: >
      In a Symfony controller, how can you render only a specific block from a Twig template and return it as a `Response` object?
    answers:
      - { value: "`return $this->render('template.html.twig', ['block' => 'block_name']);`", correct: false }
      - { value: "`return $this->renderBlock('template.html.twig', 'block_name', [...]);`", correct: true }
      - { value: "`return $this->renderView('template.html.twig', ['block' => 'block_name']);`", correct: false }
      - { value: "`return $this->renderPartial('template.html.twig', 'block_name');`", correct: false }
    help: |
      The `renderBlock()` method allows rendering only a specific block from a Twig template and returns a `Response` object.
      https://symfony.com/doc/current/templates.html#rendering-template-blocks-in-controllers

  -
    question: >
      If you need to get the rendered content of a specific Twig template block as a string (not a `Response` object) within a Symfony controller, which method should you use?
    answers:
      - { value: "`renderBlock()`", correct: false }
      - { value: "`renderBlockView()`", correct: true }
      - { value: "`getBlockContent()`", correct: false }
      - { value: "`renderViewBlock()`", correct: false }
    help: |
      The `renderBlockView()` method returns the content of a specific Twig template block as a string.
      https://symfony.com/doc/current/templates.html#rendering-template-blocks-in-controllers

  -
    question: |
      In Symfony 7.2+, how can you use the `#[Template]` attribute to render only a specific block (`price_block`) from `product.html.twig` directly from a controller method?
    answers:
      - { value: "`#[Template('product.html.twig', block: 'price_block')]`", correct: true }
      - { value: "`#[Template(template: 'product.html.twig', block: 'price_block')]`", correct: false }
      - { value: "`#[Template(file: 'product.html.twig', block: 'price_block')]`", correct: false }
      - { value: "`#[Template('product.html.twig', only_block: 'price_block')]`", correct: false }
    help: |
      The `#[Template]` attribute supports a `block` argument to specify which block to render.
      https://symfony.com/doc/current/templates.html#the-template-attribute

  -
    question: |
      How can you check if the current user is fully authenticated within a Twig template?
    answers:
      - { value: "`{% if app.user %}`", correct: false }
      - { value: "`{% if is_authenticated() %}`", correct: false }
      - { value: "`{% if is_granted('IS_AUTHENTICATED_FULLY') %}`", correct: true }
      - { value: "`{% if app.security.isLoggedIn %}`", correct: false }
    help: |
      The `is_granted()` Twig function checks if the current user has a specific role or attribute, including security attributes like `IS_AUTHENTICATED_FULLY`.
      https://symfony.com/doc/current/security.html#checking-if-a-user-is-logged-in-is-granted

  -
    question: |
      Which Twig filter can be used to serialize a PHP object (e.g., a `person` object) into a specific format like JSON directly within the template?
    answers:
      - { value: "`{{ person|json_encode }}`", correct: false }
      - { value: "`{{ person|serialize(format = 'json') }}`", correct: true }
      - { value: "`{{ person|to_json }}`", correct: false }
      - { value: "`{{ person|dump_json }}`", correct: false }
    help: |
      The `serialize` filter, provided by the Symfony Serializer component's Twig extension, can convert objects to various formats.
      https://symfony.com/doc/current/serializer.html#twig-integration

  -
    question: |
      When generating URLs for use in JavaScript within a Twig template, what is the recommended approach to ensure the URL is safely embedded?
    answers:
      - { value: "Use `path()` and then manually escape special characters.", correct: false }
      - { value: "Use `path()` followed by the `|escape('js')` filter.", correct: true }
      - { value: "Use `url()` and assume it's safe for JavaScript.", correct: false }
      - { value: "Store the URL in a data attribute and retrieve it with JavaScript.", correct: false }
    help: |
      The `escape('js')` filter ensures that the generated URL is properly escaped for use within a JavaScript string.
      https://symfony.com/doc/current/routing.html#generating-urls-in-javascript

  -
    question: >
      Which Twig function is used to embed content asynchronously (e.g., using Hinclude.js) from another controller or URL, providing a fallback default content if the asynchronous load fails?
    answers:
      - { value: "`render_async()`", correct: false }
      - { value: "`hinclude()`", correct: false }
      - { value: "`render_hinclude()`", correct: true }
      - { value: "`embed_lazy()`", correct: false }
    help: |
      The `render_hinclude()` function is used to embed content asynchronously, often with a fallback.
      https://symfony.com/doc/current/templates.html#embedding-asynchronous-content-with-hinclude-js

  -
    question: >
      What is the purpose of the `{# ... #}` syntax in Twig?
    answers:
      - { value: "To define a block that can be overridden by child templates.", correct: false }
      - { value: "To output the value of a variable.", correct: false }
      - { value: "To add comments that are not rendered in the final HTML output.", correct: true }
      - { value: "To execute Twig statements like loops or conditionals.", correct: false }
    help: |
      `{# ... #}` is used for comments in Twig templates, which are ignored by the Twig engine and do not appear in the rendered output.
      https://twig.symfony.com/doc/3.x/templates.html#comments

  -
    question: >
      Which Twig filter is commonly used to format a `DateTime` object into a human-readable string?
    answers:
      - { value: "`format_date`", correct: false }
      - { value: "`datetime`", correct: false }
      - { value: "`date`", correct: true }
      - { value: "`time_format`", correct: false }
    help: |
      The `date` filter formats a date to a given format.
      https://twig.symfony.com/doc/3.x/filters/date.html

  -
    question: >
      When using the `include()` function in Twig, what happens to the variables from the parent template by default?
    answers:
      - { value: "They are not accessible in the included template unless explicitly passed.", correct: false }
      - { value: "They are automatically inherited by the included template.", correct: true }
      - { value: "Only global variables are inherited; local variables are not.", correct: false }
      - { value: "The included template gets a copy of the parent's variables, but changes are not reflected back.", correct: false }
    help: |
      By default, the included template has access to the variables of the active context.
      https://twig.symfony.com/doc/3.x/functions/include.html

  -
    question: |
      What is the correct way to check if a variable `user` is defined and not null in Twig?
    answers:
      - { value: "`{% if user is defined and user is not null %}`", correct: true }
      - { value: "`{% if user %}`", correct: false }
      - { value: "`{% if user is not empty %}`", correct: false }
      - { value: "`{% if user exists %}`", correct: false }
    help: |
      The `defined` test checks if a variable is defined. Combining it with `is not null` ensures the variable exists and has a value.
      https://twig.symfony.com/doc/3.x/tests/defined.html

  -
    question: >
      Which Twig function is used to generate an absolute URL based on a Symfony route name and its parameters?
    answers:
      - { value: "`path()`", correct: false }
      - { value: "`route_absolute()`", correct: false }
      - { value: "`url()`", correct: true }
      - { value: "`absolute_path()`", correct: false }
    help: |
      The `url()` function generates an absolute URL for a given route.
      https://symfony.com/doc/current/routing.html#generating-urls-in-templates

  -
    question: >
      What is the primary purpose of the `{% block ... %}` tag in Twig?
    answers:
      - { value: "To define a reusable macro or function.", correct: false }
      - { value: "To mark a section of content that can be overridden by child templates.", correct: true }
      - { value: "To include another template file.", correct: false }
      - { value: "To set a variable within the current template scope.", correct: false }
    help: |
      Blocks are used in template inheritance to define regions that can be overridden by child templates.
      https://twig.symfony.com/doc/3.x/tags/extends.html

  -
    question: |
      When passing an array of variables to a Twig template from a Symfony controller, what is the recommended naming convention for the variable keys?
    answers:
      - { value: "camelCase (e.g., `userFirstName`)", correct: false }
      - { value: "PascalCase (e.g., `UserFirstName`)", correct: false }
      - { value: "snake_case (e.g., `user_first_name`)", correct: true }
      - { value: "kebab-case (e.g., `user-first-name`)", correct: false }
    help: |
      Twig recommends using `snake_case` for variable names passed to templates.
      https://symfony.com/doc/current/templates.html#passing-variables-to-templates

  -
    question: >
      Which Twig filter is used for pluralization, allowing you to display different strings based on a count?
    answers:
      - { value: "`pluralize`", correct: false }
      - { value: "`transchoice`", correct: true }
      - { value: "`count_format`", correct: false }
      - { value: "`number_format`", correct: false }
    help: |
      The `transchoice` filter (or tag) is used for pluralization in translations.
      https://symfony.com/doc/current/translation.html#pluralization

  -
    question: >
      What is the purpose of the `{{ ... }}` syntax in Twig?
    answers:
      - { value: "To define a new function or filter.", correct: false }
      - { value: "To add a comment to the template.", correct: false }
      - { value: "To output the result of an expression or variable.", correct: true }
      - { value: "To include another template file.", correct: false }
    help: |
      `{{ ... }}` is used to print the content of a variable or the result of an expression.
      https://twig.symfony.com/doc/3.x/templates.html#outputting-variables

  -
    question: >
      When configuring Twig template paths in `config/packages/twig.yaml`, how do you define a namespace (e.g., `admin`) for a specific directory (e.g., `backend/templates`)?
    answers:
      - { value: "`paths:\n    'backend/templates': 'admin'`", correct: true }
      - { value: "`namespaces:\n    admin: 'backend/templates'`", correct: false }
      - { value: "`template_dirs:\n    admin: 'backend/templates'`", correct: false }
      - { value: "`map:\n    '@admin': 'backend/templates'`", correct: false }
    help: |
      Template namespaces are configured under the `paths` key in `twig.yaml`, where the key is the directory and the value is the namespace.
      https://symfony.com/doc/current/templates.html#template-namespaces

  -
    question: |
      Which of the following is a valid way to access a property `name` of an object `user` in Twig?
    answers:
      - { value: "`user->name`", correct: false }
      - { value: "`user['name']`", correct: true }
      - { value: "`user.name`", correct: true }
      - { value: "`user::name`", correct: false }
    help: |
      Twig allows accessing properties of objects and elements of arrays using both dot (`.`) and square bracket (`[]`) notation.
      https://twig.symfony.com/doc/3.x/templates.html#accessing-variables

  -
    question: >
      What is the primary benefit of using `{% extends 'base.html.twig' %}` in a child template?
    answers:
      - { value: "It copies all content from `base.html.twig` into the child template.", correct: false }
      - { value: "It allows the child template to reuse the layout and structure defined in `base.html.twig`.", correct: true }
      - { value: "It makes `base.html.twig` a global variable accessible in the child.", correct: false }
      - { value: "It automatically injects all services defined in `base.html.twig`.", correct: false }
    help: |
      Template inheritance allows you to build a base "skeleton" template that contains all the common parts of your site and defines "blocks" that child templates can override.
      https://symfony.com/doc/current/templates.html#template-inheritance

  -
    question: |
      You have a variable `product.price` which is a float. You want to display it formatted as currency with 2 decimal places, a comma for the decimal point, and a dot for the thousands separator. Which Twig filter usage is correct?
    answers:
      - { value: "`{{ product.price|number_format(2, ',', '.') }}`", correct: true }
      - { value: "`{{ product.price|currency(2, ',', '.') }}`", correct: false }
      - { value: "`{{ product.price|format_currency(2, ',', '.') }}`", correct: false }
      - { value: "`{{ product.price|price(2, ',', '.') }}` (assuming `price` is a custom filter with this signature)", correct: true }
    help: |
      The `number_format` filter formats a number. Custom filters like `price` can also be created with specific formatting logic.
      https://twig.symfony.com/doc/3.x/filters/number_format.html

  -
    question: >
      Which of the following is NOT a valid way to configure additional Twig template directories without namespaces in `config/packages/twig.yaml`?
    answers:
      - { value: "`paths:\n    'path/to/templates': ~`", correct: false }
      - { value: "`paths:\n    'path/to/templates': null`", correct: false }
      - { value: "`paths:\n    'path/to/templates': ''`", correct: true }
      - { value: "`paths:\n    - 'path/to/templates'`", correct: false }
    help: |
      To add a directory without a namespace, the value should be `~` (YAML null) or `null` in PHP. An empty string `''` is not the correct way to indicate no namespace.
      https://symfony.com/doc/current/templates.html#template-paths

  -
    question: >
      What is the primary reason for Twig's auto-escaping feature?
    answers:
      - { value: "To automatically convert all text to uppercase for display.", correct: false }
      - { value: "To prevent Cross-Site Scripting (XSS) attacks by escaping potentially malicious characters.", correct: true }
      - { value: "To compress the HTML output for faster page loading.", correct: false }
      - { value: "To automatically translate content based on the user's locale.", correct: false }
    help: |
      Auto-escaping is a security feature to protect against XSS attacks.
      https://symfony.com/doc/current/templates.html#automatic-output-escaping

  -
    question: >
      When embedding a controller into a Twig template using `render()`, what is the benefit of passing the controller via `controller('App\\Controller\\BlogController::recentArticles')` instead of `path('latest_articles')`?
    answers:
      - { value: "It allows the embedded controller to run in a separate process for better performance.", correct: false }
      - { value: "It avoids the need for the controller to have a publicly accessible route.", correct: true }
      - { value: "It ensures the embedded content is always cached.", correct: false }
      - { value: "It allows direct access to the controller's private methods.", correct: false }
    help: |
      Using `controller()` is useful when you don't want to expose the controller with a public URL.
      https://symfony.com/doc/current/templates.html#embedding-controllers

  -
    question: |
      You are debugging a Twig template and want to dump the contents of the `articles` variable to the Web Debug Toolbar, not directly into the page content. Which syntax should you use?
    answers:
      - { value: "`{{ dump(articles) }}`", correct: false }
      - { value: "`{% dump articles %}`", correct: true }
      - { value: "`{{ articles|debug }}`", correct: false }
      - { value: "`{% debug articles %}`", correct: false }
    help: |
      The `{% dump %}` tag sends the variable contents to the Web Debug Toolbar. `{{ dump() }}` function dumps them directly into the page content.
      https://symfony.com/doc/current/templates.html#debugging-variables

  -
    question: >
      What is the purpose of the `trans_default_domain` tag in Twig?
    answers:
      - { value: "To define a new translation domain.", correct: false }
      - { value: "To set the default locale for all translations in the template.", correct: false }
      - { value: "To specify the default translation domain for all subsequent `trans` filters and tags in the current template.", correct: true }
      - { value: "To force all translations to use the 'messages' domain.", correct: false }
    help: |
      The `trans_default_domain` tag sets the default translation domain for the current template, avoiding the need to specify it for every translation.
      https://symfony.com/doc/current/translation.html#twig-templates

  -
    question: >
      Which of the following is a valid way to access the current application environment (e.g., 'dev', 'prod') within a Twig template?
    answers:
      - { value: "`{{ app.env }}`", correct: false }
      - { value: "`{{ app.environment }}`", correct: true }
      - { value: "`{{ kernel.environment }}`", correct: false }
      - { value: "`{{ symfony.environment }}`", correct: false }
    help: |
      The `app.environment` global variable provides access to the current application environment.
      https://symfony.com/doc/current/templates.html#global-variables

  -
    question: |
      You want to display a message that changes based on a count, for example, "1 item" or "N items". Which Twig translation feature should you use?
    answers:
      - { value: "Conditional `if` statements with `length` filter.", correct: false }
      - { value: "The `transchoice` filter or tag.", correct: true }
      - { value: "Multiple `trans` calls with different keys.", correct: false }
      - { value: "A custom Twig function for pluralization.", correct: false }
    help: |
      The `transchoice` filter/tag is specifically designed for handling pluralization in translations.
      https://symfony.com/doc/current/translation.html#pluralization

  -
    question: >
      What is the purpose of the `#[AsCommand]` attribute in a Symfony console command class?
    answers:
      - { value: "To define the command's name and description.", correct: true }
      - { value: "To inject services into the command.", correct: false }
      - { value: "To execute the command automatically.", correct: false }
      - { value: "To link the command to a specific controller.", correct: false }
    help: |
      The `#[AsCommand]` attribute is used to configure the command's name, description, and other options directly in the class.
      https://symfony.com/doc/current/console.html#configuring-the-command

  -
    question: |
      Which of the following correctly configures the HTTP client to use HTTP/2?
    answers:
      - { value: "Set the `http_version` option to \"2.0\" in the client configuration.", correct: true }
      - { value: "Set the `version` option to '2.0' in the client configuration.", correct: false }
      - { value: "Enable the `http2` flag in `framework.yaml`.", correct: false }
    help: |
      To use HTTP/2, you must set the `http_version` option to `2.0` when creating the HTTP client.
      https://symfony.com/doc/current/http_client.html#http-2-support

  -
    question: >
      Which of the following is the correct Composer command to install the Twig templating engine and its Symfony integration?
    answers:
      - { value: "`composer require twig/twig`", correct: false }
      - { value: "`composer require symfony/twig`", correct: false }
      - { value: "`composer require symfony/twig-bundle`", correct: true }
      - { value: "`composer install twig`", correct: false }
    help: |
      The `symfony/twig-bundle` package provides the Twig templating engine and its integration with Symfony applications.
      https://symfony.com/doc/current/templates.html#installation