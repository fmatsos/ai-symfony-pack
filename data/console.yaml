category: Console

questions:
  -
    question: >
      Which of the following commands would you use to list all available Symfony console commands?
    answers:
      - { value: "`php bin/console list`", correct: true }
      - { value: "`php bin/console show`", correct: false }
      - { value: "`php bin/console commands`", correct: false }
      - { value: "`php bin/console --list`", correct: false }
    help: |
      The `list` command is a built-in Symfony console command used to display all registered commands.
      https://symfony.com/doc/current/console.html#listing-all-available-commands

  -
    question: >
      What is the purpose of the `#[AsCommand]` attribute when defining a custom Symfony console command?
    answers:
      - { value: "To automatically register the command with the console application.", correct: true }
      - { value: "To define the command's arguments and options.", correct: false }
      - { value: "To specify the command's dependencies for autowiring.", correct: false }
      - { value: "To mark the command as a service.", correct: false }
    help: |
      The `#[AsCommand]` attribute is used to configure the command's name, description, and other options directly in the class, and it automatically registers the command.
      https://symfony.com/doc/current/console.html#configuring-the-command

  -
    question: |
      Consider the following command definition:

      ```php
      #[AsCommand(name: 'app:my-command', description: 'My command description')]
      class MyCommand extends Command
      {
          protected function configure(): void
          {
              $this->addArgument('name', InputArgument::REQUIRED, 'The name of the user.');
          }

          protected function execute(InputInterface $input, OutputInterface $output): int
          {
              $name = $input->getArgument('name');
              $output->writeln('Hello, ' . $name . '!');
              return Command::SUCCESS;
          }
      }
      ```
      How would you execute this command from the terminal, providing the required argument?
    answers:
      - { value: "`php bin/console app:my-command JohnDoe`", correct: true }
      - { value: "`php bin/console app:my-command --name=JohnDoe`", correct: false }
      - { value: "`php bin/console app:my-command -name JohnDoe`", correct: false }
      - { value: "`php bin/console app:my-command --argument name=JohnDoe`", correct: false }
    help: |
      Arguments are passed directly after the command name in the order they are defined.
      https://symfony.com/doc/current/console/input.html#accessing-arguments

  -
    question: >
      Which of the following `InputArgument` constants indicates that an argument can accept multiple values?
    answers:
      - { value: "`InputArgument::IS_ARRAY`", correct: true }
      - { value: "`InputArgument::OPTIONAL_ARRAY`", correct: false }
      - { value: "`InputArgument::MULTIPLE`", correct: false }
      - { value: "`InputArgument::COLLECTION`", correct: false }
    help: |
      `InputArgument::IS_ARRAY` allows an argument to accept multiple values, which will be returned as an array. It must be the last argument defined.
      https://symfony.com/doc/current/console/input.html#argument-types

  -
    question: >
      What is the primary interface used to write output to the console in a Symfony command?
    answers:
      - { value: "`OutputInterface`", correct: true }
      - { value: "`ConsoleOutput`", correct: false }
      - { value: "`WriterInterface`", correct: false }
      - { value: "`LoggerInterface`", correct: false }
    help: |
      The `OutputInterface` provides methods like `write()` and `writeln()` for sending output to the console.
      https://symfony.com/doc/current/console.html#outputting-text

  -
    question: >
      Which helper class simplifies common console interactions like asking questions, displaying progress bars, and formatting output?
    answers:
      - { value: "`SymfonyStyle`", correct: true }
      - { value: "`QuestionHelper`", correct: false }
      - { value: "`FormatterHelper`", correct: false }
      - { value: "`IOHelper`", correct: false }
    help: |
      `SymfonyStyle` is a wrapper around `InputInterface` and `OutputInterface` that provides a set of convenient methods for common console UI patterns.
      https://symfony.com/doc/current/console/style.html

  -
    question: >
      Which console event is dispatched just before any command is executed?
    answers:
      - { value: "`ConsoleCommandEvent`", correct: true }
      - { value: "`ConsoleExecuteEvent`", correct: false }
      - { value: "`ConsoleStartEvent`", correct: false }
      - { value: "`ConsolePreCommandEvent`", correct: false }
    help: |
      The `ConsoleCommandEvent` is dispatched before the command's `initialize()` or `interact()` methods are called.
      https://symfony.com/doc/current/components/console/events.html#consolecommandevent

  -
    question: >
      Which global option can you use to disable all output and interaction, including errors, for a Symfony console command?
    answers:
      - { value: "`--silent`", correct: true }
      - { value: "`--quiet`", correct: false }
      - { value: "`--no-output`", correct: false }
      - { value: "`--no-interaction`", correct: false }
    help: |
      The `--silent` option, introduced in Symfony 7.2, completely disables all output and interaction, including error messages.
      https://symfony.com/doc/current/console/input.html#global-options

  -
    question: >
      What is the default verbosity level when running a Symfony console command without specifying any verbosity options?
    answers:
      - { value: "Normal verbosity (equivalent to `-v`)", correct: true }
      - { value: "Quiet verbosity (equivalent to `--quiet`)", correct: false }
      - { value: "Debug verbosity (equivalent to `-vvv`)", correct: false }
      - { value: "No verbosity (equivalent to `--silent`)", correct: false }
    help: |
      By default, Symfony console commands run with a normal verbosity level, which can be explicitly set with `-v`.
      https://symfony.com/doc/current/console/input.html#global-options

  -
    question: |
      You want to hide a specific command from the default `list` output. How can you achieve this using the `#[AsCommand]` attribute?
    answers:
      - { value: "`#[AsCommand(name: 'app:hidden-command', hidden: true)]`", correct: true }
      - { value: "`#[AsCommand(name: 'app:hidden-command', public: false)]`", correct: false }
      - { value: "`#[AsCommand(name: 'app:hidden-command', visible: false)]`", correct: false }
      - { value: "`#[AsCommand(name: 'app:hidden-command', display: false)]`", correct: false }
    help: |
      Setting the `hidden` property to `true` in the `#[AsCommand]` attribute makes the command invisible in the default command listings.
      https://symfony.com/doc/current/console/hide_commands.html

  -
    question: >
      Which of the following methods is *required* for a Symfony console command class that extends `Symfony\\Component\\Console\\Command\\Command`?
    answers:
      - { value: "`execute()` or `__invoke()`", correct: true }
      - { value: "`configure()`", correct: false }
      - { value: "`initialize()`", correct: false }
      - { value: "`interact()`", correct: false }
    help: |
      The `execute()` method (or `__invoke()` for invokable commands) contains the main logic of the command and must return an integer exit status. `configure()`, `initialize()`, and `interact()` are optional.
      https://symfony.com/doc/current/console.html#command-lifecycle

  -
    question: |
      You are defining a command-line option that should not accept any value (e.g., a `--yell` flag). Which `InputOption` constant should you use?
    answers:
      - { value: "`InputOption::VALUE_NONE`", correct: true }
      - { value: "`InputOption::VALUE_FLAG`", correct: false }
      - { value: "`InputOption::VALUE_BOOLEAN`", correct: false }
      - { value: "`InputOption::NO_VALUE`", correct: false }
    help: |
      `InputOption::VALUE_NONE` indicates that the option is a simple flag and does not expect a value. It returns `false` if not present, `true` if present.
      https://symfony.com/doc/current/console/input.html#option-types

  -
    question: |
      How can you access the value of an argument named `username` within the `execute()` method of a Symfony console command?
    answers:
      - { value: "`$input->getArgument('username')`", correct: true }
      - { value: "`$input->option('username')`", correct: false }
      - { value: "`$this->argument('username')`", correct: false }
      - { value: "`$input->getOption('username')`", correct: false }
    help: |
      The `InputInterface::getArgument()` method is used to retrieve the value of a defined argument.
      https://symfony.com/doc/current/console/input.html#accessing-arguments

  -
    question: >
      Which of the following is the correct way to set a custom name and version for a Symfony Console `Application` instance?
    answers:
      - { value: "`$application = new Application('My App', '1.0.0');`", correct: true }
      - { value: "`$application->setName('My App')->setVersion('1.0.0');`", correct: true }
      - { value: "`$application->configure('My App', '1.0.0');`", correct: false }
      - { value: "`$application->setInfo('My App', '1.0.0');`", correct: false }
    help: |
      The `Application` constructor accepts the name and version as optional arguments, or they can be set using `setName()` and `setVersion()` methods.
      https://symfony.com/doc/current/components/console.html#creating-a-console-application

  -
    question: >
      What is the purpose of the `interact()` method in a Symfony console command lifecycle?
    answers:
      - { value: "To interactively ask the user for missing required options/arguments.", correct: true }
      - { value: "To initialize command variables before execution.", correct: false }
      - { value: "To execute the main logic of the command.", correct: false }
      - { value: "To handle user input after the command has run.", correct: false }
    help: |
      The `interact()` method is called after `initialize()` and before `execute()`. It's the last chance to prompt the user for missing required input. It is not called when `--no-interaction` is used.
      https://symfony.com/doc/current/console.html#command-lifecycle

  -
    question: |
      You want to output a message in green text to the console. Which of the following is the correct way to do this using `OutputInterface`?
    answers:
      - { value: "`$output->writeln('<info>This is green text</info>');`", correct: true }
      - { value: "`$output->writeln('<color=green>This is green text</color>');`", correct: false }
      - { value: "`$output->writeln('<fg=green>This is green text</fg>');`", correct: true }
      - { value: "`$output->writeln('This is green text', 'info');`", correct: false }
    help: |
      Symfony's console component uses specific tags for coloring output. `<info>` is a predefined style for green text, and `<fg=green>` allows inline foreground color specification.
      https://symfony.com/doc/current/console/coloring.html#predefined-styles
      https://symfony.com/doc/current/console/coloring.html#inline-styles

  -
    question: >
      Which of the following global options would you use to display the help message for a specific command?
    answers:
      - { value: "`php bin/console help app:my-command`", correct: true }
      - { value: "`php bin/console app:my-command --help`", correct: true }
      - { value: "`php bin/console app:my-command -h`", correct: true }
      - { value: "`php bin/console app:my-command --info`", correct: false }
    help: |
      The `help` command or the `--help` (`-h`) global option can be used to display detailed help for a specific command.
      https://symfony.com/doc/current/components/console/usage.html#displaying-the-help-message

  -
    question: |
      You need to inject a service `App\\Service\\MyService` into your console command. Which is the recommended way to do this in Symfony 7?
    answers:
      - { value: "Via constructor injection with type-hinting.", correct: true }
      - { value: "Using the `#[Required]` attribute on a property.", correct: false }
      - { value: "By calling `$this->getContainer()->get('App\\Service\\MyService')` in `execute()`.", correct: false }
      - { value: "By defining the service as an argument in `configure()`.", correct: false }
    help: |
      Constructor injection with type-hinting is the recommended way to inject services into Symfony commands, leveraging autowiring.
      https://symfony.com/doc/current/console.html#dependency-injection

  -
    question: >
      What is the purpose of the `ConsoleErrorEvent` in Symfony?
    answers:
      - { value: "It is dispatched whenever an exception is thrown by a command.", correct: true }
      - { value: "It is dispatched when a command fails to execute.", correct: false }
      - { value: "It is dispatched when an invalid argument is provided to a command.", correct: false }
      - { value: "It is dispatched when the console application encounters an internal error.", correct: false }
    help: |
      The `ConsoleErrorEvent` allows you to react to exceptions thrown during command execution, providing an opportunity to log or handle them.
      https://symfony.com/doc/current/components/console/events.html#consoleerrorevent

  -
    question: >
      Which `SymfonyStyle` method would you use to ask the user for sensitive information, such as a password, where the input should be hidden?
    answers:
      - { value: "`$io->askHidden()`", correct: true }
      - { value: "`$io->askSecret()`", correct: false }
      - { value: "`$io->promptHidden()`", correct: false }
      - { value: "`$io->password()`", correct: false }
    help: |
      The `askHidden()` method is specifically designed for sensitive input, preventing the typed characters from being displayed on the console.
      https://symfony.com/doc/current/console/style.html#asking-for-hidden-input

  -
    question: >
      When defining an option using `InputOption::VALUE_OPTIONAL`, what value is returned if the option is present but no value is provided (e.g., `--my-option` instead of `--my-option=value`)?
    answers:
      - { value: "`null`", correct: true }
      - { value: "`true`", correct: false }
      - { value: "An empty string (`''`)", correct: false }
      - { value: "An exception is thrown", correct: false }
    help: |
      For `InputOption::VALUE_OPTIONAL`, if the option is present without a value, `null` is returned. If the option is not present at all, `null` (or the default value if specified) is returned.
      https://symfony.com/doc/current/console/input.html#option-types

  -
    question: |
      You need to test a Symfony console command. Which class is commonly used for this purpose to simulate command execution and capture output?
    answers:
      - { value: "`Symfony\\Component\\Console\\Tester\\CommandTester`", correct: true }
      - { value: "`Symfony\\Component\\Console\\Command\\TestCommand`", correct: false }
      - { value: "`Symfony\\Component\\Console\\ApplicationTester`", correct: false }
      - { value: "`Symfony\\Component\\Console\\TestRunner`", correct: false }
    help: |
      `CommandTester` allows you to execute a command programmatically, pass arguments and options, and inspect its output and exit code, making it ideal for unit testing.
      https://symfony.com/doc/current/console.html#testing-commands

  -
    question: >
      What is the purpose of the `initialize()` method in a Symfony console command lifecycle?
    answers:
      - { value: "To initialize variables used in the rest of the command methods.", correct: true }
      - { value: "To define the command's arguments and options.", correct: false }
      - { value: "To execute the main command logic.", correct: false }
      - { value: "To interact with the user for missing input.", correct: false }
    help: |
      The `initialize()` method is executed before `interact()` and `execute()`, primarily for setting up variables or performing initial checks.
      https://symfony.com/doc/current/console.html#command-lifecycle

  -
    question: |
      Which `SymfonyStyle` method allows the user to select an answer from a predefined list of options?
    answers:
      - { value: "`$io->choice()`", correct: true }
      - { value: "`$io->select()`", correct: false }
      - { value: "`$io->option()`", correct: false }
      - { value: "`$io->pick()`", correct: false }
    help: |
      The `choice()` method presents a list of options and prompts the user to select one, optionally providing a default choice.
      https://symfony.com/doc/current/console/style.html#asking-for-choices

  -
    question: >
      How can you force coloring of the console output, even if the terminal does not support it, when running a Symfony command?
    answers:
      - { value: "Using the `--ansi` global option.", correct: true }
      - { value: "Using the `--force-color` global option.", correct: false }
      - { value: "Using the `--with-colors` global option.", correct: false }
      - { value: "Using the `--color-always` global option.", correct: false }
    help: |
      The `--ansi` option forces the console output to include ANSI escape codes for coloring, regardless of terminal detection.
      https://symfony.com/doc/current/console/input.html#global-options

  -
    question: |
      You want to clear the entire console screen from within a Symfony command. Which `Cursor` helper method would you use?
    answers:
      - { value: "`$cursor->clearScreen()`", correct: true }
      - { value: "`$cursor->clearOutput()`", correct: false }
      - { value: "`$cursor->resetScreen()`", correct: false }
      - { value: "`$cursor->eraseAll()`", correct: false }
    help: |
      The `Cursor` helper provides methods for manipulating the console cursor and clearing parts of the screen, including `clearScreen()` for the entire screen.
      https://symfony.com/doc/current/components/console/helpers/cursor.html#clearing-output

  -
    question: >
      What is the exit code returned by a Symfony console application if a command is disabled via `ConsoleCommandEvent::disableCommand()`?
    answers:
      - { value: "113", correct: true }
      - { value: "0", correct: false }
      - { value: "1", correct: false }
      - { value: "255", correct: false }
    help: |
      When `disableCommand()` is called on a `ConsoleCommandEvent`, the application will return an exit code of 113.
      https://symfony.com/doc/current/components/console/events.html#consolecommandevent

  -
    question: |
      Which of the following `InputOption` constants allows an option to be negated (e.g., `--yell` and `--no-yell`)?
    answers:
      - { value: "`InputOption::VALUE_NEGATABLE`", correct: true }
      - { value: "`InputOption::VALUE_BOOLEAN_NEGATABLE`", correct: false }
      - { value: "`InputOption::VALUE_INVERTIBLE`", correct: false }
      - { value: "`InputOption::VALUE_TOGGLE`", correct: false }
    help: |
      `InputOption::VALUE_NEGATABLE` allows an option to be specified with or without a `no-` prefix, providing a convenient way to toggle boolean options.
      https://symfony.com/doc/current/console/input.html#option-types

  -
    question: >
      To integrate the Symfony Console component into a new project, which Composer command should you use?
    answers:
      - { value: "`composer require symfony/console`", correct: true }
      - { value: "`composer install symfony/console`", correct: false }
      - { value: "`composer add symfony/console`", correct: false }
      - { value: "`composer get symfony/console`", correct: false }
    help: |
      The standard way to add a Symfony component to your project is using `composer require`.
      https://symfony.com/doc/current/components/console.html#installation

  -
    question: |
      When testing a console command with `CommandTester`, how do you pass arguments and options to the command?
    answers:
      - { value: "As an associative array in the `execute()` method, where keys are argument/option names.", correct: true }
      - { value: "As a string similar to the command line, passed to `execute()`.", correct: false }
      - { value: "Using `setArguments()` and `setOptions()` methods on the `CommandTester`.", correct: false }
      - { value: "Via the constructor of `CommandTester`.", correct: false }
    help: |
      The `execute()` method of `CommandTester` accepts an associative array where argument names are keys and option names are prefixed with two dashes.
      https://symfony.com/doc/current/console.html#testing-commands

  -
    question: >
      Which method of `SymfonyStyle` is used to display a title or a large heading in the console output?
    answers:
      - { value: "`$io->title()`", correct: true }
      - { value: "`$io->headline()`", correct: false }
      - { value: "`$io->header()`", correct: false }
      - { value: "`$io->sectionTitle()`", correct: false }
    help: |
      The `title()` method of `SymfonyStyle` formats and displays a prominent title.
      https://symfony.com/doc/current/console/style.html#title

  -
    question: >
      What is the purpose of the `ConsoleTerminateEvent` in Symfony?
    answers:
      - { value: "It is dispatched after the command has been executed.", correct: true }
      - { value: "It is dispatched when the console application is shutting down.", correct: false }
      - { value: "It is dispatched when a command finishes successfully.", correct: false }
      - { value: "It is dispatched before the application exits.", correct: false }
    help: |
      The `ConsoleTerminateEvent` is dispatched after the command's `execute()` method has finished, allowing for final cleanup or logging.
      https://symfony.com/doc/current/components/console/events.html#consoleteterminateevent

  -
    question: |
      You want to display a message in yellow text to indicate a warning. Which predefined `OutputInterface` tag should you use?
    answers:
      - { value: "`<comment>`", correct: true }
      - { value: "`<warning>`", correct: false }
      - { value: "`<alert>`", correct: false }
      - { value: "`<yellow>`", correct: false }
    help: |
      The `<comment>` tag is used for yellow text, typically for comments or warnings.
      https://symfony.com/doc/current/console/coloring.html#predefined-styles

  -
    question: >
      How can you register an inline command directly within your `application.php` file without creating a separate class file?
    answers:
      - { value: "Using `$application->register('command-name')->setCode(function (...) { ... });`", correct: true }
      - { value: "Using `$application->add('command-name', function (...) { ... });`", correct: false }
      - { value: "Using `$application->define('command-name', function (...) { ... });`", correct: false }
      - { value: "Using `$application->create('command-name')->handle(function (...) { ... });`", correct: false }
    help: |
      The `register()` method allows defining a command directly, and `setCode()` sets its execution logic as a callable.
      https://symfony.com/doc/current/components/console.html#registering-commands

  -
    question: |
      Which global option would you use to disable interactive prompts (e.g., questions asked by `SymfonyStyle`) when running a console command?
    answers:
      - { value: "`--no-interaction`", correct: true }
      - { value: "`--non-interactive`", correct: false }
      - { value: "`--no-prompt`", correct: false }
      - { value: "`--silent`", correct: false }
    help: |
      The `--no-interaction` option prevents any interactive questions or prompts from being displayed, making commands suitable for automated scripts.
      https://symfony.com/doc/current/console/input.html#global-options

  -
    question: >
      What is the purpose of the `Cursor` helper in Symfony Console?
    answers:
      - { value: "To manipulate the console cursor position and clear output.", correct: true }
      - { value: "To display a blinking cursor for user input.", correct: false }
      - { value: "To manage the history of console commands.", correct: false }
      - { value: "To provide a visual indicator of command progress.", correct: false }
    help: |
      The `Cursor` helper allows precise control over the console cursor, enabling movements and clearing specific parts of the screen.
      https://symfony.com/doc/current/components/console/helpers/cursor.html

  -
    question: |
      How can you retrieve the current column and row coordinates of the console cursor using the `Cursor` helper?
    answers:
      - { value: "`$cursor->getCurrentPosition()`", correct: true }
      - { value: "`$cursor->getPosition()`", correct: false }
      - { value: "`$cursor->getCoordinates()`", correct: false }
      - { value: "`$cursor->whereAmI()`", correct: false }
    help: |
      The `getCurrentPosition()` method returns an array `[column, row]` representing the cursor's current location.
      https://symfony.com/doc/current/components/console/helpers/cursor.html#getting-the-current-position

  -
    question: >
      Which `InputOption` constant specifies that an option *must* have a value, although the option itself is still optional?
    answers:
      - { value: "`InputOption::VALUE_REQUIRED`", correct: true }
      - { value: "`InputOption::VALUE_MANDATORY`", correct: false }
      - { value: "`InputOption::REQUIRED_VALUE`", correct: false }
      - { value: "`InputOption::HAS_VALUE`", correct: false }
    help: |
      `InputOption::VALUE_REQUIRED` means that if the option is provided, it must be accompanied by a value (e.g., `--iterations=5`).
      https://symfony.com/doc/current/console/input.html#option-types

  -
    question: >
      What is the primary benefit of using "lazy commands" in Symfony Console applications?
    answers:
      - { value: "Reduced memory consumption and faster application bootstrapping.", correct: true }
      - { value: "Automatic generation of command definitions.", correct: false }
      - { value: "Simplified command testing procedures.", correct: false }
      - { value: "Enhanced security by delaying command loading.", correct: false }
    help: |
      Lazy commands defer the actual instantiation of command objects until they are explicitly needed, improving performance by reducing initial memory usage.
      https://symfony.com/doc/current/console/lazy_commands.html

  -
    question: |
      You want to output a message to the error stream (`stderr`) instead of the standard output (`stdout`). How can you achieve this using `SymfonyStyle`?
    answers:
      - { value: "`$io->getErrorStyle()->warning('Error message');`", correct: true }
      - { value: "`$io->error('Error message');`", correct: true }
      - { value: "`$io->writeln('Error message', OutputInterface::VERBOSITY_QUIET);`", correct: false }
      - { value: "`$io->stderr->writeln('Error message');`", correct: false }
    help: |
      `SymfonyStyle::getErrorStyle()` returns a `SymfonyStyle` instance configured to write to `stderr`. The `error()` method also writes to the error output by default.
      https://symfony.com/doc/current/console/style.html#writing-to-standard-and-error-output

  -
    question: >
      Which `SymfonyStyle` method is used to ask a simple yes/no confirmation question to the user?
    answers:
      - { value: "`$io->confirm()`", correct: true }
      - { value: "`$io->askConfirmation()`", correct: false }
      - { value: "`$io->yesNo()`", correct: false }
      - { value: "`$io->confirmQuestion()`", correct: false }
    help: |
      The `confirm()` method presents a question that expects a boolean (yes/no) answer, optionally with a default value.
      https://symfony.com/doc/current/console/style.html#asking-for-confirmation

  -
    question: |
      What is the purpose of the `ConsoleSignalEvent` in Symfony Console?
    answers:
      - { value: "It is dispatched when a console command receives a system signal (e.g., SIGTERM).", correct: true }
      - { value: "It is dispatched when a command sends a signal to another process.", correct: false }
      - { value: "It is dispatched when a command is interrupted by the user.", correct: false }
      - { value: "It is dispatched when a command completes its execution.", correct: false }
    help: |
      The `ConsoleSignalEvent` allows listeners to react to system signals received by the console process, enabling graceful shutdown or custom signal handling.
      https://symfony.com/doc/current/components/console/events.html#consolesignalevent

  -
    question: >
      How can you make the console cursor visible after it has been hidden using the `Cursor` helper?
    answers:
      - { value: "`$cursor->show()`", correct: true }
      - { value: "`$cursor->display()`", correct: false }
      - { value: "`$cursor->unhide()`", correct: false }
      - { value: "`$cursor->setVisible(true)`", correct: false }
    help: |
      The `show()` method of the `Cursor` helper makes the console cursor visible.
      https://symfony.com/doc/current/components/console/helpers/cursor.html#hiding-and-showing-the-cursor

  -
    question: |
      Which global option would you use to enable the Symfony Profiler for a console command execution?
    answers:
      - { value: "`--profile`", correct: true }
      - { value: "`--debug-profiler`", correct: false }
      - { value: "`--enable-profiler`", correct: false }
      - { value: "`--profiler`", correct: false }
    help: |
      The `--profile` option activates the Symfony Profiler for the command's execution, allowing you to inspect performance metrics.
      https://symfony.com/doc/current/console.html#profiling-a-command

  -
    question: |
      You are defining a command that takes a `username` as a required argument and `email` as an optional argument. Which of the following `addArgument()` calls are correct?
    answers:
      - { value: "`$this->addArgument('username', InputArgument::REQUIRED, 'The user\'s name');`", correct: true }
      - { value: "`$this->addArgument('email', InputArgument::OPTIONAL, 'The user\'s email');`", correct: true }
      - { value: "`$this->addArgument('username', true, 'The user\'s name');`", correct: false }
      - { value: "`$this->addArgument('email', false, 'The user\'s email');`", false }
    help: |
      `InputArgument::REQUIRED` and `InputArgument::OPTIONAL` are the correct constants for defining argument behavior.
      https://symfony.com/doc/current/console/input.html#argument-types

  -
    question: |
      When using `SymfonyStyle::askHidden()`, what is the expected behavior if the user provides an empty string and a validator is configured to throw a `RuntimeException` for empty input?
    answers:
      - { value: "The validator will throw the `RuntimeException`, and the user will be prompted again until valid input is provided.", correct: true }
      - { value: "The command will immediately exit with an error.", correct: false }
      - { value: "The empty string will be accepted as valid input.", correct: false }
      - { value: "A default value will be used instead.", correct: false }
    help: |
      If a validator throws an exception, `askHidden()` (and other `SymfonyStyle` asking methods) will catch it and re-prompt the user, displaying the exception message.
      https://symfony.com/doc/current/console/style.html#validating-input

  -
    question: >
      Which of the following describes the behavior of the `-vvv` verbosity level in Symfony Console?
    answers:
      - { value: "Debug verbosity, showing the most detailed output.", correct: true }
      - { value: "Normal verbosity, showing standard output.", correct: false }
      - { value: "Quiet verbosity, suppressing most output.", correct: false }
      - { value: "Very verbose, but less than debug.", correct: false }
    help: |
      `-vvv` is the highest verbosity level, intended for debugging, and provides the most detailed output.
      https://symfony.com/doc/current/console/input.html#global-options

  -
    question: |
      You want to define a custom console output style with a red foreground, yellow background, and bold/blink options. Which class would you use to define this style?
    answers:
      - { value: "`Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle`", correct: true }
      - { value: "`Symfony\\Component\\Console\\Style\\CustomStyle`", correct: false }
      - { value: "`Symfony\\Component\\Console\\Output\\OutputStyleDefinition`", correct: false }
      - { value: "`Symfony\\Component\\Console\\Formatter\\StyleDefinition`", correct: false }
    help: |
      `OutputFormatterStyle` is used to create custom styles by specifying foreground, background, and options.
      https://symfony.com/doc/current/console/coloring.html#defining-new-styles

  -
    question: |
      How would you retrieve the value of an option named `iterations` within the `execute()` method of a Symfony console command?
    answers:
      - { value: "`$input->getOption('iterations')`", correct: true }
      - { value: "`$input->argument('iterations')`", correct: false }
      - { value: "`$this->option('iterations')`", correct: false }
      - { value: "`$input->getArgument('iterations')`", correct: false }
    help: |
      The `InputInterface::getOption()` method is used to retrieve the value of a defined option.
      https://symfony.com/doc/current/console/input.html#accessing-options

  -
    question: |
      Which of the following is true about `InputArgument::IS_ARRAY`?
    answers:
      - { value: "It must be used at the end of the argument list.", correct: true }
      - { value: "It can be combined with `InputArgument::REQUIRED`.", correct: true }
      - { value: "It implies that the argument is optional.", correct: false }
      - { value: "It allows multiple values separated by commas.", correct: false }
    help: |
      `InputArgument::IS_ARRAY` allows an argument to accept multiple values, which are typically space-separated on the command line. It must be the last argument because it consumes all remaining input. It can be combined with `REQUIRED` or `OPTIONAL`.
      https://symfony.com/doc/current/console/input.html#argument-types

  -
    question: >
      What is the purpose of `Symfony\\Component\\Console\\Terminal` class?
    answers:
      - { value: "To retrieve and modify terminal properties like height, width, and color mode.", correct: true }
      - { value: "To simulate terminal input for testing purposes.", correct: false }
      - { value: "To manage multiple terminal sessions.", correct: false }
      - { value: "To provide a graphical user interface for console commands.", correct: false }
    help: |
      The `Terminal` class provides information about the current terminal environment, such as its dimensions and color capabilities.
      https://symfony.com/doc/current/console.html#interacting-with-the-terminal

  -
    question: |
      You are writing a command that needs to ask the user a question and allow for multiline input. Which method should you call on the `Question` object?
    answers:
      - { value: "`$question->setMultiline(true)`", correct: true }
      - { value: "`$question->allowMultiline()`", correct: false }
      - { value: "`$question->enableMultiline()`", correct: false }
      - { value: "`$question->multiline(true)`", correct: false }
    help: |
      The `setMultiline(true)` method configures a `Question` to accept input until an end-of-transmission character (Ctrl-D or Ctrl-Z) is received.
      https://symfony.com/doc/current/components/console/helpers/questionhelper.html#allowing-multiline-answers

  -
    question: >
      Which of the following is the correct way to move the console cursor 5 lines up from its current position using the `Cursor` helper?
    answers:
      - { value: "`$cursor->moveUp(5);`", correct: true }
      - { value: "`$cursor->up(5);`", correct: false }
      - { value: "`$cursor->move(0, -5);`", correct: false }
      - { value: "`$cursor->setRelativePosition(0, -5);`", correct: false }
    help: |
      The `moveUp()` method accepts an integer argument for the number of lines to move.
      https://symfony.com/doc/current/components/console/helpers/cursor.html#moving-the-cursor

  -
    question: |
      What is the primary difference between `OutputInterface::write()` and `OutputInterface::writeln()`?
    answers:
      - { value: "`writeln()` adds a newline character at the end of the output, while `write()` does not.", correct: true }
      - { value: "`write()` is for standard output, `writeln()` is for error output.", correct: false }
      - { value: "`writeln()` flushes the output buffer immediately, `write()` does not.", correct: false }
      - { value: "`write()` is for single characters, `writeln()` is for full lines.", correct: false }
    help: |
      `writeln()` appends a newline character, making it suitable for writing complete lines of text. `write()` does not, allowing for partial lines or dynamic output.
      https://symfony.com/doc/current/console.html#outputting-text

  -
    question: >
      Which of the following is a valid way to retrieve the console application instance from a `ConsoleCommandEvent`?
    answers:
      - { value: "`$event->getApplication()`", correct: true }
      - { value: "`$event->getCommand()->getApplication()`", correct: true }
      - { value: "`$event->getApp()`", correct: false }
      - { value: "`$event->getContainer()->get('console.application')`", correct: false }
    help: |
      Both `ConsoleCommandEvent::getApplication()` and accessing the application via the command instance are valid ways to get the `Application` object.
      https://symfony.com/doc/current/components/console/events.html#consolecommandevent

  -
    question: >
      What is the effect of running a Symfony console command with the `--quiet` global option?
    answers:
      - { value: "It disables output and interaction, but errors are still displayed.", correct: true }
      - { value: "It disables all output and interaction, including errors.", correct: false }
      - { value: "It reduces verbosity to the minimum, but still shows essential messages.", correct: false }
      - { value: "It only displays error messages and nothing else.", correct: false }
    help: |
      The `--quiet` option suppresses most standard output but allows error messages to be displayed, unlike `--silent`.
      https://symfony.com/doc/current/console/input.html#global-options

  -
    question: |
      You want to define a command-line option that can accept multiple values (e.g., `--dir=/foo --dir=/bar`). Which `InputOption` constant should you use?
    answers:
      - { value: "`InputOption::VALUE_IS_ARRAY`", correct: true }
      - { value: "`InputOption::VALUE_MULTIPLE`", correct: false }
      - { value: "`InputOption::IS_ARRAY`", correct: false }
      - { value: "`InputOption::ARRAY_VALUE`", correct: false }
    help: |
      `InputOption::VALUE_IS_ARRAY` allows an option to be specified multiple times, with each instance providing a value that will be collected into an array.
      https://symfony.com/doc/current/console/input.html#option-types

  -
    question: |
      Which of the following is the correct way to set a default value for an optional argument in a Symfony console command?
    answers:
      - { value: "`$this->addArgument('name', InputArgument::OPTIONAL, 'Description', 'DefaultName');`", correct: true }
      - { value: "`$this->addArgument('name', InputArgument::OPTIONAL)->setDefault('DefaultName');`", correct: false }
      - { value: "`$this->addArgument('name', InputArgument::OPTIONAL, 'Description', ['default' => 'DefaultName']);`", correct: false }
      - { value: "`$this->addArgument('name', InputArgument::OPTIONAL, 'Description')->defaultValue('DefaultName');`", correct: false }
    help: |
      The fourth argument to `addArgument()` is used to specify the default value for an optional argument.
      https://symfony.com/doc/current/console/input.html#argument-types

  -
    question: >
      What is the purpose of `OutputInterface::VERBOSITY_QUIET` when writing output?
    answers:
      - { value: "To ensure the message is only displayed when the `--quiet` option is used.", correct: false }
      - { value: "To ensure the message is only displayed when the verbosity level is explicitly set to quiet.", correct: false }
      - { value: "To ensure the message is *not* displayed unless the verbosity level is higher than quiet.", correct: true }
      - { value: "To write to the error output stream.", correct: false }
    help: |
      When using `OutputInterface::write()` or `writeln()`, you can pass a verbosity level. `VERBOSITY_QUIET` means the message will *only* be shown if the current verbosity level is *less* than `QUIET` (i.e., it will be hidden if the command is run with `--quiet` or higher verbosity). This is counter-intuitive but how it works. More commonly, you'd use `VERBOSITY_NORMAL`, `VERBOSITY_VERBOSE`, `VERBOSITY_VERY_VERBOSE`, or `VERBOSITY_DEBUG`.
      https://symfony.com/doc/current/console/output.html#verbosity-levels

  -
    question: |
      Which of the following methods of `ConsoleErrorEvent` allows you to change the exception that was thrown?
    answers:
      - { value: "`$event->setError(\\\\Throwable $error)`", correct: true }
      - { value: "`$event->setException(\\\\Throwable $exception)`", correct: false }
      - { value: "`$event->replaceError(\\\\Throwable $newError)`", correct: false }
      - { value: "`$event->changeException(\\\\Throwable $exception)`", correct: false }
    help: |
      The `setError()` method can be used to replace the original exception with another one, which can be useful for normalizing error output.
      https://symfony.com/doc/current/components/console/events.html#consoleerrorevent

  -
    question: >
      What is the primary function of the `TreeHelper` in Symfony Console?
    answers:
      - { value: "To render hierarchical data structures as a tree in the console.", correct: true }
      - { value: "To manage a directory tree for file operations.", correct: false }
      - { value: "To display a visual representation of command dependencies.", correct: false }
      - { value: "To help navigate through console command history.", correct: false }
    help: |
      The `TreeHelper` simplifies the process of displaying tree-like structures, such as file system hierarchies or nested data, directly in the console.
      https://symfony.com/doc/current/components/console/helpers/tree.html

  -
    question: |
      You want to output a message with a custom style named `fire` that you previously defined. Which is the correct way to apply this style?
    answers:
      - { value: "`$output->writeln('<fire>This is a fire message</fire>');`", correct: true }
      - { value: "`$output->writeln('This is a fire message', 'fire');`", correct: false }
      - { value: "`$output->writeln('<style=fire>This is a fire message</style>');`", correct: false }
      - { value: "`$output->writeln('This is a fire message')->setStyle('fire');`", correct: false }
    help: |
      Custom styles are applied using tags with the style name, similar to predefined styles.
      https://symfony.com/doc/current/console/coloring.html#defining-new-styles

  -
    question: |
      Which of the following is a valid way to define a short alias for a command-line option (e.g., `-f` for `--foo`)?
    answers:
      - { value: "`new InputOption('foo', 'f')`", correct: true }
      - { value: "`new InputOption('foo', short: 'f')`", correct: false }
      - { value: "`new InputOption('foo', alias: 'f')`", correct: false }
      - { value: "`new InputOption('foo', ['f'])`", correct: false }
    help: |
      The second argument to `InputOption`'s constructor is used for the shortcut (alias).
      https://symfony.com/doc/current/components/console/input.html#defining-options

  -
    question: >
      What is the primary purpose of the `ConsoleOutputInterface`?
    answers:
      - { value: "To indicate that an output object supports separate error streams.", correct: true }
      - { value: "To provide additional methods for advanced console output formatting.", correct: false }
      - { value: "To ensure compatibility with different terminal emulators.", correct: false }
      - { value: "To enable interactive features in console commands.", correct: false }
    help: |
      `ConsoleOutputInterface` is implemented by `ConsoleOutput` and indicates that the output object can distinguish between standard output and error output, which is crucial for `SymfonyStyle::getErrorStyle()`.
      https://symfony.com/doc/current/console/style.html#writing-to-standard-and-error-output

  -
    question: >
      When using `CommandTester`, how do you retrieve the output generated by the executed command?
    answers:
      - { value: "`$commandTester->getDisplay()`", correct: true }
      - { value: "`$commandTester->getOutput()`", correct: false }
      - { value: "`$commandTester->getConsoleOutput()`", correct: false }
      - { value: "`$commandTester->getPrintedOutput()`", correct: false }
    help: |
      The `getDisplay()` method returns the entire output that was written to the console during the command's execution.
      https://symfony.com/doc/current/console.html#testing-commands

  -
    question: |
      Which of the following is a correct way to define a required argument using the `#[Argument]` attribute in an invokable command?
    answers:
      - { value: "`public function __invoke(#[Argument] string $username, OutputInterface $output): int`", correct: true }
      - { value: "`public function __invoke(#[Argument(required: true)] string $username, OutputInterface $output): int`", correct: false }
      - { value: "`public function __invoke(#[Argument(InputArgument::REQUIRED)] string $username, OutputInterface $output): int`", correct: false }
      - { value: "`public function __invoke(string $username, OutputInterface $output): int` (assuming it's the first argument)", correct: true }
    help: |
      By default, arguments in invokable commands are required if they are type-hinted and appear before any optional arguments. The `#[Argument]` attribute can be used to explicitly define arguments, and if no `mode` is specified, it defaults to `InputArgument::OPTIONAL`. However, if it's the first argument and type-hinted, it's implicitly required.
      https://symfony.com/doc/current/console/input.html#arguments-as-attributes

  -
    question: >
      What is the purpose of `Symfony\\Component\\Console\\CommandLoader\\FactoryCommandLoader`?
    answers:
      - { value: "To load commands using an array of factories (callables) that create command instances on demand.", correct: true }
      - { value: "To load commands from a YAML configuration file.", correct: false }
      - { value: "To automatically discover commands in specified directories.", correct: false }
      - { value: "To load commands from a PSR-11 container.", correct: false }
    help: |
      `FactoryCommandLoader` is a concrete implementation of `CommandLoaderInterface` that uses a map of command names to callables, deferring command instantiation.
      https://symfony.com/doc/current/console/lazy_commands.html#factorycommandloader

  -
    question: |
      You want to clear all output from the current cursor position to the end of the current line. Which `Cursor` helper method should you use?
    answers:
      - { value: "`$cursor->clearLineAfter()`", correct: true }
      - { value: "`$cursor->clearLine()`", correct: false }
      - { value: "`$cursor->eraseToEndOfLine()`", correct: false }
      - { value: "`$cursor->deleteUntilEndOfLine()`", correct: false }
    help: |
      `clearLineAfter()` specifically clears content from the cursor's current position to the end of the line.
      https://symfony.com/doc/current/components/console/helpers/cursor.html#clearing-output

  -
    question: >
      What is the main advantage of using `Symfony\\Component\\Console\\CommandLoader\\ContainerCommandLoader`?
    answers:
      - { value: "It integrates with a PSR-11 container to load commands as services, enabling dependency injection.", correct: true }
      - { value: "It allows loading commands from external Composer packages.", correct: false }
      - { value: "It provides a graphical interface for managing commands.", correct: false }
      - { value: "It automatically generates command definitions from annotations.", correct: false }
    help: |
      `ContainerCommandLoader` is designed to work with a PSR-11 compatible service container, allowing commands to be defined as services and benefit from the container's dependency injection capabilities.
      https://symfony.com/doc/current/console/lazy_commands.html#containercommandloader

  -
    question: |
      Which `SymfonyStyle` method would you use to display a block of text formatted as an error message, typically with a red background?
    answers:
      - { value: "`$io->error()`", correct: true }
      - { value: "`$io->danger()`", correct: false }
      - { value: "`$io->alert()`", correct: false }
      - { value: "`$io->critical()`", correct: false }
    help: |
      The `error()` method formats the given message as an error block, typically with a red background and white text.
      https://symfony.com/doc/current/console/style.html#error-messages

  -
    question: |
      When defining an option, what is the default behavior if no `InputOption` constant is specified for its mode?
    answers:
      - { value: "`InputOption::VALUE_NONE`", correct: true }
      - { value: "`InputOption::VALUE_OPTIONAL`", correct: false }
      - { value: "`InputOption::VALUE_REQUIRED`", correct: false }
      - { value: "An exception is thrown.", correct: false }
    help: |
      By default, if no mode is specified, an option is treated as a simple flag (`VALUE_NONE`), meaning it does not accept a value.
      https://symfony.com/doc/current/components/console/console_arguments.html#defining-options

  -
    question: |
      You want to move the console cursor to an absolute position of column 10, row 5. Which `Cursor` helper method would you use?
    answers:
      - { value: "`$cursor->moveToPosition(10, 5);`", correct: true }
      - { value: "`$cursor->setPosition(10, 5);`", correct: false }
      - { value: "`$cursor->moveAbsolute(10, 5);`", correct: false }
      - { value: "`$cursor->setCursor(10, 5);`", correct: false }
    help: |
      The `moveToPosition()` method allows you to set the cursor's absolute coordinates on the terminal.
      https://symfony.com/doc/current/components/console/helpers/cursor.html#moving-the-cursor

  -
    question: |
      What is the purpose of the `DebugFormatterHelper` in Symfony Console?
    answers:
      - { value: "To format output related to debugging external processes or commands.", correct: true }
      - { value: "To provide a debugger for console commands.", correct: false }
      - { value: "To format PHP debug messages for console output.", correct: false }
      - { value: "To help in profiling command execution.", correct: false }
    help: |
      The `DebugFormatterHelper` provides methods to format output for debugging purposes, such as indicating the start, output, and result of external commands.
      https://symfony.com/doc/current/components/console/helpers/debug_formatter.html

  -
    question: |
      Which of the following is the correct way to set the description for a Symfony console command using the `#[AsCommand]` attribute?
    answers:
      - { value: "`#[AsCommand(name: 'app:my-command', description: 'My command description')]`", correct: true }
      - { value: "`#[AsCommand(name: 'app:my-command', desc: 'My command description')]`", correct: false }
      - { value: "`#[AsCommand(name: 'app:my-command', help: 'My command description')]`", correct: false }
      - { value: "`#[AsCommand(name: 'app:my-command', summary: 'My command description')]`", correct: false }
    help: |
      The `description` parameter in the `#[AsCommand]` attribute is used to provide a short description of the command.
      https://symfony.com/doc/current/console.html#configuring-the-command

  -
    question: |
      How can you obtain an `EventDispatcher` instance to set on your `Application` object for handling console events?
    answers:
      - { value: "`new EventDispatcher()`", correct: true }
      - { value: "`$application->getEventDispatcher()`", correct: false }
      - { value: "`$container->get('event_dispatcher')`", correct: true }
      - { value: "`EventDispatcher::getInstance()`", correct: false }
    help: |
      You can create a new `EventDispatcher` instance or retrieve it from your service container if you are in a full Symfony application.
      https://symfony.com/doc/current/components/console/events.html#registering-event-listeners

  -
    question: |
      What is the purpose of `Symfony\\Component\\Console\\Tester\\CommandCompletionTester`?
    answers:
      - { value: "To unit test the completion logic of Symfony Console commands.", correct: true }
      - { value: "To test the execution of commands with pre-defined inputs.", correct: false }
      - { value: "To simulate tab-completion in a real terminal.", correct: false }
      - { value: "To generate command completion scripts.", correct: false }
    help: |
      `CommandCompletionTester` is specifically designed to test the suggestions provided by a command's completion logic.
      https://symfony.com/doc/current/console/input.html#unit-testing-command-completion

  -
    question: |
      Which of the following methods allows you to change the exit code of a command after its execution, typically within a `ConsoleTerminateEvent` listener?
    answers:
      - { value: "`$event->setExitCode(int $exitCode)`", correct: true }
      - { value: "`$event->setStatusCode(int $code)`", correct: false }
      - { value: "`$event->changeExitCode(int $code)`", correct: false }
      - { value: "`$event->overrideExitCode(int $code)`", correct: false }
    help: |
      The `setExitCode()` method of `ConsoleTerminateEvent` allows you to modify the command's final exit code.
      https://symfony.com/doc/current/components/console/events.html#consoleteterminateevent

  -
    question: |
      What is the effect of using `OutputInterface::VERBOSITY_DEBUG` when writing output in a Symfony command?
    answers:
      - { value: "The message will only be displayed when the command is run with `-vvv`.", correct: true }
      - { value: "The message will always be displayed, regardless of verbosity.", correct: false }
      - { value: "The message will be displayed only if a debugger is attached.", correct: false }
      - { value: "The message will be logged to a debug file instead of the console.", correct: false }
    help: |
      Messages marked with `VERBOSITY_DEBUG` are only shown when the verbosity level is set to the highest (`-vvv`).
      https://symfony.com/doc/current/console/output.html#verbosity-levels

  -
    question: |
      You need to create independent output sections in your console command that can be overwritten or cleared dynamically. Which method of `OutputInterface` allows you to create such sections?
    answers:
      - { value: "`$output->section()`", correct: true }
      - { value: "`$output->createSection()`", correct: false }
      - { value: "`$output->newSection()`", correct: false }
      - { value: "`$output->getSection()`", correct: false }
    help: |
      The `section()` method returns a `ConsoleOutputInterface` instance that represents an independent output section, allowing dynamic content updates.
      https://symfony.com/doc/current/console.html#output-sections

  -
    question: |
      Which method of a `ConsoleSignalEvent` allows you to prevent the command from exiting after a signal is received?
    answers:
      - { value: "`$event->abortExit()`", correct: true }
      - { value: "`$event->stopPropagation()`", correct: false }
      - { value: "`$event->preventExit()`", correct: false }
      - { value: "`$event->keepRunning()`", correct: false }
    help: |
      The `abortExit()` method can be called in a `ConsoleSignalEvent` listener to prevent the default behavior of exiting the command upon receiving a signal.
      https://symfony.com/doc/current/components/console/events.html#consolesignalevent

  -
    question: |
      What is the primary purpose of the `configure()` method in a Symfony console command?
    answers:
      - { value: "To define the command's name, description, arguments, and options.", correct: true }
      - { value: "To execute the main logic of the command.", correct: false }
      - { value: "To initialize variables before command execution.", correct: false }
      - { value: "To interact with the user for missing input.", correct: false }
    help: |
      The `configure()` method is where you set up the command's metadata and define its expected input (arguments and options).
      https://symfony.com/doc/current/console.html#defining-commands

  -
    question: |
      Which of the following global options would you use to display the version number of the console application?
    answers:
      - { value: "`--version`", correct: true }
      - { value: "`-V`", correct: true }
      - { value: "`--app-version`", correct: false }
      - { value: "`--show-version`", correct: false }
    help: |
      Both `--version` and its shorthand `-V` are used to display the application's version.
      https://symfony.com/doc/current/components/console/usage.html#displaying-the-version

  -
    question: |
      When defining a command-line option, what is the default value if `InputOption::VALUE_OPTIONAL` is used but no default is explicitly provided?
    answers:
      - { value: "`null`", correct: true }
      - { value: "An empty string (`''`)", correct: false }
      - { value: "`false`", correct: false }
      - { value: "An empty array (`[]`)", correct: false }
    help: |
      If an optional option is not provided, or provided without a value, and no default is specified, `null` is returned.
      https://symfony.com/doc/current/console/input.html#option-types

  -
    question: |
      You want to clear all output from the cursor's current position to the end of the screen. Which `Cursor` helper method should you use?
    answers:
      - { value: "`$cursor->clearOutput()`", correct: true }
      - { value: "`$cursor->clearScreenAfter()`", correct: false }
      - { value: "`$cursor->eraseToEndOfScreen()`", correct: false }
      - { value: "`$cursor->deleteUntilEndOfScreen()`", correct: false }
    help: |
      `clearOutput()` clears the content from the current cursor position to the bottom-right of the screen.
      https://symfony.com/doc/current/components/console/helpers/cursor.html#clearing-output

  -
    question: |
      What is the purpose of the `Symfony\\Component\\Console\\Command\\LazyCommand` class?
    answers:
      - { value: "It wraps a command factory to delay the actual command object creation until needed.", correct: true }
      - { value: "It is a base class for commands that are loaded asynchronously.", correct: false }
      - { value: "It provides a simplified interface for defining commands without `configure()`.", correct: false }
      - { value: "It automatically generates command definitions from service tags.", correct: false }
    help: |
      `LazyCommand` is a proxy that defers the instantiation of the real command object until its methods are actually called, optimizing startup performance.
      https://symfony.com/doc/current/console/lazy_commands.html#lazycommand

  -
    question: |
      Which of the following is the correct way to apply an inline style with a hexadecimal background color and bold option?
    answers:
      - { value: "`$output->writeln('<bg=#c0392b;options=bold>Text</>');`", correct: true }
      - { value: "`$output->writeln('<bg=hex:c0392b;bold>Text</>');`", correct: false }
      - { value: "`$output->writeln('<style bg=#c0392b;options=bold>Text</style>');`", correct: false }
      - { value: "`$output->writeln('<bg=#c0392b><options=bold>Text</options></bg>');`", correct: false }
    help: |
      Inline styles allow specifying foreground, background (using named or hex colors), and options within a single tag, separated by semicolons.
      https://symfony.com/doc/current/console/coloring.html#inline-styles

  -
    question: |
      What is the purpose of the `ConsoleCommandEvent::commandShouldRun()` method?
    answers:
      - { value: "To check if the command is currently enabled and allowed to run.", correct: true }
      - { value: "To determine if the command has been executed successfully.", correct: false }
      - { value: "To verify if all required arguments and options are present.", correct: false }
      - { value: "To check if the command is registered with the application.", correct: false }
    help: |
      `commandShouldRun()` returns a boolean indicating whether the command is currently enabled. It can be affected by `disableCommand()` and `enableCommand()`.
      https://symfony.com/doc/current/components/console/events.html#consolecommandevent

  -
    question: |
      You want to prompt the user for a single line of input using `SymfonyStyle`. Which method would you use?
    answers:
      - { value: "`$io->ask('What is your name?');`", correct: true }
      - { value: "`$io->prompt('What is your name?');`", correct: false }
      - { value: "`$io->read('What is your name?');`", correct: false }
      - { value: "`$io->getInput('What is your name?');`", correct: false }
    help: |
      The `ask()` method is the standard way to prompt the user for a single line of text input.
      https://symfony.com/doc/current/console/style.html#asking-for-input

  -
    question: |
      What is the purpose of the `SignalMap` class in Symfony Console?
    answers:
      - { value: "To map signal integer values to their human-readable names.", correct: true }
      - { value: "To register signal handlers for console commands.", correct: false }
      - { value: "To manage a collection of active signals.", correct: false }
      - { value: "To define custom signals for console applications.", correct: false }
    help: |
      `SignalMap` is a utility class that provides a way to get the name of a signal from its integer value, useful for logging or debugging signal events.
      https://symfony.com/doc/current/components/console/events.html#consolesignalevent

  -
    question: |
      Which of the following is the correct way to register a command class with a Symfony Console `Application` instance?
    answers:
      - { value: "`$application->add(new MyCommand());`", correct: true }
      - { value: "`$application->registerCommand(MyCommand::class);`", correct: false }
      - { value: "`$application->addCommand(new MyCommand());`", correct: false }
      - { value: "`$application->load(MyCommand::class);`", correct: false }
    help: |
      The `add()` method of the `Application` class is used to register an instance of a `Command` class.
      https://symfony.com/doc/current/components/console.html#registering-commands

  -
    question: |
      What is the default value for an optional argument if no default is explicitly provided in `addArgument()`?
    answers:
      - { value: "`null`", correct: true }
      - { value: "An empty string (`''`)", correct: false }
      - { value: "`false`", correct: false }
      - { value: "An empty array (`[]`)", correct: false }
    help: |
      If an optional argument is not provided on the command line and no default value is specified in `addArgument()`, its value will be `null`.
      https://symfony.com/doc/current/console/input.html#argument-types

  -
    question: |
      You are running a command and want to see more verbose output, but not full debug information. Which global option would you use?
    answers:
      - { value: "`-vv`", correct: true }
      - { value: "`-v`", correct: false }
      - { value: "`-vvv`", correct: false }
      - { value: "`--verbose=2`", correct: false }
    help: |
      `-vv` corresponds to "very verbose" output, which is more detailed than normal but less than debug.
      https://symfony.com/doc/current/console/input.html#global-options

  -
    question: |
      Which of the following is a valid way to define a required option for a Symfony console command?
    answers:
      - { value: "`new InputOption('name', null, InputOption::VALUE_REQUIRED, 'The name.')`", correct: true }
      - { value: "`new InputOption('name', null, InputOption::REQUIRED, 'The name.')`", correct: false }
      - { value: "`new InputOption('name', null, true, 'The name.')`", correct: false }
      - { value: "`new InputOption('name', null, InputOption::IS_REQUIRED, 'The name.')`", correct: false }
    help: |
      `InputOption::VALUE_REQUIRED` indicates that if the option is present, it must be accompanied by a value. Note that the option itself is still optional unless you add custom validation.
      https://symfony.com/doc/current/console/input.html#option-types

  -
    question: |
      When defining an argument, what is the default behavior if no `InputArgument` constant is specified for its mode?
    answers:
      - { value: "`InputArgument::OPTIONAL`", correct: true }
      - { value: "`InputArgument::REQUIRED`", correct: false }
      - { value: "`InputArgument::IS_ARRAY`", correct: false }
      - { value: "An exception is thrown.", correct: false }
    help: |
      By default, if no mode is specified, an argument is considered optional.
      https://symfony.com/doc/current/components/console/console_arguments.html#defining-arguments

  -
    question: |
      You want to clear only the current line of output from the console. Which `Cursor` helper method should you use?
    answers:
      - { value: "`$cursor->clearLine()`", correct: true }
      - { value: "`$cursor->eraseLine()`", correct: false }
      - { value: "`$cursor->deleteLine()`", correct: false }
      - { value: "`$cursor->resetLine()`", correct: false }
    help: |
      `clearLine()` removes all content from the current line where the cursor is located.
      https://symfony.com/doc/current/components/console/helpers/cursor.html#clearing-output

  -
    question: |
      Which of the following describes the behavior of the `-v` verbosity level in Symfony Console?
    answers:
      - { value: "Normal verbosity, showing standard output.", correct: true }
      - { value: "Quiet verbosity, suppressing most output.", correct: false }
      - { value: "Very verbose, but less than debug.", correct: false }
      - { value: "Minimal verbosity, only showing errors.", correct: false }
    help: |
      `-v` explicitly sets the verbosity to normal, which is also the default if no verbosity option is provided.
      https://symfony.com/doc/current/console/input.html#global-options

  -
    question: |
      How can you disable Kernel debug when running a Symfony console command, typically in a production environment?
    answers:
      - { value: "`--no-debug`", correct: true }
      - { value: "`--env=prod`", correct: true }
      - { value: "`--debug=false`", correct: false }
      - { value: "`--disable-debug`", correct: false }
    help: |
      The `--no-debug` option explicitly disables Kernel debugging. Running with `--env=prod` also typically disables debug by default, depending on your `APP_DEBUG` environment variable configuration.
      https://symfony.com/doc/current/console/input.html#frameworkbundle-specific-options

  -
    question: |
      What is the purpose of `Symfony\\Component\\Console\\Question\\Question::setValidator()`?
    answers:
      - { value: "To set a callback function that validates the user's input for a question.", correct: true }
      - { value: "To define the type of validation to apply (e.g., email, number).", correct: false }
      - { value: "To mark the question as required.", correct: false }
      - { value: "To set a default validation message.", correct: false }
    help: |
      The `setValidator()` method allows you to provide a callable that will validate the user's answer. The callable should throw an exception on failure and return the validated value on success.
      https://symfony.com/doc/current/components/console/helpers/questionhelper.html#validating-answers

  -
    question: |
      You want to set a maximum height for an output section, causing new lines to replace older ones when the limit is reached. Which method of the section object would you use?
    answers:
      - { value: "`$section->setMaxHeight(int $height)`", correct: true }
      - { value: "`$section->setHeight(int $height)`", correct: false }
      - { value: "`$section->limitLines(int $count)`", correct: false }
      - { value: "`$section->setScrollHeight(int $height)`", correct: false }
    help: |
      The `setMaxHeight()` method configures a section to behave like a fixed-size buffer, where new lines push out the oldest ones once the height limit is reached.
      https://symfony.com/doc/current/console.html#output-sections

  -
    question: |
      Which of the following is true about the `__invoke()` method in an invokable Symfony console command?
    answers:
      - { value: "It replaces the `execute()` method and must return an integer exit status.", correct: true }
      - { value: "It is called before `initialize()` and `interact()`.", correct: false }
      - { value: "It automatically handles argument and option parsing.", correct: true }
      - { value: "It cannot be used with the `#[AsCommand]` attribute.", correct: false }
    help: |
      The `__invoke()` method is a modern alternative to `execute()` for single-method commands. Symfony automatically maps arguments and options to its parameters based on type-hints and attributes.
      https://symfony.com/doc/current/console.html#invokable-commands

  -
    question: |
      What is the purpose of the `Symfony\\Component\\Console\\Question\\ConfirmationQuestion::setTrueAnswerRegex()` method?
    answers:
      - { value: "To define a regular expression that determines if a user's answer means 'yes'.", correct: true }
      - { value: "To validate the format of a 'yes' answer.", correct: false }
      - { value: "To set the default 'yes' answer.", correct: false }
      - { value: "To provide a custom error message for invalid 'yes' answers.", correct: false }
    help: |
      This method allows customizing the regex used to match a "yes" response, which defaults to `/^y/i`.
      https://symfony.com/doc/current/components/console/helpers/questionhelper.html#confirmationquestion

  -
    question: |
      Which of the following is the correct way to move the console cursor 3 columns to the right from its current position using the `Cursor` helper?
    answers:
      - { value: "`$cursor->moveRight(3);`", correct: true }
      - { value: "`$cursor->right(3);`", correct: false }
      - { value: "`$cursor->move(3, 0);`", correct: false }
      - { value: "`$cursor->setRelativePosition(3, 0);`", correct: false }
    help: |
      The `moveRight()` method accepts an integer argument for the number of columns to move.
      https://symfony.com/doc/current/components/console/helpers/cursor.html#moving-the-cursor

  -
    question: |
      What is the purpose of the `Symfony\\Component\\Console\\Question\\Question::setMaxAttempts()` method?
    answers:
      - { value: "To limit the number of times a user can be prompted for input for a question.", correct: true }
      - { value: "To set the maximum length of the user's answer.", correct: false }
      - { value: "To define the maximum number of correct answers allowed.", correct: false }
      - { value: "To specify the maximum number of validation errors before exiting.", correct: false }
    help: |
      `setMaxAttempts()` controls how many times the `QuestionHelper` will re-ask a question if the user provides invalid input, before giving up. `null` means infinite attempts.
      https://symfony.com/doc/current/components/console/helpers/questionhelper.html#question

  -
    question: |
      You want to display a block of text formatted as an informational message, typically with a blue background. Which `SymfonyStyle` method would you use?
    answers:
      - { value: "`$io->info()`", correct: true }
      - { value: "`$io->message()`", correct: false }
      - { value: "`$io->note()`", correct: false }
      - { value: "`$io->text()`", correct: false }
    help: |
      The `info()` method formats the given message as an informational block, typically with a blue background.
      https://symfony.com/doc/current/console/style.html#info-messages

  -
    question: |
      Which of the following global options would you use to set the Kernel configuration environment (e.g., `dev`, `prod`) for a Symfony console command?
    answers:
      - { value: "`--env=prod`", correct: true }
      - { value: "`--environment=prod`", correct: false }
      - { value: "`--kernel-env=prod`", correct: false }
      - { value: "`--set-env=prod`", correct: false }
    help: |
      The `--env` option is provided by FrameworkBundle to specify the Symfony environment for the command execution.
      https://symfony.com/doc/current/console/input.html#frameworkbundle-specific-options

  -
    question: |
      What is the purpose of `OutputInterface::VERBOSITY_NORMAL` when writing output?
    answers:
      - { value: "The message will be displayed by default, unless `--quiet` or `--silent` is used.", correct: true }
      - { value: "The message will always be displayed.", correct: false }
      - { value: "The message will only be displayed when `-v` is explicitly used.", correct: false }
      - { value: "The message will be displayed only if no other verbosity option is set.", correct: false }
    help: |
      `VERBOSITY_NORMAL` is the default verbosity level, meaning messages at this level are shown unless output is explicitly suppressed.
      https://symfony.com/doc/current/console/output.html#verbosity-levels

  -
    question: |
      You want to test the completion suggestions for a command when the user has already typed "Fa". Which `CommandCompletionTester` method would you use?
    answers:
      - { value: "`$tester->complete(['Fa']);`", correct: true }
      - { value: "`$tester->getSuggestions('Fa');`", correct: false }
      - { value: "`$tester->testCompletion('Fa');`", correct: false }
      - { value: "`$tester->simulateInput('Fa');`", correct: false }
    help: |
      The `complete()` method takes an array representing the command line input, with the last element being the partial input for which to get suggestions.
      https://symfony.com/doc/current/console/input.html#unit-testing-command-completion

  -
    question: |
      Which of the following is the correct way to define an argument that is optional and can accept multiple values?
    answers:
      - { value: "`$this->addArgument('names', InputArgument::OPTIONAL | InputArgument::IS_ARRAY, 'List of names.')`", correct: true }
      - { value: "`$this->addArgument('names', InputArgument::IS_ARRAY, 'List of names.', null)`", correct: true }
      - { value: "`$this->addArgument('names', InputArgument::OPTIONAL_ARRAY, 'List of names.')`", correct: false }
      - { value: "`$this->addArgument('names', InputArgument::ARRAY_OPTIONAL, 'List of names.')`", correct: false }
    help: |
      You can combine `InputArgument::OPTIONAL` and `InputArgument::IS_ARRAY` using the bitwise OR operator (`|`). Alternatively, if `InputArgument::IS_ARRAY` is used without `InputArgument::REQUIRED`, it implies optionality.
      https://symfony.com/doc/current/console/input.html#argument-types

  -
    question: |
      What is the purpose of `Symfony\\Component\\Console\\Output\\OutputInterface::setDecorated()`?
    answers:
      - { value: "To enable or disable output decoration (e.g., colors, bold) regardless of terminal capabilities.", correct: true }
      - { value: "To set a custom output decorator for the console.", correct: false }
      - { value: "To apply a specific output style to the entire command output.", correct: false }
      - { value: "To mark the output as decorated for logging purposes.", correct: false }
    help: |
      `setDecorated(true)` forces ANSI escape codes for styling, while `setDecorated(false)` disables them. This can override the automatic detection of terminal capabilities.
      https://symfony.com/doc/current/console/coloring.html#forcing-colors

  -
    question: |
      When using `SymfonyStyle::choice()`, how can you allow the user to select multiple options from the list?
    answers:
      - { value: "By calling `$question->setMultiselect(true)` on the underlying `ChoiceQuestion` object.", correct: true }
      - { value: "By passing a `true` value as a third argument to `$io->choice()`.", correct: false }
      - { value: "By using `$io->choices()` instead of `$io->choice()`.", correct: false }
      - { value: "This functionality is not supported by `SymfonyStyle::choice()`.", correct: false }
    help: |
      The `ChoiceQuestion` class, used internally by `SymfonyStyle::choice()`, has a `setMultiselect()` method to enable multiple selections. You would typically access this if you were using `QuestionHelper` directly.
      https://symfony.com/doc/current/components/console/helpers/questionhelper.html#choicequestion

  -
    question: |
      What is the purpose of `Symfony\\Component\\Console\\Event\\ConsoleCommandEvent::disableCommand()`?
    answers:
      - { value: "To prevent the command from executing within a listener, causing the application to exit with a specific code.", correct: true }
      - { value: "To temporarily disable a command from being listed in `php bin/console list`.", correct: false }
      - { value: "To mark a command as deprecated.", correct: false }
      - { value: "To stop the event propagation for the current command.", correct: false }
    help: |
      Calling `disableCommand()` within a `ConsoleCommandEvent` listener will stop the command from running and cause the console application to exit with status code 113.
      https://symfony.com/doc/current/components/console/events.html#consolecommandevent

  -
    question: |
      Which of the following is the correct way to add a required argument to an inline command defined with `Application::register()`?
    answers:
      - { value: "`->addArgument('username', InputArgument::REQUIRED)`", correct: true }
      - { value: "`->addArgument('username', true)`", correct: false }
      - { value: "`->argument('username', InputArgument::REQUIRED)`", correct: false }
      - { value: "`->setArgument('username', InputArgument::REQUIRED)`", correct: false }
    help: |
      The `addArgument()` method is used to define arguments for inline commands, similar to how it's used in `configure()`.
      https://symfony.com/doc/current/components/console.html#registering-commands

  -
    question: |
      What is the effect of running a Symfony console command with the `--no-ansi` global option?
    answers:
      - { value: "It disables coloring of the output, even if the terminal supports it.", correct: true }
      - { value: "It forces the output to be monochrome.", correct: false }
      - { value: "It prevents the command from using any ANSI escape codes.", correct: true }
      - { value: "It disables all non-textual output.", correct: false }
    help: |
      The `--no-ansi` option explicitly disables ANSI escape codes, preventing any color or text decoration in the output.
      https://symfony.com/doc/current/console/input.html#global-options

  -
    question: |
      Which of the following methods of `ConsoleTerminateEvent` allows you to retrieve the current exit code of the command?
    answers:
      - { value: "`$event->getExitCode()`", correct: true }
      - { value: "`$event->getStatusCode()`", correct: false }
      - { value: "`$event->getCommandExitCode()`", correct: false }
      - { value: "`$event->getResultCode()`", correct: false }
    help: |
      The `getExitCode()` method returns the integer exit code that the command is about to return.
      https://symfony.com/doc/current/components/console/events.html#consoleteterminateevent

  -
    question: |
      You want to display a progress bar in your console command. Which helper is commonly used for this purpose?
    answers:
      - { value: "`ProgressBar` (from `Symfony\\Component\\Console\\Helper`)", correct: true }
      - { value: "`ProgressHelper`", correct: false }
      - { value: "`SymfonyStyle` (via `progressStart`, `progressAdvance`, `progressFinish`)", correct: true }
      - { value: "`ConsoleProgressBar`", correct: false }
    help: |
      The `ProgressBar` helper class provides methods for creating and managing progress bars. `SymfonyStyle` also wraps this functionality with convenient methods like `progressStart()`.
      https://symfony.com/doc/current/console/helpers/progressbar.html
      https://symfony.com/doc/current/console/style.html#progress-bar

  -
    question: |
      What is the purpose of `Symfony\\Component\\Console\\Question\\Question::setDefault()`?
    answers:
      - { value: "To set the default value returned if the user provides no input for the question.", correct: true }
      - { value: "To set the default answer for a choice question.", correct: false }
      - { value: "To set the default prompt text for the question.", correct: false }
      - { value: "To set a default validator for the question.", correct: false }
    help: |
      The `setDefault()` method on a `Question` object provides a fallback value if the user simply presses Enter without typing anything.
      https://symfony.com/doc/current/components/console/helpers/questionhelper.html#question

  -
    question: |
      Which of the following is the correct way to apply a bold and underscore style to text using inline styling?
    answers:
      - { value: "`$output->writeln('<options=bold,underscore>Text</>');`", correct: true }
      - { value: "`$output->writeln('<bold;underscore>Text</>');`", correct: false }
      - { value: "`$output->writeln('<style=bold,underscore>Text</style>');`", correct: false }
      - { value: "`$output->writeln('<options=bold><options=underscore>Text</options></options>');`", correct: false }
    help: |
      Multiple options can be applied within the `<options=...>` tag by separating them with commas.
      https://symfony.com/doc/current/console/coloring.html#inline-styles

  -
    question: |
      What is the purpose of `Symfony\\Component\\Console\\Application::setCommandLoader()`?
    answers:
      - { value: "To set a command loader for deferred command instantiation (lazy loading).", correct: true }
      - { value: "To register all commands from a specific directory.", correct: false }
      - { value: "To define the default command to run when no command is specified.", correct: false }
      - { value: "To load commands from an external configuration source.", correct: false }
    help: |
      `setCommandLoader()` allows you to provide an implementation of `CommandLoaderInterface`, which is responsible for loading commands only when they are needed, improving performance.
      https://symfony.com/doc/current/console/lazy_commands.html#command-loaders

  -
    question: |
      When using `SymfonyStyle::choice()`, what is the purpose of the `setErrorMessage()` method on the underlying `ChoiceQuestion`?
    answers:
      - { value: "To define the message displayed when the user enters an invalid choice.", correct: true }
      - { value: "To set the default error message for all questions.", correct: false }
      - { value: "To provide a custom message when no choices are available.", correct: false }
      - { value: "To log an error if the user makes too many invalid attempts.", correct: false }
    help: |
      `setErrorMessage()` allows you to customize the error message shown to the user when their input does not match any of the predefined choices. Use `%s` as a placeholder for the invalid input.
      https://symfony.com/doc/current/components/console/helpers/questionhelper.html#choicequestion

  -
    question: |
      Which of the following is the correct way to define an argument that is required and can accept multiple values?
    answers:
      - { value: "`$this->addArgument('files', InputArgument::REQUIRED | InputArgument::IS_ARRAY, 'Files to process.')`", correct: true }
      - { value: "`$this->addArgument('files', InputArgument::REQUIRED_ARRAY, 'Files to process.')`", correct: false }
      - { value: "`$this->addArgument('files', InputArgument::IS_ARRAY, 'Files to process.', null)` (This would make it optional)", correct: false }
      - { value: "`$this->addArgument('files', InputArgument::REQUIRED)->setIsArray(true);`", correct: false }
    help: |
      Combining `InputArgument::REQUIRED` and `InputArgument::IS_ARRAY` ensures the argument must be provided and can accept multiple values.
      https://symfony.com/doc/current/console/input.html#argument-types

  -
    question: |
      What is the purpose of `Symfony\\Component\\Console\\Output\\OutputInterface::setVerbosity()`?
    answers:
      - { value: "To programmatically set the verbosity level of the output.", correct: true }
      - { value: "To define the maximum verbosity level allowed for the command.", correct: false }
      - { value: "To get the current verbosity level of the output.", correct: false }
      - { value: "To enable or disable verbosity for specific messages.", correct: false }
    help: |
      `setVerbosity()` allows you to change the output verbosity level during command execution, overriding the command-line options.
      https://symfony.com/doc/current/console/output.html#verbosity-levels

  -
    question: |
      Which of the following is the correct way to define an option that is optional and can accept a value (e.g., `--limit` or `--limit=10`)?
    answers:
      - { value: "`new InputOption('limit', null, InputOption::VALUE_OPTIONAL, 'The limit.')`", correct: true }
      - { value: "`new InputOption('limit', null, InputOption::OPTIONAL_VALUE, 'The limit.')`", correct: false }
      - { value: "`new InputOption('limit', null, false, 'The limit.')`", correct: false }
      - { value: "`new InputOption('limit', null, InputOption::VALUE_OR_NONE, 'The limit.')`", correct: false }
    help: |
      `InputOption::VALUE_OPTIONAL` is the correct constant for options that may or may not have an associated value.
      https://symfony.com/doc/current/console/input.html#option-typescategory: Console

questions:
  -
    question: >
      Which of the following commands would you use to list all available Symfony console commands?
    answers:
      - { value: "`php bin/console list`", correct: true }
      - { value: "`php bin/console show`", correct: false }
      - { value: "`php bin/console commands`", correct: false }
      - { value: "`php bin/console --list`", correct: false }
    help: |
      The `list` command is a built-in Symfony console command used to display all registered commands.
      https://symfony.com/doc/current/console.html#listing-all-available-commands

  -
    question: >
      What is the purpose of the `#[AsCommand]` attribute when defining a custom Symfony console command?
    answers:
      - { value: "To automatically register the command with the console application.", correct: true }
      - { value: "To define the command's arguments and options.", correct: false }
      - { value: "To specify the command's dependencies for autowiring.", correct: false }
      - { value: "To mark the command as a service.", correct: false }
    help: |
      The `#[AsCommand]` attribute is used to configure the command's name, description, and other options directly in the class, and it automatically registers the command.
      https://symfony.com/doc/current/console.html#configuring-the-command

  -
    question: |
      Consider the following command definition:

      ```php
      #[AsCommand(name: 'app:my-command', description: 'My command description')]
      class MyCommand extends Command
      {
          protected function configure(): void
          {
              $this->addArgument('name', InputArgument::REQUIRED, 'The name of the user.');
          }

          protected function execute(InputInterface $input, OutputInterface $output): int
          {
              $name = $input->getArgument('name');
              $output->writeln('Hello, ' . $name . '!');
              return Command::SUCCESS;
          }
      }
      ```
      How would you execute this command from the terminal, providing the required argument?
    answers:
      - { value: "`php bin/console app:my-command JohnDoe`", correct: true }
      - { value: "`php bin/console app:my-command --name=JohnDoe`", correct: false }
      - { value: "`php bin/console app:my-command -name JohnDoe`", correct: false }
      - { value: "`php bin/console app:my-command --argument name=JohnDoe`", correct: false }
    help: |
      Arguments are passed directly after the command name in the order they are defined.
      https://symfony.com/doc/current/console/input.html#accessing-arguments

  -
    question: >
      Which of the following `InputArgument` constants indicates that an argument can accept multiple values?
    answers:
      - { value: "`InputArgument::IS_ARRAY`", correct: true }
      - { value: "`InputArgument::OPTIONAL_ARRAY`", correct: false }
      - { value: "`InputArgument::MULTIPLE`", correct: false }
      - { value: "`InputArgument::COLLECTION`", correct: false }
    help: |
      `InputArgument::IS_ARRAY` allows an argument to accept multiple values, which will be returned as an array. It must be the last argument defined.
      https://symfony.com/doc/current/console/input.html#argument-types

  -
    question: >
      What is the primary interface used to write output to the console in a Symfony command?
    answers:
      - { value: "`OutputInterface`", correct: true }
      - { value: "`ConsoleOutput`", correct: false }
      - { value: "`WriterInterface`", correct: false }
      - { value: "`LoggerInterface`", correct: false }
    help: |
      The `OutputInterface` provides methods like `write()` and `writeln()` for sending output to the console.
      https://symfony.com/doc/current/console.html#outputting-text

  -
    question: >
      Which helper class simplifies common console interactions like asking questions, displaying progress bars, and formatting output?
    answers:
      - { value: "`SymfonyStyle`", correct: true }
      - { value: "`QuestionHelper`", correct: false }
      - { value: "`FormatterHelper`", correct: false }
      - { value: "`IOHelper`", correct: false }
    help: |
      `SymfonyStyle` is a wrapper around `InputInterface` and `OutputInterface` that provides a set of convenient methods for common console UI patterns.
      https://symfony.com/doc/current/console/style.html

  -
    question: >
      Which console event is dispatched just before any command is executed?
    answers:
      - { value: "`ConsoleCommandEvent`", correct: true }
      - { value: "`ConsoleExecuteEvent`", correct: false }
      - { value: "`ConsoleStartEvent`", correct: false }
      - { value: "`ConsolePreCommandEvent`", correct: false }
    help: |
      The `ConsoleCommandEvent` is dispatched before the command's `initialize()` or `interact()` methods are called.
      https://symfony.com/doc/current/components/console/events.html#consolecommandevent

  -
    question: >
      Which global option can you use to disable all output and interaction, including errors, for a Symfony console command?
    answers:
      - { value: "`--silent`", correct: true }
      - { value: "`--quiet`", correct: false }
      - { value: "`--no-output`", correct: false }
      - { value: "`--no-interaction`", correct: false }
    help: |
      The `--silent` option, introduced in Symfony 7.2, completely disables all output and interaction, including error messages.
      https://symfony.com/doc/current/console/input.html#global-options

  -
    question: >
      What is the default verbosity level when running a Symfony console command without specifying any verbosity options?
    answers:
      - { value: "Normal verbosity (equivalent to `-v`)", correct: true }
      - { value: "Quiet verbosity (equivalent to `--quiet`)", correct: false }
      - { value: "Debug verbosity (equivalent to `-vvv`)", correct: false }
      - { value: "No verbosity (equivalent to `--silent`)", correct: false }
    help: |
      By default, Symfony console commands run with a normal verbosity level, which can be explicitly set with `-v`.
      https://symfony.com/doc/current/console/input.html#global-options

  -
    question: |
      You want to hide a specific command from the default `list` output. How can you achieve this using the `#[AsCommand]` attribute?
    answers:
      - { value: "`#[AsCommand(name: 'app:hidden-command', hidden: true)]`", correct: true }
      - { value: "`#[AsCommand(name: 'app:hidden-command', public: false)]`", correct: false }
      - { value: "`#[AsCommand(name: 'app:hidden-command', visible: false)]`", correct: false }
      - { value: "`#[AsCommand(name: 'app:hidden-command', display: false)]`", correct: false }
    help: |
      Setting the `hidden` property to `true` in the `#[AsCommand]` attribute makes the command invisible in the default command listings.
      https://symfony.com/doc/current/console/hide_commands.html

  -
    question: >
      Which of the following methods is *required* for a Symfony console command class that extends `Symfony\\Component\\Console\\Command\\Command`?
    answers:
      - { value: "`execute()` or `__invoke()`", correct: true }
      - { value: "`configure()`", correct: false }
      - { value: "`initialize()`", correct: false }
      - { value: "`interact()`", correct: false }
    help: |
      The `execute()` method (or `__invoke()` for invokable commands) contains the main logic of the command and must return an integer exit status. `configure()`, `initialize()`, and `interact()` are optional.
      https://symfony.com/doc/current/console.html#command-lifecycle

  -
    question: |
      You are defining a command-line option that should not accept any value (e.g., a `--yell` flag). Which `InputOption` constant should you use?
    answers:
      - { value: "`InputOption::VALUE_NONE`", correct: true }
      - { value: "`InputOption::VALUE_FLAG`", correct: false }
      - { value: "`InputOption::VALUE_BOOLEAN`", correct: false }
      - { value: "`InputOption::NO_VALUE`", correct: false }
    help: |
      `InputOption::VALUE_NONE` indicates that the option is a simple flag and does not expect a value. It returns `false` if not present, `true` if present.
      https://symfony.com/doc/current/console/input.html#option-types

  -
    question: |
      How can you access the value of an argument named `username` within the `execute()` method of a Symfony console command?
    answers:
      - { value: "`$input->getArgument('username')`", correct: true }
      - { value: "`$input->option('username')`", correct: false }
      - { value: "`$this->argument('username')`", correct: false }
      - { value: "`$input->getOption('username')`", correct: false }
    help: |
      The `InputInterface::getArgument()` method is used to retrieve the value of a defined argument.
      https://symfony.com/doc/current/console/input.html#accessing-arguments

  -
    question: >
      Which of the following is the correct way to set a custom name and version for a Symfony Console `Application` instance?
    answers:
      - { value: "`$application = new Application('My App', '1.0.0');`", correct: true }
      - { value: "`$application->setName('My App')->setVersion('1.0.0');`", correct: true }
      - { value: "`$application->configure('My App', '1.0.0');`", correct: false }
      - { value: "`$application->setInfo('My App', '1.0.0');`", correct: false }
    help: |
      The `Application` constructor accepts the name and version as optional arguments, or they can be set using `setName()` and `setVersion()` methods.
      https://symfony.com/doc/current/components/console.html#creating-a-console-application

  -
    question: >
      What is the purpose of the `interact()` method in a Symfony console command lifecycle?
    answers:
      - { value: "To interactively ask the user for missing required options/arguments.", correct: true }
      - { value: "To initialize command variables before execution.", correct: false }
      - { value: "To execute the main logic of the command.", correct: false }
      - { value: "To handle user input after the command has run.", correct: false }
    help: |
      The `interact()` method is called after `initialize()` and before `execute()`. It's the last chance to prompt the user for missing required input. It is not called when `--no-interaction` is used.
      https://symfony.com/doc/current/console.html#command-lifecycle

  -
    question: |
      You want to output a message in green text to the console. Which of the following is the correct way to do this using `OutputInterface`?
    answers:
      - { value: "`$output->writeln('<info>This is green text</info>');`", correct: true }
      - { value: "`$output->writeln('<color=green>This is green text</color>');`", correct: false }
      - { value: "`$output->writeln('<fg=green>This is green text</fg>');`", correct: true }
      - { value: "`$output->writeln('This is green text', 'info');`", correct: false }
    help: |
      Symfony's console component uses specific tags for coloring output. `<info>` is a predefined style for green text, and `<fg=green>` allows inline foreground color specification.
      https://symfony.com/doc/current/console/coloring.html#predefined-styles
      https://symfony.com/doc/current/console/coloring.html#inline-styles

  -
    question: >
      Which of the following global options would you use to display the help message for a specific command?
    answers:
      - { value: "`php bin/console help app:my-command`", correct: true }
      - { value: "`php bin/console app:my-command --help`", correct: true }
      - { value: "`php bin/console app:my-command -h`", correct: true }
      - { value: "`php bin/console app:my-command --info`", correct: false }
    help: |
      The `help` command or the `--help` (`-h`) global option can be used to display detailed help for a specific command.
      https://symfony.com/doc/current/components/console/usage.html#displaying-the-help-message

  -
    question: |
      You need to inject a service `App\\Service\\MyService` into your console command. Which is the recommended way to do this in Symfony 7?
    answers:
      - { value: "Via constructor injection with type-hinting.", correct: true }
      - { value: "Using the `#[Required]` attribute on a property.", correct: false }
      - { value: "By calling `$this->getContainer()->get('App\\Service\\MyService')` in `execute()`.", correct: false }
      - { value: "By defining the service as an argument in `configure()`.", correct: false }
    help: |
      Constructor injection with type-hinting is the recommended way to inject services into Symfony commands, leveraging autowiring.
      https://symfony.com/doc/current/console.html#dependency-injection

  -
    question: >
      What is the purpose of the `ConsoleErrorEvent` in Symfony?
    answers:
      - { value: "It is dispatched whenever an exception is thrown by a command.", correct: true }
      - { value: "It is dispatched when a command fails to execute.", correct: false }
      - { value: "It is dispatched when an invalid argument is provided to a command.", correct: false }
      - { value: "It is dispatched when the console application encounters an internal error.", correct: false }
    help: |
      The `ConsoleErrorEvent` allows you to react to exceptions thrown during command execution, providing an opportunity to log or handle them.
      https://symfony.com/doc/current/components/console/events.html#consoleerrorevent

  -
    question: >
      Which `SymfonyStyle` method would you use to ask the user for sensitive information, such as a password, where the input should be hidden?
    answers:
      - { value: "`$io->askHidden()`", correct: true }
      - { value: "`$io->askSecret()`", correct: false }
      - { value: "`$io->promptHidden()`", correct: false }
      - { value: "`$io->password()`", correct: false }
    help: |
      The `askHidden()` method is specifically designed for sensitive input, preventing the typed characters from being displayed on the console.
      https://symfony.com/doc/current/console/style.html#asking-for-hidden-input

  -
    question: |
      When defining an option using `InputOption::VALUE_OPTIONAL`, what value is returned if the option is present but no value is provided (e.g., `--my-option` instead of `--my-option=value`)?
    answers:
      - { value: "`null`", correct: true }
      - { value: "`true`", correct: false }
      - { value: "An empty string (`''`)", correct: false }
      - { value: "An exception is thrown", correct: false }
    help: |
      For `InputOption::VALUE_OPTIONAL`, if the option is present without a value, `null` is returned. If the option is not present at all, `null` (or the default value if specified) is returned.
      https://symfony.com/doc/current/console/input.html#option-types

  -
    question: |
      You need to test a Symfony console command. Which class is commonly used for this purpose to simulate command execution and capture output?
    answers:
      - { value: "`Symfony\\Component\\Console\\Tester\\CommandTester`", correct: true }
      - { value: "`Symfony\\Component\\Console\\Command\\TestCommand`", correct: false }
      - { value: "`Symfony\\Component\\Console\\ApplicationTester`", correct: false }
      - { value: "`Symfony\\Component\\Console\\TestRunner`", correct: false }
    help: |
      `CommandTester` allows you to execute a command programmatically, pass arguments and options, and inspect its output and exit code, making it ideal for unit testing.
      https://symfony.com/doc/current/console.html#testing-commands

  -
    question: >
      What is the purpose of the `initialize()` method in a Symfony console command lifecycle?
    answers:
      - { value: "To initialize variables used in the rest of the command methods.", correct: true }
      - { value: "To define the command's arguments and options.", correct: false }
      - { value: "To execute the main command logic.", correct: false }
      - { value: "To interact with the user for missing input.", correct: false }
    help: |
      The `initialize()` method is executed before `interact()` and `execute()`, primarily for setting up variables or performing initial checks.
      https://symfony.com/doc/current/console.html#command-lifecycle

  -
    question: |
      Which `SymfonyStyle` method allows the user to select an answer from a predefined list of options?
    answers:
      - { value: "`$io->choice()`", correct: true }
      - { value: "`$io->select()`", correct: false }
      - { value: "`$io->option()`", correct: false }
      - { value: "`$io->pick()`", correct: false }
    help: |
      The `choice()` method presents a list of options and prompts the user to select one, optionally providing a default choice.
      https://symfony.com/doc/current/console/style.html#asking-for-choices

  -
    question: >
      How can you force coloring of the console output, even if the terminal does not support it, when running a Symfony command?
    answers:
      - { value: "Using the `--ansi` global option.", correct: true }
      - { value: "Using the `--force-color` global option.", correct: false }
      - { value: "Using the `--with-colors` global option.", correct: false }
      - { value: "Using the `--color-always` global option.", correct: false }
    help: |
      The `--ansi` option forces the console output to include ANSI escape codes for coloring, regardless of terminal detection.
      https://symfony.com/doc/current/console/input.html#global-options

  -
    question: |
      You want to clear the entire console screen from within a Symfony command. Which `Cursor` helper method would you use?
    answers:
      - { value: "`$cursor->clearScreen()`", correct: true }
      - { value: "`$cursor->clearOutput()`", correct: false }
      - { value: "`$cursor->resetScreen()`", correct: false }
      - { value: "`$cursor->eraseAll()`", correct: false }
    help: |
      The `Cursor` helper provides methods for manipulating the console cursor and clearing parts of the screen, including `clearScreen()` for the entire screen.
      https://symfony.com/doc/current/components/console/helpers/cursor.html#clearing-output

  -
    question: >
      What is the exit code returned by a Symfony console application if a command is disabled via `ConsoleCommandEvent::disableCommand()`?
    answers:
      - { value: "113", correct: true }
      - { value: "0", correct: false }
      - { value: "1", correct: false }
      - { value: "255", correct: false }
    help: |
      When `disableCommand()` is called on a `ConsoleCommandEvent`, the application will return an exit code of 113.
      https://symfony.com/doc/current/components/console/events.html#consolecommandevent

  -
    question: |
      Which of the following `InputOption` constants allows an option to be negated (e.g., `--yell` and `--no-yell`)?
    answers:
      - { value: "`InputOption::VALUE_NEGATABLE`", correct: true }
      - { value: "`InputOption::VALUE_BOOLEAN_NEGATABLE`", correct: false }
      - { value: "`InputOption::VALUE_INVERTIBLE`", correct: false }
      - { value: "`InputOption::VALUE_TOGGLE`", correct: false }
    help: |
      `InputOption::VALUE_NEGATABLE` allows an option to be specified with or without a `no-` prefix, providing a convenient way to toggle boolean options.
      https://symfony.com/doc/current/console/input.html#option-types

  -
    question: >
      To integrate the Symfony Console component into a new project, which Composer command should you use?
    answers:
      - { value: "`composer require symfony/console`", correct: true }
      - { value: "`composer install symfony/console`", correct: false }
      - { value: "`composer add symfony/console`", correct: false }
      - { value: "`composer get symfony/console`", correct: false }
    help: |
      The standard way to add a Symfony component to your project is using `composer require`.
      https://symfony.com/doc/current/components/console.html#installation

  -
    question: |
      When testing a console command with `CommandTester`, how do you pass arguments and options to the command?
    answers:
      - { value: "As an associative array in the `execute()` method, where keys are argument/option names.", correct: true }
      - { value: "As a string similar to the command line, passed to `execute()`.", correct: false }
      - { value: "Using `setArguments()` and `setOptions()` methods on the `CommandTester`.", correct: false }
      - { value: "Via the constructor of `CommandTester`.", correct: false }
    help: |
      The `execute()` method of `CommandTester` accepts an associative array where argument names are keys and option names are prefixed with two dashes.
      https://symfony.com/doc/current/console.html#testing-commands

  -
    question: >
      Which method of `SymfonyStyle` is used to display a title or a large heading in the console output?
    answers:
      - { value: "`$io->title()`", correct: true }
      - { value: "`$io->headline()`", correct: false }
      - { value: "`$io->header()`", correct: false }
      - { value: "`$io->sectionTitle()`", correct: false }
    help: |
      The `title()` method of `SymfonyStyle` formats and displays a prominent title.
      https://symfony.com/doc/current/console/style.html#title

  -
    question: >
      What is the purpose of the `ConsoleTerminateEvent` in Symfony?
    answers:
      - { value: "It is dispatched after the command has been executed.", correct: true }
      - { value: "It is dispatched when the console application is shutting down.", correct: false }
      - { value: "It is dispatched when a command finishes successfully.", correct: false }
      - { value: "It is dispatched before the application exits.", correct: false }
    help: |
      The `ConsoleTerminateEvent` is dispatched after the command's `execute()` method has finished, allowing for final cleanup or logging.
      https://symfony.com/doc/current/components/console/events.html#consoleteterminateevent

  -
    question: |
      You want to display a message in yellow text to indicate a warning. Which predefined `OutputInterface` tag should you use?
    answers:
      - { value: "`<comment>`", correct: true }
      - { value: "`<warning>`", correct: false }
      - { value: "`<alert>`", correct: false }
      - { value: "`<yellow>`", correct: false }
    help: |
      The `<comment>` tag is used for yellow text, typically for comments or warnings.
      https://symfony.com/doc/current/console/coloring.html#predefined-styles

  -
    question: |
      How can you register an inline command directly within your `application.php` file without creating a separate class file?
    answers:
      - { value: "Using `$application->register('command-name')->setCode(function (...) { ... });`", correct: true }
      - { value: "Using `$application->add('command-name', function (...) { ... });`", correct: false }
      - { value: "Using `$application->define('command-name', function (...) { ... });`", correct: false }
      - { value: "Using `$application->create('command-name')->handle(function (...) { ... });`", correct: false }
    help: |
      The `register()` method allows defining a command directly, and `setCode()` sets its execution logic as a callable.
      https://symfony.com/doc/current/components/console.html#registering-commands

  -
    question: |
      Which global option would you use to disable interactive prompts (e.g., questions asked by `SymfonyStyle`) when running a console command?
    answers:
      - { value: "`--no-interaction`", correct: true }
      - { value: "`--non-interactive`", correct: false }
      - { value: "`--no-prompt`", correct: false }
      - { value: "`--silent`", correct: false }
    help: |
      The `--no-interaction` option prevents any interactive questions or prompts from being displayed, making commands suitable for automated scripts.
      https://symfony.com/doc/current/console/input.html#global-options

  -
    question: >
      What is the purpose of the `Cursor` helper in Symfony Console?
    answers:
      - { value: "To manipulate the console cursor position and clear output.", correct: true }
      - { value: "To display a blinking cursor for user input.", correct: false }
      - { value: "To manage the history of console commands.", correct: false }
      - { value: "To provide a visual indicator of command progress.", correct: false }
    help: |
      The `Cursor` helper allows precise control over the console cursor, enabling movements and clearing specific parts of the screen.
      https://symfony.com/doc/current/components/console/helpers/cursor.html

  -
    question: |
      How can you retrieve the current column and row coordinates of the console cursor using the `Cursor` helper?
    answers:
      - { value: "`$cursor->getCurrentPosition()`", correct: true }
      - { value: "`$cursor->getPosition()`", correct: false }
      - { value: "`$cursor->getCoordinates()`", correct: false }
      - { value: "`$cursor->whereAmI()`", correct: false }
    help: |
      The `getCurrentPosition()` method returns an array `[column, row]` representing the cursor's current location.
      https://symfony.com/doc/current/components/console/helpers/cursor.html#getting-the-current-position

  -
    question: >
      Which `InputOption` constant specifies that an option *must* have a value, although the option itself is still optional?
    answers:
      - { value: "`InputOption::VALUE_REQUIRED`", correct: true }
      - { value: "`InputOption::VALUE_MANDATORY`", correct: false }
      - { value: "`InputOption::REQUIRED_VALUE`", correct: false }
      - { value: "`InputOption::HAS_VALUE`", correct: false }
    help: |
      `InputOption::VALUE_REQUIRED` means that if the option is provided, it must be accompanied by a value (e.g., `--iterations=5`).
      https://symfony.com/doc/current/console/input.html#option-types

  -
    question: >
      What is the primary benefit of using "lazy commands" in Symfony Console applications?
    answers:
      - { value: "Reduced memory consumption and faster application bootstrapping.", correct: true }
      - { value: "Automatic generation of command definitions.", correct: false }
      - { value: "Simplified command testing procedures.", correct: false }
      - { value: "Enhanced security by delaying command loading.", correct: false }
    help: |
      Lazy commands defer the actual instantiation of command objects until they are explicitly needed, improving performance by reducing initial memory usage.
      https://symfony.com/doc/current/console/lazy_commands.html

  -
    question: |
      You want to output a message to the error stream (`stderr`) instead of the standard output (`stdout`). How can you achieve this using `SymfonyStyle`?
    answers:
      - { value: "`$io->getErrorStyle()->warning('Error message');`", correct: true }
      - { value: "`$io->error('Error message');`", correct: true }
      - { value: "`$io->writeln('Error message', OutputInterface::VERBOSITY_QUIET);`", correct: false }
      - { value: "`$io->stderr->writeln('Error message');`", correct: false }
    help: |
      `SymfonyStyle::getErrorStyle()` returns a `SymfonyStyle` instance configured to write to `stderr`. The `error()` method also writes to the error output by default.
      https://symfony.com/doc/current/console/style.html#writing-to-standard-and-error-output

  -
    question: >
      Which `SymfonyStyle` method is used to ask a simple yes/no confirmation question to the user?
    answers:
      - { value: "`$io->confirm()`", correct: true }
      - { value: "`$io->askConfirmation()`", correct: false }
      - { value: "`$io->yesNo()`", correct: false }
      - { value: "`$io->confirmQuestion()`", correct: false }
    help: |
      The `confirm()` method presents a question that expects a boolean (yes/no) answer, optionally providing a default value.
      https://symfony.com/doc/current/console/style.html#asking-for-confirmation

  -
    question: |
      What is the purpose of the `ConsoleSignalEvent` in Symfony Console?
    answers:
      - { value: "It is dispatched when a console command receives a system signal (e.g., SIGTERM).", correct: true }
      - { value: "It is dispatched when a command sends a signal to another process.", correct: false }
      - { value: "It is dispatched when a command is interrupted by the user.", correct: false }
      - { value: "It is dispatched when a command completes its execution.", correct: false }
    help: |
      The `ConsoleSignalEvent` allows listeners to react to system signals received by the console process, enabling graceful shutdown or custom signal handling.
      https://symfony.com/doc/current/components/console/events.html#consolesignalevent

  -
    question: |
      How can you make the console cursor visible after it has been hidden using the `Cursor` helper?
    answers:
      - { value: "`$cursor->show()`", correct: true }
      - { value: "`$cursor->display()`", correct: false }
      - { value: "`$cursor->unhide()`", correct: false }
      - { value: "`$cursor->setVisible(true)`", correct: false }
    help: |
      The `show()` method of the `Cursor` helper makes the console cursor visible.
      https://symfony.com/doc/current/components/console/helpers/cursor.html#hiding-and-showing-the-cursor

  -
    question: >
      Which global option would you use to enable the Symfony Profiler for a console command execution?
    answers:
      - { value: "`--profile`", correct: true }
      - { value: "`--debug-profiler`", correct: false }
      - { value: "`--enable-profiler`", correct: false }
      - { value: "`--profiler`", correct: false }
    help: |
      The `--profile` option activates the Symfony Profiler for the command's execution, allowing you to inspect performance metrics.
      https://symfony.com/doc/current/console.html#profiling-a-command

  -
    question: |
      You are defining a command that takes a `username` as a required argument and `email` as an optional argument. Which of the following `addArgument()` calls are correct?
    answers:
      - { value: "`$this->addArgument('username', InputArgument::REQUIRED, 'The user\'s name');`", correct: true }
      - { value: "`$this->addArgument('email', InputArgument::OPTIONAL, 'The user\'s email');`", correct: true }
      - { value: "`$this->addArgument('username', true, 'The user\'s name');`", correct: false }
      - { value: "`$this->addArgument('email', false, 'The user\'s email');`", false }
    help: |
      `InputArgument::REQUIRED` and `InputArgument::OPTIONAL` are the correct constants for defining argument behavior.
      https://symfony.com/doc/current/console/input.html#argument-types

  -
    question: |
      When using `SymfonyStyle::askHidden()`, what is the expected behavior if the user provides an empty string and a validator is configured to throw a `RuntimeException` for empty input?
    answers:
      - { value: "The validator will throw the `RuntimeException`, and the user will be prompted again until valid input is provided.", correct: true }
      - { value: "The command will immediately exit with an error.", correct: false }
      - { value: "The empty string will be accepted as valid input.", correct: false }
      - { value: "A default value will be used instead.", correct: false }
    help: |
      If a validator throws an exception, `askHidden()` (and other `SymfonyStyle` asking methods) will catch it and re-prompt the user, displaying the exception message.
      https://symfony.com/doc/current/console/style.html#validating-input

  -
    question: >
      Which of the following describes the behavior of the `-vvv` verbosity level in Symfony Console?
    answers:
      - { value: "Debug verbosity, showing the most detailed output.", correct: true }
      - { value: "Normal verbosity, showing standard output.", correct: false }
      - { value: "Quiet verbosity, suppressing most output.", correct: false }
      - { value: "Very verbose, but less than debug.", correct: false }
    help: |
      `-vvv` is the highest verbosity level, intended for debugging, and provides the most detailed output.
      https://symfony.com/doc/current/console/input.html#global-options

  -
    question: |
      You want to define a custom console output style with a red foreground, yellow background, and bold/blink options. Which class would you use to define this style?
    answers:
      - { value: "`Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle`", correct: true }
      - { value: "`Symfony\\Component\\Console\\Style\\CustomStyle`", correct: false }
      - { value: "`Symfony\\Component\\Console\\Output\\OutputStyleDefinition`", correct: false }
      - { value: "`Symfony\\Component\\Console\\Formatter\\StyleDefinition`", correct: false }
    help: |
      `OutputFormatterStyle` is used to create custom styles by specifying foreground, background, and options.
      https://symfony.com/doc/current/console/coloring.html#defining-new-styles

  -
    question: |
      How would you retrieve the value of an option named `iterations` within the `execute()` method of a Symfony console command?
    answers:
      - { value: "`$input->getOption('iterations')`", correct: true }
      - { value: "`$input->argument('iterations')`", correct: false }
      - { value: "`$this->option('iterations')`", correct: false }
      - { value: "`$input->getArgument('iterations')`", correct: false }
    help: |
      The `InputInterface::getOption()` method is used to retrieve the value of a defined option.
      https://symfony.com/doc/current/console/input.html#accessing-options

  -
    question: |
      Which of the following is true about `InputArgument::IS_ARRAY`?
    answers:
      - { value: "It must be used at the end of the argument list.", correct: true }
      - { value: "It can be combined with `InputArgument::REQUIRED`.", correct: true }
      - { value: "It implies that the argument is optional.", correct: false }
      - { value: "It allows multiple values separated by commas.", correct: false }
    help: |
      `InputArgument::IS_ARRAY` allows an argument to accept multiple values, which are typically space-separated on the command line. It must be the last argument because it consumes all remaining input. It can be combined with `REQUIRED` or `OPTIONAL`.
      https://symfony.com/doc/current/console/input.html#argument-types

  -
    question: >
      What is the purpose of `Symfony\\Component\\Console\\Terminal` class?
    answers:
      - { value: "To retrieve and modify terminal properties like height, width, and color mode.", correct: true }
      - { value: "To simulate terminal input for testing purposes.", correct: false }
      - { value: "To manage multiple terminal sessions.", correct: false }
      - { value: "To provide a graphical user interface for console commands.", correct: false }
    help: |
      The `Terminal` class provides information about the current terminal environment, such as its dimensions and color capabilities.
      https://symfony.com/doc/current/console.html#interacting-with-the-terminal

  -
    question: |
      You are writing a command that needs to ask the user a question and allow for multiline input. Which method should you call on the `Question` object?
    answers:
      - { value: "`$question->setMultiline(true)`", correct: true }
      - { value: "`$question->allowMultiline()`", correct: false }
      - { value: "`$question->enableMultiline()`", correct: false }
      - { value: "`$question->multiline(true)`", correct: false }
    help: |
      The `setMultiline(true)` method configures a `Question` to accept input until an end-of-transmission character (Ctrl-D or Ctrl-Z) is received.
      https://symfony.com/doc/current/components/console/helpers/questionhelper.html#allowing-multiline-answers

  -
    question: |
      Which of the following is the correct way to move the console cursor 5 lines up from its current position using the `Cursor` helper?
    answers:
      - { value: "`$cursor->moveUp(5);`", correct: true }
      - { value: "`$cursor->up(5);`", correct: false }
      - { value: "`$cursor->move(0, -5);`", correct: false }
      - { value: "`$cursor->setRelativePosition(0, -5);`", correct: false }
    help: |
      The `moveUp()` method accepts an integer argument for the number of lines to move.
      https://symfony.com/doc/current/components/console/helpers/cursor.html#moving-the-cursor

  -
    question: |
      What is the primary difference between `OutputInterface::write()` and `OutputInterface::writeln()`?
    answers:
      - { value: "`writeln()` adds a newline character at the end of the output, while `write()` does not.", correct: true }
      - { value: "`write()` is for standard output, `writeln()` is for error output.", correct: false }
      - { value: "`writeln()` flushes the output buffer immediately, `write()` does not.", correct: false }
      - { value: "`write()` is for single characters, `writeln()` is for full lines.", correct: false }
    help: |
      `writeln()` appends a newline character, making it suitable for writing complete lines of text. `write()` does not, allowing for partial lines or dynamic output.
      https://symfony.com/doc/current/console.html#outputting-text

  -
    question: >
      Which of the following is a valid way to retrieve the console application instance from a `ConsoleCommandEvent`?
    answers:
      - { value: "`$event->getApplication()`", correct: true }
      - { value: "`$event->getCommand()->getApplication()`", correct: true }
      - { value: "`$event->getApp()`", correct: false }
      - { value: "`$event->getContainer()->get('console.application')`", correct: false }
    help: |
      Both `ConsoleCommandEvent::getApplication()` and accessing the application via the command instance are valid ways to get the `Application` object.
      https://symfony.com/doc/current/components/console/events.html#consolecommandevent

  -
    question: >
      What is the effect of running a Symfony console command with the `--quiet` global option?
    answers:
      - { value: "It disables output and interaction, but errors are still displayed.", correct: true }
      - { value: "It disables all output and interaction, including errors.", correct: false }
      - { value: "It reduces verbosity to the minimum, but still shows essential messages.", correct: false }
      - { value: "It only displays error messages and nothing else.", correct: false }
    help: |
      The `--quiet` option suppresses most standard output but allows error messages to be displayed, unlike `--silent`.
      https://symfony.com/doc/current/console/input.html#global-options

  -
    question: |
      You want to define a command-line option that can accept multiple values (e.g., `--dir=/foo --dir=/bar`). Which `InputOption` constant should you use?
    answers:
      - { value: "`InputOption::VALUE_IS_ARRAY`", correct: true }
      - { value: "`InputOption::VALUE_MULTIPLE`", correct: false }
      - { value: "`InputOption::IS_ARRAY`", correct: false }
      - { value: "`InputOption::ARRAY_VALUE`", correct: false }
    help: |
      `InputOption::VALUE_IS_ARRAY` allows an option to be specified multiple times, with each instance providing a value that will be collected into an array.
      https://symfony.com/doc/current/console/input.html#option-types

  -
    question: |
      Which of the following is the correct way to set a default value for an optional argument in a Symfony console command?
    answers:
      - { value: "`$this->addArgument('name', InputArgument::OPTIONAL, 'Description', 'DefaultName');`", correct: true }
      - { value: "`$this->addArgument('name', InputArgument::OPTIONAL)->setDefault('DefaultName');`", correct: false }
      - { value: "`$this->addArgument('name', InputArgument::OPTIONAL, 'Description', ['default' => 'DefaultName']);`", correct: false }
      - { value: "`$this->addArgument('name', InputArgument::OPTIONAL, 'Description')->defaultValue('DefaultName');`", correct: false }
    help: |
      The fourth argument to `addArgument()` is used to specify the default value for an optional argument.
      https://symfony.com/doc/current/console/input.html#argument-types

  -
    question: >
      What is the purpose of `OutputInterface::VERBOSITY_QUIET` when writing output?
    answers:
      - { value: "To ensure the message is only displayed when the `--quiet` option is used.", correct: false }
      - { value: "To ensure the message is only displayed when the verbosity level is explicitly set to quiet.", correct: false }
      - { value: "To ensure the message is *not* displayed unless the verbosity level is higher than quiet.", correct: true }
      - { value: "To write to the error output stream.", correct: false }
    help: |
      When using `OutputInterface::write()` or `writeln()`, you can pass a verbosity level. `VERBOSITY_QUIET` means the message will *only* be shown if the current verbosity level is *less* than `QUIET` (i.e., it will be hidden if the command is run with `--quiet` or higher verbosity). This is counter-intuitive but how it works. More commonly, you'd use `VERBOSITY_NORMAL`, `VERBOSITY_VERBOSE`, `VERBOSITY_VERY_VERBOSE`, or `VERBOSITY_DEBUG`.
      https://symfony.com/doc/current/console/output.html#verbosity-levels

  -
    question: |
      Which of the following methods of `ConsoleErrorEvent` allows you to change the exception that was thrown?
    answers:
      - { value: "`$event->setError(\\\\Throwable $error)`", correct: true }
      - { value: "`$event->setException(\\\\Throwable $exception)`", correct: false }
      - { value: "`$event->replaceError(\\\\Throwable $newError)`", correct: false }
      - { value: "`$event->changeException(\\\\Throwable $exception)`", correct: false }
    help: |
      The `setError()` method can be used to replace the original exception with another one, which can be useful for normalizing error output.
      https://symfony.com/doc/current/components/console/events.html#consoleerrorevent

  -
    question: >
      What is the primary function of the `TreeHelper` in Symfony Console?
    answers:
      - { value: "To render hierarchical data structures as a tree in the console.", correct: true }
      - { value: "To manage a directory tree for file operations.", correct: false }
      - { value: "To display a visual representation of command dependencies.", correct: false }
      - { value: "To help navigate through console command history.", correct: false }
    help: |
      The `TreeHelper` simplifies the process of displaying tree-like structures, such as file system hierarchies or nested data, directly in the console.
      https://symfony.com/doc/current/components/console/helpers/tree.html

  -
    question: |
      You want to output a message with a custom style named `fire` that you previously defined. Which is the correct way to apply this style?
    answers:
      - { value: "`$output->writeln('<fire>This is a fire message</fire>');`", correct: true }
      - { value: "`$output->writeln('This is a fire message', 'fire');`", correct: false }
      - { value: "`$output->writeln('<style=fire>This is a fire message</style>');`", correct: false }
      - { value: "`$output->writeln('This is a fire message')->setStyle('fire');`", correct: false }
    help: |
      Custom styles are applied using tags with the style name, similar to predefined styles.
      https://symfony.com/doc/current/console/coloring.html#defining-new-styles

  -
    question: |
      Which of the following is a valid way to define a short alias for a command-line option (e.g., `-f` for `--foo`)?
    answers:
      - { value: "`new InputOption('foo', 'f')`", correct: true }
      - { value: "`new InputOption('foo', short: 'f')`", correct: false }
      - { value: "`new InputOption('foo', alias: 'f')`", correct: false }
      - { value: "`new InputOption('foo', ['f'])`", correct: false }
    help: |
      The second argument to `InputOption`'s constructor is used for the shortcut (alias).
      https://symfony.com/doc/current/components/console/input.html#defining-options

  -
    question: >
      What is the primary purpose of the `ConsoleOutputInterface`?
    answers:
      - { value: "To indicate that an output object supports separate error streams.", correct: true }
      - { value: "To provide additional methods for advanced console output formatting.", correct: false }
      - { value: "To ensure compatibility with different terminal emulators.", correct: false }
      - { value: "To enable interactive features in console commands.", correct: false }
    help: |
      `ConsoleOutputInterface` is implemented by `ConsoleOutput` and indicates that the output object can distinguish between standard output and error output, which is crucial for `SymfonyStyle::getErrorStyle()`.
      https://symfony.com/doc/current/console/style.html#writing-to-standard-and-error-output

  -
    question: >
      When using `CommandTester`, how do you retrieve the output generated by the executed command?
    answers:
      - { value: "`$commandTester->getDisplay()`", correct: true }
      - { value: "`$commandTester->getOutput()`", correct: false }
      - { value: "`$commandTester->getConsoleOutput()`", correct: false }
      - { value: "`$commandTester->getPrintedOutput()`", correct: false }
    help: |
      The `getDisplay()` method returns the entire output that was written to the console during the command's execution.
      https://symfony.com/doc/current/console.html#testing-commands

  -
    question: |
      Which of the following is a correct way to define a required argument using the `#[Argument]` attribute in an invokable command?
    answers:
      - { value: "`public function __invoke(#[Argument] string $username, OutputInterface $output): int`", correct: true }
      - { value: "`public function __invoke(#[Argument(required: true)] string $username, OutputInterface $output): int`", correct: false }
      - { value: "`public function __invoke(#[Argument(InputArgument::REQUIRED)] string $username, OutputInterface $output): int`", correct: false }
      - { value: "`public function __invoke(string $username, OutputInterface $output): int` (assuming it's the first argument)", correct: true }
    help: |
      By default, arguments in invokable commands are required if they are type-hinted and appear before any optional arguments. The `#[Argument]` attribute can be used to explicitly define arguments, and if no `mode` is specified, it defaults to `InputArgument::OPTIONAL`. However, if it's the first argument and type-hinted, it's implicitly required.
      https://symfony.com/doc/current/console/input.html#arguments-as-attributes

  -
    question: >
      What is the purpose of `Symfony\\Component\\Console\\CommandLoader\\FactoryCommandLoader`?
    answers:
      - { value: "To load commands using an array of factories (callables) that create command instances on demand.", correct: true }
      - { value: "To load commands from a YAML configuration file.", correct: false }
      - { value: "To automatically discover commands in specified directories.", correct: false }
      - { value: "To load commands from a PSR-11 container.", correct: false }
    help: |
      `FactoryCommandLoader` is a concrete implementation of `CommandLoaderInterface` that uses a map of command names to callables, deferring command instantiation.
      https://symfony.com/doc/current/console/lazy_commands.html#factorycommandloader

  -
    question: |
      You want to clear all output from the current cursor position to the end of the current line. Which `Cursor` helper method should you use?
    answers:
      - { value: "`$cursor->clearLineAfter()`", correct: true }
      - { value: "`$cursor->clearLine()`", correct: false }
      - { value: "`$cursor->eraseToEndOfLine()`", correct: false }
      - { value: "`$cursor->deleteUntilEndOfLine()`", correct: false }
    help: |
      `clearLineAfter()` specifically clears content from the cursor's current position to the end of the line.
      https://symfony.com/doc/current/components/console/helpers/cursor.html#clearing-output

  -
    question: >
      What is the main advantage of using `Symfony\\Component\\Console\\CommandLoader\\ContainerCommandLoader`?
    answers:
      - { value: "It integrates with a PSR-11 container to load commands as services, enabling dependency injection.", correct: true }
      - { value: "It allows loading commands from external Composer packages.", correct: false }
      - { value: "It provides a graphical interface for managing commands.", correct: false }
      - { value: "It automatically generates command definitions from annotations.", correct: false }
    help: |
      `ContainerCommandLoader` is designed to work with a PSR-11 compatible service container, allowing commands to be defined as services and benefit from the container's dependency injection capabilities.
      https://symfony.com/doc/current/console/lazy_commands.html#containercommandloader

  -
    question: |
      Which `SymfonyStyle` method would you use to display a block of text formatted as an error message, typically with a red background?
    answers:
      - { value: "`$io->error()`", correct: true }
      - { value: "`$io->danger()`", correct: false }
      - { value: "`$io->alert()`", correct: false }
      - { value: "`$io->critical()`", correct: false }
    help: |
      The `error()` method formats the given message as an error block, typically with a red background and white text.
      https://symfony.com/doc/current/console/style.html#error-messages

  -
    question: |
      When defining an option, what is the default behavior if no `InputOption` constant is specified for its mode?
    answers:
      - { value: "`InputOption::VALUE_NONE`", correct: true }
      - { value: "`InputOption::VALUE_OPTIONAL`", correct: false }
      - { value: "`InputOption::VALUE_REQUIRED`", correct: false }
      - { value: "An exception is thrown.", correct: false }
    help: |
      By default, if no mode is specified, an option is treated as a simple flag (`VALUE_NONE`), meaning it does not accept a value.
      https://symfony.com/doc/current/components/console/console_arguments.html#defining-options

  -
    question: |
      You want to move the console cursor to an absolute position of column 10, row 5. Which `Cursor` helper method would you use?
    answers:
      - { value: "`$cursor->moveToPosition(10, 5);`", correct: true }
      - { value: "`$cursor->setPosition(10, 5);`", correct: false }
      - { value: "`$cursor->moveAbsolute(10, 5);`", correct: false }
      - { value: "`$cursor->setCursor(10, 5);`", correct: false }
    help: |
      The `moveToPosition()` method allows you to set the cursor's absolute coordinates on the terminal.
      https://symfony.com/doc/current/components/console/helpers/cursor.html#moving-the-cursor

  -
    question: >
      What is the purpose of the `DebugFormatterHelper` in Symfony Console?
    answers:
      - { value: "To format output related to debugging external processes or commands.", correct: true }
      - { value: "To provide a debugger for console commands.", correct: false }
      - { value: "To format PHP debug messages for console output.", correct: false }
      - { value: "To help in profiling command execution.", correct: false }
    help: |
      The `DebugFormatterHelper` provides methods to format output for debugging purposes, such as indicating the start, output, and result of external commands.
      https://symfony.com/doc/current/components/console/helpers/debug_formatter.html

  -
    question: |
      Which of the following is the correct way to set the description for a Symfony console command using the `#[AsCommand]` attribute?
    answers:
      - { value: "`#[AsCommand(name: 'app:my-command', description: 'My command description')]`", correct: true }
      - { value: "`#[AsCommand(name: 'app:my-command', desc: 'My command description')]`", correct: false }
      - { value: "`#[AsCommand(name: 'app:my-command', help: 'My command description')]`", correct: false }
      - { value: "`#[AsCommand(name: 'app:my-command', summary: 'My command description')]`", correct: false }
    help: |
      The `description` parameter in the `#[AsCommand]` attribute is used to provide a short description of the command.
      https://symfony.com/doc/current/console.html#configuring-the-command

  -
    question: |
      How can you obtain an `EventDispatcher` instance to set on your `Application` object for handling console events?
    answers:
      - { value: "`new EventDispatcher()`", correct: true }
      - { value: "`$application->getEventDispatcher()`", correct: false }
      - { value: "`$container->get('event_dispatcher')`", correct: true }
      - { value: "`EventDispatcher::getInstance()`", correct: false }
    help: |
      You can create a new `EventDispatcher` instance or retrieve it from your service container if you are in a full Symfony application.
      https://symfony.com/doc/current/components/console/events.html#registering-event-listeners

  -
    question: |
      What is the purpose of `Symfony\\Component\\Console\\Tester\\CommandCompletionTester`?
    answers:
      - { value: "To unit test the completion logic of Symfony Console commands.", correct: true }
      - { value: "To test the execution of commands with pre-defined inputs.", correct: false }
      - { value: "To simulate tab-completion in a real terminal.", correct: false }
      - { value: "To generate command completion scripts.", correct: false }
    help: |
      `CommandCompletionTester` is specifically designed to test the suggestions provided by a command's completion logic.
      https://symfony.com/doc/current/console/input.html#unit-testing-command-completion

  -
    question: |
      Which of the following methods allows you to change the exit code of a command after its execution, typically within a `ConsoleTerminateEvent` listener?
    answers:
      - { value: "`$event->setExitCode(int $exitCode)`", correct: true }
      - { value: "`$event->setStatusCode(int $code)`", correct: false }
      - { value: "`$event->changeExitCode(int $code)`", correct: false }
      - { value: "`$event->overrideExitCode(int $code)`", correct: false }
    help: |
      The `setExitCode()` method of `ConsoleTerminateEvent` allows you to modify the command's final exit code.
      https://symfony.com/doc/current/components/console/events.html#consoleteterminateevent

  -
    question: |
      What is the effect of using `OutputInterface::VERBOSITY_DEBUG` when writing output in a Symfony command?
    answers:
      - { value: "The message will only be displayed when the command is run with `-vvv`.", correct: true }
      - { value: "The message will always be displayed, regardless of verbosity.", correct: false }
      - { value: "The message will be displayed only if a debugger is attached.", correct: false }
      - { value: "The message will be logged to a debug file instead of the console.", correct: false }
    help: |
      Messages marked with `VERBOSITY_DEBUG` are only shown when the verbosity level is set to the highest (`-vvv`).
      https://symfony.com/doc/current/console/output.html#verbosity-levels

  -
    question: |
      You need to create independent output sections in your console command that can be overwritten or cleared dynamically. Which method of `OutputInterface` allows you to create such sections?
    answers:
      - { value: "`$output->section()`", correct: true }
      - { value: "`$output->createSection()`", correct: false }
      - { value: "`$output->newSection()`", correct: false }
      - { value: "`$output->getSection()`", correct: false }
    help: |
      The `section()` method returns a `ConsoleOutputInterface` instance that represents an independent output section, allowing dynamic content updates.
      https://symfony.com/doc/current/console.html#output-sections

  -
    question: |
      Which of the following methods of `ConsoleSignalEvent` allows you to prevent the command from exiting after a signal is received?
    answers:
      - { value: "`$event->abortExit()`", correct: true }
      - { value: "`$event->stopPropagation()`", correct: false }
      - { value: "`$event->preventExit()`", correct: false }
      - { value: "`$event->keepRunning()`", correct: false }
    help: |
      The `abortExit()` method can be called in a `ConsoleSignalEvent` listener to prevent the default behavior of exiting the command upon receiving a signal.
      https://symfony.com/doc/current/components/console/events.html#consolesignalevent

  -
    question: |
      What is the primary purpose of the `configure()` method in a Symfony console command?
    answers:
      - { value: "To define the command's name, description, arguments, and options.", correct: true }
      - { value: "To execute the main logic of the command.", correct: false }
      - { value: "To initialize variables before command execution.", correct: false }
      - { value: "To interact with the user for missing input.", correct: false }
    help: |
      The `configure()` method is where you set up the command's metadata and define its expected input (arguments and options).
      https://symfony.com/doc/current/console.html#defining-commands

  -
    question: |
      Which of the following global options would you use to display the version number of the console application?
    answers:
      - { value: "`--version`", correct: true }
      - { value: "`-V`", correct: true }
      - { value: "`--app-version`", correct: false }
      - { value: "`--show-version`", correct: false }
    help: |
      Both `--version` and its shorthand `-V` are used to display the application's version.
      https://symfony.com/doc/current/components/console/usage.html#displaying-the-version

  -
    question: |
      When defining an option, what is the default value if `InputOption::VALUE_OPTIONAL` is used but no default is explicitly provided?
    answers:
      - { value: "`null`", correct: true }
      - { value: "An empty string (`''`)", correct: false }
      - { value: "`false`", correct: false }
      - { value: "An empty array (`[]`)", correct: false }
    help: |
      If an optional option is not provided, or provided without a value, and no default is specified, `null` is returned.
      https://symfony.com/doc/current/console/input.html#option-types

  -
    question: |
      You want to clear all output from the cursor's current position to the end of the screen. Which `Cursor` helper method should you use?
    answers:
      - { value: "`$cursor->clearOutput()`", correct: true }
      - { value: "`$cursor->clearScreenAfter()`", correct: false }
      - { value: "`$cursor->eraseToEndOfScreen()`", correct: false }
      - { value: "`$cursor->deleteUntilEndOfScreen()`", correct: false }
    help: |
      `clearOutput()` clears the content from the current cursor position to the bottom-right of the screen.
      https://symfony.com/doc/current/components/console/helpers/cursor.html#clearing-output

  -
    question: |
      What is the purpose of the `Symfony\\Component\\Console\\Command\\LazyCommand` class?
    answers:
      - { value: "It wraps a command factory to delay the actual command object creation until needed.", correct: true }
      - { value: "It is a base class for commands that are loaded asynchronously.", correct: false }
      - { value: "It provides a simplified interface for defining commands without `configure()`.", correct: false }
      - { value: "It automatically generates command definitions from service tags.", correct: false }
    help: |
      `LazyCommand` is a proxy that defers the instantiation of the real command object until its methods are actually called, optimizing startup performance.
      https://symfony.com/doc/current/console/lazy_commands.html#lazycommand

  -
    question: |
      Which of the following is the correct way to apply an inline style with a hexadecimal background color and bold option?
    answers:
      - { value: "`$output->writeln('<bg=#c0392b;options=bold>Text</>');`", correct: true }
      - { value: "`$output->writeln('<bg=hex:c0392b;bold>Text</>');`", correct: false }
      - { value: "`$output->writeln('<style bg=#c0392b;options=bold>Text</style>');`", correct: false }
      - { value: "`$output->writeln('<bg=#c0392b><options=bold>Text</options></bg>');`", correct: false }
    help: |
      Inline styles allow specifying foreground, background (using named or hex colors), and options within a single tag, separated by semicolons.
      https://symfony.com/doc/current/console/coloring.html#inline-styles

  -
    question: |
      What is the purpose of the `ConsoleCommandEvent::commandShouldRun()` method?
    answers:
      - { value: "To check if the command is currently enabled and allowed to run.", correct: true }
      - { value: "To determine if the command has been executed successfully.", correct: false }
      - { value: "To verify if all required arguments and options are present.", correct: false }
      - { value: "To check if the command is registered with the application.", correct: false }
    help: |
      `commandShouldRun()` returns a boolean indicating whether the command is currently enabled. It can be affected by `disableCommand()` and `enableCommand()`.
      https://symfony.com/doc/current/components/console/events.html#consolecommandevent

  -
    question: |
      You want to prompt the user for a single line of input using `SymfonyStyle`. Which method would you use?
    answers:
      - { value: "`$io->ask('What is your name?');`", correct: true }
      - { value: "`$io->prompt('What is your name?');`", correct: false }
      - { value: "`$io->read('What is your name?');`", correct: false }
      - { value: "`$io->getInput('What is your name?');`", correct: false }
    help: |
      The `ask()` method is the standard way to prompt the user for a single line of text input.
      https://symfony.com/doc/current/console/style.html#asking-for-input

  -
    question: |
      What is the purpose of the `SignalMap` class in Symfony Console?
    answers:
      - { value: "To map signal integer values to their human-readable names.", correct: true }
      - { value: "To register signal handlers for console commands.", correct: false }
      - { value: "To manage a collection of active signals.", correct: false }
      - { value: "To define custom signals for console applications.", correct: false }
    help: |
      `SignalMap` is a utility class that provides a way to get the name of a signal from its integer value, useful for logging or debugging signal events.
      https://symfony.com/doc/current/components/console/events.html#consolesignalevent

  -
    question: |
      Which of the following is the correct way to register a command class with a Symfony Console `Application` instance?
    answers:
      - { value: "`$application->add(new MyCommand());`", correct: true }
      - { value: "`$application->registerCommand(MyCommand::class);`", correct: false }
      - { value: "`$application->addCommand(new MyCommand());`", correct: false }
      - { value: "`$application->load(MyCommand::class);`", correct: false }
    help: |
      The `add()` method of the `Application` class is used to register an instance of a `Command` class.
      https://symfony.com/doc/current/components/console.html#registering-commands

  -
    question: |
      What is the default value for an optional argument if no default is explicitly provided in `addArgument()`?
    answers:
      - { value: "`null`", correct: true }
      - { value: "An empty string (`''`)", correct: false }
      - { value: "`false`", correct: false }
      - { value: "An empty array (`[]`)", correct: false }
    help: |
      If an optional argument is not provided on the command line and no default value is specified in `addArgument()`, its value will be `null`.
      https://symfony.com/doc/current/console/input.html#argument-types

  -
    question: |
      You are running a command and want to see more verbose output, but not full debug information. Which global option would you use?
    answers:
      - { value: "`-vv`", correct: true }
      - { value: "`-v`", correct: false }
      - { value: "`-vvv`", correct: false }
      - { value: "`--verbose=2`", correct: false }
    help: |
      `-vv` corresponds to "very verbose" output, which is more detailed than normal but less than debug.
      https://symfony.com/doc/current/console/input.html#global-options

  -
    question: |
      Which of the following is a valid way to define a required option for a Symfony console command?
    answers:
      - { value: "`new InputOption('name', null, InputOption::VALUE_REQUIRED, 'The name.')`", correct: true }
      - { value: "`new InputOption('name', null, InputOption::REQUIRED, 'The name.')`", correct: false }
      - { value: "`new InputOption('name', null, true, 'The name.')`", correct: false }
      - { value: "`new InputOption('name', null, InputOption::IS_REQUIRED, 'The name.')`", correct: false }
    help: |
      `InputOption::VALUE_REQUIRED` indicates that if the option is present, it must be accompanied by a value. Note that the option itself is still optional unless you add custom validation.
      https://symfony.com/doc/current/console/input.html#option-types

  -
    question: |
      When defining an argument, what is the default behavior if no `InputArgument` constant is specified for its mode?
    answers:
      - { value: "`InputArgument::OPTIONAL`", correct: true }
      - { value: "`InputArgument::REQUIRED`", correct: false }
      - { value: "`InputArgument::IS_ARRAY`", correct: false }
      - { value: "An exception is thrown.", correct: false }
    help: |
      By default, if no mode is specified, an argument is considered optional.
      https://symfony.com/doc/current/components/console/console_arguments.html#defining-arguments

  -
    question: |
      You want to clear only the current line of output from the console. Which `Cursor` helper method should you use?
    answers:
      - { value: "`$cursor->clearLine()`", correct: true }
      - { value: "`$cursor->eraseLine()`", correct: false }
      - { value: "`$cursor->deleteLine()`", correct: false }
      - { value: "`$cursor->resetLine()`", correct: false }
    help: |
      `clearLine()` removes all content from the current line where the cursor is located.
      https://symfony.com/doc/current/components/console/helpers/cursor.html#clearing-output

  -
    question: |
      Which of the following describes the behavior of the `-v` verbosity level in Symfony Console?
    answers:
      - { value: "Normal verbosity, showing standard output.", correct: true }
      - { value: "Quiet verbosity, suppressing most output.", correct: false }
      - { value: "Very verbose, but less than debug.", correct: false }
      - { value: "Minimal verbosity, only showing errors.", correct: false }
    help: |
      `-v` explicitly sets the verbosity to normal, which is also the default if no verbosity option is provided.
      https://symfony.com/doc/current/console/input.html#global-options

  -
    question: |
      How can you disable Kernel debug when running a Symfony console command, typically in a production environment?
    answers:
      - { value: "`--no-debug`", correct: true }
      - { value: "`--env=prod`", correct: true }
      - { value: "`--debug=false`", correct: false }
      - { value: "`--disable-debug`", correct: false }
    help: |
      The `--no-debug` option explicitly disables Kernel debugging. Running with `--env=prod` also typically disables debug by default, depending on your `APP_DEBUG` environment variable configuration.
      https://symfony.com/doc/current/console/input.html#frameworkbundle-specific-options

  -
    question: |
      What is the purpose of `Symfony\\Component\\Console\\Question\\Question::setValidator()`?
    answers:
      - { value: "To set a callback function that validates the user's input for a question.", correct: true }
      - { value: "To define the type of validation to apply (e.g., email, number).", correct: false }
      - { value: "To mark the question as required.", correct: false }
      - { value: "To set a default validation message.", correct: false }
    help: |
      The `setValidator()` method allows you to provide a callable that will validate the user's answer. The callable should throw an exception on failure and return the validated value on success.
      https://symfony.com/doc/current/components/console/helpers/questionhelper.html#validating-answers

  -
    question: |
      You want to set a maximum height for an output section, causing new lines to replace older ones when the limit is reached. Which method of the section object would you use?
    answers:
      - { value: "`$section->setMaxHeight(int $height)`", correct: true }
      - { value: "`$section->setHeight(int $height)`", correct: false }
      - { value: "`$section->limitLines(int $count)`", correct: false }
      - { value: "`$section->setScrollHeight(int $height)`", correct: false }
    help: |
      The `setMaxHeight()` method configures a section to behave like a fixed-size buffer, where new lines push out the oldest ones once the height limit is reached.
      https://symfony.com/doc/current/console.html#output-sections

  -
    question: |
      Which of the following is true about the `__invoke()` method in an invokable Symfony console command?
    answers:
      - { value: "It replaces the `execute()` method and must return an integer exit status.", correct: true }
      - { value: "It is called before `initialize()` and `interact()`.", correct: false }
      - { value: "It automatically handles argument and option parsing.", correct: true }
      - { value: "It cannot be used with the `#[AsCommand]` attribute.", correct: false }
    help: |
      The `__invoke()` method is a modern alternative to `execute()` for single-method commands. Symfony automatically maps arguments and options to its parameters based on type-hints and attributes.
      https://symfony.com/doc/current/console.html#invokable-commands

  -
    question: |
      What is the purpose of the `Symfony\\Component\\Console\\Question\\ConfirmationQuestion::setTrueAnswerRegex()` method?
    answers:
      - { value: "To define a regular expression that determines if a user's answer means 'yes'.", correct: true }
      - { value: "To validate the format of a 'yes' answer.", correct: false }
      - { value: "To set the default 'yes' answer.", correct: false }
      - { value: "To provide a custom error message for invalid 'yes' answers.", correct: false }
    help: |
      This method allows customizing the regex used to match a "yes" response, which defaults to `/^y/i`.
      https://symfony.com/doc/current/components/console/helpers/questionhelper.html#confirmationquestion

  -
    question: |
      Which of the following is the correct way to move the console cursor 3 columns to the right from its current position using the `Cursor` helper?
    answers:
      - { value: "`$cursor->moveRight(3);`", correct: true }
      - { value: "`$cursor->right(3);`", correct: false }
      - { value: "`$cursor->move(3, 0);`", correct: false }
      - { value: "`$cursor->setRelativePosition(3, 0);`", correct: false }
    help: |
      The `moveRight()` method accepts an integer argument for the number of columns to move.
      https://symfony.com/doc/current/components/console/helpers/cursor.html#moving-the-cursor

  -
    question: |
      What is the purpose of the `Symfony\\Component\\Console\\Question\\Question::setMaxAttempts()` method?
    answers:
      - { value: "To limit the number of times a user can be prompted for input for a question.", correct: true }
      - { value: "To set the maximum length of the user's answer.", correct: false }
      - { value: "To define the maximum number of correct answers allowed.", correct: false }
      - { value: "To specify the maximum number of validation errors before exiting.", correct: false }
    help: |
      `setMaxAttempts()` controls how many times the `QuestionHelper` will re-ask a question if the user provides invalid input, before giving up. `null` means infinite attempts.
      https://symfony.com/doc/current/components/console/helpers/questionhelper.html#question

  -
    question: |
      You want to display a block of text formatted as an informational message, typically with a blue background. Which `SymfonyStyle` method would you use?
    answers:
      - { value: "`$io->info()`", correct: true }
      - { value: "`$io->message()`", correct: false }
      - { value: "`$io->note()`", correct: false }
      - { value: "`$io->text()`", correct: false }
    help: |
      The `info()` method formats the given message as an informational block, typically with a blue background.
      https://symfony.com/doc/current/console/style.html#info-messages

  -
    question: |
      Which of the following global options would you use to set the Kernel configuration environment (e.g., `dev`, `prod`) for a Symfony console command?
    answers:
      - { value: "`--env=prod`", correct: true }
      - { value: "`--environment=prod`", correct: false }
      - { value: "`--kernel-env=prod`", correct: false }
      - { value: "`--set-env=prod`", correct: false }
    help: |
      The `--env` option is provided by FrameworkBundle to specify the Symfony environment for the command execution.
      https://symfony.com/doc/current/console/input.html#frameworkbundle-specific-options

  -
    question: |
      What is the purpose of `OutputInterface::VERBOSITY_NORMAL` when writing output?
    answers:
      - { value: "The message will be displayed by default, unless `--quiet` or `--silent` is used.", correct: true }
      - { value: "The message will always be displayed.", correct: false }
      - { value: "The message will only be displayed when `-v` is explicitly used.", correct: false }
      - { value: "The message will be displayed only if no other verbosity option is set.", correct: false }
    help: |
      `VERBOSITY_NORMAL` is the default verbosity level, meaning messages at this level are shown unless output is explicitly suppressed.
      https://symfony.com/doc/current/console/output.html#verbosity-levels

  -
    question: |
      You want to test the completion suggestions for a command when the user has already typed "Fa". Which `CommandCompletionTester` method would you use?
    answers:
      - { value: "`$tester->complete(['Fa']);`", correct: true }
      - { value: "`$tester->getSuggestions('Fa');`", correct: false }
      - { value: "`$tester->testCompletion('Fa');`", correct: false }
      - { value: "`$tester->simulateInput('Fa');`", correct: false }
    help: |
      The `complete()` method takes an array representing the command line input, with the last element being the partial input for which to get suggestions.
      https://symfony.com/doc/current/console/input.html#unit-testing-command-completion

  -
    question: |
      Which of the following is the correct way to define an argument that is optional and can accept multiple values?
    answers:
      - { value: "`$this->addArgument('names', InputArgument::OPTIONAL | InputArgument::IS_ARRAY, 'List of names.')`", correct: true }
      - { value: "`$this->addArgument('names', InputArgument::IS_ARRAY, 'List of names.', null)`", correct: true }
      - { value: "`$this->addArgument('names', InputArgument::OPTIONAL_ARRAY, 'List of names.')`", correct: false }
      - { value: "`$this->addArgument('names', InputArgument::ARRAY_OPTIONAL, 'List of names.')`", correct: false }
    help: |
      You can combine `InputArgument::OPTIONAL` and `InputArgument::IS_ARRAY` using the bitwise OR operator (`|`). Alternatively, if `InputArgument::IS_ARRAY` is used without `InputArgument::REQUIRED`, it implies optionality.
      https://symfony.com/doc/current/console/input.html#argument-types

  -
    question: |
      What is the purpose of `Symfony\\Component\\Console\\Output\\OutputInterface::setDecorated()`?
    answers:
      - { value: "To enable or disable output decoration (e.g., colors, bold) regardless of terminal capabilities.", correct: true }
      - { value: "To set a custom output decorator for the console.", correct: false }
      - { value: "To apply a specific output style to the entire command output.", correct: false }
      - { value: "To mark the output as decorated for logging purposes.", correct: false }
    help: |
      `setDecorated(true)` forces ANSI escape codes for styling, while `setDecorated(false)` disables them. This can override the automatic detection of terminal capabilities.
      https://symfony.com/doc/current/console/coloring.html#forcing-colors

  -
    question: |
      When using `SymfonyStyle::choice()`, how can you allow the user to select multiple options from the list?
    answers:
      - { value: "By calling `$question->setMultiselect(true)` on the underlying `ChoiceQuestion` object.", correct: true }
      - { value: "By passing a `true` value as a third argument to `$io->choice()`.", correct: false }
      - { value: "By using `$io->choices()` instead of `$io->choice()`.", correct: false }
      - { value: "This functionality is not supported by `SymfonyStyle::choice()`.", correct: false }
    help: |
      The `ChoiceQuestion` class, used internally by `SymfonyStyle::choice()`, has a `setMultiselect()` method to enable multiple selections. You would typically access this if you were using `QuestionHelper` directly.
      https://symfony.com/doc/current/components/console/helpers/questionhelper.html#choicequestion

  -
    question: |
      What is the purpose of `Symfony\\Component\\Console\\Event\\ConsoleCommandEvent::disableCommand()`?
    answers:
      - { value: "To prevent the command from executing within a listener, causing the application to exit with a specific code.", correct: true }
      - { value: "To temporarily disable a command from being listed in `php bin/console list`.", correct: false }
      - { value: "To mark a command as deprecated.", correct: false }
      - { value: "To stop the event propagation for the current command.", correct: false }
    help: |
      Calling `disableCommand()` within a `ConsoleCommandEvent` listener will stop the command from running and cause the console application to exit with status code 113.
      https://symfony.com/doc/current/components/console/events.html#consolecommandevent

  -
    question: |
      Which of the following is the correct way to add a required argument to an inline command defined with `Application::register()`?
    answers:
      - { value: "`->addArgument('username', InputArgument::REQUIRED)`", correct: true }
      - { value: "`->addArgument('username', true)`", correct: false }
      - { value: "`->argument('username', InputArgument::REQUIRED)`", correct: false }
      - { value: "`->setArgument('username', InputArgument::REQUIRED)`", correct: false }
    help: |
      The `addArgument()` method is used to define arguments for inline commands, similar to how it's used in `configure()`.
      https://symfony.com/doc/current/components/console.html#registering-commands

  -
    question: |
      What is the effect of running a Symfony console command with the `--no-ansi` global option?
    answers:
      - { value: "It disables coloring of the output, even if the terminal supports it.", correct: true }
      - { value: "It forces the output to be monochrome.", correct: false }
      - { value: "It prevents the command from using any ANSI escape codes.", correct: true }
      - { value: "It disables all non-textual output.", correct: false }
    help: |
      The `--no-ansi` option explicitly disables ANSI escape codes, preventing any color or text decoration in the output.
      https://symfony.com/doc/current/console/input.html#global-options

  -
    question: |
      Which of the following methods of `ConsoleTerminateEvent` allows you to retrieve the current exit code of the command?
    answers:
      - { value: "`$event->getExitCode()`", correct: true }
      - { value: "`$event->getStatusCode()`", correct: false }
      - { value: "`$event->getCommandExitCode()`", correct: false }
      - { value: "`$event->getResultCode()`", correct: false }
    help: |
      The `getExitCode()` method returns the integer exit code that the command is about to return.
      https://symfony.com/doc/current/components/console/events.html#consoleteterminateevent

  -
    question: |
      You want to display a progress bar in your console command. Which helper is commonly used for this purpose?
    answers:
      - { value: "`ProgressBar` (from `Symfony\\Component\\Console\\Helper`)", correct: true }
      - { value: "`ProgressHelper`", correct: false }
      - { value: "`SymfonyStyle` (via `progressStart`, `progressAdvance`, `progressFinish`)", correct: true }
      - { value: "`ConsoleProgressBar`", correct: false }
    help: |
      The `ProgressBar` helper class provides methods for creating and managing progress bars. `SymfonyStyle` also wraps this functionality with convenient methods like `progressStart()`.
      https://symfony.com/doc/current/console/helpers/progressbar.html
      https://symfony.com/doc/current/console/style.html#progress-bar

  -
    question: |
      What is the purpose of `Symfony\\Component\\Console\\Question\\Question::setDefault()`?
    answers:
      - { value: "To set the default value returned if the user provides no input for the question.", correct: true }
      - { value: "To set the default answer for a choice question.", correct: false }
      - { value: "To set the default prompt text for the question.", correct: false }
      - { value: "To set a default validator for the question.", correct: false }
    help: |
      The `setDefault()` method on a `Question` object provides a fallback value if the user simply presses Enter without typing anything.
      https://symfony.com/doc/current/components/console/helpers/questionhelper.html#question

  -
    question: |
      Which of the following is the correct way to apply a bold and underscore style to text using inline styling?
    answers:
      - { value: "`$output->writeln('<options=bold,underscore>Text</>');`", correct: true }
      - { value: "`$output->writeln('<bold;underscore>Text</>');`", correct: false }
      - { value: "`$output->writeln('<style=bold,underscore>Text</style>');`", correct: false }
      - { value: "`$output->writeln('<options=bold><options=underscore>Text</options></options>');`", correct: false }
    help: |
      Multiple options can be applied within the `<options=...>` tag by separating them with commas.
      https://symfony.com/doc/current/console/coloring.html#inline-styles

  -
    question: |
      What is the purpose of `Symfony\\Component\\Console\\Application::setCommandLoader()`?
    answers:
      - { value: "To set a command loader for deferred command instantiation (lazy loading).", correct: true }
      - { value: "To register all commands from a specific directory.", correct: false }
      - { value: "To define the default command to run when no command is specified.", correct: false }
      - { value: "To load commands from an external configuration source.", correct: false }
    help: |
      `setCommandLoader()` allows you to provide an implementation of `CommandLoaderInterface`, which is responsible for loading commands only when they are needed, improving performance.
      https://symfony.com/doc/current/console/lazy_commands.html#command-loaders

  -
    question: |
      When using `SymfonyStyle::choice()`, what is the purpose of the `setErrorMessage()` method on the underlying `ChoiceQuestion`?
    answers:
      - { value: "To define the message displayed when the user enters an invalid choice.", correct: true }
      - { value: "To set the default error message for all questions.", correct: false }
      - { value: "To provide a custom message when no choices are available.", correct: false }
      - { value: "To log an error if the user makes too many invalid attempts.", correct: false }
    help: |
      `setErrorMessage()` allows you to customize the error message shown to the user when their input does not match any of the predefined choices. Use `%s` as a placeholder for the invalid input.
      https://symfony.com/doc/current/components/console/helpers/questionhelper.html#choicequestion

  -
    question: |
      Which of the following is the correct way to define an argument that is required and can accept multiple values?
    answers:
      - { value: "`$this->addArgument('files', InputArgument::REQUIRED | InputArgument::IS_ARRAY, 'Files to process.')`", correct: true }
      - { value: "`$this->addArgument('files', InputArgument::REQUIRED_ARRAY, 'Files to process.')`", correct: false }
      - { value: "`$this->addArgument('files', InputArgument::IS_ARRAY, 'Files to process.', null)` (This would make it optional)", correct: false }
      - { value: "`$this->addArgument('files', InputArgument::REQUIRED)->setIsArray(true);`", correct: false }
    help: |
      Combining `InputArgument::REQUIRED` and `InputArgument::IS_ARRAY` ensures the argument must be provided and can accept multiple values.
      https://symfony.com/doc/current/console/input.html#argument-types

  -
    question: |
      What is the purpose of `Symfony\\Component\\Console\\Output\\OutputInterface::setVerbosity()`?
    answers:
      - { value: "To programmatically set the verbosity level of the output.", correct: true }
      - { value: "To define the maximum verbosity level allowed for the command.", correct: false }
      - { value: "To get the current verbosity level of the output.", correct: false }
      - { value: "To enable or disable verbosity for specific messages.", correct: false }
    help: |
      `setVerbosity()` allows you to change the output verbosity level during command execution, overriding the command-line options.
      https://symfony.com/doc/current/console/output.html#verbosity-levels

  -
    question: |
      Which of the following is the correct way to define an option that is optional and can accept a value (e.g., `--limit` or `--limit=10`)?
    answers:
      - { value: "`new InputOption('limit', null, InputOption::VALUE_OPTIONAL, 'The limit.')`", correct: true }
      - { value: "`new InputOption('limit', null, InputOption::OPTIONAL_VALUE, 'The limit.')`", correct: false }
      - { value: "`new InputOption('limit', null, false, 'The limit.')`", correct: false }
      - { value: "`new InputOption('limit', null, InputOption::VALUE_OR_NONE, 'The limit.')`", correct: false }
    help: |
      `InputOption::VALUE_OPTIONAL` is the correct constant for options that may or may not have an associated value.
      https://symfony.com/doc/current/console/input.html#option-types