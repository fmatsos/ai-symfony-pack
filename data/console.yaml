category: Console

questions:
  -
    question: >
      What is the primary purpose of the `#[AsCommand]` attribute in a Symfony console command class?
    answers:
      - { value: "To automatically register the command and define its name and description.", correct: true }
      - { value: "To inject services into the command's constructor.", correct: false }
      - { value: "To define the command's arguments and options.", correct: false }
      - { value: "To mark the command as a service for autowiring.", correct: false }
    help: |
      The `#[AsCommand]` attribute is the modern way to configure a console command's name, description, and other metadata directly on the class, making it discoverable by Symfony.
      https://symfony.com/doc/current/console.html#configuring-the-command

  -
    question: >
      Which method is *required* for a Symfony console command to define its execution logic in Symfony 7?
    answers:
      - { value: "`execute(InputInterface $input, OutputInterface $output): int`", correct: true }
      - { value: "`__invoke(InputInterface $input, OutputInterface $output): int`", correct: true }
      - { value: "`run(InputInterface $input, OutputInterface $output): int`", correct: false }
      - { value: "`process(InputInterface $input, OutputInterface $output): int`", correct: false }
    help: |
      In Symfony 7, the `__invoke()` method is the preferred way to define the main execution logic of a command. The `execute()` method is also supported for backward compatibility or when extending `Symfony\Component\Console\Command\Command`. Both must return an integer exit status.
      https://symfony.com/doc/current/console.html#defining-the-command-as-a-service

  -
    question: >
      Which Symfony Console helper class is recommended for simplifying common input/output operations and providing consistent styling?
    answers:
      - { value: "`Symfony\\Component\\Console\\Style\\SymfonyStyle`", correct: true }
      - { value: "`Symfony\\Component\\Console\\Helper\\QuestionHelper`", correct: false }
      - { value: "`Symfony\\Component\\Console\\Output\\OutputFormatter`", correct: false }
      - { value: "`Symfony\\Component\\Console\\Input\\InputInterface`", correct: false }
    help: |
      `SymfonyStyle` is a wrapper around `InputInterface` and `OutputInterface` that provides a set of convenient methods for common console interactions and consistent styling.
      https://symfony.com/doc/current/console/style.html

  -
    question: |
      Given the following command argument definition:

      ```php
      $this->addArgument('username', InputArgument::REQUIRED, 'The username of the new user.');
      ```

      What happens if the `username` argument is not provided when executing this command?
    answers:
      - { value: "The command will throw an `InvalidArgumentException` and terminate.", correct: true }
      - { value: "The command will prompt the user to enter the missing argument.", correct: false }
      - { value: "The command will proceed with a `null` value for `username`.", correct: false }
      - { value: "The command will use a default value if one is configured elsewhere.", correct: false }
    help: |
      `InputArgument::REQUIRED` means the argument must be provided. If it's missing, the console application will throw an `InvalidArgumentException` and the command will not execute.
      https://symfony.com/doc/current/console/input.html#arguments

  -
    question: >
      What is the command to list all available console commands in a Symfony application?
    answers:
      - { value: "`php bin/console list`", correct: true }
      - { value: "`php bin/console show`", correct: false }
      - { value: "`php bin/console commands`", correct: false }
      - { value: "`php bin/console --help`", correct: false }
    help: |
      The `list` command is a built-in command that displays all registered commands within a Symfony application.
      https://symfony.com/doc/current/console.html#listing-all-available-commands

  -
    question: >
      What is the key difference between the `--quiet` and `--silent` global options in Symfony Console?
    answers:
      - { value: "`--quiet` disables normal output but still shows errors, while `--silent` disables all output, including errors.", correct: true }
      - { value: "`--silent` disables normal output but still shows errors, while `--quiet` disables all output, including errors.", correct: false }
      - { value: "`--quiet` only affects `writeln()`, while `--silent` affects all output methods.", correct: false }
      - { value: "There is no functional difference; they are aliases for the same behavior.", correct: false }
    help: |
      The `--quiet` option (or `-q`) disables normal output but allows error messages to be displayed. The `--silent` option (introduced in Symfony 7.2) disables all output and interaction, including errors.
      https://symfony.com/doc/current/console/input.html#global-options

  -
    question: >
      To move the console cursor to a specific column and row, which method of the `Symfony\Component\Console\Cursor` class would you use?
    answers:
      - { value: "`moveToPosition(int $column, int $row)`", correct: true }
      - { value: "`setPosition(int $x, int $y)`", correct: false }
      - { value: "`setCursor(int $col, int $row)`", correct: false }
      - { value: "`moveAbsolute(int $col, int $row)`", correct: false }
    help: |
      The `moveToPosition()` method allows you to move the cursor to an absolute position on the terminal.
      https://symfony.com/doc/current/components/console/helpers/cursor.html#moving-the-cursor

  -
    question: >
      How can you associate an `EventDispatcher` with a Symfony Console `Application` instance to enable event handling?
    answers:
      - { value: "By calling `$application->setDispatcher($dispatcher);`", correct: true }
      - { value: "By passing the dispatcher to the `Application` constructor.", correct: false }
      - { value: "By registering the dispatcher as a service in `services.yaml`.", correct: false }
      - { value: "By implementing `EventDispatcherAwareInterface` in the `Application` class.", correct: false }
    help: |
      The `setDispatcher()` method of the `Application` class is used to register an `EventDispatcher` instance, allowing the console application to dispatch and handle events.
      https://symfony.com/doc/current/components/console/events.html#registering-the-event-dispatcher

  -
    question: >
      Which `SymfonyStyle` method should be used to prompt the user for sensitive information, such as a password, where the input should not be displayed on the screen?
    answers:
      - { value: "`askHidden(string $question, callable $validator = null): string`", correct: true }
      - { value: "`askSecret(string $question): string`", correct: false }
      - { value: "`promptHidden(string $question): string`", correct: false }
      - { value: "`confirmPassword(string $question): string`", correct: false }
    help: |
      The `askHidden()` method is specifically designed for sensitive input, ensuring the user's typing is not echoed to the console. It also supports an optional validator.
      https://symfony.com/doc/current/console/style.html#asking-for-sensitive-input

  -
    question: >
      How is a service typically injected into a Symfony Console command class in Symfony 7?
    answers:
      - { value: "Through constructor dependency injection, often with autowiring.", correct: true }
      - { value: "Using a setter method annotated with `#[Inject]`.", correct: false }
      - { value: "By accessing the service container directly within the `execute` method.", correct: false }
      - { value: "By implementing `ContainerAwareInterface`.", correct: false }
    help: |
      Symfony's dependency injection container automatically injects services into command constructors when the command is defined as a service.
      https://symfony.com/doc/current/console.html#defining-the-command-as-a-service

  -
    question: |
      Consider the following option definition:

      ```php
      new InputOption('yell', 'y', InputOption::VALUE_NONE, 'If set, the message is yelled');
      ```

      If the command is executed with `--yell`, what value will `InputInterface::getOption('yell')` return?
    answers:
      - { value: "`true`", correct: true }
      - { value: "`'yell'`", correct: false }
      - { value: "`null`", correct: false }
      - { value: "`1`", correct: false }
    help: |
      `InputOption::VALUE_NONE` indicates that the option does not accept a value. Its presence signifies `true`, and its absence signifies `false`.
      https://symfony.com/doc/current/console/input.html#options

  -
    question: >
      Which helper class in Symfony Console is used to render a hierarchical tree structure in the console output?
    answers:
      - { value: "`Symfony\\Component\\Console\\Helper\\TreeHelper`", correct: true }
      - { value: "`Symfony\\Component\\Console\\Helper\\DiagramHelper`", correct: false }
      - { value: "`Symfony\\Component\\Console\\Helper\\GraphHelper`", correct: false }
      - { value: "`Symfony\\Component\\Console\\Helper\\ListHelper`", correct: false }
    help: |
      The `TreeHelper` is specifically designed to display tree-like structures in the console, often used for directory listings or hierarchical data.
      https://symfony.com/doc/current/components/console/helpers/tree.html

  -
    question: >
      Which method of the `ConsoleCommandEvent` can be called to prevent a command from executing within a listener?
    answers:
      - { value: "`disableCommand(): void`", correct: true }
      - { value: "`stopPropagation(): void`", correct: false }
      - { value: "`cancelExecution(): void`", correct: false }
      - { value: "`preventCommand(): void`", correct: false }
    help: |
      The `disableCommand()` method, available on `ConsoleCommandEvent`, can be used by an event listener to prevent the command from running. The application will then return an exit code of 113.
      https://symfony.com/doc/current/components/console/events.html#consolecommandevent

  -
    question: |
      How would you output the text "ERROR" in bold, white text on a red background using inline styling in Symfony Console?
    answers:
      - { value: "`$output->writeln('<fg=white;bg=red;options=bold>ERROR</>');`", correct: true }
      - { value: "`$output->writeln('<error bold>ERROR</error>');`", correct: false }
      - { value: "`$output->writeln('<style fg="white" bg="red" options="bold">ERROR</style>');`", correct: false }
      - { value: "`$output->writeln('<fg=white;bg=red;bold>ERROR</bold>');`", correct: false }
    help: |
      Inline styles use tags with `fg` (foreground), `bg` (background), and `options` attributes. Multiple options are comma-separated.
      https://symfony.com/doc/current/console/coloring.html#inline-styles

  -
    question: >
      How can you hide a custom Symfony console command from appearing in the default `list` command output?
    answers:
      - { value: "By setting `hidden: true` in the `#[AsCommand]` attribute.", correct: true }
      - { value: "By prefixing the command name with an underscore (e.g., `_app:my-command`).", correct: false }
      - { value: "By implementing `HiddenCommandInterface` in the command class.", correct: false }
      - { value: "By configuring it in `services.yaml` with a `public: false` tag.", correct: false }
    help: |
      The `hidden` property in the `#[AsCommand]` attribute allows you to prevent a command from being listed by default.
      https://symfony.com/doc/current/console/hide_commands.html

  -
    question: >
      If an argument is defined with `InputArgument::IS_ARRAY`, what is a crucial constraint regarding its position in the argument list?
    answers:
      - { value: "It must be the last argument defined.", correct: true }
      - { value: "It must be the first argument defined.", correct: false }
      - { value: "It must be defined as `InputArgument::REQUIRED`.", correct: false }
      - { value: "It cannot be combined with `InputArgument::OPTIONAL`.", correct: false }
    help: |
      An array argument (`InputArgument::IS_ARRAY`) consumes all remaining input, so it must always be the last argument defined.
      https://symfony.com/doc/current/console/input.html#arguments

  -
    question: >
      What is the purpose of the `--profile` global option when executing a Symfony console command?
    answers:
      - { value: "To enable the Symfony Profiler for the command's execution.", correct: true }
      - { value: "To measure the execution time of the command.", correct: false }
      - { value: "To output detailed memory usage statistics.", correct: false }
      - { value: "To generate a performance report in a file.", correct: false }
    help: |
      The `--profile` option activates the Symfony Profiler for the command, allowing you to inspect its performance, database queries, and other details.
      https://symfony.com/doc/current/console.html#profiling-a-command

  -
    question: >
      When writing unit tests for a Symfony console command, which class is commonly used to simulate command execution and capture output?
    answers:
      - { value: "`Symfony\\Component\\Console\\Tester\\CommandTester`", correct: true }
      - { value: "`Symfony\\Component\\Console\\Tester\\ApplicationTester`", correct: false }
      - { value: "`Symfony\\Component\\Console\\Command\\TestCommand`", correct: false }
      - { value: "`Symfony\\Component\\Console\\Input\\ArrayInput`", correct: false }
    help: |
      `CommandTester` provides a convenient way to test console commands by simulating input and capturing output without needing a real console environment.
      https://symfony.com/doc/current/console.html#testing-commands

  -
    question: >
      When is the `interact()` method of a Symfony console command executed, and what is its primary purpose?
    answers:
      - { value: "After `initialize()` and before `execute()`; to interactively ask the user for missing required options/arguments.", correct: true }
      - { value: "Before `initialize()`; to set up initial command parameters.", correct: false }
      - { value: "After `execute()`; to provide a summary of the command's operation.", correct: false }
      - { value: "Only when the `--no-interaction` flag is not present; to validate user input.", correct: false }
    help: |
      The `interact()` method is called to check for missing required input and prompt the user. It is not called when `--no-interaction` is used.
      https://symfony.com/doc/current/console.html#command-lifecycle

  -
    question: >
      Which `Cursor` method would you use to clear the entire terminal screen?
    answers:
      - { value: "`clearScreen(): void`", correct: true }
      - { value: "`clearAll(): void`", correct: false }
      - { value: "`resetScreen(): void`", correct: false }
      - { value: "`eraseScreen(): void`", correct: false }
    help: |
      The `clearScreen()` method clears all content from the terminal.
      https://symfony.com/doc/current/components/console/helpers/cursor.html#clearing-the-output

  -
    question: >
      Why might `SymfonyStyle::getErrorStyle()` not function as expected if the `OutputInterface` used to create `SymfonyStyle` does not implement `ConsoleOutputInterface`?
    answers:
      - { value: "Because `getErrorStyle()` relies on `ConsoleOutputInterface` to correctly redirect output to the error stream (`stderr`).", correct: true }
      - { value: "Because `ConsoleOutputInterface` provides the necessary styling definitions for error messages.", correct: false }
      - { value: "Because `SymfonyStyle` can only be instantiated with `ConsoleOutputInterface`.", correct: false }
      - { value: "Because it needs access to the underlying `InputInterface` for error handling.", correct: false }
    help: |
      `ConsoleOutputInterface` indicates that an output object supports separate error streams, which `getErrorStyle()` uses to ensure error messages are written to `stderr`.
      https://symfony.com/doc/current/console/style.html#writing-to-standard-and-error-output-streams

  -
    question: >
      An option is defined with `InputOption::VALUE_NEGATABLE`. If the option is `--no-verbose`, what value would `InputInterface::getOption('verbose')` typically return?
    answers:
      - { value: "`false`", correct: true }
      - { value: "`true`", correct: false }
      - { value: "`null`", correct: false }
      - { value: "`0`", correct: false }
    help: |
      `InputOption::VALUE_NEGATABLE` allows for both a positive flag (`--verbose`) and a negative flag (`--no-verbose`). If `--no-verbose` is used, the option `verbose` will evaluate to `false`.
      https://symfony.com/doc/current/console/input.html#options

  -
    question: >
      How can you display the help information for a specific Symfony console command, for example, `app:greet`?
    answers:
      - { value: "`php bin/console help app:greet`", correct: true }
      - { value: "`php bin/console app:greet --help`", correct: true }
      - { value: "`php bin/console app:greet -h`", correct: true }
      - { value: "`php bin/console man app:greet`", correct: false }
    help: |
      The `help` command or the `--help` (`-h`) global option can be used to display detailed information about a specific command.
      https://symfony.com/doc/current/components/console/usage.html#displaying-the-help-for-a-command

  -
    question: >
      To allow a `Question` object to accept multiline input from the user, which method needs to be called?
    answers:
      - { value: "`setMultiline(true): self`", correct: true }
      - { value: "`allowMultiline(true): self`", correct: false }
      - { value: "`enableMultiline(): self`", correct: false }
      - { value: "`setAllowNewlines(true): self`", correct: false }
    help: |
      The `setMultiline(true)` method on a `Question` object configures it to read input until an end-of-transmission character (Ctrl-D on Unix, Ctrl-Z on Windows) is received.
      https://symfony.com/doc/current/components/console/helpers/questionhelper.html#asking-multiline-answers

  -
    question: >
      Which method of the `ConsoleTerminateEvent` allows you to modify the exit code of a command after its execution?
    answers:
      - { value: "`setExitCode(int $exitCode): void`", correct: true }
      - { value: "`setStatusCode(int $code): void`", correct: false }
      - { value: "`overrideExitCode(int $code): void`", correct: false }
      - { value: "`changeExitCode(int $code): void`", correct: false }
    help: |
      The `setExitCode()` method on `ConsoleTerminateEvent` provides an opportunity to alter the command's exit status before the application terminates.
      https://symfony.com/doc/current/components/console/events.html#consoleteterminateevent

  -
    question: >
      Which method of the `Application` class allows you to define and register a command directly with its execution logic (code) without creating a separate class?
    answers:
      - { value: "`register(string $name): Command`", correct: true }
      - { value: "`addCode(string $name, callable $code): void`", correct: false }
      - { value: "`defineCommand(string $name, callable $logic): void`", correct: false }
      - { value: "`create(string $name): Command`", correct: false }
    help: |
      The `register()` method allows for defining an inline command by chaining `addArgument()`, `addOption()`, and `setCode()` methods.
      https://symfony.com/doc/current/components/console.html#registering-commands

  -
    question: >
      Which Symfony Console class can be used to retrieve the current height and width of the terminal?
    answers:
      - { value: "`Symfony\\Component\\Console\\Terminal`", correct: true }
      - { value: "`Symfony\\Component\\Console\\Output\\ConsoleOutput`", correct: false }
      - { value: "`Symfony\\Component\\Console\\Input\\InputInterface`", correct: false }
      - { value: "`Symfony\\Component\\Console\\Helper\\ScreenHelper`", correct: false }
    help: |
      The `Terminal` class provides methods like `getHeight()` and `getWidth()` to query the dimensions of the console.
      https://symfony.com/doc/current/console.html#interacting-with-the-terminal

  -
    question: >
      What is the functional difference between `OutputInterface::writeln()` and `OutputInterface::write()`?
    answers:
      - { value: "`writeln()` adds a newline character at the end of the output, while `write()` does not.", correct: true }
      - { value: "`write()` outputs to `stdout` and `writeln()` outputs to `stderr`.", correct: false }
      - { value: "`writeln()` is for single lines, `write()` is for multiline output.", correct: false }
      - { value: "There is no functional difference; `writeln()` is an alias for `write()`.", correct: false }
    help: |
      `writeln()` is commonly used for displaying messages that should appear on their own line, whereas `write()` is for continuous output.
      https://symfony.com/doc/current/console.html#outputting-text

  -
    question: >
      What are the three standard verbosity levels controlled by the `--verbose` option (`-v`, `-vv`, `-vvv`) in Symfony Console?
    answers:
      - { value: "Normal, verbose, debug", correct: true }
      - { value: "Info, warning, error", correct: false }
      - { value: "Low, medium, high", correct: false }
      - { value: "Silent, quiet, normal", correct: false }
    help: |
      The verbosity levels are: `-v` (normal verbosity, default), `-vv` (more verbose output), and `-vvv` (debug-level verbosity).
      https://symfony.com/doc/current/console/input.html#global-options

  -
    question: >
      When is the `initialize()` method of a Symfony console command executed, and what is its main purpose?
    answers:
      - { value: "Before `interact()` and `execute()`; to initialize variables used in the command methods.", correct: true }
      - { value: "After `execute()`; to clean up resources.", correct: false }
      - { value: "Before any other method; to define arguments and options.", correct: false }
      - { value: "Only when the command is run in debug mode; to log initial state.", correct: false }
    help: |
      The `initialize()` method is an optional lifecycle hook executed early in the command's lifecycle, suitable for setting up internal variables.
      https://symfony.com/doc/current/console.html#command-lifecycle

  -
    question: >
      To manage dynamic console output, such as progress bars or real-time updates, which feature of the `OutputInterface` can be used to create independent output areas?
    answers:
      - { value: "Output sections", correct: true }
      - { value: "Output layers", correct: false }
      - { value: "Output buffers", correct: false }
      - { value: "Output streams", correct: false }
    help: |
      Output sections allow you to define independent areas in the console output that can be overwritten or cleared dynamically.
      https://symfony.com/doc/current/console.html#output-sections

  -
    question: |
      Given an option defined as `--iterations=5`, how would you retrieve its value within the `execute` method of a command?
    answers:
      - { value: "`$input->getOption('iterations')`", correct: true }
      - { value: "`$input->getArgument('iterations')`", correct: false }
      - { value: "`$input->option('iterations')`", correct: false }
      - { value: "`$input->get('iterations')`", correct: false }
    help: |
      Options are retrieved using the `getOption()` method of the `InputInterface`.
      https://symfony.com/doc/current/console/input.html#accessing-options

  -
    question: >
      How can you retrieve the current column and row coordinates of the console cursor using the `Cursor` helper?
    answers:
      - { value: "`$cursor->getCurrentPosition(): array`", correct: true }
      - { value: "`$cursor->getPosition(): array`", correct: false }
      - { value: "`$cursor->getCoordinates(): array`", correct: false }
      - { value: "`$cursor->whereAmI(): array`", correct: false }
    help: |
      The `getCurrentPosition()` method returns an array containing the column (x-coordinate) and row (y-coordinate) of the cursor.
      https://symfony.com/doc/current/components/console/helpers/cursor.html#getting-the-current-cursor-position

  -
    question: >
      If an exception is thrown during the execution of a Symfony console command, which event is dispatched?
    answers:
      - { value: "`Symfony\\Component\\Console\\Event\\ConsoleErrorEvent`", correct: true }
      - { value: "`Symfony\\Component\\Console\\Event\\ConsoleExceptionEvent`", correct: false }
      - { value: "`Symfony\\Component\\Console\\Event\\CommandFailedEvent`", correct: false }
      - { value: "`Symfony\\Component\\Console\\Event\\ErrorEvent`", correct: false }
    help: |
      The `ConsoleErrorEvent` is dispatched whenever an exception occurs during a command's execution, allowing listeners to handle or modify the error.
      https://symfony.com/doc/current/components/console/events.html#consoleerrorevent

  -
    question: >
      Which `SymfonyStyle` method is used to present a list of predefined options to the user and allow them to select one?
    answers:
      - { value: "`choice(string $question, array $choices, mixed $default = null): mixed`", correct: true }
      - { value: "`select(string $question, array $options): mixed`", correct: false }
      - { value: "`askChoice(string $question, array $choices): mixed`", correct: false }
      - { value: "`menu(string $question, array $items): mixed`", correct: false }
    help: |
      The `choice()` method simplifies asking the user to select from a list of valid answers.
      https://symfony.com/doc/current/console/style.html#asking-for-a-choice

  -
    question: >
      What is the purpose of the `name` property in the `#[AsCommand]` attribute?
    answers:
      - { value: "To define the unique name used to invoke the command from the terminal.", correct: true }
      - { value: "To specify the service ID of the command in the container.", correct: false }
      - { value: "To set the display title of the command in the help output.", correct: false }
      - { value: "To group commands under a common namespace.", correct: false }
    help: |
      The `name` property is mandatory and defines how the command is called from the command line (e.g., `app:create-user`).
      https://symfony.com/doc/current/console.html#configuring-the-command

  -
    question: >
      If you have commands `app:foo` and `app:bar`, and no other command starts with 'f', can you execute `app:foo` using `php bin/console f`?
    answers:
      - { value: "Yes, Symfony Console allows using the shortest unambiguous name.", correct: true }
      - { value: "No, you must always provide the full command name.", correct: false }
      - { value: "Only if `app:foo` is the only command in its namespace.", correct: false }
      - { value: "Only if an alias 'f' is explicitly defined for `app:foo`.", correct: false }
    help: |
      Symfony Console supports executing commands using the shortest unambiguous name, which can save typing.
      https://symfony.com/doc/current/components/console/usage.html#using-unambiguous-short-names

  -
    question: >
      Which class is specifically designed for unit testing the autocompletion logic of Symfony console commands?
    answers:
      - { value: "`Symfony\\Component\\Console\\Tester\\CommandCompletionTester`", correct: true }
      - { value: "`Symfony\\Component\\Console\\Tester\\InputCompletionTester`", correct: false }
      - { value: "`Symfony\\Component\\Console\\Tester\\AutocompleteTester`", correct: false }
      - { value: "`Symfony\\Component\\Console\\Completion\\CompletionTester`", correct: false }
    help: |
      `CommandCompletionTester` is a dedicated tool for verifying that your command's autocompletion suggestions work as expected.
      https://symfony.com/doc/current/console/input.html#unit-testing-command-completion

  -
    question: >
      An option is defined with `InputOption::VALUE_IS_ARRAY`. How would a user typically provide multiple values for this option from the command line?
    answers:
      - { value: "By repeating the option multiple times, e.g., `--dir=/foo --dir=/bar`.", correct: true }
      - { value: "By providing a comma-separated list, e.g., `--dir=/foo,/bar`.", correct: false }
      - { value: "By enclosing values in quotes and spaces, e.g., `--dir=\"/foo /bar\"`.", correct: false }
      - { value: "By using square brackets, e.g., `--dir=[/foo, /bar]`.", correct: false }
    help: |
      For `VALUE_IS_ARRAY` options, each value is provided by repeating the option flag.
      https://symfony.com/doc/current/console/input.html#options

  -
    question: >
      Which helper class is primarily used for asking questions to the user in a Symfony console command, including confirmation and choice questions?
    answers:
      - { value: "`Symfony\\Component\\Console\\Helper\\QuestionHelper`", correct: true }
      - { value: "`Symfony\\Component\\Console\\Helper\\DialogHelper`", correct: false }
      - { value: "`Symfony\\Component\\Console\\Helper\\PromptHelper`", correct: false }
      - { value: "`Symfony\\Component\\Console\\Helper\\InteractionHelper`", correct: false }
    help: |
      `QuestionHelper` provides methods like `ask()` for general questions, `askConfirmation()` for yes/no questions, and `askChoice()` for multiple-choice questions.
      https://symfony.com/doc/current/components/console/helpers/questionhelper.html

  -
    question: >
      If a Symfony console command receives a signal (e.g., Ctrl+C), which event is dispatched, and what method can prevent the command from exiting immediately?
    answers:
      - { value: "`ConsoleSignalEvent`; `abortExit()`", correct: true }
      - { value: "`ConsoleTerminateEvent`; `preventTermination()`", correct: false }
      - { value: "`ConsoleInterruptEvent`; `continueExecution()`", correct: false }
      - { value: "`ConsoleShutdownEvent`; `ignoreSignal()`", correct: false }
    help: |
      The `ConsoleSignalEvent` is dispatched when a signal is received. The `abortExit()` method can be called within a listener to prevent the command from immediately exiting.
      https://symfony.com/doc/current/components/console/events.html#consolesignalevent

  -
    question: |
      How can you define and apply a custom console output style with specific foreground, background, and options (e.g., bold, blink) in Symfony?
    answers:
      - { value: "Create an `OutputFormatterStyle` instance, configure it, and register it with `OutputFormatter::setStyle()`.", correct: true }
      - { value: "Extend `SymfonyStyle` and override its styling methods.", correct: false }
      - { value: "Define the style directly in `services.yaml` under a `console.style` tag.", correct: false }
      - { value: "Use `OutputInterface::addStyle()` with an array of properties.", correct: false }
    help: |
      `OutputFormatterStyle` allows granular control over text appearance, and `OutputFormatter::setStyle()` makes it available for use with tags.
      https://symfony.com/doc/current/console/coloring.html#defining-new-styles

  -
    question: >
      Which class is used to implement lazy loading of commands by providing an array of factories (callables) that create command instances on demand?
    answers:
      - { value: "`Symfony\\Component\\Console\\CommandLoader\\FactoryCommandLoader`", correct: true }
      - { value: "`Symfony\\Component\\Console\\CommandLoader\\ContainerCommandLoader`", correct: false }
      - { value: "`Symfony\\Component\\Console\\CommandLoader\\LazyLoader`", correct: false }
      - { value: "`Symfony\\Component\\Console\\CommandLoader\\CallableCommandLoader`", correct: false }
    help: |
      `FactoryCommandLoader` is suitable for lazy loading when you have a map of command names to callables that produce command instances.
      https://symfony.com/doc/current/console/lazy_commands.html#lazy-loading-commands

  -
    question: >
      If an optional option is defined without a default value, and the user does not provide it, what value will `InputInterface::getOption()` return for that option?
    answers:
      - { value: "`null`", correct: true }
      - { value: "An empty string `''`", correct: false }
      - { value: "`false`", correct: false }
      - { value: "An empty array `[]`", correct: false }
    help: |
      For optional options without a default value, `getOption()` returns `null` if the option is not provided.
      https://symfony.com/doc/current/console/input.html#options

  -
    question: >
      What is the purpose of the `--version` or `-V` global option when running a Symfony Console application?
    answers:
      - { value: "To display the version number of the console application.", correct: true }
      - { value: "To display the Symfony framework version.", correct: false }
      - { value: "To show the version of the PHP interpreter being used.", correct: false }
      - { value: "To list all commands and their versions.", correct: false }
    help: |
      The `--version` or `-V` option outputs the name and version of the console application.
      https://symfony.com/doc/current/components/console/usage.html#displaying-the-application-version

  -
    question: >
      To explicitly write a message to the standard error stream (`stderr`) using `SymfonyStyle`, which method chain should be used?
    answers:
      - { value: "`$io->getErrorStyle()->warning('Debugging information or errors');`", correct: true }
      - { value: "`$io->error('Debugging information or errors');`", correct: false }
      - { value: "`$io->stderr->writeln('Debugging information or errors');`", correct: false }
      - { value: "`$io->writeError('Debugging information or errors');`", correct: false }
    help: |
      `getErrorStyle()` returns a `SymfonyStyle` instance configured to write to `stderr`, allowing you to use all `SymfonyStyle` methods for error output.
      https://symfony.com/doc/current/console/style.html#writing-to-standard-and-error-output-streams

  -
    question: >
      In Symfony 7, what is the preferred method for defining the main execution logic of a console command?
    answers:
      - { value: "The `__invoke()` method.", correct: true }
      - { value: "The `execute()` method.", correct: false }
      - { value: "The `run()` method.", correct: false }
      - { value: "The `process()` method.", correct: false }
    help: |
      While `execute()` is still supported, `__invoke()` is the modern and recommended approach for defining the command's primary logic in Symfony 7.
      https://symfony.com/doc/current/console.html#defining-the-command-as-a-service

  -
    question: >
      Which methods of the `Cursor` class allow you to control the visibility of the console cursor?
    answers:
      - { value: "`hide(): void` and `show(): void`", correct: true }
      - { value: "`toggleVisibility(): void`", correct: false }
      - { value: "`setCursorVisible(bool $visible): void`", correct: false }
      - { value: "`enableCursor(): void` and `disableCursor(): void`", correct: false }
    help: |
      The `hide()` and `show()` methods are used to make the cursor invisible or visible, respectively.
      https://symfony.com/doc/current/components/console/helpers/cursor.html#hiding-the-cursor

  -
    question: >
      In what order are the `ConsoleCommandEvent`, `ConsoleErrorEvent`, and `ConsoleTerminateEvent` typically dispatched during a command's lifecycle?
    answers:
      - { value: "`ConsoleCommandEvent` -> (`ConsoleErrorEvent` if error) -> `ConsoleTerminateEvent`", correct: true }
      - { value: "`ConsoleTerminateEvent` -> `ConsoleCommandEvent` -> `ConsoleErrorEvent`", correct: false }
      - { value: "`ConsoleErrorEvent` -> `ConsoleCommandEvent` -> `ConsoleTerminateEvent`", correct: false }
      - { value: "The order is non-deterministic and depends on the command's implementation.", correct: false }
    help: |
      `ConsoleCommandEvent` is dispatched before execution, `ConsoleErrorEvent` on exception, and `ConsoleTerminateEvent` after execution (regardless of success or failure).
      https://symfony.com/doc/current/components/console/events.html

  -
    question: |
      An option is defined with `InputOption::VALUE_OPTIONAL`. If the command is executed with `--my-option`, what value will `InputInterface::getOption('my-option')` return? What if it's executed with `--my-option=some_value`?
    answers:
      - { value: "Returns `true` if `--my-option` is present without a value; returns `'some_value'` if `--my-option=some_value` is used.", correct: true }
      - { value: "Returns `null` if `--my-option` is present without a value; returns `'some_value'` if `--my-option=some_value` is used.", correct: false }
      - { value: "Returns an empty string `''` if `--my-option` is present without a value; returns `'some_value'` if `--my-option=some_value` is used.", correct: false }
      - { value: "Returns `false` if `--my-option` is present without a value; returns `'some_value'` if `--my-option=some_value` is used.", correct: false }
    help: |
      `InputOption::VALUE_OPTIONAL` means the option can be present with or without a value. If no value is provided, it defaults to `true`.
      https://symfony.com/doc/current/console/input.html#options

  -
    question: >
      What is the purpose of the `setValidator()` method on a `Symfony\Component\Console\Question\Question` object?
    answers:
      - { value: "To define a callback function that validates the user's input.", correct: true }
      - { value: "To set the regular expression for validating the answer format.", correct: false }
      - { value: "To specify a Symfony Validator constraint for the input.", correct: false }
      - { value: "To configure the maximum length of the user's answer.", correct: false }
    help: |
      The `setValidator()` method allows you to provide a callable that will be used to validate the user's response to a question.
      https://symfony.com/doc/current/components/console/helpers/questionhelper.html#validating-the-answer

  -
    question: >
      When defining command arguments, which `InputArgument` constant should be used if the argument can accept multiple values, like a list of names?
    answers:
      - { value: "`InputArgument::IS_ARRAY`", correct: true }
      - { value: "`InputArgument::MULTIPLE`", correct: false }
      - { value: "`InputArgument::COLLECTION`", correct: false }
      - { value: "`InputArgument::LIST`", correct: false }
    help: |
      `InputArgument::IS_ARRAY` allows an argument to be provided multiple times, resulting in an array of values.
      https://symfony.com/doc/current/console/input.html#arguments

  -
    question: >
      What is the default exit code returned by a Symfony console command upon successful execution?
    answers:
      - { value: "`0` (or `Command::SUCCESS`)", correct: true }
      - { value: "`1` (or `Command::FAILURE`)", correct: false }
      - { value: "`null`", correct: false }
      - { value: "The exit code is determined by the last executed statement.", correct: false }
    help: |
      By convention, a `0` exit code indicates success, and `Command::SUCCESS` is a constant for this.
      https://symfony.com/doc/current/console.html#returning-an-exit-status

  -
    question: >
      Which global option can be used to disable interactive prompts when running a Symfony console command?
    answers:
      - { value: "`--no-interaction`", correct: true }
      - { value: "`--non-interactive`", correct: false }
      - { value: "`--force`", correct: false }
      - { value: "`--auto`", correct: false }
    help: |
      The `--no-interaction` option prevents the command from asking any questions or confirmations to the user.
      https://symfony.com/doc/current/console/input.html#global-options

  -
    question: >
      What is the purpose of `Symfony\Component\Console\CommandLoader\ContainerCommandLoader`?
    answers:
      - { value: "To load commands as services from a PSR-11 compatible container.", correct: true }
      - { value: "To load commands from a YAML configuration file.", correct: false }
      - { value: "To automatically discover commands based on their class names.", correct: false }
      - { value: "To compile commands into a single executable file.", correct: false }
    help: |
      `ContainerCommandLoader` integrates with a service container to lazy-load commands, treating them as services.
      https://symfony.com/doc/current/console/lazy_commands.html#lazy-loading-commands

  -
    question: >
      When using `SymfonyStyle::choice()`, how can you specify a default answer that is pre-selected if the user just presses Enter?
    answers:
      - { value: "By passing the default value as the third argument to `choice()`.", correct: true }
      - { value: "By setting the `default` option in the command's definition.", correct: false }
      - { value: "By calling `setDefault()` on the `SymfonyStyle` instance.", correct: false }
      - { value: "By making the first element in the `$choices` array the default.", correct: false }
    help: |
      The `choice()` method allows you to specify a default value that will be used if the user provides no input.
      https://symfony.com/doc/current/console/style.html#asking-for-a-choice

  -
    question: >
      Which method of the `Symfony\Component\Console\Cursor` class would you use to move the cursor up by a specified number of lines?
    answers:
      - { value: "`moveUp(int $lines = 1): void`", correct: true }
      - { value: "`cursorUp(int $lines = 1): void`", correct: false }
      - { value: "`up(int $lines = 1): void`", correct: false }
      - { value: "`lineUp(int $lines = 1): void`", correct: false }
    help: |
      The `moveUp()` method moves the cursor relatively upwards from its current position.
      https://symfony.com/doc/current/components/console/helpers/cursor.html#moving-the-cursor

  -
    question: >
      What is the purpose of the `setErrorMessage()` method on `Symfony\Component\Console\Question\ChoiceQuestion`?
    answers:
      - { value: "To define the message displayed when the user enters an invalid choice.", correct: true }
      - { value: "To set the error message for the command's overall execution.", correct: false }
      - { value: "To specify an error message if the question cannot be asked.", correct: false }
      - { value: "To provide a default error message for all questions.", correct: false }
    help: |
      `setErrorMessage()` allows you to customize the message shown to the user when they provide an answer that is not among the valid choices.
      https://symfony.com/doc/current/components/console/helpers/questionhelper.html#asking-for-a-choice

  -
    question: >
      Which Symfony Console component is responsible for parsing command-line arguments and options?
    answers:
      - { value: "The `Input` component.", correct: true }
      - { value: "The `Console` component itself.", correct: false }
      - { value: "The `Parser` component.", correct: false }
      - { value: "The `ArgumentResolver` component.", correct: false }
    help: |
      The `Input` component (represented by `InputInterface` and its implementations) handles the parsing of command-line input.
      https://symfony.com/doc/current/console/input.html

  -
    question: >
      What does the `clearLine()` method of the `Symfony\Component\Console\Cursor` class do?
    answers:
      - { value: "Clears all output from the current line.", correct: true }
      - { value: "Clears the line after the current cursor position.", correct: false }
      - { value: "Clears the entire screen.", correct: false }
      - { value: "Deletes the character at the current cursor position.", correct: false }
    help: |
      `clearLine()` removes all text on the current line where the cursor is located.
      https://symfony.com/doc/current/components/console/helpers/cursor.html#clearing-the-output

  -
    question: >
      When defining a console command, what is the purpose of the `description` property in the `#[AsCommand]` attribute?
    answers:
      - { value: "To provide a short description of the command, displayed in the `list` and `help` output.", correct: true }
      - { value: "To provide a detailed, multi-line explanation of the command's functionality.", correct: false }
      - { value: "To define the command's usage syntax.", correct: false }
      - { value: "To specify the command's category or namespace.", correct: false }
    help: |
      The `description` property provides a concise summary of what the command does, visible in command listings.
      https://symfony.com/doc/current/console.html#configuring-the-command

  -
    question: >
      How can you retrieve the value of a command-line argument named `name` within the `execute` or `__invoke` method of a Symfony console command?
    answers:
      - { value: "`$input->getArgument('name')`", correct: true }
      - { value: "`$input->getOption('name')`", correct: false }
      - { value: "`$input->argument('name')`", correct: false }
      - { value: "`$input->get('name')`", correct: false }
    help: |
      Arguments are accessed via the `getArgument()` method of the `InputInterface`.
      https://symfony.com/doc/current/console/input.html#accessing-arguments

  -
    question: >
      What is the primary benefit of using lazy-loaded commands in a Symfony Console application?
    answers:
      - { value: "Improved application startup performance by only loading command classes when needed.", correct: true }
      - { value: "Reduced memory consumption during command execution.", correct: false }
      - { value: "Simplified command definition and registration.", correct: false }
      - { value: "Enhanced security by preventing unauthorized command execution.", correct: false }
    help: |
      Lazy loading defers the instantiation of command classes until they are actually invoked, which can significantly speed up application startup, especially for applications with many commands.
      https://symfony.com/doc/current/console/lazy_commands.html

  -
    question: >
      Which `SymfonyStyle` method is used to ask a simple question and retrieve a text input from the user?
    answers:
      - { value: "`ask(string $question, string $default = null): string`", correct: true }
      - { value: "`prompt(string $question): string`", correct: false }
      - { value: "`query(string $question): string`", correct: false }
      - { value: "`input(string $question): string`", correct: false }
    help: |
      The `ask()` method displays a question and waits for the user's textual response, optionally providing a default value.
      https://symfony.com/doc/current/console/style.html#asking-for-input

  -
    question: >
      What is the purpose of `Symfony\Component\Console\SignalRegistry\SignalMap`?
    answers:
      - { value: "To map signal integer values to their human-readable names.", correct: true }
      - { value: "To register signal handlers for console commands.", correct: false }
      - { value: "To send signals to running console processes.", correct: false }
      - { value: "To configure which signals a command should listen for.", correct: false }
    help: |
      `SignalMap` is a utility class that helps in understanding and debugging signals by providing their names from their integer values.
      https://symfony.com/doc/current/components/console/events.html#console-signal-event

  -
    question: >
      When defining an option, which `InputOption` constant indicates that the option may or may not have a value (e.g., `--yell` or `--yell=loud`)?
    answers:
      - { value: "`InputOption::VALUE_OPTIONAL`", correct: true }
      - { value: "`InputOption::VALUE_NONE`", correct: false }
      - { value: "`InputOption::VALUE_REQUIRED`", correct: false }
      - { value: "`InputOption::VALUE_MAYBE`", correct: false }
    help: |
      `VALUE_OPTIONAL` allows the option to be a simple flag or to accept an associated value.
      https://symfony.com/doc/current/console/input.html#options

  -
    question: >
      Which built-in Symfony Console command is used to clear the application's cache?
    answers:
      - { value: "`cache:clear`", correct: true }
      - { value: "`app:clear-cache`", correct: false }
      - { value: "`clear:cache`", correct: false }
      - { value: "`cache:flush`", correct: false }
    help: |
      `cache:clear` is a fundamental built-in command for managing the Symfony cache.
      https://symfony.com/doc/current/console.html#built-in-commands (Implicit knowledge, but a very common built-in command)

  -
    question: >
      What is the purpose of the `setMultiselect(bool $multiselect): self` method on `Symfony\Component\Console\Question\ChoiceQuestion`?
    answers:
      - { value: "To allow the user to select multiple answers from the list of choices.", correct: true }
      - { value: "To enable or disable the display of multiple choice options.", correct: false }
      - { value: "To set whether the question can be answered by multiple users simultaneously.", correct: false }
      - { value: "To define if the user must select at least one option.", correct: false }
    help: |
      When `setMultiselect(true)` is called, the user can select more than one option from the provided choices.
      https://symfony.com/doc/current/components/console/helpers/questionhelper.html#asking-for-a-choice

  -
    question: >
      How would you typically install the Symfony Console component as a standalone library in a PHP project using Composer?
    answers:
      - { value: "`composer require symfony/console`", correct: true }
      - { value: "`composer install symfony/console`", correct: false }
      - { value: "`composer add symfony/console`", correct: false }
      - { value: "`composer get symfony/console`", correct: false }
    help: |
      The `composer require` command is used to add new dependencies to a project.
      https://symfony.com/doc/current/components/console.html#installation

  -
    question: >
      What is the purpose of `Symfony\Component\Console\Helper\DebugFormatterHelper`?
    answers:
      - { value: "To format debug messages for console output, often with prefixes like RUN, OUT, ERR, RES.", correct: true }
      - { value: "To provide a helper for debugging command execution flow.", correct: false }
      - { value: "To format exceptions and stack traces for console display.", correct: false }
      - { value: "To enable verbose logging for console commands.", correct: false }
    help: |
      The `DebugFormatterHelper` provides methods to format output related to external processes or debugging, making it easier to distinguish different types of messages.
      https://symfony.com/doc/current/components/console/helpers/debug_formatter.html

  -
    question: >
      Which method of the `ConsoleErrorEvent` allows you to change the exception that caused the error?
    answers:
      - { value: "`setError(\Throwable $error): void`", correct: true }
      - { value: "`setException(\Throwable $exception): void`", correct: false }
      - { value: "`replaceError(\Throwable $newError): void`", correct: false }
      - { value: "`changeException(\Throwable $exception): void`", correct: false }
    help: |
      The `setError()` method enables an event listener to replace the original exception with a different one, potentially altering how the error is handled or displayed.
      https://symfony.com/doc/current/components/console/events.html#consoleerrorevent

  -
    question: >
      In a Symfony console command, what is the correct way to define a required option that accepts a value, for example, `--env=prod`?
    answers:
      - { value: "`new InputOption('env', null, InputOption::VALUE_REQUIRED, 'The environment name')`", correct: true }
      - { value: "`new InputOption('env', null, InputOption::REQUIRED, 'The environment name')`", correct: false }
      - { value: "`new InputOption('env', null, InputOption::VALUE_IS_REQUIRED, 'The environment name')`", correct: false }
      - { value: "`new InputOption('env', null, true, 'The environment name')`", correct: false }
    help: |
      `InputOption::VALUE_REQUIRED` indicates that if the option is present, it must be accompanied by a value.
      https://symfony.com/doc/current/console/input.html#options

  -
    question: >
      What is the purpose of the `ConsoleCommandEvent::commandShouldRun(): bool` method?
    answers:
      - { value: "To check if the command is currently enabled and allowed to run by listeners.", correct: true }
      - { value: "To determine if the command has any pending tasks to execute.", correct: false }
      - { value: "To verify if the command's arguments and options are valid.", correct: false }
      - { value: "To check if the command is a built-in Symfony command.", correct: false }
    help: |
      This method returns `true` if the command is enabled (i.e., `disableCommand()` has not been called or `enableCommand()` has re-enabled it).
      https://symfony.com/doc/current/components/console/events.html#consolecommandevent

  -
    question: >
      Which method of the `Symfony\Component\Console\Cursor` class would you use to clear all output from the current cursor position to the end of the screen?
    answers:
      - { value: "`clearOutput(): void`", correct: true }
      - { value: "`clearToEnd(): void`", correct: false }
      - { value: "`eraseToEnd(): void`", correct: false }
      - { value: "`clearRemaining(): void`", correct: false }
    help: |
      `clearOutput()` clears the console from the current cursor position to the bottom right of the screen.
      https://symfony.com/doc/current/components/console/helpers/cursor.html#clearing-the-output

  -
    question: >
      When testing a Symfony console command with `CommandTester`, how would you pass an array value to an option, e.g., `--names=Alice --names=Bob`?
    answers:
      - { value: "By providing an array for the option key: `'--names' => ['Alice', 'Bob']`", correct: true }
      - { value: "By providing a comma-separated string: `'--names' => 'Alice,Bob'`", correct: false }
      - { value: "By repeating the key: `'--names' => 'Alice', '--names' => 'Bob'`", correct: false }
      - { value: "By using a JSON string: `'--names' => '[\"Alice\", \"Bob\"]'`", correct: false }
    help: |
      `CommandTester` expects an array for options that are configured as `InputOption::VALUE_IS_ARRAY`.
      https://symfony.com/doc/current/console.html#testing-commands

  -
    question: >
      What is the purpose of the `setExitCode(int $exitCode): void` method on `ConsoleSignalEvent`?
    answers:
      - { value: "To set the exit code that the command will return after the signal event is handled.", correct: true }
      - { value: "To set the signal number that the command will handle.", correct: false }
      - { value: "To change the default exit code for all console commands.", correct: false }
      - { value: "To force the command to exit with a specific code immediately.", correct: false }
    help: |
      This method allows listeners to determine the command's final exit status in response to a signal.
      https://symfony.com/doc/current/components/console/events.html#consolesignalevent

  -
    question: >
      Which `SymfonyStyle` method is suitable for displaying a large block of text, often formatted as a blockquote or a note?
    answers:
      - { value: "`block(string|array $messages, string $type = null, string $style = null, string $prefix = ' ', bool $padding = false, bool $escape = true): void`", correct: true }
      - { value: "`note(string|array $messages): void`", correct: true }
      - { value: "`text(string|array $messages): void`", correct: false }
      - { value: "`comment(string|array $messages): void`", correct: false }
    help: |
      The `block()` method provides a flexible way to display styled blocks of text. `note()` is a specific type of block.
      https://symfony.com/doc/current/console/style.html#blocks

  -
    question: >
      What is the primary role of the `Symfony\Component\Console\Application` class?
    answers:
      - { value: "To manage and run console commands.", correct: true }
      - { value: "To parse command-line arguments and options.", correct: false }
      - { value: "To provide a framework for building web applications.", correct: false }
      - { value: "To handle HTTP requests and responses.", correct: false }
    help: |
      The `Application` class is the entry point for Symfony Console applications, responsible for registering and executing commands.
      https://symfony.com/doc/current/components/console.html#a-basic-console-application

  -
    question: >
      When using `SymfonyStyle`, how can you display a progress bar for long-running operations?
    answers:
      - { value: "By using the `progressStart()`, `progressAdvance()`, and `progressFinish()` methods.", correct: true }
      - { value: "By using the `progressBar()` helper.", correct: false }
      - { value: "By calling `startProgress()`, `advanceProgress()`, `finishProgress()`.", correct: false }
      - { value: "By injecting `ProgressBarHelper`.", correct: false }
    help: |
      `SymfonyStyle` provides convenient methods for managing progress bars directly.
      https://symfony.com/doc/current/console/style.html#progress-bar

  -
    question: >
      What is the purpose of the `setValidator()` method on `Symfony\Component\Console\Question\Question`?
    answers:
      - { value: "To define a callback function that validates the user's input.", correct: true }
      - { value: "To set the regular expression for validating the answer format.", correct: false }
      - { value: "To specify a Symfony Validator constraint for the input.", correct: false }
      - { value: "To configure the maximum length of the user's answer.", correct: false }
    help: |
      The `setValidator()` method allows you to provide a callable that will be used to validate the user's response to a question.
      https://symfony.com/doc/current/components/console/helpers/questionhelper.html#validating-the-answer

  -
    question: >
      Which `InputOption` constant indicates that an option does not accept any value and acts as a boolean flag (e.g., `--verbose`)?
    answers:
      - { value: "`InputOption::VALUE_NONE`", correct: true }
      - { value: "`InputOption::VALUE_FLAG`", correct: false }
      - { value: "`InputOption::VALUE_BOOLEAN`", correct: false }
      - { value: "`InputOption::VALUE_NO_VALUE`", correct: false }
    help: |
      `VALUE_NONE` is used for options that are simply present or absent, returning `true` or `false` respectively.
      https://symfony.com/doc/current/console/input.html#options

  -
    question: >
      What is the purpose of the `Symfony\Component\Console\Helper\Table` helper?
    answers:
      - { value: "To render tabular data in the console output.", correct: true }
      - { value: "To create interactive tables for user input.", correct: false }
      - { value: "To display data in a spreadsheet-like format.", correct: false }
      - { value: "To manage database tables from the console.", correct: false }
    help: |
      The `Table` helper simplifies the process of displaying data in a well-formatted table structure in the console.
      https://symfony.com/doc/current/components/console/helpers/table.html (Implicit knowledge, but a very common helper)

  -
    question: >
      How can you apply a predefined console color style, such as green text for information messages, using `OutputInterface`?
    answers:
      - { value: "By wrapping the text in `<info>` tags: `$output->writeln('<info>Your message</info>');`", correct: true }
      - { value: "By calling `$output->info('Your message');`", correct: false }
      - { value: "By setting the foreground color: `$output->writeln('<fg=green>Your message</>');`", correct: false }
      - { value: "By using a CSS-like style: `$output->writeln('<style color="green">Your message</style>');`", correct: false }
    help: |
      Symfony Console provides several predefined tags for common styles like `info`, `comment`, `question`, and `error`.
      https://symfony.com/doc/current/console/coloring.html#predefined-styles

  -
    question: >
      What is the primary difference between `InputArgument::OPTIONAL` and `InputArgument::REQUIRED`?
    answers:
      - { value: "`OPTIONAL` arguments can be omitted, while `REQUIRED` arguments must always be provided.", correct: true }
      - { value: "`OPTIONAL` arguments have a default value, while `REQUIRED` arguments do not.", correct: false }
      - { value: "`OPTIONAL` arguments are passed as options, while `REQUIRED` arguments are positional.", correct: false }
      - { value: "`OPTIONAL` arguments are validated, while `REQUIRED` arguments are not.", correct: false }
    help: |
      This distinction defines whether the argument is mandatory for the command to run.
      https://symfony.com/doc/current/console/input.html#arguments

  -
    question: >
      Which built-in Symfony Console command is used to display information about the current Symfony environment and debug settings?
    answers:
      - { value: "`about`", correct: true }
      - { value: "`debug:info`", correct: false }
      - { value: "`config:show`", correct: false }
      - { value: "`env:status`", correct: false }
    help: |
      The `about` command provides a quick overview of the Symfony application's environment, kernel, and other useful details.
      https://symfony.com/doc/current/console.html#built-in-commands (Implicit knowledge, but a very common built-in command)

  -
    question: >
      What is the purpose of the `setErrorMessage()` method on `Symfony\Component\Console\Question\ConfirmationQuestion`?
    answers:
      - { value: "To define the message displayed when the user provides an invalid confirmation (not 'y' or 'n').", correct: true }
      - { value: "To set the error message for the command's overall execution.", correct: false }
      - { value: "To specify an error message if the question cannot be asked.", correct: false }
      - { value: "To provide a default error message for all confirmation questions.", correct: false }
    help: |
      `setErrorMessage()` allows you to customize the message shown when the user's input for a confirmation question does not match the expected 'yes' or 'no' pattern.
      https://symfony.com/doc/current/components/console/helpers/questionhelper.html#asking-for-confirmation

  -
    question: >
      How can you get the current exit code of a command from within a `ConsoleTerminateEvent` listener?
    answers:
      - { value: "`$event->getExitCode(): int`", correct: true }
      - { value: "`$event->getStatusCode(): int`", correct: false }
      - { value: "`$event->getReturnCode(): int`", correct: false }
      - { value: "`$event->getResultCode(): int`", correct: false }
    help: |
      The `getExitCode()` method provides the current exit status of the command, which can then be modified if needed.
      https://symfony.com/doc/current/components/console/events.html#consoleteterminateevent

  -
    question: >
      Which global option can be used to explicitly disable output coloring in the console?
    answers:
      - { value: "`--no-ansi`", correct: true }
      - { value: "`--no-color`", correct: false }
      - { value: "`--plain`", correct: false }
      - { value: "`--raw`", correct: false }
    help: |
      The `--no-ansi` option forces the console output to be plain text, without any ANSI escape codes for coloring.
      https://symfony.com/doc/current/console/input.html#global-options

  -
    question: >
      What is the purpose of the `Symfony\Component\Console\Question\ConfirmationQuestion` class?
    answers:
      - { value: "To ask the user a 'yes' or 'no' question.", correct: true }
      - { value: "To confirm a user's action before proceeding.", correct: false }
      - { value: "To ask a question that requires a boolean answer.", correct: false }
      - { value: "To validate a user's input against a predefined set of rules.", correct: false }
    help: |
      `ConfirmationQuestion` is a specialized `Question` for simple yes/no prompts, often with a default answer.
      https://symfony.com/doc/current/components/console/helpers/questionhelper.html#asking-for-confirmation

  -
    question: >
      When defining a console command, what is the purpose of the `aliases` property in the `#[AsCommand]` attribute?
    answers:
      - { value: "To provide alternative names that can be used to invoke the command.", correct: true }
      - { value: "To define short options for the command's arguments.", correct: false }
      - { value: "To specify the command's namespace.", correct: false }
      - { value: "To link the command to other related commands.", correct: false }
    help: |
      Aliases allow a command to be called using different names, providing flexibility for users.
      https://symfony.com/doc/current/console.html#configuring-the-command

  -
    question: >
      Which built-in Symfony Console command is used to display the routing configuration of the application?
    answers:
      - { value: "`debug:router`", correct: true }
      - { value: "`router:list`", correct: false }
      - { value: "`route:show`", correct: false }
      - { value: "`app:routes`", correct: false }
    help: |
      `debug:router` is a very useful command for inspecting the application's defined routes.
      https://symfony.com/doc/current/routing.html#listing-routes (Implicit knowledge, but a very common built-in command)

  -
    question: >
      What is the recommended way to handle user input and output in a Symfony console command for better testability and consistency?
    answers:
      - { value: "Injecting `InputInterface` and `OutputInterface` into the command's `__invoke` or `execute` method.", correct: true }
      - { value: "Using global `STDIN` and `STDOUT` streams directly.", correct: false }
      - { value: "Relying on `echo` and `readline()` functions.", correct: false }
      - { value: "Accessing a static `Console` class for I/O operations.", correct: false }
    help: |
      Dependency injection of `InputInterface` and `OutputInterface` (or `SymfonyStyle`) promotes testability and adherence to Symfony's architecture.
      https://symfony.com/doc/current/console.html#input-and-output

  -
    question: >
      When using `SymfonyStyle`, how can you display a success message with a green background and checkmark?
    answers:
      - { value: "`$io->success('Operation completed successfully!');`", correct: true }
      - { value: "`$io->ok('Operation completed successfully!');`", correct: false }
      - { value: "`$io->green('Operation completed successfully!');`", correct: false }
      - { value: "`$io->info('Operation completed successfully!');`", correct: false }
    help: |
      The `success()` method is a specialized `SymfonyStyle` method for displaying positive feedback.
      https://symfony.com/doc/current/console/style.html#messages

  -
    question: >
      What is the purpose of the `ConsoleCommandEvent::enableCommand(): void` method?
    answers:
      - { value: "To re-enable a command that was previously disabled by a listener.", correct: true }
      - { value: "To explicitly allow a command to run, overriding any restrictions.", correct: false }
      - { value: "To mark a command as active for the current application run.", correct: false }
      - { value: "To enable command autocompletion for the current session.", correct: false }
    help: |
      If a command was disabled by a listener using `disableCommand()`, `enableCommand()` can be used to allow it to proceed.
      https://symfony.com/doc/current/components/console/events.html#consolecommandevent

  -
    question: >
      Which built-in Symfony Console command is used to display the current configuration of the application?
    answers:
      - { value: "`debug:config`", correct: true }
      - { value: "`config:show`", correct: false }
      - { value: "`app:config`", correct: false }
      - { value: "`dump:config`", correct: false }
    help: |
      `debug:config` allows you to inspect the resolved configuration for any bundle or extension.
      https://symfony.com/doc/current/reference/debug_commands.html#debug-config (Implicit knowledge, but a very common built-in command)

  -
    question: >
      When defining an optional argument, how can you provide a default value that will be used if the argument is not provided by the user?
    answers:
      - { value: "By passing the default value as the third argument to `addArgument()`.", correct: true }
      - { value: "By setting a `defaultValue` property in the `#[Argument]` attribute.", correct: false }
      - { value: "By checking for `null` in the `execute` method and assigning a default.", correct: false }
      - { value: "By using `InputArgument::OPTIONAL_WITH_DEFAULT`.", correct: false }
    help: |
      The third argument to `addArgument()` for an optional argument is its default value.
      https://symfony.com/doc/current/console/input.html#arguments

  -
    question: >
      What is the purpose of the `Symfony\Component\Console\Question\Question` class?
    answers:
      - { value: "To represent a general question that asks the user for text input.", correct: true }
      - { value: "To define a question with predefined choices.", correct: false }
      - { value: "To ask a yes/no confirmation question.", correct: false }
      - { value: "To validate user input against a set of rules.", correct: false }
    help: |
      `Question` is the base class for all console questions, used for simple text input.
      https://symfony.com/doc/current/components/console/helpers/questionhelper.html#asking-for-input

  -
    question: >
      Which built-in Symfony Console command is used to display a list of all registered services in the application container?
    answers:
      - { value: "`debug:container`", correct: true }
      - { value: "`container:list`", correct: false }
      - { value: "`services:show`", correct: false }
      - { value: "`app:services`", correct: false }
    help: |
      `debug:container` is an essential command for inspecting the Dependency Injection Container and understanding available services.
      https://symfony.com/doc/current/reference/debug_commands.html#debug-container (Implicit knowledge, but a very common built-in command)

  -
    question: >
      What is the purpose of the `moveRight(int $columns = 1): void` method on `Symfony\Component\Console\Cursor`?
    answers:
      - { value: "To move the cursor right by a specified number of columns from its current position.", correct: true }
      - { value: "To move the cursor to an absolute column position.", correct: false }
      - { value: "To move the cursor to the end of the current line.", correct: false }
      - { value: "To move the cursor to the next word.", correct: false }
    help: |
      `moveRight()` provides relative horizontal movement of the cursor.
      https://symfony.com/doc/current/components/console/helpers/cursor.html#moving-the-cursor

  -
    question: >
      When using `SymfonyStyle`, how can you display a warning message with a yellow background?
    answers:
      - { value: "`$io->warning('This is a warning message.');`", correct: true }
      - { value: "`$io->warn('This is a warning message.');`", correct: false }
      - { value: "`$io->yellow('This is a warning message.');`", correct: false }
      - { value: "`$io->error('This is a warning message.');`", correct: false }
    help: |
      The `warning()` method is a dedicated `SymfonyStyle` method for displaying warning messages.
      https://symfony.com/doc/current/console/style.html#messages

  -
    question: >
      What is the purpose of the `ConsoleCommandEvent::getInput(): InputInterface` method?
    answers:
      - { value: "To retrieve the `InputInterface` instance associated with the command being executed.", correct: true }
      - { value: "To get the raw command-line arguments as an array.", correct: false }
      - { value: "To retrieve the command's defined arguments and options.", correct: false }
      - { value: "To get the user's input from a question.", correct: false }
    help: |
      This method provides access to the `InputInterface` object, allowing listeners to inspect or modify the command's input before execution.
      https://symfony.com/doc/current/components/console/events.html#consolecommandevent

  -
    question: >
      Which built-in Symfony Console command is used to display the current state of the database schema (e.g., Doctrine migrations)?
    answers:
      - { value: "`doctrine:migrations:status`", correct: true }
      - { value: "`database:schema:status`", correct: false }
      - { value: "`orm:schema-tool:info`", correct: false }
      - { value: "`db:status`", correct: false }
    help: |
      `doctrine:migrations:status` is a common command provided by DoctrineMigrationsBundle to check migration status. (Implicit knowledge, but a very common built-in command)

  -
    question: >
      What is the purpose of the `ConsoleCommandEvent::getCommand(): Symfony\Component\Console\Command\Command` method?
    answers:
      - { value: "To retrieve the `Command` instance that is about to be executed.", correct: true }
      - { value: "To get the command's name as a string.", correct: false }
      - { value: "To retrieve a list of all registered commands.", correct: false }
      - { value: "To get the command's description.", correct: false }
    help: |
      This method provides access to the `Command` object itself, allowing listeners to inspect or modify its properties.
      https://symfony.com/doc/current/components/console/events.html#consolecommandevent

  -
    question: >
      Which global option can be used to set the Kernel configuration environment for a Symfony console command?
    answers:
      - { value: "`--env`", correct: true }
      - { value: "`--environment`", correct: false }
      - { value: "`--profile`", correct: false }
      - { value: "`--config`", correct: false }
    help: |
      The `--env` option allows you to specify the Symfony environment (e.g., `dev`, `prod`, `test`) for the command execution.
      https://symfony.com/doc/current/console/input.html#global-options

  -
    question: >
      What is the purpose of the `ConsoleErrorEvent::getExitCode(): int` method?
    answers:
      - { value: "To get the current exit code, which is typically the exception code.", correct: true }
      - { value: "To get the exit code that the command will return after error handling.", correct: false }
      - { value: "To retrieve the default error exit code for the application.", correct: false }
      - { value: "To get the HTTP status code associated with the error.", correct: false }
    help: |
      This method provides the exit code that would be returned if the error is not handled, which is usually the exception's code.
      https://symfony.com/doc/current/components/console/events.html#consoleerrorevent

  -
    question: >
      Which built-in Symfony Console command is used to display the application's routes in a tree-like format?
    answers:
      - { value: "`debug:router --tree`", correct: true }
      - { value: "`router:tree`", correct: false }
      - { value: "`route:tree`", correct: false }
      - { value: "`debug:routes --tree`", correct: false }
    help: |
      The `--tree` option for `debug:router` provides a hierarchical view of the routes.
      https://symfony.com/doc/current/routing.html#listing-routes (Implicit knowledge, but a very common built-in command)

  -
    question: >
      What is the purpose of the `ConsoleTerminateEvent::getApplication(): Symfony\Component\Console\Application` method?
    answers:
      - { value: "To retrieve the `Application` instance that ran the command.", correct: true }
      - { value: "To get the name of the application.", correct: false }
      - { value: "To retrieve a list of all commands in the application.", correct: false }
      - { value: "To get the application's version.", correct: false }
    help: |
      This method provides access to the `Application` object, allowing listeners to interact with the overall console application after a command has finished.
      https://symfony.com/doc/current/components/console/events.html#consoleteterminateevent

  -
    question: >
      Which global option can be used to disable Kernel debug for a Symfony console command?
    answers:
      - { value: "`--no-debug`", correct: true }
      - { value: "`--debug=false`", correct: false }
      - { value: "`--disable-debug`", correct: false }
      - { value: "`--prod`", correct: false }
    help: |
      The `--no-debug` option forces the Kernel to run in non-debug mode, overriding the `APP_DEBUG` environment variable.
      https://symfony.com/doc/current/console/input.html#global-options

  -
    question: >
      What is the purpose of the `ConsoleSignalEvent::getHandlingSignal(): int` method?
    answers:
      - { value: "To return the integer value of the signal that triggered the event.", correct: true }
      - { value: "To get the name of the signal that triggered the event.", correct: false }
      - { value: "To retrieve the signal handler that is currently active.", correct: false }
      - { value: "To get a list of all signals that the command is configured to handle.", correct: false }
    help: |
      This method allows listeners to identify which specific signal (e.g., `SIGINT`, `SIGTERM`) caused the event to be dispatched.
      https://symfony.com/doc/current/components/console/events.html#consolesignalevent