category: Console
questions:
  - question: What is the primary purpose of the `#[AsCommand]` attribute in Symfony
      7 console commands?
    answers:
      - value: To automatically register the command with the console application and
          define its name and description.
        correct: true
      - value: To define the command's dependencies for autowiring.
        correct: false
      - value: To mark the command as a service that can be injected into other
          services.
        correct: false
      - value: To specify the PHP version required to run the command.
        correct: false
    help: The `#[AsCommand]` attribute, introduced in Symfony 5.1, is the modern way
      to configure and register a console command. It allows you to set the
      command's name, description, hidden status, and aliases directly on the
      class, simplifying command registration and improving performance for the
      `list` command.
      https://symfony.com/doc/current/console.html#registering-commands
  - question: Which of the following global options can be used to suppress all
      output from a Symfony console command?
    answers:
      - value: "`--quiet`"
        correct: true
      - value: "`-q`"
        correct: true
      - value: "`--silent`"
        correct: false
      - value: "`-s`"
        correct: false
    help: The `--quiet` or `-q` global option disables all output from a console
      command, including success messages and errors, making it suitable for
      automated scripts where only the exit code is relevant.
      https://symfony.com/doc/current/components/console/usage.html#global-options
  - question: In a Symfony console command, which method is responsible for
      containing the main logic to be executed?
    answers:
      - value: "`execute(InputInterface $input, OutputInterface $output): int`"
        correct: true
      - value: "`run(InputInterface $input, OutputInterface $output): void`"
        correct: false
      - value: "`process(InputInterface $input, OutputInterface $output): int`"
        correct: false
      - value: "`handle(InputInterface $input, OutputInterface $output): int`"
        correct: false
    help: The `execute()` method is the core of a Symfony console command where you
      implement the command's business logic. It receives `InputInterface` and
      `OutputInterface` objects and must return an integer exit status code
      (e.g., `Command::SUCCESS`).
      https://symfony.com/doc/current/console.html#command-lifecycle
  - question: >-
      Consider the following command configuration:


      ```php

      use Symfony\Component\Console\Input\InputArgument;

      use Symfony\Component\Console\Command\Command;


      class MyCommand extends Command

      {
          protected function configure(): void
          {
              $this
                  ->addArgument('name', InputArgument::REQUIRED, 'Your name?')
                  ->addArgument('age', InputArgument::OPTIONAL, 'Your age?', 30)
                  ->addArgument('hobbies', InputArgument::IS_ARRAY | InputArgument::OPTIONAL, 'Your hobbies?')
              ;
          }
      }

      ```


      Which of the following command executions are valid?
    answers:
      - value: "`php bin/console my:command John`"
        correct: true
      - value: "`php bin/console my:command Jane --age=25`"
        correct: false
      - value: "`php bin/console my:command Alice 20 reading coding`"
        correct: true
      - value: "`php bin/console my:command Bob --hobbies=sports,music`"
        correct: false
      - value: "`php bin/console my:command Charlie --age=40 --hobbies=gaming`"
        correct: false
    help: >-
      Arguments are positional and do not use `--` prefixes.
      `InputArgument::IS_ARRAY` must be the last argument.
      `InputArgument::OPTIONAL` can have a default value. Options use `--`
      prefixes. 

      1. `php bin/console my:command John` is valid: `name` is required, `age`
      and `hobbies` are optional and use their defaults.

      2. `php bin/console my:command Jane --age=25` is invalid: `--age` is an
      option syntax for an argument.

      3. `php bin/console my:command Alice 20 reading coding` is valid: `name`
      is 'Alice', `age` is '20', and `hobbies` is an array ['reading',
      'coding'].

      4. `php bin/console my:command Bob --hobbies=sports,music` is invalid:
      `--hobbies` is an option syntax for an argument.

      5. `php bin/console my:command Charlie --age=40 --hobbies=gaming` is
      invalid: `--age` and `--hobbies` are option syntaxes for arguments.
  - question: You want to display a progress bar for a long-running operation in
      your Symfony console command. Which `SymfonyStyle` method should you use
      to initialize a progress bar with a known maximum number of steps?
    answers:
      - value: "`progressStart(int $max)`"
        correct: true
      - value: "`startProgress(int $total)`"
        correct: false
      - value: "`createProgressBar(int $max)`"
        correct: false
      - value: "`initProgress(int $steps)`"
        correct: false
    help: The `SymfonyStyle::progressStart(int $max)` method is used to display a
      progress bar. If `$max` is greater than 0, it indicates a known length for
      the progress bar. `createProgressBar` returns a `ProgressBar` instance,
      but `progressStart` directly displays it.
      https://symfony.com/doc/current/console/style.html#progress-bar
  - question: Which `OutputInterface` constant represents the highest verbosity
      level, useful for debugging errors?
    answers:
      - value: "`OutputInterface::VERBOSITY_DEBUG`"
        correct: true
      - value: "`OutputInterface::VERBOSITY_VERY_VERBOSE`"
        correct: false
      - value: "`OutputInterface::VERBOSITY_VERBOSE`"
        correct: false
      - value: "`OutputInterface::VERBOSITY_QUIET`"
        correct: false
    help: The `OutputInterface::VERBOSITY_DEBUG` constant corresponds to the `-vvv`
      command-line option and displays all messages, including debug-level
      information, making it highly useful for error debugging.
      https://symfony.com/doc/current/console/verbosity.html#verbosity-levels
  - question: You need to ask the user for a password in a Symfony console command,
      and the input should not be visible on the screen. Which `SymfonyStyle`
      method is appropriate for this?
    answers:
      - value: "`askHidden(string $question, ?callable $validator = null)`"
        correct: true
      - value: "`askSecret(string $question)`"
        correct: false
      - value: "`promptPassword(string $question)`"
        correct: false
      - value: "`confirmHidden(string $question)`"
        correct: false
    help: The `SymfonyStyle::askHidden()` method is specifically designed for
      sensitive input like passwords, where the user's typing should not be
      echoed to the console. It also supports an optional validator callback.
      https://symfony.com/doc/current/console/style.html#asking-questions
  - question: Which of the following methods of
      `Symfony\Component\Console\Command\Command` is executed *before*
      `interact()` and `execute()`?
    answers:
      - value: "`initialize(InputInterface $input, OutputInterface $output)`"
        correct: true
      - value: "`configure()`"
        correct: false
      - value: "`setUp()`"
        correct: false
      - value: "`preExecute()`"
        correct: false
    help: The `initialize()` method is an optional lifecycle method that is executed
      before `interact()` and `execute()`. Its primary purpose is to initialize
      variables used in the rest of the command methods.
      https://symfony.com/doc/current/console.html#command-lifecycle
  - question: You want to display a list of key-value pairs in your console
      command's output, similar to a definition list. Which `SymfonyStyle`
      method should you use?
    answers:
      - value: "`definitionList(string $title, array $pairs, ...)`"
        correct: true
      - value: "`keyValueList(array $data)`"
        correct: false
      - value: "`describe(array $items)`"
        correct: false
      - value: "`renderDefinition(array $data)`"
        correct: false
    help: The `SymfonyStyle::definitionList()` method is used to display a compact
      list of key-value pairs, optionally with titles, providing a structured
      and readable output format.
      https://symfony.com/doc/current/console/style.html#definition-list
  - question: When defining a command-line option using `InputOption`, which
      constant should be used if the option does NOT accept any value (i.e.,
      it's a boolean flag)?
    answers:
      - value: "`InputOption::VALUE_NONE`"
        correct: true
      - value: "`InputOption::VALUE_OPTIONAL`"
        correct: false
      - value: "`InputOption::VALUE_REQUIRED`"
        correct: false
      - value: "`InputOption::IS_FLAG`"
        correct: false
    help: The `InputOption::VALUE_NONE` constant indicates that an option does not
      accept any value. When such an option is present on the command line, its
      value will be `true`; otherwise, it will be `false`. This is the default
      behavior if no other value type is specified.
      https://symfony.com/doc/current/console/input.html#option-value-types
  - question: Which of the following is the correct way to retrieve the `formatter`
      helper within a Symfony console command?
    answers:
      - value: "`$this->getHelper('formatter');`"
        correct: true
      - value: "`$this->getHelperSet()->get('formatter');`"
        correct: false
      - value: "`$this->formatter;`"
        correct: false
      - value: "`$this->get('formatter_helper');`"
        correct: false
    help: The `getHelper()` method on a `Command` instance is the standard way to
      retrieve a registered helper. The `formatter` helper provides methods for
      output styling like `formatSection` and `formatBlock`.
      https://symfony.com/doc/current/components/console/helpers/formatterhelper.html#usage
  - question: You want to display a message with a green background and an '[OK]'
      label in your console output. Which `SymfonyStyle` method should you use?
    answers:
      - value: "`success(string|array $message)`"
        correct: true
      - value: "`info(string|array $message)`"
        correct: false
      - value: "`ok(string|array $message)`"
        correct: false
      - value: "`good(string|array $message)`"
        correct: false
    help: The `SymfonyStyle::success()` method is specifically designed to display a
      message highlighted as a successful outcome, typically with a green
      background and an '[OK]' label.
      https://symfony.com/doc/current/console/style.html#result-messages
  - question: Which of the following `OutputInterface` methods would you use to
      write a message to the console without appending a newline character at
      the end?
    answers:
      - value: "`write(string|array $messages, bool $newline = false, int $options =
          0)`"
        correct: true
      - value: "`output(string $message)`"
        correct: false
      - value: "`print(string $message)`"
        correct: false
      - value: "`echo(string $message)`"
        correct: false
    help: The `OutputInterface::write()` method writes a message to the output. By
      default, it does not append a newline. If you need a newline, you can set
      the second argument to `true` or use `writeln()`.
      https://symfony.com/doc/current/console.html#writing-output
  - question: What is the purpose of the `interact()` method in a Symfony console
      command's lifecycle?
    answers:
      - value: To check if some options/arguments are missing and interactively ask the
          user for those values.
        correct: true
      - value: To define the command's arguments and options.
        correct: false
      - value: To execute the main logic of the command.
        correct: false
      - value: To initialize variables before any interaction.
        correct: false
    help: The `interact()` method is an optional lifecycle method executed after
      `initialize()` and before `execute()`. Its primary purpose is to
      interactively prompt the user for any missing arguments or options,
      especially when the command is not run with the `--no-interaction` flag.
      https://symfony.com/doc/current/console.html#command-lifecycle
  - question: To enable multiple selections for a `ChoiceQuestion` in Symfony
      Console, which method should be called?
    answers:
      - value: "`setMultiselect(true)`"
        correct: true
      - value: "`allowMultiple(true)`"
        correct: false
      - value: "`enableMultiChoice()`"
        correct: false
      - value: "`setAllowMultiSelect(true)`"
        correct: false
    help: The
      `Symfony\Component\Console\Question\ChoiceQuestion::setMultiselect(bool
      $multiselect)` method is used to enable or disable multiple answer
      selection for the question. When set to `true`, the user can provide
      comma-separated choices.
      https://symfony.com/doc/current/components/console/helpers/questionhelper.html#allowing-multiple-answers
  - question: Which of the following `SymfonyStyle` methods can be used to display
      an informational message without a specific label, typically with a green
      background?
    answers:
      - value: "`info(string|array $message)`"
        correct: true
      - value: "`comment(string|array $message)`"
        correct: false
      - value: "`note(string|array $message)`"
        correct: false
      - value: "`text(string|array $message)`"
        correct: false
    help: The `SymfonyStyle::info()` method displays an informational message,
      typically with a green background but without a specific label like '[OK]'
      or '[ERROR]'.
      https://symfony.com/doc/current/console/style.html#result-messages
  - question: How can you explicitly force ANSI output coloring for a Symfony
      console command, even if the terminal doesn't automatically support it?
    answers:
      - value: "`php bin/console my:command --ansi`"
        correct: true
      - value: "`php bin/console my:command --force-color`"
        correct: false
      - value: "`php bin/console my:command -c`"
        correct: false
      - value: Set the `COLOR_OUTPUT` environment variable to `true`.
        correct: false
    help: The `--ansi` global option forces the console application to output ANSI
      escape codes for coloring, regardless of whether the terminal is detected
      as supporting them. Conversely, `--no-ansi` disables coloring.
      https://symfony.com/doc/current/components/console/usage.html#global-options
  - question: When testing an interactive Symfony console command, which
      `CommandTester` method is used to simulate user input?
    answers:
      - value: "`setInputs(array $inputs)`"
        correct: true
      - value: "`simulateInput(array $data)`"
        correct: false
      - value: "`withInput(array $input)`"
        correct: false
      - value: "`provideAnswers(array $answers)`"
        correct: false
    help: The `Symfony\Component\Console\Tester\CommandTester::setInputs(array
      $inputs)` method is used to simulate user input. Each string in the array
      represents a user input followed by an ENTER key press, which is crucial
      for testing interactive commands like those using `QuestionHelper` or
      `SymfonyStyle`'s interactive methods.
      https://symfony.com/doc/current/components/console/helpers/questionhelper.html#testing-interactive-commands
  - question: Which of the following is the correct way to define an optional
      argument named `username` with a default value of `guest` in a Symfony
      console command?
    answers:
      - value: "`->addArgument('username', InputArgument::OPTIONAL, 'The username',
          'guest')`"
        correct: true
      - value: "`->addArgument('username', 'guest', InputArgument::OPTIONAL, 'The
          username')`"
        correct: false
      - value: "`->addArgument('username', InputArgument::OPTIONAL, default: 'guest',
          description: 'The username')`"
        correct: false
      - value: "`->addArgument('username', InputArgument::OPTIONAL, 'guest')`"
        correct: false
    help: The `addArgument()` method takes the name, mode (e.g.,
      `InputArgument::OPTIONAL`), description, and then the default value as its
      fourth argument.
      https://symfony.com/doc/current/console/input.html#arguments
  - question: What is the purpose of the `ConsoleTerminateEvent` in Symfony's
      Console component?
    answers:
      - value: It is dispatched after a console command has finished its execution.
        correct: true
      - value: It is dispatched before a console command starts its execution.
        correct: false
      - value: It is dispatched when a console command encounters an error.
        correct: false
      - value: It is dispatched when the console application is initialized.
        correct: false
    help: The `ConsoleTerminateEvent` is dispatched after a console command has
      finished its execution, regardless of whether it succeeded or failed. It
      allows listeners to perform cleanup or post-execution tasks and can be
      used to modify the command's exit code.
      https://symfony.com/doc/current/components/console/events.html#consoleterminateevent
  - question: You want to display a table in your Symfony console command. Which
      helper class should you instantiate to create and render the table?
    answers:
      - value: "`Symfony\\Component\\Console\\Helper\\Table`"
        correct: true
      - value: "`Symfony\\Component\\Console\\Helper\\TableHelper`"
        correct: false
      - value: "`Symfony\\Component\\Console\\Output\\TableOutput`"
        correct: false
      - value: "`Symfony\\Component\\Console\\Formatter\\TableFormatter`"
        correct: false
    help: The `Symfony\Component\Console\Helper\Table` class is the dedicated helper
      for rendering tabular data in the console. You instantiate it with an
      `OutputInterface` object.
      https://symfony.com/doc/current/components/console/helpers/table.html
  - question: Which of the following `SymfonyStyle` methods is used to display a
      warning message, typically with a red background and a '[WARNING]' label?
    answers:
      - value: "`warning(string|array $message)`"
        correct: true
      - value: "`error(string|array $message)`"
        correct: false
      - value: "`alert(string|array $message)`"
        correct: false
      - value: "`caution(string|array $message)`"
        correct: false
    help: The `SymfonyStyle::warning()` method displays a message highlighted as a
      warning, typically with a red background and a '[WARNING]' label.
      `error()` is for critical errors, and `caution()` is a more prominent
      admonition without a label.
      https://symfony.com/doc/current/console/style.html#result-messages
  - question: How can you programmatically call another Symfony console command from
      within an `execute()` method of a custom command, ensuring proper event
      dispatching and exit code handling?
    answers:
      - value: "`$this->getApplication()->doRun($input, $output);`"
        correct: true
      - value: "`$this->getApplication()->run($input, $output);`"
        correct: false
      - value: "`$command = $this->getApplication()->find('command:name');
          $command->run($input, $output);`"
        correct: false
      - value: "`$this->call('command:name', $arguments);`"
        correct: false
    help: To call another command programmatically, you should use
      `$this->getApplication()->doRun($input, $output)`. This method is
      preferred over `run()` because it prevents the application from exiting
      automatically and returns the command's exit code, allowing for proper
      event dispatching and integration within a larger process. You'd typically
      create an `ArrayInput` for the target command.
      https://symfony.com/doc/current/console/calling_commands.html
  - question: Which of the following `InputOption` types allows an option to accept
      multiple values (e.g., `--dir=/foo --dir=/bar`)?
    answers:
      - value: "`InputOption::VALUE_IS_ARRAY`"
        correct: true
      - value: "`InputOption::VALUE_MULTIPLE`"
        correct: false
      - value: "`InputOption::IS_COLLECTION`"
        correct: false
      - value: "`InputOption::ARRAY_VALUE`"
        correct: false
    help: The `InputOption::VALUE_IS_ARRAY` constant is used when an option can
      accept multiple values. It must be combined with `VALUE_REQUIRED` or
      `VALUE_OPTIONAL`.
      https://symfony.com/doc/current/console/input.html#option-value-types
  - question: What is the purpose of the
      `Symfony\Component\Console\Logger\ConsoleLogger` class?
    answers:
      - value: To bridge PSR-3 log messages directly to the console output, respecting
          verbosity levels.
        correct: true
      - value: To log console command execution details to a file.
        correct: false
      - value: To provide a custom logger for Symfony's internal console operations.
        correct: false
      - value: To convert console output into a structured log format.
        correct: false
    help: The `ConsoleLogger` class is a PSR-3 compliant logger that directs log
      messages to the console output. It automatically maps log levels to
      console verbosity levels, ensuring that messages are displayed
      appropriately based on the command's verbosity.
      https://symfony.com/doc/current/components/console/logger.html
  - question: Which of the following is the correct way to set a specific column's
      maximum width in a `Table` helper, causing content to wrap if it exceeds
      the width?
    answers:
      - value: "`$table->setColumnMaxWidth(0, 5);`"
        correct: true
      - value: "`$table->setColumnWidth(0, 5);`"
        correct: false
      - value: "`$table->setMaxColumnWidth(0, 5);`"
        correct: false
      - value: "`$table->wrapColumn(0, 5);`"
        correct: false
    help: The `Symfony\Component\Console\Helper\Table::setColumnMaxWidth(int
      $columnIndex, int $maxWidth)` method is used to set the maximum width for
      a specific column. If content exceeds this width, it will automatically
      wrap to the next line within that column. `setColumnWidth` sets an
      explicit width, not a maximum for wrapping.
      https://symfony.com/doc/current/components/console/helpers/table.html#setting-column-widths
  - question: What is the purpose of the `ConsoleEvents::SIGNAL` event?
    answers:
      - value: It is dispatched when a console command receives an asynchronous signal
          (e.g., SIGINT, SIGTERM).
        correct: true
      - value: It is dispatched when a command is about to be terminated by the system.
        correct: false
      - value: It is dispatched when a command sends a signal to another process.
        correct: false
      - value: It is dispatched when a command's execution is interrupted by a user.
        correct: false
    help: The `ConsoleEvents::SIGNAL` event is dispatched when a console command
      receives an asynchronous signal, such as `SIGINT` (Ctrl+C) or `SIGTERM`.
      This allows commands to gracefully handle interruptions or perform cleanup
      before exiting. The `ConsoleSignalEvent` provides access to the signal
      number and methods to control the exit code or abort the exit.
      https://symfony.com/doc/current/components/console/events.html#consolesignalevent
  - question: Which of the following `SymfonyStyle` methods is used to display a
      block of text as an unordered list?
    answers:
      - value: "`listing(array $elements)`"
        correct: true
      - value: "`list(array $items)`"
        correct: false
      - value: "`bulletList(array $items)`"
        correct: false
      - value: "`unorderedList(array $elements)`"
        correct: false
    help: The `SymfonyStyle::listing(array $elements)` method displays an unordered
      list of elements passed as an array, automatically formatting them with
      bullet points. https://symfony.com/doc/current/console/style.html#lists
  - question: To hide a Symfony console command so it doesn't appear in the `php
      bin/console list` output, which parameter of the `#[AsCommand]` attribute
      should be set to `true`?
    answers:
      - value: "`hidden`"
        correct: true
      - value: "`private`"
        correct: false
      - value: "`exclude`"
        correct: false
      - value: "`invisible`"
        correct: false
    help: "The `hidden: true` parameter in the `#[AsCommand]` attribute marks a
      command as hidden, preventing it from appearing in the default command
      listings while still allowing it to be executed directly.
      https://symfony.com/doc/current/console/hide_commands.html"
  - question: You want to implement dynamic autocompletion for an argument in your
      Symfony console command, suggesting values based on the user's current
      input. Which argument of `addArgument()` should you use for this?
    answers:
      - value: The fifth argument, a callable that receives `CompletionInput`.
        correct: true
      - value: The fourth argument, an array of static values.
        correct: false
      - value: The `setAutocompleterCallback()` method on the `InputArgument` object.
        correct: false
      - value: The `setSuggestions()` method on the `InputInterface`.
        correct: false
    help: Dynamic autocompletion for arguments is configured by passing a callable
      as the fifth argument to `addArgument()`. This callable receives a
      `CompletionInput` object, which contains the current user input, allowing
      you to generate suggestions dynamically.
      https://symfony.com/doc/current/console/input.html#argument-completion
  - question: Which of the following is the correct way to get the height of the
      terminal in a Symfony console command?
    answers:
      - value: "`$terminal = new Terminal(); $height = $terminal->getHeight();`"
        correct: true
      - value: "`$output->getTerminalHeight();`"
        correct: false
      - value: "`$input->getTerminal()->getHeight();`"
        correct: false
      - value: "`$this->getHelper('terminal')->getHeight();`"
        correct: false
    help: The `Symfony\Component\Console\Terminal` class provides methods to
      retrieve terminal properties like height and width. You need to
      instantiate it to use its methods.
      https://symfony.com/doc/current/console.html#getting-terminal-information
  - question: To display clickable links in the console output, which special tag
      should be used with `OutputInterface::writeln()`?
    answers:
      - value: "`<href=URL>Text</>`"
        correct: true
      - value: "`<link=URL>Text</link>`"
        correct: false
      - value: "`<url=URL>Text</url>`"
        correct: false
      - value: '`<a href="URL">Text</a>`'
        correct: false
    help: The `<href=URL>Text</>` tag is a special formatting tag in Symfony Console
      that allows displaying clickable links. If the terminal emulator supports
      it, the 'Text' will become a clickable link that opens the specified URL.
      https://symfony.com/doc/current/console/coloring.html#clickable-links
  - question: What is the purpose of the
      `Symfony\Component\Console\Output\ConsoleOutputInterface`?
    answers:
      - value: It indicates that an `OutputInterface` implementation supports separate
          standard and error output streams.
        correct: true
      - value: It provides methods for formatting console output with colors and styles.
        correct: false
      - value: It is the base interface for all console output classes.
        correct: false
      - value: It defines methods for interacting with the user via input prompts.
        correct: false
    help: The `ConsoleOutputInterface` is an internal interface used by
      `SymfonyStyle` to determine if `getErrorStyle()` can effectively redirect
      output to `stderr`. If the original `OutputInterface` object passed to
      `SymfonyStyle` is not an instance of `ConsoleOutputInterface`,
      `getErrorStyle()` will still write to `stdout`.
      https://symfony.com/doc/current/console/style.html#outputting-to-stderr
  - question: Which of the following `SymfonyStyle` methods is used to display a
      block of text with a title, typically used for organizing command output
      into logical sections?
    answers:
      - value: "`section(string $message)`"
        correct: true
      - value: "`headline(string $message)`"
        correct: false
      - value: "`block(string $message)`"
        correct: false
      - value: "`title(string $message)`"
        correct: false
    help: The `SymfonyStyle::section()` method displays the given string as the
      title of a command section, providing visual separation and organization
      for complex command outputs. `title()` is for the overall command title.
      https://symfony.com/doc/current/console/style.html#sections
  - question: When defining a console command option, how can you specify that the
      option is optional but can still accept a value (e.g., `--yell` or
      `--yell=loud`)?
    answers:
      - value: "`InputOption::VALUE_OPTIONAL`"
        correct: true
      - value: "`InputOption::VALUE_NONE`"
        correct: false
      - value: "`InputOption::VALUE_REQUIRED`"
        correct: false
      - value: "`InputOption::OPTIONAL_VALUE`"
        correct: false
    help: The `InputOption::VALUE_OPTIONAL` constant indicates that an option may or
      may not have a value. If the value is provided, it will be used;
      otherwise, the default value (if set) will be used, or `null` if no
      default.
      https://symfony.com/doc/current/console/input.html#option-value-types
  - question: To set a default command for your Symfony console application, so it
      runs when no command name is provided, which `Application` method should
      you use?
    answers:
      - value: "`setDefaultCommand(string $commandName, bool $force = false)`"
        correct: true
      - value: "`setFallbackCommand(string $commandName)`"
        correct: false
      - value: "`setDefault(string $commandName)`"
        correct: false
      - value: "`setHomeCommand(string $commandName)`"
        correct: false
    help: The `Symfony\Component\Console\Application::setDefaultCommand()` method
      allows you to specify a command that will be executed if no command name
      is provided on the command line. The second argument, `$force`, ensures
      it's truly the default.
      https://symfony.com/doc/current/components/console/changing_default_command.html
  - question: Which of the following global options would you use to disable
      interactive prompts when running a Symfony console command?
    answers:
      - value: "`--no-interaction`"
        correct: true
      - value: "`-n`"
        correct: true
      - value: "`--no-prompt`"
        correct: false
      - value: "`--non-interactive`"
        correct: false
    help: The `--no-interaction` or `-n` global option disables any interactive
      prompts (e.g., questions, confirmations) that a command might otherwise
      present. This is essential for running commands in automated scripts or
      CI/CD environments.
      https://symfony.com/doc/current/components/console/usage.html#global-options
  - question: You are writing a console command that needs to perform cleanup
      operations if the user interrupts it with Ctrl+C. Which event should you
      listen for?
    answers:
      - value: "`ConsoleEvents::SIGNAL`"
        correct: true
      - value: "`ConsoleEvents::TERMINATE`"
        correct: false
      - value: "`ConsoleEvents::EXCEPTION`"
        correct: false
      - value: "`ConsoleEvents::ERROR`"
        correct: false
    help: The `ConsoleEvents::SIGNAL` event is dispatched when a console command
      receives an asynchronous signal, such as `SIGINT` (triggered by Ctrl+C) or
      `SIGTERM`. This allows you to implement custom signal handling logic,
      including cleanup or graceful shutdown procedures.
      https://symfony.com/doc/current/components/console/events.html#console-signal-event
  - question: Which `SymfonyStyle` method is used to display a simple, unformatted
      block of text in the console output?
    answers:
      - value: "`text(string|array $messages)`"
        correct: true
      - value: "`write(string|array $messages)`"
        correct: false
      - value: "`output(string|array $messages)`"
        correct: false
      - value: "`raw(string|array $messages)`"
        correct: false
    help: The `SymfonyStyle::text()` method displays the given string or array of
      strings as regular, unformatted text. It's suitable for general
      informational messages.
      https://symfony.com/doc/current/console/style.html#text
  - question: To display the version number of a Symfony console application, which
      global option can be used?
    answers:
      - value: "`--version`"
        correct: true
      - value: "`-V`"
        correct: true
      - value: "`--info`"
        correct: false
      - value: "`--about`"
        correct: false
    help: The `--version` or `-V` global option displays the application's name and
      version number, provided they were set during the `Application`
      instantiation.
      https://symfony.com/doc/current/components/console/usage.html#global-options
  - question: You want to prompt the user for a 'yes' or 'no' answer in your console
      command. Which `SymfonyStyle` method is best suited for this, allowing a
      default answer if the user just presses Enter?
    answers:
      - value: "`confirm(string $question, bool $default = false)`"
        correct: true
      - value: "`askConfirmation(string $question, bool $default = false)`"
        correct: false
      - value: "`yesNo(string $question, bool $default = false)`"
        correct: false
      - value: "`promptBoolean(string $question, bool $default = false)`"
        correct: false
    help: The `SymfonyStyle::confirm()` method asks a Yes/No question to the user
      and returns a boolean. It allows you to set a default answer that is
      returned if the user simply presses Enter without typing 'yes' or 'no'.
      https://symfony.com/doc/current/console/style.html#confirming-questions
  - question: When defining a console command argument, which constant should be
      used if the argument is mandatory and the command will not run without it?
    answers:
      - value: "`InputArgument::REQUIRED`"
        correct: true
      - value: "`InputArgument::OPTIONAL`"
        correct: false
      - value: "`InputArgument::IS_MANDATORY`"
        correct: false
      - value: "`InputArgument::NOT_NULL`"
        correct: false
    help: The `InputArgument::REQUIRED` constant specifies that the argument is
      mandatory. If it's not provided when the command is executed, the command
      will fail. https://symfony.com/doc/current/console/input.html#arguments
  - question: Which of the following `SymfonyStyle` methods is used to display a
      message highlighted as an error, typically with a red background and an
      '[ERROR]' label?
    answers:
      - value: "`error(string|array $message)`"
        correct: true
      - value: "`fail(string|array $message)`"
        correct: false
      - value: "`critical(string|array $message)`"
        correct: false
      - value: "`danger(string|array $message)`"
        correct: false
    help: The `SymfonyStyle::error()` method displays a message highlighted as an
      error, usually with a red background and an '[ERROR]' label, indicating a
      critical issue.
      https://symfony.com/doc/current/console/style.html#result-messages
  - question: Which of the following command-line options increases the verbosity
      level to display informative non-essential messages?
    answers:
      - value: "`-v`"
        correct: true
      - value: "`-vv`"
        correct: false
      - value: "`-vvv`"
        correct: false
      - value: "`--verbose=1`"
        correct: false
    help: The `-v` option (or `--verbose`) increases the verbosity to
      `OutputInterface::VERBOSITY_VERBOSE`, which displays informative
      non-essential messages. `-vv` is for `VERBOSITY_VERY_VERBOSE`, and `-vvv`
      is for `VERBOSITY_DEBUG`.
      https://symfony.com/doc/current/console/verbosity.html#verbosity-levels
  - question: You want to clear the entire console screen from your Symfony command.
      Which `Cursor` method should you use?
    answers:
      - value: "`clearScreen()`"
        correct: true
      - value: "`clearAll()`"
        correct: false
      - value: "`resetScreen()`"
        correct: false
      - value: "`eraseScreen()`"
        correct: false
    help: The `Symfony\Component\Console\Cursor::clearScreen()` method clears the
      entire console screen. Other methods like `clearLine()` or `clearOutput()`
      clear only parts of the screen.
      https://symfony.com/doc/current/components/console/helpers/cursor.html#clearing-output
  - question: When configuring the Monolog console handler in Symfony, which channel
      prefix can be used to exclude specific channels from being logged to the
      console?
    answers:
      - value: "`!`"
        correct: true
      - value: "`~`"
        correct: false
      - value: "`-`"
        correct: false
      - value: "`#`"
        correct: false
    help: In Monolog console handler configuration (e.g., `monolog.yaml`), you can
      use the `!` prefix before a channel name to exclude it from being
      processed by that handler. For example, `!event` excludes the 'event'
      channel.
      https://symfony.com/doc/current/logging/monolog_console.html#excluding-channels
  - question: Which `SymfonyStyle` method allows you to display a progress bar while
      iterating over an iterable collection?
    answers:
      - value: "`progressIterate(iterable $iterable)`"
        correct: true
      - value: "`iterateProgress(iterable $collection)`"
        correct: false
      - value: "`loopWithProgress(iterable $data)`"
        correct: false
      - value: "`forEachProgress(iterable $items)`"
        correct: false
    help: The `SymfonyStyle::progressIterate(iterable $iterable)` method is a
      convenient way to display a progress bar that automatically advances as
      you iterate over a collection.
      https://symfony.com/doc/current/console/style.html#progress-bar
  - question: What is the purpose of the `SignalableCommandInterface` in Symfony Console?
    answers:
      - value: It allows a command to directly handle specific PCNTL signals (e.g.,
          SIGINT, SIGTERM) within its own logic.
        correct: true
      - value: It enables a command to send signals to other running processes.
        correct: false
      - value: It provides methods for dispatching console events related to signals.
        correct: false
      - value: It marks a command as capable of being run in the background as a daemon.
        correct: false
    help: "The `Symfony\\Component\\Console\\Command\\SignalableCommandInterface`
      provides two methods: `getSubscribedSignals()` to declare which signals
      the command is interested in, and `handleSignal()` which is called when
      one of those subscribed signals is received, allowing for command-specific
      signal handling.
      https://symfony.com/doc/current/components/console/events.html#signalable\
      commandinterface"
  - question: You want to ask the user a question and provide a static list of
      values for autocompletion. Which method of the `Question` object should
      you use?
    answers:
      - value: "`setAutocompleterValues(array $values)`"
        correct: true
      - value: "`setSuggestions(array $values)`"
        correct: false
      - value: "`addAutocompletion(array $values)`"
        correct: false
      - value: "`setChoices(array $values)`"
        correct: false
    help: The
      `Symfony\Component\Console\Question\Question::setAutocompleterValues(array
      $values)` method is used to set a static list of values that will be
      suggested to the user as they type their answer. `setChoices` is for
      `ChoiceQuestion` which forces selection from a list.
      https://symfony.com/doc/current/components/console/helpers/questionhelper.html#autocompletion
  - question: Which of the following methods of `Symfony\Component\Console\Cursor`
      is used to hide the console cursor?
    answers:
      - value: "`hide()`"
        correct: true
      - value: "`conceal()`"
        correct: false
      - value: "`disable()`"
        correct: false
      - value: "`invisible()`"
        correct: false
    help: The `Symfony\Component\Console\Cursor::hide()` method makes the console
      cursor invisible, which can be useful for improving the visual experience
      during certain console operations, such as progress bars or animations.
      `show()` makes it visible again.
      https://symfony.com/doc/current/components/console/helpers/cursor.html#cursor-visibility
  - question: You need to truncate a long message to a specific length and append a
      custom suffix (e.g., '...'). Which `FormatterHelper` method should you
      use?
    answers:
      - value: "`truncate(string $message, int $length, string $suffix = '...')`"
        correct: true
      - value: "`shorten(string $message, int $length, string $suffix = '...')`"
        correct: false
      - value: "`limit(string $message, int $length, string $suffix = '...')`"
        correct: false
      - value: "`trim(string $message, int $length, string $suffix = '...')`"
        correct: false
    help: The `Symfony\Component\Console\Helper\FormatterHelper::truncate()` method
      is used to shorten a string to a specified length, with an optional custom
      suffix. It can also truncate from the end if a negative length is
      provided.
      https://symfony.com/doc/current/components/console/helpers/formatterhelper.html#truncating-messages
  - question: What is the correct way to retrieve an argument value named `username`
      from the `InputInterface` within a Symfony console command's `execute`
      method?
    answers:
      - value: "`$input->getArgument('username')`"
        correct: true
      - value: "`$input->get('username')`"
        correct: false
      - value: "`$input->argument('username')`"
        correct: false
      - value: "`$input->option('username')`"
        correct: false
    help: The `InputInterface::getArgument()` method is used to retrieve the value
      of a defined command-line argument by its name.
      https://symfony.com/doc/current/console/input.html#accessing-arguments
  - question: You want to display a table with a title at the top and a footer at
      the bottom. Which `Table` helper methods should you use?
    answers:
      - value: "`setHeaderTitle(string $title)` and `setFooterTitle(string $title)`"
        correct: true
      - value: "`setTitle(string $title)` and `setFootnote(string $title)`"
        correct: false
      - value: "`addHeader(string $title)` and `addFooter(string $title)`"
        correct: false
      - value: "`setCaption(string $header)` and `setSummary(string $footer)`"
        correct: false
    help: The `Symfony\Component\Console\Helper\Table::setHeaderTitle()` and
      `setFooterTitle()` methods allow you to add titles that are displayed
      within the table's top and bottom borders, respectively.
      https://symfony.com/doc/current/components/console/helpers/table.html#header-and-footer-titles
  - question: Which of the following `OutputInterface` methods would you use to
      write multiple lines of text to the console, with each line automatically
      followed by a newline character?
    answers:
      - value: "`writeln(array $messages)`"
        correct: true
      - value: "`write(array $messages, true)`"
        correct: false
      - value: "`outputLines(array $messages)`"
        correct: false
      - value: "`printLines(array $messages)`"
        correct: false
    help: The `OutputInterface::writeln()` method writes a message (or an array of
      messages) to the output and automatically appends a newline character at
      the end of each line.
      https://symfony.com/doc/current/console.html#writing-output
  - question: To convert colorized console output (with ANSI escape codes) into HTML
      for display in a web browser, which library is commonly used in Symfony?
    answers:
      - value: "`SensioLabs\\AnsiConverter\\AnsiToHtmlConverter`"
        correct: true
      - value: "`Symfony\\Component\\Console\\Formatter\\HtmlFormatter`"
        correct: false
      - value: "`Psr\\Log\\AnsiToHtmlConverter`"
        correct: false
      - value: "`Twig\\Extra\\CssInliner\\CssInlinerExtension`"
        correct: false
    help: The `SensioLabs\AnsiConverter\AnsiToHtmlConverter` library is specifically
      designed to convert ANSI escape codes (used for console coloring) into
      corresponding HTML, preserving the original styling when displaying
      console output in a web context.
      https://symfony.com/doc/current/console/command_in_controller.html#displaying-the-command-output
  - question: What is the purpose of the `ConsoleEvents::COMMAND` event?
    answers:
      - value: It is dispatched just before a console command is executed.
        correct: true
      - value: It is dispatched after a console command has been configured but before
          validation.
        correct: false
      - value: It is dispatched when a command is registered with the application.
        correct: false
      - value: It is dispatched when the console application starts up.
        correct: false
    help: The `ConsoleEvents::COMMAND` event is dispatched by the `Application` just
      before a console command is executed. It provides access to the
      `InputInterface`, `OutputInterface`, and the `Command` itself, allowing
      listeners to perform actions like logging or pre-processing before the
      command's main logic runs.
      https://symfony.com/doc/current/components/console/events.html#consolecommandevent
  - question: Which of the following `Table` helper methods is used to add multiple
      rows to the table at once, typically before rendering?
    answers:
      - value: "`addRows(array $rows)`"
        correct: true
      - value: "`setRows(array $rows)`"
        correct: true
      - value: "`appendRows(array $rows)`"
        correct: false
      - value: "`insertRows(array $rows)`"
        correct: false
    help: Both `addRows()` and `setRows()` can be used to add multiple rows to a
      `Table` instance. `setRows()` replaces existing rows, while `addRows()`
      appends them. `appendRow()` is for adding a single row to an already
      rendered table within a section.
      https://symfony.com/doc/current/components/console/helpers/table.html#adding-rows
  - question: To set an explicit width for a specific column in a Symfony Console
      `Table`, which method should you use?
    answers:
      - value: "`setColumnWidth(int $columnIndex, int $width)`"
        correct: true
      - value: "`setColumnWidths(array $widths)`"
        correct: false
      - value: "`setFixedWidth(int $columnIndex, int $width)`"
        correct: false
      - value: "`defineColumnWidth(int $columnIndex, int $width)`"
        correct: false
    help: The `Symfony\Component\Console\Helper\Table::setColumnWidth(int
      $columnIndex, int $width)` method allows you to set an explicit width for
      a single column by its zero-based index. `setColumnWidths()` sets widths
      for all columns at once.
      https://symfony.com/doc/current/components/console/helpers/table.html#setting-column-widths
  - question: Which `SymfonyStyle` method is used to display a blank line or
      multiple blank lines in the command output?
    answers:
      - value: "`newLine(int $count = 1)`"
        correct: true
      - value: "`emptyLine(int $count = 1)`"
        correct: false
      - value: "`lineBreak(int $count = 1)`"
        correct: false
      - value: "`blank(int $count = 1)`"
        correct: false
    help: The `SymfonyStyle::newLine()` method explicitly outputs one or more blank
      lines to the console. While other helpers might add newlines
      automatically, this method provides direct control over vertical spacing.
      https://symfony.com/doc/current/console/style.html#blank-lines
  - question: You want to prompt the user for input and validate it using a callback
      function, throwing a `RuntimeException` if the input is invalid. Which
      `SymfonyStyle` method's signature supports this?
    answers:
      - value: "`ask(string $question, string $default = null, callable $validator =
          null)`"
        correct: true
      - value: "`prompt(string $question, callable $validator)`"
        correct: false
      - value: "`getInput(string $question, callable $validationCallback)`"
        correct: false
      - value: "`query(string $question, callable $validate)`"
        correct: false
    help: The `SymfonyStyle::ask()` method allows you to prompt the user for a
      value. It includes an optional `$validator` callable parameter that
      receives the user's input and should return the validated value or throw a
      `RuntimeException` on failure. `askHidden()` has a similar signature.
      https://symfony.com/doc/current/console/style.html#asking-questions
  - question: Which of the following `InputArgument` types must be the last argument
      in the argument list if used?
    answers:
      - value: "`InputArgument::IS_ARRAY`"
        correct: true
      - value: "`InputArgument::OPTIONAL`"
        correct: false
      - value: "`InputArgument::REQUIRED`"
        correct: false
      - value: "`InputArgument::VARIADIC`"
        correct: false
    help: The `InputArgument::IS_ARRAY` type allows an argument to accept any number
      of values, which are then treated as an array. Due to its nature of
      consuming all remaining input, it must always be the last argument defined
      in the command.
      https://symfony.com/doc/current/console/input.html#argument-types
  - question: To display a message with a yellow background in Symfony console using
      predefined styles, which tag should you use?
    answers:
      - value: "`<comment>foo</comment>`"
        correct: true
      - value: "`<warning>foo</warning>`"
        correct: false
      - value: "`<info>foo</info>`"
        correct: false
      - value: "`<question>foo</question>`"
        correct: false
    help: The `<comment>` tag applies a yellow text color, which often appears as a
      yellow background in some terminal emulators, or simply yellow text. It's
      used for comments or less critical information. `<warning>` typically has
      a red background.
      https://symfony.com/doc/current/console/coloring.html#predefined-styles
  - question: What is the purpose of the
      `Symfony\Component\Console\Helper\TableSeparator` class?
    answers:
      - value: To represent a horizontal separator line within table rows when using the
          `Table` helper.
        correct: true
      - value: To define the character used for vertical table borders.
        correct: false
      - value: To separate different sections of a console command's output.
        correct: false
      - value: To add a new line between table headers and rows.
        correct: false
    help: The `Symfony\Component\Console\Helper\TableSeparator` class is a special
      marker that can be included as a row entry in `Table::setRows()` to render
      a horizontal separator line within the table, visually dividing rows.
      https://symfony.com/doc/current/components/console/helpers/table.html#adding-rows
  - question: Which global option is used to display detailed help information for a
      specific Symfony console command?
    answers:
      - value: "`--help`"
        correct: true
      - value: "`-h`"
        correct: true
      - value: "`--info`"
        correct: false
      - value: "`--usage`"
        correct: false
    help: The `--help` or `-h` global option, when used with a command name (e.g.,
      `php bin/console assets:install --help`), displays comprehensive help
      information for that specific command, including its arguments, options,
      and usage examples.
      https://symfony.com/doc/current/components/console/usage.html#global-options
  - question: When injecting a PSR-3 `LoggerInterface` into a Symfony console
      command, and the Monolog console handler is configured, what happens to
      the log messages?
    answers:
      - value: Log messages are automatically displayed on the console according to
          their log level and the command's verbosity.
        correct: true
      - value: Log messages are only written to the default log file, not the console.
        correct: false
      - value: Log messages are buffered and only displayed if an error occurs.
        correct: false
      - value: Log messages are sent to a remote logging service.
        correct: false
    help: With the Monolog console handler configured, injecting
      `Psr\Log\LoggerInterface` into a command means that any log messages
      emitted through this logger will be automatically directed to the console
      output. The handler maps log levels (e.g., `debug`, `info`, `error`) to
      console verbosity levels, ensuring appropriate display.
      https://symfony.com/doc/current/logging/monolog_console.html
  - question: To move the console cursor to a specific (column, row) position from
      the top-left of the terminal, which `Cursor` method should you use?
    answers:
      - value: "`moveToPosition(int $column, int $row)`"
        correct: true
      - value: "`setPosition(int $column, int $row)`"
        correct: false
      - value: "`setCursor(int $column, int $row)`"
        correct: false
      - value: "`goto(int $column, int $row)`"
        correct: false
    help: The `Symfony\Component\Console\Cursor::moveToPosition(int $column, int
      $row)` method allows precise cursor positioning by specifying the target
      column and row coordinates relative to the top-left corner of the
      terminal.
      https://symfony.com/doc/current/components/console/helpers/cursor.html#moving-the-cursor
  - question: Which of the following `InputOption` types allows an option to be
      negated (e.g., `--yell` and `--no-yell`)?
    answers:
      - value: "`InputOption::VALUE_NEGATABLE`"
        correct: true
      - value: "`InputOption::VALUE_BOOLEAN`"
        correct: false
      - value: "`InputOption::VALUE_TOGGLE`"
        correct: false
      - value: "`InputOption::VALUE_INVERTIBLE`"
        correct: false
    help: The `InputOption::VALUE_NEGATABLE` constant allows an option to accept
      both its positive form (e.g., `--yell`) and its negated form (e.g.,
      `--no-yell`). This is useful for boolean-like options where explicit
      disabling is desired.
      https://symfony.com/doc/current/console/input.html#option-value-types
  - question: What is the purpose of the
      `Symfony\Component\Console\Style\StyleInterface`?
    answers:
      - value: It defines the contract for classes that implement custom console output
          styles.
        correct: true
      - value: It provides a default implementation for console output styling.
        correct: false
      - value: It is used to retrieve predefined console styles.
        correct: false
      - value: It allows defining inline styles directly in the output message.
        correct: false
    help: The `Symfony\Component\Console\Style\StyleInterface` is an interface that
      must be implemented by classes defining custom console output styles. It
      ensures that custom styles adhere to a consistent API, allowing for full
      customization of console output appearance.
      https://symfony.com/doc/current/console/style.html#custom-styles
  - question: You want to allow the user to enter multiline input for a `Question`
      in your Symfony console command. Which method should you call on the
      `Question` object?
    answers:
      - value: "`setMultiline(true)`"
        correct: true
      - value: "`allowMultiline(true)`"
        correct: false
      - value: "`enableMultiLineInput()`"
        correct: false
      - value: "`setAllowNewlines(true)`"
        correct: false
    help: The `Symfony\Component\Console\Question\Question::setMultiline(true)`
      method configures the question to accept multiline input. The input will
      continue until an end-of-transmission character (Ctrl-D on Unix/Linux,
      Ctrl-Z on Windows) is received.
      https://symfony.com/doc/current/components/console/helpers/questionhelper.html#multiline-answers
  - question: Which of the following describes the behavior of
      `InputOption::VALUE_REQUIRED`?
    answers:
      - value: The option itself is optional, but if provided, it must have a value
          (e.g., `--iterations=5`).
        correct: true
      - value: The option must be provided, and it must have a value.
        correct: false
      - value: The option can be provided without a value, and its presence implies
          `true`.
        correct: false
      - value: The option can have multiple values.
        correct: false
    help: The `InputOption::VALUE_REQUIRED` constant means that if the option is
      present on the command line, it must be accompanied by a value (e.g.,
      `--iterations=5` or `-i5`). The option itself is still optional; it
      doesn't have to be provided at all.
      https://symfony.com/doc/current/console/input.html#option-value-types
  - question: To retrieve an option value named `iterations` from the
      `InputInterface` within a Symfony console command's `execute` method,
      which is the correct approach?
    answers:
      - value: "`$input->getOption('iterations')`"
        correct: true
      - value: "`$input->option('iterations')`"
        correct: false
      - value: "`$input->getArgument('iterations')`"
        correct: false
      - value: "`$input->getOptions()['iterations']`"
        correct: false
    help: The `InputInterface::getOption()` method is used to retrieve the value of
      a defined command-line option by its name.
      https://symfony.com/doc/current/console/input.html#accessing-options
  - question: Which of the following can be used to set a custom error message for
      an invalid choice in a `ChoiceQuestion`?
    answers:
      - value: "`setErrorMessage(string $message)`"
        correct: true
      - value: "`setError(string $message)`"
        correct: false
      - value: "`setInvalidMessage(string $message)`"
        correct: false
      - value: "`onInvalid(callable $callback)`"
        correct: false
    help: The
      `Symfony\Component\Console\Question\ChoiceQuestion::setErrorMessage(string
      $message)` method allows you to define a custom error message that is
      displayed when the user enters an invalid choice. The `%s` placeholder in
      the message will be replaced by the invalid input.
      https://symfony.com/doc/current/components/console/helpers/questionhelper.html#customizing-the-error-message
  - question: Which of the following `FormatterHelper` methods is used to format a
      block of text with a background color and optional padding?
    answers:
      - value: "`formatBlock(string|array $messages, string $style, bool $largePadding =
          false)`"
        correct: true
      - value: "`createBlock(string|array $messages, string $style)`"
        correct: false
      - value: "`styleBlock(string|array $messages, string $style)`"
        correct: false
      - value: "`renderBlock(string|array $messages, string $style)`"
        correct: false
    help: The `Symfony\Component\Console\Helper\FormatterHelper::formatBlock()`
      method formats a block of text with a specified style (e.g., 'error',
      'info', 'comment', 'question') and allows for optional large padding.
      https://symfony.com/doc/current/components/console/helpers/formatterhelper.html#formatting-blocks
  - question: What is the purpose of the `initialize()` method in the Symfony
      console command lifecycle?
    answers:
      - value: To initialize variables used in the rest of the command methods.
        correct: true
      - value: To define the command's arguments and options.
        correct: false
      - value: To interactively ask the user for missing input.
        correct: false
      - value: To execute the main business logic of the command.
        correct: false
    help: The `initialize()` method is an optional lifecycle method that is executed
      before `interact()` and `execute()`. It's a good place to set up any
      internal state or variables that the command will use.
      https://symfony.com/doc/current/console.html#command-lifecycle
  - question: Which of the following is the correct way to register an existing
      command class instance with the Symfony Console Application?
    answers:
      - value: "`$application->add(new MyCommand());`"
        correct: true
      - value: "`$application->registerCommand(new MyCommand());`"
        correct: false
      - value: "`$application->setCommand(new MyCommand());`"
        correct: false
      - value: "`$application->load(new MyCommand());`"
        correct: false
    help: The `Symfony\Component\Console\Application::add(Command $command)` method
      is used to add a command instance to the console application, making it
      available for execution.
      https://symfony.com/doc/current/components/console.html#registering-commands
  - question: To disable `stty` usage within the `QuestionHelper` (useful on Windows
      to prevent mangled input), which method should be called?
    answers:
      - value: "`QuestionHelper::disableStty();`"
        correct: true
      - value: "`QuestionHelper::setSttyEnabled(false);`"
        correct: false
      - value: "`QuestionHelper::disableInputEcho();`"
        correct: false
      - value: "`QuestionHelper::setTerminalMode('no-stty');`"
        correct: false
    help: The static method
      `Symfony\Component\Console\Helper\QuestionHelper::disableStty()` can be
      called to disable the use of the `stty` command, which can cause issues
      with input on certain systems, particularly Windows.
      https://symfony.com/doc/current/components/console/helpers/questionhelper.html#disabling-stty
  - question: When configuring a console command, what is the difference between
      `setDescription()` and `setHelp()`?
    answers:
      - value: "`setDescription()` provides a short summary for `list`, while
          `setHelp()` provides detailed information for `--help`."
        correct: true
      - value: "`setDescription()` is for internal use, while `setHelp()` is for user
          display."
        correct: false
      - value: They are interchangeable and serve the same purpose.
        correct: false
      - value: "`setDescription()` is for arguments, and `setHelp()` is for options."
        correct: false
    help: The `setDescription()` method provides a concise summary of the command's
      purpose, which is displayed when running `php bin/console list`. The
      `setHelp()` method provides more detailed documentation for the command,
      displayed when running the command with the `--help` option.
      https://symfony.com/doc/current/console.html#command-configuration
  - question: Which of the following `Cursor` methods is used to clear all output
      from the current line after the current cursor position?
    answers:
      - value: "`clearLineAfter()`"
        correct: true
      - value: "`clearLine()`"
        correct: false
      - value: "`eraseLineEnd()`"
        correct: false
      - value: "`deleteLineSuffix()`"
        correct: false
    help: The `Symfony\Component\Console\Cursor::clearLineAfter()` method clears all
      output from the current line, starting from the current cursor position to
      the end of the line. `clearLine()` clears the entire current line.
      https://symfony.com/doc/current/components/console/helpers/cursor.html#clearing-output
  - question: You want to display a table in your Symfony console command where each
      row's data is presented as a list of key-value pairs (vertical
      orientation). Which `Table` helper method should you use?
    answers:
      - value: "`setVertical()`"
        correct: true
      - value: "`setOrientation(Table::ORIENTATION_VERTICAL)`"
        correct: false
      - value: "`displayVertical()`"
        correct: false
      - value: "`asVertical()`"
        correct: false
    help: The `Symfony\Component\Console\Helper\Table::setVertical()` method changes
      the table rendering mode to vertical. In this mode, each row's data is
      displayed as a list of key-value pairs, which is useful for displaying
      detailed information per entry.
      https://symfony.com/doc/current/components/console/helpers/table.html#vertical-tables
  - question: What is the purpose of the `SHELL_VERBOSITY` environment variable in
      Symfony Console?
    answers:
      - value: It allows setting the default verbosity level for console commands
          outside of command-line options.
        correct: true
      - value: It defines the shell used to execute console commands.
        correct: false
      - value: It controls whether shell commands are echoed to the console.
        correct: false
      - value: It specifies the maximum number of lines for console output.
        correct: false
    help: The `SHELL_VERBOSITY` environment variable can be used to set the
      verbosity level for console commands. Its values map directly to
      `OutputInterface` constants (e.g., `-1` for `VERBOSITY_QUIET`, `0` for
      `VERBOSITY_NORMAL`, `1` for `VERBOSITY_VERBOSE`, etc.). This is useful for
      persistent verbosity settings.
      https://symfony.com/doc/current/console/verbosity.html#verbosity-levels
  - question: Which of the following `SymfonyStyle` methods is used to display a
      message as a highlighted admonition, drawing attention to important
      information, but less prominently than `caution()`?
    answers:
      - value: "`note(string|array $message)`"
        correct: true
      - value: "`info(string|array $message)`"
        correct: false
      - value: "`alert(string|array $message)`"
        correct: false
      - value: "`comment(string|array $message)`"
        correct: false
    help: The `SymfonyStyle::note()` method displays a message as a highlighted
      admonition, typically with a light blue background. It's used to draw
      attention to important, but not critical, information. `caution()` is for
      more prominent warnings.
      https://symfony.com/doc/current/console/style.html#admonitions
  - question: To run a Symfony console command with profiling enabled for debugging
      and performance analysis, which global option should be used?
    answers:
      - value: "`--profile`"
        correct: true
      - value: "`--debug`"
        correct: false
      - value: "`--trace`"
        correct: false
      - value: "`--monitor`"
        correct: false
    help: The `--profile` global option enables profiling for a console command.
      When debug mode and the profiler are enabled, this option collects
      detailed data about the command's execution, which can then be accessed
      via the web profiler.
      https://symfony.com/doc/current/console.html#profiling-commands
  - question: Which of the following `Helper` methods is used to format a number of
      seconds into a human-readable time string (e.g., '2 mins, 5 secs')?
    answers:
      - value: "`formatTime(int $seconds, int $precision = 1)`"
        correct: true
      - value: "`humanizeTime(int $seconds)`"
        correct: false
      - value: "`timeAgo(int $seconds)`"
        correct: false
      - value: "`duration(int $seconds)`"
        correct: false
    help: The `Symfony\Component\Console\Helper\Helper::formatTime()` method
      converts a given number of seconds into a human-readable time string,
      allowing you to specify the precision (number of time units to display).
      https://symfony.com/doc/current/components/console/helpers/formatterhelper.html#other-helpers
  - question: To append a single row to a Symfony Console `Table` *after* it has
      already been rendered, which method should be used? (Assume the table was
      rendered within an `OutputSection`.)
    answers:
      - value: "`appendRow(array $row)`"
        correct: true
      - value: "`addRow(array $row)`"
        correct: false
      - value: "`insertRow(array $row)`"
        correct: false
      - value: "`updateRow(array $row)`"
        correct: false
    help: The `Symfony\Component\Console\Helper\Table::appendRow(array $row)` method
      is specifically designed to add a single row to a table that has already
      been rendered. This functionality requires the table to be rendered inside
      a `Symfony\Component\Console\Output\OutputSection`. `addRow` is typically
      used before initial rendering.
      https://symfony.com/doc/current/components/console/helpers/table.html#dynamically-adding-rows
  - question: Which of the following `Helper` methods is used to format a number of
      bytes into a human-readable memory string (e.g., '1.5 GiB', '20 MiB')?
    answers:
      - value: "`formatMemory(int $bytes)`"
        correct: true
      - value: "`humanizeMemory(int $bytes)`"
        correct: false
      - value: "`memoryUsage(int $bytes)`"
        correct: false
      - value: "`bytesToHuman(int $bytes)`"
        correct: false
    help: The `Symfony\Component\Console\Helper\Helper::formatMemory()` method
      converts a given number of bytes into a human-readable memory string,
      automatically choosing the most appropriate unit (GiB, MiB, KiB, B).
      https://symfony.com/doc/current/components/console/helpers/formatterhelper.html#other-helpers
  - question: To define an inline command directly within the application setup,
      using a closure for its execution logic, which `Application` method is
      typically used?
    answers:
      - value: "`register(string $name)` followed by `setCode(callable $callable)`"
        correct: true
      - value: "`add(Command $command)` with an anonymous class"
        correct: false
      - value: "`createCommand(string $name, callable $callable)`"
        correct: false
      - value: "`define(string $name, callable $callable)`"
        correct: false
    help: The `Symfony\Component\Console\Application::register(string $name)` method
      is used to define a new command, and then its `setCode(callable
      $callable)` method allows you to specify the command's execution logic
      directly as a closure. This is ideal for simple, single-purpose commands.
      https://symfony.com/doc/current/components/console.html#defining-commands-inline
  - question: Which of the following `SymfonyStyle` methods is used to display a
      message highlighted as a caution, similar to an error message but for
      warnings that require strong attention?
    answers:
      - value: "`caution(string|array $message)`"
        correct: true
      - value: "`warning(string|array $message)`"
        correct: false
      - value: "`alert(string|array $message)`"
        correct: false
      - value: "`danger(string|array $message)`"
        correct: false
    help: The `SymfonyStyle::caution()` method displays a message as a prominently
      highlighted admonition, resembling an error message, to draw strong
      attention to a warning or important note. It's more visually impactful
      than `note()`.
      https://symfony.com/doc/current/console/style.html#admonitions
  - question: How can you override the `APP_ENV` environment variable to run a
      Symfony console command in the `prod` environment, regardless of the
      `.env` file?
    answers:
      - value: "`APP_ENV=prod php bin/console cache:clear`"
        correct: true
      - value: "`php bin/console cache:clear --env=prod`"
        correct: false
      - value: "`php bin/console cache:clear -e prod`"
        correct: false
      - value: "`set APP_ENV=prod && php bin/console cache:clear`"
        correct: false
    help: You can override environment variables for a single command execution by
      prefixing the command with the variable assignment (e.g., `APP_ENV=prod`).
      While `--env` is a global option, directly setting the environment
      variable is also a valid and common way.
      https://symfony.com/doc/current/console.html#running-commands-in-different-environments
  - question: To prevent the user's answer from being trimmed of leading/trailing
      whitespace when using a `Question` object, which method should be called?
    answers:
      - value: "`setTrimmable(false)`"
        correct: true
      - value: "`trimInput(false)`"
        correct: false
      - value: "`disableTrim()`"
        correct: false
      - value: "`setTrim(false)`"
        correct: false
    help: The `Symfony\Component\Console\Question\Question::setTrimmable(bool
      $trimmable)` method controls whether the user's answer should be trimmed
      of leading/trailing whitespace. By default, it's `true`, so setting it to
      `false` disables trimming.
      https://symfony.com/doc/current/components/console/helpers/questionhelper.html#trimming-answers
  - question: Which of the following `SymfonyStyle` methods is used to display a
      table with headers and rows, styled according to the Symfony Style Guide?
    answers:
      - value: "`table(array $headers, array $rows)`"
        correct: true
      - value: "`createTable(array $headers, array $rows)`"
        correct: false
      - value: "`renderTable(array $headers, array $rows)`"
        correct: false
      - value: "`displayTable(array $headers, array $rows)`"
        correct: false
    help: The `SymfonyStyle::table()` method is a convenient way to display tabular
      data in the console. It takes an array of headers and an array of rows and
      renders them as a compact, styled table. `createTable()` returns a `Table`
      object, but doesn't render it directly.
      https://symfony.com/doc/current/console/style.html#tables
  - question: When testing a console command that expects user input, how can you
      simulate a positive answer to a confirmation question (e.g., 'yes') using
      `CommandTester`?
    answers:
      - value: "`$commandTester->setInputs(['yes']);`"
        correct: true
      - value: "`$commandTester->confirm(true);`"
        correct: false
      - value: "`$commandTester->setInputs(['y']);`"
        correct: true
      - value: "`$commandTester->answer('yes');`"
        correct: false
    help: The `CommandTester::setInputs()` method takes an array of strings, where
      each string simulates a user input followed by an ENTER key press. For
      confirmation questions, providing 'yes' or 'y' (case-insensitive by
      default for `ConfirmationQuestion`) will simulate a positive answer.
      https://symfony.com/doc/current/components/console/helpers/questionhelper.html#testing-interactive-commands
  - question: Which of the following is the correct way to instantiate a
      `SymfonyStyle` object in a console command's `execute` method?
    answers:
      - value: "`$io = new SymfonyStyle($input, $output);`"
        correct: true
      - value: "`$io = $this->getHelper('symfony_style');`"
        correct: false
      - value: "`$io = SymfonyStyle::create($input, $output);`"
        correct: false
      - value: "`$io = new Style($input, $output);`"
        correct: false
    help: The `SymfonyStyle` helper class is instantiated by passing the
      `InputInterface` and `OutputInterface` objects to its constructor. This
      provides a convenient way to access its various output and interaction
      methods. https://symfony.com/doc/current/console/style.html#usage
  - question: To dynamically generate autocompletion suggestions for a `Question`
      based on the user's current input, which method should be called on the
      `Question` object?
    answers:
      - value: "`setAutocompleterCallback(callable $callback)`"
        correct: true
      - value: "`setDynamicSuggestions(callable $callback)`"
        correct: false
      - value: "`setCompletionHandler(callable $callback)`"
        correct: false
      - value: "`setAutocomplete(callable $callback)`"
        correct: false
    help: The
      `Symfony\Component\Console\Question\Question::setAutocompleterCallback(callable
      $callback)` method allows you to provide a callback function that will
      dynamically generate autocompletion suggestions. The callback receives the
      current user input as a string and should return an array of suggestion
      strings.
      https://symfony.com/doc/current/components/console/helpers/questionhelper.html#autocompletion
  - question: Which of the following is the correct way to retrieve an option value
      named `yell` that is a boolean flag (i.e., `InputOption::VALUE_NONE`) from
      the `InputInterface`?
    answers:
      - value: "`$input->getOption('yell')`"
        correct: true
      - value: "`$input->hasOption('yell')`"
        correct: false
      - value: "`$input->getFlag('yell')`"
        correct: false
      - value: "`$input->getOption('yell') === true`"
        correct: false
    help: The `InputInterface::getOption()` method is used to retrieve the value of
      an option. For `InputOption::VALUE_NONE` options, it will return `true` if
      the option is present and `false` if it's not. So,
      `$input->getOption('yell')` directly gives the boolean value.
      https://symfony.com/doc/current/console/input.html#accessing-options
  - question: To explicitly set the Kernel configuration environment (e.g., 'dev',
      'prod') when running a Symfony console command, which global option should
      be used?
    answers:
      - value: "`--env`"
        correct: true
      - value: "`-e`"
        correct: false
      - value: "`--environment`"
        correct: false
      - value: "`--config-env`"
        correct: false
    help: The `--env` global option allows you to explicitly set the Kernel
      configuration environment for a console command. This overrides the
      `APP_ENV` environment variable. Note that `-e` is not a standard shortcut
      for `--env` in Symfony Console.
      https://symfony.com/doc/current/components/console/usage.html#global-options
  - question: Which of the following `SymfonyStyle` methods is used to display a
      title for the entire command output, typically at the very beginning?
    answers:
      - value: "`title(string $message)`"
        correct: true
      - value: "`headline(string $message)`"
        correct: false
      - value: "`header(string $message)`"
        correct: false
      - value: "`displayTitle(string $message)`"
        correct: false
    help: The `SymfonyStyle::title()` method displays the given string as the main
      title for the command output, usually formatted prominently at the top.
      https://symfony.com/doc/current/console/style.html#titles
  - question: What is the return type expected from the `execute()` method of a
      Symfony console command?
    answers:
      - value: An integer, representing the command's exit status code.
        correct: true
      - value: Void, as output is handled by the `OutputInterface`.
        correct: false
      - value: A boolean, indicating success or failure.
        correct: false
      - value: An instance of `Command::SUCCESS` or `Command::FAILURE`.
        correct: false
    help: The `execute()` method must return an integer, which will be used as the
      command's exit status code. `Command::SUCCESS` (0) and `Command::FAILURE`
      (1) are common constants to return for readability.
      https://symfony.com/doc/current/console.html#command-lifecycle
  - question: To increase the verbosity level to display even more detailed
      messages, corresponding to `OutputInterface::VERBOSITY_VERY_VERBOSE`,
      which command-line option should be used?
    answers:
      - value: "`-vv`"
        correct: true
      - value: "`-v`"
        correct: false
      - value: "`-vvv`"
        correct: false
      - value: "`--verbose=2`"
        correct: false
    help: The `-vv` option increases verbosity to
      `OutputInterface::VERBOSITY_VERY_VERBOSE`, providing more detailed
      messages than `-v` but less than `-vvv` (debug).
      https://symfony.com/doc/current/console/verbosity.html#verbosity-levels
  - question: When defining a console command option, how can you specify a shortcut
      (e.g., `-i` for `--iterations`)?
    answers:
      - value: As the second argument to `addOption()` (e.g., `null` or a single
          character string).
        correct: true
      - value: Using the `shortcut` parameter in the `#[AsCommand]` attribute.
        correct: false
      - value: By defining it in the `setAliases()` method.
        correct: false
      - value: As an array in the first argument of `addOption()`.
        correct: false
    help: The `addOption()` method takes the option name as the first argument and
      the optional shortcut (a single character string or `null`) as the second
      argument. https://symfony.com/doc/current/console/input.html#options
  - question: Which of the following is a built-in Symfony console command used to
      display a comprehensive list of all registered commands?
    answers:
      - value: "`list`"
        correct: true
      - value: "`show`"
        correct: false
      - value: "`commands`"
        correct: false
      - value: "`info`"
        correct: false
    help: The `list` command is a built-in Symfony console command that, when
      executed (e.g., `php bin/console list`), displays a comprehensive list of
      all registered console commands, including built-in and custom commands.
      https://symfony.com/doc/current/console.html#listing-commands
  - question: To allow cutting and wrapping of long URLs in `SymfonyStyle` output,
      preventing them from breaking the console layout, which method should be
      called?
    answers:
      - value: "`$io->getOutputWrapper()->setAllowCutUrls(true);`"
        correct: true
      - value: "`$io->setWrapUrls(true);`"
        correct: false
      - value: "`$io->allowUrlWrapping(true);`"
        correct: false
      - value: "`$output->getFormatter()->setOption('wrap_urls', true);`"
        correct: false
    help: The `SymfonyStyle::getOutputWrapper()->setAllowCutUrls(true)` method
      configures the output wrapper to allow long URLs to be cut and wrapped,
      improving readability in the console.
      https://symfony.com/doc/current/console/style.html#url-wrapping
  - question: What is the purpose of the `interact()` method in a Symfony console
      command's lifecycle, and when is it NOT called?
    answers:
      - value: It's for interactively asking the user for missing arguments/options.
          It's NOT called when the command is run with `--no-interaction`.
        correct: true
      - value: It's for initializing command variables. It's NOT called in production
          environment.
        correct: false
      - value: It's for executing the main command logic. It's NOT called if all
          arguments are provided.
        correct: false
      - value: It's for validating user input. It's NOT called if there are no questions
          defined.
        correct: false
    help: The `interact()` method is an optional lifecycle method designed for
      interactive user input when arguments or options are missing. It is
      explicitly skipped when the command is executed with the global
      `--no-interaction` (`-n`) option.
      https://symfony.com/doc/current/console.html#command-lifecycle
  - question: Which of the following is the correct way to add an alias
      `app:add-user` to a Symfony console command named `app:create-user` using
      the `#[AsCommand]` attribute?
    answers:
      - value: "`#[AsCommand(name: 'app:create-user', aliases: ['app:add-user'])]`"
        correct: true
      - value: "`#[AsCommand(name: 'app:create-user', alias: 'app:add-user')]`"
        correct: false
      - value: "`#[AsCommand(name: 'app:create-user', shortcuts: ['app:add-user'])]`"
        correct: false
      - value: "`#[AsCommand(name: 'app:create-user', addAlias: 'app:add-user')]`"
        correct: false
    help: The `aliases` parameter in the `#[AsCommand]` attribute accepts an array
      of strings, allowing you to define multiple alternative names for your
      command. https://symfony.com/doc/current/console.html#registering-commands
  - question: You want to create a custom console output style with specific
      foreground, background colors, and options (e.g., bold, blink). Which
      class should you instantiate and configure?
    answers:
      - value: "`Symfony\\Component\\Console\\Formatter\\OutputFormatterStyle`"
        correct: true
      - value: "`Symfony\\Component\\Console\\Style\\SymfonyStyle`"
        correct: false
      - value: "`Symfony\\Component\\Console\\Output\\OutputFormatter`"
        correct: false
      - value: "`Symfony\\Component\\Console\\Formatter\\StyleBuilder`"
        correct: false
    help: The `Symfony\Component\Console\Formatter\OutputFormatterStyle` class
      allows you to define custom styles by specifying foreground color,
      background color, and text options. You then register this style with the
      `OutputFormatter` and apply it using tags.
      https://symfony.com/doc/current/console/coloring.html#custom-styles
  - question: Which of the following `OutputInterface` methods is used to check if
      the current verbosity level is `VERBOSITY_DEBUG` or higher?
    answers:
      - value: "`isDebug()`"
        correct: true
      - value: "`isVeryVerbose()`"
        correct: false
      - value: "`isVerbose()`"
        correct: false
      - value: "`getVerbosity() === OutputInterface::VERBOSITY_DEBUG`"
        correct: false
    help: The `OutputInterface::isDebug()` method returns `true` if the current
      verbosity level is `OutputInterface::VERBOSITY_DEBUG` (equivalent to
      `-vvv`) or higher. `isVeryVerbose()` checks for `-vv` or higher, and
      `isVerbose()` checks for `-v` or higher.
      https://symfony.com/doc/current/console/verbosity.html#checking-the-verbosity-level
  - question: To clear all output from the cursor's current position to the end of
      the screen, which `Cursor` method should you use?
    answers:
      - value: "`clearOutput()`"
        correct: true
      - value: "`clearScreenAfter()`"
        correct: false
      - value: "`eraseToEnd()`"
        correct: false
      - value: "`clearFromCursor()`"
        correct: false
    help: The `Symfony\Component\Console\Cursor::clearOutput()` method clears all
      output from the cursor's current position to the end of the screen.
      https://symfony.com/doc/current/components/console/helpers/cursor.html#clearing-output
  - question: When defining a console command argument, which constant should be
      used if the argument is optional and can be omitted?
    answers:
      - value: "`InputArgument::OPTIONAL`"
        correct: true
      - value: "`InputArgument::REQUIRED`"
        correct: false
      - value: "`InputArgument::NULLABLE`"
        correct: false
      - value: "`InputArgument::IS_OPTIONAL`"
        correct: false
    help: The `InputArgument::OPTIONAL` constant indicates that the argument is not
      mandatory and can be omitted when executing the command. If omitted, it
      will take its default value (if specified) or `null`.
      https://symfony.com/doc/current/console/input.html#arguments
  - question: Which of the following methods of
      `Symfony\Component\Console\Output\OutputInterface` is used to write a
      message and append a newline character at the end?
    answers:
      - value: "`writeln(string|array $messages, int $options = 0)`"
        correct: true
      - value: "`write(string|array $messages, bool $newline = true, int $options = 0)`"
        correct: false
      - value: "`line(string $message)`"
        correct: false
      - value: "`echo(string $message)`"
        correct: false
    help: The `OutputInterface::writeln()` method is the most common way to output
      messages in Symfony console commands, as it automatically adds a newline
      character after the message, making each output appear on a new line.
      https://symfony.com/doc/current/components/console.html#writing-output
  - question: You need to retrieve the `question` helper from the helper set within
      a Symfony console command. Which of the following is the correct way?
    answers:
      - value: "`$this->getHelper('question');`"
        correct: true
      - value: "`$this->getHelperSet()->get('question');`"
        correct: false
      - value: "`$this->questionHelper;`"
        correct: false
      - value: "`$this->get('question_helper');`"
        correct: false
    help: The `getHelper()` method on a `Command` instance is the standard way to
      retrieve a registered helper. The `question` helper provides methods for
      interactive user input, such as `ask`, `confirm`, and `choice`.
      https://symfony.com/doc/current/components/console/helpers/questionhelper.html#usage
  - question: Which of the following `OutputInterface` methods is used to check if
      the current verbosity level is `VERBOSITY_QUIET`?
    answers:
      - value: "`isQuiet()`"
        correct: true
      - value: "`isSilent()`"
        correct: false
      - value: "`getVerbosity() === OutputInterface::VERBOSITY_QUIET`"
        correct: false
      - value: "`isSuppressed()`"
        correct: false
    help: The `OutputInterface::isQuiet()` method returns `true` if the current
      verbosity level is `OutputInterface::VERBOSITY_QUIET` (equivalent to `-q`
      or `--quiet`).
      https://symfony.com/doc/current/console/verbosity.html#checking-the-verbosity-level
  - question: To display a table with a 'box-double' style, which `Table` helper
      method should be used?
    answers:
      - value: "`setStyle('box-double')`"
        correct: true
      - value: "`setBorderStyle('double')`"
        correct: false
      - value: "`useStyle('box-double')`"
        correct: false
      - value: "`applyStyle('box-double')`"
        correct: false
    help: The `Symfony\Component\Console\Helper\Table::setStyle(string $styleName)`
      method applies a predefined visual style to the table. 'box-double' is one
      of the built-in styles that uses double-line borders.
      https://symfony.com/doc/current/components/console/helpers/table.html#predefined-styles
  - question: Which of the following `OutputInterface` methods is used to check if
      the current verbosity level is `VERBOSITY_VERBOSE` or higher?
    answers:
      - value: "`isVerbose()`"
        correct: true
      - value: "`isVeryVerbose()`"
        correct: false
      - value: "`isDebug()`"
        correct: false
      - value: "`getVerbosity() >= OutputInterface::VERBOSITY_VERBOSE`"
        correct: false
    help: The `OutputInterface::isVerbose()` method returns `true` if the current
      verbosity level is `OutputInterface::VERBOSITY_VERBOSE` (equivalent to
      `-v`) or higher (i.e., also `VERY_VERBOSE` or `DEBUG`).
      https://symfony.com/doc/current/console/verbosity.html#checking-the-verbosity-level
  - question: What is the purpose of `Symfony\Component\Console\Output\OutputSection`?
    answers:
      - value: To manage independent sections of console output that can be overwritten,
          cleared, or have a maximum height.
        correct: true
      - value: To define a new command-line argument or option.
        correct: false
      - value: To group related console commands under a common namespace.
        correct: false
      - value: To buffer all console output before displaying it.
        correct: false
    help: Output sections allow for advanced console output management. They are
      independent areas of the console that can be written to, overwritten
      (`overwrite()`), cleared (`clear()`), or configured with a maximum height
      (`setMaxHeight()`), making them ideal for dynamic displays like progress
      updates or logs. They require the `OutputInterface` to be an instance of
      `ConsoleOutputInterface`.
      https://symfony.com/doc/current/console.html#output-sections
  - question: Which of the following is the correct way to retrieve an array
      argument named `names` from the `InputInterface`?
    answers:
      - value: "`$input->getArgument('names')`"
        correct: true
      - value: "`$input->getArguments()['names']`"
        correct: false
      - value: "`$input->getArrayArgument('names')`"
        correct: false
      - value: "`$input->get('names')`"
        correct: false
    help: Even for array arguments (defined with `InputArgument::IS_ARRAY`), the
      `InputInterface::getArgument()` method is used to retrieve their values.
      It will return an array of strings.
      https://symfony.com/doc/current/console/input.html#array-arguments
  - question: What is the primary benefit of using `SymfonyStyle` over direct
      `OutputInterface` methods for console output?
    answers:
      - value: It simplifies output styling and common interactions by providing
          semantic helper methods.
        correct: true
      - value: It automatically handles all command-line arguments and options.
        correct: false
      - value: It provides a graphical user interface for console commands.
        correct: false
      - value: It allows commands to run asynchronously in the background.
        correct: false
    help: "`SymfonyStyle` is a wrapper around `InputInterface` and `OutputInterface`
      that provides a higher-level API for common console tasks. It simplifies
      output styling (titles, sections, lists, tables, success/error messages)
      and interactive input (asking questions, confirmations) by abstracting
      away manual formatting and boilerplate code.
      https://symfony.com/doc/current/console/style.html"
  - question: Which of the following `OutputInterface` methods is used to check if
      the current verbosity level is `VERBOSITY_VERY_VERBOSE` or higher?
    answers:
      - value: "`isVeryVerbose()`"
        correct: true
      - value: "`isDebug()`"
        correct: false
      - value: "`isVerbose()`"
        correct: false
      - value: "`getVerbosity() >= OutputInterface::VERBOSITY_VERY_VERBOSE`"
        correct: false
    help: The `OutputInterface::isVeryVerbose()` method returns `true` if the
      current verbosity level is `OutputInterface::VERBOSITY_VERY_VERBOSE`
      (equivalent to `-vv`) or higher (i.e., also `DEBUG`).
      https://symfony.com/doc/current/console/verbosity.html#checking-the-verbosity-level
  - question: When configuring a `ConfirmationQuestion`, which parameter allows you
      to define the regular expression used to match a 'yes' answer?
    answers:
      - value: "`$trueAnswerRegex`"
        correct: true
      - value: "`$yesPattern`"
        correct: false
      - value: "`$confirmRegex`"
        correct: false
      - value: "`$positiveRegex`"
        correct: false
    help: The
      `Symfony\Component\Console\Question\ConfirmationQuestion::__construct()`
      method has a third parameter, `$trueAnswerRegex`, which is a regular
      expression (defaulting to `/^y/i`) used to match 'yes' answers. This
      allows for flexible matching beyond just 'y' or 'yes'.
      https://symfony.com/doc/current/components/console/helpers/questionhelper.html#confirmation-question
  - question: Which of the following is a valid way to run a Symfony console command
      named `app:create-user` from the command line?
    answers:
      - value: "`php bin/console app:create-user`"
        correct: true
      - value: "`symfony console app:create-user`"
        correct: false
      - value: "`./console app:create-user`"
        correct: false
      - value: "`bin/console app:create-user`"
        correct: false
    help: The standard way to run a Symfony console command is by executing the
      `bin/console` script using the PHP interpreter, followed by the command's
      registered name.
      https://symfony.com/doc/current/console.html#running-commands
  - question: To display a table with a 'compact' style, which `Table` helper method
      should be used?
    answers:
      - value: "`setStyle('compact')`"
        correct: true
      - value: "`setCompactStyle()`"
        correct: false
      - value: "`useCompact()`"
        correct: false
      - value: "`applyCompactStyle()`"
        correct: false
    help: The `Symfony\Component\Console\Helper\Table::setStyle(string $styleName)`
      method applies a predefined visual style to the table. 'compact' is one of
      the built-in styles that reduces padding and borders for a more compact
      appearance.
      https://symfony.com/doc/current/components/console/helpers/table.html#predefined-styles
  - question: What is the correct way to instantiate the `Application` class for a
      basic Symfony console application?
    answers:
      - value: "`new Application();`"
        correct: true
      - value: "`Application::create();`"
        correct: false
      - value: "`new Application(Kernel::create());`"
        correct: false
      - value: "`new ConsoleApplication();`"
        correct: false
    help: For a basic standalone console application (without the FrameworkBundle),
      you simply instantiate `Symfony\Component\Console\Application` directly.
      When integrated with FrameworkBundle, you pass the Kernel instance.
      https://symfony.com/doc/current/components/console.html#create-a-basic-application
  - question: Which of the following is the correct way to retrieve the `formatter`
      helper from a `Command` instance in Symfony Console?
    answers:
      - value: "`$this->getHelper('formatter');`"
        correct: true
      - value: "`$this->getHelperSet()->get('formatter');`"
        correct: false
      - value: "`$this->get('formatter_helper');`"
        correct: false
      - value: "`$this->formatter;`"
        correct: false
    help: The `getHelper()` method on the `Command` class is the standard way to
      retrieve a registered helper from the helper set. The 'formatter' helper
      provides methods for output formatting.
      https://symfony.com/doc/current/components/console/helpers/formatterhelper.html#usage
