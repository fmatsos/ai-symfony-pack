category: Console

questions:
  -
    question: >
      Which attribute is used to register a custom console command in Symfony 7?
    answers:
      - { value: '`#[AsCommand]`', correct: true }
      - { value: '`#[ConsoleCommand]`', correct: false }
      - { value: '`#[Command]`', correct: false }
      - { value: '`#[RegisterCommand]`', correct: false }
    help: |
      The `#[AsCommand]` attribute is the modern way to register console commands in Symfony 7, replacing the static `$defaultName` property.
      https://symfony.com/doc/current/console.html#configuring-the-command
  -
    question: |
      Consider the following command definition:

      ```php
      // src/Command/GreetCommand.php
      namespace App\Command;

      use Symfony\Component\Console\Attribute\AsCommand;
      use Symfony\Component\Console\Command\Command;
      use Symfony\Component\Console\Input\InputInterface;
      use Symfony\Component\Console\Output\OutputInterface;
      use Symfony\Component\Console\Input\InputArgument;

      #[AsCommand(name: 'app:greet', description: 'Greets a user.')]
      class GreetCommand extends Command
      {
          protected function configure(): void
          {
              $this->addArgument('name', InputArgument::REQUIRED, 'The name of the user.');
          }

          protected function execute(InputInterface $input, OutputInterface $output): int
          {
              $name = $input->getArgument('name');
              $output->writeln(sprintf('Hello, %s!', $name));
              return Command::SUCCESS;
          }
      }
      ```

      How would you execute this command from the command line, providing the name "Alice"?
    answers:
      - { value: '`php bin/console app:greet Alice`', correct: true }
      - { value: '`php bin/console app:greet --name=Alice`', correct: false }
      - { value: '`php bin/console app:greet name=Alice`', correct: false }
      - { value: '`php bin/console app:greet --argument=Alice`', correct: false }
    help: |
      Arguments are provided directly after the command name, in the order they are defined.
      https://symfony.com/doc/current/console.html#arguments
  -
    question: >
      Which of the following built-in commands is used to clear the Symfony cache?
    answers:
      - { value: '`cache:clear`', correct: true }
      - { value: '`cache:warmup`', correct: false }
      - { value: '`cache:purge`', correct: false }
      - { value: '`clear:cache`', correct: false }
    help: |
      The `cache:clear` command is essential for clearing the application's cache, especially after configuration changes.
      https://symfony.com/doc/current/console/usage.html#built-in-commands
  -
    question: >
      What is the purpose of the `InputOption::VALUE_OPTIONAL` mode when defining a command option?
    answers:
      - { value: 'The option can be present, and if so, it may or may not have a value.', correct: true }
      - { value: 'The option must be present, but its value is optional.', correct: false }
      - { value: 'The option is optional, and if present, it must have a value.', correct: false }
      - { value: 'The option cannot have a value.', correct: false }
    help: |
      `InputOption::VALUE_OPTIONAL` means the option itself is optional, and if it's provided, its value is also optional.
      https://symfony.com/doc/current/console/input.html#options
  -
    question: >
      Which method of the `OutputInterface` should you use to write a line of text to the console?
    answers:
      - { value: '`writeln()`', correct: true }
      - { value: '`write()`', correct: false }
      - { value: '`output()`', correct: false }
      - { value: '`echo()`', correct: false }
    help: |
      The `writeln()` method writes a given message to the output and appends a newline character.
      https://symfony.com/doc/current/console/coloring.html#output-styles-and-colors
  -
    question: >
      What is the default verbosity level for a Symfony console command?
    answers:
      - { value: '`OutputInterface::VERBOSITY_NORMAL`', correct: true }
      - { value: '`OutputInterface::VERBOSITY_QUIET`', correct: false }
      - { value: '`OutputInterface::VERBOSITY_VERBOSE`', correct: false }
      - { value: '`OutputInterface::VERBOSITY_DEBUG`', correct: false }
    help: |
      By default, commands run at the `VERBOSITY_NORMAL` level, showing essential information.
      https://symfony.com/doc/current/console/verbosity.html
  -
    question: >
      Which console event is dispatched just before a command is executed?
    answers:
      - { value: '`ConsoleEvents::COMMAND`', correct: true }
      - { value: '`ConsoleEvents::TERMINATE`', correct: false }
      - { value: '`ConsoleEvents::ERROR`', correct: false }
      - { value: '`ConsoleEvents::INIT`', correct: false }
    help: |
      The `ConsoleEvents::COMMAND` event is dispatched after the command is found and initialized, but before its `execute()` method is called.
      https://symfony.com/doc/current/console/events.html#consoleevents-command
  -
    question: |
      You want to prompt the user for a "yes/no" confirmation in your command. Which built-in helper should you use?
    answers:
      - { value: '`QuestionHelper` with a `ConfirmationQuestion`', correct: true }
      - { value: '`DialogHelper`', correct: false }
      - { value: '`FormatterHelper`', correct: false }
      - { value: '`ProcessHelper`', correct: false }
    help: |
      The `QuestionHelper` provides methods for asking various types of questions, including confirmations.
      https://symfony.com/doc/current/console/helpers.html#questionhelper
  -
    question: >
      Which built-in command can you use to list all available console commands in a Symfony application?
    answers:
      - { value: '`list`', correct: true }
      - { value: '`help`', correct: false }
      - { value: '`show`', correct: false }
      - { value: '`commands`', correct: false }
    help: |
      The `list` command provides a comprehensive list of all registered commands.
      https://symfony.com/doc/current/console/usage.html#built-in-commands
  -
    question: |
      How can you make an argument optional in a Symfony console command?
    answers:
      - { value: 'By using `InputArgument::OPTIONAL` as the mode.', correct: true }
      - { value: 'By setting its default value to `null`.', correct: false }
      - { value: 'By not providing a default value.', correct: false }
      - { value: 'By using `InputArgument::NONE` as the mode.', correct: false }
    help: |
      The `InputArgument::OPTIONAL` mode explicitly marks an argument as optional.
      https://symfony.com/doc/current/console/input.html#arguments
  -
    question: >
      What is the purpose of the `InputInterface` object in a console command's `execute()` method?
    answers:
      - { value: 'To read arguments and options provided by the user.', correct: true }
      - { value: 'To write output to the console.', correct: false }
      - { value: 'To manage the command''s lifecycle.', correct: false }
      - { value: 'To interact with the Symfony container.', correct: false }
    help: |
      The `InputInterface` provides methods to access the command's arguments and options.
      https://symfony.com/doc/current/console/input.html
  -
    question: >
      Which verbosity level should you use to display only critical errors and suppress all other output?
    answers:
      - { value: '`OutputInterface::VERBOSITY_QUIET`', correct: true }
      - { value: '`OutputInterface::VERBOSITY_NORMAL`', correct: false }
      - { value: '`OutputInterface::VERBOSITY_VERBOSE`', correct: false }
      - { value: '`OutputInterface::VERBOSITY_DEBUG`', correct: false }
    help: |
      `VERBOSITY_QUIET` suppresses all output except for critical errors.
      https://symfony.com/doc/current/console/verbosity.html
  -
    question: >
      How can you retrieve a service from the dependency injection container within a console command?
    answers:
      - { value: 'By type-hinting it in the constructor and letting autowiring inject it.', correct: true }
      - { value: 'By calling `$this->getContainer()->get(''service_id'')`.', correct: false }
      - { value: 'By extending `ContainerAwareCommand` and using `$this->container->get(''service_id'')`.', correct: false }
      - { value: 'By using `#[Autowire]` attribute on a property.', correct: true }
    help: |
      The recommended way to get services is via constructor injection and autowiring. The `#[Autowire]` attribute can also be used for property injection. `ContainerAwareCommand` is deprecated.
      https://symfony.com/doc/current/console/commands_as_services.html
  -
    question: >
      Which built-in helper is useful for displaying progress bars during long-running console tasks?
    answers:
      - { value: '`ProgressBar`', correct: true }
      - { value: '`ProcessHelper`', correct: false }
      - { value: '`QuestionHelper`', correct: false }
      - { value: '`FormatterHelper`', correct: false }
    help: |
      The `ProgressBar` helper allows you to easily display and update a progress bar in the console.
      https://symfony.com/doc/current/console/helpers.html#progressbar
  -
    question: >
      What is the return value expected from the `execute()` method of a Symfony console command?
    answers:
      - { value: 'An integer representing the exit status (0 for success, non-zero for error).', correct: true }
      - { value: 'A boolean indicating success or failure.', correct: false }
      - { value: 'A string message to be displayed to the user.', correct: false }
      - { value: 'Nothing (void).', correct: false }
    help: |
      The `execute()` method must return an integer exit status. `Command::SUCCESS` (0) and `Command::FAILURE` (1) are common constants.
      https://symfony.com/doc/current/console.html#return-codes
  -
    question: >
      How can you define an option that can be passed multiple times, like `--tag=foo --tag=bar`?
    answers:
      - { value: 'By setting `InputOption::VALUE_IS_ARRAY` as the mode.', correct: true }
      - { value: 'By setting `InputOption::VALUE_OPTIONAL | InputOption::VALUE_IS_ARRAY` as the mode.', correct: false }
      - { value: 'By setting `InputOption::VALUE_REQUIRED | InputOption::VALUE_IS_ARRAY` as the mode.', correct: false }
      - { value: 'This functionality is not directly supported by `InputOption`.', correct: false }
    help: |
      The `InputOption::VALUE_IS_ARRAY` flag allows an option to accept multiple values, which will be returned as an array.
      https://symfony.com/doc/current/console/input.html#options
  -
    question: >
      Which built-in command is used to display information about a specific command, including its arguments and options?
    answers:
      - { value: '`help <command_name>`', correct: true }
      - { value: '`info <command_name>`', correct: false }
      - { value: '`describe <command_name>`', correct: false }
      - { value: '`man <command_name>`', correct: false }
    help: |
      The `help` command provides detailed usage information for any given command.
      https://symfony.com/doc/current/console/usage.html#built-in-commands
  -
    question: |
      You want to output a message to the console only if the verbosity level is `VERBOSITY_VERBOSE` or higher. How would you do this using the `OutputInterface`?
    answers:
      - { value: '`if ($output->isVerbose()) { $output->writeln(''Verbose message''); }`', correct: true }
      - { value: '`$output->writelnIfVerbose(''Verbose message'');`', correct: false }
      - { value: '`$output->verbose(''Verbose message'');`', correct: false }
      - { value: '`if ($output->getVerbosity() >= OutputInterface::VERBOSITY_VERBOSE) { ... }`', correct: true }
    help: |
      The `isVerbose()` method checks if the current verbosity level is at least `VERBOSITY_VERBOSE`. You can also directly compare the verbosity level.
      https://symfony.com/doc/current/console/verbosity.html
  -
    question: >
      What is the purpose of the `#[AsCommand(hidden: true)]` attribute?
    answers:
      - { value: 'To prevent the command from appearing in the `list` command output.', correct: true }
      - { value: 'To mark the command as deprecated.', correct: false }
      - { value: 'To make the command inaccessible from the command line.', correct: false }
      - { value: 'To hide the command''s description.', correct: false }
    help: |
      Setting `hidden: true` makes the command invisible when running `php bin/console list`, but it can still be executed.
      https://symfony.com/doc/current/console.html#configuring-the-command
  -
    question: >
      Which console event is dispatched after a command has finished execution, regardless of success or failure?
    answers:
      - { value: '`ConsoleEvents::TERMINATE`', correct: true }
      - { value: '`ConsoleEvents::POST_COMMAND`', correct: false }
      - { value: '`ConsoleEvents::FINISH`', correct: false }
      - { value: '`ConsoleEvents::END`', correct: false }
    help: |
      The `ConsoleEvents::TERMINATE` event is dispatched after the command's `execute()` method has finished.
      https://symfony.com/doc/current/console/events.html#consoleevents-terminate
  -
    question: >
      How can you define an argument that accepts multiple values, like `php bin/console app:process item1 item2 item3`?
    answers:
      - { value: 'By using `InputArgument::IS_ARRAY` as the mode.', correct: true }
      - { value: 'By using `InputArgument::OPTIONAL | InputArgument::IS_ARRAY` for optional multiple values.', correct: true }
      - { value: 'By using `InputArgument::REQUIRED | InputArgument::IS_ARRAY` for required multiple values.', correct: true }
      - { value: 'By setting the argument''s default value to an empty array.', correct: false }
    help: |
      The `InputArgument::IS_ARRAY` flag allows an argument to accept multiple values, which will be returned as an array. It can be combined with `REQUIRED` or `OPTIONAL`.
      https://symfony.com/doc/current/console/input.html#arguments
  -
    question: >
      What is the purpose of the `OutputInterface::VERBOSITY_DEBUG` level?
    answers:
      - { value: 'To display all messages, including highly detailed debugging information.', correct: true }
      - { value: 'To display only messages relevant to debugging.', correct: false }
      - { value: 'To display messages that help in understanding the command''s flow.', correct: false }
      - { value: 'It''s typically used for development environments only.', correct: false }
    help: |
      `VERBOSITY_DEBUG` is the highest verbosity level, showing all possible output.
      https://symfony.com/doc/current/console/verbosity.html
  -
    question: >
      Which built-in command is used to check and fix Doctrine database schema issues?
    answers:
      - { value: '`doctrine:schema:update --force`', correct: false }
      - { value: '`doctrine:migrations:migrate`', correct: false }
      - { value: '`doctrine:database:create`', correct: false }
      - { value: 'This is a Doctrine command, not a core Symfony command.', correct: true }
    help: |
      While commonly used in Symfony applications, Doctrine commands are provided by the DoctrineBundle, not the core Symfony Console component itself.
      https://symfony.com/doc/current/bundles/DoctrineBundle/index.html
  -
    question: |
      How can you apply a specific style (e.g., green text) to a message written to the console?
    answers:
      - { value: 'Using `<info>Your message</info>` tags within the message string.', correct: true }
      - { value: 'Calling `$output->writeln(''Your message'', ''info'');`', correct: false }
      - { value: 'Using CSS-like styles directly in the message.', correct: false }
      - { value: 'Configuring a custom `OutputFormatter` for the `OutputInterface`.', correct: true }
    help: |
      Symfony's console component supports basic formatting tags like `<info>`, `<comment>`, `<error>`, and `<question>`. You can also define custom styles via the `OutputFormatter`.
      https://symfony.com/doc/current/console/coloring.html
  -
    question: >
      What is the purpose of the `InputOption::VALUE_NONE` mode for an option?
    answers:
      - { value: 'The option is a flag and does not accept a value (e.g., `--force`).', correct: true }
      - { value: 'The option is optional and has no default value.', correct: false }
      - { value: 'The option must be present but its value is ignored.', correct: false }
      - { value: 'The option can only be used without any arguments.', correct: false }
    help: |
      `InputOption::VALUE_NONE` is used for boolean flags that are either present or not.
      https://symfony.com/doc/current/console/input.html#options
  -
    question: >
      Which console event is dispatched when an uncaught exception occurs during command execution?
    answers:
      - { value: '`ConsoleEvents::ERROR`', correct: true }
      - { value: '`ConsoleEvents::EXCEPTION`', correct: false }
      - { value: '`ConsoleEvents::FAILURE`', correct: false }
      - { value: '`ConsoleEvents::CRITICAL`', correct: false }
    help: |
      The `ConsoleEvents::ERROR` event allows you to handle exceptions gracefully within your console application.
      https://symfony.com/doc/current/console/events.html#consoleevents-error
  -
    question: >
      How can you access environment variables within a Symfony console command?
    answers:
      - { value: 'Using `$_ENV` or `$_SERVER` superglobals.', correct: true }
      - { value: 'Via the `InputInterface` object.', correct: false }
      - { value: 'Through a dedicated `EnvironmentHelper`.', correct: false }
      - { value: 'By injecting the `Kernel` service and accessing its environment property.', correct: true }
    help: |
      Standard PHP superglobals work, and the Kernel service provides access to the application's environment.
      https://symfony.com/doc/current/configuration.html#environment-variables
  -
    question: |
      You need to execute another console command from within your current command. Which built-in helper can facilitate this?
    answers:
      - { value: '`Application` instance via `find()` and `run()` methods.', correct: true }
      - { value: '`ProcessHelper` to run `php bin/console another:command`.', correct: true }
      - { value: '`CommandRunner` service.', correct: false }
      - { value: '`ConsoleHelper` with a `runCommand()` method.', correct: false }
    help: |
      You can either get the `Application` instance and run the command internally or use the `ProcessHelper` to execute it as a separate process.
      https://symfony.com/doc/current/console/command_in_command.html
  -
    question: >
      What is the purpose of the `InputArgument::REQUIRED` mode for an argument?
    answers:
      - { value: 'The argument must be provided when executing the command.', correct: true }
      - { value: 'The argument must have a non-empty value.', correct: false }
      - { value: 'The argument is required only if other conditions are met.', correct: false }
      - { value: 'The argument is required, but its value can be null.', correct: false }
    help: |
      `InputArgument::REQUIRED` ensures that the user provides a value for the argument.
      https://symfony.com/doc/current/console/input.html#arguments
  -
    question: >
      Which built-in command is typically used to create a new bundle in Symfony?
    answers:
      - { value: '`make:bundle`', correct: true }
      - { value: '`generate:bundle`', correct: false }
      - { value: '`create:bundle`', correct: false }
      - { value: '`bundle:new`', correct: false }
    help: |
      The `make:bundle` command (provided by `symfony/maker-bundle`) is the standard way to generate a new bundle skeleton.
      https://symfony.com/doc/current/bundles/SymfonyMakerBundle/index.html#make-bundle
  -
    question: |
      You want to display a table of data in your console command. Which helper should you use?
    answers:
      - { value: '`Table` (from `Symfony\Component\Console\Helper\Table`)', correct: true }
      - { value: '`FormatterHelper` with custom formatting.', correct: false }
      - { value: '`TableHelper`', correct: false }
      - { value: '`GridHelper`', correct: false }
    help: |
      The `Table` helper makes it easy to render tabular data in a clean, formatted way.
      https://symfony.com/doc/current/console/helpers.html#table
  -
    question: >
      What is the primary benefit of defining console commands as services?
    answers:
      - { value: 'They can be autowired with dependencies from the service container.', correct: true }
      - { value: 'They run faster than traditional commands.', correct: false }
      - { value: 'They are automatically registered without needing the `#[AsCommand]` attribute.', correct: false }
      - { value: 'They can be easily shared between different Symfony applications.', correct: false }
    help: |
      Defining commands as services allows Symfony's dependency injection container to manage their dependencies, making them easier to test and maintain.
      https://symfony.com/doc/current/console/commands_as_services.html
  -
    question: >
      Which of the following is a valid way to define a default value for an optional argument?
    answers:
      - { value: '`$this->addArgument(''name'', InputArgument::OPTIONAL, ''Description'', ''DefaultName'');`', correct: true }
      - { value: '`$this->addArgument(''name'', InputArgument::OPTIONAL, ''DefaultName'');`', correct: false }
      - { value: '`$this->addArgument(''name'', null, ''DefaultName'');`', correct: false }
      - { value: '`$this->addArgument(''name'', InputArgument::OPTIONAL)->setDefault(''DefaultName'');`', correct: false }
    help: |
      The default value is the fourth argument to `addArgument()`.
      https://symfony.com/doc/current/console/input.html#arguments
  -
    question: >
      What is the purpose of the `OutputInterface::VERBOSITY_QUIET` level?
    answers:
      - { value: 'To suppress all output, even errors.', correct: false }
      - { value: 'To display only error messages and suppress all other output.', correct: true }
      - { value: 'To display a minimal set of information.', correct: false }
      - { value: 'To prevent any interaction with the user.', correct: false }
    help: |
      `VERBOSITY_QUIET` is used to run commands silently, only showing errors.
      https://symfony.com/doc/current/console/verbosity.html
  -
    question: >
      Which built-in command can you use to check the health and configuration of your Symfony application?
    answers:
      - { value: '`debug:container`', correct: false }
      - { value: '`lint:container`', correct: false }
      - { value: '`about`', correct: true }
      - { value: '`check:requirements`', correct: false }
    help: |
      The `about` command provides a summary of your Symfony application's environment, configuration, and installed versions.
      https://symfony.com/doc/current/console/usage.html#built-in-commands
  -
    question: |
      How can you get the value of an option named `--env` from the `InputInterface` object?
    answers:
      - { value: '`$input->getOption(''env'')`', correct: true }
      - { value: '`$input->getArgument(''env'')`', correct: false }
      - { value: '`$input->option(''env'')`', correct: false }
      - { value: '`$input->get(''env'')`', correct: false }
    help: |
      The `getOption()` method is used to retrieve the value of a defined option.
      https://symfony.com/doc/current/console/input.html#options
  -
    question: >
      Which console event is dispatched before the application runs the command?
    answers:
      - { value: '`ConsoleEvents::COMMAND`', correct: true }
      - { value: '`ConsoleEvents::PRE_COMMAND`', correct: false }
      - { value: '`ConsoleEvents::BOOT`', correct: false }
      - { value: '`ConsoleEvents::INITIALIZE`', correct: false }
    help: |
      The `ConsoleEvents::COMMAND` event is triggered after the command is resolved but before its `execute` method.
      https://symfony.com/doc/current/console/events.html#consoleevents-command
  -
    question: >
      What is the purpose of the `setHelp()` method in a console command?
    answers:
      - { value: 'To provide detailed help text for the command, displayed with `help <command_name>`.', correct: true }
      - { value: 'To set the short description of the command.', correct: false }
      - { value: 'To define the command''s usage examples.', correct: false }
      - { value: 'To specify the command''s arguments and options.', correct: false }
    help: |
      The `setHelp()` method allows you to define a longer, more detailed help message for your command.
      https://symfony.com/doc/current/console/commands.html#full-command-example
  -
    question: >
      Which built-in command is used to display the configuration of a specific service in the dependency injection container?
    answers:
      - { value: '`debug:container <service_id>`', correct: true }
      - { value: '`container:show <service_id>`', correct: false }
      - { value: '`service:info <service_id>`', correct: false }
      - { value: '`config:debug <service_id>`', correct: false }
    help: |
      The `debug:container` command, when given a service ID, shows its definition, arguments, and tags.
      https://symfony.com/doc/current/console/usage.html#built-in-commands
  -
    question: |
      You want to ask the user a question with a default answer. Which class from `Symfony\Component\Console\Question` should you use?
    answers:
      - { value: '`Question`', correct: true }
      - { value: '`ConfirmationQuestion`', correct: false }
      - { value: '`ChoiceQuestion`', correct: false }
      - { value: '`InputQuestion`', correct: false }
    help: |
      The `Question` class allows you to define a question with an optional default value.
      https://symfony.com/doc/current/console/helpers.html#questionhelper
  -
    question: >
      What is the purpose of the `OutputInterface::VERBOSITY_NORMAL` level?
    answers:
      - { value: 'To display standard output messages, typically without debug or verbose information.', correct: true }
      - { value: 'To display only success messages.', correct: false }
      - { value: 'To display all messages by default.', correct: false }
      - { value: 'It''s the lowest verbosity level.', correct: false }
    help: |
      `VERBOSITY_NORMAL` is the default and shows typical command output.
      https://symfony.com/doc/current/console/verbosity.html
  -
    question: >
      How can you add a shortcut (alias) to a console command?
    answers:
      - { value: 'By adding `aliases: [''my:alias'']` to the `#[AsCommand]` attribute.', correct: true }
      - { value: 'By calling `$this->setAlias(''my:alias'')` in `configure()`.', correct: false }
      - { value: 'By defining an alias in `services.yaml`.', correct: false }
      - { value: 'Aliases are automatically generated based on the command name.', correct: false }
    help: |
      The `aliases` option in the `#[AsCommand]` attribute allows you to define alternative names for your command.
      https://symfony.com/doc/current/console.html#configuring-the-command
  -
    question: >
      Which built-in command is used to display the current routes defined in your Symfony application?
    answers:
      - { value: '`debug:router`', correct: true }
      - { value: '`router:list`', correct: false }
      - { value: '`route:show`', correct: false }
      - { value: '`list:routes`', correct: false }
    help: |
      The `debug:router` command lists all registered routes, including their methods, paths, and controller actions.
      https://symfony.com/doc/current/console/usage.html#built-in-commands
  -
    question: |
      You want to prevent a command from being executed if a specific option is not provided. How would you enforce this?
    answers:
      - { value: 'By using `InputOption::VALUE_REQUIRED` as the mode for the option.', correct: true }
      - { value: 'By checking `$input->hasOption(''my-option'')` in the `execute()` method.', correct: true }
      - { value: 'By throwing an `InvalidArgumentException` if the option is missing.', correct: true }
      - { value: 'By setting the option''s default value to `null`.', correct: false }
    help: |
      `InputOption::VALUE_REQUIRED` ensures the option must be present with a value. You can also manually validate its presence or value in the `execute()` method.
      https://symfony.com/doc/current/console/input.html#options
  -
    question: >
      What is the purpose of the `InputInterface::isInteractive()` method?
    answers:
      - { value: 'To check if the command is running in an interactive shell (e.g., not piped input).', correct: true }
      - { value: 'To determine if the command requires user input.', correct: false }
      - { value: 'To check if the user has provided any arguments or options.', correct: false }
      - { value: 'To verify if the output stream is a TTY.', correct: false }
    help: |
      `isInteractive()` is useful for deciding whether to prompt the user for input or to use default values when running in non-interactive environments.
      https://symfony.com/doc/current/console/input.html#interacting-with-the-user
  -
    question: >
      Which built-in command is used to install or update Composer dependencies for your Symfony project?
    answers:
      - { value: '`composer install` or `composer update` (Composer command, not Symfony).', correct: true }
      - { value: '`symfony:composer:install`', correct: false }
      - { value: '`bin/console composer:install`', correct: false }
      - { value: '`dependencies:update`', correct: false }
    help: |
      Composer is a separate dependency manager, and its commands are run directly, not through `php bin/console`.
      https://getcomposer.org/doc/
  -
    question: >
      How can you get the value of an argument named `userId` from the `InputInterface` object?
    answers:
      - { value: '`$input->getArgument(''userId'')`', correct: true }
      - { value: '`$input->getOption(''userId'')`', correct: false }
      - { value: '`$input->argument(''userId'')`', correct: false }
      - { value: '`$input->get(''userId'')`', correct: false }
    help: |
      The `getArgument()` method is used to retrieve the value of a defined argument.
      https://symfony.com/doc/current/console/input.html#arguments
  -
    question: >
      What is the purpose of the `OutputInterface::VERBOSITY_VERY_VERBOSE` level?
    answers:
      - { value: 'To display more detailed information than `NORMAL`, but less than `DEBUG`.', correct: true }
      - { value: 'It is synonymous with `VERBOSITY_DEBUG`.', correct: false }
      - { value: 'It is used for logging to a file, not the console.', correct: false }
      - { value: 'It only shows warnings and errors.', correct: false }
    help: |
      `VERBOSITY_VERY_VERBOSE` (`-vv`) provides more information than the default, often including details about internal processes.
      https://symfony.com/doc/current/console/verbosity.html
  -
    question: >
      Which built-in command is used to display information about the current Symfony environment and debug settings?
    answers:
      - { value: '`debug:config`', correct: true }
      - { value: '`debug:env`', correct: false }
      - { value: '`config:show`', correct: false }
      - { value: '`env:info`', correct: false }
    help: |
      The `debug:config` command allows you to inspect the resolved configuration for bundles or specific configuration sections.
      https://symfony.com/doc/current/console/usage.html#built-in-commands
  -
    question: |
      You want to ask the user to choose from a predefined list of options. Which class from `Symfony\Component\Console\Question` should you use?
    answers:
      - { value: '`ChoiceQuestion`', correct: true }
      - { value: '`ConfirmationQuestion`', correct: false }
      - { value: '`ListQuestion`', correct: false }
      - { value: '`OptionQuestion`', correct: false }
    help: |
      The `ChoiceQuestion` allows you to present a list of choices to the user and validate their input against those choices.
      https://symfony.com/doc/current/console/helpers.html#questionhelper
  -
    question: >
      What is the correct way to define a command description using the `#[AsCommand]` attribute?
    answers:
      - { value: '`#[AsCommand(name: ''app:my-command'', description: ''My command description.'')]`', correct: true }
      - { value: '`#[AsCommand(name: ''app:my-command'', desc: ''My command description.'')]`', correct: false }
      - { value: '`#[AsCommand(''app:my-command'', description: ''My command description.'')]`', correct: false }
      - { value: '`#[AsCommand(name: ''app:my-command'')]` and then `$this->setDescription(''My command description.'')`', correct: true }
    help: |
      The `description` key in the `#[AsCommand]` attribute is the correct way to set the command's description. Alternatively, you can use the `setDescription()` method.
      https://symfony.com/doc/current/console.html#configuring-the-command
  -
    question: >
      Which method of the `OutputInterface` allows you to write messages without a trailing newline character?
    answers:
      - { value: '`write()`', correct: true }
      - { value: '`output()`', correct: false }
      - { value: '`print()`', correct: false }
      - { value: '`echo()`', correct: false }
    help: |
      The `write()` method writes the message without adding a newline, useful for progress updates or inline text.
      https://symfony.com/doc/current/console/coloring.html#output-styles-and-colors
  -
    question: >
      What is the purpose of the `InputOption::VALUE_REQUIRED` mode for an option?
    answers:
      - { value: 'The option must be present and must have a value (e.g., `--env=prod`).', correct: true }
      - { value: 'The option is required, but its value is optional.', correct: false }
      - { value: 'The option must be present, but its value can be null.', correct: false }
      - { value: 'The option is required only if other arguments are provided.', correct: false }
    help: |
      `InputOption::VALUE_REQUIRED` ensures the option is provided and has a value.
      https://symfony.com/doc/current/console/input.html#options
  -
    question: >
      Which built-in command is used to display information about the services registered in the dependency injection container?
    answers:
      - { value: '`debug:container`', correct: true }
      - { value: '`container:list`', correct: false }
      - { value: '`service:debug`', correct: false }
      - { value: '`list:services`', correct: false }
    help: |
      The `debug:container` command, when run without arguments, lists all available services.
      https://symfony.com/doc/current/console/usage.html#built-in-commands
  -
    question: |
      How can you make a command argument accept multiple values, but only if they are explicitly provided (e.g., `php bin/console process item1 item2`)?
    answers:
      - { value: '`InputArgument::OPTIONAL | InputArgument::IS_ARRAY`', correct: true }
      - { value: '`InputArgument::REQUIRED | InputArgument::IS_ARRAY`', correct: false }
      - { value: '`InputArgument::IS_ARRAY` with a default of `[]`.', correct: true }
      - { value: '`InputArgument::OPTIONAL_ARRAY`', correct: false }
    help: |
      Combining `OPTIONAL` with `IS_ARRAY` or providing an empty array as a default for an `IS_ARRAY` argument makes it accept multiple values optionally.
      https://symfony.com/doc/current/console/input.html#arguments
  -
    question: >
      What is the purpose of the `#[AsCommand(description: '...')` attribute?
    answers:
      - { value: 'To provide a short description of the command, displayed in the `list` command.', correct: true }
      - { value: 'To define the command''s full help text.', correct: false }
      - { value: 'To specify the command''s name.', correct: false }
      - { value: 'To define the command''s usage examples.', correct: false }
    help: |
      The `description` key in `#[AsCommand]` sets the one-line description visible in the command list.
      https://symfony.com/doc/current/console.html#configuring-the-command
  -
    question: >
      Which built-in command is used to display information about configured event listeners and subscribers?
    answers:
      - { value: '`debug:event-dispatcher`', correct: true }
      - { value: '`event:list`', correct: false }
      - { value: '`listener:debug`', correct: false }
      - { value: '`debug:events`', correct: false }
    help: |
      The `debug:event-dispatcher` command shows which listeners and subscribers are registered for which events.
      https://symfony.com/doc/current/console/usage.html#built-in-commands
  -
    question: >
      How can you get the current verbosity level of the output?
    answers:
      - { value: '`$output->getVerbosity()`', correct: true }
      - { value: '`$output->isQuiet()`', correct: true }
      - { value: '`$output->isVerbose()`', correct: true }
      - { value: '`$output->isDebug()`', correct: true }
    help: |
      The `getVerbosity()` method returns the current level. Helper methods like `isQuiet()`, `isVerbose()`, and `isDebug()` provide convenient checks.
      https://symfony.com/doc/current/console/verbosity.html
  -
    question: >
      What is the purpose of the `ConsoleEvents::TERMINATE` event?
    answers:
      - { value: 'To perform cleanup tasks after a command has finished execution.', correct: true }
      - { value: 'To log command execution time.', correct: true }
      - { value: 'To handle exceptions that occur during command execution.', correct: false }
      - { value: 'To initialize services before command execution.', correct: false }
    help: |
      `ConsoleEvents::TERMINATE` is ideal for tasks that need to run after the command's main logic, such as logging or resource cleanup.
      https://symfony.com/doc/current/console/events.html#consoleevents-terminate
  -
    question: >
      Which built-in command is used to display the current environment variables loaded by Symfony?
    answers:
      - { value: '`debug:dotenv`', correct: true }
      - { value: '`debug:env`', correct: false }
      - { value: '`env:show`', correct: false }
      - { value: '`config:env`', correct: false }
    help: |
      The `debug:dotenv` command (from `symfony/dotenv`) shows the environment variables loaded from `.env` files.
      https://symfony.com/doc/current/components/dotenv.html#debugging-dotenv
  -
    question: |
      You want to display a section of text with a distinct background color and padding. Which built-in helper can achieve this?
    answers:
      - { value: '`FormatterHelper` with `formatBlock()`', correct: true }
      - { value: '`BlockHelper`', correct: false }
      - { value: '`SectionHelper`', correct: false }
      - { value: '`OutputFormatter` directly.', correct: false }
    help: |
      The `FormatterHelper::formatBlock()` method is designed for rendering blocks of text with various styles and padding.
      https://symfony.com/doc/current/console/helpers.html#formatterhelper
  -
    question: >
      What is the purpose of the `#[AsCommand(name: 'app:my-command')]` attribute?
    answers:
      - { value: 'To define the unique name by which the command is invoked from the command line.', correct: true }
      - { value: 'To set the command''s description.', correct: false }
      - { value: 'To specify the class name of the command.', correct: false }
      - { value: 'To register the command as a service.', correct: false }
    help: |
      The `name` key is crucial for identifying and executing the command.
      https://symfony.com/doc/current/console.html#configuring-the-command
  -
    question: >
      Which built-in command is used to display information about the configured Twig templates?
    answers:
      - { value: '`debug:twig`', correct: true }
      - { value: '`twig:list`', correct: false }
      - { value: '`template:debug`', correct: false }
      - { value: '`debug:templates`', correct: false }
    help: |
      The `debug:twig` command lists all available Twig templates and their paths.
      https://symfony.com/doc/current/console/usage.html#built-in-commands
  -
    question: |
      You need to run a shell command from within your Symfony console command and capture its output. Which built-in helper is best suited for this?
    answers:
      - { value: '`ProcessHelper`', correct: true }
      - { value: '`ShellHelper`', correct: false }
      - { value: '`SystemHelper`', correct: false }
      - { value: '`ExecHelper`', correct: false }
    help: |
      The `ProcessHelper` provides a convenient way to run external processes and interact with their input/output.
      https://symfony.com/doc/current/console/helpers.html#processhelper
  -
    question: >
      What is the primary role of the `Application` class in the Symfony Console component?
    answers:
      - { value: 'To manage and run console commands.', correct: true }
      - { value: 'To handle HTTP requests.', correct: false }
      - { value: 'To provide access to the dependency injection container.', correct: false }
      - { value: 'To define command arguments and options.', correct: false }
    help: |
      The `Application` class is the entry point for the console application, responsible for finding and executing commands.
      https://symfony.com/doc/current/console.html#creating-a-console-application
  -
    question: >
      How can you make an option a simple flag that doesn't accept a value (e.g., `--force`)?
    answers:
      - { value: 'By using `InputOption::VALUE_NONE` as the mode.', correct: true }
      - { value: 'By setting its default value to `true`.', correct: false }
      - { value: 'By not providing a default value.', correct: false }
      - { value: 'By using `InputOption::NO_VALUE` as the mode.', correct: false }
    help: |
      `InputOption::VALUE_NONE` is specifically for boolean flags.
      https://symfony.com/doc/current/console/input.html#options
  -
    question: >
      Which built-in command is used to display information about the configured routes and their associated controllers?
    answers:
      - { value: '`debug:router`', correct: true }
      - { value: '`router:debug`', correct: false }
      - { value: '`route:info`', correct: false }
      - { value: '`list:routes`', correct: false }
    help: |
      The `debug:router` command provides a comprehensive list of all routes.
      https://symfony.com/doc/current/console/usage.html#built-in-commands
  -
    question: |
      You want to display a message to the user and then immediately exit the command with a success status. How would you do this?
    answers:
      - { value: '`$output->writeln(''Success!''); return Command::SUCCESS;`', correct: true }
      - { value: '`$output->writeln(''Success!''); exit(0);`', correct: false }
      - { value: '`$this->exitSuccess(''Success!'');`', correct: false }
      - { value: '`$output->success(''Success!'');`', correct: false }
    help: |
      The `execute()` method should return `Command::SUCCESS` (which is 0) for a successful exit.
      https://symfony.com/doc/current/console.html#return-codes
  -
    question: >
      What is the purpose of the `InputInterface::getArguments()` method?
    answers:
      - { value: 'To retrieve all arguments as an associative array.', correct: true }
      - { value: 'To retrieve a specific argument by name.', correct: false }
      - { value: 'To retrieve all options as an associative array.', correct: false }
      - { value: 'To get the raw input string.', correct: false }
    help: |
      `getArguments()` returns an array of all arguments provided to the command.
      https://symfony.com/doc/current/console/input.html#arguments
  -
    question: >
      What is the purpose of the `InputInterface::getOptions()` method?
    answers:
      - { value: 'To retrieve all options as an associative array.', correct: true }
      - { value: 'To retrieve a specific option by name.', correct: false }
      - { value: 'To retrieve all arguments as an associative array.', correct: false }
      - { value: 'To get the raw input string.', correct: false }
    help: |
      `getOptions()` returns an array of all options provided to the command.
      https://symfony.com/doc/current/console/input.html#options
  -
    question: >
      Which built-in command is used to display information about the configured services and their dependencies?
    answers:
      - { value: '`debug:container`', correct: true }
      - { value: '`container:debug`', correct: false }
      - { value: '`service:list`', correct: false }
      - { value: '`list:services`', correct: false }
    help: |
      The `debug:container` command is the primary tool for inspecting the service container.
      https://symfony.com/doc/current/console/usage.html#built-in-commands
  -
    question: >
      How can you add a new line to the console output without writing any text?
    answers:
      - { value: '`$output->writeln('');`', correct: true }
      - { value: '`$output->newline();`', correct: false }
      - { value: '`$output->write(PHP_EOL);`', correct: true }
      - { value: '`$output->lineBreak();`', correct: false }
    help: |
      `writeln('')` writes an empty string followed by a newline. You can also explicitly write the PHP end-of-line constant.
      https://symfony.com/doc/current/console/coloring.html#output-styles-and-colors
  -
    question: >
      What is the purpose of the `InputInterface::hasArgument()` method?
    answers:
      - { value: 'To check if a specific argument was provided by the user.', correct: true }
      - { value: 'To check if any arguments were provided.', correct: false }
      - { value: 'To check if an argument is defined for the command.', correct: false }
      - { value: 'To check if an argument has a non-null value.', correct: false }
    help: |
      `hasArgument()` checks if an argument with the given name exists in the input.
      https://symfony.com/doc/current/console/input.html#arguments
  -
    question: >
      What is the purpose of the `InputInterface::hasOption()` method?
    answers:
      - { value: 'To check if a specific option was provided by the user.', correct: true }
      - { value: 'To check if any options were provided.', correct: false }
      - { value: 'To check if an option is defined for the command.', correct: false }
      - { value: 'To check if an option has a non-null value.', correct: false }
    help: |
      `hasOption()` checks if an option with the given name exists in the input.
      https://symfony.com/doc/current/console/input.html#options
  -
    question: >
      Which built-in command is used to display information about the configured compiler passes?
    answers:
      - { value: '`debug:container --compiler`', correct: true }
      - { value: '`debug:compiler`', correct: false }
      - { value: '`container:compiler`', correct: false }
      - { value: '`compiler:list`', correct: false }
    help: |
      The `debug:container` command with the `--compiler` option shows the compiler passes.
      https://symfony.com/doc/current/console/usage.html#built-in-commands
  -
    question: >
      How can you configure a console command to accept an optional argument with a default value of 'Guest'?
    answers:
      - { value: '`$this->addArgument(''name'', InputArgument::OPTIONAL, ''The user name'', ''Guest'');`', correct: true }
      - { value: '`$this->addArgument(''name'', InputArgument::OPTIONAL, ''Guest'');`', correct: false }
      - { value: '`$this->addArgument(''name'', null, ''Guest'');`', correct: false }
      - { value: '`$this->addArgument(''name'', InputArgument::OPTIONAL)->setDefault(''Guest'');`', correct: false }
    help: |
      The default value is the fourth parameter in `addArgument()`.
      https://symfony.com/doc/current/console/input.html#arguments
  -
    question: >
      What is the purpose of the `ConsoleEvents::ERROR` event?
    answers:
      - { value: 'To catch and handle exceptions thrown during command execution.', correct: true }
      - { value: 'To log errors to a file.', correct: false }
      - { value: 'To display error messages to the user.', correct: false }
      - { value: 'To prevent command execution if an error occurs.', correct: false }
    help: |
      The `ConsoleEvents::ERROR` event allows you to customize error handling, such as logging or displaying custom error messages.
      https://symfony.com/doc/current/console/events.html#consoleevents-error
  -
    question: >
      Which built-in command is used to display information about the configured cache pools?
    answers:
      - { value: '`debug:cache`', correct: true }
      - { value: '`cache:debug`', correct: false }
      - { value: '`cache:list`', correct: false }
      - { value: '`debug:pools`', correct: false }
    help: |
      The `debug:cache` command provides details about the cache pools defined in your application.
      https://symfony.com/doc/current/console/usage.html#built-in-commands
  -
    question: |
      You want to display a multi-line block of text with a specific style, such as an error message. Which method of `FormatterHelper` is suitable?
    answers:
      - { value: '`formatBlock()`', correct: true }
      - { value: '`format()`', correct: false }
      - { value: '`block()`', correct: false }
      - { value: '`writeln()` with style tags.', correct: false }
    help: |
      `FormatterHelper::formatBlock()` is designed for formatting multi-line blocks of text with predefined or custom styles.
      https://symfony.com/doc/current/console/helpers.html#formatterhelper
  -
    question: >
      What is the purpose of the `OutputInterface::VERBOSITY_VERBOSE` level?
    answers:
      - { value: 'To display more information than `NORMAL`, such as progress and intermediate steps.', correct: true }
      - { value: 'To display only verbose messages.', correct: false }
      - { value: 'It is the default verbosity level.', correct: false }
      - { value: 'It is used for debugging purposes only.', correct: false }
    help: |
      `VERBOSITY_VERBOSE` (`-v`) provides more detailed output, often used for showing progress or additional context.
      https://symfony.com/doc/current/console/verbosity.html