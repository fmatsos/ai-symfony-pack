category: Security

questions:
  -
    question: >
      Which of the following is the default filename for Symfony's main security configuration?
    answers:
      - { value: "security.yaml", correct: true }
      - { value: "security.yml", correct: false }
      - { value: "config.security.yaml", correct: false }
      - { value: "services.security.yaml", correct: false }
    help: |
      The default security configuration is typically located in `config/packages/security.yaml`.
      https://symfony.com/doc/current/security.html#default-security-configuration

  -
    question: >
      In Symfony's security configuration, what is the significance of the order in which firewalls are defined?
    answers:
      - { value: "The request will be handled by the first firewall whose pattern matches.", correct: true }
      - { value: "The firewall with the most specific pattern is always prioritized.", correct: false }
      - { value: "The last defined firewall always takes precedence.", correct: false }
      - { value: "The order only matters for stateless firewalls.", correct: false }
    help: |
      The order of firewalls is crucial as Symfony processes them sequentially, and the first matching firewall handles the request.
      https://symfony.com/doc/current/security.html#firewalls

  -
    question: |
      Given the following `password_hashers` configuration, what algorithm will be used for `App\Entity\User`?

      ```yaml
      # config/packages/security.yaml
      security:
          password_hashers:
              App\Entity\User: 'auto'
              Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                  algorithm: 'bcrypt'
                  cost: 13
      ```
    answers:
      - { value: "auto", correct: true }
      - { value: "bcrypt", correct: false }
      - { value: "argon2i", correct: false }
      - { value: "sha512", correct: false }
    help: |
      When a specific class is configured, its settings take precedence. `auto` will automatically select the best available hasher.
      https://symfony.com/doc/current/security/passwords.html#configuring-password-hashers

  -
    question: >
      Which Symfony CLI command can be used to automatically generate a controller, Twig template, and update security configuration for a form-based login system?
    answers:
      - { value: "php bin/console make:security:form-login", correct: true }
      - { value: "php bin/console make:auth:form", correct: false }
      - { value: "php bin/console security:generate-login", correct: false }
      - { value: "php bin/console make:controller LoginController", correct: false }
    help: |
      The `make:security:form-login` command streamlines the setup of a form-based login.
      https://symfony.com/doc/current/security.html#form-login

  -
    question: |
      Consider the following controller:

      ```php
      // src/Controller/AdminController.php
      namespace App\Controller;

      use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
      use Symfony\Component\HttpFoundation\Response;
      use Symfony\Component\Security\Http\Attribute\IsGranted;

      #[IsGranted('ROLE_ADMIN')]
      class AdminController extends AbstractController
      {
          #[IsGranted('ROLE_SUPER_ADMIN', message: 'You are not allowed to access the admin dashboard.')]
          public function adminDashboard(): Response
          {
              return new Response('Admin Dashboard');
          }

          public function userManagement(): Response
          {
              return new Response('User Management');
          }
      }
      ```
      What role is required to access the `userManagement` action?
    answers:
      - { value: "ROLE_ADMIN", correct: true }
      - { value: "ROLE_SUPER_ADMIN", correct: false }
      - { value: "IS_AUTHENTICATED_FULLY", correct: false }
      - { value: "No specific role is required.", correct: false }
    help: |
      The `#[IsGranted]` attribute applied at the class level secures all actions within that controller, unless explicitly overridden by an attribute on a method.
      https://symfony.com/doc/current/security.html#securing-controllers-and-templates

  -
    question: |
      Which of the following YAML configurations correctly restricts access to all URLs starting with `/admin` to users with `ROLE_ADMIN`?
    answers:
      - { value: '''- { path: "^/admin", roles: ROLE_ADMIN }''', correct: true }
      - { value: '''- { route: "admin_prefix", roles: ROLE_ADMIN }''', correct: false }
      - { value: '''- { pattern: "^/admin", access: ROLE_ADMIN }''', correct: false }
      - { value: '''- { path: "/admin/*", roles: ROLE_ADMIN }''', correct: false }
    help: |
      The `access_control` section uses `path` with a regular expression and `roles` to define access restrictions.
      https://symfony.com/doc/current/security.html#securing-url-patterns-access-control

  -
    question: |
      How would you configure the logout path for the `main` firewall in `security.yaml`?
    answers:
      - { value: '''logout: { path: app_logout }''', correct: true }
      - { value: '''logout_path: app_logout''', correct: false }
      - { value: '''path: app_logout''', correct: false }
      - { value: '''target_path: app_logout''', correct: false }
    help: |
      The `logout` option within a firewall configuration takes a `path` parameter.
      https://symfony.com/doc/current/security.html#logging-out

  -
    question: |
      You are implementing a REST API and want to use JSON for authentication. Which option should you configure under your firewall to enable JSON login?
    answers:
      - { value: "json_login", correct: true }
      - { value: "api_login", correct: false }
      - { value: "token_login", correct: false }
      - { value: "http_basic", correct: false }
    help: |
      The `json_login` authenticator is used for token-based authentication via JSON.
      https://symfony.com/doc/current/security.html#json-login

  -
    question: |
      By default, how many login attempts per minute does Symfony's `login_throttling` feature allow before blocking?
    answers:
      - { value: "5", correct: true }
      - { value: "3", correct: false }
      - { value: "10", correct: false }
      - { value: "Unlimited, unless configured.", correct: false }
    help: |
      The default `login_throttling` allows 5 attempts per minute.
      https://symfony.com/doc/current/security.html#login-throttling

  -
    question: |
      Which `access_control` option is used to force a specific URL path to be accessed over HTTPS?
    answers:
      - { value: "requires_channel: https", correct: true }
      - { value: "secure_channel: true", correct: false }
      - { value: "force_ssl: true", correct: false }
      - { value: "protocol: https", correct: false }
    help: |
      The `requires_channel` option with value `https` enforces HTTPS for the matched path.
      https://symfony.com/doc/current/security/force_https.html

  -
    question: >
      Which `session_fixation_strategy` option is recommended for mitigating session fixation attacks while preserving session attributes after authentication?
    answers:
      - { value: "MIGRATE", correct: true }
      - { value: "INVALIDATE", correct: false }
      - { value: "NONE", correct: false }
      - { value: "REGENERATE", correct: false }
    help: |
      `MIGRATE` updates the session ID but keeps existing attributes, which is generally the recommended approach. `INVALIDATE` regenerates the entire session, losing attributes.
      https://symfony.com/doc/current/reference/configuration/security.html#session-fixation-strategy

  -
    question: >
      When writing a custom security voter, why is it generally discouraged to use `Security::isGranted()` directly within the voter's logic?
    answers:
      - { value: "It can lead to potential token mismatches or infinite loops.", correct: true }
      - { value: "It bypasses the voter's own logic.", correct: false }
      - { value: "The `Security` service is not available within voters.", correct: false }
      - { value: "It is a deprecated method for voters.", correct: false }
    help: |
      Using `Security::isGranted()` inside a voter can lead to issues like token inconsistencies. It's better to use the `AccessDecisionManager` directly.
      https://symfony.com/doc/current/security/voters.html#checking-access-inside-a-voter

  -
    question: >
      Which interface should a `User` class implement in Symfony if you want to customize how two user objects are compared for equality (e.g., when refreshing the user from the session)?
    answers:
      - { value: "Symfony\\Component\\Security\\Core\\User\\EquatableInterface", correct: true }
      - { value: "Symfony\\Component\\Security\\Core\\User\\UserInterface", correct: false }
      - { value: "Symfony\\Component\\Security\\Core\\User\\AdvancedUserInterface", correct: false }
      - { value: "Symfony\\Component\\Security\\Core\\User\\ComparableUserInterface", correct: false }
    help: |
      The `EquatableInterface` provides the `isEqualTo()` method for custom user comparison logic.
      https://symfony.com/doc/current/security.html#user-refreshing-and-the-equatableinterface

  -
    question: >
      Which security event is dispatched after the authenticator has created the security passport, and is typically where actual authentication checks (like password validation or CSRF token checks) occur?
    answers:
      - { value: "Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent", correct: true }
      - { value: "Symfony\\Component\\Security\\Core\\Event\\AuthenticationSuccessEvent", correct: false }
      - { value: "Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent", correct: false }
      - { value: "Symfony\\Component\\Security\\Http\\Event\\AuthenticationTokenCreatedEvent", correct: false }
    help: |
      `CheckPassportEvent` is the event where the passport is validated.
      https://symfony.com/doc/current/security.html#security-events

  -
    question: >
      In Symfony's security expression language, which function returns `true` if the user is authenticated via "remember-me" or "fully" (i.e., is logged in)?
    answers:
      - { value: "is_authenticated()", correct: true }
      - { value: "is_logged_in()", correct: false }
      - { value: "is_granted('IS_AUTHENTICATED_REMEMBERED')", correct: false }
      - { value: "is_granted('IS_AUTHENTICATED_FULLY')", correct: false }
    help: |
      The `is_authenticated()` function checks if the user is logged in, regardless of the authentication method (remember-me or full).
      https://symfony.com/doc/current/security/expressions.html#available-variables-and-functions

  -
    question: |
      How can you restrict access to a specific path, e.g., `/internal`, to only allow requests from `127.0.0.1` and `::1` using `access_control` in `security.yaml`?
    answers:
      - { value: '''- { path: "^/internal", roles: PUBLIC_ACCESS, ips: [127.0.0.1, "::1"] }''', correct: true }
      - { value: '''- { path: "^/internal", roles: PUBLIC_ACCESS, ip: "127.0.0.1, ::1" }''', correct: false }
      - { value: '''- { path: "^/internal", roles: PUBLIC_ACCESS, allowed_ips: [127.0.0.1, "::1"] }''', correct: false }
      - { value: '''- { path: "^/internal", roles: PUBLIC_ACCESS, client_ip: "127.0.0.1|::1" }''', correct: false }
    help: |
      The `ips` option in `access_control` accepts an array of IP addresses or subnet masks.
      https://symfony.com/doc/current/security/access_control.html#matching-by-ip-address

  -
    question: |
      You want to grant access to a path `/_internal/secure` if the user has `ROLE_ADMIN` OR if the request's client IP is `127.0.0.1`. Which `access_control` configuration achieves this?
    answers:
      - { value: '''- { path: "^/_internal/secure", roles: "ROLE_ADMIN", allow_if: "\'127.0.0.1\' == request.getClientIp()" }''', correct: true }
      - { value: '''- { path: "^/_internal/secure", roles: "ROLE_ADMIN" }''', correct: false }
      - { value: '''- { path: "^/_internal/secure", allow_if: "is_granted(\'ROLE_ADMIN\') or \'127.0.0.1\' == request.getClientIp()" }''', correct: false }
      - { value: '''- { path: "^/_internal/secure", roles: "ROLE_ADMIN", ip: "127.0.0.1" }''', correct: false }
    help: |
      The `allow_if` option provides a security expression that works in an OR fashion with the `roles` option.
      https://symfony.com/doc/current/security/access_control.html#using-an-expression-for-access-control

  -
    question: >
      Which Symfony security authenticator is typically used when an external system (like a web server) handles initial authentication and passes the user identifier via a server parameter (e.g., `REMOTE_USER`)?
    answers:
      - { value: "remote_user", correct: true }
      - { value: "http_basic", correct: false }
      - { value: "x509", correct: false }
      - { value: "pre_authenticated", correct: false }
    help: |
      The `remote_user` authenticator is designed for scenarios where authentication is handled externally.
      https://symfony.com/doc/current/security.html#remote-user-authentication

  -
    question: |
      To enable client certificate-based authentication in Symfony, which authenticator should be configured in your firewall?
    answers:
      - { value: "x509", correct: true }
      - { value: "certificate", correct: false }
      - { value: "ssl_client", correct: false }
      - { value: "tls_auth", correct: false }
    help: |
      The `x509` authenticator is used for X.509 client certificate authentication.
      https://symfony.com/doc/current/security.html#x-509-authentication

  -
    question: >
      Which interface should a user class implement to allow Symfony to rehash their password automatically if a stronger algorithm or higher cost is configured?
    answers:
      - { value: "Symfony\\Component\\Security\\Core\\User\\PasswordUpgraderInterface", correct: true }
      - { value: "Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInterface", correct: false }
      - { value: "Symfony\\Component\\Security\\Core\\User\\UserInterface", correct: false }
      - { value: "Symfony\\Component\\PasswordHasher\\PasswordHasherInterface", correct: false }
    help: |
      `PasswordUpgraderInterface` defines the `upgradePassword()` method for re-hashing passwords.
      https://symfony.com/doc/current/security/passwords.html#re-hashing-passwords

  -
    question: >
      Which Symfony CLI command is used to scan your project's dependencies for known security vulnerabilities?
    answers:
      - { value: "symfony check:security", correct: true }
      - { value: "composer audit", correct: false }
      - { value: "php bin/console security:audit", correct: false }
      - { value: "symfony security:check", correct: false }
    help: |
      The `symfony check:security` command checks for vulnerabilities.
      https://symfony.com/doc/current/setup.html#checking-security-vulnerabilities

  -
    question: >
      Which command can be used to perform a security audit on your application's JavaScript dependencies managed by the AssetMapper component?
    answers:
      - { value: "php bin/console importmap:audit", correct: true }
      - { value: "php bin/console asset:audit", correct: false }
      - { value: "php bin/console security:js-audit", correct: false }
      - { value: "npm audit", correct: false }
    help: |
      The `importmap:audit` command checks for vulnerabilities in importmap-managed dependencies.
      https://symfony.com/doc/current/frontend/asset_mapper.html#security-audit

  -
    question: |
      In a Twig template, how can you access the currently authenticated user's email, ensuring it's only displayed if the user is fully authenticated?
    answers:
      - { value: '''{% if is_granted('IS_AUTHENTICATED_FULLY') %}<p>Email: {{ app.user.email }}</p>{% endif %}''', correct: true }
      - { value: '''{% if app.user %}<p>Email: {{ app.user.email }}</p>{% endif %}''', correct: false }
      - { value: '''{% if is_authenticated() %}<p>Email: {{ app.user.email }}</p>{% endif %}''', correct: false }
      - { value: '''{% if user.isFullyAuthenticated %}<p>Email: {{ user.email }}</p>{% endif %}''', correct: false }
    help: |
      `app.user` provides access to the user object, and `is_granted('IS_AUTHENTICATED_FULLY')` checks the authentication status.
      https://symfony.com/doc/current/security.html#accessing-the-user-in-a-twig-template

  -
    question: |
      When injecting the `Security` service into a custom service, why is it recommended to avoid calling `getFirewallConfig()` in the constructor?
    answers:
      - { value: "Authentication may not be complete yet when the service is constructed.", correct: true }
      - { value: "The `RequestStack` is not available in the constructor.", correct: false }
      - { value: "It can lead to circular dependencies.", correct: false }
      - { value: "The firewall configuration is static and doesn't need to be retrieved dynamically.", correct: false }
    help: |
      Authentication might not be fully established during service construction, so it's safer to call `getFirewallConfig()` in a method that's executed later.
      https://symfony.com/doc/current/security.html#retrieving-the-firewall-configuration-in-a-service

  -
    question: |
      You want to implement a custom login rate limiter service named `app.my_login_rate_limiter`. Which `login_throttling` option in your firewall configuration should you use to specify this service?
    answers:
      - { value: "limiter: app.my_login_rate_limiter", correct: true }
      - { value: "service: app.my_login_rate_limiter", correct: false }
      - { value: "rate_limiter: app.my_login_rate_limiter", correct: false }
      - { value: "custom_limiter: app.my_login_rate_limiter", correct: false }
    help: |
      The `limiter` option allows you to specify a custom rate limiter service ID.
      https://symfony.com/doc/current/security.html#configuring-login-throttling

  -
    question: >
      By default, when a user logs out from any firewall in Symfony, what happens to their session across other firewalls?
    answers:
      - { value: "Their session is invalidated across all firewalls.", correct: true }
      - { value: "Their session remains active on other firewalls.", correct: false }
      - { value: "Only the session for the current firewall is invalidated.", correct: false }
      - { value: "The behavior depends on the `session_fixation_strategy`.", correct: false }
    help: |
      The `invalidate_session` option defaults to `true`, meaning logout from one firewall invalidates the session for all.
      https://symfony.com/doc/current/reference/configuration/security.html#invalidate-session

  -
    question: >
      Which `logout` option defines the name of the parameter that stores the CSRF token value for a logout request?
    answers:
      - { value: "csrf_parameter", correct: true }
      - { value: "token_parameter", correct: false }
      - { value: "csrf_field", correct: false }
      - { value: "logout_token_param", correct: false }
    help: |
      The `csrf_parameter` option specifies the name of the CSRF token parameter.
      https://symfony.com/doc/current/reference/configuration/security.html#csrf-parameter

  -
    question: >
      After a successful logout, to which path or route will Symfony redirect the user by default if no `target` option is explicitly configured?
    answers:
      - { value: "/", correct: true }
      - { value: "/login", correct: false }
      - { value: "/homepage", correct: false }
      - { value: "The previous URL.", correct: false }
    help: |
      The `target` option for logout defaults to `/`.
      https://symfony.com/doc/current/reference/configuration/security.html#target

  -
    question: >
      Which `logout` option allows you to control the `Clear-Site-Data` HTTP header, enabling clearing of client-side data like cookies or cache upon logout?
    answers:
      - { value: "clear_site_data", correct: true }
      - { value: "clear_cache", correct: false }
      - { value: "delete_cookies", correct: false }
      - { value: "reset_browser_data", correct: false }
    help: |
      The `clear_site_data` option configures the `Clear-Site-Data` HTTP header.
      https://symfony.com/doc/current/reference/configuration/security.html#clear-site-data

  -
    question: >
      In a form login configuration, what is the default name of the POST parameter Symfony expects for the username field?
    answers:
      - { value: "_username", correct: true }
      - { value: "username", correct: false }
      - { value: "user_id", correct: false }
      - { value: "email", correct: false }
    help: |
      The `username_parameter` option defaults to `_username`.
      https://symfony.com/doc/current/reference/configuration/security.html#username-parameter

  -
    question: |
      Consider the following `access_control` rules:

      ```yaml
      # config/packages/security.yaml
      security:
          access_control:
              - { path: '^/admin/users', roles: ROLE_SUPER_ADMIN }
              - { path: '^/admin', roles: ROLE_ADMIN }
      ```
      If a user tries to access `/admin/users/edit`, which role is required?
    answers:
      - { value: "ROLE_SUPER_ADMIN", correct: true }
      - { value: "ROLE_ADMIN", correct: false }
      - { value: "Both ROLE_SUPER_ADMIN and ROLE_ADMIN", correct: false }
      - { value: "No role, as it's not explicitly denied.", correct: false }
    help: |
      Symfony applies the *first* access control rule that matches. More specific rules should come before more general ones.
      https://symfony.com/doc/current/security.html#access-control-rule-order

  -
    question: |
      How can you restrict access to a specific route named `admin_dashboard` to users with `ROLE_ADMIN` using `access_control` in `security.yaml`?
    answers:
      - { value: '''- { route: "admin_dashboard", roles: ROLE_ADMIN }''', correct: true }
      - { value: '''- { path: "@admin_dashboard", roles: ROLE_ADMIN }''', correct: false }
      - { value: '''- { attributes: {"_route": "admin_dashboard"}, roles: ROLE_ADMIN }''', correct: true }
      - { value: '''- { route_name: "admin_dashboard", roles: ROLE_ADMIN }''', correct: false }
    help: |
      You can use either the `route` shortcut or the `attributes` option with `_route` to match by route name.
      https://symfony.com/doc/current/security/access_control.html#matching-by-route-name

  -
    question: |
      Which `access_control` option allows you to restrict access to a path based on the request's hostname, using a regular expression?
    answers:
      - { value: "host", correct: true }
      - { value: "hostname", correct: false }
      - { value: "domain", correct: false }
      - { value: "server_name", correct: false }
    help: |
      The `host` option accepts a regular expression to match against the request's hostname.
      https://symfony.com/doc/current/security/access_control.html#matching-by-host

  -
    question: |
      You want to restrict access to a specific path to only allow `POST` and `PUT` HTTP methods. Which `access_control` option should you use?
    answers:
      - { value: "methods: [POST, PUT]", correct: true }
      - { value: "http_methods: [POST, PUT]", correct: false }
      - { value: "request_methods: [POST, PUT]", correct: false }
      - { value: "allow_methods: [POST, PUT]", correct: false }
    help: |
      The `methods` option in `access_control` allows specifying allowed HTTP methods.
      https://symfony.com/doc/current/security/access_control.html#matching-by-http-method

  -
    question: |
      How can you configure an `access_control` rule to only apply if the request is made on port `8080` for the path `/cart/checkout`?
    answers:
      - { value: '''- { path: "^/cart/checkout", roles: PUBLIC_ACCESS, port: 8080 }''', correct: true }
      - { value: '''- { path: "^/cart/checkout", roles: PUBLIC_ACCESS, server_port: 8080 }''', correct: false }
      - { value: '''- { path: "^/cart/checkout", roles: PUBLIC_ACCESS, on_port: 8080 }''', correct: false }
      - { value: '''- { path: "^/cart/checkout", roles: PUBLIC_ACCESS, request_port: 8080 }''', correct: false }
    help: |
      The `port` option in `access_control` allows matching based on the request port.
      https://symfony.com/doc/current/security/access_control.html#matching-by-port

  -
    question: >
      In a Symfony form login configuration, what is the difference between `login_path` and `check_path`?
    answers:
      - { value: "`login_path` is the URL where the login form is displayed, while `check_path` is the URL where the login form is submitted for authentication.", correct: true }
      - { value: "`login_path` is for successful login, `check_path` is for failed login.", correct: false }
      - { value: "They are interchangeable and refer to the same URL.", correct: false }
      - { value: "`login_path` is for GET requests, `check_path` is for POST requests.", correct: false }
    help: |
      `login_path` is where the form is rendered, and `check_path` is where the form submission is handled by the security system.
      https://symfony.com/doc/current/security.html#form-login

  -
    question: >
      Which method of `Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface` is responsible for returning the hashed password of a user?
    answers:
      - { value: "getPassword()", correct: true }
      - { value: "getHashedPassword()", correct: false }
      - { value: "getUserPassword()", correct: false }
      - { value: "retrievePassword()", correct: false }
    help: |
      The `getPassword()` method is part of the `PasswordAuthenticatedUserInterface`.
      https://symfony.com/doc/current/security/passwords.html#passwordauthenticateduserinterface

  -
    question: >
      Which method of `Symfony\Component\PasswordHasher\PasswordHasherInterface` should you use to determine if a user's stored hashed password needs to be rehashed (e.g., due to an outdated algorithm or cost)?
    answers:
      - { value: "needsRehash(hashedPassword)", correct: true }
      - { value: "isOutdated(hashedPassword)", correct: false }
      - { value: "shouldRehash(hashedPassword)", correct: false }
      - { value: "rehashRequired(hashedPassword)", correct: false }
    help: |
      The `needsRehash()` method indicates if a password needs re-hashing.
      https://symfony.com/doc/current/security/passwords.html#re-hashing-passwords

  -
    question: >
      In Symfony's security expression language, what is the purpose of the `is_granted(permission, object)` function?
    answers:
      - { value: "Checks if the user has the given permission on an optional subject object.", correct: true }
      - { value: "Grants a specific permission to the current user.", correct: false }
      - { value: "Checks if the user is authenticated and has any role.", correct: false }
      - { value: "Determines if a specific object is accessible to the current user.", correct: false }
    help: |
      `is_granted()` is equivalent to using the `isGranted()` method of the security service.
      https://symfony.com/doc/current/security/expressions.html#available-variables-and-functions

  -
    question: >
      Which security expression function is equivalent to checking if the user has the `IS_AUTHENTICATED_FULLY` role?
    answers:
      - { value: "is_fully_authenticated()", correct: true }
      - { value: "is_authenticated_fully()", correct: false }
      - { value: "is_granted('IS_AUTHENTICATED_FULLY')", correct: false }
      - { value: "is_authenticated()", correct: false }
    help: |
      `is_fully_authenticated()` is a direct equivalent to checking for `IS_AUTHENTICATED_FULLY`.
      https://symfony.com/doc/current/security/expressions.html#available-variables-and-functions

  -
    question: >
      Which security event is dispatched after authentication was fully successful and allows listeners to modify the response sent back to the user?
    answers:
      - { value: "Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent", correct: true }
      - { value: "Symfony\\Component\\Security\\Core\\Event\\AuthenticationSuccessEvent", correct: false }
      - { value: "Symfony\\Component\\Security\\Http\\Event\\InteractiveLoginEvent", correct: false }
      - { value: "Symfony\\Component\\Security\\Http\\Event\\AuthenticationTokenCreatedEvent", correct: false }
    help: |
      `LoginSuccessEvent` is dispatched after successful authentication and allows response modification.
      https://symfony.com/doc/current/security.html#security-events

  -
    question: >
      Which security event is dispatched after an `AuthenticationException` was thrown during authentication and allows listeners to modify the error response sent back to the user?
    answers:
      - { value: "Symfony\\Component\\Security\\Http\\Event\\LoginFailureEvent", correct: true }
      - { value: "Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException", correct: false }
      - { value: "Symfony\\Component\\Security\\Http\\Event\\AuthenticationFailureEvent", correct: false }
      - { value: "Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent", correct: false }
    help: |
      `LoginFailureEvent` is dispatched on authentication failure and allows modifying the error response.
      https://symfony.com/doc/current/security.html#security-events

  -
    question: >
      Which security event is dispatched just before a user logs out of your application?
    answers:
      - { value: "Symfony\\Component\\Security\\Http\\Event\\LogoutEvent", correct: true }
      - { value: "Symfony\\Component\\Security\\Http\\Event\\PreLogoutEvent", correct: false }
      - { value: "Symfony\\Component\\Security\\Http\\Event\\SessionInvalidateEvent", correct: false }
      - { value: "Symfony\\Component\\Security\\Http\\Event\\UserLogoutEvent", correct: false }
    help: |
      The `LogoutEvent` is dispatched right before the logout process completes.
      https://symfony.com/doc/current/security.html#security-events

  -
    question: >
      Which security event is dispatched after impersonation (e.g., using `switch_user`) is completed?
    answers:
      - { value: "Symfony\\Component\\Security\\Http\\Event\\SwitchUserEvent", correct: true }
      - { value: "Symfony\\Component\\Security\\Http\\Event\\ImpersonationEvent", correct: false }
      - { value: "Symfony\\Component\\Security\\Http\\Event\\UserSwitchedEvent", correct: false }
      - { value: "Symfony\\Component\\Security\\Http\\Event\\PostLoginEvent", correct: false }
    help: |
      The `SwitchUserEvent` is specific to the impersonation feature.
      https://symfony.com/doc/current/security.html#security-events

  -
    question: >
      Which security event is dispatched when authentication is nearing success, and is the last event that can make an authentication fail by throwing an `AuthenticationException`?
    answers:
      - { value: "Symfony\\Component\\Security\\Core\\Event\\AuthenticationSuccessEvent", correct: true }
      - { value: "Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent", correct: false }
      - { value: "Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent", correct: false }
      - { value: "Symfony\\Component\\Security\\Http\\Event\\AuthenticationTokenCreatedEvent", correct: false }
    help: |
      `AuthenticationSuccessEvent` allows for final checks before authentication is fully successful.
      https://symfony.com/doc/current/security.html#security-events

  -
    question: >
      Which security event is dispatched after the passport was validated and the authenticator created the security token (and user), allowing for modification of the created token?
    answers:
      - { value: "Symfony\\Component\\Security\\Http\\Event\\AuthenticationTokenCreatedEvent", correct: true }
      - { value: "Symfony\\Component\\Security\\Core\\Event\\AuthenticationSuccessEvent", correct: false }
      - { value: "Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent", correct: false }
      - { value: "Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent", correct: false }
    help: |
      `AuthenticationTokenCreatedEvent` is for advanced use-cases where the token needs modification.
      https://symfony.com/doc/current/security.html#security-events

  -
    question: >
      Which security event is dispatched when a user is deauthenticated, for instance, because their password was changed?
    answers:
      - { value: "Symfony\\Component\\Security\\Http\\Event\\TokenDeauthenticatedEvent", correct: true }
      - { value: "Symfony\\Component\\Security\\Http\\Event\\UserDeauthenticatedEvent", correct: false }
      - { value: "Symfony\\Component\\Security\\Http\\Event\\SessionInvalidateEvent", correct: false }
      - { value: "Symfony\\Component\\Security\\Http\\Event\\LogoutEvent", correct: false }
    help: |
      `TokenDeauthenticatedEvent` specifically signals a user's deauthentication.
      https://symfony.com/doc/current/security.html#security-events

  -
    question: >
      Which user provider type allows you to combine multiple user providers, searching for a user in each of them in a defined order?
    answers:
      - { value: "chain", correct: true }
      - { value: "aggregate", correct: false }
      - { value: "composite", correct: false }
      - { value: "multi", correct: false }
    help: |
      The `chain` provider type allows combining multiple user providers.
      https://symfony.com/doc/current/security/user_providers.html#chaining-user-providers

  -
    question: >
      Which user provider type is used to authenticate users against an LDAP directory?
    answers:
      - { value: "ldap", correct: true }
      - { value: "directory", correct: false }
      - { value: "active_directory", correct: false }
      - { value: "remote_directory", correct: false }
    help: |
      The `ldap` provider type is specifically for LDAP authentication.
      https://symfony.com/doc/current/security/user_providers.html#ldap-user-provider

  -
    question: >
      What is the purpose of the `context` option within a Symfony firewall configuration?
    answers:
      - { value: "To allow multiple firewalls to share the same authentication state.", correct: true }
      - { value: "To define the environment in which the firewall operates (e.g., 'dev', 'prod').", correct: false }
      - { value: "To specify the security context for access control decisions.", correct: false }
      - { value: "To enable context-aware authentication methods.", correct: false }
    help: |
      The `context` option enables sharing authentication state across firewalls.
      https://symfony.com/doc/current/reference/configuration/security.html#context

  -
    question: |
      Which of the following `access_control` configurations correctly restricts access to the `/api` path to users with `ROLE_API_USER` and only for `GET` and `POST` requests?
    answers:
      - { value: '''- { path: "^/api", roles: ROLE_API_USER, methods: [GET, POST] }''', correct: true }
      - { value: '''- { path: "^/api", roles: ROLE_API_USER, http_methods: [GET, POST] }''', correct: false }
      - { value: '''- { path: "^/api", roles: ROLE_API_USER, allow_methods: "GET, POST" }''', correct: false }
      - { value: '''- { path: "^/api", roles: ROLE_API_USER, method: "GET|POST" }''', correct: false }
    help: |
      The `methods` option is used to specify allowed HTTP methods.
      https://symfony.com/doc/current/security/access_control.html#matching-by-http-method

  -
    question: >
      What is the primary purpose of the `#[AsCommand]` attribute in a Symfony console command?
    answers:
      - { value: "To define the command's name and description.", correct: true }
      - { value: "To inject services into the command.", correct: false }
      - { value: "To execute the command automatically.", correct: false }
      - { value: "To link the command to a specific controller.", correct: false }
    help: |
      The `#[AsCommand]` attribute is used to configure the command's name, description, and other options directly in the class.
      https://symfony.com/doc/current/console.html#configuring-the-command

  -
    question: |
      Given the following service definition, how would you correctly inject the `monolog.logger` service?

      ```php
      namespace App\Service;

      class MyService
      {
          public function __construct(
              private /* ??? */ $logger
          ) {}
      }
      ```
    answers:
      - { value: "`Psr\\Log\\LoggerInterface`", correct: true }
      - { value: "`LoggerInterface`", correct: true }
      - { value: "`#[Autowire(service: 'monolog.logger')]`", correct: false }
      - { value: "`#[Target('monolog.logger')]`", correct: false }
      - { value: "`Monolog\\Logger`", correct: false }
    help: |
      Symfony's autowiring mechanism allows you to type-hint against interfaces like `Psr\\Log\\LoggerInterface`. When a specific logger channel is not configured, this interface will be automatically injected.
      https://symfony.com/doc/current/logging.html#autowiring-logger-channels

  -
    question: >
      Which of the following correctly configures the HTTP client to use HTTP/2?
    answers:
      - { value: "Set the `http_version` option to \"2.0\" in the client configuration.", correct: true }
      - { value: "Set the `version` option to '2.0' in the client configuration.", correct: false }
      - { value: "Enable the `http2` flag in `framework.yaml`.", correct: false }
    help: |
      To use HTTP/2, you must set the `http_version` option to `2.0` when creating the HTTP client.
      https://symfony.com/doc/current/http_client.html#http-2-support

  -
    question: >
      What is the default value for the `path` option in Symfony's security logout configuration?
    answers:
      - { value: "/logout", correct: true }
      - { value: "/exit", correct: false }
      - { value: "/signout", correct: false }
      - { value: "/", correct: false }
    help: |
      The `path` option for logout defaults to `/logout`.
      https://symfony.com/doc/current/reference/configuration/security.html#path

  -
    question: >
      What is the default value for the `csrf_token_id` option in Symfony's security logout configuration?
    answers:
      - { value: "logout", correct: true }
      - { value: "_logout", correct: false }
      - { value: "csrf_logout", correct: false }
      - { value: "security_logout", correct: false }
    help: |
      The `csrf_token_id` option for logout defaults to `logout`.
      https://symfony.com/doc/current/reference/configuration/security.html#csrf-token-id

  -
    question: >
      When configuring `login_throttling` in Symfony, what is the default `interval` if `max_attempts` is set but `interval` is not?
    answers:
      - { value: "1 minute", correct: true }
      - { value: "5 minutes", correct: false }
      - { value: "15 minutes", correct: false }
      - { value: "30 seconds", correct: false }
    help: |
      By default, `login_throttling` applies `max_attempts` per minute if no custom interval is specified.
      https://symfony.com/doc/current/security.html#configuring-login-throttling

  -
    question: >
      Which of the following is NOT a valid `session_fixation_strategy` option in Symfony security?
    answers:
      - { value: "REGENERATE", correct: true }
      - { value: "NONE", correct: false }
      - { value: "MIGRATE", correct: false }
      - { value: "INVALIDATE", correct: false }
    help: |
      The valid options are `NONE`, `MIGRATE`, and `INVALIDATE`.
      https://symfony.com/doc/current/reference/configuration/security.html#session-fixation-strategy

  -
    question: >
      What is the purpose of the `lazy: true` option in a Symfony firewall configuration?
    answers:
      - { value: "It defers loading of the user provider until it's actually needed for authentication.", correct: true }
      - { value: "It makes the firewall stateless, avoiding session usage.", correct: false }
      - { value: "It enables lazy loading of all security-related services for performance.", correct: false }
      - { value: "It only authenticates users on demand, not on every request.", correct: false }
    help: |
      `lazy: true` ensures that the user provider and other authentication components are only initialized when an authentication attempt is made.
      https://symfony.com/doc/current/security.html#firewalls-lazy-loading

  -
    question: >
      Which of the following is a key component of Symfony's new security system (since Symfony 5.1) that represents the authenticated identity and holds badges?
    answers:
      - { value: "Passport", correct: true }
      - { value: "Token", correct: false }
      - { value: "Credentials", correct: false }
      - { value: "Identity", correct: false }
    help: |
      The Passport object is a central concept in the new security system, holding the user's identity and authentication badges.
      (Internal knowledge, as specific API doc for Passport is not in the provided snippets, but it's a core concept of new security system)

  -
    question: >
      In Symfony security, what is a "badge" typically used for within a Passport?
    answers:
      - { value: "To store additional, non-sensitive information about the authentication process or user.", correct: true }
      - { value: "To represent the user's roles and permissions.", correct: false }
      - { value: "To store the user's hashed password.", correct: false }
      - { value: "To define the authentication method used.", correct: false }
    help: |
      Badges are used to attach additional information to the Passport, such as remember-me, CSRF tokens, or other authentication-related data.
      (Internal knowledge, as specific API doc for Badges is not in the provided snippets, but it's a core concept of new security system)

  -
    question: >
      When creating a custom authenticator, which method is responsible for creating a `Passport` object from the request?
    answers:
      - { value: "authenticate(Request $request)", correct: true }
      - { value: "createPassport(Request $request)", correct: false }
      - { value: "supports(Request $request)", correct: false }
      - { value: "onAuthenticationSuccess(Request $request, TokenInterface $token, string $firewallName)", correct: false }
    help: |
      The `authenticate()` method of an authenticator is where the `Passport` is created.
      (Internal knowledge, common authenticator interface method)

  -
    question: >
      Which of the following best describes the role of a "Voter" in Symfony's security component?
    answers:
      - { value: "To determine if a user has access to a specific resource or action based on attributes and a subject.", correct: true }
      - { value: "To authenticate users and create security tokens.", correct: false }
      - { value: "To manage user sessions and logout processes.", correct: false }
      - { value: "To hash user passwords securely.", correct: false }
    help: |
      Voters are used by the `AccessDecisionManager` to make authorization decisions.
      https://symfony.com/doc/current/security/voters.html

  -
    question: >
      What is the default voting strategy used by Symfony's `AccessDecisionManager` if not explicitly configured?
    answers:
      - { value: "affirmative", correct: true }
      - { value: "unanimous", correct: false }
      - { value: "consensus", correct: false }
      - { value: "priority", correct: false }
    help: |
      The default voting strategy is `affirmative`, meaning if at least one voter grants access, access is granted.
      (Internal knowledge, common security configuration default)

  -
    question: >
      Which of the following is a valid role that indicates a user is authenticated, but could be via "remember-me"?
    answers:
      - { value: "IS_AUTHENTICATED_REMEMBERED", correct: true }
      - { value: "IS_AUTHENTICATED_FULLY", correct: false }
      - { value: "IS_AUTHENTICATED_ANONYMOUSLY", correct: false }
      - { value: "ROLE_AUTHENTICATED", correct: false }
    help: |
      `IS_AUTHENTICATED_REMEMBERED` is a special role for remember-me authentication.
      (Internal knowledge, common security role)

  -
    question: >
      What is the purpose of the `security: false` option within a firewall configuration?
    answers:
      - { value: "It completely disables security for the URLs matching that firewall's pattern.", correct: true }
      - { value: "It means the firewall is stateless.", correct: false }
      - { value: "It prevents the firewall from logging authentication attempts.", correct: false }
      - { value: "It allows anonymous access to the matched URLs.", correct: false }
    help: |
      `security: false` is used for paths that should not be secured by Symfony's security component, typically for static assets or public pages.
      https://symfony.com/doc/current/security.html#firewalls

  -
    question: |
      You have a custom user provider that fetches users from a database. How would you configure this provider in `security.yaml` under the `providers` section?
    answers:
      - { value: '''my_db_provider: { entity: { class: App\Entity\User, property: email } }''', correct: true }
      - { value: '''my_db_provider: { service: App\Security\UserProvider }''', correct: false }
      - { value: '''my_db_provider: { database: { table: users } }''', correct: false }
      - { value: '''my_db_provider: { type: entity, class: App\Entity\User }''', correct: false }
    help: |
      The `entity` provider type is used for database-backed user providers.
      (Internal knowledge, common security configuration for user providers)

  -
    question: >
      Which of the following is a valid way to programmatically log in a user on a specific firewall using the `Security` helper class?
    answers:
      - { value: "`$security->login($user, null, 'main');`", correct: true }
      - { value: "`$security->authenticate($user, 'main');`", correct: false }
      - { value: "`$security->setUser($user, 'main');`", correct: false }
      - { value: "`$security->loginUser($user, 'main');`", correct: false }
    help: |
      The `login()` method of the `Security` helper allows programmatic user login.
      https://symfony.com/doc/current/security.html#programmatic-login

  -
    question: >
      When configuring `password_hashers`, what does the `cost` option typically control for algorithms like bcrypt?
    answers:
      - { value: "The computational complexity of the hashing process.", correct: true }
      - { value: "The length of the generated hash.", correct: false }
      - { value: "The number of salt rounds.", correct: false }
      - { value: "The memory usage during hashing.", correct: false }
    help: |
      The `cost` parameter for bcrypt directly relates to the computational effort required to hash a password.
      https://symfony.com/doc/current/security/passwords.html#configuring-password-hashers

  -
    question: >
      Which of the following roles is automatically granted to all users, including anonymous ones, in Symfony's security system?
    answers:
      - { value: "PUBLIC_ACCESS", correct: true }
      - { value: "IS_AUTHENTICATED_ANONYMOUSLY", correct: true }
      - { value: "ROLE_ANONYMOUS", correct: false }
      - { value: "ROLE_GUEST", correct: false }
    help: |
      `PUBLIC_ACCESS` and `IS_AUTHENTICATED_ANONYMOUSLY` are special roles for publicly accessible resources.
      (Internal knowledge, common security roles)

  -
    question: >
      What is the primary purpose of the `AuthenticationTrustResolverInterface` in Symfony security?
    answers:
      - { value: "To determine the 'trust level' of an authenticated user (e.g., anonymous, remembered, fully authenticated).", correct: true }
      - { value: "To resolve user roles and permissions.", correct: false }
      - { value: "To manage trusted proxies for security.", correct: false }
      - { value: "To encrypt and decrypt authentication tokens.", correct: false }
    help: |
      The `AuthenticationTrustResolverInterface` provides methods like `isAnonymous()`, `isRememberMe()`, and `isFullFledged()` to check the authentication trust level.
      https://symfony.com/doc/current/security/expressions.html#available-variables-and-functions (via `trust_resolver` variable)

  -
    question: >
      Which of the following variables is available in Symfony's security expression language and represents the object (if any) that's passed as the second argument to `isGranted()`?
    answers:
      - { value: "object", correct: true }
      - { value: "subject", correct: true }
      - { value: "resource", correct: false }
      - { value: "entity", correct: false }
    help: |
      Both `object` and `subject` refer to the second argument passed to `isGranted()`.
      https://symfony.com/doc/current/security/expressions.html#available-variables-and-functions

  -
    question: >
      When configuring a `form_login` authenticator, what is the default value for the `post_only` option?
    answers:
      - { value: "true", correct: true }
      - { value: "false", correct: false }
      - { value: "null", correct: false }
      - { value: "auto", correct: false }
    help: |
      By default, form login submissions must be POST requests.
      https://symfony.com/doc/current/reference/configuration/security.html#post-only

  -
    question: >
      What is the default value for the `default_target_path` option in a form login configuration?
    answers:
      - { value: "/", correct: true }
      - { value: "/dashboard", correct: false }
      - { value: "/home", correct: false }
      - { value: "The previous URL.", correct: false }
    help: |
      The `default_target_path` option defaults to `/`.
      https://symfony.com/doc/current/reference/configuration/security.html#default-target-path

  -
    question: >
      If `always_use_default_target_path` is set to `true` in a form login configuration, what happens after a successful login?
    answers:
      - { value: "Users are always redirected to the `default_target_path`, regardless of the previous URL.", correct: true }
      - { value: "Users are always redirected to the URL they tried to access before logging in.", correct: false }
      - { value: "Users are redirected to the `default_target_path` only if no previous URL is stored.", correct: false }
      - { value: "The system attempts to redirect to the `target_path_parameter` value.", correct: false }
    help: |
      `always_use_default_target_path: true` enforces redirection to the default target path.
      https://symfony.com/doc/current/reference/configuration/security.html#always-use-default-target-path

  -
    question: >
      Which `form_login` option allows you to specify the name of the HTML element used to set the target path in a login form?
    answers:
      - { value: "target_path_parameter", correct: true }
      - { value: "redirect_parameter", correct: false }
      - { value: "return_to_parameter", correct: false }
      - { value: "next_url_parameter", correct: false }
    help: |
      The `target_path_parameter` option controls the name of the input field for the target path.
      https://symfony.com/doc/current/reference/configuration/security.html#target-path-parameter

  -
    question: >
      What is the purpose of the `use_referer` option in a form login configuration?
    answers:
      - { value: "If true, redirects the user to the `HTTP_REFERER` header value when no previous URL is in session, avoiding redirection loops if the referrer is the login path.", correct: true }
      - { value: "It forces the login form to be submitted with a `Referer` header.", correct: false }
      - { value: "It uses the `Referer` header to determine the `check_path`.", correct: false }
      - { value: "It prevents redirection loops by ignoring the `Referer` header.", correct: false }
    help: |
      `use_referer` helps in redirecting users back to their original page while preventing loops.
      https://symfony.com/doc/current/reference/configuration/security.html#use-referer

  -
    question: >
      Which of the following is a valid way to configure a custom request matcher service for an `access_control` rule in `security.yaml`?
    answers:
      - { value: '''- { roles: ROLE_USER, request_matcher: App\Security\RequestMatcher\MyRequestMatcher }''', correct: true }
      - { value: '''- { roles: ROLE_USER, matcher_service: App\Security\RequestMatcher\MyRequestMatcher }''', correct: false }
      - { value: '''- { roles: ROLE_USER, custom_matcher: App\Security\RequestMatcher\MyRequestMatcher }''', correct: false }
      - { value: '''- { roles: ROLE_USER, service: App\Security\RequestMatcher\MyRequestMatcher }''', correct: false }
    help: |
      The `request_matcher` option allows specifying a service that implements `RequestMatcherInterface`.
      https://symfony.com/doc/current/security/access_control.html#matching-by-a-custom-request-matcher

  -
    question: >
      What is the primary benefit of using `#[IsGranted]` attributes over `access_control` rules for securing individual controller actions?
    answers:
      - { value: "It provides more granular control and keeps security logic closer to the code it protects.", correct: true }
      - { value: "It is generally faster to process than `access_control` rules.", correct: false }
      - { value: "It allows for more complex security expressions than `access_control`.", correct: false }
      - { value: "It automatically handles redirection to the login page.", correct: false }
    help: |
      `#[IsGranted]` offers method-level or class-level security annotations, making the security rules more explicit and localized.
      https://symfony.com/doc/current/security.html#securing-controllers-and-templates

  -
    question: >
      Which of the following is NOT a standard user provider type supported by Symfony's security component out-of-the-box?
    answers:
      - { value: "oauth", correct: true }
      - { value: "in_memory", correct: false }
      - { value: "entity", correct: false }
      - { value: "ldap", correct: false }
    help: |
      `oauth` is typically handled by third-party bundles (e.g., KnpUOAuth2ClientBundle), not a built-in provider type.
      (Internal knowledge, common Symfony user provider types)

  -
    question: >
      What is the purpose of the `PasswordAuthenticatedUserInterface` in Symfony security?
    answers:
      - { value: "It defines methods for retrieving and setting the user's hashed password.", correct: true }
      - { value: "It indicates that a user can be authenticated via a password.", correct: true }
      - { value: "It provides methods for password hashing and verification.", correct: false }
      - { value: "It is used for users who authenticate without a password (e.g., API tokens).", correct: false }
    help: |
      This interface is crucial for users whose authentication involves a password.
      https://symfony.com/doc/current/security/passwords.html#passwordauthenticateduserinterface

  -
    question: >
      When configuring `password_hashers`, what does setting the `algorithm` to `auto` achieve?
    answers:
      - { value: "Symfony automatically selects the best available hashing algorithm based on PHP's capabilities.", correct: true }
      - { value: "It uses the default hashing algorithm configured globally for the application.", correct: false }
      - { value: "It defers the choice of algorithm to the user provider.", correct: false }
      - { value: "It disables password hashing for the specified user class.", correct: false }
    help: |
      `auto` allows Symfony to intelligently choose the hashing algorithm.
      https://symfony.com/doc/current/security/passwords.html#configuring-password-hashers

  -
    question: >
      Which of the following security events is dispatched only when the authenticator implements `InteractiveAuthenticatorInterface`, indicating that login requires explicit user action (e.g., a login form)?
    answers:
      - { value: "Symfony\\Component\\Security\\Http\\Event\\InteractiveLoginEvent", correct: true }
      - { value: "Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent", correct: false }
      - { value: "Symfony\\Component\\Security\\Core\\Event\\AuthenticationSuccessEvent", correct: false }
      - { value: "Symfony\\Component\\Security\\Http\\Event\\CheckPassportEvent", correct: false }
    help: |
      `InteractiveLoginEvent` is specific to interactive login processes.
      https://symfony.com/doc/current/security.html#security-events

  -
    question: >
      What is the primary role of the `UserInterface` in Symfony security?
    answers:
      - { value: "To define the basic contract for any user object managed by Symfony's security system.", correct: true }
      - { value: "To provide methods for user authentication and authorization.", correct: false }
      - { value: "To manage user persistence in the database.", correct: false }
      - { value: "To represent the currently authenticated user in the session.", correct: false }
    help: |
      `UserInterface` is the fundamental interface for all user objects.
      (Internal knowledge, common Symfony security interface)

  -
    question: >
      Which of the following is a key responsibility of an "Authenticator" in Symfony's new security system?
    answers:
      - { value: "To extract credentials from the request and create a Passport.", correct: true }
      - { value: "To decide if a user has access to a resource.", correct: false }
      - { value: "To manage user roles and permissions.", correct: false }
      - { value: "To hash and verify user passwords.", correct: false }
    help: |
      Authenticators are responsible for the initial steps of authentication, including passport creation.
      (Internal knowledge, core concept of new security system)

  -
    question: >
      What is the purpose of the `provider` option within a Symfony firewall configuration?
    answers:
      - { value: "To specify which user provider should be used by this firewall to load user data.", correct: true }
      - { value: "To define the authentication provider for the firewall.", correct: false }
      - { value: "To set the security provider for access control decisions.", correct: false }
      - { value: "To indicate the service that handles password hashing for the firewall.", correct: false }
    help: |
      The `provider` links a firewall to a specific user provider.
      https://symfony.com/doc/current/security.html#firewalls

  -
    question: |
      Which of the following `access_control` configurations will restrict access to all URLs to authenticated users, preventing anonymous access?
    answers:
      - { value: '''- { path: "^/", roles: IS_AUTHENTICATED_FULLY }''', correct: true }
      - { value: '''- { path: "^/", roles: ROLE_USER }''', correct: false }
      - { value: '''- { path: "^/", roles: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: https }''', correct: false }
      - { value: '''- { path: "^/", access: "is_authenticated()" }''', correct: false }
    help: |
      `IS_AUTHENTICATED_FULLY` ensures the user is fully authenticated.
      (Internal knowledge, common security role)

  -
    question: >
      What is the default value for the `failure_path` option in a form login configuration?
    answers:
      - { value: "/login", correct: true }
      - { value: "/", correct: false }
      - { value: "/login_error", correct: false }
      - { value: "The previous URL.", correct: false }
    help: |
      The `failure_path` option defaults to `/login`.
      https://symfony.com/doc/current/reference/configuration/security.html#failure-path

  -
    question: >
      Which of the following is a valid way to configure an in-memory user provider in `security.yaml`?
    answers:
      - { value: '''users_in_memory: { memory: null }''', correct: true }
      - { value: '''users_in_memory: { type: memory }''', correct: false }
      - { value: '''users_in_memory: { in_memory: true }''', correct: false }
      - { value: '''users_in_memory: { users: [] }''', correct: false }
    help: |
      The `memory` key with `null` value is used for in-memory providers.
      https://symfony.com/doc/current/security.html#in-memory-user-provider

  -
    question: >
      What is the purpose of the `firewalls` section in `security.yaml`?
    answers:
      - { value: "It defines the security firewalls for different parts of the application, including authentication methods and user providers.", correct: true }
      - { value: "It lists all the security-related services available in the application.", correct: false }
      - { value: "It configures the access control rules for specific URL patterns.", correct: false }
      - { value: "It defines the global security settings for the entire application.", correct: false }
    help: |
      The `firewalls` section is the most important part of the security configuration, defining how different parts of your application are secured.
      https://symfony.com/doc/current/reference/configuration/security.html#firewalls

  -
    question: >
      Which of the following best describes the `IS_AUTHENTICATED_ANONYMOUSLY` role in Symfony security?
    answers:
      - { value: "It is granted to all users, including those who are not logged in.", correct: true }
      - { value: "It is granted only to users who have explicitly opted for anonymous browsing.", correct: false }
      - { value: "It means the user is authenticated but has no specific roles.", correct: false }
      - { value: "It is used for API requests without user credentials.", correct: false }
    help: |
      `IS_AUTHENTICATED_ANONYMOUSLY` is a special role that indicates the user is present in the system, even if not authenticated.
      (Internal knowledge, common security role)

  -
    question: >
      When using the `#[IsGranted]` attribute on a controller method, how can you provide a custom message that will be displayed to the user if access is denied?
    answers:
      - { value: `#[IsGranted('ROLE_ADMIN', message: 'Access Denied')]`, correct: true }
      - { value: `#[IsGranted('ROLE_ADMIN', denyMessage: 'Access Denied')]`, correct: false }
      - { value: `#[IsGranted('ROLE_ADMIN', error: 'Access Denied')]`, correct: false }
      - { value: `#[IsGranted('ROLE_ADMIN')]->setMessage('Access Denied')`, correct: false }
    help: |
      The `message` option in the `#[IsGranted]` attribute sets the custom denial message.
      https://symfony.com/doc/current/security.html#securing-controllers-and-templates

  -
    question: >
      What is the primary role of the `AccessDecisionManager` in Symfony security?
    answers:
      - { value: "To make final access control decisions based on the votes of registered voters.", correct: true }
      - { value: "To manage user authentication and session handling.", correct: false }
      - { value: "To configure security firewalls and user providers.", correct: false }
      - { value: "To hash passwords and verify credentials.", correct: false }
    help: |
      The `AccessDecisionManager` aggregates votes from voters to determine access.
      https://symfony.com/doc/current/security/voters.html#the-access-decision-manager

  -
    question: >
      Which of the following is a valid way to retrieve the current authenticated user object in a Symfony controller?
    answers:
      - { value: "`$this->getUser()`", correct: true }
      - { value: "`$this->get('security.token_storage')->getToken()->getUser()`", correct: false }
      - { value: "`$this->container->get('security.token_storage')->getToken()->getUser()`", correct: false }
      - { value: "`$this->getSecurity()->getUser()`", correct: false }
    help: |
      `AbstractController::getUser()` is the recommended way to get the user.
      (Internal knowledge, common Symfony controller method)

  -
    question: >
      What is the purpose of the `target_path_parameter` option in a form login configuration?
    answers:
      - { value: "It specifies the name of the HTML element used to set the target path in a login form.", correct: true }
      - { value: "It defines the route name to redirect to after successful login.", correct: false }
      - { value: "It is used to store the original URL before redirection to the login page.", correct: false }
      - { value: "It sets the default target path for authenticated users.", correct: false }
    help: |
      The `target_path_parameter` option controls the name of the input field for the target path.
      https://symfony.com/doc/current/reference/configuration/security.html#target-path-parameter

  -
    question: >
      Which of the following is the correct interface that a custom authenticator must implement in Symfony 7?
    answers:
      - { value: "Symfony\\Component\\Security\\Http\\Authenticator\\AuthenticatorInterface", correct: true }
      - { value: "Symfony\\Component\\Security\\Core\\Authentication\\AuthenticatorInterface", correct: false }
      - { value: "Symfony\\Component\\Security\\Http\\Authentication\\AuthenticatorInterface", correct: false }
      - { value: "Symfony\\Component\\Security\\Core\\Authenticator\\AuthenticatorInterface", correct: false }
    help: |
      The `AuthenticatorInterface` from the `Http\\Authenticator` namespace is the correct one for custom authenticators.
      (Internal knowledge, common Symfony security interface)

  -
    question: >
      When configuring a `json_login` authenticator, what is the default name of the JSON key Symfony expects for the username?
    answers:
      - { value: "username", correct: true }
      - { value: "_username", correct: false }
      - { value: "email", correct: false }
      - { value: "user", correct: false }
    help: |
      The `json_login` authenticator expects `username` and `password` by default in the JSON payload.
      https://symfony.com/doc/current/security.html#json-login (implied by JSON example)

  -
    question: >
      What is the purpose of the `firewall` option in the `SecurityConfig` when configuring security programmatically in PHP?
    answers:
      - { value: "It allows you to define and configure a specific security firewall by its name.", correct: true }
      - { value: "It enables or disables the entire firewall system.", correct: false }
      - { value: "It specifies the default firewall to be used for all requests.", correct: false }
      - { value: "It defines a collection of firewalls.", correct: false }
    help: |
      The `firewall()` method is used to access and configure individual firewalls.
      https://symfony.com/doc/current/security.html#configuring-security-firewalls

  -
    question: >
      Which of the following is a valid way to configure a custom password hasher service for a specific user class in `security.yaml`?
    answers:
      - { value: '''App\Entity\User: { service: app.my_custom_hasher }''', correct: true }
      - { value: '''App\Entity\User: { hasher: app.my_custom_hasher }''', correct: false }
      - { value: '''App\Entity\User: { class: App\Security\MyCustomHasher }''', correct: false }
      - { value: '''App\Entity\User: { type: service, id: app.my_custom_hasher }''', correct: false }
    help: |
      The `service` key is used to specify a custom password hasher service.
      (Internal knowledge, common security configuration for password hashers)

  -
    question: >
      What is the purpose of the `enable_authenticator_manager: true` setting in `security.yaml`?
    answers:
      - { value: "It enables the new authenticator-based security system, required for custom authenticators and passports.", correct: true }
      - { value: "It enables the legacy security system for backward compatibility.", correct: false }
      - { value: "It activates the built-in authentication manager for all firewalls.", correct: false }
      - { value: "It allows multiple authenticators to be used within a single firewall.", correct: false }
    help: |
      This setting activates the modern authenticator manager.
      (Internal knowledge, core concept of new security system)

  -
    question: >
      When using `access_control` with `ips`, what does `192.168.0.1/24` represent?
    answers:
      - { value: "A CIDR notation for an IP subnet, allowing all IPs from 192.168.0.1 to 192.168.0.254.", correct: true }
      - { value: "A specific IP address with a port number.", correct: false }
      - { value: "A range of IP addresses from 192.168.0.1 to 192.168.0.24.", correct: false }
      - { value: "An invalid IP address format for `ips`.", correct: false }
    help: |
      The `ips` option supports CIDR notation for subnets.
      https://symfony.com/doc/current/security/access_control.html#matching-by-ip-address

  -
    question: >
      Which of the following is a valid way to define a user with a hashed password directly in an in-memory user provider in `security.yaml`?
    answers:
      - { value: '''users: { foo: { password: "$argon2id$...", roles: [ROLE_USER] } }''', correct: true }
      - { value: '''users: { foo: { plain_password: "password", roles: [ROLE_USER] } }''', correct: false }
      - { value: '''users: { foo: { hash: "$argon2id$...", roles: [ROLE_USER] } }''', correct: false }
      - { value: '''users: { foo: { password_hash: "$argon2id$...", roles: [ROLE_USER] } }''', correct: false }
    help: |
      In-memory users are defined with a `password` key containing the hashed password.
      (Internal knowledge, common security configuration for in-memory users)

  -
    question: >
      What is the purpose of the `firewall` option's `pattern` key in Symfony security configuration?
    answers:
      - { value: "It's a regular expression matched against the incoming request URL to determine if the firewall should be triggered.", correct: true }
      - { value: "It defines the name of the firewall.", correct: false }
      - { value: "It specifies the route name that the firewall should protect.", correct: false }
      - { value: "It sets the default path for redirection after authentication.", correct: false }
    help: |
      The `pattern` is a regular expression for URL matching.
      https://symfony.com/doc/current/reference/configuration/security.html#pattern

  -
    question: >
      When implementing a custom user provider, which interface must your provider class implement?
    answers:
      - { value: "Symfony\\Component\\Security\\Core\\User\\UserProviderInterface", correct: true }
      - { value: "Symfony\\Component\\Security\\Core\\User\\UserLoaderInterface", correct: false }
      - { value: "Symfony\\Component\\Security\\Core\\User\\ProviderInterface", correct: false }
      - { value: "Symfony\\Component\\Security\\Core\\User\\UserSourceInterface", correct: false }
    help: |
      `UserProviderInterface` is the contract for custom user providers.
      (Internal knowledge, common Symfony security interface)

  -
    question: >
      Which of the following is a valid way to check if the current user has the `ROLE_EDITOR` role in a Symfony controller using the `Security` service?
    answers:
      - { value: "`$this->security->isGranted('ROLE_EDITOR');`", correct: true }
      - { value: "`$this->isGranted('ROLE_EDITOR');`", correct: true }
      - { value: "`$this->security->hasRole('ROLE_EDITOR');`", correct: false }
      - { value: "`$this->getUser()->hasRole('ROLE_EDITOR');`", correct: false }
    help: |
      Both `$this->security->isGranted()` (after injecting `Security`) and `AbstractController::isGranted()` are valid.
      https://symfony.com/doc/current/security.html#checking-access-in-a-controller

  -
    question: >
      What is the default value for the `password_parameter` option in a form login configuration?
    answers:
      - { value: "_password", correct: true }
      - { value: "password", correct: false }
      - { value: "pass", correct: false }
      - { value: "user_password", correct: false }
    help: |
      The `password_parameter` option defaults to `_password`.
      https://symfony.com/doc/current/reference/configuration/security.html#password-parameter

  -
    question: >
      Which of the following is a valid way to configure a custom user provider service in `security.yaml`?
    answers:
      - { value: '''my_custom_provider: { id: App\Security\MyUserProvider }''', correct: true }
      - { value: '''my_custom_provider: { service: App\Security\MyUserProvider }''', correct: true }
      - { value: '''my_custom_provider: { class: App\Security\MyUserProvider }''', correct: false }
      - { value: '''my_custom_provider: { type: service, name: App\Security\MyUserProvider }''', correct: false }
    help: |
      Both `id` and `service` keys are used to reference a service as a user provider.
      (Internal knowledge, common Symfony security configuration for user providers)

  -
    question: >
      What is the main purpose of the `AuthenticationSuccessHandlerInterface`?
    answers:
      - { value: "To customize the behavior after a user successfully authenticates.", correct: true }
      - { value: "To handle the redirection logic after a successful login.", correct: false }
      - { value: "To log successful authentication attempts.", correct: false }
      - { value: "To create the security token upon successful authentication.", correct: false }
    help: |
      This interface allows for custom actions upon successful authentication.
      https://symfony.com/doc/current/security.html#customizing-authentication-success-and-failure

  -
    question: >
      What is the main purpose of the `AuthenticationFailureHandlerInterface`?
    answers:
      - { value: "To customize the behavior after a user fails to authenticate.", correct: true }
      - { value: "To log failed authentication attempts.", correct: false }
      - { value: "To display error messages to the user after a failed login.", correct: false }
      - { value: "To prevent brute-force attacks on login forms.", correct: false }
    help: |
      This interface allows for custom actions upon authentication failure.
      https://symfony.com/doc/current/security.html#customizing-authentication-success-and-failure

  -
    question: >
      Which of the following is a valid way to define a role hierarchy in `security.yaml`?
    answers:
      - { value: '''role_hierarchy: { ROLE_ADMIN: [ROLE_USER], ROLE_SUPER_ADMIN: [ROLE_ADMIN] }''', correct: true }
      - { value: '''roles: { ADMIN: USER, SUPER_ADMIN: ADMIN }''', correct: false }
      - { value: '''hierarchy: { ROLE_ADMIN: ROLE_USER, ROLE_SUPER_ADMIN: ROLE_ADMIN }''', correct: false }
      - { value: '''role_mapping: { ROLE_ADMIN: ROLE_USER }''', correct: false }
    help: |
      The `role_hierarchy` option defines how roles inherit permissions.
      (Internal knowledge, common security configuration for role hierarchy)

  -
    question: >
      What is the purpose of the `lazy` option in a Symfony firewall configuration?
    answers:
      - { value: "It ensures that the firewall's authentication logic and user provider are only loaded when a request matches the firewall's pattern.", correct: true }
      - { value: "It makes the firewall stateless, meaning it does not use sessions.", correct: false }
      - { value: "It enables lazy loading of all services associated with the firewall.", correct: false }
      - { value: "It defers the authentication process until the user attempts to access a secured resource.", correct: false }
    help: |
      `lazy: true` defers the loading of the user provider and other authentication components until they are actually needed.
      https://symfony.com/doc/current/security.html#firewalls-lazy-loading

  -
    question: >
      Which of the following is the correct way to inject the `Security` helper service into a custom service in Symfony 7?
    answers:
      - { value: "`public function __construct(private Security $security)`", correct: true }
      - { value: "`public function __construct(SecurityBundle $security)`", correct: false }
      - { value: "`public function __construct(ContainerInterface $container)`", correct: false }
      - { value: "`public function __construct(SecurityContext $security)`", correct: false }
    help: |
      Type-hinting against `Symfony\Bundle\SecurityBundle\Security` is the correct way.
      https://symfony.com/doc/current/security.html#retrieving-the-firewall-configuration-in-a-service

  -
    question: >
      What is the purpose of the `_target_path` parameter in a login form?
    answers:
      - { value: "It tells Symfony where to redirect the user after a successful login.", correct: true }
      - { value: "It specifies the path to the login form itself.", correct: false }
      - { value: "It is used to store the user's original request before being redirected to login.", correct: false }
      - { value: "It defines the path for failed login attempts.", correct: false }
    help: |
      `_target_path` is a hidden field in the login form that can be used to control post-login redirection.
      https://symfony.com/doc/current/reference/configuration/security.html#target-path-parameter

  -
    question: >
      Which of the following is a valid special role in Symfony that indicates the user is not authenticated at all (i.e., is anonymous)?
    answers:
      - { value: "IS_AUTHENTICATED_ANONYMOUSLY", correct: true }
      - { value: "ROLE_ANONYMOUS", correct: false }
      - { value: "PUBLIC_ACCESS", correct: true }
      - { value: "IS_GUEST", correct: false }
    help: |
      `IS_AUTHENTICATED_ANONYMOUSLY` and `PUBLIC_ACCESS` are used for anonymous access.
      (Internal knowledge, common security roles)

  -
    question: >
      What is the primary function of a "User Provider" in Symfony security?
    answers:
      - { value: "To load user data (e.g., from a database, LDAP) based on a user identifier.", correct: true }
      - { value: "To authenticate users by verifying their credentials.", correct: false }
      - { value: "To manage user sessions and persistence.", correct: false }
      - { value: "To define user roles and permissions.", correct: false }
    help: |
      User providers are responsible for retrieving user objects.
      https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers

  -
    question: >
      When configuring `login_throttling`, which component must be installed as a prerequisite?
    answers:
      - { value: "symfony/rate-limiter", correct: true }
      - { value: "symfony/security-rate-limiter", correct: false }
      - { value: "symfony/throttle", correct: false }
      - { value: "symfony/limiter", correct: false }
    help: |
      The `symfony/rate-limiter` component provides the necessary functionality.
      https://symfony.com/doc/current/security.html#login-throttling

  -
    question: >
      Which of the following is a valid way to configure a firewall to be stateless (i.e., not use sessions)?
    answers:
      - { value: '''stateless: true''', correct: true }
      - { value: '''sessionless: true''', correct: false }
      - { value: '''no_session: true''', correct: false }
      - { value: '''persistent: false''', correct: false }
    help: |
      The `stateless` option is used to disable session usage for a firewall.
      (Internal knowledge, common security configuration for firewalls)

  -
    question: >
      What is the purpose of the `#[Target('service_id')]` attribute in Symfony?
    answers:
      - { value: "It explicitly specifies the service ID to be injected when autowiring, particularly for interfaces with multiple implementations.", correct: true }
      - { value: "It marks a service as a target for dependency injection.", correct: false }
      - { value: "It defines the target class for a service alias.", correct: false }
      - { value: "It configures a service to be a target for a specific route.", correct: false }
    help: |
      The `#[Target]` attribute is used for explicit service injection when autowiring.
      (Internal knowledge, common Symfony dependency injection feature)

  -
    question: >
      Which of the following is the correct way to install the Symfony SecurityBundle using Composer?
    answers:
      - { value: "composer require symfony/security-bundle", correct: true }
      - { value: "composer install symfony/security-bundle", correct: false }
      - { value: "symfony require security", correct: false }
      - { value: "php bin/console security:install", correct: false }
    help: |
      `composer require` is the standard way to add bundles.
      https://symfony.com/doc/current/security.html#installation

  -
    question: >
      What is the purpose of `role_names` variable in Symfony's security expression language?
    answers:
      - { value: "An array with the string representation of the roles the user has, including roles granted indirectly via role hierarchy but excluding IS_AUTHENTICATED_* attributes.", correct: true }
      - { value: "An array of all roles defined in the application's security configuration.", correct: false }
      - { value: "A string containing a comma-separated list of the user's direct roles.", correct: false }
      - { value: "The raw roles returned by the user provider before hierarchy processing.", correct: false }
    help: |
      `role_names` provides a processed list of the user's roles.
      https://symfony.com/doc/current/security/expressions.html#available-variables-and-functions

  -
    question: >
      Which of the following describes the `user` variable in Symfony's security expression language?
    answers:
      - { value: "An instance of `UserInterface` that represents the current user or `null` if not authenticated.", correct: true }
      - { value: "A string representing the username of the current user.", correct: false }
      - { value: "An array containing all details of the current user.", correct: false }
      - { value: "The security token object for the current user.", correct: false }
    help: |
      The `user` variable provides access to the user object.
      https://symfony.com/doc/current/security/expressions.html#available-variables-and-functions

  -
    question: >
      What is the purpose of the `token` variable in Symfony's security expression language?
    answers:
      - { value: "It represents the current security token object.", correct: true }
      - { value: "It is a string containing the user's authentication token.", correct: false }
      - { value: "It refers to the CSRF token for the current request.", correct: false }
      - { value: "It is an array of all active security tokens.", correct: false }
    help: |
      The `token` variable provides access to the security token.
      https://symfony.com/doc/current/security/expressions.html#available-variables-and-functions

  -
    question: >
      What is the main difference between `IS_AUTHENTICATED_FULLY` and `IS_AUTHENTICATED_REMEMBERED` roles?
    answers:
      - { value: "`IS_AUTHENTICATED_FULLY` means the user has authenticated during the current session, while `IS_AUTHENTICATED_REMEMBERED` means they were authenticated via a "remember-me" cookie.", correct: true }
      - { value: "`IS_AUTHENTICATED_FULLY` is for users with all permissions, `IS_AUTHENTICATED_REMEMBERED` is for basic users.", correct: false }
      - { value: "They are interchangeable and refer to any authenticated user.", correct: false }
      - { value: "`IS_AUTHENTICATED_FULLY` is for API users, `IS_AUTHENTICATED_REMEMBERED` is for web users.", correct: false }
    help: |
      These roles distinguish between different levels of authentication.
      (Internal knowledge, common security roles)

  -
    question: >
      Which of the following is the correct way to access the `Security` service in a Symfony service (not a controller) to perform authorization checks?
    answers:
      - { value: "Inject `Symfony\\Bundle\\SecurityBundle\\Security` via constructor autowiring.", correct: true }
      - { value: "Inject `Symfony\\Component\\Security\\Core\\Security` via constructor autowiring.", correct: false }
      - { value: "Get it from the container using `$container->get('security.helper');`", correct: false }
      - { value: "Implement `SecurityAwareInterface`.", correct: false }
    help: |
      The `Security` helper service is the recommended way to interact with security from services.
      https://symfony.com/doc/current/security.html#checking-access-in-a-service

  -
    question: >
      What is the purpose of the `use_forward` option in a form login configuration?
    answers:
      - { value: "If true, it forwards the user to the login form instead of redirecting.", correct: true }
      - { value: "It enables HTTP forwarding for login requests.", correct: false }
      - { value: "It allows the login form to be submitted via a forward proxy.", correct: false }
      - { value: "It ensures that the original request is forwarded after successful login.", correct: false }
    help: |
      `use_forward` changes the behavior from a redirect to an internal forward.
      https://symfony.com/doc/current/reference/configuration/security.html#use-forward