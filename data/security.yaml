category: Security
questions:
  - question: Which Symfony CLI command is used to check a project's `composer.lock`
      file for known security vulnerabilities against the public PHP security
      advisories database?
    answers:
      - value: "`symfony check:security`"
        correct: true
      - value: "`composer security:audit`"
        correct: false
      - value: "`php bin/console security:check`"
        correct: false
      - value: "`symfony audit:dependencies`"
        correct: false
    help: The `symfony check:security` command scans your project's `composer.lock`
      file for known vulnerabilities without sending data over the network.
  - question: What is the primary purpose of the
      `Symfony\Bundle\SecurityBundle\Security` service?
    answers:
      - value: To provide methods for interacting with Symfony's security component,
          such as retrieving firewall configurations and managing user
          authentication.
        correct: true
      - value: To manage database connections for user providers.
        correct: false
      - value: To encrypt and decrypt sensitive application data.
        correct: false
      - value: To handle all HTTP request and response cycles.
        correct: false
    help: The `Security` service is a helper that provides convenient methods to
      interact with the security component, including `isGranted()` and
      `login()`.
  - question: |-
      Consider the following `access_control` rule in `security.yaml`:

      ```yaml
      access_control:
          - { path: ^/cart/checkout, roles: PUBLIC_ACCESS, port: 8080 }
      ```

      What does this configuration achieve?
    answers:
      - value: It allows public access to `/cart/checkout` only when accessed via port
          8080.
        correct: true
      - value: It redirects all requests to `/cart/checkout` to port 8080.
        correct: false
      - value: It denies access to `/cart/checkout` if the port is not 8080.
        correct: false
      - value: It is an invalid configuration for access control.
        correct: false
    help: The `port` option in `access_control` restricts access to a URL pattern
      only when it's accessed via the specified port.
  - question: Which of the following `access_control` configurations correctly
      requires `ROLE_ADMIN` or `IS_AUTHENTICATED_FULLY` for URLs starting with
      `/admin`?
    answers:
      - value: |-
          ```yaml
          access_control:
              - { path: ^/admin, roles: [IS_AUTHENTICATED_FULLY, ROLE_ADMIN] }
          ```
        correct: true
      - value: |-
          ```yaml
          access_control:
              - { path: ^/admin, roles: ROLE_ADMIN OR IS_AUTHENTICATED_FULLY }
          ```
        correct: false
      - value: |-
          ```yaml
          access_control:
              - { path: ^/admin, roles: ROLE_ADMIN }
              - { path: ^/admin, roles: IS_AUTHENTICATED_FULLY }
          ```
        correct: false
      - value: |-
          ```yaml
          access_control:
              - { path: ^/admin, roles: IS_AUTHENTICATED_FULLY AND ROLE_ADMIN }
          ```
        correct: false
    help: When multiple roles are provided in an array for `roles`, access is
      granted if the user has *any* of the listed roles.
  - question: What is the default value for the `user` parameter in the `x509`
      authentication method configuration under a Symfony firewall?
    answers:
      - value: "`SSL_CLIENT_S_DN_Email`"
        correct: true
      - value: "`SSL_CLIENT_S_DN`"
        correct: false
      - value: "`REMOTE_USER`"
        correct: false
      - value: "`X509_USER_ID`"
        correct: false
    help: The `x509` authentication method uses `SSL_CLIENT_S_DN_Email` by default
      to extract the user identifier from the client certificate.
  - question: Which of the following `firewall` configuration options specifies the
      URL path that a login form must submit to for authentication?
    answers:
      - value: "`check_path`"
        correct: true
      - value: "`login_path`"
        correct: false
      - value: "`authentication_path`"
        correct: false
      - value: "`submit_path`"
        correct: false
    help: The `check_path` option defines the route or path where the login form
      submits credentials. The firewall intercepts POST requests to this URL.
  - question: In Symfony's security configuration, what is the significance of the
      order in which firewalls are defined?
    answers:
      - value: The request will be handled by the first firewall whose `pattern`
          matches.
        correct: true
      - value: The last defined firewall always takes precedence.
        correct: false
      - value: The order only affects the logging of security events.
        correct: false
      - value: Firewall order is irrelevant; all matching firewalls are processed.
        correct: false
    help: Firewall order is crucial; the first matching firewall handles the
      request. A firewall with no pattern should typically be defined last.
  - question: Which of the following security configuration sections is responsible
      for defining how application users are loaded (e.g., from a database or
      in-memory)?
    answers:
      - value: "`providers`"
        correct: true
      - value: "`firewalls`"
        correct: false
      - value: "`password_hashers`"
        correct: false
      - value: "`access_control`"
        correct: false
    help: The `providers` section in `security.yaml` defines how Symfony loads user
      data for authentication.
  - question: Which security event is dispatched after the passport was validated
      and the authenticator created the security token (and user)?
    answers:
      - value: "`Symfony\\Component\\Security\\Http\\Event\\AuthenticationTokenCreatedE\
          vent`"
        correct: true
      - value: "`Symfony\\Component\\Security\\Core\\Event\\AuthenticationSuccessEvent`"
        correct: false
      - value: "`Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent`"
        correct: false
      - value: "`Symfony\\Component\\Security\\Http\\Event\\InteractiveLoginEvent`"
        correct: false
    help: The `AuthenticationTokenCreatedEvent` is dispatched early in the
      authentication process, after the token is created but before full
      success.
  - question: How can you enforce HTTPS for a specific URL path, e.g.,
      `/cart/checkout`, using Symfony's `access_control`?
    answers:
      - value: "By setting `requires_channel: https` for the access control rule."
        correct: true
      - value: "By setting `secure: true` for the access control rule."
        correct: false
      - value: By adding a redirect rule in the routing configuration.
        correct: false
      - value: By configuring the web server to force HTTPS for that path.
        correct: false
    help: The `requires_channel` option in `access_control` automatically redirects
      HTTP requests to HTTPS if configured.
  - question: >-
      Given the following `access_control` configuration:


      ```yaml

      access_control:
          - path: ^/_internal/secure
            roles: 'ROLE_ADMIN'
            allow_if: "'127.0.0.1' == request.getClientIp() or request.headers.has('X-Secure-Access')"
      ```


      Under what conditions would access be granted to `/_internal/secure`?
    answers:
      - value: If the user has `ROLE_ADMIN` OR the client IP is `127.0.0.1` OR the
          request has the `X-Secure-Access` header.
        correct: true
      - value: Only if the user has `ROLE_ADMIN` AND the client IP is `127.0.0.1` AND
          the request has the `X-Secure-Access` header.
        correct: false
      - value: If the user has `ROLE_ADMIN` AND (the client IP is `127.0.0.1` OR the
          request has the `X-Secure-Access` header).
        correct: false
      - value: Only if the `allow_if` expression evaluates to true, regardless of roles.
        correct: false
    help: The `roles` and `allow_if` options work like an OR expression. Access is
      granted if the expression is TRUE or the user has the specified role(s).
  - question: Which method of the `Symfony\Bundle\SecurityBundle\Security` helper
      allows programmatic authentication of a user?
    answers:
      - value: "`login()`"
        correct: true
      - value: "`authenticate()`"
        correct: false
      - value: "`setUser()`"
        correct: false
      - value: "`grantAccess()`"
        correct: false
    help: The `login()` method is used to programmatically log in a user, optionally
      specifying an authenticator, firewall, and badges.
  - question: How can you register an event subscriber
      (`App\EventListener\LogoutSubscriber`) to listen for security events
      specifically on the 'main' firewall?
    answers:
      - value: "By tagging the service with `name: kernel.event_subscriber` and
          `dispatcher: security.event_dispatcher.main`."
        correct: true
      - value: By implementing `FirewallAwareEventSubscriberInterface`.
        correct: false
      - value: By configuring the listener directly under the 'main' firewall in
          `security.yaml`.
        correct: false
      - value: By using the `#[Firewall]` attribute on the subscriber class.
        correct: false
    help: To scope an event subscriber to a specific firewall, use the `dispatcher`
      attribute in the `kernel.event_subscriber` tag with the format
      `security.event_dispatcher.<firewall_name>`.
  - question: What is the purpose of the `pattern` option in a Symfony security
      firewall configuration?
    answers:
      - value: It is a regular expression matched against the incoming request URL to
          determine if the firewall should be triggered.
        correct: true
      - value: It defines the encryption algorithm used for the firewall.
        correct: false
      - value: It specifies the user provider associated with the firewall.
        correct: false
      - value: It sets the default route for authenticated users.
        correct: false
    help: The `pattern` option uses a regular expression to match against the
      request URL, activating the firewall if there's a match.
  - question: Which Symfony Security Expression Language variable provides an array
      of all roles the user has, including those granted indirectly via role
      hierarchy, but *excluding* `IS_AUTHENTICATED_*` attributes?
    answers:
      - value: "`role_names`"
        correct: true
      - value: "`user.roles`"
        correct: false
      - value: "`token.roles`"
        correct: false
      - value: "`roles`"
        correct: false
    help: The `role_names` variable provides a flattened list of all granted roles,
      excluding the special `IS_AUTHENTICATED_*` attributes.
  - question: Which `access_control` option is used to restrict access to a URL
      pattern only to requests originating from specified IP addresses or
      subnets?
    answers:
      - value: "`ips`"
        correct: true
      - value: "`allow_ips`"
        correct: false
      - value: "`client_ips`"
        correct: false
      - value: "`source_ips`"
        correct: false
    help: The `ips` option allows you to define a list of allowed IP addresses or
      CIDR notations for an access control rule.
  - question: What is the default value for the `invalidate_session` option in the
      Symfony security `logout` configuration?
    answers:
      - value: "`true`"
        correct: true
      - value: "`false`"
        correct: false
      - value: "`null`"
        correct: false
      - value: "`auto`"
        correct: false
    help: By default, Symfony invalidates the user's session upon logout. Setting
      `invalidate_session` to `false` allows logging out from only the current
      firewall.
  - question: Which `Clear-Site-Data` HTTP header directive, when configured in
      Symfony's logout, clears all browsing data associated with the requesting
      website?
    answers:
      - value: "`*`"
        correct: true
      - value: "`all`"
        correct: false
      - value: "`everything`"
        correct: false
      - value: "`clear_all`"
        correct: false
    help: The `*` directive for `Clear-Site-Data` clears all types of browsing data
      (cookies, storage, cache, execution contexts).
  - question: What is the default `check_path` for JSON login authentication in Symfony?
    answers:
      - value: "`/login_check`"
        correct: true
      - value: "`/json_login`"
        correct: false
      - value: "`/api/login`"
        correct: false
      - value: "`/authenticate`"
        correct: false
    help: The `check_path` for JSON login authentication defaults to `/login_check`,
      similar to form login.
  - question: How can you configure a Symfony firewall to require specific badges,
      such as `CsrfTokenBadge`, on the authenticated passport?
    answers:
      - value: By using the `required_badges` option under the firewall configuration.
        correct: true
      - value: By adding a `#[RequiredBadge]` attribute to the authenticator.
        correct: false
      - value: By defining a custom voter that checks for badges.
        correct: false
      - value: Badges are automatically handled and cannot be explicitly required.
        correct: false
    help: The `required_badges` option allows you to specify a list of badge class
      names that must be present on the passport for authentication to succeed.
  - question: Which configuration option in `security.yaml` allows Symfony to
      automatically rehash user passwords to a newer, more secure algorithm upon
      successful authentication?
    answers:
      - value: "`migrate_from` under `password_hashers`"
        correct: true
      - value: "`auto_rehash` under `password_hashers`"
        correct: false
      - value: "`upgrade_algorithm` under `providers`"
        correct: false
      - value: "`rehash_on_login` under `firewalls`"
        correct: false
    help: The `migrate_from` option in `password_hashers` enables automatic password
      re-hashing from older algorithms to a new one.
  - question: To inspect the *actual* security configuration values used by your
      Symfony application, which console command should you use?
    answers:
      - value: "`php bin/console debug:config security`"
        correct: true
      - value: "`php bin/console config:dump-reference security`"
        correct: false
      - value: "`php bin/console security:show`"
        correct: false
      - value: "`php bin/console security:config`"
        correct: false
    help: "`debug:config` shows the currently applied configuration, including any
      overrides or environment-specific settings."
  - question: Which of the following `access_control` configurations correctly uses
      a custom request matcher service?
    answers:
      - value: >-
          ```yaml

          access_control:
              - { roles: ROLE_USER, request_matcher: App\\Security\\RequestMatcher\\MyRequestMatcher }
          ```
        correct: true
      - value: >-
          ```yaml

          access_control:
              - { roles: ROLE_USER, matcher_service: App\\Security\\RequestMatcher\\MyRequestMatcher }
          ```
        correct: false
      - value: >-
          ```yaml

          access_control:
              - { roles: ROLE_USER, service: App\\Security\\RequestMatcher\\MyRequestMatcher }
          ```
        correct: false
      - value: >-
          ```yaml

          access_control:
              - { roles: ROLE_USER, custom_matcher: App\\Security\\RequestMatcher\\MyRequestMatcher }
          ```
        correct: false
    help: The `request_matcher` option allows you to specify a service ID that
      implements `RequestMatcherInterface` for custom access control logic.
  - question: When injecting the `Symfony\Bundle\SecurityBundle\Security` service
      into a custom service to perform access checks, which method would you
      typically use?
    answers:
      - value: "`isGranted()`"
        correct: true
      - value: "`hasRole()`"
        correct: false
      - value: "`checkAccess()`"
        correct: false
      - value: "`authorize()`"
        correct: false
    help: The `isGranted()` method of the `Security` service is the standard way to
      check if the current user has a specific permission or role.
  - question: What is the purpose of the `erase_credentials` option in Symfony's
      security configuration?
    answers:
      - value: If true, the `eraseCredentials()` method of the user object is called
          after authentication.
        correct: true
      - value: It clears the user's session data after a specified timeout.
        correct: false
      - value: It removes sensitive user data from logs.
        correct: false
      - value: It encrypts user credentials before storing them.
        correct: false
    help: The `erase_credentials` option ensures sensitive data like plain-text
      passwords are removed from the user object after authentication.
  - question: Which `session_fixation_strategy` is recommended for Symfony
      applications to prevent session fixation attacks while keeping session
      attributes?
    answers:
      - value: "`MIGRATE`"
        correct: true
      - value: "`NONE`"
        correct: false
      - value: "`NEW_ID`"
        correct: false
      - value: "`REGENERATE`"
        correct: false
    help: The `MIGRATE` strategy updates the session ID but preserves existing
      session attributes, mitigating session fixation without data loss.
  - question: By default, is the `NotCompromisedPassword` constraint enabled in
      Symfony's framework configuration?
    answers:
      - value: Yes, it is enabled by default.
        correct: true
      - value: No, it must be explicitly enabled.
        correct: false
      - value: It is enabled only in production environments.
        correct: false
      - value: It is deprecated in Symfony 7.
        correct: false
    help: The `NotCompromisedPassword` constraint is enabled by default, checking
      passwords against a public API like 'haveibeenpwned.com'.
  - question: Which of the following `access_control` rules correctly restricts
      access to the `admin` route to users with `ROLE_ADMIN`?
    answers:
      - value: |-
          ```yaml
          access_control:
              - { route: 'admin', roles: ROLE_ADMIN }
          ```
        correct: true
      - value: |-
          ```yaml
          access_control:
              - { path: '^/admin', roles: ROLE_ADMIN }
          ```
        correct: false
      - value: |-
          ```yaml
          access_control:
              - { route_name: 'admin', roles: ROLE_ADMIN }
          ```
        correct: false
      - value: |-
          ```yaml
          access_control:
              - { attributes: { _route: 'admin' }, roles: ROLE_ADMIN }
          ```
        correct: true
    help: "Both `route: 'admin'` and `attributes: { _route: 'admin' }` are valid
      ways to target a specific route in access control."
  - question: In remote user authentication configuration, what is the default
      `$_SERVER` parameter name holding the user identifier?
    answers:
      - value: "`REMOTE_USER`"
        correct: true
      - value: "`AUTH_USER`"
        correct: false
      - value: "`HTTP_REMOTE_USER`"
        correct: false
      - value: "`PHP_AUTH_USER`"
        correct: false
    help: The `remote_user` authenticator defaults to using the `REMOTE_USER` server
      variable to get the user identifier.
  - question: Which Composer command is used to install the Symfony SecurityBundle?
    answers:
      - value: "`composer require symfony/security-bundle`"
        correct: true
      - value: "`composer install symfony/security-bundle`"
        correct: false
      - value: "`composer add symfony/security-bundle`"
        correct: false
      - value: "`symfony install security-bundle`"
        correct: false
    help: The `composer require` command is used to add new packages to a Symfony
      project.
  - question: Which special authentication attribute indicates that a user is
      authenticated, potentially via a 'remember me' cookie, but has not
      actively authenticated during the current session?
    answers:
      - value: "`IS_AUTHENTICATED_REMEMBERED`"
        correct: true
      - value: "`IS_AUTHENTICATED_FULLY`"
        correct: false
      - value: "`IS_AUTHENTICATED`"
        correct: false
      - value: "`IS_REMEMBERED`"
        correct: true
    help: "`IS_AUTHENTICATED_REMEMBERED` and `IS_REMEMBERED` both signify
      authentication via a 'remember me' cookie, distinct from a full login."
  - question: When using the `#[IsGranted]` attribute, how can you pass the current
      `Request` object as the `subject` for access control decisions?
    answers:
      - value: |-
          ```php
          #[IsGranted(attribute: '...', subject: new Expression('request'))]
          ```
        correct: true
      - value: |-
          ```php
          #[IsGranted(attribute: '...', subject: Request::class)]
          ```
        correct: false
      - value: |-
          ```php
          #[IsGranted(attribute: '...', subject: '@request')]
          ```
        correct: false
      - value: |-
          ```php
          #[IsGranted(attribute: '...', subject: 'request')]
          ```
        correct: false
    help: To use the `Request` object as the subject in `#[IsGranted]`, you must
      wrap 'request' in a `new Expression()`.
  - question: What is the default access decision strategy in Symfony's security
      component?
    answers:
      - value: "`affirmative`"
        correct: true
      - value: "`consensus`"
        correct: false
      - value: "`unanimous`"
        correct: false
      - value: "`priority`"
        correct: false
    help: The `affirmative` strategy grants access as soon as one voter grants
      access.
  - question: Which access decision strategy grants access if there are more voters
      granting access than denying, with ties broken by the
      `allow_if_equal_granted_denied` option?
    answers:
      - value: "`consensus`"
        correct: true
      - value: "`unanimous`"
        correct: false
      - value: "`priority`"
        correct: false
      - value: "`affirmative`"
        correct: false
    help: The `consensus` strategy considers the majority vote among voters, with a
      tie-breaking rule.
  - question: "When configuring a Symfony firewall, what does setting `security:
      false` for a specific pattern achieve?"
    answers:
      - value: It completely bypasses security for requests matching that pattern.
        correct: true
      - value: It enables a default, minimal security configuration.
        correct: false
      - value: It logs all security-related activities for that pattern.
        correct: false
      - value: It disables all authentication but keeps authorization checks.
        correct: false
    help: "Setting `security: false` for a firewall pattern means that no security
      checks (authentication or authorization) will be performed for requests
      matching that pattern."
  - question: Which of the following is NOT a valid value for the `Clear-Site-Data`
      HTTP header in Symfony's logout configuration?
    answers:
      - value: "`session`"
        correct: true
      - value: "`cookies`"
        correct: false
      - value: "`cache`"
        correct: false
      - value: "`storage`"
        correct: false
      - value: "`executionContexts`"
        correct: false
    help: The allowed values for `Clear-Site-Data` are `cache`, `cookies`,
      `storage`, `executionContexts`, or `*`.
  - question: What is the purpose of `role_hierarchy` in Symfony's security
      configuration?
    answers:
      - value: It allows defining role inheritance rules to simplify user role
          management.
        correct: true
      - value: It defines the order in which roles are checked during authorization.
        correct: false
      - value: It specifies the database table where roles are stored.
        correct: false
      - value: It encrypts role names for security.
        correct: false
    help: Role hierarchies allow you to grant a user multiple roles by assigning
      them a single higher-level role (e.g., `ROLE_ADMIN` inherits `ROLE_USER`).
  - question: Which Symfony Security Expression Language function checks if the user
      is authenticated via 'remember-me' or 'fully' authenticated?
    answers:
      - value: "`is_authenticated()`"
        correct: true
      - value: "`is_logged_in()`"
        correct: false
      - value: "`has_authenticated()`"
        correct: false
      - value: "`is_active_user()`"
        correct: false
    help: "`is_authenticated()` returns true for both 'remember-me' and fully
      authenticated users."
  - question: What is the default value for the `username_parameter` option in a
      Symfony form login firewall configuration?
    answers:
      - value: "`_username`"
        correct: true
      - value: "`username`"
        correct: false
      - value: "`email`"
        correct: false
      - value: "`user`"
        correct: false
    help: The `username_parameter` defaults to `_username`, which is the expected
      name of the input field for the username in the login form.
  - question: Which security event is dispatched after an `AuthenticationException`
      was thrown during authentication?
    answers:
      - value: "`Symfony\\Component\\Security\\Http\\Event\\LoginFailureEvent`"
        correct: true
      - value: "`Symfony\\Component\\Security\\Core\\Event\\AuthenticationFailureEvent`"
        correct: false
      - value: "`Symfony\\Component\\Security\\Http\\Event\\AuthenticationErrorEvent`"
        correct: false
      - value: "`Symfony\\Component\\Security\\Http\\Event\\AuthenticationExceptionEven\
          t`"
        correct: false
    help: The `LoginFailureEvent` is dispatched when authentication fails, allowing
      listeners to modify the error response.
  - question: What is the purpose of the `lazy` option in a Symfony firewall
      configuration?
    answers:
      - value: It defers the loading of the user provider and authentication mechanisms
          until they are actually needed.
        correct: true
      - value: It makes the firewall optional, only activating if other firewalls fail.
        correct: false
      - value: It enables lazy loading of user roles from the database.
        correct: false
      - value: It reduces the number of security checks performed for each request.
        correct: false
    help: The `lazy` option improves performance by delaying the instantiation of
      security components until a protected resource is accessed.
  - question: Which of the following describes the behavior of the `unanimous`
      access decision strategy?
    answers:
      - value: Only grants access if there is no voter denying access.
        correct: true
      - value: Grants access as soon as there is one voter granting access.
        correct: false
      - value: Grants access if there are more voters granting access than denying.
        correct: false
      - value: Grants or denies access by the first voter that does not abstain.
        correct: false
    help: The `unanimous` strategy requires all non-abstaining voters to grant
      access for access to be granted.
  - question: What is the default value for the `target` option in the Symfony
      security `logout` configuration?
    answers:
      - value: "`/`"
        correct: true
      - value: "`/login`"
        correct: false
      - value: "`/home`"
        correct: false
      - value: The previous URL
        correct: false
    help: After a successful logout, Symfony redirects to the root URL (`/`) by
      default, unless a different `target` is specified.
  - question: Which configuration option under a Symfony firewall allows you to
      specify the name of the `$_SERVER` parameter containing the user
      identifier for X.509 authentication?
    answers:
      - value: "`user`"
        correct: true
      - value: "`username_source`"
        correct: false
      - value: "`identifier`"
        correct: false
      - value: "`x509_user`"
        correct: false
    help: The `user` option under `x509` specifies the `$_SERVER` parameter for the
      user identifier, defaulting to `SSL_CLIENT_S_DN_Email`.
  - question: Which security event is dispatched just before a user logs out of your
      application?
    answers:
      - value: "`Symfony\\Component\\Security\\Http\\Event\\LogoutEvent`"
        correct: true
      - value: "`Symfony\\Component\\Security\\Http\\Event\\PreLogoutEvent`"
        correct: false
      - value: "`Symfony\\Component\\Security\\Core\\Event\\UserLogoutEvent`"
        correct: false
      - value: "`Symfony\\Component\\Security\\Http\\Event\\SessionDestroyEvent`"
        correct: false
    help: The `LogoutEvent` is triggered right before the logout process completes,
      allowing for custom logic.
  - question: What is the primary purpose of the `IS_AUTHENTICATED_FULLY` special
      authentication attribute?
    answers:
      - value: To check if the user has actively authenticated during the current
          session, not just via a persistent token.
        correct: true
      - value: To check if the user is logged in via a 'remember me' cookie.
        correct: false
      - value: To check if the user has all required roles for the current resource.
        correct: false
      - value: To indicate that the user's session is fully secure.
        correct: false
    help: "`IS_AUTHENTICATED_FULLY` ensures the user has performed a full login in
      the current session, providing a stronger authentication check than
      `IS_AUTHENTICATED` or `IS_AUTHENTICATED_REMEMBERED`."
  - question: Which of the following console commands displays the *default*
      configuration values defined by Symfony for the security component?
    answers:
      - value: "`php bin/console config:dump-reference security`"
        correct: true
      - value: "`php bin/console debug:config security`"
        correct: false
      - value: "`php bin/console security:defaults`"
        correct: false
      - value: "`php bin/console security:reference`"
        correct: false
    help: "`config:dump-reference` shows the default configuration schema and values
      for a bundle."
  - question: In Symfony's security expression language, what does the `user`
      variable represent?
    answers:
      - value: An instance of the current user object, or `null` if not authenticated.
        correct: true
      - value: The username of the authenticated user.
        correct: false
      - value: An array of roles assigned to the user.
        correct: false
      - value: The user provider service.
        correct: false
    help: The `user` variable provides access to the `UserInterface` object of the
      currently authenticated user.
  - question: What is the purpose of the `hide_user_not_found` option in Symfony's
      security configuration?
    answers:
      - value: If true, a generic `BadCredentialsException` is thrown when a user is not
          found, hiding the specific user identifier.
        correct: true
      - value: It prevents user enumeration attacks by obscuring error messages.
        correct: true
      - value: It hides the user's details from logs if they are not found.
        correct: false
      - value: It prevents the application from throwing an exception when a user is not
          found.
        correct: false
    help: Setting `hide_user_not_found` to `true` (default) enhances security by
      preventing attackers from guessing valid usernames.
  - question: Which of the following `access_control` options allows you to restrict
      access based on the HTTP method (e.g., POST, PUT)?
    answers:
      - value: "`methods`"
        correct: true
      - value: "`http_methods`"
        correct: false
      - value: "`request_method`"
        correct: false
      - value: "`verbs`"
        correct: false
    help: The `methods` option accepts an array of HTTP methods for which the access
      control rule applies.
  - question: "When configuring `password_hashers` in Symfony, what is the
      significance of setting
      `Symfony\\Component\\Security\\Core\\User\\PasswordAuthenticatedUserInter\
      face: 'auto'`?"
    answers:
      - value: It automatically selects the best available password hasher for users
          implementing `PasswordAuthenticatedUserInterface`.
        correct: true
      - value: It enables automatic password migration for all users.
        correct: false
      - value: It forces all users to use the `bcrypt` algorithm.
        correct: false
      - value: It disables password hashing for users of this interface.
        correct: false
    help: The `'auto'` setting for `PasswordAuthenticatedUserInterface` allows
      Symfony to automatically choose a secure and modern password hasher based
      on available PHP extensions.
  - question: Which security event is dispatched after authentication was fully
      successful and can be used to modify the response sent back to the user?
    answers:
      - value: "`Symfony\\Component\\Security\\Http\\Event\\LoginSuccessEvent`"
        correct: true
      - value: "`Symfony\\Component\\Security\\Core\\Event\\AuthenticationSuccessEvent`"
        correct: false
      - value: "`Symfony\\Component\\Security\\Http\\Event\\InteractiveLoginEvent`"
        correct: false
      - value: "`Symfony\\Component\\Security\\Http\\Event\\ResponseEvent`"
        correct: false
    help: The `LoginSuccessEvent` is dispatched after successful authentication,
      providing an opportunity to modify the HTTP response.
  - question: What is the purpose of the `allow_if_all_abstain` option in Symfony's
      access decision manager configuration?
    answers:
      - value: It determines the decision if all voters abstained from voting.
        correct: true
      - value: It allows access if no voters explicitly deny access.
        correct: false
      - value: It grants access if at least one voter abstains.
        correct: false
      - value: It is only used with the `unanimous` strategy.
        correct: false
    help: If no voter makes a decision (all abstain), `allow_if_all_abstain`
      dictates whether access is granted or denied (default is `false`, meaning
      deny).
  - question: What is the default value for the `default_target_path` option in a
      Symfony form login firewall configuration?
    answers:
      - value: "`/`"
        correct: true
      - value: "`/dashboard`"
        correct: false
      - value: "`/home`"
        correct: false
      - value: The previous URL
        correct: false
    help: The `default_target_path` specifies the page users are redirected to when
      there is no previous page stored in the session, defaulting to the
      application's root.
  - question: Which security event is dispatched when a user is deauthenticated, for
      instance, because their password was changed?
    answers:
      - value: "`Symfony\\Component\\Security\\Http\\Event\\TokenDeauthenticatedEvent`"
        correct: true
      - value: "`Symfony\\Component\\Security\\Core\\Event\\UserChangedEvent`"
        correct: false
      - value: "`Symfony\\Component\\Security\\Http\\Event\\UserLogoutEvent`"
        correct: false
      - value: "`Symfony\\Component\\Security\\Http\\Event\\SessionInvalidateEvent`"
        correct: false
    help: The `TokenDeauthenticatedEvent` is specifically for scenarios where a
      user's authentication token becomes invalid, often due to credential
      changes.
  - question: In Symfony's `access_control`, what is the effect of setting the
      `endpoint` option for the `NotCompromisedPassword` constraint?
    answers:
      - value: It allows defining a different, compatible API endpoint for password
          checks instead of the default `haveibeenpwned.com`.
        correct: true
      - value: It specifies the URL to redirect to if a password is found to be
          compromised.
        correct: false
      - value: It configures the internal API for password hashing.
        correct: false
      - value: It sets the maximum number of requests to the password compromise API.
        correct: false
    help: The `endpoint` option is useful for environments without public internet
      access or for using a custom compromise database.
  - question: Which of the following is a valid way to configure multiple patterns
      for a single firewall in `security.yaml`?
    answers:
      - value: |-
          ```yaml
          firewalls:
              dev:
                  pattern:
                      - ^/_profiler/
                      - ^/_wdt/
          ```
        correct: true
      - value: |-
          ```yaml
          firewalls:
              dev:
                  pattern: [^/_profiler/, ^/_wdt/]
          ```
        correct: true
      - value: |-
          ```yaml
          firewalls:
              dev:
                  patterns: ^/_profiler/, ^/_wdt/
          ```
        correct: false
      - value: |-
          ```yaml
          firewalls:
              dev:
                  pattern: ^/_profiler/|/_wdt/
          ```
        correct: true
    help: Symfony supports both array notation and a single regex string for
      firewall patterns. The regex string can use `|` for OR conditions.
  - question: What is the purpose of the `csrf_token_id` option in Symfony's logout
      configuration?
    answers:
      - value: An arbitrary string used to identify the CSRF token for validation.
        correct: true
      - value: The name of the HTML element holding the CSRF token.
        correct: false
      - value: The service ID of the CSRF token manager.
        correct: false
      - value: The secret used to generate the CSRF token.
        correct: false
    help: The `csrf_token_id` helps distinguish CSRF tokens for different forms or
      actions.
  - question: Which Symfony Security Expression Language function is equivalent to
      using the `isGranted()` method from the security service?
    answers:
      - value: "`is_granted(permission, object)`"
        correct: true
      - value: "`has_permission(permission, object)`"
        correct: false
      - value: "`can(permission, object)`"
        correct: false
      - value: "`check_permission(permission, object)`"
        correct: false
    help: The `is_granted()` function in expressions directly maps to the
      `isGranted()` method of the security service, allowing for dynamic
      authorization checks.
  - question: When configuring a firewall for X.509 authentication, which parameter
      specifies the `$_SERVER` variable containing the full 'distinguished name'
      of the certificate if the `user` parameter is not available?
    answers:
      - value: "`credentials`"
        correct: true
      - value: "`dn`"
        correct: false
      - value: "`certificate`"
        correct: false
      - value: "`x509_dn`"
        correct: false
    help: The `credentials` option is used as a fallback to extract user information
      from the distinguished name if the primary `user` parameter is not
      present.
  - question: Which security event is dispatched after impersonation is completed in
      Symfony?
    answers:
      - value: "`Symfony\\Component\\Security\\Http\\Event\\SwitchUserEvent`"
        correct: true
      - value: "`Symfony\\Component\\Security\\Http\\Event\\ImpersonationEvent`"
        correct: false
      - value: "`Symfony\\Component\\Security\\Core\\Event\\UserSwitchEvent`"
        correct: false
      - value: "`Symfony\\Component\\Security\\Http\\Event\\UserImpersonatedEvent`"
        correct: false
    help: The `SwitchUserEvent` is specific to the 'switch user' functionality,
      indicating a change in the active user context.
  - question: What is the default value for the `password_parameter` in a Symfony
      form login firewall configuration?
    answers:
      - value: "`_password`"
        correct: true
      - value: "`password`"
        correct: false
      - value: "`pass`"
        correct: false
      - value: "`secret`"
        correct: false
    help: The `password_parameter` defaults to `_password`, which is the expected
      name of the input field for the password in the login form.
  - question: Which `access_control` option allows you to restrict access based on
      the hostname of the incoming request?
    answers:
      - value: "`host`"
        correct: true
      - value: "`hostname`"
        correct: false
      - value: "`domain`"
        correct: false
      - value: "`server_name`"
        correct: false
    help: The `host` option accepts a regular expression to match against the
      request's hostname.
  - question: In Symfony's security configuration, what does `IS_AUTHENTICATED` signify?
    answers:
      - value: The user is logged in, regardless of whether it's a full login or via
          'remember me'.
        correct: true
      - value: The user has successfully completed multi-factor authentication.
        correct: false
      - value: The user's session is active and secure.
        correct: false
      - value: The user has the highest level of authentication.
        correct: false
    help: "`IS_AUTHENTICATED` is a general check for any form of successful
      authentication."
  - question: "What is the primary benefit of using `lazy: true` for a firewall in
      Symfony?"
    answers:
      - value: Improved performance by delaying the instantiation of security
          components.
        correct: true
      - value: Reduced memory consumption by unloading inactive firewalls.
        correct: false
      - value: Simplified configuration for firewalls with complex authentication
          methods.
        correct: false
      - value: Enhanced security by only loading components when absolutely necessary.
        correct: false
    help: Lazy firewalls only load their associated user providers and
      authenticators when a request actually matches their pattern, saving
      resources.
  - question: Which of the following is a valid way to configure a Monolog handler
      to *exclude* messages from the 'security' channel?
    answers:
      - value: |-
          ```yaml
          channels: ['!security']
          ```
        correct: true
      - value: |-
          ```yaml
          exclude_channels: [security]
          ```
        correct: false
      - value: |-
          ```yaml
          channels: { exclude: security }
          ```
        correct: false
      - value: |-
          ```yaml
          channels: [^security]
          ```
        correct: false
    help: The `!` prefix before a channel name in Monolog configuration excludes
      that channel from the handler.
  - question: When using the `consensus` access decision strategy, what does the
      `allow_if_equal_granted_denied` option determine?
    answers:
      - value: The decision in case of a tie between granting and denying voters.
        correct: true
      - value: Whether to grant access if all voters abstain.
        correct: false
      - value: The minimum number of voters required to grant access.
        correct: false
      - value: If the strategy should fall back to `affirmative` in case of a tie.
        correct: false
    help: By default, `allow_if_equal_granted_denied` is `true`, meaning access is
      granted in a tie.
  - question: What is the purpose of the `user_identifier` option in X.509
      authentication configuration?
    answers:
      - value: It tells Symfony which parameter to use to find the user identifier in
          the 'distinguished name' of the certificate.
        correct: true
      - value: It specifies the field in the user entity that stores the X.509
          certificate.
        correct: false
      - value: It defines the unique identifier for the X.509 certificate itself.
        correct: false
      - value: It is used to verify the authenticity of the X.509 certificate.
        correct: false
    help: The `user_identifier` option helps parse the distinguished name (DN) to
      extract a specific part as the user identifier, e.g., 'CN' for Common
      Name.
  - question: Which Symfony Security Expression Language variable holds the object
      (if any) that is passed as the second argument to `isGranted()`?
    answers:
      - value: "`object`"
        correct: true
      - value: "`subject`"
        correct: true
      - value: "`target`"
        correct: false
      - value: "`context`"
        correct: false
    help: Both `object` and `subject` are equivalent and refer to the second
      argument passed to `isGranted()`.
  - question: What is the default value for the `access_denied_url` option in
      Symfony's security configuration?
    answers:
      - value: "`null`"
        correct: true
      - value: "`/access-denied`"
        correct: false
      - value: "`/403`"
        correct: false
      - value: "`/error`"
        correct: false
    help: By default, Symfony does not redirect to a specific URL on access denied;
      it typically throws an `AccessDeniedException`.
  - question: Which `firewall` option can be used to forward the user to the login
      form instead of redirecting them when trying to access a protected
      resource while unauthenticated?
    answers:
      - value: "`use_forward`"
        correct: true
      - value: "`forward_to_login`"
        correct: false
      - value: "`redirect_on_unauthenticated: false`"
        correct: false
      - value: "`internal_redirect`"
        correct: false
    help: "Setting `use_forward: true` changes the behavior from a HTTP redirect to
      an internal forward, which can be useful for certain SPA architectures."
  - question: What is the default `csrf_token_id` for the logout process in Symfony?
    answers:
      - value: "`logout`"
        correct: true
      - value: "`_logout`"
        correct: false
      - value: "`csrf_logout`"
        correct: false
      - value: "`app_logout`"
        correct: false
    help: The `csrf_token_id` for logout defaults to 'logout', which is used to
      identify the specific CSRF token for the logout form.
  - question: Which of the following is a valid way to retrieve the `FirewallConfig`
      object for the firewall that matched the current request using the
      `Security` service?
    answers:
      - value: "`$this->security->getFirewallConfig($request)`"
        correct: true
      - value: "`$this->security->getFirewall($request)`"
        correct: false
      - value: "`$this->security->getCurrentFirewall()`"
        correct: false
      - value: "`$this->security->getSecurityConfig()->getFirewall()`"
        correct: false
    help: The `getFirewallConfig()` method takes a `Request` object and returns the
      configuration for the matching firewall.
  - question: What is the purpose of the `always_use_default_target_path` option in
      a Symfony form login firewall configuration?
    answers:
      - value: If true, users are always redirected to the `default_target_path`
          regardless of the previous URL stored in the session.
        correct: true
      - value: It forces the user to always log in via the default login form.
        correct: false
      - value: It ensures that the `default_target_path` is always secure (HTTPS).
        correct: false
      - value: It prevents redirection loops by always going to a fixed path.
        correct: false
    help: This option overrides the behavior of redirecting to the previously
      requested URL after login, always sending the user to the
      `default_target_path`.
  - question: Which security event is dispatched only when the authenticator
      implements
      `Symfony\Component\Security\Http\Authenticator\InteractiveAuthenticatorInterface`,
      indicating login requires explicit user action?
    answers:
      - value: "`Symfony\\Component\\Security\\Http\\Event\\InteractiveLoginEvent`"
        correct: true
      - value: "`Symfony\\Component\\Security\\Http\\Event\\FormLoginEvent`"
        correct: false
      - value: "`Symfony\\Component\\Security\\Http\\Event\\UserActionLoginEvent`"
        correct: false
      - value: "`Symfony\\Component\\Security\\Http\\Event\\ExplicitLoginEvent`"
        correct: false
    help: The `InteractiveLoginEvent` is specifically for authenticators that
      involve direct user interaction, like a login form submission.
  - question: What is the default value for the `user` parameter in the
      `remote_user` authentication method configuration under a Symfony
      firewall?
    answers:
      - value: "`REMOTE_USER`"
        correct: true
      - value: "`HTTP_REMOTE_USER`"
        correct: false
      - value: "`PHP_AUTH_USER`"
        correct: false
      - value: "`REMOTE_IDENTIFIER`"
        correct: false
    help: The `user` option for `remote_user` specifies the `$_SERVER` variable to
      read the username from, defaulting to `REMOTE_USER`.
  - question: Which of the following describes the `priority` access decision strategy?
    answers:
      - value: Grants or denies access by the first voter that does not abstain, based
          on their service priority.
        correct: true
      - value: Grants access if there is at least one voter granting access.
        correct: false
      - value: Requires all voters to grant access for access to be granted.
        correct: false
      - value: Considers the sum of all voter decisions.
        correct: false
    help: The `priority` strategy allows for a specific voter to have precedence
      over others in determining the access decision.
  - question: What is the purpose of the `form_only` option in a Symfony form login
      firewall configuration?
    answers:
      - value: Set to true to require that login data is sent using a form (checks for
          `application/x-www-form-urlencoded` content-type).
        correct: true
      - value: It ensures that the login form is rendered using Symfony's Form
          component.
        correct: false
      - value: It restricts login attempts to only those originating from the login
          form.
        correct: false
      - value: It disables JSON login for this firewall.
        correct: false
    help: The `form_only` option prevents the form login authenticator from
      processing requests that are not standard form submissions, which is
      useful when also using a JSON login authenticator.
  - question: Which `$_SERVER` parameter is typically exposed by Apache and used by
      default for the `user` parameter in X.509 authentication?
    answers:
      - value: "`SSL_CLIENT_S_DN_Email`"
        correct: true
      - value: "`SSL_CLIENT_CERT`"
        correct: false
      - value: "`SSL_CLIENT_VERIFY`"
        correct: false
      - value: "`SSL_CLIENT_I_DN`"
        correct: false
    help: Apache commonly populates `SSL_CLIENT_S_DN_Email` with the email address
      from the client certificate's subject distinguished name.
  - question: What is the default value for the `post_only` option in a Symfony form
      login firewall configuration?
    answers:
      - value: "`true`"
        correct: true
      - value: "`false`"
        correct: false
      - value: "`null`"
        correct: false
      - value: "`auto`"
        correct: false
    help: By default, login forms must be submitted as POST requests to the
      `check_path` URL. Setting this to `false` allows GET requests as well,
      though it's generally not recommended for security reasons.
  - question: Which of the following is a valid way to configure `ips` in
      `access_control` using an environment variable for multiple IP addresses?
    answers:
      - value: |-
          ```yaml
          ips: '%env(TRUSTED_IPS)%'
          ```
        correct: true
      - value: |-
          ```yaml
          ips: [env('TRUSTED_IPS')]
          ```
        correct: false
      - value: |-
          ```yaml
          ips: %TRUSTED_IPS%
          ```
        correct: false
      - value: |-
          ```yaml
          ips: { env: TRUSTED_IPS }
          ```
        correct: false
    help: Environment variables can be used directly within string values for `ips`,
      and Symfony will parse comma-separated values into an array.
  - question: What is the purpose of the `failure_path_parameter` option in a
      Symfony form login firewall configuration?
    answers:
      - value: It lets you change the name of the HTML element used to set the failure
          path.
        correct: true
      - value: It defines the route to redirect to after a failed login attempt.
        correct: false
      - value: It specifies the query parameter for the failure message.
        correct: false
      - value: It is used to pass additional parameters to the failure path.
        correct: false
    help: This option allows customizing the name of the form field that can
      override the default `failure_path`.
  - question: Which of the following options for `logout` configuration in Symfony
      allows you to specify a custom CSRF token manager service?
    answers:
      - value: "`csrf_token_manager`"
        correct: true
      - value: "`csrf_manager`"
        correct: false
      - value: "`token_manager`"
        correct: false
      - value: "`custom_csrf_service`"
        correct: false
    help: The `csrf_token_manager` option accepts the service ID of a custom CSRF
      token manager.
  - question: What is the primary use case for the
      `Symfony\Component\Security\Core\Event\AuthenticationSuccessEvent`?
    answers:
      - value: It is the last event that can make an authentication fail by throwing an
          `AuthenticationException`.
        correct: true
      - value: To modify the response sent back to the user after successful login.
        correct: false
      - value: To create the security token after passport validation.
        correct: false
      - value: To log successful authentication attempts.
        correct: false
    help: This event is triggered when authentication is nearing success, providing
      a final opportunity to intervene before the process completes.
  - question: Which of the following is a valid `Clear-Site-Data` directive to clear
      only cookies upon logout?
    answers:
      - value: "`cookies`"
        correct: true
      - value: "`cookie`"
        correct: false
      - value: "`session_cookies`"
        correct: false
      - value: "`all_cookies`"
        correct: false
    help: The `cookies` directive specifically targets cookies for removal via the
      `Clear-Site-Data` header.
  - question: What is the purpose of the `use_referer` option in a Symfony form
      login firewall configuration?
    answers:
      - value: If true, the user is redirected to the value stored in the `HTTP_REFERER`
          header when no previous URL was stored in the session.
        correct: true
      - value: It forces the login form to be submitted with a `Referer` header.
        correct: false
      - value: It prevents redirection loops by ignoring the `HTTP_REFERER` if it's the
          login page.
        correct: true
      - value: It enables referrer-based security checks.
        correct: false
    help: The `use_referer` option provides a fallback redirection target, but it
      includes logic to prevent redirection loops back to the login page.
  - question: When configuring X.509 authentication, which `$_SERVER` parameter is
      the default for `credentials` if the `user` parameter is not available,
      and is exposed by web servers like Nginx?
    answers:
      - value: "`SSL_CLIENT_S_DN`"
        correct: true
      - value: "`SSL_CLIENT_CERT`"
        correct: false
      - value: "`SSL_CLIENT_I_DN`"
        correct: false
      - value: "`SSL_CLIENT_RAW_CERT`"
        correct: false
    help: "`SSL_CLIENT_S_DN` provides the full distinguished name of the client
      certificate, which can be parsed to find user details."
  - question: Which of the following is the correct way to configure a firewall to
      be `lazy` in PHP configuration?
    answers:
      - value: |-
          ```php
          $security->firewall('main')->lazy(true);
          ```
        correct: true
      - value: |-
          ```php
          $security->firewall('main')->setLazy(true);
          ```
        correct: false
      - value: |-
          ```php
          $security->firewall('main')->option('lazy', true);
          ```
        correct: false
      - value: |-
          ```php
          $security->firewall('main', ['lazy' => true]);
          ```
        correct: false
    help: The `lazy()` method is used on the firewall configuration object to enable
      lazy loading.
  - question: What is the default value for the `enable_csrf` option in Symfony's
      logout configuration?
    answers:
      - value: "`null`"
        correct: true
      - value: "`true`"
        correct: false
      - value: "`false`"
        correct: false
      - value: "`auto`"
        correct: false
    help: The `enable_csrf` option defaults to `null`, meaning it will use the
      global CSRF setting or require explicit configuration.
  - question: Which of the following `access_control` options allows you to restrict
      access based on a specific port number?
    answers:
      - value: "`port`"
        correct: true
      - value: "`server_port`"
        correct: false
      - value: "`http_port`"
        correct: false
      - value: "`listen_port`"
        correct: false
    help: The `port` option in `access_control` allows you to specify a required
      port for the request to match the rule.
  - question: "What is the primary reason for defining a firewall with `security:
      false` and a broad pattern like `^/(_(profiler|wdt)|css|images|js)/`?"
    answers:
      - value: To exclude static assets and development tools from security checks for
          performance and convenience.
        correct: true
      - value: To enable advanced security logging for these paths.
        correct: false
      - value: To force authentication for all requests to these paths.
        correct: false
      - value: To redirect all requests to these paths to a secure server.
        correct: false
    help: Commonly, development tools (profiler, wdt) and static assets (css, js,
      images) do not require security checks, and excluding them improves
      performance.
  - question: In Symfony's security expression language, what does the `token`
      variable represent?
    answers:
      - value: The current security token object
          (`Symfony\Component\Security\Core\Authentication\Token\TokenInterface`).
        correct: true
      - value: The CSRF token for the current request.
        correct: false
      - value: A unique identifier for the user's session.
        correct: false
      - value: The authentication provider's token.
        correct: false
    help: The `token` variable provides access to the `TokenInterface` which holds
      the authenticated user and their roles.
