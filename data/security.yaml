category: Security

questions:
  -
    question: >
      What is the primary importance of the order in which firewalls are defined in `config/packages/security.yaml`?
    answers:
      -
        value: >
          The last firewall defined will always handle the request.
        correct: false
      -
        value: >
          The first firewall whose pattern matches the incoming request URL will handle the request.
        correct: true
      -
        value: >
          The firewall with the most specific pattern will handle the request, regardless of order.
        correct: false
      -
        value: >
          Firewall order only matters for authentication, not authorization.
        correct: false
    help: |
      The order in which firewalls are defined is crucial, as the request will be handled by the first firewall whose pattern matches.
      https://symfony.com/doc/current/security.html#firewalls-authentication

  -
    question: >
      In Symfony's security configuration, what does setting `security: false` for a firewall imply?
    answers:
      -
        value: >
          The firewall will only handle authentication, not authorization.
        correct: false
      -
        value: >
          No security is applied to the routes covered by this firewall, making them publicly accessible.
        correct: true
      -
        value: >
          The firewall is disabled and will not process any requests.
        correct: false
      -
        value: >
          It enables a "read-only" security mode for the firewall.
        correct: false
    help: |
      When `security: false` is set for a firewall, it means that no security is applied to the routes matching its pattern, effectively making them public.
      https://symfony.com/doc/current/security.html#firewalls-authentication

  -
    question: >
      What is the primary benefit of setting `lazy: true` on a Symfony security firewall?
    answers:
      -
        value: >
          It defers the loading of user data until the user attempts to log in.
        correct: false
      -
        value: >
          It prevents the authenticator manager from being initialized until it's actually needed, improving performance for unauthenticated requests.
        correct: true
      -
        value: >
          It allows the firewall to be configured dynamically at runtime.
        correct: false
      -
        value: >
          It enables lazy loading of user roles from the database.
        correct: false
    help: |
      The `lazy: true` option on a firewall defers the initialization of the authenticator manager, which can improve performance for requests that do not require authentication.
      https://symfony.com/doc/current/security.html#firewalls-authentication

  -
    question: >
      Which of the following best describes the `auto` algorithm for password hashers in Symfony's security configuration?
    answers:
      -
        value: >
          It automatically generates a random salt for each password.
        correct: false
      -
        value: >
          It automatically selects the most secure and performant hashing algorithm available (e.g., bcrypt, argon2i) based on PHP's capabilities.
        correct: true
      -
        value: >
          It automatically detects the hashing algorithm used for existing passwords and adapts.
        correct: false
      -
        value: >
          It automatically upgrades old password hashes to new algorithms without user intervention.
        correct: false
    help: |
      The `auto` algorithm for password hashers automatically selects the best available hashing algorithm, such as bcrypt or Argon2i, based on the current PHP environment.
      https://symfony.com/doc/current/security/passwords.html#configuring-password-hashers

  -
    question: >
      Which interface must a user class implement in Symfony to be compatible with the framework's password hashing mechanisms?
    answers:
      -
        value: >
          `Symfony\Component\Security\Core\User\UserInterface`
        correct: false
      -
        value: >
          `Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface`
        correct: true
      -
        value: >
          `Symfony\Component\Security\Core\User\AdvancedUserInterface`
        correct: false
      -
        value: >
          `Symfony\Component\Security\Core\User\UserProviderInterface`
        correct: false
    help: |
      To integrate with Symfony's password hashing system, a user class must implement `Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface`.
      https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords

  -
    question: |
      You want to define an in-memory user provider for testing purposes in Symfony. Which of the following YAML snippets correctly configures this?
      ```yaml
      security:
          providers:
              # ???
      ```
    answers:
      -
        value: >
          `users_in_memory: { in_memory: true }`
        correct: false
      -
        value: >
          `users_in_memory: { memory: null }`
        correct: true
      -
        value: >
          `users_in_memory: { type: memory }`
        correct: false
      -
        value: >
          `users_in_memory: { provider: memory }`
        correct: false
    help: |
      An in-memory user provider can be configured using `memory: null` under the `providers` section in `security.yaml`.
      https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers

  -
    question: |
      How would you configure `access_control` in `security.yaml` to require `ROLE_ADMIN` for all URLs starting with `/admin`?
    answers:
      -
        value: >
          `- { route: '^/admin', roles: ROLE_ADMIN }`
        correct: false
      -
        value: >
          `- { path: '^/admin', role: ROLE_ADMIN }`
        correct: false
      -
        value: >
          `- { path: '^/admin', roles: ROLE_ADMIN }`
        correct: true
      -
        value: >
          `- { url: '^/admin', roles: ROLE_ADMIN }`
        correct: false
    help: |
      The `access_control` section uses the `path` key with a regular expression to match URLs and the `roles` key to specify required roles.
      https://symfony.com/doc/current/security.html#securing-url-patterns-access-control

  -
    question: >
      To grant access to a path if a user has either `ROLE_ADMIN` OR is `IS_AUTHENTICATED_FULLY`, which `access_control` configuration is correct?
    answers:
      -
        value: >
          `- { path: '^/admin', roles: ROLE_ADMIN OR IS_AUTHENTICATED_FULLY }`
        correct: false
      -
        value: >
          `- { path: '^/admin', roles: [ROLE_ADMIN, IS_AUTHENTICATED_FULLY] }`
        correct: true
      -
        value: >
          `- { path: '^/admin', roles: ROLE_ADMIN, IS_AUTHENTICATED_FULLY }`
        correct: false
      -
        value: >
          `- { path: '^/admin', allow_if: "is_granted('ROLE_ADMIN') or is_fully_authenticated()" }`
        correct: false
    help: |
      When multiple roles are listed in the `roles` array for an `access_control` entry, access is granted if the user has *any* of the listed roles.
      https://symfony.com/doc/current/security.html#securing-url-patterns-access-control

  -
    question: |
      Consider the following `access_control` configuration in `security.yaml`:

      ```yaml
      access_control:
          - { path: '^/admin/users', roles: ROLE_SUPER_ADMIN }
          - { path: '^/admin', roles: ROLE_ADMIN }
      ```
      If a request is made to `/admin/users/123`, which role will be required for access?
    answers:
      -
        value: >
          `ROLE_ADMIN`
        correct: false
      -
        value: >
          `ROLE_SUPER_ADMIN`
        correct: true
      -
        value: >
          Both `ROLE_ADMIN` and `ROLE_SUPER_ADMIN`
        correct: false
      -
        value: >
          Neither, as the rules conflict.
        correct: false
    help: |
      Symfony processes `access_control` rules in the order they are defined. The first rule that matches the request path will be applied. More specific rules should generally be placed before more general ones.
      https://symfony.com/doc/current/security.html#access-control-rule-order

  -
    question: |
      To enforce that the `/cart/checkout` path must be accessed over HTTPS, which `access_control` option should be used?
    answers:
      -
        value: >
          `channel: https`
        correct: false
      -
        value: >
          `secure: true`
        correct: false
      -
        value: >
          `requires_channel: https`
        correct: true
      -
        value: >
          `protocol: https`
        correct: false
    help: |
      The `requires_channel: https` option in `access_control` ensures that requests to the specified path are redirected to HTTPS if they arrive over HTTP.
      https://symfony.com/doc/current/security/force_https.html

  -
    question: |
      You need to restrict access to the `/api/internal` endpoint so that it's only accessible when requested via port `8080`. Which `access_control` configuration achieves this?
    answers:
      -
        value: >
          `- { path: '^/api/internal', roles: PUBLIC_ACCESS, port: 8080 }`
        correct: true
      -
        value: >
          `- { path: '^/api/internal', roles: PUBLIC_ACCESS, server_port: 8080 }`
        correct: false
      -
        value: >
          `- { path: '^/api/internal', roles: PUBLIC_ACCESS, allow_port: 8080 }`
        correct: false
      -
        value: >
          `- { path: '^/api/internal', roles: PUBLIC_ACCESS, listener: port_8080 }`
        correct: false
    help: |
      The `port` option in `access_control` allows you to specify that a URL is only accessible when requested via a designated port.
      https://symfony.com/doc/current/security/access_control.html#matching-by-port

  -
    question: |
      Which of the following `access_control` configurations correctly restricts access to the `/internal` path to specific IP addresses, including a subnet?
    answers:
      -
        value: >
          `- { path: '^/internal', roles: PUBLIC_ACCESS, ip: [127.0.0.1, ::1, 192.168.0.1/24] }`
        correct: false
      -
        value: >
          `- { path: '^/internal', roles: PUBLIC_ACCESS, ips: '127.0.0.1, ::1, 192.168.0.1/24' }`
        correct: false
      -
        value: >
          `- { path: '^/internal', roles: PUBLIC_ACCESS, ips: [127.0.0.1, ::1, '192.168.0.1/24'] }`
        correct: true
      -
        value: >
          `- { path: '^/internal', roles: PUBLIC_ACCESS, allowed_ips: [127.0.0.1, ::1, 192.168.0.1/24] }`
        correct: false
    help: |
      The `ips` option in `access_control` accepts an array of IP addresses or subnet masks to restrict access.
      https://symfony.com/doc/current/security/access_control.html#matching-by-ip-address

  -
    question: >
      What is the primary purpose of the `allow_if` option in a Symfony `access_control` rule?
    answers:
      -
        value: >
          To define an alternative path for redirection if access is denied.
        correct: false
      -
        value: >
          To specify a custom error message for access denied situations.
        correct: false
      -
        value: >
          To allow for more complex access logic using a security expression, which works in an OR fashion with the `roles` option.
        correct: true
      -
        value: >
          To enable a "soft" access control that logs violations without denying access.
        correct: false
    help: |
      The `allow_if` option allows you to use a security expression for more flexible access control. If the expression evaluates to `true` OR the user has one of the specified `roles`, access is granted.
      https://symfony.com/doc/current/security/access_control.html#using-an-expression-to-grant-access

  -
    question: >
      Which Symfony CLI command is used to quickly generate the necessary files (controller, Twig template, security configuration) for a form-based login system?
    answers:
      -
        value: >
          `php bin/console make:auth`
        correct: false
      -
        value: >
          `php bin/console make:security:login`
        correct: false
      -
        value: >
          `php bin/console make:security:form-login`
        correct: true
      -
        value: >
          `php bin/console symfony:security:form`
        correct: false
    help: |
      The `make:security:form-login` command streamlines the setup of form-based authentication in Symfony.
      https://symfony.com/doc/current/security.html#form-login

  -
    question: >
      In a Symfony form login configuration, what are the roles of `login_path` and `check_path`?
    answers:
      -
        value: >
          `login_path` is the URL to redirect to after successful login, and `check_path` is the URL for logout.
        correct: false
      -
        value: >
          `login_path` is the route name for displaying the login form, and `check_path` is the route name for processing login submissions.
        correct: true
      -
        value: >
          `login_path` is the path to the user entity, and `check_path` is the path to the password hasher.
        correct: false
      -
        value: >
          Both `login_path` and `check_path` must point to the same controller action.
        correct: false
    help: |
      `login_path` specifies the route where the login form is displayed, while `check_path` is the route that the login form submits to for authentication processing.
      https://symfony.com/doc/current/security.html#form-login

  -
    question: |
      You are setting up a JSON API login. Which configuration option is essential for the `json_login` authenticator to specify the endpoint that processes login requests?
    answers:
      -
        value: >
          `submit_path`
        correct: false
      -
        value: >
          `auth_path`
        correct: false
      -
        value: >
          `check_path`
        correct: true
      -
        value: >
          `api_path`
        correct: false
    help: |
      For the `json_login` authenticator, the `check_path` option defines the URL that handles the JSON login request.
      https://symfony.com/doc/current/security.html#json-login

  -
    question: >
      When is the `remote_user` authenticator typically used in Symfony security?
    answers:
      -
        value: >
          For authenticating users via an external OAuth2 provider.
        correct: false
      -
        value: >
          When an external system (e.g., a web server with Kerberos) handles initial authentication and passes the user identifier via a server parameter (like `REMOTE_USER`).
        correct: true
      -
        value: >
          To allow users to log in using their email address instead of a username.
        correct: false
      -
        value: >
          For stateless API authentication using tokens.
        correct: false
    help: |
      The `remote_user` authenticator is designed for scenarios where an external system performs the primary authentication and provides the user's identity to Symfony via a server variable.
      https://symfony.com/doc/current/security.html#remote-user-authentication

  -
    question: >
      What is the primary use case for enabling the `x509` authenticator in a Symfony security firewall?
    answers:
      -
        value: >
          To authenticate users based on username and password stored in an X.509 certificate.
        correct: false
      -
        value: >
          To enable multi-factor authentication using X.509 certificates.
        correct: false
      -
        value: >
          To authenticate users based on client certificates provided by the web server.
        correct: true
      -
        value: >
          To encrypt communication between the client and the server using X.509.
        correct: false
    help: |
      The X.509 authenticator allows Symfony to leverage client certificates for user authentication, where the web server handles the initial certificate validation.
      https://symfony.com/doc/current/security.html#x-509-authentication

  -
    question: >
      What is the default value for the `path` option in Symfony's logout configuration?
    answers:
      -
        value: >
          `/`
        correct: false
      -
        value: >
          `/logout`
        correct: true
      -
        value: >
          `/login`
        correct: false
      -
        value: >
          `null`
        correct: false
    help: |
      The `path` option in the logout configuration defaults to `/logout`, which is the URL that triggers the logout process.
      https://symfony.com/doc/current/reference/configuration/security.rst#path

  -
    question: >
      If no `target` is explicitly configured for logout in Symfony, where will the user be redirected after a successful logout?
    answers:
      -
        value: >
          To the previous page they visited before logging out.
        correct: false
      -
        value: >
          To the login page.
        correct: false
      -
        value: >
          To the application's homepage (`/`).
        correct: true
      -
        value: >
          To a blank page.
        correct: false
    help: |
      The `target` option for logout defaults to `/`, meaning users are redirected to the homepage after logging out.
      https://symfony.com/doc/current/reference/configuration/security.rst#target

  -
    question: >
      By default, what is the effect of the `invalidate_session: true` setting in Symfony's logout configuration when a user logs out from one firewall?
    answers:
      -
        value: >
          Only the session associated with the current firewall is invalidated.
        correct: false
      -
        value: >
          The user's session is invalidated across all firewalls, effectively logging them out from the entire application.
        correct: true
      -
        value: >
          The user's session is marked as "expired" but not immediately cleared.
        correct: false
      -
        value: >
          It prevents new sessions from being created for that user.
        correct: false
    help: |
      By default, `invalidate_session: true` ensures that logging out from any firewall invalidates the entire session, logging the user out from all active firewalls.
      https://symfony.com/doc/current/reference/configuration/security.rst#invalidate-session

  -
    question: >
      Which of the following are valid values for the `clear_site_data` option in Symfony's logout configuration?
    answers:
      -
        value: >
          `[cookies, cache, storage]`
        correct: true
      -
        value: >
          `[all]`
        correct: false
      -
        value: >
          `[session, local_storage]`
        correct: false
      -
        value: >
          `[data, headers]`
        correct: false
      -
        value: >
          `[*]`
        correct: true
      -
        value: >
          `[executionContexts]`
        correct: true
    help: |
      The `clear_site_data` option accepts `cache`, `cookies`, `storage`, `executionContexts`, or `*` to clear various types of client-side data.
      https://symfony.com/doc/current/reference/configuration/security.rst#clear-site-data

  -
    question: >
      Which Symfony component must be installed to enable login throttling functionality in your application?
    answers:
      -
        value: >
          `symfony/security-bundle`
        correct: false
      -
        value: >
          `symfony/rate-limiter`
        correct: true
      -
        value: >
          `symfony/http-foundation`
        correct: false
      -
        value: >
          `symfony/security-csrf`
        correct: false
    help: |
      The `symfony/rate-limiter` component provides the necessary tools for implementing login throttling and other rate-limiting features.
      https://symfony.com/doc/current/security.html#login-throttling

  -
    question: >
      By default, when login throttling is enabled in Symfony, what is the maximum number of login attempts allowed per minute?
    answers:
      -
        value: >
          3 attempts
        correct: false
      -
        value: >
          5 attempts
        correct: true
      -
        value: >
          10 attempts
        correct: false
      -
        value: >
          Unlimited attempts
        correct: false
    help: |
      By default, Symfony's login throttling allows 5 login attempts per minute. This can be customized via the `max_attempts` option.
      https://symfony.com/doc/current/security.html#login-throttling

  -
    question: |
      You have defined a custom rate limiter service with the ID `app.my_login_limiter`. How would you configure your firewall to use this custom service for login throttling?
    answers:
      -
        value: |
          ```yaml
          login_throttling:
              service: app.my_login_limiter
          ```
        correct: false
      -
        value: |
          ```yaml
          login_throttling:
              limiter: app.my_login_limiter
          ```
        correct: true
      -
        value: |
          ```yaml
          login_throttling:
              custom_limiter: app.my_login_limiter
          ```
        correct: false
      -
        value: |
          ```yaml
          login_throttling:
              rate_limiter_id: app.my_login_limiter
          ```
        correct: false
    help: |
      The `limiter` option under `login_throttling` allows you to specify the service ID of a custom rate limiter.
      https://symfony.com/doc/current/security.html#login-throttling

  -
    question: >
      What does the `IS_AUTHENTICATED_FULLY` role signify in Symfony's security context?
    answers:
      -
        value: >
          The user has successfully authenticated and is currently logged in, and is NOT authenticated via "remember me".
        correct: true
      -
        value: >
          The user is authenticated via "remember me" functionality.
        correct: false
      -
        value: >
          The user has all possible roles assigned to them.
        correct: false
      -
        value: >
          The user has completed a multi-factor authentication process.
        correct: false
    help: |
      `IS_AUTHENTICATED_FULLY` indicates that the user is authenticated and is not merely remembered from a previous session.
      https://symfony.com/doc/current/security.html#built-in-roles

  -
    question: >
      Which of the following roles indicates that a user is authenticated via Symfony's "remember me" functionality?
    answers:
      -
        value: >
          `IS_AUTHENTICATED_FULLY`
        correct: false
      -
        value: >
          `IS_AUTHENTICATED_REMEMBERED`
        correct: true
      -
        value: >
          `IS_REMEMBERED`
        correct: false
      -
        value: >
          `ROLE_REMEMBER_ME`
        correct: false
    help: |
      The `IS_AUTHENTICATED_REMEMBERED` role is granted to users who have been authenticated through the "remember me" feature.
      https://symfony.com/doc/current/security.html#built-in-roles

  -
    question: >
      What does the `IS_AUTHENTICATED_ANONYMOUSLY` role imply in Symfony's security system?
    answers:
      -
        value: >
          The user is logged in as a guest user with limited permissions.
        correct: false
      -
        value: >
          The request is not authenticated, but a security token (representing an anonymous user) is present. This is often used for publicly accessible areas.
        correct: true
      -
        value: >
          The user has explicitly chosen to browse anonymously.
        correct: false
      -
        value: >
          The user's identity is hidden for privacy reasons.
        correct: false
    help: |
      `IS_AUTHENTICATED_ANONYMOUSLY` means that a security token exists for the request, even if no actual user is logged in, allowing public access to resources.
      https://symfony.com/doc/current/security.html#built-in-roles

  -
    question: |
      Given the following controller, how would you apply the `ROLE_ADMIN` requirement to all actions within the `AdminController` class using an attribute?
      ```php
      namespace App\Controller;

      use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
      use Symfony\Component\HttpFoundation\Response;
      // ...
      class AdminController extends AbstractController
      {
          public function index(): Response
          {
              // ...
          }

          public function dashboard(): Response
          {
              // ...
          }
      }
      ```
    answers:
      -
        value: |
          ```php
          #[Security("is_granted('ROLE_ADMIN')")]
          class AdminController extends AbstractController
          ```
        correct: false
      -
        value: |
          ```php
          #[IsGranted('ROLE_ADMIN')]
          class AdminController extends AbstractController
          ```
        correct: true
      -
        value: |
          ```php
          #[AccessControl(roles: 'ROLE_ADMIN')]
          class AdminController extends AbstractController
          ```
        correct: false
      -
        value: |
          ```php
          #[Route('/admin', requirements: ['_role' => 'ROLE_ADMIN'])]
          class AdminController extends AbstractController
          ```
        correct: false
    help: |
      The `#[IsGranted]` attribute can be applied at the class level to secure all actions within a controller with the specified role.
      https://symfony.com/doc/current/security.html#securing-controllers-and-templates

  -
    question: |
      When using the `#[IsGranted]` attribute, how can you provide a custom message that will be displayed to the user if access is denied?
    answers:
      -
        value: >
          `#[IsGranted('ROLE_USER', error_message: 'Access denied.')]`
        correct: false
      -
        value: >
          `#[IsGranted('ROLE_USER', message: 'You are not allowed to access this resource.')]`
        correct: true
      -
        value: >
          `#[IsGranted('ROLE_USER', on_deny: 'Access denied.')]`
        correct: false
      -
        value: >
          `#[IsGranted('ROLE_USER', deny_message: 'Access denied.')]`
        correct: false
    help: |
      The `message` option in the `#[IsGranted]` attribute allows you to define a custom message for access denied errors.
      https://symfony.com/doc/current/security.html#securing-controllers-and-templates

  -
    question: |
      In a Symfony service, how would you correctly check if the currently authenticated user has the `ROLE_EDITOR` role, assuming the `Security` service is injected?
    answers:
      -
        value: >
          `$this->security->hasRole('ROLE_EDITOR');`
        correct: false
      -
        value: >
          `$this->security->isGranted('ROLE_EDITOR');`
        correct: true
      -
        value: >
          `$this->getUser()->hasRole('ROLE_EDITOR');`
        correct: false
      -
        value: >
          `$this->security->checkRole('ROLE_EDITOR');`
        correct: false
    help: |
      The `isGranted()` method of the `Security` service is the standard way to check for roles or permissions within a service.
      https://symfony.com/doc/current/security.html#checking-if-a-user-has-a-role

  -
    question: |
      In a Twig template, how can you check if the current user is fully authenticated (i.e., not just remembered)?
    answers:
      -
        value: >
          `{% if app.user.isFullyAuthenticated %}`
        correct: false
      -
        value: >
          `{% if is_granted('IS_AUTHENTICATED_FULLY') %}`
        correct: true
      -
        value: >
          `{% if app.security.isGranted('IS_AUTHENTICATED_FULLY') %}`
        correct: false
      -
        value: >
          `{% if app.user and app.user.isAuthenticated() %}`
        correct: false
    help: |
      The `is_granted()` Twig function can be used with built-in security attributes like `IS_AUTHENTICATED_FULLY`.
      https://symfony.com/doc/current/security.html#securing-controllers-and-templates

  -
    question: >
      Which interface should a custom user class implement if you need to define a custom logic for comparing two user objects for equality in Symfony's security component?
    answers:
      -
        value: >
          `Symfony\Component\Security\Core\User\UserInterface`
        correct: false
      -
        value: >
          `Symfony\Component\Security\Core\User\EquatableInterface`
        correct: true
      -
        value: >
          `Symfony\Component\Security\Core\User\ComparableUserInterface`
        correct: false
      -
        value: >
          `Symfony\Component\Security\Core\User\UserComparatorInterface`
        correct: false
    help: |
      Implementing `Symfony\Component\Security\Core\User\EquatableInterface` allows you to define custom comparison logic for user objects via the `isEqualTo()` method.
      https://symfony.com/doc/current/security.html#user-comparison

  -
    question: >
      Which method, part of `PasswordAuthenticatedUserInterface`, is responsible for returning the hashed password of a user?
    answers:
      -
        value: >
          `getHashedPassword(): string`
        correct: false
      -
        value: >
          `getPassword(): string`
        correct: true
      -
        value: >
          `getAuthPassword(): string`
        correct: false
      -
        value: >
          `retrievePassword(): string`
        correct: false
    help: |
      The `getPassword()` method, defined in `PasswordAuthenticatedUserInterface`, is used to retrieve the user's hashed password.
      https://symfony.com/doc/current/security/passwords.html#password-related-interfaces

  -
    question: >
      What is the primary purpose of the `needsRehash(hashedPassword: string): bool` method in `Symfony\Component\PasswordHasher\PasswordHasherInterface`?
    answers:
      -
        value: >
          To check if a given plaintext password matches a hashed password.
        correct: false
      -
        value: >
          To determine if an existing hashed password needs to be re-hashed, for example, because the algorithm is outdated or the cost factor has changed.
        correct: true
      -
        value: >
          To verify if the hashing algorithm used for a password is secure.
        correct: false
      -
        value: >
          To calculate the computational cost of hashing a password.
        correct: false
    help: |
      `needsRehash()` is used to check if a stored password hash should be updated to a newer algorithm or a higher cost factor.
      https://symfony.com/doc/current/security/passwords.html#password-related-interfaces

  -
    question: >
      Which method from `Symfony\Component\PasswordHasher\PasswordHasherInterface` is used to convert a plaintext password into a hashed string?
    answers:
      -
        value: >
          `encode(plainPassword: string): string`
        correct: false
      -
        value: >
          `hash(plainPassword: string, salt: string = null, extraData: array = []): string`
        correct: true
      -
        value: >
          `encrypt(plainPassword: string): string`
        correct: false
      -
        value: >
          `createHash(plainPassword: string): string`
        correct: false
    help: |
      The `hash()` method is responsible for generating a new hashed password from a plaintext input.
      https://symfony.com/doc/current/security/passwords.html#password-related-interfaces

  -
    question: >
      Which Symfony Security event is dispatched after authentication is fully successful and allows listeners to modify the `Response` sent back to the user?
    answers:
      -
        value: >
          `Symfony\Component\Security\Core\Event\AuthenticationSuccessEvent`
        correct: false
      -
        value: >
          `Symfony\Component\Security\Http\Event\LoginSuccessEvent`
        correct: true
      -
        value: >
          `Symfony\Component\Security\Http\Event\InteractiveLoginEvent`
        correct: false
      -
        value: >
          `Symfony\Component\Security\Http\Event\AuthenticationTokenCreatedEvent`
        correct: false
    help: |
      `LoginSuccessEvent` is dispatched after a successful authentication and provides an opportunity to modify the HTTP response.
      https://symfony.com/doc/current/security.html#security-events

  -
    question: >
      Which Symfony Security event is dispatched when an `AuthenticationException` occurs during the authentication process, allowing listeners to modify the error response?
    answers:
      -
        value: >
          `Symfony\Component\Security\Core\Event\AuthenticationFailureEvent`
        correct: false
      -
        value: >
          `Symfony\Component\Security\Http\Event\LoginFailureEvent`
        correct: true
      -
        value: >
          `Symfony\Component\Security\Http\Event\AuthenticationExceptionEvent`
        correct: false
      -
        value: >
          `Symfony\Component\Security\Http\Event\AuthenticationErrorEvent`
        correct: false
    help: |
      `LoginFailureEvent` is dispatched when an authentication attempt fails, enabling custom error handling and response modification.
      https://symfony.com/doc/current/security.html#security-events

  -
    question: >
      Which Symfony Security event is dispatched just before a user logs out of the application?
    answers:
      -
        value: >
          `Symfony\Component\Security\Http\Event\UserLogoutEvent`
        correct: false
      -
        value: >
          `Symfony\Component\Security\Http\Event\LogoutEvent`
        correct: true
      -
        value: >
          `Symfony\Component\Security\Core\Event\SecurityLogoutEvent`
        correct: false
      -
        value: >
          `Symfony\Component\Security\Http\Event\PreLogoutEvent`
        correct: false
    help: |
      The `LogoutEvent` is dispatched right before the logout process completes, allowing for custom actions.
      https://symfony.com/doc/current/security.html#security-events

  -
    question: >
      Which Symfony Security event is dispatched immediately after an authenticator creates the security passport, and is typically where the actual authentication checks (e.g., password validation) occur?
    answers:
      -
        value: >
          `Symfony\Component\Security\Http\Event\PassportCreatedEvent`
        correct: false
      -
        value: >
          `Symfony\Component\Security\Http\Event\CheckPassportEvent`
        correct: true
      -
        value: >
          `Symfony\Component\Security\Http\Event\PreAuthenticateEvent`
        correct: false
      -
        value: >
          `Symfony\Component\Security\Http\Event\AuthenticatorPassportEvent`
        correct: false
    help: |
      `CheckPassportEvent` is the designated event for performing the core authentication checks after the passport has been created.
      https://symfony.com/doc/current/security.html#security-events

  -
    question: >
      What is the purpose of the `context` option when configuring multiple firewalls in Symfony's security?
    answers:
      -
        value: >
          It defines the default authentication method for the firewall.
        correct: false
      -
        value: >
          It allows multiple firewalls to share the same authentication state, so a user authenticated in one is recognized in others.
        correct: true
      -
        value: >
          It specifies the environment (e.g., `dev`, `prod`) in which the firewall is active.
        correct: false
      -
        value: >
          It sets the base URL path for the firewall's pattern.
        correct: false
    help: |
      The `context` option enables sharing authentication state across different firewalls, providing a seamless user experience.
      https://symfony.com/doc/current/reference/configuration/security.rst#context

  -
    question: >
      If two Symfony firewalls are configured to share the same `context`, what must be the value of their `stateless` option to ensure session persistence for authentication?
    answers:
      -
        value: >
          `true`
        correct: false
      -
        value: >
          `false`
        correct: true
      -
        value: >
          `null`
        correct: false
      -
        value: >
          It depends on the authentication method.
        correct: false
    help: |
      For firewalls sharing a context to maintain session state, their `stateless` option must be set to `false`.
      https://symfony.com/doc/current/reference/configuration/security.rst#context

  -
    question: >
      Which Symfony CLI command should you use to scan your project's dependencies for known security vulnerabilities?
    answers:
      -
        value: >
          `composer audit`
        correct: false
      -
        value: >
          `php bin/console security:check`
        correct: false
      -
        value: >
          `symfony check:security`
        correct: true
      -
        value: >
          `php bin/console security:audit`
        correct: false
    help: |
      The `symfony check:security` command is used to check for security vulnerabilities in your project's dependencies against a public database of advisories.
      https://symfony.com/doc/current/setup.html#checking-security-vulnerabilities

  -
    question: >
      If you are using Symfony's AssetMapper component, which command can you run to audit for security vulnerabilities in your Importmap dependencies?
    answers:
      -
        value: >
          `php bin/console asset:audit`
        correct: false
      -
        value: >
          `php bin/console importmap:security`
        correct: false
      -
        value: >
          `php bin/console importmap:audit`
        correct: true
      -
        value: >
          `symfony asset-mapper:check`
        correct: false
    help: |
      The `importmap:audit` command provides security vulnerability checking for dependencies managed by the AssetMapper component.
      https://symfony.com/doc/current/frontend/asset_mapper.html#checking-security-vulnerabilities

  -
    question: >
      In Symfony's security expression language, what does the `user` variable represent?
    answers:
      -
        value: >
          The username of the currently authenticated user.
        correct: false
      -
        value: >
          An instance of `Symfony\Component\Security\Core\User\UserInterface` if a user is authenticated, or `null` otherwise.
        correct: true
      -
        value: >
          An array containing all roles of the current user.
        correct: false
      -
        value: >
          The user's ID from the database.
        correct: false
    help: |
      The `user` variable in security expressions provides access to the current `UserInterface` object or `null` if no user is authenticated.
      https://symfony.com/doc/current/security/expressions.html#variables

  -
    question: >
      Which of the following security expression language functions is equivalent to calling `$security->isGranted('attribute', $object)` in a controller or service?
    answers:
      -
        value: >
          `has_role('attribute', object)`
        correct: false
      -
        value: >
          `can('attribute', object)`
        correct: false
      -
        value: >
          `is_granted('attribute', object)`
        correct: true
      -
        value: >
          `check_access('attribute', object)`
        correct: false
    help: |
      The `is_granted()` function in the expression language directly maps to the `Security::isGranted()` method.
      https://symfony.com/doc/current/security/expressions.html#functions

  -
    question: >
      Which security expression language function is equivalent to checking if the user has the `IS_AUTHENTICATED_FULLY` role?
    answers:
      -
        value: >
          `is_authenticated()`
        correct: false
      -
        value: >
          `is_fully_authenticated()`
        correct: true
      -
        value: >
          `is_logged_in()`
        correct: false
      -
        value: >
          `has_full_access()`
        correct: false
    help: |
      The `is_fully_authenticated()` function provides a concise way to check for the `IS_AUTHENTICATED_FULLY` attribute in security expressions.
      https://symfony.com/doc/current/security.html#built-in-roles

  -
    question: >
      Why is it generally not recommended to use `Security::isGranted()` directly inside a custom voter in Symfony?
    answers:
      -
        value: >
          It can lead to an infinite loop if the voter calls itself.
        correct: false
      -
        value: >
          It bypasses the voter system entirely, making the voter ineffective.
        correct: false
      -
        value: >
          It can lead to potential token mismatches or inconsistencies, as the voter might be evaluating a different token than the one `isGranted` uses.
        correct: true
      -
        value: >
          `isGranted()` is only meant for controllers and services, not voters.
        correct: false
    help: |
      Using `Security::isGranted()` within a voter can cause issues due to potential mismatches between the token being evaluated by the voter and the token the `Security` service is currently aware of. It's better to use the `AccessDecisionManager` directly.
      https://symfony.com/doc/current/security/voters.html#checking-roles-inside-voters

  -
    question: >
      In a form login configuration, if `always_use_default_target_path` is set to `true`, what is the consequence for user redirection after a successful login?
    answers:
      -
        value: >
          Users will always be redirected to the `default_target_path`, ignoring any previous URL stored in the session.
        correct: true
      -
        value: >
          Users will be redirected to the page they tried to access before being prompted to log in.
        correct: false
      -
        value: >
          Users will be prompted to choose their redirection target.
        correct: false
      -
        value: >
          The `default_target_path` will only be used if the `_target_path` parameter is missing.
        correct: false
    help: |
      Setting `always_use_default_target_path` to `true` forces redirection to the `default_target_path` after login, overriding any stored previous URL.
      https://symfony.com/doc/current/reference/configuration/security.rst#login-and-redirection

  -
    question: >
      What is the default name of the HTML form field parameter that Symfony's form login authenticator expects for the username?
    answers:
      -
        value: >
          `username`
        correct: false
      -
        value: >
          `_username`
        correct: true
      -
        value: >
          `user_name`
        correct: false
      -
        value: >
          `email`
        correct: false
    help: |
      By default, the form login authenticator looks for a POST parameter named `_username` for the user's identifier.
      https://symfony.com/doc/current/reference/configuration/security.rst#login-and-redirection

  -
    question: >
      Which of the following is the default name of the HTML form field parameter that Symfony's form login authenticator expects for the password?
    answers:
      -
        value: >
          `password`
        correct: false
      -
        value: >
          `_password`
        correct: true
      -
        value: >
          `user_password`
        correct: false
      -
        value: >
          `pass`
        correct: false
    help: |
      The default name for the password field parameter in a form login is `_password`.
      https://symfony.com/doc/current/reference/configuration/security.rst#login-and-redirection

  -
    question: >
      What is the default value for the `default_target_path` option in Symfony's form login configuration?
    answers:
      -
        value: >
          `/dashboard`
        correct: false
      -
        value: >
          `/`
        correct: true
      -
        value: >
          `/home`
        correct: false
      -
        value: >
          `/login`
        correct: false
    help: |
      The `default_target_path` option, which specifies where to redirect users when no previous page is stored, defaults to `/`.
      https://symfony.com/doc/current/reference/configuration/security.rst#login-and-redirection

  -
    question: >
      What is the primary purpose of the `session_fixation_strategy` option in Symfony's security configuration?
    answers:
      -
        value: >
          To prevent brute-force login attacks.
        correct: false
      -
        value: >
          To mitigate session fixation attacks by controlling how session IDs are handled after authentication.
        correct: true
      -
        value: >
          To ensure that sessions are always encrypted.
        correct: false
      -
        value: >
          To fix broken session IDs during user authentication.
        correct: false
    help: |
      The `session_fixation_strategy` option helps prevent session fixation attacks by changing the session ID upon successful authentication.
      https://symfony.com/doc/current/reference/configuration/security.rst#session-fixation-strategy

  -
    question: >
      Which of the following are valid values for the `session_fixation_strategy` option in Symfony?
    answers:
      -
        value: >
          `NONE`
        correct: true
      -
        value: >
          `REGENERATE`
        correct: false
      -
        value: >
          `MIGRATE`
        correct: true
      -
        value: >
          `INVALIDATE`
        correct: true
      -
        value: >
          `CHANGE_ID`
        correct: false
    help: |
      The allowed values for `session_fixation_strategy` are `NONE`, `MIGRATE`, and `INVALIDATE`.
      https://symfony.com/doc/current/reference/configuration/security.rst#session-fixation-strategy

  -
    question: >
      Which event is dispatched only when an authenticator implements `InteractiveAuthenticatorInterface`, indicating that login requires explicit user action (e.g., a login form)?
    answers:
      -
        value: >
          `Symfony\Component\Security\Http\Event\LoginSuccessEvent`
        correct: false
      -
        value: >
          `Symfony\Component\Security\Http\Event\InteractiveLoginEvent`
        correct: true
      -
        value: >
          `Symfony\Component\Security\Core\Event\AuthenticationSuccessEvent`
        correct: false
      -
        value: >
          `Symfony\Component\Security\Http\Event\CheckPassportEvent`
        correct: false
    help: |
      The `InteractiveLoginEvent` is specifically dispatched for interactive login methods, allowing for response modification.
      https://symfony.com/doc/current/security.html#security-events

  -
    question: >
      Which event is dispatched when a user's token is deauthenticated, for instance, because their password was changed?
    answers:
      -
        value: >
          `Symfony\Component\Security\Http\Event\UserDeauthenticatedEvent`
        correct: false
      -
        value: >
          `Symfony\Component\Security\Http\Event\TokenInvalidatedEvent`
        correct: false
      -
        value: >
          `Symfony\Component\Security\Http\Event\TokenDeauthenticatedEvent`
        correct: true
      -
        value: >
          `Symfony\Component\Security\Core\Event\SecurityTokenRemovedEvent`
        correct: false
    help: |
      The `TokenDeauthenticatedEvent` is triggered when a user's authentication token becomes invalid, such as after a password change.
      https://symfony.com/doc/current/security.html#security-events

  -
    question: >
      Which event is dispatched after a user impersonation (switch user) operation is completed?
    answers:
      -
        value: >
          `Symfony\Component\Security\Http\Event\ImpersonationEvent`
        correct: false
      -
        value: >
          `Symfony\Component\Security\Http\Event\SwitchUserEvent`
        correct: true
      -
        value: >
          `Symfony\Component\Security\Core\Event\UserSwitchedEvent`
        correct: false
      -
        value: >
          `Symfony\Component\Security\Http\Event\UserContextSwitchedEvent`
        correct: false
    help: |
      The `SwitchUserEvent` is dispatched upon the completion of a user impersonation action.
      https://symfony.com/doc/current/security.html#security-events

  -
    question: |
      Given the following PHP snippet, how would you correctly retrieve the name of the firewall that matched the current request within `someMethod()`, assuming `Security` and `RequestStack` are injected?
      ```php
      // src/Service/ExampleService.php
      use Symfony\Bundle\SecurityBundle\Security;
      use Symfony\Component\HttpFoundation\RequestStack;

      class ExampleService
      {
          public function __construct(
              private Security $security,
              private RequestStack $requestStack,
          ) {
          }

          public function someMethod(): void
          {
              $request = $this->requestStack->getCurrentRequest();
              $firewallName = /* ??? */;

              // ...
          }
      }
      ```
    answers:
      -
        value: >
          `$this->security->getFirewallName($request);`
        correct: false
      -
        value: >
          `$this->security->getFirewallConfig($request)->getName();`
        correct: true
      -
        value: >
          `$request->attributes->get('_firewall_name');`
        correct: false
      -
        value: >
          `$this->security->getFirewall()->getName();`
        correct: false
    help: |
      The `getFirewallConfig()` method of the `Security` service, when passed the current `Request`, returns the configuration of the matched firewall, from which you can get its name.
      https://symfony.com/doc/current/security.html#retrieving-the-firewall-configuration

  -
    question: >
      When configuring `remote_user` authentication, what is the default `$_SERVER` parameter name that Symfony looks for to find the user identifier?
    answers:
      -
        value: >
          `HTTP_REMOTE_USER`
        correct: false
      -
        value: >
          `REMOTE_USER`
        correct: true
      -
        value: >
          `AUTH_USER`
        correct: false
      -
        value: >
          `PHP_AUTH_USER`
        correct: false
    help: |
      The `remote_user` authenticator defaults to using the `REMOTE_USER` server parameter to obtain the user identifier.
      https://symfony.com/doc/current/reference/configuration/security.rst#remote-user

  -
    question: >
      Which of the following `access_control` configurations correctly restricts access to the route named `admin` for users with `ROLE_ADMIN`?
    answers:
      -
        value: >
          `- { route_name: 'admin', roles: ROLE_ADMIN }`
        correct: false
      -
        value: >
          `- { route: 'admin', roles: ROLE_ADMIN }`
        correct: true
      -
        value: >
          `- { path: '@admin', roles: ROLE_ADMIN }`
        correct: false
      -
        value: >
          `- { _route: 'admin', roles: ROLE_ADMIN }`
        correct: false
    help: |
      The `route` option in `access_control` allows you to specify a route name for access restriction.
      https://symfony.com/doc/current/security/access_control.html#matching-by-route

  -
    question: >
      Which of the following options defines the security protection of the URLs of your application, used to trigger user authentication and manage access permissions?
    answers:
      -
        value: >
          `firewalls`
        correct: false
      -
        value: >
          `providers`
        correct: false
      -
        value: >
          `access_control`
        correct: true
      -
        value: >
          `authenticators`
        correct: false
    help: |
      The `access_control` section is specifically designed for defining URL-based security rules, including authentication triggers and authorization.
      https://symfony.com/doc/current/reference/configuration/security.rst#access-control

  -
    question: >
      What is considered "the most important option of the security config file, defining security firewalls"?
    answers:
      -
        value: >
          `providers`
        correct: false
      -
        value: >
          `access_control`
        correct: false
      -
        value: >
          `firewalls`
        correct: true
      -
        value: >
          `password_hashers`
        correct: false
    help: |
      The `firewalls` option is central to Symfony's security configuration, as it defines the security boundaries and authentication mechanisms for different parts of the application.
      https://symfony.com/doc/current/reference/configuration/security.rst#firewalls

  -
    question: |
      You need to configure a password hasher for `App\Entity\User` with a `cost` of `15` for the `auto` algorithm. Which of the following PHP configurations is correct?
    answers:
      -
        value: |
          ```php
          $security->passwordHasher(User::class)
              ->algorithm('auto')
              ->cost(15);
          ```
        correct: true
      -
        value: |
          ```php
          $security->passwordHasher(User::class, 'auto')
              ->cost(15);
          ```
        correct: false
      -
        value: |
          ```php
          $security->passwordHasher('App\Entity\User')
              ->algorithm('auto')
              ->options(['cost' => 15]);
          ```
        correct: false
      -
        value: |
          ```php
          $security->passwordHasher(User::class)
              ->setAlgorithm('auto')
              ->setCost(15);
          ```
        correct: false
    help: |
      The `passwordHasher()` method allows chaining `algorithm()` and `cost()` to configure specific hashers.
      https://symfony.com/doc/current/security/passwords.html#configuring-password-hashers

  -
    question: >
      Which of the following is NOT a valid type of user provider that can be configured in Symfony's `security.yaml`?
    answers:
      -
        value: >
          `entity`
        correct: false
      -
        value: >
          `ldap`
        correct: false
      -
        value: >
          `database`
        correct: true
      -
        value: >
          `memory`
        correct: false
      -
        value: >
          `chain`
        correct: false
    help: |
      Symfony supports `entity`, `ldap`, `memory`, and `chain` user providers. There is no direct `database` type; `entity` is used for database integration.
      https://symfony.com/doc/current/security/user_providers.html

  -
    question: >
      What is the purpose of a "chain" user provider in Symfony security?
    answers:
      -
        value: >
          To encrypt user data across multiple providers.
        correct: false
      -
        value: >
          To allow a single user to be authenticated by multiple firewalls simultaneously.
        correct: false
      -
        value: >
          To combine multiple user providers, allowing Symfony to search for a user across all configured providers in a defined order.
        correct: true
      -
        value: >
          To provide a fallback mechanism if the primary user provider fails.
        correct: false
    help: |
      A chain provider allows you to aggregate multiple user providers, enabling Symfony to attempt to load a user from each in sequence until one succeeds.
      https://symfony.com/doc/current/security/user_providers.html#chain-user-provider

  -
    question: >
      When configuring a `form_login` authenticator, what is the default value for the `post_only` option, and what does it mean?
    answers:
      -
        value: >
          `true`; login form must be submitted as a POST request.
        correct: true
      -
        value: >
          `false`; login form can be submitted as either POST or GET.
        correct: false
      -
        value: >
          `true`; login form must be submitted as a GET request.
        correct: false
      -
        value: >
          `false`; login form must be submitted via AJAX.
        correct: false
    help: |
      By default, `post_only` is `true`, requiring login forms to be submitted via POST requests for security reasons.
      https://symfony.com/doc/current/reference/configuration/security.rst#login-and-redirection

  -
    question: >
      What is the purpose of the `use_forward` option in a form login configuration?
    answers:
      -
        value: >
          If `true`, it redirects the user to the login form instead of forwarding.
        correct: false
      -
        value: >
          If `true`, it forwards the user to the login form instead of redirecting, preserving the original request method and body.
        correct: true
      -
        value: >
          It enables forwarding of user credentials to an external authentication service.
        correct: false
      -
        value: >
          It allows the login form to be submitted via a forward proxy.
        correct: false
    help: |
      When `use_forward` is `true`, Symfony forwards the request to the login form, which can be useful for preserving request data.
      https://symfony.com/doc/current/reference/configuration/security.rst#login-and-redirection

  -
    question: >
      What is the default value for the `csrf_parameter` option in Symfony's logout configuration?
    answers:
      -
        value: >
          `_csrf`
        correct: false
      -
        value: >
          `_csrf_token`
        correct: true
      -
        value: >
          `csrf_token`
        correct: false
      -
        value: >
          `token`
        correct: false
    help: |
      The `csrf_parameter` option, which specifies the name of the parameter storing the CSRF token, defaults to `_csrf_token`.
      https://symfony.com/doc/current/reference/configuration/security.rst#csrf-parameter

  -
    question: >
      What is the default value for the `csrf_token_id` option in Symfony's logout configuration?
    answers:
      -
        value: >
          `logout`
        correct: true
      -
        value: >
          `_logout`
        correct: false
      -
        value: >
          `security_logout`
        correct: false
      -
        value: >
          `csrf_logout`
        correct: false
    help: |
      The `csrf_token_id` option, an arbitrary string used to identify the CSRF token, defaults to `logout`.
      https://symfony.com/doc/current/reference/configuration/security.rst#csrf-token-id

  -
    question: >
      Which of the following is the correct JSON structure for submitting username and password credentials to a `json_login` endpoint in Symfony?
    answers:
      -
        value: |
          ```json
          {
              "user": "username@example.com",
              "pass": "MyPassword"
          }
          ```
        correct: false
      -
        value: |
          ```json
          {
              "username": "username@example.com",
              "password": "MyPassword"
          }
          ```
        correct: true
      -
        value: |
          ```json
          {
              "email": "username@example.com",
              "secret": "MyPassword"
          }
          ```
        correct: false
      -
        value: |
          ```json
          {
              "login": "username@example.com",
              "credential": "MyPassword"
          }
          ```
        correct: false
    help: |
      The `json_login` authenticator expects the username and password to be provided under the keys `username` and `password` respectively in the JSON request body.
      https://symfony.com/doc/current/security.html#json-login

  -
    question: >
      What is the primary purpose of the `AuthenticationSuccessHandlerInterface` in Symfony security?
    answers:
      -
        value: >
          To handle the response when authentication fails.
        correct: false
      -
        value: >
          To customize the behavior after a user successfully authenticates, such as setting cookies or redirecting.
        correct: true
      -
        value: >
          To log successful authentication attempts.
        correct: false
      -
        value: >
          To encrypt user credentials after successful authentication.
        correct: false
    help: |
      `AuthenticationSuccessHandlerInterface` allows developers to define custom logic that executes upon successful user authentication.
      https://symfony.com/doc/current/security.html#authentication-api-references

  -
    question: >
      What is the primary purpose of the `AuthenticationFailureHandlerInterface` in Symfony security?
    answers:
      -
        value: >
          To log failed authentication attempts.
        correct: false
      -
        value: >
          To customize the behavior after an authentication attempt fails, such as displaying an error message or redirecting to a specific page.
        correct: true
      -
        value: >
          To prevent brute-force attacks by blocking failed logins.
        correct: false
      -
        value: >
          To provide a default error message for all authentication failures.
        correct: false
    help: |
      `AuthenticationFailureHandlerInterface` provides a mechanism to customize the response or actions taken when a user fails to authenticate.
      https://symfony.com/doc/current/security.html#authentication-api-references

  -
    question: >
      Which method of the `Symfony\Bundle\SecurityBundle\Security` helper class allows you to programmatically log in a user on a specific firewall?
    answers:
      -
        value: >
          `authenticate(user: UserInterface, firewall_name: string): Response|null`
        correct: false
      -
        value: >
          `login(user: UserInterface, authenticator_name: string = null, firewall_name: string = null, badges: array = [], attributes: array = []): Response|null`
        correct: true
      -
        value: >
          `signIn(user: UserInterface, firewall: string): Response|null`
        correct: false
      -
        value: >
          `forceLogin(user: UserInterface, firewall_name: string): Response|null`
        correct: false
    help: |
      The `login()` method of the `Security` helper class provides a programmatic way to authenticate a user.
      https://symfony.com/doc/current/security.html#authentication-api-references

  -
    question: >
      When using the `login()` method of the `Security` helper, which parameter allows you to apply additional `Passport` badges?
    answers:
      -
        value: >
          `options`
        correct: false
      -
        value: >
          `data`
        correct: false
      -
        value: >
          `badges`
        correct: true
      -
        value: >
          `attributes`
        correct: false
    help: |
      The `badges` parameter in the `login()` method allows you to pass an array of `Passport` badges.
      https://symfony.com/doc/current/security.html#authentication-api-references

  -
    question: >
      What is the purpose of `Passport` attributes when using the `login()` method of the `Security` helper (Symfony 7.2+)?
    answers:
      -
        value: >
          To define the user's roles.
        correct: false
      -
        value: >
          To store additional, arbitrary data on the `Passport` object.
        correct: true
      -
        value: >
          To specify the authentication method.
        correct: false
      -
        value: >
          To configure the redirection path after login.
        correct: false
    help: |
      The `attributes` parameter in the `login()` method (available since Symfony 7.2) allows for storing arbitrary data on the `Passport`.
      https://symfony.com/doc/current/security.html#authentication-api-references

  -
    question: >
      Which of the following `access_control` configurations correctly matches requests based on HTTP methods POST and PUT?
    answers:
      -
        value: >
          `- { path: '^/api', roles: ROLE_USER, method: [POST, PUT] }`
        correct: false
      -
        value: >
          `- { path: '^/api', roles: ROLE_USER, methods: [POST, PUT] }`
        correct: true
      -
        value: >
          `- { path: '^/api', roles: ROLE_USER, http_method: [POST, PUT] }`
        correct: false
      -
        value: >
          `- { path: '^/api', roles: ROLE_USER, request_methods: [POST, PUT] }`
        correct: false
    help: |
      The `methods` option in `access_control` allows you to specify an array of HTTP methods for matching.
      https://symfony.com/doc/current/security/access_control.html#matching-by-http-method

  -
    question: >
      You need to use a custom request matcher service named `App\Security\RequestMatcher\MyRequestMatcher` for an `access_control` rule. How would you configure this?
    answers:
      -
        value: >
          `- { roles: ROLE_USER, matcher_service: App\\Security\\RequestMatcher\\MyRequestMatcher }`
        correct: false
      -
        value: >
          `- { roles: ROLE_USER, request_matcher: App\\Security\\RequestMatcher\\MyRequestMatcher }`
        correct: true
      -
        value: >
          `- { roles: ROLE_USER, service: App\\Security\\RequestMatcher\\MyRequestMatcher }`
        correct: false
      -
        value: >
          `- { roles: ROLE_USER, custom_matcher: App\\Security\\RequestMatcher\\MyRequestMatcher }`
        correct: false
    help: |
      The `request_matcher` option in `access_control` allows you to specify a service that implements `RequestMatcherInterface` for custom matching logic.
      https://symfony.com/doc/current/security/access_control.html#matching-by-custom-request-matcher

  -
    question: >
      In Symfony's security expression language, what does the `object` variable typically represent?
    answers:
      -
        value: >
          The currently authenticated user object.
        correct: false
      -
        value: >
          The object (if any) that's passed as the second argument to `isGranted()`.
        correct: true
      -
        value: >
          The current `Request` object.
        correct: false
      -
        value: >
          A generic PHP `stdClass` object.
        correct: false
    help: |
      The `object` variable in security expressions refers to the subject passed to `isGranted()`, which is often the entity or resource being accessed.
      https://symfony.com/doc/current/security/expressions.html#variables

  -
    question: >
      In Symfony's security expression language, what is the relationship between the `object` and `subject` variables?
    answers:
      -
        value: >
          `object` is for entities, `subject` is for services.
        correct: false
      -
        value: >
          `object` is the target of the action, `subject` is the actor.
        correct: false
      -
        value: >
          They store the same value and are equivalent.
        correct: true
      -
        value: >
          `subject` is a deprecated alias for `object`.
        correct: false
    help: |
      The `object` and `subject` variables in security expressions are aliases and hold the same value, representing the object on which permission is being checked.
      https://symfony.com/doc/current/security/expressions.html#variables

  -
    question: >
      What does the `token` variable represent in Symfony's security expression language?
    answers:
      -
        value: >
          The CSRF token for the current request.
        correct: false
      -
        value: >
          The authentication token object for the current user.
        correct: true
      -
        value: >
          A JWT token if one is present in the request.
        correct: false
      -
        value: >
          A unique session identifier.
        correct: false
    help: |
      The `token` variable provides access to the `TokenInterface` object representing the current authentication token.
      https://symfony.com/doc/current/security/expressions.html#variables

  -
    question: >
      Which of the following describes the `role_names` variable in Symfony's security expression language?
    answers:
      -
        value: >
          A comma-separated string of the user's roles.
        correct: false
      -
        value: >
          An array with the string representation of the roles the user has, including roles granted indirectly via role hierarchy but excluding `IS_AUTHENTICATED_*` attributes.
        correct: true
      -
        value: >
          An array of all roles defined in the application, regardless of the user.
        correct: false
      -
        value: >
          The raw roles retrieved directly from the user provider.
        correct: false
    help: |
      The `role_names` variable provides a convenient array of the user's effective roles, excluding the `IS_AUTHENTICATED_*` attributes.
      https://symfony.com/doc/current/security/expressions.html#variables

  -
    question: >
      What is the purpose of the `AuthenticationTokenCreatedEvent` in Symfony security?
    answers:
      -
        value: >
          Dispatched before the authenticator creates the security passport.
        correct: false
      -
        value: >
          Dispatched after the passport was validated and the authenticator created the security token (and user), allowing modification of the created token.
        correct: true
      -
        value: >
          Dispatched when a new user is registered and their initial token is generated.
        correct: false
      -
        value: >
          Dispatched when a token is refreshed.
        correct: false
    help: |
      `AuthenticationTokenCreatedEvent` is a point for advanced use-cases where you might need to modify the authentication token itself.
      https://symfony.com/doc/current/security.html#security-events

  -
    question: >
      Which of the following describes the `AuthenticationSuccessEvent` in Symfony security?
    answers:
      -
        value: >
          Dispatched after authentication was fully successful and the response is sent.
        correct: false
      -
        value: >
          Dispatched when authentication is nearing success. This is the last event that can make an authentication fail by throwing an `AuthenticationException`.
        correct: true
      -
        value: >
          Dispatched when a user logs in for the first time.
        correct: false
      -
        value: >
          Dispatched when a user's credentials are valid.
        correct: false
    help: |
      `AuthenticationSuccessEvent` is a critical point in the authentication flow where a final check can be made before success is confirmed.
      https://symfony.com/doc/current/security.html#security-events

  -
    question: >
      What is the default value for the `failure_path` option in Symfony's form login configuration?
    answers:
      -
        value: >
          `/error`
        correct: false
      -
        value: >
          `/login`
        correct: true
      -
        value: >
          `/`
        correct: false
      -
        value: >
          `null`
        correct: false
    help: |
      The `failure_path` option, which defines the redirection target after a failed login, defaults to `/login`.
      https://symfony.com/doc/current/reference/configuration/security.rst#login-and-redirection

  -
    question: >
      What is the purpose of the `target_path_parameter` option in Symfony's form login configuration?
    answers:
      -
        value: >
          The name of the parameter used to store the CSRF token.
        correct: false
      -
        value: >
          The name of the HTML element used to set the target path in a login form, allowing redirection to a specific URL after successful login.
        correct: true
      -
        value: >
          The name of the parameter that stores the user's original request URL.
        correct: false
      -
        value: >
          The name of the parameter for the login form's action URL.
        correct: false
    help: |
      `target_path_parameter` allows you to specify the name of the form field that carries the intended post-login redirection URL.
      https://symfony.com/doc/current/reference/configuration/security.rst#login-and-redirection

  -
    question: >
      What is the purpose of the `use_referer` option in Symfony's form login configuration?
    answers:
      -
        value: >
          If `true`, it redirects the user to the `HTTP_REFERER` header value if no previous URL is in the session, avoiding redirection loops if the referrer is the login path.
        correct: true
      -
        value: >
          If `true`, it forces the login form to be submitted with a `Referer` header.
        correct: false
      -
        value: >
          It enables tracking of the user's previous pages for analytics.
        correct: false
      -
        value: >
          It uses the `Referer` header as the default target path.
        correct: false
    help: |
      The `use_referer` option controls whether Symfony attempts to redirect the user back to their original page based on the `HTTP_REFERER` header.
      https://symfony.com/doc/current/reference/configuration/security.rst#login-and-redirection

  -
    question: >
      Which of the following is a valid policy for Symfony's rate limiter component, commonly used for login throttling?
    answers:
      -
        value: >
          `fixed_window`
        correct: false
      -
        value: >
          `token_bucket`
        correct: true
      -
        value: >
          `leaky_bucket`
        correct: false
      -
        value: >
          `sliding_window`
        correct: true
    help: |
      Symfony's Rate Limiter component supports `token_bucket` and `sliding_window` policies for rate limiting.
      https://symfony.com/doc/current/security.html#login-throttling

  -
    question: >
      When defining a custom password hasher for a specific user class (e.g., `App\Entity\User`), what is the purpose of the `cost` option?
    answers:
      -
        value: >
          It defines the memory usage for hashing.
        correct: false
      -
        value: >
          It specifies the number of iterations or the computational difficulty of the hashing algorithm, impacting its security and performance.
        correct: true
      -
        value: >
          It sets the maximum length of the hashed password.
        correct: false
      -
        value: >
          It determines the salt length.
        correct: false
    help: |
      The `cost` option (e.g., for bcrypt) or `time_cost`/`memory_cost` (for Argon2) controls the computational effort required to hash a password, directly affecting its resistance to brute-force attacks.
      https://symfony.com/doc/current/security/passwords.html#configuring-password-hashers

  -
    question: >
      What is the primary role of `Symfony\Component\Security\Core\User\PasswordUpgraderInterface`?
    answers:
      -
        value: >
          To hash a plaintext password.
        correct: false
      -
        value: >
          To check if a password needs re-hashing.
        correct: false
      -
        value: >
          To provide a mechanism for upgrading a user's password hash when a stronger algorithm or higher cost is adopted.
        correct: true
      -
        value: >
          To retrieve a user's password from the database.
        correct: false
    help: |
      `PasswordUpgraderInterface` is used to upgrade outdated password hashes to current, more secure configurations during the login process.
      https://symfony.com/doc/current/security/passwords.html#password-related-interfaces

  -
    question: >
      Which of the following `access_control` configurations correctly matches requests based on a specific hostname, using a regular expression?
    answers:
      -
        value: >
          `- { path: '^/', roles: PUBLIC_ACCESS, domain: 'example\\.com$' }`
        correct: false
      -
        value: >
          `- { path: '^/', roles: PUBLIC_ACCESS, host: 'symfony\\.com$' }`
        correct: true
      -
        value: >
          `- { path: '^/', roles: PUBLIC_ACCESS, hostname: 'symfony.com' }`
        correct: false
      -
        value: >
          `- { path: '^/', roles: PUBLIC_ACCESS, server_name: 'symfony\\.com$' }`
        correct: false
    help: |
      The `host` option in `access_control` allows you to match requests based on their hostname using a regular expression.
      https://symfony.com/doc/current/security/access_control.html#matching-by-host