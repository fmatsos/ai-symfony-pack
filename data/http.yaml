category: HTTP

questions:
  -
    question: >
      Which Symfony component provides the core classes for handling HTTP requests and responses, such as `Request` and `Response`?
    answers:
      - { value: 'Symfony\\Component\\HttpFoundation', correct: true }
      - { value: 'Symfony\\Component\\HttpKernel', correct: false }
      - { value: 'Symfony\\Component\\Routing', correct: false }
      - { value: 'Symfony\\Component\\HttpClient', correct: false }
    help: |
      The HttpFoundation component defines an object-oriented layer for the HTTP specification.
      https://symfony.com/doc/current/components/http_foundation.html

  -
    question: |
      Given the following code, which method is used to retrieve a GET parameter from the `Request` object in Symfony, providing a default value if the parameter is not present?

      ```php
      use Symfony\Component\HttpFoundation\Request;

      $request = Request::createFromGlobals();
      $name = $request->query->get('name', 'World');
      ```
    answers:
      - { value: '`$request->query->get()`', correct: true }
      - { value: '`$request->get()`', correct: false }
      - { value: '`$request->attributes->get()`', correct: false }
      - { value: '`$_GET[]`', correct: false }
    help: |
      The `query` property of the `Request` object is an instance of `ParameterBag`, which provides the `get()` method to retrieve GET parameters with an optional default value.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#access-the-request

  -
    question: >
      What HTTP status code indicates that a request has succeeded and a new resource has been created as a result?
    answers:
      - { value: '200 OK', correct: false }
      - { value: '201 Created', correct: true }
      - { value: '204 No Content', correct: false }
      - { value: '302 Found', correct: false }
    help: |
      The 201 (Created) status code indicates that the request has succeeded and has led to the creation of a resource.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/201

  -
    question: |
      Which of the following HTTP methods are considered idempotent?
    answers:
      - { value: 'GET', correct: true }
      - { value: 'POST', correct: false }
      - { value: 'PUT', correct: true }
      - { value: 'DELETE', correct: true }
      - { value: 'PATCH', correct: false }
    help: |
      An idempotent HTTP method is one that can be called multiple times without different outcomes. GET, PUT, and DELETE are idempotent. POST is not.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#http-methods

  -
    question: >
      Which `Response` method should you call to explicitly mark a response as stale, forcing caches to revalidate it with the origin server?
    answers:
      - { value: '`setPrivate()`', correct: false }
      - { value: '`expire()`', correct: true }
      - { value: '`setMaxAge(0)`', correct: false }
      - { value: '`setNoCache()`', correct: false }
    help: |
      The `expire()` method can be used to explicitly mark a response as stale.
      https://symfony.com/doc/current/http_cache.html#marking-a-response-as-stale

  -
    question: |
      How would you retrieve the raw content of an HTTP request body (e.g., for an XML or JSON payload) using the `Request` object?
    answers:
      - { value: '`$request->getContent()`', correct: true }
      - { value: '`$request->getPayload()->all()`', correct: false }
      - { value: '`$request->request->all()`', correct: false }
      - { value: '`$request->getBody()`', correct: false }
    help: |
      The `getContent()` method returns the raw body of the request.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: >
      What is the purpose of the `Vary` HTTP header in the context of caching?
    answers:
      - { value: 'To specify the maximum age a cached response can be considered fresh.', correct: false }
      - { value: 'To indicate that a cached response should not be stored by any cache.', correct: false }
      - { value: 'To inform caches that the response content varies based on specified request headers.', correct: true }
      - { value: 'To set the expiration date for the cached response.', correct: false }
    help: |
      The `Vary` header tells caches that the response content depends on the value of specified request headers.
      https://symfony.com/doc/current/http_cache/cache_vary.html

  -
    question: |
      Which of the following are valid ways to instantiate a Symfony HTTP client for making requests?
    answers:
      - { value: '`HttpClient::create()`', correct: true }
      - { value: '`new NativeHttpClient()`', correct: true }
      - { value: '`new CurlHttpClient()`', correct: true }
      - { value: '`new HttpClient()`', correct: false }
    help: |
      The `HttpClient::create()` factory method is the recommended way, but specific transports like `NativeHttpClient` and `CurlHttpClient` can be instantiated directly.
      https://symfony.com/doc/current/http_client.html#creating-an-http-client

  -
    question: |
      When using `HttpClientInterface::request()`, how can you specify HTTP Basic authentication credentials for a specific request?
    answers:
      - { value: 'Using the `auth_basic` option in the request options array.', correct: true }
      - { value: 'Setting an `Authorization` header manually.', correct: false }
      - { value: 'Using the `setAuthBasic()` method on the client.', correct: false }
      - { value: 'It can only be configured globally.', correct: false }
    help: |
      The `auth_basic` option can be used to set HTTP Basic authentication credentials for a specific request.
      https://symfony.com/doc/current/http_client.html#authentication

  -
    question: >
      Which HTTP status code is returned by Symfony's `Response::isNotModified()` method if the client's request matches the response's ETag or Last-Modified validators?
    answers:
      - { value: '200 OK', correct: false }
      - { value: '304 Not Modified', correct: true }
      - { value: '404 Not Found', correct: false }
      - { value: '412 Precondition Failed', correct: false }
    help: |
      The `isNotModified()` method checks if the response validators match the request's conditional values and, if so, sets the status to 304 Not Modified.
      https://symfony.com/doc/current/components/http_foundation.html#http-cache-headers

  -
    question: |
      To handle multiple HTTP requests concurrently with Symfony's HTTP Client, which method should you use to iterate over responses as they become available?
    answers:
      - { value: '`$client->stream($responses)`', correct: true }
      - { value: '`$client->wait($responses)`', correct: false }
      - { value: '`$client->all($responses)`', correct: false }
      - { value: '`$client->concurrent($responses)`', correct: false }
    help: |
      The `stream()` method allows you to monitor a list of responses and process them as chunks arrive, enabling concurrent processing.
      https://symfony.com/doc/current/http_client.html#concurrent-requests

  -
    question: >
      What is the primary benefit of using `HttpClientInterface` for making HTTP requests in a Symfony application?
    answers:
      - { value: 'It automatically handles all network errors without requiring explicit error handling.', correct: false }
      - { value: 'It provides a standardized, testable abstraction for HTTP communication, allowing easy swapping of underlying HTTP clients.', correct: true }
      - { value: 'It is the only way to make HTTP requests in Symfony.', correct: false }
      - { value: 'It directly integrates with Doctrine ORM for data persistence.', correct: false }
    help: |
      `HttpClientInterface` provides a common interface for HTTP clients, promoting decoupling and testability.
      https://symfony.com/doc/current/http_client.html#usage

  -
    question: |
      Which of the following options can be used to define the request body when making a POST request with Symfony's HTTP Client?
    answers:
      - { value: 'A string of raw data.', correct: true }
      - { value: 'An array of key-value parameters.', correct: true }
      - { value: 'A PHP closure that generates data.', correct: true }
      - { value: 'A PHP resource (e.g., a file handle).', correct: true }
      - { value: 'A `SplFileObject` instance directly.', correct: false }
    help: |
      The `body` option in `HttpClientInterface::request()` supports various types for defining the request body, including strings, arrays, closures, and resources.
      https://symfony.com/doc/current/http_client.html#uploading-data

  -
    question: >
      Which HTTP status code indicates that the requested resource could not be found on the server?
    answers:
      - { value: '200 OK', correct: false }
      - { value: '301 Moved Permanently', correct: false }
      - { value: '404 Not Found', correct: true }
      - { value: '500 Internal Server Error', correct: false }
    help: |
      The 404 (Not Found) status code indicates that the origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404

  -
    question: |
      How can you set a cookie on a Symfony `Response` object?
    answers:
      - { value: '`$response->headers->setCookie(new Cookie(...))`', correct: true }
      - { value: '`$response->setCookie(...)`', correct: false }
      - { value: '`$response->cookies->add(...)`', correct: false }
      - { value: '`setcookie()` PHP function directly.', correct: false }
    help: |
      Cookies are managed via the `ResponseHeaderBag` which is accessed through `$response->headers`. The `setCookie()` method is used to add a `Cookie` object.
      https://symfony.com/doc/current/components/http_foundation.html#setting-cookies

  -
    question: |
      What is the purpose of the `#[Cache]` attribute in a Symfony controller?
    answers:
      - { value: 'To define a route that should be cached by the Symfony router.', correct: false }
      - { value: 'To configure HTTP caching headers for the response generated by the controller action.', correct: true }
      - { value: 'To enable internal caching of service definitions within the controller.', correct: false }
      - { value: 'To mark the controller as cacheable by the PHP opcode cache.', correct: false }
    help: |
      The `#[Cache]` attribute allows you to configure HTTP caching headers (like `Cache-Control`) directly on a controller method.
      https://symfony.com/doc/current/http_cache/expiration.html#the-cache-attribute

  -
    question: |
      Which of the following `Request` methods can be used to determine the client's preferred languages for content negotiation?
    answers:
      - { value: '`getLanguages()`', correct: true }
      - { value: '`getPreferredLanguage()`', correct: false }
      - { value: '`getAcceptLanguage()`', correct: false }
      - { value: '`getLocales()`', correct: false }
    help: |
      The `getLanguages()` method returns an ordered list of languages accepted by the client, based on the `Accept-Language` header.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: |
      When testing a service that uses `HttpClientInterface`, which class is commonly used to provide predefined or dynamically generated responses?
    answers:
      - { value: '`MockHttpClient`', correct: true }
      - { value: '`TestHttpClient`', correct: false }
      - { value: '`FakeHttpClient`', correct: false }
      - { value: '`SimulatedHttpClient`', correct: false }
    help: |
      `MockHttpClient` is an implementation of `HttpClientInterface` specifically designed for testing, allowing you to control the responses.
      https://symfony.com/doc/current/http_client.html#testing

  -
    question: |
      Consider the following code snippet. What is the expected HTTP status code of the `$response` object after this code executes successfully?

      ```php
      use Symfony\Contracts\HttpClient\HttpClientInterface;

      class MyService
      {
          public function __construct(private HttpClientInterface $client) {}

          public function fetchData(): array
          {
              $response = $this->client->request('GET', 'https://api.github.com/repos/symfony/symfony-docs');
              return $response->toArray();
          }
      }
      ```
    answers:
      - { value: '200', correct: true }
      - { value: '201', correct: false }
      - { value: '404', correct: false }
      - { value: '500', correct: false }
    help: |
      A successful GET request to an API typically returns a 200 OK status code. The `toArray()` method implies a successful JSON response.
      https://symfony.com/doc/current/http_client.html#getting-the-response-content

  -
    question: >
      Which HTTP method is typically used to retrieve data from a server without causing any side effects?
    answers:
      - { value: 'POST', correct: false }
      - { value: 'PUT', correct: false }
      - { value: 'GET', correct: true }
      - { value: 'DELETE', correct: false }
    help: |
      The GET method is used to request data from a specified resource. It should only retrieve data and have no other effect on the data.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#http-methods

  -
    question: |
      What is the primary role of the `HttpKernel` component in a Symfony application?
    answers:
      - { value: 'To manage database connections and ORM entities.', correct: false }
      - { value: 'To handle incoming HTTP requests and turn them into `Response` objects.', correct: true }
      - { value: 'To provide a templating engine for rendering views.', correct: false }
      - { value: 'To manage user authentication and authorization.', correct: false }
    help: |
      The HttpKernel component provides the core `HttpKernel` class, which is responsible for handling a `Request` and returning a `Response`.
      https://symfony.com/doc/current/components/http_kernel.html

  -
    question: |
      Which of the following are valid ways to configure default HTTP headers for all requests made by the Symfony HTTP Client in a framework application?
    answers:
      - { value: 'In `config/packages/framework.yaml` under `http_client.default_options.headers`.', correct: true }
      - { value: 'Directly in the `HttpClient::create()` method for a standalone client.', correct: true }
      - { value: 'Using a global `HttpClientListener` service.', correct: false }
      - { value: 'By modifying the `$_SERVER` superglobal before each request.', correct: false }
    help: |
      Default headers can be configured in `framework.yaml` or directly when creating a standalone client instance.
      https://symfony.com/doc/current/http_client.html#configuring-the-http-client

  -
    question: >
      What does the `Cache-Control: public` directive signify in an HTTP response?
    answers:
      - { value: 'The response can only be cached by the client''s browser.', correct: false }
      - { value: 'The response can be cached by any cache, including shared proxy caches.', correct: true }
      - { value: 'The response must not be cached at all.', correct: false }
      - { value: 'The response is specific to a single user and should not be shared.', correct: false }
    help: |
      The `public` directive indicates that the response may be cached by any cache, even if it contains authentication information.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#public

  -
    question: |
      Which class should you use to create a programmatic HTTP request for testing purposes without relying on global variables?
    answers:
      - { value: '`Symfony\\Component\\HttpFoundation\\Request::create()`', correct: true }
      - { value: '`Symfony\\Component\\HttpFoundation\\Request::createFromGlobals()`', correct: false }
      - { value: '`new Request()`', correct: false }
      - { value: '`$_SERVER` and `$_GET` directly.', correct: false }
    help: |
      `Request::create()` allows you to construct a `Request` object programmatically, simulating an HTTP request.
      https://symfony.com/doc/current/components/http_foundation.html#creating-a-request

  -
    question: >
      What is the primary purpose of the `Content-Type` HTTP header in a response?
    answers:
      - { value: 'To specify the character encoding of the response body.', correct: false }
      - { value: 'To indicate the type of content being sent in the response body (e.g., `text/html`, `application/json`).', correct: true }
      - { value: 'To define the length of the response body in bytes.', correct: false }
      - { value: 'To suggest a filename for the downloaded content.', correct: false }
    help: |
      The `Content-Type` entity header is used to indicate the original media type of the resource (prior to any content encoding applied for sending).
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type

  -
    question: |
      Which Symfony HTTP Client option allows you to automatically URL-encode and append parameters to the request URL?
    answers:
      - { value: '`query`', correct: true }
      - { value: '`params`', correct: false }
      - { value: '`get`', correct: false }
      - { value: '`url_params`', correct: false }
    help: |
      The `query` option is used to add query string parameters to the request URL, and they are automatically URL-encoded.
      https://symfony.com/doc/current/http_client.html#query-string-parameters

  -
    question: >
      What is the significance of an HTTP 304 Not Modified status code?
    answers:
      - { value: 'The requested resource has been permanently moved to a new URL.', correct: false }
      - { value: 'The server successfully processed the request, but there is no content to return.', correct: false }
      - { value: 'The client''s cached copy of the resource is still valid, and there is no need to re-transmit it.', correct: true }
      - { value: 'The request could not be understood by the server due to malformed syntax.', correct: false }
    help: |
      The 304 (Not Modified) status code indicates that the resource has not been modified since the version specified by the request headers (If-Modified-Since or If-None-Match).
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/304

  -
    question: |
      How can you retrieve the HTTP method (e.g., GET, POST) of the current request using the Symfony `Request` object?
    answers:
      - { value: '`$request->getMethod()`', correct: true }
      - { value: '`$request->getHttpMethod()`', correct: false }
      - { value: '`$_SERVER['REQUEST_METHOD']`', correct: false }
      - { value: '`$request->method()`', correct: false }
    help: |
      The `getMethod()` method returns the HTTP method of the request.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#access-the-request

  -
    question: |
      Which of the following `Response` methods are used to control the `Cache-Control` header directives for caching?
    answers:
      - { value: '`setMaxAge()`', correct: true }
      - { value: '`setPublic()`', correct: true }
      - { value: '`setPrivate()`', correct: true }
      - { value: '`setExpires()`', correct: false }
      - { value: '`setCache()`', correct: true }
    help: |
      Methods like `setMaxAge()`, `setPublic()`, `setPrivate()`, and `setCache()` directly influence the `Cache-Control` header. `setExpires()` sets the `Expires` header.
      https://symfony.com/doc/current/components/http_foundation.html#http-cache-headers

  -
    question: >
      What is the purpose of the `ETag` HTTP header in caching?
    answers:
      - { value: 'To specify the date and time after which the response is considered stale.', correct: false }
      - { value: 'To provide a unique identifier for a specific version of a resource, used for conditional requests.', correct: true }
      - { value: 'To indicate that the response should not be cached.', correct: false }
      - { value: 'To define the content encoding of the response.', correct: false }
    help: |
      The `ETag` (entity tag) HTTP response header is a validator that uniquely identifies a specific version of a resource. It's used for conditional requests to prevent conflicting updates.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag

  -
    question: |
      When configuring `HttpClientInterface` in a Symfony application, which option allows you to set a base URI for all requests made by that client instance?
    answers:
      - { value: '`base_uri`', correct: true }
      - { value: '`default_uri`', correct: false }
      - { value: '`root_url`', correct: false }
      - { value: '`prefix_url`', correct: false }
    help: |
      The `base_uri` option can be set globally for an HTTP client instance, allowing relative URLs in requests.
      https://symfony.com/doc/current/http_client.html#base-uri

  -
    question: |
      Which of the following correctly describes the behavior of `HttpClient::create()` regarding the underlying HTTP transport?
    answers:
      - { value: 'It always uses `CurlHttpClient` if the cURL extension is available.', correct: true }
      - { value: 'It always uses `NativeHttpClient` for maximum compatibility.', correct: false }
      - { value: 'It prioritizes `AmpHttpClient` over `CurlHttpClient` if both are available.', correct: false }
      - { value: 'It randomly selects one of the available transports.', correct: false }
    help: |
      `HttpClient::create()` prioritizes `CurlHttpClient` if the cURL extension is enabled, then falls back to `AmpHttpClient`, and finally to `NativeHttpClient`.
      https://symfony.com/doc/current/http_client.html#creating-an-http-client

  -
    question: >
      What is the purpose of the `StreamedResponse` class in Symfony?
    answers:
      - { value: 'To send large files by loading them entirely into memory before sending.', correct: false }
      - { value: 'To allow streaming the HTTP response content back to the client incrementally, reducing memory usage for large responses.', correct: true }
      - { value: 'To redirect the client to a different URL with a specific status code.', correct: false }
      - { value: 'To send a response with no content body.', correct: false }
    help: |
      `StreamedResponse` allows you to stream the HTTP Response back to the client, which is useful for large files or long-running processes.
      https://symfony.com/doc/current/components/http_foundation.html#streaming-a-response

  -
    question: |
      When using `MockHttpClient` for testing, which method allows you to inspect the HTTP method that was used in the simulated request?
    answers:
      - { value: '`getRequestMethod()`', correct: true }
      - { value: '`getMethod()`', correct: false }
      - { value: '`getSimulatedMethod()`', correct: false }
      - { value: '`getHttpRequestMethod()`', correct: false }
    help: |
      The `MockResponse` class provides helper methods like `getRequestMethod()` to inspect the simulated request details.
      https://symfony.com/doc/current/http_client.html#mockresponse-request-inspection-methods

  -
    question: >
      Which HTTP status code indicates a successful response with no content to return? This is often used for DELETE requests.
    answers:
      - { value: '200 OK', correct: false }
      - { value: '201 Created', correct: false }
      - { value: '204 No Content', correct: true }
      - { value: '400 Bad Request', correct: false }
    help: |
      The 204 (No Content) status code indicates that the server successfully fulfilled the request and that there is no additional content to send in the response payload body.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/204

  -
    question: |
      How can you configure HTTP/2 for HTTP URLs when using Symfony's HTTP Client?
    answers:
      - { value: 'Set the `http_version` option to `'2.0'` in the client configuration.', correct: true }
      - { value: 'It is automatically enabled for all requests.', correct: false }
      - { value: 'Only possible with `CurlHttpClient` by default.', correct: false }
      - { value: 'By installing a specific HTTP/2 PHP extension.', correct: false }
    help: |
      The `http_version` option can be set to `'2.0'` in the client configuration to force HTTP/2 for HTTP URLs.
      https://symfony.com/doc/current/http_client.html#http-2

  -
    question: |
      Which of the following `Request` properties allows you to access POST parameters?
    answers:
      - { value: '`$request->request`', correct: true }
      - { value: '`$request->query`', correct: false }
      - { value: '`$request->post`', correct: false }
      - { value: '`$request->getPayload()`', correct: true }
    help: |
      POST parameters are accessed via the `request` property (which is a `ParameterBag`) or `getPayload()` (for raw body content).
      https://symfony.com/doc/current/introduction/http_fundamentals.html#access-the-request

  -
    question: >
      What is the purpose of the `Last-Modified` HTTP header in caching?
    answers:
      - { value: 'To indicate the date and time the resource was last modified, used for conditional requests.', correct: true }
      - { value: 'To specify the date and time when the cached response should expire.', correct: false }
      - { value: 'To define the maximum age for a cached resource.', correct: false }
      - { value: 'To force revalidation of the resource on every request.', correct: false }
    help: |
      The `Last-Modified` HTTP header indicates the date and time at which the origin server believes the resource was last modified. It's used with `If-Modified-Since` for conditional requests.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Last-Modified

  -
    question: |
      How can you clear a specific cookie from a Symfony `Response` object?
    answers:
      - { value: '`$response->headers->clearCookie('cookie_name')`', correct: true }
      - { value: '`$response->removeCookie('cookie_name')`', correct: false }
      - { value: '`$response->cookies->delete('cookie_name')`', correct: false }
      - { value: 'By setting its expiration date to a past value with `setcookie()` directly.', correct: false }
    help: |
      The `clearCookie()` method on `ResponseHeaderBag` is used to remove a cookie.
      https://symfony.com/doc/current/components/http_foundation.html#setting-cookies

  -
    question: |
      Which of the following HTTP status codes indicate a client-side error?
    answers:
      - { value: '400 Bad Request', correct: true }
      - { value: '401 Unauthorized', correct: true }
      - { value: '403 Forbidden', correct: true }
      - { value: '500 Internal Server Error', correct: false }
      - { value: '503 Service Unavailable', correct: false }
    help: |
      4xx status codes indicate client errors, while 5xx status codes indicate server errors.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status

  -
    question: |
      When using `HttpClientInterface`, what is the purpose of the `toArray()` method on the `ResponseInterface`?
    answers:
      - { value: 'To convert the response headers into a PHP array.', correct: false }
      - { value: 'To parse the response body as JSON and return it as a PHP array.', correct: true }
      - { value: 'To convert the raw response content into a string.', correct: false }
      - { value: 'To get an array of all response information, including status and headers.', correct: false }
    help: |
      The `toArray()` method casts the response JSON content to a PHP array.
      https://symfony.com/doc/current/http_client.html#getting-the-response-content

  -
    question: >
      What is the default `SameSite` attribute value for cookies created by `Symfony\Component\HttpFoundation\Cookie`?
    answers:
      - { value: '`Cookie::SAMESITE_LAX`', correct: true }
      - { value: '`Cookie::SAMESITE_STRICT`', correct: false }
      - { value: '`Cookie::SAMESITE_NONE`', correct: false }
      - { value: 'No `SameSite` attribute is set by default.', correct: false }
    help: |
      By default, Symfony cookies use `SameSite=Lax`.
      https://symfony.com/doc/current/components/http_foundation.html#samesite-cookie-attribute

  -
    question: |
      Which method of `HttpClientInterface` allows you to retrieve transport-layer information about a request/response, such as the effective URL or redirect count?
    answers:
      - { value: '`getInfo()`', correct: true }
      - { value: '`getTransportInfo()`', correct: false }
      - { value: '`getDebugInfo()`', correct: false }
      - { value: '`getMetadata()`', correct: false }
    help: |
      The `getInfo()` method returns information coming from the transport layer.
      https://symfony.com/doc/current/http_client.html#getting-response-info

  -
    question: >
      What is the role of the `User-Agent` HTTP request header?
    answers:
      - { value: 'To specify the preferred language of the client.', correct: false }
      - { value: 'To indicate the type of content the client can accept.', correct: false }
      - { value: 'To identify the client software (e.g., browser, bot) making the request.', correct: true }
      - { value: 'To provide authentication credentials.', correct: false }
    help: |
      The `User-Agent` request header is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting user agent.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent

  -
    question: |
      How can you ensure that a Symfony `Response` object is sent to the client, including headers and content?
    answers:
      - { value: '`$response->send()`', correct: true }
      - { value: '`echo $response`', correct: false }
      - { value: '`$response->output()`', correct: false }
      - { value: '`$response->flush()`', correct: false }
    help: |
      The `send()` method is responsible for sending the HTTP headers and the content of the response to the client.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#sending-the-response

  -
    question: |
      Which HTTP status code is typically returned when a client tries to access a resource that requires authentication but has not provided valid credentials?
    answers:
      - { value: '400 Bad Request', correct: false }
      - { value: '401 Unauthorized', correct: true }
      - { value: '403 Forbidden', correct: false }
      - { value: '404 Not Found', correct: false }
    help: |
      The 401 (Unauthorized) status code indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/401

  -
    question: |
      When configuring a `ScopingHttpClient` in Symfony, what is the purpose of the regular expressions used as keys in the options array?
    answers:
      - { value: 'To define the URLs that the client is allowed to access.', correct: false }
      - { value: 'To match URLs for which specific client options (e.g., headers) should apply.', correct: true }
      - { value: 'To specify the order in which requests should be sent.', correct: false }
      - { value: 'To filter out sensitive information from the request URLs.', correct: false }
    help: |
      In `ScopingHttpClient`, the regular expressions as keys define which URLs the associated options apply to.
      https://symfony.com/doc/current/http_client.html#scoping-http-clients

  -
    question: >
      What is the main difference between `Cache-Control: max-age` and `Expires` headers for HTTP caching?
    answers:
      - { value: '`max-age` is an absolute date, while `Expires` is a relative time in seconds.', correct: false }
      - { value: '`max-age` is relative to the request time, while `Expires` is an absolute date/time.', correct: true }
      - { value: '`max-age` is for private caches only, `Expires` is for shared caches.', correct: false }
      - { value: '`Expires` is deprecated and should not be used.', correct: false }
    help: |
      `max-age` (Cache-Control) specifies the maximum amount of time a resource is considered fresh, relative to the time of the request. `Expires` provides an absolute expiration date. `max-age` takes precedence over `Expires`.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#max-age
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expires

  -
    question: |
      Which of the following methods on the `Request` object allows you to access uploaded files?
    answers:
      - { value: '`$request->files->get('attachment')`', correct: true }
      - { value: '`$request->getUploadedFile('attachment')`', correct: false }
      - { value: '`$_FILES['attachment']`', correct: false }
      - { value: '`$request->file('attachment')`', correct: false }
    help: |
      Uploaded files are accessed via the `files` property of the `Request` object, which is an instance of `FileBag`.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#access-the-request

  -
    question: >
      Which HTTP status code indicates that the server understands the request but refuses to authorize it, even with valid credentials?
    answers:
      - { value: '401 Unauthorized', correct: false }
      - { value: '403 Forbidden', correct: true }
      - { value: '404 Not Found', correct: false }
      - { value: '405 Method Not Allowed', correct: false }
    help: |
      The 403 (Forbidden) status code indicates that the server understood the request but refuses to authorize it. This is different from 401 (Unauthorized) in that re-authenticating will not make the request succeed.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403

  -
    question: |
      When using `HttpClientInterface`, how can you cancel an ongoing HTTP request?
    answers:
      - { value: 'Call `ResponseInterface::cancel()` on the response object.', correct: true }
      - { value: 'Throw an exception from an `on_progress` callback.', correct: true }
      - { value: 'Call `HttpClientInterface::abort()` with the response object.', correct: false }
      - { value: 'Close the PHP script immediately.', correct: false }
    help: |
      Requests can be cancelled by calling `cancel()` on the response or by throwing an exception from an `on_progress` callback.
      https://symfony.com/doc/current/http_client.html#cancelling-requests

  -
    question: |
      Which of the following `Response` methods allows you to set multiple cache-related headers in a single call using an associative array of options?
    answers:
      - { value: '`setCache(array $options)`', correct: true }
      - { value: '`configureCache(array $options)`', correct: false }
      - { value: '`addCacheHeaders(array $options)`', correct: false }
      - { value: '`setHttpCache(array $options)`', correct: false }
    help: |
      The `setCache()` method allows setting multiple cache-related headers at once.
      https://symfony.com/doc/current/components/http_foundation.html#http-cache-headers

  -
    question: |
      What is the purpose of the `Accept` HTTP request header?
    answers:
      - { value: 'To specify the character sets that are acceptable for the response.', correct: false }
      - { value: 'To indicate the preferred language for the response.', correct: false }
      - { value: 'To tell the server which content types (MIME types) the client can process.', correct: true }
      - { value: 'To inform the server about the client''s encoding preferences.', correct: false }
    help: |
      The `Accept` request HTTP header advertises which content types, expressed as MIME types, the client is able to understand.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept

  -
    question: |
      Which of the following are valid ways to configure HTTP Bearer authentication globally for a Symfony HTTP client?
    answers:
      - { value: 'Using `auth_bearer` option in `framework.yaml` under `http_client.scoped_clients`.', correct: true }
      - { value: 'Using `auth_bearer` option when creating a standalone client with `HttpClient::createForBaseUri()`.', correct: true }
      - { value: 'Setting a default `Authorization` header with `Bearer` token.', correct: false }
      - { value: 'Using the `setBearerToken()` method on the client.', correct: false }
    help: |
      Bearer authentication can be configured globally for scoped clients in framework configuration or when creating a standalone client.
      https://symfony.com/doc/current/http_client.html#authentication

  -
    question: |
      What is the primary use case for `UriTemplateHttpClient` in Symfony?
    answers:
      - { value: 'To send requests to multiple URIs concurrently.', correct: false }
      - { value: 'To automatically expand URI template variables into the request URL.', correct: true }
      - { value: 'To validate URI formats before sending requests.', correct: false }
      - { value: 'To generate random URIs for testing purposes.', correct: false }
    help: |
      `UriTemplateHttpClient` is used to expand URI template variables into the request URL, making it easier to construct URLs with dynamic parts.
      https://symfony.com/doc/current/http_client.html#uri-templates

  -
    question: |
      Which HTTP status code indicates that the request method is not supported for the requested resource?
    answers:
      - { value: '400 Bad Request', correct: false }
      - { value: '403 Forbidden', correct: false }
      - { value: '405 Method Not Allowed', correct: true }
      - { value: '501 Not Implemented', correct: false }
    help: |
      The 405 (Method Not Allowed) status code indicates that the request method is known by the server but is not supported by the target resource.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/405

  -
    question: |
      How can you access HTTP headers from a Symfony `Request` object?
    answers:
      - { value: '`$request->headers->get('Host')`', correct: true }
      - { value: '`$request->getHeaders()`', correct: false }
      - { value: '`$_SERVER['HTTP_HOST']`', correct: false }
      - { value: '`$request->header('Host')`', correct: false }
    help: |
      HTTP headers are accessed via the `headers` property of the `Request` object, which is an instance of `HeaderBag`.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#access-the-request

  -
    question: |
      What is the purpose of the `on_progress` callback option in Symfony's HTTP Client?
    answers:
      - { value: 'To log the progress of the request to a file.', correct: false }
      - { value: 'To update a progress bar in the user interface during a long request.', correct: true }
      - { value: 'To cancel the request if a certain condition is met during download.', correct: true }
      - { value: 'To modify the request options dynamically as the request progresses.', correct: false }
    help: |
      The `on_progress` callback is invoked periodically during the request and can be used to monitor progress or to cancel the request by throwing an exception.
      https://symfony.com/doc/current/http_client.html#cancelling-requests

  -
    question: |
      Which of the following `Response` methods is used to set the `Expires` HTTP header?
    answers:
      - { value: '`setExpires(\DateTimeInterface $expires)`', correct: true }
      - { value: '`setExpirationDate(\DateTimeInterface $date)`', correct: false }
      - { value: '`setExpiry(\DateTimeInterface $expiry)`', correct: false }
      - { value: '`setCacheExpires(\DateTimeInterface $expires)`', correct: false }
    help: |
      The `setExpires()` method sets the `Expires` HTTP header.
      https://symfony.com/doc/current/components/http_foundation.html#http-cache-headers

  -
    question: |
      When is it appropriate to use `HttpClientInterface::toStream()` on a response?
    answers:
      - { value: 'When the response body is expected to be very large and should be processed incrementally to avoid memory issues.', correct: true }
      - { value: 'When the response body is known to be a JSON object that needs to be converted to an array.', correct: false }
      - { value: 'When you only need the response headers and not the body content.', correct: false }
      - { value: 'When the response is a redirect and you need to follow it manually.', correct: false }
    help: |
      The `toStream()` method casts the response content to a PHP stream resource, which is ideal for handling large responses without loading them entirely into memory.
      https://symfony.com/doc/current/http_client.html#getting-the-response-content

  -
    question: >
      What is the primary function of the `HttpOptions` class when configuring Symfony's HTTP Client?
    answers:
      - { value: 'To define a set of default options that can be reused across multiple client instances.', correct: false }
      - { value: 'To provide a fluent interface for building and managing HTTP client request options.', correct: true }
      - { value: 'To validate the correctness of HTTP client options before sending a request.', correct: false }
      - { value: 'To store the response options received from the server.', correct: false }
    help: |
      The `HttpOptions` class provides a fluent API to build and manage HTTP client request options.
      https://symfony.com/doc/current/http_client.html#http-options

  -
    question: |
      Which HTTP status code indicates an internal server error that prevents the server from fulfilling the request?
    answers:
      - { value: '400 Bad Request', correct: false }
      - { value: '404 Not Found', correct: false }
      - { value: '500 Internal Server Error', correct: true }
      - { value: '503 Service Unavailable', correct: false }
    help: |
      The 500 (Internal Server Error) status code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500

  -
    question: |
      What is the purpose of the `HttpClientInterface::toArray(true)` method call?
    answers:
      - { value: 'It converts the response content to an array, and throws an exception if the response status code is 4xx or 5xx.', correct: true }
      - { value: 'It converts the response content to an array, but never throws an exception.', correct: false }
      - { value: 'It converts the response headers to an array.', correct: false }
      - { value: 'It converts the response content to an array, but only if the status code is 200.', correct: false }
    help: |
      The `toArray()` method, when `throw` is true (default), will throw an `HttpException` for 4xx or 5xx responses.
      https://symfony.com/doc/current/http_client.html#getting-the-response-content

  -
    question: >
      Which HTTP method is used to submit data to be processed to a specified resource, often resulting in a change in state or the creation of a new resource?
    answers:
      - { value: 'GET', correct: false }
      - { value: 'PUT', correct: false }
      - { value: 'POST', correct: true }
      - { value: 'HEAD', correct: false }
    help: |
      The POST method is used to send data to a server to create/update a resource.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#http-methods

  -
    question: |
      Which of the following is the correct way to install the Symfony HTTP Client component using Composer?
    answers:
      - { value: '`composer require symfony/http-client`', correct: true }
      - { value: '`composer install symfony/http-client`', correct: false }
      - { value: '`php symfony install http-client`', correct: false }
      - { value: '`symfony new --with-http-client`', correct: false }
    help: |
      The command `composer require symfony/http-client` is used to install the component.
      https://symfony.com/doc/current/http_client.html#installation

  -
    question: |
      What is the purpose of the `Accept-Language` HTTP request header?
    answers:
      - { value: 'To specify the character encoding preferred by the client.', correct: false }
      - { value: 'To indicate the human languages that the client prefers in the response.', correct: true }
      - { value: 'To define the content types the client can accept.', correct: false }
      - { value: 'To set the default language for the server-side application.', correct: false }
    help: |
      The `Accept-Language` request HTTP header advertises which languages the client is able to understand, and which locale is preferred.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language

  -
    question: |
      Which of the following are valid ways to create a `MockResponse` for testing with `MockHttpClient`?
    answers:
      - { value: '`new MockResponse('body', ['status' => 200])`', correct: true }
      - { value: '`MockResponse::fromFile('path/to/file.json')`', correct: true }
      - { value: '`MockResponse::create('body')`', correct: false }
      - { value: '`new MockResponse(function () { /* ... */ })`', correct: true }
    help: |
      `MockResponse` can be created with a string body, from a file (since Symfony 7.1), or with a callable body.
      https://symfony.com/doc/current/http_client.html#mockresponse

  -
    question: |
      What is the primary difference between `HttpClientInterface::getContent()` and `HttpClientInterface::toStream()`?
    answers:
      - { value: '`getContent()` returns the full response body as a string, blocking until fully downloaded; `toStream()` returns a resource for incremental reading.', correct: true }
      - { value: '`getContent()` is for small responses, `toStream()` is for large responses.', correct: false }
      - { value: '`getContent()` is synchronous, `toStream()` is asynchronous.', correct: false }
      - { value: '`getContent()` returns decoded JSON, `toStream()` returns raw content.', correct: false }
    help: |
      `getContent()` blocks until the full response body is received and returns it as a string. `toStream()` returns a PHP stream resource, allowing for incremental processing without loading the entire content into memory.
      https://symfony.com/doc/current/http_client.html#getting-the-response-content

  -
    question: |
      Which HTTP status code indicates that the server is currently unable to handle the request due to a temporary overload or maintenance?
    answers:
      - { value: '500 Internal Server Error', correct: false }
      - { value: '502 Bad Gateway', correct: false }
      - { value: '503 Service Unavailable', correct: true }
      - { value: '504 Gateway Timeout', correct: false }
    help: |
      The 503 (Service Unavailable) status code indicates that the server is not ready to handle the request. Common causes are a server that is down for maintenance or that is overloaded.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503

  -
    question: |
      What is the purpose of the `AsyncDecoratorTrait` in Symfony's HTTP Client?
    answers:
      - { value: 'To provide a way to make synchronous HTTP requests.', correct: false }
      - { value: 'To add asynchronous capabilities to an HTTP client by decorating an existing one.', correct: true }
      - { value: 'To automatically convert synchronous responses to asynchronous ones.', correct: false }
      - { value: 'To handle error responses asynchronously.', correct: false }
    help: |
      `AsyncDecoratorTrait` helps in implementing asynchronous behavior by decorating an existing HTTP client.
      https://symfony.com/doc/current/http_client.html#_snippet_83

  -
    question: |
      When creating a `Response` object, what is the correct way to set the HTTP status code?
    answers:
      - { value: 'Pass it as the second argument to the constructor.', correct: true }
      - { value: 'Use `$response->setStatusCode(Response::HTTP_OK)`.', correct: true }
      - { value: 'Set it directly on `$response->statusCode`.', correct: false }
      - { value: 'It is always 200 OK by default and cannot be changed.', correct: false }
    help: |
      The status code can be set in the constructor or using the `setStatusCode()` method.
      https://symfony.com/doc/current/components/http_foundation.html#creating-a-response

  -
    question: |
      Which of the following HTTP methods are considered "safe" (i.e., they do not alter the state of the server)?
    answers:
      - { value: 'GET', correct: true }
      - { value: 'HEAD', correct: true }
      - { value: 'OPTIONS', correct: true }
      - { value: 'PUT', correct: false }
      - { value: 'DELETE', correct: false }
    help: |
      Safe methods are those that do not alter the state of the server. GET, HEAD, and OPTIONS are safe.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods

  -
    question: |
      What is the purpose of the `ThrottlingHttpClient` introduced in Symfony 7.1?
    answers:
      - { value: 'To limit the number of concurrent requests made by the client.', correct: true }
      - { value: 'To automatically retry failed requests with a delay.', correct: false }
      - { value: 'To reduce the bandwidth usage of HTTP requests.', correct: false }
      - { value: 'To prioritize certain requests over others.', correct: false }
    help: |
      `ThrottlingHttpClient` (introduced in Symfony 7.1) allows you to limit the rate at which requests are sent, preventing API rate limits from being hit.
      https://symfony.com/doc/current/http_client.html#_snippet_65

  -
    question: |
      When using `HttpClientInterface::getHeaders()`, what is the format of the returned headers?
    answers:
      - { value: 'An associative array where keys are header names (lowercase) and values are arrays of strings.', correct: true }
      - { value: 'An array of `Header` objects.', correct: false }
      - { value: 'A string containing all headers separated by newlines.', correct: false }
      - { value: 'An associative array where keys are header names (original case) and values are single strings.', correct: false }
    help: |
      `getHeaders()` returns the HTTP headers as a `string[][]` with header names lower-cased.
      https://symfony.com/doc/current/http_client.html#getting-the-response-content

  -
    question: |
      Which of the following can be used to create a `Cookie` object in Symfony?
    answers:
      - { value: '`Cookie::create(...)` static factory method.', correct: true }
      - { value: '`new Cookie(...)` constructor.', correct: false }
      - { value: '`Cookie::fromString('cookie_header_string')` static factory method.', correct: true }
      - { value: '`$response->createCookie(...)`', correct: false }
    help: |
      The `Cookie` class provides static factory methods like `create()` and `fromString()` to instantiate cookies.
      https://symfony.com/doc/current/components/http_foundation.html#creating-a-cookie

  -
    question: |
      What is the purpose of the `RedirectResponse` class in Symfony?
    answers:
      - { value: 'To send a response that forces the client to download a file.', correct: false }
      - { value: 'To send an HTTP response that instructs the client to navigate to a different URL.', correct: true }
      - { value: 'To send a response with a 404 Not Found status code.', correct: false }
      - { value: 'To send a response that streams content incrementally.', correct: false }
    help: |
      `RedirectResponse` is a specialized `Response` class used to send HTTP redirects (e.g., 301, 302, 307, 308).
      https://symfony.com/doc/current/components/http_foundation.html#redirecting-the-user

  -
    question: |
      When handling content negotiation, which `Request` method would you use to get the client's preferred content types, ordered by quality?
    answers:
      - { value: '`getAcceptableContentTypes()`', correct: true }
      - { value: '`getPreferredContentType()`', correct: false }
      - { value: '`getMimeTypes()`', correct: false }
      - { value: '`getAcceptedFormats()`', correct: false }
    help: |
      The `getAcceptableContentTypes()` method returns the list of accepted content types ordered by descending quality.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: |
      Which of the following is true about the `HttpClientInterface::request()` method?
    answers:
      - { value: 'It returns immediately, without waiting for the full response body to be received.', correct: true }
      - { value: 'It blocks execution until the entire response, including the body, is downloaded.', correct: false }
      - { value: 'It only sends the request headers and does not handle the body.', correct: false }
      - { value: 'It automatically retries the request multiple times if it fails.', correct: false }
    help: |
      The `request()` method is asynchronous; it returns immediately, and the response content is lazy-loaded when accessed.
      https://symfony.com/doc/current/http_client.html#making-requests

  -
    question: |
      What is the purpose of the `HttpKernel::terminate()` method?
    answers:
      - { value: 'To stop the PHP script execution immediately.', correct: false }
      - { value: 'To trigger the `kernel.terminate` event, allowing for post-response tasks.', correct: true }
      - { value: 'To close all open database connections.', correct: false }
      - { value: 'To send the final HTTP response to the client.', correct: false }
    help: |
      The `terminate()` method is called after the response has been sent to the client and triggers the `kernel.terminate` event, allowing for cleanup or logging tasks.
      https://symfony.com/doc/current/components/http_kernel.html#the-kernel-terminate-event

  -
    question: |
      When is it appropriate to use `HttplugClient` in a Symfony application?
    answers:
      - { value: 'When you need to integrate with a third-party library or SDK that expects a PSR-18 `HttpClientInterface` instance.', correct: true }
      - { value: 'When you want to use the native PHP stream wrapper for HTTP requests.', correct: false }
      - { value: 'When you need to mock HTTP responses for testing purposes.', correct: false }
      - { value: 'When you are building a new Symfony application from scratch.', correct: false }
    help: |
      `HttplugClient` is a bridge that allows Symfony's HTTP Client to be used with libraries that rely on the PSR-18 `HttpClientInterface`.
      https://symfony.com/doc/current/http_client.html#httplug-integration

  -
    question: |
      Which of the following HTTP status codes indicates a permanent redirect?
    answers:
      - { value: '301 Moved Permanently', correct: true }
      - { value: '302 Found', correct: false }
      - { value: '303 See Other', correct: false }
      - { value: '307 Temporary Redirect', correct: false }
    help: |
      The 301 (Moved Permanently) status code indicates that the target resource has been assigned a new permanent URI and any future references to this resource ought to use one of the enclosed URIs.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/301

  -
    question: |
      What is the primary purpose of the `Response::setPublic()` method?
    answers:
      - { value: 'To make the response content visible to all users.', correct: false }
      - { value: 'To allow the response to be cached by shared caches (e.g., proxies).', correct: true }
      - { value: 'To mark the response as non-sensitive and safe for public display.', correct: false }
      - { value: 'To set the `Cache-Control` header to `no-cache`.', correct: false }
    help: |
      The `setPublic()` method sets the `Cache-Control` header to `public`, indicating that the response can be cached by any cache.
      https://symfony.com/doc/current/components/http_foundation.html#http-cache-headers

  -
    question: |
      Which of the following is the correct way to access a server variable (e.g., `HTTP_HOST`) from the `Request` object?
    answers:
      - { value: '`$request->server->get('HTTP_HOST')`', correct: true }
      - { value: '`$request->get('HTTP_HOST')`', correct: false }
      - { value: '`$_SERVER['HTTP_HOST']`', correct: false }
      - { value: '`$request->getServerParam('HTTP_HOST')`', correct: false }
    help: |
      Server variables are accessed via the `server` property of the `Request` object, which is an instance of `ParameterBag`.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#access-the-request

  -
    question: |
      What is the purpose of the `HttpClientInterface::cancel()` method on a response object?
    answers:
      - { value: 'To immediately stop the ongoing request and prevent further data transfer.', correct: true }
      - { value: 'To mark the response as invalid and discard its content.', correct: false }
      - { value: 'To send a cancellation request to the remote server.', correct: false }
      - { value: 'To clear the client''s internal cache for that specific request.', correct: false }
    help: |
      The `cancel()` method aborts the ongoing request/response.
      https://symfony.com/doc/current/http_client.html#cancelling-requests

  -
    question: |
      Which of the following HTTP status codes indicates a successful response?
    answers:
      - { value: '200 OK', correct: true }
      - { value: '201 Created', correct: true }
      - { value: '204 No Content', correct: true }
      - { value: '304 Not Modified', correct: false }
    help: |
      2xx status codes indicate success. 304 Not Modified is a redirection response, not a success response in the same sense as 2xx.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status

  -
    question: |
      What is the primary role of the `HeaderUtils` class in Symfony?
    answers:
      - { value: 'To parse and manipulate HTTP header values according to RFCs.', correct: true }
      - { value: 'To generate random HTTP headers for security purposes.', correct: false }
      - { value: 'To store all incoming and outgoing HTTP headers in a database.', correct: false }
      - { value: 'To validate the syntax of HTTP header names.', correct: false }
    help: |
      `HeaderUtils` provides static methods for common HTTP header operations like combining, joining, quoting, and parsing.
      https://symfony.com/doc/current/components/http_foundation.html#headerutils

  -
    question: |
      Which of the following HTTP methods is typically used to update an existing resource on the server, replacing the entire resource with the new payload?
    answers:
      - { value: 'PATCH', correct: false }
      - { value: 'POST', correct: false }
      - { value: 'PUT', correct: true }
      - { value: 'MERGE', correct: false }
    help: |
      The PUT method is used to update an existing resource or create a new one if it does not exist, by replacing the entire resource.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#http-methods

  -
    question: |
      How can you simulate an HTTP request with a specific HTTP method (e.g., PUT) and custom `$_SERVER` parameters (like `HTTP_ACCEPT_LANGUAGE`) when using `AbstractBrowser::submitForm()`?
    answers:
      - { value: 'Pass the method as the third argument and server parameters as the fourth argument to `submitForm()`.', correct: true }
      - { value: 'Modify `$_SERVER` global before calling `submitForm()`.', correct: false }
      - { value: 'Use `setMethod()` and `setServerParameters()` on the `AbstractBrowser` instance.', correct: false }
      - { value: 'It's not possible to override these parameters with `submitForm()`.', correct: false }
    help: |
      The `submitForm()` method allows overriding the HTTP method and providing custom `$_SERVER` parameters.
      https://symfony.com/doc/current/components/browser_kit.html#submitting-forms

  -
    question: |
      What is the purpose of the `Response::setPrivate()` method?
    answers:
      - { value: 'To make the response content visible only to authenticated users.', correct: false }
      - { value: 'To prevent the response from being cached by shared caches (e.g., proxies).', correct: true }
      - { value: 'To encrypt the response content for privacy.', correct: false }
      - { value: 'To set the `Cache-Control` header to `public`.', correct: false }
    help: |
      The `setPrivate()` method sets the `Cache-Control` header to `private`, indicating that the response should not be cached by shared caches.
      https://symfony.com/doc/current/components/http_foundation.html#http-cache-headers

  -
    question: |
      Which of the following is the correct way to set a custom HTTP header on a Symfony `Response` object?
    answers:
      - { value: '`$response->headers->set('X-Custom-Header', 'value')`', correct: true }
      - { value: '`$response->setHeader('X-Custom-Header', 'value')`', correct: false }
      - { value: '`$response->addHeader('X-Custom-Header', 'value')`', correct: false }
      - { value: '`$response->set('X-Custom-Header', 'value')`', correct: false }
    help: |
      Headers are managed via the `ResponseHeaderBag` which is accessed through `$response->headers`. The `set()` method is used to set a header.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#creating-a-response

  -
    question: |
      What is the purpose of the `HttpClientInterface::toArray(false)` method call?
    answers:
      - { value: 'It converts the response content to an array, but suppresses exceptions for 4xx or 5xx status codes.', correct: true }
      - { value: 'It converts the response content to an array, and always throws an exception.', correct: false }
      - { value: 'It converts the response headers to an array.', correct: false }
      - { value: 'It converts the response content to an array, but only if the status code is not 200.', correct: false }
    help: |
      When `throw` is set to `false`, `toArray()` will not throw an exception for 4xx or 5xx responses, allowing you to handle them manually.
      https://symfony.com/doc/current/http_client.html#getting-the-response-content

  -
    question: |
      Which HTTP status code indicates a temporary redirect, where the client should continue to use the original URI for future requests?
    answers:
      - { value: '301 Moved Permanently', correct: false }
      - { value: '302 Found', correct: true }
      - { value: '303 See Other', correct: false }
      - { value: '307 Temporary Redirect', correct: true }
    help: |
      Both 302 (Found) and 307 (Temporary Redirect) indicate temporary redirects. The primary difference is that 302 historically allowed clients to change the method to GET for the redirected request, while 307 strictly preserves the original method.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/302
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/307

  -
    question: |
      When making an HTTP request with Symfony's HttpClient, how can you override a globally configured header for a specific request?
    answers:
      - { value: 'By including the header in the `headers` option of the request-specific options array.', correct: true }
      - { value: 'It is not possible to override globally configured headers.', correct: false }
      - { value: 'By setting the header on the `Response` object before sending the request.', correct: false }
      - { value: 'By using a separate `HttpClientInterface` instance for that specific request.', correct: false }
    help: |
      Headers defined at the request level take precedence over any globally defined default headers.
      https://symfony.com/doc/current/http_client.html#overriding-headers

  -
    question: |
      What is the purpose of the `HttpClientInterface::getHeaders(false)` method call?
    answers:
      - { value: 'It returns the response headers, but suppresses exceptions for 4xx or 5xx status codes.', correct: true }
      - { value: 'It returns the response headers, and always throws an exception.', correct: false }
      - { value: 'It returns only the request headers.', correct: false }
      - { value: 'It returns the response headers, but only if the status code is 200.', correct: false }
    help: |
      When `throw` is set to `false`, `getHeaders()` will not throw an exception for 4xx or 5xx responses.
      https://symfony.com/doc/current/http_client.html#getting-the-response-content

  -
    question: |
      Which of the following is the correct way to access the URI path (e.g., `/contact`) from the `Request` object, excluding any query parameters?
    answers:
      - { value: '`$request->getPathInfo()`', correct: true }
      - { value: '`$request->getUri()`', correct: false }
      - { value: '`$request->getRequestUri()`', correct: false }
      - { value: '`$request->getRoute()`', correct: false }
    help: |
      The `getPathInfo()` method returns the URI path being requested, minus any query parameters.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#access-the-request

  -
    question: >
      What is the significance of the `Accept-Charset` HTTP request header?
    answers:
      - { value: 'It specifies the character encoding that the client prefers for the response.', correct: true }
      - { value: 'It indicates the character set used in the request body.', correct: false }
      - { value: 'It defines the default character set for the server.', correct: false }
      - { value: 'It is used for character set conversion on the server side.', correct: false }
    help: |
      The `Accept-Charset` request HTTP header advertises which character sets the client is able to understand.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Charset

  -
    question: |
      When testing a Symfony application, how can you simulate a request with specific cookies using `AbstractBrowser::request()`?
    answers:
      - { value: 'By passing a `Cookie` object or a formatted cookie string in the `serverParameters` array with the key `HTTP_COOKIE`.', correct: true }
      - { value: 'By setting cookies on the `AbstractBrowser` instance directly.', correct: false }
      - { value: 'By modifying the `$_COOKIE` superglobal before the request.', correct: false }
      - { value: 'It is not possible to simulate cookies with `AbstractBrowser::request()`.', correct: false }
    help: |
      The `serverParameters` argument of `AbstractBrowser::request()` can include `HTTP_COOKIE` to set cookies for the simulated request.
      https://symfony.com/doc/current/components/browser_kit.html#_snippet_24

  -
    question: |
      Which of the following methods on `ResponseInterface` allows you to retrieve the HTTP status code of the response?
    answers:
      - { value: '`getStatusCode()`', correct: true }
      - { value: '`getStatus()`', correct: false }
      - { value: '`getHttpCode()`', correct: false }
      - { value: '`getResponseCode()`', correct: false }
    help: |
      The `getStatusCode()` method returns the HTTP status code of the response.
      https://symfony.com/doc/current/http_client.html#getting-the-response-content

  -
    question: |
      What is the purpose of the `Accept-Encoding` HTTP request header?
    answers:
      - { value: 'To specify the character encoding of the response body.', correct: false }
      - { value: 'To indicate the content encoding (e.g., gzip, deflate) that the client can handle.', correct: true }
      - { value: 'To define the transfer encoding used for the request body.', correct: false }
      - { value: 'To set the default encoding for all HTTP communications.', correct: false }
    help: |
      The `Accept-Encoding` request HTTP header advertises which content encodings the client is able to understand.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Encoding

  -
    question: |
      When using `HttpClientInterface`, what happens if you call `getContent()` or `toArray()` on a response that resulted in a 4xx or 5xx status code, and the `throw` argument is set to `true` (which is the default)?
    answers:
      - { value: 'An `HttpException` will be thrown.', correct: true }
      - { value: 'The method will return `null`.', correct: false }
      - { value: 'The method will return an empty string or array.', correct: false }
      - { value: 'The response will be automatically retried.', correct: false }
    help: |
      By default, `getContent()` and `toArray()` will throw an `HttpException` if the response status code is 4xx or 5xx.
      https://symfony.com/doc/current/http_client.html#getting-the-response-content

  -
    question: |
      Which of the following is used to configure a custom mock response factory for Symfony's HTTP client in a framework application?
    answers:
      - { value: 'The `mockResponseFactory` option under `framework.http_client` in configuration.', correct: true }
      - { value: 'By injecting a custom `HttpClientInterface` service directly.', correct: false }
      - { value: 'Using a compiler pass to replace the default HTTP client.', correct: false }
      - { value: 'By setting a global environment variable `SYMFONY_HTTP_CLIENT_MOCK_FACTORY`.', correct: false }
    help: |
      The `mockResponseFactory` option allows you to specify a service that acts as a factory for mock responses.
      https://symfony.com/doc/current/http_client.html#mocking-responses

  -
    question: |
      What is the primary benefit of using `HttpClientInterface::stream()` for large file downloads?
    answers:
      - { value: 'It automatically decompresses the downloaded file.', correct: false }
      - { value: 'It prevents memory exhaustion by processing the response content in chunks.', correct: true }
      - { value: 'It ensures the entire file is downloaded before any processing begins.', correct: false }
      - { value: 'It provides built-in virus scanning for downloaded files.', correct: false }
    help: |
      `stream()` allows processing large responses chunk by chunk, which is crucial for memory efficiency.
      https://symfony.com/doc/current/http_client.html#streaming-responses

  -
    question: |
      Which of the following HTTP status codes indicates a client-side error where the request could not be understood by the server, often due to malformed syntax?
    answers:
      - { value: '400 Bad Request', correct: true }
      - { value: '401 Unauthorized', correct: false }
      - { value: '403 Forbidden', correct: false }
      - { value: '404 Not Found', correct: false }
    help: |
      The 400 (Bad Request) status code indicates that the server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400

  -
    question: |
      What is the purpose of the `HttpClientInterface::getInfo('debug')` method call?
    answers:
      - { value: 'To retrieve detailed debug information about the HTTP request and response.', correct: true }
      - { value: 'To enable debug mode for the HTTP client.', correct: false }
      - { value: 'To get the last error message from the HTTP client.', correct: false }
      - { value: 'To check if the HTTP client is in debug mode.', correct: false }
    help: |
      The `getInfo()` method with the `'debug'` key provides detailed debug information about the request and response.
      https://symfony.com/doc/current/http_client.html#getting-response-info

  -
    question: |
      Which of the following is a valid way to set a cookie with the `Partitioned` attribute in Symfony 7.1+?
    answers:
      - { value: '`Cookie::create(...)->withPartitioned()`', correct: true }
      - { value: '`new Cookie(..., partitioned: true)`', correct: false }
      - { value: '`$response->headers->setCookie(new Cookie(..., partitioned: true))`', correct: false }
      - { value: '`Cookie::createPartitioned(...)`', correct: false }
    help: |
      The `withPartitioned()` method on the `Cookie` object sets the partitioned flag to true. The `partitioned` argument in the `create` method is also valid since Symfony 7.1.
      https://symfony.com/doc/current/components/http_foundation.html#partitioned-cookies

  -
    question: |
      When using `FormDataPart` with Symfony's HttpClient, how can you ensure the `Content-Length` header is correctly set for streamed bodies, potentially avoiding HTTP 411 errors?
    answers:
      - { value: 'By calling `$formData->bodyToString()` and using its result as the `body` option.', correct: true }
      - { value: 'By manually calculating and setting the `Content-Length` header.', correct: false }
      - { value: 'The `HttpClient` automatically handles `Content-Length` for streamed bodies.', correct: false }
      - { value: 'By using `fopen()` with a specific mode for the body.', correct: false }
    help: |
      Calling `bodyToString()` on `FormDataPart` converts the streamed body to a string, allowing the `Content-Length` header to be determined and set, which can resolve HTTP 411 errors.
      https://symfony.com/doc/current/http_client.html#_snippet_25

  -
    question: |
      Which HTTP status code indicates that the server cannot fulfill the request because the request entity is larger than the server is willing or able to process?
    answers:
      - { value: '400 Bad Request', correct: false }
      - { value: '413 Payload Too Large', correct: true }
      - { value: '414 URI Too Long', correct: false }
      - { value: '500 Internal Server Error', correct: false }
    help: |
      The 413 (Payload Too Large) status code indicates that the server is refusing to process a request because the request payload is larger than the server is willing or able to process.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/413

  -
    question: |
      What is the purpose of the `HttpClientInterface::getInfo('redirect_url')` method call?
    answers:
      - { value: 'To get the URL that the client was redirected to, if any.', correct: true }
      - { value: 'To check if the request was a redirect.', correct: false }
      - { value: 'To set the redirect URL for the next request.', correct: false }
      - { value: 'To get the original URL before any redirects occurred.', correct: false }
    help: |
      The `getInfo()` method with the `'redirect_url'` key returns the URL that the client was redirected to.
      https://symfony.com/doc/current/http_client.html#getting-response-info

  -
    question: |
      Which of the following is the correct way to instantiate a Symfony `Request` object from global PHP variables (`$_GET`, `$_POST`, `$_SERVER`, `$_COOKIE`, `$_FILES`)?
    answers:
      - { value: '`Request::createFromGlobals()`', correct: true }
      - { value: '`new Request()`', correct: false }
      - { value: '`Request::capture()`', correct: false }
      - { value: '`Request::fromGlobals()`', correct: false }
    help: |
      The static method `createFromGlobals()` creates a `Request` object populated with data from PHP's global variables.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#access-the-request

  -
    question: |
      Which HTTP status code indicates that the server successfully processed the request, but is not returning any content?
    answers:
      - { value: '200 OK', correct: false }
      - { value: '201 Created', correct: false }
      - { value: '204 No Content', correct: true }
      - { value: '304 Not Modified', correct: false }
    help: |
      The 204 (No Content) status code indicates that the server successfully fulfilled the request and that there is no additional content to send in the response payload body.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/204

  -
    question: |
      When using `HttpClientInterface`, what is the purpose of the `HttpClientInterface::getInfo('start_time')` method call?
    answers:
      - { value: 'To get the timestamp when the request started.', correct: true }
      - { value: 'To get the time it took to connect to the server.', correct: false }
      - { value: 'To get the total time elapsed for the request.', correct: false }
      - { value: 'To get the time when the response headers were received.', correct: false }
    help: |
      The `getInfo()` method with the `'start_time'` key returns the timestamp when the request started.
      https://symfony.com/doc/current/http_client.html#getting-response-info

  -
    question: |
      Which of the following HTTP methods is typically used to delete a specific resource on the server?
    answers:
      - { value: 'REMOVE', correct: false }
      - { value: 'UNLINK', correct: false }
      - { value: 'DELETE', correct: true }
      - { value: 'PURGE', correct: false }
    help: |
      The DELETE method is used to delete the specified resource.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#http-methods

  -
    question: |
      What is the purpose of the `HttpClientInterface::getInfo('response_headers')` method call?
    answers:
      - { value: 'To retrieve the raw response headers as an array of strings.', correct: true }
      - { value: 'To get the parsed response headers as an associative array.', correct: false }
      - { value: 'To get only the custom headers from the response.', correct: false }
      - { value: 'To get the request headers sent to the server.', correct: false }
    help: |
      The `getInfo()` method with the `'response_headers'` key returns the raw response headers.
      https://symfony.com/doc/current/http_client.html#getting-response-info

  -
    question: |
      Which of the following is the correct way to create a `RedirectResponse` in Symfony?
    answers:
      - { value: '`new RedirectResponse('/new-url')`', correct: true }
      - { value: '`Response::redirect('/new-url')`', correct: false }
      - { value: '`new Response('/new-url', 302)`', correct: false }
      - { value: '`RedirectResponse::create('/new-url')`', correct: false }
    help: |
      `RedirectResponse` is instantiated directly with the target URL and an optional status code (defaulting to 302).
      https://symfony.com/doc/current/components/http_foundation.html#redirecting-the-user
  -
    question: |
      What is the main advantage of using Symfony's `Request` and `Response` objects over PHP's superglobal arrays (`$_GET`, `$_POST`, `$_SERVER`) and `header()`/`echo` for HTTP interaction?
    answers:
      - { value: 'They provide an object-oriented API, making code more readable, testable, and maintainable.', correct: true }
      - { value: 'They automatically handle all security vulnerabilities related to HTTP.', correct: false }
      - { value: 'They are significantly faster than using superglobals.', correct: false }
      - { value: 'They eliminate the need for routing in a web application.', correct: false }
    help: |
      Symfony's HttpFoundation component provides an object-oriented abstraction for HTTP, improving code quality, testability, and adherence to HTTP specifications.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#the-request-and-response-objects
  -
    question: |
      Which of the following HTTP status codes indicates that the request has been accepted for processing, but the processing has not been completed?
    answers:
      - { value: '200 OK', correct: false }
      - { value: '202 Accepted', correct: true }
      - { value: '201 Created', correct: false }
      - { value: '203 Non-Authoritative Information', correct: false }
    help: |
      The 202 (Accepted) status code indicates that the request has been accepted for processing, but the processing has not been completed. The request might or might not be eventually acted upon, and may be disallowed when processing actually takes place.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/202
  -
    question: |
      Which method on the `Response` object allows you to set the `max-age` directive of the `Cache-Control` header?
    answers:
      - { value: '`setMaxAge(int $maxAge)`', correct: true }
      - { value: '`setCacheMaxAge(int $maxAge)`', correct: false }
      - { value: '`setExpiresIn(int $seconds)`', correct: false }
      - { value: '`setTtl(int $ttl)`', correct: false }
    help: |
      The `setMaxAge()` method sets the `max-age` directive of the `Cache-Control` header.
      https://symfony.com/doc/current/components/http_foundation.html#http-cache-headers
  -
    question: |
      What is the purpose of the `HttpClientInterface::getInfo('redirect_count')` method call?
    answers:
      - { value: 'To get the number of redirects that occurred for the request.', correct: true }
      - { value: 'To set the maximum number of redirects allowed.', correct: false }
      - { value: 'To check if the request was redirected at all.', correct: false }
      - { value: 'To get the number of times the client was redirected by the server.', correct: false }
    help: |
      The `getInfo()` method with the `'redirect_count'` key returns the number of redirects that occurred.
      https://symfony.com/doc/current/http_client.html#getting-response-info
  -
    question: |
      Which HTTP status code indicates that the server is acting as a gateway or proxy and received an invalid response from an upstream server?
    answers:
      - { value: '500 Internal Server Error', correct: false }
      - { value: '502 Bad Gateway', correct: true }
      - { value: '503 Service Unavailable', correct: false }
      - { value: '504 Gateway Timeout', correct: false }
    help: |
      The 502 (Bad Gateway) status code indicates that the server, while acting as a gateway or proxy, received an invalid response from an inbound server it accessed while attempting to fulfill the request.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/502
  -
    question: |
      What is the purpose of the `HttpClientInterface::getInfo('total_time')` method call?
    answers:
      - { value: 'To get the total time taken for the request, including connection, transfer, and processing.', correct: true }
      - { value: 'To get the time spent on DNS resolution.', correct: false }
      - { value: 'To get the time spent waiting for the first byte of the response.', correct: false }
      - { value: 'To get the time spent on SSL/TLS handshake.', correct: false }
    help: |
      The `getInfo()` method with the `'total_time'` key returns the total time, in seconds, for the previous transfer.
      https://symfony.com/doc/current/http_client.html#getting-response-info
  -
    question: |
      Which of the following is true about HTTP methods and their impact on caching?
    answers:
      - { value: 'GET requests are generally cacheable by default.', correct: true }
      - { value: 'POST requests are always cacheable.', correct: false }
      - { value: 'DELETE requests are never cacheable.', correct: false }
      - { value: 'Only responses with a 200 OK status can be cached.', correct: false }
    help: |
      GET requests are inherently cacheable. POST requests are not typically cached by default, but their responses can be if explicitly allowed by `Cache-Control` headers. DELETE requests are not cacheable.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching
  -
    question: |
      What is the purpose of the `HttpClientInterface::getInfo('http_code')` method call?
    answers:
      - { value: 'To retrieve the final HTTP status code of the response.', correct: true }
      - { value: 'To get the status code of the initial request before redirects.', correct: false }
      - { value: 'To get the status code of the last redirect.', correct: false }
      - { value: 'To get the HTTP protocol version used.', correct: false }
    help: |
      The `getInfo()` method with the `'http_code'` key returns the last received HTTP status code.
      https://symfony.com/doc/current/http_client.html#getting-response-info
  -
    question: |
      Which of the following is the correct way to set the `s-maxage` directive of the `Cache-Control` header for shared caches?
    answers:
      - { value: '`$response->setSharedMaxAge(int $sMaxAge)`', correct: true }
      - { value: '`$response->setProxyMaxAge(int $sMaxAge)`', correct: false }
      - { value: '`$response->setPublicMaxAge(int $sMaxAge)`', correct: false }
      - { value: '`$response->setSharedTtl(int $sMaxAge)`', correct: false }
    help: |
      The `setSharedMaxAge()` method sets the `s-maxage` directive of the `Cache-Control` header, which applies to shared caches.
      https://symfony.com/doc/current/components/http_foundation.html#http-cache-headers
  -
    question: |
      What does the `HttpClientInterface::getInfo('url')` method call return?
    answers:
      - { value: 'The effective URL of the request after all redirects.', correct: true }
      - { value: 'The original URL provided in the request.', correct: false }
      - { value: 'The base URI configured for the client.', correct: false }
      - { value: 'The URL of the last resource accessed.', correct: false }
    help: |
      The `getInfo()` method with the `'url'` key returns the effective URL of the request after all redirects.
      https://symfony.com/doc/current/http_client.html#getting-response-info
  -
    question: |
      Which HTTP status code indicates that the server, while acting as a gateway or proxy, did not receive a timely response from an upstream server?
    answers:
      - { value: '500 Internal Server Error', correct: false }
      - { value: '502 Bad Gateway', correct: false }
      - { value: '503 Service Unavailable', correct: false }
      - { value: '504 Gateway Timeout', correct: true }
    help: |
      The 504 (Gateway Timeout) status code indicates that the server, while acting as a gateway or proxy, did not receive a timely response from an upstream server it needed to access in order to complete the request.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/504
  -
    question: |
      What is the purpose of the `HttpClientInterface::getInfo('starttransfer_time')` method call?
    answers:
      - { value: 'To get the time when the first byte of the response body was received.', correct: true }
      - { value: 'To get the time when the request was sent.', correct: false }
      - { value: 'To get the time when the connection was established.', correct: false }
      - { value: 'To get the time when the last byte of the response was received.', correct: false }
    help: |
      The `getInfo()` method with the `'starttransfer_time'` key returns the time, in seconds, from the start until the first byte is received.
      https://symfony.com/doc/current/http_client.html#getting-response-info
  -
    question: |
      Which of the following methods on the `Response` object allows you to set the `stale-if-error` directive of the `Cache-Control` header?
    answers:
      - { value: '`setStaleIfError(int $seconds)`', correct: true }
      - { value: '`setErrorStale(int $seconds)`', correct: false }
      - { value: '`setCacheOnError(int $seconds)`', correct: false }
      - { value: '`setFallbackCache(int $seconds)`', correct: false }
    help: |
      The `setStaleIfError()` method sets the `stale-if-error` directive of the `Cache-Control` header.
      https://symfony.com/doc/current/components/http_foundation.html#http-cache-headers
  -
    question: |
      What is the purpose of the `HttpClientInterface::getInfo('primary_ip')` method call?
    answers:
      - { value: 'To get the IP address of the remote host to which the connection was made.', correct: true }
      - { value: 'To get the local IP address used for the connection.', correct: false }
      - { value: 'To get the IP address of the proxy server.', correct: false }
      - { value: 'To get a list of all IP addresses resolved for the host.', correct: false }
    help: |
      The `getInfo()` method with the `'primary_ip'` key returns the IP address of the remote host.
      https://symfony.com/doc/current/http_client.html#getting-response-info
  -
    question: |
      Which of the following methods on the `Response` object allows you to set the `stale-while-revalidate` directive of the `Cache-Control` header?
    answers:
      - { value: '`setStaleWhileRevalidate(int $seconds)`', correct: true }
      - { value: '`setRevalidateStale(int $seconds)`', correct: false }
      - { value: '`setAsyncRevalidate(int $seconds)`', correct: false }
      - { value: '`setSoftExpire(int $seconds)`', correct: false }
    help: |
      The `setStaleWhileRevalidate()` method sets the `stale-while-revalidate` directive of the `Cache-Control` header.
      https://symfony.com/doc/current/components/http_foundation.html#http-cache-headers
  -
    question: |
      What is the purpose of the `HttpClientInterface::getInfo('http_version')` method call?
    answers:
      - { value: 'To get the HTTP protocol version used for the request/response.', correct: true }
      - { value: 'To get the HTTP status code.', correct: false }
      - { value: 'To get the HTTP method used.', correct: false }
      - { value: 'To get the HTTP client library version.', correct: false }
    help: |
      The `getInfo()` method with the `'http_version'` key returns the HTTP protocol version used.
      https://symfony.com/doc/current/http_client.html#getting-response-info
  -
    question: |
      Which of the following methods on the `Response` object allows you to set the `Time-To-Live (TTL)` for the response, which is an alias for `setMaxAge()`?
    answers:
      - { value: '`setTtl(int $ttl)`', correct: true }
      - { value: '`setLifetime(int $ttl)`', correct: false }
      - { value: '`setCacheTtl(int $ttl)`', correct: false }
      - { value: '`setExpiresIn(int $ttl)`', correct: false }
    help: |
      The `setTtl()` method is an alias for `setMaxAge()`, setting the `max-age` directive.
      https://symfony.com/doc/current/components/http_foundation.html#http-cache-headers
  -
    question: |
      What is the purpose of the `HttpClientInterface::getInfo('error')` method call?
    answers:
      - { value: 'To get a string describing any error that occurred during the transfer.', correct: true }
      - { value: 'To get the HTTP status code of an error.', correct: false }
      - { value: 'To check if an error occurred (returns boolean).', correct: false }
      - { value: 'To get the exception object if an error occurred.', correct: false }
    help: |
      The `getInfo()` method with the `'error'` key returns a string describing any error that occurred during the transfer.
      https://symfony.com/doc/current/http_client.html#getting-response-info
  -
    question: |
      Which of the following methods on the `Response` object allows you to set the client-specific `Time-To-Live (TTL)` for the response, which is an alias for `setPrivate()` and `setMaxAge()`?
    answers:
      - { value: '`setClientTtl(int $ttl)`', correct: true }
      - { value: '`setPrivateTtl(int $ttl)`', correct: false }
      - { value: '`setBrowserTtl(int $ttl)`', correct: false }
      - { value: '`setLocalTtl(int $ttl)`', correct: false }
    help: |
      The `setClientTtl()` method is an alias for `setPrivate()` and `setMaxAge()`, setting the `max-age` directive for private caches.
      https://symfony.com/doc/current/components/http_foundation.html#http-cache-headers
  -
    question: |
      What is the purpose of the `HttpClientInterface::getInfo('redirect_time')` method call?
    answers:
      - { value: 'To get the total time, in seconds, spent on all redirects.', correct: true }
      - { value: 'To get the time taken for the last redirect.', correct: false }
      - { value: 'To get the time until the next redirect.', correct: false }
      - { value: 'To get the number of seconds before a redirect occurs.', correct: false }
    help: |
      The `getInfo()` method with the `'redirect_time'` key returns the total time, in seconds, spent on all redirects.
      https://symfony.com/doc/current/http_client.html#getting-response-info
  -
    question: |
      Which of the following methods on the `Response` object allows you to set the `Last-Modified` HTTP header?
    answers:
      - { value: '`setLastModified(\DateTimeInterface $lastModified)`', correct: true }
      - { value: '`setModifiedDate(\DateTimeInterface $date)`', correct: false }
      - { value: '`setLastUpdated(\DateTimeInterface $updated)`', correct: false }
      - { value: '`setModificationTime(\DateTimeInterface $time)`', correct: false }
    help: |
      The `setLastModified()` method sets the `Last-Modified` HTTP header.
      https://symfony.com/doc/current/components/http_foundation.html#http-cache-headers
  -
    question: |
      What is the purpose of the `HttpClientInterface::getInfo('namelookup_time')` method call?
    answers:
      - { value: 'To get the time, in seconds, spent on DNS name resolution.', correct: true }
      - { value: 'To get the time spent looking up the host''s IP address.', correct: false }
      - { value: 'To get the time spent resolving the URL path.', correct: false }
      - { value: 'To get the time spent negotiating the connection name.', correct: false }
    help: |
      The `getInfo()` method with the `'namelookup_time'` key returns the time, in seconds, spent on DNS name resolution.
      https://symfony.com/doc/current/http_client.html#getting-response-info
  -
    question: |
      Which of the following methods on the `Response` object allows you to set the `ETag` HTTP header?
    answers:
      - { value: '`setEtag(string $etag, bool $weak = false)`', correct: true }
      - { value: '`setEntityTag(string $etag)`', correct: false }
      - { value: '`setVersionTag(string $tag)`', correct: false }
      - { value: '`setHash(string $hash)`', correct: false }
    help: |
      The `setEtag()` method sets the `ETag` HTTP header.
      https://symfony.com/doc/current/components/http_foundation.html#http-cache-headers
  -
    question: |
      What is the purpose of the `HttpClientInterface::getInfo('connect_time')` method call?
    answers:
      - { value: 'To get the time, in seconds, spent connecting to the remote host.', correct: true }
      - { value: 'To get the time spent establishing the SSL/TLS handshake.', correct: false }
      - { value: 'To get the time spent sending the request headers.', correct: false }
      - { value: 'To get the time until the first byte of the response is received.', correct: false }
    help: |
      The `getInfo()` method with the `'connect_time'` key returns the time, in seconds, spent connecting to the remote host.
      https://symfony.com/doc/current/http_client.html#getting-response-info
  -
    question: |
      Which of the following methods on the `Response` object allows you to set the `Vary` HTTP header?
    answers:
      - { value: '`setVary(string|array $vary)`', correct: true }
      - { value: '`addVaryHeader(string|array $vary)`', correct: false }
      - { value: '`setVariation(string|array $vary)`', correct: false }
      - { value: '`setCacheVary(string|array $vary)`', correct: false }
    help: |
      The `setVary()` method sets the `Vary` HTTP header.
      https://symfony.com/doc/current/components/http_foundation.html#http-cache-headers
  -
    question: |
      What is the purpose of the `HttpClientInterface::getInfo('pretransfer_time')` method call?
    answers:
      - { value: 'To get the time, in seconds, from the start until the file transfer is about to begin.', correct: true }
      - { value: 'To get the time spent on DNS lookup and connection.', correct: false }
      - { value: 'To get the time spent on SSL/TLS handshake.', correct: false }
      - { value: 'To get the time until the first byte of the response is received.', correct: false }
    help: |
      The `getInfo()` method with the `'pretransfer_time'` key returns the time, in seconds, from the start until the file transfer is about to begin.
      https://symfony.com/doc/current/http_client.html#getting-response-info
  -
    question: |
      Which of the following methods on the `Response` object allows you to check if the response validators (ETag, Last-Modified) match a conditional value in the client Request, and sets the status to 304 if not modified?
    answers:
      - { value: '`isNotModified(Request $request)`', correct: true }
      - { value: '`checkNotModified(Request $request)`', correct: false }
      - { value: '`handleConditionalRequest(Request $request)`', correct: false }
      - { value: '`setNotModified(Request $request)`', correct: false }
    help: |
      The `isNotModified()` method checks if the Response validators (ETag, Last-Modified) match a conditional value in the client Request. If not modified, it sets the status to 304 and removes content.
      https://symfony.com/doc/current/components/http_foundation.html#http-cache-headers
  -
    question: |
      What is the purpose of the `HttpClientInterface::getInfo('size_download')` method call?
    answers:
      - { value: 'To get the total number of bytes downloaded for the response body.', correct: true }
      - { value: 'To get the size of the response headers.', correct: false }
      - { value: 'To get the estimated total size of the download.', correct: false }
      - { value: 'To get the number of bytes uploaded in the request.', correct: false }
    help: |
      The `getInfo()` method with the `'size_download'` key returns the total number of bytes downloaded.
      https://symfony.com/doc/current/http_client.html#getting-response-info
  -
    question: |
      What is the purpose of the `HttpClientInterface::getInfo('size_upload')` method call?
    answers:
      - { value: 'To get the total number of bytes uploaded in the request body.', correct: true }
      - { value: 'To get the size of the request headers.', correct: false }
      - { value: 'To get the estimated total size of the upload.', correct: false }
      - { value: 'To get the number of bytes downloaded in the response.', correct: false }
    help: |
      The `getInfo()` method with the `'size_upload'` key returns the total number of bytes uploaded.
      https://symfony.com/doc/current/http_client.html#getting-response-info
  -
    question: |
      What is the purpose of the `HttpClientInterface::getInfo('speed_download')` method call?
    answers:
      - { value: 'To get the average download speed in bytes per second.', correct: true }
      - { value: 'To get the current download speed in bytes per second.', correct: false }
      - { value: 'To get the maximum download speed achieved.', correct: false }
      - { value: 'To get the download speed of the headers only.', correct: false }
    help: |
      The `getInfo()` method with the `'speed_download'` key returns the average download speed in bytes per second.
      https://symfony.com/doc/current/http_client.html#getting-response-info
  -
    question: |
      What is the purpose of the `HttpClientInterface::getInfo('speed_upload')` method call?
    answers:
      - { value: 'To get the average upload speed in bytes per second.', correct: true }
      - { value: 'To get the current upload speed in bytes per second.', correct: false }
      - { value: 'To get the maximum upload speed achieved.', correct: false }
      - { value: 'To get the upload speed of the headers only.', correct: false }
    help: |
      The `getInfo()` method with the `'speed_upload'` key returns the average upload speed in bytes per second.
      https://symfony.com/doc/current/http_client.html#getting-response-info
  -
    question: |
      What is the purpose of the `HttpClientInterface::getInfo('ssl_verifyresult')` method call?
    answers:
      - { value: 'To get the result of the SSL certificate verification (0 for success).', correct: true }
      - { value: 'To check if SSL/TLS was used for the connection.', correct: false }
      - { value: 'To get the SSL/TLS version used.', correct: false }
      - { value: 'To get the SSL certificate details.', correct: false }
    help: |
      The `getInfo()` method with the `'ssl_verifyresult'` key returns the result of the SSL certificate verification. A value of 0 indicates success.
      https://symfony.com/doc/current/http_client.html#getting-response-info
  -
    question: |
      What is the purpose of the `HttpClientInterface::getInfo('primary_port')` method call?
    answers:
      - { value: 'To get the port number of the remote host to which the connection was made.', correct: true }
      - { value: 'To get the local port number used for the connection.', correct: false }
      - { value: 'To get the port number of the proxy server.', correct: false }
      - { value: 'To get the default HTTP/HTTPS port.', correct: false }
    help: |
      The `getInfo()` method with the `'primary_port'` key returns the port number of the remote host.
      https://symfony.com/doc/current/http_client.html#getting-response-info
  -
    question: |
      What is the purpose of the `HttpClientInterface::getInfo('local_ip')` method call?
    answers:
      - { value: 'To get the local IP address used for the connection.', correct: true }
      - { value: 'To get the remote IP address of the server.', correct: false }
      - { value: 'To get the IP address of the client machine.', correct: false }
      - { value: 'To get the IP address of the DNS server.', correct: false }
    help: |
      The `getInfo()` method with the `'local_ip'` key returns the local IP address used for the connection.
      https://symfony.com/doc/current/http_client.html#getting-response-info
  -
    question: |
      What is the purpose of the `HttpClientInterface::getInfo('local_port')` method call?
    answers:
      - { value: 'To get the local port number used for the connection.', correct: true }
      - { value: 'To get the remote port number of the server.', correct: false }
      - { value: 'To get the port number of the client application.', correct: false }
      - { value: 'To get the default local port for HTTP.', correct: false }
    help: |
      The `getInfo()` method with the `'local_port'` key returns the local port number used for the connection.
      https://symfony.com/doc/current/http_client.html#getting-response-info
  -
    question: |
      What is the purpose of the `HttpClientInterface::getInfo('request_header')` method call?
    answers:
      - { value: 'To get the raw request headers sent to the server.', correct: true }
      - { value: 'To get the parsed request headers as an associative array.', correct: false }
      - { value: 'To get only the custom headers sent in the request.', correct: false }
      - { value: 'To get the response headers received from the server.', correct: false }
    help: |
      The `getInfo()` method with the `'request_header'` key returns the raw request headers sent to the server.
      https://symfony.com/doc/current/http_client.html#getting-response-info
  -
    question: |
      What is the purpose of the `HttpClientInterface::getInfo('proxy_ip')` method call?
    answers:
      - { value: 'To get the IP address of the proxy server used for the request.', correct: true }
      - { value: 'To get the IP address of the remote host.', correct: false }
      - { value: 'To check if a proxy was used.', correct: false }
      - { value: 'To get the local IP address of the client.', correct: false }
    help: |
      The `getInfo()` method with the `'proxy_ip'` key returns the IP address of the proxy server.
      https://symfony.com/doc/current/http_client.html#getting-response-info
  -
    question: |
      What is the purpose of the `HttpClientInterface::getInfo('proxy_port')` method call?
    answers:
      - { value: 'To get the port number of the proxy server used for the request.', correct: true }
      - { value: 'To get the port number of the remote host.', correct: false }
      - { value: 'To check if a proxy was used.', correct: false }
      - { value: 'To get the local port number of the client.', correct: false }
    help: |
      The `getInfo()` method with the `'proxy_port'` key returns the port number of the proxy server.
      https://symfony.com/doc/current/http_client.html#getting-response-info
  -
    question: |
      What is the purpose of the `HttpClientInterface::getInfo('download_content_length')` method call?
    answers:
      - { value: 'To get the `Content-Length` header value from the response, indicating the expected size of the body.', correct: true }
      - { value: 'To get the actual number of bytes downloaded so far.', correct: false }
      - { value: 'To get the estimated total download size.', correct: false }
      - { value: 'To get the size of the downloaded headers.', correct: false }
    help: |
      The `getInfo()` method with the `'download_content_length'` key returns the `Content-Length` header value from the response, indicating the expected size of the body.
      https://symfony.com/doc/current/http_client.html#getting-response-info
  -
    question: |
      What is the purpose of the `HttpClientInterface::getInfo('upload_content_length')` method call?
    answers:
      - { value: 'To get the `Content-Length` header value from the request, indicating the expected size of the body.', correct: true }
      - { value: 'To get the actual number of bytes uploaded so far.', correct: false }
      - { value: 'To get the estimated total upload size.', correct: false }
      - { value: 'To get the size of the uploaded headers.', correct: false }
    help: |
      The `getInfo()` method with the `'upload_content_length'` key returns the `Content-Length` header value from the request, indicating the expected size of the body.
      https://symfony.com/doc/current/http_client.html#getting-response-info
  -
    question: |
      What is the purpose of the `HttpClientInterface::getInfo('appconnect_time')` method call?
    answers:
      - { value: 'To get the time, in seconds, from the start until the SSL/TLS handshake is completed.', correct: true }
      - { value: 'To get the time spent connecting to the application server.', correct: false }
      - { value: 'To get the time until the first byte of the response is received.', correct: false }
      - { value: 'To get the time spent on DNS resolution.', correct: false }
    help: |
      The `getInfo()` method with the `'appconnect_time'` key returns the time, in seconds, from the start until the SSL/TLS handshake is completed.
      https://symfony.com/doc/current/http_client.html#getting-response-info
  -
    question: |
      What is the purpose of the `HttpClientInterface::getInfo('condition_time')` method call?
    answers:
      - { value: 'To get the time, in seconds, spent waiting for a condition to be met (e.g., for `on_progress` callback).', correct: true }
      - { value: 'To get the time spent on conditional GET requests.', correct: false }
      - { value: 'To get the time until the next chunk is available.', correct: false }
      - { value: 'To get the time spent on network latency.', correct: false }
    help: |
      The `getInfo()` method with the `'condition_time'` key returns the time, in seconds, spent waiting for a condition to be met, typically in the context of `on_progress` callbacks.
      https://symfony.com/doc/current/http_client.html#getting-response-info