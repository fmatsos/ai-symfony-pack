category: HTTP

questions:
  -
    question: >
      Which of the following best describes the fundamental nature of HTTP as a protocol?
    answers:
      -
        value: >
          Connection-oriented and stateful.
        correct: false
      -
        value: >
          Connection-oriented and stateless.
        correct: false
      -
        value: >
          Connectionless and stateful.
        correct: false
      -
        value: >
          Connectionless and stateless.
        correct: true
    help: |
      HTTP is a connectionless and stateless protocol, meaning each request is independent and the server does not retain information about past requests from the same client.
      https://symfony.com/doc/current/introduction/http_fundamentals.html

  -
    question: |
      Given a Symfony `Request` object, which method would you use to retrieve a query parameter named `id` with a default value of `0` if it's not present?

      ```php
      use Symfony\Component\HttpFoundation\Request;

      $request = Request::createFromGlobals();
      // ... retrieve 'id' parameter
      ```
    answers:
      -
        value: >
          `$request->query->get('id', 0);`
        correct: true
      -
        value: >
          `$request->get('id', 0);`
        correct: false
      -
        value: >
          `$request->attributes->get('id', 0);`
        correct: false
      -
        value: >
          `$request->parameters->get('id', 0);`
        correct: false
    help: |
      Query parameters (from `$_GET`) are accessed via the `query` property of the Request object. The `get()` method allows specifying a default value.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#accessing-request-data

  -
    question: |
      You are creating a Symfony `Response` object. Which of the following is the correct way to set its content, status code to `200 OK`, and a `Content-Type` header to `text/html`?

      ```php
      use Symfony\Component\HttpFoundation\Response;

      $response = new Response();
      // ... set content, status, and header
      $response->send();
      ```
    answers:
      -
        value: >
          `$response->setContent('Hello'); $response->setStatusCode(200); $response->headers->set('Content-Type', 'text/html');`
        correct: true
      -
        value: >
          `$response->body = 'Hello'; $response->status = Response::HTTP_OK; $response->headers['Content-Type'] = 'text/html';`
        correct: false
      -
        value: >
          `$response->setContent('Hello', 200, ['Content-Type' => 'text/html']);`
        correct: false
      -
        value: >
          `$response->set('Hello', Response::HTTP_OK, ['Content-Type' => 'text/html']);`
        correct: false
    help: |
      The `setContent()`, `setStatusCode()`, and `headers->set()` methods are used to configure a `Response` object.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#creating-a-response

  -
    question: >
      Which method of the `Symfony\Component\HttpFoundation\Request` object allows you to determine the HTTP method (e.g., GET, POST) used for the request?
    answers:
      -
        value: >
          `getMethod()`
        correct: true
      -
        value: >
          `getHttpMethod()`
        correct: false
      -
        value: >
          `getRequestType()`
        correct: false
      -
        value: >
          `getVerb()`
        correct: false
    help: |
      The `getMethod()` method returns the HTTP method of the request.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#accessing-request-data

  -
    question: >
      What is the primary conceptual difference between an HTTP GET request and an HTTP POST request?
    answers:
      -
        value: >
          GET requests are always cached, while POST requests are never cached.
        correct: false
      -
        value: >
          GET requests send data in the URL query string, while POST requests send data in the request body.
        correct: true
      -
        value: >
          GET requests are used for creating resources, while POST requests are used for retrieving them.
        correct: false
      -
        value: >
          GET requests are idempotent, while POST requests are safe.
        correct: false
    help: |
      GET requests typically send data as part of the URL's query string, making them suitable for retrieving data. POST requests send data in the request body, which is suitable for submitting data that changes server state.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#http-methods

  -
    question: |
      How can you retrieve the raw content of the HTTP request body in Symfony, for example, to parse an XML or JSON payload?

      ```php
      use Symfony\Component\HttpFoundation\Request;

      $request = Request::createFromGlobals();
      // ... retrieve raw body content
      ```
    answers:
      -
        value: >
          `$request->getContent();`
        correct: true
      -
        value: >
          `$request->getPayload()->all();`
        correct: false
      -
        value: >
          `file_get_contents('php://input');`
        correct: false
      -
        value: >
          `$request->body->getRaw();`
        correct: false
    help: |
      The `getContent()` method of the `Request` object returns the raw content of the request body.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-the-request-data

  -
    question: >
      After preparing a `Symfony\Component\HttpFoundation\Response` object, which method must be called to send the HTTP headers and content to the client?
    answers:
      -
        value: >
          `output()`
        correct: false
      -
        value: >
          `dispatch()`
        correct: false
      -
        value: >
          `send()`
        correct: true
      -
        value: >
          `flush()`
        correct: false
    help: |
      The `send()` method of the `Response` object is responsible for sending the HTTP headers and content to the client.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#creating-a-response

  -
    question: |
      Which of the following is the correct way to programmatically create a `Symfony\Component\HttpFoundation\Request` object for testing or internal dispatching, simulating a GET request to `/products/123`?

      ```php
      use Symfony\Component\HttpFoundation\Request;

      // ... create request
      ```
    answers:
      -
        value: >
          `Request::create('/products/123', 'GET');`
        correct: true
      -
        value: >
          `Request::simulate('/products/123', 'GET');`
        correct: false
      -
        value: >
          `new Request('/products/123', 'GET');`
        correct: false
      -
        value: >
          `Request::fromUri('/products/123', 'GET');`
        correct: false
    help: |
      The static `create()` method of the `Request` class is used to programmatically create a request object.
      https://symfony.com/doc/current/components/http_foundation.html#simulating-a-request

  -
    question: >
      What is the primary role of the `HttpKernel` component in a Symfony application's request-response lifecycle?
    answers:
      -
        value: >
          To manage database connections and ORM entities.
        correct: false
      -
        value: >
          To handle incoming HTTP requests, dispatch events, call controllers, and return a `Response`.
        correct: true
      -
        value: >
          To render Twig templates and manage assets.
        correct: false
      -
        value: >
          To provide a command-line interface for the application.
        correct: false
    help: |
      The `HttpKernel` is the core component that processes an incoming `Request` and converts it into a `Response` by dispatching events and executing the appropriate controller.
      https://symfony.com/doc/current/components/http_kernel.html#basic-usage

  -
    question: |
      You need to redirect a user to a different URL (`/new-path`) in Symfony. Which of the following is the most appropriate way to achieve this using a `Response` object?

      ```php
      use Symfony\Component\HttpFoundation\Response;
      use Symfony\Component\HttpFoundation\RedirectResponse;

      // ... create a redirect response
      ```
    answers:
      -
        value: >
          `new RedirectResponse('/new-path');`
        correct: true
      -
        value: >
          `$response = new Response(); $response->headers->set('Location', '/new-path'); $response->setStatusCode(302);`
        correct: true
      -
        value: >
          `Response::redirect('/new-path');`
        correct: false
      -
        value: >
          `new Response('', 302, ['Location' => '/new-path']);`
        correct: true
    help: |
      `RedirectResponse` is a specialized `Response` class for redirects. You can also manually set the `Location` header and a 3xx status code on a regular `Response` object.
      https://symfony.com/doc/current/components/http_foundation.html#redirectresponse

  -
    question: >
      What is the Composer command to install the Symfony HTTP Client component?
    answers:
      -
        value: >
          `composer install symfony/http-client`
        correct: false
      -
        value: >
          `composer require symfony/http-client`
        correct: true
      -
        value: >
          `composer add symfony/http-client`
        correct: false
      -
        value: >
          `composer get symfony/http-client`
        correct: false
    help: |
      The `composer require` command is used to add new packages to a Composer-managed project.
      https://symfony.com/doc/current/http_client.html#installation

  -
    question: |
      In a Symfony service, how should you typically inject the HTTP Client to ensure proper autowiring and flexibility?

      ```php
      namespace App\Service;

      use Symfony\Contracts\HttpClient\HttpClientInterface;

      class MyApiClient
      {
          public function __construct(
              private /* ??? */ $client,
          ) {
          }
      }
      ```
    answers:
      -
        value: >
          `HttpClientInterface`
        correct: true
      -
        value: >
          `Symfony\Component\HttpClient\HttpClient`
        correct: false
      -
        value: >
          `Psr\HttpClient\HttpClientInterface`
        correct: false
      -
        value: >
          `ClientInterface`
        correct: false
    help: |
      You should type-hint against `HttpClientInterface` from `Symfony\Contracts\HttpClient` for autowiring, allowing Symfony to inject the default HTTP client instance.
      https://symfony.com/doc/current/http_client.html#usage

  -
    question: |
      Which of the following code snippets correctly makes a basic HTTP GET request to `https://api.example.com/data` using the Symfony HTTP Client?

      ```php
      use Symfony\Component\HttpClient\HttpClient;
      use Symfony\Contracts\HttpClient\HttpClientInterface;

      $client = HttpClient::create();
      // ... make request
      ```
    answers:
      -
        value: >
          `$response = $client->request('GET', 'https://api.example.com/data');`
        correct: true
      -
        value: >
          `$response = $client->get('https://api.example.com/data');`
        correct: false
      -
        value: >
          `$response = $client->send('GET', 'https://api.example.com/data');`
        correct: false
      -
        value: >
          `$response = $client->call('GET', 'https://api.example.com/data');`
        correct: false
    help: |
      The `request()` method is the primary way to make HTTP requests with the Symfony HTTP Client.
      https://symfony.com/doc/current/http_client.html#making-requests

  -
    question: |
      After making an HTTP request with Symfony's HTTP Client, how do you reliably get the HTTP status code of the response?

      ```php
      use Symfony\Contracts\HttpClient\HttpClientInterface;

      // Assume $response is a ResponseInterface object
      $statusCode = $response->/* ??? */;
      ```
    answers:
      -
        value: >
          `getStatusCode()`
        correct: true
      -
        value: >
          `getStatus()`
        correct: false
      -
        value: >
          `getHttpCode()`
        correct: false
      -
        value: >
          `response->code`
        correct: false
    help: |
      The `getStatusCode()` method of `ResponseInterface` returns the HTTP status code.
      https://symfony.com/doc/current/http_client.html#getting-the-response-status-code

  -
    question: |
      You've received a JSON response using Symfony's HTTP Client. Which method should you use to parse the JSON content directly into a PHP array?

      ```php
      use Symfony\Contracts\HttpClient\HttpClientInterface;

      // Assume $response is a ResponseInterface object with JSON content
      $data = $response->/* ??? */;
      ```
    answers:
      -
        value: >
          `toArray()`
        correct: true
      -
        value: >
          `jsonDecode()`
        correct: false
      -
        value: >
          `getContent(true)`
        correct: false
      -
        value: >
          `jsonToArray()`
        correct: false
    help: |
      The `toArray()` method of `ResponseInterface` decodes the JSON content of the response into a PHP array.
      https://symfony.com/doc/current/http_client.html#getting-the-response-content

  -
    question: |
      How can you configure a default `User-Agent` header for all requests made by the Symfony HTTP Client globally within `config/packages/framework.yaml`?
    answers:
      -
        value: |
          ```yaml
          # config/packages/framework.yaml
          framework:
              http_client:
                  default_options:
                      headers:
                          'User-Agent': 'My App'
          ```
        correct: true
      -
        value: |
          ```yaml
          # config/packages/framework.yaml
          framework:
              http_client:
                  headers:
                      User-Agent: 'My App'
          ```
        correct: false
      -
        value: |
          ```yaml
          # config/packages/framework.yaml
          framework:
              http_client:
                  global_headers:
                      User-Agent: 'My App'
          ```
        correct: false
      -
        value: |
          ```yaml
          # config/packages/framework.yaml
          symfony:
              http_client:
                  default_headers:
                      User-Agent: 'My App'
          ```
        correct: false
    help: |
      Default options for the HTTP client are configured under `framework.http_client.default_options` in `framework.yaml`.
      https://symfony.com/doc/current/http_client.html#default-request-options

  -
    question: |
      You have a global `User-Agent` header configured for your HTTP client, but for a specific request, you need to send a different `Content-Type` header and override the `User-Agent`. How do you achieve this?

      ```php
      use Symfony\Contracts\HttpClient\HttpClientInterface;

      // Assume $client is an HttpClientInterface instance
      $response = $client->request('POST', 'https://example.com/api', [
          // ... options here
      ]);
      ```
    answers:
      -
        value: |
          ```php
          'headers' => [
              'Content-Type' => 'application/json',
              'User-Agent' => 'Specific Agent',
          ],
          ```
        correct: true
      -
        value: |
          ```php
          'override_headers' => [
              'Content-Type' => 'application/json',
              'User-Agent' => 'Specific Agent',
          ],
          ```
        correct: false
      -
        value: |
          ```php
          'request_headers' => [
              'Content-Type' => 'application/json',
              'User-Agent' => 'Specific Agent',
          ],
          ```
        correct: false
      -
        value: |
          ```php
          'options' => [
              'headers' => [
                  'Content-Type' => 'application/json',
                  'User-Agent' => 'Specific Agent',
              ],
          ],
          ```
        correct: false
    help: |
      Request-specific options, including headers, are passed as the third argument to the `request()` method and override global options.
      https://symfony.com/doc/current/http_client.html#request-options

  -
    question: |
      Which of the following is a correct way to send an array of parameters as the request body for an HTTP POST request using Symfony's HTTP Client?

      ```php
      use Symfony\Contracts\HttpClient\HttpClientInterface;

      // Assume $client is an HttpClientInterface instance
      $response = $client->request('POST', 'https://example.com/submit', [
          // ... body option here
      ]);
      ```
    answers:
      -
        value: |
          ```php
          'body' => ['param1' => 'value1', 'param2' => 'value2'],
          ```
        correct: true
      -
        value: |
          ```php
          'form_params' => ['param1' => 'value1', 'param2' => 'value2'],
          ```
        correct: false
      -
        value: |
          ```php
          'json' => ['param1' => 'value1', 'param2' => 'value2'],
          ```
        correct: false
      -
        value: |
          ```php
          'data' => ['param1' => 'value1', 'param2' => 'value2'],
          ```
        correct: false
    help: |
      The `body` option can accept an array of parameters, which will be URL-encoded and sent as `application/x-www-form-urlencoded` by default for POST requests.
      https://symfony.com/doc/current/http_client.html#uploading-data

  -
    question: >
      By default, what happens when a Symfony HTTP Client request receives an HTTP status code in the 4xx (Client Error) or 5xx (Server Error) range and you call `getContent()` or `toArray()` on the `ResponseInterface`?
    answers:
      -
        value: >
          The method returns an empty string or array.
        correct: false
      -
        value: >
          A `ClientExceptionInterface` or `ServerExceptionInterface` is thrown.
        correct: true
      -
        value: >
          A warning is logged, but the method returns the raw content.
        correct: false
      -
        value: >
          The response is automatically retried a few times.
        correct: false
    help: |
      By default, calling `getContent()` or `toArray()` on a response with a 4xx or 5xx status code will throw an exception. You can disable this behavior by passing `false` to the `throw` argument.
      https://symfony.com/doc/current/http_client.html#handling-http-errors

  -
    question: |
      How can you send multiple HTTP requests concurrently using Symfony's HTTP Client to improve performance, waiting for all responses to be available before processing them?

      ```php
      use Symfony\Component\HttpClient\HttpClient;

      $client = HttpClient::create();
      $urls = ['url1', 'url2', 'url3'];
      $responses = [];

      foreach ($urls as $url) {
          $responses[] = $client->request('GET', $url);
      }

      // ... process responses concurrently
      ```
    answers:
      -
        value: |
          ```php
          foreach ($client->stream($responses) as $response => $chunk) {
              if ($chunk->isLast()) {
                  // Process $response->toArray() or $response->getContent()
              }
          }
          ```
        correct: true
      -
        value: |
          ```php
          foreach ($responses as $response) {
              // This will block for each response
              $data = $response->toArray();
              // ...
          }
          ```
        correct: false
      -
        value: |
          ```php
          $client->wait($responses); // This method does not exist
          foreach ($responses as $response) {
              $data = $response->toArray();
              // ...
          }
          ```
        correct: false
      -
        value: |
          ```php
          $client->sendAsync($responses); // This method does not exist
          foreach ($responses as $response) {
              $data = $response->toArray();
              // ...
          }
          ```
        correct: false
    help: |
      The `stream()` method allows monitoring multiple responses concurrently, yielding chunks as they arrive. When `isLast()` is true for a chunk, the full response for that request is available.
      https://symfony.com/doc/current/http_client.html#sending-concurrent-requests

  -
    question: |
      To enable client-side caching for a response that can be shared by public caches for 10 minutes, which `Cache-Control` directives should you set on a Symfony `Response` object?
    answers:
      -
        value: >
          `$response->setPublic(); $response->setMaxAge(600);`
        correct: true
      -
        value: >
          `$response->setPrivate(); $response->setMaxAge(600);`
        correct: false
      -
        value: >
          `$response->setPublic(); $response->setSharedMaxAge(600);`
        correct: false
      -
        value: >
          `$response->setCache(['public' => true, 'max_age' => 600]);`
        correct: true
    help: |
      `setPublic()` marks the response as cacheable by shared caches, and `setMaxAge()` sets the `max-age` directive for client-side caching. `setCache()` is a convenience method for setting multiple cache directives.
      https://symfony.com/doc/current/http_cache/expiration.html#cache-control

  -
    question: |
      Which Symfony attribute can be used on a controller method to configure HTTP caching headers like `Cache-Control`?
    answers:
      -
        value: >
          `#[Cache(public: true, maxage: 3600)]`
        correct: true
      -
        value: >
          `#[HttpCache(maxAge: 3600)]`
        correct: false
      -
        value: >
          `#[ResponseCache(ttl: 3600)]`
        correct: false
      -
        value: >
          `#[Caching(public: true, maxAge: 3600)]`
        correct: false
    help: |
      The `#[Cache]` attribute from `Symfony\Component\HttpKernel\Attribute\Cache` allows configuring caching headers directly on controller methods.
      https://symfony.com/doc/current/http_cache/expiration.html#cache-control

  -
    question: >
      What is the purpose of the `ETag` HTTP response header in the context of caching?
    answers:
      -
        value: >
          To specify the expiration date of the cached resource.
        correct: false
      -
        value: >
          To provide a unique identifier for a specific version of a resource, used for conditional requests.
        correct: true
      -
        value: >
          To indicate the maximum age a resource can be cached by a proxy.
        correct: false
      -
        value: >
          To specify the content type of the response body.
        correct: false
    help: |
      The `ETag` (Entity Tag) is an opaque identifier assigned by a web server to a specific version of a resource found at a URL. It allows caches to be more efficient and saves bandwidth.
      https://symfony.com/doc/current/http_cache/expiration.html#validation-with-etags

  -
    question: >
      When a response includes a `Vary` header (e.g., `Vary: Accept-Encoding, User-Agent`), what does it instruct caching mechanisms to do?
    answers:
      -
        value: >
          To always revalidate the response with the origin server, ignoring the cache.
        correct: false
      -
        value: >
          To store different cached versions of the resource based on the values of the specified request headers.
        correct: true
      -
        value: >
          To only cache the response if the `Accept-Encoding` and `User-Agent` headers are identical to the original request.
        correct: false
      -
        value: >
          To compress the response content using `Accept-Encoding` and identify the client with `User-Agent`.
        correct: false
    help: |
      The `Vary` header indicates that the response content varies depending on the specified request headers. Caches must store separate versions for different values of these headers.
      https://symfony.com/doc/current/http_cache/cache_vary.html

  -
    question: |
      A client sends a request with an `If-None-Match` header. How can you leverage this in Symfony to send a `304 Not Modified` response if the resource hasn't changed?

      ```php
      use Symfony\Component\HttpFoundation\Request;
      use Symfony\Component\HttpFoundation\Response;

      // Assume $request is the current Request object
      // Assume $response is the Response object you've prepared
      // ...
      ```
    answers:
      -
        value: >
          `if ($response->isNotModified($request)) { return $response; }`
        correct: true
      -
        value: >
          `if ($request->isNotModified($response)) { return $response; }`
        correct: false
      -
        value: >
          `if ($response->isFresh($request)) { return $response; }`
        correct: false
      -
        value: >
          `if ($response->matchesEtag($request)) { return $response->setStatusCode(304); }`
        correct: false
    help: |
      The `isNotModified()` method of the `Response` object checks if the response validators (ETag, Last-Modified) match the conditional values in the request. If they do, it sets the status to 304 and removes the content.
      https://symfony.com/doc/current/components/http_foundation.html#http-cache-validation

  -
    question: >
      Which method of the `Symfony\Component\HttpFoundation\Response` object can be used to immediately expire a response, forcing caches to revalidate it on the next request?
    answers:
      -
        value: >
          `expire()`
        correct: true
      -
        value: >
          `invalidate()`
        correct: false
      -
        value: >
          `clearCache()`
        correct: false
      -
        value: >
          `setExpires(new \DateTime('now -1 day'))`
        correct: true
    help: |
      The `expire()` method sets the `Expires` header to a past date and `Cache-Control` to `no-cache`, effectively expiring the response. Setting `Expires` to a past date also achieves this.
      https://symfony.com/doc/current/http_cache.html#marking-a-response-as-stale

  -
    question: |
      How do you set a new HTTP cookie named `my_cookie` with the value `test_value` on a Symfony `Response` object?

      ```php
      use Symfony\Component\HttpFoundation\Response;
      use Symfony\Component\HttpFoundation\Cookie;

      $response = new Response();
      // ... set cookie
      ```
    answers:
      -
        value: >
          `$response->headers->setCookie(Cookie::create('my_cookie', 'test_value'));`
        correct: true
      -
        value: >
          `$response->setCookie('my_cookie', 'test_value');`
        correct: false
      -
        value: >
          `$response->cookies->add(new Cookie('my_cookie', 'test_value'));`
        correct: false
      -
        value: >
          `$response->addCookie('my_cookie', 'test_value');`
        correct: false
    help: |
      Cookies are managed via the `headers` property of the `Response` object using the `setCookie()` method, which accepts a `Cookie` object.
      https://symfony.com/doc/current/components/http_foundation.html#cookies

  -
    question: |
      You need to remove a cookie named `session_id` from the client's browser. Which of the following is the correct way to clear it using a Symfony `Response` object?

      ```php
      use Symfony\Component\HttpFoundation\Response;

      $response = new Response();
      // ... clear cookie
      ```
    answers:
      -
        value: >
          `$response->headers->clearCookie('session_id');`
        correct: true
      -
        value: >
          `$response->removeCookie('session_id');`
        correct: false
      -
        value: >
          `$response->cookies->delete('session_id');`
        correct: false
      -
        value: >
          `$response->headers->setCookie(Cookie::create('session_id', null, -1));`
        correct: true
    help: |
      The `clearCookie()` method on `ResponseHeaderBag` (accessed via `$response->headers`) is used to clear a cookie. Setting a cookie with a past expiration date also effectively clears it.
      https://symfony.com/doc/current/components/http_foundation.html#cookies

  -
    question: |
      How do you access a cookie named `PHPSESSID` from a `Symfony\Component\HttpFoundation\Request` object?

      ```php
      use Symfony\Component\HttpFoundation\Request;

      $request = Request::createFromGlobals();
      // ... get cookie value
      ```
    answers:
      -
        value: >
          `$request->cookies->get('PHPSESSID');`
        correct: true
      -
        value: >
          `$request->getCookie('PHPSESSID');`
        correct: false
      -
        value: >
          `$request->headers->get('Cookie')['PHPSESSID'];`
        correct: false
      -
        value: >
          `$request->cookie['PHPSESSID'];`
        correct: false
    help: |
      Cookies sent by the client are accessed via the `cookies` property of the `Request` object.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#accessing-request-data

  -
    question: >
      What is the primary purpose of the `SameSite` attribute for HTTP cookies?
    answers:
      -
        value: >
          To prevent cross-site request forgery (CSRF) attacks by controlling when cookies are sent with cross-site requests.
        correct: true
      -
        value: >
          To ensure cookies are only sent over secure (HTTPS) connections.
        correct: false
      -
        value: >
          To limit the cookie's availability to a specific subdomain.
        correct: false
      -
        value: >
          To make the cookie inaccessible to client-side JavaScript.
        correct: false
    help: |
      The `SameSite` attribute helps mitigate CSRF attacks by controlling whether cookies are sent with cross-site requests. Common values are `Lax`, `Strict`, and `None`.
      https://symfony.com/doc/current/components/http_foundation.html#samesite-cookie-attribute

  -
    question: |
      You need to download a very large file using Symfony's HTTP Client without exhausting memory. Which method allows you to process the response content in chunks?

      ```php
      use Symfony\Contracts\HttpClient\HttpClientInterface;

      // Assume $client is an HttpClientInterface instance
      $response = $client->request('GET', 'https://large-file.example.com/data.zip');

      // ... stream the response
      ```
    answers:
      -
        value: |
          ```php
          foreach ($client->stream($response) as $chunk) {
              // process $chunk->getContent()
          }
          ```
        correct: true
      -
        value: >
          `$response->toStream();`
        correct: true
      -
        value: >
          `$response->getChunks();`
        correct: false
      -
        value: >
          `$response->streamContent();`
        correct: false
    help: |
      The `stream()` method of `HttpClientInterface` allows processing responses chunk by chunk. `toStream()` on `ResponseInterface` returns a PHP stream resource for the body.
      https://symfony.com/doc/current/http_client.html#streaming-responses

  -
    question: |
      How can you cancel an ongoing HTTP request made with Symfony's HTTP Client before it completes?
    answers:
      -
        value: >
          Call `$response->cancel();` on the `ResponseInterface` object.
        correct: true
      -
        value: >
          Throw an exception from an `on_progress` callback.
        correct: true
      -
        value: >
          Call `$client->abort($response);`
        correct: false
      -
        value: >
          Set a very short `timeout` option on the request.
        correct: false
    help: |
      Requests can be cancelled by calling `cancel()` on the `ResponseInterface` object or by throwing an exception from within an `on_progress` callback.
      https://symfony.com/doc/current/http_client.html#cancelling-requests

  -
    question: |
      Which option should you set in the Symfony HTTP Client configuration to force HTTP/2 for all requests?
    answers:
      -
        value: |
          ```yaml
          # config/packages/framework.yaml
          framework:
              http_client:
                  default_options:
                      http_version: '2.0'
          ```
        correct: true
      -
        value: |
          ```yaml
          # config/packages/framework.yaml
          framework:
              http_client:
                  default_options:
                      version: '2.0'
          ```
        correct: false
      -
        value: |
          ```yaml
          # config/packages/framework.yaml
          framework:
              http_client:
                  enable_http2: true
          ```
        correct: false
      -
        value: |
          ```php
          $client = HttpClient::create(['protocol_version' => '2.0']);
          ```
        correct: false
    help: |
      The `http_version` option, set to `'2.0'`, forces the use of HTTP/2.
      https://symfony.com/doc/current/http_client.html#http-2-support

  -
    question: |
      You need to send an HTTP GET request to an API endpoint that requires HTTP Basic authentication with a specific username and password for *only this request*. How do you configure this using Symfony's HTTP Client?

      ```php
      use Symfony\Contracts\HttpClient\HttpClientInterface;

      // Assume $client is an HttpClientInterface instance
      $response = $client->request('GET', 'https://api.example.com/secure-data', [
          // ... authentication option here
      ]);
      ```
    answers:
      -
        value: |
          ```php
          'auth_basic' => ['username', 'password'],
          ```
        correct: true
      -
        value: |
          ```php
          'auth_basic' => 'username:password',
          ```
        correct: true
      -
        value: |
          ```php
          'headers' => ['Authorization' => 'Basic ' . base64_encode('username:password')],
          ```
        correct: true
      -
        value: |
          ```php
          'basic_auth' => ['username', 'password'],
          ```
        correct: false
    help: |
      The `auth_basic` option can accept an array `[username, password]` or a string `username:password`. Manually setting the `Authorization` header is also valid.
      https://symfony.com/doc/current/http_client.html#authentication

  -
    question: |
      How would you configure HTTP Bearer token authentication globally for a scoped client named `my_api` in `config/packages/framework.yaml`?
    answers:
      -
        value: |
          ```yaml
          # config/packages/framework.yaml
          framework:
              http_client:
                  scoped_clients:
                      my_api:
                          base_uri: 'https://my.api.com/'
                          auth_bearer: 'my_secret_token'
          ```
        correct: true
      -
        value: |
          ```yaml
          # config/packages/framework.yaml
          framework:
              http_client:
                  scoped_clients:
                      my_api:
                          base_uri: 'https://my.api.com/'
                          headers:
                              Authorization: 'Bearer my_secret_token'
          ```
        correct: true
      -
        value: |
          ```yaml
          # config/packages/framework.yaml
          framework:
              http_client:
                  scoped_clients:
                      my_api:
                          base_uri: 'https://my.api.com/'
                          bearer_token: 'my_secret_token'
          ```
        correct: false
      -
        value: |
          ```yaml
          # config/packages/framework.yaml
          framework:
              http_client:
                  default_options:
                      auth_bearer: 'my_secret_token'
          ```
        correct: false
    help: |
      The `auth_bearer` option is used for Bearer token authentication. Alternatively, you can manually set the `Authorization` header.
      https://symfony.com/doc/current/http_client.html#authentication

  -
    question: |
      Which Symfony HTTP Client class is specifically designed to handle URI templates (e.g., `/{resource}/{id}`), allowing variables to be expanded into the URL?
    answers:
      -
        value: >
          `UriTemplateHttpClient`
        correct: true
      -
        value: >
          `UrlTemplateHttpClient`
        correct: false
      -
        value: >
          `PathTemplateHttpClient`
        correct: false
      -
        value: >
          `RouteHttpClient`
        correct: false
    help: |
      `UriTemplateHttpClient` is a specialized client for working with URI templates.
      https://symfony.com/doc/current/http_client.html#uri-templates

  -
    question: >
      Which HTTP request header is primarily used by clients to indicate the preferred media types (MIME types) for the response?
    answers:
      -
        value: >
          `Content-Type`
        correct: false
      -
        value: >
          `Accept`
        correct: true
      -
        value: >
          `Content-Encoding`
        correct: false
      -
        value: >
          `Media-Type`
        correct: false
    help: |
      The `Accept` header specifies the media types that are acceptable for the response.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-accept-headers

  -
    question: |
      Given a `Symfony\Component\HttpFoundation\Request` object, which method returns an array of acceptable content types, ordered by descending quality?

      ```php
      use Symfony\Component\HttpFoundation\Request;

      $request = Request::createFromGlobals();
      $contentTypes = $request->/* ??? */;
      ```
    answers:
      -
        value: >
          `getAcceptableContentTypes()`
        correct: true
      -
        value: >
          `getPreferredContentTypes()`
        correct: false
      -
        value: >
          `getAcceptTypes()`
        correct: false
      -
        value: >
          `getMediaTypes()`
        correct: false
    help: |
      The `getAcceptableContentTypes()` method parses the `Accept` header and returns an ordered list of content types.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-accept-headers

  -
    question: |
      To determine the client's preferred languages based on the `Accept-Language` header, which method of the `Symfony\Component\HttpFoundation\Request` object should you use?

      ```php
      use Symfony\Component\HttpFoundation\Request;

      $request = Request::createFromGlobals();
      $languages = $request->/* ??? */;
      ```
    answers:
      -
        value: >
          `getLanguages()`
        correct: true
      -
        value: >
          `getPreferredLanguages()`
        correct: false
      -
        value: >
          `getAcceptLanguages()`
        correct: false
      -
        value: >
          `getLocale()`
        correct: false
    help: |
      The `getLanguages()` method parses the `Accept-Language` header and returns an ordered list of preferred languages.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#accessing-request-data

  -
    question: >
      When using `Symfony\Component\HttpClient\HttpClient::create()`, what is the order of preference for selecting the underlying HTTP transport (e.g., cURL, Amp, Native PHP streams)?
    answers:
      -
        value: >
          cURL, then AmpHttpClient, then NativeHttpClient.
        correct: true
      -
        value: >
          NativeHttpClient, then cURL, then AmpHttpClient.
        correct: false
      -
        value: >
          AmpHttpClient, then cURL, then NativeHttpClient.
        correct: false
      -
        value: >
          It's random based on system configuration.
        correct: false
    help: |
      `HttpClient::create()` prioritizes cURL, then falls back to AmpHttpClient, and finally to NativeHttpClient based on available extensions and packages.
      https://symfony.com/doc/current/http_client.html#choosing-the-http-client-implementation

  -
    question: |
      Which Symfony HTTP Client class is designed for testing and allows you to define predefined responses or use a callback to generate responses dynamically?
    answers:
      -
        value: >
          `MockHttpClient`
        correct: true
      -
        value: >
          `TestHttpClient`
        correct: false
      -
        value: >
          `FakeHttpClient`
        correct: false
      -
        value: >
          `SimulatedHttpClient`
        correct: false
    help: |
      `MockHttpClient` is specifically designed for testing HTTP client interactions.
      https://symfony.com/doc/current/http_client.html#mocking-responses

  -
    question: |
      You are writing a test for a service that uses `HttpClientInterface`. How can you create a `MockHttpClient` that returns a specific `MockResponse` for any request?

      ```php
      use Symfony\Component\HttpClient\MockHttpClient;
      use Symfony\Component\HttpClient\Response\MockResponse;

      // ... create mock client
      ```
    answers:
      -
        value: >
          `new MockHttpClient([new MockResponse('Mocked body', ['status' => 200])]);`
        correct: true
      -
        value: >
          `new MockHttpClient(function () { return new MockResponse('Mocked body'); });`
        correct: true
      -
        value: >
          `MockHttpClient::create(new MockResponse('Mocked body'));`
        correct: false
      -
        value: >
          `new MockHttpClient('Mocked body');`
        correct: false
    help: |
      `MockHttpClient` can be constructed with an array of `MockResponse` objects or a callable that returns a `MockResponse`.
      https://symfony.com/doc/current/http_client.html#mocking-responses

  -
    question: >
      What is the purpose of `HarFileResponseFactory` in Symfony's HTTP Client testing utilities?
    answers:
      -
        value: >
          To generate HTTP requests from HAR (HTTP Archive) files.
        correct: false
      -
        value: >
          To record HTTP client interactions into a HAR file for later analysis.
        correct: false
      -
        value: >
          To create mock responses for the HTTP client based on recorded HTTP interactions in a HAR file.
        correct: true
      -
        value: >
          To convert HAR files into PHP arrays for easy processing.
        correct: false
    help: |
      `HarFileResponseFactory` allows creating mock responses from HAR files, which contain recorded HTTP traffic, for realistic testing.
      https://symfony.com/doc/current/http_client.html#testing-with-har-files

  -
    question: |
      After a `MockHttpClient` has been used, how can you inspect the HTTP method that was sent by the code under test to the mock client?

      ```php
      use Symfony\Component\HttpClient\MockHttpClient;
      use Symfony\Component\HttpClient\Response\MockResponse;

      $mockResponse = new MockResponse('...');
      $client = new MockHttpClient([$mockResponse]);
      $client->request('POST', 'https://example.com/data');

      $method = $mockResponse->/* ??? */;
      ```
    answers:
      -
        value: >
          `getRequestMethod()`
        correct: true
      -
        value: >
          `getMethod()`
        correct: false
      -
        value: >
          `getSentMethod()`
        correct: false
      -
        value: >
          `getRequestOptions()['method']`
        correct: true
    help: |
      `MockResponse` provides `getRequestMethod()` and `getRequestOptions()` to inspect the details of the request that was made to the mock client.
      https://symfony.com/doc/current/http_client.html#mockresponse-request-inspection-methods

  -
    question: |
      Which static method of `Symfony\Component\HttpFoundation\HeaderUtils` can be used to properly quote a string for use in an HTTP header value, handling internal quotes?

      ```php
      use Symfony\Component\HttpFoundation\HeaderUtils;

      $quotedString = HeaderUtils::/* ??? */('foo "bar"');
      // Expected: '"foo \\"bar\\""'
      ```
    answers:
      -
        value: >
          `quote()`
        correct: true
      -
        value: >
          `escape()`
        correct: false
      -
        value: >
          `format()`
        correct: false
      -
        value: >
          `addQuotes()`
        correct: false
    help: |
      The `quote()` method handles the proper quoting of strings for HTTP header values, including escaping internal double quotes.
      https://symfony.com/doc/current/components/http_foundation.html#headerutils

  -
    question: >
      What is the primary benefit of using `Symfony\Component\HttpFoundation\StreamedResponse`?
    answers:
      -
        value: >
          It allows sending large files or dynamically generated content incrementally to the client, reducing memory usage.
        correct: true
      -
        value: >
          It automatically compresses the response content using Gzip or Deflate.
        correct: false
      -
        value: >
          It provides built-in support for Server-Sent Events (SSE).
        correct: false
      -
        value: >
          It enables automatic caching of the response on the client side.
        correct: false
    help: |
      `StreamedResponse` allows you to stream content to the client, which is beneficial for large files or long-running processes, as it avoids loading the entire response into memory.
      https://symfony.com/doc/current/components/http_foundation.html#streaming-a-response

  -
    question: >
      Which of the following HTTP methods are considered both **safe** and **idempotent**?
    answers:
      -
        value: >
          GET
        correct: true
      -
        value: >
          HEAD
        correct: true
      -
        value: >
          PUT
        correct: false
      -
        value: >
          DELETE
        correct: false
      -
        value: >
          POST
        correct: false
    help: |
      GET and HEAD methods are safe (they don't change server state) and idempotent (multiple identical requests have the same effect as a single one). PUT and DELETE are idempotent but not safe. POST is neither safe nor idempotent.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#http-methods

  -
    question: >
      Which of the following HTTP methods is considered **idempotent** but **not safe**?
    answers:
      -
        value: >
          GET
        correct: false
      -
        value: >
          POST
        correct: false
      -
        value: >
          PUT
        correct: true
      -
        value: >
          HEAD
        correct: false
      -
        value: >
          DELETE
        correct: true
    help: |
      PUT and DELETE are idempotent because applying them multiple times has the same effect as applying them once. However, they are not safe because they modify the server's state.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#http-methods

  -
    question: >
      Which Symfony HTTP Client component allows you to integrate with PSR-18 (HTTP Client) and PSR-7 (HTTP Message) compatible libraries?
    answers:
      -
        value: >
          `HttplugClient`
        correct: true
      -
        value: >
          `PsrHttpClient`
        correct: false
      -
        value: >
          `BridgeHttpClient`
        correct: false
      -
        value: >
          `AdapterHttpClient`
        correct: false
    help: |
      `HttplugClient` provides a bridge between Symfony's HTTP Client and the HTTPlug (PSR-18/PSR-7) ecosystem.
      https://symfony.com/doc/current/http_client.html#integrating-with-psr-18-http-client-and-psr-7-http-message

  -
    question: >
      What is the primary purpose of the `ThrottlingHttpClient` introduced in Symfony 7.1?
    answers:
      -
        value: >
          To limit the number of concurrent requests made to a specific host or globally.
        correct: true
      -
        value: >
          To automatically retry failed HTTP requests with exponential backoff.
        correct: false
      -
        value: >
          To add a delay to all requests to simulate slow network conditions.
        correct: false
      -
        value: >
          To cache responses based on rate limits.
        correct: false
    help: |
      `ThrottlingHttpClient` is used to limit the rate of requests, preventing a client from overwhelming a server or exceeding API rate limits.
      https://symfony.com/doc/current/http_client.html#throttling-requests

  -
    question: >
      Which HTTP status code indicates that the request has been successfully processed and a new resource has been created as a result?
    answers:
      -
        value: >
          200 OK
        correct: false
      -
        value: >
          201 Created
        correct: true
      -
        value: >
          202 Accepted
        correct: false
      -
        value: >
          204 No Content
        correct: false
    help: |
      The 201 Created status code indicates that the request has succeeded and has led to the creation of a resource.
      https://www.php.net/manual/en/function.http-response-code.php (General HTTP knowledge, Symfony uses these codes)

  -
    question: >
      What does an HTTP status code in the 3xx range (e.g., 301, 302) typically signify?
    answers:
      -
        value: >
          Client-side error.
        correct: false
      -
        value: >
          Server-side error.
        correct: false
      -
        value: >
          Redirection.
        correct: true
      -
        value: >
          Successful response.
        correct: false
    help: |
      3xx status codes indicate that further action needs to be taken by the user agent to fulfill the request, usually involving a redirect.
      https://www.php.net/manual/en/function.http-response-code.php (General HTTP knowledge, Symfony uses these codes)

  -
    question: >
      Which HTTP status code is used to indicate that the requested resource has been permanently moved to a new URI?
    answers:
      -
        value: >
          301 Moved Permanently
        correct: true
      -
        value: >
          302 Found
        correct: false
      -
        value: >
          303 See Other
        correct: false
      -
        value: >
          307 Temporary Redirect
        correct: false
    help: |
      The 301 Moved Permanently status code indicates that the resource has been assigned a new permanent URI and any future references to this resource should use one of the enclosed URIs.
      https://www.php.net/manual/en/function.http-response-code.php (General HTTP knowledge, Symfony uses these codes)

  -
    question: >
      What does an HTTP status code of `404 Not Found` indicate?
    answers:
      -
        value: >
          The server encountered an unexpected condition that prevented it from fulfilling the request.
        correct: false
      -
        value: >
          The client is not authenticated to access the resource.
        correct: false
      -
        value: >
          The server could not find the requested resource.
        correct: true
      -
        value: >
          The request was malformed or invalid.
        correct: false
    help: |
      The 404 Not Found status code indicates that the origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
      https://www.php.net/manual/en/function.http-response-code.php (General HTTP knowledge, Symfony uses these codes)

  -
    question: >
      Which HTTP status code signifies that the server is temporarily unable to handle the request due to maintenance or overload?
    answers:
      -
        value: >
          500 Internal Server Error
        correct: false
      -
        value: >
          502 Bad Gateway
        correct: false
      -
        value: >
          503 Service Unavailable
        correct: true
      -
        value: >
          504 Gateway Timeout
        correct: false
    help: |
      The 503 Service Unavailable status code indicates that the server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
      https://www.php.net/manual/en/function.http-response-code.php (General HTTP knowledge, Symfony uses these codes)

  -
    question: |
      When sending a file upload using Symfony's HTTP Client, which option is typically used to specify the file content?
    answers:
      -
        value: >
          `'body' => fopen('/path/to/file.txt', 'r')`
        correct: true
      -
        value: >
          `'file' => '/path/to/file.txt'`
        correct: false
      -
        value: >
          `'upload' => new \SplFileObject('/path/to/file.txt')`
        correct: false
      -
        value: >
          `'multipart' => [['name' => 'file', 'contents' => fopen('/path/to/file.txt', 'r')]]`
        correct: false
    help: |
      The `body` option can accept a PHP resource (like a file handle) for uploading data. For multipart forms, `FormDataPart` is used.
      https://symfony.com/doc/current/http_client.html#uploading-data

  -
    question: >
      What is the purpose of the `on_progress` callback option when making a request with Symfony's HTTP Client?
    answers:
      -
        value: >
          To log the progress of the request to a file.
        correct: false
      -
        value: >
          To update a progress bar or perform actions as data is downloaded or uploaded.
        correct: true
      -
        value: >
          To cancel the request if it exceeds a certain download size.
        correct: true
      -
        value: >
          To modify the request headers during the transfer.
        correct: false
    help: |
      The `on_progress` callback allows you to monitor the download/upload progress and can also be used to cancel the request by throwing an exception.
      https://symfony.com/doc/current/http_client.html#on-progress-callback

  -
    question: >
      Which HTTP header is used by the client to indicate the character sets it prefers for the response?
    answers:
      -
        value: >
          `Content-Charset`
        correct: false
      -
        value: >
          `Accept-Charset`
        correct: true
      -
        value: >
          `Charset`
        correct: false
      -
        value: >
          `Encoding`
        correct: false
    help: |
      The `Accept-Charset` header specifies the character sets that are acceptable for the response.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-accept-headers

  -
    question: >
      Which HTTP header is used by the client to indicate the content encodings (e.g., gzip, deflate) it understands for the response?
    answers:
      -
        value: >
          `Content-Encoding`
        correct: false
      -
        value: >
          `Transfer-Encoding`
        correct: false
      -
        value: >
          `Accept-Encoding`
        correct: true
      -
        value: >
          `Encoding-Type`
        correct: false
    help: |
      The `Accept-Encoding` header specifies the content encodings that are acceptable for the response.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-accept-headers

  -
    question: >
      When a Symfony `Response` object is created with a `Cache-Control: private` directive, what does it imply about caching?
    answers:
      -
        value: >
          The response can be cached by shared (proxy) caches.
        correct: false
      -
        value: >
          The response can only be cached by the client's browser, not by shared caches.
        correct: true
      -
        value: >
          The response should never be cached by any mechanism.
        correct: false
      -
        value: >
          The response requires authentication to be cached.
        correct: false
    help: |
      The `private` directive indicates that the response is intended for a single user and must not be stored by a shared cache. It can be stored by a private cache (e.g., browser cache).
      https://symfony.com/doc/current/http_cache/expiration.html#cache-control

  -
    question: >
      What is the primary difference between `max-age` and `s-maxage` directives in the `Cache-Control` header?
    answers:
      -
        value: >
          `max-age` applies to shared caches, while `s-maxage` applies to private caches.
        correct: false
      -
        value: >
          `max-age` is for HTTP/1.0, while `s-maxage` is for HTTP/1.1.
        correct: false
      -
        value: >
          `max-age` applies to both private and shared caches, while `s-maxage` applies only to shared caches.
        correct: true
      -
        value: >
          `max-age` specifies a time in seconds, while `s-maxage` specifies a date.
        correct: false
    help: |
      `max-age` applies to both private and shared caches. `s-maxage` (short for "shared max-age") applies only to shared caches and overrides `max-age` for them.
      https://symfony.com/doc/current/http_cache/expiration.html#cache-control

  -
    question: >
      Which HTTP status code is used for a successful response with no content to return?
    answers:
      -
        value: >
          200 OK
        correct: false
      -
        value: >
          201 Created
        correct: false
      -
        value: >
          204 No Content
        correct: true
      -
        value: >
          205 Reset Content
        correct: false
    help: |
      The 204 No Content status code indicates that the server has successfully fulfilled the request and that there is no content to send in the response payload body.
      https://www.php.net/manual/en/function.http-response-code.php (General HTTP knowledge, Symfony uses these codes)

  -
    question: >
      What is the purpose of the `Last-Modified` HTTP response header?
    answers:
      -
        value: >
          To indicate the date and time the resource was last modified, used for conditional requests.
        correct: true
      -
        value: >
          To specify the date and time the response was generated.
        correct: false
      -
        value: >
          To set the expiration date for the cached resource.
        correct: false
      -
        value: >
          To indicate the content's freshness lifetime.
        correct: false
    help: |
      The `Last-Modified` header provides a timestamp indicating when the resource was last changed, allowing clients to make conditional requests using `If-Modified-Since`.
      https://symfony.com/doc/current/http_cache/expiration.html#validation-with-last-modified

  -
    question: >
      When a client sends an `If-Modified-Since` header, and the resource has not been modified since that date, what HTTP status code should the server return?
    answers:
      -
        value: >
          200 OK
        correct: false
      -
        value: >
          304 Not Modified
        correct: true
      -
        value: >
          412 Precondition Failed
        correct: false
      -
        value: >
          404 Not Found
        correct: false
    help: |
      If the resource has not been modified since the date specified in `If-Modified-Since`, the server should return a 304 Not Modified response.
      https://symfony.com/doc/current/http_cache/expiration.html#validation-with-last-modified

  -
    question: >
      Which of the following describes the `HTTP_HOST` server parameter accessed via `$request->server->get('HTTP_HOST')` in Symfony?
    answers:
      -
        value: >
          The path component of the request URI.
        correct: false
      -
        value: >
          The name of the host from the `Host` HTTP header.
        correct: true
      -
        value: >
          The IP address of the client.
        correct: false
      -
        value: >
          The port number of the server.
        correct: false
    help: |
      `$request->server->get('HTTP_HOST')` retrieves the value of the `Host` HTTP header, which specifies the domain name of the server.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#accessing-request-data

  -
    question: >
      What is the purpose of the `partitioned` attribute for cookies, introduced in Symfony 7.0?
    answers:
      -
        value: >
          To allow cookies to be shared across different subdomains of the same top-level domain.
        correct: false
      -
        value: >
          To enable cookies to be sent only to specific paths within a domain.
        correct: false
      -
        value: >
          To allow cookies to be stored in partitioned storage, preventing them from being sent in cross-site contexts unless explicitly allowed.
        correct: true
      -
        value: >
          To encrypt the cookie value before sending it to the client.
        correct: false
    help: |
      The `partitioned` attribute, used with CHIPS (Cookies Having Independent Partitioned State), allows cookies to be stored in partitioned storage, improving privacy by limiting cross-site tracking.
      https://symfony.com/doc/current/components/http_foundation.html#partitioned-cookie-attribute

  -
    question: >
      Which method of `Symfony\Component\HttpFoundation\Request` should you use to retrieve uploaded files?
    answers:
      -
        value: >
          `$request->files->get('attachment');`
        correct: true
      -
        value: >
          `$request->getUploadedFile('attachment');`
        correct: false
      -
        value: >
          `$request->file('attachment');`
        correct: false
      -
        value: >
          `$request->attachments->get('attachment');`
        correct: false
    help: |
      Uploaded files are accessed via the `files` property of the `Request` object.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#accessing-request-data

  -
    question: >
      What is the default HTTP status code for a `Symfony\Component\HttpFoundation\Response` object if not explicitly set?
    answers:
      -
        value: >
          200 OK
        correct: true
      -
        value: >
          204 No Content
        correct: false
      -
        value: >
          302 Found
        correct: false
      -
        value: >
          500 Internal Server Error
        correct: false
    help: |
      By default, a new `Response` object has a status code of 200 OK.
      https://symfony.com/doc/current/components/http_foundation.html#creating-a-response

  -
    question: >
      Which of the following HTTP methods is typically used to retrieve only the headers of a resource, without the body?
    answers:
      -
        value: >
          GET
        correct: false
      -
        value: >
          OPTIONS
        correct: false
      -
        value: >
          HEAD
        correct: true
      -
        value: >
          TRACE
        correct: false
    help: |
      The HEAD method is identical to GET except that the server MUST NOT return a message-body in the response.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#http-methods

  -
    question: >
      What is the primary purpose of the `Content-Type` HTTP header in a response?
    answers:
      -
        value: >
          To specify the character encoding of the response.
        correct: false
      -
        value: >
          To indicate the media type of the resource returned in the response body.
        correct: true
      -
        value: >
          To suggest the default filename for a downloaded resource.
        correct: false
      -
        value: >
          To declare the language of the content.
        correct: false
    help: |
      The `Content-Type` header indicates the media type of the original representation (e.g., `text/html`, `application/json`).
      https://symfony.com/doc/current/introduction/http_fundamentals.html#http-response

  -
    question: >
      Which Symfony component provides classes like `Request`, `Response`, and `Cookie` to abstract the HTTP layer?
    answers:
      -
        value: >
          `HttpKernel`
        correct: false
      -
        value: >
          `HttpFoundation`
        correct: true
      -
        value: >
          `HttpClient`
        correct: false
      -
        value: >
          `Http`
        correct: false
    help: |
      The `HttpFoundation` component provides an object-oriented layer for the HTTP specification.
      https://symfony.com/doc/current/components/http_foundation.html

  -
    question: >
      When configuring a Symfony HTTP Client, what is the effect of setting the `base_uri` option?
    answers:
      -
        value: >
          It defines the default protocol (HTTP or HTTPS) for all requests.
        correct: false
      -
        value: >
          It specifies a base URL that relative request URLs will be resolved against.
        correct: true
      -
        value: >
          It sets the default host header for all requests.
        correct: false
      -
        value: >
          It configures a proxy server for all requests.
        correct: false
    help: |
      The `base_uri` option allows you to define a base URL, making it easier to send requests to the same domain without repeating the full URL.
      https://symfony.com/doc/current/http_client.html#base-uri

  -
    question: >
      What is the purpose of the `Connection: close` header in an HTTP response?
    answers:
      -
        value: >
          It instructs the client to close the TCP connection after the response is sent.
        correct: true
      -
        value: >
          It indicates that the server is shutting down.
        correct: false
      -
        value: >
          It signals an error in the connection.
        correct: false
      -
        value: >
          It forces the client to use a new connection for subsequent requests.
        correct: true
    help: |
      The `Connection: close` header indicates that the sender will close the TCP connection after completion of the current response. This forces the client to open a new connection for any subsequent requests.
      https://www.php.net/manual/en/function.http-response-code.php (General HTTP knowledge)

  -
    question: >
      Which HTTP status code indicates that the request could not be understood by the server due to malformed syntax?
    answers:
      -
        value: >
          400 Bad Request
        correct: true
      -
        value: >
          401 Unauthorized
        correct: false
      -
        value: >
          403 Forbidden
        correct: false
      -
        value: >
          405 Method Not Allowed
        correct: false
    help: |
      The 400 Bad Request status code indicates that the server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
      https://www.php.net/manual/en/function.http-response-code.php (General HTTP knowledge, Symfony uses these codes)

  -
    question: >
      What is the meaning of the HTTP status code `401 Unauthorized`?
    answers:
      -
        value: >
          The client does not have sufficient permissions to access the resource.
        correct: false
      -
        value: >
          The client must authenticate itself to get the requested response.
        correct: true
      -
        value: >
          The server understands the request but refuses to authorize it.
        correct: false
      -
        value: >
          The authentication credentials provided are invalid.
        correct: false
    help: |
      The 401 Unauthorized status code indicates that the client request has not been completed because it lacks valid authentication credentials for the requested resource.
      https://www.php.net/manual/en/function.http-response-code.php (General HTTP knowledge, Symfony uses these codes)

  -
    question: >
      Which HTTP status code indicates that the server understood the request but refuses to authorize it, even with valid credentials?
    answers:
      -
        value: >
          401 Unauthorized
        correct: false
      -
        value: >
          403 Forbidden
        correct: true
      -
        value: >
          404 Not Found
        correct: false
      -
        value: >
          407 Proxy Authentication Required
        correct: false
    help: |
      The 403 Forbidden status code indicates that the server understood the request but refuses to authorize it. This status is similar to 401 Unauthorized, but indicates that re-authenticating will not make a difference.
      https://www.php.net/manual/en/function.http-response-code.php (General HTTP knowledge, Symfony uses these codes)

  -
    question: >
      What is the primary role of the `User-Agent` HTTP request header?
    answers:
      -
        value: >
          To specify the preferred language of the client.
        correct: false
      -
        value: >
          To indicate the client's operating system and browser/application.
        correct: true
      -
        value: >
          To provide authentication credentials.
        correct: false
      -
        value: >
          To define the content type of the request body.
        correct: false
    help: |
      The `User-Agent` header is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting user agent.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#http-request (General HTTP knowledge)

  -
    question: >
      Which of the following is a valid way to set multiple cache-related headers on a Symfony `Response` object in a single call?
    answers:
      -
        value: >
          `$response->setCache(['max_age' => 3600, 'public' => true, 'etag' => 'abc']);`
        correct: true
      -
        value: >
          `$response->setCacheControl(['max-age' => 3600, 'public' => true]);`
        correct: false
      -
        value: >
          `$response->addCacheHeaders(['max_age' => 3600, 'public' => true]);`
        correct: false
      -
        value: >
          `$response->configureCache(3600, true);`
        correct: false
    help: |
      The `setCache()` method allows setting multiple cache directives in one call using an associative array of options.
      https://symfony.com/doc/current/components/http_foundation.html#http-cache-validation

  -
    question: >
      What is the purpose of the `stale-while-revalidate` directive in the `Cache-Control` header?
    answers:
      -
        value: >
          It allows a cache to serve a stale response while it revalidates it in the background.
        correct: true
      -
        value: >
          It forces the cache to revalidate the response immediately if it's stale.
        correct: false
      -
        value: >
          It specifies that the response should never be revalidated.
        correct: false
      -
        value: >
          It indicates that the response is always fresh.
        correct: false
    help: |
      The `stale-while-revalidate` directive allows a cache to immediately serve a stale response to the client while it asynchronously revalidates the response with the origin server.
      https://symfony.com/doc/current/components/http_foundation.html#http-cache-validation (via `setStaleWhileRevalidate`)

  -
    question: >
      Which HTTP status code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request?
    answers:
      -
        value: >
          400 Bad Request
        correct: false
      -
        value: >
          404 Not Found
        correct: false
      -
        value: >
          500 Internal Server Error
        correct: true
      -
        value: >
          503 Service Unavailable
        correct: false
    help: |
      The 500 Internal Server Error status code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.
      https://www.php.net/manual/en/function.http-response-code.php (General HTTP knowledge, Symfony uses these codes)

  -
    question: >
      When using Symfony's HTTP Client, if you need to pass query string parameters to a GET request, which option should you use?
    answers:
      -
        value: >
          `'query' => ['param1' => 'value1', 'param2' => 'value2']`
        correct: true
      -
        value: >
          `'params' => ['param1' => 'value1', 'param2' => 'value2']`
        correct: false
      -
        value: >
          `'url_params' => ['param1' => 'value1', 'param2' => 'value2']`
        correct: false
      -
        value: >
          `'get' => ['param1' => 'value1', 'param2' => 'value2']`
        correct: false
    help: |
      The `query` option is used to add query string parameters to the request URL. These values are automatically URL-encoded.
      https://symfony.com/doc/current/http_client.html#query-string-parameters

  -
    question: >
      What is the purpose of the `Content-Length` HTTP header in a response?
    answers:
      -
        value: >
          To specify the maximum length of the response body that the client can accept.
        correct: false
      -
        value: >
          To indicate the size of the response body in bytes.
        correct: true
      -
        value: >
          To define the length of the HTTP headers.
        correct: false
      -
        value: >
          To limit the number of characters in the response.
        correct: false
    help: |
      The `Content-Length` header indicates the size of the entity-body, in octets, sent to the recipient.
      https://www.php.net/manual/en/function.http-response-code.php (General HTTP knowledge)

  -
    question: >
      Which of the following accurately describes the `HTTP/1.1 200 OK` status line?
    answers:
      -
        value: >
          `HTTP/1.1` is the protocol version, `200` is the status code, and `OK` is the reason phrase.
        correct: true
      -
        value: >
          `HTTP/1.1` is the server version, `200` is the response ID, and `OK` is a custom message.
        correct: false
      -
        value: >
          `HTTP/1.1` is the request method, `200` is the success count, and `OK` confirms the connection.
        correct: false
      -
        value: >
          `HTTP/1.1` is the client version, `200` is the transaction ID, and `OK` means the request was cached.
        correct: false
    help: |
      The status line consists of the HTTP version, a three-digit status code, and a textual reason phrase.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#http-response

  -
    question: >
      What is the primary function of the `Host` HTTP request header?
    answers:
      -
        value: >
          To specify the IP address of the server.
        correct: false
      -
        value: >
          To indicate the domain name of the server to which the request is being sent.
        correct: true
      -
        value: >
          To define the port number on which the server is listening.
        correct: false
      -
        value: >
          To identify the client's hostname.
        correct: false
    help: |
      The `Host` header specifies the domain name of the server (for virtual hosting) and optionally the port number.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#http-request (General HTTP knowledge)

  -
    question: >
      Which of the following is a valid use case for the HTTP `OPTIONS` method?
    answers:
      -
        value: >
          To retrieve a resource from the server.
        correct: false
      -
        value: >
          To request information about the communication options available for the target resource or server.
        correct: true
      -
        value: >
          To submit data to be processed by the server.
        correct: false
      -
        value: >
          To delete a resource from the server.
        correct: false
    help: |
      The `OPTIONS` method is used to describe the communication options for the target resource. It allows the client to determine the options or requirements associated with a resource, or the capabilities of a server, without implying a resource action.
      https://www.php.net/manual/en/function.http-response-code.php (General HTTP knowledge)

  -
    question: >
      What is the main advantage of using `HttpClient::createForBaseUri()` over `HttpClient::create()` when making multiple requests to the same API?
    answers:
      -
        value: >
          It automatically adds authentication headers to all requests.
        correct: false
      -
        value: >
          It allows you to use relative URLs for subsequent requests, simplifying client code.
        correct: true
      -
        value: >
          It enables HTTP/2 by default for the specified base URI.
        correct: false
      -
        value: >
          It provides built-in caching for responses from that base URI.
        correct: false
    help: |
      `createForBaseUri()` creates a client with a predefined base URI, so you can use relative URLs for subsequent requests, making the code cleaner and less repetitive.
      https://symfony.com/doc/current/http_client.html#creating-a-scoped-client

  -
    question: >
      Which HTTP header is used to specify the date and time after which the response is considered stale?
    answers:
      -
        value: >
          `Date`
        correct: false
      -
        value: >
          `Expires`
        correct: true
      -
        value: >
          `Last-Modified`
        correct: false
      -
        value: >
          `Age`
        correct: false
    help: |
      The `Expires` header provides a date/time after which the response is considered stale.
      https://symfony.com/doc/current/components/http_foundation.html#http-cache-validation (via `setExpires`)

  -
    question: >
      What is the purpose of the `stale-if-error` directive in the `Cache-Control` header?
    answers:
      -
        value: >
          It instructs the cache to always serve a stale response if an error occurs during revalidation.
        correct: true
      -
        value: >
          It indicates that the response should be considered stale if any server error occurs.
        correct: false
      -
        value: >
          It defines a grace period during which a stale response can be served if the origin server returns an error.
        correct: true
      -
        value: >
          It prevents caching of responses that resulted from an error.
        correct: false
    help: |
      The `stale-if-error` directive indicates that a cache can serve a stale response when an error occurs during revalidation with the origin server, for a specified duration.
      https://symfony.com/doc/current/components/http_foundation.html#http-cache-validation (via `setStaleIfError`)

  -
    question: >
      Which of the following is the correct way to retrieve the `Accept-Language` header value from a Symfony `Request` object as a raw string?
    answers:
      -
        value: >
          `$request->headers->get('Accept-Language');`
        correct: true
      -
        value: >
          `$request->getLanguages();`
        correct: false
      -
        value: >
          `$request->server->get('HTTP_ACCEPT_LANGUAGE');`
        correct: true
      -
        value: >
          `$request->getHeader('Accept-Language');`
        correct: false
    help: |
      HTTP headers are accessed via the `headers` property of the `Request` object using `get()`. Alternatively, raw server parameters (which include HTTP headers prefixed with `HTTP_`) can be accessed via `server->get()`.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#accessing-request-data

  -
    question: >
      What is the primary role of the `Age` HTTP response header?
    answers:
      -
        value: >
          To indicate the time in seconds since the response was generated at the origin server.
        correct: true
      -
        value: >
          To specify the maximum age a cached response should be considered fresh.
        correct: false
      -
        value: >
          To define the expiration date of the response.
        correct: false
      -
        value: >
          To show how long the response has been stored in the cache.
        correct: false
    help: |
      The `Age` header indicates the age of the response at the time of sending, in seconds. It's typically added by a proxy server.
      https://www.php.net/manual/en/function.http-response-code.php (General HTTP knowledge)

  -
    question: >
      When a Symfony HTTP Client request is made, and the response is lazy, what does it mean for execution flow?
    answers:
      -
        value: >
          The request is sent, but the code execution pauses until the full response body is received.
        correct: false
      -
        value: >
          The request is sent, and the code execution continues immediately without waiting for the response.
        correct: true
      -
        value: >
          The request is only sent when a method like `getContent()` or `toArray()` is called.
        correct: true
      -
        value: >
          The client automatically retries the request if it fails.
        correct: false
    help: |
      Symfony's HTTP Client responses are lazy. The `request()` call returns immediately, and the actual network transfer and response processing only happen when you try to access the response content (e.g., `getContent()`, `toArray()`, `getHeaders()`).
      https://symfony.com/doc/current/http_client.html#lazy-responses

  -
    question: >
      Which HTTP status code indicates that the request method is not supported for the requested resource?
    answers:
      -
        value: >
          400 Bad Request
        correct: false
      -
        value: >
          403 Forbidden
        correct: false
      -
        value: >
          405 Method Not Allowed
        correct: true
      -
        value: >
          406 Not Acceptable
        correct: false
    help: |
      The 405 Method Not Allowed status code indicates that the method specified in the Request-Line is not allowed for the resource identified by the Request-URI.
      https://www.php.net/manual/en/function.http-response-code.php (General HTTP knowledge, Symfony uses these codes)

  -
    question: >
      What is the purpose of the `Transfer-Encoding` HTTP header?
    answers:
      -
        value: >
          To specify the encoding applied to the message body to ensure safe and proper transfer over HTTP.
        correct: true
      -
        value: >
          To indicate the character set of the response body.
        correct: false
      -
        value: >
          To define the content type of the message.
        correct: false
      -
        value: >
          To specify the compression algorithm used for the body.
        correct: false
    help: |
      The `Transfer-Encoding` header indicates the form of encoding used to safely transfer the entity-body over HTTP. Common values include `chunked`.
      https://www.php.net/manual/en/function.http-response-code.php (General HTTP knowledge)

  -
    question: >
      Which HTTP status code indicates that the server is acting as a gateway or proxy and received an invalid response from an upstream server?
    answers:
      -
        value: >
          500 Internal Server Error
        correct: false
      -
        value: >
          502 Bad Gateway
        correct: true
      -
        value: >
          504 Gateway Timeout
        correct: false
      -
        value: >
          503 Service Unavailable
        correct: false
    help: |
      The 502 Bad Gateway status code indicates that the server, while acting as a gateway or proxy, received an invalid response from an inbound server it accessed while attempting to fulfill the request.
      https://www.php.net/manual/en/function.http-response-code.php (General HTTP knowledge, Symfony uses these codes)

  -
    question: >
      What is the primary difference between `HttpClient::create()` and `HttpClient::createForBaseUri()` in Symfony's HTTP Client?
    answers:
      -
        value: >
          `create()` creates a client for standalone PHP scripts, while `createForBaseUri()` is for Symfony applications.
        correct: false
      -
        value: >
          `create()` creates a generic client, while `createForBaseUri()` creates a client pre-configured with a base URL and default options.
        correct: true
      -
        value: >
          `create()` uses cURL by default, while `createForBaseUri()` uses native PHP streams.
        correct: false
      -
        value: >
          `create()` is for synchronous requests, while `createForBaseUri()` is for asynchronous requests.
        correct: false
    help: |
      `createForBaseUri()` is a convenience method to create a client that automatically resolves relative URLs against a specified base URI and applies associated default options.
      https://symfony.com/doc/current/http_client.html#creating-a-scoped-client

  -
    question: >
      Which of the following is NOT a valid type of data that can be passed as the `body` option in a Symfony HTTP Client request?
    answers:
      -
        value: >
          A string.
        correct: false
      -
        value: >
          An array of parameters.
        correct: false
      -
        value: >
          A PHP resource (e.g., file handle).
        correct: false
      -
        value: >
          A `Symfony\Component\HttpFoundation\Response` object.
        correct: true
    help: |
      The `body` option can accept strings, arrays, callables, or resources. A `Response` object is not a valid type for the request body.
      https://symfony.com/doc/current/http_client.html#uploading-data

  -
    question: >
      What is the purpose of the `X-Debug-Token` header often found in Symfony's HTTP responses in a development environment?
    answers:
      -
        value: >
          It's a security token to prevent CSRF attacks.
        correct: false
      -
        value: >
          It's an identifier for the current request that can be used to access detailed profiling information in the Web Debug Toolbar.
        correct: true
      -
        value: >
          It indicates that the response is coming from a debug proxy.
        correct: false
      -
        value: >
          It's a unique ID for caching purposes.
        correct: false
    help: |
      The `X-Debug-Token` header provides a token that links the current request to its profiling data in the Symfony Web Debug Toolbar.
      https://symfony.com/doc/current/profiler.html#accessing-the-profiler-for-non-html-responses (General Symfony knowledge)