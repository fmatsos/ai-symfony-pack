category: HTTP

questions:
  -
    question: >
      Which of the following best describes the role of the HTTP protocol in a web application?
    answers:
      -
        value: >
          It defines how data is stored in a database.
        correct: false
      -
        value: >
          It specifies the communication rules between web clients and web servers.
        correct: true
      -
        value: >
          It handles server-side scripting logic.
        correct: false
      -
        value: >
          It manages user authentication and authorization.
        correct: false
    help: |
      HTTP (Hypertext Transfer Protocol) is the foundation of data communication for the World Wide Web, defining how clients (like browsers) and servers communicate.
      https://symfony.com/doc/current/introduction/http_fundamentals.html

  -
    question: |
      Consider the following raw PHP snippet for handling an HTTP request:

      ```php
      $uri = $_SERVER['REQUEST_URI'];
      $foo = $_GET['foo'];

      header('Content-Type: text/html');
      echo 'The URI requested is: '.$uri;
      echo 'The value of the "foo" parameter is: '.$foo;
      ```

      Which Symfony component provides an object-oriented abstraction for accessing `$uri` and `$foo`?
    answers:
      -
        value: >
          `Symfony\Component\Routing\Router`
        correct: false
      -
        value: >
          `Symfony\Component\HttpFoundation\Request`
        correct: true
      -
        value: >
          `Symfony\Component\HttpKernel\HttpKernel`
        correct: false
      -
        value: >
          `Symfony\Component\HttpClient\HttpClient`
        correct: false
    help: |
      The `Symfony\Component\HttpFoundation\Request` class provides an object-oriented way to interact with an HTTP request, abstracting away superglobal variables like `$_SERVER` and `$_GET`.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#accessing-request-data

  -
    question: >
      In the context of Symfony, what is the primary purpose of the `HttpKernel`?
    answers:
      -
        value: >
          To manage database connections.
        correct: false
      -
        value: >
          To handle an incoming `Request` and return a `Response`.
        correct: true
      -
        value: >
          To render Twig templates.
        correct: false
      -
        value: >
          To define command-line commands.
        correct: false
    help: |
      The `HttpKernel` is the core of a Symfony application, responsible for taking a `Request` object and converting it into a `Response` object.
      https://symfony.com/doc/current/components/http_kernel.html#basic-usage

  -
    question: >
      Which HTTP status code indicates that a request has been successfully processed and a new resource has been created?
    answers:
      -
        value: >
          200 OK
        correct: false
      -
        value: >
          201 Created
        correct: true
      -
        value: >
          204 No Content
        correct: false
      -
        value: >
          301 Moved Permanently
        correct: false
    help: |
      The 201 Created status code indicates that the request has been fulfilled and resulted in a new resource being created.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/201

  -
    question: >
      A client sends a request for a resource, and the server responds with a `304 Not Modified` status code. What does this imply?
    answers:
      -
        value: >
          The resource has been moved to a new URL.
        correct: false
      -
        value: >
          The client's request was malformed.
        correct: false
      -
        value: >
          The resource has not changed since the version the client has cached.
        correct: true
      -
        value: >
          The server encountered an internal error.
        correct: false
    help: |
      A 304 Not Modified response indicates that the resource has not been modified since the version specified by the request headers (e.g., `If-Modified-Since` or `If-None-Match`). The client should use its cached copy.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/304

  -
    question: >
      Which of the following HTTP status codes are typically used for client-side errors?
    answers:
      -
        value: >
          200 OK
        correct: false
      -
        value: >
          302 Found
        correct: false
      -
        value: >
          404 Not Found
        correct: true
      -
        value: >
          500 Internal Server Error
        correct: false
      -
        value: >
          403 Forbidden
        correct: true
    help: |
      4xx status codes indicate client errors, meaning the client's request was somehow incorrect. Examples include 404 Not Found (resource not found) and 403 Forbidden (client lacks access rights).
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#client_error_responses

  -
    question: >
      What is the purpose of the `Request::createFromGlobals()` method in Symfony?
    answers:
      -
        value: >
          To create a new HTTP response object.
        correct: false
      -
        value: >
          To populate a `Request` object using data from PHP's superglobal variables (`$_GET`, `$_POST`, `$_SERVER`, etc.).
        correct: true
      -
        value: >
          To send an HTTP request to an external server.
        correct: false
      -
        value: >
          To resolve a controller for the current request.
        correct: false
    help: |
      `Request::createFromGlobals()` is a static factory method that creates a `Request` object by inspecting the current PHP global variables, making it suitable for handling actual incoming web requests.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#accessing-request-data

  -
    question: |
      Given a `Request` object named `$request`, how would you retrieve a POST parameter named `category` with a default value of `'default category'` if it's not present?
    answers:
      -
        value: >
          `$request->get('category', 'default category');`
        correct: false
      -
        value: >
          `$request->request->get('category', 'default category');`
        correct: false
      -
        value: >
          `$request->getPayload()->get('category', 'default category');`
        correct: true
      -
        value: >
          `$request->query->get('category', 'default category');`
        correct: false
    help: |
      Since Symfony 6.2, `Request::getPayload()` should be used to retrieve data from the request body (POST parameters, JSON payload, etc.). `Request::request` is deprecated for this purpose.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#accessing-request-data

  -
    question: >
      Which method of the `Request` object allows you to retrieve the raw content of the HTTP request body (e.g., for JSON or XML payloads)?
    answers:
      -
        value: >
          `$request->query->all()`
        correct: false
      -
        value: >
          `$request->request->all()`
        correct: false
      -
        value: >
          `$request->getContent()`
        correct: true
      -
        value: >
          `$request->getPayload()->all()`
        correct: false
    help: |
      The `Request::getContent()` method returns the raw body content of the request, which is useful for non-form data like JSON or XML.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-raw-request-body-content

  -
    question: |
      You are writing a unit test and need to simulate an HTTP GET request to `/products/123` with a query parameter `format=json`. How would you create the `Request` object?
    answers:
      -
        value: >
          `$request = Request::createFromGlobals();`
        correct: false
      -
        value: >
          `$request = new Request();`
          `$request->setUri('/products/123?format=json');`
        correct: false
      -
        value: >
          `$request = Request::create('/products/123', 'GET', ['format' => 'json']);`
        correct: true
      -
        value: >
          `$request = Request::create('/products/123?format=json', 'GET');`
        correct: true
    help: |
      The `Request::create()` static method allows programmatic creation of `Request` objects for testing or internal dispatching. You can pass the URI, method, and parameters.
      https://symfony.com/doc/current/components/http_foundation.html#simulating-a-request

  -
    question: |
      Which of the following is the correct way to instantiate a `Symfony\Component\HttpFoundation\Response` object with content "Hello", a 200 OK status, and a `Content-Type` header of `text/plain`?
    answers:
      -
        value: >
          `$response = new Response('Hello', 200, ['Content-Type' => 'text/plain']);`
        correct: true
      -
        value: >
          `$response = new Response();`
          `$response->setContent('Hello');`
          `$response->setStatusCode(Response::HTTP_OK);`
          `$response->headers->set('Content-Type', 'text/plain');`
        correct: true
      -
        value: >
          `$response = new Response('Hello');`
          `$response->setHeaders(['Content-Type' => 'text/plain']);`
        correct: false
      -
        value: >
          `$response = new Response('Hello', '200 OK', ['Content-Type' => 'text/plain']);`
        correct: false
    help: |
      The `Response` constructor accepts content, status code, and an array of headers. You can also set these properties individually after instantiation.
      https://symfony.com/doc/current/components/http_foundation.html#creating-a-response

  -
    question: >
      After creating a `Response` object, what method must be called to send the HTTP headers and content back to the client?
    answers:
      -
        value: >
          `$response->flush();`
        correct: false
      -
        value: >
          `$response->output();`
        correct: false
      -
        value: >
          `$response->send();`
        correct: true
      -
        value: >
          `$response->render();`
        correct: false
    help: |
      The `Response::send()` method is responsible for printing the HTTP headers and echoing the content to the client.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#creating-and-sending-a-response

  -
    question: >
      When should you use `Symfony\Component\HttpFoundation\RedirectResponse`?
    answers:
      -
        value: >
          When you want to return a JSON API response.
        correct: false
      -
        value: >
          When you need to send the client to a different URL.
        correct: true
      -
        value: >
          When the requested resource is not found.
        correct: false
      -
        value: >
          When you want to stream a large file to the client.
        correct: false
    help: |
      `RedirectResponse` is a specialized `Response` class used to send an HTTP redirect (e.g., 302 Found or 301 Moved Permanently) to the client, instructing it to navigate to a new URL.
      https://symfony.com/doc/current/components/http_foundation.html#redirectresponse

  -
    question: >
      Which HTTP method is considered "safe" and "idempotent"?
    answers:
      -
        value: >
          POST
        correct: false
      -
        value: >
          PUT
        correct: false
      -
        value: >
          GET
        correct: true
      -
        value: >
          DELETE
        correct: false
    help: |
      GET is both safe (does not alter server state) and idempotent (multiple identical requests have the same effect as a single one).
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods

  -
    question: >
      Which HTTP method is typically used to submit data to be processed to a specified resource, often resulting in a change in state or the creation of a new resource?
    answers:
      -
        value: >
          GET
        correct: false
      -
        value: >
          HEAD
        correct: false
      -
        value: >
          POST
        correct: true
      -
        value: >
          TRACE
        correct: false
    help: |
      The POST method is used to send data to a server to create/update a resource. It is neither safe nor idempotent.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST

  -
    question: >
      What is the primary difference between the HTTP PUT and POST methods?
    answers:
      -
        value: >
          PUT is used for creating new resources, while POST is for updating existing ones.
        correct: false
      -
        value: >
          PUT is idempotent, meaning multiple identical requests have the same effect as a single one, while POST is not.
        correct: true
      -
        value: >
          POST requests are cached by default, while PUT requests are not.
        correct: false
      -
        value: >
          PUT sends data in the URL query string, while POST sends it in the request body.
        correct: false
    help: |
      PUT is idempotent and typically used for updating an existing resource or creating a resource at a specific URI. POST is not idempotent and is generally used for creating new resources where the server determines the URI.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PUT
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST

  -
    question: |
      How can you set a cookie named `my_cookie` with the value `my_value` on a `Response` object in Symfony?
    answers:
      -
        value: >
          `$response->setCookie('my_cookie', 'my_value');`
        correct: false
      -
        value: >
          `$response->headers->setCookie(new Cookie('my_cookie', 'my_value'));`
        correct: true
      -
        value: >
          `$response->cookies->add('my_cookie', 'my_value');`
        correct: false
      -
        value: >
          `$response->addCookie('my_cookie', 'my_value');`
        correct: false
    help: |
      Cookies are managed via the `ResponseHeaderBag` accessible through `$response->headers`. You use `setCookie()` with a `Cookie` object.
      https://symfony.com/doc/current/components/http_foundation.html#managing-cookies

  -
    question: >
      Which of the following `Cookie` options helps prevent cross-site scripting (XSS) attacks by making the cookie inaccessible to client-side scripts?
    answers:
      -
        value: >
          `secure`
        correct: false
      -
        value: >
          `sameSite`
        correct: false
      -
        value: >
          `httpOnly`
        correct: true
      -
        value: >
          `partitioned`
        correct: false
    help: |
      The `httpOnly` flag prevents client-side scripts from accessing the cookie, which can mitigate XSS attacks.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#security

  -
    question: >
      To retrieve a cookie named `PHPSESSID` from a `Request` object, which method should you use?
    answers:
      -
        value: >
          `$request->query->get('PHPSESSID');`
        correct: false
      -
        value: >
          `$request->cookies->get('PHPSESSID');`
        correct: true
      -
        value: >
          `$request->headers->get('Cookie');`
        correct: false
      -
        value: >
          `$request->get('PHPSESSID');`
        correct: false
    help: |
      The `cookies` property of the `Request` object provides access to the request cookies.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#accessing-request-data

  -
    question: >
      Which HTTP header is primarily used by a server to indicate how a response should be cached by clients and intermediate proxies?
    answers:
      -
        value: >
          `Expires`
        correct: false
      -
        value: >
          `Last-Modified`
        correct: false
      -
        value: >
          `Cache-Control`
        correct: true
      -
        value: >
          `ETag`
        correct: false
    help: |
      The `Cache-Control` header is the most important HTTP caching header, allowing servers to define caching policies for responses.
      https://symfony.com/doc/current/http_cache/expiration.html#cache-control

  -
    question: |
      You want to make a response publicly cacheable for 10 minutes (600 seconds). Which of the following Symfony code snippets correctly achieves this?
    answers:
      -
        value: |
          ```php
          $response->setPublic();
          $response->setMaxAge(600);
          ```
        correct: true
      -
        value: |
          ```php
          #[Cache(private: false, ttl: 600)]
          public function index(): Response {}
          ```
        correct: false
      -
        value: |
          ```php
          $response->setCache([
              'public' => true,
              'max_age' => 600,
          ]);
          ```
        correct: true
      -
        value: |
          ```php
          $response->headers->set('Cache-Control', 'public, max-age=600');
          ```
        correct: true
    help: |
      Symfony's `Response` object provides methods like `setPublic()` and `setMaxAge()`, or a combined `setCache()` method, to easily configure the `Cache-Control` header. Directly setting the header is also possible.
      https://symfony.com/doc/current/http_cache/expiration.html#cache-control

  -
    question: >
      What is the purpose of the `ETag` HTTP header in caching?
    answers:
      -
        value: >
          To specify the maximum age a cached resource can be considered fresh.
        correct: false
      -
        value: >
          To provide a unique identifier for a specific version of a resource.
        correct: true
      -
        value: >
          To indicate the date and time the resource was last modified.
        correct: false
      -
        value: >
          To instruct proxies to revalidate the content before serving it.
        correct: false
    help: |
      The `ETag` (entity tag) is an opaque identifier assigned by a web server to a specific version of a resource found at a URL. If the resource content changes, a new `ETag` is generated.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag

  -
    question: >
      Which HTTP header is used to inform caches that the response content varies depending on the value of specified request headers?
    answers:
      -
        value: >
          `Cache-Control`
        correct: false
      -
        value: >
          `Content-Type`
        correct: false
      -
        value: >
          `Vary`
        correct: true
      -
        value: >
          `Accept`
        correct: false
    help: |
      The `Vary` header tells caches that the response is based on one or more request headers, meaning different cached versions should be stored for different values of those headers.
      https://symfony.com/doc/current/http_cache/cache_vary.html

  -
    question: >
      If a client sends an `If-None-Match` header with an ETag, and the server's resource has the same ETag, which method of the `Response` object can be used to determine if the response is "not modified" and set the appropriate status code?
    answers:
      -
        value: >
          `$response->setNotModified();`
        correct: false
      -
        value: >
          `$response->isFresh($request);`
        correct: false
      -
        value: >
          `$response->isNotModified($request);`
        correct: true
      -
        value: >
          `$response->checkCache($request);`
        correct: false
    help: |
      The `Response::isNotModified($request)` method checks if the response validators (ETag, Last-Modified) match a conditional value in the client's request. If it's not modified, it sets the status to 304 and removes the content.
      https://symfony.com/doc/current/components/http_foundation.html#http-caching

  -
    question: >
      Which `Request` object method returns an array of content types that the client prefers, ordered by descending quality?
    answers:
      -
        value: >
          `$request->getPreferredContentTypes();`
        correct: false
      -
        value: >
          `$request->getAcceptableContentTypes();`
        correct: true
      -
        value: >
          `$request->headers->get('Accept');`
        correct: false
      -
        value: >
          `$request->getMimeTypes();`
        correct: false
    help: |
      The `getAcceptableContentTypes()` method parses the `Accept` header and returns a sorted list of preferred content types.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-accept-headers

  -
    question: >
      To determine the languages preferred by the client for content negotiation, which method of the `Request` object should you use?
    answers:
      -
        value: >
          `$request->getLocale();`
        correct: false
      -
        value: >
          `$request->getPreferredLanguage();`
        correct: false
      -
        value: >
          `$request->getLanguages();`
        correct: true
      -
        value: >
          `$request->headers->get('Accept-Language');`
        correct: false
    help: |
      The `getLanguages()` method parses the `Accept-Language` header and returns an array of languages the client accepts, ordered by descending quality.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-accept-headers

  -
    question: >
      Which HTTP header is used by the client to indicate the preferred character sets for the response?
    answers:
      -
        value: >
          `Content-Encoding`
        correct: false
      -
        value: >
          `Accept-Charset`
        correct: true
      -
        value: >
          `Content-Type`
        correct: false
      -
        value: >
          `Accept`
        correct: false
    help: |
      The `Accept-Charset` header indicates which character sets are acceptable for the response.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Charset

  -
    question: >
      What is the primary interface you should type-hint against when injecting Symfony's HTTP Client into your services for making external HTTP requests?
    answers:
      -
        value: >
          `Symfony\Component\HttpClient\HttpClient`
        correct: false
      -
        value: >
          `Psr\Http\Client\HttpClientInterface`
        correct: false
      -
        value: >
          `Symfony\Contracts\HttpClient\HttpClientInterface`
        correct: true
      -
        value: >
          `GuzzleHttp\ClientInterface`
        correct: false
    help: |
      `Symfony\Contracts\HttpClient\HttpClientInterface` is the recommended interface for type-hinting the HTTP client, providing a stable abstraction.
      https://symfony.com/doc/current/http_client.html#injecting-the-http-client

  -
    question: |
      You want to make a GET request to `https://api.example.com/data` using Symfony's HTTP Client. Which of the following is the correct way to do this?
    answers:
      -
        value: |
          ```php
          use Symfony\Component\HttpClient\HttpClient;
          $client = HttpClient::create();
          $response = $client->get('https://api.example.com/data');
          ```
        correct: false
      -
        value: |
          ```php
          use Symfony\Component\HttpClient\HttpClient;
          $client = HttpClient::create();
          $response = $client->request('GET', 'https://api.example.com/data');
          ```
        correct: true
      -
        value: |
          ```php
          use Symfony\Contracts\HttpClient\HttpClientInterface;
          // ... assume $client is autowired HttpClientInterface
          $response = $client->request('GET', 'https://api.example.com/data');
          ```
        correct: true
      -
        value: |
          ```php
          $client = new \GuzzleHttp\Client();
          $response = $client->request('GET', 'https://api.example.com/data');
          ```
        correct: false
    help: |
      The `request()` method is the primary way to send requests, taking the HTTP method and URL as arguments. `HttpClient::create()` is used for standalone clients, while `HttpClientInterface` is typically autowired in Symfony applications.
      https://symfony.com/doc/current/http_client.html#making-requests

  -
    question: |
      How can you configure a default `User-Agent` header for all requests made by a Symfony HTTP client instance using PHP configuration?
    answers:
      -
        value: |
          ```php
          // config/packages/framework.php
          use Symfony\Config\FrameworkConfig;

          return static function (FrameworkConfig $framework): void {
              $framework->httpClient()
                  ->defaultOptions()
                      ->header('User-Agent', 'My App');
          };
          ```
        correct: true
      -
        value: |
          ```php
          $client = HttpClient::create([
              'headers' => [
                  'User-Agent' => 'My App',
              ],
          ]);
          ```
        correct: true
      -
        value: |
          ```php
          // config/services.yaml
          services:
              _defaults:
                  http_client:
                      default_headers:
                          User-Agent: 'My App'
          ```
        correct: false
      -
        value: |
          ```php
          $client->setDefaultHeader('User-Agent', 'My App');
          ```
        correct: false
    help: |
      Default options, including headers, can be configured globally in `framework.yaml` (or its PHP/XML equivalents) or directly when creating a standalone `HttpClient` instance.
      https://symfony.com/doc/current/http_client.html#configuring-default-options

  -
    question: |
      You have a `ResponseInterface` object named `$response` from an HTTP client request. How do you get the response body as a PHP array, assuming it's JSON content?
    answers:
      -
        value: >
          `json_decode($response->getContent(), true);`
        correct: false
      -
        value: >
          `$response->toArray();`
        correct: true
      -
        value: >
          `$response->json();`
        correct: false
      -
        value: >
          `$response->getBody()->toArray();`
        correct: false
    help: |
      The `toArray()` method of `ResponseInterface` is a convenient way to parse JSON response content into a PHP array. It also handles error checking by default.
      https://symfony.com/doc/current/http_client.html#getting-the-response-content

  -
    question: |
      You need to send multiple HTTP requests concurrently using Symfony's HTTP Client to avoid blocking. Which approach is recommended?
    answers:
      -
        value: >
          Send each request in a separate `try-catch` block.
        correct: false
      -
        value: >
          Use a `foreach` loop to initiate all requests, then another `foreach` loop to iterate over the responses and read their content.
        correct: true
      -
        value: >
          Call `HttpClient::create()->sendAsyncRequest()` for each request and wait for each promise individually.
        correct: false
      -
        value: >
          Use `sleep()` between each request to simulate concurrency.
        correct: false
    help: |
      Symfony's HTTP Client is asynchronous by default. You initiate all requests, and then iterate over the responses to consume their content, allowing them to complete in parallel.
      https://symfony.com/doc/current/http_client.html#sending-concurrent-requests

  -
    question: >
      Which class in Symfony's HTTP Client component is specifically designed for testing and allows you to define predefined or dynamically generated responses?
    answers:
      -
        value: >
          `Symfony\Component\HttpClient\TestClient`
        correct: false
      -
        value: >
          `Symfony\Component\HttpClient\MockHttpClient`
        correct: true
      -
        value: >
          `Symfony\Component\HttpClient\Testing\ResponseFactory`
        correct: false
      -
        value: >
          `Symfony\Component\HttpClient\HttpClientStub`
        correct: false
    help: |
      `MockHttpClient` is an implementation of `HttpClientInterface` that allows you to provide mock responses for testing purposes.
      https://symfony.com/doc/current/http_client.html#testing

  -
    question: >
      How can you explicitly cancel an ongoing HTTP request made with Symfony's HTTP Client?
    answers:
      -
        value: >
          Call `$client->stop($response);`
        correct: false
      -
        value: >
          Call `$response->cancel();`
        correct: true
      -
        value: >
          Throw an exception from an `on_progress` callback.
        correct: true
      -
        value: >
          The client automatically cancels requests on script termination.
        correct: false
    help: |
      You can cancel a request by calling `ResponseInterface::cancel()` or by throwing an exception from an `on_progress` callback.
      https://symfony.com/doc/current/http_client.html#cancelling-requests

  -
    question: >
      What is the primary benefit of using `UriTemplateHttpClient`?
    answers:
      -
        value: >
          It automatically handles HTTP caching.
        correct: false
      -
        value: >
          It allows defining URI templates with variables that are expanded into the URL.
        correct: true
      -
        value: >
          It provides advanced authentication mechanisms.
        correct: false
      -
        value: >
          It enables streaming large responses directly to a file.
        correct: false
    help: |
      `UriTemplateHttpClient` allows you to define URI templates with placeholders that are replaced by provided variables, simplifying URL construction.
      https://symfony.com/doc/current/http_client.html#uri-templates

  -
    question: >
      Which of the following classes is used to stream an HTTP response back to the client, allowing for dynamic and incremental content delivery?
    answers:
      -
        value: >
          `Symfony\Component\HttpFoundation\JsonResponse`
        correct: false
      -
        value: >
          `Symfony\Component\HttpFoundation\BinaryFileResponse`
        correct: false
      -
        value: >
          `Symfony\Component\HttpFoundation\StreamedResponse`
        correct: true
      -
        value: >
          `Symfony\Component\HttpFoundation\Response`
        correct: false
    help: |
      `StreamedResponse` is designed for sending large amounts of data to the client without buffering the entire content in memory, by using a callable or an iterable of strings.
      https://symfony.com/doc/current/components/http_foundation.html#streamedresponse

  -
    question: >
      When using `HttpClient::create()`, what is the order of preference for selecting the underlying HTTP client transport?
    answers:
      -
        value: >
          Native PHP streams, then cURL, then AmpHttpClient.
        correct: false
      -
        value: >
          AmpHttpClient, then cURL, then Native PHP streams.
        correct: false
      -
        value: >
          cURL, then AmpHttpClient, then Native PHP streams.
        correct: true
      -
        value: >
          Native PHP streams, then AmpHttpClient, then cURL.
        correct: false
    help: |
      `HttpClient::create()` prioritizes cURL if available, then falls back to `AmpHttpClient`, and finally to native PHP streams.
      https://symfony.com/doc/current/http_client.html#choosing-the-http-client-transport

  -
    question: >
      Which of the following is a valid way to send the request body as raw string data using Symfony's HTTP Client?
    answers:
      -
        value: |
          ```php
          $response = $client->request('POST', '/api', ['body' => 'raw data']);
          ```
        correct: true
      -
        value: |
          ```php
          $response = $client->request('POST', '/api')->setBody('raw data');
          ```
        correct: false
      -
        value: |
          ```php
          $response = $client->post('/api', ['content' => 'raw data']);
          ```
        correct: false
      -
        value: |
          ```php
          $response = $client->request('POST', '/api', ['form_params' => 'raw data']);
          ```
        correct: false
    help: |
      The `body` option in the request options array is used to define the request body, which can be a string, an array, a closure, or a resource.
      https://symfony.com/doc/current/http_client.html#uploading-data

  -
    question: >
      What is the purpose of the `auth_basic` option in Symfony's HTTP Client configuration?
    answers:
      -
        value: >
          To set a Bearer token for authentication.
        correct: false
      -
        value: >
          To configure NTLM authentication.
        correct: false
      -
        value: >
          To provide username and password for HTTP Basic authentication.
        correct: true
      -
        value: >
          To specify a client certificate for mutual TLS authentication.
        correct: false
    help: |
      The `auth_basic` option is used to configure HTTP Basic authentication credentials, typically in the format `'username:password'` or `['username', 'password']`.
      https://symfony.com/doc/current/http_client.html#authentication

  -
    question: |
      You have a base `HttpClientInterface` instance and want to create a new client instance that automatically prepends `https://api.example.com/` to all relative URLs. Which method should you use?
    answers:
      -
        value: >
          `$client->setBaseUri('https://api.example.com/');`
        correct: false
      -
        value: >
          `$client->withBaseUri('https://api.example.com/');`
        correct: false
      -
        value: >
          `$client->withOptions(['base_uri' => 'https://api.example.com/']);`
        correct: true
      -
        value: >
          `HttpClient::createForBaseUri('https://api.example.com/', $client);`
        correct: false
    help: |
      The `withOptions()` method allows you to create a new client instance with modified options, including `base_uri`.
      https://symfony.com/doc/current/http_client.html#base-uris

  -
    question: >
      Which of the following is a valid way to configure HTTP/2 for a Symfony HTTP client?
    answers:
      -
        value: >
          Set the `protocol_version` option to `'2.0'`.
        correct: false
      -
        value: >
          Set the `http_version` option to `'2.0'`.
        correct: true
      -
        value: >
          Enable the `http2_enabled` flag in `framework.yaml`.
        correct: false
      -
        value: >
          Ensure the `php-http/curl-client` package is installed.
        correct: false
    help: |
      To force HTTP/2, you set the `http_version` option to `'2.0'` in the client's options.
      https://symfony.com/doc/current/http_client.html#http-2-support

  -
    question: >
      What does the `ResponseInterface::toStream()` method return?
    answers:
      -
        value: >
          A string containing the full response body.
        correct: false
      -
        value: >
          A `Psr\Http\Message\StreamInterface` object.
        correct: false
      -
        value: >
          A PHP stream resource.
        correct: true
      -
        value: >
          An array of response chunks.
        correct: false
    help: |
      The `toStream()` method casts the response content to a PHP stream resource, which is useful for handling very large responses without loading them entirely into memory.
      https://symfony.com/doc/current/http_client.html#getting-the-response-content

  -
    question: >
      When testing a service that uses `HttpClientInterface`, what is the recommended way to provide mock responses?
    answers:
      -
        value: >
          Create a custom service that extends `HttpClientInterface` and manually returns predefined data.
        correct: false
      -
        value: >
          Use `Symfony\Component\HttpClient\MockHttpClient` with an array of `MockResponse` objects or a callback.
        correct: true
      -
        value: >
          Modify the `$_SERVER` superglobal directly in your test.
        correct: false
      -
        value: >
          Make actual HTTP requests to a local test server.
        correct: false
    help: |
      `MockHttpClient` is specifically designed for testing, allowing you to control the responses returned by the HTTP client without making real network calls.
      https://symfony.com/doc/current/http_client.html#testing

  -
    question: >
      Which of the following is NOT a valid way to upload data using the `body` option in a Symfony HTTP Client request?
    answers:
      -
        value: >
          A raw string.
        correct: false
      -
        value: >
          An array of parameters (e.g., `['param1' => 'value1']`).
        correct: false
      -
        value: >
          An object implementing `\JsonSerializable`.
        correct: true
      -
        value: >
          A PHP resource (e.g., a file handle from `fopen()`).
        correct: false
      -
        value: >
          A `callable` that generates data.
        correct: false
    help: |
      The `body` option accepts strings, arrays, callables, or resources. While you might encode a `JsonSerializable` object to a string, the object itself is not directly accepted by the `body` option.
      https://symfony.com/doc/current/http_client.html#uploading-data

  -
    question: >
      What is the purpose of `ScopingHttpClient`?
    answers:
      -
        value: >
          To limit the number of concurrent requests.
        correct: false
      -
        value: >
          To apply different HTTP client options based on the requested URL.
        correct: true
      -
        value: >
          To automatically retry failed requests.
        correct: false
      -
        value: >
          To add a global timeout to all requests.
        correct: false
    help: |
      `ScopingHttpClient` allows you to define different sets of options (scopes) that apply only to URLs matching specific regular expressions.
      https://symfony.com/doc/current/http_client.html#scoping-http-clients

  -
    question: >
      Which method of `ResponseInterface` should you use to check if an HTTP response resulted in a client (4xx) or server (5xx) error, throwing an exception if it did?
    answers:
      -
        value: >
          `$response->checkStatus();`
        correct: false
      -
        value: >
          `$response->getStatusCode() >= 400;`
        correct: false
      -
        value: >
          `$response->getContent(true);`
        correct: true
      -
        value: >
          `$response->getHeaders(true);`
        correct: true
    help: |
      By default, `getContent()` and `getHeaders()` methods of `ResponseInterface` throw an exception if the response status code is 4xx or 5xx. You can pass `false` to suppress this behavior.
      https://symfony.com/doc/current/http_client.html#checking-for-errors

  -
    question: >
      What is the primary use case for `Symfony\Component\HttpClient\HttplugClient`?
    answers:
      -
        value: >
          To provide a PSR-18 `HttpClientInterface` implementation for libraries that depend on HTTPlug.
        correct: true
      -
        value: >
          To create a mock HTTP client for testing.
        correct: false
      -
        value: >
          To enable HTTP/2 support for older PHP versions.
        correct: false
      -
        value: >
          To integrate with Guzzle HTTP client.
        correct: false
    help: |
      `HttplugClient` acts as a bridge, implementing `Psr\Http\Client\HttpClientInterface` (PSR-18) and `Http\Client\HttpAsyncClient` (HTTPlug) on top of Symfony's HTTP Client, allowing interoperability with HTTPlug-based libraries.
      https://symfony.com/doc/current/http_client.html#integrating-with-httplug

  -
    question: >
      Which of the following `Response` methods would you use to set the `Expires` HTTP header?
    answers:
      -
        value: >
          `$response->setExpiryDate(\DateTimeImmutable $date);`
        correct: false
      -
        value: >
          `$response->setExpires(\DateTimeInterface $expires);`
        correct: true
      -
        value: >
          `$response->headers->set('Expires', $date->format(DATE_RFC7231));`
        correct: true
      -
        value: >
          `$response->setMaxAge(0);`
        correct: false
    help: |
      The `setExpires()` method sets the `Expires` HTTP header. You can also directly set the header using `headers->set()`.
      https://symfony.com/doc/current/components/http_foundation.html#http-caching

  -
    question: >
      What is the purpose of the `on_progress` callback option in Symfony's HTTP Client?
    answers:
      -
        value: >
          To log the progress of the request to a file.
        correct: false
      -
        value: >
          To receive real-time updates on download/upload progress and potentially cancel the request.
        correct: true
      -
        value: >
          To modify the request options dynamically during execution.
        correct: false
      -
        value: >
          To define a custom error handler for HTTP errors.
        correct: false
    help: |
      The `on_progress` callback is invoked as data is downloaded or uploaded, providing progress information and allowing for actions like cancelling the request if needed.
      https://symfony.com/doc/current/http_client.html#cancelling-requests

  -
    question: >
      Which HTTP status code indicates that the server cannot fulfill the request due to an unexpected condition?
    answers:
      -
        value: >
          400 Bad Request
        correct: false
      -
        value: >
          401 Unauthorized
        correct: false
      -
        value: >
          500 Internal Server Error
        correct: true
      -
        value: >
          503 Service Unavailable
        correct: false
    help: |
      The 500 Internal Server Error status code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500

  -
    question: >
      What is the role of the `Host` header in an HTTP request?
    answers:
      -
        value: >
          To specify the client's IP address.
        correct: false
      -
        value: >
          To indicate the desired content type for the response.
        correct: false
      -
        value: >
          To specify the domain name of the server (for virtual hosting).
        correct: true
      -
        value: >
          To define the HTTP method being used.
        correct: false
    help: |
      The `Host` header specifies the domain name of the server to which the request is being sent, especially important for virtual hosting.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Host

  -
    question: >
      Which of the following is typically sent by the client to indicate the media types it can understand for the response?
    answers:
      -
        value: >
          `Content-Type`
        correct: false
      -
        value: >
          `Accept`
        correct: true
      -
        value: >
          `Content-Encoding`
        correct: false
      -
        value: >
          `User-Agent`
        correct: false
    help: |
      The `Accept` header is used by the client to tell the server which content types (media types) it can process.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept

  -
    question: >
      What is the purpose of the `User-Agent` HTTP header?
    answers:
      -
        value: >
          To specify the preferred language of the client.
        correct: false
      -
        value: >
          To identify the client software (e.g., browser, bot, application).
        correct: true
      -
        value: >
          To indicate the content type of the request body.
        correct: false
      -
        value: >
          To provide authentication credentials.
        correct: false
    help: |
      The `User-Agent` header sends a characteristic string that allows the network protocol peer to identify the application type, operating system, software vendor, or software version of the requesting user agent.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent

  -
    question: >
      Which HTTP method is used to retrieve the headers only from a resource, without the body?
    answers:
      -
        value: >
          GET
        correct: false
      -
        value: >
          OPTIONS
        correct: false
      -
        value: >
          HEAD
        correct: true
      -
        value: >
          TRACE
        correct: false
    help: |
      The HEAD method asks for a response identical to that of a GET request, but without the response body. This is useful for retrieving metadata written in response headers, without having to transport the entire content.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/HEAD

  -
    question: >
      What is the purpose of the `SameSite` attribute for cookies?
    answers:
      -
        value: >
          To ensure the cookie is only sent over HTTPS.
        correct: false
      -
        value: >
          To prevent cross-site request forgery (CSRF) attacks.
        correct: true
      -
        value: >
          To make the cookie accessible only via HTTP requests, not JavaScript.
        correct: false
      -
        value: >
          To specify the domain for which the cookie is valid.
        correct: false
    help: |
      The `SameSite` attribute helps mitigate CSRF attacks by controlling when cookies are sent with cross-site requests.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite

  -
    question: >
      Which of the following HTTP status codes indicates a successful response with no content to return?
    answers:
      -
        value: >
          200 OK
        correct: false
      -
        value: >
          201 Created
        correct: false
      -
        value: >
          204 No Content
        correct: true
      -
        value: >
          206 Partial Content
        correct: false
    help: |
      The 204 No Content status code indicates that the server successfully processed the request, but is not returning any content. This is often used for PUT, POST, or DELETE requests.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/204

  -
    question: >
      What is the primary benefit of using `HttpClientInterface::stream()` when dealing with large HTTP responses?
    answers:
      -
        value: >
          It automatically decompresses the response content.
        correct: false
      -
        value: >
          It allows processing the response content chunk by chunk, preventing memory exhaustion.
        correct: true
      -
        value: >
          It caches the entire response in memory for faster access.
        correct: false
      -
        value: >
          It provides a direct file handle to the remote resource.
        correct: false
    help: |
      The `stream()` method allows you to process large responses incrementally, yielding chunks of data as they arrive, which is crucial for memory efficiency.
      https://symfony.com/doc/current/http_client.html#streaming-responses

  -
    question: >
      Which `Response` method should you use to force a cached response to be considered stale immediately by caches?
    answers:
      -
        value: >
          `$response->setNoCache();`
        correct: false
      -
        value: >
          `$response->expire();`
        correct: true
      -
        value: >
          `$response->setPrivate();`
        correct: false
      -
        value: >
          `$response->setMaxAge(0);`
        correct: false
    help: |
      The `expire()` method sets the `Expires` header to a past date and adds `no-cache` to `Cache-Control`, effectively marking the response as stale.
      https://symfony.com/doc/current/http_cache.html#marking-a-response-as-stale

  -
    question: >
      When configuring an HTTP client, what is the effect of setting the `auth_bearer` option?
    answers:
      -
        value: >
          It configures HTTP Basic authentication.
        correct: false
      -
        value: >
          It sets a token in the `Authorization` header for Bearer authentication.
        correct: true
      -
        value: >
          It enables NTLM authentication.
        correct: false
      -
        value: >
          It specifies the client certificate.
        correct: false
    help: |
      The `auth_bearer` option is used to provide a token for HTTP Bearer authentication, which is then included in the `Authorization` header.
      https://symfony.com/doc/current/http_client.html#authentication

  -
    question: >
      Which of the following `HeaderUtils` methods would you use to combine an array of header parts into an associative array?
    answers:
      -
        value: >
          `HeaderUtils::parse();`
        correct: false
      -
        value: >
          `HeaderUtils::combine();`
        correct: true
      -
        value: >
          `HeaderUtils::toArray();`
        correct: false
      -
        value: >
          `HeaderUtils::fromArray();`
        correct: false
    help: |
      `HeaderUtils::combine()` is a utility method to combine an array of header parts (e.g., `[['foo', 'abc'], ['bar']]`) into an associative array (`['foo' => 'abc', 'bar' => true]`).
      https://symfony.com/doc/current/components/http_foundation.html#headerutils

  -
    question: >
      What is the purpose of the `Content-Type` header in an HTTP response?
    answers:
      -
        value: >
          To specify the character encoding of the response.
        correct: false
      -
        value: >
          To indicate the type of content being sent in the response body (e.g., `text/html`, `application/json`).
        correct: true
      -
        value: >
          To suggest the file name for a downloaded resource.
        correct: false
      -
        value: >
          To inform the client about caching policies.
        correct: false
    help: |
      The `Content-Type` header indicates the media type of the resource, allowing the client to correctly interpret the response body.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type

  -
    question: >
      Which HTTP status code indicates that the requested resource has been permanently moved to a new URL?
    answers:
      -
        value: >
          301 Moved Permanently
        correct: true
      -
        value: >
          302 Found
        correct: false
      -
        value: >
          303 See Other
        correct: false
      -
        value: >
          307 Temporary Redirect
        correct: false
    help: |
      The 301 Moved Permanently status code indicates that the resource has been assigned a new permanent URI and any future references to this resource should use one of the returned URIs.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/301

  -
    question: >
      When sending a `POST` request with form data using Symfony's HTTP Client, which option should you use to pass the form fields?
    answers:
      -
        value: >
          `'json'`
        correct: false
      -
        value: >
          `'query'`
        correct: false
      -
        value: >
          `'body'` with an array of parameters.
        correct: true
      -
        value: >
          `'form_params'`
        correct: false
    help: |
      For sending form-encoded data, the `'body'` option can accept an array of parameters, which the client will then encode as `application/x-www-form-urlencoded`.
      https://symfony.com/doc/current/http_client.html#uploading-data

  -
    question: >
      What is the purpose of the `Connection: close` header in an HTTP response?
    answers:
      -
        value: >
          To indicate that the server is shutting down.
        correct: false
      -
        value: >
          To inform the client that the connection will be closed after the current response.
        correct: true
      -
        value: >
          To request the client to close its connection.
        correct: false
      -
        value: >
          To signal a network error.
        correct: false
    help: |
      The `Connection: close` header indicates that the server will close the TCP connection after completing the response.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Connection

  -
    question: >
      Which of the following is true about HTTP `GET` requests?
    answers:
      -
        value: >
          They should be used for submitting sensitive data.
        correct: false
      -
        value: >
          They are typically idempotent.
        correct: true
      -
        value: >
          They can have a request body.
        correct: false
      -
        value: >
          They are primarily used for creating new resources.
        correct: false
    help: |
      GET requests are idempotent and should only be used to retrieve data, not to modify server state. They typically do not have a request body.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET

  -
    question: >
      When using Symfony's HTTP Client, how can you add query string parameters to a GET request?
    answers:
      -
        value: >
          Append them directly to the URL string.
        correct: true
      -
        value: >
          Use the `'query'` option in the request options array.
        correct: true
      -
        value: >
          Use the `'params'` option in the request options array.
        correct: false
      -
        value: >
          Set them as part of the `'body'` option.
        correct: false
    help: |
      Query parameters can be appended directly to the URL or provided as an associative array to the `'query'` option, which the client will then URL-encode.
      https://symfony.com/doc/current/http_client.html#query-parameters

  -
    question: >
      What is the significance of the `Expires` HTTP header in caching?
    answers:
      -
        value: >
          It specifies the maximum age of a cached resource in seconds.
        correct: false
      -
        value: >
          It provides a date/time after which the response is considered stale.
        correct: true
      -
        value: >
          It indicates the last modification date of the resource.
        correct: false
      -
        value: >
          It is used for strong validation of cached responses.
        correct: false
    help: |
      The `Expires` header provides a date and time after which the response is considered stale. It's an older header, largely superseded by `Cache-Control: max-age`.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expires

  -
    question: >
      Which of the following is a key advantage of using Symfony's `HttpClient` component over raw PHP functions like `file_get_contents()` or `curl_exec()`?
    answers:
      -
        value: >
          It provides built-in templating capabilities for HTTP responses.
        correct: false
      -
        value: >
          It offers a more object-oriented and testable API, with features like mocking and concurrent requests.
        correct: true
      -
        value: >
          It automatically handles all HTTP redirects without configuration.
        correct: false
      -
        value: >
          It is the only way to make HTTPS requests in PHP.
        correct: false
    help: |
      Symfony's `HttpClient` provides a robust, testable, and feature-rich API for making HTTP requests, including asynchronous operations, error handling, and integration with the Symfony ecosystem, which raw PHP functions lack.
      https://symfony.com/doc/current/http_client.html

  -
    question: >
      What is the purpose of the `Last-Modified` HTTP header?
    answers:
      -
        value: >
          To indicate the date and time when the resource was last modified on the server.
        correct: true
      -
        value: >
          To specify the expiration date of the cached resource.
        correct: false
      -
        value: >
          To provide a unique identifier for the resource version.
        correct: false
      -
        value: >
          To set the maximum age for the cached response.
        correct: false
    help: |
      The `Last-Modified` header indicates the date and time at which the origin server believes the resource was last modified. It's used for conditional requests with `If-Modified-Since`.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Last-Modified

  -
    question: >
      Which of the following HTTP methods is considered "safe" but not necessarily "idempotent"?
    answers:
      -
        value: >
          POST
        correct: false
      -
        value: >
          PUT
        correct: false
      -
        value: >
          OPTIONS
        correct: true
      -
        value: >
          DELETE
        correct: false
    help: |
      OPTIONS is safe (does not alter server state) but not idempotent because each OPTIONS request might return different allowed methods depending on the resource's current state.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/OPTIONS

  -
    question: >
      When a client sends an `Accept-Encoding` header, what is it indicating to the server?
    answers:
      -
        value: >
          The preferred character encoding for the response body.
        correct: false
      -
        value: >
          The compression algorithms it can handle (e.g., gzip, deflate).
        correct: true
      -
        value: >
          The desired language for the response.
        correct: false
      -
        value: >
          The type of content it expects (e.g., application/json).
        correct: false
    help: |
      The `Accept-Encoding` header indicates the content encodings (e.g., compression algorithms) that the client can understand.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Encoding

  -
    question: >
      What is the primary role of a "front controller" in a web application framework like Symfony?
    answers:
      -
        value: >
          To directly handle all database interactions.
        correct: false
      -
        value: >
          To serve static assets like images and CSS.
        correct: false
      -
        value: >
          To be the single entry point for all web requests, dispatching them to appropriate handlers.
        correct: true
      -
        value: >
          To manage user sessions and authentication.
        correct: false
    help: |
      A front controller is a design pattern in web applications where a single controller handles all requests to a website or web application. In Symfony, `public/index.php` acts as the front controller.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#the-front-controller

  -
    question: >
      Which of the following HTTP status codes would typically be returned for a successful request that resulted in no content being returned (e.g., a successful DELETE operation)?
    answers:
      -
        value: >
          200 OK
        correct: false
      -
        value: >
          201 Created
        correct: false
      -
        value: >
          204 No Content
        correct: true
      -
        value: >
          304 Not Modified
        correct: false
    help: |
      The 204 No Content status code indicates that the server successfully processed the request, but is not returning any content. This is commonly used for successful DELETE or PUT operations that don't need to return a body.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/204

  -
    question: >
      What is the purpose of the `#[Cache]` attribute in a Symfony controller?
    answers:
      -
        value: >
          To define a route's caching strategy directly on the controller method.
        correct: true
      -
        value: >
          To inject a caching service into the controller.
        correct: false
      -
        value: >
          To mark the controller as cacheable by the Symfony internal cache.
        correct: false
      -
        value: >
          To configure client-side JavaScript caching.
        correct: false
    help: |
      The `#[Cache]` attribute allows you to configure HTTP caching directives (like `public`, `maxage`, `smaxage`, `lastModified`, `etag`) directly on your controller methods.
      https://symfony.com/doc/current/http_cache/expiration.html#configuring-the-cache-with-the-cache-attribute

  -
    question: >
      Which of the following is true about HTTP `DELETE` requests?
    answers:
      -
        value: >
          They are idempotent.
        correct: true
      -
        value: >
          They are considered "safe".
        correct: false
      -
        value: >
          They are primarily used for retrieving resources.
        correct: false
      -
        value: >
          They must always return a response body.
        correct: false
    help: |
      DELETE requests are idempotent (sending multiple identical DELETE requests has the same effect as one) but not safe (they modify server state). They typically return a 204 No Content on success.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/DELETE

  -
    question: >
      When configuring a Symfony HTTP client, what does the `auth_ntlm` option enable?
    answers:
      -
        value: >
          HTTP Basic authentication.
        correct: false
      -
        value: >
          HTTP Bearer token authentication.
        correct: false
      -
        value: >
          Microsoft NTLM authentication.
        correct: true
      -
        value: >
          Digest authentication.
        correct: false
    help: |
      The `auth_ntlm` option is used to configure Microsoft NTLM authentication for the HTTP client.
      https://symfony.com/doc/current/http_client.html#authentication

  -
    question: >
      Which of the following `Response` methods is used to set the `s-maxage` directive of the `Cache-Control` header, specifically for shared caches?
    answers:
      -
        value: >
          `$response->setMaxAge();`
        correct: false
      -
        value: >
          `$response->setSharedMaxAge();`
        correct: true
      -
        value: >
          `$response->setPublic();`
        correct: false
      -
        value: >
          `$response->setClientTtl();`
        correct: false
    help: |
      The `setSharedMaxAge()` method sets the `s-maxage` directive, which is specifically for shared caches (like proxies) and overrides `max-age` for them.
      https://symfony.com/doc/current/components/http_foundation.html#http-caching

  -
    question: >
      What is the purpose of the `Connection: keep-alive` header?
    answers:
      -
        value: >
          To indicate that the server will close the connection after the current response.
        correct: false
      -
        value: >
          To request that the client keep the TCP connection open for subsequent requests.
        correct: true
      -
        value: >
          To signal a persistent database connection.
        correct: false
      -
        value: >
          To enable server-sent events.
        correct: false
    help: |
      The `Connection: keep-alive` header is used to signal that the client or server wants to keep the TCP connection open after the current request/response exchange, allowing for multiple requests over the same connection.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Connection

  -
    question: >
      When using `MockHttpClient` for testing, which method would you use on a `MockResponse` object to inspect the HTTP method of the request that was simulated?
    answers:
      -
        value: >
          `$mockResponse->getMethod();`
        correct: false
      -
        value: >
          `$mockResponse->getRequestMethod();`
        correct: true
      -
        value: >
          `$mockResponse->getSimulatedMethod();`
        correct: false
      -
        value: >
          `$mockResponse->getRequestOptions()['method'];`
        correct: true
    help: |
      The `MockResponse` class provides helper methods like `getRequestMethod()` and `getRequestOptions()` to inspect the details of the simulated request.
      https://symfony.com/doc/current/http_client.html#mockresponse-request-inspection-methods

  -
    question: >
      Which of the following is the correct way to add a custom header `X-Custom: Value` to a specific HTTP client request, overriding any default value?
    answers:
      -
        value: |
          ```php
          $response = $client->request('GET', '/api', [
              'headers' => [
                  'X-Custom' => 'Value',
              ],
          ]);
          ```
        correct: true
      -
        value: |
          ```php
          $response = $client->request('GET', '/api')->addHeader('X-Custom', 'Value');
          ```
        correct: false
      -
        value: |
          ```php
          $response = $client->request('GET', '/api', ['default_headers' => ['X-Custom' => 'Value']]);
          ```
        correct: false
      -
        value: |
          ```php
          $client->setDefaultHeader('X-Custom', 'Value');
          $response = $client->request('GET', '/api');
          ```
        correct: false
    help: |
      Request-specific options, including headers, are passed as the third argument to the `request()` method and override any default client options.
      https://symfony.com/doc/current/http_client.html#overriding-request-options

  -
    question: >
      What is the primary purpose of the `Accept` HTTP header?
    answers:
      -
        value: >
          To specify the character encoding the client prefers.
        correct: false
      -
        value: >
          To indicate the language the client prefers.
        correct: false
      -
        value: >
          To inform the server about the media types (MIME types) the client can process in the response.
        correct: true
      -
        value: >
          To declare the maximum file size the client can receive.
        correct: false
    help: |
      The `Accept` header is a content negotiation header that tells the server which content types the client is willing to accept in the response.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept

  -
    question: >
      Which of the following HTTP status codes indicates that the server is currently unable to handle the request due to a temporary overload or maintenance?
    answers:
      -
        value: >
          404 Not Found
        correct: false
      -
        value: >
          500 Internal Server Error
        correct: false
      -
        value: >
          503 Service Unavailable
        correct: true
      -
        value: >
          429 Too Many Requests
        correct: false
    help: |
      The 503 Service Unavailable status code indicates that the server is not ready to handle the request. Common causes are a server that is down for maintenance or that is overloaded.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503

  -
    question: >
      What is the purpose of the `Content-Length` HTTP header in a response?
    answers:
      -
        value: >
          To specify the maximum length of the request body.
        correct: false
      -
        value: >
          To indicate the size of the response body in bytes.
        correct: true
      -
        value: >
          To define the maximum number of characters in the response.
        correct: false
      -
        value: >
          To limit the amount of data transferred over the network.
        correct: false
    help: |
      The `Content-Length` header indicates the size of the entity-body, in bytes, sent to the recipient.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Length

  -
    question: >
      Which of the following is a valid HTTP method for requesting a representation of the specified resource?
    answers:
      -
        value: >
          GET
        correct: true
      -
        value: >
          PATCH
        correct: false
      -
        value: >
          CONNECT
        correct: false
      -
        value: >
          TRACE
        correct: false
    help: |
      The GET method is used to request data from a specified resource. It should only retrieve data and have no other effect on the data.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET

  -
    question: >
      When a client sends an `If-Modified-Since` header, what is it typically trying to achieve?
    answers:
      -
        value: >
          To request a resource that has been modified after a specific date.
        correct: true
      -
        value: >
          To specify the date when the client last accessed the resource.
        correct: false
      -
        value: >
          To provide a fallback date if the resource is not found.
        correct: false
      -
        value: >
          To set a new modification date for the resource on the server.
        correct: false
    help: |
      The `If-Modified-Since` header is a conditional request header used in conjunction with `Last-Modified`. If the resource has not been modified since the specified date, the server returns a 304 Not Modified status.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Modified-Since

  -
    question: >
      What is the purpose of the `Location` header in an HTTP response?
    answers:
      -
        value: >
          To specify the geographical location of the server.
        correct: false
      -
        value: >
          To indicate the URL to which the client should redirect.
        correct: true
      -
        value: >
          To define the resource's canonical URL.
        correct: false
      -
        value: >
          To provide a link to related resources.
        correct: false
    help: |
      The `Location` header is primarily used in redirect responses (3xx status codes) to indicate the new URL to which the client should navigate.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Location

  -
    question: >
      Which of the following is a valid HTTP method for applying partial modifications to a resource?
    answers:
      -
        value: >
          PUT
        correct: false
      -
        value: >
          POST
        correct: false
      -
        value: >
          PATCH
        correct: true
      -
        value: >
          UPDATE
        correct: false
    help: |
      The PATCH method is used to apply partial modifications to a resource. It is neither safe nor idempotent.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PATCH

  -
    question: >
      When configuring a Symfony HTTP client, what does setting the `timeout` option achieve?
    answers:
      -
        value: >
          It specifies the maximum time the client will wait for a DNS resolution.
        correct: false
      -
        value: >
          It defines the maximum time in seconds for the entire request to complete.
        correct: true
      -
        value: >
          It sets the connection timeout only.
        correct: false
      -
        value: >
          It determines how long the response content will be cached.
        correct: false
    help: |
      The `timeout` option specifies the maximum number of seconds to wait for the whole request (including connection, sending, and receiving data) to complete.
      https://symfony.com/doc/current/http_client.html#request-options

  -
    question: >
      Which of the following is a correct way to set a `secure` cookie in Symfony, ensuring it's only sent over HTTPS?
    answers:
      -
        value: |
          ```php
          $response->headers->setCookie(Cookie::create('name', 'value')->withSecure(true));
          ```
        correct: true
      -
        value: |
          ```php
          $response->headers->setCookie(new Cookie('name', 'value', null, '/', null, true));
          ```
        correct: true
      -
        value: |
          ```php
          $response->setCookie('name', 'value', ['secure' => true]);
          ```
        correct: false
      -
        value: |
          ```php
          $response->headers->set('Set-Cookie', 'name=value; Secure');
          ```
        correct: true
    help: |
      The `secure` flag is set when creating the `Cookie` object or by directly manipulating the `Set-Cookie` header.
      https://symfony.com/doc/current/components/http_foundation.html#managing-cookies

  -
    question: >
      What is the purpose of the `HttpClientInterface::getInfo()` method?
    answers:
      -
        value: >
          To retrieve the HTTP status code of the response.
        correct: false
      -
        value: >
          To get the content of the response body.
        correct: false
      -
        value: >
          To access low-level information about the request and response from the transport layer (e.g., redirect count, start time).
        correct: true
      -
        value: >
          To check if the response is cached.
        correct: false
    help: |
      The `getInfo()` method provides access to various transport-layer details about the request and response, such as `response_headers`, `redirect_count`, `start_time`, and `debug` information.
      https://symfony.com/doc/current/http_client.html#getting-response-info

  -
    question: >
      Which HTTP status code indicates that the request could not be understood by the server due to malformed syntax?
    answers:
      -
        value: >
          400 Bad Request
        correct: true
      -
        value: >
          401 Unauthorized
        correct: false
      -
        value: >
          403 Forbidden
        correct: false
      -
        value: >
          405 Method Not Allowed
        correct: false
    help: |
      The 400 Bad Request status code indicates that the server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400

  -
    question: >
      What is the primary difference between `max-age` and `s-maxage` directives in the `Cache-Control` header?
    answers:
      -
        value: >
          `max-age` is for private caches, `s-maxage` is for public caches.
        correct: true
      -
        value: >
          `max-age` is for server-side caching, `s-maxage` is for client-side caching.
        correct: false
      -
        value: >
          `max-age` specifies the absolute expiration date, `s-maxage` specifies a relative time.
        correct: false
      -
        value: >
          `max-age` applies to all caches, `s-maxage` applies only to proxies.
        correct: true
    help: |
      `max-age` applies to both private and shared caches, while `s-maxage` specifically overrides `max-age` for shared (proxy) caches.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#max-age_and_s-maxage

  -
    question: >
      Which of the following is the most appropriate HTTP method for updating an existing resource completely, replacing its entire representation?
    answers:
      -
        value: >
          POST
        correct: false
      -
        value: >
          PATCH
        correct: false
      -
        value: >
          PUT
        correct: true
      -
        value: >
          UPDATE
        correct: false
    help: |
      The PUT method is typically used to update an existing resource by replacing its entire content with the new payload provided in the request. It is idempotent.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PUT

  -
    question: >
      What is the purpose of the `Accept-Language` HTTP header?
    answers:
      -
        value: >
          To specify the character encoding of the response.
        correct: false
      -
        value: >
          To indicate the human languages that the client prefers.
        correct: true
      -
        value: >
          To define the default language for the server.
        correct: false
      -
        value: >
          To request a specific translation of the content.
        correct: false
    help: |
      The `Accept-Language` header is used by the client to tell the server which human languages it prefers for the response.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language

  -
    question: >
      When making an HTTP client request, how can you apply HTTP Basic authentication for that specific request, overriding any global client configuration?
    answers:
      -
        value: |
          ```php
          $response = $client->request('GET', '/api', ['auth_basic' => ['user', 'pass']]);
          ```
        correct: true
      -
        value: |
          ```php
          $response = $client->request('GET', '/api', ['headers' => ['Authorization' => 'Basic ...']]);
          ```
        correct: true
      -
        value: |
          ```php
          $response = $client->request('GET', '/api', ['auth' => ['basic', 'user', 'pass']]);
          ```
        correct: false
      -
        value: |
          ```php
          $client->setAuthBasic('user', 'pass');
          $response = $client->request('GET', '/api');
          ```
        correct: false
    help: |
      The `auth_basic` option can be set per-request to override or apply HTTP Basic authentication. Directly setting the `Authorization` header is also possible.
      https://symfony.com/doc/current/http_client.html#authentication

  -
    question: >
      Which of the following is a valid HTTP status code for "Unauthorized"?
    answers:
      -
        value: >
          401 Unauthorized
        correct: true
      -
        value: >
          403 Forbidden
        correct: false
      -
        value: >
          407 Proxy Authentication Required
        correct: false
      -
        value: >
          419 Authentication Timeout
        correct: false
    help: |
      The 401 Unauthorized status code indicates that the client must authenticate itself to get the requested response.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/401

  -
    question: >
      What is the primary function of the `Content-Disposition` header in an HTTP response?
    answers:
      -
        value: >
          To specify the character set of the response body.
        correct: false
      -
        value: >
          To suggest a filename for a downloaded file and whether it should be displayed inline or as an attachment.
        correct: true
      -
        value: >
          To indicate the content encoding (e.g., gzip).
        correct: false
      -
        value: >
          To define the content type of the response.
        correct: false
    help: |
      The `Content-Disposition` header is used to control how the browser handles the response, typically for file downloads, suggesting a filename and whether to display inline or download as an attachment.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition

  -
    question: >
      Which of the following HTTP status codes indicates that the server understood the request but refuses to authorize it?
    answers:
      -
        value: >
          401 Unauthorized
        correct: false
      -
        value: >
          403 Forbidden
        correct: true
      -
        value: >
          407 Proxy Authentication Required
        correct: false
      -
        value: >
          405 Method Not Allowed
        correct: false
    help: |
      The 403 Forbidden status code indicates that the client does not have access rights to the content, i.e., it is unauthorized, so the server is refusing to give the requested resource.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403

  -
    question: >
      When making a `POST` request with a JSON payload using Symfony's HTTP Client, which option should you use to send the JSON data?
    answers:
      -
        value: >
          `'body'` with a JSON string.
        correct: true
      -
        value: >
          `'json'` with a PHP array.
        correct: true
      -
        value: >
          `'form_params'` with a JSON string.
        correct: false
      -
        value: >
          `'content'` with a JSON string.
        correct: false
    help: |
      You can provide a JSON string directly to the `'body'` option, or use the `'json'` option with a PHP array, which the client will automatically encode as JSON and set the `Content-Type` header to `application/json`.
      https://symfony.com/doc/current/http_client.html#json-request-body

  -
    question: >
      Which of the following describes a "safe" HTTP method?
    answers:
      -
        value: >
          A method that can be cached by proxies.
        correct: false
      -
        value: >
          A method that does not alter the state of the server.
        correct: true
      -
        value: >
          A method that requires authentication.
        correct: false
      -
        value: >
          A method that is always idempotent.
        correct: false
    help: |
      A "safe" method is one that does not alter the state of the server. GET and HEAD are examples of safe methods.
      https://developer.mozilla.org/en-US/docs/Glossary/Safe/HTTP

  -
    question: >
      Which of the following is the correct way to clear a cookie named `my_cookie` from a `Response` object in Symfony?
    answers:
      -
        value: >
          `$response->clearCookie('my_cookie');`
        correct: true
      -
        value: >
          `$response->headers->clearCookie('my_cookie');`
        correct: true
      -
        value: >
          `$response->removeCookie('my_cookie');`
        correct: false
      -
        value: >
          `$response->headers->set('Set-Cookie', 'my_cookie=; expires=Thu, 01 Jan 1970 00:00:00 GMT');`
        correct: true
    help: |
      The `clearCookie()` method on `ResponseHeaderBag` (accessed via `$response->headers`) is used to clear a cookie. This typically involves setting its expiration date to a past value.
      https://symfony.com/doc/current/components/http_foundation.html#managing-cookies

  -
    question: >
      What is the purpose of the `X-Debug-Token` header in Symfony's HTTP responses?
    answers:
      -
        value: >
          To indicate that the response is for a debug environment.
        correct: false
      -
        value: >
          To provide a token that can be used to access detailed debug information in the Web Profiler.
        correct: true
      -
        value: >
          To enable XDebug for the current request.
        correct: false
      -
        value: >
          To prevent caching of the response in debug mode.
        correct: false
    help: |
      The `X-Debug-Token` header contains a token that allows you to access the Web Profiler for that specific request, providing detailed debugging information.
      https://symfony.com/doc/current/profiler.html#accessing-the-profiler-for-a-specific-request

  -
    question: >
      Which of the following HTTP status codes indicates that the requested resource has been found under another URI and should be retrieved using a GET method?
    answers:
      -
        value: >
          301 Moved Permanently
        correct: false
      -
        value: >
          302 Found
        correct: true
      -
        value: >
          303 See Other
        correct: true
      -
        value: >
          307 Temporary Redirect
        correct: false
    help: |
      Both 302 Found and 303 See Other indicate that the resource is temporarily located elsewhere. 303 explicitly states that the new resource should be retrieved with a GET request, even if the original request was POST.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/302
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/303

  -
    question: >
      What is the primary purpose of `Symfony\Component\HttpClient\Response\MockResponse::fromFile()`?
    answers:
      -
        value: >
          To create a mock response by reading its body content from a file.
        correct: true
      -
        value: >
          To save a real HTTP response to a file for later inspection.
        correct: false
      -
        value: >
          To send a file as the body of an HTTP request.
        correct: false
      -
        value: >
          To simulate a file upload in a test.
        correct: false
    help: |
      `MockResponse::fromFile()` is a static factory method introduced in Symfony 7.1 that allows you to create a `MockResponse` object with its body content loaded directly from a specified file, useful for realistic testing.
      https://symfony.com/doc/current/http_client.html#mockresponse-fromfile

  -
    question: >
      Which of the following is typically used by a client to indicate the preferred character sets for the response?
    answers:
      -
        value: >
          `Content-Type`
        correct: false
      -
        value: >
          `Accept-Charset`
        correct: true
      -
        value: >
          `Content-Encoding`
        correct: false
      -
        value: >
          `Accept`
        correct: false
    help: |
      The `Accept-Charset` header is used by the client to indicate which character sets are acceptable for the response.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Charset

  -
    question: >
      What is the purpose of the `HttpOptions` class in Symfony's HTTP Client?
    answers:
      -
        value: >
          To define global default options for all HTTP clients.
        correct: false
      -
        value: >
          To provide a fluent interface for building and modifying request options.
        correct: true
      -
        value: >
          To validate the structure of HTTP client configuration.
        correct: false
      -
        value: >
          To manage HTTP client factories.
        correct: false
    help: |
      `HttpOptions` provides a fluent API to construct and manipulate an array of HTTP client request options, making it easier to manage complex configurations.
      https://symfony.com/doc/current/http_client.html#http-options

  -
    question: >
      Which of the following HTTP status codes indicates that the request method is not supported for the requested resource?
    answers:
      -
        value: >
          400 Bad Request
        correct: false
      -
        value: >
          403 Forbidden
        correct: false
      -
        value: >
          405 Method Not Allowed
        correct: true
      -
        value: >
          501 Not Implemented
        correct: false
    help: |
      The 405 Method Not Allowed status code indicates that the request method is known by the server but has been disabled or is not supported for the target resource.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/405

  -
    question: >
      What is the purpose of the `Pragma: no-cache` header?
    answers:
      -
        value: >
          It instructs the server not to cache the response.
        correct: false
      -
        value: >
          It is an HTTP/1.0 header equivalent to `Cache-Control: no-cache`.
        correct: true
      -
        value: >
          It forces a revalidation of the cached resource.
        correct: false
      -
        value: >
          It is used for private caching only.
        correct: false
    help: |
      `Pragma: no-cache` is an HTTP/1.0 header that serves a similar purpose to `Cache-Control: no-cache` in HTTP/1.1, instructing caches not to serve a cached response without revalidation.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Pragma

  -
    question: >
      Which of the following is true about "idempotent" HTTP methods?
    answers:
      -
        value: >
          They always return the same response body.
        correct: false
      -
        value: >
          Executing them multiple times has the same effect as executing them once.
        correct: true
      -
        value: >
          They are always safe.
        correct: false
      -
        value: >
          They are only used for read operations.
        correct: false
    help: |
      An idempotent HTTP method is one that, when executed multiple times, produces the same result on the server as executing it once. GET, HEAD, PUT, and DELETE are idempotent.
      https://developer.mozilla.org/en-US/docs/Glossary/Idempotent

  -
    question: >
      What is the purpose of the `If-None-Match` HTTP header?
    answers:
      -
        value: >
          To provide a list of ETags that the client does not have.
        correct: false
      -
        value: >
          To make a conditional request, only retrieving the resource if its ETag does not match the one provided.
        correct: true
      -
        value: >
          To specify the preferred ETag for the response.
        correct: false
      -
        value: >
          To indicate that the client does not support ETags.
        correct: false
    help: |
      The `If-None-Match` header is a conditional request header used with `ETag`. If the ETag of the resource on the server matches the one provided, a 304 Not Modified response is returned.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-None-Match

  -
    question: >
      Which of the following is a valid HTTP method for requesting information about the communication options available for the target resource?
    answers:
      -
        value: >
          GET
        correct: false
      -
        value: >
          HEAD
        correct: false
      -
        value: >
          OPTIONS
        correct: true
      -
        value: >
          TRACE
        correct: false
    help: |
      The OPTIONS method is used to describe the communication options for the target resource. It allows the client to determine the capabilities of a web server or a resource without actually performing an action.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/OPTIONS

  -
    question: >
      What is the primary difference between `HttpClient::create()` and `HttpClient::createForBaseUri()`?
    answers:
      -
        value: >
          `create()` is for standalone usage, `createForBaseUri()` is for Symfony applications.
        correct: false
      -
        value: >
          `create()` creates a generic client, `createForBaseUri()` creates a client with a predefined base URI and options.
        correct: true
      -
        value: >
          `create()` uses cURL, `createForBaseUri()` uses native PHP streams.
        correct: false
      -
        value: >
          `create()` is synchronous, `createForBaseUri()` is asynchronous.
        correct: false
    help: |
      `createForBaseUri()` is a convenience method that creates a `ScopingHttpClient` pre-configured with a base URI and associated options, simplifying the setup for API clients.
      https://symfony.com/doc/current/http_client.html#creating-scoped-http-clients

  -
    question: >
      Which of the following HTTP status codes indicates that the server requires the client to provide authentication credentials to gain access to the resource?
    answers:
      -
        value: >
          401 Unauthorized
        correct: true
      -
        value: >
          403 Forbidden
        correct: false
      -
        value: >
          407 Proxy Authentication Required
        correct: false
      -
        value: >
          419 Authentication Timeout
        correct: false
    help: |
      The 401 Unauthorized status code indicates that the client must authenticate itself to get the requested response.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/401

  -
    question: >
      What is the purpose of the `X-Forwarded-For` header?
    answers:
      -
        value: >
          To indicate the original IP address of the client when the request passes through a proxy.
        correct: true
      -
        value: >
          To specify the preferred proxy server for the request.
        correct: false
      -
        value: >
          To forward the request to another server.
        correct: false
      -
        value: >
          To indicate that the request is a forwarded request.
        correct: false
    help: |
      The `X-Forwarded-For` header is a de facto standard header for identifying the originating IP address of a client connecting to a web server through an HTTP proxy or load balancer.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For

  -
    question: >
      Which of the following is a valid HTTP method for submitting an entity to the specified resource, often causing a change in state or side effects on the server?
    answers:
      -
        value: >
          GET
        correct: false
      -
        value: >
          HEAD
        correct: false
      -
        value: >
          POST
        correct: true
      -
        value: >
          OPTIONS
        correct: false
    help: |
      The POST method is used to send data to a server to create/update a resource. It is neither safe nor idempotent.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST

  -
    question: >
      What is the primary role of the `Accept-Encoding` header in content negotiation?
    answers:
      -
        value: >
          To specify the preferred character set for the response.
        correct: false
      -
        value: >
          To indicate the compression algorithms the client can handle.
        correct: true
      -
        value: >
          To define the language preferences of the client.
        correct: false
      -
        value: >
          To specify the media types the client accepts.
        correct: false
    help: |
      The `Accept-Encoding` header is used by the client to tell the server which content encodings (e.g., gzip, deflate) it can understand.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Encoding

  -
    question: >
      Which of the following is a valid HTTP status code for "Not Found"?
    answers:
      -
        value: >
          200 OK
        correct: false
      -
        value: >
          403 Forbidden
        correct: false
      -
        value: >
          404 Not Found
        correct: true
      -
        value: >
          500 Internal Server Error
        correct: false
    help: |
      The 404 Not Found status code indicates that the server cannot find the requested resource.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404

  -
    question: >
      What is the purpose of the `Content-Encoding` header in an HTTP response?
    answers:
      -
        value: >
          To specify the character set of the response body.
        correct: false
      -
        value: >
          To indicate the encoding (e.g., compression) applied to the response body.
        correct: true
      -
        value: >
          To define the media type of the response.
        correct: false
      -
        value: >
          To suggest a filename for a downloaded resource.
        correct: false
    help: |
      The `Content-Encoding` header indicates the encoding (e.g., `gzip`, `deflate`) that has been applied to the response body.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding

  -
    question: >
      Which of the following HTTP status codes indicates that the server successfully processed the request, but there is no content to send back?
    answers:
      -
        value: >
          200 OK
        correct: false
      -
        value: >
          201 Created
        correct: false
      -
        value: >
          204 No Content
        correct: true
      -
        value: >
          304 Not Modified
        correct: false
    help: |
      The 204 No Content status code indicates that the server successfully processed the request, but is not returning any content. This is commonly used for successful DELETE or PUT operations that don't need to return a body.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/204

  -
    question: >
      When a client sends an `If-Match` header, what is it typically trying to achieve?
    answers:
      -
        value: >
          To request a resource if its ETag matches the one provided.
        correct: true
      -
        value: >
          To specify the preferred ETag for the response.
        correct: false
      -
        value: >
          To indicate that the client does not support ETags.
        correct: false
      -
        value: >
          To provide a list of ETags that the client has.
        correct: false
    help: |
      The `If-Match` header is a conditional request header used with `ETag`. The request will only be processed if the ETag of the resource on the server matches one of the ETags provided in the header.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Match

  -
    question: >
      What is the purpose of the `Referer` (sic) header in an HTTP request?
    answers:
      -
        value: >
          To specify the URL of the page that linked to the current request.
        correct: true
      -
        value: >
          To indicate the preferred language of the client.
        correct: false
      -
        value: >
          To provide authentication credentials.
        correct: false
      -
        value: >
          To define the content type of the request body.
        correct: false
    help: |
      The `Referer` header contains the absolute or partial address of the page that made the request. This allows servers to identify where people are coming from.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer

  -
    question: >
      Which of the following HTTP status codes indicates that the request has been accepted for processing, but the processing has not been completed?
    answers:
      -
        value: >
          200 OK
        correct: false
      -
        value: >
          201 Created
        correct: false
      -
        value: >
          202 Accepted
        correct: true
      -
        value: >
          204 No Content
        correct: false
    help: |
      The 202 Accepted status code indicates that the request has been accepted for processing, but the processing has not been completed. The request might or might not be acted upon, and may be disallowed when processing actually takes place.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/202

  -
    question: >
      What is the purpose of the `Transfer-Encoding: chunked` header in an HTTP response?
    answers:
      -
        value: >
          To indicate that the response body is compressed.
        correct: false
      -
        value: >
          To specify that the response body is being sent in a series of chunks, without a predefined `Content-Length`.
        correct: true
      -
        value: >
          To define the character encoding of the response.
        correct: false
      -
        value: >
          To indicate that the connection will be closed after the response.
        correct: false
    help: |
      `Transfer-Encoding: chunked` indicates that the message body is transferred in a series of chunks, which is useful when the server doesn't know the full size of the response body in advance.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Transfer-Encoding

  -
    question: >
      Which of the following is a valid HTTP status code for "Bad Gateway"?
    answers:
      -
        value: >
          500 Internal Server Error
        correct: false
      -
        value: >
          502 Bad Gateway
        correct: true
      -
        value: >
          503 Service Unavailable
        correct: false
      -
        value: >
          504 Gateway Timeout
        correct: false
    help: |
      The 502 Bad Gateway status code indicates that the server, while acting as a gateway or proxy, received an invalid response from an upstream server it accessed in attempting to fulfill the request.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/502

  -
    question: >
      What is the purpose of the `X-Powered-By` header?
    answers:
      -
        value: >
          To indicate the web server software (e.g., Apache, Nginx).
        correct: false
      -
        value: >
          To specify the application framework or technology used (e.g., PHP, Symfony).
        correct: true
      -
        value: >
          To provide a unique identifier for the server instance.
        correct: false
      -
        value: >
          To indicate the power consumption of the server.
        correct: false
    help: |
      The `X-Powered-By` header is a non-standard header used to indicate the technology (e.g., PHP, ASP.NET, Symfony) that powers the web application.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Powered-By

  -
    question: >
      Which of the following HTTP status codes indicates that the server, while acting as a gateway or proxy, did not receive a timely response from an upstream server?
    answers:
      -
        value: >
          502 Bad Gateway
        correct: false
      -
        value: >
          503 Service Unavailable
        correct: false
      -
        value: >
          504 Gateway Timeout
        correct: true
      -
        value: >
          408 Request Timeout
        correct: false
    help: |
      The 504 Gateway Timeout status code indicates that the server, while acting as a gateway or proxy, did not receive a timely response from an upstream server it needed to access in order to complete the request.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/504

  -
    question: >
      What is the purpose of the `Strict-Transport-Security` (HSTS) header?
    answers:
      -
        value: >
          To force the client to use HTTP/2.
        correct: false
      -
        value: >
          To instruct the browser to only interact with the site using HTTPS for a specified period.
        correct: true
      -
        value: >
          To prevent cross-site scripting (XSS) attacks.
        correct: false
      -
        value: >
          To enable server-side caching for secure connections.
        correct: false
    help: |
      The `Strict-Transport-Security` (HSTS) header is a security feature that forces browsers to interact with a website only over HTTPS, even if the user types HTTP.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security