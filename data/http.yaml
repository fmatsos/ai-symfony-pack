category: HTTP

questions:
  -
    question: >
      What is the fundamental principle of the HTTP protocol regarding client-server communication?
    answers:
      - { value: "It is a stateless protocol, where each request is independent.", correct: true }
      - { value: "It maintains a persistent connection for the entire user session.", correct: false }
      - { value: "It requires a handshake for every data packet exchanged.", correct: false }
      - { value: "It is primarily designed for real-time, bidirectional communication.", correct: false }
    help: |
      HTTP is a stateless protocol, meaning each request from a client to a server is treated as an independent transaction, unrelated to any previous request.
      https://symfony.com/doc/current/introduction/http_fundamentals.html

  -
    question: >
      Which of the following components are typically part of an HTTP request message?
    answers:
      - { value: "Status Line, Headers, Body", correct: false }
      - { value: "Request Line, Headers, Body", correct: true }
      - { value: "Response Line, Status Code, Headers", correct: false }
      - { value: "Method, URI, Protocol Version, Headers, Body", correct: true }
      - { value: "Date, Server, Content-Type", correct: false }
    help: |
      An HTTP request message consists of a request line (method, URI, HTTP version), request headers, and an optional message body.
      https://symfony.com/doc/current/introduction/http_fundamentals.html

  -
    question: >
      What does an HTTP response primarily consist of?
    answers:
      - { value: "Request Line, Headers, Body", correct: false }
      - { value: "Status Line, Headers, Body", correct: true }
      - { value: "Method, URI, Protocol Version", correct: false }
      - { value: "Only the content of the requested resource.", correct: false }
    help: |
      An HTTP response message consists of a status line (HTTP version, status code, reason phrase), response headers, and an optional message body.
      https://symfony.com/doc/current/introduction/http_fundamentals.html

  -
    question: >
      Which HTTP method is considered idempotent but not safe?
    answers:
      - { value: "GET", correct: false }
      - { value: "POST", correct: false }
      - { value: "PUT", correct: true }
      - { value: "DELETE", correct: true }
      - { value: "HEAD", correct: false }
    help: |
      Idempotent methods (like PUT and DELETE) can be called multiple times without changing the result beyond the first call, but they are not "safe" as they modify server state. Safe methods (like GET and HEAD) do not modify server state.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#http-methods

  -
    question: >
      What does an HTTP 200 OK status code indicate?
    answers:
      - { value: "The request could not be understood by the server.", correct: false }
      - { value: "The request has been fulfilled, and the response contains the requested resource.", correct: true }
      - { value: "The requested resource has been permanently moved.", correct: false }
      - { value: "The server encountered an unexpected condition that prevented it from fulfilling the request.", correct: false }
    help: |
      The 200 (OK) status code indicates that the request has succeeded.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#http-status-codes

  -
    question: >
      How are cookies typically sent from the server to the client in an HTTP response?
    answers:
      - { value: "In the request body.", correct: false }
      - { value: "Using the `Set-Cookie` HTTP response header.", correct: true }
      - { value: "As part of the URL query string.", correct: false }
      - { value: "Through a WebSocket connection.", correct: false }
    help: |
      Cookies are sent from the server to the client using the `Set-Cookie` HTTP response header.
      https://symfony.com/doc/current/components/http_foundation.html#setting-cookies

  -
    question: >
      What is the purpose of the `Cache-Control: max-age` directive in HTTP caching?
    answers:
      - { value: "To specify the maximum age a cached response can be considered fresh by shared caches.", correct: true }
      - { value: "To indicate that the response should never be cached.", correct: false }
      - { value: "To force the client to revalidate the cache with the origin server.", correct: false }
      - { value: "To define the maximum file size that can be cached.", correct: false }
    help: |
      The `max-age` directive indicates that the response is considered fresh until its age is greater than the specified number of seconds.
      https://symfony.com/doc/current/http_cache/expiration.html#cache-control-header

  -
    question: >
      Which HTTP header is primarily used by the client to indicate preferred content types?
    answers:
      - { value: "Content-Type", correct: false }
      - { value: "Accept", correct: true }
      - { value: "User-Agent", correct: false }
      - { value: "Content-Encoding", correct: false }
    help: |
      The `Accept` header is used by the client to specify which media types are acceptable for the response.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-accept-headers

  -
    question: >
      How does Symfony's `Request` object determine the client's preferred languages?
    answers:
      - { value: "By inspecting the `User-Agent` header.", correct: false }
      - { value: "By parsing the `Accept-Language` header.", correct: true }
      - { value: "By checking the client's IP address.", correct: false }
      - { value: "By analyzing the browser's default settings.", correct: false }
    help: |
      The `Request::getLanguages()` method returns an ordered list of languages accepted by the client, based on the `Accept-Language` header.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-accept-headers

  -
    question: |
      Given a Symfony service, how would you correctly inject the primary HTTP client?
      ```php
      namespace App\Service;

      use /* ??? */;

      class MyService
      {
          public function __construct(
              private /* ??? */ $client,
          ) {}
      }
      ```
    answers:
      - { value: "`Symfony\\Component\\HttpClient\\HttpClient`", correct: false }
      - { value: "`Psr\\Http\\Client\\HttpClientInterface`", correct: false }
      - { value: "`Symfony\\Contracts\\HttpClient\\HttpClientInterface`", correct: true }
      - { value: "`HttpClient`", correct: false }
    help: |
      The `HttpClientInterface` from `Symfony\\Contracts\\HttpClient` is the recommended interface for injecting the HTTP client in Symfony applications, allowing for decoupling and easy testing.
      https://symfony.com/doc/current/http_client.html#injecting-the-http-client

  -
    question: |
      How do you send a POST request with a JSON body using Symfony's HttpClient?
    answers:
      - { value: "`$client->request('POST', '/api', ['json' => ['key' => 'value']]);`", correct: true }
      - { value: "`$client->request('POST', '/api', ['body' => json_encode(['key' => 'value'])]);`", correct: true }
      - { value: "`$client->request('POST', '/api', ['form_params' => ['key' => 'value']]);`", correct: false }
      - { value: "`$client->request('POST', '/api', ['headers' => ['Content-Type' => 'application/json'], 'body' => '{"key":"value"}']);`", correct: true }
    help: |
      Symfony's HttpClient provides a convenient `json` option to automatically encode an array into a JSON body and set the `Content-Type` header. Alternatively, you can manually encode and set the `body` and `Content-Type` header.
      https://symfony.com/doc/current/http_client.html#json-body

  -
    question: |
      How do you get the content of an `HttpClient` response as a PHP array, assuming it's JSON?
    answers:
      - { value: "`$response->getContent();`", correct: false }
      - { value: "`$response->toArray();`", correct: true }
      - { value: "`json_decode($response->getContent(), true);`", correct: true }
      - { value: "`$response->json();`", correct: false }
    help: |
      The `toArray()` method on `ResponseInterface` conveniently decodes the JSON content into a PHP array. You can also manually get the content as a string and then decode it.
      https://symfony.com/doc/current/http_client.html#getting-the-response-content

  -
    question: |
      How can you retrieve a query parameter named 'id' from a Symfony `Request` object, providing a default value of `null` if it's not present?
      ```php
      use Symfony\Component\HttpFoundation\Request;

      $request = Request::createFromGlobals();
      $id = /* ??? */;
      ```
    answers:
      - { value: "`$request->query->get('id');`", correct: true }
      - { value: "`$request->get('id');`", correct: false }
      - { value: "`$request->query['id'] ?? null;`", correct: false }
      - { value: "`$request->attributes->get('id');`", correct: false }
    help: |
      Query parameters (GET parameters) are accessed via the `query` property of the `Request` object, using the `get()` method. The `get()` method accepts a second argument for a default value.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#accessing-request-data

  -
    question: |
      How do you set a custom HTTP header named 'X-Custom-Header' with value 'MyValue' on a Symfony `Response` object?
      ```php
      use Symfony\Component\HttpFoundation\Response;

      $response = new Response();
      /* ??? */
      ```
    answers:
      - { value: "`$response->headers->set('X-Custom-Header', 'MyValue');`", correct: true }
      - { value: "`$response->setHeader('X-Custom-Header', 'MyValue');`", correct: false }
      - { value: "`$response->set('X-Custom-Header', 'MyValue');`", correct: false }
      - { value: "`$response->addHeader('X-Custom-Header', 'MyValue');`", correct: false }
    help: |
      HTTP headers on a `Response` object are managed via its `headers` property, which is an instance of `ResponseHeaderBag`. The `set()` method is used to set a header.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#creating-a-response

  -
    question: |
      How would you configure a Symfony `Response` to be public and cacheable for 3600 seconds using the `Response` object methods?
      ```php
      use Symfony\Component\HttpFoundation\Response;

      $response = new Response();
      /* ??? */
      ```
    answers:
      - { value: "`$response->setPublic()->setMaxAge(3600);`", correct: true }
      - { value: "`$response->setCache(['public' => true, 'max_age' => 3600]);`", correct: true }
      - { value: "`$response->setPrivate()->setExpires(new \DateTime('+1 hour'));`", correct: false }
      - { value: "`$response->headers->set('Cache-Control', 'public, max-age=3600');`", correct: true }
    help: |
      The `Response` object provides methods like `setPublic()` and `setMaxAge()` for setting cache-related headers. The `setCache()` method can also be used to set multiple cache directives at once.
      https://symfony.com/doc/current/http_cache/expiration.html#cache-control-header

  -
    question: >
      Which HTTP method is typically used to retrieve representations of a resource?
    answers:
      - { value: "POST", correct: false }
      - { value: "PUT", correct: false }
      - { value: "GET", correct: true }
      - { value: "DELETE", correct: false }
    help: |
      The GET method is used to request data from a specified resource. It is one of the most common HTTP methods.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#http-methods

  -
    question: >
      What does an HTTP 404 Not Found status code signify?
    answers:
      - { value: "The request was successful.", correct: false }
      - { value: "The server understood the request but refuses to authorize it.", correct: false }
      - { value: "The requested resource could not be found on the server.", correct: true }
      - { value: "The server is temporarily unavailable.", correct: false }
    help: |
      The 404 (Not Found) status code indicates that the server cannot find the requested resource.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#http-status-codes

  -
    question: >
      In the context of HTTP, what is the role of a "user agent"?
    answers:
      - { value: "A server-side application that processes requests.", correct: false }
      - { value: "A client application (e.g., web browser) that initiates requests.", correct: true }
      - { value: "A database system used to store web content.", correct: false }
      - { value: "A network router that directs HTTP traffic.", correct: false }
    help: |
      A user agent is the client application that sends the HTTP request, typically a web browser. The `User-Agent` header identifies this application.
      https://symfony.com/doc/current/introduction/http_fundamentals.html

  -
    question: >
      What is the difference between `GET` and `POST` methods regarding data transmission?
    answers:
      - { value: "`GET` sends data in the request body, while `POST` sends data in the URL.", correct: false }
      - { value: "`GET` is used for retrieving data, and `POST` is used for submitting data to be processed.", correct: true }
      - { value: "`GET` requests are always secure, while `POST` requests are not.", correct: false }
      - { value: "`GET` data is visible in the URL and has length limitations, `POST` data is in the body and has no such limitations.", correct: true }
    help: |
      GET requests append data to the URL, making it visible and subject to URL length limits. POST requests send data in the request body, which is not visible in the URL and has no practical length limits.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#http-methods

  -
    question: >
      Which part of an HTTP response indicates whether the request was successful or not?
    answers:
      - { value: "The `Content-Type` header.", correct: false }
      - { value: "The HTTP method used in the request.", correct: false }
      - { value: "The status code in the status line.", correct: true }
      - { value: "The `User-Agent` header.", correct: false }
    help: |
      The HTTP status code, part of the status line, indicates the outcome of the request (e.g., 200 OK, 404 Not Found, 500 Internal Server Error).
      https://symfony.com/doc/current/introduction/http_fundamentals.html#http-status-codes

  -
    question: |
      How do you create and set a simple HTTP-only cookie named 'my_cookie' with value 'my_value' on a Symfony `Response` object?
      ```php
      use Symfony\Component\HttpFoundation\Response;
      use Symfony\Component\HttpFoundation\Cookie;

      $response = new Response();
      /* ??? */
      ```
    answers:
      - { value: "`$response->headers->setCookie(Cookie::create('my_cookie', 'my_value')->withHttpOnly(true));`", correct: true }
      - { value: "`$response->headers->set('Set-Cookie', 'my_cookie=my_value; HttpOnly');`", correct: true }
      - { value: "`$response->setCookie('my_cookie', 'my_value', ['httpOnly' => true]);`", correct: false }
      - { value: "`$response->addCookie(new Cookie('my_cookie', 'my_value', 0, '/', null, false, true));`", correct: true }
    help: |
      The `ResponseHeaderBag::setCookie()` method accepts a `Cookie` object. The `Cookie::create()` factory method or direct constructor allows setting the `httpOnly` flag.
      https://symfony.com/doc/current/components/http_foundation.html#setting-cookies

  -
    question: >
      What is the purpose of the `ETag` header in HTTP caching?
    answers:
      - { value: "To specify the expiration date of a cached resource.", correct: false }
      - { value: "To provide a unique identifier for a specific version of a resource.", correct: true }
      - { value: "To indicate the maximum age a cached response can be considered fresh.", correct: false }
      - { value: "To force the client to revalidate the cache with the origin server.", correct: false }
    help: |
      The `ETag` (entity tag) is an opaque identifier assigned by a web server to a specific version of a resource found at a URL. If the resource content changes, a new ETag is generated.
      https://symfony.com/doc/current/http_cache/validation.html#etag

  -
    question: >
      If a client sends `Accept: text/html, application/json;q=0.9`, which content type is preferred?
    answers:
      - { value: "application/json", correct: false }
      - { value: "text/html", correct: true }
      - { value: "Both are equally preferred.", correct: false }
      - { value: "Neither, the server will choose.", correct: false }
    help: |
      The `q` parameter (quality value) indicates preference. Without a `q` value, it defaults to 1.0. So, `text/html` (q=1.0) is preferred over `application/json` (q=0.9).
      https://symfony.com/doc/current/components/http_foundation.html#accessing-accept-headers

  -
    question: |
      How do you get an array of languages accepted by the client, ordered by quality, from a Symfony `Request` object?
      ```php
      use Symfony\Component\HttpFoundation\Request;

      $request = Request::createFromGlobals();
      $languages = /* ??? */;
      ```
    answers:
      - { value: "`$request->getPreferredLanguage();`", correct: false }
      - { value: "`$request->getLanguages();`", correct: true }
      - { value: "`$request->headers->get('Accept-Language');`", correct: false }
      - { value: "`$request->getLocale();`", correct: false }
    help: |
      The `Request::getLanguages()` method returns an array of languages the client accepts, ordered by descending quality.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-accept-headers

  -
    question: >
      What is the primary benefit of using `HttpClientInterface::stream()` for large responses?
    answers:
      - { value: "It automatically decompresses the response content.", correct: false }
      - { value: "It allows processing the response content chunk by chunk, preventing memory exhaustion.", correct: true }
      - { value: "It ensures the entire response is loaded into memory before processing.", correct: false }
      - { value: "It automatically retries failed requests.", correct: false }
    help: |
      The `stream()` method allows processing large HTTP responses in chunks, which is crucial for handling large files or continuous data streams without consuming excessive memory.
      https://symfony.com/doc/current/http_client.html#streaming-responses

  -
    question: >
      Which HTTP client transport does `HttpClient::create()` prioritize if available?
    answers:
      - { value: "Native PHP streams (`NativeHttpClient`)", correct: false }
      - { value: "cURL PHP extension (`CurlHttpClient`)", correct: true }
      - { value: "`amphp/http-client` package (`AmpHttpClient`)", correct: false }
      - { value: "Guzzle HTTP client", correct: false }
    help: |
      `HttpClient::create()` prioritizes the cURL PHP extension for its `CurlHttpClient` because it generally offers better performance and features.
      https://symfony.com/doc/current/http_client.html#choosing-the-http-client-transport

  -
    question: >
      Which HTTP method is used to apply partial modifications to a resource?
    answers:
      - { value: "PUT", correct: false }
      - { value: "POST", correct: false }
      - { value: "PATCH", correct: true }
      - { value: "UPDATE", correct: false }
    help: |
      The PATCH method is used to apply partial modifications to a resource. Unlike PUT, which replaces the entire resource, PATCH applies incremental changes.
      https://www.php.net/manual/en/reserved.variables.server.php (General HTTP knowledge, not directly in Symfony docs snippet, but fundamental to HTTP methods)

  -
    question: >
      What does an HTTP 301 Moved Permanently status code indicate?
    answers:
      - { value: "The request has been temporarily redirected.", correct: false }
      - { value: "The requested resource has been permanently moved to a new URL.", correct: true }
      - { value: "The server is redirecting the client to a different resource for security reasons.", correct: false }
      - { value: "The resource is unavailable due to server maintenance.", correct: false }
    help: |
      The 301 (Moved Permanently) status code indicates that the target resource has been assigned a new permanent URI and any future references to this resource ought to use one of the enclosed URIs.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#http-status-codes

  -
    question: >
      What is the role of a reverse proxy in an HTTP client-server architecture?
    answers:
      - { value: "It acts as an intermediary for clients requesting resources from other servers.", correct: false }
      - { value: "It sits in front of web servers and forwards client requests to them, often for load balancing or caching.", correct: true }
      - { value: "It is a client-side script that handles AJAX requests.", correct: false }
      - { value: "It encrypts all communication between the client and the server.", correct: false }
    help: |
      A reverse proxy acts as an intermediary for requests from clients seeking resources from backend servers. It can provide benefits like load balancing, caching, and security.
      https://symfony.com/doc/current/http_cache/varnish.html

  -
    question: |
      How do you access the raw request body content of a Symfony `Request` object, useful for non-form data like XML?
      ```php
      use Symfony\Component\HttpFoundation\Request;

      $request = Request::createFromGlobals();
      $content = /* ??? */;
      ```
    answers:
      - { value: "`$request->request->all();`", correct: false }
      - { value: "`$request->getContent();`", correct: true }
      - { value: "`$request->getPayload()->all();`", correct: false }
      - { value: "`$request->query->all();`", correct: false }
    help: |
      The `Request::getContent()` method retrieves the raw content of the request body, which is useful for processing non-form data formats such as XML or JSON sent directly in the body.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: |
      How can you redirect a client to a new URL `'/new-path'` using a Symfony `RedirectResponse`?
      ```php
      use Symfony\Component\HttpFoundation\RedirectResponse;
      use Symfony\Component\HttpFoundation\Response;

      /* ??? */
      ```
    answers:
      - { value: "`$response = new RedirectResponse('/new-path');`", correct: true }
      - { value: "`$response = new Response('', Response::HTTP_FOUND, ['Location' => '/new-path']);`", correct: true }
      - { value: "`$response = Response::redirect('/new-path');`", correct: false }
      - { value: "`$response = new Response(); $response->setRedirect('/new-path');`", correct: false }
    help: |
      The `RedirectResponse` class is specifically designed for HTTP redirects. It automatically sets the `Location` header and the appropriate 3xx status code (defaulting to 302 Found).
      https://symfony.com/doc/current/components/http_foundation.html#redirectresponse

  -
    question: >
      What is the difference between `Cache-Control: public` and `Cache-Control: private`?
    answers:
      - { value: "`public` allows caching by any cache, while `private` allows caching only by the client's browser.", correct: true }
      - { value: "`public` requires authentication, while `private` does not.", correct: false }
      - { value: "`public` applies to static assets, while `private` applies to dynamic content.", correct: false }
      - { value: "`public` means the content is encrypted, `private` means it's not.", correct: false }
    help: |
      `public` indicates that the response may be cached by any cache, even if it would normally be uncacheable. `private` indicates that the response is intended for a single user and must not be stored by a shared cache.
      https://symfony.com/doc/current/http_cache/expiration.html#cache-control-header

  -
    question: >
      Which HTTP header is used to indicate that a cached response should vary based on certain request headers?
    answers:
      - { value: "Cache-Control", correct: false }
      - { value: "Expires", correct: false }
      - { value: "Vary", correct: true }
      - { value: "ETag", correct: false }
    help: |
      The `Vary` HTTP response header indicates that the response content varies depending on the values of the specified request headers. Caches must re-evaluate the cached response if these headers change.
      https://symfony.com/doc/current/http_cache/cache_vary.html

  -
    question: >
      How can you configure default headers for all requests made by a Symfony HTTP client instance?
    answers:
      - { value: "By passing a `headers` array in the `default_options` section of `framework.yaml`.", correct: true }
      - { value: "By calling `setHeaders()` on the `HttpClientInterface` directly.", correct: false }
      - { value: "By defining them in the `parameters.yaml` file.", correct: false }
      - { value: "By passing a `headers` array as the second argument to `HttpClient::create()`.", correct: true }
    help: |
      Default options, including headers, can be configured globally for the HTTP client in `framework.yaml` or directly when creating a standalone client instance using `HttpClient::create()`.
      https://symfony.com/doc/current/http_client.html#default-request-options

  -
    question: |
      How do you create a `MockHttpClient` with a single callback function to define its response behavior?
      ```php
      use Symfony\Component\HttpClient\MockHttpClient;
      use Symfony\Component\HttpClient\Response\MockResponse;

      $callback = function ($method, $url, $options): MockResponse {
          // ... logic to return a MockResponse
          return new MockResponse('Mocked content');
      };

      $client = /* ??? */;
      ```
    answers:
      - { value: "`new MockHttpClient($callback);`", correct: true }
      - { value: "`MockHttpClient::create($callback);`", correct: false }
      - { value: "`new MockHttpClient([$callback]);`", correct: false }
      - { value: "`$client = new MockHttpClient(); $client->setResponseCallback($callback);`", correct: false }
    help: |
      The `MockHttpClient` constructor can accept a callable as its first argument. This callable will be invoked for each request to generate a `MockResponse`.
      https://symfony.com/doc/current/http_client.html#mocking-responses

  -
    question: >
      Which HTTP method is used to retrieve only the headers of a resource, without the body?
    answers:
      - { value: "GET", correct: false }
      - { value: "HEAD", correct: true }
      - { value: "OPTIONS", correct: false }
      - { value: "TRACE", correct: false }
    help: |
      The HEAD method is identical to GET except that the server MUST NOT return a message-body in the response. It's often used to check resource existence or metadata.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#http-methods

  -
    question: >
      What does an HTTP 403 Forbidden status code mean?
    answers:
      - { value: "The requested resource requires authentication.", correct: false }
      - { value: "The server understood the request but refuses to authorize it.", correct: true }
      - { value: "The server is temporarily unavailable.", correct: false }
      - { value: "The request has been successfully processed.", correct: false }
    help: |
      The 403 (Forbidden) status code indicates that the server understood the request but refuses to authorize it. This is different from 401 (Unauthorized) which implies authentication is required.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#http-status-codes

  -
    question: >
      What is the purpose of a URI (Uniform Resource Identifier) in HTTP?
    answers:
      - { value: "To define the network protocol used for communication.", correct: false }
      - { value: "To uniquely identify a resource on the web.", correct: true }
      - { value: "To specify the client's preferred language.", correct: false }
      - { value: "To describe the content type of the response.", correct: false }
    help: |
      A URI (Uniform Resource Identifier) is a string of characters used to identify a name or a web resource. In HTTP, it's used to locate the resource being requested.
      https://symfony.com/doc/current/introduction/http_fundamentals.html

  -
    question: >
      What is the primary purpose of HTTP headers in a request?
    answers:
      - { value: "To carry the main content or data of the request.", correct: false }
      - { value: "To provide metadata about the request or the client.", correct: true }
      - { value: "To define the server's response capabilities.", correct: false }
      - { value: "To specify the network route for the request.", correct: false }
    help: |
      HTTP headers provide additional information about the request, the client, or the resource being requested. Examples include `User-Agent`, `Accept`, `Host`, etc.
      https://symfony.com/doc/current/introduction/http_fundamentals.html

  -
    question: >
      What is the `Content-Type` header in an HTTP response used for?
    answers:
      - { value: "To specify the character encoding of the response body.", correct: false }
      - { value: "To indicate the media type of the resource being sent in the response body.", correct: true }
      - { value: "To define the size of the response body in bytes.", correct: false }
      - { value: "To suggest a filename for the downloaded content.", correct: false }
    help: |
      The `Content-Type` header indicates the media type (e.g., `text/html`, `application/json`) of the resource contained in the response body.
      https://symfony.com/doc/current/introduction/http_fundamentals.html

  -
    question: >
      What does the `HttpOnly` flag on a cookie prevent?
    answers:
      - { value: "The cookie from being sent over insecure HTTP connections.", correct: false }
      - { value: "The cookie from being accessed by client-side JavaScript.", correct: true }
      - { value: "The cookie from expiring after the browser session ends.", correct: false }
      - { value: "The cookie from being sent with cross-site requests.", correct: false }
    help: |
      The `HttpOnly` flag prevents client-side scripts (like JavaScript) from accessing the cookie, which helps mitigate cross-site scripting (XSS) attacks.
      https://symfony.com/doc/current/components/http_foundation.html#setting-cookies

  -
    question: |
      How can you set the `Last-Modified` header on a Symfony `Response` object?
      ```php
      use Symfony\Component\HttpFoundation\Response;

      $response = new Response();
      $dateTime = new \DateTime('now');
      /* ??? */
      ```
    answers:
      - { value: "`$response->setLastModified($dateTime);`", correct: true }
      - { value: "`$response->headers->set('Last-Modified', $dateTime->format('D, d M Y H:i:s T'));`", correct: true }
      - { value: "`$response->setCache(['last_modified' => $dateTime]);`", correct: true }
      - { value: "`$response->lastModified = $dateTime;`", correct: false }
    help: |
      The `Response::setLastModified()` method sets the `Last-Modified` HTTP header. You can also set it directly via the `headers` property or using the `setCache()` method.
      https://symfony.com/doc/current/components/http_foundation.html#http-cache-headers

  -
    question: >
      If a client sends `Accept-Charset: UTF-8, ISO-8859-1;q=0.8`, which charset is preferred?
    answers:
      - { value: "ISO-8859-1", correct: false }
      - { value: "UTF-8", correct: true }
      - { value: "Both are equally preferred.", correct: false }
      - { value: "The server will choose randomly.", correct: false }
    help: |
      Similar to `Accept` and `Accept-Language`, the `q` parameter indicates preference. `UTF-8` has an implicit quality of 1.0, making it preferred over `ISO-8859-1` with q=0.8.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-accept-headers

  -
    question: >
      How can you force Symfony's HTTP client to use HTTP/2 for a specific request or globally?
    answers:
      - { value: "Set the `http_version` option to `'2.0'` in the client configuration or request options.", correct: true }
      - { value: "Enable the `http2_enabled` flag in `config/packages/framework.yaml`.", correct: false }
      - { value: "Ensure the server supports HTTP/2; no client-side configuration is needed.", correct: false }
      - { value: "Use the `setHttpVersion()` method on the `HttpClientInterface`.", correct: false }
    help: |
      The `http_version` option, set to `'2.0'`, explicitly tells the HTTP client to attempt using HTTP/2. This can be done in default options or per-request.
      https://symfony.com/doc/current/http_client.html#http-2-support

  -
    question: |
      How do you send multiple HTTP requests concurrently using Symfony's HttpClient and process their responses?
      ```php
      use Symfony\Contracts\HttpClient\HttpClientInterface;

      class MyService
      {
          public function __construct(private HttpClientInterface $client) {}

          public function fetchMultiple(): array
          {
              $urls = ['url1', 'url2', 'url3'];
              $responses = [];
              foreach ($urls as $url) {
                  $responses[] = $this->client->request('GET', $url);
              }

              $results = [];
              foreach (/* ??? */ as $response) {
                  $results[] = $response->toArray();
              }
              return $results;
          }
      }
      ```
    answers:
      - { value: "`$this->client->stream($responses)`", correct: true }
      - { value: "`$responses`", correct: false }
      - { value: "`$this->client->wait($responses)`", correct: false }
      - { value: "`$this->client->getResponses($responses)`", correct: false }
    help: |
      To process multiple responses concurrently, you should iterate over the results of `HttpClientInterface::stream()`. This method yields chunks as they arrive, allowing for efficient parallel processing.
      https://symfony.com/doc/current/http_client.html#sending-concurrent-requests

  -
    question: |
      How do you retrieve a specific HTTP header value (e.g., 'Host') from a Symfony `Request` object?
      ```php
      use Symfony\Component\HttpFoundation\Request;

      $request = Request::createFromGlobals();
      $host = /* ??? */;
      ```
    answers:
      - { value: "`$request->headers->get('Host');`", correct: true }
      - { value: "`$request->server->get('HTTP_HOST');`", correct: true }
      - { value: "`$request->getHost();`", correct: true }
      - { value: "`$request->get('Host');`", correct: false }
    help: |
      HTTP headers are accessed via the `headers` property of the `Request` object. The `get()` method retrieves a header value, with normalized, lowercase keys. You can also access server variables directly or use specific methods like `getHost()`.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#accessing-request-data

  -
    question: |
      How do you expire a Symfony `Response` immediately, forcing caches to revalidate?
      ```php
      use Symfony\Component\HttpFoundation\Response;

      $response = new Response();
      /* ??? */
      ```
    answers:
      - { value: "`$response->expire();`", correct: true }
      - { value: "`$response->setMaxAge(0);`", correct: true }
      - { value: "`$response->setExpires(new \DateTime('now -1 day'));`", correct: true }
      - { value: "`$response->setPublic(false);`", correct: false }
    help: |
      The `Response::expire()` method sets the `Cache-Control` header to `no-cache, private` and `Expires` to a past date, effectively expiring the response. Setting `max-age` to 0 also achieves immediate expiration for fresh content.
      https://symfony.com/doc/current/http_cache.html#marking-a-response-as-stale

  -
    question: >
      Which status code indicates a successful creation of a resource, often in response to a POST request?
    answers:
      - { value: "200 OK", correct: false }
      - { value: "201 Created", correct: true }
      - { value: "202 Accepted", correct: false }
      - { value: "204 No Content", correct: false }
    help: |
      The 201 (Created) status code indicates that the request has been fulfilled and resulted in a new resource being created. This is a common response to POST requests.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#http-status-codes

  -
    question: >
      What is the purpose of the `auth_basic` option in Symfony's HttpClient configuration?
    answers:
      - { value: "To configure Bearer token authentication.", correct: false }
      - { value: "To set the username and password for HTTP Basic authentication.", correct: true }
      - { value: "To define NTLM authentication credentials.", correct: false }
      - { value: "To specify a client certificate for mutual TLS authentication.", correct: false }
    help: |
      The `auth_basic` option is used to provide credentials (username and password) for HTTP Basic authentication, which are then used to construct the `Authorization` header.
      https://symfony.com/doc/current/http_client.html#authentication

  -
    question: >
      What is the role of a web server in the HTTP client-server model?
    answers:
      - { value: "To display web pages to the end-user.", correct: false }
      - { value: "To send HTTP requests to clients.", correct: false }
      - { value: "To listen for HTTP requests from clients and serve appropriate responses.", correct: true }
      - { value: "To manage database connections for web applications.", correct: false }
    help: |
      A web server's primary role is to listen for incoming HTTP requests on a specific port (e.g., 80 or 443), process them, and send back HTTP responses containing the requested resources.
      https://symfony.com/doc/current/introduction/http_fundamentals.html

  -
    question: >
      Which Symfony component provides an object-oriented abstraction for HTTP requests and responses?
    answers:
      - { value: "Symfony\\Component\\Routing", correct: false }
      - { value: "Symfony\\Component\\HttpFoundation", correct: true }
      - { value: "Symfony\\Component\\HttpKernel", correct: false }
      - { value: "Symfony\\Component\\HttpClient", correct: false }
    help: |
      The `HttpFoundation` component defines classes like `Request` and `Response`, providing an object-oriented way to interact with HTTP messages.
      https://symfony.com/doc/current/components/http_foundation.html

  -
    question: >
      When handling a Symfony `Request` object, how do you differentiate between `GET` and `POST` parameters?
    answers:
      - { value: "`$request->query` for GET, `$request->request` for POST.", correct: true }
      - { value: "`$request->get()` for GET, `$request->post()` for POST.", correct: false }
      - { value: "`$request->attributes` for GET, `$request->payload` for POST.", correct: false }
      - { value: "There is no distinction; all parameters are accessed via `$request->all()`.", correct: false }
    help: |
      The `Request` object provides `query` (for `$_GET`) and `request` (for `$_POST`) properties, both instances of `ParameterBag`, to access parameters separately.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#accessing-request-data

  -
    question: >
      What is the significance of the `Location` header in an HTTP response?
    answers:
      - { value: "It specifies the geographical location of the server.", correct: false }
      - { value: "It indicates the preferred language for the response.", correct: false }
      - { value: "It is used in conjunction with 3xx status codes to specify the new URI for a redirect.", correct: true }
      - { value: "It defines the content encoding of the response body.", correct: false }
    help: |
      The `Location` header is a response header that indicates the URL to which a client should redirect. It's typically sent with 3xx (redirection) status codes.
      https://symfony.com/doc/current/components/http_foundation.html#redirectresponse

  -
    question: >
      Which HTTP status code indicates that the server successfully processed the request, but is not returning any content?
    answers:
      - { value: "200 OK", correct: false }
      - { value: "201 Created", correct: false }
      - { value: "204 No Content", correct: true }
      - { value: "205 Reset Content", correct: false }
    help: |
      The 204 (No Content) status code indicates that the server successfully processed the request and is not returning any content. This is often used for PUT or DELETE requests where the client doesn't need to navigate away.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#http-status-codes

  -
    question: >
      What is the purpose of the `SameSite` attribute for cookies?
    answers:
      - { value: "To restrict cookies to be sent only over secure (HTTPS) connections.", correct: false }
      - { value: "To prevent cross-site request forgery (CSRF) attacks by controlling when cookies are sent with cross-site requests.", correct: true }
      - { value: "To make cookies accessible only via HTTP requests, not JavaScript.", correct: false }
      - { value: "To define the domain for which the cookie is valid.", correct: false }
    help: |
      The `SameSite` attribute helps mitigate CSRF attacks by controlling when cookies are sent with cross-site requests. Options include `Lax`, `Strict`, and `None`.
      https://symfony.com/doc/current/components/http_foundation.html#setting-cookies

  -
    question: >
      How does Symfony's `Response::isNotModified()` method assist with HTTP caching?
    answers:
      - { value: "It automatically sets the `Cache-Control` header based on the response content.", correct: false }
      - { value: "It checks if the client's request headers (e.g., `If-None-Match`, `If-Modified-Since`) match the response's validators (ETag, Last-Modified) and sets a 304 status if not modified.", correct: true }
      - { value: "It forces a full revalidation of the cache by the client.", correct: false }
      - { value: "It removes all cache-related headers from the response.", correct: false }
    help: |
      The `isNotModified()` method compares the request's conditional headers with the response's ETag and Last-Modified headers. If the resource hasn't changed, it sets the response status to 304 Not Modified and clears the body.
      https://symfony.com/doc/current/components/http_foundation.html#http-cache-headers

  -
    question: >
      Which of the following HTTP status codes indicates a client-side error?
    answers:
      - { value: "200 OK", correct: false }
      - { value: "302 Found", correct: false }
      - { value: "400 Bad Request", correct: true }
      - { value: "500 Internal Server Error", correct: false }
    help: |
      4xx status codes indicate client errors, meaning the client's request was somehow malformed or invalid.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#http-status-codes

  -
    question: |
      When using Symfony's `HttpClient`, what is the purpose of the `on_progress` option in a request?
    answers:
      - { value: "To specify a callback function that is executed periodically as the response content is downloaded.", correct: true }
      - { value: "To define a progress bar for the user interface.", correct: false }
      - { value: "To set a timeout for the request if no progress is made.", correct: false }
      - { value: "To log the download progress to a file.", correct: false }
    help: |
      The `on_progress` option allows you to define a callable that is executed as chunks of the response are received, enabling real-time progress tracking or early cancellation.
      https://symfony.com/doc/current/http_client.html#on-progress-callback

  -
    question: >
      What is the primary function of the `HttpKernel` component in Symfony?
    answers:
      - { value: "To manage database connections.", correct: false }
      - { value: "To handle an incoming `Request` and return a `Response`.", correct: true }
      - { value: "To render Twig templates.", correct: false }
      - { value: "To provide a command-line interface.", correct: false }
    help: |
      The `HttpKernel` component is the core of a Symfony application, responsible for taking a `Request` object, dispatching events, calling a controller, and returning a `Response` object.
      https://symfony.com/doc/current/components/http_kernel.html

  -
    question: >
      Which HTTP method is considered both safe and idempotent?
    answers:
      - { value: "POST", correct: false }
      - { value: "PUT", correct: false }
      - { value: "GET", correct: true }
      - { value: "DELETE", correct: false }
    help: |
      A safe method (like GET) does not alter the state of the server. An idempotent method (like GET) produces the same result regardless of how many times it is applied.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#http-methods

  -
    question: >
      What does an HTTP 500 Internal Server Error status code indicate?
    answers:
      - { value: "The client made a bad request.", correct: false }
      - { value: "The server encountered an unexpected condition that prevented it from fulfilling the request.", correct: true }
      - { value: "The requested resource was not found.", correct: false }
      - { value: "The server is temporarily overloaded.", correct: false }
    help: |
      The 500 (Internal Server Error) status code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#http-status-codes

  -
    question: >
      How does Symfony's `Request::createFromGlobals()` method work?
    answers:
      - { value: "It creates a new `Request` object by reading data from PHP's superglobal variables (`$_GET`, `$_POST`, `$_SERVER`, `$_COOKIE`, `$_FILES`).", correct: true }
      - { value: "It creates a new `Request` object by sending an HTTP request to the current URL.", correct: false }
      - { value: "It creates a new `Request` object from a JSON string.", correct: false }
      - { value: "It is used only for testing purposes and does not interact with actual global variables.", correct: false }
    help: |
      `Request::createFromGlobals()` is a factory method that populates a `Request` object using the data available in PHP's global arrays, simulating a real incoming HTTP request.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#accessing-request-data

  -
    question: >
      What is the purpose of the `Expires` HTTP header in caching?
    answers:
      - { value: "It specifies the maximum age a cached response can be considered fresh.", correct: false }
      - { value: "It provides a date/time after which the response is considered stale.", correct: true }
      - { value: "It indicates that the response should never be cached.", correct: false }
      - { value: "It defines the time-to-live for a DNS record.", correct: false }
    help: |
      The `Expires` header provides a specific date and time after which the response should be considered stale and revalidated.
      https://symfony.com/doc/current/components/http_foundation.html#http-cache-headers

  -
    question: >
      Which of the following is a valid way to set a cookie's expiration time using Symfony's `Cookie` object?
    answers:
      - { value: "By passing a Unix timestamp to the constructor.", correct: true }
      - { value: "By passing a `DateTimeInterface` object to `withExpires()`.", correct: true }
      - { value: "By setting the `max_age` option in the cookie array.", correct: false }
      - { value: "By using `setExpiration()` method.", correct: false }
    help: |
      The `Cookie` constructor and `withExpires()` method accept either a Unix timestamp or a `DateTimeInterface` object for setting the expiration.
      https://symfony.com/doc/current/components/http_foundation.html#setting-cookies

  -
    question: >
      What does the `#[Cache]` attribute in a Symfony controller do?
    answers:
      - { value: "It defines the cache configuration for the entire application.", correct: false }
      - { value: "It configures HTTP caching headers directly on a controller method's response.", correct: true }
      - { value: "It enables opcode caching for the controller.", correct: false }
      - { value: "It marks the controller as a cacheable service.", correct: false }
    help: |
      The `#[Cache]` attribute allows you to define HTTP cache-related headers (like `Cache-Control`, `Expires`, `ETag`, `Last-Modified`) directly on a controller method, which Symfony then applies to the response.
      https://symfony.com/doc/current/http_cache/expiration.html#cache-attribute

  -
    question: >
      How can you cancel an ongoing HTTP request using Symfony's HttpClient?
    answers:
      - { value: "By calling `$response->cancel();`", correct: true }
      - { value: "By throwing an exception from an `on_progress` callback.", correct: true }
      - { value: "By calling `stop()` on the HttpClient instance.", correct: false }
      - { value: "Requests cannot be cancelled once initiated.", correct: false }
    help: |
      An ongoing request can be cancelled by calling the `cancel()` method on the `ResponseInterface` object or by throwing an exception from within an `on_progress` callback.
      https://symfony.com/doc/current/http_client.html#cancelling-requests

  -
    question: >
      What is the primary use case for `Symfony\\Component\\HttpFoundation\\StreamedResponse`?
    answers:
      - { value: "To send small, static files efficiently.", correct: false }
      - { value: "To stream large files or generate dynamic content incrementally to the client, preventing memory exhaustion.", correct: true }
      - { value: "To handle file uploads from the client.", correct: false }
      - { value: "To redirect the client to another URL.", correct: false }
    help: |
      `StreamedResponse` allows you to stream content to the client piece by piece, which is ideal for large files, long-running processes, or Server-Sent Events, as it avoids loading the entire content into memory.
      https://symfony.com/doc/current/components/http_foundation.html#streaming-a-response

  -
    question: >
      Which HTTP status code indicates that the request requires user authentication?
    answers:
      - { value: "401 Unauthorized", correct: true }
      - { value: "403 Forbidden", correct: false }
      - { value: "407 Proxy Authentication Required", correct: false }
      - { value: "400 Bad Request", correct: false }
    help: |
      The 401 (Unauthorized) status code indicates that the request has not been applied because it lacks valid authentication credentials for the target resource.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#http-status-codes

  -
    question: >
      What is the purpose of the `User-Agent` HTTP request header?
    answers:
      - { value: "To specify the preferred language of the client.", correct: false }
      - { value: "To identify the client's operating system and browser/application.", correct: true }
      - { value: "To indicate the content type the client expects in the response.", correct: false }
      - { value: "To provide authentication credentials for the client.", correct: false }
    help: |
      The `User-Agent` header is a request header that allows the client to identify itself (e.g., its software application, operating system) to the server.
      https://symfony.com/doc/current/introduction/http_fundamentals.html

  -
    question: >
      When using Symfony's HttpClient, what is the effect of setting a `base_uri` option?
    answers:
      - { value: "It defines the default path for all requests, allowing relative URLs.", correct: true }
      - { value: "It specifies the IP address of the proxy server.", correct: false }
      - { value: "It sets the default protocol (HTTP or HTTPS) for all requests.", correct: false }
      - { value: "It is only used for logging purposes and does not affect the request URL.", correct: false }
    help: |
      The `base_uri` option allows you to define a base URL that will be prepended to all relative URLs used in subsequent requests made by that client instance.
      https://symfony.com/doc/current/http_client.html#base-uri

  -
    question: >
      Which of the following is NOT a valid HTTP method?
    answers:
      - { value: "GET", correct: false }
      - { value: "FETCH", correct: true }
      - { value: "PUT", correct: false }
      - { value: "OPTIONS", correct: false }
    help: |
      FETCH is not a standard HTTP method. Common HTTP methods include GET, POST, PUT, DELETE, HEAD, OPTIONS, PATCH, TRACE, CONNECT.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#http-methods

  -
    question: >
      What is the purpose of the `HttpClientInterface::getInfo()` method?
    answers:
      - { value: "To retrieve the response body as a string.", correct: false }
      - { value: "To get information about the underlying transport layer, such as response headers, redirect count, or start time.", correct: true }
      - { value: "To check if the request was successful.", correct: false }
      - { value: "To get the HTTP status code of the response.", correct: false }
    help: |
      The `getInfo()` method provides access to various details from the transport layer, such as `response_headers`, `redirect_count`, `start_time`, and `debug` information.
      https://symfony.com/doc/current/http_client.html#getting-response-info

  -
    question: >
      What is the primary purpose of the `Vary` header in the context of content negotiation and caching?
    answers:
      - { value: "To specify the encoding of the response body.", correct: false }
      - { value: "To inform caches that the response content depends on specific request headers, and thus different cached versions should be stored for different header values.", correct: true }
      - { value: "To indicate that the response should never be cached.", correct: false }
      - { value: "To define the maximum age for a cached resource.", correct: false }
    help: |
      The `Vary` header tells caches that the response is subject to change based on the values of the listed request headers. This ensures that a client receives the correct cached version for its specific request.
      https://symfony.com/doc/current/http_cache/cache_vary.html

  -
    question: >
      Which Symfony component provides the `Request` and `Response` classes?
    answers:
      - { value: "HttpKernel", correct: false }
      - { value: "HttpFoundation", correct: true }
      - { value: "Routing", correct: false }
      - { value: "WebProfilerBundle", correct: false }
    help: |
      The `HttpFoundation` component provides core classes for handling HTTP requests and responses in an object-oriented manner.
      https://symfony.com/doc/current/components/http_foundation.html

  -
    question: >
      What is the effect of setting the `max_redirects` option to `0` in Symfony's HttpClient?
    answers:
      - { value: "It disables all redirects, causing the client to return the initial 3xx response.", correct: true }
      - { value: "It allows an unlimited number of redirects.", correct: false }
      - { value: "It only allows redirects to the same domain.", correct: false }
      - { value: "It forces the client to follow redirects using the GET method only.", correct: false }
    help: |
      Setting `max_redirects` to `0` prevents the HTTP client from automatically following any redirects (3xx status codes). The client will return the initial redirect response.
      https://symfony.com/doc/current/http_client.html#redirects