category: HTTP
questions:
  -
    question: 'What are the essential parts of a basic HTTP GET request sent by a client?'
    answers:
      - { value: 'Request line (method, path, HTTP version)', correct: true }
      - { value: 'HTTP headers (e.g., Host, Accept)', correct: true }
      - { value: 'Request body (for GET requests, typically empty)', correct: false }
      - { value: 'Status line (e.g., 200 OK)', correct: false }
    help: |
      A basic HTTP GET request consists of a request line and HTTP headers. The request body is typically empty for GET requests.
      https://github.com/symfony/symfony-docs/blob/7.3/introduction/http_fundamentals.rst#_snippet_0
  -
    question: 'Which HTTP status code indicates a successful request where the requested resource has been found and transmitted in the response?'
    answers:
      - { value: '200 OK', correct: true }
      - { value: '201 Created', correct: false }
      - { value: '301 Moved Permanently', correct: false }
      - { value: '404 Not Found', correct: false }
    help: |
      The 200 OK status code signifies that the request has succeeded.
      https://github.com/symfony/symfony-docs/blob/7.3/introduction/http_fundamentals.rst#_snippet_2
  -
    question: 'How do you access a query parameter named `name` from an incoming HTTP request using Symfony''s `Request` object, providing "World" as a default value?'
    answers:
      - { value: '$request->query->get(''name'', ''World'');', correct: true }
      - { value: '$request->request->get(''name'', ''World'');', correct: false }
      - { value: '$_GET[''name''];', correct: false }
      - { value: '$request->get(''name'', ''World'');', correct: false }
    help: |
      The `query` property of the `Request` object provides access to GET parameters.
      https://github.com/symfony/symfony-docs/blob/7.3/create_framework/http_foundation.rst#_snippet_5
  -
    question: 'Which of the following methods are used to set the content and status code of a `Symfony\Component\HttpFoundation\Response` object?'
    answers:
      - { value: '$response->setContent(''...'');', correct: true }
      - { value: '$response->setStatusCode(Response::HTTP_OK);', correct: true }
      - { value: '$response->setBody(''...'');', correct: false }
      - { value: '$response->setStatus(200);', correct: false }
    help: |
      The `setContent()` and `setStatusCode()` methods are used to define the response body and HTTP status, respectively.
      https://github.com/symfony/symfony-docs/blob/7.3/introduction/http_fundamentals.rst#_snippet_7
  -
    question: 'What is the primary purpose of the HTTP `DELETE` method?'
    answers:
      - { value: 'To remove a specific resource identified by its URI.', correct: true }
      - { value: 'To retrieve a resource from the server.', correct: false }
      - { value: 'To submit data to be processed to a specified resource.', correct: false }
      - { value: 'To update an existing resource.', correct: false }
    help: |
      The DELETE method is used to request that the origin server delete the resource identified by the Request-URI.
      https://github.com/symfony/symfony-docs/blob/7.3/introduction/http_fundamentals.rst#_snippet_1
  -
    question: 'How can you set a new HTTP cookie named `my_cookie` with value `my_value` on a `Symfony\Component\HttpFoundation\Response` object?'
    answers:
      - { value: '$response->headers->setCookie(new Cookie(''my_cookie'', ''my_value''));', correct: true }
      - { value: '$response->setCookie(''my_cookie'', ''my_value'');', correct: false }
      - { value: '$response->cookies->add(''my_cookie'', ''my_value'');', correct: false }
      - { value: 'header(''Set-Cookie: my_cookie=my_value'');', correct: false }
    help: |
      Cookies are managed via the `ResponseHeaderBag` which is accessible through `$response->headers`.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_44
  -
    question: 'To make a response publicly cacheable for 600 seconds using the `#[Cache]` attribute on a controller method in Symfony, what is the correct configuration?'
    answers:
      - { value: '#[Cache(public: true, maxage: 600)]', correct: true }
      - { value: '#[Cache(private: false, ttl: 600)]', correct: false }
      - { value: '#[Cache(shared: true, expires: "+600 seconds")]', correct: false }
      - { value: '#[Cache(cacheable: true, duration: 600)]', correct: false }
    help: |
      The `#[Cache]` attribute uses `public` and `maxage` options to control caching behavior.
      https://github.com/symfony/symfony-docs/blob/7.3/http_cache/expiration.rst#_snippet_0
  -
    question: 'How can you retrieve the list of content types accepted by the client, ordered by descending quality, using the `Request` object?'
    answers:
      - { value: '$request->getAcceptableContentTypes();', correct: true }
      - { value: '$request->headers->get(''Accept'');', correct: false }
      - { value: '$request->getPreferredFormat();', correct: false }
      - { value: '$request->getMimeTypes();', correct: false }
    help: |
      The `getAcceptableContentTypes()` method parses the `Accept` header and returns an ordered list.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_22
  -
    question: 'Which method of the `Request` object should you use to get an array of languages the client accepts, ordered by preference?'
    answers:
      - { value: '$request->getLanguages();', correct: true }
      - { value: '$request->headers->get(''Accept-Language'');', correct: false }
      - { value: '$request->getPreferredLanguage();', correct: false }
      - { value: '$request->getLocale();', correct: false }
    help: |
      The `getLanguages()` method provides the ordered list of accepted languages.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_22
  -
    question: 'Consider the following Symfony service using `HttpClientInterface`:'
    answers:
      - { value: 'It makes an asynchronous GET request to the specified URL.', correct: true }
      - { value: 'The `$response->getContent()` call will block execution until the full response body is received.', correct: true }
      - { value: 'The `HttpClientInterface` is automatically autowired by Symfony''s dependency injection container.', correct: true }
      - { value: 'The `toArray()` method can be used directly on any HTTP response, regardless of its Content-Type.', correct: false }
    help: |
      Symfony's HTTP Client `request()` method is asynchronous. `getContent()` and `toArray()` are blocking. `HttpClientInterface` is autowirable. `toArray()` requires JSON content.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_1
  -
    question: 'How do you retrieve the raw content of the HTTP request body in Symfony, especially useful for non-form data like XML or JSON?'
    answers:
      - { value: '$request->getContent();', correct: true }
      - { value: '$request->getPayload()->all();', correct: false }
      - { value: '$request->request->all();', correct: false }
      - { value: 'file_get_contents(''php://input'');', correct: false }
    help: |
      The `getContent()` method returns the raw request body.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_10
  -
    question: 'After constructing a `Response` object, which method is called to send the HTTP headers and content to the client?'
    answers:
      - { value: '$response->send();', correct: true }
      - { value: '$response->output();', correct: false }
      - { value: '$response->flush();', correct: false }
      - { value: '$response->display();', correct: false }
    help: |
      The `send()` method is responsible for sending the response.
      https://github.com/symfony/symfony-docs/blob/7.3/introduction/http_fundamentals.rst#_snippet_7
  -
    question: 'Which of the following are valid ways to define the request body when making a POST request with Symfony''s HTTP Client?'
    answers:
      - { value: 'A regular string: `''body'' => ''raw data''`', correct: true }
      - { value: 'An array of parameters: `''body'' => [''param1'' => ''value1'']`', correct: true }
      - { value: 'A PHP closure that generates data: `''body'' => function (int $size): string { ... }`', correct: true }
      - { value: 'A PHP resource (e.g., a file handle): `''body'' => fopen(''/path/to/file'', ''r'')`', correct: true }
    help: |
      The `body` option is highly flexible and accepts various types for defining the request content.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_18
  -
    question: 'How do you explicitly mark a `Response` object as stale, forcing caches to revalidate the content with the origin server before serving it again?'
    answers:
      - { value: '$response->expire();', correct: true }
      - { value: '$response->setCache(false);', correct: false }
      - { value: '$response->setMaxAge(0);', correct: false }
      - { value: '$response->setPublic(false);', correct: false }
    help: |
      The `expire()` method sets the response to be immediately expired.
      https://github.com/symfony/symfony-docs/blob/7.3/http_cache.rst#_snippet_3
  -
    question: 'When using Symfony''s HTTP Client, what is the behavior of the `request()` method regarding execution flow?'
    answers:
      - { value: 'It returns immediately, and the actual HTTP request is sent in the background.', correct: true }
      - { value: 'It blocks execution until the full response body is received.', correct: false }
      - { value: 'It blocks execution until at least the response headers are received.', correct: false }
      - { value: 'It always throws an exception if the remote server is unreachable.', correct: false }
    help: |
      The `request()` method is asynchronous; it returns an `AsyncResponse` immediately.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_10
  -
    question: 'Which HTTP status code should be used when the requested resource cannot be found on the server?'
    answers:
      - { value: '404 Not Found', correct: true }
      - { value: '403 Forbidden', correct: false }
      - { value: '500 Internal Server Error', correct: false }
      - { value: '204 No Content', correct: false }
    help: |
      The 404 status code indicates that the origin server did not find a current representation for the target resource.
      https://github.com/symfony/symfony-docs/blob/7.3/introduction/http_fundamentals.rst#_snippet_8
  -
    question: 'How can you retrieve a `$_SERVER` variable, such as `HTTP_HOST`, using the Symfony `Request` object?'
    answers:
      - { value: '$request->server->get(''HTTP_HOST'');', correct: true }
      - { value: '$request->attributes->get(''HTTP_HOST'');', correct: false }
      - { value: '$request->headers->get(''Host'');', correct: false }
      - { value: '$_SERVER[''HTTP_HOST''];', correct: false }
    help: |
      The `server` property of the `Request` object provides access to $_SERVER variables.
      https://github.com/symfony/symfony-docs/blob/7.3/introduction/http_fundamentals.rst#_snippet_5
  -
    question: 'Which Symfony class is specifically designed for creating HTTP responses that redirect the client to another URL?'
    answers:
      - { value: '`Symfony\Component\HttpFoundation\RedirectResponse`', correct: true }
      - { value: '`Symfony\Component\HttpFoundation\JsonResponse`', correct: false }
      - { value: '`Symfony\Component\HttpFoundation\StreamedResponse`', correct: false }
      - { value: '`Symfony\Component\HttpFoundation\Response` with a 3xx status code', correct: false }
    help: |
      `RedirectResponse` is a specialized `Response` class for handling redirects.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_44
  -
    question: 'How do you clear a specific cookie named `PHPSESSID` from a `Response` object in Symfony?'
    answers:
      - { value: '$response->headers->clearCookie(''PHPSESSID'');', correct: true }
      - { value: '$response->cookies->remove(''PHPSESSID'');', correct: false }
      - { value: '$response->headers->setCookie(new Cookie(''PHPSESSID'', null, time() - 3600));', correct: false }
      - { value: '$response->deleteCookie(''PHPSESSID'');', correct: false }
    help: |
      The `clearCookie()` method on `ResponseHeaderBag` is used to remove a cookie.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_44
  -
    question: 'What is the purpose of the `Vary` HTTP header in caching?'
    answers:
      - { value: 'It indicates that a cached response should vary based on the values of specified request headers.', correct: true }
      - { value: 'It specifies the maximum age a cached response can be considered fresh.', correct: false }
      - { value: 'It identifies the version of the resource for cache validation (e.g., ETag).', correct: false }
      - { value: 'It tells proxies to always revalidate the cache with the origin server.', correct: false }
    help: |
      The `Vary` header informs caches that the response content depends on specific request headers, leading to different cached versions.
      https://github.com/symfony/symfony-docs/blob/7.3/http_cache/cache_vary.rst#_snippet_0
  -
    question: 'How can you configure a default `User-Agent` header for all requests made by the Symfony HTTP Client using YAML configuration?'
    answers:
      - { value: '''framework: http_client: default_options: headers: ''User-Agent'': ''My Fancy App''''', correct: true }
      - { value: '''services: _defaults: http_client: { headers: { User-Agent: ''My Fancy App'' } }''', correct: false }
      - { value: '''parameters: http_client.default_headers: { User-Agent: ''My Fancy App'' }''', correct: false }
      - { value: '''framework: http_client: headers: { User-Agent: ''My Fancy App'' }''', correct: false }
    help: |
      Default options for the HTTP client are configured under `framework.http_client.default_options`.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_16
  -
    question: 'In a basic Symfony front controller, how is the `Request` object typically created to handle incoming global HTTP data?'
    answers:
      - { value: '`Request::createFromGlobals();`', correct: true }
      - { value: '`new Request();`', correct: false }
      - { value: '`Request::capture();`', correct: false }
      - { value: '`Request::createFromPhp();`', correct: false }
    help: |
      `createFromGlobals()` is the standard way to populate a `Request` object from PHP's superglobals.
      https://github.com/symfony/symfony-docs/blob/7.3/create_framework/http_foundation.rst#_snippet_5
  -
    question: 'How do you retrieve an uploaded file identified by `attachment` from the `Request` object?'
    answers:
      - { value: '$request->files->get(''attachment'');', correct: true }
      - { value: '$request->request->get(''attachment'');', correct: false }
      - { value: '$request->getPayload()->get(''attachment'');', correct: false }
      - { value: '$request->file(''attachment'');', correct: false }
    help: |
      The `files` property of the `Request` object provides access to uploaded files.
      https://github.com/symfony/symfony-docs/blob/7.3/introduction/http_fundamentals.rst#_snippet_5
  -
    question: 'When using `Symfony\Component\BrowserKit\AbstractBrowser::submitForm()`, how can you specify that the form submission should use the `PUT` HTTP method and set an `Accept-Language` header?'
    answers:
      - { value: '$client->submitForm(''Log in'', [''login'' => ''my_user''], ''PUT'', [''HTTP_ACCEPT_LANGUAGE'' => ''es'']);', correct: true }
      - { value: '$client->submitForm(''Log in'', [''login'' => ''my_user''])->setMethod(''PUT'')->setHeader(''Accept-Language'', ''es'');', correct: false }
      - { value: '$client->request(''PUT'', ''/login'', [''login'' => ''my_user''], [], [''HTTP_ACCEPT_LANGUAGE'' => ''es'']);', correct: false }
      - { value: '$client->submitForm(''Log in'', [''login'' => ''my_user''], [''method'' => ''PUT'', ''headers'' => [''Accept-Language'' => ''es'']]);', correct: false }
    help: |
      `submitForm` allows specifying the method and server parameters (including HTTP headers) as arguments.
      https://github.com/symfony/symfony-docs/blob/7.3/components/browser_kit.rst#_snippet_17
  -
    question: 'What is the primary benefit of using `HttpClientInterface::stream()` for large HTTP responses?'
    answers:
      - { value: 'It allows processing the response content chunk by chunk, preventing memory exhaustion for large files.', correct: true }
      - { value: 'It automatically decompresses the response content before returning it.', correct: false }
      - { value: 'It ensures the entire response is downloaded before any processing begins.', correct: false }
      - { value: 'It provides a direct file handle to the remote resource without downloading it.', correct: false }
    help: |
      Streaming responses is crucial for handling large data efficiently without loading everything into memory.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_47
  -
    question: 'Which HTTP status code indicates that a request has been fulfilled and resulted in a new resource being created?'
    answers:
      - { value: '201 Created', correct: true }
      - { value: '200 OK', correct: false }
      - { value: '202 Accepted', correct: false }
      - { value: '204 No Content', correct: false }
    help: |
      The 201 Created status code is typically returned after a successful POST request that results in resource creation.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_97
  -
    question: 'When simulating an HTTP request for testing, how can you create a `Request` object for a `GET` request to `/hello-world` with a `name` parameter set to `Fabien`?'
    answers:
      - { value: '`Request::create(''/hello-world'', ''GET'', [''name'' => ''Fabien'']);`', correct: true }
      - { value: '`new Request([''name'' => ''Fabien''], [], [], [], [], [''REQUEST_URI'' => ''/hello-world'', ''REQUEST_METHOD'' => ''GET'']);`', correct: false }
      - { value: '`Request::fromUri(''/hello-world'')->setMethod(''GET'')->setQuery([''name'' => ''Fabien'']);`', correct: false }
      - { value: '`Request::createFromGlobals()->setUri(''/hello-world'')->setMethod(''GET'')->query->set(''name'', ''Fabien'');`', correct: false }
    help: |
      `Request::create()` is the factory method for programmatic request creation.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_14
  -
    question: 'Which method on the `Response` object allows setting multiple cache-related headers (like `max_age`, `public`, `etag`) in a single call?'
    answers:
      - { value: '$response->setCache(options: []);', correct: true }
      - { value: '$response->setCacheControl(options: []);', correct: false }
      - { value: '$response->withCache(options: []);', correct: false }
      - { value: '$response->configureCache(options: []);', correct: false }
    help: |
      The `setCache()` method provides a convenient way to configure multiple cache directives.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_44
  -
    question: 'Which of the following is the correct way to create a `Symfony\Component\HttpFoundation\Cookie` object?'
    answers:
      - { value: '`Cookie::create(''name'', ''value'', expires: time() + 3600, path: ''/'', domain: null, secure: false, httpOnly: true);`', correct: true }
      - { value: '`new Cookie(''name'', ''value'', time() + 3600);`', correct: false }
      - { value: '`Cookie::fromString(''name=value; Expires=...'');`', correct: false }
      - { value: '`Cookie::withValue(''name'', ''value'');`', correct: false }
    help: |
      The `create()` static method is the recommended way to instantiate a `Cookie` object with all its options.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_44
  -
    question: 'What does the `Response::isNotModified(Request $request)` method do?'
    answers:
      - { value: 'It checks if the client''s request headers (e.g., If-None-Match, If-Modified-Since) indicate that the resource has not been modified, and if so, sets the response status to 304 Not Modified and removes the content.', correct: true }
      - { value: 'It forces the client to revalidate the cached response with the server.', correct: false }
      - { value: 'It compares the current response''s ETag with a stored ETag to determine if content has changed.', correct: false }
      - { value: 'It prevents the response from being cached by the client or proxies.', correct: false }
    help: |
      `isNotModified()` implements the HTTP conditional GET logic.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_44
  -
    question: 'What is the purpose of `ScopingHttpClient` in Symfony?'
    answers:
      - { value: 'To apply specific HTTP client options (e.g., headers, authentication) to requests that match certain URL patterns (scopes).', correct: true }
      - { value: 'To limit the number of concurrent requests to a specific domain.', correct: false }
      - { value: 'To automatically retry failed HTTP requests based on status codes.', correct: false }
      - { value: 'To provide a mock client for testing purposes by defining predefined responses.', correct: false }
    help: |
      `ScopingHttpClient` allows configuring different behaviors for different sets of URLs.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_9
  -
    question: 'What are the main steps in the lifecycle of processing an HTTP request using Symfony''s `HttpKernel`?'
    answers:
      - { value: 'Handle the request, send the response, and terminate the kernel.', correct: true }
      - { value: 'Receive request, resolve controller, execute controller, return response.', correct: true }
      - { value: 'Dispatch events, call a controller, return the response.', correct: true }
      - { value: 'Initialize kernel, process input, render view, close connection.', correct: false }
    help: |
      The `HttpKernel` handles the request, dispatches events, resolves and calls the controller, and sends/terminates the response.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_kernel.rst#_snippet_3
  -
    question: 'When using Symfony''s HTTP Client, how do you add query string parameters to a GET request using the `query` option, which automatically URL-encodes them?'
    answers:
      - { value: '''query'' => [''token'' => ''...'', ''name'' => ''...''],''', correct: true }
      - { value: '''uri'' => ''https://httpbin.org/get?token=...&name=...'',''', correct: false }
      - { value: '''params'' => [''token'' => ''...'', ''name'' => ''...''],''', correct: false }
      - { value: '''get'' => [''token'' => ''...'', ''name'' => ''...''],''', correct: false }
    help: |
      The `query` option is designed for adding URL-encoded query parameters.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_15
  -
    question: 'When would you use `Symfony\Component\HttpFoundation\StreamedResponse`?'
    answers:
      - { value: 'When you need to send a large amount of data to the client incrementally, without loading it all into memory at once.', correct: true }
      - { value: 'When you want to force the client to download a file instead of displaying it in the browser.', correct: false }
      - { value: 'When the response content is dynamically generated by a Twig template.', correct: false }
      - { value: 'When you need to send a redirect response with a specific status code.', correct: false }
    help: |
      `StreamedResponse` is ideal for long-running processes or large file downloads where content is generated on the fly.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_54
  -
    question: 'What is the typical use case for the HTTP `HEAD` method?'
    answers:
      - { value: 'To retrieve only the headers of a resource, without the body, often for checking resource existence or metadata.', correct: true }
      - { value: 'To update a partial portion of a resource.', correct: false }
      - { value: 'To submit a form with a large amount of data.', correct: false }
      - { value: 'To establish a persistent connection for real-time communication.', correct: false }
    help: |
      The HEAD method is identical to GET except that the server MUST NOT return a message-body in the response.
      https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html
  -
    question: 'Which `Cookie` method allows you to specify the `SameSite` attribute for a cookie?'
    answers:
      - { value: 'The `create()` static factory method, as one of its parameters.', correct: true }
      - { value: '`withSameSite(string $sameSite)`', correct: false }
      - { value: '`setSameSite(string $sameSite)`', correct: false }
      - { value: 'It cannot be set directly on the `Cookie` object; it must be set via `ResponseHeaderBag`.', correct: false }
    help: |
      The `sameSite` parameter is available in the `create()` method of the `Cookie` class.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_44
  -
    question: 'What is the difference between `Response::setTtl()` and `Response::setMaxAge()`?'
    answers:
      - { value: '`setTtl()` sets the Time-To-Live for the response, while `setMaxAge()` sets the `max-age` directive for private caches.', correct: true }
      - { value: '`setTtl()` is for shared caches, `setMaxAge()` is for private caches.', correct: false }
      - { value: '`setTtl()` sets the `Expires` header, `setMaxAge()` sets `Cache-Control`.', correct: false }
      - { value: 'There is no difference; they are aliases for the same functionality.', correct: false }
    help: |
      `setTtl()` is a convenience method that sets both `max-age` and `s-maxage`, while `setMaxAge()` specifically sets `max-age`.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_44
  -
    question: 'Which of the following authentication mechanisms can be configured globally for Symfony''s HTTP Client?'
    answers:
      - { value: 'HTTP Basic authentication', correct: true }
      - { value: 'HTTP Bearer authentication (token authentication)', correct: true }
      - { value: 'Microsoft NTLM authentication', correct: true }
      - { value: 'OAuth2 (requires external library integration)', correct: false }
    help: |
      Symfony's HTTP Client supports Basic, Bearer, and NTLM authentication out-of-the-box.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_12
  -
    question: 'What is the advantage of using `Request::getAcceptableContentTypes()` over directly accessing the `Accept` header via `Request::headers->get(''Accept'')`?'
    answers:
      - { value: '`getAcceptableContentTypes()` parses the header and returns an array of content types ordered by their quality value (q-value), making content negotiation easier.', correct: true }
      - { value: '`getAcceptableContentTypes()` automatically validates the content types against a predefined list.', correct: false }
      - { value: '`getAcceptableContentTypes()` returns a string that is easier to work with than the raw header.', correct: false }
      - { value: '`getAcceptableContentTypes()` includes content types that are implicitly accepted by the browser.', correct: false }
    help: |
      The `getAcceptableContentTypes()` method handles the parsing and ordering based on q-values.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_22
  -
    question: 'What is the return type of `Request::getLanguages()`?'
    answers:
      - { value: '`string[]` (an array of strings, ordered by descending quality)', correct: true }
      - { value: '`string` (a single string representing the preferred language)', correct: false }
      - { value: '`Locale` object', correct: false }
      - { value: '`null` if no languages are accepted', correct: false }
    help: |
      The method returns an array of language strings.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_22
  -
    question: 'When calling `HttpClient::create()`, what is the order of preference for transport selection if multiple extensions/packages are available?'
    answers:
      - { value: 'cURL, then AmpHttpClient, then NativeHttpClient (PHP streams)', correct: true }
      - { value: 'NativeHttpClient, then CurlHttpClient, then AmpHttpClient', correct: false }
      - { value: 'AmpHttpClient, then CurlHttpClient, then NativeHttpClient', correct: false }
      - { value: 'It's random, depending on system configuration.', correct: false }
    help: |
      `HttpClient::create()` prioritizes cURL for performance, then falls back to other available transports.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_42
  -
    question: 'What are the primary benefits of using `Symfony\Component\HttpFoundation\Request` and `Response` objects compared to raw PHP superglobals and `header()` calls?'
    answers:
      - { value: 'Object-oriented API for easier access to request/response data.', correct: true }
      - { value: 'Improved testability by allowing programmatic creation and manipulation of requests/responses.', correct: true }
      - { value: 'Automatic handling of HTTP header normalization and parsing.', correct: true }
      - { value: 'Enhanced security features like CSRF protection and input validation (though these are often handled by other Symfony components built on top of HttpFoundation).', correct: false }
    help: |
      The HttpFoundation component provides an abstraction layer over raw PHP HTTP interactions, improving code quality and testability.
      https://github.com/symfony/symfony-docs/blob/7.3/introduction/http_fundamentals.rst#_snippet_5
  -
    question: 'What is the purpose of the `Request::initialize()` method?'
    answers:
      - { value: 'To change multiple request parameters (query, request, attributes, cookies, files, server, content) with a single method call, useful for internal request dispatching or testing.', correct: true }
      - { value: 'To create a new `Request` object from global PHP variables.', correct: false }
      - { value: 'To reset the `Request` object to its initial state.', correct: false }
      - { value: 'To validate and sanitize all incoming request data.', correct: false }
    help: |
      `initialize()` allows for comprehensive modification of a `Request` object's state.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_17
  -
    question: 'Which class is responsible for managing HTTP headers for a `Response` object, including setting and clearing cookies?'
    answers:
      - { value: '`Symfony\Component\HttpFoundation\ResponseHeaderBag`', correct: true }
      - { value: '`Symfony\Component\HttpFoundation\HeaderBag`', correct: false }
      - { value: '`Symfony\Component\HttpFoundation\CookieJar`', correct: false }
      - { value: '`Symfony\Component\HttpFoundation\Response` itself, directly.', correct: false }
    help: |
      `ResponseHeaderBag` is a specialized `HeaderBag` for responses, providing cookie management methods.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_44
  -
    question: 'What is the typical use case for the HTTP `PATCH` method?'
    answers:
      - { value: 'To apply partial modifications to a resource.', correct: true }
      - { value: 'To replace an entire resource with new data.', correct: false }
      - { value: 'To create a new resource on the server.', correct: false }
      - { value: 'To retrieve a resource from the server.', correct: false }
    help: |
      The PATCH method is used to apply partial modifications to a resource.
      https://www.w3.org/Protocols/rfc5789/rfc5789.html
  -
    question: 'Which method on the `Cookie` object, introduced in Symfony 7.1, allows setting the `Partitioned` attribute for CHIPS (Cookies Having Independent Partitioned State)?'
    answers:
      - { value: '`withPartitioned()`', correct: true }
      - { value: '`setPartitioned(bool $partitioned)`', correct: false }
      - { value: '`enablePartitioned()`', correct: false }
      - { value: '`withAttribute(''Partitioned'', true)`', correct: false }
    help: |
      The `withPartitioned()` method is used to mark a cookie as partitioned.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_44
  -
    question: 'Which method on the `Response` object sets the `s-maxage` directive of the `Cache-Control` header, specifically for shared caches?'
    answers:
      - { value: '$response->setSharedMaxAge(int $sMaxAge);', correct: true }
      - { value: '$response->setMaxAge(int $maxAge);', correct: false }
      - { value: '$response->setPublic();', correct: false }
      - { value: '$response->setClientTtl(int $ttl);', correct: false }
    help: |
      `setSharedMaxAge()` is specifically for the `s-maxage` directive.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_44
  -
    question: 'How can an ongoing HTTP request be cancelled when using Symfony''s HTTP Client?'
    answers:
      - { value: 'By calling the `cancel()` method on the `ResponseInterface` object.', correct: true }
      - { value: 'By throwing an exception from an `on_progress` callback defined in the request options.', correct: true }
      - { value: 'By calling `stop()` on the `HttpClientInterface` instance.', correct: false }
      - { value: 'By setting a `timeout` option to `0` after the request has started.', correct: false }
    help: |
      Both `cancel()` and throwing an exception in `on_progress` can abort a request.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_48
  -
    question: 'How do you retrieve the list of accepted charsets from the client''s request using Symfony''s `Request` object, ordered by descending quality?'
    answers:
      - { value: '$request->getCharsets();', correct: true }
      - { value: '$request->headers->get(''Accept-Charset'');', correct: false }
      - { value: '$request->getPreferredCharset();', correct: false }
      - { value: '$request->getEncodings();', correct: false }
    help: |
      The `getCharsets()` method provides the ordered list of accepted charsets.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_22
  -
    question: 'How can you use HAR (HTTP Archive) files for testing Symfony''s HTTP Client?'
    answers:
      - { value: 'By using `HarFileResponseFactory` with `MockHttpClient` to create mock responses based on recorded HTTP interactions in the HAR file.', correct: true }
      - { value: 'By directly importing the HAR file into the `HttpClient` configuration.', correct: false }
      - { value: 'By converting the HAR file to a PHP array of mock responses manually.', correct: false }
      - { value: 'HAR files are not directly supported for testing Symfony''s HTTP Client.', correct: false }
    help: |
      `HarFileResponseFactory` simplifies testing by replaying recorded HTTP interactions.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_100
  -
    question: 'Which HTTP status code indicates that the request has been accepted for processing, but the processing has not been completed?'
    answers:
      - { value: '202 Accepted', correct: true }
      - { value: '200 OK', correct: false }
      - { value: '201 Created', correct: false }
      - { value: '204 No Content', correct: false }
    help: |
      The 202 Accepted status code is used for asynchronous processing.
      https://www.w3.org/Protocols/rfc7231/rfc7231.html#section-6.3.3
  -
    question: 'What is the purpose of the `Content-Type` HTTP header in a response?'
    answers:
      - { value: 'To indicate the media type of the resource sent to the client.', correct: true }
      - { value: 'To specify the encoding of the response body.', correct: false }
      - { value: 'To suggest a filename for the downloaded content.', correct: false }
      - { value: 'To declare the character set used in the response.', correct: false }
    help: |
      The `Content-Type` header specifies the MIME type of the response body.
      https://github.com/symfony/symfony-docs/blob/7.3/introduction/http_fundamentals.rst#_snippet_2
  -
    question: 'When making a request with `HttpClientInterface`, how can you override a globally configured default header for a specific request?'
    answers:
      - { value: 'By including the header in the `headers` option of the request, as request-level options take precedence.', correct: true }
      - { value: 'It is not possible to override global headers on a per-request basis.', correct: false }
      - { value: 'By setting the header to `null` in the request options.', correct: false }
      - { value: 'By using a separate `HttpClientInterface` instance for that specific request.', correct: false }
    help: |
      Request-specific options override global default options.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_17
  -
    question: 'Which HTTP status code indicates that the request could not be understood by the server due to malformed syntax?'
    answers:
      - { value: '400 Bad Request', correct: true }
      - { value: '401 Unauthorized', correct: false }
      - { value: '405 Method Not Allowed', correct: false }
      - { value: '422 Unprocessable Entity', correct: false }
    help: |
      The 400 status code indicates a client error due to malformed request syntax.
      https://www.w3.org/Protocols/rfc7231/rfc7231.html#section-6.5.1
  -
    question: 'What is the purpose of the `User-Agent` HTTP header in a request?'
    answers:
      - { value: 'To identify the client software (e.g., browser, bot) making the request.', correct: true }
      - { value: 'To specify the preferred language for the response.', correct: false }
      - { value: 'To indicate the authentication credentials of the user.', correct: false }
      - { value: 'To inform the server about the client''s caching capabilities.', correct: false }
    help: |
      The `User-Agent` string identifies the client application.
      https://github.com/symfony/symfony-docs/blob/7.3/introduction/http_fundamentals.rst#_snippet_0
  -
    question: 'When using `HttpClientInterface::stream()`, what does `ChunkInterface::isFirst()` indicate?'
    answers:
      - { value: 'It returns `true` if the chunk contains the response headers (the first chunk received).', correct: true }
      - { value: 'It returns `true` if this is the first chunk of the entire stream, regardless of response.', correct: false }
      - { value: 'It returns `true` if the chunk is the first part of the response body.', correct: false }
      - { value: 'It indicates that the connection has just been established.', correct: false }
    help: |
      `isFirst()` signals that headers have arrived and content streaming is about to begin.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_54
  -
    question: 'Which HTTP status code indicates that the request requires user authentication?'
    answers:
      - { value: '401 Unauthorized', correct: true }
      - { value: '403 Forbidden', correct: false }
      - { value: '407 Proxy Authentication Required', correct: false }
      - { value: '419 Authentication Timeout', correct: false }
    help: |
      The 401 status code indicates that the request has not been applied because it lacks valid authentication credentials for the target resource.
      https://www.w3.org/Protocols/rfc7235/rfc7235.html#section-3.1
  -
    question: 'How can you configure HTTP Basic authentication globally for a Symfony HTTP Client scope named `example_api` in YAML, using `the-username:the-password`?'
    answers:
      - { value: '''framework: http_client: scoped_clients: example_api: base_uri: ''https://example.com/'' auth_basic: ''the-username:the-password''''', correct: true }
      - { value: '''framework: http_client: default_options: auth_basic: ''the-username:the-password''''', correct: false }
      - { value: '''services: example_api_client: class: Symfony\Component\HttpClient\HttpClient arguments: [null, { auth_basic: ''the-username:the-password'' }]''', correct: false }
      - { value: '''framework: http_client: clients: example_api: auth: basic, ''the-username:the-password''''', correct: false }
    help: |
      Scoped clients allow specific authentication configurations for different base URIs.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_12
  -
    question: 'What is the purpose of the `Accept-Encoding` HTTP header in a request?'
    answers:
      - { value: 'To indicate the content encodings (e.g., gzip, deflate) that the client can understand.', correct: true }
      - { value: 'To specify the character set preferred by the client.', correct: false }
      - { value: 'To declare the preferred language for the response.', correct: false }
      - { value: 'To indicate the type of content the client expects in the response body.', correct: false }
    help: |
      `Accept-Encoding` is used for content negotiation regarding compression.
      https://www.w3.org/Protocols/rfc7231/rfc7231.html#header.accept-encoding
  -
    question: 'Which HTTP status code indicates that the server understands the content type of the request entity, and the syntax of the request entity is correct, but it was unable to process the contained instructions?'
    answers:
      - { value: '422 Unprocessable Entity', correct: true }
      - { value: '400 Bad Request', correct: false }
      - { value: '409 Conflict', correct: false }
      - { value: '500 Internal Server Error', correct: false }
    help: |
      The 422 Unprocessable Entity status code is typically used for semantic errors in the request body.
      https://www.rfc-editor.org/rfc/rfc4918#section-11.2
  -
    question: 'How can you force Symfony''s HTTP Client to use HTTP/2 for HTTP URLs, both in framework configuration and for a standalone client?'
    answers:
      - { value: '''framework: http_client: default_options: http_version: ''2.0'''' in YAML, or `HttpClient::create([''http_version'' => ''2.0'']);` in PHP.', correct: true }
      - { value: '''framework: http_client: force_http2: true'' in YAML, or `HttpClient::create([''protocol'' => ''HTTP/2'']);` in PHP.', correct: false }
      - { value: 'It''s automatically negotiated; no explicit configuration is needed.', correct: false }
      - { value: 'Only possible for HTTPS URLs, not HTTP.', correct: false }
    help: |
      The `http_version` option explicitly sets the desired HTTP protocol version.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_44
  -
    question: 'What is the purpose of the `Accept-Language` HTTP header in a request?'
    answers:
      - { value: 'To indicate the preferred natural languages for the content of the response.', correct: true }
      - { value: 'To specify the character encoding for the response.', correct: false }
      - { value: 'To declare the client''s locale settings.', correct: false }
      - { value: 'To inform the server about the client''s supported character sets.', correct: false }
    help: |
      `Accept-Language` is used for content negotiation based on language.
      https://www.w3.org/Protocols/rfc7231/rfc7231.html#header.accept-language
  -
    question: 'Which HTTP status code indicates that the request method is not supported for the requested resource?'
    answers:
      - { value: '405 Method Not Allowed', correct: true }
      - { value: '403 Forbidden', correct: false }
      - { value: '404 Not Found', correct: false }
      - { value: '501 Not Implemented', correct: false }
    help: |
      The 405 status code indicates that the method received in the request-line is known by the origin server but not supported by the target resource.
      https://www.w3.org/Protocols/rfc7231/rfc7231.html#section-6.5.5
  -
    question: 'How can you set a base URI for a Symfony HTTP Client instance using the `withOptions()` method?'
    answers:
      - { value: '$client = $client->withOptions([''base_uri'' => ''https://example.com/'']);', correct: true }
      - { value: '$client->setBaseUri(''https://example.com/'');', correct: false }
      - { value: '$client = HttpClient::createForBaseUri(''https://example.com/'');', correct: false }
      - { value: '$client->setDefaultOption(''base_uri'', ''https://example.com/'');', correct: false }
    help: |
      The `withOptions()` method creates a new client instance with the specified options, including `base_uri`.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_32
  -
    question: 'What is the purpose of the `Location` HTTP header in a `3xx` (Redirection) response?'
    answers:
      - { value: 'To indicate the URI to which the client should redirect its request.', correct: true }
      - { value: 'To specify the original URI of the requested resource.', correct: false }
      - { value: 'To provide a human-readable message about the redirection.', correct: false }
      - { value: 'To set a cookie for the new location.', correct: false }
    help: |
      The `Location` header is essential for redirection responses to inform the client where to go next.
      https://www.w3.org/Protocols/rfc7231/rfc7231.html#header.location
  -
    question: 'Which HTTP status code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request?'
    answers:
      - { value: '500 Internal Server Error', correct: true }
      - { value: '400 Bad Request', correct: false }
      - { value: '503 Service Unavailable', correct: false }
      - { value: '404 Not Found', correct: false }
    help: |
      The 500 status code is a generic error message, given when an unexpected condition was encountered.
      https://www.w3.org/Protocols/rfc7231/rfc7231.html#section-6.6.1
  -
    question: 'When using Symfony''s `HttpClientInterface`, what does the `getInfo(key: string = null)` method return?'
    answers:
      - { value: 'Information coming from the transport layer, such as `response_headers`, `redirect_count`, `start_time`, or `debug` information.', correct: true }
      - { value: 'The full content of the response body as a string.', correct: false }
      - { value: 'The HTTP status code of the response.', correct: false }
      - { value: 'An array of all HTTP headers received in the response.', correct: false }
    help: |
      `getInfo()` provides low-level details about the HTTP transaction.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_46
  -
    question: 'What is the purpose of the `ETag` HTTP header in caching?'
    answers:
      - { value: 'To provide a unique identifier for a specific version of a resource, used for cache validation.', correct: true }
      - { value: 'To specify the date and time after which the response is considered stale.', correct: false }
      - { value: 'To indicate the maximum age a cached response can be considered fresh.', correct: false }
      - { value: 'To declare that the response should not be cached by any intermediary.', correct: false }
    help: |
      The `ETag` (entity tag) is an opaque identifier assigned by a web server to a specific version of a resource found at a URL.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_44
  -
    question: 'Which HTTP status code indicates that the server is currently unable to handle the request due to a temporary overload or maintenance?'
    answers:
      - { value: '503 Service Unavailable', correct: true }
      - { value: '502 Bad Gateway', correct: false }
      - { value: '504 Gateway Timeout', correct: false }
      - { value: '429 Too Many Requests', correct: false }
    help: |
      The 503 status code indicates that the server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.
      https://www.w3.org/Protocols/rfc7231/rfc7231.html#section-6.6.4
  -
    question: 'When working with `FormDataPart` in Symfony''s HTTP Client, how can you add a custom `X-Foo: bar` header to the prepared headers before sending the request?'
    answers:
      - { value: '$headers = $formData->getPreparedHeaders()->toArray(); $headers[] = ''X-Foo: bar'';', correct: true }
      - { value: '$formData->addHeader(''X-Foo'', ''bar'');', correct: false }
      - { value: '$client->request(''POST'', ''...'', [''headers'' => [''X-Foo'' => ''bar''], ''body'' => $formData]);', correct: false }
      - { value: '$formData->setCustomHeader(''X-Foo'', ''bar'');', correct: false }
    help: |
      You need to get the prepared headers as an array and then append your custom header.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_26
  -
    question: 'What is the purpose of the `Last-Modified` HTTP header in caching?'
    answers:
      - { value: 'To indicate the date and time at which the origin server believes the resource was last modified.', correct: true }
      - { value: 'To specify the expiration date of the cached response.', correct: false }
      - { value: 'To set the maximum age for the cached content.', correct: false }
      - { value: 'To provide a unique identifier for the resource version.', correct: false }
    help: |
      The `Last-Modified` header is used for conditional requests (If-Modified-Since) to check if a resource has changed.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_44
  -
    question: 'Which HTTP status code indicates that the request has been successfully processed, but there is no content to send in the response body?'
    answers:
      - { value: '204 No Content', correct: true }
      - { value: '200 OK', correct: false }
      - { value: '202 Accepted', correct: false }
      - { value: '304 Not Modified', correct: false }
    help: |
      The 204 No Content status code indicates that the server has successfully fulfilled the request and that there is no additional content to send in the response payload body.
      https://www.w3.org/Protocols/rfc7231/rfc7231.html#section-6.3.5
  -
    question: 'What is the primary function of `Symfony\Component\HttpClient\MockHttpClient`?'
    answers:
      - { value: 'To provide a test double for `HttpClientInterface`, allowing predefined or dynamically generated responses for testing HTTP client interactions without making actual network requests.', correct: true }
      - { value: 'To send HTTP requests to a mock server for integration testing.', correct: false }
      - { value: 'To record outgoing HTTP requests for debugging purposes.', correct: false }
      - { value: 'To simulate network latency and errors for performance testing.', correct: false }
    help: |
      `MockHttpClient` is designed for unit and functional testing of code that uses `HttpClientInterface`.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_83
  -
    question: 'When processing a streamed response with `HttpClientInterface::stream()`, what does `ChunkInterface::isTimeout()` indicate?'
    answers:
      - { value: 'It returns `true` if the stream timed out for that specific response, meaning no activity was observed within the specified timeout period.', correct: true }
      - { value: 'It indicates that the entire request has timed out and been cancelled.', correct: false }
      - { value: 'It means the server closed the connection prematurely.', correct: false }
      - { value: 'It signals that the response content is empty.', correct: false }
    help: |
      `isTimeout()` is used to detect inactivity on a specific response stream.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_54
  -
    question: 'What is the purpose of the `Expires` HTTP header in caching?'
    answers:
      - { value: 'To provide a date/time after which the response is considered stale by the cache.', correct: true }
      - { value: 'To indicate the last modification date of the resource.', correct: false }
      - { value: 'To specify the maximum age for the cached content in seconds.', correct: false }
      - { value: 'To force the cache to revalidate the content with the origin server.', correct: false }
    help: |
      The `Expires` header defines an absolute expiration time for the cached content.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_44
  -
    question: 'Which HTTP status code indicates that the client must authenticate itself to a proxy?'
    answers:
      - { value: '407 Proxy Authentication Required', correct: true }
      - { value: '401 Unauthorized', correct: false }
      - { value: '403 Forbidden', correct: false }
      - { value: '408 Request Timeout', correct: false }
    help: |
      The 407 status code is similar to 401 Unauthorized, but indicates that the client needs to authenticate itself with a proxy.
      https://www.w3.org/Protocols/rfc7235/rfc7235.html#section-3.2
  -
    question: 'When making concurrent HTTP requests with Symfony''s HTTP Client, what is the recommended approach for processing responses efficiently?'
    answers:
      - { value: 'Initiate all requests in one loop, then iterate through the `ResponseInterface` objects in a separate loop to read their content, allowing for parallel execution.', correct: true }
      - { value: 'Use `HttpClientInterface::stream()` to process each response as it arrives, one by one.', correct: false }
      - { value: 'Wait for each request to complete fully before initiating the next one.', correct: false }
      - { value: 'Use PHP''s `curl_multi_exec` directly for better performance.', correct: false }
    help: |
      The pattern of initiating requests and then iterating over responses allows for concurrent fetching.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_50
  -
    question: 'What is the purpose of the `Connection: close` HTTP header in a response?'
    answers:
      - { value: 'To signal that the server will close the connection after completing the response.', correct: true }
      - { value: 'To indicate that the client should close its connection after receiving the response.', correct: false }
      - { value: 'To prevent the response from being cached by intermediaries.', correct: false }
      - { value: 'To tell the client to keep the connection alive for subsequent requests.', correct: false }
    help: |
      The `Connection` header is used to control whether the network connection stays open after the current transaction.
      https://www.w3.org/Protocols/rfc7230/rfc7230.html#header.connection
  -
    question: 'Which HTTP status code indicates that the server, while acting as a gateway or proxy, received an invalid response from an inbound server it accessed while attempting to fulfill the request?'
    answers:
      - { value: '502 Bad Gateway', correct: true }
      - { value: '500 Internal Server Error', correct: false }
      - { value: '504 Gateway Timeout', correct: false }
      - { value: '400 Bad Request', correct: false }
    help: |
      The 502 Bad Gateway status code is a server error, indicating an issue with an upstream server.
      https://www.w3.org/Protocols/rfc7231/rfc7231.html#section-6.6.3
  -
    question: 'What is the primary use case for `Symfony\Component\HttpClient\HttplugClient`?'
    answers:
      - { value: 'To bridge Symfony''s HTTP Client with PSR-18 (HTTP Client) and PSR-7 (HTTP Message) interfaces, allowing integration with libraries that rely on HTTPlug.', correct: true }
      - { value: 'To provide a high-performance HTTP client based on PHP streams.', correct: false }
      - { value: 'To mock HTTP responses for testing purposes.', correct: false }
      - { value: 'To add advanced caching capabilities to HTTP requests.', correct: false }
    help: |
      `HttplugClient` acts as an adapter for the HTTPlug ecosystem.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_73
  -
    question: 'When using `HttpClientInterface::stream()`, what does `ChunkInterface::getContent()` return?'
    answers:
      - { value: 'A piece of the response body as a string.', correct: true }
      - { value: 'The full response body as a string.', correct: false }
      - { value: 'The HTTP headers of the response.', correct: false }
      - { value: 'A resource representing the entire response stream.', correct: false }
    help: |
      `getContent()` provides the actual data chunk from the streamed response.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_54
  -
    question: 'Which HTTP status code indicates that the server, while acting as a gateway or proxy, did not receive a timely response from an upstream server?'
    answers:
      - { value: '504 Gateway Timeout', correct: true }
      - { value: '502 Bad Gateway', correct: false }
      - { value: '503 Service Unavailable', correct: false }
      - { value: '408 Request Timeout', correct: false }
    help: |
      The 504 Gateway Timeout status code is a server error, indicating a timeout from an upstream server.
      https://www.w3.org/Protocols/rfc7231/rfc7231.html#section-6.6.5
  -
    question: 'What is the purpose of the `Content-Length` HTTP header in a response?'
    answers:
      - { value: 'To indicate the size of the entity-body, in octets, sent to the recipient.', correct: true }
      - { value: 'To specify the maximum size of the request body the server can accept.', correct: false }
      - { value: 'To define the remaining length of a streamed response.', correct: false }
      - { value: 'To indicate the number of bytes transferred so far.', correct: false }
    help: |
      `Content-Length` is crucial for clients to know when the full response body has been received.
      https://www.w3.org/Protocols/rfc7230/rfc7230.html#header.content-length
  -
    question: 'When configuring Symfony''s HTTP Client, what is the effect of setting `http_version: ''2.0''` for a client?'
    answers:
      - { value: 'It forces the client to attempt to use HTTP/2 for requests, falling back to HTTP/1.1 if not supported by the server or transport.', correct: true }
      - { value: 'It ensures that all requests will strictly use HTTP/2, failing if not possible.', correct: false }
      - { value: 'It only applies to HTTPS connections, not plain HTTP.', correct: false }
      - { value: 'It enables HTTP/2 push for responses from the server.', correct: false }
    help: |
      The `http_version` option is a preference, not a strict requirement, allowing fallback.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_44
  -
    question: 'Which HTTP status code indicates that the server refuses to authorize the request, and unlike 401, authentication will not help?'
    answers:
      - { value: '403 Forbidden', correct: true }
      - { value: '401 Unauthorized', correct: false }
      - { value: '405 Method Not Allowed', correct: false }
      - { value: '423 Locked', correct: false }
    help: |
      The 403 Forbidden status code indicates that the server understood the request but refuses to authorize it.
      https://www.w3.org/Protocols/rfc7231/rfc7231.html#section-6.5.3
  -
    question: 'What is the purpose of the `Referer` HTTP header in a request?'
    answers:
      - { value: 'To indicate the address of the previous web page from which a link to the currently requested page was followed.', correct: true }
      - { value: 'To specify the target resource for the request.', correct: false }
      - { value: 'To provide a unique session identifier for the client.', correct: false }
      - { value: 'To inform the server about the client''s IP address.', correct: false }
    help: |
      The `Referer` header is used to identify the address of the webpage (URI) that linked to the resource being requested.
      https://www.w3.org/Protocols/rfc7231/rfc7231.html#header.referer
```