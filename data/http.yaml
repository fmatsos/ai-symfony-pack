category: HTTP

questions:
  -
    question: >
      Which HTTP method is typically used to retrieve data from a server without causing any side effects?
    answers:
      - { value: 'GET', correct: true }
      - { value: 'POST', correct: false }
      - { value: 'PUT', correct: false }
      - { value: 'DELETE', correct: false }
    help: |
      The GET method requests a representation of the specified resource. Requests using GET should only retrieve data and should have no other effect on the data.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#http-methods

  -
    question: |
      In Symfony, how do you retrieve a query parameter named 'id' from an incoming HTTP request using the `Request` object?
      ```php
      use Symfony\Component\HttpFoundation\Request;

      $request = Request::createFromGlobals();
      // How to get 'id'?
      $id = /* ??? */;
      ```
    answers:
      - { value: '$request->query->get(''id'');', correct: true }
      - { value: '$request->request->get(''id'');', correct: false }
      - { value: '$request->attributes->get(''id'');', correct: false }
      - { value: '$request->get(''id'');', correct: false }
    help: |
      The `query` property of the Request object provides access to GET parameters.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#accessing-request-data

  -
    question: >
      Which HTTP status code indicates that a request has been successfully processed and a new resource has been created?
    answers:
      - { value: '200 OK', correct: false }
      - { value: '201 Created', correct: true }
      - { value: '204 No Content', correct: false }
      - { value: '302 Found', correct: false }
    help: |
      The 201 (Created) status code indicates that the request has been fulfilled and has resulted in one or more new resources being created.
      https://www.php.net/manual/en/function.http-response-code.php

  -
    question: |
      You want to send an HTTP POST request with a JSON body using Symfony's HttpClient. Which option should you use to specify the request body?
      ```php
      use Symfony\Contracts\HttpClient\HttpClientInterface;

      class MyApiClient
      {
          public function __construct(private HttpClientInterface $client) {}

          public function sendData(array $data): void
          {
              $response = $this->client->request('POST', 'https://api.example.com/data', [
                  // ???
              ]);
          }
      }
      ```
    answers:
      - { value: '''json'' => $data', correct: true }
      - { value: '''body'' => json_encode($data)', correct: true }
      - { value: '''form_params'' => $data', correct: false }
      - { value: '''content'' => $data', correct: false }
    help: |
      The `json` option automatically encodes the provided array to JSON and sets the `Content-Type` header to `application/json`. Alternatively, you can manually encode the data and use the `body` option.
      https://symfony.com/doc/current/http_client.html#request-options

  -
    question: >
      What is the primary purpose of the `Cache-Control: public` directive in an HTTP response?
    answers:
      - { value: 'To indicate that the response can be cached by any cache, including shared (proxy) caches.', correct: true }
      - { value: 'To prevent the response from being cached by any cache.', correct: false }
      - { value: 'To specify that the response is only cacheable by the client''s private cache.', correct: false }
      - { value: 'To force the client to revalidate the cache every time.', correct: false }
    help: |
      The `public` directive indicates that the response may be cached by any cache, even if it would normally be non-cacheable or cacheable only by a private cache.
      https://symfony.com/doc/current/http_cache/expiration.html#cache-control-public-and-private

  -
    question: >
      Which Symfony component provides classes for handling HTTP requests and responses in an object-oriented way?
    answers:
      - { value: 'Symfony\\Component\\HttpFoundation', correct: true }
      - { value: 'Symfony\\Component\\Routing', correct: false }
      - { value: 'Symfony\\Component\\HttpKernel', correct: false }
      - { value: 'Symfony\\Component\\HttpClient', correct: false }
    help: |
      The HttpFoundation component defines an object-oriented layer for the HTTP specification. It provides `Request` and `Response` classes.
      https://symfony.com/doc/current/components/http_foundation.html

  -
    question: |
      You need to set a cookie named 'session_id' with value 'abc' on a Symfony `Response` object. Which of the following is the correct way to do this?
      ```php
      use Symfony\Component\HttpFoundation\Response;
      use Symfony\Component\HttpFoundation\Cookie;

      $response = new Response();
      // ???
      ```
    answers:
      - { value: '$response->headers->setCookie(Cookie::create(''session_id'', ''abc''));', correct: true }
      - { value: '$response->cookies->set(''session_id'', ''abc'');', correct: false }
      - { value: '$response->setCookie(''session_id'', ''abc'');', correct: false }
      - { value: '$response->headers->addCookie(''session_id'', ''abc'');', correct: false }
    help: |
      Cookies are managed via the `ResponseHeaderBag` which is accessible via `$response->headers`. The `setCookie` method expects a `Cookie` object.
      https://symfony.com/doc/current/components/http_foundation.html#setting-cookies

  -
    question: >
      What is the purpose of the HTTP `Vary` header in caching?
    answers:
      - { value: 'It indicates that the response content varies depending on the specified request header fields.', correct: true }
      - { value: 'It specifies the maximum age a cached response can be considered fresh.', correct: false }
      - { value: 'It forces a cache to revalidate the response with the origin server.', correct: false }
      - { value: 'It defines the character encoding of the response body.', correct: false }
    help: |
      The `Vary` header indicates that the response content varies depending on the specified request header fields. Caches must not serve the response from cache unless all the specified request header fields match.
      https://symfony.com/doc/current/http_cache/cache_vary.html

  -
    question: |
      Which method of the `ResponseInterface` in Symfony's HttpClient is used to retrieve the full response body as a string, blocking until the content is fully received?
    answers:
      - { value: 'getContent()', correct: true }
      - { value: 'toStream()', correct: false }
      - { value: 'toArray()', correct: false }
      - { value: 'getRawContent()', correct: false }
    help: |
      The `getContent()` method returns the response body as a string. This call is blocking and waits until the full response content is received.
      https://symfony.com/doc/current/http_client.html#getting-the-response-content

  -
    question: >
      Which HTTP status code should be returned when a client requests a resource that does not exist on the server?
    answers:
      - { value: '400 Bad Request', correct: false }
      - { value: '401 Unauthorized', correct: false }
      - { value: '403 Forbidden', correct: false }
      - { value: '404 Not Found', correct: true }
    help: |
      The 404 (Not Found) status code indicates that the origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
      https://www.php.net/manual/en/function.http-response-code.php

  -
    question: |
      When using `HttpClient::create()`, which HTTP client transport does Symfony prioritize if available?
    answers:
      - { value: 'CurlHttpClient', correct: true }
      - { value: 'NativeHttpClient', correct: false }
      - { value: 'AmpHttpClient', correct: false }
      - { value: 'GuzzleHttpClient', correct: false }
    help: |
      `HttpClient::create()` prioritizes `CurlHttpClient` if the cURL PHP extension is enabled. Otherwise, it falls back to `AmpHttpClient` or `NativeHttpClient`.
      https://symfony.com/doc/current/http_client.html#choosing-a-transport

  -
    question: >
      What is the primary difference between `Request::createFromGlobals()` and `Request::create()` in Symfony?
    answers:
      - { value: '`createFromGlobals()` creates a Request object from PHP''s superglobal variables, while `create()` allows programmatic construction of a Request object for simulation/testing.', correct: true }
      - { value: '`createFromGlobals()` is used for console commands, `create()` for web requests.', correct: false }
      - { value: '`createFromGlobals()` is deprecated in Symfony 7, `create()` is the recommended way.', correct: false }
      - { value: '`createFromGlobals()` includes uploaded files, `create()` does not.', correct: false }
    help: |
      `createFromGlobals()` populates the Request object using the current PHP global variables (`$_GET`, `$_POST`, `$_SERVER`, `$_FILES`, `$_COOKIE`). `create()` allows you to manually specify request details, useful for testing or internal sub-requests.
      https://symfony.com/doc/current/components/http_foundation.html#creating-a-request

  -
    question: |
      Which of the following HTTP methods is considered idempotent?
      (Select all that apply)
    answers:
      - { value: 'GET', correct: true }
      - { value: 'PUT', correct: true }
      - { value: 'DELETE', correct: true }
      - { value: 'POST', correct: false }
    help: |
      An HTTP method is idempotent if an identical request can be made multiple times without changing the state of the server beyond the initial request. GET, PUT, and DELETE are idempotent. POST is not.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#http-methods

  -
    question: >
      To make a Symfony `Response` cacheable by shared (proxy) caches, which method should you call on the `Response` object?
    answers:
      - { value: 'setPublic()', correct: true }
      - { value: 'setPrivate()', correct: false }
      - { value: 'setNoCache()', correct: false }
      - { value: 'setShared()', correct: false }
    help: |
      The `setPublic()` method sets the `Cache-Control` header to `public`, allowing shared caches to store the response.
      https://symfony.com/doc/current/http_cache/expiration.html#cache-control-public-and-private

  -
    question: |
      You are consuming an API that requires a Bearer token for authentication. How would you configure this globally for a Symfony HttpClient instance in `framework.yaml`?
      ```yaml
      # config/packages/framework.yaml
      framework:
          http_client:
              scoped_clients:
                  my_api:
                      base_uri: 'https://api.example.com/'
                      # ???
      ```
    answers:
      - { value: 'auth_bearer: your_token_here', correct: true }
      - { value: 'auth_basic: your_token_here', correct: false }
      - { value: 'headers: { Authorization: ''Bearer your_token_here'' }', correct: false }
      - { value: 'token: your_token_here', correct: false }
    help: |
      The `auth_bearer` option is used to configure HTTP Bearer authentication globally for a scoped client.
      https://symfony.com/doc/current/http_client.html#authentication

  -
    question: >
      Which HTTP status code indicates that the server understands the request but refuses to authorize it, even with authentication?
    answers:
      - { value: '401 Unauthorized', correct: false }
      - { value: '403 Forbidden', correct: true }
      - { value: '404 Not Found', correct: false }
      - { value: '405 Method Not Allowed', correct: false }
    help: |
      The 403 (Forbidden) status code indicates that the server understood the request but refuses to authorize it. Unlike 401 Unauthorized, re-authenticating will not make a difference.
      https://www.php.net/manual/en/function.http-response-code.php

  -
    question: |
      When streaming a large HTTP response with Symfony's HttpClient, what does `ChunkInterface::isFirst()` indicate?
    answers:
      - { value: 'It returns true if this is the first chunk received, meaning headers have arrived.', correct: true }
      - { value: 'It returns true if this is the last chunk of the response.', correct: false }
      - { value: 'It indicates that the stream has timed out.', correct: false }
      - { value: 'It means the entire response body has been received.', correct: false }
    help: |
      `isFirst()` returns true for the first chunk, which typically contains only headers.
      https://symfony.com/doc/current/http_client.html#streaming-responses

  -
    question: >
      What is the purpose of the `#[Cache]` attribute in a Symfony controller method?
    answers:
      - { value: 'To configure HTTP caching directives directly on the controller action.', correct: true }
      - { value: 'To define a cache key for the method''s return value.', correct: false }
      - { value: 'To enable internal Symfony caching for the route.', correct: false }
      - { value: 'To mark the method as a cache invalidator.', correct: false }
    help: |
      The `#[Cache]` attribute allows you to configure HTTP caching headers (like `Cache-Control`, `Expires`, `Last-Modified`) directly on your controller methods.
      https://symfony.com/doc/current/http_cache/expiration.html#configuring-cache-with-the-cache-attribute

  -
    question: |
      How can you retrieve the raw HTTP request body content in Symfony, for example, to process an XML or JSON payload?
      ```php
      use Symfony\Component\HttpFoundation\Request;

      $request = Request::createFromGlobals();
      $content = /* ??? */;
      ```
    answers:
      - { value: '$request->getContent();', correct: true }
      - { value: '$request->getPayload()->all();', correct: false }
      - { value: '$request->request->all();', correct: false }
      - { value: '$request->getRequestBody();', correct: false }
    help: |
      The `getContent()` method returns the raw body of the request. This is useful for non-form data like XML or JSON.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-the-request-body

  -
    question: >
      Which of the following HTTP status codes indicates a temporary redirect?
    answers:
      - { value: '301 Moved Permanently', correct: false }
      - { value: '302 Found', correct: true }
      - { value: '303 See Other', correct: false }
      - { value: '307 Temporary Redirect', correct: true }
    help: |
      Both 302 Found and 307 Temporary Redirect indicate a temporary redirection. The 302 status code is widely used, but 307 is often preferred as it explicitly forbids changing the HTTP method (e.g., POST to GET).
      https://www.php.net/manual/en/function.http-response-code.php

  -
    question: |
      You want to make multiple HTTP requests concurrently using Symfony's HttpClient. What is the recommended approach to achieve this without blocking execution for each request?
    answers:
      - { value: 'Initiate all requests in a loop, then iterate over the responses in a separate loop to consume their content.', correct: true }
      - { value: 'Use `stream()` for each request individually.', correct: false }
      - { value: 'Call `wait()` after each request.', correct: false }
      - { value: 'Symfony HttpClient does not support concurrent requests.', correct: false }
    help: |
      Symfony's HttpClient is designed for concurrent requests. You initiate all requests, which return immediately, and then process their responses in a separate loop.
      https://symfony.com/doc/current/http_client.html#sending-concurrent-requests

  -
    question: >
      What is the purpose of the `Expires` HTTP header in caching?
    answers:
      - { value: 'It specifies the date/time after which the response is considered stale.', correct: true }
      - { value: 'It indicates the maximum age a cached response can be considered fresh.', correct: false }
      - { value: 'It provides a unique identifier for the cached resource.', correct: false }
      - { value: 'It defines the content encoding of the response.', correct: false }
    help: |
      The `Expires` header specifies the date and time after which the response is considered stale. It's a legacy header, largely superseded by `Cache-Control: max-age`.
      https://symfony.com/doc/current/http_cache/expiration.html#expires-header

  -
    question: |
      Which of the following options can be used with Symfony's HttpClient to send data in the request body?
      (Select all that apply)
    answers:
      - { value: '''body'' => ''raw data''', correct: true }
      - { value: '''body'' => [''param1'' => ''value1'']', correct: true }
      - { value: '''body'' => fopen(''/path/to/file'', ''r'')', correct: true }
      - { value: '''form_fields'' => [''field'' => ''value'']', correct: false }
    help: |
      The `body` option is versatile and can accept a string, an array (for form-urlencoded or multipart), a closure, or a resource (like a file handle).
      https://symfony.com/doc/current/http_client.html#uploading-data

  -
    question: >
      Which HTTP status code indicates that the request could not be understood by the server due to malformed syntax?
    answers:
      - { value: '400 Bad Request', correct: true }
      - { value: '404 Not Found', correct: false }
      - { value: '500 Internal Server Error', correct: false }
      - { value: '403 Forbidden', correct: false }
    help: |
      The 400 (Bad Request) status code indicates that the server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
      https://www.php.net/manual/en/function.http-response-code.php

  -
    question: |
      How do you configure Symfony's HttpClient to force HTTP/2 for all requests made by a specific client instance?
      ```php
      use Symfony\Component\HttpClient\HttpClient;

      $client = HttpClient::create([
          // ???
      ]);
      ```
    answers:
      - { value: '''http_version'' => ''2.0''', correct: true }
      - { value: '''version'' => ''2.0''', correct: false }
      - { value: '''protocol'' => ''HTTP/2''', correct: false }
      - { value: '''force_http2'' => true', correct: false }
    help: |
      The `http_version` option allows you to explicitly set the HTTP protocol version for the client.
      https://symfony.com/doc/current/http_client.html#http-2-support

  -
    question: >
      What is the primary role of the `HttpKernel` component in Symfony?
    answers:
      - { value: 'To convert an incoming `Request` into an outgoing `Response`.', correct: true }
      - { value: 'To manage routing and URL generation.', correct: false }
      - { value: 'To handle database interactions.', correct: false }
      - { value: 'To provide a templating engine.', correct: false }
    help: |
      The `HttpKernel` component is the core of a Symfony application, responsible for taking a `Request` and returning a `Response`.
      https://symfony.com/doc/current/components/http_kernel.html

  -
    question: |
      Which method on the `Symfony\Component\HttpFoundation\Request` object would you use to get an array of languages the client accepts, ordered by descending quality?
    answers:
      - { value: 'getLanguages()', correct: true }
      - { value: 'getPreferredLanguage()', correct: false }
      - { value: 'getAcceptLanguage()', correct: false }
      - { value: 'getLocales()', correct: false }
    help: |
      The `getLanguages()` method parses the `Accept-Language` header and returns an array of accepted languages, ordered by quality.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: >
      When testing a service that uses `HttpClientInterface`, which class should you use to provide predefined or dynamically generated responses?
    answers:
      - { value: 'MockHttpClient', correct: true }
      - { value: 'TestHttpClient', correct: false }
      - { value: 'FakeHttpClient', correct: false }
      - { value: 'DummyHttpClient', correct: false }
    help: |
      `MockHttpClient` is an implementation of `HttpClientInterface` specifically designed for testing, allowing you to control the responses returned.
      https://symfony.com/doc/current/http_client.html#mocking-responses

  -
    question: >
      What does the HTTP `ETag` header represent in the context of caching?
    answers:
      - { value: 'An opaque identifier representing a specific version of a resource.', correct: true }
      - { value: 'The expiration date of the cached resource.', correct: false }
      - { value: 'The last modification date of the resource.', correct: false }
      - { value: 'The size of the resource in bytes.', correct: false }
    help: |
      The `ETag` (entity tag) is an opaque identifier assigned by a web server to a specific version of a resource found at a URL. If the resource content changes, a new `ETag` is generated.
      https://symfony.com/doc/current/http_cache/expiration.html#etag-header

  -
    question: |
      You want to clear a cookie named 'user_pref' from the client's browser. How would you do this using a Symfony `Response` object?
      ```php
      use Symfony\Component\HttpFoundation\Response;

      $response = new Response();
      // ???
      ```
    answers:
      - { value: '$response->headers->clearCookie(''user_pref'');', correct: true }
      - { value: '$response->cookies->remove(''user_pref'');', correct: false }
      - { value: '$response->clearCookie(''user_pref'');', correct: false }
      - { value: '$response->headers->deleteCookie(''user_pref'');', correct: false }
    help: |
      The `clearCookie()` method on `ResponseHeaderBag` (accessed via `$response->headers`) is used to instruct the client to remove a cookie.
      https://symfony.com/doc/current/components/http_foundation.html#clearing-cookies

  -
    question: >
      Which HTTP status code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request?
    answers:
      - { value: '400 Bad Request', correct: false }
      - { value: '404 Not Found', correct: false }
      - { value: '500 Internal Server Error', correct: true }
      - { value: '503 Service Unavailable', correct: false }
    help: |
      The 500 (Internal Server Error) status code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.
      https://www.php.net/manual/en/function.http-response-code.php

  -
    question: |
      How can you retrieve an HTTP header value (e.g., 'Content-Type') from a Symfony `Request` object?
      ```php
      use Symfony\Component\HttpFoundation\Request;

      $request = Request::createFromGlobals();
      $contentType = /* ??? */;
      ```
    answers:
      - { value: '$request->headers->get(''content-type'');', correct: true }
      - { value: '$request->getHeader(''Content-Type'');', correct: false }
      - { value: '$request->headers[''Content-Type''];', correct: false }
      - { value: '$request->getHeaders()[''content-type''];', correct: false }
    help: |
      The `headers` property of the `Request` object is a `HeaderBag` instance, which provides a `get()` method for retrieving header values with normalized, lowercase keys.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#accessing-request-data

  -
    question: >
      What is the primary benefit of using `StreamedResponse` in Symfony?
    answers:
      - { value: 'To send large amounts of data to the client incrementally, reducing memory usage and improving perceived performance.', correct: true }
      - { value: 'To automatically compress the response content.', correct: false }
      - { value: 'To handle file uploads more efficiently.', correct: false }
      - { value: 'To redirect the client to another URL with a streaming effect.', correct: false }
    help: |
      `StreamedResponse` allows you to send the HTTP response back to the client in chunks, which is beneficial for large responses to avoid memory exhaustion and improve user experience.
      https://symfony.com/doc/current/components/http_foundation.html#streaming-a-response

  -
    question: |
      Which of the following is the correct way to set the `max-age` directive of the `Cache-Control` header to 3600 seconds on a Symfony `Response` object?
    answers:
      - { value: '$response->setMaxAge(3600);', correct: true }
      - { value: '$response->setCacheControl(''max-age=3600'');', correct: false }
      - { value: '$response->headers->set(''Cache-Control'', ''max-age=3600'');', correct: false }
      - { value: '$response->setTtl(3600);', correct: false }
    help: |
      The `setMaxAge()` method is a convenient way to set the `max-age` directive of the `Cache-Control` header.
      https://symfony.com/doc/current/http_cache/expiration.html#cache-control-max-age

  -
    question: >
      What is the purpose of the `HttpClientInterface::stream()` method in Symfony?
    answers:
      - { value: 'To process large HTTP responses chunk by chunk, preventing memory exhaustion.', correct: true }
      - { value: 'To send multiple requests asynchronously and wait for all of them to complete.', correct: false }
      - { value: 'To convert a response body into a PHP stream resource.', correct: false }
      - { value: 'To cancel an ongoing HTTP request.', correct: false }
    help: |
      The `stream()` method allows you to monitor a list of HTTP responses and process their content as it arrives in chunks, which is crucial for handling large files or long-lived connections.
      https://symfony.com/doc/current/http_client.html#streaming-responses

  -
    question: >
      Which HTTP status code is used for conditional GET requests when the resource has not been modified since the last request?
    answers:
      - { value: '200 OK', correct: false }
      - { value: '304 Not Modified', correct: true }
      - { value: '412 Precondition Failed', correct: false }
      - { value: '203 Non-Authoritative Information', correct: false }
    help: |
      The 304 (Not Modified) status code indicates that the resource has not been modified since the version specified by the request headers (e.g., `If-None-Match` or `If-Modified-Since`).
      https://www.php.net/manual/en/function.http-response-code.php

  -
    question: |
      You are building a Symfony application and need to interact with an external API. Which interface should you type-hint in your service constructor to leverage Symfony's HTTP Client?
      ```php
      namespace App\Service;

      use /* ??? */;

      class ApiClient
      {
          public function __construct(
              private /* ??? */ $client,
          ) {}
          // ...
      }
      ```
    answers:
      - { value: 'Symfony\\Contracts\\HttpClient\\HttpClientInterface', correct: true }
      - { value: 'Symfony\\Component\\HttpClient\\HttpClient', correct: false }
      - { value: 'Psr\\Http\\Client\\HttpClientInterface', correct: false }
      - { value: 'GuzzleHttp\\Client', correct: false }
    help: |
      `HttpClientInterface` from `symfony/http-client-contracts` is the recommended interface for autowiring the HTTP client, ensuring decoupling from concrete implementations.
      https://symfony.com/doc/current/http_client.html#autowiring-the-http-client

  -
    question: >
      What is the default behavior of `ResponseInterface::getHeaders(true)` in Symfony's HttpClient when an HTTP error (4xx or 5xx) occurs?
    answers:
      - { value: 'It throws an exception.', correct: true }
      - { value: 'It returns an empty array.', correct: false }
      - { value: 'It returns the headers normally, ignoring the error.', correct: false }
      - { value: 'It logs the error and returns the headers.', correct: false }
    help: |
      By default, `getHeaders()` (and `getContent()`, `toArray()`) will throw an exception if the response status code indicates an HTTP error (4xx or 5xx). You can pass `false` to suppress this.
      https://symfony.com/doc/current/http_client.html#handling-http-errors

  -
    question: >
      Which of the following HTTP methods is used to submit an entity to the specified resource, often causing a change in state or side effects on the server?
    answers:
      - { value: 'GET', correct: false }
      - { value: 'POST', correct: true }
      - { value: 'HEAD', correct: false }
      - { value: 'OPTIONS', correct: false }
    help: |
      The POST method is used to send data to a server to create/update a resource. It is not idempotent.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#http-methods

  -
    question: |
      You are testing a Symfony service that makes an HTTP request. You want to assert the HTTP method and URL that the mock client received. Which `MockResponse` methods can help you with this?
      (Select all that apply)
    answers:
      - { value: 'getRequestMethod()', correct: true }
      - { value: 'getRequestUrl()', correct: true }
      - { value: 'getRequestOptions()', correct: true }
      - { value: 'getSentRequest()', correct: false }
    help: |
      `MockResponse` provides `getRequestMethod()`, `getRequestUrl()`, and `getRequestOptions()` to inspect the details of the request that was made against it.
      https://symfony.com/doc/current/http_client.html#inspecting-mocked-requests

  -
    question: >
      What is the purpose of the `Last-Modified` HTTP header in caching?
    answers:
      - { value: 'It indicates the date and time the origin server believes the resource was last modified.', correct: true }
      - { value: 'It specifies how long the cached response is valid.', correct: false }
      - { value: 'It provides a unique identifier for the resource.', correct: false }
      - { value: 'It defines the character set of the response.', correct: false }
    help: |
      The `Last-Modified` header indicates the date and time at which the origin server believes the selected representation was last modified. It's used in conjunction with `If-Modified-Since` for conditional requests.
      https://symfony.com/doc/current/http_cache/expiration.html#last-modified-header

  -
    question: |
      How do you add query string parameters to an HTTP GET request using Symfony's HttpClient, ensuring they are properly URL-encoded?
      ```php
      use Symfony\Component\HttpClient\HttpClient;

      $client = HttpClient::create();
      $response = $client->request('GET', 'https://api.example.com/search', [
          // ???
      ]);
      ```
    answers:
      - { value: '''query'' => [''q'' => ''symfony'', ''page'' => 1]', correct: true }
      - { value: '''params'' => [''q'' => ''symfony'', ''page'' => 1]', correct: false }
      - { value: '''url'' => ''https://api.example.com/search?q=symfony&page=1''', correct: false }
      - { value: '''get'' => [''q'' => ''symfony'', ''page'' => 1]', correct: false }
    help: |
      The `query` option is used to define query string parameters. Symfony's HttpClient automatically URL-encodes these values.
      https://symfony.com/doc/current/http_client.html#query-string-parameters

  -
    question: >
      Which HTTP status code indicates that the requested resource has been permanently moved to a new URL?
    answers:
      - { value: '301 Moved Permanently', correct: true }
      - { value: '302 Found', correct: false }
      - { value: '303 See Other', correct: false }
      - { value: '307 Temporary Redirect', correct: false }
    help: |
      The 301 (Moved Permanently) status code indicates that the target resource has been assigned a new permanent URI and any future references to this resource ought to use one of the enclosed URIs.
      https://www.php.net/manual/en/function.http-response-code.php

  -
    question: |
      You have a Symfony `Response` object and want to set multiple cache-related headers in one call. Which method allows you to do this using an associative array of options?
    answers:
      - { value: 'setCache(array $options)', correct: true }
      - { value: 'configureCache(array $options)', correct: false }
      - { value: 'addCacheHeaders(array $options)', correct: false }
      - { value: 'setCaching(array $options)', correct: false }
    help: |
      The `setCache()` method allows setting multiple cache directives (like `max_age`, `public`, `etag`, `last_modified`) in a single call.
      https://symfony.com/doc/current/components/http_foundation.html#response-cache-methods

  -
    question: >
      What is the purpose of the `HttpClient::createForBaseUri()` static method?
    answers:
      - { value: 'To create an HttpClient instance with a predefined base URI and associated default options.', correct: true }
      - { value: 'To create a client that only accepts requests to the specified base URI.', correct: false }
      - { value: 'To create a client for making requests to multiple base URIs concurrently.', correct: false }
      - { value: 'To create a client that automatically redirects to the base URI.', correct: false }
    help: |
      `createForBaseUri()` is a static factory method that creates a `ScopingHttpClient` configured with a base URI and default options that apply to requests made to that base URI.
      https://symfony.com/doc/current/http_client.html#configuring-a-base-uri

  -
    question: |
      Which of the following classes is specifically designed for creating mock HTTP responses for testing Symfony's HttpClient?
    answers:
      - { value: 'Symfony\\Component\\HttpClient\\Response\\MockResponse', correct: true }
      - { value: 'Symfony\\Component\\HttpClient\\Response\\TestResponse', correct: false }
      - { value: 'Symfony\\Component\\HttpFoundation\\Response', correct: false }
      - { value: 'Symfony\\Component\\HttpClient\\Response\\FakeResponse', correct: false }
    help: |
      `MockResponse` is the dedicated class for creating predefined HTTP responses to be used with `MockHttpClient` in tests.
      https://symfony.com/doc/current/http_client.html#mocking-responses

  -
    question: >
      What is the primary function of the `Accept` HTTP header?
    answers:
      - { value: 'To specify the media types (e.g., `text/html`, `application/json`) that the client is willing to accept in the response.', correct: true }
      - { value: 'To indicate the character sets that the client prefers.', correct: false }
      - { value: 'To define the preferred language for the response.', correct: false }
      - { value: 'To specify the encoding methods (e.g., `gzip`) that the client understands.', correct: false }
    help: |
      The `Accept` request HTTP header advertises which content types, expressed as MIME types, the client is able to understand.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept

  -
    question: |
      When using `HttpClientInterface::stream()`, what does `ChunkInterface::isTimeout()` indicate?
    answers:
      - { value: 'It returns true if the stream timed out for this specific response.', correct: true }
      - { value: 'It means the entire stream operation has completed successfully.', correct: false }
      - { value: 'It indicates a network error occurred during streaming.', correct: false }
      - { value: 'It signals that the server has closed the connection.', correct: false }
    help: |
      `isTimeout()` returns true if the stream timed out for the response associated with the chunk. This allows handling partial responses or implementing custom timeout logic.
      https://symfony.com/doc/current/http_client.html#streaming-responses

  -
    question: >
      Which HTTP status code indicates that the server is currently unable to handle the request due to a temporary overload or maintenance?
    answers:
      - { value: '500 Internal Server Error', correct: false }
      - { value: '502 Bad Gateway', correct: false }
      - { value: '503 Service Unavailable', correct: true }
      - { value: '504 Gateway Timeout', correct: false }
    help: |
      The 503 (Service Unavailable) status code indicates that the server is not ready to handle the request. This is typically a temporary condition which will be alleviated after some delay.
      https://www.php.net/manual/en/function.http-response-code.php

  -
    question: |
      How can you cancel an ongoing HTTP request made with Symfony's HttpClient?
      (Select all that apply)
    answers:
      - { value: 'Call `ResponseInterface::cancel()` on the response object.', correct: true }
      - { value: 'Throw an exception from an `on_progress` callback.', correct: true }
      - { value: 'Call `HttpClientInterface::abort()` with the response object.', correct: false }
      - { value: 'Close the client instance.', correct: false }
    help: |
      Requests can be cancelled either by explicitly calling `cancel()` on the response object or by throwing an exception from within an `on_progress` callback.
      https://symfony.com/doc/current/http_client.html#cancelling-requests

  -
    question: >
      What is the purpose of the `Accept-Language` HTTP header?
    answers:
      - { value: 'To indicate the natural languages that the client prefers for the response.', correct: true }
      - { value: 'To specify the character encodings the client understands.', correct: false }
      - { value: 'To define the content types the client accepts.', correct: false }
      - { value: 'To declare the client''s geographical location.', correct: false }
    help: |
      The `Accept-Language` request HTTP header advertises which languages the client is able to understand, and which locale is preferred.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language

  -
    question: |
      You want to set a default `User-Agent` header for all requests made by a Symfony HttpClient instance. How would you configure this in `config/packages/framework.yaml`?
      ```yaml
      # config/packages/framework.yaml
      framework:
          http_client:
              default_options:
                  # ???
      ```
    answers:
      - { value: 'headers: { ''User-Agent'': ''My App'' }', correct: true }
      - { value: 'user_agent: ''My App''', correct: false }
      - { value: 'default_headers: { ''User-Agent'': ''My App'' }', correct: false }
      - { value: 'options: { ''User-Agent'': ''My App'' }', correct: false }
    help: |
      Default headers are configured under `default_options.headers` in the framework configuration.
      https://symfony.com/doc/current/http_client.html#configuring-default-request-options

  -
    question: >
      What is the primary role of the `Response::send()` method in Symfony?
    answers:
      - { value: 'To send the HTTP headers and content of the response to the client.', correct: true }
      - { value: 'To save the response to a file on the server.', correct: false }
      - { value: 'To convert the Response object into a JSON string.', correct: false }
      - { value: 'To validate the response against HTTP standards.', correct: false }
    help: |
      The `send()` method is responsible for sending the HTTP headers and the response content to the client's browser.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#sending-the-response

  -
    question: |
      Which of the following Symfony HttpClient classes is specifically designed to handle URI templates for requests?
    answers:
      - { value: 'UriTemplateHttpClient', correct: true }
      - { value: 'TemplateHttpClient', correct: false }
      - { value: 'PatternHttpClient', correct: false }
      - { value: 'RouteHttpClient', correct: false }
    help: |
      `UriTemplateHttpClient` allows you to define URI templates with variables that are expanded into the URL before making the request.
      https://symfony.com/doc/current/http_client.html#uri-templates

  -
    question: >
      What is the purpose of the `Accept-Charset` HTTP header?
    answers:
      - { value: 'To indicate the character sets (e.g., `UTF-8`, `ISO-8859-1`) that the client prefers for the response.', correct: true }
      - { value: 'To specify the content types the client accepts.', correct: false }
      - { value: 'To define the preferred language for the response.', correct: false }
      - { value: 'To declare the client''s operating system character set.', correct: false }
    help: |
      The `Accept-Charset` request HTTP header advertises which character sets the client is able to understand.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Charset

  -
    question: |
      You need to test a service that interacts with an external API using Symfony's HttpClient, and you want to use a HAR (HTTP Archive) file to mock responses. Which class helps you achieve this?
    answers:
      - { value: 'HarFileResponseFactory', correct: true }
      - { value: 'HarHttpClient', correct: false }
      - { value: 'ArchiveResponseFactory', correct: false }
      - { value: 'MockHarClient', correct: false }
    help: |
      `HarFileResponseFactory` is used with `MockHttpClient` to create mock responses based on recorded HTTP interactions stored in a HAR file.
      https://symfony.com/doc/current/http_client.html#testing-with-har-files

  -
    question: >
      Which HTTP status code indicates that the request requires user authentication?
    answers:
      - { value: '401 Unauthorized', correct: true }
      - { value: '403 Forbidden', correct: false }
      - { value: '407 Proxy Authentication Required', correct: false }
      - { value: '419 Authentication Timeout', correct: false }
    help: |
      The 401 (Unauthorized) status code indicates that the request has not been applied because it lacks valid authentication credentials for the target resource.
      https://www.php.net/manual/en/function.http-response-code.php

  -
    question: |
      What is the purpose of the `ScopingHttpClient` in Symfony?
    answers:
      - { value: 'To apply different default options to requests based on their URL patterns.', correct: true }
      - { value: 'To limit the number of concurrent requests to a specific domain.', correct: false }
      - { value: 'To automatically add a base URI to all relative URLs.', correct: false }
      - { value: 'To log all HTTP requests and responses for debugging.', correct: false }
    help: |
      `ScopingHttpClient` allows you to define different sets of default options (e.g., headers, authentication) that apply only to URLs matching specific regular expressions.
      https://symfony.com/doc/current/http_client.html#scoping-http-clients

  -
    question: >
      Which of the following HTTP methods is typically used to update an existing resource completely, replacing the entire resource with the new payload?
    answers:
      - { value: 'PATCH', correct: false }
      - { value: 'PUT', correct: true }
      - { value: 'POST', correct: false }
      - { value: 'MERGE', correct: false }
    help: |
      The PUT method is used to update a resource or create a resource at a specific URI if it does not exist. It is idempotent, meaning multiple identical PUT requests will have the same effect as a single one.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#http-methods

  -
    question: |
      You want to make a `HEAD` request using Symfony's HttpClient. What is the primary benefit of using `HEAD` over `GET`?
    answers:
      - { value: 'It retrieves only the HTTP headers, without the response body, saving bandwidth.', correct: true }
      - { value: 'It is faster than `GET` because it uses a different network protocol.', correct: false }
      - { value: 'It allows sending a request body with the headers.', correct: false }
      - { value: 'It automatically follows redirects without returning a 3xx status code.', correct: false }
    help: |
      The HEAD method asks for a response identical to that of a GET request, but without the response body. This is useful for retrieving metadata about a resource without transferring the entire content.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/HEAD

  -
    question: >
      What is the purpose of the `ThrottlingHttpClient` in Symfony?
    answers:
      - { value: 'To limit the rate of requests sent to a specific host or API, preventing rate-limiting issues.', correct: true }
      - { value: 'To automatically retry failed requests after a delay.', correct: false }
      - { value: 'To compress request and response bodies for efficiency.', correct: false }
      - { value: 'To add a delay before sending each request for testing purposes.', correct: false }
    help: |
      `ThrottlingHttpClient` (introduced in Symfony 7.1) allows you to limit the number of requests per unit of time, which is essential when dealing with APIs that have rate limits.
      https://symfony.com/doc/current/http_client.html#rate-limiting

  -
    question: |
      When using Symfony's `Response` object, how can you explicitly mark a response as stale, forcing caches to revalidate it?
    answers:
      - { value: '$response->expire();', correct: true }
      - { value: '$response->setNoCache();', correct: false }
      - { value: '$response->invalidate();', correct: false }
      - { value: '$response->setExpires(new \DateTime(''now''));', correct: false }
    help: |
      The `expire()` method sets the `Expires` header to a past date and adds `no-cache` to `Cache-Control`, effectively marking the response as stale.
      https://symfony.com/doc/current/http_cache.html#marking-a-response-as-stale

  -
    question: >
      What is the primary purpose of the `Accept-Encoding` HTTP header?
    answers:
      - { value: 'To specify the content encoding methods (e.g., `gzip`, `deflate`) that the client understands.', correct: true }
      - { value: 'To indicate the character sets the client prefers.', correct: false }
      - { value: 'To define the preferred language for the response.', correct: false }
      - { value: 'To specify the media types the client accepts.', correct: false }
    help: |
      The `Accept-Encoding` request HTTP header advertises which content encoding methods the client is able to understand.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Encoding

  -
    question: |
      You are creating a Symfony `Response` object. Which of the following is the correct way to set its content and HTTP status code during instantiation?
      ```php
      use Symfony\Component\HttpFoundation\Response;

      $response = new Response(
          // ???
      );
      ```
    answers:
      - { value: '''Hello World!'', Response::HTTP_OK', correct: true }
      - { value: '[''content'' => ''Hello World!'', ''status'' => Response::HTTP_OK]', correct: false }
      - { value: '''Hello World!'', 200', correct: true }
      - { value: 'content: ''Hello World!'', status: Response::HTTP_OK', correct: false }
    help: |
      The `Response` constructor accepts the content as the first argument and the status code as the second.
      https://symfony.com/doc/current/components/http_foundation.html#creating-a-response

  -
    question: |
      Which of the following is the correct way to retrieve a `POST` parameter named 'category' from an incoming HTTP request, providing a default value of 'default category' if it's not present?
      ```php
      use Symfony\Component\HttpFoundation\Request;

      $request = Request::createFromGlobals();
      $category = /* ??? */;
      ```
    answers:
      - { value: '$request->getPayload()->get(''category'', ''default category'');', correct: true }
      - { value: '$request->request->get(''category'', ''default category'');', correct: true }
      - { value: '$request->post->get(''category'', ''default category'');', correct: false }
      - { value: '$request->get(''category'', ''default category'');', correct: false }
    help: |
      Both `$request->getPayload()->get()` and `$request->request->get()` can be used to retrieve POST parameters, with `getPayload()` being the recommended way for Symfony 7+.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#accessing-request-data

  -
    question: >
      What is the primary purpose of the `RedirectResponse` class in Symfony?
    answers:
      - { value: 'To send an HTTP redirect response (e.g., 301, 302) to the client, instructing the browser to navigate to a different URL.', correct: true }
      - { value: 'To automatically redirect internal requests within the application.', correct: false }
      - { value: 'To handle redirects from external APIs.', correct: false }
      - { value: 'To log all redirection attempts for auditing.', correct: false }
    help: |
      The `RedirectResponse` class is a specialized `Response` that simplifies sending HTTP redirects.
      https://symfony.com/doc/current/components/http_foundation.html#redirecting-the-user

  -
    question: |
      When configuring default options for Symfony's HttpClient, how can you set HTTP Basic authentication globally for a scoped client in `framework.yaml`?
      ```yaml
      # config/packages/framework.yaml
      framework:
          http_client:
              scoped_clients:
                  my_api:
                      base_uri: 'https://api.example.com/'
                      # ???
      ```
    answers:
      - { value: 'auth_basic: ''username:password''', correct: true }
      - { value: 'basic_auth: ''username:password''', correct: false }
      - { value: 'auth: { type: basic, user: username, pass: password }', correct: false }
      - { value: 'headers: { Authorization: ''Basic ...'' }', correct: false }
    help: |
      The `auth_basic` option is used to configure HTTP Basic authentication globally for a scoped client.
      https://symfony.com/doc/current/http_client.html#authentication

  -
    question: >
      Which of the following HTTP status codes indicates that the requested method is not supported for the resource identified by the URI?
    answers:
      - { value: '400 Bad Request', correct: false }
      - { value: '403 Forbidden', correct: false }
      - { value: '405 Method Not Allowed', correct: true }
      - { value: '501 Not Implemented', correct: false }
    help: |
      The 405 (Method Not Allowed) status code indicates that the method received in the request-line is known by the origin server but not supported by the target resource.
      https://www.php.net/manual/en/function.http-response-code.php

  -
    question: |
      You are using `HttpClient::create()` without any specific transport configuration. In what order does Symfony attempt to use underlying HTTP client transports?
    answers:
      - { value: 'cURL, then AmpHttpClient, then NativeHttpClient', correct: true }
      - { value: 'NativeHttpClient, then cURL, then AmpHttpClient', correct: false }
      - { value: 'AmpHttpClient, then cURL, then NativeHttpClient', correct: false }
      - { value: 'It randomly selects one based on system load.', correct: false }
    help: |
      `HttpClient::create()` prioritizes `CurlHttpClient` if the cURL extension is available, then falls back to `AmpHttpClient` if the `amphp/http-client` package is installed, and finally to `NativeHttpClient` (PHP streams).
      https://symfony.com/doc/current/http_client.html#choosing-a-transport

  -
    question: >
      What is the purpose of the `isNotModified()` method on a Symfony `Response` object?
    answers:
      - { value: 'To check if the client''s request headers (e.g., `If-None-Match`, `If-Modified-Since`) indicate that the resource has not been modified, and if so, set the response status to 304.', correct: true }
      - { value: 'To prevent the response from being modified by middleware.', correct: false }
      - { value: 'To determine if the response content has changed since it was created.', correct: false }
      - { value: 'To ensure the response is always fresh and not served from cache.', correct: false }
    help: |
      The `isNotModified()` method checks if the `Response` validators (ETag, Last-Modified) match a conditional value in the client `Request`. If so, it sets the status to 304 and removes the content.
      https://symfony.com/doc/current/components/http_foundation.html#checking-if-a-response-is-not-modified

  -
    question: |
      Which of the following is a valid way to retrieve an uploaded file named 'attachment' from a Symfony `Request` object?
      ```php
      use Symfony\Component\HttpFoundation\Request;

      $request = Request::createFromGlobals();
      $file = /* ??? */;
      ```
    answers:
      - { value: '$request->files->get(''attachment'');', correct: true }
      - { value: '$request->getUploadedFile(''attachment'');', correct: false }
      - { value: '$request->file(''attachment'');', correct: false }
      - { value: '$request->getFiles()[''attachment''];', correct: false }
    help: |
      The `files` property of the `Request` object is a `FileBag` instance, which provides a `get()` method for retrieving uploaded files as `UploadedFile` objects.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#accessing-request-data

  -
    question: >
      What is HTTP content negotiation?
    answers:
      - { value: 'The mechanism that makes it possible to serve different versions of a resource at the same URI, based on client preferences (e.g., language, format).', correct: true }
      - { value: 'The process of encrypting HTTP communication between client and server.', correct: false }
      - { value: 'The method for clients to agree on the maximum size of the response body.', correct: false }
      - { value: 'The protocol for exchanging authentication credentials between client and server.', correct: false }
    help: |
      Content negotiation is the mechanism that is used to serve different representations of a resource at the same URI, chosen by the server based on client-provided preferences (e.g., `Accept`, `Accept-Language` headers).
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Content_negotiation

  -
    question: |
      You are configuring a Symfony HttpClient instance and want to set a base URI using the `withOptions()` method. Which of the following is the correct way to do this?
      ```php
      use Symfony\Component\HttpClient\HttpClient;

      $client = HttpClient::create();
      $client = $client->withOptions([
          // ???
      ]);
      ```
    answers:
      - { value: '''base_uri'' => ''https://api.example.com/''', correct: true }
      - { value: '''baseUri'' => ''https://api.example.com/''', correct: false }
      - { value: '''uri_base'' => ''https://api.example.com/''', correct: false }
      - { value: '''default_uri'' => ''https://api.example.com/''', correct: false }
    help: |
      The `base_uri` option is used to set a base URI for the client, allowing subsequent requests to use relative URLs.
      https://symfony.com/doc/current/http_client.html#configuring-a-base-uri

  -
    question: >
      Which of the following is NOT a standard HTTP method?
    answers:
      - { value: 'GET', correct: false }
      - { value: 'POST', correct: false }
      - { value: 'FETCH', correct: true }
      - { value: 'DELETE', correct: false }
      - { value: 'OPTIONS', correct: false }
    help: |
      GET, POST, PUT, DELETE, HEAD, OPTIONS, TRACE, CONNECT, and PATCH are standard HTTP methods. FETCH is not a standard HTTP method, though it's a common JavaScript API.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#http-methods

  -
    question: |
      In Symfony's `HttpClient`, what does the `ResponseInterface::toArray()` method do?
    answers:
      - { value: 'It casts the response JSON content to a PHP array.', correct: true }
      - { value: 'It converts the response headers into an associative array.', correct: false }
      - { value: 'It returns the raw response body as an array of characters.', correct: false }
      - { value: 'It serializes the entire response object into an array for debugging.', correct: false }
    help: |
      The `toArray()` method is a convenient way to parse a JSON response body into a PHP associative array. It throws an exception if the content is not valid JSON or if an HTTP error occurs (by default).
      https://symfony.com/doc/current/http_client.html#getting-the-response-content

  -
    question: >
      What is the purpose of the `HTTP_COOKIE` server parameter when simulating a request with `AbstractBrowser::request()` in Symfony's BrowserKit component?
    answers:
      - { value: 'To set a cookie for the simulated request.', correct: true }
      - { value: 'To retrieve cookies from the simulated response.', correct: false }
      - { value: 'To specify the cookie domain for the request.', correct: false }
      - { value: 'To enable cookie persistence across multiple requests.', correct: false }
    help: |
      The `serverParameters` argument of `AbstractBrowser::request()` can include `HTTP_COOKIE` to set cookies for the simulated request.
      https://symfony.com/doc/current/components/browser_kit.html#sending-requests

  -
    question: |
      Which of the following is the correct way to retrieve the HTTP method (e.g., 'GET', 'POST') of an incoming request using the Symfony `Request` object?
      ```php
      use Symfony\Component\HttpFoundation\Request;

      $request = Request::createFromGlobals();
      $method = /* ??? */;
      ```
    answers:
      - { value: '$request->getMethod();', correct: true }
      - { value: '$request->getHttpMethod();', correct: false }
      - { value: '$request->method();', correct: false }
      - { value: '$request->server->get(''REQUEST_METHOD'');', correct: true }
    help: |
      The `getMethod()` method returns the HTTP method of the request. Alternatively, the raw server parameter `REQUEST_METHOD` can be accessed.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#accessing-request-data

  -
    question: >
      What is the primary purpose of the `HttplugClient` in Symfony's HttpClient component?
    answers:
      - { value: 'To provide a PSR-18 (HTTP Client) and PSR-7 (HTTP Message) compatible client, allowing integration with libraries that rely on these PSRs.', correct: true }
      - { value: 'To provide a client that only supports HTTP/1.1.', correct: false }
      - { value: 'To offer a synchronous-only HTTP client implementation.', correct: false }
      - { value: 'To automatically convert all responses to PSR-7 `ResponseInterface` objects.', correct: false }
    help: |
      `HttplugClient` acts as a bridge, implementing PSR-18 `HttpClientInterface` and PSR-7 `RequestFactoryInterface`, `StreamFactoryInterface`, and `UriFactoryInterface`, making Symfony's HttpClient compatible with the wider PHP-HTTP ecosystem.
      https://symfony.com/doc/current/http_client.html#httplug-integration

  -
    question: |
      You are developing an API and want to ensure that a client's request body is properly consumed, especially for `POST` or `PUT` requests that send raw data (e.g., JSON, XML). Which method on the `Request` object should you use to access this raw content?
    answers:
      - { value: 'getContent()', correct: true }
      - { value: 'getPayload()->all()', correct: false }
      - { value: 'request->all()', correct: false }
      - { value: 'getBody()', correct: false }
    help: |
      The `getContent()` method returns the raw content of the request body, which is essential for processing non-form data.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-the-request-body

  -
    question: >
      Which HTTP status code indicates that the server successfully processed the request, but there is no content to send back in the response body?
    answers:
      - { value: '200 OK', correct: false }
      - { value: '201 Created', correct: false }
      - { value: '204 No Content', correct: true }
      - { value: '304 Not Modified', correct: false }
    help: |
      The 204 (No Content) status code indicates that the server successfully fulfilled the request and that there is no additional content to send in the response payload body.
      https://www.php.net/manual/en/function.http-response-code.php

  -
    question: |
      When using Symfony's HttpClient, what is the effect of setting the `throw` argument to `false` in methods like `getStatusCode()`, `getHeaders()`, `getContent()`, or `toArray()`?
    answers:
      - { value: 'It prevents an exception from being thrown on HTTP errors (4xx or 5xx), allowing you to handle errors manually.', correct: true }
      - { value: 'It makes the method call non-blocking.', correct: false }
      - { value: 'It disables logging of HTTP errors.', correct: false }
      - { value: 'It forces the client to retry the request on error.', correct: false }
    help: |
      By default, these methods throw an exception on HTTP errors. Setting `throw` to `false` suppresses this behavior, giving you explicit control over error handling.
      https://symfony.com/doc/current/http_client.html#handling-http-errors

  -
    question: |
      Which of the following methods on the `Symfony\Component\HttpFoundation\Request` object would you use to get an array of acceptable content types, ordered by descending quality?
    answers:
      - { value: 'getAcceptableContentTypes()', correct: true }
      - { value: 'getPreferredFormat()', correct: false }
      - { value: 'getMimeTypes()', correct: false }
      - { value: 'getAccept()', correct: false }
    help: |
      The `getAcceptableContentTypes()` method parses the `Accept` header and returns an array of accepted content types, ordered by quality.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: |
      You are debugging an HTTP request made with Symfony's HttpClient and want to inspect the raw request options that were sent. Which method on `MockResponse` provides this information?
    answers:
      - { value: 'getRequestOptions()', correct: true }
      - { value: 'getDebugInfo()', correct: false }
      - { value: 'getRawOptions()', correct: false }
      - { value: 'getSentOptions()', correct: false }
    help: |
      The `getRequestOptions()` method on `MockResponse` returns an array containing all the options (headers, body, query parameters, etc.) that were used for the simulated request.
      https://symfony.com/doc/current/http_client.html#inspecting-mocked-requests

  -
    question: >
      What is the purpose of the `HttpClientInterface::getInfo()` method?
    answers:
      - { value: 'To retrieve information about the request and response from the transport layer, such as redirect count, start time, or debug data.', correct: true }
      - { value: 'To get the HTTP status code and headers of the response.', correct: false }
      - { value: 'To access the raw request and response messages.', correct: false }
      - { value: 'To obtain performance metrics of the HTTP client itself.', correct: false }
    help: |
      The `getInfo()` method provides access to various low-level details from the underlying HTTP transport, such as connection time, total time, redirect information, and more.
      https://symfony.com/doc/current/http_client.html#getting-response-info

  -
    question: |
      Which of the following is the correct way to retrieve a server variable (e.g., `HTTP_HOST`) from a Symfony `Request` object?
      ```php
      use Symfony\Component\HttpFoundation\Request;

      $request = Request::createFromGlobals();
      $host = /* ??? */;
      ```
    answers:
      - { value: '$request->server->get(''HTTP_HOST'');', correct: true }
      - { value: '$request->get(''HTTP_HOST'');', correct: false }
      - { value: '$request->getServerParameter(''HTTP_HOST'');', correct: false }
      - { value: '$request->attributes->get(''HTTP_HOST'');', correct: false }
    help: |
      The `server` property of the `Request` object is a `ParameterBag` instance, which provides a `get()` method for retrieving server variables.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#accessing-request-data

  -
    question: >
      What is the primary purpose of the `Cookie` class in Symfony's HttpFoundation component?
    answers:
      - { value: 'To represent an HTTP cookie with its various attributes (name, value, expiration, path, domain, etc.).', correct: true }
      - { value: 'To manage session data on the server-side.', correct: false }
      - { value: 'To encrypt and decrypt cookie values.', correct: false }
      - { value: 'To store user preferences in the database.', correct: false }
    help: |
      The `Cookie` class is an object-oriented representation of an HTTP cookie, making it easier to create and manipulate cookies.
      https://symfony.com/doc/current/components/http_foundation.html#setting-cookies

  -
    question: |
      You want to override a globally configured HTTP header for a specific request made with Symfony's HttpClient. How would you do this?
      ```php
      use Symfony\Contracts\HttpClient\HttpClientInterface;

      class MyApiClient
      {
          public function __construct(private HttpClientInterface $client) {}

          public function fetchData(): array
          {
              $response = $this->client->request('GET', 'https://api.example.com/data', [
                  // ???
              ]);
              return $response->toArray();
          }
      }
      ```
    answers:
      - { value: '''headers'' => [''X-Custom-Header'' => ''specific-value'']', correct: true }
      - { value: '''override_headers'' => [''X-Custom-Header'' => ''specific-value'']', correct: false }
      - { value: '''options'' => [''headers'' => [''X-Custom-Header'' => ''specific-value'']]', correct: false }
      - { value: '''set_header'' => [''X-Custom-Header'' => ''specific-value'']', correct: false }
    help: |
      Headers defined at the request level using the `headers` option will override any globally defined default headers for that specific request.
      https://symfony.com/doc/current/http_client.html#overriding-default-request-options

  -
    question: >
      What is the primary function of the `HeaderUtils` class in Symfony's HttpFoundation component?
    answers:
      - { value: 'To provide utility methods for parsing, formatting, and manipulating HTTP header values.', correct: true }
      - { value: 'To manage the storage and retrieval of HTTP headers.', correct: false }
      - { value: 'To validate HTTP header syntax against RFC specifications.', correct: false }
      - { value: 'To convert HTTP headers to a standardized array format.', correct: false }
    help: |
      `HeaderUtils` provides static helper methods for common operations on HTTP header values, such as quoting, unquoting, combining, and parsing.
      https://symfony.com/doc/current/components/http_foundation.html#headerutils

  -
    question: |
      Which of the following is the correct Composer command to install Symfony's HTTP Client component?
    answers:
      - { value: 'composer require symfony/http-client', correct: true }
      - { value: 'composer install symfony/http-client', correct: false }
      - { value: 'composer add symfony/http-client', correct: false }
      - { value: 'symfony install http-client', correct: false }
    help: |
      The standard Composer command to add a package to your project is `composer require`.
      https://symfony.com/doc/current/http_client.html#installation

  -
    question: >
      When setting a cookie using `Symfony\Component\HttpFoundation\Cookie::create()`, what does the `httpOnly` parameter control?
    answers:
      - { value: 'If set to `true`, the cookie is inaccessible to client-side scripts (e.g., JavaScript), mitigating XSS attacks.', correct: true }
      - { value: 'If set to `true`, the cookie is only sent over HTTPS connections.', correct: false }
      - { value: 'If set to `true`, the cookie is only sent with HTTP GET requests.', correct: false }
      - { value: 'If set to `true`, the cookie is automatically deleted after the HTTP request completes.', correct: false }
    help: |
      The `httpOnly` flag, when true, prevents client-side scripts from accessing the cookie, enhancing security against XSS attacks.
      https://symfony.com/doc/current/components/http_foundation.html#setting-cookies

  -
    question: >
      What is the primary purpose of the `HttpClientInterface::toStream()` method?
    answers:
      - { value: 'To return the response content as a PHP stream resource, allowing for efficient processing of large responses without loading the entire content into memory.', correct: true }
      - { value: 'To convert the response body into a `StreamedResponse` object.', correct: false }
      - { value: 'To create a new stream for sending data to the server.', correct: false }
      - { value: 'To stream the response headers before the body.', correct: false }
    help: |
      The `toStream()` method returns the response body as a PHP stream resource, which is useful for handling very large responses efficiently.
      https://symfony.com/doc/current/http_client.html#getting-the-response-content

  -
    question: >
      Which HTTP status code indicates that the server is acting as a gateway or proxy and received an invalid response from an upstream server?
    answers:
      - { value: '500 Internal Server Error', correct: false }
      - { value: '502 Bad Gateway', correct: true }
      - { value: '503 Service Unavailable', correct: false }
      - { value: '504 Gateway Timeout', correct: false }
    help: |
      The 502 (Bad Gateway) status code indicates that the server, while acting as a gateway or proxy, received an invalid response from an inbound server it accessed while attempting to fulfill the request.
      https://www.php.net/manual/en/function.http-response-code.php

  -
    question: |
      When using Symfony's HttpClient, how can you apply HTTP Basic authentication for a specific request, overriding any global client configuration?
      ```php
      use Symfony\Contracts\HttpClient\HttpClientInterface;

      class MyApiClient
      {
          public function __construct(private HttpClientInterface $client) {}

          public function fetchProtectedData(): array
          {
              $response = $this->client->request('GET', 'https://api.example.com/protected', [
                  // ???
              ]);
              return $response->toArray();
          }
      }
      ```
    answers:
      - { value: '''auth_basic'' => [''username'', ''password'']', correct: true }
      - { value: '''auth'' => [''type'' => ''basic'', ''user'' => ''username'', ''pass'' => ''password'']', correct: false }
      - { value: '''headers'' => [''Authorization'' => ''Basic ' . base64_encode(''username:password'')]', correct: false }
      - { value: '''basic_auth'' => ''username:password''', correct: false }
    help: |
      The `auth_basic` option can be used per-request to specify HTTP Basic authentication credentials, overriding any default client settings.
      https://symfony.com/doc/current/http_client.html#authentication

  -
    question: >
      What is the primary role of the `AsyncResponse` class in Symfony's HttpClient?
    answers:
      - { value: 'To represent an HTTP response that is being received asynchronously, allowing non-blocking operations.', correct: true }
      - { value: 'To provide a synchronous wrapper around an asynchronous HTTP client.', correct: false }
      - { value: 'To handle server-sent events (SSE) from an HTTP stream.', correct: false }
      - { value: 'To manage concurrent HTTP requests and responses.', correct: false }
    help: |
      `AsyncResponse` is a specific implementation of `ResponseInterface` used when the underlying HTTP client transport supports asynchronous operations, meaning the `request()` call returns immediately without waiting for the full response.
      https://symfony.com/doc/current/http_client.html#asynchronous-requests

  -
    question: |
      Which of the following is the correct way to set the `s-maxage` directive of the `Cache-Control` header for shared caches on a Symfony `Response` object?
    answers:
      - { value: '$response->setSharedMaxAge(3600);', correct: true }
      - { value: '$response->setSMaxAge(3600);', correct: false }
      - { value: '$response->setCacheControl(''s-maxage=3600'');', correct: false }
      - { value: '$response->headers->set(''Cache-Control'', ''s-maxage=3600'');', correct: false }
    help: |
      The `setSharedMaxAge()` method sets the `s-maxage` directive, which is specific to shared caches.
      https://symfony.com/doc/current/components/http_foundation.html#response-cache-methods

  -
    question: >
      What is the purpose of the `partitioned` attribute for cookies, introduced in Symfony 7.3?
    answers:
      - { value: 'To indicate that the cookie is stored in a separate partition per top-level site, preventing cross-site tracking.', correct: true }
      - { value: 'To split large cookies into smaller, partitioned chunks for efficient transmission.', correct: false }
      - { value: 'To encrypt different parts of the cookie with separate keys.', correct: false }
      - { value: 'To specify that the cookie is only accessible from a specific subdomain.', correct: false }
    help: |
      The `Partitioned` attribute (part of CHIPS - Cookies Having Independent Partitioned State) ensures that cookies are partitioned by top-level site, preventing them from being used for cross-site tracking.
      https://symfony.com/doc/current/components/http_foundation.html#setting-cookies (referencing `Cookie::create` and `withPartitioned` which implies this functionality)

  -
    question: |
      You are developing a feature that involves Server-Sent Events (SSE) with Symfony's HttpClient. Which class helps you extract decoded JSON data from an SSE chunk?
    answers:
      - { value: 'Symfony\\Component\\HttpClient\\Chunk\\ServerSentEvent::getArrayData()', correct: true }
      - { value: 'Symfony\\Component\\HttpClient\\Chunk\\ServerSentEvent::getJsonData()', correct: false }
      - { value: 'Symfony\\Component\\HttpClient\\Chunk\\ServerSentEvent::toArray()', correct: false }
      - { value: 'Symfony\\Component\\HttpClient\\Chunk\\ServerSentEvent::getDataAsArray()', correct: false }
    help: |
      The `ServerSentEvent` chunk type provides `getArrayData()` to retrieve decoded JSON content when the SSE data is known to be in JSON format.
      https://symfony.com/doc/current/http_client.html#server-sent-events

  -
    question: >
      What is the primary role of a "front controller" in a web application architecture?
    answers:
      - { value: 'To handle all incoming requests through a single entry point, centralizing request processing.', correct: true }
      - { value: 'To manage database connections and queries.', correct: false }
      - { value: 'To render HTML templates and send them to the client.', correct: false }
      - { value: 'To define all application routes and their associated controllers.', correct: false }
    help: |
      A front controller is a design pattern where a single controller handles all requests for a website or web application. This centralizes common logic such as routing, security, and rendering.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#the-front-controller

  -
    question: |
      You need to send an HTTP request with a custom `X-API-Key` header using Symfony's HttpClient. How would you include this header in your request?
      ```php
      use Symfony\Contracts\HttpClient\HttpClientInterface;

      class MyApiClient
      {
          public function __construct(private HttpClientInterface $client) {}

          public function callApi(string $apiKey): array
          {
              $response = $this->client->request('GET', 'https://api.example.com/data', [
                  // ???
              ]);
              return $response->toArray();
          }
      }
      ```
    answers:
      - { value: '''headers'' => [''X-API-Key'' => $apiKey]', correct: true }
      - { value: '''header'' => [''X-API-Key'' => $apiKey]', correct: false }
      - { value: '''custom_headers'' => [''X-API-Key'' => $apiKey]', correct: false }
      - { value: '''options'' => [''X-API-Key'' => $apiKey]', correct: false }
    help: |
      The `headers` option is used to specify custom HTTP headers for a request.
      https://symfony.com/doc/current/http_client.html#request-options

  -
    question: >
      Which HTTP status code indicates that the server is currently unable to handle the request due to a temporary overload or maintenance, and suggests a `Retry-After` header?
    answers:
      - { value: '503 Service Unavailable', correct: true }
      - { value: '500 Internal Server Error', correct: false }
      - { value: '429 Too Many Requests', correct: false }
      - { value: '504 Gateway Timeout', correct: false }
    help: |
      The 503 (Service Unavailable) status code indicates that the server is not ready to handle the request. This is often accompanied by a `Retry-After` header indicating when the service might be available again.
      https://www.php.net/manual/en/function.http-response-code.php

  -
    question: |
      When constructing a `Symfony\Component\HttpFoundation\Request` object programmatically for testing, which method allows you to specify the URI, HTTP method, and parameters?
      ```php
      use Symfony\Component\HttpFoundation\Request;

      $request = Request::create(
          // ???
      );
      ```
    answers:
      - { value: '''/path'', ''GET'', [''param'' => ''value'']', correct: true }
      - { value: '''GET'', ''/path'', [''param'' => ''value'']', correct: false }
      - { value: 'uri: ''/path'', method: ''GET'', parameters: [''param'' => ''value'']', correct: false }
      - { value: '''/path'', [''param'' => ''value''], ''GET''', correct: false }
    help: |
      The `Request::create()` method's signature is `create(string $uri, string $method = 'GET', array $parameters = [], array $cookies = [], array $files = [], array $server = [], string $content = null)`.
      https://symfony.com/doc/current/components/http_foundation.html#creating-a-request

  -
    question: >
      What is the purpose of the `AsyncContext` object provided to the `$passthru` generator in `AsyncDecoratorTrait`?
    answers:
      - { value: 'To control the response stream, allowing actions like pausing, canceling, or modifying chunks.', correct: true }
      - { value: 'To store the full response body before processing.', correct: false }
      - { value: 'To provide access to the original request options.', correct: false }
      - { value: 'To manage concurrent requests within the decorator.', correct: false }
    help: |
      The `AsyncContext` object gives fine-grained control over the asynchronous response stream within a custom decorator.
      https://symfony.com/doc/current/http_client.html#_snippet_83 (APIDOC for AsyncContext)

  -
    question: >
      Which of the following HTTP status codes indicates that the request was well-formed but was unable to be followed due to semantic errors?
    answers:
      - { value: '400 Bad Request', correct: false }
      - { value: '422 Unprocessable Content', correct: true }
      - { value: '409 Conflict', correct: false }
      - { value: '415 Unsupported Media Type', correct: false }
    help: |
      The 422 (Unprocessable Content) status code indicates that the server understands the content type of the request entity, and the syntax of the request entity is correct, but was unable to process the contained instructions.
      https://www.php.net/manual/en/function.http-response-code.php

  -
    question: |
      When using `HttpClientInterface::stream()`, what does `ChunkInterface::isLast()` indicate?
    answers:
      - { value: 'It returns true if this is the last chunk of the response, meaning the full body has been received.', correct: true }
      - { value: 'It returns true if the stream has encountered an error.', correct: false }
      - { value: 'It means the response headers have just arrived.', correct: false }
      - { value: 'It indicates that the connection has been closed by the client.', correct: false }
    help: |
      `isLast()` returns true for the final chunk, signifying that the entire response body has been received.
      https://symfony.com/doc/current/http_client.html#streaming-responses

  -
    question: >
      What is the primary difference between a "private" and a "public" cache in HTTP caching?
    answers:
      - { value: 'A private cache is specific to a single user (e.g., browser cache), while a public cache can be shared among multiple users (e.g., proxy cache).', correct: true }
      - { value: 'A private cache stores encrypted data, while a public cache stores unencrypted data.', correct: false }
      - { value: 'A private cache is managed by the client, while a public cache is managed by the server.', correct: false }
      - { value: 'A private cache requires authentication, while a public cache does not.', correct: false }
    help: |
      Private caches (like a browser's cache) are for a single user. Public caches (like proxy servers or CDNs) can serve cached content to multiple users.
      https://symfony.com/doc/current/http_cache/expiration.html#cache-control-public-and-private

  -
    question: |
      You are building a Symfony application and need to process a large file uploaded via a `POST` request without loading the entire file into memory. Which method on the `Request` object would allow you to access the uploaded file as a stream resource?
    answers:
      - { value: 'The `UploadedFile` object retrieved via `$request->files->get()` provides a `openFile()` method to get a SplFileObject, which can be used as a stream.', correct: true }
      - { value: '$request->getContent()', correct: false }
      - { value: '$request->getStreamedBody()', correct: false }
      - { value: '$request->files->get(''file_name'')->toStream()', correct: false }
    help: |
      While `Request::getContent()` gets the raw request body, for uploaded files, you get an `UploadedFile` object via `$request->files->get()`. This object allows you to access the file content, including as a stream, without loading it entirely into memory.
      https://symfony.com/doc/current/components/http_foundation.html#uploaded-files

  -
    question: >
      Which of the following HTTP status codes indicates that the client should continue with the request?
    answers:
      - { value: '100 Continue', correct: true }
      - { value: '101 Switching Protocols', correct: false }
      - { value: '200 OK', correct: false }
      - { value: '300 Multiple Choices', correct: false }
    help: |
      The 100 (Continue) status code indicates that the initial part of a request has been received and has not yet been rejected by the server. The client should continue with the request.
      https://www.php.net/manual/en/function.http-response-code.php

  -
    question: |
      When using `HttpClientInterface::stream()`, what does `ChunkInterface::getContent()` return?
    answers:
      - { value: 'A piece of the response body as a string.', correct: true }
      - { value: 'The full response body as a string.', correct: false }
      - { value: 'The HTTP headers of the response.', correct: false }
      - { value: 'The status code of the response.', correct: false }
    help: |
      `getContent()` on a `ChunkInterface` object returns a segment of the response body that has been received.
      https://symfony.com/doc/current/http_client.html#streaming-responses

  -
    question: >
      What is the purpose of the `HttpClientInterface::wait()` method when dealing with asynchronous requests?
    answers:
      - { value: 'To block execution until one or more pending promises (responses) are resolved or a timeout occurs.', correct: true }
      - { value: 'To pause the execution of a single request for a specified duration.', correct: false }
      - { value: 'To send a batch of requests simultaneously without waiting for responses.', correct: false }
      - { value: 'To register a callback function that executes when a response is received.', correct: false }
    help: |
      The `wait()` method is used to explicitly wait for pending asynchronous requests to complete, either for a specific promise, for a maximum duration, or for all remaining promises.
      https://symfony.com/doc/current/http_client.html#asynchronous-requestscategory: HTTP

questions:
  -
    question: >
      Which HTTP method is typically used to retrieve data from a server without causing any side effects?
    answers:
      - { value: 'GET', correct: true }
      - { value: 'POST', correct: false }
      - { value: 'PUT', correct: false }
      - { value: 'DELETE', correct: false }
    help: |
      The GET method requests a representation of the specified resource. Requests using GET should only retrieve data and should have no other effect on the data.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#http-methods

  -
    question: |
      In Symfony, how do you retrieve a query parameter named 'id' from an incoming HTTP request using the `Request` object?
      ```php
      use Symfony\Component\HttpFoundation\Request;

      $request = Request::createFromGlobals();
      // How to get 'id'?
      $id = /* ??? */;
      ```
    answers:
      - { value: '$request->query->get(''id'');', correct: true }
      - { value: '$request->request->get(''id'');', correct: false }
      - { value: '$request->attributes->get(''id'');', correct: false }
      - { value: '$request->get(''id'');', correct: false }
    help: |
      The `query` property of the Request object provides access to GET parameters.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#accessing-request-data

  -
    question: >
      Which HTTP status code indicates that a request has been successfully processed and a new resource has been created?
    answers:
      - { value: '200 OK', correct: false }
      - { value: '201 Created', correct: true }
      - { value: '204 No Content', correct: false }
      - { value: '302 Found', correct: false }
    help: |
      The 201 (Created) status code indicates that the request has been fulfilled and has resulted in one or more new resources being created.
      https://www.php.net/manual/en/function.http-response-code.php

  -
    question: |
      You want to send an HTTP POST request with a JSON body using Symfony's HttpClient. Which option should you use to specify the request body?
      ```php
      use Symfony\Contracts\HttpClient\HttpClientInterface;

      class MyApiClient
      {
          public function __construct(private HttpClientInterface $client) {}

          public function sendData(array $data): void
          {
              $response = $this->client->request('POST', 'https://api.example.com/data', [
                  // ???
              ]);
          }
      }
      ```
    answers:
      - { value: '''json'' => $data', correct: true }
      - { value: '''body'' => json_encode($data)', correct: true }
      - { value: '''form_params'' => $data', correct: false }
      - { value: '''content'' => $data', correct: false }
    help: |
      The `json` option automatically encodes the provided array to JSON and sets the `Content-Type` header to `application/json`. Alternatively, you can manually encode the data and use the `body` option.
      https://symfony.com/doc/current/http_client.html#request-options

  -
    question: >
      What is the primary purpose of the `Cache-Control: public` directive in an HTTP response?
    answers:
      - { value: 'To indicate that the response can be cached by any cache, including shared (proxy) caches.', correct: true }
      - { value: 'To prevent the response from being cached by any cache.', correct: false }
      - { value: 'To specify that the response is only cacheable by the client''s private cache.', correct: false }
      - { value: 'To force the client to revalidate the cache every time.', correct: false }
    help: |
      The `public` directive indicates that the response may be cached by any cache, even if it would normally be non-cacheable or cacheable only by a private cache.
      https://symfony.com/doc/current/http_cache/expiration.html#cache-control-public-and-private

  -
    question: >
      Which Symfony component provides classes for handling HTTP requests and responses in an object-oriented way?
    answers:
      - { value: 'Symfony\\Component\\HttpFoundation', correct: true }
      - { value: 'Symfony\\Component\\Routing', correct: false }
      - { value: 'Symfony\\Component\\HttpKernel', correct: false }
      - { value: 'Symfony\\Component\\HttpClient', correct: false }
    help: |
      The HttpFoundation component defines an object-oriented layer for the HTTP specification. It provides `Request` and `Response` classes.
      https://symfony.com/doc/current/components/http_foundation.html

  -
    question: |
      You need to set a cookie named 'session_id' with value 'abc' on a Symfony `Response` object. Which of the following is the correct way to do this?
      ```php
      use Symfony\Component\HttpFoundation\Response;
      use Symfony\Component\HttpFoundation\Cookie;

      $response = new Response();
      // ???
      ```
    answers:
      - { value: '$response->headers->setCookie(Cookie::create(''session_id'', ''abc''));', correct: true }
      - { value: '$response->cookies->set(''session_id'', ''abc'');', correct: false }
      - { value: '$response->setCookie(''session_id'', ''abc'');', correct: false }
      - { value: '$response->headers->addCookie(''session_id'', ''abc'');', correct: false }
    help: |
      Cookies are managed via the `ResponseHeaderBag` which is accessible via `$response->headers`. The `setCookie` method expects a `Cookie` object.
      https://symfony.com/doc/current/components/http_foundation.html#setting-cookies

  -
    question: >
      What is the purpose of the HTTP `Vary` header in caching?
    answers:
      - { value: 'It indicates that the response content varies depending on the specified request header fields.', correct: true }
      - { value: 'It specifies the maximum age a cached response can be considered fresh.', correct: false }
      - { value: 'It forces a cache to revalidate the response with the origin server.', correct: false }
      - { value: 'It defines the character encoding of the response body.', correct: false }
    help: |
      The `Vary` header indicates that the response content varies depending on the specified request header fields. Caches must not serve the response from cache unless all the specified request header fields match.
      https://symfony.com/doc/current/http_cache/cache_vary.html

  -
    question: |
      Which method of the `ResponseInterface` in Symfony's HttpClient is used to retrieve the full response body as a string, blocking until the content is fully received?
    answers:
      - { value: 'getContent()', correct: true }
      - { value: 'toStream()', correct: false }
      - { value: 'toArray()', correct: false }
      - { value: 'getRawContent()', correct: false }
    help: |
      The `getContent()` method returns the response body as a string. This call is blocking and waits until the full response content is received.
      https://symfony.com/doc/current/http_client.html#getting-the-response-content

  -
    question: >
      Which HTTP status code should be returned when a client requests a resource that does not exist on the server?
    answers:
      - { value: '400 Bad Request', correct: false }
      - { value: '401 Unauthorized', correct: false }
      - { value: '403 Forbidden', correct: false }
      - { value: '404 Not Found', correct: true }
    help: |
      The 404 (Not Found) status code indicates that the origin server did not find a current representation for the target resource or is not willing to disclose that one exists.
      https://www.php.net/manual/en/function.http-response-code.php

  -
    question: |
      When using `HttpClient::create()`, which HTTP client transport does Symfony prioritize if available?
    answers:
      - { value: 'CurlHttpClient', correct: true }
      - { value: 'NativeHttpClient', correct: false }
      - { value: 'AmpHttpClient', correct: false }
      - { value: 'GuzzleHttpClient', correct: false }
    help: |
      `HttpClient::create()` prioritizes `CurlHttpClient` if the cURL PHP extension is enabled. Otherwise, it falls back to `AmpHttpClient` or `NativeHttpClient`.
      https://symfony.com/doc/current/http_client.html#choosing-a-transport

  -
    question: >
      What is the primary difference between `Request::createFromGlobals()` and `Request::create()` in Symfony?
    answers:
      - { value: '`createFromGlobals()` creates a Request object from PHP''s superglobal variables, while `create()` allows programmatic construction of a Request object for simulation/testing.', correct: true }
      - { value: '`createFromGlobals()` is used for console commands, `create()` for web requests.', correct: false }
      - { value: '`createFromGlobals()` is deprecated in Symfony 7, `create()` is the recommended way.', correct: false }
      - { value: '`createFromGlobals()` includes uploaded files, `create()` does not.', correct: false }
    help: |
      `createFromGlobals()` populates the Request object using the current PHP global variables (`$_GET`, `$_POST`, `$_SERVER`, `$_FILES`, `$_COOKIE`). `create()` allows you to manually specify request details, useful for testing or internal sub-requests.
      https://symfony.com/doc/current/components/http_foundation.html#creating-a-request

  -
    question: |
      Which of the following HTTP methods is considered idempotent?
      (Select all that apply)
    answers:
      - { value: 'GET', correct: true }
      - { value: 'PUT', correct: true }
      - { value: 'DELETE', correct: true }
      - { value: 'POST', correct: false }
    help: |
      An HTTP method is idempotent if an identical request can be made multiple times without changing the state of the server beyond the initial request. GET, PUT, and DELETE are idempotent. POST is not.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#http-methods

  -
    question: >
      To make a Symfony `Response` cacheable by shared (proxy) caches, which method should you call on the `Response` object?
    answers:
      - { value: 'setPublic()', correct: true }
      - { value: 'setPrivate()', correct: false }
      - { value: 'setNoCache()', correct: false }
      - { value: 'setShared()', correct: false }
    help: |
      The `setPublic()` method sets the `Cache-Control` header to `public`, allowing shared caches to store the response.
      https://symfony.com/doc/current/http_cache/expiration.html#cache-control-public-and-private

  -
    question: |
      You are consuming an API that requires a Bearer token for authentication. How would you configure this globally for a Symfony HttpClient instance in `framework.yaml`?
      ```yaml
      # config/packages/framework.yaml
      framework:
          http_client:
              scoped_clients:
                  my_api:
                      base_uri: 'https://api.example.com/'
                      # ???
      ```
    answers:
      - { value: 'auth_bearer: your_token_here', correct: true }
      - { value: 'auth_basic: your_token_here', correct: false }
      - { value: 'headers: { Authorization: ''Bearer your_token_here'' }', correct: false }
      - { value: 'token: your_token_here', correct: false }
    help: |
      The `auth_bearer` option is used to configure HTTP Bearer authentication globally for a scoped client.
      https://symfony.com/doc/current/http_client.html#authentication

  -
    question: >
      Which HTTP status code indicates that the server understands the request but refuses to authorize it, even with authentication?
    answers:
      - { value: '401 Unauthorized', correct: false }
      - { value: '403 Forbidden', correct: true }
      - { value: '404 Not Found', correct: false }
      - { value: '405 Method Not Allowed', correct: false }
    help: |
      The 403 (Forbidden) status code indicates that the server understood the request but refuses to authorize it. Unlike 401 Unauthorized, re-authenticating will not make a difference.
      https://www.php.net/manual/en/function.http-response-code.php

  -
    question: |
      When streaming a large HTTP response with Symfony's HttpClient, what does `ChunkInterface::isFirst()` indicate?
    answers:
      - { value: 'It returns true if this is the first chunk received, meaning headers have arrived.', correct: true }
      - { value: 'It returns true if this is the last chunk of the response.', correct: false }
      - { value: 'It indicates that the stream has timed out.', correct: false }
      - { value: 'It means the entire response body has been received.', correct: false }
    help: |
      `isFirst()` returns true for the first chunk, which typically contains only headers.
      https://symfony.com/doc/current/http_client.html#streaming-responses

  -
    question: >
      What is the purpose of the `#[Cache]` attribute in a Symfony controller method?
    answers:
      - { value: 'To configure HTTP caching directives directly on the controller action.', correct: true }
      - { value: 'To define a cache key for the method''s return value.', correct: false }
      - { value: 'To enable internal Symfony caching for the route.', correct: false }
      - { value: 'To mark the method as a cache invalidator.', correct: false }
    help: |
      The `#[Cache]` attribute allows you to configure HTTP caching headers (like `Cache-Control`, `Expires`, `Last-Modified`) directly on your controller methods.
      https://symfony.com/doc/current/http_cache/expiration.html#configuring-cache-with-the-cache-attribute

  -
    question: |
      How can you retrieve the raw HTTP request body content in Symfony, for example, to process an XML or JSON payload?
      ```php
      use Symfony\Component\HttpFoundation\Request;

      $request = Request::createFromGlobals();
      $content = /* ??? */;
      ```
    answers:
      - { value: '$request->getContent();', correct: true }
      - { value: '$request->getPayload()->all();', correct: false }
      - { value: '$request->request->all();', correct: false }
      - { value: '$request->getRequestBody();', correct: false }
    help: |
      The `getContent()` method returns the raw body of the request. This is useful for non-form data like XML or JSON.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-the-request-body

  -
    question: >
      Which of the following HTTP status codes indicates a temporary redirect?
    answers:
      - { value: '301 Moved Permanently', correct: false }
      - { value: '302 Found', correct: true }
      - { value: '303 See Other', correct: false }
      - { value: '307 Temporary Redirect', correct: true }
    help: |
      Both 302 Found and 307 Temporary Redirect indicate a temporary redirection. The 302 status code is widely used, but 307 is often preferred as it explicitly forbids changing the HTTP method (e.g., POST to GET).
      https://www.php.net/manual/en/function.http-response-code.php

  -
    question: |
      You want to make multiple HTTP requests concurrently using Symfony's HttpClient. What is the recommended approach to achieve this without blocking execution for each request?
    answers:
      - { value: 'Initiate all requests in a loop, then iterate over the responses in a separate loop to consume their content.', correct: true }
      - { value: 'Use `stream()` for each request individually.', correct: false }
      - { value: 'Call `wait()` after each request.', correct: false }
      - { value: 'Symfony HttpClient does not support concurrent requests.', correct: false }
    help: |
      Symfony's HttpClient is designed for concurrent requests. You initiate all requests, which return immediately, and then process their responses in a separate loop.
      https://symfony.com/doc/current/http_client.html#sending-concurrent-requests

  -
    question: >
      What is the purpose of the `Expires` HTTP header in caching?
    answers:
      - { value: 'It specifies the date/time after which the response is considered stale.', correct: true }
      - { value: 'It indicates the maximum age a cached response can be considered fresh.', correct: false }
      - { value: 'It provides a unique identifier for the cached resource.', correct: false }
      - { value: 'It defines the content encoding of the response.', correct: false }
    help: |
      The `Expires` header specifies the date and time after which the response is considered stale. It's a legacy header, largely superseded by `Cache-Control: max-age`.
      https://symfony.com/doc/current/http_cache/expiration.html#expires-header

  -
    question: |
      Which of the following options can be used with Symfony's HttpClient to send data in the request body?
      (Select all that apply)
    answers:
      - { value: '''body'' => ''raw data''', correct: true }
      - { value: '''body'' => [''param1'' => ''value1'']', correct: true }
      - { value: '''body'' => fopen(''/path/to/file'', ''r'')', correct: true }
      - { value: '''form_fields'' => [''field'' => ''value'']', correct: false }
    help: |
      The `body` option is versatile and can accept a string, an array (for form-urlencoded or multipart), a closure, or a resource (like a file handle).
      https://symfony.com/doc/current/http_client.html#uploading-data

  -
    question: >
      Which HTTP status code indicates that the request could not be understood by the server due to malformed syntax?
    answers:
      - { value: '400 Bad Request', correct: true }
      - { value: '404 Not Found', correct: false }
      - { value: '500 Internal Server Error', correct: false }
      - { value: '403 Forbidden', correct: false }
    help: |
      The 400 (Bad Request) status code indicates that the server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
      https://www.php.net/manual/en/function.http-response-code.php

  -
    question: |
      How do you configure Symfony's HttpClient to force HTTP/2 for all requests made by a specific client instance?
      ```php
      use Symfony\Component\HttpClient\HttpClient;

      $client = HttpClient::create([
          // ???
      ]);
      ```
    answers:
      - { value: '''http_version'' => ''2.0''', correct: true }
      - { value: '''version'' => ''2.0''', correct: false }
      - { value: '''protocol'' => ''HTTP/2''', correct: false }
      - { value: '''force_http2'' => true', correct: false }
    help: |
      The `http_version` option allows you to explicitly set the HTTP protocol version for the client.
      https://symfony.com/doc/current/http_client.html#http-2-support

  -
    question: >
      What is the primary role of the `HttpKernel` component in Symfony?
    answers:
      - { value: 'To convert an incoming `Request` into an outgoing `Response`.', correct: true }
      - { value: 'To manage routing and URL generation.', correct: false }
      - { value: 'To handle database interactions.', correct: false }
      - { value: 'To provide a templating engine.', correct: false }
    help: |
      The `HttpKernel` component is the core of a Symfony application, responsible for taking a `Request` and returning a `Response`.
      https://symfony.com/doc/current/components/http_kernel.html

  -
    question: |
      Which method on the `Symfony\Component\HttpFoundation\Request` object would you use to get an array of languages the client accepts, ordered by descending quality?
    answers:
      - { value: 'getLanguages()', correct: true }
      - { value: 'getPreferredLanguage()', correct: false }
      - { value: 'getAcceptLanguage()', correct: false }
      - { value: 'getLocales()', correct: false }
    help: |
      The `getLanguages()` method parses the `Accept-Language` header and returns an array of accepted languages, ordered by quality.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: >
      When testing a service that uses `HttpClientInterface`, which class should you use to provide predefined or dynamically generated responses?
    answers:
      - { value: 'MockHttpClient', correct: true }
      - { value: 'TestHttpClient', correct: false }
      - { value: 'FakeHttpClient', correct: false }
      - { value: 'DummyHttpClient', correct: false }
    help: |
      `MockHttpClient` is an implementation of `HttpClientInterface` specifically designed for testing, allowing you to control the responses returned.
      https://symfony.com/doc/current/http_client.html#mocking-responses

  -
    question: >
      What does the HTTP `ETag` header represent in the context of caching?
    answers:
      - { value: 'An opaque identifier representing a specific version of a resource.', correct: true }
      - { value: 'The expiration date of the cached resource.', correct: false }
      - { value: 'The last modification date of the resource.', correct: false }
      - { value: 'The size of the resource in bytes.', correct: false }
    help: |
      The `ETag` (entity tag) is an opaque identifier assigned by a web server to a specific version of a resource found at a URL. If the resource content changes, a new `ETag` is generated.
      https://symfony.com/doc/current/http_cache/expiration.html#etag-header

  -
    question: |
      You need to clear a cookie named 'user_pref' from the client's browser. How would you do this using a Symfony `Response` object?
      ```php
      use Symfony\Component\HttpFoundation\Response;

      $response = new Response();
      // ???
      ```
    answers:
      - { value: '$response->headers->clearCookie(''user_pref'');', correct: true }
      - { value: '$response->cookies->remove(''user_pref'');', correct: false }
      - { value: '$response->clearCookie(''user_pref'');', correct: false }
      - { value: '$response->headers->deleteCookie(''user_pref'');', correct: false }
    help: |
      The `clearCookie()` method on `ResponseHeaderBag` (accessed via `$response->headers`) is used to instruct the client to remove a cookie.
      https://symfony.com/doc/current/components/http_foundation.html#clearing-cookies

  -
    question: >
      Which HTTP status code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request?
    answers:
      - { value: '400 Bad Request', correct: false }
      - { value: '404 Not Found', correct: false }
      - { value: '500 Internal Server Error', correct: true }
      - { value: '503 Service Unavailable', correct: false }
    help: |
      The 500 (Internal Server Error) status code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.
      https://www.php.net/manual/en/function.http-response-code.php

  -
    question: |
      How can you retrieve an HTTP header value (e.g., 'Content-Type') from a Symfony `Request` object?
      ```php
      use Symfony\Component\HttpFoundation\Request;

      $request = Request::createFromGlobals();
      $contentType = /* ??? */;
      ```
    answers:
      - { value: '$request->headers->get(''content-type'');', correct: true }
      - { value: '$request->getHeader(''Content-Type'');', correct: false }
      - { value: '$request->headers[''Content-Type''];', correct: false }
      - { value: '$request->getHeaders()[''content-type''];', correct: false }
    help: |
      The `headers` property of the `Request` object is a `HeaderBag` instance, which provides a `get()` method for retrieving header values with normalized, lowercase keys.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#accessing-request-data

  -
    question: >
      What is the primary benefit of using `StreamedResponse` in Symfony?
    answers:
      - { value: 'To send large amounts of data to the client incrementally, reducing memory usage and improving perceived performance.', correct: true }
      - { value: 'To automatically compress the response content.', correct: false }
      - { value: 'To handle file uploads more efficiently.', correct: false }
      - { value: 'To redirect the client to another URL with a streaming effect.', correct: false }
    help: |
      `StreamedResponse` allows you to send the HTTP response back to the client in chunks, which is beneficial for large responses to avoid memory exhaustion and improve user experience.
      https://symfony.com/doc/current/components/http_foundation.html#streaming-a-response

  -
    question: |
      Which of the following is the correct way to set the `max-age` directive of the `Cache-Control` header to 3600 seconds on a Symfony `Response` object?
    answers:
      - { value: '$response->setMaxAge(3600);', correct: true }
      - { value: '$response->setCacheControl(''max-age=3600'');', correct: false }
      - { value: '$response->headers->set(''Cache-Control'', ''max-age=3600'');', correct: false }
      - { value: '$response->setTtl(3600);', correct: false }
    help: |
      The `setMaxAge()` method is a convenient way to set the `max-age` directive of the `Cache-Control` header.
      https://symfony.com/doc/current/http_cache/expiration.html#cache-control-max-age

  -
    question: >
      What is the purpose of the `HttpClientInterface::stream()` method in Symfony?
    answers:
      - { value: 'To process large HTTP responses chunk by chunk, preventing memory exhaustion.', correct: true }
      - { value: 'To send multiple requests asynchronously and wait for all of them to complete.', correct: false }
      - { value: 'To convert a response body into a PHP stream resource.', correct: false }
      - { value: 'To cancel an ongoing HTTP request.', correct: false }
    help: |
      The `stream()` method allows you to monitor a list of HTTP responses and process their content as it arrives in chunks, which is crucial for handling large files or long-lived connections.
      https://symfony.com/doc/current/http_client.html#streaming-responses

  -
    question: >
      Which HTTP status code is used for conditional GET requests when the resource has not been modified since the last request?
    answers:
      - { value: '200 OK', correct: false }
      - { value: '304 Not Modified', correct: true }
      - { value: '412 Precondition Failed', correct: false }
      - { value: '203 Non-Authoritative Information', correct: false }
    help: |
      The 304 (Not Modified) status code indicates that the resource has not been modified since the version specified by the request headers (e.g., `If-None-Match` or `If-Modified-Since`).
      https://www.php.net/manual/en/function.http-response-code.php

  -
    question: |
      You are building a Symfony application and need to interact with an external API. Which interface should you type-hint in your service constructor to leverage Symfony's HTTP Client?
      ```php
      namespace App\Service;

      use /* ??? */;

      class ApiClient
      {
          public function __construct(
              private /* ??? */ $client,
          ) {}
          // ...
      }
      ```
    answers:
      - { value: 'Symfony\\Contracts\\HttpClient\\HttpClientInterface', correct: true }
      - { value: 'Symfony\\Component\\HttpClient\\HttpClient', correct: false }
      - { value: 'Psr\\Http\\Client\\HttpClientInterface', correct: false }
      - { value: 'GuzzleHttp\\Client', correct: false }
    help: |
      `HttpClientInterface` from `symfony/http-client-contracts` is the recommended interface for autowiring the HTTP client, ensuring decoupling from concrete implementations.
      https://symfony.com/doc/current/http_client.html#autowiring-the-http-client

  -
    question: >
      What is the default behavior of `ResponseInterface::getHeaders(true)` in Symfony's HttpClient when an HTTP error (4xx or 5xx) occurs?
    answers:
      - { value: 'It throws an exception.', correct: true }
      - { value: 'It returns an empty array.', correct: false }
      - { value: 'It returns the headers normally, ignoring the error.', correct: false }
      - { value: 'It logs the error and returns the headers.', correct: false }
    help: |
      By default, `getHeaders()` (and `getContent()`, `toArray()`) will throw an exception if the response status code indicates an HTTP error (4xx or 5xx). You can pass `false` to suppress this.
      https://symfony.com/doc/current/http_client.html#handling-http-errors

  -
    question: >
      Which of the following HTTP methods is used to submit an entity to the specified resource, often causing a change in state or side effects on the server?
    answers:
      - { value: 'GET', correct: false }
      - { value: 'POST', correct: true }
      - { value: 'HEAD', correct: false }
      - { value: 'OPTIONS', correct: false }
    help: |
      The POST method is used to send data to a server to create/update a resource. It is not idempotent.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#http-methods

  -
    question: |
      You are testing a Symfony service that makes an HTTP request. You want to assert the HTTP method and URL that the mock client received. Which `MockResponse` methods can help you with this?
      (Select all that apply)
    answers:
      - { value: 'getRequestMethod()', correct: true }
      - { value: 'getRequestUrl()', correct: true }
      - { value: 'getRequestOptions()', correct: true }
      - { value: 'getSentRequest()', correct: false }
    help: |
      `MockResponse` provides `getRequestMethod()`, `getRequestUrl()`, and `getRequestOptions()` to inspect the details of the request that was made against it.
      https://symfony.com/doc/current/http_client.html#inspecting-mocked-requests

  -
    question: >
      What is the purpose of the `Last-Modified` HTTP header in caching?
    answers:
      - { value: 'It indicates the date and time the origin server believes the resource was last modified.', correct: true }
      - { value: 'It specifies how long the cached response is valid.', correct: false }
      - { value: 'It provides a unique identifier for the resource.', correct: false }
      - { value: 'It defines the character set of the response.', correct: false }
    help: |
      The `Last-Modified` header indicates the date and time at which the origin server believes the selected representation was last modified. It's used in conjunction with `If-Modified-Since` for conditional requests.
      https://symfony.com/doc/current/http_cache/expiration.html#last-modified-header

  -
    question: |
      How do you add query string parameters to an HTTP GET request using Symfony's HttpClient, ensuring they are properly URL-encoded?
      ```php
      use Symfony\Component\HttpClient\HttpClient;

      $client = HttpClient::create();
      $response = $client->request('GET', 'https://api.example.com/search', [
          // ???
      ]);
      ```
    answers:
      - { value: '''query'' => [''q'' => ''symfony'', ''page'' => 1]', correct: true }
      - { value: '''params'' => [''q'' => ''symfony'', ''page'' => 1]', correct: false }
      - { value: '''url'' => ''https://api.example.com/search?q=symfony&page=1''', correct: false }
      - { value: '''get'' => [''q'' => ''symfony'', ''page'' => 1]', correct: false }
    help: |
      The `query` option is used to define query string parameters. Symfony's HttpClient automatically URL-encodes these values.
      https://symfony.com/doc/current/http_client.html#query-string-parameters

  -
    question: >
      Which HTTP status code indicates that the requested resource has been permanently moved to a new URL?
    answers:
      - { value: '301 Moved Permanently', correct: true }
      - { value: '302 Found', correct: false }
      - { value: '303 See Other', correct: false }
      - { value: '307 Temporary Redirect', correct: false }
    help: |
      The 301 (Moved Permanently) status code indicates that the target resource has been assigned a new permanent URI and any future references to this resource ought to use one of the enclosed URIs.
      https://www.php.net/manual/en/function.http-response-code.php

  -
    question: |
      You are creating a Symfony `Response` object and want to set multiple cache-related headers in one call. Which method allows you to do this using an associative array of options?
    answers:
      - { value: 'setCache(array $options)', correct: true }
      - { value: 'configureCache(array $options)', correct: false }
      - { value: 'addCacheHeaders(array $options)', correct: false }
      - { value: 'setCaching(array $options)', correct: false }
    help: |
      The `setCache()` method allows setting multiple cache directives (like `max_age`, `public`, `etag`, `last_modified`) in a single call.
      https://symfony.com/doc/current/components/http_foundation.html#response-cache-methods

  -
    question: >
      What is the purpose of the `HttpClient::createForBaseUri()` static method?
    answers:
      - { value: 'To create an HttpClient instance with a predefined base URI and associated default options.', correct: true }
      - { value: 'To create a client that only accepts requests to the specified base URI.', correct: false }
      - { value: 'To create a client for making requests to multiple base URIs concurrently.', correct: false }
      - { value: 'To create a client that automatically redirects to the base URI.', correct: false }
    help: |
      `createForBaseUri()` is a static factory method that creates a `ScopingHttpClient` configured with a base URI and default options that apply to requests made to that base URI.
      https://symfony.com/doc/current/http_client.html#configuring-a-base-uri

  -
    question: |
      Which of the following classes is specifically designed for creating mock HTTP responses for testing Symfony's HttpClient?
    answers:
      - { value: 'Symfony\\Component\\HttpClient\\Response\\MockResponse', correct: true }
      - { value: 'Symfony\\Component\\HttpClient\\Response\\TestResponse', correct: false }
      - { value: 'Symfony\\Component\\HttpFoundation\\Response', correct: false }
      - { value: 'Symfony\\Component\\HttpClient\\Response\\FakeResponse', correct: false }
    help: |
      `MockResponse` is the dedicated class for creating predefined HTTP responses to be used with `MockHttpClient` in tests.
      https://symfony.com/doc/current/http_client.html#mocking-responses

  -
    question: >
      What is the primary function of the `Accept` HTTP header?
    answers:
      - { value: 'To specify the media types (e.g., `text/html`, `application/json`) that the client is willing to accept in the response.', correct: true }
      - { value: 'To indicate the character sets that the client prefers.', correct: false }
      - { value: 'To define the preferred language for the response.', correct: false }
      - { value: 'To specify the encoding methods (e.g., `gzip`) that the client understands.', correct: false }
    help: |
      The `Accept` request HTTP header advertises which content types, expressed as MIME types, the client is able to understand.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept

  -
    question: |
      When using `HttpClientInterface::stream()`, what does `ChunkInterface::isTimeout()` indicate?
    answers:
      - { value: 'It returns true if the stream timed out for this specific response.', correct: true }
      - { value: 'It means the entire stream operation has completed successfully.', correct: false }
      - { value: 'It indicates a network error occurred during streaming.', correct: false }
      - { value: 'It signals that the server has closed the connection.', correct: false }
    help: |
      `isTimeout()` returns true if the stream timed out for the response associated with the chunk. This allows handling partial responses or implementing custom timeout logic.
      https://symfony.com/doc/current/http_client.html#streaming-responses

  -
    question: >
      Which HTTP status code indicates that the server is currently unable to handle the request due to a temporary overload or maintenance?
    answers:
      - { value: '500 Internal Server Error', correct: false }
      - { value: '502 Bad Gateway', correct: false }
      - { value: '503 Service Unavailable', correct: true }
      - { value: '504 Gateway Timeout', correct: false }
    help: |
      The 503 (Service Unavailable) status code indicates that the server is not ready to handle the request. This is typically a temporary condition which will be alleviated after some delay.
      https://www.php.net/manual/en/function.http-response-code.php

  -
    question: |
      How can you cancel an ongoing HTTP request made with Symfony's HttpClient?
      (Select all that apply)
    answers:
      - { value: 'Call `ResponseInterface::cancel()` on the response object.', correct: true }
      - { value: 'Throw an exception from an `on_progress` callback.', correct: true }
      - { value: 'Call `HttpClientInterface::abort()` with the response object.', correct: false }
      - { value: 'Close the client instance.', correct: false }
    help: |
      Requests can be cancelled either by explicitly calling `cancel()` on the response object or by throwing an exception from within an `on_progress` callback.
      https://symfony.com/doc/current/http_client.html#cancelling-requests

  -
    question: >
      What is the purpose of the `Accept-Language` HTTP header?
    answers:
      - { value: 'To indicate the natural languages that the client prefers for the response.', correct: true }
      - { value: 'To specify the character encodings the client understands.', correct: false }
      - { value: 'To define the content types the client accepts.', correct: false }
      - { value: 'To declare the client''s geographical location.', correct: false }
    help: |
      The `Accept-Language` request HTTP header advertises which languages the client is able to understand, and which locale is preferred.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language

  -
    question: |
      You want to set a default `User-Agent` header for all requests made by a Symfony HttpClient instance. How would you configure this in `config/packages/framework.yaml`?
      ```yaml
      # config/packages/framework.yaml
      framework:
          http_client:
              default_options:
                  # ???
      ```
    answers:
      - { value: 'headers: { ''User-Agent'': ''My App'' }', correct: true }
      - { value: 'user_agent: ''My App''', correct: false }
      - { value: 'default_headers: { ''User-Agent'': ''My App'' }', correct: false }
      - { value: 'options: { ''User-Agent'': ''My App'' }', correct: false }
    help: |
      Default headers are configured under `default_options.headers` in the framework configuration.
      https://symfony.com/doc/current/http_client.html#configuring-default-request-options

  -
    question: >
      What is the primary role of the `Response::send()` method in Symfony?
    answers:
      - { value: 'To send the HTTP headers and content of the response to the client.', correct: true }
      - { value: 'To save the response to a file on the server.', correct: false }
      - { value: 'To convert the Response object into a JSON string.', correct: false }
      - { value: 'To validate the response against HTTP standards.', correct: false }
    help: |
      The `send()` method is responsible for sending the HTTP headers and the response content to the client's browser.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#sending-the-response

  -
    question: |
      Which of the following Symfony HttpClient classes is specifically designed to handle URI templates for requests?
    answers:
      - { value: 'UriTemplateHttpClient', correct: true }
      - { value: 'TemplateHttpClient', correct: false }
      - { value: 'PatternHttpClient', correct: false }
      - { value: 'RouteHttpClient', correct: false }
    help: |
      `UriTemplateHttpClient` allows you to define URI templates with variables that are expanded into the URL before making the request.
      https://symfony.com/doc/current/http_client.html#uri-templates

  -
    question: >
      What is the purpose of the `Accept-Charset` HTTP header?
    answers:
      - { value: 'To indicate the character sets (e.g., `UTF-8`, `ISO-8859-1`) that the client prefers for the response.', correct: true }
      - { value: 'To specify the content types the client accepts.', correct: false }
      - { value: 'To define the preferred language for the response.', correct: false }
      - { value: 'To declare the client''s operating system character set.', correct: false }
    help: |
      The `Accept-Charset` request HTTP header advertises which character sets the client is able to understand.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Charset

  -
    question: |
      You need to test a service that interacts with an external API using Symfony's HttpClient, and you want to use a HAR (HTTP Archive) file to mock responses. Which class helps you achieve this?
    answers:
      - { value: 'HarFileResponseFactory', correct: true }
      - { value: 'HarHttpClient', correct: false }
      - { value: 'ArchiveResponseFactory', correct: false }
      - { value: 'MockHarClient', correct: false }
    help: |
      `HarFileResponseFactory` is used with `MockHttpClient` to create mock responses based on recorded HTTP interactions stored in a HAR file.
      https://symfony.com/doc/current/http_client.html#testing-with-har-files

  -
    question: >
      Which HTTP status code indicates that the request requires user authentication?
    answers:
      - { value: '401 Unauthorized', correct: true }
      - { value: '403 Forbidden', correct: false }
      - { value: '407 Proxy Authentication Required', correct: false }
      - { value: '419 Authentication Timeout', correct: false }
    help: |
      The 401 (Unauthorized) status code indicates that the request has not been applied because it lacks valid authentication credentials for the target resource.
      https://www.php.net/manual/en/function.http-response-code.php

  -
    question: |
      What is the purpose of the `ScopingHttpClient` in Symfony?
    answers:
      - { value: 'To apply different default options to requests based on their URL patterns.', correct: true }
      - { value: 'To limit the number of concurrent requests to a specific domain.', correct: false }
      - { value: 'To automatically add a base URI to all relative URLs.', correct: false }
      - { value: 'To log all HTTP requests and responses for debugging.', correct: false }
    help: |
      `ScopingHttpClient` allows you to define different sets of default options (e.g., headers, authentication) that apply only to URLs matching specific regular expressions.
      https://symfony.com/doc/current/http_client.html#scoping-http-clients

  -
    question: >
      Which of the following HTTP methods is typically used to update an existing resource completely, replacing the entire resource with the new payload?
    answers:
      - { value: 'PATCH', correct: false }
      - { value: 'PUT', correct: true }
      - { value: 'POST', correct: false }
      - { value: 'MERGE', correct: false }
    help: |
      The PUT method is used to update a resource or create a resource at a specific URI if it does not exist. It is idempotent, meaning multiple identical PUT requests will have the same effect as a single one.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#http-methods

  -
    question: |
      You want to make a `HEAD` request using Symfony's HttpClient. What is the primary benefit of using `HEAD` over `GET`?
    answers:
      - { value: 'It retrieves only the HTTP headers, without the response body, saving bandwidth.', correct: true }
      - { value: 'It is faster than `GET` because it uses a different network protocol.', correct: false }
      - { value: 'It allows sending a request body with the headers.', correct: false }
      - { value: 'It automatically follows redirects without returning a 3xx status code.', correct: false }
    help: |
      The HEAD method asks for a response identical to that of a GET request, but without the response body. This is useful for retrieving metadata about a resource without transferring the entire content.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/HEAD

  -
    question: >
      What is the purpose of the `ThrottlingHttpClient` in Symfony?
    answers:
      - { value: 'To limit the rate of requests sent to a specific host or API, preventing rate-limiting issues.', correct: true }
      - { value: 'To automatically retry failed requests after a delay.', correct: false }
      - { value: 'To compress request and response bodies for efficiency.', correct: false }
      - { value: 'To add a delay before sending each request for testing purposes.', correct: false }
    help: |
      `ThrottlingHttpClient` (introduced in Symfony 7.1) allows you to limit the number of requests per unit of time, which is essential when dealing with APIs that have rate limits.
      https://symfony.com/doc/current/http_client.html#rate-limiting

  -
    question: |
      When using Symfony's `Response` object, how can you explicitly mark a response as stale, forcing caches to revalidate it?
    answers:
      - { value: '$response->expire();', correct: true }
      - { value: '$response->setNoCache();', correct: false }
      - { value: '$response->invalidate();', correct: false }
      - { value: '$response->setExpires(new \DateTime(''now''));', correct: false }
    help: |
      The `expire()` method sets the `Expires` header to a past date and adds `no-cache` to `Cache-Control`, effectively marking the response as stale.
      https://symfony.com/doc/current/http_cache.html#marking-a-response-as-stale

  -
    question: >
      What is the primary purpose of the `Accept-Encoding` HTTP header?
    answers:
      - { value: 'To specify the content encoding methods (e.g., `gzip`, `deflate`) that the client understands.', correct: true }
      - { value: 'To indicate the character sets the client prefers.', correct: false }
      - { value: 'To define the preferred language for the response.', correct: false }
      - { value: 'To specify the media types the client accepts.', correct: false }
    help: |
      The `Accept-Encoding` request HTTP header advertises which content encoding methods the client is able to understand.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Encoding

  -
    question: |
      You are creating a Symfony `Response` object. Which of the following is the correct way to set its content and HTTP status code during instantiation?
      ```php
      use Symfony\Component\HttpFoundation\Response;

      $response = new Response(
          // ???
      );
      ```
    answers:
      - { value: '''Hello World!'', Response::HTTP_OK', correct: true }
      - { value: '[''content'' => ''Hello World!'', ''status'' => Response::HTTP_OK]', correct: false }
      - { value: '''Hello World!'', 200', correct: true }
      - { value: 'content: ''Hello World!'', status: Response::HTTP_OK', correct: false }
    help: |
      The `Response` constructor accepts the content as the first argument and the status code as the second.
      https://symfony.com/doc/current/components/http_foundation.html#creating-a-response

  -
    question: |
      Which of the following is the correct way to retrieve a `POST` parameter named 'category' from an incoming HTTP request, providing a default value of 'default category' if it's not present?
      ```php
      use Symfony\Component\HttpFoundation\Request;

      $request = Request::createFromGlobals();
      $category = /* ??? */;
      ```
    answers:
      - { value: '$request->getPayload()->get(''category'', ''default category'');', correct: true }
      - { value: '$request->request->get(''category'', ''default category'');', correct: true }
      - { value: '$request->post->get(''category'', ''default category'');', correct: false }
      - { value: '$request->get(''category'', ''default category'');', correct: false }
    help: |
      Both `$request->getPayload()->get()` and `$request->request->get()` can be used to retrieve POST parameters, with `getPayload()` being the recommended way for Symfony 7+.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#accessing-request-data

  -
    question: >
      What is the primary purpose of the `RedirectResponse` class in Symfony?
    answers:
      - { value: 'To send an HTTP redirect response (e.g., 301, 302) to the client, instructing the browser to navigate to a different URL.', correct: true }
      - { value: 'To automatically redirect internal requests within the application.', correct: false }
      - { value: 'To handle redirects from external APIs.', correct: false }
      - { value: 'To log all redirection attempts for auditing.', correct: false }
    help: |
      The `RedirectResponse` class is a specialized `Response` that simplifies sending HTTP redirects.
      https://symfony.com/doc/current/components/http_foundation.html#redirecting-the-user

  -
    question: |
      When configuring default options for Symfony's HttpClient, how can you set HTTP Basic authentication globally for a scoped client in `framework.yaml`?
      ```yaml
      # config/packages/framework.yaml
      framework:
          http_client:
              scoped_clients:
                  my_api:
                      base_uri: 'https://api.example.com/'
                      # ???
      ```
    answers:
      - { value: 'auth_basic: ''username:password''', correct: true }
      - { value: 'basic_auth: ''username:password''', correct: false }
      - { value: 'auth: { type: basic, user: username, pass: password }', correct: false }
      - { value: 'headers: { Authorization: ''Basic ...'' }', correct: false }
    help: |
      The `auth_basic` option is used to configure HTTP Basic authentication globally for a scoped client.
      https://symfony.com/doc/current/http_client.html#authentication

  -
    question: >
      Which of the following HTTP status codes indicates that the requested method is not supported for the resource identified by the URI?
    answers:
      - { value: '400 Bad Request', correct: false }
      - { value: '403 Forbidden', correct: false }
      - { value: '405 Method Not Allowed', correct: true }
      - { value: '501 Not Implemented', correct: false }
    help: |
      The 405 (Method Not Allowed) status code indicates that the method received in the request-line is known by the origin server but not supported by the target resource.
      https://www.php.net/manual/en/function.http-response-code.php

  -
    question: |
      You are using `HttpClient::create()` without any specific transport configuration. In what order does Symfony attempt to use underlying HTTP client transports?
    answers:
      - { value: 'cURL, then AmpHttpClient, then NativeHttpClient', correct: true }
      - { value: 'NativeHttpClient, then cURL, then AmpHttpClient', correct: false }
      - { value: 'AmpHttpClient, then cURL, then NativeHttpClient', correct: false }
      - { value: 'It randomly selects one based on system load.', correct: false }
    help: |
      `HttpClient::create()` prioritizes `CurlHttpClient` if the cURL extension is available, then falls back to `AmpHttpClient` if the `amphp/http-client` package is installed, and finally to `NativeHttpClient` (PHP streams).
      https://symfony.com/doc/current/http_client.html#choosing-a-transport

  -
    question: >
      What is the purpose of the `isNotModified()` method on a Symfony `Response` object?
    answers:
      - { value: 'To check if the client''s request headers (e.g., `If-None-Match`, `If-Modified-Since`) indicate that the resource has not been modified, and if so, set the response status to 304.', correct: true }
      - { value: 'To prevent the response from being modified by middleware.', correct: false }
      - { value: 'To determine if the response content has changed since it was created.', correct: false }
      - { value: 'To ensure the response is always fresh and not served from cache.', correct: false }
    help: |
      The `isNotModified()` method checks if the `Response` validators (ETag, Last-Modified) match a conditional value in the client `Request`. If so, it sets the status to 304 and removes the content.
      https://symfony.com/doc/current/components/http_foundation.html#checking-if-a-response-is-not-modified

  -
    question: |
      Which of the following is a valid way to retrieve an uploaded file named 'attachment' from a Symfony `Request` object?
      ```php
      use Symfony\Component\HttpFoundation\Request;

      $request = Request::createFromGlobals();
      $file = /* ??? */;
      ```
    answers:
      - { value: '$request->files->get(''attachment'');', correct: true }
      - { value: '$request->getUploadedFile(''attachment'');', correct: false }
      - { value: '$request->file(''attachment'');', correct: false }
      - { value: '$request->getFiles()[''attachment''];', correct: false }
    help: |
      The `files` property of the `Request` object is a `FileBag` instance, which provides a `get()` method for retrieving uploaded files as `UploadedFile` objects.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#accessing-request-data

  -
    question: >
      What is HTTP content negotiation?
    answers:
      - { value: 'The mechanism that makes it possible to serve different versions of a resource at the same URI, based on client preferences (e.g., language, format).', correct: true }
      - { value: 'The process of encrypting HTTP communication between client and server.', correct: false }
      - { value: 'The method for clients to agree on the maximum size of the response body.', correct: false }
      - { value: 'The protocol for exchanging authentication credentials between client and server.', correct: false }
    help: |
      Content negotiation is the mechanism that is used to serve different representations of a resource at the same URI, chosen by the server based on client-provided preferences (e.g., `Accept`, `Accept-Language` headers).
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Content_negotiation

  -
    question: |
      You are configuring a Symfony HttpClient instance and want to set a base URI using the `withOptions()` method. Which of the following is the correct way to do this?
      ```php
      use Symfony\Component\HttpClient\HttpClient;

      $client = HttpClient::create();
      $client = $client->withOptions([
          // ???
      ]);
      ```
    answers:
      - { value: '''base_uri'' => ''https://api.example.com/''', correct: true }
      - { value: '''baseUri'' => ''https://api.example.com/''', correct: false }
      - { value: '''uri_base'' => ''https://api.example.com/''', correct: false }
      - { value: '''default_uri'' => ''https://api.example.com/''', correct: false }
    help: |
      The `base_uri` option is used to set a base URI for the client, allowing subsequent requests to use relative URLs.
      https://symfony.com/doc/current/http_client.html#configuring-a-base-uri

  -
    question: >
      Which of the following is NOT a standard HTTP method?
    answers:
      - { value: 'GET', correct: false }
      - { value: 'POST', correct: false }
      - { value: 'FETCH', correct: true }
      - { value: 'DELETE', correct: false }
      - { value: 'OPTIONS', correct: false }
    help: |
      GET, POST, PUT, DELETE, HEAD, OPTIONS, TRACE, CONNECT, and PATCH are standard HTTP methods. FETCH is not a standard HTTP method, though it's a common JavaScript API.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#http-methods

  -
    question: |
      In Symfony's `HttpClient`, what does the `ResponseInterface::toArray()` method do?
    answers:
      - { value: 'It casts the response JSON content to a PHP array.', correct: true }
      - { value: 'It converts the response headers into an associative array.', correct: false }
      - { value: 'It returns the raw response body as an array of characters.', correct: false }
      - { value: 'It serializes the entire response object into an array for debugging.', correct: false }
    help: |
      The `toArray()` method is a convenient way to parse a JSON response body into a PHP associative array. It throws an an exception if the content is not valid JSON or if an HTTP error occurs (by default).
      https://symfony.com/doc/current/http_client.html#getting-the-response-content

  -
    question: >
      What is the purpose of the `HTTP_COOKIE` server parameter when simulating a request with `AbstractBrowser::request()` in Symfony's BrowserKit component?
    answers:
      - { value: 'To set a cookie for the simulated request.', correct: true }
      - { value: 'To retrieve cookies from the simulated response.', correct: false }
      - { value: 'To specify the cookie domain for the request.', correct: false }
      - { value: 'To enable cookie persistence across multiple requests.', correct: false }
    help: |
      The `serverParameters` argument of `AbstractBrowser::request()` can include `HTTP_COOKIE` to set cookies for the simulated request.
      https://symfony.com/doc/current/components/browser_kit.html#sending-requests

  -
    question: |
      Which of the following is the correct way to retrieve the HTTP method (e.g., 'GET', 'POST') of an incoming request using the Symfony `Request` object?
      ```php
      use Symfony\Component\HttpFoundation\Request;

      $request = Request::createFromGlobals();
      $method = /* ??? */;
      ```
    answers:
      - { value: '$request->getMethod();', correct: true }
      - { value: '$request->getHttpMethod();', correct: false }
      - { value: '$request->method();', correct: false }
      - { value: '$request->server->get(''REQUEST_METHOD'');', correct: true }
    help: |
      The `getMethod()` method returns the HTTP method of the request. Alternatively, the raw server parameter `REQUEST_METHOD` can be accessed.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#accessing-request-data

  -
    question: >
      What is the primary purpose of the `HttplugClient` in Symfony's HttpClient component?
    answers:
      - { value: 'To provide a PSR-18 (HTTP Client) and PSR-7 (HTTP Message) compatible client, allowing integration with libraries that rely on these PSRs.', correct: true }
      - { value: 'To provide a client that only supports HTTP/1.1.', correct: false }
      - { value: 'To offer a synchronous-only HTTP client implementation.', correct: false }
      - { value: 'To automatically convert all responses to PSR-7 `ResponseInterface` objects.', correct: false }
    help: |
      `HttplugClient` acts as a bridge, implementing PSR-18 `HttpClientInterface` and PSR-7 `RequestFactoryInterface`, `StreamFactoryInterface`, and `UriFactoryInterface`, making Symfony's HttpClient compatible with the wider PHP-HTTP ecosystem.
      https://symfony.com/doc/current/http_client.html#httplug-integration

  -
    question: |
      You are developing an API and want to ensure that a client's request body is properly consumed, especially for `POST` or `PUT` requests that send raw data (e.g., JSON, XML). Which method on the `Request` object should you use to access this raw content?
    answers:
      - { value: 'getContent()', correct: true }
      - { value: 'getPayload()->all()', correct: false }
      - { value: 'request->all()', correct: false }
      - { value: 'getBody()', correct: false }
    help: |
      The `getContent()` method returns the raw content of the request body, which is essential for processing non-form data.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-the-request-body

  -
    question: >
      Which HTTP status code indicates that the server successfully processed the request, but there is no content to send back in the response body?
    answers:
      - { value: '200 OK', correct: false }
      - { value: '201 Created', correct: false }
      - { value: '204 No Content', correct: true }
      - { value: '304 Not Modified', correct: false }
    help: |
      The 204 (No Content) status code indicates that the server successfully fulfilled the request and that there is no additional content to send in the response payload body.
      https://www.php.net/manual/en/function.http-response-code.php

  -
    question: |
      When using Symfony's HttpClient, what is the effect of setting the `throw` argument to `false` in methods like `getStatusCode()`, `getHeaders()`, `getContent()`, or `toArray()`?
    answers:
      - { value: 'It prevents an exception from being thrown on HTTP errors (4xx or 5xx), allowing you to handle errors manually.', correct: true }
      - { value: 'It makes the method call non-blocking.', correct: false }
      - { value: 'It disables logging of HTTP errors.', correct: false }
      - { value: 'It forces the client to retry the request on error.', correct: false }
    help: |
      By default, these methods throw an exception on HTTP errors. Setting `throw` to `false` suppresses this behavior, giving you explicit control over error handling.
      https://symfony.com/doc/current/http_client.html#handling-http-errors

  -
    question: |
      Which of the following methods on the `Symfony\Component\HttpFoundation\Request` object would you use to get an array of acceptable content types, ordered by descending quality?
    answers:
      - { value: 'getAcceptableContentTypes()', correct: true }
      - { value: 'getPreferredFormat()', correct: false }
      - { value: 'getMimeTypes()', correct: false }
      - { value: 'getAccept()', correct: false }
    help: |
      The `getAcceptableContentTypes()` method parses the `Accept` header and returns an array of accepted content types, ordered by quality.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: |
      You are debugging an HTTP request made with Symfony's HttpClient and want to inspect the raw request options that were sent. Which method on `MockResponse` provides this information?
    answers:
      - { value: 'getRequestOptions()', correct: true }
      - { value: 'getDebugInfo()', correct: false }
      - { value: 'getRawOptions()', correct: false }
      - { value: 'getSentOptions()', correct: false }
    help: |
      The `getRequestOptions()` method on `MockResponse` returns an array containing all the options (headers, body, query parameters, etc.) that were used for the simulated request.
      https://symfony.com/doc/current/http_client.html#inspecting-mocked-requests

  -
    question: >
      What is the purpose of the `HttpClientInterface::getInfo()` method?
    answers:
      - { value: 'To retrieve information about the request and response from the transport layer, such as redirect count, start time, or debug data.', correct: true }
      - { value: 'To get the HTTP status code and headers of the response.', correct: false }
      - { value: 'To access the raw request and response messages.', correct: false }
      - { value: 'To obtain performance metrics of the HTTP client itself.', correct: false }
    help: |
      The `getInfo()` method provides access to various low-level details from the underlying HTTP transport, such as connection time, total time, redirect information, and more.
      https://symfony.com/doc/current/http_client.html#getting-response-info

  -
    question: |
      Which of the following is the correct way to retrieve a server variable (e.g., `HTTP_HOST`) from a Symfony `Request` object?
      ```php
      use Symfony\Component\HttpFoundation\Request;

      $request = Request::createFromGlobals();
      $host = /* ??? */;
      ```
    answers:
      - { value: '$request->server->get(''HTTP_HOST'');', correct: true }
      - { value: '$request->get(''HTTP_HOST'');', correct: false }
      - { value: '$request->getServerParameter(''HTTP_HOST'');', correct: false }
      - { value: '$request->attributes->get(''HTTP_HOST'');', correct: false }
    help: |
      The `server` property of the `Request` object is a `ParameterBag` instance, which provides a `get()` method for retrieving server variables.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#accessing-request-data

  -
    question: >
      What is the primary purpose of the `Cookie` class in Symfony's HttpFoundation component?
    answers:
      - { value: 'To represent an HTTP cookie with its various attributes (name, value, expiration, path, domain, etc.).', correct: true }
      - { value: 'To manage session data on the server-side.', correct: false }
      - { value: 'To encrypt and decrypt cookie values.', correct: false }
      - { value: 'To store user preferences in the database.', correct: false }
    help: |
      The `Cookie` class is an object-oriented representation of an HTTP cookie, making it easier to create and manipulate cookies.
      https://symfony.com/doc/current/components/http_foundation.html#setting-cookies

  -
    question: |
      You want to override a globally configured HTTP header for a specific request made with Symfony's HttpClient. How would you do this?
      ```php
      use Symfony\Contracts\HttpClient\HttpClientInterface;

      class MyApiClient
      {
          public function __construct(private HttpClientInterface $client) {}

          public function fetchData(): array
          {
              $response = $this->client->request('GET', 'https://api.example.com/data', [
                  // ???
              ]);
              return $response->toArray();
          }
      }
      ```
    answers:
      - { value: '''headers'' => [''X-Custom-Header'' => ''specific-value'']', correct: true }
      - { value: '''override_headers'' => [''X-Custom-Header'' => ''specific-value'']', correct: false }
      - { value: '''options'' => [''headers'' => [''X-Custom-Header'' => ''specific-value'']]', correct: false }
      - { value: '''set_header'' => [''X-Custom-Header'' => ''specific-value'']', correct: false }
    help: |
      Headers defined at the request level using the `headers` option will override any globally defined default headers for that specific request.
      https://symfony.com/doc/current/http_client.html#overriding-default-request-options

  -
    question: >
      What is the primary function of the `HeaderUtils` class in Symfony's HttpFoundation component?
    answers:
      - { value: 'To provide utility methods for parsing, formatting, and manipulating HTTP header values.', correct: true }
      - { value: 'To manage the storage and retrieval of HTTP headers.', correct: false }
      - { value: 'To validate HTTP header syntax against RFC specifications.', correct: false }
      - { value: 'To convert HTTP headers to a standardized array format.', correct: false }
    help: |
      `HeaderUtils` provides static helper methods for common operations on HTTP header values, such as quoting, unquoting, combining, and parsing.
      https://symfony.com/doc/current/components/http_foundation.html#headerutils

  -
    question: |
      Which of the following is the correct Composer command to install Symfony's HTTP Client component?
    answers:
      - { value: 'composer require symfony/http-client', correct: true }
      - { value: 'composer install symfony/http-client', correct: false }
      - { value: 'composer add symfony/http-client', correct: false }
      - { value: 'symfony install http-client', correct: false }
    help: |
      The standard Composer command to add a package to your project is `composer require`.
      https://symfony.com/doc/current/http_client.html#installation

  -
    question: >
      When setting a cookie using `Symfony\Component\HttpFoundation\Cookie::create()`, what does the `httpOnly` parameter control?
    answers:
      - { value: 'If set to `true`, the cookie is inaccessible to client-side scripts (e.g., JavaScript), mitigating XSS attacks.', correct: true }
      - { value: 'If set to `true`, the cookie is only sent over HTTPS connections.', correct: false }
      - { value: 'If set to `true`, the cookie is only sent with HTTP GET requests.', correct: false }
      - { value: 'If set to `true`, the cookie is automatically deleted after the HTTP request completes.', correct: false }
    help: |
      The `httpOnly` flag, when true, prevents client-side scripts from accessing the cookie, enhancing security against XSS attacks.
      https://symfony.com/doc/current/components/http_foundation.html#setting-cookies

  -
    question: >
      What is the primary purpose of the `HttpClientInterface::toStream()` method?
    answers:
      - { value: 'To return the response content as a PHP stream resource, allowing for efficient processing of large responses without loading the entire content into memory.', correct: true }
      - { value: 'To convert the response body into a `StreamedResponse` object.', correct: false }
      - { value: 'To create a new stream for sending data to the server.', correct: false }
      - { value: 'To stream the response headers before the body.', correct: false }
    help: |
      The `toStream()` method returns the response body as a PHP stream resource, which is useful for handling very large responses efficiently.
      https://symfony.com/doc/current/http_client.html#getting-the-response-content

  -
    question: >
      Which HTTP status code indicates that the server is acting as a gateway or proxy and received an invalid response from an upstream server?
    answers:
      - { value: '500 Internal Server Error', correct: false }
      - { value: '502 Bad Gateway', correct: true }
      - { value: '503 Service Unavailable', correct: false }
      - { value: '504 Gateway Timeout', correct: false }
    help: |
      The 502 (Bad Gateway) status code indicates that the server, while acting as a gateway or proxy, received an invalid response from an inbound server it accessed while attempting to fulfill the request.
      https://www.php.net/manual/en/function.http-response-code.php

  -
    question: |
      When using Symfony's HttpClient, how can you apply HTTP Basic authentication for a specific request, overriding any global client configuration?
      ```php
      use Symfony\Contracts\HttpClient\HttpClientInterface;

      class MyApiClient
      {
          public function __construct(private HttpClientInterface $client) {}

          public function fetchProtectedData(): array
          {
              $response = $this->client->request('GET', 'https://api.example.com/protected', [
                  // ???
              ]);
              return $response->toArray();
          }
      }
      ```
    answers:
      - { value: '''auth_basic'' => [''username'', ''password'']', correct: true }
      - { value: '''auth'' => [''type'' => ''basic'', ''user'' => ''username'', ''pass'' => ''password'']', correct: false }
      - { value: '''headers'' => [''Authorization'' => ''Basic ' . base64_encode(''username:password'')]', correct: false }
      - { value: '''basic_auth'' => ''username:password''', correct: false }
    help: |
      The `auth_basic` option can be used per-request to specify HTTP Basic authentication credentials, overriding any default client settings.
      https://symfony.com/doc/current/http_client.html#authentication

  -
    question: >
      What is the primary role of the `AsyncResponse` class in Symfony's HttpClient?
    answers:
      - { value: 'To represent an HTTP response that is being received asynchronously, allowing non-blocking operations.', correct: true }
      - { value: 'To provide a synchronous wrapper around an asynchronous HTTP client.', correct: false }
      - { value: 'To handle server-sent events (SSE) from an HTTP stream.', correct: false }
      - { value: 'To manage concurrent HTTP requests and responses.', correct: false }
    help: |
      `AsyncResponse` is a specific implementation of `ResponseInterface` used when the underlying HTTP client transport supports asynchronous operations, meaning the `request()` call returns immediately without waiting for the full response.
      https://symfony.com/doc/current/http_client.html#asynchronous-requests

  -
    question: |
      Which of the following is the correct way to set the `s-maxage` directive of the `Cache-Control` header for shared caches on a Symfony `Response` object?
    answers:
      - { value: '$response->setSharedMaxAge(3600);', correct: true }
      - { value: '$response->setSMaxAge(3600);', correct: false }
      - { value: '$response->setCacheControl(''s-maxage=3600'');', correct: false }
      - { value: '$response->headers->set(''Cache-Control'', ''s-maxage=3600'');', correct: false }
    help: |
      The `setSharedMaxAge()` method sets the `s-maxage` directive, which is specific to shared caches.
      https://symfony.com/doc/current/components/http_foundation.html#response-cache-methods

  -
    question: >
      What is the purpose of the `partitioned` attribute for cookies, introduced in Symfony 7.3?
    answers:
      - { value: 'To indicate that the cookie is stored in a separate partition per top-level site, preventing cross-site tracking.', correct: true }
      - { value: 'To split large cookies into smaller, partitioned chunks for efficient transmission.', correct: false }
      - { value: 'To encrypt different parts of the cookie with separate keys.', correct: false }
      - { value: 'To specify that the cookie is only accessible from a specific subdomain.', correct: false }
    help: |
      The `Partitioned` attribute (part of CHIPS - Cookies Having Independent Partitioned State) ensures that cookies are partitioned by top-level site, preventing them from being used for cross-site tracking.
      https://symfony.com/doc/current/components/http_foundation.html#setting-cookies (referencing `Cookie::create` and `withPartitioned` which implies this functionality)

  -
    question: |
      You are developing a feature that involves Server-Sent Events (SSE) with Symfony's HttpClient. Which class helps you extract decoded JSON data from an SSE chunk?
    answers:
      - { value: 'Symfony\\Component\\HttpClient\\Chunk\\ServerSentEvent::getArrayData()', correct: true }
      - { value: 'Symfony\\Component\\HttpClient\\Chunk\\ServerSentEvent::getJsonData()', correct: false }
      - { value: 'Symfony\\Component\\HttpClient\\Chunk\\ServerSentEvent::toArray()', correct: false }
      - { value: 'Symfony\\Component\\HttpClient\\Chunk\\ServerSentEvent::getDataAsArray()', correct: false }
    help: |
      The `ServerSentEvent` chunk type provides `getArrayData()` to retrieve decoded JSON content when the SSE data is known to be in JSON format.
      https://symfony.com/doc/current/http_client.html#server-sent-events

  -
    question: >
      What is the primary role of a "front controller" in a web application architecture?
    answers:
      - { value: 'To handle all incoming requests through a single entry point, centralizing request processing.', correct: true }
      - { value: 'To manage database connections and queries.', correct: false }
      - { value: 'To render HTML templates and send them to the client.', correct: false }
      - { value: 'To define all application routes and their associated controllers.', correct: false }
    help: |
      A front controller is a design pattern where a single controller handles all requests for a website or web application. This centralizes common logic such as routing, security, and rendering.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#the-front-controller

  -
    question: |
      You need to send an HTTP request with a custom `X-API-Key` header using Symfony's HttpClient. How would you include this header in your request?
      ```php
      use Symfony\Contracts\HttpClient\HttpClientInterface;

      class MyApiClient
      {
          public function __construct(private HttpClientInterface $client) {}

          public function callApi(string $apiKey): array
          {
              $response = $this->client->request('GET', 'https://api.example.com/data', [
                  // ???
              ]);
              return $response->toArray();
          }
      }
      ```
    answers:
      - { value: '''headers'' => [''X-API-Key'' => $apiKey]', correct: true }
      - { value: '''header'' => [''X-API-Key'' => $apiKey]', correct: false }
      - { value: '''custom_headers'' => [''X-API-Key'' => $apiKey]', correct: false }
      - { value: '''options'' => [''X-API-Key'' => $apiKey]', correct: false }
    help: |
      The `headers` option is used to specify custom HTTP headers for a request.
      https://symfony.com/doc/current/http_client.html#request-options

  -
    question: >
      Which HTTP status code indicates that the server is currently unable to handle the request due to a temporary overload or maintenance, and suggests a `Retry-After` header?
    answers:
      - { value: '503 Service Unavailable', correct: true }
      - { value: '500 Internal Server Error', correct: false }
      - { value: '429 Too Many Requests', correct: false }
      - { value: '504 Gateway Timeout', correct: false }
    help: |
      The 503 (Service Unavailable) status code indicates that the server is not ready to handle the request. This is often accompanied by a `Retry-After` header indicating when the service might be available again.
      https://www.php.net/manual/en/function.http-response-code.php

  -
    question: |
      When constructing a `Symfony\Component\HttpFoundation\Request` object programmatically for testing, which method allows you to specify the URI, HTTP method, and parameters?
      ```php
      use Symfony\Component\HttpFoundation\Request;

      $request = Request::create(
          // ???
      );
      ```
    answers:
      - { value: '''/path'', ''GET'', [''param'' => ''value'']', correct: true }
      - { value: '''GET'', ''/path'', [''param'' => ''value'']', correct: false }
      - { value: 'uri: ''/path'', method: ''GET'', parameters: [''param'' => ''value'']', correct: false }
      - { value: '''/path'', [''param'' => ''value''], ''GET''', correct: false }
    help: |
      The `Request::create()` method's signature is `create(string $uri, string $method = 'GET', array $parameters = [], array $cookies = [], array $files = [], array $server = [], string $content = null)`.
      https://symfony.com/doc/current/components/http_foundation.html#creating-a-request

  -
    question: >
      What is the purpose of the `AsyncContext` object provided to the `$passthru` generator in `AsyncDecoratorTrait`?
    answers:
      - { value: 'To control the response stream, allowing actions like pausing, canceling, or modifying chunks.', correct: true }
      - { value: 'To store the full response body before processing.', correct: false }
      - { value: 'To provide access to the original request options.', correct: false }
      - { value: 'To manage concurrent requests within the decorator.', correct: false }
    help: |
      The `AsyncContext` object gives fine-grained control over the asynchronous response stream within a custom decorator.
      https://symfony.com/doc/current/http_client.html#_snippet_83 (APIDOC for AsyncContext)

  -
    question: >
      Which of the following HTTP status codes indicates that the request was well-formed but was unable to be followed due to semantic errors?
    answers:
      - { value: '400 Bad Request', correct: false }
      - { value: '422 Unprocessable Content', correct: true }
      - { value: '409 Conflict', correct: false }
      - { value: '415 Unsupported Media Type', correct: false }
    help: |
      The 422 (Unprocessable Content) status code indicates that the server understands the content type of the request entity, and the syntax of the request entity is correct, but was unable to process the contained instructions.
      https://www.php.net/manual/en/function.http-response-code.php

  -
    question: |
      When using `HttpClientInterface::stream()`, what does `ChunkInterface::isLast()` indicate?
    answers:
      - { value: 'It returns true if this is the last chunk of the response, meaning the full body has been received.', correct: true }
      - { value: 'It returns true if the stream has encountered an error.', correct: false }
      - { value: 'It means the response headers have just arrived.', correct: false }
      - { value: 'It indicates that the connection has been closed by the client.', correct: false }
    help: |
      `isLast()` returns true for the final chunk, signifying that the entire response body has been received.
      https://symfony.com/doc/current/http_client.html#streaming-responses

  -
    question: >
      What is the primary difference between a "private" and a "public" cache in HTTP caching?
    answers:
      - { value: 'A private cache is specific to a single user (e.g., browser cache), while a public cache can be shared among multiple users (e.g., proxy cache).', correct: true }
      - { value: 'A private cache stores encrypted data, while a public cache stores unencrypted data.', correct: false }
      - { value: 'A private cache is managed by the client, while a public cache is managed by the server.', correct: false }
      - { value: 'A private cache requires authentication, while a public cache does not.', correct: false }
    help: |
      Private caches (like a browser's cache) are for a single user. Public caches (like proxy servers or CDNs) can serve cached content to multiple users.
      https://symfony.com/doc/current/http_cache/expiration.html#cache-control-public-and-private

  -
    question: |
      You are building a Symfony application and need to process a large file uploaded via a `POST` request without loading the entire file into memory. Which method on the `Request` object would allow you to access the uploaded file as a stream resource?
    answers:
      - { value: 'The `UploadedFile` object retrieved via `$request->files->get()` provides a `openFile()` method to get a SplFileObject, which can be used as a stream.', correct: true }
      - { value: '$request->getContent()', correct: false }
      - { value: '$request->getStreamedBody()', correct: false }
      - { value: '$request->files->get(''file_name'')->toStream()', correct: false }
    help: |
      While `Request::getContent()` gets the raw request body, for uploaded files, you get an `UploadedFile` object via `$request->files->get()`. This object allows you to access the file content, including as a stream, without loading it entirely into memory.
      https://symfony.com/doc/current/components/http_foundation.html#uploaded-files

  -
    question: >
      Which of the following HTTP status codes indicates that the client should continue with the request?
    answers:
      - { value: '100 Continue', correct: true }
      - { value: '101 Switching Protocols', correct: false }
      - { value: '200 OK', correct: false }
      - { value: '300 Multiple Choices', correct: false }
    help: |
      The 100 (Continue) status code indicates that the initial part of a request has been received and has not yet been rejected by the server. The client should continue with the request.
      https://www.php.net/manual/en/function.http-response-code.php

  -
    question: |
      When using `HttpClientInterface::stream()`, what does `ChunkInterface::getContent()` return?
    answers:
      - { value: 'A piece of the response body as a string.', correct: true }
      - { value: 'The full response body as a string.', correct: false }
      - { value: 'The HTTP headers of the response.', correct: false }
      - { value: 'The status code of the response.', correct: false }
    help: |
      `getContent()` on a `ChunkInterface` object returns a segment of the response body that has been received.
      https://symfony.com/doc/current/http_client.html#streaming-responses

  -
    question: >
      What is the purpose of the `HttpClientInterface::wait()` method when dealing with asynchronous requests?
    answers:
      - { value: 'To block execution until one or more pending promises (responses) are resolved or a timeout occurs.', correct: true }
      - { value: 'To pause the execution of a single request for a specified duration.', correct: false }
      - { value: 'To send a batch of requests simultaneously without waiting for responses.', correct: false }
      - { value: 'To register a callback function that executes when a response is received.', correct: false }
    help: |
      The `wait()` method is used to explicitly wait for pending asynchronous requests to complete, either for a specific promise, for a maximum duration, or for all remaining promises.
      https://symfony.com/doc/current/http_client.html#asynchronous-requests