category: HTTP
questions:
  -
    question: >
      Which HTTP method is typically used to retrieve data from a server without causing any side effects?
    answers:
      - { value: 'POST', correct: false }
      - { value: 'GET', correct: true }
      - { value: 'PUT', correct: false }
      - { value: 'DELETE', correct: false }
    help: |
      The GET method is used to request data from a specified resource. It should only retrieve data and have no other effect on the data.
      https://github.com/symfony/symfony-docs/blob/7.3/introduction/http_fundamentals.rst#_snippet_0
  -
    question: >
      In Symfony, how do you access query parameters from an incoming HTTP request using the `Request` object?
    answers:
      - { value: '$request->params->get(''id'');', correct: false }
      - { value: '$request->query->get(''id'');', correct: true }
      - { value: '$request->attributes->get(''id'');', correct: false }
      - { value: '$request->request->get(''id'');', correct: false }
    help: |
      The `query` property of the `Request` object provides access to GET parameters.
      https://github.com/symfony/symfony-docs/blob/7.3/introduction/http_fundamentals.rst#_snippet_5
  -
    question: >
      Which of the following status codes indicates a successful HTTP request?
    answers:
      - { value: '404 Not Found', correct: false }
      - { value: '500 Internal Server Error', correct: false }
      - { value: '200 OK', correct: true }
      - { value: '301 Moved Permanently', correct: false }
    help: |
      The 200 OK status code indicates that the request has succeeded.
      https://github.com/symfony/symfony-docs/blob/7.3/introduction/http_fundamentals.rst#_snippet_2
  -
    question: >
      Which HTTP method is used to submit an entity to the specified resource, often causing a change in state or side effects on the server?
    answers:
      - { value: 'GET', correct: false }
      - { value: 'HEAD', correct: false }
      - { value: 'POST', correct: true }
      - { value: 'OPTIONS', correct: false }
    help: |
      The POST method is used to send data to a server to create/update a resource.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_10
  -
    question: >
      When using Symfony's `HttpClient`, how can you set custom HTTP headers for a specific request?
    answers:
      - { value: 'By calling `$client->setHeaders([...]);` before the request.', correct: false }
      - { value: 'By passing a `headers` array in the options argument of the `request()` method.', correct: true }
      - { value: 'Headers can only be configured globally for the client.', correct: false }
      - { value: 'By using `$response->addHeader(...);` after receiving the response.', correct: false }
    help: |
      Request-specific options, including headers, can be passed as the third argument to the `request()` method.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_10
  -
    question: >
      What is the default behavior of `HttpClient::request()` regarding execution flow in Symfony?
    answers:
      - { value: 'It blocks execution until the full response content is received.', correct: false }
      - { value: 'It returns immediately, and the response content is fetched lazily when accessed.', correct: true }
      - { value: 'It throws an exception if the response is not immediately available.', correct: false }
      - { value: 'It automatically retries the request until a successful response is received.', correct: false }
    help: |
      The `request()` method is asynchronous; code execution continues immediately and does not wait for the response to be fully received.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_10
  -
    question: >
      How do you retrieve the full content of an `ResponseInterface` object from Symfony's HTTP Client, blocking until the content is fully received?
    answers:
      - { value: '$response->getStream();', correct: false }
      - { value: '$response->getHeaders();', correct: false }
      - { value: '$response->getContent();', correct: true }
      - { value: '$response->toArray();', correct: false }
    help: |
      The `getContent()` method retrieves the full response body, blocking execution until it's entirely received.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_11
  -
    question: >
      You need to send multiple HTTP requests concurrently using Symfony's HTTP Client. What is the recommended approach?
    answers:
      - { value: 'Send each request sequentially and wait for its completion before sending the next.', correct: false }
      - { value: 'Initiate all requests in a loop, storing the `ResponseInterface` objects, then iterate over them in a separate loop to process content.', correct: true }
      - { value: 'Use `Promise::all()` with a custom promise library.', correct: false }
      - { value: 'Symfony HTTP Client does not support concurrent requests.', correct: false }
    help: |
      Requests can be sent concurrently by initiating them in one loop and then iterating through the `ResponseInterface` objects in a separate loop to read their content.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_50
  -
    question: >
      How can you configure a default `User-Agent` header for all requests made by the Symfony HTTP Client in `framework.yaml`?
    answers:
      - { value: |
          ```yaml
          # config/packages/framework.yaml
          framework:
              http_client:
                  default_options:
                      headers:
                          'User-Agent': 'My Fancy App'
          ```, correct: true }
      - { value: |
          ```yaml
          # config/packages/framework.yaml
          framework:
              http_client:
                  global_headers:
                      User-Agent: 'My Fancy App'
          ```, correct: false }
      - { value: |
          ```yaml
          # config/packages/framework.yaml
          framework:
              http_client:
                  options:
                      User-Agent: 'My Fancy App'
          ```, correct: false }
      - { value: 'Default headers can only be set programmatically.', correct: false }
    help: |
      Default headers are configured under `framework.http_client.default_options.headers` in the YAML configuration.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_16
  -
    question: >
      Which interface should you type-hint in your service constructor to inject Symfony's HTTP Client?
    answers:
      - { value: 'Symfony\\Component\\HttpClient\\HttpClient', correct: false }
      - { value: 'Psr\\Http\\Client\\ClientInterface', correct: false }
      - { value: 'Symfony\\Contracts\\HttpClient\\HttpClientInterface', correct: true }
      - { value: 'GuzzleHttp\\ClientInterface', correct: false }
    help: |
      Injecting `HttpClientInterface` ensures decoupling and adherence to Symfony's HTTP client abstraction.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_66
  -
    question: >
      When testing a service that uses `HttpClientInterface`, which class is commonly used to provide predefined or dynamically generated responses?
    answers:
      - { value: 'Symfony\\Component\\HttpClient\\TestClient', correct: false }
      - { value: 'Symfony\\Component\\HttpClient\\MockHttpClient', correct: true }
      - { value: 'Symfony\\Component\\HttpClient\\DummyClient', correct: false }
      - { value: 'Symfony\\Component\\HttpClient\\StubClient', correct: false }
    help: |
      `MockHttpClient` is an implementation of `HttpClientInterface` specifically designed for testing, allowing you to control responses.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_83
  -
    question: >
      Consider the following code snippet using `UriTemplateHttpClient`:
      ```php
      $client = new UriTemplateHttpClient();
      $client->request('GET', 'http://example.org/{resource}{?page}', [
          'vars' => [
              'resource' => 'users',
              'page' => 1,
          ],
      ]);
      ```
      What will be the final URL for this HTTP GET request?
    answers:
      - { value: 'http://example.org/users?page=1', correct: true }
      - { value: 'http://example.org/{resource}?page={page}', correct: false }
      - { value: 'http://example.org/users/1', correct: false }
      - { value: 'http://example.org/?resource=users&page=1', correct: false }
    help: |
      `UriTemplateHttpClient` expands the `vars` array into the URI template.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_36
  -
    question: >
      Which of the following methods are available on `Symfony\\Contracts\\HttpClient\\ResponseInterface` to retrieve information about the HTTP response?
    answers:
      - { value: '`getStatusCode()`', correct: true }
      - { value: '`getHeaders()`', correct: true }
      - { value: '`getReasonPhrase()`', correct: false }
      - { value: '`toArray()`', correct: true }
      - { value: '`getProtocolVersion()`', correct: false }
    help: |
      `getStatusCode()`, `getHeaders()`, and `toArray()` are standard methods on `ResponseInterface` for accessing response details.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_46
  -
    question: >
      When you call `HttpClient::create()` without specifying a client, what is the order of preference for the underlying HTTP client transport in Symfony?
    answers:
      - { value: 'NativeHttpClient, then CurlHttpClient, then AmpHttpClient.', correct: false }
      - { value: 'AmpHttpClient, then CurlHttpClient, then NativeHttpClient.', correct: false }
      - { value: 'CurlHttpClient, then AmpHttpClient, then NativeHttpClient.', correct: true }
      - { value: 'NativeHttpClient is always used by default.', correct: false }
    help: |
      `HttpClient::create()` prioritizes cURL, then falls back to AmpHttpClient, and finally to native PHP streams.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_42
  -
    question: >
      Which `MockResponse` method allows you to retrieve the HTTP method that was used in the simulated request?
    answers:
      - { value: '`getMethod()`', correct: false }
      - { value: '`getRequestMethod()`', correct: true }
      - { value: '`getSimulatedMethod()`', correct: false }
      - { value: '`getHttpMethod()`', correct: false }
    help: |
      The `getRequestMethod()` helper method on `MockResponse` returns the HTTP method of the simulated request.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_95
  -
    question: >
      How can you configure a `base_uri` and set/replace headers for an existing `HttpClientInterface` instance using `HttpOptions`?
    answers:
      - { value: |
          ```php
          $client = $client->withOptions(
              (new HttpOptions())
                  ->setBaseUri('https://...')
                  ->setHeaders(['header-name' => 'header-value'])
                  ->toArray()
          );
          ```, correct: true }
      - { value: |
          ```php
          $client->setBaseUri('https://...');
          $client->setHeaders(['header-name' => 'header-value']);
          ```, correct: false }
      - { value: |
          ```php
          $client = HttpOptions::create()
              ->setBaseUri('https://...')
              ->setHeaders(['header-name' => 'header-value']);
          ```, correct: false }
      - { value: 'It is not possible to modify client options after creation.', correct: false }
    help: |
      The `withOptions()` method allows modifying client settings using an `HttpOptions` object.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_4
  -
    question: >
      To mark a Symfony `Response` object as public and set its `max-age` to 600 seconds using a PHP attribute on a controller, which of the following is correct?
    answers:
      - { value: |
          ```php
          use Symfony\\Component\\HttpKernel\\Attribute\\Cache;

          #[Cache(private: false, maxage: 600)]
          public function index(): Response
          {
              // ...
          }
          ```, correct: false }
      - { value: |
          ```php
          use Symfony\\Component\\HttpKernel\\Attribute\\Cache;

          #[Cache(public: true, maxage: 600)]
          public function index(): Response
          {
              // ...
          }
          ```, correct: true }
      - { value: |
          ```php
          use Symfony\\Component\\HttpKernel\\Attribute\\Cache;

          #[Cache(shared: true, ttl: 600)]
          public function index(): Response
          {
              // ...
          }
          ```, correct: false }
      - { value: 'PHP attributes cannot be used for HTTP caching in Symfony.', correct: false }
    help: |
      The `#[Cache]` attribute with `public: true` and `maxage` is the correct way to configure caching via attributes.
      https://github.com/symfony/symfony-docs/blob/7.3/http_cache/expiration.rst#_snippet_0
  -
    question: >
      Which of the following methods on the `Response` object should you use to programmatically set the `Cache-Control` header to `public, max-age=3600`?
    answers:
      - { value: '$response->setCacheControl(''public, max-age=3600'');', correct: false }
      - { value: '$response->setPublic()->setMaxAge(3600);', correct: true }
      - { value: '$response->headers->set(''Cache-Control'', ''public, max-age=3600'');', correct: true }
      - { value: '$response->cache(public: true, max_age: 3600);', correct: false }
    help: |
      Both `setPublic()->setMaxAge()` and directly setting the `Cache-Control` header are valid ways to achieve this.
      https://github.com/symfony/symfony-docs/blob/7.3/http_cache/expiration.rst#_snippet_0
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_44
  -
    question: >
      How do you create a `Request` object in Symfony that populates its data from PHP's superglobal variables (`$_GET`, `$_POST`, `$_SERVER`, etc.)?
    answers:
      - { value: '`new Request();`', correct: false }
      - { value: '`Request::createFromGlobals();`', correct: true }
      - { value: '`Request::capture();`', correct: false }
      - { value: '`Request::getCurrent();`', correct: false }
    help: |
      `Request::createFromGlobals()` is the static factory method to create a Request object from the current global state.
      https://github.com/symfony/symfony-docs/blob/7.3/introduction/http_fundamentals.rst#_snippet_5
  -
    question: >
      When making an HTTP client request, how can you add query string parameters that will be automatically URL-encoded?
    answers:
      - { value: 'Append them directly to the URL string.', correct: false }
      - { value: 'Use the `query` option in the request options array.', correct: true }
      - { value: 'Pass them as the second argument to the `request()` method.', correct: false }
      - { value: 'Set them in the `headers` option with a `Query-String` key.', correct: false }
    help: |
      The `query` option in the request options array is used to specify query parameters, which are automatically URL-encoded.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_15
  -
    question: >
      Which of the following are valid ways to define the request body when making an HTTP client request using Symfony's `HttpClient`?
    answers:
      - { value: 'A regular string.', correct: true }
      - { value: 'An array of parameters (for form-urlencoded or multipart/form-data).', correct: true }
      - { value: 'A closure that generates the data.', correct: true }
      - { value: 'A PHP resource (e.g., a file handle).', correct: true }
      - { value: 'An object implementing `__toString()` method.', correct: false }
    help: |
      The `body` option supports various types for defining the request content, including strings, arrays, closures, and resources.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_18
  -
    question: >
      How do you apply HTTP Basic authentication for a *specific* request using Symfony's `HttpClient`, overriding any global configuration?
    answers:
      - { value: '`$client->request(''GET'', ''https://...'', [''auth'' => [''user'', ''pass'']]);`', correct: false }
      - { value: '`$client->request(''GET'', ''https://...'', [''auth_basic'' => [''the-username'', ''the-password'']]);`', correct: true }
      - { value: '`$client->setAuthBasic([''user'', ''pass''])->request(''GET'', ''https://...'');`', correct: false }
      - { value: 'HTTP Basic authentication can only be configured globally.', correct: false }
    help: |
      The `auth_basic` option can be provided in the request options to apply basic authentication for that specific request.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_13
  -
    question: >
      What is the primary purpose of `Symfony\\Component\\HttpFoundation\\StreamedResponse`?
    answers:
      - { value: 'To send large files by loading them entirely into memory before sending.', correct: false }
      - { value: 'To allow the HTTP response content to be streamed incrementally to the client.', correct: true }
      - { value: 'To automatically compress the response content for faster delivery.', correct: false }
      - { value: 'To handle server-sent events (SSE) only.', correct: false }
    help: |
      `StreamedResponse` is designed for sending content piece by piece, which is useful for large responses or long-running processes.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_54
  -
    question: >
      When streaming a large HTTP response using `HttpClientInterface::stream()`, how do you access individual pieces of the response body?
    answers:
      - { value: 'By calling `$chunk->getBody()` on each yielded chunk.', correct: false }
      - { value: 'By calling `$chunk->getContent()` on each yielded `ChunkInterface` object.', correct: true }
      - { value: 'The `stream()` method returns the full content directly.', correct: false }
      - { value: 'You must use `fread()` on the response stream resource.', correct: false }
    help: |
      The `ChunkInterface` object yielded by `stream()` provides the `getContent()` method to get a piece of the response body.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_47
  -
    question: >
      Which of the following are valid ways to cancel an ongoing HTTP request made with Symfony's `HttpClient`?
    answers:
      - { value: 'Calling `$response->cancel();` on the `ResponseInterface` object.', correct: true }
      - { value: 'Throwing an exception from an `on_progress` callback defined in the request options.', correct: true }
      - { value: 'Calling `$client->stopAllRequests();`', correct: false }
      - { value: 'It is not possible to cancel a request once it has started.', correct: false }
    help: |
      Requests can be cancelled either directly via `cancel()` or by throwing an exception within an `on_progress` callback.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_48
  -
    question: >
      How can you configure HTTP Bearer authentication globally for a scoped client named `example_api` in Symfony's `framework.yaml`?
    answers:
      - { value: |
          ```yaml
          framework:
              http_client:
                  scoped_clients:
                      example_api:
                          auth_token: the-bearer-token
          ```, correct: false }
      - { value: |
          ```yaml
          framework:
              http_client:
                  scoped_clients:
                      example_api:
                          auth_bearer: the-bearer-token
          ```, correct: true }
      - { value: |
          ```yaml
          framework:
              http_client:
                  scoped_clients:
                      example_api:
                          headers:
                              Authorization: 'Bearer the-bearer-token'
          ```, correct: true }
      - { value: 'Bearer authentication can only be set per-request.', correct: false }
    help: |
      Bearer authentication can be configured using `auth_bearer` or by manually setting the `Authorization` header.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_12
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#_snippet_52
  -
    question: >
      If you define a `Content-Type` header globally for your `HttpClient` and then override it for a specific request, which value will be used for that request?
    answers:
      - { value: 'The globally defined `Content-Type` header.', correct: false }
      - { value: 'The `Content-Type` header defined for the specific request.', correct: true }
      - { value: 'Both headers will be sent, leading to an error.', correct: false }
      - { value: 'The `Content-Type` header will be ignored.', correct: false }
    help: |
      Request-level headers take precedence over globally defined default headers.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_17
  -
    question: >
      What is the purpose of `HarFileResponseFactory` in Symfony's HTTP Client testing utilities?
    answers:
      - { value: 'To record outgoing HTTP requests into a HAR file.', correct: false }
      - { value: 'To generate mock responses for `MockHttpClient` based on a HAR (HTTP Archive) file.', correct: true }
      - { value: 'To convert HAR files into PHP arrays for easy processing.', correct: false }
      - { value: 'To validate the syntax of HAR files.', correct: false }
    help: |
      `HarFileResponseFactory` allows creating mock responses from recorded HTTP interactions stored in HAR files, useful for realistic testing.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_100
  -
    question: >
      What is the correct order of operations in the basic lifecycle of Symfony's `HttpKernel`?
    answers:
      - { value: '`handle()` -> `send()` -> `terminate()`', correct: true }
      - { value: '`send()` -> `handle()` -> `terminate()`', correct: false }
      - { value: '`handle()` -> `terminate()` -> `send()`', correct: false }
      - { value: '`initialize()` -> `handle()` -> `send()`', correct: false }
    help: |
      The kernel first handles the request, then sends the response, and finally terminates the process.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_kernel.rst#_snippet_3
  -
    question: >
      When creating a `MockHttpClient` with a single callback, what arguments does the callback function receive?
    answers:
      - { value: '`$request`, `$response`', correct: false }
      - { value: '`$method`, `$url`, `$options`', correct: true }
      - { value: '`$client`, `$request`', correct: false }
      - { value: '`$uri`, `$headers`, `$body`', correct: false }
    help: |
      The callback function for `MockHttpClient` receives the HTTP method, URL, and request options.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_84
  -
    question: >
      How can you programmatically create a `Request` object to simulate an HTTP request for testing purposes, specifying the URI, method, and parameters?
    answers:
      - { value: '`Request::createFromGlobals(''/'', ''GET'', [''name'' => ''Fabien'']);`', correct: false }
      - { value: '`new Request(''/'', ''GET'', [''name'' => ''Fabien'']);`', correct: false }
      - { value: '`Request::create(''/hello-world'', ''GET'', [''name'' => ''Fabien'']);`', correct: true }
      - { value: '`Request::simulate(''/hello-world'', ''GET'', [''name'' => ''Fabien'']);`', correct: false }
    help: |
      `Request::create()` allows you to construct a `Request` object with specific details for simulation.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_14
  -
    question: >
      To retrieve the raw content of an HTTP request body (e.g., for XML or JSON payloads), which method of the `Request` object should you use?
    answers:
      - { value: '`$request->getPayload()->all();`', correct: false }
      - { value: '`$request->request->all();`', correct: false }
      - { value: '`$request->getContent();`', correct: true }
      - { value: '`$request->getBody();`', correct: false }
    help: |
      `Request::getContent()` returns the raw content of the request body as a string.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_10
  -
    question: >
      What is the result of `HeaderUtils::combine([['foo', 'abc'], ['bar']])`?
    answers:
      - { value: '`[''foo'' => [''abc''], ''bar'' => []]`', correct: false }
      - { value: '`[''foo'' => 'abc', 'bar' => true]`', correct: true }
      - { value: '`[''foo'' => 'abc', 'bar' => null]`', correct: false }
      - { value: '`[[''foo'', ''abc''], [''bar'']]`', correct: false }
    help: |
      `HeaderUtils::combine()` transforms an array of key-value pairs into an associative array, treating single-element arrays as boolean true.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_21
  -
    question: >
      Which `HeaderUtils` method would you use to convert an associative array of header values into a formatted HTTP header string, e.g., `'foo=abc, bar, baz="a b c"'`?
    answers:
      - { value: '`HeaderUtils::join();`', correct: false }
      - { value: '`HeaderUtils::format();`', correct: false }
      - { value: '`HeaderUtils::toString();`', correct: true }
      - { value: '`HeaderUtils::build();`', correct: false }
    help: |
      `HeaderUtils::toString()` is used to serialize an associative array into a header string.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_21
  -
    question: >
      Which `Request` object methods can be used to retrieve the list of accepted languages and content types, ordered by descending quality, from the client's HTTP request?
    answers:
      - { value: '`getPreferredLanguage()`, `getPreferredContentType()`', correct: false }
      - { value: '`getLanguages()`, `getAcceptableContentTypes()`', correct: true }
      - { value: '`getAcceptLanguage()`, `getAccept()`', correct: false }
      - { value: '`getLocale()`, `getFormat()`', correct: false }
    help: |
      `getLanguages()` and `getAcceptableContentTypes()` parse the respective `Accept-*` headers and return ordered lists.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_22
  -
    question: >
      To force caches to revalidate the content of an HTTP response with the origin server immediately, which method should be called on the `Response` object?
    answers:
      - { value: '`$response->setNoCache();`', correct: false }
      - { value: '`$response->setExpires(new DateTime(''now''));`', correct: false }
      - { value: '`$response->expire();`', correct: true }
      - { value: '`$response->setPrivate();`', correct: false }
    help: |
      The `expire()` method explicitly marks the response as stale, prompting revalidation.
      https://github.com/symfony/symfony-docs/blob/7.3/http_cache.rst#_snippet_3
  -
    question: >
      When using `HttplugClient` for asynchronous requests, how do you ensure all pending promises are resolved?
    answers:
      - { value: 'Call `$httpClient->resolveAll();`', correct: false }
      - { value: 'Call `$httpClient->wait();`', correct: true }
      - { value: 'Promises resolve automatically; no explicit action is needed.', correct: false }
      - { value: 'Iterate over each promise and call its `resolve()` method.', correct: false }
    help: |
      The `wait()` method on `HttplugClient` blocks until all pending promises are resolved.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_75
  -
    question: >
      How can you configure Symfony's HTTP client to use a custom mock response factory for testing within the framework configuration (e.g., `framework.php`)?
    answers:
      - { value: |
          ```php
          return static function (FrameworkConfig $framework): void {
              $framework->httpClient()
                  ->mockResponseFactory(MockClientCallback::class)
              ;
          };
          ```, correct: true }
      - { value: |
          ```php
          return static function (FrameworkConfig $framework): void {
              $framework->httpClient()
                  ->setMockFactory(MockClientCallback::class)
              ;
          };
          ```, correct: false }
      - { value: 'Mock response factories can only be set programmatically, not via configuration.', correct: false }
      - { value: 'By defining a service alias for `HttpClientInterface` to your mock factory.', correct: false }
    help: |
      The `mockResponseFactory()` method in the framework configuration is used to specify a custom factory for mock responses.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_91
  -
    question: >
      What is the Composer command to install the Symfony HTTP Client component?
    answers:
      - { value: '`composer install symfony/http-client`', correct: false }
      - { value: '`composer require symfony/http-client`', correct: true }
      - { value: '`composer add symfony/http-client`', correct: false }
      - { value: '`composer update symfony/http-client`', correct: false }
    help: |
      The `composer require` command is used to add new packages to a project.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_0
  -
    question: >
      When creating a `ScopingHttpClient` outside of the Symfony framework, how can you define a base URI and associated options for a client that matches specific URLs using regular expressions?
    answers:
      - { value: |
          ```php
          $client = new ScopingHttpClient($client, [
              'https://api\\.github\\.com/' => [
                  'headers' => [
                      'Accept' => 'application/vnd.github.v3+json',
                  ],
              ],
          ]);
          ```, correct: true }
      - { value: |
          ```php
          $client = ScopingHttpClient::create([
              'https://api.github.com/' => [
                  'base_uri' => 'https://api.github.com/',
              ],
          ]);
          ```, correct: false }
      - { value: '`ScopingHttpClient` only supports base URIs, not regex matching.', correct: false }
      - { value: 'By using the `addScope()` method after instantiation.', correct: false }
    help: |
      `ScopingHttpClient` allows defining options for URLs matching regular expressions as keys in the options array.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_9
  -
    question: >
      How do you explicitly force Symfony's HTTP Client to use HTTP/2 for HTTP URLs in the `framework.yaml` configuration?
    answers:
      - { value: |
          ```yaml
          framework:
              http_client:
                  default_options:
                      version: '2.0'
          ```, correct: false }
      - { value: |
          ```yaml
          framework:
              http_client:
                  default_options:
                      http_version: '2.0'
          ```, correct: true }
      - { value: |
          ```yaml
          framework:
              http_client:
                  default_options:
                      protocol: 'HTTP/2'
          ```, correct: false }
      - { value: 'HTTP/2 is automatically negotiated; it cannot be forced.', correct: false }
    help: |
      The `http_version` option under `default_options` is used to specify the HTTP protocol version.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_44
  -
    question: >
      When uploading data with a streamed body (e.g., from a file resource) using `HttpClient`, what method can you use on a `FormDataPart` to ensure the `Content-Length` header is correctly set, potentially avoiding HTTP 411 errors?
    answers:
      - { value: '`$formData->getLength();`', correct: false }
      - { value: '`$formData->bodyToString();`', correct: true }
      - { value: '`$formData->getStreamSize();`', correct: false }
      - { value: '`$formData->prepareBody();`', correct: false }
    help: |
      `bodyToString()` converts the streamed body to a string, allowing the client to calculate and set the `Content-Length` header. Be aware of memory implications for large files.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_25
  -
    question: >
      When using `Symfony\\Component\\BrowserKit\\AbstractBrowser::request()`, how can you set a cookie for the simulated request?
    answers:
      - { value: 'By passing a `Cookie` object or a formatted cookie string in the `serverParameters` array with the key `HTTP_COOKIE`.', correct: true }
      - { value: 'By using `$client->setCookie(...);` before making the request.', correct: false }
      - { value: 'Cookies are automatically managed by `BrowserKit` and cannot be set manually.', correct: false }
      - { value: 'By adding a `Cookie` header in the `headers` option.', correct: false }
    help: |
      The `HTTP_COOKIE` key in `serverParameters` allows setting cookies for the request.
      https://github.com/symfony/symfony-docs/blob/7.3/components/browser_kit.rst#_snippet_24
  -
    question: >
      To set a new cookie on a Symfony `Response` object, which method of `ResponseHeaderBag` should you use?
    answers:
      - { value: '`$response->headers->addCookie(...);`', correct: false }
      - { value: '`$response->headers->setCookie(...);`', correct: true }
      - { value: '`$response->setCookie(...);`', correct: false }
      - { value: '`$response->cookies->set(...);`', correct: false }
    help: |
      The `setCookie()` method on the `ResponseHeaderBag` (accessed via `$response->headers`) is used to add a cookie.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_44
  -
    question: >
      Which static method of `Symfony\\Component\\HttpFoundation\\Cookie` is used to create a new `Cookie` object with specified attributes like name, value, expiration, and flags?
    answers:
      - { value: '`Cookie::new(...);`', correct: false }
      - { value: '`Cookie::make(...);`', correct: false }
      - { value: '`Cookie::create(...);`', correct: true }
      - { value: '`Cookie::build(...);`', correct: false }
    help: |
      `Cookie::create()` is the factory method for instantiating a `Cookie` object.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_44
  -
    question: >
      How can you retrieve an array of languages accepted by the client, ordered by descending quality, from a Symfony `Request` object?
    answers:
      - { value: '`$request->getPreferredLanguage();`', correct: false }
      - { value: '`$request->getLanguages();`', correct: true }
      - { value: '`$request->headers->get(''Accept-Language'');`', correct: false }
      - { value: '`$request->getLocale();`', correct: false }
    help: |
      The `getLanguages()` method parses the `Accept-Language` header and returns an ordered list of accepted languages.
      https://github.com/symfony/symfony-docs/blob/7.3/introduction/http_fundamentals.rst#_snippet_5
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_22
  -
    question: >
      Which class in `Symfony\\Component\\HttpFoundation` is specifically designed to represent an HTTP response that redirects the client to another URL?
    answers:
      - { value: '`Symfony\\Component\\HttpFoundation\\RedirectResponse`', correct: true }
      - { value: '`Symfony\\Component\\HttpFoundation\\Response` with a 3xx status code', correct: true }
      - { value: '`Symfony\\Component\\HttpFoundation\\ForwardResponse`', correct: false }
      - { value: '`Symfony\\Component\\HttpFoundation\\UrlResponse`', correct: false }
    help: |
      `RedirectResponse` is a specialized `Response` class for handling HTTP redirects. A standard `Response` object with a 3xx status code also works.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_44
  -
    question: >
      What is the purpose of the `isNotModified()` method on a Symfony `Response` object?
    answers:
      - { value: 'To check if the response content has changed since the last request.', correct: false }
      - { value: 'To determine if the client''s request includes conditional headers (ETag, Last-Modified) that match the response, and if so, set the status to 304 Not Modified.', correct: true }
      - { value: 'To prevent the response from being cached by the client.', correct: false }
      - { value: 'To force the client to revalidate the content with the server.', correct: false }
    help: |
      `isNotModified()` checks conditional request headers and, if a match is found, sets the response status to 304 Not Modified.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_44
  -
    question: >
      What does the `Vary` HTTP response header indicate to caching mechanisms?
    answers:
      - { value: 'That the response content will never change.', correct: false }
      - { value: 'That the cached response should be considered different if the specified request headers change.', correct: true }
      - { value: 'The maximum age for which the response can be cached.', correct: false }
      - { value: 'That the response should only be cached by private caches.', correct: false }
    help: |
      The `Vary` header tells caches that the response is dependent on the values of the specified request headers.
      https://github.com/symfony/symfony-docs/blob/7.3/http_cache/cache_vary.rst#_snippet_0
  -
    question: >
      Which HTTP status code indicates that the requested resource has been permanently moved to a new URI?
    answers:
      - { value: '200 OK', correct: false }
      - { value: '301 Moved Permanently', correct: true }
      - { value: '302 Found', correct: false }
      - { value: '404 Not Found', correct: false }
    help: |
      The 301 status code is used for permanent redirects.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/301 (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      What is the purpose of the `User-Agent` HTTP request header?
    answers:
      - { value: 'To specify the preferred language of the client.', correct: false }
      - { value: 'To indicate the type of content the client can accept.', correct: false }
      - { value: 'To provide information about the client application, operating system, and browser.', correct: true }
      - { value: 'To specify the authentication credentials for the request.', correct: false }
    help: |
      The `User-Agent` header identifies the client making the request.
      https://github.com/symfony/symfony-docs/blob/7.3/introduction/http_fundamentals.rst#_snippet_0
  -
    question: >
      Which HTTP method is idempotent and safe, meaning it can be repeated multiple times without changing the server's state and without side effects?
    answers:
      - { value: 'POST', correct: false }
      - { value: 'PUT', correct: false }
      - { value: 'DELETE', correct: false }
      - { value: 'GET', correct: true }
    help: |
      GET requests are considered safe and idempotent.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      What is the primary difference between a "private" and a "public" cache in HTTP caching?
    answers:
      - { value: 'Private caches are for authenticated users, public caches are for anonymous users.', correct: false }
      - { value: 'Private caches store responses for a single user, while public caches store responses that can be shared among multiple users.', correct: true }
      - { value: 'Private caches are located on the client side, public caches are on the server side.', correct: false }
      - { value: 'Private caches require authentication, public caches do not.', correct: false }
    help: |
      A public cache can store responses for multiple users, whereas a private cache is specific to a single user.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#public (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      Which HTTP header is used by the client to indicate the media types (e.g., `text/html`, `application/json`) it prefers to receive in the response?
    answers:
      - { value: '`Content-Type`', correct: false }
      - { value: '`Accept`', correct: true }
      - { value: '`Content-Encoding`', correct: false }
      - { value: '`Transfer-Encoding`', correct: false }
    help: |
      The `Accept` header is used for content negotiation to specify preferred media types.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      When a Symfony `Response` is sent using `$response->send()`, what does the `flush` parameter (defaulting to `true`) control?
    answers:
      - { value: 'Whether the response content is compressed before sending.', correct: false }
      - { value: 'Whether PHP output buffers are flushed immediately.', correct: false }
      - { value: 'Whether functions like `fastcgi_finish_request()` or `litespeed_finish_request()` are called to send headers and content early.', correct: true }
      - { value: 'Whether the response is saved to a file on the server.', correct: false }
    help: |
      The `flush` parameter in `Response::send()` controls whether PHP-specific functions for early flushing (like `fastcgi_finish_request()`) are invoked.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_44
  -
    question: >
      Which HTTP status code indicates that the server successfully processed the request, but there is no content to send back in the response body?
    answers:
      - { value: '200 OK', correct: false }
      - { value: '201 Created', correct: false }
      - { value: '204 No Content', correct: true }
      - { value: '400 Bad Request', correct: false }
    help: |
      The 204 No Content status code indicates that the server has successfully fulfilled the request and that there is no content to send in the response payload body.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/204 (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      What is the primary benefit of using `HttpClientInterface` for making HTTP requests in Symfony applications, rather than `file_get_contents()` or `cURL` directly?
    answers:
      - { value: 'It automatically handles all possible HTTP errors without requiring explicit checks.', correct: false }
      - { value: 'It provides a unified, testable, and extensible abstraction over different HTTP transports (cURL, streams, Amp).', correct: true }
      - { value: 'It is significantly faster than any other method for all types of requests.', correct: false }
      - { value: 'It only supports JSON APIs, simplifying data handling.', correct: false }
    help: |
      `HttpClientInterface` offers a flexible and testable way to make HTTP requests, abstracting away the underlying transport.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_66
  -
    question: >
      Which of the following HTTP status codes indicates that the client should authenticate itself to get the requested response?
    answers:
      - { value: '401 Unauthorized', correct: true }
      - { value: '403 Forbidden', correct: false }
      - { value: '407 Proxy Authentication Required', correct: false }
      - { value: '400 Bad Request', correct: false }
    help: |
      The 401 Unauthorized status code means that the client request has not been completed because it lacks valid authentication credentials for the requested resource.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/401 (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      In Symfony, when you need to handle an incoming HTTP request and generate a response without relying on global variables (`$_GET`, `$_POST`), which component provides the necessary classes?
    answers:
      - { value: 'Symfony\\Component\\Routing', correct: false }
      - { value: 'Symfony\\Component\\HttpFoundation', correct: true }
      - { value: 'Symfony\\Component\\HttpKernel', correct: false }
      - { value: 'Symfony\\Component\\EventDispatcher', correct: false }
    help: |
      The HttpFoundation component provides an object-oriented layer for the HTTP specification, including `Request` and `Response` classes.
      https://github.com/symfony/symfony-docs/blob/7.3/create_framework/http_foundation.rst#_snippet_5
  -
    question: >
      Which HTTP method is used to request that the target resource perform a loop-back of the received request message?
    answers:
      - { value: 'TRACE', correct: true }
      - { value: 'CONNECT', correct: false }
      - { value: 'OPTIONS', correct: false }
      - { value: 'HEAD', correct: false }
    help: |
      The TRACE method performs a message loop-back test along the path to the target resource.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/TRACE (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      What is the purpose of the `Content-Type` HTTP header in a response?
    answers:
      - { value: 'To indicate the language of the content.', correct: false }
      - { value: 'To specify the character encoding of the content.', correct: false }
      - { value: 'To indicate the media type of the resource returned to the client (e.g., `text/html`, `application/json`).', correct: true }
      - { value: 'To suggest a filename for the downloaded content.', correct: false }
    help: |
      The `Content-Type` header specifies the media type of the resource.
      https://github.com/symfony/symfony-docs/blob/7.3/introduction/http_fundamentals.rst#_snippet_2
  -
    question: >
      Which HTTP status code indicates that the request could not be understood by the server due to malformed syntax?
    answers:
      - { value: '400 Bad Request', correct: true }
      - { value: '403 Forbidden', correct: false }
      - { value: '404 Not Found', correct: false }
      - { value: '405 Method Not Allowed', correct: false }
    help: |
      The 400 Bad Request status code indicates that the server cannot or will not process the request due to something that is perceived to be a client error.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400 (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      What is the primary role of the `ETag` HTTP header in caching?
    answers:
      - { value: 'To specify the expiration date of the cached resource.', correct: false }
      - { value: 'To provide a unique identifier for a specific version of a resource, allowing for efficient conditional requests.', correct: true }
      - { value: 'To indicate whether the resource is publicly cacheable.', correct: false }
      - { value: 'To specify the maximum age a resource can be cached.', correct: false }
    help: |
      The `ETag` header is an identifier for a specific version of a resource, used for conditional requests to determine if a cached resource is still fresh.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      Which HTTP method is used to apply partial modifications to a resource?
    answers:
      - { value: 'PUT', correct: false }
      - { value: 'POST', correct: false }
      - { value: 'PATCH', correct: true }
      - { value: 'UPDATE', correct: false }
    help: |
      The PATCH method is used to apply partial modifications to a resource.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PATCH (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      What is the purpose of the `Set-Cookie` HTTP response header?
    answers:
      - { value: 'To retrieve cookies from the client.', correct: false }
      - { value: 'To send cookies from the server to the client, instructing the client to store them.', correct: true }
      - { value: 'To clear all cookies from the client.', correct: false }
      - { value: 'To encrypt cookie values before sending them.', correct: false }
    help: |
      The `Set-Cookie` header is used by the server to send a cookie to the user agent, which then stores it and sends it back with subsequent requests.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      Which HTTP status code indicates that the server understands the content type of the request entity, but was unable to process the contained instructions?
    answers:
      - { value: '422 Unprocessable Content', correct: true }
      - { value: '400 Bad Request', correct: false }
      - { value: '406 Not Acceptable', correct: false }
      - { value: '415 Unsupported Media Type', correct: false }
    help: |
      The 422 Unprocessable Content (WebDAV) status code means the server understands the content type of the request entity, and the syntax of the request entity is correct, but was unable to process the contained instructions.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/422 (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      What is the role of the `Last-Modified` HTTP header in caching?
    answers:
      - { value: 'It indicates the date and time the resource was last modified, used for conditional GET requests.', correct: true }
      - { value: 'It specifies the date and time the cached response will expire.', correct: false }
      - { value: 'It defines how long a resource can be cached by a proxy.', correct: false }
      - { value: 'It is used to force a revalidation of the resource.', correct: false }
    help: |
      The `Last-Modified` header provides a timestamp for the last modification of the resource, enabling conditional requests with `If-Modified-Since`.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Last-Modified (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      Which HTTP status code indicates that the request method is known by the server but has been disabled and cannot be used for the target resource?
    answers:
      - { value: '403 Forbidden', correct: false }
      - { value: '405 Method Not Allowed', correct: true }
      - { value: '501 Not Implemented', correct: false }
      - { value: '404 Not Found', correct: false }
    help: |
      The 405 Method Not Allowed status code indicates that the request method is known by the server but has been disabled and cannot be used for the target resource.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/405 (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      What is the purpose of the `Accept-Encoding` HTTP request header?
    answers:
      - { value: 'To specify the character sets the client prefers.', correct: false }
      - { value: 'To indicate the compression algorithms the client can understand (e.g., `gzip`, `deflate`).', correct: true }
      - { value: 'To specify the language of the content the client prefers.', correct: false }
      - { value: 'To indicate the media types the client can accept.', correct: false }
    help: |
      The `Accept-Encoding` header informs the server about the content encodings (compression) that the client can handle.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Encoding (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      Which HTTP status code indicates that the server, while acting as a gateway or proxy, received an invalid response from an upstream server?
    answers:
      - { value: '500 Internal Server Error', correct: false }
      - { value: '502 Bad Gateway', correct: true }
      - { value: '503 Service Unavailable', correct: false }
      - { value: '504 Gateway Timeout', correct: false }
    help: |
      The 502 Bad Gateway status code indicates that the server, while acting as a gateway or proxy, received an invalid response from an upstream server.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/502 (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      In HTTP, what is the purpose of the `OPTIONS` method?
    answers:
      - { value: 'To request information about the communication options available for the target resource.', correct: true }
      - { value: 'To establish a tunnel to the server.', correct: false }
      - { value: 'To retrieve a representation of the target resource.', correct: false }
      - { value: 'To test the network connection to the server.', correct: false }
    help: |
      The `OPTIONS` method is used to describe the communication options for the target resource.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/OPTIONS (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      Which HTTP status code indicates that the requested resource is available only through a proxy?
    answers:
      - { value: '407 Proxy Authentication Required', correct: true }
      - { value: '401 Unauthorized', correct: false }
      - { value: '403 Forbidden', correct: false }
      - { value: '511 Network Authentication Required', correct: false }
    help: |
      The 407 Proxy Authentication Required status code indicates that the client must first authenticate itself with the proxy.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/407 (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      What is the primary function of the `Location` HTTP response header?
    answers:
      - { value: 'To specify the geographical location of the server.', correct: false }
      - { value: 'To indicate the URL to which the client should be redirected.', correct: true }
      - { value: 'To provide the current URL of the requested resource.', correct: false }
      - { value: 'To specify the client''s current location.', correct: false }
    help: |
      The `Location` header is used in conjunction with 3xx (redirection) status codes to provide the new URL.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Location (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      Which HTTP status code indicates that the server is currently unable to handle the request due to a temporary overload or scheduled maintenance?
    answers:
      - { value: '500 Internal Server Error', correct: false }
      - { value: '503 Service Unavailable', correct: true }
      - { value: '504 Gateway Timeout', correct: false }
      - { value: '429 Too Many Requests', correct: false }
    help: |
      The 503 Service Unavailable status code indicates that the server is not ready to handle the request.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503 (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      What is the purpose of the `If-None-Match` HTTP request header in caching?
    answers:
      - { value: 'To provide a list of ETags that the client already has cached.', correct: true }
      - { value: 'To request a new ETag from the server.', correct: false }
      - { value: 'To force the server to ignore its cache.', correct: false }
      - { value: 'To specify the maximum age for a cached resource.', correct: false }
    help: |
      `If-None-Match` is used with an `ETag` to make a conditional request, asking the server to send the resource only if its ETag does not match any of the provided ones.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-None-Match (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      Which HTTP status code indicates that the client is sending too many requests in a given amount of time ("rate limiting")?
    answers:
      - { value: '403 Forbidden', correct: false }
      - { value: '429 Too Many Requests', correct: true }
      - { value: '503 Service Unavailable', correct: false }
      - { value: '408 Request Timeout', correct: false }
    help: |
      The 429 Too Many Requests status code indicates that the user has sent too many requests in a given amount of time.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429 (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      What is the purpose of the `Connection: keep-alive` HTTP header?
    answers:
      - { value: 'To indicate that the client wants to maintain a persistent connection with the server for multiple requests.', correct: true }
      - { value: 'To specify that the connection should be closed after the current request.', correct: false }
      - { value: 'To request a secure (HTTPS) connection.', correct: false }
      - { value: 'To indicate that the server should keep the response in its cache.', correct: false }
    help: |
      `Connection: keep-alive` signals the client's desire to reuse the same TCP connection for subsequent HTTP requests, improving performance.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Connection (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      Which HTTP status code indicates that the server does not recognize the request method, or it lacks the ability to fulfill the request?
    answers:
      - { value: '405 Method Not Allowed', correct: false }
      - { value: '501 Not Implemented', correct: true }
      - { value: '400 Bad Request', correct: false }
      - { value: '500 Internal Server Error', correct: false }
    help: |
      The 501 Not Implemented status code means the server does not support the functionality required to fulfill the request.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/501 (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      What is the primary difference between HTTP and HTTPS?
    answers:
      - { value: 'HTTP uses TCP, while HTTPS uses UDP.', correct: false }
      - { value: 'HTTPS encrypts the communication between the client and server using SSL/TLS, while HTTP does not.', correct: true }
      - { value: 'HTTP is for web browsers, HTTPS is for APIs.', correct: false }
      - { value: 'HTTPS is faster than HTTP.', correct: false }
    help: |
      HTTPS is the secure version of HTTP, using SSL/TLS to encrypt data in transit.
      https://developer.mozilla.org/en-US/docs/Glossary/HTTPS (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      Which HTTP status code indicates that the request has been accepted for processing, but the processing has not yet been completed?
    answers:
      - { value: '200 OK', correct: false }
      - { value: '201 Created', correct: false }
      - { value: '202 Accepted', correct: true }
      - { value: '204 No Content', correct: false }
    help: |
      The 202 Accepted status code indicates that the request has been accepted for processing, but the processing has not been completed.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/202 (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      What is the purpose of the `Referer` (sic) HTTP request header?
    answers:
      - { value: 'To indicate the URL of the page that linked to the current request.', correct: true }
      - { value: 'To specify the client''s preferred language.', correct: false }
      - { value: 'To provide authentication credentials.', correct: false }
      - { value: 'To indicate the type of content the client expects.', correct: false }
    help: |
      The `Referer` header contains the address of the previous web page from which a link to the currently requested page was followed.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      Which HTTP status code indicates that the server successfully created a new resource as a result of the request?
    answers:
      - { value: '200 OK', correct: false }
      - { value: '201 Created', correct: true }
      - { value: '202 Accepted', correct: false }
      - { value: '204 No Content', correct: false }
    help: |
      The 201 Created status code indicates that the request has been fulfilled and resulted in one or more new resources being created.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/201 (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      What is the primary role of the `Host` HTTP request header?
    answers:
      - { value: 'To specify the port number of the server.', correct: false }
      - { value: 'To indicate the domain name of the server (for virtual hosting).', correct: true }
      - { value: 'To specify the IP address of the client.', correct: false }
      - { value: 'To identify the specific resource being requested on the server.', correct: false }
    help: |
      The `Host` header specifies the domain name of the server (and optionally the port number) to which the request is being sent. This is crucial for virtual hosting.
      https://github.com/symfony/symfony-docs/blob/7.3/introduction/http_fundamentals.rst#_snippet_0
  -
    question: >
      Which HTTP status code indicates that the client does not have access rights to the content, i.e., it is unauthorized, so the server is refusing to give the requested resource?
    answers:
      - { value: '401 Unauthorized', correct: false }
      - { value: '403 Forbidden', correct: true }
      - { value: '404 Not Found', correct: false }
      - { value: '407 Proxy Authentication Required', correct: false }
    help: |
      The 403 Forbidden status code means that the client does not have access rights to the content.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403 (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      What is the purpose of the `If-Modified-Since` HTTP request header in caching?
    answers:
      - { value: 'To specify a date after which the resource should be considered modified.', correct: false }
      - { value: 'To request the resource only if it has been modified since the specified date and time.', correct: true }
      - { value: 'To provide the last modification date of the client''s cached copy.', correct: false }
      - { value: 'To force the server to send a fresh copy of the resource.', correct: false }
    help: |
      `If-Modified-Since` is a conditional request header that asks the server to send the resource only if it has been modified after the given date.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Modified-Since (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      Which HTTP status code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request?
    answers:
      - { value: '400 Bad Request', correct: false }
      - { value: '404 Not Found', correct: false }
      - { value: '500 Internal Server Error', correct: true }
      - { value: '503 Service Unavailable', correct: false }
    help: |
      The 500 Internal Server Error status code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500 (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      What is the purpose of the `Expires` HTTP response header in caching?
    answers:
      - { value: 'To specify the maximum age for which a resource can be cached.', correct: false }
      - { value: 'To provide a date/time after which the response is considered stale.', correct: true }
      - { value: 'To indicate whether the resource is publicly cacheable.', correct: false }
      - { value: 'To specify a unique identifier for the resource version.', correct: false }
    help: |
      The `Expires` header provides a date/time after which the response should be considered stale.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expires (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      Which HTTP status code indicates that the server, while acting as a gateway or proxy, did not receive a timely response from an upstream server?
    answers:
      - { value: '502 Bad Gateway', correct: false }
      - { value: '503 Service Unavailable', correct: false }
      - { value: '504 Gateway Timeout', correct: true }
      - { value: '408 Request Timeout', correct: false }
    help: |
      The 504 Gateway Timeout status code indicates that the server, while acting as a gateway or proxy, did not receive a timely response from an upstream server.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/504 (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      What is the purpose of the `Cookie` HTTP request header?
    answers:
      - { value: 'To send cookies from the client to the server that were previously set by the server.', correct: true }
      - { value: 'To instruct the server to set a new cookie.', correct: false }
      - { value: 'To clear cookies from the client.', correct: false }
      - { value: 'To specify the client''s preferred language.', correct: false }
    help: |
      The `Cookie` header is sent by the client to the server, containing cookies that the server previously sent to the client.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cookie (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      Which HTTP status code indicates that the resource corresponding to the request URI is no longer available at the server and no forwarding address is known?
    answers:
      - { value: '404 Not Found', correct: false }
      - { value: '410 Gone', correct: true }
      - { value: '301 Moved Permanently', correct: false }
      - { value: '403 Forbidden', correct: false }
    help: |
      The 410 Gone status code indicates that the target resource is no longer available at the origin server and that this condition is likely to be permanent.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/410 (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      What is the primary difference between `max-age` and `s-maxage` directives in the `Cache-Control` header?
    answers:
      - { value: '`max-age` applies to shared caches, `s-maxage` applies to private caches.', correct: false }
      - { value: '`max-age` applies to both shared and private caches, `s-maxage` applies only to shared caches and overrides `max-age` for them.', correct: true }
      - { value: '`max-age` is for HTTP/1.0, `s-maxage` is for HTTP/1.1.', correct: false }
      - { value: '`max-age` defines the absolute expiration, `s-maxage` defines the revalidation interval.', correct: false }
    help: |
      `max-age` applies to all caches, while `s-maxage` specifically applies to shared (proxy) caches and takes precedence over `max-age` for them.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#max-age (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      Which HTTP status code indicates that the server successfully processed the request, and is returning information that might be from a third-party or local copy, rather than the original source?
    answers:
      - { value: '200 OK', correct: false }
      - { value: '203 Non-Authoritative Information', correct: true }
      - { value: '206 Partial Content', correct: false }
      - { value: '304 Not Modified', correct: false }
    help: |
      The 203 Non-Authoritative Information status code indicates that the request was successful, but the enclosed payload has been modified from that of the origin server's 200 (OK) response by a transforming proxy.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/203 (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      What is the purpose of the `Range` HTTP request header?
    answers:
      - { value: 'To specify the maximum size of the response the client can handle.', correct: false }
      - { value: 'To request only a portion (a range of bytes) of a resource from the server.', correct: true }
      - { value: 'To indicate the acceptable range of HTTP status codes.', correct: false }
      - { value: 'To specify the time range for which the resource is valid.', correct: false }
    help: |
      The `Range` header is used to request only part of a resource from the server.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Range (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      Which HTTP status code indicates that the request has not been applied because it lacks valid authentication credentials for the target resource?
    answers:
      - { value: '401 Unauthorized', correct: true }
      - { value: '403 Forbidden', correct: false }
      - { value: '407 Proxy Authentication Required', correct: false }
      - { value: '419 Authentication Timeout', correct: false }
    help: |
      The 401 Unauthorized status code means that the client request has not been completed because it lacks valid authentication credentials for the requested resource.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/401 (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      What is the purpose of the `Accept-Charset` HTTP request header?
    answers:
      - { value: 'To indicate the character encodings the client prefers to receive in the response.', correct: true }
      - { value: 'To specify the language of the content.', correct: false }
      - { value: 'To indicate the type of content the client can accept.', correct: false }
      - { value: 'To specify the maximum length of the response body.', correct: false }
    help: |
      The `Accept-Charset` header indicates which character sets are acceptable for the response.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Charset (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      Which HTTP status code indicates that the server cannot find the requested resource?
    answers:
      - { value: '400 Bad Request', correct: false }
      - { value: '401 Unauthorized', correct: false }
      - { value: '404 Not Found', correct: true }
      - { value: '500 Internal Server Error', correct: false }
    help: |
      The 404 Not Found status code indicates that the server cannot find the requested resource.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404 (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      What is the purpose of the `Cache-Control: no-store` directive?
    answers:
      - { value: 'To prevent any cache from storing any part of the client''s request or the server''s response.', correct: true }
      - { value: 'To indicate that the cached response must be revalidated with the origin server before use.', correct: false }
      - { value: 'To specify that the response should only be cached by private caches.', correct: false }
      - { value: 'To set the maximum age for which a resource can be cached.', correct: false }
    help: |
      The `no-store` directive ensures that the entire exchange (request and response) is not stored in any cache.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#no-store (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      Which HTTP status code indicates that the client should switch to a different protocol, as specified in the `Upgrade` header?
    answers:
      - { value: '100 Continue', correct: false }
      - { value: '101 Switching Protocols', correct: true }
      - { value: '200 OK', correct: false }
      - { value: '300 Multiple Choices', correct: false }
    help: |
      The 101 Switching Protocols status code indicates that the server is switching protocols as requested by the client.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/101 (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      What is the purpose of the `Content-Encoding` HTTP response header?
    answers:
      - { value: 'To specify the media type of the resource.', correct: false }
      - { value: 'To indicate the compression algorithm used on the response body (e.g., `gzip`, `deflate`).', correct: true }
      - { value: 'To specify the character set of the content.', correct: false }
      - { value: 'To indicate the language of the content.', correct: false }
    help: |
      The `Content-Encoding` header indicates the encoding (compression) applied to the message body.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      Which HTTP status code indicates that the request could not be completed due to a conflict with the current state of the target resource?
    answers:
      - { value: '409 Conflict', correct: true }
      - { value: '403 Forbidden', correct: false }
      - { value: '412 Precondition Failed', correct: false }
      - { value: '423 Locked', correct: false }
    help: |
      The 409 Conflict status code indicates that the request could not be completed due to a conflict with the current state of the target resource.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/409 (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      What is the purpose of the `X-Forwarded-For` HTTP header?
    answers:
      - { value: 'To indicate the original IP address of the client that connected to a proxy or load balancer.', correct: true }
      - { value: 'To specify the proxy server''s IP address.', correct: false }
      - { value: 'To indicate the final destination IP address of the request.', correct: false }
      - { value: 'To provide a list of all proxies the request has traversed.', correct: false }
    help: |
      `X-Forwarded-For` is a de facto standard header for identifying the originating IP address of a client connecting to a web server through an HTTP proxy or load balancer.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      Which HTTP status code indicates that the server is refusing to fulfill the request because the entity body is larger than the server is willing or able to process?
    answers:
      - { value: '413 Payload Too Large', correct: true }
      - { value: '400 Bad Request', correct: false }
      - { value: '411 Length Required', correct: false }
      - { value: '414 URI Too Long', correct: false }
    help: |
      The 413 Payload Too Large status code indicates that the server is refusing to process a request because the request payload is larger than the server is willing or able to process.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/413 (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      What is the purpose of the `If-Match` HTTP request header in conditional requests?
    answers:
      - { value: 'To request the resource only if its ETag does NOT match any of the provided ones.', correct: false }
      - { value: 'To request the resource only if its ETag matches one of the provided ones.', correct: true }
      - { value: 'To provide a new ETag for the resource.', correct: false }
      - { value: 'To specify the preferred ETag for the response.', correct: false }
    help: |
      `If-Match` is used with an `ETag` to make a conditional request, asking the server to send the resource only if its ETag matches one of the provided ones.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Match (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      Which HTTP status code indicates that the server understands the content type of the request entity, but the entity itself is unprocessable because of semantic errors?
    answers:
      - { value: '422 Unprocessable Content', correct: true }
      - { value: '400 Bad Request', correct: false }
      - { value: '406 Not Acceptable', correct: false }
      - { value: '415 Unsupported Media Type', correct: false }
    help: |
      The 422 Unprocessable Content (WebDAV) status code means the server understands the content type of the request entity, and the syntax of the request entity is correct, but was unable to process the contained instructions.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/422 (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      What is the purpose of the `Cache-Control: no-cache` directive?
    answers:
      - { value: 'To prevent any cache from storing the response.', correct: false }
      - { value: 'To indicate that the cached response must be revalidated with the origin server before use.', correct: true }
      - { value: 'To specify that the response should only be cached by private caches.', correct: false }
      - { value: 'To set the maximum age for which a resource can be cached.', correct: false }
    help: |
      The `no-cache` directive means that the cached response must be revalidated with the origin server before it can be used.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#no-cache (Common knowledge, not directly in provided snippets, but fundamental HTTP)
  -
    question: >
      Which HTTP status code indicates that the client needs to upgrade to a different protocol, as specified in the `Upgrade` header?
    answers:
      - { value: '426 Upgrade Required', correct: true }
      - { value: '101 Switching Protocols', correct: false }
      - { value: '307 Temporary Redirect', correct: false }
      - { value: '505 HTTP Version Not Supported', correct: false }
    help: |
      The 426 Upgrade Required status code indicates that the client should switch to a different protocol, as specified in the `Upgrade` header.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/426 (Common knowledge, not directly in provided snippets, but fundamental HTTP)