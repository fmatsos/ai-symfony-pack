category: HTTP
questions:
  - question: What is the primary purpose of the
      `Symfony\Component\HttpFoundation\Request` class?
    answers:
      - value: To represent an incoming HTTP request in an object-oriented way.
        correct: true
      - value: To send HTTP requests to external APIs.
        correct: false
      - value: To define routing rules for an application.
        correct: false
      - value: To manage database connections.
        correct: false
    help: The `Symfony\Component\HttpFoundation\Request` class abstracts away PHP's
      superglobal variables (`$_GET`, `$_POST`, `$_SERVER`, etc.) and provides
      an object-oriented interface to access request data.
  - question: Which HTTP status code indicates a successful request where a new
      resource has been created?
    answers:
      - value: 200 OK
        correct: false
      - value: 201 Created
        correct: true
      - value: 204 No Content
        correct: false
      - value: 301 Moved Permanently
        correct: false
    help: The 201 Created status code indicates that the request has been fulfilled
      and has resulted in one or more new resources being created.
  - question: How can you retrieve a GET parameter named 'search' from a `Request`
      object in Symfony?
    answers:
      - value: $request->query->get('search')
        correct: true
      - value: $request->get('search')
        correct: false
      - value: $request->request->get('search')
        correct: false
      - value: $_GET['search']
        correct: false
    help: The `query` property of the `Request` object provides access to GET
      parameters.
  - question: Which of the following is the correct way to set the content and
      status code for a `Response` object in Symfony?
    answers:
      - value: $response->setContent('Hello')->setStatusCode(200);
        correct: true
      - value: $response->content = 'Hello'; $response->status = 200;
        correct: false
      - value: $response->addContent('Hello', 200);
        correct: false
      - value: $response->body('Hello')->status(200);
        correct: false
    help: The `setContent()` and `setStatusCode()` methods are used to configure the
      response.
  - question: What is the primary purpose of the HTTP `GET` method?
    answers:
      - value: To retrieve a resource from the server.
        correct: true
      - value: To create a new resource on the server.
        correct: false
      - value: To update an existing resource on the server.
        correct: false
      - value: To delete a resource from the server.
        correct: false
    help: The GET method is used to request data from a specified resource. It
      should only retrieve data and have no other effect on the data.
  - question: How can you access a cookie named 'PHPSESSID' from a `Request` object?
    answers:
      - value: $request->cookies->get('PHPSESSID')
        correct: true
      - value: $request->getCookie('PHPSESSID')
        correct: false
      - value: $_COOKIE['PHPSESSID']
        correct: false
      - value: $request->headers->get('Cookie')
        correct: false
    help: The `cookies` property of the `Request` object provides access to cookie
      values.
  - question: Which Symfony component provides an object-oriented way to interact
      with HTTP requests and responses?
    answers:
      - value: HttpFoundation
        correct: true
      - value: Routing
        correct: false
      - value: Security
        correct: false
      - value: Form
        correct: false
    help: The HttpFoundation component defines an object-oriented layer for the HTTP
      specification, replacing the raw PHP superglobals.
  - question: What does the HTTP status code `404 Not Found` signify?
    answers:
      - value: The server encountered an unexpected condition that prevented it from
          fulfilling the request.
        correct: false
      - value: The requested resource could not be found on the server.
        correct: true
      - value: The request was valid, but the server is refusing to respond.
        correct: false
      - value: The client is not authorized to access the resource.
        correct: false
    help: The 404 Not Found error message is a Hypertext Transfer Protocol (HTTP)
      standard response code, indicating that the server could not find the
      requested resource.
  - question: To retrieve the HTTP method (e.g., 'GET', 'POST') of the current
      request, which `Request` method should you use?
    answers:
      - value: $request->getMethod()
        correct: true
      - value: $request->getHttpMethod()
        correct: false
      - value: $request->method()
        correct: false
      - value: $request->server->get('REQUEST_METHOD')
        correct: false
    help: The `getMethod()` method returns the HTTP method of the request as an
      uppercase string.
  - question: Which of the following is used to send the HTTP headers and content of
      a `Response` object to the client?
    answers:
      - value: $response->send()
        correct: true
      - value: $response->flush()
        correct: false
      - value: $response->output()
        correct: false
      - value: echo $response;
        correct: false
    help: The `send()` method prints the HTTP headers followed by the content.
  - question: Which HTTP method is typically used for submitting forms that create
      new resources on the server?
    answers:
      - value: GET
        correct: false
      - value: POST
        correct: true
      - value: PUT
        correct: false
      - value: DELETE
        correct: false
    help: The POST method is used to send data to a server to create/update a
      resource. It is often used when submitting a form or sending data to be
      processed.
  - question: What is the purpose of the `Vary` HTTP header in caching?
    answers:
      - value: It specifies which request headers the cached response depends on.
        correct: true
      - value: It indicates the maximum age a cached response is considered fresh.
        correct: false
      - value: It forces the client to revalidate the cached response with the server.
        correct: false
      - value: It defines the content types that the server can send.
        correct: false
    help: "The `Vary` header tells caching mechanisms that the server response
      varies depending on the value of the specified request header(s). For
      example, `Vary: Accept-Encoding` means the response might be different
      based on the client's accepted encoding."
  - question: Which Symfony component is recommended for making HTTP requests to
      external APIs?
    answers:
      - value: HttpClient
        correct: true
      - value: DomCrawler
        correct: false
      - value: Yaml
        correct: false
      - value: Mailer
        correct: false
    help: The Symfony HttpClient component provides a powerful and flexible way to
      make HTTP requests.
  - question: What does the HTTP status code `204 No Content` indicate?
    answers:
      - value: The request was successful, and the server returned no content.
        correct: true
      - value: The request was successful, but the content is too large to be returned.
        correct: false
      - value: The server is temporarily unavailable.
        correct: false
      - value: The request was invalid.
        correct: false
    help: The 204 No Content status code indicates that the server successfully
      processed the request and is not returning any content.
  - question: Given a `Request` object, how would you check if the current
      connection is secure (HTTPS)?
    answers:
      - value: $request->isSecure()
        correct: true
      - value: $request->isHttps()
        correct: false
      - value: $request->getScheme() === 'https'
        correct: false
      - value: $_SERVER['HTTPS'] === 'on'
        correct: false
    help: The `isSecure()` method of the `Request` object checks if the user is
      connecting via a secure connection (HTTPS).
  - question: Which of the following HTTP methods are considered idempotent?
    answers:
      - value: GET
        correct: true
      - value: PUT
        correct: true
      - value: DELETE
        correct: true
      - value: POST
        correct: false
      - value: PATCH
        correct: false
    help: An idempotent HTTP method is one that can be called multiple times without
      different results. GET, PUT, and DELETE are typically idempotent, while
      POST and PATCH are not.
  - question: What is the purpose of `Request::createFromGlobals()`?
    answers:
      - value: To create a `Request` object from PHP's superglobal variables (`$_GET`,
          `$_POST`, etc.).
        correct: true
      - value: To create a new empty `Request` object.
        correct: false
      - value: To send the current request to another server.
        correct: false
      - value: To simulate a request for testing purposes.
        correct: false
    help: The static method `createFromGlobals()` is used to populate a `Request`
      object with data from the current PHP environment's superglobal variables.
  - question: When configuring the Symfony HttpClient, which option should you use
      to specify the maximum number of redirects to follow?
    answers:
      - value: "`max_redirects`"
        correct: true
      - value: "`follow_redirects`"
        correct: false
      - value: "`redirect_limit`"
        correct: false
      - value: "`allow_redirects`"
        correct: false
    help: The `max_redirects` option in the HttpClient configuration controls how
      many redirects the client will follow before giving up.
  - question: Which HTTP method is used to partially update an existing resource?
    answers:
      - value: PUT
        correct: false
      - value: PATCH
        correct: true
      - value: POST
        correct: false
      - value: UPDATE
        correct: false
    help: The PATCH method is used to apply partial modifications to a resource.
      PUT, on the other hand, is used to replace a resource entirely.
  - question: How can you retrieve the value of an HTTP header, e.g.,
      'Content-Type', from a `Request` object?
    answers:
      - value: $request->headers->get('Content-Type')
        correct: true
      - value: $request->getHeader('Content-Type')
        correct: false
      - value: $request->server->get('HTTP_CONTENT_TYPE')
        correct: false
      - value: $request->headers['Content-Type']
        correct: false
    help: The `headers` property of the `Request` object provides access to HTTP
      headers, with normalized, lowercase keys.
  - question: What is the default HTTP client transport used by Symfony's
      `HttpClient::create()` if cURL and Amp are not available?
    answers:
      - value: NativeHttpClient (PHP streams)
        correct: true
      - value: GuzzleHttpClient
        correct: false
      - value: SocketHttpClient
        correct: false
      - value: StreamHttpClient
        correct: false
    help: Symfony's `HttpClient::create()` method prioritizes `CurlHttpClient`, then
      `AmpHttpClient`, and finally falls back to `NativeHttpClient` (PHP
      streams).
  - question: Which HTTP status code indicates that the client needs to authenticate
      to get the requested response?
    answers:
      - value: 401 Unauthorized
        correct: true
      - value: 403 Forbidden
        correct: false
      - value: 407 Proxy Authentication Required
        correct: false
      - value: 400 Bad Request
        correct: false
    help: The 401 Unauthorized status code means that the client must authenticate
      itself to get the requested response.
  - question: How can you enable HTTP/2 for the Symfony HTTP client in `framework.yaml`?
    answers:
      - value: "Set `http_version: '2.0'` under
          `framework.http_client.default_options`."
        correct: true
      - value: "Set `protocol: 'HTTP/2'` under `framework.http_client`."
        correct: false
      - value: "Set `version: 2` under `framework.http_client.options`."
        correct: false
      - value: HTTP/2 is enabled by default and cannot be configured.
        correct: false
    help: To configure HTTP/2 for the Symfony HTTP client, you set the
      `http_version` option to `'2.0'` in your framework configuration.
  - question: When using `HttpClientInterface`, how do you retrieve the response
      body as a PHP array, assuming the content is JSON?
    answers:
      - value: $response->toArray()
        correct: true
      - value: $response->getContent(true)
        correct: false
      - value: json_decode($response->getContent(), true)
        correct: false
      - value: $response->json()
        correct: false
    help: The `toArray()` method of `ResponseInterface` automatically decodes JSON
      content into a PHP array.
  - question: Which of the following HTTP methods is considered safe (i.e., it does
      not alter the state of the server)?
    answers:
      - value: GET
        correct: true
      - value: POST
        correct: false
      - value: PUT
        correct: false
      - value: DELETE
        correct: false
    help: A safe HTTP method is one that does not change the state of the server.
      GET and HEAD are considered safe methods.
  - question: How can you retrieve an uploaded file from a `Request` object, given
      the input field name 'document'?
    answers:
      - value: $request->files->get('document')
        correct: true
      - value: $request->getFile('document')
        correct: false
      - value: $_FILES['document']
        correct: false
      - value: $request->payload->get('document')
        correct: false
    help: The `files` property of the `Request` object provides access to uploaded
      files as `UploadedFile` instances.
  - question: What is the purpose of `Symfony\Component\HttpClient\MockHttpClient`?
    answers:
      - value: To simulate HTTP requests and responses for testing purposes.
        correct: true
      - value: To send real HTTP requests in a test environment.
        correct: false
      - value: To cache HTTP responses in a test environment.
        correct: false
      - value: To monitor network traffic during tests.
        correct: false
    help: "`MockHttpClient` allows you to define predefined responses or callbacks
      to simulate HTTP interactions without making actual network calls, which
      is essential for fast and reliable tests."
  - question: Which HTTP status code indicates a successful request, but with no
      content to return?
    answers:
      - value: 200 OK
        correct: false
      - value: 204 No Content
        correct: true
      - value: 202 Accepted
        correct: false
      - value: 304 Not Modified
        correct: false
    help: The 204 No Content status code is used when the server has successfully
      fulfilled the request and there is no additional content to send in the
      response payload body.
  - question: How can you specify default headers for all requests made by a Symfony
      HTTP client instance in `framework.yaml`?
    answers:
      - value: Under `framework.http_client.default_options.headers`.
        correct: true
      - value: Under `framework.http_client.global_headers`.
        correct: false
      - value: Using `HttpClient::create(['headers' => [...]]);`
        correct: false
      - value: In the `services.yaml` file for the `HttpClientInterface` service.
        correct: false
    help: Default headers for the HttpClient are configured under
      `default_options.headers` in the framework configuration.
  - question: What is the purpose of the `HttpKernelInterface` in Symfony?
    answers:
      - value: To define the contract for handling an HTTP `Request` and returning an
          HTTP `Response`.
        correct: true
      - value: To manage HTTP sessions and cookies.
        correct: false
      - value: To provide a layer for HTTP caching.
        correct: false
      - value: To handle HTTP routing and URL matching.
        correct: false
    help: The `HttpKernelInterface` is the core interface that defines how Symfony
      applications process an incoming HTTP request and generate an HTTP
      response.
  - question: Which HTTP status code indicates that the request could not be
      understood by the server due to malformed syntax?
    answers:
      - value: 400 Bad Request
        correct: true
      - value: 405 Method Not Allowed
        correct: false
      - value: 500 Internal Server Error
        correct: false
      - value: 406 Not Acceptable
        correct: false
    help: The 400 Bad Request status code indicates that the server cannot or will
      not process the request due to something that is perceived to be a client
      error (e.g., malformed request syntax, invalid request message framing, or
      deceptive request routing).
  - question: When performing concurrent requests with Symfony HttpClient, how does
      the component manage the fetching of resources?
    answers:
      - value: By leveraging the lazy nature of response objects and iterating over them
          later.
        correct: true
      - value: By using a separate thread for each request.
        correct: false
      - value: By requiring explicit `await` calls for each response.
        correct: false
      - value: By creating a new client instance for each concurrent request.
        correct: false
    help: Symfony HttpClient's responses are lazy, meaning the actual network
      request is only initiated when you try to access the response's content or
      headers. This allows for concurrent fetching when iterating over a
      collection of response objects.
  - question: What is the purpose of the `Accept-Language` header in an HTTP request?
    answers:
      - value: To indicate the preferred natural languages for the content of the
          response.
        correct: true
      - value: To specify the character encoding of the request body.
        correct: false
      - value: To declare the content types that the client can process.
        correct: false
      - value: To set the language of the client's operating system.
        correct: false
    help: The `Accept-Language` header is used by HTTP clients to tell the server
      which languages they prefer for the response. Symfony's
      `Request::getLanguages()` method uses this header.
  - question: How can you access POST parameters from a `Request` object in Symfony,
      specifically the 'username' field?
    answers:
      - value: $request->getPayload()->get('username')
        correct: true
      - value: $request->request->get('username')
        correct: true
      - value: $request->post->get('username')
        correct: false
      - value: $_POST['username']
        correct: false
    help: Both `$request->getPayload()->get()` and `$request->request->get()` can be
      used to access POST parameters. `getPayload()` is a more modern approach
      that also handles JSON/XML bodies.
  - question: When using `MockHttpClient`, how can you inspect the HTTP method of a
      request that was made against the mock client?
    answers:
      - value: $mockResponse->getRequestMethod()
        correct: true
      - value: $mockResponse->getMethod()
        correct: false
      - value: $mockResponse->getInfo('method')
        correct: false
      - value: $mockResponse->getSentMethod()
        correct: false
    help: The `MockResponse` object provides `getRequestMethod()`,
      `getRequestUrl()`, and `getRequestOptions()` to inspect the details of the
      request that triggered it.
  - question: Which HTTP status code indicates that the server understands the
      content type of the request entity, and the syntax of the request entity
      is correct, but it was unable to process the contained instructions?
    answers:
      - value: 422 Unprocessable Entity
        correct: true
      - value: 400 Bad Request
        correct: false
      - value: 406 Not Acceptable
        correct: false
      - value: 409 Conflict
        correct: false
    help: The 422 Unprocessable Entity (WebDAV) status code means the server
      understands the content type of the request entity, and the syntax of the
      request entity is correct, but it was unable to process the contained
      instructions.
  - question: What is the purpose of the `on_progress` callback option in Symfony's
      HttpClient?
    answers:
      - value: To monitor the progress of a request and potentially cancel it.
        correct: true
      - value: To log every byte transferred during a request.
        correct: false
      - value: To modify the request headers dynamically.
        correct: false
      - value: To transform the response content before it's returned.
        correct: false
    help: The `on_progress` callback is invoked periodically during a request,
      allowing you to monitor download/upload progress and even cancel the
      request by throwing an exception.
  - question: Which interface should you type-hint against when injecting the
      Symfony HTTP client into a service?
    answers:
      - value: HttpClientInterface
        correct: true
      - value: ClientInterface
        correct: false
      - value: RequestClientInterface
        correct: false
      - value: GuzzleClientInterface
        correct: false
    help: For autowiring the Symfony HTTP client, you should type-hint against
      `Symfony\Contracts\HttpClient\HttpClientInterface`.
  - question: What does the HTTP status code `301 Moved Permanently` indicate?
    answers:
      - value: The requested resource has been permanently moved to a new URI.
        correct: true
      - value: The requested resource is temporarily available at a different URI.
        correct: false
      - value: The client should repeat the request with a different method.
        correct: false
      - value: The server is redirecting to a cached version of the resource.
        correct: false
    help: The 301 Moved Permanently status code indicates that the resource has been
      assigned a new permanent URI and any future references to this resource
      should use one of the returned URIs.
  - question: How can you configure a 'scoped' HTTP client in Symfony to apply
      specific headers only to requests matching a certain base URI?
    answers:
      - value: By defining a `scoped_clients` entry in `framework.yaml` with `base_uri`
          and `headers`.
        correct: true
      - value: By passing a `base_uri` option directly to `HttpClient::create()`.
        correct: false
      - value: By using the `withOptions()` method on the client for each request.
        correct: false
      - value: Scoped clients are not supported in Symfony's HttpClient.
        correct: false
    help: Symfony allows you to define named 'scoped' clients in your configuration
      (`framework.yaml`) that apply specific options (like `base_uri` and
      `headers`) to requests matching a defined scope.
  - question: Which method of the `ResponseInterface` allows you to retrieve
      information from the transport layer, such as `start_time` or `debug`
      logs?
    answers:
      - value: getInfo()
        correct: true
      - value: getTransportInfo()
        correct: false
      - value: getDebugInfo()
        correct: false
      - value: getMetadata()
        correct: false
    help: The `getInfo()` method provides access to various details about the
      request and response from the underlying transport layer.
  - question: What is the primary benefit of using `CachingHttpClient`?
    answers:
      - value: It reduces network requests by serving responses from a local cache.
        correct: true
      - value: It automatically compresses response bodies.
        correct: false
      - value: It encrypts all HTTP traffic for security.
        correct: false
      - value: It provides advanced logging for all HTTP interactions.
        correct: false
    help: "`CachingHttpClient` acts as a decorator that wraps another HTTP client
      and caches responses according to HTTP caching rules, reducing the need
      for repeated network requests."
  - question: Which HTTP status code indicates that the server successfully
      processed the request, but there's no content to send back?
    answers:
      - value: 204 No Content
        correct: true
      - value: 200 OK
        correct: false
      - value: 201 Created
        correct: false
      - value: 202 Accepted
        correct: false
    help: The 204 No Content status code indicates that the server has successfully
      fulfilled the request and that there is no additional content to send in
      the response payload body.
  - question: How can you upload data (e.g., form parameters or raw content) with a
      POST request using Symfony's HttpClient?
    answers:
      - value: Using the `body` option in the request options array.
        correct: true
      - value: Using the `form_params` option.
        correct: false
      - value: Using the `data` option.
        correct: false
      - value: Using `json` option for all data.
        correct: false
    help: The `body` option is versatile and can accept strings, arrays (for form
      parameters), closures, or file resources for uploading data.
  - question: What is the purpose of the `stream()` method when working with Symfony
      HttpClient responses?
    answers:
      - value: To process response content asynchronously, chunk by chunk.
        correct: true
      - value: To convert the response body into a PHP stream resource.
        correct: false
      - value: To save the response content to a file.
        correct: false
      - value: To compress the response data before processing.
        correct: false
    help: The `stream()` method allows you to process HTTP responses as they arrive,
      providing chunks of data and enabling asynchronous processing.
  - question: Which HTTP status code indicates that the server understands the
      request but refuses to authorize it?
    answers:
      - value: 403 Forbidden
        correct: true
      - value: 401 Unauthorized
        correct: false
      - value: 404 Not Found
        correct: false
      - value: 407 Proxy Authentication Required
        correct: false
    help: The 403 Forbidden status code means the client does not have access rights
      to the content, i.e., it is unauthorized, so the server is refusing to
      give the requested resource.
  - question: How can you cancel an ongoing HTTP request made with Symfony's HttpClient?
    answers:
      - value: Call the `cancel()` method on the `ResponseInterface` object.
        correct: true
      - value: Throw an exception from within the `on_progress` callback.
        correct: true
      - value: Set a timeout on the request that will automatically cancel it.
        correct: false
      - value: There is no direct way to cancel a request once it's sent.
        correct: false
    help: A request can be cancelled explicitly by calling `cancel()` on the
      response object, or implicitly by throwing an exception from the
      `on_progress` callback.
  - question: What is the role of `Psr\Http\Client\ClientInterface` in Symfony's
      HttpClient component?
    answers:
      - value: It provides a standard interface for HTTP clients, enabling
          interoperability.
        correct: true
      - value: It is the concrete implementation of Symfony's HTTP client.
        correct: false
      - value: It defines methods for handling HTTP requests and responses internally
          within Symfony.
        correct: false
      - value: It is used for mocking HTTP responses in tests.
        correct: false
    help: Symfony's HttpClient implements PSR-18
      (`Psr\Http\Client\ClientInterface`), which is a standard interface for
      HTTP clients, promoting interoperability between different HTTP client
      libraries.
  - question: Which HTTP status code indicates that the request method is not
      supported for the requested resource?
    answers:
      - value: 405 Method Not Allowed
        correct: true
      - value: 400 Bad Request
        correct: false
      - value: 403 Forbidden
        correct: false
      - value: 501 Not Implemented
        correct: false
    help: The 405 Method Not Allowed status code indicates that the request method
      is known by the server but has been disabled and cannot be used for that
      resource.
  - question: How can you simulate an incoming HTTP request programmatically for
      testing purposes in Symfony?
    answers:
      - value: Using `Request::create('/path?param=value')`.
        correct: true
      - value: By directly manipulating `$_SERVER`, `$_GET`, `$_POST`.
        correct: false
      - value: Using `HttpClient::create()` with mock responses.
        correct: false
      - value: By calling a controller method directly.
        correct: false
    help: The static `Request::create()` method allows you to build a `Request`
      object programmatically, simulating an incoming HTTP request without
      needing to go through a web server.
  - question: What is the purpose of the `max_host_connections` option in Symfony's
      HttpClient configuration?
    answers:
      - value: It limits the number of concurrent connections to a single host.
        correct: true
      - value: It sets the maximum number of hosts the client can connect to.
        correct: false
      - value: It defines the maximum number of requests per host per second.
        correct: false
      - value: It limits the total number of concurrent connections across all hosts.
        correct: false
    help: The `max_host_connections` option is a global setting that prevents the
      HttpClient from opening too many concurrent connections to the same host,
      which can be useful for rate limiting or avoiding server overload.
  - question: Which HTTP status code indicates that the server cannot find the
      requested resource?
    answers:
      - value: 404 Not Found
        correct: true
      - value: 400 Bad Request
        correct: false
      - value: 401 Unauthorized
        correct: false
      - value: 500 Internal Server Error
        correct: false
    help: The 404 Not Found status code is a common error indicating that the server
      could not find anything matching the Request-URI.
  - question: How does Symfony's `Request::getLanguages()` method determine the
      preferred languages of the client?
    answers:
      - value: By parsing the `Accept-Language` HTTP header.
        correct: true
      - value: By checking the client's IP address.
        correct: false
      - value: By looking at the `User-Agent` header.
        correct: false
      - value: By querying the browser's language settings directly.
        correct: false
    help: The `getLanguages()` method uses the `Accept-Language` header sent by the
      client to determine the preferred languages, ordered by preference.
  - question: What is the purpose of the `HttpOptions` class when configuring
      Symfony's HttpClient?
    answers:
      - value: To provide a fluent interface for building and managing HTTP client
          options.
        correct: true
      - value: To define the default options for all HTTP clients in an application.
        correct: false
      - value: To validate HTTP client configuration parameters.
        correct: false
      - value: To store cached HTTP responses.
        correct: false
    help: The `HttpOptions` class offers a convenient, fluent way to define and
      manipulate request options for the HttpClient.
  - question: Which HTTP status code indicates that the server encountered an
      unexpected condition that prevented it from fulfilling the request?
    answers:
      - value: 500 Internal Server Error
        correct: true
      - value: 400 Bad Request
        correct: false
      - value: 503 Service Unavailable
        correct: false
      - value: 404 Not Found
        correct: false
    help: The 500 Internal Server Error status code is a generic error message,
      given when an unexpected condition was encountered and no more specific
      message is suitable.
  - question: When mocking responses with `MockHttpClient`, how can you provide a
      dynamic response based on the incoming request?
    answers:
      - value: By passing a callable (closure) to the `MockHttpClient` constructor.
        correct: true
      - value: By using a `ResponseFactory` interface.
        correct: false
      - value: By extending `MockResponse` and overriding a method.
        correct: false
      - value: Dynamic responses are not supported.
        correct: false
    help: You can pass a callable to `MockHttpClient` that receives the method, URL,
      and options of the request, allowing you to return a `MockResponse`
      dynamically.
  - question: What is the purpose of the `HttpClient::createForBaseUri()` method?
    answers:
      - value: To create an HTTP client with a predefined base URI for relative
          requests.
        correct: true
      - value: To create a client that only accepts requests for a specific base URI.
        correct: false
      - value: To create a client for making requests to a local server.
        correct: false
      - value: To create a client with authentication pre-configured for a base URI.
        correct: true
    help: "`createForBaseUri()` is a convenient factory method to create an
      HttpClient instance that automatically prefixes relative URLs with the
      specified base URI and can also configure authentication."
  - question: Which HTTP status code indicates that the server is currently unable
      to handle the request due to a temporary overload or scheduled
      maintenance?
    answers:
      - value: 503 Service Unavailable
        correct: true
      - value: 500 Internal Server Error
        correct: false
      - value: 502 Bad Gateway
        correct: false
      - value: 429 Too Many Requests
        correct: false
    help: The 503 Service Unavailable status code indicates that the server is
      currently unable to handle the request due to a temporary overload or
      scheduled maintenance, which will likely be alleviated after some delay.
  - question: How can you add query string parameters to an HTTP GET request using
      Symfony's HttpClient?
    answers:
      - value: Using the `query` option in the request options array.
        correct: true
      - value: By appending them directly to the URL string.
        correct: false
      - value: Using the `params` option.
        correct: false
      - value: Query parameters are not supported for GET requests.
        correct: false
    help: The `query` option allows you to pass an associative array of query
      parameters, which the HttpClient will automatically encode and append to
      the URL.
  - question: What is the purpose of the `AsyncDecoratorTrait` when extending
      `HttpClientInterface`?
    answers:
      - value: It provides methods to process response chunks asynchronously.
        correct: true
      - value: It enables synchronous HTTP request processing.
        correct: false
      - value: It adds caching capabilities to the HTTP client.
        correct: false
      - value: It handles automatic retries for failed requests.
        correct: false
    help: The `AsyncDecoratorTrait` is designed to be used by custom HTTP client
      implementations to easily add asynchronous chunk processing capabilities.
  - question: Which HTTP status code indicates that the client is not authorized to
      access the resource and needs to provide authentication credentials?
    answers:
      - value: 401 Unauthorized
        correct: true
      - value: 403 Forbidden
        correct: false
      - value: 407 Proxy Authentication Required
        correct: false
      - value: 408 Request Timeout
        correct: false
    help: The 401 Unauthorized status code is sent when the client needs to
      authenticate itself to get the requested response. It often includes a
      `WWW-Authenticate` header.
  - question: When configuring global URI template variables for Symfony's
      HttpClient, which option is used?
    answers:
      - value: "`vars`"
        correct: true
      - value: "`uri_templates`"
        correct: false
      - value: "`placeholders`"
        correct: false
      - value: "`globals`"
        correct: false
    help: The `vars` option under `default_options` allows you to define global
      variables that will be automatically replaced in URI templates used by the
      HttpClient.
  - question: What is the purpose of `HttplugClient` in Symfony's HttpClient component?
    answers:
      - value: To provide a PSR-7/PSR-17/PSR-18 compatible client for libraries that
          depend on HTTPlug.
        correct: true
      - value: To replace the default Symfony HttpClient with a Guzzle-based client.
        correct: false
      - value: To add asynchronous capabilities to any PSR-18 client.
        correct: false
      - value: To provide a mock client for HTTPlug-based tests.
        correct: false
    help: "`HttplugClient` acts as a bridge, allowing Symfony's HttpClient to be
      used with libraries that expect HTTPlug-compatible clients
      (`Http\\Client\\HttpClient` and `Http\\Message\\StreamFactory`)."
  - question: Which HTTP status code indicates that the server successfully
      processed the request and is returning information about the request, but
      not the resource itself?
    answers:
      - value: 203 Non-Authoritative Information
        correct: true
      - value: 200 OK
        correct: false
      - value: 202 Accepted
        correct: false
      - value: 206 Partial Content
        correct: false
    help: The 203 Non-Authoritative Information status code indicates that the
      returned metadata is not the definitive set as available from the origin
      server, but collected from a local or a third-party copy.
  - question: How can you specify HTTP Basic authentication credentials for a
      Symfony HTTP client?
    answers:
      - value: Using the `auth_basic` option in the client configuration.
        correct: true
      - value: By setting the `Authorization` header manually.
        correct: false
      - value: Using the `username` and `password` options.
        correct: false
      - value: Basic authentication is not supported directly by HttpClient.
        correct: false
    help: The `auth_basic` option provides a convenient way to configure HTTP Basic
      authentication for the client, accepting various formats like
      `['username', 'password']` or `'username:password'`.
  - question: What is the purpose of the `toStream()` method on `ResponseInterface`?
    answers:
      - value: To cast the response content to a PHP stream resource.
        correct: true
      - value: To save the response content to a temporary file.
        correct: false
      - value: To create a readable stream from a string response.
        correct: false
      - value: To enable streaming of the response over HTTP/2.
        correct: false
    help: The `toStream()` method allows you to access the response body as a PHP
      stream resource, which is useful for handling large responses efficiently
      without loading the entire content into memory.
  - question: Which HTTP status code indicates that the requested resource has been
      assigned a new permanent URI and any future references to this resource
      should use one of the returned URIs?
    answers:
      - value: 301 Moved Permanently
        correct: true
      - value: 302 Found
        correct: false
      - value: 303 See Other
        correct: false
      - value: 307 Temporary Redirect
        correct: false
    help: The 301 Moved Permanently status code indicates that the resource has been
      permanently moved to a new URI. Clients should update their links to the
      new URI.
  - question: When handling HTTP client stream exceptions, which interface should
      you catch to handle transport-level errors?
    answers:
      - value: TransportExceptionInterface
        correct: true
      - value: HttpClientException
        correct: false
      - value: NetworkException
        correct: false
      - value: StreamException
        correct: false
    help: Errors that occur at the transport layer (e.g., network issues, timeouts)
      are wrapped in a `TransportExceptionInterface`.
  - question: What is the purpose of the `Accept` HTTP header in a client request?
    answers:
      - value: To specify the media types that are acceptable for the response.
        correct: true
      - value: To indicate the character set preferred by the client.
        correct: false
      - value: To declare the encoding scheme of the request body.
        correct: false
      - value: To specify the language preferred by the client.
        correct: false
    help: The `Accept` header is a content negotiation header that tells the server
      which media types (e.g., `application/json`, `text/html`) the client is
      willing to accept in the response.
  - question: Which HTTP status code indicates that the server successfully
      processed the request, but the client should reset the document view?
    answers:
      - value: 205 Reset Content
        correct: true
      - value: 200 OK
        correct: false
      - value: 204 No Content
        correct: false
      - value: 203 Non-Authoritative Information
        correct: false
    help: The 205 Reset Content status code indicates that the server has fulfilled
      the request and desires that the user agent reset the 'document view',
      which caused the request to be sent, to its original state.
  - question: How can you configure Bearer token authentication for a Symfony HTTP
      client?
    answers:
      - value: Using the `auth_bearer` option with the token string.
        correct: true
      - value: By setting the `X-Auth-Token` header.
        correct: false
      - value: Using the `token` option.
        correct: false
      - value: Bearer authentication is not supported directly.
        correct: false
    help: The `auth_bearer` option simplifies configuring Bearer token
      authentication by directly accepting the token string.
  - question: What is the purpose of the `ScopingHttpClient`?
    answers:
      - value: To apply specific options to requests based on URL regular expressions or
          base URIs.
        correct: true
      - value: To limit the scope of HTTP requests to a specific domain.
        correct: false
      - value: To provide a client that only handles HTTP/2 requests.
        correct: false
      - value: To automatically retry failed requests within a certain scope.
        correct: false
    help: "`ScopingHttpClient` is a decorator that allows you to define different
      sets of options (like headers, authentication) that are automatically
      applied to requests based on whether their URL matches a defined scope
      (regex or base URI)."
  - question: Which HTTP status code indicates that the request has been accepted
      for processing, but the processing has not been completed?
    answers:
      - value: 202 Accepted
        correct: true
      - value: 200 OK
        correct: false
      - value: 201 Created
        correct: false
      - value: 204 No Content
        correct: false
    help: The 202 Accepted status code indicates that the request has been accepted
      for processing, but the processing has not been completed. The request
      might or might not be eventually acted upon, and may be disallowed when
      processing occurs.
  - question: How can you retrieve the URI path (e.g., '/about' for '/about?id=1')
      from a `Request` object?
    answers:
      - value: $request->getPathInfo()
        correct: true
      - value: $request->getUri()
        correct: false
      - value: $request->getRoute()
        correct: false
      - value: $request->server->get('REQUEST_URI')
        correct: false
    help: The `getPathInfo()` method returns the URI being requested, excluding any
      query parameters.
  - question: What is the primary role of the
      `Symfony\Component\HttpKernel\HttpCache\Store` class when using
      `CachingHttpClient`?
    answers:
      - value: To manage the storage of cached HTTP responses on the filesystem or other
          backends.
        correct: true
      - value: To define the caching rules for HTTP responses.
        correct: false
      - value: To invalidate cached entries when resources change.
        correct: false
      - value: To negotiate cache-control headers with the client.
        correct: false
    help: The `Store` class is responsible for the actual storage and retrieval of
      cached HTTP responses. It can be configured to use different storage
      mechanisms.
  - question: Which HTTP status code indicates that the request has succeeded and
      the client has been redirected to another URI?
    answers:
      - value: 303 See Other
        correct: true
      - value: 301 Moved Permanently
        correct: false
      - value: 302 Found
        correct: false
      - value: 307 Temporary Redirect
        correct: false
    help: The 303 See Other status code indicates that the response to the request
      can be found under another URI and should be retrieved using a GET method
      on that resource.
  - question: When using `MockHttpClient`, how can you define a specific HTTP status
      code for a mock response?
    answers:
      - value: By including `'http_code' => 500` in the options array of `MockResponse`.
        correct: true
      - value: By calling `$mockResponse->setStatusCode(500)`.
        correct: false
      - value: By setting the status code directly in the constructor, e.g., `new
          MockResponse('', 500)`.
        correct: false
      - value: Mock responses always return 200 OK by default.
        correct: false
    help: The `MockResponse` constructor accepts an optional array of info, where
      you can set the `http_code` key to specify the desired status code.
  - question: Which HTTP status code indicates that the requested resource is
      available at one or more locations, and the client should choose one of
      them?
    answers:
      - value: 300 Multiple Choices
        correct: true
      - value: 301 Moved Permanently
        correct: false
      - value: 302 Found
        correct: false
      - value: 304 Not Modified
        correct: false
    help: The 300 Multiple Choices status code indicates that the requested resource
      has multiple representations, each with its own specific location, and the
      user-agent or user should choose one of them.
  - question: What is the primary role of the `HttpKernel` component in a Symfony
      application?
    answers:
      - value: It is the core component that dispatches events and orchestrates the
          request-response lifecycle.
        correct: true
      - value: It handles all HTTP routing and URL generation.
        correct: false
      - value: It manages database interactions and ORM operations.
        correct: false
      - value: It provides a templating engine for rendering views.
        correct: false
    help: The HttpKernel component is the heart of a Symfony application,
      responsible for taking an incoming `Request`, passing it through various
      event listeners (like routing, security), and ultimately returning a
      `Response`.
