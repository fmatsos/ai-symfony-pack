category: HTTP
questions:
  - question: Which of the following best describes the stateless nature of HTTP?
    answers:
      - value: Each request from a client to the server is independent and contains all
          necessary information, without relying on previous requests.
        correct: true
      - value: The server maintains a continuous connection with the client throughout a
          session.
        correct: false
      - value: Clients must re-authenticate with every request.
        correct: false
      - value: HTTP sessions are managed by the client's browser only.
        correct: false
    help: HTTP is a stateless protocol, meaning each request from a client to the
      server is treated as an independent transaction. The server does not
      retain any information about past requests from the client.
  - question: What is the primary purpose of the `Host` header in an HTTP request?
    answers:
      - value: To specify the domain name of the server to which the request is being
          sent.
        correct: true
      - value: To indicate the client's preferred language.
        correct: false
      - value: To define the content type of the request body.
        correct: false
      - value: To declare the maximum acceptable response size.
        correct: false
    help: The `Host` header specifies the domain name of the server (for virtual
      hosting) and optionally the port number of the server to which the request
      is being sent.
  - question: Which HTTP status code indicates that a request has been successfully
      processed and a new resource has been created as a result?
    answers:
      - value: 200 OK
        correct: false
      - value: 201 Created
        correct: true
      - value: 204 No Content
        correct: false
      - value: 301 Moved Permanently
        correct: false
    help: The 201 (Created) status code indicates that the request has been
      fulfilled and has resulted in one or more new resources being created.
  - question: A client receives an HTTP response with a 302 Found status code. What
      does this typically imply?
    answers:
      - value: The requested resource has been permanently moved to a new URI.
        correct: false
      - value: The request was successful, and the response body contains the requested
          resource.
        correct: false
      - value: The requested resource is temporarily available at a different URI.
        correct: true
      - value: The server encountered an unexpected condition that prevented it from
          fulfilling the request.
        correct: false
    help: The 302 (Found) status code indicates that the resource has been
      temporarily moved. The client should continue to use the original URI for
      future requests.
  - question: Which of the following HTTP status codes signifies a client-side
      error, specifically that the server understands the request but refuses to
      authorize it?
    answers:
      - value: 401 Unauthorized
        correct: false
      - value: 403 Forbidden
        correct: true
      - value: 404 Not Found
        correct: false
      - value: 500 Internal Server Error
        correct: false
    help: The 403 (Forbidden) status code indicates that the server understood the
      request but refuses to authorize it. Unlike 401, re-authenticating will
      not make a difference.
  - question: In Symfony, how do you typically obtain an instance of the `Request`
      object representing the current HTTP request?
    answers:
      - value: By calling `Request::createFromGlobals()`.
        correct: true
      - value: By instantiating `new Request()` directly.
        correct: false
      - value: By accessing the global `$_REQUEST` superglobal.
        correct: false
      - value: By injecting `RequestStack` into your service and calling
          `getCurrentRequest()`.
        correct: true
    help: The `Request::createFromGlobals()` method creates a Request object from
      PHP's global variables (`$_GET`, `$_POST`, `$_SERVER`, `$_COOKIE`,
      `$_FILES`). In a Symfony application, you often inject `RequestStack` and
      get the current request from it.
  - question: Given a Symfony `Request` object, how would you retrieve a query
      parameter named `id` with a default value of `0` if it's not present?
    answers:
      - value: "`$request->query->get('id', 0);`"
        correct: true
      - value: "`$request->get('id', 0);`"
        correct: false
      - value: "`$request->attributes->get('id', 0);`"
        correct: false
      - value: "`$request->request->get('id', 0);`"
        correct: false
    help: Query parameters (from `$_GET`) are accessed via the `query` public
      property of the `Request` object, which is an instance of `ParameterBag`.
      The `get()` method allows specifying a default value.
  - question: Which method of the Symfony `Request` object should you use to
      retrieve the raw content of the HTTP request body (e.g., for JSON or XML
      payloads)?
    answers:
      - value: "`$request->getContent();`"
        correct: true
      - value: "`$request->getPayload()->all();`"
        correct: false
      - value: "`$request->request->all();`"
        correct: false
      - value: "`$request->getBody();`"
        correct: false
    help: The `getContent()` method returns the raw body of the request. This is
      useful for non-form data, such as JSON or XML sent in the request body.
  - question: When creating a Symfony `Response` object, which of the following is
      the correct way to set the HTTP status code to 404 Not Found?
    answers:
      - value: "`$response = new Response('Page not found.',
          Response::HTTP_NOT_FOUND);`"
        correct: true
      - value: "`$response->setStatusCode(404);`"
        correct: true
      - value: "`$response->status(404);`"
        correct: false
      - value: "`$response = new Response('Page not found.', 404);`"
        correct: true
    help: The `Response` constructor accepts the status code as the second argument.
      You can use the `Response::HTTP_NOT_FOUND` constant or the integer value
      directly. The `setStatusCode()` method can also be used after
      instantiation.
  - question: What is the purpose of the `send()` method on a Symfony `Response` object?
    answers:
      - value: To send the HTTP headers and then echo the content to the client.
        correct: true
      - value: To store the response in the session for later retrieval.
        correct: false
      - value: To convert the response object into a JSON string.
        correct: false
      - value: To validate the response against HTTP standards.
        correct: false
    help: The `send()` method is responsible for sending the HTTP headers defined in
      the `Response` object, followed by echoing the response content to the
      client's browser.
  - question: Which HTTP method is considered both 'safe' and 'idempotent'?
    answers:
      - value: GET
        correct: true
      - value: POST
        correct: false
      - value: PUT
        correct: false
      - value: DELETE
        correct: false
    help: A 'safe' method (like GET) means it doesn't alter the state of the server.
      An 'idempotent' method means that multiple identical requests will have
      the same effect as a single request. GET is both safe and idempotent.
  - question: You need to create a new resource on the server. Which HTTP method is
      typically used for this purpose, and is it considered idempotent?
    answers:
      - value: GET; Yes, it is idempotent.
        correct: false
      - value: POST; No, it is not idempotent.
        correct: true
      - value: PUT; Yes, it is idempotent.
        correct: false
      - value: DELETE; Yes, it is idempotent.
        correct: false
    help: POST is typically used to create new resources. It is not idempotent
      because sending the same POST request multiple times can result in
      multiple identical resources being created.
  - question: How can you set a cookie on a Symfony `Response` object?
    answers:
      - value: "`$response->headers->setCookie(Cookie::create('name', 'value'));`"
        correct: true
      - value: "`$response->cookies->add('name', 'value');`"
        correct: false
      - value: "`$response->addCookie('name', 'value');`"
        correct: false
      - value: "`$response->headers->set('Set-Cookie', 'name=value');`"
        correct: false
    help: Cookies are managed via the `ResponseHeaderBag` which is accessible
      through `$response->headers`. You use `setCookie()` with an instance of
      `Symfony\Component\HttpFoundation\Cookie`.
  - question: To clear a cookie named `PHPSESSID` from a Symfony `Response`, which
      method of `ResponseHeaderBag` should you use?
    answers:
      - value: "`$response->headers->clearCookie('PHPSESSID');`"
        correct: true
      - value: "`$response->headers->removeCookie('PHPSESSID');`"
        correct: false
      - value: "`$response->cookies->delete('PHPSESSID');`"
        correct: false
      - value: "`$response->deleteCookie('PHPSESSID');`"
        correct: false
    help: The `clearCookie()` method of `ResponseHeaderBag` is used to instruct the
      client to remove a cookie by setting its expiration date to a past value.
  - question: Which HTTP header is primarily used by a server to indicate that a
      cached response should vary based on certain request headers (e.g.,
      `Accept-Encoding`, `User-Agent`)?
    answers:
      - value: Cache-Control
        correct: false
      - value: Expires
        correct: false
      - value: Vary
        correct: true
      - value: ETag
        correct: false
    help: The `Vary` header informs caches that the response content varies
      depending on the values of specified request headers. This ensures that
      different cached versions are stored for different client capabilities or
      preferences.
  - question: In Symfony, how can you mark a response as public and set its
      `max-age` to 600 seconds using the `#[Cache]` attribute?
    answers:
      - value: |-
          ```php
          #[Cache(public: true, maxage: 600)]
          public function index(): Response
          {
              // ...
          }
          ```
        correct: true
      - value: |-
          ```php
          #[Cache(private: false, ttl: 600)]
          public function index(): Response
          {
              // ...
          }
          ```
        correct: false
      - value: |-
          ```php
          #[Cache(shared: true, expires: '+600 seconds')]
          public function index(): Response
          {
              // ...
          }
          ```
        correct: false
      - value: |-
          ```php
          #[Cache(public: true, smaxage: 600)]
          public function index(): Response
          {
              // ...
          }
          ```
        correct: false
    help: The `#[Cache]` attribute from
      `Symfony\Component\HttpKernel\Attribute\Cache` allows configuring
      cache-related headers directly on controller methods using `public` and
      `maxage` options.
  - question: What is the purpose of the `ETag` HTTP header in caching?
    answers:
      - value: To specify the expiration date of the cached resource.
        correct: false
      - value: To provide a unique identifier for a specific version of a resource.
        correct: true
      - value: To indicate the maximum age a resource can be cached.
        correct: false
      - value: To force a cache to revalidate the resource immediately.
        correct: false
    help: The `ETag` (Entity Tag) is an opaque identifier assigned by a web server
      to a specific version of a resource found at a URL. If the resource
      content changes, a new `ETag` is generated, allowing caches to determine
      if a cached version is still fresh.
  - question: Which `Cache-Control` directive instructs both private and shared
      caches that the response can be stored and reused for a specified
      duration?
    answers:
      - value: private
        correct: false
      - value: no-cache
        correct: false
      - value: max-age
        correct: true
      - value: s-maxage
        correct: false
    help: The `max-age` directive indicates that the response is considered fresh
      for a specified number of seconds. It applies to both private and shared
      caches.
  - question: How does Symfony's `Response::isNotModified($request)` method work for
      HTTP caching?
    answers:
      - value: It checks if the `ETag` or `Last-Modified` headers in the response match
          the `If-None-Match` or `If-Modified-Since` headers in the client's
          request.
        correct: true
      - value: It always returns `true` if the response has a `Cache-Control` header.
        correct: false
      - value: It forces the client to revalidate the content with the origin server.
        correct: false
      - value: It automatically sends a 200 OK response if the content has not changed.
        correct: false
    help: The `isNotModified()` method checks if the response's validators (ETag,
      Last-Modified) match the conditional headers in the client's request. If
      they match, it sets the response status to 304 Not Modified and removes
      the content.
  - question: Which HTTP header is used by a client to indicate the preferred
      language(s) for the response content?
    answers:
      - value: Content-Language
        correct: false
      - value: Accept-Language
        correct: true
      - value: Language
        correct: false
      - value: Content-Type
        correct: false
    help: The `Accept-Language` header is a request header that advertises which
      languages the client is able to understand, and which locale variant is
      preferred.
  - question: Given a Symfony `Request` object, how would you retrieve an array of
      accepted languages, ordered by descending quality?
    answers:
      - value: "`$request->getLanguages();`"
        correct: true
      - value: "`$request->headers->get('Accept-Language');`"
        correct: false
      - value: "`$request->getPreferredLanguage();`"
        correct: false
      - value: "`$request->getLocale();`"
        correct: false
    help: The `getLanguages()` method of the `Request` object parses the
      `Accept-Language` header and returns an array of accepted languages,
      ordered by their quality value (q-value) in descending order.
  - question: Which Symfony component provides the `HttpClientInterface` for making
      HTTP requests?
    answers:
      - value: Symfony\Component\HttpFoundation
        correct: false
      - value: Symfony\Component\Routing
        correct: false
      - value: Symfony\Contracts\HttpClient
        correct: true
      - value: Symfony\Component\HttpKernel
        correct: false
    help: The `HttpClientInterface` is part of `Symfony\Contracts\HttpClient`,
      providing a standardized interface for HTTP client implementations.
  - question: To install the Symfony HTTP Client component, which Composer command
      should you use?
    answers:
      - value: "`composer require symfony/http-client`"
        correct: true
      - value: "`composer install symfony/http-client`"
        correct: false
      - value: "`composer update symfony/http-client`"
        correct: false
      - value: "`composer add symfony/http-client`"
        correct: false
    help: The correct Composer command to add a new package to your project is
      `composer require <vendor>/<package-name>`.
  - question: You want to make a GET request to `https://api.example.com/data` using
      Symfony's HttpClient. Which of the following is the correct way to do it?
    answers:
      - value: |-
          ```php
          $client = HttpClient::create();
          $response = $client->request('GET', 'https://api.example.com/data');
          ```
        correct: true
      - value: |-
          ```php
          $client = new HttpClient();
          $response = $client->get('https://api.example.com/data');
          ```
        correct: false
      - value: |-
          ```php
          $client = HttpClient::new();
          $response = $client->send('GET', 'https://api.example.com/data');
          ```
        correct: false
      - value: >-
          ```php

          $client = HttpClient::create();

          $response = $client->sendRequest('GET',
          'https://api.example.com/data');

          ```
        correct: false
    help: The `HttpClient::create()` static method is used to get a client instance,
      and the `request()` method is used to send HTTP requests with the
      specified method and URL.
  - question: When configuring Symfony's HTTP Client, how would you set a default
      `User-Agent` header for all requests made by a client instance in PHP?
    answers:
      - value: |-
          ```php
          $client = HttpClient::create([
              'headers' => [
                  'User-Agent' => 'My Fancy App',
              ],
          ]);
          ```
        correct: true
      - value: >-
          ```php

          $client = HttpClient::create()->setDefaultHeader('User-Agent', 'My
          Fancy App');

          ```
        correct: false
      - value: |-
          ```php
          $client = HttpClient::create()->withOptions([
              'User-Agent' => 'My Fancy App',
          ]);
          ```
        correct: false
      - value: >-
          ```php

          $client = HttpClient::create()->addDefaultOption('headers',
          ['User-Agent' => 'My Fancy App']);

          ```
        correct: false
    help: Default options, including headers, can be passed as an array to the
      `HttpClient::create()` method. These options will be applied to all
      requests made by that client instance unless overridden by
      request-specific options.
  - question: You need to send a POST request with a JSON payload using Symfony's
      HttpClient. Which option should you use to define the request body as a
      string?
    answers:
      - value: "`'json'`"
        correct: false
      - value: "`'body'`"
        correct: true
      - value: "`'form_params'`"
        correct: false
      - value: "`'data'`"
        correct: false
    help: The `'body'` option is used to define the raw content of the request body.
      For JSON, you would typically `json_encode()` your data and pass the
      resulting string to the `'body'` option.
  - question: Which method of `ResponseInterface` should you call to retrieve the
      HTTP status code of a response?
    answers:
      - value: "`getStatusCode()`"
        correct: true
      - value: "`getStatus()`"
        correct: false
      - value: "`getHttpCode()`"
        correct: false
      - value: "`getCode()`"
        correct: false
    help: The `getStatusCode()` method of
      `Symfony\Contracts\HttpClient\ResponseInterface` returns the HTTP status
      code (e.g., 200, 404, 500) of the response.
  - question: What happens when you call `ResponseInterface::getContent()` on a
      Symfony HttpClient response if the response status code is 4xx or 5xx by
      default?
    answers:
      - value: It returns an empty string.
        correct: false
      - value: It throws an `HttpException`.
        correct: false
      - value: It throws a `ClientExceptionInterface` or `ServerExceptionInterface`.
        correct: true
      - value: It returns the content, but logs a warning.
        correct: false
    help: By default, `getContent()` (and `toArray()`) on `ResponseInterface` will
      throw an exception (`ClientExceptionInterface` for 4xx,
      `ServerExceptionInterface` for 5xx) if the response is an HTTP error. You
      can pass `false` to the `throw` argument to prevent this.
  - question: How can you make multiple HTTP requests concurrently using Symfony's
      HttpClient?
    answers:
      - value: Initiate all requests in a loop, then iterate over the response objects
          in a separate loop to consume their content.
        correct: true
      - value: Use the `HttpClient::batchRequest()` method.
        correct: false
      - value: Each request automatically runs in a separate thread.
        correct: false
      - value: You must use a third-party library like ReactPHP for concurrency.
        correct: false
    help: Symfony's HttpClient is designed for concurrent requests. You initiate all
      requests (which return immediately), and then iterate over the response
      objects. The client will handle fetching the responses in parallel as you
      try to access their content or headers.
  - question: Which Symfony HttpClient transport uses the cURL PHP extension?
    answers:
      - value: NativeHttpClient
        correct: false
      - value: CurlHttpClient
        correct: true
      - value: AmpHttpClient
        correct: false
      - value: SocketHttpClient
        correct: false
    help: The `CurlHttpClient` specifically leverages the cURL PHP extension for
      making HTTP requests, offering advanced features and performance.
  - question: To enable HTTP/2 for all requests made by a Symfony HTTP client
      instance, which option should be set?
    answers:
      - value: "`'http_version' => '2.0'`"
        correct: true
      - value: "`'protocol' => 'HTTP/2'`"
        correct: false
      - value: "`'version' => 2`"
        correct: false
      - value: "`'force_http2' => true`"
        correct: false
    help: The `http_version` option, set to `'2.0'`, forces the HTTP client to use
      HTTP/2 for requests. This can be configured globally or per-request.
  - question: What is the primary benefit of using `HttpClientInterface::stream()`
      when dealing with large HTTP responses?
    answers:
      - value: It allows processing the response content chunk by chunk, preventing
          memory exhaustion.
        correct: true
      - value: It automatically decompresses the response body.
        correct: false
      - value: It ensures the entire response is loaded into memory before processing.
        correct: false
      - value: It provides a faster way to get the full response content as a string.
        correct: false
    help: The `stream()` method is designed for handling large responses by yielding
      chunks of data as they arrive, allowing for efficient processing without
      loading the entire response into memory at once.
  - question: You want to test a service that uses `HttpClientInterface`. Which
      class from Symfony's HttpClient component is specifically designed for
      mocking HTTP responses in tests?
    answers:
      - value: MockHttpClient
        correct: true
      - value: TestHttpClient
        correct: false
      - value: FakeHttpClient
        correct: false
      - value: InMemoryHttpClient
        correct: false
    help: The `MockHttpClient` class implements `HttpClientInterface` and allows you
      to define a list of `MockResponse` objects or a callback function to
      simulate HTTP responses for testing purposes.
  - question: When using `MockHttpClient` with a callback, what is the expected
      return type of the callback function?
    answers:
      - value: "`Symfony\\Component\\HttpClient\\Response\\MockResponse`"
        correct: true
      - value: "`Symfony\\Contracts\\HttpClient\\ResponseInterface`"
        correct: false
      - value: "`array`"
        correct: false
      - value: "`string`"
        correct: false
    help: The callback function provided to `MockHttpClient` should return an
      instance of `Symfony\Component\HttpClient\Response\MockResponse`, which
      represents the simulated HTTP response.
  - question: Which of the following `MockResponse` methods allows you to inspect
      the HTTP method of the simulated request?
    answers:
      - value: "`getRequestMethod()`"
        correct: true
      - value: "`getMethod()`"
        correct: false
      - value: "`getSimulatedMethod()`"
        correct: false
      - value: "`getSentMethod()`"
        correct: false
    help: The `MockResponse` class provides helper methods like
      `getRequestMethod()`, `getRequestUrl()`, and `getRequestOptions()` to
      inspect the details of the request that would have been sent to the mock
      client.
  - question: What is the primary use case for `UriTemplateHttpClient`?
    answers:
      - value: To make requests to multiple base URIs simultaneously.
        correct: false
      - value: To define and expand URI templates with variables before making requests.
        correct: true
      - value: To automatically retry failed HTTP requests.
        correct: false
      - value: To handle HTTP/2 push promises.
        correct: false
    help: The `UriTemplateHttpClient` allows you to define URI templates with
      placeholders (e.g., `{resource}`, `{?page}`) that are then expanded with
      actual values provided in the request options, simplifying URL
      construction for APIs.
  - question: Which of the following is a valid way to apply HTTP Basic
      authentication for a specific request using Symfony's HttpClient?
    answers:
      - value: |-
          ```php
          $response = $client->request('GET', 'https://...', [
              'auth_basic' => ['username', 'password'],
          ]);
          ```
        correct: true
      - value: |-
          ```php
          $response = $client->request('GET', 'https://...', [
              'auth' => 'username:password',
          ]);
          ```
        correct: false
      - value: |-
          ```php
          $response = $client->request('GET', 'https://...', [
              'basic_auth' => ['username', 'password'],
          ]);
          ```
        correct: false
      - value: >-
          ```php

          $response = $client->request('GET', 'https://...', [
              'headers' => ['Authorization' => 'Basic ' . base64_encode('username:password')],
          ]);

          ```
        correct: true
    help: The `auth_basic` option in the request options array is used to provide
      HTTP Basic authentication credentials. You can pass an array `['username',
      'password']` or a string `'username:password'`.
  - question: What is the purpose of the `on_progress` callback option in Symfony's
      HttpClient?
    answers:
      - value: To monitor the download and upload progress of a request.
        correct: true
      - value: To execute code after the entire response has been received.
        correct: false
      - value: To modify the request options before sending the request.
        correct: false
      - value: To handle HTTP redirects automatically.
        correct: false
    help: The `on_progress` callback is invoked periodically during the request
      lifecycle, providing updates on download and upload progress, and allowing
      for cancellation of the request by throwing an exception.
  - question: Which method of `ResponseInterface` can be used to cancel an ongoing
      HTTP request?
    answers:
      - value: "`cancel()`"
        correct: true
      - value: "`abort()`"
        correct: false
      - value: "`stop()`"
        correct: false
      - value: "`disconnect()`"
        correct: false
    help: The `cancel()` method on a `ResponseInterface` object can be called to
      abort an ongoing HTTP request, stopping further data transfer.
  - question: Which of the following is true regarding `HttpClient::create()`'s
      transport selection in Symfony 7?
    answers:
      - value: It prioritizes `CurlHttpClient` if the cURL extension is enabled.
        correct: true
      - value: It always defaults to `NativeHttpClient`.
        correct: false
      - value: It only uses `AmpHttpClient` if `CurlHttpClient` is not available.
        correct: true
      - value: It requires explicit configuration to choose a transport.
        correct: false
    help: "The `HttpClient::create()` method automatically selects the best
      available transport: `CurlHttpClient` if cURL is enabled, otherwise
      `AmpHttpClient` if the `amphp/http-client` package is installed, and
      finally falls back to `NativeHttpClient` (PHP streams)."
  - question: What is the purpose of `ScopingHttpClient` in Symfony?
    answers:
      - value: To apply different default options to requests based on their URL.
        correct: true
      - value: To limit the number of concurrent requests to a specific domain.
        correct: false
      - value: To automatically retry requests that fail with certain status codes.
        correct: false
      - value: To provide a client that only works with a single, predefined base URI.
        correct: false
    help: The `ScopingHttpClient` allows you to define different sets of default
      options (like headers, authentication) that apply only to requests whose
      URLs match specific regular expressions or base URIs.
  - question: When using `HttpClient::createForBaseUri()`, what does the second
      argument represent?
    answers:
      - value: The base URI that relative URLs will be resolved against.
        correct: true
      - value: An array of default options for the client.
        correct: false
      - value: The HTTP version to use for requests.
        correct: false
      - value: A callable for mocking responses.
        correct: false
    help: The `createForBaseUri()` method creates an HTTP client where the second
      argument is the base URI. Subsequent requests with relative URLs will be
      resolved against this base URI.
  - question: Which of the following options can be used to send a raw string as the
      request body in Symfony's HttpClient?
    answers:
      - value: "`'body' => 'my raw data'`"
        correct: true
      - value: "`'content' => 'my raw data'`"
        correct: false
      - value: "`'raw_body' => 'my raw data'`"
        correct: false
      - value: "`'payload' => 'my raw data'`"
        correct: false
    help: The `'body'` option in the request options array accepts a string, an
      array (for form-urlencoded), a closure, or a resource (like a file handle)
      to define the request body.
  - question: You need to add query parameters to an HTTP GET request using
      Symfony's HttpClient. Which option should you use?
    answers:
      - value: "`'query' => ['param1' => 'value1', 'param2' => 'value2']`"
        correct: true
      - value: "`'params' => ['param1' => 'value1', 'param2' => 'value2']`"
        correct: false
      - value: "`'url_params' => ['param1' => 'value1', 'param2' => 'value2']`"
        correct: false
      - value: "`'get' => ['param1' => 'value1', 'param2' => 'value2']`"
        correct: false
    help: The `'query'` option is used to define query string parameters. The values
      provided will be URL-encoded and appended to the request URL.
  - question: What is the purpose of `ResponseInterface::toArray()`?
    answers:
      - value: To convert the response body from JSON to a PHP associative array.
        correct: true
      - value: To get all response headers as an associative array.
        correct: false
      - value: To convert the entire `ResponseInterface` object into an array of its
          properties.
        correct: false
      - value: To serialize the response object for caching.
        correct: false
    help: The `toArray()` method on `ResponseInterface` is a convenience method that
      decodes the response body as JSON and casts it to a PHP associative array.
      It also throws an exception on HTTP errors by default.
  - question: Which of the following is NOT a valid authentication option for
      Symfony's HttpClient?
    answers:
      - value: "`auth_basic`"
        correct: false
      - value: "`auth_bearer`"
        correct: false
      - value: "`auth_digest`"
        correct: true
      - value: "`auth_ntlm`"
        correct: false
    help: Symfony's HttpClient supports `auth_basic`, `auth_bearer`, and `auth_ntlm`
      out of the box. `auth_digest` is not a directly supported option.
  - question: "What does the `flush` parameter in `Response::send(flush: bool =
      true)` control?"
    answers:
      - value: Whether PHP's output buffers are flushed after sending the response.
        correct: false
      - value: Whether functions like `fastcgi_finish_request()` or
          `litespeed_finish_request()` are called to send the response early.
        correct: true
      - value: Whether the response is immediately written to the client's disk.
        correct: false
      - value: Whether the HTTP connection is immediately closed after sending.
        correct: false
    help: The `flush` parameter (defaulting to `true`) in `Response::send()`
      controls whether PHP-specific functions like `fastcgi_finish_request()` or
      `litespeed_finish_request()` are called. Setting it to `false` prevents
      these calls, which can be useful in certain server environments or for
      testing.
  - question: Which class is used in Symfony to represent an HTTP cookie?
    answers:
      - value: Symfony\Component\HttpFoundation\Cookie
        correct: true
      - value: Symfony\Component\HttpFoundation\HttpCookie
        correct: false
      - value: Symfony\Component\HttpFoundation\Session\Cookie
        correct: false
      - value: Symfony\Component\BrowserKit\Cookie
        correct: false
    help: The `Symfony\Component\HttpFoundation\Cookie` class is used to create and
      manage HTTP cookies within Symfony applications.
  - question: How do you retrieve a cookie value named `PHPSESSID` from a Symfony
      `Request` object?
    answers:
      - value: "`$request->cookies->get('PHPSESSID');`"
        correct: true
      - value: "`$request->getCookie('PHPSESSID');`"
        correct: false
      - value: "`$request->headers->get('Cookie')['PHPSESSID'];`"
        correct: false
      - value: "`$_COOKIE['PHPSESSID'];`"
        correct: false
    help: The `cookies` public property of the `Request` object provides access to
      the request's cookies via a `ParameterBag` instance, allowing you to use
      the `get()` method.
  - question: What is the purpose of `Symfony\Component\HttpFoundation\StreamedResponse`?
    answers:
      - value: To send the HTTP response content incrementally, without buffering the
          entire content in memory.
        correct: true
      - value: To force the client to download the response as a file.
        correct: false
      - value: To handle Server-Sent Events (SSE) only.
        correct: false
      - value: To compress the response content before sending.
        correct: false
    help: The `StreamedResponse` class allows you to stream the HTTP response
      content back to the client, which is useful for large files, long-running
      processes, or Server-Sent Events, as it avoids buffering the entire
      content in memory.
  - question: Which method of `Response` should you use to set the `Last-Modified`
      HTTP header?
    answers:
      - value: "`setLastModified(\\DateTimeInterface $dateTime);`"
        correct: true
      - value: "`setModifiedDate(\\DateTimeInterface $dateTime);`"
        correct: false
      - value: "`setLastModifiedDate(\\DateTimeInterface $dateTime);`"
        correct: false
      - value: "`setHttpLastModified(\\DateTimeInterface $dateTime);`"
        correct: false
    help: The `setLastModified()` method on the `Response` object is used to set the
      `Last-Modified` HTTP header, which is crucial for conditional GET requests
      and caching.
  - question: What does the `setPublic()` method on a Symfony `Response` object do?
    answers:
      - value: It sets the `Cache-Control` directive to `public`, allowing shared caches
          to store the response.
        correct: true
      - value: It makes the response accessible without authentication.
        correct: false
      - value: It sets the response status code to 200 OK.
        correct: false
      - value: It ensures the response is always fresh and not cached.
        correct: false
    help: The `setPublic()` method sets the `Cache-Control` header to `public`,
      indicating that the response can be cached by any cache, including shared
      proxy caches.
  - question: When dealing with HTTP caching, what is the effect of calling
      `$response->expire();`?
    answers:
      - value: It immediately invalidates the response in all caches by setting past
          expiration dates.
        correct: true
      - value: It sets the `max-age` to 0, forcing revalidation.
        correct: false
      - value: It removes all caching headers from the response.
        correct: false
      - value: It marks the response as private, preventing shared caching.
        correct: false
    help: The `expire()` method on a `Response` object explicitly marks the response
      as stale by setting its `Expires` header to a past date and
      `Cache-Control` to `no-cache, no-store, must-revalidate`.
  - question: Which of the following is a valid way to set multiple cache-related
      headers on a Symfony `Response` object in one call?
    answers:
      - value: "`$response->setCache(['max_age' => 3600, 'public' => true, 'etag' =>
          'abc']);`"
        correct: true
      - value: "`$response->cache(['max_age' => 3600, 'public' => true, 'etag' =>
          'abc']);`"
        correct: false
      - value: "`$response->withCache(['max_age' => 3600, 'public' => true, 'etag' =>
          'abc']);`"
        correct: false
      - value: "`$response->setHeaders(['Cache-Control' => 'max-age=3600, public',
          'ETag' => 'abc']);`"
        correct: false
    help: The `setCache()` method allows you to set multiple cache-related
      directives (like `max_age`, `public`, `etag`, `last_modified`) using an
      associative array of options, simplifying cache configuration.
  - question: What is the primary role of the `Accept` HTTP header?
    answers:
      - value: To specify the preferred character set for the response.
        correct: false
      - value: To indicate the client's preferred media types (MIME types) for the
          response.
        correct: true
      - value: To declare the encoding scheme for the request body.
        correct: false
      - value: To list the languages the client understands.
        correct: false
    help: The `Accept` header is a request header that specifies which media types
      (MIME types) the client is willing to accept in the response, often with
      quality values indicating preference.
  - question: In Symfony, how would you retrieve an array of accepted content types
      from the `Request` object, ordered by descending quality?
    answers:
      - value: "`$request->getAcceptableContentTypes();`"
        correct: true
      - value: "`$request->headers->get('Accept');`"
        correct: false
      - value: "`$request->getPreferredFormat();`"
        correct: false
      - value: "`$request->getMimeTypes();`"
        correct: false
    help: The `getAcceptableContentTypes()` method of the `Request` object parses
      the `Accept` header and returns an array of accepted content types,
      ordered by their quality value (q-value) in descending order.
  - question: Which Symfony component provides the `Request` and `Response` objects?
    answers:
      - value: Symfony\Component\HttpKernel
        correct: false
      - value: Symfony\Component\HttpFoundation
        correct: true
      - value: Symfony\Component\Routing
        correct: false
      - value: Symfony\Bundle\FrameworkBundle
        correct: false
    help: The `Symfony\Component\HttpFoundation` component provides the fundamental
      building blocks for handling HTTP requests and responses, including the
      `Request` and `Response` classes.
  - question: What is the HTTP status code for 'Bad Request'?
    answers:
      - value: "400"
        correct: true
      - value: "401"
        correct: false
      - value: "403"
        correct: false
      - value: "405"
        correct: false
    help: The 400 (Bad Request) status code indicates that the server cannot or will
      not process the request due to something that is perceived to be a client
      error (e.g., malformed request syntax, invalid request message framing, or
      deceptive request routing).
  - question: Which HTTP method is used to retrieve a representation of the
      specified resource, but without the response body?
    answers:
      - value: GET
        correct: false
      - value: HEAD
        correct: true
      - value: OPTIONS
        correct: false
      - value: TRACE
        correct: false
    help: The HEAD method asks for a response identical to that of a GET request,
      but without the response body. This is useful for retrieving metadata
      about a resource, such as its content type or last modified date, without
      transferring the entire content.
  - question: In Symfony, how can you simulate an HTTP request programmatically for
      testing purposes, including setting the URI, method, and parameters?
    answers:
      - value: |-
          ```php
          $request = Request::create(
              '/hello-world',
              'GET',
              ['name' => 'Fabien']
          );
          ```
        correct: true
      - value: |-
          ```php
          $request = new Request('/hello-world', 'GET', ['name' => 'Fabien']);
          ```
        correct: false
      - value: >-
          ```php

          $request = Request::fromArray(['uri' => '/hello-world', 'method' =>
          'GET', 'parameters' => ['name' => 'Fabien']]);

          ```
        correct: false
      - value: |-
          ```php
          $request = Request::createFromGlobals()->setUri('/hello-world')->setMethod('GET')->setParameters(['name' => 'Fabien']);
          ```
        correct: false
    help: The static `Request::create()` method is ideal for programmatically
      creating `Request` objects, allowing you to specify the URI, HTTP method,
      and request parameters, which is very useful for unit and functional
      testing.
  - question: What is the purpose of the `HttpKernel` in a Symfony application?
    answers:
      - value: It is the core class that handles an incoming `Request` and returns a
          `Response`.
        correct: true
      - value: It manages the application's routing configuration.
        correct: false
      - value: It is responsible for rendering Twig templates.
        correct: false
      - value: It provides a command-line interface for Symfony applications.
        correct: false
    help: The `HttpKernel` is the central piece of a Symfony application's
      request-response lifecycle. It takes a `Request` object, dispatches
      events, calls a controller, and returns a `Response` object.
  - question: Which HTTP status code indicates 'Internal Server Error'?
    answers:
      - value: "404"
        correct: false
      - value: "500"
        correct: true
      - value: "502"
        correct: false
      - value: "503"
        correct: false
    help: The 500 (Internal Server Error) status code indicates that the server
      encountered an unexpected condition that prevented it from fulfilling the
      request.
  - question: What is the default behavior of `HttpClient::create()` if the cURL PHP
      extension is not enabled and `amphp/http-client` is not installed?
    answers:
      - value: It throws an exception.
        correct: false
      - value: It falls back to `NativeHttpClient` (PHP streams).
        correct: true
      - value: It uses a dummy client that does not make real requests.
        correct: false
      - value: It attempts to download and enable cURL automatically.
        correct: false
    help: If neither cURL nor `amphp/http-client` is available,
      `HttpClient::create()` gracefully falls back to `NativeHttpClient`, which
      uses PHP's native streams for HTTP communication.
  - question: You want to override a globally configured HTTP header for a specific
      request using Symfony's HttpClient. How would you do this?
    answers:
      - value: |-
          ```php
          $response = $client->request('POST', 'https://...', [
              'headers' => [
                  'Content-Type' => 'text/plain',
              ],
          ]);
          ```
        correct: true
      - value: |-
          ```php
          $response = $client->request('POST', 'https://...', [
              'override_headers' => ['Content-Type' => 'text/plain'],
          ]);
          ```
        correct: false
      - value: |-
          ```php
          $response = $client->request('POST', 'https://...', [
              'options' => ['headers' => ['Content-Type' => 'text/plain']],
          ]);
          ```
        correct: false
      - value: >-
          ```php

          $response = $client->request('POST',
          'https://...')->setHeaders(['Content-Type' => 'text/plain']);

          ```
        correct: false
    help: Request-specific options, including headers, take precedence over any
      default options configured on the HTTP client instance. Simply define the
      header in the request's `headers` option.
  - question: Which of the following is NOT a valid way to upload data using the
      `'body'` option in Symfony's HttpClient?
    answers:
      - value: A regular string.
        correct: false
      - value: An array of parameters (for form-urlencoded).
        correct: false
      - value: A `Psr\Http\Message\StreamInterface` object.
        correct: true
      - value: A PHP resource (e.g., from `fopen()`).
        correct: false
    help: The `'body'` option accepts a string, an array, a closure, or a PHP
      resource. While PSR-7 streams are common, the HttpClient's `'body'` option
      directly supports PHP resources for streaming.
  - question: What is the purpose of
      `Symfony\Component\HttpClient\ThrottlingHttpClient` (introduced in Symfony
      7.1)?
    answers:
      - value: To limit the rate of requests sent to a specific host or globally.
        correct: true
      - value: To automatically retry requests that fail due to network issues.
        correct: false
      - value: To add a delay before sending each request.
        correct: false
      - value: To log all HTTP requests and responses for debugging.
        correct: false
    help: The `ThrottlingHttpClient` wraps another HTTP client and limits the rate
      at which requests are sent, preventing a client from overwhelming a server
      or exceeding API rate limits.
  - question: Which of the following classes is used in Symfony to manage HTTP
      headers for a `Response`?
    answers:
      - value: Symfony\Component\HttpFoundation\ResponseHeaderBag
        correct: true
      - value: Symfony\Component\HttpFoundation\HeaderBag
        correct: false
      - value: Symfony\Component\HttpFoundation\ResponseHeaders
        correct: false
      - value: Symfony\Component\HttpFoundation\HttpHeaderBag
        correct: false
    help: The `ResponseHeaderBag` class, accessible via `$response->headers`,
      provides methods for setting, getting, and managing HTTP headers
      associated with a `Response` object.
  - question: What is the primary difference between `max-age` and `s-maxage` in the
      `Cache-Control` header?
    answers:
      - value: "`max-age` applies to all caches, while `s-maxage` applies only to shared
          (proxy) caches."
        correct: true
      - value: "`s-maxage` is for client-side caching, `max-age` is for server-side
          caching."
        correct: false
      - value: "`max-age` defines the absolute expiration time, `s-maxage` defines a
          relative time."
        correct: false
      - value: "`s-maxage` forces revalidation, `max-age` allows stale content."
        correct: false
    help: "`max-age` specifies the maximum amount of time a resource is considered
      fresh for both private and shared caches. `s-maxage` (shared max-age)
      overrides `max-age` for shared caches only, allowing fine-grained control
      over caching behavior in proxy servers."
  - question: Which HTTP status code indicates 'Not Modified'?
    answers:
      - value: "200"
        correct: false
      - value: "304"
        correct: true
      - value: "400"
        correct: false
      - value: "412"
        correct: false
    help: The 304 (Not Modified) status code indicates that the resource has not
      been modified since the version specified by the request headers
      `If-Modified-Since` or `If-None-Match`.
  - question: What is the purpose of `Symfony\Component\HttpClient\HttplugClient`?
    answers:
      - value: It provides an adapter to use Symfony's HttpClient with PSR-18 (HTTP
          Client) and PSR-7 (HTTP Message) interfaces.
        correct: true
      - value: It is a standalone HTTP client that does not require any other Symfony
          components.
        correct: false
      - value: It is specifically designed for making asynchronous HTTP/2 requests.
        correct: false
      - value: It provides a mock implementation of `HttpClientInterface` for testing.
        correct: false
    help: The `HttplugClient` acts as an adapter, allowing Symfony's HttpClient to
      be used with libraries that rely on the PSR-18 `HttpClientInterface` and
      PSR-7 `RequestInterface`/`ResponseInterface` standards.
  - question: You are building an API and want to ensure that a client cannot cache
      a specific response. Which `Cache-Control` directive would you use?
    answers:
      - value: public
        correct: false
      - value: no-cache
        correct: true
      - value: max-age=0
        correct: false
      - value: must-revalidate
        correct: false
    help: The `no-cache` directive means that the response must not be served from a
      cache without revalidation with the origin server. While `max-age=0` also
      forces revalidation, `no-cache` is more explicit about not using a stale
      cached copy.
  - question: Which HTTP method is typically used to update an existing resource
      completely, and is it considered idempotent?
    answers:
      - value: PATCH; No, it is not idempotent.
        correct: false
      - value: PUT; Yes, it is idempotent.
        correct: true
      - value: POST; No, it is not idempotent.
        correct: false
      - value: UPDATE; Yes, it is idempotent.
        correct: false
    help: The PUT method is used to update an existing resource or create a new one
      if it does not exist. It is idempotent because sending the same PUT
      request multiple times will have the same effect as sending it once (the
      resource will be in the same state).
  - question: What is the purpose of the `User-Agent` HTTP request header?
    answers:
      - value: To specify the client's preferred content type.
        correct: false
      - value: To identify the client software (e.g., browser, bot) making the request.
        correct: true
      - value: To indicate the authentication credentials.
        correct: false
      - value: To define the language of the request body.
        correct: false
    help: The `User-Agent` header is a request header that allows the client to
      identify itself (e.g., browser type, operating system, application name)
      to the server.
  - question: Which Symfony class provides utility methods for manipulating HTTP
      headers, such as quoting and unquoting header values?
    answers:
      - value: Symfony\Component\HttpFoundation\HeaderUtils
        correct: true
      - value: Symfony\Component\HttpFoundation\ResponseHeaderBag
        correct: false
      - value: Symfony\Component\HttpFoundation\RequestHeaderBag
        correct: false
      - value: Symfony\Component\HttpFoundation\HttpUtils
        correct: false
    help: The `HeaderUtils` class provides static helper methods for common HTTP
      header operations, including combining, converting to string, quoting,
      unquoting, and parsing query strings.
  - question: What is the HTTP status code for 'Method Not Allowed'?
    answers:
      - value: 403 Forbidden
        correct: false
      - value: 405 Method Not Allowed
        correct: true
      - value: 400 Bad Request
        correct: false
      - value: 501 Not Implemented
        correct: false
    help: The 405 (Method Not Allowed) status code indicates that the request method
      is known by the server but has been disabled or is not supported for the
      target resource.
  - question: Which HTTP header is used to specify the media type of the resource
      being sent in the request or response body?
    answers:
      - value: Accept
        correct: false
      - value: Content-Type
        correct: true
      - value: Transfer-Encoding
        correct: false
      - value: Content-Encoding
        correct: false
    help: The `Content-Type` header indicates the media type (e.g.,
      `application/json`, `text/html`) of the resource enclosed in the message
      body.
  - question: When using Symfony's HttpClient, what is the default behavior if you
      try to get the content of a response that resulted in a 404 Not Found
      status code?
    answers:
      - value: It returns an empty string.
        correct: false
      - value: It throws a `ClientExceptionInterface`.
        correct: true
      - value: It returns `null`.
        correct: false
      - value: It logs an error and returns the raw body.
        correct: false
    help: By default, `ResponseInterface::getContent()` and `toArray()` will throw a
      `ClientExceptionInterface` for 4xx status codes, including 404 Not Found.
      You can override this behavior by passing `false` to the `throw` argument.
  - question: Which of the following is the correct way to inject
      `HttpClientInterface` into a Symfony service?
    answers:
      - value: |-
          ```php
          use Symfony\\Contracts\\HttpClient\\HttpClientInterface;

          class MyService
          {
              public function __construct(
                  private HttpClientInterface $client,
              ) {}
          }
          ```
        correct: true
      - value: |-
          ```php
          use Symfony\\Component\\HttpClient\\HttpClient;

          class MyService
          {
              public function __construct(
                  private HttpClient $client,
              ) {}
          }
          ```
        correct: false
      - value: |-
          ```php
          use Psr\\Http\\Client\\HttpClientInterface;

          class MyService
          {
              public function __construct(
                  private HttpClientInterface $client,
              ) {}
          }
          ```
        correct: false
      - value: |-
          ```php
          class MyService
          {
              public function __construct(
                  private $client = '@http_client'
              ) {}
          }
          ```
        correct: false
    help: For autowiring, you should type-hint against the `HttpClientInterface`
      from `Symfony\Contracts\HttpClient`, which is the abstraction provided by
      Symfony for HTTP clients.
  - question: What is the purpose of the `stale-while-revalidate` directive in
      `Cache-Control`?
    answers:
      - value: It allows a cache to serve a stale response while it asynchronously
          revalidates it in the background.
        correct: true
      - value: It forces the client to revalidate the content before using a cached
          copy.
        correct: false
      - value: It specifies the maximum time a response can be served from cache without
          revalidation.
        correct: false
      - value: It indicates that the cache should never revalidate the content.
        correct: false
    help: The `stale-while-revalidate` directive allows a cache to serve a stale
      response to the client immediately, while it simultaneously sends a
      request to the origin server to revalidate the content in the background.
      This improves perceived performance.
  - question: Which HTTP status code indicates 'Too Many Requests'?
    answers:
      - value: "429"
        correct: true
      - value: "408"
        correct: false
      - value: "503"
        correct: false
      - value: "504"
        correct: false
    help: The 429 (Too Many Requests) status code indicates that the user has sent
      too many requests in a given amount of time ('rate limiting').
  - question: What is the primary function of the `Accept-Charset` HTTP header?
    answers:
      - value: To specify the character encoding of the request body.
        correct: false
      - value: To indicate the client's preferred character sets for the response.
        correct: true
      - value: To declare the character set used in the URL.
        correct: false
      - value: To define the character set of the server's response.
        correct: false
    help: The `Accept-Charset` header is a request header that indicates which
      character sets the client is able to understand in the response.
  - question: In Symfony, when would you typically use `RedirectResponse`?
    answers:
      - value: When you want to send a 200 OK response with a specific content type.
        correct: false
      - value: When you need to redirect the client to a different URL.
        correct: true
      - value: When you are streaming a large file to the client.
        correct: false
      - value: When you want to return a JSON response.
        correct: false
    help: The `Symfony\Component\HttpFoundation\RedirectResponse` class is a
      specialized `Response` subclass used to send an HTTP redirect (e.g., 301,
      302, 307, 308) to the client, instructing the browser to navigate to a new
      URL.
  - question: Which HTTP status code indicates 'Gateway Timeout'?
    answers:
      - value: "500"
        correct: false
      - value: "502"
        correct: false
      - value: "504"
        correct: true
      - value: "408"
        correct: false
    help: The 504 (Gateway Timeout) status code indicates that the server, while
      acting as a gateway or proxy, did not receive a timely response from an
      upstream server it needed to access to complete the request.
  - question: "What is the purpose of the `Connection: close` header in an HTTP
      response?"
    answers:
      - value: To instruct the client to close the TCP connection after completing the
          response.
        correct: true
      - value: To indicate that the server is shutting down.
        correct: false
      - value: To prevent the client from reusing the connection for subsequent
          requests.
        correct: true
      - value: To signal an error in the connection.
        correct: false
    help: "The `Connection: close` header indicates that the sender (server or
      client) wants to close the TCP connection after the current transaction is
      complete. This prevents persistent connections."
  - question: Which of the following is a common use case for the HTTP `OPTIONS` method?
    answers:
      - value: To retrieve a resource from the server.
        correct: false
      - value: To request information about the communication options available for the
          target resource or server.
        correct: true
      - value: To create a new resource on the server.
        correct: false
      - value: To delete a resource from the server.
        correct: false
    help: The `OPTIONS` method is used to describe the communication options for the
      target resource. Clients can use this to determine the allowed methods for
      a resource or other server capabilities without initiating a full request.
  - question: In Symfony's HttpClient, what does the `toStream()` method on
      `ResponseInterface` return?
    answers:
      - value: A PHP stream resource.
        correct: true
      - value: A `Psr\Http\Message\StreamInterface` object.
        correct: false
      - value: A `SplFileObject`.
        correct: false
      - value: A string containing the entire response body.
        correct: false
    help: The `toStream()` method on `ResponseInterface` returns a PHP stream
      resource, allowing you to read the response body incrementally, similar to
      how `fopen()` returns a resource.
  - question: Which HTTP header is typically used by a client to indicate the
      preferred encoding (e.g., gzip, deflate) for the response content?
    answers:
      - value: Content-Encoding
        correct: false
      - value: Transfer-Encoding
        correct: false
      - value: Accept-Encoding
        correct: true
      - value: Encoding
        correct: false
    help: The `Accept-Encoding` header is a request header that indicates what
      content encoding (e.g., compression algorithms) the client is able to
      understand.
  - question: What is the purpose of `HarFileResponseFactory` in Symfony's
      HttpClient testing utilities?
    answers:
      - value: To record HTTP requests and responses into a HAR file for later playback.
        correct: false
      - value: To create `MockResponse` objects based on interactions recorded in a HAR
          (HTTP Archive) file.
        correct: true
      - value: To convert a HAR file into a PHP array of mock responses.
        correct: false
      - value: To validate the syntax of HAR files.
        correct: false
    help: The `HarFileResponseFactory` allows you to create `MockResponse` objects
      by parsing a HAR (HTTP Archive) file. This is useful for creating
      realistic and reproducible HTTP client tests based on actual recorded
      network traffic.
  - question: Which HTTP status code indicates 'Service Unavailable'?
    answers:
      - value: "500"
        correct: false
      - value: "502"
        correct: false
      - value: "503"
        correct: true
      - value: "504"
        correct: false
    help: The 503 (Service Unavailable) status code indicates that the server is
      currently unable to handle the request due to a temporary overload or
      scheduled maintenance, which will likely be alleviated after some delay.
  - question: In Symfony's `Request` object, how do you access variables from the
      `$_SERVER` superglobal?
    answers:
      - value: "`$request->server->get('HTTP_HOST');`"
        correct: true
      - value: "`$request->get('HTTP_HOST');`"
        correct: false
      - value: "`$request->attributes->get('HTTP_HOST');`"
        correct: false
      - value: "`$request->headers->get('Host');`"
        correct: false
    help: The `server` public property of the `Request` object provides access to
      `$_SERVER` variables via a `ParameterBag` instance, allowing you to use
      the `get()` method.
  - question: What is the purpose of the `stale-if-error` directive in `Cache-Control`?
    answers:
      - value: It allows a cache to serve a stale response if the origin server returns
          an error (e.g., 5xx status code).
        correct: true
      - value: It indicates that the response should always be revalidated if an error
          occurs.
        correct: false
      - value: It forces the client to retry the request if an error occurs.
        correct: false
      - value: It specifies that the response should never be cached if an error is
          detected.
        correct: false
    help: The `stale-if-error` directive allows a cache to serve a stale response
      when the origin server is unreachable or returns an error (typically 5xx
      status codes), improving resilience and user experience during outages.
  - question: Which HTTP method is used to apply partial modifications to a resource?
    answers:
      - value: PUT
        correct: false
      - value: POST
        correct: false
      - value: PATCH
        correct: true
      - value: UPDATE
        correct: false
    help: The PATCH method is used to apply partial modifications to a resource.
      Unlike PUT, which replaces the entire resource, PATCH applies incremental
      changes.
  - question: When configuring a Symfony HTTP client, what does the `base_uri`
      option allow you to do?
    answers:
      - value: Define a base URL that all relative request URIs will be resolved
          against.
        correct: true
      - value: Specify the default host for all requests.
        correct: false
      - value: Set a proxy server for all requests.
        correct: false
      - value: Define a list of allowed domains for requests.
        correct: false
    help: The `base_uri` option allows you to define a base URL for the HTTP client.
      When you make requests with relative URIs, they will be automatically
      resolved against this base URI.
  - question: What is the HTTP status code for 'Unauthorized'?
    answers:
      - value: "401"
        correct: true
      - value: "403"
        correct: false
      - value: "407"
        correct: false
      - value: "419"
        correct: false
    help: The 401 (Unauthorized) status code indicates that the request has not been
      applied because it lacks valid authentication credentials for the target
      resource.
  - question: In Symfony, how can you retrieve an uploaded file from the `Request`
      object, identified by its field name `attachment`?
    answers:
      - value: "`$request->files->get('attachment');`"
        correct: true
      - value: "`$request->getUploadedFile('attachment');`"
        correct: false
      - value: "`$request->get('attachment');`"
        correct: false
      - value: "`$_FILES['attachment'];`"
        correct: false
    help: Uploaded files are accessed via the `files` public property of the
      `Request` object, which is an instance of `FileBag`. The `get()` method
      returns an `UploadedFile` instance.
  - question: Which HTTP status code indicates 'No Content'?
    answers:
      - value: "200"
        correct: false
      - value: "201"
        correct: false
      - value: "204"
        correct: true
      - value: "205"
        correct: false
    help: The 204 (No Content) status code indicates that the server has
      successfully fulfilled the request and that there is no content to send in
      the response payload body.
  - question: What is the purpose of the `Accept-Encoding` header in content negotiation?
    answers:
      - value: To specify the character set of the response.
        correct: false
      - value: To indicate the client's preferred compression algorithms for the
          response.
        correct: true
      - value: To define the language of the response content.
        correct: false
      - value: To specify the media type of the response.
        correct: false
    help: The `Accept-Encoding` header is a request header that indicates what
      content encoding (e.g., `gzip`, `deflate`, `br`) the client is able to
      understand.
