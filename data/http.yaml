category: HTTP
questions:
  - question: Which HTTP method is typically used to retrieve data from a server
      without causing any side effects?
    answers:
      - value: GET
        correct: true
      - value: POST
        correct: false
      - value: PUT
        correct: false
      - value: DELETE
        correct: false
    help: The GET method is used to request data from a specified resource. It
      should only retrieve data and have no other effect on the data.
  - question: What does an HTTP status code of `200 OK` signify?
    answers:
      - value: The request has succeeded.
        correct: true
      - value: The resource has been permanently moved.
        correct: false
      - value: The server encountered an unexpected condition.
        correct: false
      - value: The client is not authorized to access the resource.
        correct: false
    help: The 200 (OK) status code indicates that the request has succeeded. The
      payload sent in a 200 response depends on the request method.
  - question: In Symfony, how do you typically access query parameters from an
      incoming HTTP request?
    answers:
      - value: "`$request->query->get('paramName')`"
        correct: true
      - value: "`$_GET['paramName']`"
        correct: false
      - value: "`$request->attributes->get('paramName')`"
        correct: false
      - value: "`$request->request->get('paramName')`"
        correct: false
    help: The `Symfony\Component\HttpFoundation\Request` object provides access to
      query parameters via its `query` property, which is an instance of
      `ParameterBag`.
  - question: Which of the following HTTP methods is used to submit an entity to the
      specified resource, often causing a change in state or side effects on the
      server?
    answers:
      - value: POST
        correct: true
      - value: HEAD
        correct: false
      - value: OPTIONS
        correct: false
      - value: TRACE
        correct: false
    help: The POST method is used to send data to a server to create/update a
      resource. It is often used when uploading a file or submitting a completed
      web form.
  - question: What is the primary purpose of the `Vary` HTTP response header?
    answers:
      - value: To indicate that the response content varies depending on specified
          request headers, influencing caching.
        correct: true
      - value: To specify the content-type of the response body.
        correct: false
      - value: To define the character encoding of the response.
        correct: false
      - value: To set the expiration time for the response in client caches.
        correct: false
    help: "The `Vary` header informs caches that the response is based on one or
      more request header fields. For example, `Vary: Accept-Encoding` means a
      cache should store different versions of the resource for different
      `Accept-Encoding` values."
  - question: Which Symfony component provides an object-oriented way to interact
      with HTTP requests and responses?
    answers:
      - value: HttpFoundation
        correct: true
      - value: HttpClient
        correct: false
      - value: Routing
        correct: false
      - value: EventDispatcher
        correct: false
    help: The HttpFoundation component defines an object-oriented layer for the HTTP
      specification. It provides `Request` and `Response` classes.
  - question: When using `HttpClientInterface` in Symfony, how do you retrieve the
      HTTP status code of a response?
    answers:
      - value: "`$response->getStatusCode()`"
        correct: true
      - value: "`$response->status()`"
        correct: false
      - value: "`$response->getInfo('http_code')`"
        correct: false
      - value: "`$response->getHttpCode()`"
        correct: false
    help: The `ResponseInterface` (which `HttpClientInterface` returns) provides the
      `getStatusCode()` method to get the HTTP status code.
  - question: "What is the purpose of the `Cache-Control: max-age` directive in an
      HTTP response?"
    answers:
      - value: It specifies the maximum amount of time a resource is considered fresh by
          a client cache.
        correct: true
      - value: It indicates that the response must not be cached by any cache.
        correct: false
      - value: It defines the maximum age for shared caches only.
        correct: false
      - value: It forces the client to revalidate the cached response with the origin
          server.
        correct: false
    help: The `max-age` directive indicates that the response is to be considered
      stale after a certain number of seconds.
  - question: Which of the following is the correct way to set a cookie on a
      `Symfony\Component\HttpFoundation\Response` object?
    answers:
      - value: "`$response->headers->setCookie(new Cookie('name', 'value'))`"
        correct: true
      - value: "`$response->setCookie('name', 'value')`"
        correct: false
      - value: "`$response->addCookie('name', 'value')`"
        correct: false
      - value: "`$response->cookies->add(new Cookie('name', 'value'))`"
        correct: false
    help: Cookies are managed via the `ResponseHeaderBag` object, which is
      accessible through `$response->headers`. The `setCookie()` method expects
      a `Symfony\Component\HttpFoundation\Cookie` object.
  - question: When configuring the Symfony HTTP Client, how can you ensure all
      requests use HTTP/2?
    answers:
      - value: Set the `http_version` option to `'2.0'` in the client's default options.
        correct: true
      - value: Enable the `use_http2` flag in `framework.yaml`.
        correct: false
      - value: Install the `symfony/http2-client` component.
        correct: false
      - value: The HTTP client automatically detects HTTP/2 support.
        correct: false
    help: To force HTTP/2, you must explicitly set the `http_version` option to
      `'2.0'` in the client configuration, either globally or per request.
  - question: What is the purpose of `Symfony\Component\HttpFoundation\RedirectResponse`?
    answers:
      - value: To send an HTTP response that redirects the client to a different URL.
        correct: true
      - value: To stream large files to the client.
        correct: false
      - value: To handle form submissions with redirects.
        correct: false
      - value: To generate a 404 Not Found response.
        correct: false
    help: The `RedirectResponse` class is a specialized `Response` that
      automatically sets the appropriate status code (e.g., 302 Found) and
      `Location` header to instruct the client to redirect.
  - question: Which HTTP status code indicates that the requested resource has been
      permanently moved to a new URI?
    answers:
      - value: 301 Moved Permanently
        correct: true
      - value: 302 Found
        correct: false
      - value: 404 Not Found
        correct: false
      - value: 500 Internal Server Error
        correct: false
    help: The 301 (Moved Permanently) status code indicates that the target resource
      has been assigned a new permanent URI and any future references to this
      resource should use one of the enclosed URIs.
  - question: How can you access the raw request body content (e.g., for JSON or XML
      payloads) using the Symfony `Request` object?
    answers:
      - value: "`$request->getContent()`"
        correct: true
      - value: "`$request->getPayload()->all()`"
        correct: false
      - value: "`$request->request->all()`"
        correct: false
      - value: "`$_SERVER['HTTP_RAW_POST_DATA']`"
        correct: false
    help: The `getContent()` method of the `Request` object returns the raw content
      of the request body, which is useful for non-form-encoded data.
  - question: When making an HTTP request with `HttpClientInterface`, how can you
      send an array of parameters as the request body (e.g., for
      `application/x-www-form-urlencoded`)?
    answers:
      - value: Pass an associative array to the `body` option.
        correct: true
      - value: Pass a JSON string to the `json` option.
        correct: false
      - value: Pass an array to the `form_params` option.
        correct: false
      - value: Pass a `Psr\Http\Message\StreamInterface` to the `stream` option.
        correct: false
    help: The `body` option in Symfony's HTTP Client can accept an associative
      array, which will be automatically encoded as
      `application/x-www-form-urlencoded`.
  - question: What is the primary benefit of using `HttpClientInterface::stream()`
      for large HTTP responses?
    answers:
      - value: It allows processing the response content in chunks, preventing memory
          exhaustion.
        correct: true
      - value: It automatically decompresses the response body.
        correct: false
      - value: It ensures the entire response is loaded into memory before processing.
        correct: false
      - value: It provides a mechanism for automatic retries on network failures.
        correct: false
    help: The `stream()` method allows you to process the response body
      incrementally, which is crucial for large files or long-running streams
      like Server-Sent Events, as it avoids loading the entire content into
      memory at once.
  - question: Which of the following `Cache-Control` directives indicates that a
      response is intended for a single user and must not be stored by a shared
      cache?
    answers:
      - value: private
        correct: true
      - value: public
        correct: false
      - value: no-cache
        correct: false
      - value: no-store
        correct: false
    help: The `private` directive indicates that the response is intended for a
      single user and must not be stored by a shared cache.
  - question: How do you programmatically simulate an HTTP request for testing
      purposes using the `Symfony\Component\HttpFoundation\Request` class?
    answers:
      - value: "`Request::create('/uri', 'METHOD', ['params'])`"
        correct: true
      - value: "`new Request('/uri', 'METHOD', ['params'])`"
        correct: false
      - value: "`Request::fromGlobals()` and then modify properties."
        correct: false
      - value: "`$client->request('/uri', 'METHOD', ['params'])`"
        correct: false
    help: The static `create()` method on the `Request` class allows you to
      construct a request object programmatically, simulating an incoming HTTP
      request.
  - question: Which of the following is a valid HTTP status code for a successful
      resource creation?
    answers:
      - value: 201 Created
        correct: true
      - value: 202 Accepted
        correct: false
      - value: 204 No Content
        correct: false
      - value: 200 OK
        correct: false
    help: The 201 (Created) status code indicates that the request has been
      fulfilled and has resulted in one or more new resources being created.
  - question: In Symfony, what is the purpose of the `#[Cache]` attribute on a
      controller method?
    answers:
      - value: To configure HTTP caching directives (like `Cache-Control`) for the
          response generated by that method.
        correct: true
      - value: To enable internal Symfony caching for the controller.
        correct: false
      - value: To mark the controller as cacheable by the framework's internal cache.
        correct: false
      - value: To define a cache key for the method's return value.
        correct: false
    help: The `#[Cache]` attribute (from
      `Symfony\Component\HttpKernel\Attribute\Cache`) provides a declarative way
      to set HTTP caching headers on a response generated by a controller.
  - question: Which of the following is the correct way to inject the default
      Symfony HTTP Client into a service?
    answers:
      - value: Type-hint `HttpClientInterface` in the constructor.
        correct: true
      - value: Type-hint `HttpClient` in the constructor.
        correct: false
      - value: Use the `@http_client` service alias.
        correct: false
      - value: Call `HttpClient::create()` directly in the service.
        correct: false
    help: Symfony's autowiring mechanism automatically injects the default HTTP
      client when you type-hint against
      `Symfony\Contracts\HttpClient\HttpClientInterface`.
  - question: What does the `ETag` HTTP header represent in the context of caching?
    answers:
      - value: A unique identifier for a specific version of a resource.
        correct: true
      - value: The expiration date of the cached resource.
        correct: false
      - value: The last modification date of the resource.
        correct: false
      - value: The content type of the resource.
        correct: false
    help: The `ETag` (entity tag) is an opaque identifier assigned by a web server
      to a specific version of a resource found at a URL. If the resource
      content changes, a new ETag is generated.
  - question: When using `HttpClientInterface`, how can you add query string
      parameters to a GET request?
    answers:
      - value: By using the `query` option in the request options array.
        correct: true
      - value: By appending them directly to the URL string.
        correct: true
      - value: By using the `params` option in the request options array.
        correct: false
      - value: By setting them in the `headers` option.
        correct: false
    help: The `query` option allows you to pass an associative array of query
      parameters, which the client will automatically URL-encode and append to
      the request URL. Alternatively, you can manually append them to the URL.
  - question: Which HTTP status code indicates that the server understands the
      request but refuses to authorize it?
    answers:
      - value: 403 Forbidden
        correct: true
      - value: 401 Unauthorized
        correct: false
      - value: 404 Not Found
        correct: false
      - value: 400 Bad Request
        correct: false
    help: The 403 (Forbidden) status code indicates that the server understood the
      request but refuses to authorize it. Unlike 401, re-authenticating will
      not make a difference.
  - question: What is the correct way to set a custom HTTP header on a
      `Symfony\Component\HttpFoundation\Response` object?
    answers:
      - value: "`$response->headers->set('X-Custom-Header', 'value')`"
        correct: true
      - value: "`$response->setHeader('X-Custom-Header', 'value')`"
        correct: false
      - value: "`$response->addHeader('X-Custom-Header', 'value')`"
        correct: false
      - value: "`$response->headers['X-Custom-Header'] = 'value'`"
        correct: false
    help: The `headers` property of a `Response` object is a `ResponseHeaderBag`
      instance, which provides the `set()` method to manage headers.
  - question: When should you use `Symfony\Component\HttpFoundation\StreamedResponse`?
    answers:
      - value: When you need to send a response whose content is generated dynamically
          or incrementally.
        correct: true
      - value: When you want to redirect the client to another URL.
        correct: false
      - value: When the response content is very small and fits entirely in memory.
        correct: false
      - value: When you need to send a file download that requires specific headers.
        correct: false
    help: A `StreamedResponse` allows you to stream the HTTP response back to the
      client, which is useful for large files or long-running processes where
      you don't want to buffer the entire content in memory.
  - question: Which of the following `HttpClient::create()` calls will prioritize
      the cURL PHP extension for making HTTP requests?
    answers:
      - value: "`HttpClient::create()` (if cURL extension is enabled)"
        correct: true
      - value: "`new CurlHttpClient()`"
        correct: true
      - value: "`new NativeHttpClient()`"
        correct: false
      - value: "`new AmpHttpClient()`"
        correct: false
    help: The `HttpClient::create()` factory method automatically selects the best
      available transport, prioritizing `CurlHttpClient` if the cURL extension
      is enabled. You can also explicitly instantiate `CurlHttpClient`.
  - question: What is the primary role of the `User-Agent` HTTP request header?
    answers:
      - value: To identify the client software making the request.
        correct: true
      - value: To specify the preferred language for the response.
        correct: false
      - value: To indicate the content type of the request body.
        correct: false
      - value: To provide authentication credentials.
        correct: false
    help: The `User-Agent` header is a characteristic string that allows the network
      protocol peers to identify the application type, operating system,
      software vendor, or software version of the requesting user agent.
  - question: How can you configure default HTTP headers for all requests made by a
      Symfony HTTP Client instance?
    answers:
      - value: By passing a `headers` array in the options when creating the client.
        correct: true
      - value: By calling `$client->setDefaultHeader('Name', 'Value')`.
        correct: false
      - value: By setting headers on the `RequestStack` service.
        correct: false
      - value: By modifying `$_SERVER['HTTP_...']` variables.
        correct: false
    help: Default headers can be set by providing a `headers` key in the options
      array when creating the `HttpClient` instance or configuring it via
      `framework.yaml`.
  - question: Which HTTP status code indicates that the server cannot find the
      requested resource?
    answers:
      - value: 404 Not Found
        correct: true
      - value: 400 Bad Request
        correct: false
      - value: 401 Unauthorized
        correct: false
      - value: 405 Method Not Allowed
        correct: false
    help: The 404 (Not Found) status code indicates that the origin server did not
      find a current representation for the target resource or is not willing to
      disclose that one exists.
  - question: What is the purpose of `Request::getLanguages()` in Symfony?
    answers:
      - value: It returns an ordered list of languages accepted by the client, based on
          the `Accept-Language` header.
        correct: true
      - value: It returns the default language configured for the application.
        correct: false
      - value: It returns a list of languages supported by the server.
        correct: false
      - value: It detects the client's geographical location.
        correct: false
    help: The `getLanguages()` method of the `Request` object parses the
      `Accept-Language` header and returns an array of preferred languages,
      ordered by quality value.
  - question: How can you apply HTTP Basic authentication for a specific request
      using the Symfony HTTP Client?
    answers:
      - value: By setting the `auth_basic` option in the request options array.
        correct: true
      - value: By setting the `Authorization` header manually.
        correct: true
      - value: By configuring it globally for the client instance.
        correct: false
      - value: By using the `withAuth()` method on the client.
        correct: false
    help: The `auth_basic` option allows you to provide username and password for
      HTTP Basic authentication for a specific request. You can also manually
      set the `Authorization` header.
  - question: Which HTTP status code indicates that the request could not be
      understood by the server due to malformed syntax?
    answers:
      - value: 400 Bad Request
        correct: true
      - value: 405 Method Not Allowed
        correct: false
      - value: 408 Request Timeout
        correct: false
      - value: 422 Unprocessable Entity
        correct: false
    help: The 400 (Bad Request) status code indicates that the server cannot or will
      not process the request due to something that is perceived to be a client
      error (e.g., malformed request syntax, invalid request message framing, or
      deceptive request routing).
  - question: What is the purpose of `Symfony\Component\HttpClient\MockHttpClient`?
    answers:
      - value: To provide a test double for `HttpClientInterface` allowing predefined or
          dynamically generated responses.
        correct: true
      - value: To send real HTTP requests in a testing environment.
        correct: false
      - value: To mock external API calls without needing a network connection.
        correct: true
      - value: To simulate slow network conditions for performance testing.
        correct: false
    help: The `MockHttpClient` is designed for testing. It allows you to define the
      responses that the client should return, either from a list of
      `MockResponse` objects or a callback function.
  - question: Which of the following methods on `ResponseInterface` will block
      execution until the full response body is received?
    answers:
      - value: "`getContent()`"
        correct: true
      - value: "`getHeaders()`"
        correct: false
      - value: "`getStatusCode()`"
        correct: false
      - value: "`toStream()`"
        correct: false
    help: The `getContent()` method on `ResponseInterface` blocks execution until
      the entire response body has been downloaded and is available as a string.
  - question: How can you cancel an ongoing HTTP request made with the Symfony HTTP
      Client?
    answers:
      - value: Call `$response->cancel()` on the `ResponseInterface` object.
        correct: true
      - value: Throw an exception from an `on_progress` callback.
        correct: true
      - value: Call `unset($response)`.
        correct: false
      - value: The client automatically cancels requests on timeout.
        correct: false
    help: Requests can be cancelled explicitly by calling `cancel()` on the response
      object, or implicitly by throwing an exception from an `on_progress`
      callback.
  - question: What is the primary function of the `Host` HTTP request header?
    answers:
      - value: To specify the domain name of the server (for virtual hosting).
        correct: true
      - value: To indicate the client's IP address.
        correct: false
      - value: To define the port number for the connection.
        correct: false
      - value: To request a specific language for the response.
        correct: false
    help: The `Host` header specifies the domain name of the server (for virtual
      hosting) and optionally the port number. It is mandatory for HTTP/1.1
      requests.
  - question: Which of the following is true about the `request()` method of
      `HttpClientInterface`?
    answers:
      - value: It returns a `ResponseInterface` object immediately, allowing for
          asynchronous operations.
        correct: true
      - value: It blocks execution until the full response content is received.
        correct: false
      - value: It only supports GET and POST methods.
        correct: false
      - value: It automatically retries failed requests.
        correct: false
    help: The `request()` method is non-blocking; it returns a `ResponseInterface`
      object as soon as the request is sent, allowing you to continue with other
      tasks while waiting for the response.
  - question: When dealing with content negotiation, which `Request` method would
      you use to get a list of acceptable content types ordered by quality?
    answers:
      - value: "`getAcceptableContentTypes()`"
        correct: true
      - value: "`getPreferredFormat()`"
        correct: false
      - value: "`getMimeTypes()`"
        correct: false
      - value: "`getAccept()`"
        correct: false
    help: The `getAcceptableContentTypes()` method parses the `Accept` header and
      returns an array of content types the client prefers, ordered by their
      quality value.
  - question: What is the purpose of the `Last-Modified` HTTP header in caching?
    answers:
      - value: It indicates the date and time the origin server believes the resource
          was last modified.
        correct: true
      - value: It specifies how long the resource can be cached.
        correct: false
      - value: It provides a unique identifier for the resource version.
        correct: false
      - value: It forces the client to revalidate the resource.
        correct: false
    help: The `Last-Modified` header is a date/time stamp indicating when the
      resource was last modified. Clients can use this with `If-Modified-Since`
      to check for freshness.
  - question: Which of the following is a valid way to upload data as a raw string
      using the Symfony HTTP Client?
    answers:
      - value: Set the `body` option to the string.
        correct: true
      - value: Set the `json` option to the string.
        correct: false
      - value: Set the `form_fields` option to the string.
        correct: false
      - value: Set the `content` option to the string.
        correct: false
    help: The `body` option in `HttpClient` can accept a raw string, which will be
      sent as the request body.
  - question: What is the role of `Symfony\Component\HttpClient\ScopingHttpClient`?
    answers:
      - value: To apply different HTTP client options based on the URL being requested.
        correct: true
      - value: To limit the number of concurrent requests to a specific domain.
        correct: false
      - value: To automatically retry requests that fail for specific URLs.
        correct: false
      - value: To provide a global HTTP client instance for the entire application.
        correct: false
    help: The `ScopingHttpClient` allows you to define different sets of default
      options that apply only to URLs matching specific regular expressions or
      base URIs.
  - question: What does an HTTP status code of `304 Not Modified` indicate?
    answers:
      - value: The resource has not been modified since the last request, and the cached
          version can be used.
        correct: true
      - value: The request was successful, but there is no content to return.
        correct: false
      - value: The client needs to authenticate to get the requested response.
        correct: false
      - value: The server is temporarily unavailable.
        correct: false
    help: The 304 (Not Modified) status code indicates that the client's cached copy
      of the resource is still valid, and there is no need to re-transmit the
      resource's content.
  - question: How can you mark a Symfony `Response` object as stale, forcing caches
      to revalidate it immediately?
    answers:
      - value: "`$response->expire()`"
        correct: true
      - value: "`$response->setCache(['max_age' => 0])`"
        correct: false
      - value: "`$response->setPublic(false)`"
        correct: false
      - value: "`$response->setLastModified(new \\DateTime('now'))`"
        correct: false
    help: The `expire()` method on a `Response` object sets the `Expires` header to
      a past date and `Cache-Control` to `no-cache`, effectively marking the
      response as stale.
  - question: Which HTTP method is used to request that the origin server delete the
      resource identified by the Request-URI?
    answers:
      - value: DELETE
        correct: true
      - value: REMOVE
        correct: false
      - value: PURGE
        correct: false
      - value: UNLINK
        correct: false
    help: The DELETE method requests that the origin server delete the resource
      identified by the Request-URI.
  - question: What is the primary difference between
      `HttpClientInterface::getContent()` and `HttpClientInterface::toStream()`?
    answers:
      - value: "`getContent()` loads the entire response into memory; `toStream()`
          provides a resource for streaming."
        correct: true
      - value: "`getContent()` is for text; `toStream()` is for binary data."
        correct: false
      - value: "`getContent()` is non-blocking; `toStream()` is blocking."
        correct: false
      - value: "`getContent()` returns an array; `toStream()` returns a string."
        correct: false
    help: "`getContent()` will block until the full response body is downloaded and
      returned as a string, potentially consuming a lot of memory for large
      responses. `toStream()` returns a PHP stream resource, allowing you to
      read the content incrementally without loading it all into memory."
  - question: Which of the following is the correct way to retrieve a cookie value
      from a `Symfony\Component\HttpFoundation\Request` object?
    answers:
      - value: "`$request->cookies->get('cookie_name')`"
        correct: true
      - value: "`$_COOKIE['cookie_name']`"
        correct: false
      - value: "`$request->getCookie('cookie_name')`"
        correct: false
      - value: "`$request->headers->get('Cookie')['cookie_name']`"
        correct: false
    help: The `cookies` property of the `Request` object is a `ParameterBag`
      instance, which provides the `get()` method to retrieve cookie values.
  - question: What does an HTTP status code of `500 Internal Server Error` signify?
    answers:
      - value: The server encountered an unexpected condition that prevented it from
          fulfilling the request.
        correct: true
      - value: The server is currently unable to handle the request due to a temporary
          overload or maintenance.
        correct: false
      - value: The server does not support the functionality required to fulfill the
          request.
        correct: false
      - value: The server received an invalid response from an upstream server.
        correct: false
    help: The 500 (Internal Server Error) status code indicates that the server
      encountered an unexpected condition that prevented it from fulfilling the
      request.
  - question: When configuring HTTP caching, what is the difference between
      `max-age` and `s-maxage` in the `Cache-Control` header?
    answers:
      - value: "`max-age` applies to all caches; `s-maxage` applies only to shared
          (proxy) caches."
        correct: true
      - value: "`max-age` is for client caches; `s-maxage` is for server caches."
        correct: false
      - value: "`max-age` is for private responses; `s-maxage` is for public responses."
        correct: false
      - value: "`max-age` is mandatory; `s-maxage` is optional."
        correct: false
    help: "`max-age` specifies the maximum time a resource is considered fresh for
      both private and shared caches. `s-maxage` overrides `max-age` for shared
      caches only."
  - question: Which HTTP method is used to replace all current representations of
      the target resource with the request payload?
    answers:
      - value: PUT
        correct: true
      - value: PATCH
        correct: false
      - value: UPDATE
        correct: false
      - value: MODIFY
        correct: false
    help: The PUT method requests that the enclosed entity be stored under the
      supplied Request-URI. If the Request-URI refers to an already existing
      resource, it is modified; otherwise, a new resource is created.
  - question: What is the purpose of
      `Symfony\Component\HttpClient\UriTemplateHttpClient`?
    answers:
      - value: It allows defining URLs with placeholders that are expanded from provided
          variables.
        correct: true
      - value: It provides a client for making requests to URI templates only.
        correct: false
      - value: It automatically generates URI templates from given URLs.
        correct: false
      - value: It is used for validating URI templates.
        correct: false
    help: The `UriTemplateHttpClient` is a decorator that allows you to use URI
      templates (RFC 6570) in your request URLs, replacing variables with
      provided values.
  - question: Which of the following is NOT a valid option for the `sameSite`
      attribute of a `Symfony\Component\HttpFoundation\Cookie`?
    answers:
      - value: "`'Strict'`"
        correct: false
      - value: "`'Lax'`"
        correct: false
      - value: "`'None'`"
        correct: false
      - value: "`'Secure'`"
        correct: true
    help: The valid `sameSite` options for cookies are `'Strict'`, `'Lax'`, and
      `'None'`. `'Secure'` is a separate flag indicating the cookie should only
      be sent over HTTPS.
  - question: How can you get information about the transport layer (e.g.,
      `redirect_count`, `start_time`) from a `ResponseInterface` object in
      Symfony's HTTP Client?
    answers:
      - value: "`$response->getInfo('key')`"
        correct: true
      - value: "`$response->getTransportInfo('key')`"
        correct: false
      - value: "`$response->getMetadata('key')`"
        correct: false
      - value: "`$response->getDebugInfo()`"
        correct: false
    help: The `getInfo()` method on `ResponseInterface` provides access to various
      pieces of information about the request and response from the underlying
      transport layer.
  - question: What is the purpose of the `Content-Type` HTTP header in a response?
    answers:
      - value: To indicate the media type of the resource sent to the data recipient.
        correct: true
      - value: To specify the acceptable media types for the client.
        correct: false
      - value: To define the character encoding of the response body.
        correct: false
      - value: To indicate the size of the response body in bytes.
        correct: false
    help: The `Content-Type` header indicates the original media type of the
      resource (prior to any content encoding applied for transfer) or the media
      type of the payload.
  - question: When using `MockHttpClient` for testing, how can you inspect the HTTP
      method that was sent to the mock client?
    answers:
      - value: "`$mockResponse->getRequestMethod()`"
        correct: true
      - value: "`$mockResponse->getMethod()`"
        correct: false
      - value: "`$mockResponse->getInfo('method')`"
        correct: false
      - value: "`$mockResponse->getRequestOptions()['method']`"
        correct: true
    help: The `MockResponse` object provides `getRequestMethod()` to get the method
      used in the simulated request. You can also access it via
      `getRequestOptions()['method']`.
  - question: Which HTTP status code indicates that the request method is not
      supported for the requested resource?
    answers:
      - value: 405 Method Not Allowed
        correct: true
      - value: 400 Bad Request
        correct: false
      - value: 403 Forbidden
        correct: false
      - value: 501 Not Implemented
        correct: false
    help: The 405 (Method Not Allowed) status code indicates that the method
      received in the Request-Line is known by the origin server but has been
      explicitly disallowed for the target resource.
  - question: What is the purpose of
      `Symfony\Component\HttpFoundation\Request::getPathInfo()`?
    answers:
      - value: To get the URI path of the request, excluding the query string.
        correct: true
      - value: To get the full URI including the scheme and host.
        correct: false
      - value: To get the base path of the application.
        correct: false
      - value: To get the file path of the executed script.
        correct: false
    help: The `getPathInfo()` method returns the path information from the URI,
      which is the part of the URI between the script name and the query string.
  - question: How can you configure HTTP Bearer authentication for a Symfony HTTP Client?
    answers:
      - value: Set the `auth_bearer` option to the token string.
        correct: true
      - value: Set the `Authorization` header with `Bearer <token>`.
        correct: true
      - value: Use the `auth_token` option.
        correct: false
      - value: It is not supported by the default client.
        correct: false
    help: Bearer authentication can be configured using the `auth_bearer` option in
      the client's options or by manually setting the `Authorization` header
      with the `Bearer` scheme.
  - question: Which HTTP status code indicates that the client needs to authenticate
      to get the requested response?
    answers:
      - value: 401 Unauthorized
        correct: true
      - value: 403 Forbidden
        correct: false
      - value: 407 Proxy Authentication Required
        correct: false
      - value: 419 Authentication Timeout
        correct: false
    help: The 401 (Unauthorized) status code indicates that the client request has
      not been completed because it lacks valid authentication credentials for
      the requested resource.
  - question: What is the purpose of
      `Symfony\Component\HttpFoundation\Response::isNotModified()`?
    answers:
      - value: To check if the response validators (ETag, Last-Modified) match a
          conditional value in the client Request, setting status to 304 if
          true.
        correct: true
      - value: To prevent the response from being modified by middleware.
        correct: false
      - value: To ensure the response content is identical to a previous version.
        correct: false
      - value: To mark the response as immutable for caching.
        correct: false
    help: The `isNotModified()` method checks the `If-None-Match` and
      `If-Modified-Since` headers from the request against the response's ETag
      and Last-Modified headers. If they match, it sets the response status to
      304 Not Modified and clears the content.
  - question: When using `HttpClientInterface`, how do you parse a JSON response
      body into a PHP array?
    answers:
      - value: "`$response->toArray()`"
        correct: true
      - value: "`json_decode($response->getContent(), true)`"
        correct: true
      - value: "`$response->getJson()`"
        correct: false
      - value: "`$response->getBodyAsArray()`"
        correct: false
    help: The `toArray()` method on `ResponseInterface` automatically decodes the
      JSON content into a PHP array. You can also manually decode the content
      obtained via `getContent()`.
  - question: Which HTTP status code indicates that the server is acting as a
      gateway or proxy and received an invalid response from an upstream server?
    answers:
      - value: 502 Bad Gateway
        correct: true
      - value: 503 Service Unavailable
        correct: false
      - value: 504 Gateway Timeout
        correct: false
      - value: 500 Internal Server Error
        correct: false
    help: The 502 (Bad Gateway) status code indicates that the server, while acting
      as a gateway or proxy, received an invalid response from an inbound server
      it accessed while attempting to fulfill the request.
  - question: In Symfony, how would you typically access POST parameters from an
      incoming HTTP request?
    answers:
      - value: "`$request->getPayload()->get('paramName')`"
        correct: true
      - value: "`$request->request->get('paramName')`"
        correct: true
      - value: "`$_POST['paramName']`"
        correct: false
      - value: "`$request->query->get('paramName')`"
        correct: false
    help: POST parameters are typically accessed via
      `$request->request->get('paramName')`. For more modern applications,
      especially with JSON payloads, `getPayload()` is preferred.
  - question: What is the purpose of the `Expires` HTTP header in caching?
    answers:
      - value: It specifies the date/time after which the response is considered stale.
        correct: true
      - value: It indicates the maximum age for the resource in seconds.
        correct: false
      - value: It provides a unique identifier for the cached resource.
        correct: false
      - value: It forces revalidation of the cached resource.
        correct: false
    help: "The `Expires` header provides a date/time after which the response should
      be considered stale. It's an older header, largely superseded by
      `Cache-Control: max-age`."
  - question: Which of the following is true regarding concurrent requests with
      Symfony's HTTP Client?
    answers:
      - value: Requests are initiated immediately, but responses are consumed in a
          separate loop.
        correct: true
      - value: Each request blocks execution until its response is fully received.
        correct: false
      - value: Concurrent requests are only possible with `AmpHttpClient`.
        correct: false
      - value: You must explicitly call `wait()` after each request.
        correct: false
    help: Symfony's HTTP Client allows sending multiple requests concurrently. The
      `request()` method returns immediately, and you can then iterate over the
      responses to consume them when they become available.
  - question: What is the primary difference between `HttpClient::create()` and `new
      NativeHttpClient()`?
    answers:
      - value: "`HttpClient::create()` automatically selects the best available
          transport; `NativeHttpClient` explicitly uses PHP streams."
        correct: true
      - value: "`HttpClient::create()` is for framework use; `NativeHttpClient` is for
          standalone scripts."
        correct: false
      - value: "`HttpClient::create()` supports HTTP/2; `NativeHttpClient` does not."
        correct: false
      - value: "`HttpClient::create()` is deprecated; `NativeHttpClient` is the
          recommended approach."
        correct: false
    help: "`HttpClient::create()` is a factory method that intelligently chooses the
      most performant transport (cURL, Amp, or native streams) based on what's
      available. `NativeHttpClient` forces the use of PHP's built-in stream
      wrappers."
  - question: Which HTTP status code indicates that the server successfully
      processed the request, but is not returning any content?
    answers:
      - value: 204 No Content
        correct: true
      - value: 200 OK
        correct: false
      - value: 202 Accepted
        correct: false
      - value: 205 Reset Content
        correct: false
    help: The 204 (No Content) status code indicates that the server has
      successfully fulfilled the request and that there is no additional content
      to send in the response payload body.
  - question: What is the purpose of
      `Symfony\Component\HttpFoundation\HeaderUtils::combine()`?
    answers:
      - value: To combine an array of key-value pairs into an associative array,
          handling multiple values for the same key.
        correct: true
      - value: To convert an associative array of headers into a string for HTTP
          transmission.
        correct: false
      - value: To parse a raw HTTP header string into an array.
        correct: false
      - value: To quote string values for use in HTTP headers.
        correct: false
    help: "`HeaderUtils::combine()` is a utility method to combine an array of
      header parts (e.g., `[['foo', 'bar'], ['baz']]`) into a more usable
      associative array (`['foo' => 'bar', 'baz' => true]`)."
  - question: When configuring a Symfony HTTP Client, how can you set a base URI for
      all requests made by that client instance?
    answers:
      - value: Use the `base_uri` option when creating the client or with
          `withOptions()`.
        correct: true
      - value: Call `$client->setBaseUri('https://example.com')`.
        correct: false
      - value: It's automatically inferred from the first request.
        correct: false
      - value: Only `ScopingHttpClient` supports base URIs.
        correct: false
    help: The `base_uri` option can be set in the client's default options, allowing
      relative URLs in subsequent requests to be resolved against this base.
  - question: Which HTTP status code indicates that the server is currently unable
      to handle the request due to a temporary overload or scheduled
      maintenance?
    answers:
      - value: 503 Service Unavailable
        correct: true
      - value: 500 Internal Server Error
        correct: false
      - value: 504 Gateway Timeout
        correct: false
      - value: 429 Too Many Requests
        correct: false
    help: The 503 (Service Unavailable) status code indicates that the server is
      currently unable to handle the request due to a temporary overload or
      scheduled maintenance, which will likely be alleviated after some delay.
  - question: What is the purpose of the `secure` flag when setting a cookie in Symfony?
    answers:
      - value: It ensures the cookie is only sent over HTTPS connections.
        correct: true
      - value: It encrypts the cookie value.
        correct: false
      - value: It prevents client-side JavaScript from accessing the cookie.
        correct: false
      - value: It makes the cookie valid for a single session only.
        correct: false
    help: The `secure` flag instructs the browser to only send the cookie over
      secure (HTTPS) connections, protecting it from eavesdropping.
  - question: Which of the following is the correct way to get the HTTP method
      (e.g., GET, POST) of an incoming request using the Symfony `Request`
      object?
    answers:
      - value: "`$request->getMethod()`"
        correct: true
      - value: "`$_SERVER['REQUEST_METHOD']`"
        correct: false
      - value: "`$request->getHttpMethod()`"
        correct: false
      - value: "`$request->method()`"
        correct: false
    help: The `getMethod()` method on the `Request` object returns the HTTP method
      of the request (e.g., 'GET', 'POST', 'PUT').
  - question: What is the purpose of the `httpOnly` flag when setting a cookie in
      Symfony?
    answers:
      - value: It prevents client-side JavaScript from accessing the cookie.
        correct: true
      - value: It ensures the cookie is only sent over HTTP connections.
        correct: false
      - value: It encrypts the cookie value before sending.
        correct: false
      - value: It makes the cookie persistent across browser sessions.
        correct: false
    help: The `httpOnly` flag prevents client-side scripts (like JavaScript) from
      accessing the cookie, which helps mitigate cross-site scripting (XSS)
      attacks.
  - question: When configuring HTTP caching, what does the `no-store` directive in
      `Cache-Control` signify?
    answers:
      - value: The response must not store any part of the request or response in any
          cache.
        correct: true
      - value: The response must be revalidated with the origin server before use.
        correct: false
      - value: The response can be cached, but only by a private cache.
        correct: false
      - value: The response is stale and should not be used.
        correct: false
    help: The `no-store` directive means that the cache should not store anything
      about the client request or the server response.
  - question: Which of the following is the correct way to retrieve an HTTP header
      value from a `Symfony\Component\HttpFoundation\Request` object?
    answers:
      - value: "`$request->headers->get('Header-Name')`"
        correct: true
      - value: "`$_SERVER['HTTP_HEADER_NAME']`"
        correct: false
      - value: "`$request->getHeader('Header-Name')`"
        correct: false
      - value: "`$request->headers['Header-Name']`"
        correct: false
    help: The `headers` property of the `Request` object is a `HeaderBag` instance,
      which provides the `get()` method to retrieve header values
      (case-insensitive).
  - question: What is the purpose of
      `Symfony\Component\HttpClient\Response\MockResponse::fromFile()`?
    answers:
      - value: To create a `MockResponse` instance by reading its body and info from a
          file.
        correct: true
      - value: To save a mock response to a file for later use.
        correct: false
      - value: To load a HAR file to generate multiple mock responses.
        correct: false
      - value: To create a response that streams content from a file.
        correct: false
    help: Introduced in Symfony 7.1, `MockResponse::fromFile()` allows creating a
      mock response directly from a file, useful for larger or pre-recorded
      response bodies in tests.
  - question: Which HTTP status code indicates that the request has been accepted
      for processing, but the processing has not been completed?
    answers:
      - value: 202 Accepted
        correct: true
      - value: 200 OK
        correct: false
      - value: 201 Created
        correct: false
      - value: 203 Non-Authoritative Information
        correct: false
    help: The 202 (Accepted) status code indicates that the request has been
      accepted for processing, but the processing has not been completed. The
      request might or might not be acted upon, and may be disallowed when
      processing actually takes place.
  - question: When using `HttpClientInterface`, how can you override a default
      client option (e.g., a header) for a specific request?
    answers:
      - value: By including the option in the third argument of the `request()` method.
        correct: true
      - value: By calling `withOptions()` on the response object.
        correct: false
      - value: By modifying the global client configuration before the request.
        correct: false
      - value: It's not possible to override options per request.
        correct: false
    help: Options provided in the third argument of the `request()` method take
      precedence over any default options configured for the HTTP client
      instance.
  - question: What is the primary purpose of the `Accept` HTTP request header?
    answers:
      - value: To specify the media types that are acceptable for the response.
        correct: true
      - value: To indicate the character sets that are acceptable for the response.
        correct: false
      - value: To specify the preferred language for the response.
        correct: false
      - value: To indicate the encoding schemes that are acceptable for the response.
        correct: false
    help: The `Accept` header is used by the client to tell the server which content
      types it can understand (e.g., `text/html`, `application/json`).
  - question: Which of the following is a valid HTTP status code for a client-side
      error indicating that the server cannot or will not process the request
      due to something that is perceived to be a client error?
    answers:
      - value: 400 Bad Request
        correct: true
      - value: 500 Internal Server Error
        correct: false
      - value: 200 OK
        correct: false
      - value: 301 Moved Permanently
        correct: false
    help: The 4xx class of status codes is intended for cases in which the client
      seems to have erred. 400 Bad Request is a generic client error.
  - question: What is the primary role of the `HttpKernel` in a Symfony application?
    answers:
      - value: To handle incoming HTTP requests and return HTTP responses.
        correct: true
      - value: To manage the application's database connections.
        correct: false
      - value: To render Twig templates.
        correct: false
      - value: To define application routes.
        correct: false
    help: The `HttpKernel` is the core of a Symfony application's request-response
      lifecycle. It takes a `Request` object and returns a `Response` object.
  - question: How can you ensure that a cookie is only accessible via HTTP requests
      and not through client-side scripting (e.g., JavaScript)?
    answers:
      - value: Set the `httpOnly` flag to `true` when creating the cookie.
        correct: true
      - value: Set the `secure` flag to `true`.
        correct: false
      - value: Set the `sameSite` attribute to `'Strict'`.
        correct: false
      - value: Encrypt the cookie value.
        correct: false
    help: The `httpOnly` flag, when set to `true`, prevents client-side scripts from
      accessing the cookie, enhancing security against XSS attacks.
  - question: Which of the following is a valid HTTP status code for a server-side error?
    answers:
      - value: 500 Internal Server Error
        correct: true
      - value: 404 Not Found
        correct: false
      - value: 302 Found
        correct: false
      - value: 200 OK
        correct: false
    help: The 5xx class of status codes indicates that the server is aware that it
      has erred or is incapable of performing the requested method.
  - question: What is the purpose of the `Accept-Encoding` HTTP request header?
    answers:
      - value: To indicate the content encoding (e.g., gzip, deflate) that the client
          can understand.
        correct: true
      - value: To specify the character set of the request body.
        correct: false
      - value: To indicate the preferred language for the response.
        correct: false
      - value: To specify the media types that are acceptable for the response.
        correct: false
    help: The `Accept-Encoding` header lists the content encodings (e.g.,
      compression algorithms) that the client can decode.
  - question: In Symfony's HTTP Client, how can you send a file as the request body?
    answers:
      - value: By passing a file resource (e.g., `fopen()`) to the `body` option.
        correct: true
      - value: By passing the file path to the `file` option.
        correct: false
      - value: By using `FormDataPart` and setting the file content.
        correct: true
      - value: By reading the file content into a string and passing it to `body`.
        correct: true
    help: The `body` option can accept a PHP resource (like a file handle), a
      `FormDataPart` object for multipart/form-data, or simply the file's
      content as a string.
  - question: What is the purpose of the `sameSite` attribute for cookies?
    answers:
      - value: To mitigate Cross-Site Request Forgery (CSRF) attacks by controlling when
          cookies are sent with cross-site requests.
        correct: true
      - value: To ensure cookies are only sent over secure (HTTPS) connections.
        correct: false
      - value: To prevent client-side JavaScript from accessing the cookie.
        correct: false
      - value: To define the domain for which the cookie is valid.
        correct: false
    help: The `SameSite` attribute helps prevent CSRF attacks by restricting when
      cookies are sent with requests initiated from different origins.
