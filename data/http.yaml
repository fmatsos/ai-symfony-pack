category: HTTP

questions:
  -
    question: >
      Which Symfony component is primarily responsible for handling incoming HTTP requests and outgoing HTTP responses in an object-oriented way?
    answers:
      - { value: "Symfony\\Component\\HttpFoundation", correct: true }
      - { value: "Symfony\\Component\\Routing", correct: false }
      - { value: "Symfony\\Component\\HttpKernel", correct: false }
      - { value: "Symfony\\Component\\HttpClient", correct: false }
    help: |
      The HttpFoundation component provides a robust object-oriented layer for the HTTP specification, abstracting away the raw PHP superglobals and functions.
      https://symfony.com/doc/current/components/http_foundation.html

  -
    question: |
      Given the following code, how would you retrieve the value of the 'name' query parameter from the URL `/index.php?name=Fabien`?

      ```php
      use Symfony\Component\HttpFoundation\Request;

      $request = Request::createFromGlobals();
      // ... retrieve 'name' parameter
      ```
    answers:
      - { value: "`$request->query->get('name');`", correct: true }
      - { value: "`$request->request->get('name');`", correct: false }
      - { value: "`$request->attributes->get('name');`", correct: false }
      - { value: "`$request->get('name');`", correct: false }
    help: |
      Query parameters (from $_GET) are accessed via the `query` property of the Request object.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#access-http-request-data-with-symfony-request-object

  -
    question: >
      What is the HTTP status code for a successful request where a new resource has been created?
    answers:
      - { value: "200 OK", correct: false }
      - { value: "201 Created", correct: true }
      - { value: "204 No Content", correct: false }
      - { value: "302 Found", correct: false }
    help: |
      The 201 (Created) status code indicates that the request has been fulfilled and has resulted in one or more new resources being created.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/201

  -
    question: >
      Which HTTP method is typically used to retrieve data from a server and is considered idempotent and safe?
    answers:
      - { value: "POST", correct: false }
      - { value: "PUT", correct: false }
      - { value: "GET", correct: true }
      - { value: "DELETE", correct: false }
    help: |
      GET requests are used to retrieve data and are considered safe (they don't change server state) and idempotent (multiple identical requests have the same effect as a single one).
      https://symfony.com/doc/current/introduction/http_fundamentals.html#http-methods

  -
    question: >
      When setting a cookie using `Symfony\\Component\\HttpFoundation\\Cookie::create()`, which parameter controls whether the cookie is accessible only via HTTP(S) requests and not via client-side scripts (e.g., JavaScript)?
    answers:
      - { value: "secure", correct: false }
      - { value: "httpOnly", correct: true }
      - { value: "sameSite", correct: false }
      - { value: "raw", correct: false }
    help: |
      The `httpOnly` parameter, when set to `true`, prevents client-side scripts from accessing the cookie, mitigating XSS attacks.
      https://symfony.com/doc/current/components/http_foundation.html#_snippet_44

  -
    question: >
      Which HTTP header is used by a client to indicate its preferred natural languages for the content of the response?
    answers:
      - { value: "Content-Type", correct: false }
      - { value: "Accept", correct: false }
      - { value: "Accept-Language", correct: true }
      - { value: "User-Agent", correct: false }
    help: |
      The `Accept-Language` header is used for content negotiation to specify the user's preferred languages.
      https://symfony.com/doc/current/components/http_foundation.html#_snippet_22

  -
    question: >
      What is the purpose of the `#[Cache]` attribute in a Symfony controller method?
    answers:
      - { value: "To define the cache directory for the controller's templates.", correct: false }
      - { value: "To configure HTTP cache headers directly on the response generated by the method.", correct: true }
      - { value: "To enable internal Symfony caching for service injection.", correct: false }
      - { value: "To mark the controller as cacheable by the Symfony internal cache.", correct: false }
    help: |
      The `#[Cache]` attribute allows you to configure HTTP cache-related headers (like `Cache-Control`) declaratively on your controller actions.
      https://symfony.com/doc/current/http_cache/expiration.html#_snippet_0

  -
    question: >
      Which of the following is the recommended way to inject the Symfony HTTP Client into a service in a Symfony application?
    answers:
      - { value: "Type-hinting `Symfony\\Component\\HttpClient\\HttpClient` in the constructor.", correct: false }
      - { value: "Type-hinting `Psr\\Http\\Client\\HttpClientInterface` in the constructor.", correct: false }
      - { value: "Type-hinting `Symfony\\Contracts\\HttpClient\\HttpClientInterface` in the constructor.", correct: true }
      - { value: "Using the `#[Required]` attribute with a service ID.", correct: false }
    help: |
      `HttpClientInterface` from `symfony/http-client-contracts` is the recommended abstraction for autowiring the HTTP client.
      https://symfony.com/doc/current/http_client.html#_snippet_66

  -
    question: |
      You are making an HTTP request using Symfony's HttpClient. You want to send a JSON payload in the request body. Which option should you use?

      ```php
      $response = $client->request('POST', 'https://api.example.com/data', [
          // ... options here
      ]);
      ```
    answers:
      - { value: "`'json' => ['key' => 'value']`", correct: true }
      - { value: "`'body' => json_encode(['key' => 'value'])`", correct: true }
      - { value: "`'form_params' => ['key' => 'value']`", correct: false }
      - { value: "`'data' => ['key' => 'value']`", correct: false }
    help: |
      The `json` option automatically encodes the array into JSON and sets the `Content-Type` header to `application/json`. Alternatively, you can manually `json_encode` the data and set it to the `body` option.
      https://symfony.com/doc/current/http_client.html#json-body

  -
    question: >
      What is the primary benefit of using `HttpClientInterface::stream()` for large HTTP responses?
    answers:
      - { value: "It automatically decompresses the response content.", correct: false }
      - { value: "It allows processing the response content chunk by chunk, preventing memory exhaustion.", correct: true }
      - { value: "It caches the entire response in memory for faster access.", correct: false }
      - { value: "It converts the response to an array automatically.", correct: false }
    help: |
      The `stream()` method is designed for handling large responses efficiently by processing them in chunks, which is crucial for memory management.
      https://symfony.com/doc/current/http_client.html#_snippet_47

  -
    question: >
      Which HTTP status code indicates that the requested resource has been permanently moved to a new URI?
    answers:
      - { value: "301 Moved Permanently", correct: true }
      - { value: "302 Found", correct: false }
      - { value: "303 See Other", correct: false }
      - { value: "307 Temporary Redirect", correct: false }
    help: |
      The 301 status code signifies a permanent redirect, and clients should update their links to the new URI.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/301

  -
    question: |
      To access HTTP request headers in Symfony, which property of the `Request` object should you use?

      ```php
      use Symfony\Component\HttpFoundation\Request;

      $request = Request::createFromGlobals();
      // ... access headers
      ```
    answers:
      - { value: "`$request->headers`", correct: true }
      - { value: "`$request->server`", correct: false }
      - { value: "`$request->attributes`", correct: false }
      - { value: "`$request->query`", correct: false }
    help: |
      The `headers` property of the `Request` object provides access to HTTP request headers.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#access-http-request-data-with-symfony-request-object

  -
    question: >
      What is the purpose of the `Vary` HTTP response header?
    answers:
      - { value: "To specify the acceptable content types for the response.", correct: false }
      - { value: "To indicate that the response content varies depending on specified request headers, affecting caching.", correct: true }
      - { value: "To define the encoding of the response body.", correct: false }
      - { value: "To set the expiration time for the cached response.", correct: false }
    help: |
      The `Vary` header informs caches that the response is dependent on the values of specified request headers, meaning different cached versions should be stored for different values of those headers.
      https://symfony.com/doc/current/http_cache/cache_vary.html

  -
    question: >
      Which Symfony HTTP Client option allows you to send form data (key-value pairs) with a `POST` request, automatically setting the `Content-Type` to `application/x-www-form-urlencoded`?
    answers:
      - { value: "`'json'`", correct: false }
      - { value: "`'body'`", correct: true }
      - { value: "`'form_fields'`", correct: false }
      - { value: "`'query'`", correct: false }
    help: |
      When the `'body'` option is an array, HttpClient automatically sends it as `application/x-www-form-urlencoded`.
      https://symfony.com/doc/current/http_client.html#_snippet_18

  -
    question: >
      Which HTTP status code indicates that the server cannot find the requested resource?
    answers:
      - { value: "400 Bad Request", correct: false }
      - { value: "401 Unauthorized", correct: false }
      - { value: "403 Forbidden", correct: false }
      - { value: "404 Not Found", correct: true }
    help: |
      The 404 (Not Found) status code is a common response when the server cannot locate the requested resource.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404

  -
    question: |
      Consider the following code snippet for setting a cookie:

      ```php
      use Symfony\Component\HttpFoundation\Cookie;
      use Symfony\Component\HttpFoundation\Response;

      $response = new Response();
      $cookie = Cookie::create('my_cookie', 'my_value', time() + 3600);
      $response->headers->setCookie($cookie);
      ```

      Which method on the `Response` object's `headers` property is used to remove a cookie?
    answers:
      - { value: "`deleteCookie()`", correct: false }
      - { value: "`removeCookie()`", correct: false }
      - { value: "`clearCookie()`", correct: true }
      - { value: "`unsetCookie()`", correct: false }
    help: |
      The `clearCookie()` method of `ResponseHeaderBag` is used to instruct the client to remove a cookie.
      https://symfony.com/doc/current/components/http_foundation.html#_snippet_44

  -
    question: >
      What is the primary purpose of the `Symfony\\Component\\HttpClient\\MockHttpClient`?
    answers:
      - { value: "To send HTTP requests to a real external API.", correct: false }
      - { value: "To simulate HTTP responses for testing purposes without making actual network calls.", correct: true }
      - { value: "To automatically generate HTTP request and response logs.", correct: false }
      - { value: "To provide a graphical interface for HTTP client interactions.", correct: false }
    help: |
      `MockHttpClient` is an implementation of `HttpClientInterface` specifically designed for testing, allowing you to define predefined or dynamically generated responses.
      https://symfony.com/doc/current/http_client.html#_snippet_83

  -
    question: >
      Which HTTP status code indicates that the request could not be understood by the server due to malformed syntax?
    answers:
      - { value: "400 Bad Request", correct: true }
      - { value: "403 Forbidden", correct: false }
      - { value: "405 Method Not Allowed", correct: false }
      - { value: "422 Unprocessable Entity", correct: false }
    help: |
      The 400 (Bad Request) status code means the server cannot or will not process the request due to something that is perceived to be a client error.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400

  -
    question: |
      You need to retrieve the raw content of an HTTP POST request body (e.g., an XML string). Which method of the `Request` object should you use?

      ```php
      use Symfony\Component\HttpFoundation\Request;

      $request = Request::createFromGlobals();
      $content = // ... retrieve raw body
      ```
    answers:
      - { value: "`$request->getPayload()->all();`", correct: false }
      - { value: "`$request->request->all();`", correct: false }
      - { value: "`$request->getContent();`", correct: true }
      - { value: "`$request->getRawBody();`", correct: false }
    help: |
      The `getContent()` method returns the raw body of the request, useful for non-form data.
      https://symfony.com/doc/current/components/http_foundation.html#_snippet_10

  -
    question: >
      What is the default HTTP version used by Symfony's HttpClient if not explicitly configured?
    answers:
      - { value: "HTTP/1.0", correct: false }
      - { value: "HTTP/1.1", correct: true }
      - { value: "HTTP/2.0", correct: false }
      - { value: "HTTP/3.0", correct: false }
    help: |
      By default, Symfony's HttpClient uses HTTP/1.1. You need to explicitly set `http_version: '2.0'` to enable HTTP/2.
      https://symfony.com/doc/current/http_client.html#http-2-support

  -
    question: >
      Which HTTP status code indicates that the client must authenticate itself to get the requested response?
    answers:
      - { value: "401 Unauthorized", correct: true }
      - { value: "403 Forbidden", correct: false }
      - { value: "407 Proxy Authentication Required", correct: false }
      - { value: "419 Authentication Timeout", correct: false }
    help: |
      The 401 (Unauthorized) status code means that the client needs to authenticate to get the requested response.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/401

  -
    question: >
      To make an HTTP client instance use HTTP/2 for all requests, which option should be set in its configuration?
    answers:
      - { value: "`'version' => '2.0'`", correct: false }
      - { value: "`'http_protocol' => '2.0'`", correct: false }
      - { value: "`'http_version' => '2.0'`", correct: true }
      - { value: "`'protocol_version' => '2.0'`", correct: false }
    help: |
      The `http_version` option is used to specify the HTTP protocol version, including '2.0' for HTTP/2.
      https://symfony.com/doc/current/http_client.html#_snippet_44

  -
    question: >
      Which method of `Symfony\\Component\\HttpFoundation\\Response` is used to check if the response validators (ETag, Last-Modified) match a conditional value in the client's `Request`?
    answers:
      - { value: "`isFresh()`", correct: false }
      - { value: "`isModified()`", correct: false }
      - { value: "`isNotModified()`", correct: true }
      - { value: "`validate()`", correct: false }
    help: |
      The `isNotModified()` method is crucial for implementing conditional GET requests and returning a 304 Not Modified response.
      https://symfony.com/doc/current/components/http_foundation.html#_snippet_44

  -
    question: >
      When using Symfony's HttpClient, what is the default behavior regarding response content retrieval after a `request()` call?
    answers:
      - { value: "The content is immediately downloaded and available.", correct: false }
      - { value: "The request is sent, but the content is only downloaded when `getContent()` or `toArray()` is called.", correct: true }
      - { value: "The content is streamed to a temporary file by default.", correct: false }
      - { value: "The request is blocked until the full response is received.", correct: false }
    help: |
      HttpClient responses are lazy; the content is only fetched when explicitly requested via `getContent()`, `toArray()`, or `toStream()`.
      https://symfony.com/doc/current/http_client.html#_snippet_10

  -
    question: >
      Which HTTP status code indicates that the server understands the request but refuses to authorize it?
    answers:
      - { value: "401 Unauthorized", correct: false }
      - { value: "403 Forbidden", correct: true }
      - { value: "405 Method Not Allowed", correct: false }
      - { value: "408 Request Timeout", correct: false }
    help: |
      The 403 (Forbidden) status code means the client does not have access rights to the content.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403

  -
    question: |
      You want to simulate an HTTP request for testing purposes without relying on global variables. Which static method of `Symfony\\Component\\HttpFoundation\\Request` allows you to create a request object programmatically?

      ```php
      use Symfony\Component\HttpFoundation\Request;

      $request = // ... create request
      ```
    answers:
      - { value: "`Request::fromArray()`", correct: false }
      - { value: "`Request::create()`", correct: true }
      - { value: "`Request::simulate()`", correct: false }
      - { value: "`Request::build()`", correct: false }
    help: |
      `Request::create()` is used to programmatically construct a `Request` object, useful for testing or internal dispatching.
      https://symfony.com/doc/current/components/http_foundation.html#_snippet_14

  -
    question: >
      What is the primary purpose of the `Content-Type` HTTP header in a response?
    answers:
      - { value: "To specify the acceptable content types the client can handle.", correct: false }
      - { value: "To indicate the original URL of the requested resource.", correct: false }
      - { value: "To describe the media type of the resource sent to the client.", correct: true }
      - { value: "To set the character encoding of the response body.", correct: false }
    help: |
      The `Content-Type` header specifies the media type (e.g., `text/html`, `application/json`) of the resource.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#http-response-example-with-html-content

  -
    question: >
      Which of the following HTTP methods is considered both idempotent and safe?
    answers:
      - { value: "POST", correct: false }
      - { value: "PUT", correct: false }
      - { value: "DELETE", correct: false }
      - { value: "HEAD", correct: true }
    help: |
      HEAD requests are similar to GET but only retrieve the response headers, not the body, making them safe and idempotent.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/HEAD

  -
    question: >
      When configuring a Symfony HTTP Client, which option is used to set a default base URI for all requests made by that client instance?
    answers:
      - { value: "`'base_url'`", correct: false }
      - { value: "`'uri_prefix'`", correct: false }
      - { value: "`'base_uri'`", correct: true }
      - { value: "`'default_uri'`", correct: false }
    help: |
      The `base_uri` option allows you to define a common base URL for all requests, simplifying relative URL usage.
      https://symfony.com/doc/current/http_client.html#_snippet_32

  -
    question: >
      Which HTTP status code indicates that the server encountered an unexpected condition that prevented it from fulfilling the request?
    answers:
      - { value: "404 Not Found", correct: false }
      - { value: "400 Bad Request", correct: false }
      - { value: "500 Internal Server Error", correct: true }
      - { value: "503 Service Unavailable", correct: false }
    help: |
      The 500 (Internal Server Error) status code is a generic error message, given when an unexpected condition was encountered and no more specific message is suitable.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500

  -
    question: |
      You want to set a `Cache-Control` header for a response to `public, max-age=3600`. Which of the following programmatic approaches using `Symfony\\Component\\HttpFoundation\\Response` is correct?

      ```php
      use Symfony\Component\HttpFoundation\Response;

      $response = new Response();
      // ... set cache headers
      ```
    answers:
      - { value: "`$response->setCache(['public' => true, 'max_age' => 3600]);`", correct: true }
      - { value: "`$response->setPublic(true)->setMaxAge(3600);`", correct: true }
      - { value: "`$response->headers->set('Cache-Control', 'public, max-age=3600');`", correct: true }
      - { value: "`$response->setCacheControl('public', 3600);`", correct: false }
    help: |
      Symfony's `Response` object provides several convenient methods (`setPublic`, `setMaxAge`, `setCache`) to manage cache-related headers, or you can set the header directly.
      https://symfony.com/doc/current/components/http_foundation.html#_snippet_44

  -
    question: >
      What is the purpose of the `HttpClientInterface::cancel()` method?
    answers:
      - { value: "To cancel a request before it is sent.", correct: false }
      - { value: "To stop an ongoing HTTP request and discard its response.", correct: true }
      - { value: "To clear the client's internal request queue.", correct: false }
      - { value: "To revert the client to its initial configuration.", correct: false }
    help: |
      The `cancel()` method allows you to abort an ongoing request, which is useful for implementing timeouts or partial content fetching.
      https://symfony.com/doc/current/http_client.html#_snippet_48

  -
    question: >
      Which HTTP status code indicates that the requested resource has not been modified since the last request, allowing the client to use its cached version?
    answers:
      - { value: "200 OK", correct: false }
      - { value: "304 Not Modified", correct: true }
      - { value: "203 Non-Authoritative Information", correct: false }
      - { value: "412 Precondition Failed", correct: false }
    help: |
      The 304 (Not Modified) status code is used in conjunction with conditional requests (e.g., `If-None-Match`, `If-Modified-Since`) to tell the client that its cached version is still valid.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/304

  -
    question: >
      Which of the following is NOT a valid authentication option for Symfony's HttpClient?
    answers:
      - { value: "`auth_basic`", correct: false }
      - { value: "`auth_bearer`", correct: false }
      - { value: "`auth_digest`", correct: true }
      - { value: "`auth_ntlm`", correct: false }
    help: |
      Symfony's HttpClient supports Basic, Bearer, and NTLM authentication out of the box. Digest authentication is not directly supported as a built-in option.
      https://symfony.com/doc/current/http_client.html#_snippet_12

  -
    question: >
      What is the purpose of the `ETag` HTTP header in the context of caching?
    answers:
      - { value: "To specify the expiration date of the response.", correct: false }
      - { value: "To provide a unique identifier for a specific version of a resource, used for conditional requests.", correct: true }
      - { value: "To indicate the last time the resource was modified.", correct: false }
      - { value: "To define the maximum age a cached response can be considered fresh.", correct: false }
    help: |
      The `ETag` (Entity Tag) is an opaque identifier assigned by a web server to a specific version of a resource found at a URL. It's used for conditional requests to determine if the resource has changed.
      https://symfony.com/doc/current/components/http_foundation.html#_snippet_44

  -
    question: >
      When using `HttpClientInterface::stream()`, what does `ChunkInterface::isFirst()` indicate?
    answers:
      - { value: "It's the first chunk of the response body.", correct: false }
      - { value: "The response headers have just been received.", correct: true }
      - { value: "The entire response has been received.", correct: false }
      - { value: "The stream has timed out.", correct: false }
    help: |
      `isFirst()` returns `true` for the first chunk yielded, which means the HTTP headers have arrived.
      https://symfony.com/doc/current/http_client.html#_snippet_54

  -
    question: >
      Which HTTP method is typically used to submit data to be processed to a specified resource, often resulting in a change in state or a new resource being created?
    answers:
      - { value: "GET", correct: false }
      - { value: "PUT", correct: false }
      - { value: "POST", correct: true }
      - { value: "DELETE", correct: false }
    help: |
      POST requests are commonly used to send data to the server, for example, when submitting a form or uploading a file.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#http-methods

  -
    question: >
      What is the primary role of `Symfony\\Component\\HttpFoundation\\StreamedResponse`?
    answers:
      - { value: "To send a response as a single, complete string.", correct: false }
      - { value: "To allow sending the HTTP response content incrementally to the client.", correct: true }
      - { value: "To redirect the client to another URL.", correct: false }
      - { value: "To serve static files directly from the filesystem.", correct: false }
    help: |
      `StreamedResponse` is designed for scenarios where the response content is generated dynamically or is very large, allowing it to be sent in chunks.
      https://symfony.com/doc/current/components/http_foundation.html#_snippet_54

  -
    question: >
      Which of the following is the correct Composer command to install the Symfony HTTP Client component?
    answers:
      - { value: "`composer install symfony/http-client`", correct: false }
      - { value: "`composer require symfony/http-client`", correct: true }
      - { value: "`composer add symfony/http-client`", correct: false }
      - { value: "`composer update symfony/http-client`", correct: false }
    help: |
      The `composer require` command is used to add new packages to your project's `composer.json` and install them.
      https://symfony.com/doc/current/http_client.html#_snippet_0

  -
    question: >
      When configuring default options for Symfony's HttpClient in `framework.yaml`, which key is used to define global headers?
    answers:
      - { value: "`default_headers`", correct: false }
      - { value: "`headers`", correct: true }
      - { value: "`global_headers`", correct: false }
      - { value: "`request_headers`", correct: false }
    help: |
      Under `http_client.default_options`, the `headers` key is used to define default HTTP headers.
      https://symfony.com/doc/current/http_client.html#_snippet_16

  -
    question: >
      What does the `HttpClientInterface::toArray()` method do with the response content?
    answers:
      - { value: "It converts the response body to a string.", correct: false }
      - { value: "It casts the response JSON content to a PHP array.", correct: true }
      - { value: "It returns the response headers as an associative array.", correct: false }
      - { value: "It converts the response to a stream resource.", correct: false }
    help: |
      The `toArray()` method is a convenience method for parsing JSON response bodies into PHP arrays.
      https://symfony.com/doc/current/http_client.html#_snippet_46

  -
    question: >
      Which HTTP status code indicates that the request method is not supported for the requested resource?
    answers:
      - { value: "400 Bad Request", correct: false }
      - { value: "403 Forbidden", correct: false }
      - { value: "405 Method Not Allowed", correct: true }
      - { value: "406 Not Acceptable", correct: false }
    help: |
      The 405 (Method Not Allowed) status code means the HTTP method used in the request is not supported for the resource identified by the URI.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/405

  -
    question: >
      What is the primary difference between `HttpClient::create()` and `HttpClient::createForBaseUri()`?
    answers:
      - { value: "`create()` is for standalone use, `createForBaseUri()` requires a Symfony container.", correct: false }
      - { value: "`create()` creates a generic client, `createForBaseUri()` creates a client with a predefined base URL and options.", correct: true }
      - { value: "`create()` supports only GET requests, `createForBaseUri()` supports all methods.", correct: false }
      - { value: "`create()` is synchronous, `createForBaseUri()` is asynchronous.", correct: false }
    help: |
      `createForBaseUri()` is a factory method that simplifies setting up a client with a specific base URI and associated default options.
      https://symfony.com/doc/current/http_client.html#_snippet_9

  -
    question: >
      When a Symfony `Response` object's `expire()` method is called, what is its effect on HTTP caching?
    answers:
      - { value: "It sets the `Cache-Control` header to `no-cache`.", correct: false }
      - { value: "It sets the `Expires` header to a past date, effectively marking the response as immediately stale.", correct: true }
      - { value: "It removes all caching headers from the response.", correct: false }
      - { value: "It forces the client to revalidate the response with the server.", correct: false }
    help: |
      The `expire()` method sets the `Expires` header to a date in the past, indicating that the response is no longer fresh and must be revalidated.
      https://symfony.com/doc/current/http_cache.html#_snippet_3

  -
    question: >
      Which `HttpClientInterface` method is used to retrieve transport-layer information about a response, such as `response_headers`, `redirect_count`, or `start_time`?
    answers:
      - { value: "`getMetadata()`", correct: false }
      - { value: "`getInfo()`", correct: true }
      - { value: "`getTransportInfo()`", correct: false }
      - { value: "`getDebugInfo()`", correct: false }
    help: |
      The `getInfo()` method provides access to various details about the request and response from the underlying HTTP transport.
      https://symfony.com/doc/current/http_client.html#_snippet_46

  -
    question: >
      What is the role of the `User-Agent` HTTP request header?
    answers:
      - { value: "To specify the preferred language of the client.", correct: false }
      - { value: "To indicate the type of content the client expects.", correct: false }
      - { value: "To identify the client software (e.g., browser, bot) making the request.", correct: true }
      - { value: "To provide authentication credentials.", correct: false }
    help: |
      The `User-Agent` string allows the server to identify the operating system and software of the client.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#http-get-request-example

  -
    question: >
      Which of the following classes is specifically designed for testing HTTP client interactions by allowing predefined or dynamically generated responses?
    answers:
      - { value: "Symfony\\Component\\HttpClient\\TestClient", correct: false }
      - { value: "Symfony\\Component\\HttpClient\\MockHttpClient", correct: true }
      - { value: "Symfony\\Component\\HttpClient\\FakeHttpClient", correct: false }
      - { value: "Symfony\\Component\\HttpClient\\StubHttpClient", correct: false }
    help: |
      `MockHttpClient` is the dedicated class for mocking HTTP client responses in tests.
      https://symfony.com/doc/current/http_client.html#_snippet_83

  -
    question: >
      When using `HttpClientInterface::request()`, which option allows you to add query string parameters to the URL?
    answers:
      - { value: "`'params'`", correct: false }
      - { value: "`'query'`", correct: true }
      - { value: "`'url_params'`", correct: false }
      - { value: "`'get_params'`", correct: false }
    help: |
      The `query` option is used to define key-value pairs that will be appended as URL-encoded query parameters.
      https://symfony.com/doc/current/http_client.html#_snippet_14

  -
    question: >
      Which of the following is a valid way to send concurrent HTTP requests using Symfony's HttpClient?
    answers:
      - { value: "Call `request()` in a loop and then iterate over the responses to read content.", correct: true }
      - { value: "Use `HttpClient::parallelRequest()` method.", correct: false }
      - { value: "Each `request()` call automatically waits for the previous one to complete.", correct: false }
      - { value: "Wrap each request in a `Promise::all()` call.", correct: false }
    help: |
      HttpClient's `request()` method is asynchronous. You can initiate multiple requests and then iterate over the response objects to retrieve their content, which will block only when content is actually needed.
      https://symfony.com/doc/current/http_client.html#_snippet_50

  -
    question: >
      Which HTTP status code indicates that the server is currently unable to handle the request due to a temporary overload or scheduled maintenance?
    answers:
      - { value: "500 Internal Server Error", correct: false }
      - { value: "502 Bad Gateway", correct: false }
      - { value: "503 Service Unavailable", correct: true }
      - { value: "504 Gateway Timeout", correct: false }
    help: |
      The 503 (Service Unavailable) status code indicates that the server is not ready to handle the request.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503

  -
    question: >
      What is the purpose of the `Last-Modified` HTTP header in a response?
    answers:
      - { value: "To indicate the date and time the response was generated.", correct: false }
      - { value: "To specify the date and time the resource was last modified on the server.", correct: true }
      - { value: "To set the expiration date for the cached response.", correct: false }
      - { value: "To define how long the response can be cached by a proxy.", correct: false }
    help: |
      The `Last-Modified` header provides a timestamp indicating when the resource was last changed, used for conditional requests with `If-Modified-Since`.
      https://symfony.com/doc/current/components/http_foundation.html#_snippet_44

  -
    question: >
      Which method of `Symfony\\Component\\HttpFoundation\\Request` returns an array of languages the client accepts, ordered by descending quality?
    answers:
      - { value: "`getPreferredLanguage()`", correct: false }
      - { value: "`getLanguages()`", correct: true }
      - { value: "`getAcceptLanguage()`", correct: false }
      - { value: "`getClientLanguages()`", correct: false }
    help: |
      The `getLanguages()` method parses the `Accept-Language` header and returns the languages in order of preference.
      https://symfony.com/doc/current/components/http_foundation.html#_snippet_22

  -
    question: >
      When using `Symfony\\Component\\HttpClient\\MockHttpClient`, which method on a `MockResponse` object allows you to inspect the HTTP method of the simulated request?
    answers:
      - { value: "`getMethod()`", correct: false }
      - { value: "`getRequestMethod()`", correct: true }
      - { value: "`getSimulatedMethod()`", correct: false }
      - { value: "`getHttpClientMethod()`", correct: false }
    help: |
      `MockResponse::getRequestMethod()` provides access to the HTTP method that was used in the mock request.
      https://symfony.com/doc/current/http_client.html#_snippet_95

  -
    question: >
      What is the primary function of the `Symfony\\Component\\HttpKernel\\HttpKernel` class?
    answers:
      - { value: "To manage database connections.", correct: false }
      - { value: "To handle an incoming `Request` and return a `Response` by dispatching events and calling a controller.", correct: true }
      - { value: "To render Twig templates.", correct: false }
      - { value: "To manage user authentication and authorization.", correct: false }
    help: |
      `HttpKernel` is the core of a Symfony application, orchestrating the request-response lifecycle.
      https://symfony.com/doc/current/components/http_kernel.html#_snippet_3

  -
    question: >
      Which of the following HTTP methods is considered idempotent but NOT safe?
    answers:
      - { value: "GET", correct: false }
      - { value: "POST", correct: false }
      - { value: "PUT", correct: true }
      - { value: "HEAD", correct: false }
    help: |
      PUT is idempotent (applying it multiple times has the same effect as applying it once) but not safe (it modifies the server state).
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PUT

  -
    question: >
      What is the purpose of the `Expires` HTTP header in the context of caching?
    answers:
      - { value: "To specify the maximum age of a cached response.", correct: false }
      - { value: "To indicate the date/time after which the response is considered stale.", correct: true }
      - { value: "To provide a unique identifier for the cached resource.", correct: false }
      - { value: "To define the caching behavior for shared caches only.", correct: false }
    help: |
      The `Expires` header provides a date/time after which the response is considered stale.
      https://symfony.com/doc/current/components/http_foundation.html#_snippet_44

  -
    question: |
      You are configuring a Symfony HTTP Client and want to apply HTTP Basic authentication globally. In a YAML configuration, which option would you use?

      ```yaml
      # config/packages/framework.yaml
      framework:
          http_client:
              scoped_clients:
                  example_api:
                      base_uri: 'https://example.com/'
                      # ... authentication option here
      ```
    answers:
      - { value: "`auth_basic: 'username:password'`", correct: true }
      - { value: "`basic_auth: 'username:password'`", correct: false }
      - { value: "`authentication: 'basic:username:password'`", correct: false }
      - { value: "`http_basic: 'username:password'`", correct: false }
    help: |
      The `auth_basic` option is used to configure HTTP Basic authentication for scoped clients.
      https://symfony.com/doc/current/http_client.html#_snippet_12

  -
    question: >
      Which `Symfony\\Component\\HttpClient` class is used to create a client that automatically expands URI templates (e.g., `/users/{id}`)?
    answers:
      - { value: "TemplateHttpClient", correct: false }
      - { value: "UriTemplateHttpClient", correct: true }
      - { value: "PathHttpClient", correct: false }
      - { value: "RouteHttpClient", correct: false }
    help: |
      `UriTemplateHttpClient` is specifically designed to work with URI templates, replacing variables with provided values.
      https://symfony.com/doc/current/http_client.html#_snippet_36

  -
    question: >
      What is the primary purpose of the `Accept` HTTP request header?
    answers:
      - { value: "To specify the character sets that are acceptable for the response.", correct: false }
      - { value: "To indicate the media types (e.g., `text/html`, `application/json`) that are acceptable for the response.", correct: true }
      - { value: "To define the language preferences of the client.", correct: false }
      - { value: "To specify the encoding methods that are acceptable for the response.", correct: false }
    help: |
      The `Accept` header is used by clients to tell the server which content types they can process.
      https://symfony.com/doc/current/components/http_foundation.html#_snippet_22

  -
    question: >
      When creating a `Symfony\\Component\\HttpFoundation\\Response` object, which argument is used to set the HTTP status code?
    answers:
      - { value: "The first argument (content).", correct: false }
      - { value: "The second argument (status code).", correct: true }
      - { value: "The third argument (headers).", correct: false }
      - { value: "There is a dedicated `setStatus()` method.", correct: false }
    help: |
      The constructor of `Response` accepts content, status code, and headers in that order.
      https://symfony.com/doc/current/components/http_foundation.html#_snippet_30

  -
    question: >
      Which of the following is the correct way to retrieve the HTTP method (e.g., GET, POST) of the current request using the `Symfony\\Component\\HttpFoundation\\Request` object?
    answers:
      - { value: "`$request->getMethod();`", correct: true }
      - { value: "`$request->httpMethod();`", correct: false }
      - { value: "`$request->getVerb();`", correct: false }
      - { value: "`$request->requestMethod();`", correct: false }
    help: |
      The `getMethod()` method returns the HTTP method of the request as a string.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#access-http-request-data-with-symfony-request-object

  -
    question: >
      What is the primary purpose of the `Symfony\\Component\\HttpClient\\ThrottlingHttpClient`?
    answers:
      - { value: "To limit the number of concurrent requests to an API.", correct: true }
      - { value: "To automatically retry failed requests.", correct: false }
      - { value: "To add a delay before sending each request.", correct: false }
      - { value: "To log all outgoing HTTP requests.", correct: false }
    help: |
      `ThrottlingHttpClient` (introduced in Symfony 7.1) is used to control the rate of requests, preventing API rate limits from being hit.
      https://symfony.com/doc/current/http_client.html#_snippet_65

  -
    question: >
      When using `HttpClientInterface::request()`, how can you override a default client header for a specific request?
    answers:
      - { value: "By setting the header in the `headers` option of the request, which takes precedence.", correct: true }
      - { value: "It's not possible to override default headers per request.", correct: false }
      - { value: "By using the `override_headers` option.", correct: false }
      - { value: "By calling `client->removeHeader()` before the request.", correct: false }
    help: |
      Request-specific options, including headers, always override default options configured on the client.
      https://symfony.com/doc/current/http_client.html#_snippet_17

  -
    question: >
      Which of the following `Symfony\\Component\\HttpClient` classes uses the cURL PHP extension for making HTTP requests?
    answers:
      - { value: "NativeHttpClient", correct: false }
      - { value: "CurlHttpClient", correct: true }
      - { value: "AmpHttpClient", correct: false }
      - { value: "SocketHttpClient", correct: false }
    help: |
      `CurlHttpClient` leverages the cURL extension for its HTTP transport.
      https://symfony.com/doc/current/http_client.html#_snippet_41

  -
    question: >
      What is the purpose of the `SameSite` attribute for HTTP cookies?
    answers:
      - { value: "To restrict cookies to be sent only over HTTPS.", correct: false }
      - { value: "To prevent cross-site request forgery (CSRF) attacks by controlling when cookies are sent with cross-site requests.", correct: true }
      - { value: "To limit the cookie's visibility to a specific subdomain.", correct: false }
      - { value: "To ensure the cookie is only sent with requests from the same origin.", correct: false }
    help: |
      The `SameSite` attribute enhances security by controlling whether cookies are sent with cross-site requests, helping to mitigate CSRF.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite

  -
    question: >
      Which HTTP status code indicates that the request has been successfully processed, but there is no content to send back in the response body?
    answers:
      - { value: "200 OK", correct: false }
      - { value: "201 Created", correct: false }
      - { value: "204 No Content", correct: true }
      - { value: "202 Accepted", correct: false }
    help: |
      The 204 (No Content) status code is used when the server successfully processed the request, but is not returning any content.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/204

  -
    question: >
      When testing a Symfony application, how can you simulate an HTTP request with specific cookies using `Symfony\\Component\\BrowserKit\\AbstractBrowser::request()`?
    answers:
      - { value: "By passing a `Cookie` object or a formatted cookie string in the `serverParameters` array with the key `HTTP_COOKIE`.", correct: true }
      - { value: "By using the `cookies` option in the request method.", correct: false }
      - { value: "By setting `$_COOKIE` superglobal before the request.", correct: false }
      - { value: "By calling `setCookie()` on the `AbstractBrowser` instance.", correct: false }
    help: |
      The `serverParameters` argument allows setting various server variables, including `HTTP_COOKIE` for simulating cookies.
      https://symfony.com/doc/current/components/browser_kit.html#_snippet_24

  -
    question: >
      What is the primary difference between `HttpClientInterface::getContent()` and `HttpClientInterface::toStream()`?
    answers:
      - { value: "`getContent()` returns a string, `toStream()` returns a resource for streaming.", correct: true }
      - { value: "`getContent()` is asynchronous, `toStream()` is synchronous.", correct: false }
      - { value: "`getContent()` is for small responses, `toStream()` is for large responses.", correct: false }
      - { value: "`getContent()` throws exceptions on HTTP errors, `toStream()` does not.", correct: false }
    help: |
      `getContent()` blocks until the entire response body is downloaded into memory as a string. `toStream()` provides a PHP stream resource, allowing for memory-efficient processing of large responses.
      https://symfony.com/doc/current/http_client.html#_snippet_46

  -
    question: >
      Which of the following is the correct way to configure HTTP Bearer authentication for a Symfony HTTP Client in a PHP configuration file?
    answers:
      - { value: "`$framework->httpClient()->scopedClient('api')->authBearer('your_token');`", correct: true }
      - { value: "`$framework->httpClient()->scopedClient('api')->setBearerToken('your_token');`", correct: false }
      - { value: "`$framework->httpClient()->scopedClient('api')->setAuth(['bearer' => 'your_token']);`", correct: false }
      - { value: "`$framework->httpClient()->scopedClient('api')->addHeader('Authorization', 'Bearer your_token');`", correct: false }
    help: |
      The `authBearer()` method is the dedicated way to configure Bearer token authentication in PHP framework configuration.
      https://symfony.com/doc/current/http_client.html#_snippet_12

  -
    question: >
      What is the main advantage of using `Symfony\\Component\\HttpClient\\Response\\MockResponse::fromFile()` for testing?
    answers:
      - { value: "It allows creating mock responses directly from a file, simplifying the management of complex response bodies.", correct: true }
      - { value: "It automatically generates a HAR file from the mock response.", correct: false }
      - { value: "It can only be used for GET requests.", correct: false }
      - { value: "It provides real-time network simulation.", correct: false }
    help: |
      `fromFile()` (introduced in Symfony 7.1) is useful for loading large or complex response bodies from external files into your mock responses.
      https://symfony.com/doc/current/http_client.html#_snippet_83

  -
    question: >
      Which `Symfony\\Component\\HttpFoundation\\Response` method is used to set the `Cache-Control` directive `s-maxage` (shared cache max age)?
    answers:
      - { value: "`setMaxAge()`", correct: false }
      - { value: "`setSharedMaxAge()`", correct: true }
      - { value: "`setProxyMaxAge()`", correct: false }
      - { value: "`setCacheControl()`", correct: false }
    help: |
      `setSharedMaxAge()` specifically sets the `s-maxage` directive, which applies to shared caches (like proxies).
      https://symfony.com/doc/current/components/http_foundation.html#_snippet_44

  -
    question: >
      What is the purpose of the `on_progress` option in Symfony's HttpClient `request()` method?
    answers:
      - { value: "To log the progress of file uploads.", correct: false }
      - { value: "To provide a callback function that is executed as the response content is downloaded.", correct: true }
      - { value: "To display a progress bar in the console for long-running requests.", correct: false }
      - { value: "To automatically retry the request if it fails.", correct: false }
    help: |
      The `on_progress` callback allows you to monitor the download progress and even cancel the request based on certain conditions.
      https://symfony.com/doc/current/http_client.html#_snippet_48

  -
    question: >
      Which class is used in Symfony to manage HTTP headers for a `Response` object?
    answers:
      - { value: "Symfony\\Component\\HttpFoundation\\HeaderBag", correct: false }
      - { value: "Symfony\\Component\\HttpFoundation\\ResponseHeaderBag", correct: true }
      - { value: "Symfony\\Component\\HttpFoundation\\HttpHeaders", correct: false }
      - { value: "Symfony\\Component\\HttpFoundation\\HeaderCollection", correct: false }
    help: |
      `ResponseHeaderBag` is the specific class that manages the collection of HTTP headers for a `Response`.
      https://symfony.com/doc/current/components/http_foundation.html#_snippet_44

  -
    question: >
      What is the main benefit of using `HarFileResponseFactory` with `MockHttpClient` for testing?
    answers:
      - { value: "It allows recording live HTTP interactions directly into HAR files.", correct: false }
      - { value: "It enables creating mock responses based on real, recorded HTTP interactions stored in HAR files, ensuring realistic test data.", correct: true }
      - { value: "It converts HAR files into PHPUnit assertions automatically.", correct: false }
      - { value: "It provides a visual representation of HTTP requests and responses.", correct: false }
    help: |
      `HarFileResponseFactory` allows you to replay HTTP interactions captured in HAR files, making tests more realistic and easier to maintain.
      https://symfony.com/doc/current/http_client.html#_snippet_100

  -
    question: >
      Which of the following is the correct way to set a custom HTTP header on a `Response` object in Symfony?
    answers:
      - { value: "`$response->setHeader('X-Custom-Header', 'Value');`", correct: false }
      - { value: "`$response->headers->set('X-Custom-Header', 'Value');`", correct: true }
      - { value: "`$response->addHeader('X-Custom-Header', 'Value');`", correct: false }
      - { value: "`$response->set('X-Custom-Header', 'Value');`", correct: false }
    help: |
      HTTP headers are managed via the `headers` property of the `Response` object, which is an instance of `ResponseHeaderBag`.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#creating-and-sending-a-basic-http-response-in-php

  -
    question: >
      When using `HttpClient::create()`, what is the order of preference for the underlying HTTP client transports?
    answers:
      - { value: "Native PHP streams, then cURL, then AmpHttpClient.", correct: false }
      - { value: "cURL, then AmpHttpClient, then Native PHP streams.", correct: true }
      - { value: "AmpHttpClient, then cURL, then Native PHP streams.", correct: false }
      - { value: "It's random based on system load.", correct: false }
    help: |
      `HttpClient::create()` prioritizes cURL if available, then falls back to AmpHttpClient, and finally to native PHP streams.
      https://symfony.com/doc/current/http_client.html#_snippet_42

  -
    question: >
      What is the purpose of the `partitioned` attribute for HTTP cookies (introduced in Symfony 7.1)?
    answers:
      - { value: "To store cookie data in a separate partition on the client's disk.", correct: false }
      - { value: "To allow cookies to be sent in cross-site contexts, but only within a specific top-level site partition, enhancing privacy.", correct: true }
      - { value: "To divide a large cookie into smaller parts for transmission.", correct: false }
      - { value: "To encrypt the cookie value before sending it.", correct: false }
    help: |
      The `Partitioned` attribute is part of the CHIPS (Cookies Having Independent Partitioned State) proposal, aiming to allow third-party cookies in a more privacy-preserving way.
      https://symfony.com/doc/current/components/http_foundation.html#_snippet_44

  -
    question: >
      Which method of `Symfony\\Component\\HttpFoundation\\Request` is used to retrieve an array of accepted content types, ordered by descending quality, from the `Accept` HTTP header?
    answers:
      - { value: "`getAcceptableContentTypes()`", correct: true }
      - { value: "`getAcceptedMimeTypes()`", correct: false }
      - { value: "`getContentTypes()`", correct: false }
      - { value: "`getPreferredContentType()`", correct: false }
    help: |
      `getAcceptableContentTypes()` provides a parsed list of content types from the `Accept` header.
      https://symfony.com/doc/current/components/http_foundation.html#_snippet_22

  -
    question: >
      When using `Symfony\\Component\\BrowserKit\\AbstractBrowser::submitForm()`, how can you override the HTTP method for the form submission (e.g., force a PUT request)?
    answers:
      - { value: "By passing the method as the third argument to `submitForm()`.", correct: true }
      - { value: "By setting a hidden input field `_method` in the form.", correct: false }
      - { value: "It's not possible to override the method; it's determined by the form's `method` attribute.", correct: false }
      - { value: "By calling `setMethod()` on the `AbstractBrowser` instance before submission.", correct: false }
    help: |
      The `submitForm()` method allows specifying the HTTP method as its third argument.
      https://symfony.com/doc/current/components/browser_kit.html#_snippet_17

  -
    question: >
      What is the primary role of `Symfony\\Component\\HttpClient\\HttplugClient`?
    answers:
      - { value: "To provide a PSR-18 `HttpClientInterface` implementation for integrating with Httplug-compatible libraries.", correct: true }
      - { value: "To create a mock HTTP client for testing.", correct: false }
      - { value: "To handle asynchronous HTTP requests using ReactPHP.", correct: false }
      - { value: "To provide a simple, blocking HTTP client for basic requests.", correct: false }
    help: |
      `HttplugClient` acts as a bridge, implementing the PSR-18 `HttpClientInterface` to allow Symfony's HttpClient to be used with libraries that rely on the Httplug specification.
      https://symfony.com/doc/current/http_client.html#_snippet_73

  -
    question: >
      Which of the following is NOT a valid way to upload data using the `body` option in Symfony's HttpClient?
    answers:
      - { value: "A string containing raw data.", correct: false }
      - { value: "An array of form parameters.", correct: false }
      - { value: "A `SplFileObject` instance.", correct: true }
      - { value: "A PHP resource (e.g., from `fopen()`).", correct: false }
    help: |
      While you can use a PHP resource, `SplFileObject` itself is not directly supported as a `body` option; you'd typically use `fopen()` to get a resource.
      https://symfony.com/doc/current/http_client.html#_snippet_18

  -
    question: >
      What is the purpose of `Symfony\\Component\\HttpFoundation\\RedirectResponse`?
    answers:
      - { value: "To send a response with a 200 OK status code.", correct: false }
      - { value: "To create an HTTP response that instructs the client to navigate to a different URL.", correct: true }
      - { value: "To stream a large file to the client.", correct: false }
      - { value: "To generate a response with no content.", correct: false }
    help: |
      `RedirectResponse` is a specialized `Response` class that automatically sets the correct status code (e.g., 302 Found) and `Location` header for redirects.
      https://symfony.com/doc/current/components/http_foundation.html#_snippet_44

  -
    question: >
      Which of the following is the correct way to access `$_POST` variables using the `Symfony\\Component\\HttpFoundation\\Request` object?
    answers:
      - { value: "`$request->post->get('key');`", correct: false }
      - { value: "`$request->getPayload()->get('key');`", correct: true }
      - { value: "`$request->request->get('key');`", correct: false }
      - { value: "`$request->input('key');`", correct: false }
    help: |
      Since Symfony 6.2, `Request::getPayload()` is the recommended way to access request body parameters (equivalent to `$_POST` for `application/x-www-form-urlencoded` and JSON bodies).
      https://symfony.com/doc/current/introduction/http_fundamentals.html#access-http-request-data-with-symfony-request-object

  -
    question: >
      What is the significance of the `flush: bool = true` parameter in `Symfony\\Component\\HttpFoundation\\Response::send()`?
    answers:
      - { value: "If `false`, it prevents the response content from being sent.", correct: false }
      - { value: "If `false`, it prevents functions like `fastcgi_finish_request()` from being called, which might delay the script termination.", correct: true }
      - { value: "If `false`, it disables HTTP compression for the response.", correct: false }
      - { value: "If `false`, it sends only headers, not the body.", correct: false }
    help: |
      Setting `flush` to `false` can be useful in specific server environments (like FPM) where you want to continue processing after sending the response, but without immediately terminating the script.
      https://symfony.com/doc/current/components/http_foundation.html#_snippet_44

  -
    question: >
      Which class in Symfony's HTTP Client component allows you to create mock responses directly from a HAR (HTTP Archive) file for robust testing?
    answers:
      - { value: "HarResponseFactory", correct: false }
      - { value: "HarFileResponseFactory", correct: true }
      - { value: "ArchiveResponseFactory", correct: false }
      - { value: "HttpClientHarFactory", correct: false }
    help: |
      `HarFileResponseFactory` is designed to parse HAR files and create `MockResponse` objects from their entries.
      https://symfony.com/doc/current/http_client.html#_snippet_100

  -
    question: >
      How can you configure a Symfony HTTP Client instance to automatically follow redirects?
    answers:
      - { value: "Redirects are followed by default and cannot be disabled.", correct: false }
      - { value: "Set the `follow_redirects` option to `true`.", correct: false }
      - { value: "Set the `max_redirects` option to a positive integer (e.g., `5`).", correct: true }
      - { value: "Use the `RedirectHttpClient` class.", correct: false }
    help: |
      The `max_redirects` option controls the maximum number of redirects the client will follow. Setting it to `0` disables redirects.
      https://symfony.com/doc/current/http_client.html#redirects

  -
    question: >
      What is the purpose of `Symfony\\Component\\HttpFoundation\\HeaderUtils::combine()`?
    answers:
      - { value: "To concatenate multiple header values into a single string.", correct: false }
      - { value: "To combine an array of header key-value pairs into a single associative array, handling duplicate keys.", correct: true }
      - { value: "To parse a raw HTTP header string into an array.", correct: false }
      - { value: "To validate the syntax of HTTP headers.", correct: false }
    help: |
      `HeaderUtils::combine()` is a utility function for merging header parts into a structured array, useful for headers that can appear multiple times.
      https://symfony.com/doc/current/components/http_foundation.html#_snippet_21

  -
    question: >
      Which of the following HTTP status codes indicates that the server is acting as a gateway or proxy and received an invalid response from an upstream server?
    answers:
      - { value: "500 Internal Server Error", correct: false }
      - { value: "502 Bad Gateway", correct: true }
      - { value: "504 Gateway Timeout", correct: false }
      - { value: "503 Service Unavailable", correct: false }
    help: |
      The 502 (Bad Gateway) status code means the server, while acting as a gateway or proxy, received an invalid response from an inbound server it accessed while attempting to fulfill the request.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/502

  -
    question: >
      What is the primary function of the `Symfony\\Component\\HttpFoundation\\RequestStack`?
    answers:
      - { value: "To store a history of all HTTP requests made by the application.", correct: false }
      - { value: "To manage a stack of `Request` objects, particularly useful in sub-requests or when embedding controllers.", correct: true }
      - { value: "To provide a global registry for all services related to HTTP requests.", correct: false }
      - { value: "To handle the routing of incoming HTTP requests.", correct: false }
    help: |
      `RequestStack` allows you to access the current master request and any sub-requests, which is essential for Symfony's internal request handling.
      https://symfony.com/doc/current/components/http_kernel.html#the-request-stack

  -
    question: >
      Which HTTP status code indicates that the request has been accepted for processing, but the processing has not been completed?
    answers:
      - { value: "200 OK", correct: false }
      - { value: "201 Created", correct: false }
      - { value: "202 Accepted", correct: true }
      - { value: "203 Non-Authoritative Information", correct: false }
    help: |
      The 202 (Accepted) status code indicates that the request has been accepted for processing, but the processing has not been completed. The request might or might not be acted upon, and may be disallowed when processing occurs.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/202

  -
    question: >
      Which of the following is the correct way to access `$_SERVER` variables using the `Symfony\\Component\\HttpFoundation\\Request` object?
    answers:
      - { value: "`$request->server->get('HTTP_HOST');`", correct: true }
      - { value: "`$request->env->get('HTTP_HOST');`", correct: false }
      - { value: "`$request->globals->get('HTTP_HOST');`", correct: false }
      - { value: "`$request->get('HTTP_HOST');`", correct: false }
    help: |
      The `server` property of the `Request` object provides access to server variables, including HTTP headers prefixed with `HTTP_`.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#access-http-request-data-with-symfony-request-object

  -
    question: >
      What is the purpose of the `HttpClientInterface::toStream()` method?
    answers:
      - { value: "To convert the response body to a string.", correct: false }
      - { value: "To cast the response content to a PHP stream resource, allowing for efficient processing of large responses.", correct: true }
      - { value: "To save the response content to a file.", correct: false }
      - { value: "To create a `StreamedResponse` object from the HttpClient response.", correct: false }
    help: |
      `toStream()` returns a PHP stream resource, which is ideal for handling large files or streaming data without loading the entire content into memory.
      https://symfony.com/doc/current/http_client.html#_snippet_46

  -
    question: >
      Which of the following HTTP status codes indicates that the server, while acting as a gateway or proxy, did not receive a response from an upstream server within the time that the gateway was prepared to wait?
    answers:
      - { value: "500 Internal Server Error", correct: false }
      - { value: "502 Bad Gateway", correct: false }
      - { value: "503 Service Unavailable", correct: false }
      - { value: "504 Gateway Timeout", correct: true }
    help: |
      The 504 (Gateway Timeout) status code means the server, while acting as a gateway or proxy, did not receive a timely response from an upstream server.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/504