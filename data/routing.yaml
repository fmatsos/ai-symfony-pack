category: Routing

questions:
  -
    question: >
      Which of the following PHP attribute configurations correctly defines a route named `blog_list` for the path `/blog`?
    answers:
      -
        value: |
          ```php
          #[Route('/blog', name: 'blog_list')]
          public function list(): Response {}
          ```
        correct: true
      -
        value: |
          ```php
          #[Path('/blog', name: 'blog_list')]
          public function list(): Response {}
          ```
        correct: false
      -
        value: |
          ```php
          #[Route(path: '/blog', id: 'blog_list')]
          public function list(): Response {}
          ```
        correct: false
      -
        value: |
          ```php
          #[Route(name: 'blog_list')]
          public function list('/blog'): Response {}
          ```
        correct: false
    help: |
      The `#[Route]` attribute is used to define routes directly on controller methods. The `path` argument specifies the URL pattern, and `name` defines the route's unique identifier.
      https://symfony.com/doc/current/routing.html#defining-routes

  -
    question: >
      In YAML, how would you define a route named `product_show` for the path `/product/{id}` that maps to `App\Controller\ProductController::show`?
    answers:
      -
        value: |
          ```yaml
          product_show:
              path: /product/{id}
              controller: App\Controller\ProductController::show
          ```
        correct: true
      -
        value: |
          ```yaml
          product_show:
              url: /product/{id}
              action: App\Controller\ProductController::show
          ```
        correct: false
      -
        value: |
          ```yaml
          - id: product_show
            path: /product/{id}
            controller: App\Controller\ProductController::show
          ```
        correct: false
      -
        value: |
          ```yaml
          /product/{id}:
              name: product_show
              controller: App\Controller\ProductController::show
          ```
        correct: false
    help: |
      YAML route definitions use the route name as a top-level key, followed by `path` and `controller` keys.
      https://symfony.com/doc/current/routing.html#defining-routes-in-yaml

  -
    question: >
      Which command is used to list all registered routes in a Symfony application?
    answers:
      -
        value: >
          `php bin/console debug:router`
        correct: true
      -
        value: >
          `php bin/console router:list`
        correct: false
      -
        value: >
          `php bin/console routes:show`
        correct: false
      -
        value: >
          `php bin/console app:routes`
        correct: false
    help: |
      The `debug:router` command provides a comprehensive list of all configured routes, including their names, methods, schemes, hosts, and paths.
      https://symfony.com/doc/current/routing.html#listing-all-defined-routes

  -
    question: |
      Given the following PHP attribute route definition:

      ```php
      // src/Controller/BlogController.php
      class BlogController extends AbstractController
      {
          #[Route('/blog/{page}', name: 'blog_list', requirements: ['page' => '\d+'])]
          public function list(int $page): Response
          {
              // ...
          }
      }
      ```

      Which URL would successfully match this route?
    answers:
      -
        value: >
          `/blog/123`
        correct: true
      -
        value: >
          `/blog/hello`
        correct: false
      -
        value: >
          `/blog/page/456`
        correct: false
      -
        value: >
          `/blog/`
        correct: false
    help: |
      The `requirements` option uses regular expressions to validate route parameters. `\d+` ensures that the `page` parameter consists of one or more digits.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      How can you make a route parameter in Symfony accept a slash (`/`) character?
    answers:
      -
        value: >
          By setting a requirement of `.+` for that parameter.
        correct: true
      -
        value: >
          By setting a requirement of `.*` for that parameter.
        correct: false
      -
        value: >
          By adding `allow_slashes: true` to the route definition.
        correct: false
      -
        value: >
          Slashes are automatically allowed in route parameters.
        correct: false
    help: |
      By default, route parameters do not match the `/` character. To allow it, you must explicitly define a requirement like `.+` (match one or more characters, including `/`).
      https://symfony.com/doc/current/routing.html#allowing-a-slash-character-in-a-route-parameter

  -
    question: |
      Consider the following route definition:

      ```yaml
      # config/routes.yaml
      article_show:
          path: /articles/{slug}
          controller: App\Controller\ArticleController::show
          defaults:
              slug: 'default-article'
      ```

      Which URL would resolve to the `article_show` route with `slug` equal to `'default-article'`?
    answers:
      -
        value: >
          `/articles/`
        correct: true
      -
        value: >
          `/articles`
        correct: true
      -
        value: >
          `/articles/some-slug`
        correct: false
      -
        value: >
          `/articles/default`
        correct: false
    help: |
      When a route parameter has a default value, the route can be matched even if the parameter is not provided in the URL. If the parameter is omitted, its default value is used.
      https://symfony.com/doc/current/routing.html#setting-default-values-for-route-parameters

  -
    question: >
      When generating a URL in a Symfony controller, which method is typically used?
    answers:
      -
        value: >
          `$this->generateUrl()`
        correct: true
      -
        value: >
          `$this->container->get('router')->generate()`
        correct: false
      -
        value: >
          `$this->router->url()`
        correct: false
      -
        value: >
          `$this->createUrl()`
        correct: false
    help: |
      Controllers extending `AbstractController` provide a convenient `generateUrl()` helper method for generating URLs.
      https://symfony.com/doc/current/routing.html#generating-urls-in-controllers

  -
    question: >
      To generate an absolute URL (e.g., `http://example.com/blog`) instead of an absolute path (e.g., `/blog`) using `generateUrl()`, what constant should be passed as the third argument?
    answers:
      -
        value: >
          `UrlGeneratorInterface::ABSOLUTE_URL`
        correct: true
      -
        value: >
          `UrlGeneratorInterface::ABSOLUTE_PATH`
        correct: false
      -
        value: >
          `UrlGeneratorInterface::NETWORK_PATH`
        correct: false
      -
        value: >
          `UrlGeneratorInterface::RELATIVE_PATH`
        correct: false
    help: |
      The `UrlGeneratorInterface` defines constants to specify the type of URL to generate. `ABSOLUTE_URL` generates a full URL including the scheme and host.
      https://symfony.com/doc/current/routing.html#generating-absolute-urls

  -
    question: >
      You have a route defined with a `_locale` parameter. How can you explicitly generate a URL for a different locale (e.g., Dutch `nl`) using `generateUrl()`?
    answers:
      -
        value: >
          Pass `['_locale' => 'nl']` in the route arguments array.
        correct: true
      -
        value: >
          Set the locale on the `Request` object before generating the URL.
        correct: false
      -
        value: >
          Use a separate `generateLocalizedUrl()` method.
        correct: false
      -
        value: >
          The locale is always derived from the current request and cannot be overridden.
        correct: false
    help: |
      When a route is localized, Symfony uses the current request locale by default. You can explicitly set the locale by passing a `_locale` value in the route arguments.
      https://symfony.com/doc/current/routing.html#generating-localized-urls

  -
    question: >
      Which Symfony controller can be used to configure a route that performs a redirect to another internal route or an external URL?
    answers:
      -
        value: >
          `Symfony\Bundle\FrameworkBundle\Controller\RedirectController`
        correct: true
      -
        value: >
          `Symfony\Component\Routing\Controller\RedirectController`
        correct: false
      -
        value: >
          `Symfony\Component\HttpFoundation\RedirectResponse`
        correct: false
      -
        value: >
          `Symfony\Bundle\FrameworkBundle\Controller\ForwardController`
        correct: false
    help: |
      The `RedirectController` is a built-in Symfony controller designed specifically for handling redirects, allowing configuration directly in routing files.
      https://symfony.com/doc/current/routing.html#redirecting-routes

  -
    question: >
      To make a redirect defined with `RedirectController` permanent (HTTP 301), which default option should be set to `true`?
    answers:
      -
        value: >
          `permanent`
        correct: true
      -
        value: >
          `status_code`
        correct: false
      -
        value: >
          `redirect_type`
        correct: false
      -
        value: >
          `http_status`
        correct: false
    help: |
      The `permanent` option in the `RedirectController` defaults to `false` (temporary redirect, 302/307) and should be set to `true` for a permanent redirect (301/308).
      https://symfony.com/doc/current/routing.html#redirecting-routes

  -
    question: >
      Which special internal routing attribute is used to set the "request format" of the `Request` object (e.g., `json` for `application/json`)?
    answers:
      -
        value: >
          `_format`
        correct: true
      -
        value: >
          `_content_type`
        correct: false
      -
        value: >
          `_type`
        correct: false
      -
        value: >
          `_mime`
        correct: false
    help: |
      The `_format` special parameter is used by Symfony to determine the request format, which influences the `Content-Type` of the response.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      What is the purpose of the `_controller` special internal routing attribute?
    answers:
      -
        value: >
          To determine which controller and action is executed when the route is matched.
        correct: true
      -
        value: >
          To define the default controller for the entire application.
        correct: false
      -
        value: >
          To specify the controller method to be called for a given route.
        correct: false
      -
        value: >
          To register a controller as a service.
        correct: false
    help: |
      The `_controller` parameter is fundamental for Symfony's routing, as it directly maps a matched route to the specific controller and method responsible for handling the request.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: |
      Given the following PHP attribute route definition:

      ```php
      #[Route('/', name: 'mobile_homepage', host: 'm.example.com')]
      public function mobileHomepage(): Response {}

      #[Route('/', name: 'homepage')]
      public function homepage(): Response {}
      ```

      Which route would be matched for a request to `http://m.example.com/`?
    answers:
      -
        value: >
          `mobile_homepage`
        correct: true
      -
        value: >
          `homepage`
        correct: false
      -
        value: >
          Neither, as the paths are identical.
        correct: false
      -
        value: >
          Both, leading to an error.
        correct: false
    help: |
      Routes with a `host` requirement are prioritized over routes without one when the host matches. This allows for domain-specific routing.
      https://symfony.com/doc/current/routing.html#matching-a-domain-name-or-subdomain

  -
    question: |
      You want to define a route that only matches requests from a Firefox browser and uses either GET or HEAD HTTP methods. Which `condition` expression would achieve this in a PHP attribute?
    answers:
      -
        value: |
          ```php
          condition: "context.getMethod() in ['GET', 'HEAD'] and request.headers.get('User-Agent') matches '/firefox/i'"
          ```
        correct: true
      -
        value: |
          ```php
          condition: "request.method in ['GET', 'HEAD'] and request.userAgent matches '/firefox/i'"
          ```
        correct: false
      -
        value: |
          ```php
          condition: "method() in ['GET', 'HEAD'] and userAgent() matches '/firefox/i'"
          ```
        correct: false
      -
        value: |
          ```php
          condition: "getMethod() in ['GET', 'HEAD'] and getHeader('User-Agent') matches '/firefox/i'"
          ```
        correct: false
    help: |
      Symfony's Expression Language for routing conditions provides access to `context` (RequestContext) and `request` (Request) objects. `context.getMethod()` and `request.headers.get('User-Agent')` are correct ways to access this information.
      https://symfony.com/doc/current/routing.html#adding-conditions-to-routes

  -
    question: >
      Which variable in Symfony's routing Expression Language provides access to the `Symfony\Component\HttpFoundation\Request` object?
    answers:
      -
        value: >
          `request`
        correct: true
      -
        value: >
          `context`
        correct: false
      -
        value: >
          `app`
        correct: false
      -
        value: >
          `http_request`
        correct: false
    help: |
      The `request` variable in the Expression Language directly exposes the current `Request` object, allowing access to its properties and methods.
      https://symfony.com/doc/current/routing.html#expression-language-variables-and-functions

  -
    question: >
      You want a route to only respond to POST requests. How would you configure this using PHP attributes?
    answers:
      -
        value: |
          ```php
          #[Route('/submit', name: 'form_submit', methods: ['POST'])]
          public function submit(): Response {}
          ```
        correct: true
      -
        value: |
          ```php
          #[Route('/submit', name: 'form_submit', method: 'POST')]
          public function submit(): Response {}
          ```
        correct: false
      -
        value: |
          ```php
          #[Route('/submit', name: 'form_submit', httpMethods: ['POST'])]
          public function submit(): Response {}
          ```
        correct: false
      -
        value: |
          ```php
          #[Route('/submit', name: 'form_submit', requirements: ['_method' => 'POST'])]
          public function submit(): Response {}
          ```
        correct: false
    help: |
      The `methods` option in the `#[Route]` attribute allows you to restrict a route to specific HTTP methods. It accepts an array of method names.
      https://symfony.com/doc/current/routing.html#matching-http-methods

  -
    question: >
      What is the primary purpose of the `_locale` special routing parameter in Symfony?
    answers:
      -
        value: >
          To set the locale on the request.
        correct: true
      -
        value: >
          To define the default language for the application.
        correct: false
      -
        value: >
          To automatically translate route paths.
        correct: false
      -
        value: >
          To determine the user's preferred timezone.
        correct: false
    help: |
      The `_locale` parameter is a special routing parameter that Symfony uses to set the locale for the current request, influencing translation and other locale-dependent features.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      How can you apply locale-specific URL prefixes (e.g., `/nl/` for Dutch) to a group of imported routes in YAML?
    answers:
      -
        value: |
          ```yaml
          controllers:
              resource: '../../src/Controller/'
              type: attribute
              prefix:
                  en: ''
                  nl: '/nl'
          ```
        correct: true
      -
        value: |
          ```yaml
          controllers:
              resource: '../../src/Controller/'
              type: attribute
              locale_prefix:
                  en: ''
                  nl: '/nl'
          ```
        correct: false
      -
        value: |
          ```yaml
          controllers:
              resource: '../../src/Controller/'
              type: attribute
              prefixes:
                  en: ''
                  nl: '/nl'
          ```
        correct: false
      -
        value: >
          Locale-specific prefixes can only be defined per individual route, not for imported groups.
        correct: false
    help: |
      When importing routes, the `prefix` option can accept a map of locales to their respective prefixes, allowing for locale-aware URL generation and matching.
      https://symfony.com/doc/current/routing.html#locale-specific-url-prefixes

  -
    question: >
      Which command would you use to find out which Symfony route matches a specific URL path, for example, `/lucky/number/8`?
    answers:
      -
        value: >
          `php bin/console router:match /lucky/number/8`
        correct: true
      -
        value: >
          `php bin/console debug:route /lucky/number/8`
        correct: false
      -
        value: >
          `php bin/console router:test /lucky/number/8`
        correct: false
      -
        value: >
          `php bin/console match:route /lucky/number/8`
        correct: false
    help: |
      The `router:match` command is specifically designed to simulate a request and determine which route would be matched by a given URL.
      https://symfony.com/doc/current/routing.html#matching-a-url

  -
    question: >
      What does the error message "Some mandatory parameters are missing ('slug') to generate a URL for route 'blog_show'" indicate?
    answers:
      -
        value: >
          You attempted to generate a URL for `blog_show` without providing a value for the `slug` parameter, which is required by the route.
        correct: true
      -
        value: >
          The `blog_show` route is incorrectly defined and does not have a `slug` parameter.
        correct: false
      -
        value: >
          The `slug` parameter is defined as optional, but no default value was provided.
        correct: false
      -
        value: >
          There is a typo in the route name `blog_show`.
        correct: false
    help: |
      This error occurs when you try to generate a URL for a route that has required parameters, but you fail to provide values for those parameters in the `generateUrl()` call.
      https://symfony.com/doc/current/routing.html#troubleshooting-routing

  -
    question: >
      You have two routes: `/blog/{slug}` (name: `blog_show`) and `/blog/list` (name: `blog_list`). If `blog_show` is defined before `blog_list` and has no explicit priority, which route will match `/blog/list`?
    answers:
      -
        value: >
          `blog_show` (with `slug` = 'list')
        correct: true
      -
        value: >
          `blog_list`
        correct: false
      -
        value: >
          Neither, it will result in a routing error.
        correct: false
      -
        value: >
          It depends on the order of cache generation.
        correct: false
    help: |
      Symfony matches routes in the order they are defined. A greedy pattern like `{slug}` will match "list" if it appears before a more specific route like `/blog/list`, unless explicit priorities are set.
      https://symfony.com/doc/current/routing.html#route-priority

  -
    question: >
      How can you ensure that the `blog_list` route (`/blog/list`) is matched before the `blog_show` route (`/blog/{slug}`) if `blog_show` is defined first in PHP attributes?
    answers:
      -
        value: |
          Set `priority: 1` or higher on the `blog_list` route.
        correct: true
      -
        value: |
          Set `priority: -1` on the `blog_show` route.
        correct: false
      -
        value: |
          Define the `blog_list` route before `blog_show`.
        correct: false
      -
        value: |
          Add a `requirements` to `blog_list` to make it more specific.
        correct: false
    help: |
      Routes with a higher `priority` value are matched before those with lower or default priority (0). This is crucial for preventing greedy patterns from blocking more specific routes.
      https://symfony.com/doc/current/routing.html#route-priority

  -
    question: >
      Which of the following is a valid way to import routes from a controller directory using PHP configuration, applying a `/blog` prefix to all imported URLs?
    answers:
      -
        value: |
          ```php
          return static function (RoutingConfigurator $routes): void {
              $routes->import('../../src/Controller/', 'attribute')
                  ->prefix('/blog');
          };
          ```
        correct: true
      -
        value: |
          ```php
          return static function (RoutingConfigurator $routes): void {
              $routes->import('../../src/Controller/', 'attribute')
                  ->setPrefix('/blog');
          };
          ```
        correct: false
      -
        value: |
          ```php
          return static function (RoutingConfigurator $routes): void {
              $routes->import('../../src/Controller/', 'attribute', prefix: '/blog');
          };
          ```
        correct: false
      -
        value: |
          ```php
          return static function (RoutingConfigurator $routes): void {
              $routes->addCollection(
                  $routes->import('../../src/Controller/', 'attribute')
              )->prefix('/blog');
          };
          ```
        correct: false
    help: |
      The `RoutingConfigurator` provides a fluent interface for importing routes, and the `prefix()` method is used to add a URL prefix to the imported routes.
      https://symfony.com/doc/current/routing.html#route-groups-and-prefixes

  -
    question: >
      What is the purpose of the `#[AsCommand]` attribute in Symfony, and how does it relate to routing?
    answers:
      -
        value: >
          It defines the command's name and description for console commands, and is unrelated to HTTP routing.
        correct: true
      -
        value: >
          It defines a route for a console command that can be accessed via HTTP.
        correct: false
      -
        value: >
          It automatically registers a console command as an HTTP route.
        correct: false
      -
        value: >
          It's used for routing internal console commands within the application.
        correct: false
    help: |
      The `#[AsCommand]` attribute is part of the Console component, used to configure console commands. It has no direct relation to HTTP routing.
      https://symfony.com/doc/current/console.html#configuring-the-command

  -
    question: >
      When importing routes from a controller directory, how can you exclude specific files (e.g., `DebugController.php`) using YAML configuration?
    answers:
      -
        value: |
          ```yaml
          controllers:
              resource: '../../src/Controller/'
              type: attribute
              exclude: '../../src/Controller/{Debug*Controller.php}'
          ```
        correct: true
      -
        value: |
          ```yaml
          controllers:
              resource: '../../src/Controller/'
              type: attribute
              ignore: 'DebugController.php'
          ```
        correct: false
      -
        value: |
          ```yaml
          controllers:
              resource: '../../src/Controller/'
              type: attribute
              filter: '!DebugController.php'
          ```
        correct: false
      -
        value: >
          Excluding specific files during attribute import is not supported.
        correct: false
    help: |
      The `exclude` option allows you to specify PHP glob patterns to ignore certain files or subdirectories when importing routes via attributes.
      https://symfony.com/doc/current/routing.html#route-groups-and-prefixes

  -
    question: >
      What is the correct way to define a route alias named `product_details` that points to an existing route named `product_show` in YAML?
    answers:
      -
        value: |
          ```yaml
          product_details:
              alias: product_show
          ```
        correct: true
      -
        value: |
          ```yaml
          product_details:
              redirect_to: product_show
          ```
        correct: false
      -
        value: |
          ```yaml
          product_details:
              route: product_show
          ```
        correct: false
      -
        value: |
          ```yaml
          product_details:
              target: product_show
          ```
        correct: false
    help: |
      The `alias` option in a route definition allows you to create an alternative name for an existing route.
      https://symfony.com/doc/current/routing.html#route-aliases

  -
    question: >
      You want to deprecate a route alias `old_route_name` in favor of `new_route_name`. Which of the following is a valid way to configure this in YAML, including a generic deprecation message?
    answers:
      -
        value: |
          ```yaml
          new_route_name:
              path: /new-path
              controller: App\Controller\MyController::action

          old_route_name:
              alias: new_route_name
              deprecated:
                  package: 'my/bundle'
                  version: '1.0'
          ```
        correct: true
      -
        value: |
          ```yaml
          old_route_name:
              path: /old-path
              controller: App\Controller\MyController::action
              deprecated: true
              alias_of: new_route_name
          ```
        correct: false
      -
        value: |
          ```yaml
          old_route_name:
              alias: new_route_name
              deprecation_message: 'This route is deprecated.'
          ```
        correct: false
      -
        value: |
          ```yaml
          new_route_name:
              path: /new-path
              controller: App\Controller\MyController::action
              alias: old_route_name
              deprecated:
                  package: 'my/bundle'
                  version: '1.0'
          ```
        correct: false
    help: |
      To deprecate an alias, the alias itself is defined, pointing to the new route, and then the `deprecated` key is added with `package` and `version` information.
      https://symfony.com/doc/current/routing.html#deprecating-route-aliases

  -
    question: >
      How can you mark a route as 'stateless' in Symfony using PHP attributes to prevent session usage during request matching for improved caching?
    answers:
      -
        value: |
          ```php
          #[Route('/', name: 'homepage', stateless: true)]
          public function homepage(): Response {}
          ```
        correct: true
      -
        value: |
          ```php
          #[Route('/', name: 'homepage', session_less: true)]
          public function homepage(): Response {}
          ```
        correct: false
      -
        value: |
          ```php
          #[Route('/', name: 'homepage', cacheable: true)]
          public function homepage(): Response {}
          ```
        correct: false
      -
        value: >
          Stateless routes are configured globally in `framework.yaml`.
        correct: false
    help: |
      The `stateless` option on a route explicitly tells Symfony that the route does not require session state, which can allow for better caching.
      https://symfony.com/doc/current/routing.html#stateless-routes

  -
    question: |
      You have a PHP backed enum `OrderStatusEnum` with cases like `OrderStatusEnum::Paid`. How would you define a route parameter `status` that automatically converts to this enum type in your controller?

      ```php
      // src/Controller/OrderController.php
      class OrderController extends AbstractController
      {
          #[Route('/orders/list/{status}', name: 'list_orders_by_status')]
          public function list(/* ??? */ $status): Response
          {
              // ...
          }
      }
      ```
    answers:
      -
        value: >
          `OrderStatusEnum $status`
        correct: true
      -
        value: >
          `string $status`
        correct: false
      -
        value: >
          `#[MapQueryString] OrderStatusEnum $status`
        correct: false
      -
        value: >
          `#[MapRequestPayload] OrderStatusEnum $status`
        correct: false
    help: |
      Symfony's routing and argument resolver automatically handle PHP backed enumerations as route parameters, converting the scalar value from the URL to the corresponding enum instance.
      https://symfony.com/doc/current/routing.html#route-parameter-with-php-backed-enum

  -
    question: >
      Which of the following is the recommended way to check if a route exists in Symfony without negatively impacting performance by regenerating the routing cache?
    answers:
      -
        value: |
          ```php
          use Symfony\Component\Routing\Exception\RouteNotFoundException;

          try {
              $url = $this->router->generate($routeName, $routeParameters);
          } catch (RouteNotFoundException $e) {
              // route not defined
          }
          ```
        correct: true
      -
        value: |
          ```php
          if ($this->router->getRouteCollection()->has($routeName)) {
              // route exists
          }
          ```
        correct: false
      -
        value: |
          ```php
          if ($this->router->exists($routeName)) {
              // route exists
          }
          ```
        correct: false
      -
        value: |
          ```php
          if (null !== $this->router->match($routeName)) {
              // route exists
          }
          ```
        correct: false
    help: |
      Attempting to generate the URL and catching `RouteNotFoundException` is the recommended approach, as directly inspecting the route collection can trigger cache regeneration.
      https://symfony.com/doc/current/routing.html#checking-if-a-route-exists

  -
    question: >
      How can you configure a route to only be active in the `dev` environment using PHP attributes?
    answers:
      -
        value: |
          ```php
          #[Route('/tools', name: 'tools', env: 'dev')]
          public function developerTools(): Response {}
          ```
        correct: true
      -
        value: |
          ```php
          #[Route('/tools', name: 'tools', environments: ['dev'])]
          public function developerTools(): Response {}
          ```
        correct: false
      -
        value: |
          ```php
          #[Route('/tools', name: 'tools', if_env: 'dev')]
          public function developerTools(): Response {}
          ```
        correct: false
      -
        value: >
          Environment-specific routes must be defined in separate YAML/XML files.
        correct: false
    help: |
      The `env` option in the `#[Route]` attribute allows you to restrict a route's availability to a specific Symfony environment.
      https://symfony.com/doc/current/routing.html#environment-specific-routes

  -
    question: >
      What is the correct way to access the current route's name from the `Request` object within a controller?
    answers:
      -
        value: >
          `$request->attributes->get('_route')`
        correct: true
      -
        value: >
          `$request->get('_route_name')`
        correct: false
      -
        value: >
          `$request->routeName()`
        correct: false
      -
        value: >
          `$request->attributes->get('route_name')`
        correct: false
    help: |
      Symfony stores the matched route's name in the request attributes under the special key `_route`.
      https://symfony.com/doc/current/routing.html#accessing-route-name-and-parameters-from-the-request-object

  -
    question: >
      You need to generate a URL with an extra parameter that is an object (e.g., a `Uuid` object). What is the best practice to ensure it's correctly included in the URL?
    answers:
      -
        value: >
          Explicitly cast the object to a string before passing it to `generateUrl()`.
        correct: true
      -
        value: >
          Symfony automatically handles object conversion for URL parameters.
        correct: false
      -
        value: >
          Implement `__toString()` on the object and pass it directly.
        correct: true
      -
        value: >
          Pass the object directly; Symfony's serializer will handle it.
        correct: false
    help: |
      While Symfony can often handle simple objects with `__toString()`, explicitly casting to a string is a robust way to ensure that complex objects are correctly represented as scalar values in the URL.
      https://symfony.com/doc/current/routing.html#extra-url-parameters

  -
    question: >
      Which of the following commands would you use to display detailed information about a specific route, for example, `app_lucky_number`?
    answers:
      -
        value: >
          `php bin/console debug:router app_lucky_number`
        correct: true
      -
        value: >
          `php bin/console router:info app_lucky_number`
        correct: false
      -
        value: >
          `php bin/console show:route app_lucky_number`
        correct: false
      -
        value: >
          `php bin/console router:describe app_lucky_number`
        correct: false
    help: |
      Passing the route name (or a part of it) as an argument to `debug:router` displays detailed information for that specific route.
      https://symfony.com/doc/current/routing.html#displaying-the-details-of-a-specific-route

  -
    question: >
      What is the purpose of the `_fragment` special internal routing attribute?
    answers:
      -
        value: >
          Used to set the fragment identifier, which is the optional last part of a URL that starts with a `#` character.
        correct: true
      -
        value: >
          Used to define a partial URL for a route.
        correct: false
      -
        value: >
          Used to specify a section of a page to load via AJAX.
        correct: false
      -
        value: >
          Used for internal routing within a single page application.
        correct: false
    help: |
      The `_fragment` parameter corresponds to the part of a URL after the `#` symbol, commonly used for linking to specific sections within a document.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: |
      You are defining a route group in YAML. How can you apply a global requirement `_locale: 'en|es|fr'` to all routes imported within this group?
    answers:
      -
        value: |
          ```yaml
          controllers:
              resource: '../../src/Controller/'
              type: attribute
              requirements:
                  _locale: 'en|es|fr'
          ```
        correct: true
      -
        value: |
          ```yaml
          controllers:
              resource: '../../src/Controller/'
              type: attribute
              defaults:
                  _locale: 'en|es|fr'
          ```
        correct: false
      -
        value: |
          ```yaml
          controllers:
              resource: '../../src/Controller/'
              type: attribute
              global_requirements:
                  _locale: 'en|es|fr'
          ```
        correct: false
      -
        value: >
          Requirements cannot be applied globally to imported route groups.
        correct: false
    help: |
      The `requirements` key under an imported resource in YAML allows you to define global requirements that apply to all routes within that imported group.
      https://symfony.com/doc/current/routing.html#route-groups-and-prefixes

  -
    question: >
      Which of the following `router:match` commands would you use to filter routes by HTTP method, specifically to see only routes that match GET requests?
    answers:
      -
        value: >
          `php bin/console debug:router --method=GET`
        correct: true
      -
        value: >
          `php bin/console debug:router --methods=GET`
        correct: false
      -
        value: >
          `php bin/console router:match --http-method=GET`
        correct: false
      -
        value: >
          `php bin/console router:list --method=GET`
        correct: false
    help: |
      The `--method` option with `debug:router` allows you to filter the displayed routes by their associated HTTP methods.
      https://symfony.com/doc/current/routing.html#filtering-routes

  -
    question: |
      Consider a route defined with a dynamic host:

      ```php
      #[Route(
          '/',
          name: 'mobile_homepage',
          host: '{subdomain}.example.com',
          defaults: ['subdomain' => 'm'],
          requirements: ['subdomain' => 'm|mobile'],
      )]
      public function mobileHomepage(): Response {}
      ```

      Which hostnames would successfully match this route?
    answers:
      -
        value: >
          `m.example.com`
        correct: true
      -
        value: >
          `mobile.example.com`
        correct: true
      -
        value: >
          `www.example.com`
        correct: false
      -
        value: >
          `test.example.com`
        correct: false
    help: |
      The `requirements` option for the `host` parameter specifies the allowed values for the dynamic subdomain, in this case, `m` or `mobile`.
      https://symfony.com/doc/current/routing.html#matching-a-domain-name-or-subdomain

  -
    question: >
      When using `RedirectController` to redirect to an external URL, which default option is used to specify the target URL?
    answers:
      -
        value: >
          `path`
        correct: true
      -
        value: >
          `url`
        correct: false
      -
        value: >
          `target_url`
        correct: false
      -
        value: >
          `destination`
        correct: false
    help: |
      The `path` default option for `RedirectController` can accept an absolute path or an absolute URL for external redirects.
      https://symfony.com/doc/current/routing.html#redirecting-to-an-absolute-path-or-external-url

  -
    question: >
      What is the purpose of the `env()` function in Symfony's routing Expression Language conditions?
    answers:
      -
        value: >
          Returns the value of an environment variable.
        correct: true
      -
        value: >
          Returns the current Symfony environment (e.g., 'dev', 'prod').
        correct: false
      -
        value: >
          Returns the environment variables available to the application.
        correct: false
      -
        value: >
          Checks if the current environment matches a given string.
        correct: false
    help: |
      The `env()` function allows you to access environment variables directly within routing conditions.
      https://symfony.com/doc/current/routing.html#expression-language-variables-and-functions

  -
    question: >
      How can you force all routes imported from a specific resource to use HTTPS using YAML configuration?
    answers:
      -
        value: |
          ```yaml
          controllers:
              resource: '../../src/Controller/'
              type: attribute
              schemes: [https]
          ```
        correct: true
      -
        value: |
          ```yaml
          controllers:
              resource: '../../src/Controller/'
              type: attribute
              secure: true
          ```
        correct: false
      -
        value: |
          ```yaml
          controllers:
              resource: '../../src/Controller/'
              type: attribute
              protocol: https
          ```
        correct: false
      -
        value: >
          Scheme requirements can only be applied per individual route, not for imported groups.
        correct: false
    help: |
      The `schemes` option, when applied to an imported resource, enforces the specified scheme (e.g., `https`) for all routes within that group.
      https://symfony.com/doc/current/routing.html#forcing-a-scheme-https

  -
    question: >
      Which of the following is NOT a special internal routing attribute in Symfony?
    answers:
      -
        value: >
          `_query`
        correct: true
      -
        value: >
          `_controller`
        correct: false
      -
        value: >
          `_format`
        correct: false
      -
        value: >
          `_locale`
        correct: false
    help: |
      `_controller`, `_format`, `_locale`, and `_fragment` are recognized special internal routing attributes. There is no `_query` attribute.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: |
      You have a route with a parameter `id`. You want to add a condition that only matches if `id` is less than 1000. Which Expression Language condition is correct?
    answers:
      -
        value: >
          `condition: "params['id'] < 1000"`
        correct: true
      -
        value: >
          `condition: "id < 1000"`
        correct: false
      -
        value: >
          `condition: "request.attributes.get('id') < 1000"`
        correct: false
      -
        value: >
          `condition: "route_params.id < 1000"`
        correct: false
    help: |
      The `params` variable in the Expression Language provides access to the matched route parameters.
      https://symfony.com/doc/current/routing.html#expression-language-variables-and-functions

  -
    question: >
      What is the primary benefit of using route groups with prefixes (e.g., `prefix: '/blog'`)?
    answers:
      -
        value: >
          To avoid repeating the same URL prefix for multiple routes.
        correct: true
      -
        value: >
          To improve routing performance by reducing the number of routes.
        correct: false
      -
        value: >
          To enforce specific HTTP methods for a group of routes.
        correct: false
      -
        value: >
          To automatically generate localized URLs.
        correct: false
    help: |
      Route groups allow you to apply common configurations like URL prefixes, name prefixes, and requirements to a collection of routes, simplifying management and reducing redundancy.
      https://symfony.com/doc/current/routing.html#route-groups-and-prefixes

  -
    question: >
      When defining a route in YAML, how do you specify that the controller action is implemented as the `__invoke()` method of the controller class?
    answers:
      -
        value: >
          Omit the `::method_name` part from the `controller` value.
        correct: true
      -
        value: >
          Use `controller: App\Controller\BlogController::__invoke`.
        correct: false
      -
        value: >
          Set `invoke_method: true`.
        correct: false
      -
        value: >
          It's not possible to define `__invoke()` methods directly in YAML.
        correct: false
    help: |
      If a controller implements the `__invoke()` method, you can simply provide the class name as the controller value in YAML.
      https://symfony.com/doc/current/routing.html#defining-routes-in-yaml

  -
    question: >
      Which of the following is true regarding `UrlGeneratorInterface` in Symfony services?
    answers:
      -
        value: >
          It should be injected into the service to generate URLs.
        correct: true
      -
        value: >
          It is automatically available via `$this->urlGenerator` in any service.
        correct: false
      -
        value: >
          It can only generate absolute paths, not absolute URLs.
        correct: false
      -
        value: >
          It is deprecated in favor of a global helper function.
        correct: false
    help: |
      For generating URLs outside of controllers (e.g., in services), you should inject the `UrlGeneratorInterface` and use its `generate()` method.
      https://symfony.com/doc/current/routing.html#generating-urls-in-services

  -
    question: >
      What happens if you try to access a route defined with `env: 'dev'` in the `prod` environment?
    answers:
      -
        value: >
          The route will not be matched, resulting in a 404 Not Found error.
        correct: true
      -
        value: >
          The route will be matched, but a warning will be logged.
        correct: false
      -
        value: >
          Symfony will automatically redirect to a default route.
        correct: false
      -
        value: >
          The application will crash with an environment mismatch error.
        correct: false
    help: |
      Routes configured with the `env` option are only loaded and active in the specified environment(s). In other environments, they are effectively non-existent.
      https://symfony.com/doc/current/routing.html#environment-specific-routes

  -
    question: >
      When redirecting with `RedirectController`, which default option ensures that the original query string parameters are preserved in the redirected URL?
    answers:
      -
        value: >
          `keepQueryParams`
        correct: true
      -
        value: >
          `preserve_query`
        correct: false
      -
        value: >
          `pass_query_params`
        correct: false
      -
        value: >
          `retain_query`
        correct: false
    help: |
      The `keepQueryParams` option, when set to `true`, ensures that any query parameters from the original request are appended to the redirected URL.
      https://symfony.com/doc/current/routing.html#redirecting-routes

  -
    question: >
      Which of the following is the correct way to define a route in a PHP configuration file (`config/routes.php`)?
    answers:
      -
        value: |
          ```php
          use App\Controller\BlogController;
          use Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator;

          return function (RoutingConfigurator $routes): void {
              $routes->add('blog_list', '/blog')
                  ->controller([BlogController::class, 'list']);
          };
          ```
        correct: true
      -
        value: |
          ```php
          $routes->add('blog_list', '/blog', 'App\Controller\BlogController::list');
          ```
        correct: false
      -
        value: |
          ```php
          return [
              'blog_list' => [
                  'path' => '/blog',
                  'controller' => 'App\Controller\BlogController::list'
              ]
          ];
          ```
        correct: false
      -
        value: |
          ```php
          $router->addRoute('blog_list', '/blog', 'App\Controller\BlogController::list');
          ```
        correct: false
    help: |
      PHP routing files use the `RoutingConfigurator` object, which provides a fluent API for defining routes using the `add()` method.
      https://symfony.com/doc/current/routing.html#defining-routes-in-php-files

  -
    question: >
      What is the primary reason for defining localized routes (e.g., `/about-us` for English, `/over-ons` for Dutch) in Symfony?
    answers:
      -
        value: >
          To provide different URL paths for the same content based on the user's locale.
        correct: true
      -
        value: >
          To automatically translate the content of the page.
        correct: false
      -
        value: >
          To improve SEO by having separate domains for each language.
        correct: false
      -
        value: >
          To enable automatic language detection.
        correct: false
    help: |
      Localized routes allow you to have different URL patterns for the same route name, depending on the active locale, which is beneficial for internationalization and SEO.
      https://symfony.com/doc/current/routing.html#define-localized-routes

  -
    question: |
      You have a route group defined with a `name_prefix: 'admin_'`. If a route `dashboard` is defined within this group, what will be its full generated name?
    answers:
      -
        value: >
          `admin_dashboard`
        correct: true
      -
        value: >
          `dashboard`
        correct: false
      -
        value: >
          `admin/dashboard`
        correct: false
      -
        value: >
          `_admin_dashboard`
        correct: false
    help: |
      The `name_prefix` option adds a prefix to the beginning of all route names within the imported group.
      https://symfony.com/doc/current/routing.html#route-groups-and-prefixes

  -
    question: >
      When debugging routing issues, what information does `php bin/console debug:router --show-aliases` provide that `php bin/console debug:router` does not?
    answers:
      -
        value: >
          It displays all defined route aliases.
        correct: true
      -
        value: >
          It shows the controller associated with each route.
        correct: false
      -
        value: >
          It provides a detailed breakdown of route requirements.
        correct: false
      -
        value: >
          It highlights routes with conflicts.
        correct: false
    help: |
      The `--show-aliases` option specifically instructs the `debug:router` command to include route aliases in its output.
      https://symfony.com/doc/current/routing.html#filtering-routes

  -
    question: >
      What is the primary role of `Symfony\Component\Routing\RouteCollection`?
    answers:
      -
        value: >
          To hold a collection of `Route` objects.
        correct: true
      -
        value: >
          To define individual route patterns.
        correct: false
      -
        value: >
          To match incoming requests to routes.
        correct: false
      -
        value: >
          To generate URLs from route names.
        correct: false
    help: |
      `RouteCollection` is a container for multiple `Route` objects, representing all the routes defined in an application.
      https://symfony.com/doc/current/create_framework/routing.html#the-routing-component

  -
    question: >
      Which class is responsible for matching incoming request paths against the defined routes in the Symfony Routing component?
    answers:
      -
        value: >
          `Symfony\Component\Routing\Matcher\UrlMatcher`
        correct: true
      -
        value: >
          `Symfony\Component\Routing\Router`
        correct: false
      -
        value: >
          `Symfony\Component\Routing\RequestContext`
        correct: false
      -
        value: >
          `Symfony\Component\Routing\Loader\Loader`
        correct: false
    help: |
      The `UrlMatcher` class takes a `RouteCollection` and a `RequestContext` to determine which route matches a given URL.
      https://symfony.com/doc/current/create_framework/routing.html#matching-a-url

  -
    question: >
      When using `RedirectController`, what is the effect of setting `keepRequestMethod: true`?
    answers:
      -
        value: >
          For temporary redirects, it uses the 307 status code instead of 302; for permanent, it uses 308 instead of 301.
        correct: true
      -
        value: >
          It ensures that the original HTTP method (e.g., POST) is preserved when redirecting, forcing the client to resubmit with the same method.
        correct: true
      -
        value: >
          It automatically converts POST requests to GET requests during redirection.
        correct: false
      -
        value: >
          It only applies to redirects to external URLs.
        correct: false
    help: |
      The `keepRequestMethod` option changes the HTTP status code to 307 (Temporary Redirect) or 308 (Permanent Redirect) to explicitly tell the client to resubmit the request with the same HTTP method.
      https://symfony.com/doc/current/routing.html#redirecting-routes

  -
    question: >
      What is the purpose of the `service()` function in Symfony's routing Expression Language conditions?
    answers:
      -
        value: >
          Returns a routing condition service, which must be tagged with `#[AsRoutingConditionService]` or `routing.condition_service`.
        correct: true
      -
        value: >
          Injects a service into the routing condition expression.
        correct: false
      -
        value: >
          Checks if a service exists in the container.
        correct: false
      -
        value: >
          Defines a new service for routing purposes.
        correct: false
    help: |
      The `service()` function allows you to use custom services within your routing conditions, provided they are correctly tagged.
      https://symfony.com/doc/current/routing.html#expression-language-variables-and-functions

  -
    question: >
      When defining localized routes using PHP attributes, how do you specify different paths for different locales?
    answers:
      -
        value: |
          ```php
          #[Route(path: [
              'en' => '/about-us',
              'nl' => '/over-ons'
          ], name: 'about_us')]
          public function about(): Response {}
          ```
        correct: true
      -
        value: |
          ```php
          #[Route('/about-us', name: 'about_us', locales: ['en' => '/about-us', 'nl' => '/over-ons'])]
          public function about(): Response {}
          ```
        correct: false
      -
        value: |
          ```php
          #[Route(name: 'about_us')]
          #[LocalePath('en', '/about-us')]
          #[LocalePath('nl', '/over-ons')]
          public function about(): Response {}
          ```
        correct: false
      -
        value: >
          Localized paths are automatically generated based on translation files.
        correct: false
    help: |
      The `path` argument of the `#[Route]` attribute can accept an associative array mapping locales to their respective URL paths.
      https://symfony.com/doc/current/routing.html#define-localized-routes

  -
    question: >
      What is the correct way to configure Symfony to enable attribute-based routing by scanning the `src/Controller/` directory in YAML?
    answers:
      -
        value: |
          ```yaml
          controllers:
              resource: '../../src/Controller/'
              type: attribute
          ```
        correct: true
      -
        value: |
          ```yaml
          annotations:
              resource: '../../src/Controller/'
              type: annotation
          ```
        correct: false
      -
        value: |
          ```yaml
          routing:
              attributes: '../../src/Controller/'
          ```
        correct: false
      -
        value: |
          ```yaml
          import:
              - { resource: '../../src/Controller/', type: attribute }
          ```
        correct: false
    help: |
      The `resource` and `type: attribute` keys are used to tell Symfony to load routes from PHP attributes within the specified directory.
      https://symfony.com/doc/current/routing.html#loading-routes-from-php-attributes

  -
    question: >
      What is the default priority value for a Symfony route if not explicitly set?
    answers:
      -
        value: >
          `0`
        correct: true
      -
        value: >
          `1`
        correct: false
      -
        value: >
          `-1`
        correct: false
      -
        value: >
          `null`
        correct: false
    help: |
      The default priority for routes is 0. Routes with higher priority values are matched first.
      https://symfony.com/doc/current/routing.html#route-priority

  -
    question: >
      Which of the following is true about the `context` variable in Symfony's routing Expression Language?
    answers:
      -
        value: >
          It is an instance of `Symfony\Component\Routing\RequestContext`.
        correct: true
      -
        value: >
          It provides access to environment variables.
        correct: false
      -
        value: >
          It is the same as the `request` variable.
        correct: false
      -
        value: >
          It contains the matched route parameters.
        correct: false
    help: |
      The `context` variable provides access to the `RequestContext` object, which holds fundamental information about the current request context for routing.
      https://symfony.com/doc/current/routing.html#expression-language-variables-and-functions

  -
    question: >
      When importing routes, how can you apply a name prefix (e.g., `blog_`) to all imported route names using PHP configuration?
    answers:
      -
        value: |
          ```php
          $routes->import('../../src/Controller/', 'attribute')
              ->namePrefix('blog_');
          ```
        correct: true
      -
        value: |
          ```php
          $routes->import('../../src/Controller/', 'attribute')
              ->addNamePrefix('blog_');
          ```
        correct: false
      -
        value: |
          ```php
          $routes->import('../../src/Controller/', 'attribute', namePrefix: 'blog_');
          ```
        correct: false
      -
        value: >
          Name prefixes can only be applied in YAML or XML.
        correct: false
    help: |
      The `namePrefix()` method on the `RoutingConfigurator` allows you to add a prefix to all route names within an imported collection.
      https://symfony.com/doc/current/routing.html#route-groups-and-prefixes

  -
    question: >
      What is the primary function of `Symfony\Component\Routing\Generator\UrlGenerator`?
    answers:
      -
        value: >
          To generate URLs from route names and parameters.
        correct: true
      -
        value: >
          To match incoming URLs to defined routes.
        correct: false
      -
        value: >
          To load routes from configuration files.
        correct: false
      -
        value: >
          To manage the routing cache.
        correct: false
    help: |
      The `UrlGenerator` takes a `RouteCollection` and a `RequestContext` to construct URLs based on route definitions.
      https://symfony.com/doc/current/create_framework/routing.html#generating-urls

  -
    question: >
      Which of the following is a valid way to define a route with a default value for a parameter `id` (e.g., `1`) in PHP attributes?
    answers:
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', defaults: ['id' => 1])]
          public function show(int $id): Response {}
          ```
        correct: true
      -
        value: |
          ```php
          #[Route('/product/{id?1}', name: 'product_show')]
          public function show(int $id): Response {}
          ```
        correct: false
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show')]
          public function show(int $id = 1): Response {}
          ```
        correct: true
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', default_id: 1)]
          public function show(int $id): Response {}
          ```
        correct: false
    help: |
      Default values for route parameters can be defined using the `defaults` option in the `#[Route]` attribute or by providing a default value directly in the controller method signature.
      https://symfony.com/doc/current/routing.html#setting-default-values-for-route-parameters

  -
    question: >
      When using `RedirectController`, what is the effect of setting `ignoreAttributes: true`?
    answers:
      -
        value: >
          It removes all original route attributes when redirecting.
        correct: true
      -
        value: >
          It ignores all query parameters from the original request.
        correct: false
      -
        value: >
          It prevents the redirection from being logged.
        correct: false
      -
        value: >
          It ignores HTTP method constraints for the redirect.
        correct: false
    help: |
      The `ignoreAttributes` option allows you to control whether route attributes from the original request are carried over to the redirected URL. Setting it to `true` removes all of them.
      https://symfony.com/doc/current/routing.html#redirecting-routes

  -
    question: >
      What is the correct way to define a route that matches `m.example.com` for the mobile homepage and `www.example.com` for the main homepage using YAML?
    answers:
      -
        value: |
          ```yaml
          mobile_homepage:
              path: /
              host: m.example.com
              controller: App\Controller\MainController::mobileHomepage
          homepage:
              path: /
              host: www.example.com
              controller: App\Controller\MainController::homepage
          ```
        correct: true
      -
        value: |
          ```yaml
          mobile_homepage:
              path: /
              domain: m.example.com
              controller: App\Controller\MainController::mobileHomepage
          homepage:
              path: /
              domain: www.example.com
              controller: App\Controller\MainController::homepage
          ```
        correct: false
      -
        value: |
          ```yaml
          routes:
              - { path: /, host: m.example.com, controller: App\Controller\MainController::mobileHomepage }
              - { path: /, host: www.example.com, controller: App\Controller\MainController::homepage }
          ```
        correct: false
      -
        value: >
          Host matching is not supported in YAML routing configuration.
        correct: false
    help: |
      The `host` option in YAML route definitions allows you to specify a hostname or a dynamic hostname pattern for a route to match.
      https://symfony.com/doc/current/routing.html#matching-a-domain-name-or-subdomain

  -
    question: >
      What is the purpose of the `Symfony\Component\Routing\RequestContext` class?
    answers:
      -
        value: >
          It holds fundamental information about the route being matched, such as the HTTP method, host, and scheme.
        correct: true
      -
        value: >
          It represents the current HTTP request.
        correct: false
      -
        value: >
          It stores the matched route parameters.
        correct: false
      -
        value: >
          It manages the routing cache context.
        correct: false
    help: |
      `RequestContext` provides the necessary context (like host, scheme, HTTP method) for the `UrlMatcher` and `UrlGenerator` to operate correctly.
      https://symfony.com/doc/current/create_framework/routing.html#the-routing-component

  -
    question: >
      You encounter the error: "Controller 'App\Controller\BlogController::show()' requires that you provide a value for the '$slug' argument." What is the most likely cause?
    answers:
      -
        value: >
          The route path for `BlogController::show()` is missing the `{slug}` parameter.
        correct: true
      -
        value: >
          The `$slug` argument in the controller method is not type-hinted correctly.
        correct: false
      -
        value: >
          The route definition has a default value for `slug` that is not being applied.
        correct: false
      -
        value: >
          The `slug` parameter is defined as optional in the route, but the controller expects it.
        correct: false
    help: |
      This error typically means that the controller method expects a route parameter, but the route definition itself does not include that parameter in its path.
      https://symfony.com/doc/current/routing.html#troubleshooting-routing

  -
    question: >
      Which of the following is NOT a valid type for the `resource` option when importing routes in Symfony?
    answers:
      -
        value: >
          `database`
        correct: true
      -
        value: >
          `attribute`
        correct: false
      -
        value: >
          `yaml`
        correct: false
      -
        value: >
          `php`
        correct: false
    help: |
      Symfony's built-in route loaders support types like `attribute`, `yaml`, `xml`, and `php`. There is no native `database` type for route resources.
      https://symfony.com/doc/current/routing.html#loading-routes-from-other-files

  -
    question: >
      What is the purpose of the `#[Route]` attribute on a controller class itself (not on a method)?
    answers:
      -
        value: >
          To define common configurations (e.g., prefix, requirements, name prefix) for all routes within that controller.
        correct: true
      -
        value: >
          To make the controller invokable via a default route.
        correct: false
      -
        value: >
          To specify the base path for all actions in the controller.
        correct: false
      -
        value: >
          To automatically register all public methods as routes.
        correct: false
    help: |
      Applying `#[Route]` to the controller class allows you to define shared settings that apply to all route methods within that controller, simplifying configuration.
      https://symfony.com/doc/current/routing.html#defining-route-groups-in-a-controller

  -
    question: >
      When defining a route with a requirement for a parameter (e.g., `page` as a digit `\d+`), where can this requirement be specified in YAML?
    answers:
      -
        value: |
          ```yaml
          blog_list:
              path: /blog/{page}
              controller: App\Controller\BlogController::list
              requirements:
                  page: '\d+'
          ```
        correct: true
      -
        value: |
          ```yaml
          blog_list:
              path: /blog/{page<\d+>}
              controller: App\Controller\BlogController::list
          ```
        correct: false
      -
        value: |
          ```yaml
          blog_list:
              path: /blog/{page}
              controller: App\Controller\BlogController::list
              defaults:
                  page: '\d+'
          ```
        correct: false
      -
        value: >
          Requirements can only be defined using PHP attributes.
        correct: false
    help: |
      In YAML, requirements for route parameters are defined under the `requirements` key, with the parameter name as the key and the regular expression as the value.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      Which of the following is a valid way to define a route with HTTP method restrictions (GET and POST) in YAML?
    answers:
      -
        value: |
          ```yaml
          contact:
              path: /contact
              controller: App\Controller\DefaultController::contact
              methods: [GET, POST]
          ```
        correct: true
      -
        value: |
          ```yaml
          contact:
              path: /contact
              controller: App\Controller\DefaultController::contact
              http_methods: [GET, POST]
          ```
        correct: false
      -
        value: |
          ```yaml
          contact:
              path: /contact
              controller: App\Controller\DefaultController::contact
              requirements:
                  _method: GET|POST
          ```
        correct: false
      -
        value: >
          HTTP method restrictions are only supported via PHP attributes.
        correct: false
    help: |
      The `methods` key in YAML route definitions allows you to specify an array of allowed HTTP methods for the route.
      https://symfony.com/doc/current/routing.html#matching-http-methods

  -
    question: >
      What is the significance of the `_route_params` attribute available on the `Request` object?
    answers:
      -
        value: >
          It contains an array of all matched route parameters for the current request.
        correct: true
      -
        value: >
          It contains all query parameters from the URL.
        correct: false
      -
        value: >
          It lists all possible parameters for the current route.
        correct: false
      -
        value: >
          It is an alias for `request->query->all()`.
        correct: false
    help: |
      The `_route_params` attribute on the `Request` object provides direct access to the values of the parameters that were extracted from the URL by the router.
      https://symfony.com/doc/current/routing.html#accessing-route-name-and-parameters-from-the-request-object

  -
    question: >
      When defining a route with a dynamic host (e.g., `{subdomain}.example.com`), how can you set a default value for the `subdomain` parameter in YAML?
    answers:
      -
        value: |
          ```yaml
          mobile_homepage:
              path: /
              host: "{subdomain}.example.com"
              controller: App\Controller\MainController::mobileHomepage
              defaults:
                  subdomain: m
          ```
        correct: true
      -
        value: |
          ```yaml
          mobile_homepage:
              path: /
              host: "{subdomain}.example.com"
              controller: App\Controller\MainController::mobileHomepage
              default_subdomain: m
          ```
        correct: false
      -
        value: |
          ```yaml
          mobile_homepage:
              path: /
              host: "{subdomain}.example.com"
              controller: App\Controller\MainController::mobileHomepage
              parameters:
                  subdomain: m
          ```
        correct: false
      -
        value: >
          Default values for host parameters are not supported in YAML.
        correct: false
    help: |
      Default values for dynamic host parameters are defined under the `defaults` key, similar to regular route parameters.
      https://symfony.com/doc/current/routing.html#matching-a-domain-name-or-subdomain

  -
    question: >
      What is the correct way to define a route named `blog_show` for the path `/blog/{slug}` in XML?
    answers:
      -
        value: |
          ```xml
          <route id="blog_show" path="/blog/{slug}" controller="App\Controller\BlogController::show"/>
          ```
        correct: true
      -
        value: |
          ```xml
          <route name="blog_show" url="/blog/{slug}" action="App\Controller\BlogController::show"/>
          ```
        correct: false
      -
        value: |
          ```xml
          <route id="blog_show">
              <path>/blog/{slug}</path>
              <controller>App\Controller\BlogController::show</controller>
          </route>
          ```
        correct: true
      -
        value: |
          ```xml
          <route path="/blog/{slug}">
              <id>blog_show</id>
              <controller>App\Controller\BlogController::show</controller>
          </route>
          ```
        correct: false
    help: |
      XML route definitions use the `<route>` tag with `id`, `path`, and `controller` attributes, or nested elements for more complex configurations.
      https://symfony.com/doc/current/routing.html#defining-routes-in-xml-files

  -
    question: >
      Which of the following is a valid way to define a route with a `condition` that checks if the `User-Agent` header matches `/firefox/i` in YAML?
    answers:
      -
        value: |
          ```yaml
          contact:
              path: /contact
              controller: App\Controller\DefaultController::contact
              condition: "request.headers.get('User-Agent') matches '/firefox/i'"
          ```
        correct: true
      -
        value: |
          ```yaml
          contact:
              path: /contact
              controller: App\Controller\DefaultController::contact
              requirements:
                  _user_agent: '/firefox/i'
          ```
        correct: false
      -
        value: |
          ```yaml
          contact:
              path: /contact
              controller: App\Controller\DefaultController::contact
              when: "request.headers.get('User-Agent') matches '/firefox/i'"
          ```
        correct: false
      -
        value: >
          Conditional routing based on headers is not supported in YAML.
        correct: false
    help: |
      The `condition` key in YAML allows you to define complex routing conditions using Symfony's Expression Language.
      https://symfony.com/doc/current/routing.html#adding-conditions-to-routes

  -
    question: >
      What is the purpose of the `Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader`?
    answers:
      -
        value: >
          It is the main loader responsible for delegating route loading to specialized loaders (e.g., for YAML, XML, attributes).
        correct: true
      -
        value: >
          It loads routes from a database.
        correct: false
      -
        value: >
          It generates URLs based on route definitions.
        correct: false
      -
        value: >
          It handles caching of route definitions.
        correct: false
    help: |
      The `DelegatingLoader` acts as a central point for loading routes, dispatching the task to the appropriate loader based on the resource type.
      https://symfony.com/doc/current/routing/custom_route_loader.html#the-routing-component-api

  -
    question: >
      Which method of `Symfony\Component\Config\Loader\LoaderInterface` is used to check if the loader supports a given resource and type?
    answers:
      -
        value: >
          `supports(resource: string, type: string): bool`
        correct: true
      -
        value: >
          `canLoad(resource: string, type: string): bool`
        correct: false
      -
        value: >
          `isSupported(resource: string, type: string): bool`
        correct: false
      -
        value: >
          `checkSupport(resource: string, type: string): bool`
        correct: false
    help: |
      The `supports()` method is a crucial part of the `LoaderInterface`, allowing Symfony to determine which loader should handle a specific routing resource.
      https://symfony.com/doc/current/routing/custom_route_loader.html#the-routing-component-api

  -
    question: >
      When using `RedirectController` to redirect to an internal route, which default option is used to specify the target route's name?
    answers:
      -
        value: >
          `route`
        correct: true
      -
        value: >
          `target_route`
        correct: false
      -
        value: >
          `name`
        correct: false
      -
        value: >
          `route_name`
        correct: false
    help: |
      The `route` default option is used to specify the name of the internal Symfony route to which the request should be redirected.
      https://symfony.com/doc/current/routing.html#redirecting-routes

  -
    question: >
      How can you define a route with a parameter `page` that must be an integer, using the inline syntax in the path itself (PHP attributes)?
    answers:
      -
        value: |
          ```php
          #[Route('/blog/{page<\d+>}', name: 'blog_list')]
          public function list(int $page): Response {}
          ```
        correct: true
      -
        value: |
          ```php
          #[Route('/blog/{page:int}', name: 'blog_list')]
          public function list(int $page): Response {}
          ```
        correct: false
      -
        value: |
          ```php
          #[Route('/blog/{page}', name: 'blog_list', type: 'int')]
          public function list(int $page): Response {}
          ```
        correct: false
      -
        value: >
          Inline requirements are not supported in PHP attributes.
        correct: false
    help: |
      Symfony allows defining requirements directly within the route path using the `<regex>` syntax for PHP attributes.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      What is the purpose of the `_locale` special parameter when defining a route's default values?
    answers:
      -
        value: >
          To set the default locale for the route if no locale is explicitly provided in the URL.
        correct: true
      -
        value: >
          To specify the only locale that the route can match.
        correct: false
      -
        value: >
          To automatically translate the route path based on the default locale.
        correct: false
      -
        value: >
          To define a fallback locale for the application.
        correct: false
    help: |
      Setting a default `_locale` for a route ensures that a specific locale is used if the URL does not provide one, or if it's the default for localized routes.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is a correct way to define a route named `tools` that is only active in the `dev` environment using YAML?
    answers:
      -
        value: |
          ```yaml
          tools:
              path: /tools
              controller: App\Controller\DefaultController::developerTools
              env: dev
          ```
        correct: true
      -
        value: |
          ```yaml
          tools:
              path: /tools
              controller: App\Controller\DefaultController::developerTools
              environment: dev
          ```
        correct: false
      -
        value: |
          ```yaml
          tools:
              path: /tools
              controller: App\Controller\DefaultController::developerTools
              if_env: dev
          ```
        correct: false
      -
        value: >
          Environment-specific routes cannot be defined in YAML.
        correct: false
    help: |
      The `env` key in YAML route definitions allows you to restrict the route to one or more specific environments.
      https://symfony.com/doc/current/routing.html#environment-specific-routes

  -
    question: >
      When generating a URL, if a route has a required parameter `id` but it's not provided, what kind of exception will be thrown?
    answers:
      -
        value: >
          `Symfony\Component\Routing\Exception\MissingMandatoryParametersException`
        correct: false
      -
        value: >
          `Symfony\Component\Routing\Exception\InvalidParameterException`
        correct: false
      -
        value: >
          `Symfony\Component\Routing\Exception\RouteNotFoundException` (indirectly, as it won't be able to generate the URL)
        correct: true
      -
        value: >
          `Symfony\Component\Routing\Exception\ParameterNotFoundException`
        correct: false
    help: |
      While there isn't a direct `MissingMandatoryParametersException`, the `UrlGenerator` will fail to generate the URL, typically leading to a `RouteNotFoundException` because the route cannot be fully resolved without its required parameters. The error message would be similar to "Some mandatory parameters are missing".
      https://symfony.com/doc/current/routing.html#troubleshooting-routing

  -
    question: >
      What is the purpose of the `_format` special parameter when defining a route's default values?
    answers:
      -
        value: >
          To set the default format (e.g., `html`, `json`) for the route if no format is explicitly provided in the URL.
        correct: true
      -
        value: >
          To specify the only format that the route can output.
        correct: false
      -
        value: >
          To define the default response content type.
        correct: false
      -
        value: >
          To automatically convert the response to the specified format.
        correct: false
    help: |
      Setting a default `_format` for a route ensures that a specific format is used if the URL does not specify one, influencing the `Content-Type` header.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is the correct way to access all available attributes (including routing ones) from the `Request` object in a Symfony controller?
    answers:
      -
        value: >
          `$request->attributes->all()`
        correct: true
      -
        value: >
          `$request->getAllAttributes()`
        correct: false
      -
        value: >
          `$request->attributes()`
        correct: false
      -
        value: >
          `$request->getAttributes()`
        correct: false
    help: |
      The `attributes` property of the `Request` object is an `ParameterBag` instance, and its `all()` method retrieves all stored attributes.
      https://symfony.com/doc/current/routing.html#accessing-route-name-and-parameters-from-the-request-object

  -
    question: >
      When defining localized routes using YAML, how do you specify different paths for various locales?
    answers:
      -
        value: |
          ```yaml
          about_us:
              path:
                  en: /about-us
                  nl: /over-ons
              controller: App\Controller\CompanyController::about
          ```
        correct: true
      -
        value: |
          ```yaml
          about_us:
              path_en: /about-us
              path_nl: /over-ons
              controller: App\Controller\CompanyController::about
          ```
        correct: false
      -
        value: |
          ```yaml
          about_us:
              path: /about-us
              locale_paths:
                  nl: /over-ons
              controller: App\Controller\CompanyController::about
          ```
        correct: false
      -
        value: >
          Localized paths are not directly supported in YAML for individual routes.
        correct: false
    help: |
      In YAML, the `path` key can accept a map of locales to their specific URL patterns for localized routes.
      https://symfony.com/doc/current/routing.html#define-localized-routes

  -
    question: >
      What is the main advantage of using PHP backed Enums as route parameters in Symfony 7?
    answers:
      -
        value: >
          Automatic type conversion from URL segment to Enum instance, improving type safety and readability.
        correct: true
      -
        value: >
          Enums are automatically translated into localized URL segments.
        correct: false
      -
        value: >
          It allows for dynamic route generation based on Enum values.
        correct: false
      -
        value: >
          It enables automatic validation of route parameters against Enum cases.
        correct: false
    help: |
      Symfony's argument resolver automatically converts the scalar value from the URL into the corresponding PHP backed Enum instance, providing strong type-hinting in controllers.
      https://symfony.com/doc/current/routing.html#route-parameter-with-php-backed-enum

  -
    question: >
      Which of the following is true about the `params` variable in Symfony's routing Expression Language?
    answers:
      -
        value: >
          It is an array of matched route parameters for the current route.
        correct: true
      -
        value: >
          It contains all query string parameters.
        correct: false
      -
        value: >
          It is an object representing the route definition.
        correct: false
      -
        value: >
          It is an alias for `request->attributes->get('_route_params')`.
        correct: false
    help: |
      The `params` variable provides direct access to the values of the route parameters that were matched from the URL.
      https://symfony.com/doc/current/routing.html#expression-language-variables-and-functions

  -
    question: >
      How can you apply a host-based routing rule for different locales (e.g., `www.example.com` for English, `www.example.nl` for Dutch) when importing routes in PHP configuration?
    answers:
      -
        value: |
          ```php
          return static function (RoutingConfigurator $routes): void {
              $routes->import('../../src/Controller/', 'attribute')
                  ->host([
                      'en' => 'www.example.com',
                      'nl' => 'www.example.nl',
                  ]);
          };
          ```
        correct: true
      -
        value: |
          ```php
          return static function (RoutingConfigurator $routes): void {
              $routes->import('../../src/Controller/', 'attribute')
                  ->localeHost([
                      'en' => 'www.example.com',
                      'nl' => 'www.example.nl',
                  ]);
          };
          ```
        correct: false
      -
        value: |
          ```php
          return static function (RoutingConfigurator $routes): void {
              $routes->import('../../src/Controller/', 'attribute')
                  ->setHostByLocale([
                      'en' => 'www.example.com',
                      'nl' => 'www.example.nl',
                  ]);
          };
          ```
        correct: false
      -
        value: >
          Host-based routing for different locales is not supported for imported routes.
        correct: false
    help: |
      The `host()` method on the `RoutingConfigurator` can accept an associative array mapping locales to their respective host patterns when importing routes.
      https://symfony.com/doc/current/routing.html#host-based-routing

  -
    question: >
      What is the correct way to define a route named `blog_list` for the path `/blog` in a PHP configuration file, where the controller is `App\Controller\BlogController` and the action is `list()`?
    answers:
      -
        value: |
          ```php
          use App\Controller\BlogController;
          use Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator;

          return function (RoutingConfigurator $routes): void {
              $routes->add('blog_list', '/blog')
                  ->controller([BlogController::class, 'list']);
          };
          ```
        correct: true
      -
        value: |
          ```php
          use App\Controller\BlogController;
          use Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator;

          return function (RoutingConfigurator $routes): void {
              $routes->add('blog_list', '/blog', 'App\Controller\BlogController::list');
          };
          ```
        correct: false
      -
        value: |
          ```php
          $routes->add('blog_list', '/blog')
              ->controller('App\Controller\BlogController::list');
          ```
        correct: true
      -
        value: |
          ```php
          return [
              'blog_list' => [
                  'path' => '/blog',
                  'controller' => 'App\Controller\BlogController::list'
              ]
          ];
          ```
        correct: false
    help: |
      The `controller()` method of a route definition in PHP configurator can accept either an array `[ControllerClass::class, 'methodName']` or a string `'ControllerClass::methodName'`.
      https://symfony.com/doc/current/routing.html#defining-routes-in-php-files

  -
    question: >
      Which of the following describes the behavior of a route defined with `stateless: true`?
    answers:
      -
        value: >
          Symfony will not start or use a session when matching this route, which can improve caching.
        correct: true
      -
        value: >
          The route will not store any data in the database.
        correct: false
      -
        value: >
          The route will always return a 200 OK status code.
        correct: false
      -
        value: >
          The route will not generate any logs.
        correct: false
    help: |
      Marking a route as `stateless` indicates that it does not rely on session state, allowing Symfony to optimize its handling, particularly for caching mechanisms.
      https://symfony.com/doc/current/routing.html#stateless-routes

  -
    question: >
      What is the primary function of `Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator`?
    answers:
      -
        value: >
          It provides a fluent API for defining and configuring routes in PHP routing files.
        correct: true
      -
        value: >
          It loads routes from YAML and XML files.
        correct: false
      -
        value: >
          It is responsible for compiling the routing cache.
        correct: false
      -
        value: >
          It matches URLs to routes.
        correct: false
    help: |
      The `RoutingConfigurator` is the main object used in PHP routing files to define routes programmatically.
      https://symfony.com/doc/current/routing.html#defining-routes-in-php-files

  -
    question: >
      When using `debug:router`, what does the `ANY` value for the `--method` option signify?
    answers:
      -
        value: >
          It displays routes that match any HTTP method.
        correct: true
      -
        value: >
          It displays routes that have no explicit HTTP method restriction.
        correct: true
      -
        value: >
          It displays routes that match only the `ANY` method.
        correct: false
      -
        value: >
          It's an invalid option for `--method`.
        correct: false
    help: |
      The `ANY` value for `--method` is a special keyword used with `debug:router` to show routes that are configured to match any HTTP method.
      https://symfony.com/doc/current/routing.html#filtering-routes

  -
    question: >
      Which of the following is true about route aliases in Symfony?
    answers:
      -
        value: >
          They provide an alternative name for an existing route, pointing to the same route definition.
        correct: true
      -
        value: >
          They create a separate route with a different path but the same controller.
        correct: false
      -
        value: >
          They are primarily used for redirecting old URLs to new ones.
        correct: false
      -
        value: >
          They automatically inherit all requirements and defaults from the aliased route.
        correct: true
    help: |
      Route aliases allow you to have multiple names for the same underlying route, which is useful for backward compatibility or providing more descriptive names. They inherit all properties of the aliased route.
      https://symfony.com/doc/current/routing.html#route-aliases

  -
    question: >
      What is the purpose of the `_controller` special parameter when generating URLs?
    answers:
      -
        value: >
          It can be used to override the controller for a generated URL, though this is rarely needed.
        correct: true
      -
        value: >
          It is a required parameter for all URL generation.
        correct: false
      -
        value: >
          It specifies the default controller for the application.
        correct: false
      -
        value: >
          It is only used internally by the router and cannot be set manually.
        correct: false
    help: |
      While primarily used internally during route matching, `_controller` can technically be passed as a parameter during URL generation, though it's an advanced and uncommon use case.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is a valid way to define a route with a default value for the `_locale` parameter (e.g., `en`) and requirements for `_locale` (`en|fr`) and `_format` (`html|xml`) in PHP attributes?
    answers:
      -
        value: |
          ```php
          #[Route(
              path: '/articles/{_locale}/search.{_format}',
              locale: 'en',
              format: 'html',
              requirements: [
                  '_locale' => 'en|fr',
                  '_format' => 'html|xml',
              ],
          )]
          public function search(): Response {}
          ```
        correct: true
      -
        value: |
          ```php
          #[Route(
              path: '/articles/{_locale}/search.{_format}',
              defaults: ['_locale' => 'en', '_format' => 'html'],
              requirements: [
                  '_locale' => 'en|fr',
                  '_format' => 'html|xml',
              ],
          )]
          public function search(): Response {}
          ```
        correct: true
      -
        value: |
          ```php
          #[Route('/articles/{_locale}/search.{_format}', name: 'article_search')]
          #[DefaultLocale('en')]
          #[DefaultFormat('html')]
          #[Requirement('_locale', 'en|fr')]
          #[Requirement('_format', 'html|xml')]
          public function search(): Response {}
          ```
        correct: false
      -
        value: >
          Special parameters like `_locale` and `_format` cannot have default values or requirements.
        correct: false
    help: |
      Special routing parameters like `_locale` and `_format` can have default values (using `locale` and `format` options directly, or `defaults`) and requirements defined like any other route parameter.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      What is the main purpose of the `php bin/console router:match` command?
    answers:
      -
        value: >
          To identify which Symfony route matches a specific URL.
        correct: true
      -
        value: >
          To test the performance of the router.
        correct: false
      -
        value: >
          To generate a URL for a given route name.
        correct: false
      -
        value: >
          To list all routes that contain a specific parameter.
        correct: false
    help: |
      The `router:match` command is a powerful debugging tool that simulates a request and shows which route would be matched by a given URL, along with its parameters.
      https://symfony.com/doc/current/routing.html#matching-a-url

  -
    question: >
      Which of the following is a valid way to define a route that only matches `GET` requests in XML?
    answers:
      -
        value: |
          ```xml
          <route id="my_route" path="/my-path" controller="App\Controller\MyController::action">
              <method>GET</method>
          </route>
          ```
        correct: true
      -
        value: |
          ```xml
          <route id="my_route" path="/my-path" controller="App\Controller\MyController::action" methods="GET"/>
          ```
        correct: false
      -
        value: |
          ```xml
          <route id="my_route" path="/my-path" controller="App\Controller\MyController::action">
              <requirement key="_method">GET</requirement>
          </route>
          ```
        correct: true
      -
        value: >
          HTTP method restrictions are not supported in XML.
        correct: false
    help: |
      In XML, HTTP methods can be specified using a nested `<method>` tag or as a requirement for the `_method` special parameter.
      https://symfony.com/doc/current/routing.html#matching-http-methods

  -
    question: >
      When importing routes using PHP configuration, how can you apply a global requirement (e.g., `_locale: 'en|es|fr'`) to all imported routes?
    answers:
      -
        value: |
          ```php
          return static function (RoutingConfigurator $routes): void {
              $routes->import('../../src/Controller/', 'attribute')
                  ->requirements(['_locale' => 'en|es|fr']);
          };
          ```
        correct: true
      -
        value: |
          ```php
          return static function (RoutingConfigurator $routes): void {
              $routes->import('../../src/Controller/', 'attribute')
                  ->setRequirements(['_locale' => 'en|es|fr']);
          };
          ```
        correct: false
      -
        value: |
          ```php
          return static function (RoutingConfigurator $routes): void {
              $routes->import('../../src/Controller/', 'attribute', requirements: ['_locale' => 'en|es|fr']);
          };
          ```
        correct: false
      -
        value: >
          Global requirements for imported routes are not supported in PHP.
        correct: false
    help: |
      The `requirements()` method on the `RoutingConfigurator` allows you to define requirements that apply to all routes within the imported collection.
      https://symfony.com/doc/current/routing.html#route-groups-and-prefixes

  -
    question: >
      What is the purpose of the `_fragment` special parameter when generating URLs?
    answers:
      -
        value: >
          To append a fragment identifier (e.g., `#section`) to the generated URL.
        correct: true
      -
        value: >
          To specify a partial URL that can be completed later.
        correct: false
      -
        value: >
          To indicate that the URL should be loaded via AJAX.
        correct: false
      -
        value: >
          To define a placeholder for a dynamic part of the URL.
        correct: false
    help: |
      The `_fragment` parameter allows you to include a URL fragment, which is commonly used for in-page navigation.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is a valid way to define a route with a `condition` that checks if a route parameter `id` is less than 1000 in XML?
    answers:
      -
        value: |
          ```xml
          <route id="post_show" path="/posts/{id}" controller="App\Controller\DefaultController::showPost">
              <condition>params['id'] &lt; 1000</condition>
          </route>
          ```
        correct: true
      -
        value: |
          ```xml
          <route id="post_show" path="/posts/{id}" controller="App\Controller\DefaultController::showPost" condition="params['id'] < 1000"/>
          ```
        correct: false
      -
        value: |
          ```xml
          <route id="post_show" path="/posts/{id}" controller="App\Controller\DefaultController::showPost">
              <requirement key="id_less_than_1000"/>
          </route>
          ```
        correct: false
      -
        value: >
          Conditional routing based on route parameters is not supported in XML.
        correct: false
    help: |
      XML route definitions support the `<condition>` tag, where you can use Expression Language, ensuring to escape HTML entities like `<` as `&lt;`.
      https://symfony.com/doc/current/routing.html#adding-conditions-to-routes

  -
    question: >
      What is the purpose of the `_locale` special parameter when defining requirements for a route?
    answers:
      -
        value: >
          To restrict the route to match only specific locales (e.g., `en|fr`).
        correct: true
      -
        value: >
          To define the default locale for the route.
        correct: false
      -
        value: >
          To enable automatic locale detection for the route.
        correct: false
      -
        value: >
          To translate the route path based on the matched locale.
        correct: false
    help: |
      Adding a requirement to `_locale` allows you to validate that the locale provided in the URL matches a predefined pattern.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is the correct way to define a route with a default value for a parameter `id` (e.g., `1`) in YAML?
    answers:
      -
        value: |
          ```yaml
          product_show:
              path: /product/{id}
              controller: App\Controller\ProductController::show
              defaults:
                  id: 1
          ```
        correct: true
      -
        value: |
          ```yaml
          product_show:
              path: /product/{id?1}
              controller: App\Controller\ProductController::show
          ```
        correct: false
      -
        value: |
          ```yaml
          product_show:
              path: /product/{id}
              controller: App\Controller\ProductController::show
              default_id: 1
          ```
        correct: false
      -
        value: >
          Default values for parameters are not supported in YAML.
        correct: false
    help: |
      In YAML, default values for route parameters are defined under the `defaults` key, with the parameter name as the key and its default value.
      https://symfony.com/doc/current/routing.html#setting-default-values-for-route-parameters

  -
    question: >
      What is the primary benefit of using `#[Route]` attributes directly in controllers for defining routes?
    answers:
      -
        value: >
          Routes are defined alongside the code that handles them, improving readability and maintainability.
        correct: true
      -
        value: >
          It eliminates the need for routing cache generation.
        correct: false
      -
        value: >
          It automatically handles all route parameter conversions.
        correct: false
      -
        value: >
          It provides better performance than YAML or XML routing.
        correct: false
    help: |
      Defining routes with attributes keeps the route configuration close to the controller logic, making it easier to understand and manage.
      https://symfony.com/doc/current/routing.html#defining-routes-in-php-attributes

  -
    question: >
      Which of the following is a valid way to define a route that allows slashes in the `token` parameter using YAML?
    answers:
      -
        value: |
          ```yaml
          share:
              path: /share/{token}
              controller: App\Controller\DefaultController::share
              requirements:
                  token: .+\
          ```
        correct: true
      -
        value: |
          ```yaml
          share:
              path: /share/{token}
              controller: App\Controller\DefaultController::share
              allow_slashes:
                  token: true
          ```
        correct: false
      -
        value: |
          ```yaml
          share:
              path: /share/{token<.+>}
              controller: App\Controller\DefaultController::share
          ```
        correct: false
      -
        value: >
          Slashes are automatically allowed in all parameters by default.
        correct: false
    help: |
      To allow slashes in a route parameter, a requirement using `.+` (match one or more characters, including slashes) must be explicitly defined.
      https://symfony.com/doc/current/routing.html#allowing-a-slash-character-in-a-route-parameter

  -
    question: >
      What is the purpose of the `_format` special parameter when defining requirements for a route?
    answers:
      -
        value: >
          To restrict the route to match only specific formats (e.g., `html|xml`).
        correct: true
      -
        value: >
          To set the default format for the route.
        correct: false
      -
        value: >
          To enable automatic format negotiation.
        correct: false
      -
        value: >
          To define the output content type of the response.
        correct: false
    help: |
      Adding a requirement to `_format` allows you to validate that the format provided in the URL matches a predefined pattern.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is true about the `UrlGeneratorInterface::ABSOLUTE_PATH` constant?
    answers:
      -
        value: >
          It generates a URL that starts with a slash (e.g., `/blog/post`).
        correct: true
      -
        value: >
          It generates a full URL including the scheme and host.
        correct: false
      -
        value: >
          It generates a URL relative to the current request path.
        correct: false
      -
        value: >
          It is the default behavior when generating URLs.
        correct: true
    help: |
      `ABSOLUTE_PATH` generates a URL that is absolute from the web root, starting with a `/`. This is the default generation type.
      https://symfony.com/doc/current/routing.html#generating-absolute-urls

  -
    question: >
      What is the primary purpose of the `Symfony\Component\Routing\Route` class?
    answers:
      -
        value: >
          It represents a single route definition, including its path, defaults, and requirements.
        correct: true
      -
        value: >
          It is a collection of multiple route definitions.
        correct: false
      -
        value: >
          It is responsible for matching URLs to controllers.
        correct: false
      -
        value: >
          It generates URLs from route names.
        correct: false
    help: |
      The `Route` class encapsulates all the information needed to define a single route within the Symfony routing system.
      https://symfony.com/doc/current/create_framework/routing.html#the-routing-component

  -
    question: >
      When defining a route with a `condition` using Expression Language, which variable provides access to the matched route parameters?
    answers:
      -
        value: >
          `params`
        correct: true
      -
        value: >
          `route_params`
        correct: false
      -
        value: >
          `attributes`
        correct: false
      -
        value: >
          `request.attributes.get('_route_params')`
        correct: false
    help: |
      The `params` variable is specifically designed to provide easy access to the matched route parameters within Expression Language conditions.
      https://symfony.com/doc/current/routing.html#expression-language-variables-and-functions

  -
    question: >
      Which of the following is a valid way to define a route named `product_show` for the path `/product/{id}` in XML, with a default value for `id` of `1`?
    answers:
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id}" controller="App\Controller\ProductController::show">
              <default key="id">1</default>
          </route>
          ```
        correct: true
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id}" controller="App\Controller\ProductController::show" default_id="1"/>
          ```
        correct: false
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id?1}" controller="App\Controller\ProductController::show"/>
          ```
        correct: false
      -
        value: >
          Default values for parameters are not supported in XML.
        correct: false
    help: |
      In XML, default values for route parameters are defined using nested `<default>` tags with `key` and value attributes.
      https://symfony.com/doc/current/routing.html#setting-default-values-for-route-parameters

  -
    question: >
      What is the primary reason for using `php bin/console debug:router --method=ANY`?
    answers:
      -
        value: >
          To see all routes that are not restricted to specific HTTP methods.
        correct: true
      -
        value: >
          To list all routes in the application regardless of their method.
        correct: true
      -
        value: >
          To identify routes that have conflicting HTTP method definitions.
        correct: false
      -
        value: >
          To test if a route can be accessed with any HTTP method.
        correct: false
    help: |
      The `ANY` value for the `--method` option with `debug:router` displays routes that are configured to match any HTTP method, effectively showing all routes without method restrictions.
      https://symfony.com/doc/current/routing.html#filtering-routes

  -
    question: >
      When defining a route with a requirement for a parameter (e.g., `page` as a digit `\d+`), where can this requirement be specified in XML?
    answers:
      -
        value: |
          ```xml
          <route id="blog_list" path="/blog/{page}" controller="App\Controller\BlogController::list">
              <requirement key="page">\d+</requirement>
          </route>
          ```
        correct: true
      -
        value: |
          ```xml
          <route id="blog_list" path="/blog/{page<\d+>}" controller="App\Controller\BlogController::list"/>
          ```
        correct: false
      -
        value: |
          ```xml
          <route id="blog_list" path="/blog/{page}" controller="App\Controller\BlogController::list" requirement_page="\d+"/>
          ```
        correct: false
      -
        value: >
          Requirements can only be defined using PHP attributes or YAML.
        correct: false
    help: |
      In XML, requirements for route parameters are defined using nested `<requirement>` tags with `key` and value attributes.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      Which of the following is true about the `Symfony\Component\Routing\Loader\LoaderInterface`?
    answers:
      -
        value: >
          It defines the contract for all Symfony loaders, including methods like `supports()` and `load()`.
        correct: true
      -
        value: >
          It is specifically for loading routes from YAML files.
        correct: false
      -
        value: >
          It is responsible for compiling the routing cache.
        correct: false
      -
        value: >
          It is an abstract class that must be extended by custom loaders.
        correct: false
    help: |
      `LoaderInterface` is the fundamental interface for any class that can load resources in Symfony, including routing configurations.
      https://symfony.com/doc/current/routing/custom_route_loader.html#the-routing-component-api

  -
    question: >
      What is the primary benefit of using `UrlGeneratorInterface` in a Symfony service for generating URLs?
    answers:
      -
        value: >
          It allows for decoupled URL generation logic, making the service reusable and testable.
        correct: true
      -
        value: >
          It automatically handles all route parameter validation.
        correct: false
      -
        value: >
          It provides a faster way to generate URLs compared to controllers.
        correct: false
      -
        value: >
          It ensures that all generated URLs are absolute.
        correct: false
    help: |
      Injecting `UrlGeneratorInterface` into services promotes good architectural practices by separating concerns and making the service independent of the controller's `generateUrl()` helper.
      https://symfony.com/doc/current/routing.html#generating-urls-in-services

  -
    question: >
      When defining localized routes using XML, how do you specify different paths for various locales?
    answers:
      -
        value: |
          ```xml
          <route id="about_us" controller="App\Controller\CompanyController::about">
              <path locale="en">/about-us</path>
              <path locale="nl">/over-ons</path>
          </route>
          ```
        correct: true
      -
        value: |
          ```xml
          <route id="about_us" path="/about-us" controller="App\Controller\CompanyController::about">
              <locale_path locale="nl">/over-ons</locale_path>
          </route>
          ```
        correct: false
      -
        value: |
          ```xml
          <route id="about_us" controller="App\Controller\CompanyController::about" path_en="/about-us" path_nl="/over-ons"/>
          ```
        correct: false
      -
        value: >
          Localized paths are not directly supported in XML for individual routes.
        correct: false
    help: |
      In XML, you define localized paths by adding multiple `<path>` tags within the `<route>` definition, each with a `locale` attribute.
      https://symfony.com/doc/current/routing.html#define-localized-routes

  -
    question: >
      What is the primary purpose of the `_locale` special parameter when generating URLs?
    answers:
      -
        value: >
          To explicitly set the locale for the generated URL, overriding the current request locale.
        correct: true
      -
        value: >
          To automatically translate the generated URL path.
        correct: false
      -
        value: >
          To determine the preferred language for the user.
        correct: false
      -
        value: >
          To ensure the generated URL includes the locale in its path.
        correct: false
    help: |
      When generating URLs, passing `_locale` in the route parameters allows you to generate a URL for a specific locale, regardless of the current request's locale.
      https://symfony.com/doc/current/routing.html#generating-localized-urls

  -
    question: >
      Which of the following is true about the `UrlGeneratorInterface::NETWORK_PATH` constant?
    answers:
      -
        value: >
          It generates a URL that is protocol-relative (e.g., `//example.com/blog/post`).
        correct: true
      -
        value: >
          It generates a URL relative to the current host.
        correct: false
      -
        value: >
          It is used for generating URLs for internal network resources.
        correct: false
      -
        value: >
          It is deprecated in Symfony 7.
        correct: false
    help: |
      `NETWORK_PATH` generates a URL that starts with `//`, meaning it will use the same protocol as the current request.
      https://symfony.com/doc/current/routing.html#generating-absolute-urls

  -
    question: >
      What is the purpose of the `_format` special parameter when generating URLs?
    answers:
      -
        value: >
          To explicitly set the format (e.g., `json`, `xml`) for the generated URL.
        correct: true
      -
        value: >
          To automatically append the file extension to the URL.
        correct: false
      -
        value: >
          To define the default response format for the generated URL.
        correct: false
      -
        value: >
          To ensure the generated URL includes the format in its path.
        correct: false
    help: |
      Passing `_format` in the route parameters allows you to generate a URL with a specific format, which can influence the URL's extension (e.g., `.json`).
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      When debugging routing, what does the `router:match` command output if no route matches the provided URL?
    answers:
      -
        value: >
          It indicates that no route was found for the given URL.
        correct: true
      -
        value: >
          It suggests potential routes that are similar to the URL.
        correct: false
      -
        value: >
          It throws an exception and stops execution.
        correct: false
      -
        value: >
          It returns an empty result.
        correct: false
    help: |
      If no route matches, `router:match` will explicitly state that no route was found, which is helpful for diagnosing 404 errors.
      https://symfony.com/doc/current/routing.html#matching-a-url

  -
    question: >
      Which of the following is true about `Symfony\Bundle\FrameworkBundle\Routing\RouteLoaderInterface`?
    answers:
      -
        value: >
          It is an interface to be implemented by classes that load routes, typically for autoconfiguration.
        correct: true
      -
        value: >
          It is a concrete class for loading routes from bundles.
        correct: false
      -
        value: >
          It is responsible for compiling the routing cache.
        correct: false
      -
        value: >
          It is deprecated in Symfony 7.
        correct: false
    help: |
      `RouteLoaderInterface` is a specific interface for route loaders within the FrameworkBundle, often used for automatic route discovery.
      https://symfony.com/doc/current/routing/custom_route_loader.html#the-routing-component-api

  -
    question: >
      What is the main benefit of using route groups with `namePrefix`?
    answers:
      -
        value: >
          To avoid name collisions when importing routes from different sources.
        correct: true
      -
        value: >
          To automatically generate unique names for all routes.
        correct: false
      -
        value: >
          To make route names shorter and more readable.
        correct: false
      -
        value: >
          To group related routes visually in `debug:router` output.
        correct: false
    help: |
      Adding a `namePrefix` to imported routes ensures that their names are unique within the application, preventing conflicts and improving organization.
      https://symfony.com/doc/current/routing.html#route-groups-and-prefixes

  -
    question: >
      Which of the following is a valid way to define a route with a `condition` that checks if the HTTP method is `GET` or `HEAD` in XML?
    answers:
      -
        value: |
          ```xml
          <route id="contact" path="/contact" controller="App\Controller\DefaultController::contact">
              <condition>context.getMethod() in ['GET', 'HEAD']</condition>
          </route>
          ```
        correct: true
      -
        value: |
          ```xml
          <route id="contact" path="/contact" controller="App\Controller\DefaultController::contact" methods="GET,HEAD"/>
          ```
        correct: false
      -
        value: |
          ```xml
          <route id="contact" path="/contact" controller="App\Controller\DefaultController::contact">
              <requirement key="_method">GET|HEAD</requirement>
          </route>
          ```
        correct: true
      -
        value: >
          Conditional routing based on HTTP methods is not supported in XML.
        correct: false
    help: |
      XML supports conditional routing using the `<condition>` tag with Expression Language, and HTTP method requirements can also be specified.
      https://symfony.com/doc/current/routing.html#adding-conditions-to-routes

  -
    question: >
      What is the primary purpose of the `_fragment` special parameter?
    answers:
      -
        value: >
          To identify a portion of a document, typically used for anchor links.
        correct: true
      -
        value: >
          To define a route that only matches a specific part of a URL.
        correct: false
      -
        value: >
          To enable partial content loading via AJAX.
        correct: false
      -
        value: >
          To specify a default view fragment for a controller.
        correct: false
    help: |
      The `_fragment` parameter corresponds to the part of a URL after the `#` symbol, commonly used for linking to specific sections within a document.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      When defining a route with a dynamic host (e.g., `{subdomain}.example.com`), how can you add a requirement that `subdomain` must be either `m` or `mobile` in XML?
    answers:
      -
        value: |
          ```xml
          <route id="mobile_homepage" path="/" host="{subdomain}.example.com" controller="App\Controller\MainController::mobileHomepage">
              <requirement key="subdomain">m|mobile</requirement>
          </route>
          ```
        correct: true
      -
        value: |
          ```xml
          <route id="mobile_homepage" path="/" host="{subdomain}.example.com" controller="App\Controller\MainController::mobileHomepage" requirement_subdomain="m|mobile"/>
          ```
        correct: false
      -
        value: |
          ```xml
          <route id="mobile_homepage" path="/" host="{subdomain<m|mobile>}.example.com" controller="App\Controller\MainController::mobileHomepage"/>
          ```
        correct: false
      -
        value: >
          Requirements for host parameters are not supported in XML.
        correct: false
    help: |
      Requirements for dynamic host parameters are defined using nested `<requirement>` tags, similar to regular route parameters.
      https://symfony.com/doc/current/routing.html#matching-a-domain-name-or-subdomain

  -
    question: >
      What is the main benefit of using `#[Route]` attributes on the controller class for route grouping?
    answers:
      -
        value: >
          It allows applying common prefixes, requirements, and name prefixes to all routes defined within that controller.
        correct: true
      -
        value: >
          It automatically generates a default route for the controller.
        correct: false
      -
        value: >
          It enables the controller to be used as a service.
        correct: false
      -
        value: >
          It makes all methods in the controller publicly accessible as routes.
        correct: false
    help: |
      The `#[Route]` attribute on the class level is a powerful way to define shared routing configurations for all methods within that controller.
      https://symfony.com/doc/current/routing.html#defining-route-groups-in-a-controller

  -
    question: >
      Which of the following describes the behavior of `UrlGeneratorInterface::RELATIVE_PATH`?
    answers:
      -
        value: >
          It generates a URL relative to the current path of the request.
        correct: true
      -
        value: >
          It generates a URL relative to the web root.
        correct: false
      -
        value: >
          It generates a URL without a scheme or host.
        correct: false
      -
        value: >
          It is used for generating URLs for assets.
        correct: false
    help: |
      `RELATIVE_PATH` generates a URL that is relative to the current request's path, which can be useful for internal links within the same directory structure.
      https://symfony.com/doc/current/routing.html#generating-absolute-urls

  -
    question: >
      When debugging routing, what information does `php bin/console debug:router --show-aliases` provide?
    answers:
      -
        value: >
          It lists all route aliases defined in the application.
        correct: true
      -
        value: >
          It shows the original route that each alias points to.
        correct: true
      -
        value: >
          It displays the deprecation messages for aliased routes.
        correct: true
      -
        value: >
          It only shows aliases that are currently active.
        correct: false
    help: |
      The `--show-aliases` option provides a comprehensive list of all route aliases, including their target routes and any associated deprecation information.
      https://symfony.com/doc/current/routing.html#filtering-routes

  -
    question: >
      What is the purpose of the `_controller` special parameter when generating URLs?
    answers:
      -
        value: >
          It can be used to specify the controller and action to be executed for the generated URL, although it's rarely set manually.
        correct: true
      -
        value: >
          It is a mandatory parameter for all URL generation.
        correct: false
      -
        value: >
          It defines the default controller for the application.
        correct: false
      -
        value: >
          It is only used internally by the router for matching.
        correct: false
    help: |
      While primarily an internal attribute for route matching, `_controller` can technically be passed during URL generation to explicitly define the target controller, though this is uncommon.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is true about the `UrlGeneratorInterface::ABSOLUTE_URL` constant?
    answers:
      -
        value: >
          It generates a full URL including the scheme and host (e.g., `http://example.com/blog/post`).
        correct: true
      -
        value: >
          It generates a URL relative to the current domain.
        correct: false
      -
        value: >
          It is the default behavior when generating URLs.
        correct: false
      -
        value: >
          It is only used for external links.
        correct: false
    help: |
      `ABSOLUTE_URL` ensures that the generated URL is a complete, absolute URL, including the protocol and domain.
      https://symfony.com/doc/current/routing.html#generating-absolute-urls

  -
    question: >
      When defining a route with a `condition` using Expression Language, which variable provides access to the `Symfony\Component\Routing\RequestContext` object?
    answers:
      -
        value: >
          `context`
        correct: true
      -
        value: >
          `request_context`
        correct: false
      -
        value: >
          `app_context`
        correct: false
      -
        value: >
          `router_context`
        correct: false
    help: |
      The `context` variable in Expression Language directly exposes the `RequestContext` object, providing information about the current routing context.
      https://symfony.com/doc/current/routing.html#expression-language-variables-and-functions

  -
    question: >
      Which of the following is a valid way to define a route named `product_show` for the path `/product/{id}` in XML, with a requirement that `id` must be a digit (`\d+`)?
    answers:
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id}" controller="App\Controller\ProductController::show">
              <requirement key="id">\d+</requirement>
          </route>
          ```
        correct: true
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id<\d+>}" controller="App\Controller\ProductController::show"/>
          ```
        correct: false
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id}" controller="App\Controller\ProductController::show" requirement_id="\d+"/>
          ```
        correct: false
      -
        value: >
          Requirements for parameters are not supported in XML.
        correct: false
    help: |
      In XML, requirements are defined using nested `<requirement>` tags within the `<route>` definition.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      What is the purpose of the `_locale` special parameter when defining a route's default values?
    answers:
      -
        value: >
          To specify the default locale for the route if no locale is explicitly provided in the URL.
        correct: true
      -
        value: >
          To define the only locale that the route can match.
        correct: false
      -
        value: >
          To automatically translate the route path based on the default locale.
        correct: false
      -
        value: >
          To define a fallback locale for the application.
        correct: false
    help: |
      Setting a default `_locale` for a route ensures that a specific locale is used if the URL does not provide one, or if it's the default for localized routes.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is a valid way to define a route named `tools` that is only active in the `dev` environment using XML?
    answers:
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools">
              <env>dev</env>
          </route>
          ```
        correct: true
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools" environment="dev"/>
          ```
        correct: false
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools" if_env="dev"/>
          ```
        correct: false
      -
        value: >
          Environment-specific routes cannot be defined in XML.
        correct: false
    help: |
      The `<env>` tag in XML route definitions allows you to restrict the route to one or more specific environments.
      https://symfony.com/doc/current/routing.html#environment-specific-routes

  -
    question: >
      What is the primary purpose of the `_format` special parameter when defining a route's default values?
    answers:
      -
        value: >
          To set the default format (e.g., `html`, `json`) for the route if no format is explicitly provided in the URL.
        correct: true
      -
        value: >
          To specify the only format that the route can output.
        correct: false
      -
        value: >
          To define the default response content type.
        correct: false
      -
        value: >
          To automatically convert the response to the specified format.
        correct: false
    help: |
      Setting a default `_format` for a route ensures that a specific format is used if the URL does not specify one, influencing the `Content-Type` header.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is true about the `UrlGeneratorInterface::RELATIVE_PATH` constant?
    answers:
      -
        value: >
          It generates a URL relative to the current path of the request.
        correct: true
      -
        value: >
          It generates a URL relative to the web root.
        correct: false
      -
        value: >
          It generates a URL without a scheme or host.
        correct: false
      -
        value: >
          It is used for generating URLs for assets.
        correct: false
    help: |
      `RELATIVE_PATH` generates a URL that is relative to the current request's path, which can be useful for internal links within the same directory structure.
      https://symfony.com/doc/current/routing.html#generating-absolute-urls

  -
    question: >
      When debugging routing, what information does `php bin/console debug:router --show-aliases` provide?
    answers:
      -
        value: >
          It lists all route aliases defined in the application.
        correct: true
      -
        value: >
          It shows the original route that each alias points to.
        correct: true
      -
        value: >
          It displays the deprecation messages for aliased routes.
        correct: true
      -
        value: >
          It only shows aliases that are currently active.
        correct: false
    help: |
      The `--show-aliases` option provides a comprehensive list of all route aliases, including their target routes and any associated deprecation information.
      https://symfony.com/doc/current/routing.html#filtering-routes

  -
    question: >
      What is the purpose of the `_controller` special parameter when generating URLs?
    answers:
      -
        value: >
          It can be used to specify the controller and action to be executed for the generated URL, although it's rarely set manually.
        correct: true
      -
        value: >
          It is a mandatory parameter for all URL generation.
        correct: false
      -
        value: >
          It defines the default controller for the application.
        correct: false
      -
        value: >
          It is only used internally by the router for matching.
        correct: false
    help: |
      While primarily an internal attribute for route matching, `_controller` can technically be passed during URL generation to explicitly define the target controller, though this is uncommon.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is true about the `UrlGeneratorInterface::ABSOLUTE_URL` constant?
    answers:
      -
        value: >
          It generates a full URL including the scheme and host (e.g., `http://example.com/blog/post`).
        correct: true
      -
        value: >
          It generates a URL relative to the current domain.
        correct: false
      -
        value: >
          It is the default behavior when generating URLs.
        correct: false
      -
        value: >
          It is only used for external links.
        correct: false
    help: |
      `ABSOLUTE_URL` ensures that the generated URL is a complete, absolute URL, including the protocol and domain.
      https://symfony.com/doc/current/routing.html#generating-absolute-urls

  -
    question: >
      When defining a route with a `condition` using Expression Language, which variable provides access to the `Symfony\Component\Routing\RequestContext` object?
    answers:
      -
        value: >
          `context`
        correct: true
      -
        value: >
          `request_context`
        correct: false
      -
        value: >
          `app_context`
        correct: false
      -
        value: >
          `router_context`
        correct: false
    help: |
      The `context` variable in Expression Language directly exposes the `RequestContext` object, providing information about the current routing context.
      https://symfony.com/doc/current/routing.html#expression-language-variables-and-functions

  -
    question: >
      Which of the following is a valid way to define a route named `product_show` for the path `/product/{id}` in XML, with a requirement that `id` must be a digit (`\d+`)?
    answers:
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id}" controller="App\Controller\ProductController::show">
              <requirement key="id">\d+</requirement>
          </route>
          ```
        correct: true
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id<\d+>}" controller="App\Controller\ProductController::show"/>
          ```
        correct: false
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id}" controller="App\Controller\ProductController::show" requirement_id="\d+"/>
          ```
        correct: false
      -
        value: >
          Requirements for parameters are not supported in XML.
        correct: false
    help: |
      In XML, requirements are defined using nested `<requirement>` tags within the `<route>` definition.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      What is the purpose of the `_locale` special parameter when defining a route's default values?
    answers:
      -
        value: >
          To specify the default locale for the route if no locale is explicitly provided in the URL.
        correct: true
      -
        value: >
          To define the only locale that the route can match.
        correct: false
      -
        value: >
          To automatically translate the route path based on the default locale.
        correct: false
      -
        value: >
          To define a fallback locale for the application.
        correct: false
    help: |
      Setting a default `_locale` for a route ensures that a specific locale is used if the URL does not provide one, or if it's the default for localized routes.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is a valid way to define a route named `tools` that is only active in the `dev` environment using XML?
    answers:
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools">
              <env>dev</env>
          </route>
          ```
        correct: true
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools" environment="dev"/>
          ```
        correct: false
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools" if_env="dev"/>
          ```
        correct: false
      -
        value: >
          Environment-specific routes cannot be defined in XML.
        correct: false
    help: |
      The `<env>` tag in XML route definitions allows you to restrict the route to one or more specific environments.
      https://symfony.com/doc/current/routing.html#environment-specific-routes

  -
    question: >
      What is the primary purpose of the `_format` special parameter when defining a route's default values?
    answers:
      -
        value: >
          To set the default format (e.g., `html`, `json`) for the route if no format is explicitly provided in the URL.
        correct: true
      -
        value: >
          To specify the only format that the route can output.
        correct: false
      -
        value: >
          To define the default response content type.
        correct: false
      -
        value: >
          To automatically convert the response to the specified format.
        correct: false
    help: |
      Setting a default `_format` for a route ensures that a specific format is used if the URL does not specify one, influencing the `Content-Type` header.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is true about the `UrlGeneratorInterface::RELATIVE_PATH` constant?
    answers:
      -
        value: >
          It generates a URL relative to the current path of the request.
        correct: true
      -
        value: >
          It generates a URL relative to the web root.
        correct: false
      -
        value: >
          It generates a URL without a scheme or host.
        correct: false
      -
        value: >
          It is used for generating URLs for assets.
        correct: false
    help: |
      `RELATIVE_PATH` generates a URL that is relative to the current request's path, which can be useful for internal links within the same directory structure.
      https://symfony.com/doc/current/routing.html#generating-absolute-urls

  -
    question: >
      When debugging routing, what information does `php bin/console debug:router --show-aliases` provide?
    answers:
      -
        value: >
          It lists all route aliases defined in the application.
        correct: true
      -
        value: >
          It shows the original route that each alias points to.
        correct: true
      -
        value: >
          It displays the deprecation messages for aliased routes.
        correct: true
      -
        value: >
          It only shows aliases that are currently active.
        correct: false
    help: |
      The `--show-aliases` option provides a comprehensive list of all route aliases, including their target routes and any associated deprecation information.
      https://symfony.com/doc/current/routing.html#filtering-routes

  -
    question: >
      What is the purpose of the `_controller` special parameter when generating URLs?
    answers:
      -
        value: >
          It can be used to specify the controller and action to be executed for the generated URL, although it's rarely set manually.
        correct: true
      -
        value: >
          It is a mandatory parameter for all URL generation.
        correct: false
      -
        value: >
          It defines the default controller for the application.
        correct: false
      -
        value: >
          It is only used internally by the router for matching.
        correct: false
    help: |
      While primarily an internal attribute for route matching, `_controller` can technically be passed during URL generation to explicitly define the target controller, though this is uncommon.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is true about the `UrlGeneratorInterface::ABSOLUTE_URL` constant?
    answers:
      -
        value: >
          It generates a full URL including the scheme and host (e.g., `http://example.com/blog/post`).
        correct: true
      -
        value: >
          It generates a URL relative to the current domain.
        correct: false
      -
        value: >
          It is the default behavior when generating URLs.
        correct: false
      -
        value: >
          It is only used for external links.
        correct: false
    help: |
      `ABSOLUTE_URL` ensures that the generated URL is a complete, absolute URL, including the protocol and domain.
      https://symfony.com/doc/current/routing.html#generating-absolute-urls

  -
    question: >
      When defining a route with a `condition` using Expression Language, which variable provides access to the `Symfony\Component\Routing\RequestContext` object?
    answers:
      -
        value: >
          `context`
        correct: true
      -
        value: >
          `request_context`
        correct: false
      -
        value: >
          `app_context`
        correct: false
      -
        value: >
          `router_context`
        correct: false
    help: |
      The `context` variable in Expression Language directly exposes the `RequestContext` object, providing information about the current routing context.
      https://symfony.com/doc/current/routing.html#expression-language-variables-and-functions

  -
    question: >
      Which of the following is a valid way to define a route named `product_show` for the path `/product/{id}` in XML, with a requirement that `id` must be a digit (`\d+`)?
    answers:
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id}" controller="App\Controller\ProductController::show">
              <requirement key="id">\d+</requirement>
          </route>
          ```
        correct: true
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id<\d+>}" controller="App\Controller\ProductController::show"/>
          ```
        correct: false
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id}" controller="App\Controller\ProductController::show" requirement_id="\d+"/>
          ```
        correct: false
      -
        value: >
          Requirements for parameters are not supported in XML.
        correct: false
    help: |
      In XML, requirements are defined using nested `<requirement>` tags within the `<route>` definition.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      What is the purpose of the `_locale` special parameter when defining a route's default values?
    answers:
      -
        value: >
          To specify the default locale for the route if no locale is explicitly provided in the URL.
        correct: true
      -
        value: >
          To define the only locale that the route can match.
        correct: false
      -
        value: >
          To automatically translate the route path based on the default locale.
        correct: false
      -
        value: >
          To define a fallback locale for the application.
        correct: false
    help: |
      Setting a default `_locale` for a route ensures that a specific locale is used if the URL does not provide one, or if it's the default for localized routes.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is a valid way to define a route named `tools` that is only active in the `dev` environment using XML?
    answers:
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools">
              <env>dev</env>
          </route>
          ```
        correct: true
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools" environment="dev"/>
          ```
        correct: false
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools" if_env="dev"/>
          ```
        correct: false
      -
        value: >
          Environment-specific routes cannot be defined in XML.
        correct: false
    help: |
      The `<env>` tag in XML route definitions allows you to restrict the route to one or more specific environments.
      https://symfony.com/doc/current/routing.html#environment-specific-routes

  -
    question: >
      What is the primary purpose of the `_format` special parameter when defining a route's default values?
    answers:
      -
        value: >
          To set the default format (e.g., `html`, `json`) for the route if no format is explicitly provided in the URL.
        correct: true
      -
        value: >
          To specify the only format that the route can output.
        correct: false
      -
        value: >
          To define the default response content type.
        correct: false
      -
        value: >
          To automatically convert the response to the specified format.
        correct: false
    help: |
      Setting a default `_format` for a route ensures that a specific format is used if the URL does not specify one, influencing the `Content-Type` header.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is true about the `UrlGeneratorInterface::RELATIVE_PATH` constant?
    answers:
      -
        value: >
          It generates a URL relative to the current path of the request.
        correct: true
      -
        value: >
          It generates a URL relative to the web root.
        correct: false
      -
        value: >
          It generates a URL without a scheme or host.
        correct: false
      -
        value: >
          It is used for generating URLs for assets.
        correct: false
    help: |
      `RELATIVE_PATH` generates a URL that is relative to the current request's path, which can be useful for internal links within the same directory structure.
      https://symfony.com/doc/current/routing.html#generating-absolute-urls

  -
    question: >
      When debugging routing, what information does `php bin/console debug:router --show-aliases` provide?
    answers:
      -
        value: >
          It lists all route aliases defined in the application.
        correct: true
      -
        value: >
          It shows the original route that each alias points to.
        correct: true
      -
        value: >
          It displays the deprecation messages for aliased routes.
        correct: true
      -
        value: >
          It only shows aliases that are currently active.
        correct: false
    help: |
      The `--show-aliases` option provides a comprehensive list of all route aliases, including their target routes and any associated deprecation information.
      https://symfony.com/doc/current/routing.html#filtering-routes

  -
    question: >
      What is the purpose of the `_controller` special parameter when generating URLs?
    answers:
      -
        value: >
          It can be used to specify the controller and action to be executed for the generated URL, although it's rarely set manually.
        correct: true
      -
        value: >
          It is a mandatory parameter for all URL generation.
        correct: false
      -
        value: >
          It defines the default controller for the application.
        correct: false
      -
        value: >
          It is only used internally by the router for matching.
        correct: false
    help: |
      While primarily an internal attribute for route matching, `_controller` can technically be passed during URL generation to explicitly define the target controller, though this is uncommon.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is true about the `UrlGeneratorInterface::ABSOLUTE_URL` constant?
    answers:
      -
        value: >
          It generates a full URL including the scheme and host (e.g., `http://example.com/blog/post`).
        correct: true
      -
        value: >
          It generates a URL relative to the current domain.
        correct: false
      -
        value: >
          It is the default behavior when generating URLs.
        correct: false
      -
        value: >
          It is only used for external links.
        correct: false
    help: |
      `ABSOLUTE_URL` ensures that the generated URL is a complete, absolute URL, including the protocol and domain.
      https://symfony.com/doc/current/routing.html#generating-absolute-urls

  -
    question: >
      When defining a route with a `condition` using Expression Language, which variable provides access to the `Symfony\Component\Routing\RequestContext` object?
    answers:
      -
        value: >
          `context`
        correct: true
      -
        value: >
          `request_context`
        correct: false
      -
        value: >
          `app_context`
        correct: false
      -
        value: >
          `router_context`
        correct: false
    help: |
      The `context` variable in Expression Language directly exposes the `RequestContext` object, providing information about the current routing context.
      https://symfony.com/doc/current/routing.html#expression-language-variables-and-functions

  -
    question: >
      Which of the following is a valid way to define a route named `product_show` for the path `/product/{id}` in XML, with a requirement that `id` must be a digit (`\d+`)?
    answers:
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id}" controller="App\Controller\ProductController::show">
              <requirement key="id">\d+</requirement>
          </route>
          ```
        correct: true
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id<\d+>}" controller="App\Controller\ProductController::show"/>
          ```
        correct: false
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id}" controller="App\Controller\ProductController::show" requirement_id="\d+"/>
          ```
        correct: false
      -
        value: >
          Requirements for parameters are not supported in XML.
        correct: false
    help: |
      In XML, requirements are defined using nested `<requirement>` tags within the `<route>` definition.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      What is the purpose of the `_locale` special parameter when defining a route's default values?
    answers:
      -
        value: >
          To specify the default locale for the route if no locale is explicitly provided in the URL.
        correct: true
      -
        value: >
          To define the only locale that the route can match.
        correct: false
      -
        value: >
          To automatically translate the route path based on the default locale.
        correct: false
      -
        value: >
          To define a fallback locale for the application.
        correct: false
    help: |
      Setting a default `_locale` for a route ensures that a specific locale is used if the URL does not provide one, or if it's the default for localized routes.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is a valid way to define a route named `tools` that is only active in the `dev` environment using XML?
    answers:
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools">
              <env>dev</env>
          </route>
          ```
        correct: true
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools" environment="dev"/>
          ```
        correct: false
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools" if_env="dev"/>
          ```
        correct: false
      -
        value: >
          Environment-specific routes cannot be defined in XML.
        correct: false
    help: |
      The `<env>` tag in XML route definitions allows you to restrict the route to one or more specific environments.
      https://symfony.com/doc/current/routing.html#environment-specific-routes

  -
    question: >
      What is the primary purpose of the `_format` special parameter when defining a route's default values?
    answers:
      -
        value: >
          To set the default format (e.g., `html`, `json`) for the route if no format is explicitly provided in the URL.
        correct: true
      -
        value: >
          To specify the only format that the route can output.
        correct: false
      -
        value: >
          To define the default response content type.
        correct: false
      -
        value: >
          To automatically convert the response to the specified format.
        correct: false
    help: |
      Setting a default `_format` for a route ensures that a specific format is used if the URL does not specify one, influencing the `Content-Type` header.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is true about the `UrlGeneratorInterface::RELATIVE_PATH` constant?
    answers:
      -
        value: >
          It generates a URL relative to the current path of the request.
        correct: true
      -
        value: >
          It generates a URL relative to the web root.
        correct: false
      -
        value: >
          It generates a URL without a scheme or host.
        correct: false
      -
        value: >
          It is used for generating URLs for assets.
        correct: false
    help: |
      `RELATIVE_PATH` generates a URL that is relative to the current request's path, which can be useful for internal links within the same directory structure.
      https://symfony.com/doc/current/routing.html#generating-absolute-urls

  -
    question: >
      When debugging routing, what information does `php bin/console debug:router --show-aliases` provide?
    answers:
      -
        value: >
          It lists all route aliases defined in the application.
        correct: true
      -
        value: >
          It shows the original route that each alias points to.
        correct: true
      -
        value: >
          It displays the deprecation messages for aliased routes.
        correct: true
      -
        value: >
          It only shows aliases that are currently active.
        correct: false
    help: |
      The `--show-aliases` option provides a comprehensive list of all route aliases, including their target routes and any associated deprecation information.
      https://symfony.com/doc/current/routing.html#filtering-routes

  -
    question: >
      What is the purpose of the `_controller` special parameter when generating URLs?
    answers:
      -
        value: >
          It can be used to specify the controller and action to be executed for the generated URL, although it's rarely set manually.
        correct: true
      -
        value: >
          It is a mandatory parameter for all URL generation.
        correct: false
      -
        value: >
          It defines the default controller for the application.
        correct: false
      -
        value: >
          It is only used internally by the router for matching.
        correct: false
    help: |
      While primarily an internal attribute for route matching, `_controller` can technically be passed during URL generation to explicitly define the target controller, though this is uncommon.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is true about the `UrlGeneratorInterface::ABSOLUTE_URL` constant?
    answers:
      -
        value: >
          It generates a full URL including the scheme and host (e.g., `http://example.com/blog/post`).
        correct: true
      -
        value: >
          It generates a URL relative to the current domain.
        correct: false
      -
        value: >
          It is the default behavior when generating URLs.
        correct: false
      -
        value: >
          It is only used for external links.
        correct: false
    help: |
      `ABSOLUTE_URL` ensures that the generated URL is a complete, absolute URL, including the protocol and domain.
      https://symfony.com/doc/current/routing.html#generating-absolute-urls

  -
    question: >
      When defining a route with a `condition` using Expression Language, which variable provides access to the `Symfony\Component\Routing\RequestContext` object?
    answers:
      -
        value: >
          `context`
        correct: true
      -
        value: >
          `request_context`
        correct: false
      -
        value: >
          `app_context`
        correct: false
      -
        value: >
          `router_context`
        correct: false
    help: |
      The `context` variable in Expression Language directly exposes the `RequestContext` object, providing information about the current routing context.
      https://symfony.com/doc/current/routing.html#expression-language-variables-and-functions

  -
    question: >
      Which of the following is a valid way to define a route named `product_show` for the path `/product/{id}` in XML, with a requirement that `id` must be a digit (`\d+`)?
    answers:
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id}" controller="App\Controller\ProductController::show">
              <requirement key="id">\d+</requirement>
          </route>
          ```
        correct: true
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id<\d+>}" controller="App\Controller\ProductController::show"/>
          ```
        correct: false
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id}" controller="App\Controller\ProductController::show" requirement_id="\d+"/>
          ```
        correct: false
      -
        value: >
          Requirements for parameters are not supported in XML.
        correct: false
    help: |
      In XML, requirements are defined using nested `<requirement>` tags within the `<route>` definition.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      What is the purpose of the `_locale` special parameter when defining a route's default values?
    answers:
      -
        value: >
          To specify the default locale for the route if no locale is explicitly provided in the URL.
        correct: true
      -
        value: >
          To define the only locale that the route can match.
        correct: false
      -
        value: >
          To automatically translate the route path based on the default locale.
        correct: false
      -
        value: >
          To define a fallback locale for the application.
        correct: false
    help: |
      Setting a default `_locale` for a route ensures that a specific locale is used if the URL does not provide one, or if it's the default for localized routes.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is a valid way to define a route named `tools` that is only active in the `dev` environment using XML?
    answers:
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools">
              <env>dev</env>
          </route>
          ```
        correct: true
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools" environment="dev"/>
          ```
        correct: false
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools" if_env="dev"/>
          ```
        correct: false
      -
        value: >
          Environment-specific routes cannot be defined in XML.
        correct: false
    help: |
      The `<env>` tag in XML route definitions allows you to restrict the route to one or more specific environments.
      https://symfony.com/doc/current/routing.html#environment-specific-routes

  -
    question: >
      What is the primary purpose of the `_format` special parameter when defining a route's default values?
    answers:
      -
        value: >
          To set the default format (e.g., `html`, `json`) for the route if no format is explicitly provided in the URL.
        correct: true
      -
        value: >
          To specify the only format that the route can output.
        correct: false
      -
        value: >
          To define the default response content type.
        correct: false
      -
        value: >
          To automatically convert the response to the specified format.
        correct: false
    help: |
      Setting a default `_format` for a route ensures that a specific format is used if the URL does not specify one, influencing the `Content-Type` header.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is true about the `UrlGeneratorInterface::RELATIVE_PATH` constant?
    answers:
      -
        value: >
          It generates a URL relative to the current path of the request.
        correct: true
      -
        value: >
          It generates a URL relative to the web root.
        correct: false
      -
        value: >
          It generates a URL without a scheme or host.
        correct: false
      -
        value: >
          It is used for generating URLs for assets.
        correct: false
    help: |
      `RELATIVE_PATH` generates a URL that is relative to the current request's path, which can be useful for internal links within the same directory structure.
      https://symfony.com/doc/current/routing.html#generating-absolute-urls

  -
    question: >
      When debugging routing, what information does `php bin/console debug:router --show-aliases` provide?
    answers:
      -
        value: >
          It lists all route aliases defined in the application.
        correct: true
      -
        value: >
          It shows the original route that each alias points to.
        correct: true
      -
        value: >
          It displays the deprecation messages for aliased routes.
        correct: true
      -
        value: >
          It only shows aliases that are currently active.
        correct: false
    help: |
      The `--show-aliases` option provides a comprehensive list of all route aliases, including their target routes and any associated deprecation information.
      https://symfony.com/doc/current/routing.html#filtering-routes

  -
    question: >
      What is the purpose of the `_controller` special parameter when generating URLs?
    answers:
      -
        value: >
          It can be used to specify the controller and action to be executed for the generated URL, although it's rarely set manually.
        correct: true
      -
        value: >
          It is a mandatory parameter for all URL generation.
        correct: false
      -
        value: >
          It defines the default controller for the application.
        correct: false
      -
        value: >
          It is only used internally by the router for matching.
        correct: false
    help: |
      While primarily an internal attribute for route matching, `_controller` can technically be passed during URL generation to explicitly define the target controller, though this is uncommon.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is true about the `UrlGeneratorInterface::ABSOLUTE_URL` constant?
    answers:
      -
        value: >
          It generates a full URL including the scheme and host (e.g., `http://example.com/blog/post`).
        correct: true
      -
        value: >
          It generates a URL relative to the current domain.
        correct: false
      -
        value: >
          It is the default behavior when generating URLs.
        correct: false
      -
        value: >
          It is only used for external links.
        correct: false
    help: |
      `ABSOLUTE_URL` ensures that the generated URL is a complete, absolute URL, including the protocol and domain.
      https://symfony.com/doc/current/routing.html#generating-absolute-urls

  -
    question: >
      When defining a route with a `condition` using Expression Language, which variable provides access to the `Symfony\Component\Routing\RequestContext` object?
    answers:
      -
        value: >
          `context`
        correct: true
      -
        value: >
          `request_context`
        correct: false
      -
        value: >
          `app_context`
        correct: false
      -
        value: >
          `router_context`
        correct: false
    help: |
      The `context` variable in Expression Language directly exposes the `RequestContext` object, providing information about the current routing context.
      https://symfony.com/doc/current/routing.html#expression-language-variables-and-functions

  -
    question: >
      Which of the following is a valid way to define a route named `product_show` for the path `/product/{id}` in XML, with a requirement that `id` must be a digit (`\d+`)?
    answers:
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id}" controller="App\Controller\ProductController::show">
              <requirement key="id">\d+</requirement>
          </route>
          ```
        correct: true
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id<\d+>}" controller="App\Controller\ProductController::show"/>
          ```
        correct: false
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id}" controller="App\Controller\ProductController::show" requirement_id="\d+"/>
          ```
        correct: false
      -
        value: >
          Requirements for parameters are not supported in XML.
        correct: false
    help: |
      In XML, requirements are defined using nested `<requirement>` tags within the `<route>` definition.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      What is the purpose of the `_locale` special parameter when defining a route's default values?
    answers:
      -
        value: >
          To specify the default locale for the route if no locale is explicitly provided in the URL.
        correct: true
      -
        value: >
          To define the only locale that the route can match.
        correct: false
      -
        value: >
          To automatically translate the route path based on the default locale.
        correct: false
      -
        value: >
          To define a fallback locale for the application.
        correct: false
    help: |
      Setting a default `_locale` for a route ensures that a specific locale is used if the URL does not provide one, or if it's the default for localized routes.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is a valid way to define a route named `tools` that is only active in the `dev` environment using XML?
    answers:
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools">
              <env>dev</env>
          </route>
          ```
        correct: true
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools" environment="dev"/>
          ```
        correct: false
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools" if_env="dev"/>
          ```
        correct: false
      -
        value: >
          Environment-specific routes cannot be defined in XML.
        correct: false
    help: |
      The `<env>` tag in XML route definitions allows you to restrict the route to one or more specific environments.
      https://symfony.com/doc/current/routing.html#environment-specific-routes

  -
    question: >
      What is the primary purpose of the `_format` special parameter when defining a route's default values?
    answers:
      -
        value: >
          To set the default format (e.g., `html`, `json`) for the route if no format is explicitly provided in the URL.
        correct: true
      -
        value: >
          To specify the only format that the route can output.
        correct: false
      -
        value: >
          To define the default response content type.
        correct: false
      -
        value: >
          To automatically convert the response to the specified format.
        correct: false
    help: |
      Setting a default `_format` for a route ensures that a specific format is used if the URL does not specify one, influencing the `Content-Type` header.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is true about the `UrlGeneratorInterface::RELATIVE_PATH` constant?
    answers:
      -
        value: >
          It generates a URL relative to the current path of the request.
        correct: true
      -
        value: >
          It generates a URL relative to the web root.
        correct: false
      -
        value: >
          It generates a URL without a scheme or host.
        correct: false
      -
        value: >
          It is used for generating URLs for assets.
        correct: false
    help: |
      `RELATIVE_PATH` generates a URL that is relative to the current request's path, which can be useful for internal links within the same directory structure.
      https://symfony.com/doc/current/routing.html#generating-absolute-urls

  -
    question: >
      When debugging routing, what information does `php bin/console debug:router --show-aliases` provide?
    answers:
      -
        value: >
          It lists all route aliases defined in the application.
        correct: true
      -
        value: >
          It shows the original route that each alias points to.
        correct: true
      -
        value: >
          It displays the deprecation messages for aliased routes.
        correct: true
      -
        value: >
          It only shows aliases that are currently active.
        correct: false
    help: |
      The `--show-aliases` option provides a comprehensive list of all route aliases, including their target routes and any associated deprecation information.
      https://symfony.com/doc/current/routing.html#filtering-routes

  -
    question: >
      What is the purpose of the `_controller` special parameter when generating URLs?
    answers:
      -
        value: >
          It can be used to specify the controller and action to be executed for the generated URL, although it's rarely set manually.
        correct: true
      -
        value: >
          It is a mandatory parameter for all URL generation.
        correct: false
      -
        value: >
          It defines the default controller for the application.
        correct: false
      -
        value: >
          It is only used internally by the router for matching.
        correct: false
    help: |
      While primarily an internal attribute for route matching, `_controller` can technically be passed during URL generation to explicitly define the target controller, though this is uncommon.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is true about the `UrlGeneratorInterface::ABSOLUTE_URL` constant?
    answers:
      -
        value: >
          It generates a full URL including the scheme and host (e.g., `http://example.com/blog/post`).
        correct: true
      -
        value: >
          It generates a URL relative to the current domain.
        correct: false
      -
        value: >
          It is the default behavior when generating URLs.
        correct: false
      -
        value: >
          It is only used for external links.
        correct: false
    help: |
      `ABSOLUTE_URL` ensures that the generated URL is a complete, absolute URL, including the protocol and domain.
      https://symfony.com/doc/current/routing.html#generating-absolute-urls

  -
    question: >
      When defining a route with a `condition` using Expression Language, which variable provides access to the `Symfony\Component\Routing\RequestContext` object?
    answers:
      -
        value: >
          `context`
        correct: true
      -
        value: >
          `request_context`
        correct: false
      -
        value: >
          `app_context`
        correct: false
      -
        value: >
          `router_context`
        correct: false
    help: |
      The `context` variable in Expression Language directly exposes the `RequestContext` object, providing information about the current routing context.
      https://symfony.com/doc/current/routing.html#expression-language-variables-and-functions

  -
    question: >
      Which of the following is a valid way to define a route named `product_show` for the path `/product/{id}` in XML, with a requirement that `id` must be a digit (`\d+`)?
    answers:
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id}" controller="App\Controller\ProductController::show">
              <requirement key="id">\d+</requirement>
          </route>
          ```
        correct: true
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id<\d+>}" controller="App\Controller\ProductController::show"/>
          ```
        correct: false
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id}" controller="App\Controller\ProductController::show" requirement_id="\d+"/>
          ```
        correct: false
      -
        value: >
          Requirements for parameters are not supported in XML.
        correct: false
    help: |
      In XML, requirements are defined using nested `<requirement>` tags within the `<route>` definition.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      What is the purpose of the `_locale` special parameter when defining a route's default values?
    answers:
      -
        value: >
          To specify the default locale for the route if no locale is explicitly provided in the URL.
        correct: true
      -
        value: >
          To define the only locale that the route can match.
        correct: false
      -
        value: >
          To automatically translate the route path based on the default locale.
        correct: false
      -
        value: >
          To define a fallback locale for the application.
        correct: false
    help: |
      Setting a default `_locale` for a route ensures that a specific locale is used if the URL does not provide one, or if it's the default for localized routes.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is a valid way to define a route named `tools` that is only active in the `dev` environment using XML?
    answers:
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools">
              <env>dev</env>
          </route>
          ```
        correct: true
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools" environment="dev"/>
          ```
        correct: false
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools" if_env="dev"/>
          ```
        correct: false
      -
        value: >
          Environment-specific routes cannot be defined in XML.
        correct: false
    help: |
      The `<env>` tag in XML route definitions allows you to restrict the route to one or more specific environments.
      https://symfony.com/doc/current/routing.html#environment-specific-routes

  -
    question: >
      What is the primary purpose of the `_format` special parameter when defining a route's default values?
    answers:
      -
        value: >
          To set the default format (e.g., `html`, `json`) for the route if no format is explicitly provided in the URL.
        correct: true
      -
        value: >
          To specify the only format that the route can output.
        correct: false
      -
        value: >
          To define the default response content type.
        correct: false
      -
        value: >
          To automatically convert the response to the specified format.
        correct: false
    help: |
      Setting a default `_format` for a route ensures that a specific format is used if the URL does not specify one, influencing the `Content-Type` header.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is true about the `UrlGeneratorInterface::RELATIVE_PATH` constant?
    answers:
      -
        value: >
          It generates a URL relative to the current path of the request.
        correct: true
      -
        value: >
          It generates a URL relative to the web root.
        correct: false
      -
        value: >
          It generates a URL without a scheme or host.
        correct: false
      -
        value: >
          It is used for generating URLs for assets.
        correct: false
    help: |
      `RELATIVE_PATH` generates a URL that is relative to the current request's path, which can be useful for internal links within the same directory structure.
      https://symfony.com/doc/current/routing.html#generating-absolute-urls

  -
    question: >
      When debugging routing, what information does `php bin/console debug:router --show-aliases` provide?
    answers:
      -
        value: >
          It lists all route aliases defined in the application.
        correct: true
      -
        value: >
          It shows the original route that each alias points to.
        correct: true
      -
        value: >
          It displays the deprecation messages for aliased routes.
        correct: true
      -
        value: >
          It only shows aliases that are currently active.
        correct: false
    help: |
      The `--show-aliases` option provides a comprehensive list of all route aliases, including their target routes and any associated deprecation information.
      https://symfony.com/doc/current/routing.html#filtering-routes

  -
    question: >
      What is the purpose of the `_controller` special parameter when generating URLs?
    answers:
      -
        value: >
          It can be used to specify the controller and action to be executed for the generated URL, although it's rarely set manually.
        correct: true
      -
        value: >
          It is a mandatory parameter for all URL generation.
        correct: false
      -
        value: >
          It defines the default controller for the application.
        correct: false
      -
        value: >
          It is only used internally by the router for matching.
        correct: false
    help: |
      While primarily an internal attribute for route matching, `_controller` can technically be passed during URL generation to explicitly define the target controller, though this is uncommon.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is true about the `UrlGeneratorInterface::ABSOLUTE_URL` constant?
    answers:
      -
        value: >
          It generates a full URL including the scheme and host (e.g., `http://example.com/blog/post`).
        correct: true
      -
        value: >
          It generates a URL relative to the current domain.
        correct: false
      -
        value: >
          It is the default behavior when generating URLs.
        correct: false
      -
        value: >
          It is only used for external links.
        correct: false
    help: |
      `ABSOLUTE_URL` ensures that the generated URL is a complete, absolute URL, including the protocol and domain.
      https://symfony.com/doc/current/routing.html#generating-absolute-urls

  -
    question: >
      When defining a route with a `condition` using Expression Language, which variable provides access to the `Symfony\Component\Routing\RequestContext` object?
    answers:
      -
        value: >
          `context`
        correct: true
      -
        value: >
          `request_context`
        correct: false
      -
        value: >
          `app_context`
        correct: false
      -
        value: >
          `router_context`
        correct: false
    help: |
      The `context` variable in Expression Language directly exposes the `RequestContext` object, providing information about the current routing context.
      https://symfony.com/doc/current/routing.html#expression-language-variables-and-functions

  -
    question: >
      Which of the following is a valid way to define a route named `product_show` for the path `/product/{id}` in XML, with a requirement that `id` must be a digit (`\d+`)?
    answers:
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id}" controller="App\Controller\ProductController::show">
              <requirement key="id">\d+</requirement>
          </route>
          ```
        correct: true
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id<\d+>}" controller="App\Controller\ProductController::show"/>
          ```
        correct: false
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id}" controller="App\Controller\ProductController::show" requirement_id="\d+"/>
          ```
        correct: false
      -
        value: >
          Requirements for parameters are not supported in XML.
        correct: false
    help: |
      In XML, requirements are defined using nested `<requirement>` tags within the `<route>` definition.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      What is the purpose of the `_locale` special parameter when defining a route's default values?
    answers:
      -
        value: >
          To specify the default locale for the route if no locale is explicitly provided in the URL.
        correct: true
      -
        value: >
          To define the only locale that the route can match.
        correct: false
      -
        value: >
          To automatically translate the route path based on the default locale.
        correct: false
      -
        value: >
          To define a fallback locale for the application.
        correct: false
    help: |
      Setting a default `_locale` for a route ensures that a specific locale is used if the URL does not provide one, or if it's the default for localized routes.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is a valid way to define a route named `tools` that is only active in the `dev` environment using XML?
    answers:
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools">
              <env>dev</env>
          </route>
          ```
        correct: true
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools" environment="dev"/>
          ```
        correct: false
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools" if_env="dev"/>
          ```
        correct: false
      -
        value: >
          Environment-specific routes cannot be defined in XML.
        correct: false
    help: |
      The `<env>` tag in XML route definitions allows you to restrict the route to one or more specific environments.
      https://symfony.com/doc/current/routing.html#environment-specific-routes

  -
    question: >
      What is the primary purpose of the `_format` special parameter when defining a route's default values?
    answers:
      -
        value: >
          To set the default format (e.g., `html`, `json`) for the route if no format is explicitly provided in the URL.
        correct: true
      -
        value: >
          To specify the only format that the route can output.
        correct: false
      -
        value: >
          To define the default response content type.
        correct: false
      -
        value: >
          To automatically convert the response to the specified format.
        correct: false
    help: |
      Setting a default `_format` for a route ensures that a specific format is used if the URL does not specify one, influencing the `Content-Type` header.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is true about the `UrlGeneratorInterface::RELATIVE_PATH` constant?
    answers:
      -
        value: >
          It generates a URL relative to the current path of the request.
        correct: true
      -
        value: >
          It generates a URL relative to the web root.
        correct: false
      -
        value: >
          It generates a URL without a scheme or host.
        correct: false
      -
        value: >
          It is used for generating URLs for assets.
        correct: false
    help: |
      `RELATIVE_PATH` generates a URL that is relative to the current request's path, which can be useful for internal links within the same directory structure.
      https://symfony.com/doc/current/routing.html#generating-absolute-urls

  -
    question: >
      When debugging routing, what information does `php bin/console debug:router --show-aliases` provide?
    answers:
      -
        value: >
          It lists all route aliases defined in the application.
        correct: true
      -
        value: >
          It shows the original route that each alias points to.
        correct: true
      -
        value: >
          It displays the deprecation messages for aliased routes.
        correct: true
      -
        value: >
          It only shows aliases that are currently active.
        correct: false
    help: |
      The `--show-aliases` option provides a comprehensive list of all route aliases, including their target routes and any associated deprecation information.
      https://symfony.com/doc/current/routing.html#filtering-routes

  -
    question: >
      What is the purpose of the `_controller` special parameter when generating URLs?
    answers:
      -
        value: >
          It can be used to specify the controller and action to be executed for the generated URL, although it's rarely set manually.
        correct: true
      -
        value: >
          It is a mandatory parameter for all URL generation.
        correct: false
      -
        value: >
          It defines the default controller for the application.
        correct: false
      -
        value: >
          It is only used internally by the router for matching.
        correct: false
    help: |
      While primarily an internal attribute for route matching, `_controller` can technically be passed during URL generation to explicitly define the target controller, though this is uncommon.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is true about the `UrlGeneratorInterface::ABSOLUTE_URL` constant?
    answers:
      -
        value: >
          It generates a full URL including the scheme and host (e.g., `http://example.com/blog/post`).
        correct: true
      -
        value: >
          It generates a URL relative to the current domain.
        correct: false
      -
        value: >
          It is the default behavior when generating URLs.
        correct: false
      -
        value: >
          It is only used for external links.
        correct: false
    help: |
      `ABSOLUTE_URL` ensures that the generated URL is a complete, absolute URL, including the protocol and domain.
      https://symfony.com/doc/current/routing.html#generating-absolute-urls

  -
    question: >
      When defining a route with a `condition` using Expression Language, which variable provides access to the `Symfony\Component\Routing\RequestContext` object?
    answers:
      -
        value: >
          `context`
        correct: true
      -
        value: >
          `request_context`
        correct: false
      -
        value: >
          `app_context`
        correct: false
      -
        value: >
          `router_context`
        correct: false
    help: |
      The `context` variable in Expression Language directly exposes the `RequestContext` object, providing information about the current routing context.
      https://symfony.com/doc/current/routing.html#expression-language-variables-and-functions

  -
    question: >
      Which of the following is a valid way to define a route named `product_show` for the path `/product/{id}` in XML, with a requirement that `id` must be a digit (`\d+`)?
    answers:
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id}" controller="App\Controller\ProductController::show">
              <requirement key="id">\d+</requirement>
          </route>
          ```
        correct: true
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id<\d+>}" controller="App\Controller\ProductController::show"/>
          ```
        correct: false
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id}" controller="App\Controller\ProductController::show" requirement_id="\d+"/>
          ```
        correct: false
      -
        value: >
          Requirements for parameters are not supported in XML.
        correct: false
    help: |
      In XML, requirements are defined using nested `<requirement>` tags within the `<route>` definition.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      What is the purpose of the `_locale` special parameter when defining a route's default values?
    answers:
      -
        value: >
          To specify the default locale for the route if no locale is explicitly provided in the URL.
        correct: true
      -
        value: >
          To define the only locale that the route can match.
        correct: false
      -
        value: >
          To automatically translate the route path based on the default locale.
        correct: false
      -
        value: >
          To define a fallback locale for the application.
        correct: false
    help: |
      Setting a default `_locale` for a route ensures that a specific locale is used if the URL does not provide one, or if it's the default for localized routes.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is a valid way to define a route named `tools` that is only active in the `dev` environment using XML?
    answers:
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools">
              <env>dev</env>
          </route>
          ```
        correct: true
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools" environment="dev"/>
          ```
        correct: false
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools" if_env="dev"/>
          ```
        correct: false
      -
        value: >
          Environment-specific routes cannot be defined in XML.
        correct: false
    help: |
      The `<env>` tag in XML route definitions allows you to restrict the route to one or more specific environments.
      https://symfony.com/doc/current/routing.html#environment-specific-routes

  -
    question: >
      What is the primary purpose of the `_format` special parameter when defining a route's default values?
    answers:
      -
        value: >
          To set the default format (e.g., `html`, `json`) for the route if no format is explicitly provided in the URL.
        correct: true
      -
        value: >
          To specify the only format that the route can output.
        correct: false
      -
        value: >
          To define the default response content type.
        correct: false
      -
        value: >
          To automatically convert the response to the specified format.
        correct: false
    help: |
      Setting a default `_format` for a route ensures that a specific format is used if the URL does not specify one, influencing the `Content-Type` header.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is true about the `UrlGeneratorInterface::RELATIVE_PATH` constant?
    answers:
      -
        value: >
          It generates a URL relative to the current path of the request.
        correct: true
      -
        value: >
          It generates a URL relative to the web root.
        correct: false
      -
        value: >
          It generates a URL without a scheme or host.
        correct: false
      -
        value: >
          It is used for generating URLs for assets.
        correct: false
    help: |
      `RELATIVE_PATH` generates a URL that is relative to the current request's path, which can be useful for internal links within the same directory structure.
      https://symfony.com/doc/current/routing.html#generating-absolute-urls

  -
    question: >
      When debugging routing, what information does `php bin/console debug:router --show-aliases` provide?
    answers:
      -
        value: >
          It lists all route aliases defined in the application.
        correct: true
      -
        value: >
          It shows the original route that each alias points to.
        correct: true
      -
        value: >
          It displays the deprecation messages for aliased routes.
        correct: true
      -
        value: >
          It only shows aliases that are currently active.
        correct: false
    help: |
      The `--show-aliases` option provides a comprehensive list of all route aliases, including their target routes and any associated deprecation information.
      https://symfony.com/doc/current/routing.html#filtering-routes

  -
    question: >
      What is the purpose of the `_controller` special parameter when generating URLs?
    answers:
      -
        value: >
          It can be used to specify the controller and action to be executed for the generated URL, although it's rarely set manually.
        correct: true
      -
        value: >
          It is a mandatory parameter for all URL generation.
        correct: false
      -
        value: >
          It defines the default controller for the application.
        correct: false
      -
        value: >
          It is only used internally by the router for matching.
        correct: false
    help: |
      While primarily an internal attribute for route matching, `_controller` can technically be passed during URL generation to explicitly define the target controller, though this is uncommon.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is true about the `UrlGeneratorInterface::ABSOLUTE_URL` constant?
    answers:
      -
        value: >
          It generates a full URL including the scheme and host (e.g., `http://example.com/blog/post`).
        correct: true
      -
        value: >
          It generates a URL relative to the current domain.
        correct: false
      -
        value: >
          It is the default behavior when generating URLs.
        correct: false
      -
        value: >
          It is only used for external links.
        correct: false
    help: |
      `ABSOLUTE_URL` ensures that the generated URL is a complete, absolute URL, including the protocol and domain.
      https://symfony.com/doc/current/routing.html#generating-absolute-urls

  -
    question: >
      When defining a route with a `condition` using Expression Language, which variable provides access to the `Symfony\Component\Routing\RequestContext` object?
    answers:
      -
        value: >
          `context`
        correct: true
      -
        value: >
          `request_context`
        correct: false
      -
        value: >
          `app_context`
        correct: false
      -
        value: >
          `router_context`
        correct: false
    help: |
      The `context` variable in Expression Language directly exposes the `RequestContext` object, providing information about the current routing context.
      https://symfony.com/doc/current/routing.html#expression-language-variables-and-functions

  -
    question: >
      Which of the following is a valid way to define a route named `product_show` for the path `/product/{id}` in XML, with a requirement that `id` must be a digit (`\d+`)?
    answers:
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id}" controller="App\Controller\ProductController::show">
              <requirement key="id">\d+</requirement>
          </route>
          ```
        correct: true
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id<\d+>}" controller="App\Controller\ProductController::show"/>
          ```
        correct: false
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id}" controller="App\Controller\ProductController::show" requirement_id="\d+"/>
          ```
        correct: false
      -
        value: >
          Requirements for parameters are not supported in XML.
        correct: false
    help: |
      In XML, requirements are defined using nested `<requirement>` tags within the `<route>` definition.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      What is the purpose of the `_locale` special parameter when defining a route's default values?
    answers:
      -
        value: >
          To specify the default locale for the route if no locale is explicitly provided in the URL.
        correct: true
      -
        value: >
          To define the only locale that the route can match.
        correct: false
      -
        value: >
          To automatically translate the route path based on the default locale.
        correct: false
      -
        value: >
          To define a fallback locale for the application.
        correct: false
    help: |
      Setting a default `_locale` for a route ensures that a specific locale is used if the URL does not provide one, or if it's the default for localized routes.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is a valid way to define a route named `tools` that is only active in the `dev` environment using XML?
    answers:
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools">
              <env>dev</env>
          </route>
          ```
        correct: true
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools" environment="dev"/>
          ```
        correct: false
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools" if_env="dev"/>
          ```
        correct: false
      -
        value: >
          Environment-specific routes cannot be defined in XML.
        correct: false
    help: |
      The `<env>` tag in XML route definitions allows you to restrict the route to one or more specific environments.
      https://symfony.com/doc/current/routing.html#environment-specific-routes

  -
    question: >
      What is the primary purpose of the `_format` special parameter when defining a route's default values?
    answers:
      -
        value: >
          To set the default format (e.g., `html`, `json`) for the route if no format is explicitly provided in the URL.
        correct: true
      -
        value: >
          To specify the only format that the route can output.
        correct: false
      -
        value: >
          To define the default response content type.
        correct: false
      -
        value: >
          To automatically convert the response to the specified format.
        correct: false
    help: |
      Setting a default `_format` for a route ensures that a specific format is used if the URL does not specify one, influencing the `Content-Type` header.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is true about the `UrlGeneratorInterface::RELATIVE_PATH` constant?
    answers:
      -
        value: >
          It generates a URL relative to the current path of the request.
        correct: true
      -
        value: >
          It generates a URL relative to the web root.
        correct: false
      -
        value: >
          It generates a URL without a scheme or host.
        correct: false
      -
        value: >
          It is used for generating URLs for assets.
        correct: false
    help: |
      `RELATIVE_PATH` generates a URL that is relative to the current request's path, which can be useful for internal links within the same directory structure.
      https://symfony.com/doc/current/routing.html#generating-absolute-urls

  -
    question: >
      When debugging routing, what information does `php bin/console debug:router --show-aliases` provide?
    answers:
      -
        value: >
          It lists all route aliases defined in the application.
        correct: true
      -
        value: >
          It shows the original route that each alias points to.
        correct: true
      -
        value: >
          It displays the deprecation messages for aliased routes.
        correct: true
      -
        value: >
          It only shows aliases that are currently active.
        correct: false
    help: |
      The `--show-aliases` option provides a comprehensive list of all route aliases, including their target routes and any associated deprecation information.
      https://symfony.com/doc/current/routing.html#filtering-routes

  -
    question: >
      What is the purpose of the `_controller` special parameter when generating URLs?
    answers:
      -
        value: >
          It can be used to specify the controller and action to be executed for the generated URL, although it's rarely set manually.
        correct: true
      -
        value: >
          It is a mandatory parameter for all URL generation.
        correct: false
      -
        value: >
          It defines the default controller for the application.
        correct: false
      -
        value: >
          It is only used internally by the router for matching.
        correct: false
    help: |
      While primarily an internal attribute for route matching, `_controller` can technically be passed during URL generation to explicitly define the target controller, though this is uncommon.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is true about the `UrlGeneratorInterface::ABSOLUTE_URL` constant?
    answers:
      -
        value: >
          It generates a full URL including the scheme and host (e.g., `http://example.com/blog/post`).
        correct: true
      -
        value: >
          It generates a URL relative to the current domain.
        correct: false
      -
        value: >
          It is the default behavior when generating URLs.
        correct: false
      -
        value: >
          It is only used for external links.
        correct: false
    help: |
      `ABSOLUTE_URL` ensures that the generated URL is a complete, absolute URL, including the protocol and domain.
      https://symfony.com/doc/current/routing.html#generating-absolute-urls

  -
    question: >
      When defining a route with a `condition` using Expression Language, which variable provides access to the `Symfony\Component\Routing\RequestContext` object?
    answers:
      -
        value: >
          `context`
        correct: true
      -
        value: >
          `request_context`
        correct: false
      -
        value: >
          `app_context`
        correct: false
      -
        value: >
          `router_context`
        correct: false
    help: |
      The `context` variable in Expression Language directly exposes the `RequestContext` object, providing information about the current routing context.
      https://symfony.com/doc/current/routing.html#expression-language-variables-and-functions

  -
    question: >
      Which of the following is a valid way to define a route named `product_show` for the path `/product/{id}` in XML, with a requirement that `id` must be a digit (`\d+`)?
    answers:
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id}" controller="App\Controller\ProductController::show">
              <requirement key="id">\d+</requirement>
          </route>
          ```
        correct: true
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id<\d+>}" controller="App\Controller\ProductController::show"/>
          ```
        correct: false
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id}" controller="App\Controller\ProductController::show" requirement_id="\d+"/>
          ```
        correct: false
      -
        value: >
          Requirements for parameters are not supported in XML.
        correct: false
    help: |
      In XML, requirements are defined using nested `<requirement>` tags within the `<route>` definition.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      What is the purpose of the `_locale` special parameter when defining a route's default values?
    answers:
      -
        value: >
          To specify the default locale for the route if no locale is explicitly provided in the URL.
        correct: true
      -
        value: >
          To define the only locale that the route can match.
        correct: false
      -
        value: >
          To automatically translate the route path based on the default locale.
        correct: false
      -
        value: >
          To define a fallback locale for the application.
        correct: false
    help: |
      Setting a default `_locale` for a route ensures that a specific locale is used if the URL does not provide one, or if it's the default for localized routes.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is a valid way to define a route named `tools` that is only active in the `dev` environment using XML?
    answers:
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools">
              <env>dev</env>
          </route>
          ```
        correct: true
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools" environment="dev"/>
          ```
        correct: false
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools" if_env="dev"/>
          ```
        correct: false
      -
        value: >
          Environment-specific routes cannot be defined in XML.
        correct: false
    help: |
      The `<env>` tag in XML route definitions allows you to restrict the route to one or more specific environments.
      https://symfony.com/doc/current/routing.html#environment-specific-routes

  -
    question: >
      What is the primary purpose of the `_format` special parameter when defining a route's default values?
    answers:
      -
        value: >
          To set the default format (e.g., `html`, `json`) for the route if no format is explicitly provided in the URL.
        correct: true
      -
        value: >
          To specify the only format that the route can output.
        correct: false
      -
        value: >
          To define the default response content type.
        correct: false
      -
        value: >
          To automatically convert the response to the specified format.
        correct: false
    help: |
      Setting a default `_format` for a route ensures that a specific format is used if the URL does not specify one, influencing the `Content-Type` header.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is true about the `UrlGeneratorInterface::RELATIVE_PATH` constant?
    answers:
      -
        value: >
          It generates a URL relative to the current path of the request.
        correct: true
      -
        value: >
          It generates a URL relative to the web root.
        correct: false
      -
        value: >
          It generates a URL without a scheme or host.
        correct: false
      -
        value: >
          It is used for generating URLs for assets.
        correct: false
    help: |
      `RELATIVE_PATH` generates a URL that is relative to the current request's path, which can be useful for internal links within the same directory structure.
      https://symfony.com/doc/current/routing.html#generating-absolute-urls

  -
    question: >
      When debugging routing, what information does `php bin/console debug:router --show-aliases` provide?
    answers:
      -
        value: >
          It lists all route aliases defined in the application.
        correct: true
      -
        value: >
          It shows the original route that each alias points to.
        correct: true
      -
        value: >
          It displays the deprecation messages for aliased routes.
        correct: true
      -
        value: >
          It only shows aliases that are currently active.
        correct: false
    help: |
      The `--show-aliases` option provides a comprehensive list of all route aliases, including their target routes and any associated deprecation information.
      https://symfony.com/doc/current/routing.html#filtering-routes

  -
    question: >
      What is the purpose of the `_controller` special parameter when generating URLs?
    answers:
      -
        value: >
          It can be used to specify the controller and action to be executed for the generated URL, although it's rarely set manually.
        correct: true
      -
        value: >
          It is a mandatory parameter for all URL generation.
        correct: false
      -
        value: >
          It defines the default controller for the application.
        correct: false
      -
        value: >
          It is only used internally by the router for matching.
        correct: false
    help: |
      While primarily an internal attribute for route matching, `_controller` can technically be passed during URL generation to explicitly define the target controller, though this is uncommon.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is true about the `UrlGeneratorInterface::ABSOLUTE_URL` constant?
    answers:
      -
        value: >
          It generates a full URL including the scheme and host (e.g., `http://example.com/blog/post`).
        correct: true
      -
        value: >
          It generates a URL relative to the current domain.
        correct: false
      -
        value: >
          It is the default behavior when generating URLs.
        correct: false
      -
        value: >
          It is only used for external links.
        correct: false
    help: |
      `ABSOLUTE_URL` ensures that the generated URL is a complete, absolute URL, including the protocol and domain.
      https://symfony.com/doc/current/routing.html#generating-absolute-urls

  -
    question: >
      When defining a route with a `condition` using Expression Language, which variable provides access to the `Symfony\Component\Routing\RequestContext` object?
    answers:
      -
        value: >
          `context`
        correct: true
      -
        value: >
          `request_context`
        correct: false
      -
        value: >
          `app_context`
        correct: false
      -
        value: >
          `router_context`
        correct: false
    help: |
      The `context` variable in Expression Language directly exposes the `RequestContext` object, providing information about the current routing context.
      https://symfony.com/doc/current/routing.html#expression-language-variables-and-functions

  -
    question: >
      Which of the following is a valid way to define a route named `product_show` for the path `/product/{id}` in XML, with a requirement that `id` must be a digit (`\d+`)?
    answers:
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id}" controller="App\Controller\ProductController::show">
              <requirement key="id">\d+</requirement>
          </route>
          ```
        correct: true
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id<\d+>}" controller="App\Controller\ProductController::show"/>
          ```
        correct: false
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id}" controller="App\Controller\ProductController::show" requirement_id="\d+"/>
          ```
        correct: false
      -
        value: >
          Requirements for parameters are not supported in XML.
        correct: false
    help: |
      In XML, requirements are defined using nested `<requirement>` tags within the `<route>` definition.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      What is the purpose of the `_locale` special parameter when defining a route's default values?
    answers:
      -
        value: >
          To specify the default locale for the route if no locale is explicitly provided in the URL.
        correct: true
      -
        value: >
          To define the only locale that the route can match.
        correct: false
      -
        value: >
          To automatically translate the route path based on the default locale.
        correct: false
      -
        value: >
          To define a fallback locale for the application.
        correct: false
    help: |
      Setting a default `_locale` for a route ensures that a specific locale is used if the URL does not provide one, or if it's the default for localized routes.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is a valid way to define a route named `tools` that is only active in the `dev` environment using XML?
    answers:
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools">
              <env>dev</env>
          </route>
          ```
        correct: true
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools" environment="dev"/>
          ```
        correct: false
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools" if_env="dev"/>
          ```
        correct: false
      -
        value: >
          Environment-specific routes cannot be defined in XML.
        correct: false
    help: |
      The `<env>` tag in XML route definitions allows you to restrict the route to one or more specific environments.
      https://symfony.com/doc/current/routing.html#environment-specific-routes

  -
    question: >
      What is the primary purpose of the `_format` special parameter when defining a route's default values?
    answers:
      -
        value: >
          To set the default format (e.g., `html`, `json`) for the route if no format is explicitly provided in the URL.
        correct: true
      -
        value: >
          To specify the only format that the route can output.
        correct: false
      -
        value: >
          To define the default response content type.
        correct: false
      -
        value: >
          To automatically convert the response to the specified format.
        correct: false
    help: |
      Setting a default `_format` for a route ensures that a specific format is used if the URL does not specify one, influencing the `Content-Type` header.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is true about the `UrlGeneratorInterface::RELATIVE_PATH` constant?
    answers:
      -
        value: >
          It generates a URL relative to the current path of the request.
        correct: true
      -
        value: >
          It generates a URL relative to the web root.
        correct: false
      -
        value: >
          It generates a URL without a scheme or host.
        correct: false
      -
        value: >
          It is used for generating URLs for assets.
        correct: false
    help: |
      `RELATIVE_PATH` generates a URL that is relative to the current request's path, which can be useful for internal links within the same directory structure.
      https://symfony.com/doc/current/routing.html#generating-absolute-urls

  -
    question: >
      When debugging routing, what information does `php bin/console debug:router --show-aliases` provide?
    answers:
      -
        value: >
          It lists all route aliases defined in the application.
        correct: true
      -
        value: >
          It shows the original route that each alias points to.
        correct: true
      -
        value: >
          It displays the deprecation messages for aliased routes.
        correct: true
      -
        value: >
          It only shows aliases that are currently active.
        correct: false
    help: |
      The `--show-aliases` option provides a comprehensive list of all route aliases, including their target routes and any associated deprecation information.
      https://symfony.com/doc/current/routing.html#filtering-routes

  -
    question: >
      What is the purpose of the `_controller` special parameter when generating URLs?
    answers:
      -
        value: >
          It can be used to specify the controller and action to be executed for the generated URL, although it's rarely set manually.
        correct: true
      -
        value: >
          It is a mandatory parameter for all URL generation.
        correct: false
      -
        value: >
          It defines the default controller for the application.
        correct: false
      -
        value: >
          It is only used internally by the router for matching.
        correct: false
    help: |
      While primarily an internal attribute for route matching, `_controller` can technically be passed during URL generation to explicitly define the target controller, though this is uncommon.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is true about the `UrlGeneratorInterface::ABSOLUTE_URL` constant?
    answers:
      -
        value: >
          It generates a full URL including the scheme and host (e.g., `http://example.com/blog/post`).
        correct: true
      -
        value: >
          It generates a URL relative to the current domain.
        correct: false
      -
        value: >
          It is the default behavior when generating URLs.
        correct: false
      -
        value: >
          It is only used for external links.
        correct: false
    help: |
      `ABSOLUTE_URL` ensures that the generated URL is a complete, absolute URL, including the protocol and domain.
      https://symfony.com/doc/current/routing.html#generating-absolute-urls

  -
    question: >
      When defining a route with a `condition` using Expression Language, which variable provides access to the `Symfony\Component\Routing\RequestContext` object?
    answers:
      -
        value: >
          `context`
        correct: true
      -
        value: >
          `request_context`
        correct: false
      -
        value: >
          `app_context`
        correct: false
      -
        value: >
          `router_context`
        correct: false
    help: |
      The `context` variable in Expression Language directly exposes the `RequestContext` object, providing information about the current routing context.
      https://symfony.com/doc/current/routing.html#expression-language-variables-and-functions

  -
    question: >
      Which of the following is a valid way to define a route named `product_show` for the path `/product/{id}` in XML, with a requirement that `id` must be a digit (`\d+`)?
    answers:
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id}" controller="App\Controller\ProductController::show">
              <requirement key="id">\d+</requirement>
          </route>
          ```
        correct: true
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id<\d+>}" controller="App\Controller\ProductController::show"/>
          ```
        correct: false
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id}" controller="App\Controller\ProductController::show" requirement_id="\d+"/>
          ```
        correct: false
      -
        value: >
          Requirements for parameters are not supported in XML.
        correct: false
    help: |
      In XML, requirements are defined using nested `<requirement>` tags within the `<route>` definition.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      What is the purpose of the `_locale` special parameter when defining a route's default values?
    answers:
      -
        value: >
          To specify the default locale for the route if no locale is explicitly provided in the URL.
        correct: true
      -
        value: >
          To define the only locale that the route can match.
        correct: false
      -
        value: >
          To automatically translate the route path based on the default locale.
        correct: false
      -
        value: >
          To define a fallback locale for the application.
        correct: false
    help: |
      Setting a default `_locale` for a route ensures that a specific locale is used if the URL does not provide one, or if it's the default for localized routes.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is a valid way to define a route named `tools` that is only active in the `dev` environment using XML?
    answers:
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools">
              <env>dev</env>
          </route>
          ```
        correct: true
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools" environment="dev"/>
          ```
        correct: false
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools" if_env="dev"/>
          ```
        correct: false
      -
        value: >
          Environment-specific routes cannot be defined in XML.
        correct: false
    help: |
      The `<env>` tag in XML route definitions allows you to restrict the route to one or more specific environments.
      https://symfony.com/doc/current/routing.html#environment-specific-routes

  -
    question: >
      What is the primary purpose of the `_format` special parameter when defining a route's default values?
    answers:
      -
        value: >
          To set the default format (e.g., `html`, `json`) for the route if no format is explicitly provided in the URL.
        correct: true
      -
        value: >
          To specify the only format that the route can output.
        correct: false
      -
        value: >
          To define the default response content type.
        correct: false
      -
        value: >
          To automatically convert the response to the specified format.
        correct: false
    help: |
      Setting a default `_format` for a route ensures that a specific format is used if the URL does not specify one, influencing the `Content-Type` header.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is true about the `UrlGeneratorInterface::RELATIVE_PATH` constant?
    answers:
      -
        value: >
          It generates a URL relative to the current path of the request.
        correct: true
      -
        value: >
          It generates a URL relative to the web root.
        correct: false
      -
        value: >
          It generates a URL without a scheme or host.
        correct: false
      -
        value: >
          It is used for generating URLs for assets.
        correct: false
    help: |
      `RELATIVE_PATH` generates a URL that is relative to the current request's path, which can be useful for internal links within the same directory structure.
      https://symfony.com/doc/current/routing.html#generating-absolute-urls

  -
    question: >
      When debugging routing, what information does `php bin/console debug:router --show-aliases` provide?
    answers:
      -
        value: >
          It lists all route aliases defined in the application.
        correct: true
      -
        value: >
          It shows the original route that each alias points to.
        correct: true
      -
        value: >
          It displays the deprecation messages for aliased routes.
        correct: true
      -
        value: >
          It only shows aliases that are currently active.
        correct: false
    help: |
      The `--show-aliases` option provides a comprehensive list of all route aliases, including their target routes and any associated deprecation information.
      https://symfony.com/doc/current/routing.html#filtering-routes

  -
    question: >
      What is the purpose of the `_controller` special parameter when generating URLs?
    answers:
      -
        value: >
          It can be used to specify the controller and action to be executed for the generated URL, although it's rarely set manually.
        correct: true
      -
        value: >
          It is a mandatory parameter for all URL generation.
        correct: false
      -
        value: >
          It defines the default controller for the application.
        correct: false
      -
        value: >
          It is only used internally by the router for matching.
        correct: false
    help: |
      While primarily an internal attribute for route matching, `_controller` can technically be passed during URL generation to explicitly define the target controller, though this is uncommon.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is true about the `UrlGeneratorInterface::ABSOLUTE_URL` constant?
    answers:
      -
        value: >
          It generates a full URL including the scheme and host (e.g., `http://example.com/blog/post`).
        correct: true
      -
        value: >
          It generates a URL relative to the current domain.
        correct: false
      -
        value: >
          It is the default behavior when generating URLs.
        correct: false
      -
        value: >
          It is only used for external links.
        correct: false
    help: |
      `ABSOLUTE_URL` ensures that the generated URL is a complete, absolute URL, including the protocol and domain.
      https://symfony.com/doc/current/routing.html#generating-absolute-urls

  -
    question: >
      When defining a route with a `condition` using Expression Language, which variable provides access to the `Symfony\Component\Routing\RequestContext` object?
    answers:
      -
        value: >
          `context`
        correct: true
      -
        value: >
          `request_context`
        correct: false
      -
        value: >
          `app_context`
        correct: false
      -
        value: >
          `router_context`
        correct: false
    help: |
      The `context` variable in Expression Language directly exposes the `RequestContext` object, providing information about the current routing context.
      https://symfony.com/doc/current/routing.html#expression-language-variables-and-functions

  -
    question: >
      Which of the following is a valid way to define a route named `product_show` for the path `/product/{id}` in XML, with a requirement that `id` must be a digit (`\d+`)?
    answers:
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id}" controller="App\Controller\ProductController::show">
              <requirement key="id">\d+</requirement>
          </route>
          ```
        correct: true
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id<\d+>}" controller="App\Controller\ProductController::show"/>
          ```
        correct: false
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id}" controller="App\Controller\ProductController::show" requirement_id="\d+"/>
          ```
        correct: false
      -
        value: >
          Requirements for parameters are not supported in XML.
        correct: false
    help: |
      In XML, requirements are defined using nested `<requirement>` tags within the `<route>` definition.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      What is the purpose of the `_locale` special parameter when defining a route's default values?
    answers:
      -
        value: >
          To specify the default locale for the route if no locale is explicitly provided in the URL.
        correct: true
      -
        value: >
          To define the only locale that the route can match.
        correct: false
      -
        value: >
          To automatically translate the route path based on the default locale.
        correct: false
      -
        value: >
          To define a fallback locale for the application.
        correct: false
    help: |
      Setting a default `_locale` for a route ensures that a specific locale is used if the URL does not provide one, or if it's the default for localized routes.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is a valid way to define a route named `tools` that is only active in the `dev` environment using XML?
    answers:
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools">
              <env>dev</env>
          </route>
          ```
        correct: true
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools" environment="dev"/>
          ```
        correct: false
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools" if_env="dev"/>
          ```
        correct: false
      -
        value: >
          Environment-specific routes cannot be defined in XML.
        correct: false
    help: |
      The `<env>` tag in XML route definitions allows you to restrict the route to one or more specific environments.
      https://symfony.com/doc/current/routing.html#environment-specific-routes

  -
    question: >
      What is the primary purpose of the `_format` special parameter when defining a route's default values?
    answers:
      -
        value: >
          To set the default format (e.g., `html`, `json`) for the route if no format is explicitly provided in the URL.
        correct: true
      -
        value: >
          To specify the only format that the route can output.
        correct: false
      -
        value: >
          To define the default response content type.
        correct: false
      -
        value: >
          To automatically convert the response to the specified format.
        correct: false
    help: |
      Setting a default `_format` for a route ensures that a specific format is used if the URL does not specify one, influencing the `Content-Type` header.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is true about the `UrlGeneratorInterface::RELATIVE_PATH` constant?
    answers:
      -
        value: >
          It generates a URL relative to the current path of the request.
        correct: true
      -
        value: >
          It generates a URL relative to the web root.
        correct: false
      -
        value: >
          It generates a URL without a scheme or host.
        correct: false
      -
        value: >
          It is used for generating URLs for assets.
        correct: false
    help: |
      `RELATIVE_PATH` generates a URL that is relative to the current request's path, which can be useful for internal links within the same directory structure.
      https://symfony.com/doc/current/routing.html#generating-absolute-urls

  -
    question: >
      When debugging routing, what information does `php bin/console debug:router --show-aliases` provide?
    answers:
      -
        value: >
          It lists all route aliases defined in the application.
        correct: true
      -
        value: >
          It shows the original route that each alias points to.
        correct: true
      -
        value: >
          It displays the deprecation messages for aliased routes.
        correct: true
      -
        value: >
          It only shows aliases that are currently active.
        correct: false
    help: |
      The `--show-aliases` option provides a comprehensive list of all route aliases, including their target routes and any associated deprecation information.
      https://symfony.com/doc/current/routing.html#filtering-routes

  -
    question: >
      What is the purpose of the `_controller` special parameter when generating URLs?
    answers:
      -
        value: >
          It can be used to specify the controller and action to be executed for the generated URL, although it's rarely set manually.
        correct: true
      -
        value: >
          It is a mandatory parameter for all URL generation.
        correct: false
      -
        value: >
          It defines the default controller for the application.
        correct: false
      -
        value: >
          It is only used internally by the router for matching.
        correct: false
    help: |
      While primarily an internal attribute for route matching, `_controller` can technically be passed during URL generation to explicitly define the target controller, though this is uncommon.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is true about the `UrlGeneratorInterface::ABSOLUTE_URL` constant?
    answers:
      -
        value: >
          It generates a full URL including the scheme and host (e.g., `http://example.com/blog/post`).
        correct: true
      -
        value: >
          It generates a URL relative to the current domain.
        correct: false
      -
        value: >
          It is the default behavior when generating URLs.
        correct: false
      -
        value: >
          It is only used for external links.
        correct: false
    help: |
      `ABSOLUTE_URL` ensures that the generated URL is a complete, absolute URL, including the protocol and domain.
      https://symfony.com/doc/current/routing.html#generating-absolute-urls

  -
    question: >
      When defining a route with a `condition` using Expression Language, which variable provides access to the `Symfony\Component\Routing\RequestContext` object?
    answers:
      -
        value: >
          `context`
        correct: true
      -
        value: >
          `request_context`
        correct: false
      -
        value: >
          `app_context`
        correct: false
      -
        value: >
          `router_context`
        correct: false
    help: |
      The `context` variable in Expression Language directly exposes the `RequestContext` object, providing information about the current routing context.
      https://symfony.com/doc/current/routing.html#expression-language-variables-and-functions

  -
    question: >
      Which of the following is a valid way to define a route named `product_show` for the path `/product/{id}` in XML, with a requirement that `id` must be a digit (`\d+`)?
    answers:
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id}" controller="App\Controller\ProductController::show">
              <requirement key="id">\d+</requirement>
          </route>
          ```
        correct: true
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id<\d+>}" controller="App\Controller\ProductController::show"/>
          ```
        correct: false
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id}" controller="App\Controller\ProductController::show" requirement_id="\d+"/>
          ```
        correct: false
      -
        value: >
          Requirements for parameters are not supported in XML.
        correct: false
    help: |
      In XML, requirements are defined using nested `<requirement>` tags within the `<route>` definition.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      What is the purpose of the `_locale` special parameter when defining a route's default values?
    answers:
      -
        value: >
          To specify the default locale for the route if no locale is explicitly provided in the URL.
        correct: true
      -
        value: >
          To define the only locale that the route can match.
        correct: false
      -
        value: >
          To automatically translate the route path based on the default locale.
        correct: false
      -
        value: >
          To define a fallback locale for the application.
        correct: false
    help: |
      Setting a default `_locale` for a route ensures that a specific locale is used if the URL does not provide one, or if it's the default for localized routes.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is a valid way to define a route named `tools` that is only active in the `dev` environment using XML?
    answers:
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools">
              <env>dev</env>
          </route>
          ```
        correct: true
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools" environment="dev"/>
          ```
        correct: false
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools" if_env="dev"/>
          ```
        correct: false
      -
        value: >
          Environment-specific routes cannot be defined in XML.
        correct: false
    help: |
      The `<env>` tag in XML route definitions allows you to restrict the route to one or more specific environments.
      https://symfony.com/doc/current/routing.html#environment-specific-routes

  -
    question: >
      What is the primary purpose of the `_format` special parameter when defining a route's default values?
    answers:
      -
        value: >
          To set the default format (e.g., `html`, `json`) for the route if no format is explicitly provided in the URL.
        correct: true
      -
        value: >
          To specify the only format that the route can output.
        correct: false
      -
        value: >
          To define the default response content type.
        correct: false
      -
        value: >
          To automatically convert the response to the specified format.
        correct: false
    help: |
      Setting a default `_format` for a route ensures that a specific format is used if the URL does not specify one, influencing the `Content-Type` header.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is true about the `UrlGeneratorInterface::RELATIVE_PATH` constant?
    answers:
      -
        value: >
          It generates a URL relative to the current path of the request.
        correct: true
      -
        value: >
          It generates a URL relative to the web root.
        correct: false
      -
        value: >
          It generates a URL without a scheme or host.
        correct: false
      -
        value: >
          It is used for generating URLs for assets.
        correct: false
    help: |
      `RELATIVE_PATH` generates a URL that is relative to the current request's path, which can be useful for internal links within the same directory structure.
      https://symfony.com/doc/current/routing.html#generating-absolute-urls

  -
    question: >
      When debugging routing, what information does `php bin/console debug:router --show-aliases` provide?
    answers:
      -
        value: >
          It lists all route aliases defined in the application.
        correct: true
      -
        value: >
          It shows the original route that each alias points to.
        correct: true
      -
        value: >
          It displays the deprecation messages for aliased routes.
        correct: true
      -
        value: >
          It only shows aliases that are currently active.
        correct: false
    help: |
      The `--show-aliases` option provides a comprehensive list of all route aliases, including their target routes and any associated deprecation information.
      https://symfony.com/doc/current/routing.html#filtering-routes

  -
    question: >
      What is the purpose of the `_controller` special parameter when generating URLs?
    answers:
      -
        value: >
          It can be used to specify the controller and action to be executed for the generated URL, although it's rarely set manually.
        correct: true
      -
        value: >
          It is a mandatory parameter for all URL generation.
        correct: false
      -
        value: >
          It defines the default controller for the application.
        correct: false
      -
        value: >
          It is only used internally by the router for matching.
        correct: false
    help: |
      While primarily an internal attribute for route matching, `_controller` can technically be passed during URL generation to explicitly define the target controller, though this is uncommon.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is true about the `UrlGeneratorInterface::ABSOLUTE_URL` constant?
    answers:
      -
        value: >
          It generates a full URL including the scheme and host (e.g., `http://example.com/blog/post`).
        correct: true
      -
        value: >
          It generates a URL relative to the current domain.
        correct: false
      -
        value: >
          It is the default behavior when generating URLs.
        correct: false
      -
        value: >
          It is only used for external links.
        correct: false
    help: |
      `ABSOLUTE_URL` ensures that the generated URL is a complete, absolute URL, including the protocol and domain.
      https://symfony.com/doc/current/routing.html#generating-absolute-urls

  -
    question: >
      When defining a route with a `condition` using Expression Language, which variable provides access to the `Symfony\Component\Routing\RequestContext` object?
    answers:
      -
        value: >
          `context`
        correct: true
      -
        value: >
          `request_context`
        correct: false
      -
        value: >
          `app_context`
        correct: false
      -
        value: >
          `router_context`
        correct: false
    help: |
      The `context` variable in Expression Language directly exposes the `RequestContext` object, providing information about the current routing context.
      https://symfony.com/doc/current/routing.html#expression-language-variables-and-functions

  -
    question: >
      Which of the following is a valid way to define a route named `product_show` for the path `/product/{id}` in XML, with a requirement that `id` must be a digit (`\d+`)?
    answers:
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id}" controller="App\Controller\ProductController::show">
              <requirement key="id">\d+</requirement>
          </route>
          ```
        correct: true
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id<\d+>}" controller="App\Controller\ProductController::show"/>
          ```
        correct: false
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id}" controller="App\Controller\ProductController::show" requirement_id="\d+"/>
          ```
        correct: false
      -
        value: >
          Requirements for parameters are not supported in XML.
        correct: false
    help: |
      In XML, requirements are defined using nested `<requirement>` tags within the `<route>` definition.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      What is the purpose of the `_locale` special parameter when defining a route's default values?
    answers:
      -
        value: >
          To specify the default locale for the route if no locale is explicitly provided in the URL.
        correct: true
      -
        value: >
          To define the only locale that the route can match.
        correct: false
      -
        value: >
          To automatically translate the route path based on the default locale.
        correct: false
      -
        value: >
          To define a fallback locale for the application.
        correct: false
    help: |
      Setting a default `_locale` for a route ensures that a specific locale is used if the URL does not provide one, or if it's the default for localized routes.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is a valid way to define a route named `tools` that is only active in the `dev` environment using XML?
    answers:
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools">
              <env>dev</env>
          </route>
          ```
        correct: true
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools" environment="dev"/>
          ```
        correct: false
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools" if_env="dev"/>
          ```
        correct: false
      -
        value: >
          Environment-specific routes cannot be defined in XML.
        correct: false
    help: |
      The `<env>` tag in XML route definitions allows you to restrict the route to one or more specific environments.
      https://symfony.com/doc/current/routing.html#environment-specific-routes

  -
    question: >
      What is the primary purpose of the `_format` special parameter when defining a route's default values?
    answers:
      -
        value: >
          To set the default format (e.g., `html`, `json`) for the route if no format is explicitly provided in the URL.
        correct: true
      -
        value: >
          To specify the only format that the route can output.
        correct: false
      -
        value: >
          To define the default response content type.
        correct: false
      -
        value: >
          To automatically convert the response to the specified format.
        correct: false
    help: |
      Setting a default `_format` for a route ensures that a specific format is used if the URL does not specify one, influencing the `Content-Type` header.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is true about the `UrlGeneratorInterface::RELATIVE_PATH` constant?
    answers:
      -
        value: >
          It generates a URL relative to the current path of the request.
        correct: true
      -
        value: >
          It generates a URL relative to the web root.
        correct: false
      -
        value: >
          It generates a URL without a scheme or host.
        correct: false
      -
        value: >
          It is used for generating URLs for assets.
        correct: false
    help: |
      `RELATIVE_PATH` generates a URL that is relative to the current request's path, which can be useful for internal links within the same directory structure.
      https://symfony.com/doc/current/routing.html#generating-absolute-urls

  -
    question: >
      When debugging routing, what information does `php bin/console debug:router --show-aliases` provide?
    answers:
      -
        value: >
          It lists all route aliases defined in the application.
        correct: true
      -
        value: >
          It shows the original route that each alias points to.
        correct: true
      -
        value: >
          It displays the deprecation messages for aliased routes.
        correct: true
      -
        value: >
          It only shows aliases that are currently active.
        correct: false
    help: |
      The `--show-aliases` option provides a comprehensive list of all route aliases, including their target routes and any associated deprecation information.
      https://symfony.com/doc/current/routing.html#filtering-routes

  -
    question: >
      What is the purpose of the `_controller` special parameter when generating URLs?
    answers:
      -
        value: >
          It can be used to specify the controller and action to be executed for the generated URL, although it's rarely set manually.
        correct: true
      -
        value: >
          It is a mandatory parameter for all URL generation.
        correct: false
      -
        value: >
          It defines the default controller for the application.
        correct: false
      -
        value: >
          It is only used internally by the router for matching.
        correct: false
    help: |
      While primarily an internal attribute for route matching, `_controller` can technically be passed during URL generation to explicitly define the target controller, though this is uncommon.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is true about the `UrlGeneratorInterface::ABSOLUTE_URL` constant?
    answers:
      -
        value: >
          It generates a full URL including the scheme and host (e.g., `http://example.com/blog/post`).
        correct: true
      -
        value: >
          It generates a URL relative to the current domain.
        correct: false
      -
        value: >
          It is the default behavior when generating URLs.
        correct: false
      -
        value: >
          It is only used for external links.
        correct: false
    help: |
      `ABSOLUTE_URL` ensures that the generated URL is a complete, absolute URL, including the protocol and domain.
      https://symfony.com/doc/current/routing.html#generating-absolute-urls

  -
    question: >
      When defining a route with a `condition` using Expression Language, which variable provides access to the `Symfony\Component\Routing\RequestContext` object?
    answers:
      -
        value: >
          `context`
        correct: true
      -
        value: >
          `request_context`
        correct: false
      -
        value: >
          `app_context`
        correct: false
      -
        value: >
          `router_context`
        correct: false
    help: |
      The `context` variable in Expression Language directly exposes the `RequestContext` object, providing information about the current routing context.
      https://symfony.com/doc/current/routing.html#expression-language-variables-and-functions

  -
    question: >
      Which of the following is a valid way to define a route named `product_show` for the path `/product/{id}` in XML, with a requirement that `id` must be a digit (`\d+`)?
    answers:
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id}" controller="App\Controller\ProductController::show">
              <requirement key="id">\d+</requirement>
          </route>
          ```
        correct: true
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id<\d+>}" controller="App\Controller\ProductController::show"/>
          ```
        correct: false
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id}" controller="App\Controller\ProductController::show" requirement_id="\d+"/>
          ```
        correct: false
      -
        value: >
          Requirements for parameters are not supported in XML.
        correct: false
    help: |
      In XML, requirements are defined using nested `<requirement>` tags within the `<route>` definition.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      What is the purpose of the `_locale` special parameter when defining a route's default values?
    answers:
      -
        value: >
          To specify the default locale for the route if no locale is explicitly provided in the URL.
        correct: true
      -
        value: >
          To define the only locale that the route can match.
        correct: false
      -
        value: >
          To automatically translate the route path based on the default locale.
        correct: false
      -
        value: >
          To define a fallback locale for the application.
        correct: false
    help: |
      Setting a default `_locale` for a route ensures that a specific locale is used if the URL does not provide one, or if it's the default for localized routes.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is a valid way to define a route named `tools` that is only active in the `dev` environment using XML?
    answers:
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools">
              <env>dev</env>
          </route>
          ```
        correct: true
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools" environment="dev"/>
          ```
        correct: false
      -
        value: |
          ```xml
          <route id="tools" path="/tools" controller="App\Controller\DefaultController::developerTools" if_env="dev"/>
          ```
        correct: false
      -
        value: >
          Environment-specific routes cannot be defined in XML.
        correct: false
    help: |
      The `<env>` tag in XML route definitions allows you to restrict the route to one or more specific environments.
      https://symfony.com/doc/current/routing.html#environment-specific-routes

  -
    question: >
      What is the primary purpose of the `_format` special parameter when defining a route's default values?
    answers:
      -
        value: >
          To set the default format (e.g., `html`, `json`) for the route if no format is explicitly provided in the URL.
        correct: true
      -
        value: >
          To specify the only format that the route can output.
        correct: false
      -
        value: >
          To define the default response content type.
        correct: false
      -
        value: >
          To automatically convert the response to the specified format.
        correct: false
    help: |
      Setting a default `_format` for a route ensures that a specific format is used if the URL does not specify one, influencing the `Content-Type` header.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is true about the `UrlGeneratorInterface::RELATIVE_PATH` constant?
    answers:
      -
        value: >
          It generates a URL relative to the current path of the request.
        correct: true
      -
        value: >
          It generates a URL relative to the web root.
        correct: false
      -
        value: >
          It generates a URL without a scheme or host.
        correct: false
      -
        value: >
          It is used for generating URLs for assets.
        correct: false
    help: |
      `RELATIVE_PATH` generates a URL that is relative to the current request's path, which can be useful for internal links within the same directory structure.
      https://symfony.com/doc/current/routing.html#generating-absolute-urls

  -
    question: >
      When debugging routing, what information does `php bin/console debug:router --show-aliases` provide?
    answers:
      -
        value: >
          It lists all route aliases defined in the application.
        correct: true
      -
        value: >
          It shows the original route that each alias points to.
        correct: true
      -
        value: >
          It displays the deprecation messages for aliased routes.
        correct: true
      -
        value: >
          It only shows aliases that are currently active.
        correct: false
    help: |
      The `--show-aliases` option provides a comprehensive list of all route aliases, including their target routes and any associated deprecation information.
      https://symfony.com/doc/current/routing.html#filtering-routes

  -
    question: >
      What is the purpose of the `_controller` special parameter when generating URLs?
    answers:
      -
        value: >
          It can be used to specify the controller and action to be executed for the generated URL, although it's rarely set manually.
        correct: true
      -
        value: >
          It is a mandatory parameter for all URL generation.
        correct: false
      -
        value: >
          It defines the default controller for the application.
        correct: false
      -
        value: >
          It is only used internally by the router for matching.
        correct: false
    help: |
      While primarily an internal attribute for route matching, `_controller` can technically be passed during URL generation to explicitly define the target controller, though this is uncommon.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is true about the `UrlGeneratorInterface::ABSOLUTE_URL` constant?
    answers:
      -
        value: >
          It generates a full URL including the scheme and host (e.g., `http://example.com/blog/post`).
        correct: true
      -
        value: >
          It generates a URL relative to the current domain.
        correct: false
      -
        value: >
          It is the default behavior when generating URLs.
        correct: false
      -
        value: >
          It is only used for external links.
        correct: false
    help: |
      `ABSOLUTE_URL` ensures that the generated URL is a complete, absolute URL, including the protocol and domain.
      https://symfony.com/doc/current/routing.html#generating-absolute-urls

  -
    question: >
      When defining a route with a `condition` using Expression Language, which variable provides access to the `Symfony\Component\Routing\RequestContext` object?
    answers:
      -
        value: >
          `context`
        correct: true
      -
        value: >
          `request_context`
        correct: false
      -
        value: >
          `app_context`
        correct: false
      -
        value: >
          `router_context`
        correct: false
    help: |
      The `context` variable in Expression Language directly exposes the `RequestContext` object, providing information about the current routing context.
      https://symfony.com/doc/current/routing.html#expression-language-variables-and-functions

  -
    question: >
      Which of the following is a valid way to define a route named `product_show` for the path `/product/{id}` in XML, with a requirement that `id` must be a digit (`\d+`)?
    answers:
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id}" controller="App\Controller\ProductController::show">
              <requirement key="id">\d+</requirement>
          </route>
          ```
        correct: true
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id<\d+>}" controller="App\Controller\ProductController::show"/>
          ```
        correct: false
      -
        value: |
          ```xml
          <route id="product_show" path="/product/{id}" controller="App\Controller\ProductController::show" requirement_id="\d+"/>
          ```
        correct: false
      -
        value: >
          Requirements for parameters are not supported in XML.
        correct: false
    help: |
      In XML, requirements are defined using nested `<requirement>` tags within the `<route>` definition.
      https://symfony.com/doc/current