category: Routing

questions:
  -
    question: >
      What is the correct PHP attribute to define a route for a controller method in Symfony 7?
    answers:
      - { value: '`#[Route]`', correct: true }
      - { value: '`#[Path]`', correct: false }
      - { value: '`#[Url]`', correct: false }
      - { value: '`#[RouteDefinition]`', correct: false }
    help: |
      The `#[Route]` attribute is the standard way to define routes directly on controller methods or classes in Symfony.
      https://symfony.com/doc/current/routing.html#defining-routes-as-php-attributes

  -
    question: |
      How do you define a basic route named `homepage` with path `/` and controller `App\Controller\DefaultController::index` in YAML?
    answers:
      - { value: '''homepage:
          path: /
          controller: App\\Controller\\DefaultController::index''', correct: true }
      - { value: '''- name: homepage
          path: /
          action: App\\Controller\\DefaultController::index''', correct: false }
      - { value: '''route:
          homepage:
            path: /
            controller: App\\Controller\\DefaultController::index''', correct: false }
      - { value: '''/homepage:
          controller: App\\Controller\\DefaultController::index''', correct: false }
    help: |
      In YAML, routes are defined as top-level keys with `path` and `controller` as sub-keys.
      https://symfony.com/doc/current/routing.html#defining-routes-in-yaml

  -
    question: |
      Which configuration snippet correctly enables attribute-based routing for controllers in the `src/Controller/` directory within the `App\Controller` namespace?
    answers:
      - { value: '''controllers:
          resource: ../../src/Controller/
          namespace: App\\Controller
          type: attribute''', correct: true }
      - { value: '''app_routes:
          path: ../../src/Controller/
          format: attributes''', correct: false }
      - { value: '''annotations:
          path: src/Controller/
          namespace: App\\Controller''', correct: false }
      - { value: '''routing_attributes:
          resource: App\\Controller\\''', correct: false }
    help: |
      To enable attribute routing, you specify the resource path, namespace, and `type: attribute` in your routing configuration.
      https://symfony.com/doc/current/routing.html#defining-routes-as-php-attributes

  -
    question: |
      How can you apply a common URL prefix and name prefix to all routes defined within a `BlogController` using PHP attributes?
    answers:
      - { value: '`#[Route('/blog', name: 'blog_')]` on the controller class.', correct: true }
      - { value: '`#[Prefix('/blog'), NamePrefix('blog_')]` on the controller class.', correct: false }
      - { value: '`#[RouteGroup(prefix: '/blog', namePrefix: 'blog_')]` on the controller class.', correct: false }
      - { value: 'By defining a `prefix` and `namePrefix` option in each `#[Route]` attribute.', correct: false }
    help: |
      The `#[Route]` attribute can be applied to the controller class itself to define shared configurations like prefixes for all routes within that controller.
      https://symfony.com/doc/current/routing.html#defining-route-groups-with-php-attributes

  -
    question: |
      In YAML, how would you configure a route import to apply a `/blog` prefix to all imported routes from `src/Controller/` and a `blog_` name prefix?
    answers:
      - { value: '''controllers:
          resource: '../../src/Controller/'
          type: attribute
          prefix: '/blog'
          name_prefix: 'blog_'''', correct: true }
      - { value: '''blog_routes:
          import: '../../src/Controller/'
          options: { prefix: '/blog', name_prefix: 'blog_' }''', correct: false }
      - { value: '''routing:
          path: '../../src/Controller/'
          defaults: { _prefix: '/blog', _name_prefix: 'blog_' }''', correct: false }
      - { value: '''resource: '../../src/Controller/'
          type: attribute
          group:
            prefix: '/blog'
            name_prefix: 'blog_'''', correct: false }
    help: |
      When importing routes in YAML, `prefix` and `name_prefix` options can be applied directly to the import definition.
      https://symfony.com/doc/current/routing.html#defining-route-groups-in-yaml

  -
    question: >
      To make a route `tools` with path `/tools` only active in the `dev` environment using PHP attributes, what option should be used?
    answers:
      - { value: '`env: 'dev'`', correct: true }
      - { value: '`environment: 'dev'`', correct: false }
      - { value: '`#[Environment('dev')]`', correct: false }
      - { value: '`context: { env: 'dev' }`', correct: false }
    help: |
      The `env` option in the `#[Route]` attribute allows you to restrict a route's availability to specific environments.
      https://symfony.com/doc/current/routing.html#defining-environment-specific-routes

  -
    question: |
      How do you define a route `tools` with path `/tools` that is only available in the `dev` environment using YAML?
    answers:
      - { value: '''tools:
          path: /tools
          controller: App\\Controller\\DefaultController::developerTools
          env: dev''', correct: true }
      - { value: '''tools:
          path: /tools
          controller: App\\Controller\\DefaultController::developerTools
          environment: dev''', correct: false }
      - { value: '''dev_tools:
          path: /tools
          controller: App\\Controller\\DefaultController::developerTools
          _env: dev''', correct: false }
      - { value: '''tools:
          path: /tools
          controller: App\\Controller\\DefaultController::developerTools
          conditions: "context.getEnv() == 'dev'"''', correct: false }
    help: |
      In YAML, the `env` key under a route definition specifies the environment for which the route is active.
      https://symfony.com/doc/current/routing.html#defining-environment-specific-routes

  -
    question: |
      How do you define a route `/blog/{page}` where `page` must be an integer, using PHP attributes?
    answers:
      - { value: '`#[Route('/blog/{page<\d+>}')]`', correct: true }
      - { value: '`#[Route('/blog/{page}', requirements: ['page' => '\d+'])]`', correct: true }
      - { value: '`#[Route('/blog/{page}', type: 'int')]`', correct: false }
      - { value: '`#[Route('/blog/{page:int}')]`', correct: false }
    help: |
      Route parameters can be restricted using inline regex within the path (`{param<\d+>}`) or via the `requirements` option in the `#[Route]` attribute.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: |
      In YAML, how do you define a route `/blog/{page}` where the `page` parameter must match a digit-only regular expression?
    answers:
      - { value: '''blog_list:
          path: /blog/{page}
          controller: App\\Controller\\BlogController::list
          requirements:
            page: '\\d+'''', correct: true }
      - { value: '''blog_list:
          path: /blog/{page<\\d+>}
          controller: App\\Controller\\BlogController::list''', correct: false }
      - { value: '''blog_list:
          path: /blog/{page}
          controller: App\\Controller\\BlogController::list
          regex: { page: '\\d+' }''', correct: false }
      - { value: '''blog_list:
          path: /blog/{page}
          controller: App\\Controller\\BlogController::list
          constraints:
            page: 'integer'''', correct: false }
    help: |
      The `requirements` key under a route definition in YAML is used to define regular expression constraints for route parameters.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: |
      How can you configure a route parameter `token` in `/share/{token}` to allow slash characters (`/`) within its value using PHP attributes?
    answers:
      - { value: '`#[Route('/share/{token}', requirements: ['token' => '.+'])]`', correct: true }
      - { value: '`#[Route('/share/{token}', allow_slashes: true)]`', correct: false }
      - { value: '`#[Route('/share/{token}', regex: '.*')]`', correct: false }
      - { value: '`#[Route('/share/{token}', requirements: ['token' => '.*'])]`', correct: false }
    help: |
      By default, route parameters do not match the `/` character. To allow it, you must define a requirement that explicitly matches it, such as `.+`.
      https://symfony.com/doc/current/routing.html#allowing-a-slash-character-in-a-route-parameter

  -
    question: |
      In YAML, how do you allow a route parameter `token` in `/share/{token}` to contain slash characters?
    answers:
      - { value: '''share:
          path: /share/{token}
          controller: App\\Controller\\DefaultController::share
          requirements:
            token: .+\\''', correct: true }
      - { value: '''share:
          path: /share/{token}
          controller: App\\Controller\\DefaultController::share
          options: { allow_slash: true }''', correct: false }
      - { value: '''share:
          path: /share/{token<.+>}
          controller: App\\Controller\\DefaultController::share''', correct: false }
      - { value: '''share:
          path: /share/{token}
          controller: App\\Controller\\DefaultController::share
          regex: { token: '.*' }''', correct: false }
    help: |
      The `.+` regex matches one or more characters, including slashes, allowing the parameter to contain them.
      https://symfony.com/doc/current/routing.html#allowing-a-slash-character-in-a-route-parameter

  -
    question: |
      Given a route `/hello/{name}`, how would you set a default value of 'World' for the `name` parameter using PHP attributes?
    answers:
      - { value: '`#[Route('/hello/{name}', defaults: ['name' => 'World'])]`', correct: true }
      - { value: '`#[Route('/hello/{name}', name: 'World')]`', correct: false }
      - { value: '`#[Route('/hello/{name}', default_name: 'World')]`', correct: false }
      - { value: '`#[Route('/hello/{name}', options: { default: { name: 'World' } })]`', correct: false }
    help: |
      The `defaults` option in the `#[Route]` attribute is used to define default values for route parameters.
      https://symfony.com/doc/current/routing.html#defining-defaults-for-parameters

  -
    question: |
      In YAML, how do you set a default value for a route parameter, for example, `name` to 'World' for the path `/hello/{name}`?
    answers:
      - { value: '''hello:
          path: /hello/{name}
          controller: App\\Controller\\HelloController::index
          defaults:
            name: World''', correct: true }
      - { value: '''hello:
          path: /hello/{name}
          controller: App\\Controller\\HelloController::index
          default_values: { name: World }''', correct: false }
      - { value: '''hello:
          path: /hello/{name=World}
          controller: App\\Controller\\HelloController::index''', correct: false }
      - { value: '''hello:
          path: /hello/{name}
          controller: App\\Controller\\HelloController::index
          parameters:
            name: World''', correct: false }
    help: |
      The `defaults` key under a route definition in YAML is used to specify default values for route parameters.
      https://symfony.com/doc/current/routing.html#defining-defaults-for-parameters

  -
    question: >
      Which method is used in a Symfony controller (extending `AbstractController`) to generate a URL for a given route name?
    answers:
      - { value: '`$this->generateUrl($routeName, $parameters)`', correct: true }
      - { value: '`$this->router->generate($routeName, $parameters)`', correct: false }
      - { value: '`$this->url($routeName, $parameters)`', correct: false }
      - { value: '`$this->createUrl($routeName, $parameters)`', correct: false }
    help: |
      The `AbstractController` provides a convenient `generateUrl()` helper method for generating URLs.
      https://symfony.com/doc/current/routing.html#generating-urls-in-controllers

  -
    question: >
      To generate URLs within a Symfony service, which interface should be injected?
    answers:
      - { value: '`Symfony\Component\Routing\Generator\UrlGeneratorInterface`', correct: true }
      - { value: '`Symfony\Component\HttpFoundation\UrlGeneratorInterface`', correct: false }
      - { value: '`Symfony\Component\Routing\RouterInterface`', correct: false }
      - { value: '`Symfony\Component\HttpKernel\UriGeneratorInterface`', correct: false }
    help: |
      The `UrlGeneratorInterface` is the correct interface to inject into services for URL generation.
      https://symfony.com/doc/current/routing.html#generating-urls-in-services

  -
    question: >
      How do you generate an absolute URL (e.g., `http://example.com/sign-up`) for a route named `sign_up` using `generateUrl()`?
    answers:
      - { value: '`$this->generateUrl('sign_up', [], UrlGeneratorInterface::ABSOLUTE_URL)`', correct: true }
      - { value: '`$this->generateUrl('sign_up', ['_absolute' => true])`', correct: false }
      - { value: '`$this->generateUrl('sign_up', [], true)`', correct: false }
      - { value: '`$this->generateUrl('sign_up', [], UrlGeneratorInterface::ABSOLUTE_PATH)`', correct: false }
    help: |
      The third argument to `generateUrl()` (and `UrlGeneratorInterface::generate()`) allows specifying the reference type, such as `UrlGeneratorInterface::ABSOLUTE_URL`.
      https://symfony.com/doc/current/routing.html#generating-urls-in-controllers

  -
    question: >
      When generating a URL for a localized route, how can you explicitly set the locale to 'nl' (Dutch) instead of using the current request locale?
    answers:
      - { value: 'By passing `_locale` as a parameter: `[''_locale'' => ''nl'']`', correct: true }
      - { value: 'By setting `setLocale('nl')` on the `UrlGeneratorInterface` instance.', correct: false }
      - { value: 'By passing `locale: 'nl'` as an option to `generateUrl()`.', correct: false }
      - { value: 'By using a dedicated `generateLocalizedUrl()` method.', correct: false }
    help: |
      The `_locale` parameter can be passed to `generateUrl()` to explicitly set the locale for the generated URL.
      https://symfony.com/doc/current/routing.html#generating-urls-in-controllers

  -
    question: >
      When passing an object like a UUID as a route parameter that is not directly supported by the router, what is the recommended practice to avoid issues?
    answers:
      - { value: 'Explicitly cast the object to a string: `(string) $object`', correct: true }
      - { value: 'Implement `__toString()` method on the object.', correct: true }
      - { value: 'Pass the object directly; Symfony handles object conversion automatically.', correct: false }
      - { value: 'Serialize the object before passing it as a parameter.', correct: false }
    help: |
      Objects used as extra URL parameters should be explicitly converted to strings, or implement the `__toString()` method, to ensure they are correctly handled by the router.
      https://symfony.com/doc/current/routing.html#extra-url-parameters

  -
    question: |
      How do you configure a route in YAML to redirect `/doc` to an internal route named `doc_page` with a permanent redirect (HTTP 301)?
    answers:
      - { value: '''doc_shortcut:
          path: /doc
          controller: Symfony\\Bundle\\FrameworkBundle\\Controller\\RedirectController
          defaults:
            route: 'doc_page'
            permanent: true''', correct: true }
      - { value: '''doc_shortcut:
          path: /doc
          redirect:
            route: doc_page
            status: 301''', correct: false }
      - { value: '''doc_shortcut:
          path: /doc
          action: redirect_to_route
          target_route: doc_page
          permanent: true''', correct: false }
      - { value: '''doc_shortcut:
          path: /doc
          controller: App\\Controller\\RedirectController::routeRedirect
          defaults: { route: 'doc_page', code: 301 }''', correct: false }
    help: |
      The `RedirectController` is used for redirects, and the `defaults` key specifies the target route and `permanent` option.
      https://symfony.com/doc/current/routing.html#redirecting-routes

  -
    question: |
      Using the PHP routing configurator, how would you set up a permanent redirect from `/legacy/doc` to `https://legacy.example.com/doc`?
    answers:
      - { value: '''$routes->add('legacy_doc', '/legacy/doc')
          ->controller(RedirectController::class)
          ->defaults([
              'path' => 'https://legacy.example.com/doc',
              'permanent' => true,
          ]);''', correct: true }
      - { value: '''$routes->redirect('legacy_doc', '/legacy/doc', 'https://legacy.example.com/doc', 301);''', correct: false }
      - { value: '''$routes->add('legacy_doc', '/legacy/doc')
          ->redirect('https://legacy.example.com/doc')
          ->permanent();''', correct: false }
      - { value: '''$routes->add('legacy_doc', '/legacy/doc')
          ->controller('redirect_to_url')
          ->options(['url' => 'https://legacy.example.com/doc', 'status' => 301]);''', correct: false }
    help: |
      The `RedirectController` and its `defaults` array are used with the PHP routing configurator to set up redirects, including external URLs and permanence.
      https://symfony.com/doc/current/routing.html#redirecting-routes

  -
    question: >
      Which option in `RedirectController` configuration ensures that original query string parameters are preserved during a redirect?
    answers:
      - { value: '`keepQueryParams: true`', correct: true }
      - { value: '`preserve_query: true`', correct: false }
      - { value: '`passQueryString: true`', correct: false }
      - { value: '`append_query: true`', correct: false }
    help: |
      The `keepQueryParams` default option, when set to `true`, ensures that the query string from the original request is appended to the redirected URL.
      https://symfony.com/doc/current/routing.html#redirecting-routes

  -
    question: >
      To ensure the HTTP method is preserved during a redirect (e.g., POST to POST), which option should be set in the `RedirectController` configuration, and what status codes are used for temporary and permanent redirects?
    answers:
      - { value: '`keepRequestMethod: true`; 307 for temporary, 308 for permanent.', correct: true }
      - { value: '`preserveMethod: true`; 302 for temporary, 301 for permanent.', correct: false }
      - { value: '`method_aware_redirect: true`; 303 for temporary, 307 for permanent.', correct: false }
      - { value: '`followMethod: true`; 307 for temporary, 301 for permanent.', correct: false }
    help: |
      Setting `keepRequestMethod: true` uses HTTP 307 (Temporary Redirect) for temporary redirects and 308 (Permanent Redirect) for permanent redirects, preserving the HTTP method.
      https://symfony.com/doc/current/routing.html#redirecting-routes

  -
    question: >
      What is the purpose of the `_controller` special route parameter in Symfony?
    answers:
      - { value: 'This parameter is used to determine which controller and action is executed when the route is matched.', correct: true }
      - { value: 'It defines the default controller to use if no other controller is specified.', correct: false }
      - { value: 'It holds the fully qualified class name of the current controller.', correct: false }
      - { value: 'It's used for injecting services into the controller.', correct: false }
    help: |
      The `_controller` parameter is fundamental for Symfony's routing, directly mapping a matched route to its executable controller and method.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes

  -
    question: >
      What is the primary function of the `_format` special route parameter?
    answers:
      - { value: 'The matched value is used to set the "request format" of the Request object, influencing the Content-Type of the response.', correct: true }
      - { value: 'It defines the default response format (e.g., HTML, JSON) for a route.', correct: false }
      - { value: 'It specifies the file extension allowed for the URL.', correct: false }
      - { value: 'It's used for content negotiation to determine the best format.', correct: false }
    help: |
      The `_format` parameter is crucial for content negotiation, allowing Symfony to set the request format and subsequently the response's Content-Type.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes

  -
    question: >
      How does the `_locale` special route parameter influence a Symfony request?
    answers:
      - { value: 'It is used to set the locale on the Request object.', correct: true }
      - { value: 'It automatically translates the route path based on the user''s browser language.', correct: false }
      - { value: 'It determines the default language for all generated URLs.', correct: false }
      - { value: 'It forces the application to use a specific translation domain.', correct: false }
    help: |
      The `_locale` parameter directly sets the locale for the current request, affecting translations and other locale-dependent features.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes

  -
    question: >
      How do you mark a route as 'stateless' using PHP attributes to prevent session usage during request matching?
    answers:
      - { value: '`#[Route('/', name: 'homepage', stateless: true)]`', correct: true }
      - { value: '`#[Route('/', name: 'homepage', session_free: true)]`', correct: false }
      - { value: '`#[Route('/', name: 'homepage', options: { stateless: true })]`', correct: false }
      - { value: '`#[Route('/', name: 'homepage', no_session: true)]`', correct: false }
    help: |
      The `stateless` option in the `#[Route]` attribute prevents the session from being started or used when matching that route, which can improve caching.
      https://symfony.com/doc/current/routing.html#stateless-routes

  -
    question: |
      In YAML, how do you configure a route to be stateless?
    answers:
      - { value: '''homepage:
          controller: App\\Controller\\MainController::homepage
          path: /
          stateless: true''', correct: true }
      - { value: '''homepage:
          controller: App\\Controller\\MainController::homepage
          path: /
          session_management: false''', correct: false }
      - { value: '''homepage:
          controller: App\\Controller\\MainController::homepage
          path: /
          options: { stateless: true }''', correct: false }
      - { value: '''homepage:
          controller: App\\Controller\\MainController::homepage
          path: /
          no_session: true''', correct: false }
    help: |
      The `stateless` key in a YAML route definition is used to mark a route as stateless.
      https://symfony.com/doc/current/routing.html#stateless-routes

  -
    question: >
      How do you define a route `/` named `mobile_homepage` that only matches the host `m.example.com` using PHP attributes?
    answers:
      - { value: '`#[Route('/', name: 'mobile_homepage', host: 'm.example.com')]`', correct: true }
      - { value: '`#[Route('/', name: 'mobile_homepage', domain: 'm.example.com')]`', correct: false }
      - { value: '`#[Route('/', name: 'mobile_homepage', requirements: ['_host' => 'm.example.com'])]`', correct: false }
      - { value: '`#[Route('/', name: 'mobile_homepage', hostname: 'm.example.com')]`', correct: false }
    help: |
      The `host` option in the `#[Route]` attribute allows you to specify a hostname that the route must match.
      https://symfony.com/doc/current/routing.html#domain-name-matching

  -
    question: |
      In YAML, how would you define a route for `/` that matches `*.example.com` and sets the subdomain as a parameter, with a default of 'm' and a requirement for 'm|mobile'?
    answers:
      - { value: '''mobile_homepage:
          path: /
          host: "{subdomain}.example.com"
          controller: App\\Controller\\MainController::mobileHomepage
          defaults:
            subdomain: m
          requirements:
            subdomain: m|mobile''', correct: true }
      - { value: '''mobile_homepage:
          path: /
          domain: "{subdomain}.example.com"
          defaults: { subdomain: m }
          requirements: { subdomain: m|mobile }''', correct: false }
      - { value: '''mobile_homepage:
          path: /
          host: "*.example.com"
          params: { subdomain: m }
          constraints: { subdomain: "m|mobile" }''', correct: false }
      - { value: '''mobile_homepage:
          path: /
          host: "{subdomain}.example.com"
          subdomain_default: m
          subdomain_regex: "m|mobile"''', correct: false }
    help: |
      Host patterns can include parameters, which can then have defaults and requirements defined just like path parameters.
      https://symfony.com/doc/current/routing.html#domain-name-matching

  -
    question: |
      How can you import routes from `src/Controller/` and apply host-based routing for different locales (e.g., `www.example.com` for 'en' and `www.example.nl` for 'nl') using the PHP routing configurator?
    answers:
      - { value: '''$routes->import('../../src/Controller/', 'attribute')
          ->host([
              'en' => 'www.example.com',
              'nl' => 'www.example.nl',
          ]);''', correct: true }
      - { value: '''$routes->import('../../src/Controller/', 'attribute')
          ->setHosts(['en' => 'www.example.com', 'nl' => 'www.example.nl']);''', correct: false }
      - { value: '''$routes->addImport('../../src/Controller/', 'attribute', ['host_en' => 'www.example.com', 'host_nl' => 'www.example.nl']);''', correct: false }
      - { value: '''$routes->import('../../src/Controller/', 'attribute')
          ->localeHosts(['en' => 'www.example.com', 'nl' => 'www.example.nl']);''', correct: false }
    help: |
      The `host()` method on the imported route collection allows defining locale-specific hosts for imported routes.
      https://symfony.com/doc/current/routing.html#host-based-routing-for-imported-routes

  -
    question: |
      How do you add a condition to a route using PHP attributes that only matches GET or HEAD requests and when the User-Agent contains 'firefox'?
    answers:
      - { value: '`#[Route('/contact', name: 'contact', condition: "context.getMethod() in ['GET', 'HEAD'] and request.headers.get('User-Agent') matches '/firefox/i'")]`', correct: true }
      - { value: '`#[Route('/contact', name: 'contact', methods: ['GET', 'HEAD'], user_agent: '/firefox/i')]`', correct: false }
      - { value: '`#[Route('/contact', name: 'contact', when: "method in ['GET', 'HEAD'] and user_agent matches '/firefox/i'")]`', correct: false }
      - { value: '`#[Route('/contact', name: 'contact', expression: "request.isMethod('GET') or request.isMethod('HEAD') and request.headers.get('User-Agent') matches '/firefox/i'")]`', correct: false }
    help: |
      The `condition` option accepts an Expression Language string to define complex matching logic based on the request context.
      https://symfony.com/doc/current/routing.html#conditional-request-matching

  -
    question: |
      In YAML, how do you define a route condition that checks if a route parameter `id` is less than 1000?
    answers:
      - { value: '''post_show:
          path: /posts/{id}
          controller: App\\Controller\\DefaultController::showPost
          condition: "params[''id''] < 1000"''', correct: true }
      - { value: '''post_show:
          path: /posts/{id}
          controller: App\\Controller\\DefaultController::showPost
          requirements: { id: "<1000" }''', correct: false }
      - { value: '''post_show:
          path: /posts/{id}
          controller: App\\Controller\\DefaultController::showPost
          when: "id < 1000"''', correct: false }
      - { value: '''post_show:
          path: /posts/{id}
          controller: App\\Controller\\DefaultController::showPost
          expression: "params.id < 1000"''', correct: false }
    help: |
      The `condition` key in YAML allows using Expression Language, where `params['id']` accesses route parameters.
      https://symfony.com/doc/current/routing.html#conditional-request-matching

  -
    question: >
      Which of the following variables are available for use within Symfony's Expression Language for routing conditions?
    answers:
      - { value: '`context`', correct: true }
      - { value: '`request`', correct: true }
      - { value: '`params`', correct: true }
      - { value: '`session`', correct: false }
      - { value: '`user`', correct: false }
    help: |
      The `context`, `request`, and `params` variables provide access to the `RequestContext`, `Request` object, and matched route parameters, respectively.
      https://symfony.com/doc/current/routing.html#expression-language-variables-and-functions

  -
    question: >
      Which function can be used in Symfony's routing Expression Language to retrieve the value of an environment variable?
    answers:
      - { value: '`env(string $name)`', correct: true }
      - { value: '`getenv(string $name)`', correct: false }
      - { value: '`parameter(string $name)`', correct: false }
      - { value: '`config(string $name)`', correct: false }
    help: |
      The `env()` function allows accessing environment variables within routing conditions.
      https://symfony.com/doc/current/routing.html#expression-language-variables-and-functions

  -
    question: >
      How do you restrict a route `/contact` to only accept GET and POST HTTP methods using PHP attributes?
    answers:
      - { value: '`#[Route('/contact', methods: ['GET', 'POST'])]`', correct: true }
      - { value: '`#[Route('/contact', allow_methods: ['GET', 'POST'])]`', correct: false }
      - { value: '`#[Route('/contact', http_methods: ['GET', 'POST'])]`', correct: false }
      - { value: '`#[Route('/contact', verbs: ['GET', 'POST'])]`', correct: false }
    help: |
      The `methods` option in the `#[Route]` attribute specifies the allowed HTTP methods for a route.
      https://symfony.com/doc/current/routing.html#http-methods

  -
    question: |
      In YAML, how do you specify that a route `/contact` should only respond to GET and POST requests?
    answers:
      - { value: '''contact:
          path: /contact
          controller: App\\Controller\\DefaultController::contact
          methods: [GET, POST]''', correct: true }
      - { value: '''contact:
          path: /contact
          controller: App\\Controller\\DefaultController::contact
          http_methods: [GET, POST]''', correct: false }
      - { value: '''contact:
          path: /contact
          controller: App\\Controller\\DefaultController::contact
          allow_methods: [GET, POST]''', correct: false }
      - { value: '''contact:
          path: /contact
          controller: App\\Controller\\DefaultController::contact
          request_methods: [GET, POST]''', correct: false }
    help: |
      The `methods` key in a YAML route definition is used to restrict the route to specific HTTP methods.
      https://symfony.com/doc/current/routing.html#http-methods

  -
    question: |
      How can you define a route named `about_us` with different paths for English (`/about-us`) and Dutch (`/over-ons`) using PHP attributes?
    answers:
      - { value: '`#[Route(path: [''en'' => '/about-us', ''nl'' => '/over-ons'], name: 'about_us')]`', correct: true }
      - { value: '`#[Route('/about-us', name: 'about_us', locale: 'en')] #[Route('/over-ons', name: 'about_us', locale: 'nl')]`', correct: false }
      - { value: '`#[LocalizedRoute(name: 'about_us', en: '/about-us', nl: '/over-ons')]`', correct: false }
      - { value: '`#[Route(path_en: '/about-us', path_nl: '/over-ons', name: 'about_us')]`', correct: false }
    help: |
      The `path` option in the `#[Route]` attribute can accept an array mapping locales to their respective paths.
      https://symfony.com/doc/current/routing.html#defining-localized-routes

  -
    question: |
      In YAML, how do you define a route `about_us` that has different URL paths for 'en' and 'nl' locales?
    answers:
      - { value: '''about_us:
          path:
            en: /about-us
            nl: /over-ons
          controller: App\\Controller\\CompanyController::about''', correct: true }
      - { value: '''about_us:
          en_path: /about-us
          nl_path: /over-ons
          controller: App\\Controller\\CompanyController::about''', correct: false }
      - { value: '''about_us:
          paths:
            - { locale: en, path: /about-us }
            - { locale: nl, path: /over-ons }
          controller: App\\Controller\\CompanyController::about''', correct: false }
      - { value: '''about_us:
          path: /about-us
          path_nl: /over-ons
          controller: App\\Controller\\CompanyController::about''', correct: false }
    help: |
      The `path` key in YAML can be an associative array mapping locales to their specific URL paths for localized routes.
      https://symfony.com/doc/current/routing.html#defining-localized-routes

  -
    question: |
      Using the PHP routing configurator, how can you apply locale-specific URL prefixes to imported routes, where English has no prefix and Dutch has `/nl`?
    answers:
      - { value: '''$routes->import('../../src/Controller/', 'attribute')
          ->prefix([
              'en' => '',
              'nl' => '/nl',
          ]);''', correct: true }
      - { value: '''$routes->import('../../src/Controller/', 'attribute')
          ->setLocalePrefixes(['en' => '', 'nl' => '/nl']);''', correct: false }
      - { value: '''$routes->import('../../src/Controller/', 'attribute')
          ->addPrefixes(['en' => '', 'nl' => '/nl']);''', correct: false }
      - { value: '''$routes->import('../../src/Controller/', 'attribute')
          ->withLocalePrefixes(['en' => '', 'nl' => '/nl']);''', correct: false }
    help: |
      The `prefix()` method on the imported route collection can take an array mapping locales to their prefixes.
      https://symfony.com/doc/current/routing.html#prefixing-routes-based-on-locale

  -
    question: >
      Which command-line tool is used to list all registered routes in a Symfony application?
    answers:
      - { value: '`php bin/console debug:router`', correct: true }
      - { value: '`php bin/console router:list`', correct: false }
      - { value: '`php bin/console routes:show`', correct: false }
      - { value: '`php bin/console app:routes`', correct: false }
    help: |
      The `debug:router` command provides a comprehensive list of all routes, their methods, schemes, hosts, and paths.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: >
      How can you use the Symfony console to determine which route matches a specific URL, for example, `/lucky/number/8`?
    answers:
      - { value: '`php bin/console router:match /lucky/number/8`', correct: true }
      - { value: '`php bin/console debug:url /lucky/number/8`', correct: false }
      - { value: '`php bin/console route:find /lucky/number/8`', correct: false }
      - { value: '`php bin/console match:route /lucky/number/8`', correct: false }
    help: |
      The `router:match` command is specifically designed to show which route matches a given URL.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: >
      Which `debug:router` option allows you to display only routes that match a specific HTTP method, such as GET?
    answers:
      - { value: '`--method=GET`', correct: true }
      - { value: '`--http-method=GET`', correct: false }
      - { value: '`--filter-method=GET`', correct: false }
      - { value: '`--verbs=GET`', correct: false }
    help: |
      The `--method` option filters the displayed routes by the specified HTTP method.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: >
      How do you use the `debug:router` command to also display all defined route aliases?
    answers:
      - { value: '`--show-aliases`', correct: true }
      - { value: '`--with-aliases`', correct: false }
      - { value: '`--display-aliases`', correct: false }
      - { value: '`--aliases`', correct: false }
    help: |
      The `--show-aliases` option expands the `debug:router` output to include route aliases.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: >
      How can you display detailed information for a specific route, for example, `app_lucky_number`, using the `debug:router` command?
    answers:
      - { value: '`php bin/console debug:router app_lucky_number`', correct: true }
      - { value: '`php bin/console router:info app_lucky_number`', correct: false }
      - { value: '`php bin/console debug:route app_lucky_number`', correct: false }
      - { value: '`php bin/console router:details app_lucky_number`', correct: false }
    help: |
      Passing the route name as an argument to `debug:router` displays its detailed properties.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: >
      How do you create an alias named `product_details` for an existing route named `product_show` using PHP attributes?
    answers:
      - { value: '`#[Route('/product/{id}', name: 'product_show', alias: ['product_details'])]`', correct: true }
      - { value: '`#[Route('/product/{id}', name: 'product_show')] #[RouteAlias('product_details', route: 'product_show')]`', correct: false }
      - { value: '`#[Route('/product/{id}', name: 'product_show', aliases: ['product_details'])]`', correct: false }
      - { value: '`#[Route('/product/{id}', name: 'product_show', alias_of: 'product_details')]`', correct: false }
    help: |
      The `alias` option in the `#[Route]` attribute allows you to assign alternate names to a route.
      https://symfony.com/doc/current/routing.html#creating-route-aliases

  -
    question: |
      In YAML, how do you define `product_details` as an alias for the `product_show` route?
    answers:
      - { value: '''product_details:
          alias: product_show''', correct: true }
      - { value: '''product_details:
          target: product_show''', correct: false }
      - { value: '''product_details:
          link: product_show''', correct: false }
      - { value: '''product_details:
          route_alias: product_show''', correct: false }
    help: |
      The `alias` key in a YAML route definition points to the name of an existing route, effectively creating an alias.
      https://symfony.com/doc/current/routing.html#creating-route-aliases

  -
    question: |
      How do you deprecate a route alias named `product_show` in favor of `product_details` in YAML, providing a generic deprecation message?
    answers:
      - { value: '''product_details:
          path: /product/{id}
          controller: App\\Controller\\ProductController::show
        product_show:
          alias: product_details
          deprecated:
            package: 'acme/package'
            version: '1.2'''', correct: true }
      - { value: '''product_show:
          alias: product_details
          deprecation_message: 'The "product_show" route alias is deprecated.'''', correct: false }
      - { value: '''product_show:
          alias: product_details
          options: { deprecated: true }''', correct: false }
      - { value: '''product_show:
          alias: product_details
          deprecate: true''', correct: false }
    help: |
      To deprecate an alias, the `deprecated` key is added to the alias definition, specifying the package and version.
      https://symfony.com/doc/current/routing.html#deprecating-route-aliases

  -
    question: |
      When two routes have overlapping patterns (e.g., `/blog/{slug}` and `/blog/list`), how can you ensure that the more specific route `/blog/list` is matched first using PHP attributes?
    answers:
      - { value: 'Set a higher `priority` value for `/blog/list`, e.g., `#[Route('/blog/list', name: 'blog_list', priority: 2)]`', correct: true }
      - { value: 'Define `/blog/list` before `/blog/{slug}` in the routing configuration.', correct: false }
      - { value: 'Add a `requirements` constraint to `/blog/{slug}` to exclude 'list'.', correct: false }
      - { value: 'Use a `#[SpecificRoute]` attribute for `/blog/list`.', correct: false }
    help: |
      Routes are matched in the order they are defined unless a `priority` is explicitly set. A higher priority value means the route is matched earlier.
      https://symfony.com/doc/current/routing.html#controlling-route-matching-priority

  -
    question: >
      If you have a PHP backed enum `OrderStatusEnum` and a route parameter `{status}`, how does Symfony handle the conversion of the URL segment to the enum instance in the controller method?
    answers:
      - { value: 'Symfony automatically converts the scalar value from the URL to the corresponding enum case.', correct: true }
      - { value: 'You must manually convert the string parameter to an enum instance in the controller.', correct: false }
      - { value: 'Symfony requires a custom ParamConverter for enum parameters.', correct: false }
      - { value: 'Enum parameters are not directly supported in Symfony routes.', correct: false }
    help: |
      Symfony automatically handles the conversion of PHP backed enumerations when used as route parameters.
      https://symfony.com/doc/current/routing.html#route-parameters-with-php-backed-enums

  -
    question: >
      What error message would Symfony typically display if you try to generate a URL for a route like `blog_show` (`/blog/{slug}`) without providing the `slug` parameter?
    answers:
      - { value: '`Some mandatory parameters are missing ("slug") to generate a URL for route "blog_show".`', correct: true }
      - { value: '`Route "blog_show" requires parameter "slug" to be set.`', correct: false }
      - { value: '`Missing argument "slug" for route "blog_show".`', correct: false }
      - { value: '`Cannot generate URL for route "blog_show": parameter "slug" is null.`', correct: false }
    help: |
      This specific error message indicates that a required parameter for URL generation was not provided.
      https://symfony.com/doc/current/routing.html#troubleshooting-routing

  -
    question: >
      Which of the following are valid ways to configure routes in Symfony 7?
    answers:
      - { value: 'PHP attributes', correct: true }
      - { value: 'YAML files', correct: true }
      - { value: 'XML files', correct: false }
      - { value: 'JSON files', correct: false }
      - { value: 'PHP files (using RoutingConfigurator)', correct: true }
    help: |
      Symfony 7 supports route configuration via PHP attributes, YAML, and PHP files using the RoutingConfigurator. XML is also supported but not part of the strict constraints for this question set.
      https://symfony.com/doc/current/routing.html#loading-routes

  -
    question: >
      When defining a route with a parameter, e.g., `/articles/{id}`, what is the default behavior if no requirements are specified for `id`?
    answers:
      - { value: 'The parameter will match any character except a slash (`/`).', correct: true }
      - { value: 'The parameter will only match digits.', correct: false }
      - { value: 'The parameter is optional by default.', correct: false }
      - { value: 'The parameter must be a string of at least one character.', correct: false }
    help: |
      By default, route parameters are greedy and match any character until the next `/` or the end of the URL.
      https://symfony.com/doc/current/routing.html#route-parameters

  -
    question: >
      What is the purpose of the `_fragment` special route parameter?
    answers:
      - { value: 'Used to set the fragment identifier, which is the optional last part of a URL that starts with a # character.', correct: true }
      - { value: 'It defines a part of the URL that is ignored by the router.', correct: false }
      - { value: 'It specifies a section of a page to load via AJAX.', correct: false }
      - { value: 'It is used for internal routing to a specific HTML element.', correct: false }
    help: |
      The `_fragment` parameter corresponds to the part of a URL after the `#` symbol, commonly used for in-page navigation.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes

  -
    question: >
      Which of the following is the correct way to inject the `UrlGeneratorInterface` into a Symfony service?
    answers:
      - { value: '''public function __construct(
          private UrlGeneratorInterface $urlGenerator,
      ) {}''', correct: true }
      - { value: '''#[Inject('router.url_generator')]
      private $urlGenerator;''', correct: false }
      - { value: '''public function __construct() {
          $this->urlGenerator = new UrlGenerator();
      }''', correct: false }
      - { value: '''public function setUrlGenerator(UrlGeneratorInterface $urlGenerator) {
          $this->urlGenerator = $urlGenerator;
      }''', correct: false }
    help: |
      Symfony's autowiring automatically injects the `UrlGeneratorInterface` when type-hinted in a constructor.
      https://symfony.com/doc/current/routing.html#generating-urls-in-services

  -
    question: >
      What happens if multiple routes match a given URL in Symfony?
    answers:
      - { value: 'The route with the highest `priority` is matched first.', correct: true }
      - { value: 'The first route defined in the configuration files is matched.', correct: false }
      - { value: 'Symfony throws an `AmbiguousRouteException`.', correct: false }
      - { value: 'The route with the most specific pattern is matched.', correct: false }
    help: |
      Symfony uses a priority system, where routes with higher explicit priority values are matched before others. If priorities are equal, the order of definition can matter.
      https://symfony.com/doc/current/routing.html#controlling-route-matching-priority

  -
    question: >
      Consider the following PHP attribute route definition:
      ```php
      #[Route('/products/{id}', name: 'product_show', defaults: ['id' => 1])]
      public function show(int $id): Response { /* ... */ }
      ```
      What URL would be generated for `product_show` if no `id` parameter is provided?
    answers:
      - { value: '`/products/1`', correct: true }
      - { value: '`/products`', correct: false }
      - { value: 'An error would occur because `id` is required.', correct: false }
      - { value: '`/products/null`', correct: false }
    help: |
      When a route parameter has a default value, it becomes optional for URL generation. If not provided, the default is used.
      https://symfony.com/doc/current/routing.html#defining-defaults-for-parameters

  -
    question: >
      Which of the following is NOT a valid type for a `resource` when importing routes in Symfony?
    answers:
      - { value: '`service`', correct: false }
      - { value: '`yaml`', correct: false }
      - { value: '`php`', correct: false }
      - { value: '`json`', correct: true }
      - { value: '`attribute`', correct: false }
    help: |
      Symfony supports importing routes from YAML, XML, PHP files (using RoutingConfigurator), and PHP attributes. JSON is not a standard routing configuration format.
      https://symfony.com/doc/current/routing.html#loading-routes

  -
    question: >
      What is the primary benefit of using `#[AsRoutingConditionService]` or `routing.condition_service` tag for a service in Symfony's Expression Language for routing?
    answers:
      - { value: 'It allows the service to be accessed via the `service()` function in routing conditions.', correct: true }
      - { value: 'It automatically injects the service into all controllers.', correct: false }
      - { value: 'It marks the service as a routing-specific dependency.', correct: false }
      - { value: 'It enables autowiring for the service within routing contexts.', correct: false }
    help: |
      Services tagged with `#[AsRoutingConditionService]` or `routing.condition_service` can be retrieved and used within Expression Language conditions via the `service()` function.
      https://symfony.com/doc/current/routing.html#expression-language-variables-and-functions

  -
    question: >
      What is the correct way to check if a route exists in Symfony without causing performance issues by regenerating the routing cache?
    answers:
      - { value: 'Attempt to generate the URL and catch `Symfony\Component\Routing\Exception\RouteNotFoundException`.', correct: true }
      - { value: 'Inspect the `RouteCollection` directly using `get()` method.', correct: false }
      - { value: 'Use `RouterInterface::hasRoute($routeName)` method.', correct: false }
      - { value: 'Call `php bin/console debug:router $routeName` and check its output.', correct: false }
    help: |
      Generating a URL and catching `RouteNotFoundException` is the recommended way to check for route existence, as it avoids unnecessary routing cache regeneration.
      https://symfony.com/doc/current/routing.html#checking-if-a-route-exists

  -
    question: |
      Given the following YAML route definition:
      ```yaml
      article_search:
        path:        /articles/{_locale}/search.{_format}
        controller:  App\Controller\ArticleController::search
        locale:      en
        format:      html
        requirements:
            _locale: en|fr
            _format: html|xml
      ```
      Which of the following URLs would successfully match this route?
    answers:
      - { value: '`/articles/en/search.html`', correct: true }
      - { value: '`/articles/fr/search.xml`', correct: true }
      - { value: '`/articles/de/search.json`', correct: false }
      - { value: '`/articles/en/search`', correct: false }
      - { value: '`/articles/fr/search.html`', correct: true }
    help: |
      The route requires `_locale` to be 'en' or 'fr' and `_format` to be 'html' or 'xml'. The default values are 'en' and 'html' but are overridden by the requirements.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes

  -
    question: >
      What is the primary benefit of using route aliases in Symfony?
    answers:
      - { value: 'To provide backward compatibility when route names change.', correct: true }
      - { value: 'To create shorter, more memorable route names.', correct: false }
      - { value: 'To define multiple paths for the same controller action.', correct: false }
      - { value: 'To enable dynamic routing based on user roles.', correct: false }
    help: |
      Route aliases are particularly useful for maintaining compatibility when refactoring route names, allowing old names to still work.
      https://symfony.com/doc/current/routing.html#creating-route-aliases

  -
    question: >
      When defining a route using PHP attributes, what is the significance of placing the `#[Route]` attribute on the controller class itself, rather than on individual methods?
    answers:
      - { value: 'It applies a common URL prefix, name prefix, and requirements to all routes defined within that controller.', correct: true }
      - { value: 'It makes all methods in the controller callable as routes without individual `#[Route]` attributes.', correct: false }
      - { value: 'It automatically generates a default route for the controller''s index method.', correct: false }
      - { value: 'It restricts the controller to only handle requests matching the class-level route.', correct: false }
    help: |
      A class-level `#[Route]` attribute acts as a group definition, applying shared settings to all method-level routes within that controller.
      https://symfony.com/doc/current/routing.html#defining-route-groups-with-php-attributes

  -
    question: >
      What is the behavior of a route parameter defined as `{param}` if it is not present in the incoming URL, and no default value is specified?
    answers:
      - { value: 'The route will not match the URL, resulting in a 404 Not Found error.', correct: true }
      - { value: 'The parameter will be `null` in the controller method.', correct: false }
      - { value: 'Symfony will attempt to guess the parameter value from query string.', correct: false }
      - { value: 'An exception will be thrown during route compilation.', correct: false }
    help: |
      Route parameters without default values are considered mandatory. If they are missing from the URL, the route will not match.
      https://symfony.com/doc/current/routing.html#route-parameters

  -
    question: >
      Which of the following is a valid way to define a route that accepts both `GET` and `HEAD` HTTP methods in YAML?
    answers:
      - { value: '''methods: [GET, HEAD]''', correct: true }
      - { value: '''method: [GET, HEAD]''', correct: false }
      - { value: '''http_methods: GET|HEAD''', correct: false }
      - { value: '''verbs: ['GET', 'HEAD']''', correct: false }
    help: |
      The `methods` key in YAML accepts a list of HTTP methods that the route should respond to.
      https://symfony.com/doc/current/routing.html#http-methods

  -
    question: >
      What is the purpose of the `RoutingConfigurator` in Symfony's PHP routing files?
    answers:
      - { value: 'It provides a fluent interface for defining routes programmatically.', correct: true }
      - { value: 'It is a service that automatically configures routes based on conventions.', correct: false }
      - { value: 'It is used to load routes from external configuration files.', correct: false }
      - { value: 'It compiles the routing definitions into an optimized cache.', correct: false }
    help: |
      The `RoutingConfigurator` simplifies route definition in PHP files by offering a chainable API.
      https://symfony.com/doc/current/routing.html#defining-routes-in-php-files

  -
    question: >
      When using `router:match` command, what does the output typically include for a matched route?
    answers:
      - { value: 'The route name.', correct: true }
      - { value: 'The matched controller and action.', correct: true }
      - { value: 'The matched route parameters.', correct: true }
      - { value: 'The HTTP method of the matched route.', correct: true }
      - { value: 'The full URL of the matched route.', correct: false }
    help: |
      The `router:match` command provides details about the matched route, including its name, controller, and parameters.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: >
      Which of the following correctly describes how Symfony handles route requirements?
    answers:
      - { value: 'They are used to validate route parameters against regular expressions.', correct: true }
      - { value: 'They define the minimum and maximum length of a route parameter.', correct: false }
      - { value: 'They are only applied during URL generation, not during URL matching.', correct: false }
      - { value: 'They specify the data type of the route parameter (e.g., string, integer).', correct: false }
    help: |
      Route requirements are crucial for ensuring that route parameters conform to expected patterns, which helps in disambiguating routes and validating input during URL matching.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      What is the impact of setting `trailing_slash_on_root: false` when importing routes with a prefix in YAML?
    answers:
      - { value: 'An imported route with an empty URL will become `/prefix` instead of `/prefix/`.', correct: true }
      - { value: 'It removes all trailing slashes from generated URLs for imported routes.', correct: false }
      - { value: 'It forces all imported routes to have a trailing slash.', correct: false }
      - { value: 'It prevents the router from matching URLs with trailing slashes.', correct: false }
    help: |
      The `trailing_slash_on_root` option specifically controls whether a trailing slash is added to the root URL of an imported group when the imported route's path is empty.
      https://symfony.com/doc/current/routing.html#defining-route-groups-in-yaml

  -
    question: >
      When defining a route using PHP attributes, what is the default value for the `priority` option if not explicitly set?
    answers:
      - { value: '`0`', correct: true }
      - { value: '`1`', correct: false }
      - { value: '`null`', correct: false }
      - { value: '`auto`', correct: false }
    help: |
      The default priority for routes is `0`. Routes with higher priority values are matched first.
      https://symfony.com/doc/current/routing.html#controlling-route-matching-priority

  -
    question: >
      What is the purpose of the `UrlMatcher` class in the Symfony Routing component?
    answers:
      - { value: 'To match incoming request paths against defined routes and extract parameters.', correct: true }
      - { value: 'To generate URLs from route names and parameters.', correct: false }
      - { value: 'To load route definitions from various sources.', correct: false }
      - { value: 'To validate the syntax of route definitions.', correct: false }
    help: |
      The `UrlMatcher` is responsible for the core task of taking a URL path and finding the corresponding route.
      https://symfony.com/doc/current/create_framework/routing.html#matching-urls

  -
    question: >
      Which of the following is a valid way to force all routes imported from a specific resource to use HTTPS?
    answers:
      - { value: 'In YAML: `schemes: [https]` under the import.', correct: true }
      - { value: 'In PHP attributes: `#[Route(schemes: ['https'])]` on the controller class.', correct: false }
      - { value: 'In PHP configurator: `->setSchemes(['https'])` on the import.', correct: true }
      - { value: 'In XML: `schemes="https"` on the `<import>` tag.', correct: true }
    help: |
      The `schemes` option can be applied to route imports in YAML, XML, and PHP configurator to enforce HTTPS for all imported routes.
      https://symfony.com/doc/current/routing.html#forcing-https-for-a-collection-of-routes

  -
    question: >
      What is the significance of the `_route_params` attribute available on the `Request` object in a Symfony controller?
    answers:
      - { value: 'It contains an array of all parameters matched by the current route.', correct: true }
      - { value: 'It stores all query string parameters from the request.', correct: false }
      - { value: 'It lists all optional parameters for the current route.', correct: false }
      - { value: 'It provides access to the default values of route parameters.', correct: false }
    help: |
      The `_route_params` attribute on the `Request` object provides direct access to the parameters that were extracted from the URL by the router.
      https://symfony.com/doc/current/routing.html#accessing-route-name-and-parameters-from-the-request-object

  -
    question: >
      What happens if a controller method requires an argument (e.g., `$slug`) but the matched route's path does not define a corresponding parameter?
    answers:
      - { value: 'Symfony will throw an error indicating that the controller requires a value for the argument.', correct: true }
      - { value: 'The argument will be automatically set to `null`.', correct: false }
      - { value: 'Symfony will attempt to find the value in the request query parameters.', correct: false }
      - { value: 'The route will still match, but the argument will be an empty string.', correct: false }
    help: |
      If a controller method expects an argument that is not provided by the matched route, Symfony will throw a `RuntimeException` with a clear message.
      https://symfony.com/doc/current/routing.html#troubleshooting-routing

  -
    question: >
      Which of the following is a key responsibility of the `Symfony\Component\Routing\RouteCollection` class?
    answers:
      - { value: 'To hold a collection of `Route` objects.', correct: true }
      - { value: 'To match URLs against defined routes.', correct: false }
      - { value: 'To generate URLs from route names.', correct: false }
      - { value: 'To load routes from configuration files.', correct: false }
    help: |
      The `RouteCollection` is the central container for all route definitions in a Symfony application.
      https://symfony.com/doc/current/routing/custom_route_loader.html#the-routing-component-api

  -
    question: >
      When defining a route in PHP using the `RoutingConfigurator`, how do you specify the controller for the route?
    answers:
      - { value: '`->controller([ControllerClass::class, 'methodName'])`', correct: true }
      - { value: '`->controller('ControllerClass::methodName')`', correct: true }
      - { value: '`->action([ControllerClass::class, 'methodName'])`', correct: false }
      - { value: '`->call('ControllerClass::methodName')`', correct: false }
    help: |
      The `controller()` method of the `RoutingConfigurator` accepts either an array `[ControllerClass::class, 'methodName']` or a string `'ControllerClass::methodName'`.
      https://symfony.com/doc/current/routing.html#defining-routes-in-php-files

  -
    question: >
      What is the primary purpose of the `Symfony\Component\Routing\RequestContext` class?
    answers:
      - { value: 'To hold fundamental information about the current request for route matching and URL generation.', correct: true }
      - { value: 'To manage session data for the current request.', correct: false }
      - { value: 'To store user authentication details.', correct: false }
      - { value: 'To provide access to environment variables.', correct: false }
    help: |
      The `RequestContext` encapsulates information like the HTTP method, host, scheme, and base URL, which are essential for the router to function.
      https://symfony.com/doc/current/create_framework/routing.html#matching-urls

  -
    question: >
      If a route is defined with a parameter like `{page<\\d+>}` and a user attempts to access `/blog/abc`, what will be the outcome?
    answers:
      - { value: 'The route will not match, resulting in a 404 Not Found error.', correct: true }
      - { value: 'The `page` parameter will be `null` in the controller.', correct: false }
      - { value: 'Symfony will attempt to cast "abc" to an integer, likely resulting in `0`.', correct: false }
      - { value: 'A validation error will be thrown before the controller is executed.', correct: false }
    help: |
      Route requirements are enforced during the matching process. If the URL segment does not satisfy the regex, the route will not be considered a match.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      When generating a URL using `UrlGeneratorInterface::generate()`, what is the default reference type if not explicitly specified?
    answers:
      - { value: '`UrlGeneratorInterface::ABSOLUTE_PATH` (e.g., `/path/to/resource`)', correct: true }
      - { value: '`UrlGeneratorInterface::ABSOLUTE_URL` (e.g., `http://example.com/path/to/resource`)', correct: false }
      - { value: '`UrlGeneratorInterface::RELATIVE_PATH` (e.g., `../path/to/resource`)', correct: false }
      - { value: '`UrlGeneratorInterface::NETWORK_PATH` (e.g., `//example.com/path/to/resource`)', correct: false }
    help: |
      By default, `generate()` creates an absolute path, which is relative to the web root.
      https://symfony.com/doc/current/routing.html#generating-urls-in-services

  -
    question: >
      What is the main advantage of defining routes using PHP attributes directly in controllers?
    answers:
      - { value: 'Routes are defined alongside the code that handles them, improving readability and maintainability.', correct: true }
      - { value: 'It eliminates the need for any routing configuration files.', correct: false }
      - { value: 'It provides better performance compared to YAML or XML routing.', correct: false }
      - { value: 'It allows for dynamic route generation at runtime.', correct: false }
    help: |
      Defining routes as attributes keeps the route definition close to the controller logic, making it easier to understand and manage.
      https://symfony.com/doc/current/routing.html#defining-routes-as-php-attributes

  -
    question: >
      Which of the following describes the behavior of a route defined with `methods: [ANY]`?
    answers:
      - { value: 'The route will match any HTTP method.', correct: true }
      - { value: 'The route will only match GET requests if no other method is specified.', correct: false }
      - { value: 'The route will only match methods explicitly defined in the controller.', correct: false }
      - { value: 'The route will throw an error if no specific method is provided.', correct: false }
    help: |
      `ANY` is a special value that indicates the route will match any HTTP method.
      https://symfony.com/doc/current/routing.html#http-methods

  -
    question: >
      What is the purpose of the `exclude` option when importing routes in YAML or PHP configurator?
    answers:
      - { value: 'To specify files or subdirectories that should be ignored during the route import process.', correct: true }
      - { value: 'To define routes that should not be cached by the router.', correct: false }
      - { value: 'To list HTTP methods that are not allowed for the imported routes.', correct: false }
      - { value: 'To exclude certain route parameters from being imported.', correct: false }
    help: |
      The `exclude` option allows fine-grained control over which files are processed when importing routes from a directory, typically used to skip test files or debug controllers.
      https://symfony.com/doc/current/routing.html#importing-routes-with-prefixing-and-requirements-php
      https://symfony.com/doc/current/routing.html#configuring-symfony-route-groups-in-yaml

  -
    question: >
      When using `router:match`, what does `_route` in the output represent?
    answers:
      - { value: 'The name of the matched route.', correct: true }
      - { value: 'The full path of the matched route.', correct: false }
      - { value: 'The controller and method associated with the route.', correct: false }
      - { value: 'The unique ID of the route.', correct: false }
    help: |
      The `_route` attribute (or `Route Name` in `debug:router` output) is the internal name of the matched route.
      https://symfony.com/doc/current/routing.html#router-debugging
      https://symfony.com/doc/current/routing.html#accessing-route-name-and-parameters-from-the-request-object

  -
    question: >
      What is the role of `Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator` in Symfony's routing system?
    answers:
      - { value: 'It provides a programmatic way to define and configure routes in PHP files.', correct: true }
      - { value: 'It is responsible for loading routes from YAML and XML files.', correct: false }
      - { value: 'It acts as a service container for routing-related services.', correct: false }
      - { value: 'It compiles route definitions into machine-readable code for faster matching.', correct: false }
    help: |
      The `RoutingConfigurator` is the entry point for defining routes using PHP code, offering a clean and expressive API.
      https://symfony.com/doc/current/routing.html#defining-routes-in-php-files

  -
    question: >
      What is the primary reason for defining route requirements using regular expressions?
    answers:
      - { value: 'To ensure that route parameters conform to specific patterns and types, preventing invalid URLs from matching.', correct: true }
      - { value: 'To improve the performance of route matching by pre-validating parameters.', correct: false }
      - { value: 'To automatically cast route parameters to the correct PHP data type.', correct: false }
      - { value: 'To make route parameters optional.', correct: false }
    help: |
      Requirements are essential for robust routing, ensuring that only URLs with correctly formatted parameters are matched, and for resolving ambiguities between similar route patterns.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      Which of the following best describes the concept of "host-based routing" in Symfony?
    answers:
      - { value: 'Defining routes that match specific domain names or subdomains.', correct: true }
      - { value: 'Routing requests based on the client''s IP address.', correct: false }
      - { value: 'Serving different content based on the server''s hostname.', correct: false }
      - { value: 'Using the HTTP Host header to determine the appropriate controller.', correct: false }
    help: |
      Host-based routing allows you to define routes that only match when the request's host (domain or subdomain) matches a specified pattern.
      https://symfony.com/doc/current/routing.html#domain-name-matching

  -
    question: >
      What is the effect of setting a default value for a route parameter that is also defined in the path (e.g., `/blog/{page}` with `defaults: { page: 1 }`)?
    answers:
      - { value: 'The parameter becomes optional for URL generation, and the default value is used if not provided.', correct: true }
      - { value: 'The parameter is always required, and the default value is ignored during URL generation.', correct: false }
      - { value: 'The default value is only used if the parameter is explicitly set to `null` in the URL.', correct: false }
      - { value: 'Symfony will throw an error if a default value is provided for a non-optional parameter.', correct: false }
    help: |
      Default values make route parameters optional for URL generation. If the parameter is omitted when generating the URL, the default value is automatically used.
      https://symfony.com/doc/current/routing.html#defining-defaults-for-parameters

  -
    question: >
      How does Symfony determine the order of route matching when multiple routes could potentially match a given URL?
    answers:
      - { value: 'Routes with a higher `priority` value are matched first; otherwise, the order of definition is considered.', correct: true }
      - { value: 'The most specific route (e.g., with more literal segments) is always matched first.', correct: false }
      - { value: 'Routes are matched alphabetically by their name.', correct: false }
      - { value: 'Symfony uses a scoring system based on the number of parameters and requirements.', correct: false }
    help: |
      The `priority` option explicitly controls the matching order. If priorities are equal, the order in which routes are loaded and defined can influence the match.
      https://symfony.com/doc/current/routing.html#controlling-route-matching-priority

  -
    question: >
      What is the primary purpose of the `Symfony\Component\Routing\Exception\RouteNotFoundException`?
    answers:
      - { value: 'It is thrown when attempting to generate a URL for a route that does not exist.', correct: true }
      - { value: 'It indicates that an incoming URL could not be matched to any defined route.', correct: false }
      - { value: 'It signifies that a route parameter is missing during URL generation.', correct: false }
      - { value: 'It is a general exception for all routing-related errors.', correct: false }
    help: |
      `RouteNotFoundException` specifically signals that the router could not find a route with the given name.
      https://symfony.com/doc/current/routing.html#checking-if-a-route-exists

  -
    question: >
      When defining localized routes, what is the default behavior if the `_locale` parameter is not explicitly provided during URL generation?
    answers:
      - { value: 'Symfony uses the current request''s locale.', correct: true }
      - { value: 'Symfony uses the default locale configured in `framework.yaml`.', correct: false }
      - { value: 'An error is thrown because the `_locale` parameter is mandatory for localized routes.', correct: false }
      - { value: 'The URL is generated without a locale segment.', correct: false }
    help: |
      For localized routes, if `_locale` is not explicitly passed to `generateUrl()`, Symfony defaults to the locale of the current request.
      https://symfony.com/doc/current/routing.html#generating-urls-in-controllers

  -
    question: >
      Which of the following is a valid use case for the `condition` option in Symfony routing?
    answers:
      - { value: 'Matching a route only if the request is an AJAX request.', correct: true }
      - { value: 'Restricting access to a route based on user roles.', correct: false }
      - { value: 'Defining a route that is only active during specific hours of the day.', correct: true }
      - { value: 'Changing the controller based on a query parameter value.', correct: true }
    help: |
      The `condition` option uses Expression Language, allowing complex logic based on `context`, `request`, and `params` to determine if a route matches.
      https://symfony.com/doc/current/routing.html#conditional-request-matching

  -
    question: >
      How can you retrieve all available attributes (including routing ones like `_route` and `_route_params`) from the `Request` object in a Symfony controller?
    answers:
      - { value: '`$request->attributes->all()`', correct: true }
      - { value: '`$request->getAttributes()`', correct: false }
      - { value: '`$request->getAll()`', correct: false }
      - { value: '`$request->attributes->toArray()`', correct: false }
    help: |
      The `attributes` property of the `Request` object is an `ParameterBag` instance, and its `all()` method returns all attributes.
      https://symfony.com/doc/current/routing.html#accessing-route-name-and-parameters-from-the-request-object

  -
    question: >
      What is the recommended approach for organizing routing configurations in a large Symfony application?
    answers:
      - { value: 'Splitting routes into multiple smaller files and importing them into a main `routes.yaml` or `routes.php`.', correct: true }
      - { value: 'Defining all routes in a single, large `routes.yaml` file for simplicity.', correct: false }
      - { value: 'Using only PHP attributes and avoiding separate routing files.', correct: false }
      - { value: 'Storing routing definitions directly in the database.', correct: false }
    help: |
      Importing routes from multiple files (e.g., by feature or bundle) improves organization and maintainability in larger applications.
      https://symfony.com/doc/current/routing.html#loading-routes

  -
    question: >
      When defining a route with a dynamic parameter, e.g., `/blog/{slug}`, what is the relationship between the parameter name (`slug`) and the controller method argument?
    answers:
      - { value: 'The parameter name must exactly match the controller method argument name for autowiring to work.', correct: true }
      - { value: 'The parameter name is arbitrary; the order of arguments in the controller method determines the mapping.', correct: false }
      - { value: 'The parameter name must be prefixed with `$` in the route path to match the argument.', correct: false }
      - { value: 'Symfony automatically maps parameters to arguments based on their data type.', correct: false }
    help: |
      For Symfony to automatically inject the route parameter value into the controller method, the parameter name in the route path must match the argument name in the method signature.
      https://symfony.com/doc/current/routing.html#route-parameters

  -
    question: >
      What is the consequence of defining a route with a very broad regular expression (e.g., `.+`) for a parameter without careful consideration of other routes?
    answers:
      - { value: 'It can "eat" more specific routes that appear later in the routing configuration, preventing them from being matched.', correct: true }
      - { value: 'It will cause a performance bottleneck due to complex regex matching.', correct: false }
      - { value: 'It will automatically make the parameter optional.', correct: false }
      - { value: 'It will lead to a security vulnerability by allowing arbitrary input.', correct: false }
    help: |
      Greedy route parameters can inadvertently match URLs intended for other, more specific routes, leading to unexpected routing behavior. This is why `priority` is important.
      https://symfony.com/doc/current/routing.html#controlling-route-matching-priority