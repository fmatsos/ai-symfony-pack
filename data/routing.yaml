category: Routing
questions:
  - question: Which of the following configuration types are officially supported
      for defining routes in Symfony 7?
    answers:
      - value: YAML
        correct: true
      - value: PHP Attributes
        correct: true
      - value: XML
        correct: true
      - value: JSON
        correct: false
      - value: INI
        correct: false
    help: Symfony 7 officially supports defining routes using PHP attributes, YAML,
      XML, and PHP files (using the RoutingConfigurator). JSON and INI are not
      standard routing configuration formats.
  - question: How can you define a basic route in a Symfony 7 controller using PHP
      attributes?
    answers:
      - value: |-
          ```php
          #[Route('/blog', name: 'blog_list')]
          public function list(): Response
          {
              // ...
          }
          ```
        correct: true
      - value: |-
          ```php
          @Route('/blog', name='blog_list')
          public function list(): Response
          {
              // ...
          }
          ```
        correct: false
      - value: |-
          ```php
          /**
           * @Route('/blog', name='blog_list')
           */
          public function list(): Response
          {
              // ...
          }
          ```
        correct: false
      - value: |-
          ```php
          #[Path('/blog', name: 'blog_list')]
          public function list(): Response
          {
              // ...
          }
          ```
        correct: false
    help: In Symfony 7, routes are defined using PHP attributes with the `#[Route]`
      attribute directly above the controller method. The `@Route` annotation
      syntax is deprecated.
  - question: To enable attribute-based routing in Symfony 7, which configuration
      snippet would you typically use in `config/routes/attributes.yaml`?
    answers:
      - value: |-
          ```yaml
          controllers:
              resource:
                  path: ../../src/Controller/
                  namespace: App\\Controller
              type: attribute

          kernel:
              resource: App\\Kernel
              type: attribute
          ```
        correct: true
      - value: |-
          ```yaml
          routes:
              resource: ../../src/Controller/
              type: annotation
          ```
        correct: false
      - value: |-
          ```yaml
          imports:
              - { resource: ../../src/Controller/, type: attributes }
          ```
        correct: false
      - value: |-
          ```yaml
          attributes_loader:
              path: src/Controller/
          ```
        correct: false
    help: "The `resource` and `type: attribute` configuration in YAML tells Symfony
      to load routes defined via PHP attributes within the specified directory
      and namespace."
  - question: |-
      Consider the following Symfony 7 route definition in YAML:

      ```yaml
      blog_list:
          path:       /blog/{page<\\d+>}
          controller: App\\Controller\\BlogController::list
      ```

      What does `{page<\\d+>}` signify?
    answers:
      - value: It defines a required URL parameter named `page` that must be a digit.
        correct: true
      - value: It defines an optional URL parameter named `page` that must be a digit.
        correct: false
      - value: It sets a default value for the `page` parameter to a digit.
        correct: false
      - value: It indicates that the `page` parameter should be autowired as an integer.
        correct: false
    help: The syntax `{parameter<REGEX>}` in a route path defines a parameter and
      applies a regular expression requirement directly within the path,
      ensuring the parameter matches the specified pattern (e.g., `\d+` for
      digits).
  - question: Which of the following correctly defines a route with a default value
      for a parameter in Symfony 7 using PHP attributes?
    answers:
      - value: >-
          ```php

          #[Route('/articles/{page}', name: 'articles_list', defaults: ['page'
          => 1])]

          public function list(int $page = 1): Response

          {
              // ...
          }

          ```
        correct: true
      - value: |-
          ```php
          #[Route('/articles/{page?}', name: 'articles_list')]
          public function list(int $page = 1): Response
          {
              // ...
          }
          ```
        correct: true
      - value: |-
          ```php
          #[Route('/articles/{page}', name: 'articles_list')]
          public function list(int $page = 1): Response
          {
              // ...
          }
          ```
        correct: true
      - value: |-
          ```php
          #[Route('/articles/{page}', name: 'articles_list', default: 'page=1')]
          public function list(int $page): Response
          {
              // ...
          }
          ```
        correct: false
    help: Default values for route parameters can be set in the `defaults` option of
      the `#[Route]` attribute, by making the parameter optional in the path
      (`{page?}`), or by providing a default value in the controller method
      signature. Symfony will combine these.
  - question: You need to generate an absolute URL for the route named `sign_up`
      within a Symfony 7 controller. Which of the following `generateUrl()`
      calls is correct?
    answers:
      - value: "`$this->generateUrl('sign_up', [],
          UrlGeneratorInterface::ABSOLUTE_URL);`"
        correct: true
      - value: "`$this->generateUrl('sign_up', ['_absolute' => true]);`"
        correct: false
      - value: "`$this->generateUrl('sign_up', [], true);`"
        correct: false
      - value: "`$this->generateUrl('sign_up', ['_scheme' => 'https', '_host' =>
          'example.com']);`"
        correct: false
    help: To generate an absolute URL, the third argument to `generateUrl()` (or
      `UrlGeneratorInterface::generate()`) should be
      `UrlGeneratorInterface::ABSOLUTE_URL`.
  - question: When generating a URL for a route with a localized path, how can you
      explicitly set the locale for the generated URL in Symfony 7?
    answers:
      - value: "Pass `_locale` as a route argument: `['_locale' => 'nl']`."
        correct: true
      - value: Set the locale on the `RequestContext` object before generating.
        correct: false
      - value: Use a `setLocale()` method on the `UrlGeneratorInterface`.
        correct: false
      - value: It's automatically determined by the current request's locale and cannot
          be overridden.
        correct: false
    help: You can explicitly set the locale for a generated URL by passing the
      `_locale` parameter as an argument to the `generate()` method. Symfony
      will use the current request locale by default if not specified.
  - question: You have a route `doc_shortcut` that should redirect to an internal
      route `doc_page` with a permanent redirect (HTTP 301). Which configuration
      using `RedirectController` in YAML is correct?
    answers:
      - value: >-
          ```yaml

          doc_shortcut:
              path: /doc
              controller: Symfony\\Bundle\\FrameworkBundle\\Controller\\RedirectController
              defaults:
                  route: 'doc_page'
                  permanent: true
          ```
        correct: true
      - value: >-
          ```yaml

          doc_shortcut:
              path: /doc
              controller: Symfony\\Bundle\\FrameworkBundle\\Controller\\RedirectController::redirect
              defaults:
                  url: '@doc_page'
                  status: 301
          ```
        correct: false
      - value: |-
          ```yaml
          doc_shortcut:
              path: /doc
              redirect_to: doc_page
              status: 301
          ```
        correct: false
      - value: |-
          ```yaml
          doc_shortcut:
              path: /doc
              controller: App\\Controller\\RedirectController::toRoute
              defaults:
                  route: 'doc_page'
                  permanent: true
          ```
        correct: false
    help: "The `RedirectController` is used with `defaults.route` for internal route
      redirection and `defaults.permanent: true` for a 301 redirect. The
      `controller` key must point to the `RedirectController` class."
  - question: What is the purpose of the `_format` special routing attribute in
      Symfony 7?
    answers:
      - value: It sets the request format of the `Request` object, influencing the
          `Content-Type` of the response.
        correct: true
      - value: It specifies the expected file extension for the URL.
        correct: false
      - value: It defines the data serialization format for API responses.
        correct: false
      - value: It is used to validate the format of a route parameter.
        correct: false
    help: The `_format` special parameter is used to set the 'request format' of the
      `Request` object, which in turn can determine the `Content-Type` header of
      the response (e.g., `html` for `text/html`, `json` for
      `application/json`).
  - question: You want to define a route that only matches requests to
      `m.example.com`. How would you configure this using PHP attributes in
      Symfony 7?
    answers:
      - value: |-
          ```php
          #[Route('/', name: 'mobile_homepage', host: 'm.example.com')]
          public function mobileHomepage(): Response
          {
              // ...
          }
          ```
        correct: true
      - value: |-
          ```php
          #[Route('/', name: 'mobile_homepage', domain: 'm.example.com')]
          public function mobileHomepage(): Response
          {
              // ...
          }
          ```
        correct: false
      - value: |-
          ```php
          #[Route('/', name: 'mobile_homepage')]
          #[Host('m.example.com')]
          public function mobileHomepage(): Response
          {
              // ...
          }
          ```
        correct: false
      - value: >-
          ```php

          #[Route('/', name: 'mobile_homepage', requirements: ['_host' =>
          'm.example.com'])]

          public function mobileHomepage(): Response

          {
              // ...
          }

          ```
        correct: false
    help: The `host` option in the `#[Route]` attribute is used to define routes
      that match specific hostnames or subdomains.
  - question: Which of the following Expression Language variables are available for
      use in a Symfony 7 routing `condition`?
    answers:
      - value: "`context` (Symfony\\Component\\Routing\\RequestContext)"
        correct: true
      - value: "`request` (Symfony\\Component\\HttpFoundation\\Request)"
        correct: true
      - value: "`params` (array of matched route parameters)"
        correct: true
      - value: "`session`
          (Symfony\\Component\\HttpFoundation\\Session\\SessionInterface)"
        correct: false
    help: The `context`, `request`, and `params` variables are directly available in
      routing conditions. While a session might be accessible via the request,
      `session` itself is not a top-level variable in routing conditions.
  - question: You want a route to only respond to `GET` and `HEAD` HTTP methods. How
      would you configure this using PHP attributes in Symfony 7?
    answers:
      - value: |-
          ```php
          #[Route('/contact', name: 'contact', methods: ['GET', 'HEAD'])]
          public function contact(): Response
          {
              // ...
          }
          ```
        correct: true
      - value: |-
          ```php
          #[Route('/contact', name: 'contact', method: 'GET|HEAD')]
          public function contact(): Response
          {
              // ...
          }
          ```
        correct: false
      - value: >-
          ```php

          #[Route('/contact', name: 'contact', requirements: ['_method' =>
          'GET|HEAD'])]

          public function contact(): Response

          {
              // ...
          }

          ```
        correct: false
      - value: |-
          ```php
          #[Route('/contact', name: 'contact', httpMethods: ['GET', 'HEAD'])]
          public function contact(): Response
          {
              // ...
          }
          ```
        correct: false
    help: The `methods` option in the `#[Route]` attribute is used to restrict a
      route to specific HTTP methods. It accepts an array of method names.
  - question: How can you list all registered routes in a Symfony 7 application from
      the command line?
    answers:
      - value: "`php bin/console debug:router`"
        correct: true
      - value: "`php bin/console router:list`"
        correct: false
      - value: "`php bin/console routes:show`"
        correct: false
      - value: "`php bin/console app:routes`"
        correct: false
    help: The `debug:router` command is the standard Symfony console command for
      listing and inspecting routes.
  - question: "What is the primary benefit of marking a route as `stateless: true`
      in Symfony 7?"
    answers:
      - value: It prevents session usage during request matching, improving caching
          potential.
        correct: true
      - value: It forces the route to use HTTP/2 for faster communication.
        correct: false
      - value: It makes the route accessible without authentication.
        correct: false
      - value: It ensures the route is only matched if no cookies are present.
        correct: false
    help: "Marking a route as `stateless: true` tells Symfony that the route does
      not rely on session state, which can allow for better caching strategies
      as the session won't be started or used during the request matching
      process."
  - question: "You have two routes: `/blog/{slug}` (name: `blog_show`) and
      `/blog/list` (name: `blog_list`). The `blog_show` route is defined first.
      When requesting `/blog/list`, which route will Symfony 7 match by default,
      and why?"
    answers:
      - value: "`blog_show`, because its `{slug}` parameter is greedy and matches
          `list`."
        correct: true
      - value: "`blog_list`, because it's a static path and static paths are always
          prioritized."
        correct: false
      - value: It will result in a routing error due to ambiguity.
        correct: false
      - value: "`blog_list`, but only if it's defined after `blog_show`."
        correct: false
    help: By default, Symfony matches routes in the order they are defined. A greedy
      pattern like `{slug}` will match 'list' if it's defined first. To
      prioritize `blog_list`, you would need to give it a higher `priority`.
  - question: How can you allow a route parameter, e.g., `token`, to contain forward
      slashes (`/`) in Symfony 7 using YAML configuration?
    answers:
      - value: |-
          ```yaml
          share:
              path:       /share/{token}
              controller: App\\Controller\\DefaultController::share
              requirements:
                  token: .+
          ```
        correct: true
      - value: |-
          ```yaml
          share:
              path:       /share/{token}
              controller: App\\Controller\\DefaultController::share
              options:
                  allow_slash: true
          ```
        correct: false
      - value: |-
          ```yaml
          share:
              path:       /share/{token}
              controller: App\\Controller\\DefaultController::share
              defaults:
                  token: '.*'
          ```
        correct: false
      - value: |-
          ```yaml
          share:
              path:       /share/{token<.*>}
              controller: App\\Controller\\DefaultController::share
          ```
        correct: false
    help: By default, route parameters do not match the `/` character. To allow
      slashes, you must provide a requirement that explicitly matches them, such
      as `.+` (one or more of any character, including `/`).
  - question: What is the purpose of the `_controller` special routing attribute in
      Symfony 7?
    answers:
      - value: It determines which controller and action is executed when the route is
          matched.
        correct: true
      - value: It defines the default controller to be used if no other controller is
          specified.
        correct: false
      - value: It specifies the service ID of the controller.
        correct: false
      - value: It's used for autowiring controller arguments.
        correct: false
    help: The `_controller` parameter is a special internal routing attribute that
      holds the callable string (or array) representing the controller and
      method to be executed for the matched route.
  - question: You are debugging a routing issue and want to see the details of a
      specific route named `app_lucky_number`. Which command should you use?
    answers:
      - value: "`php bin/console debug:router app_lucky_number`"
        correct: true
      - value: "`php bin/console router:show app_lucky_number`"
        correct: false
      - value: "`php bin/console debug:route app_lucky_number`"
        correct: false
      - value: "`php bin/console router:info app_lucky_number`"
        correct: false
    help: The `debug:router` command can be used with a route name argument to
      display detailed information about that specific route.
  - question: Which of the following is the recommended way to check if a route
      exists in Symfony 7 without negatively impacting performance by
      regenerating the routing cache?
    answers:
      - value: Attempt to generate the URL and catch
          `Symfony\Component\Routing\Exception\RouteNotFoundException`.
        correct: true
      - value: Inspect the `RouteCollection` directly using `get()` or `has()` methods.
        correct: false
      - value: Use `php bin/console debug:router <route_name>` and parse the output.
        correct: false
      - value: Call `Router::routeExists($routeName)`.
        correct: false
    help: The recommended approach is to try generating the URL and catch the
      `RouteNotFoundException`. Directly inspecting the route collection can
      trigger a routing cache warm-up, which is undesirable in a production
      environment.
  - question: When defining route groups in Symfony 7 using YAML, how do you apply a
      common URL prefix and a name prefix to all imported routes?
    answers:
      - value: |-
          ```yaml
          controllers:
              resource: '../../src/Controller/'
              type: attribute
              prefix: '/blog'
              name_prefix: 'blog_'
          ```
        correct: true
      - value: |-
          ```yaml
          controllers:
              resource: '../../src/Controller/'
              type: attribute
              path_prefix: '/blog'
              route_prefix: 'blog_'
          ```
        correct: false
      - value: |-
          ```yaml
          controllers:
              resource: '../../src/Controller/'
              type: attribute
              defaults:
                  _prefix: '/blog'
                  _name_prefix: 'blog_'
          ```
        correct: false
      - value: |-
          ```yaml
          controllers:
              resource: '../../src/Controller/'
              type: attribute
              options:
                  prefix: '/blog'
                  name_prefix: 'blog_'
          ```
        correct: false
    help: The `prefix` and `name_prefix` options are used directly under the import
      configuration to apply these common settings to all routes imported from
      the specified resource.
  - question: You have a PHP backed Enum `OrderStatusEnum` and want to use it as a
      route parameter in Symfony 7. How would you define the route and
      controller method to automatically convert the parameter to the Enum
      instance?
    answers:
      - value: |-
          ```php
          // src/Controller/OrderController.php
          use App\\Enum\\OrderStatusEnum;
          use Symfony\\Component\\Routing\\Attribute\\Route;

          class OrderController extends AbstractController
          {
              #[Route('/orders/list/{status}', name: 'list_orders_by_status')]
              public function list(OrderStatusEnum $status): Response
              {
                  // ...
              }
          }
          ```
        correct: true
      - value: >-
          ```php

          // src/Controller/OrderController.php

          use Symfony\\Component\\Routing\\Attribute\\Route;


          class OrderController extends AbstractController

          {
              #[Route('/orders/list/{status<OrderStatusEnum>}', name: 'list_orders_by_status')]
              public function list(string $status): Response
              {
                  // ...
              }
          }

          ```
        correct: false
      - value: >-
          ```php

          // src/Controller/OrderController.php

          use App\\Enum\\OrderStatusEnum;

          use Symfony\\Component\\Routing\\Attribute\\Route;


          class OrderController extends AbstractController

          {
              #[Route('/orders/list/{status}', name: 'list_orders_by_status', defaults: ['status' => OrderStatusEnum::Paid])]
              public function list(string $status): Response
              {
                  // ...
              }
          }

          ```
        correct: false
      - value: >-
          ```php

          // src/Controller/OrderController.php

          use App\\Enum\\OrderStatusEnum;

          use Symfony\\Component\\Routing\\Attribute\\Route;


          class OrderController extends AbstractController

          {
              #[Route('/orders/list/{status}', name: 'list_orders_by_status')]
              public function list(#[MapEnum(OrderStatusEnum::class)] string $status): Response
              {
                  // ...
              }
          }

          ```
        correct: false
    help: Symfony 7 automatically converts PHP backed enumerations used as route
      parameters to their scalar values and injects the Enum instance into the
      controller method if type-hinted correctly. No special attribute or
      requirement is needed beyond the type hint.
  - question: What is the purpose of the `priority` attribute in a Symfony 7 route
      definition?
    answers:
      - value: It explicitly controls the order in which Symfony evaluates routes, with
          higher values matched first.
        correct: true
      - value: It defines the HTTP priority for the route, affecting caching.
        correct: false
      - value: It sets the priority of the route in the route collection for faster
          lookup.
        correct: false
      - value: It determines the priority of the controller service in the service
          container.
        correct: false
    help: The `priority` attribute (defaulting to 0) allows you to explicitly
      control the order of route matching. Routes with a higher priority value
      are evaluated before those with lower or default priority, which is
      crucial for resolving conflicts between greedy and more specific routes.
  - question: Which command can you use to identify which Symfony 7 route matches a
      specific URL path?
    answers:
      - value: "`php bin/console router:match /your/path`"
        correct: true
      - value: "`php bin/console debug:url /your/path`"
        correct: false
      - value: "`php bin/console route:find /your/path`"
        correct: false
      - value: "`php bin/console url:match /your/path`"
        correct: false
    help: The `router:match` command is used to test a given URL path against the
      defined routes and show which route, if any, matches it along with its
      parameters.
  - question: When defining a route using PHP attributes in Symfony 7, how can you
      make it active only in the `dev` environment?
    answers:
      - value: |-
          ```php
          #[Route('/tools', name: 'tools', env: 'dev')]
          public function developerTools(): Response
          {
              // ...
          }
          ```
        correct: true
      - value: >-
          ```php

          #[Route('/tools', name: 'tools', condition: 'kernel.environment ==
          "dev"')]

          public function developerTools(): Response

          {
              // ...
          }

          ```
        correct: false
      - value: |-
          ```php
          #[Route('/tools', name: 'tools', environments: ['dev'])]
          public function developerTools(): Response
          {
              // ...
          }
          ```
        correct: false
      - value: |-
          ```php
          #[Route('/tools', name: 'tools')]
          #[Env('dev')]
          public function developerTools(): Response
          {
              // ...
          }
          ```
        correct: false
    help: The `env` option in the `#[Route]` attribute allows you to restrict a
      route's availability to specific Symfony environments.
  - question: What is the correct way to define a route alias in Symfony 7 using
      YAML configuration?
    answers:
      - value: |-
          ```yaml
          product_details:
              path: /product/{id}
              controller: App\\Controller\\ProductController::show

          product_show:
              alias: product_details
          ```
        correct: true
      - value: |-
          ```yaml
          product_show:
              path: /product/{id}
              controller: App\\Controller\\ProductController::show
              aliases:
                  - product_details
          ```
        correct: false
      - value: |-
          ```yaml
          product_details:
              redirect_to: product_show
          ```
        correct: false
      - value: |-
          ```yaml
          product_show:
              path: /product/{id}
              controller: App\\Controller\\ProductController::show

          alias_product_details:
              target: product_show
          ```
        correct: false
    help: To define a route alias in YAML, you create a new route entry (e.g.,
      `product_show`) and set its `alias` option to the name of the existing
      route it should point to (e.g., `product_details`).
  - question: You need to apply an HTTPS scheme requirement to an entire group of
      imported routes in Symfony 7. Which PHP RoutingConfigurator snippet is
      correct?
    answers:
      - value: |-
          ```php
          return static function (RoutingConfigurator $routes): void {
              $routes->import('../../src/Controller/', 'attribute')
                  ->schemes(['https'])
              ;
          };
          ```
        correct: true
      - value: |-
          ```php
          return static function (RoutingConfigurator $routes): void {
              $routes->import('../../src/Controller/', 'attribute')
                  ->requireHttps()
              ;
          };
          ```
        correct: false
      - value: |-
          ```php
          return static function (RoutingConfigurator $routes): void {
              $routes->import('../../src/Controller/', 'attribute')
                  ->defaults(['_scheme' => 'https'])
              ;
          };
          ```
        correct: false
      - value: |-
          ```php
          return static function (RoutingConfigurator $routes): void {
              $routes->import('../../src/Controller/', 'attribute')
                  ->scheme('https')
              ;
          };
          ```
        correct: false
    help: The `schemes()` method on the `RoutingConfigurator`'s imported route
      definition is used to apply scheme requirements (e.g., `https`) to all
      routes within that imported group.
  - question: What is the primary use case for the `_fragment` special routing
      attribute in Symfony 7?
    answers:
      - value: To set the fragment identifier (the part of a URL after `#`) for a
          generated URL.
        correct: true
      - value: To define a URL fragment that is matched against the request URL.
        correct: false
      - value: To specify a default HTML fragment to be loaded by the controller.
        correct: false
      - value: To indicate that the route should only be accessible via AJAX requests.
        correct: false
    help: The `_fragment` special parameter is used to set the fragment identifier
      for a URL, which is the optional last part of a URL that starts with a `#`
      character and is used to identify a portion of a document.
  - question: You want to define a route that matches a dynamic subdomain, like
      `blog.example.com` or `news.example.com`, and capture the subdomain as a
      parameter. How would you do this using PHP attributes in Symfony 7?
    answers:
      - value: |-
          ```php
          #[Route(
              '/',
              name: 'dynamic_homepage',
              host: '{subdomain}.example.com',
              requirements: ['subdomain' => 'blog|news']
          )]
          public function dynamicHomepage(string $subdomain): Response
          {
              // ...
          }
          ```
        correct: true
      - value: |-
          ```php
          #[Route(
              '/',
              name: 'dynamic_homepage',
              host: '{subdomain}.example.com',
              defaults: ['subdomain' => 'blog']
          )]
          public function dynamicHomepage(string $subdomain): Response
          {
              // ...
          }
          ```
        correct: true
      - value: |-
          ```php
          #[Route(
              '/',
              name: 'dynamic_homepage',
              host: '(?P<subdomain>.*)\.example\.com',
          )]
          public function dynamicHomepage(string $subdomain): Response
          {
              // ...
          }
          ```
        correct: false
      - value: |-
          ```php
          #[Route(
              '/',
              name: 'dynamic_homepage',
              host_regex: '/^(?P<subdomain>.*)\.example\.com$/'
          )]
          public function dynamicHomepage(string $subdomain): Response
          {
              // ...
          }
          ```
        correct: false
    help: Dynamic host parameters are defined within the `host` option using curly
      braces `{}`. Requirements and default values can be applied to these host
      parameters just like path parameters.
  - question: What happens if you attempt to generate a URL for a Symfony 7 route
      that has a required parameter (e.g., `slug`) but you don't provide a value
      for it?
    answers:
      - value: A
          `Symfony\Component\Routing\Exception\MissingMandatoryParametersException`
          is thrown.
        correct: true
      - value: The parameter will be silently omitted from the generated URL.
        correct: false
      - value: The route will not be found, resulting in a `RouteNotFoundException`.
        correct: false
      - value: Symfony will attempt to guess a default value for the parameter.
        correct: false
    help: If mandatory parameters are missing when generating a URL, Symfony throws
      a `MissingMandatoryParametersException` (or a more general
      `RouteNotFoundException` if the route cannot be generated at all without
      the parameter).
  - question: You want to apply a conditional request matching rule to a route in
      Symfony 7, ensuring it only matches if the `User-Agent` header contains
      'firefox'. Which `condition` expression is correct?
    answers:
      - value: "`request.headers.get('User-Agent') matches '/firefox/i'`"
        correct: true
      - value: "`request.userAgent contains 'firefox'`"
        correct: false
      - value: "`context.userAgent matches 'firefox'`"
        correct: false
      - value: "`request.headers['User-Agent'] like '%firefox%'`"
        correct: false
    help: The `request` variable provides access to the `Request` object. You can
      use `request.headers.get('Header-Name')` to retrieve header values and
      `matches` for regular expression matching.
  - question: What is the purpose of the `_locale` special routing attribute in
      Symfony 7?
    answers:
      - value: It sets the locale on the `Request` object for the matched route.
        correct: true
      - value: It defines the default language for the application.
        correct: false
      - value: It's used to translate route paths.
        correct: false
      - value: It specifies the preferred language for the user's browser.
        correct: false
    help: The `_locale` special parameter is used to set the locale on the `Request`
      object, which is crucial for internationalized applications to determine
      the language for content and translations.
  - question: How can you define a localized route in Symfony 7 using PHP
      attributes, where the path varies by locale (e.g., `/about-us` for English
      and `/over-ons` for Dutch)?
    answers:
      - value: |-
          ```php
          #[Route(path: [
              'en' => '/about-us',
              'nl' => '/over-ons'
          ], name: 'about_us')]
          public function about(): Response
          {
              // ...
          }
          ```
        correct: true
      - value: |-
          ```php
          #[Route('/{_locale}/about', name: 'about_us')]
          public function about(): Response
          {
              // ...
          }
          ```
        correct: false
      - value: |-
          ```php
          #[Route('/about-us', name: 'about_us_en')]
          #[Route('/over-ons', name: 'about_us_nl')]
          public function about(): Response
          {
              // ...
          }
          ```
        correct: false
      - value: |-
          ```php
          #[Route(path: '/about-us', name: 'about_us', locale: 'en')]
          #[Route(path: '/over-ons', name: 'about_us', locale: 'nl')]
          public function about(): Response
          {
              // ...
          }
          ```
        correct: false
    help: The `path` option in the `#[Route]` attribute can accept an associative
      array where keys are locales and values are the corresponding paths,
      allowing for different URLs for the same route name based on locale.
  - question: When importing routes from a controller directory in Symfony 7 using
      PHP RoutingConfigurator, how do you exclude specific files or
      subdirectories (e.g., `Debug*Controller.php`)?
    answers:
      - value: |-
          ```php
          $routes->import(
              '../../src/Controller/',
              'attribute',
              false,
              '../../src/Controller/{Debug*Controller.php}'
          );
          ```
        correct: true
      - value: |-
          ```php
          $routes->import('../../src/Controller/', 'attribute')
              ->exclude('../../src/Controller/{Debug*Controller.php}')
          ;
          ```
        correct: false
      - value: |-
          ```php
          $routes->import('../../src/Controller/', 'attribute')
              ->ignore('Debug*Controller.php')
          ;
          ```
        correct: false
      - value: >-
          ```php

          $routes->import('../../src/Controller/', 'attribute', ['exclude' =>
          'Debug*Controller.php']);

          ```
        correct: false
    help: The `import()` method of `RoutingConfigurator` accepts an optional fourth
      argument, which can be a string or an array of PHP glob patterns, to
      exclude files or subdirectories when loading attributes.
  - question: Which of the following is a valid way to define a route in Symfony 7
      using a PHP configuration file (RoutingConfigurator)?
    answers:
      - value: |-
          ```php
          use App\\Controller\\BlogController;
          use Symfony\\Component\\Routing\\Loader\\Configurator\\RoutingConfigurator;

          return function (RoutingConfigurator $routes): void {
              $routes->add('blog_list', '/blog')
                  ->controller([BlogController::class, 'list'])
              ;
          };
          ```
        correct: true
      - value: >-
          ```php

          use Symfony\\Component\\Routing\\RouteCollection;


          $routes = new RouteCollection();

          $routes->add('blog_list', new Route('/blog', ['_controller' =>
          'App\\Controller\\BlogController::list']));


          return $routes;

          ```
        correct: true
      - value: |-
          ```php
          use App\\Controller\\BlogController;

          return [
              'blog_list' => [
                  'path' => '/blog',
                  'controller' => 'App\\Controller\\BlogController::list'
              ]
          ];
          ```
        correct: false
      - value: |-
          ```php
          use Symfony\\Component\\Routing\\Loader\\Configurator\\RoutingConfigurator;

          $routes = new RoutingConfigurator();
          $routes->addRoute('blog_list', '/blog', 'App\\Controller\\BlogController::list');

          return $routes;
          ```
        correct: false
    help: Routes can be defined in PHP files using the `RoutingConfigurator`
      (recommended for full-stack apps) or by manually creating `Route` objects
      and adding them to a `RouteCollection` (more common in micro-frameworks or
      custom loaders).
  - question: What is the default HTTP status code for a redirect configured with
      Symfony's `RedirectController` if `permanent` is not set to `true`?
    answers:
      - value: 302 (Found)
        correct: true
      - value: 301 (Moved Permanently)
        correct: false
      - value: 303 (See Other)
        correct: false
      - value: 307 (Temporary Redirect)
        correct: false
    help: By default, redirects configured with `RedirectController` are temporary,
      using a 302 (Found) status code. If `keepRequestMethod` is also true, it
      uses 307.
  - question: You want to redirect an old URL `/legacy/doc` to an external URL
      `https://legacy.example.com/doc` permanently (HTTP 301). Which YAML
      configuration is correct?
    answers:
      - value: >-
          ```yaml

          legacy_doc:
              path: /legacy/doc
              controller: Symfony\\Bundle\\FrameworkBundle\\Controller\\RedirectController
              defaults:
                  path: 'https://legacy.example.com/doc'
                  permanent: true
          ```
        correct: true
      - value: |-
          ```yaml
          legacy_doc:
              path: /legacy/doc
              redirect_to: 'https://legacy.example.com/doc'
              status: 301
          ```
        correct: false
      - value: >-
          ```yaml

          legacy_doc:
              path: /legacy/doc
              controller: Symfony\\Bundle\\FrameworkBundle\\Controller\\RedirectController
              defaults:
                  url: 'https://legacy.example.com/doc'
                  permanent: true
          ```
        correct: false
      - value: >-
          ```yaml

          legacy_doc:
              path: /legacy/doc
              controller: Symfony\\Bundle\\FrameworkBundle\\Controller\\RedirectController
              defaults:
                  target: 'https://legacy.example.com/doc'
                  type: 301
          ```
        correct: false
    help: "For external URL redirects, the `RedirectController` uses the
      `defaults.path` option, which can be an absolute path or an absolute URL.
      `permanent: true` ensures a 301 redirect."
  - question: What is the purpose of the `_locale` special routing attribute in
      Symfony 7 when defining a route?
    answers:
      - value: It sets the locale on the `Request` object for the matched route.
        correct: true
      - value: It defines the default locale for the route if no locale is provided in
          the URL.
        correct: false
      - value: It's used to translate the route path itself.
        correct: false
      - value: It specifies the preferred language for the user's browser.
        correct: false
    help: The `_locale` special parameter is used to set the locale on the `Request`
      object. While it can also be used to define a default locale for the
      route, its primary role is to set the request's locale.
  - question: How can you access the current route's name and its parameters from
      the `Request` object within a Symfony 7 controller?
    answers:
      - value: "`$request->attributes->get('_route');` and
          `$request->attributes->get('_route_params');`"
        correct: true
      - value: "`$request->get('_route');` and `$request->get('_route_params');`"
        correct: false
      - value: "`$request->routeName;` and `$request->routeParameters;`"
        correct: false
      - value: "`$this->get('router')->getContext()->getRouteName();` and
          `$this->get('router')->getContext()->getParameters();`"
        correct: false
    help: The route name and its parameters are stored as attributes on the
      `Request` object under the keys `_route` and `_route_params` respectively.
  - question: You have a route defined with a parameter `{id}`. You want to add a
      condition that this route only matches if the `id` parameter is less than
      1000. Which Expression Language condition is correct in Symfony 7?
    answers:
      - value: "`params['id'] < 1000`"
        correct: true
      - value: "`request.attributes.get('id') < 1000`"
        correct: false
      - value: "`id < 1000`"
        correct: false
      - value: "`route.parameters.id < 1000`"
        correct: false
    help: The `params` variable in routing conditions provides access to the matched
      route parameters as an array. You can access individual parameters using
      array syntax, e.g., `params['id']`.
  - question: Which command-line option for `php bin/console debug:router` in
      Symfony 7 allows you to display only routes that match a specific HTTP
      method, including a special value for any method?
    answers:
      - value: "`--method=GET` and `--method=ANY`"
        correct: true
      - value: "`--http-method=GET` and `--http-method=ALL`"
        correct: false
      - value: "`--filter-method=GET` and `--filter-method=ANY`"
        correct: false
      - value: "`--methods=GET,ANY`"
        correct: false
    help: The `--method` option allows filtering routes by HTTP method. The special
      value `ANY` can be used to display routes that match any method.
  - question: What is the primary purpose of
      `Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator` in
      Symfony 7?
    answers:
      - value: It provides a fluent interface for defining routes in PHP configuration
          files.
        correct: true
      - value: It's responsible for compiling the routing cache.
        correct: false
      - value: It's a service that matches incoming URLs to routes.
        correct: false
      - value: It's an interface for custom route loaders.
        correct: false
    help: The `RoutingConfigurator` provides a convenient and fluent API for
      defining routes programmatically in PHP configuration files, offering an
      alternative to YAML or XML.
  - question: When defining a route with a dynamic subdomain like
      `{subdomain}.example.com`, how can you set a default value for the
      `subdomain` parameter in Symfony 7 using YAML?
    answers:
      - value: |-
          ```yaml
          mobile_homepage:
              path:       /
              host:       "{subdomain}.example.com"
              controller: App\\Controller\\MainController::mobileHomepage
              defaults:
                  subdomain: m
          ```
        correct: true
      - value: |-
          ```yaml
          mobile_homepage:
              path:       /
              host:       "{subdomain}.example.com"
              controller: App\\Controller\\MainController::mobileHomepage
              options:
                  subdomain_default: m
          ```
        correct: false
      - value: |-
          ```yaml
          mobile_homepage:
              path:       /
              host:       "{subdomain}.example.com"
              controller: App\\Controller\\MainController::mobileHomepage
              parameters:
                  subdomain: m
          ```
        correct: false
      - value: |-
          ```yaml
          mobile_homepage:
              path:       /
              host:       "{subdomain}.example.com"
              controller: App\\Controller\\MainController::mobileHomepage
              default_subdomain: m
          ```
        correct: false
    help: Default values for host parameters are defined under the `defaults` key,
      just like path parameters.
  - question: What is the correct way to inject `UrlGeneratorInterface` into a
      Symfony 7 service to generate URLs?
    answers:
      - value: |-
          ```php
          use Symfony\\Component\\Routing\\Generator\\UrlGeneratorInterface;

          class SomeService
          {
              public function __construct(
                  private UrlGeneratorInterface $urlGenerator,
              ) {}
          }
          ```
        correct: true
      - value: |-
          ```php
          use Symfony\\Component\\Routing\\Generator\\UrlGenerator;

          class SomeService
          {
              public function __construct(
                  private UrlGenerator $urlGenerator,
              ) {}
          }
          ```
        correct: false
      - value: |-
          ```php
          class SomeService
          {
              public function __construct(
                  #[Service('router.url_generator')] private $urlGenerator,
              ) {}
          }
          ```
        correct: false
      - value: |-
          ```php
          class SomeService extends AbstractService
          {
              // ...
          }
          ```
        correct: false
    help: The `UrlGeneratorInterface` is the recommended interface to inject into
      services for URL generation, allowing for dependency injection and
      testability.
  - question: When generating a URL in Symfony 7, if you pass an object (e.g., a
      UUID object) as an extra parameter to `generateUrl()`, what is the
      recommended practice to avoid issues?
    answers:
      - value: "Explicitly cast the object to a string: `(string) $entity->getUuid()`."
        correct: true
      - value: Ensure the object implements `__toString()`.
        correct: true
      - value: Pass the object directly; Symfony handles object conversion
          automatically.
        correct: false
      - value: Use a custom parameter converter for the object type.
        correct: false
    help: When passing objects as extra parameters to `generateUrl()`, it's crucial
      that they can be converted to a string. Explicitly casting to string or
      ensuring the object has a `__toString()` method is the recommended
      practice.
  - question: What is the purpose of the `_fragment` special routing attribute in
      Symfony 7?
    answers:
      - value: It is used to set the fragment identifier (the part of a URL after `#`)
          for a generated URL.
        correct: true
      - value: It specifies a default HTML fragment to be loaded by the controller.
        correct: false
      - value: It defines a URL fragment that is matched against the request URL.
        correct: false
      - value: It indicates that the route should only be accessible via AJAX requests.
        correct: false
    help: The `_fragment` special parameter is used to set the fragment identifier
      for a URL, which is the optional last part of a URL that starts with a `#`
      character and is used to identify a portion of a document.
  - question: You want to deprecate an old route alias `product_show` in favor of a
      new route `product_details` in Symfony 7, providing a custom deprecation
      message. Which PHP attribute configuration is correct?
    answers:
      - value: >-
          ```php

          #[Route(
              '/product/{id}',
              name: 'product_details',
              alias: new DeprecatedAlias(
                  aliasName: 'product_show',
                  package: 'acme/package',
                  version: '1.2',
                  message: 'The "%alias_id%" route alias is deprecated. Please use "product_details" instead.',
              ),
          )]

          public function show(): Response

          {
              // ...
          }

          ```
        correct: true
      - value: >-
          ```php

          #[Route(
              '/product/{id}',
              name: 'product_details',
              alias: 'product_show',
              deprecated: 'The "product_show" route alias is deprecated. Please use "product_details" instead.'
          )]

          public function show(): Response

          {
              // ...
          }

          ```
        correct: false
      - value: >-
          ```php

          #[Route(
              '/product/{id}',
              name: 'product_details',
              deprecatedAlias: 'product_show',
              deprecationMessage: 'The "product_show" route alias is deprecated. Please use "product_details" instead.'
          )]

          public function show(): Response

          {
              // ...
          }

          ```
        correct: false
      - value: |-
          ```php
          #[Route(
              '/product/{id}',
              name: 'product_details',
              alias: 'product_show',
              options: ['deprecated_message' => '...']
          )]
          public function show(): Response
          {
              // ...
          }
          ```
        correct: false
    help: Symfony 7 introduces the `DeprecatedAlias` attribute for deprecating route
      aliases, allowing you to specify a custom message, package, and version
      for the deprecation notice.
  - question: What is the key difference between `UrlMatcher` and `UrlGenerator` in
      the Symfony Routing component?
    answers:
      - value: "`UrlMatcher` matches an incoming URL to a route, while `UrlGenerator`
          generates a URL from a route name and parameters."
        correct: true
      - value: "`UrlMatcher` is used in development, `UrlGenerator` in production."
        correct: false
      - value: "`UrlMatcher` handles HTTP requests, `UrlGenerator` handles console
          commands."
        correct: false
      - value: They are two different implementations of the same interface.
        correct: false
    help: The `UrlMatcher` is responsible for the 'matching' process (determining
      which route corresponds to a given URL), while the `UrlGenerator` handles
      the 'generating' process (creating a URL from a route name and its
      parameters).
  - question: You want to define a route group in Symfony 7 using PHP attributes,
      applying a common `/admin` prefix and `admin_` name prefix to all routes
      within a controller. Which attribute configuration on the controller class
      is correct?
    answers:
      - value: |-
          ```php
          #[Route('/admin', name: 'admin_')]
          class AdminController extends AbstractController
          {
              // ...
          }
          ```
        correct: true
      - value: |-
          ```php
          #[RoutePrefix('/admin', namePrefix: 'admin_')]
          class AdminController extends AbstractController
          {
              // ...
          }
          ```
        correct: false
      - value: |-
          ```php
          #[RouteGroup('/admin', name: 'admin_')]
          class AdminController extends AbstractController
          {
              // ...
          }
          ```
        correct: false
      - value: |-
          ```php
          #[Route(path: '/admin', name: 'admin_')]
          class AdminController extends AbstractController
          {
              // ...
          }
          ```
        correct: true
    help: The `#[Route]` attribute can be applied to a controller class to define
      common settings (like `path` for URL prefix and `name` for name prefix)
      for all routes defined within that controller.
  - question: "When using `RedirectController` in Symfony 7, what is the effect of
      setting `keepRequestMethod: true`?"
    answers:
      - value: For temporary redirects, it uses HTTP 307 instead of 302.
        correct: true
      - value: For permanent redirects, it uses HTTP 308 instead of 301.
        correct: true
      - value: It forces the redirect to use the original HTTP method (e.g., POST)
          instead of always GET.
        correct: true
      - value: It ensures that the redirect is always a GET request.
        correct: false
    help: "The `keepRequestMethod: true` option in `RedirectController` ensures that
      the HTTP method of the original request is preserved during the redirect.
      This changes the status code to 307 for temporary redirects and 308 for
      permanent redirects, as per RFCs."
  - question: What is the purpose of `Symfony\Component\Routing\RequestContext` in
      Symfony's routing component?
    answers:
      - value: It holds fundamental information about the current request, such as the
          HTTP method, host, and scheme, used by the `UrlMatcher` and
          `UrlGenerator`.
        correct: true
      - value: It stores the matched route parameters after a successful route match.
        correct: false
      - value: It's a container for all defined routes in the application.
        correct: false
      - value: It manages the session data for the current request.
        correct: false
    help: The `RequestContext` object encapsulates the necessary information about
      the current request (like base URL, HTTP method, host, scheme) that the
      router needs to match incoming URLs and generate outgoing ones.
  - question: You have a route that should only be accessible via `POST` requests.
      How would you configure this using YAML in Symfony 7?
    answers:
      - value: |-
          ```yaml
          contact_process:
              path: /contact
              controller: App\\Controller\\ContactController::process
              methods: [POST]
          ```
        correct: true
      - value: |-
          ```yaml
          contact_process:
              path: /contact
              controller: App\\Controller\\ContactController::process
              requirements:
                  _method: POST
          ```
        correct: false
      - value: |-
          ```yaml
          contact_process:
              path: /contact
              controller: App\\Controller\\ContactController::process
              http_method: POST
          ```
        correct: false
      - value: |-
          ```yaml
          contact_process:
              path: /contact
              controller: App\\Controller\\ContactController::process
              condition: "context.getMethod() == 'POST'"
          ```
        correct: true
    help: The `methods` option is the standard way to restrict a route to specific
      HTTP methods. Alternatively, a `condition` using `context.getMethod()` can
      achieve the same.
  - question: What is the significance of the `_format` special routing attribute in
      Symfony 7?
    answers:
      - value: It determines the request format (e.g., html, json) and can influence the
          `Content-Type` header of the response.
        correct: true
      - value: It specifies the file extension in the URL that Symfony should look for.
        correct: false
      - value: It's used to define the output format for debugging information.
        correct: false
      - value: It's a parameter that must always be present in the URL.
        correct: false
    help: The `_format` special parameter allows Symfony to determine the requested
      format (e.g., HTML, JSON, XML) from the URL, which can then be used to set
      the `Content-Type` of the response.
  - question: You are importing routes and want to apply different URL prefixes
      based on the locale (e.g., no prefix for English, `/nl` for Dutch). Which
      YAML configuration is correct in Symfony 7?
    answers:
      - value: |-
          ```yaml
          controllers:
              resource: '../../src/Controller/'
              type: attribute
              prefix:
                  en: ''
                  nl: '/nl'
          ```
        correct: true
      - value: |-
          ```yaml
          controllers:
              resource: '../../src/Controller/'
              type: attribute
              locale_prefix:
                  en: ''
                  nl: '/nl'
          ```
        correct: false
      - value: |-
          ```yaml
          controllers:
              resource: '../../src/Controller/'
              type: attribute
              defaults:
                  _prefix_en: ''
                  _prefix_nl: '/nl'
          ```
        correct: false
      - value: |-
          ```yaml
          controllers:
              resource: '../../src/Controller/'
              type: attribute
              options:
                  prefix_by_locale:
                      en: ''
                      nl: '/nl'
          ```
        correct: false
    help: The `prefix` option for imported routes can accept an associative array
      where keys are locales and values are the corresponding prefixes, allowing
      for locale-specific URL prefixes.
  - question: What is the purpose of the `env()` function in Symfony 7 routing
      conditions?
    answers:
      - value: It returns the value of an environment variable, allowing dynamic
          conditions based on environment settings.
        correct: true
      - value: It checks if the current environment matches a given string.
        correct: false
      - value: It sets an environment variable for the current request.
        correct: false
      - value: It's used to retrieve configuration parameters specific to the current
          environment.
        correct: false
    help: The `env()` function in Expression Language for routing conditions allows
      you to retrieve the value of an environment variable, enabling conditions
      that depend on the application's environment configuration.
  - question: "When using `RedirectController` in Symfony 7, what is the effect of
      setting `ignoreAttributes: true`?"
    answers:
      - value: It removes all original route attributes when redirecting.
        correct: true
      - value: It prevents the original query string parameters from being passed to the
          redirected URL.
        correct: false
      - value: It ignores any additional attributes passed to the `generateUrl` call for
          the redirect target.
        correct: false
      - value: It makes the redirect ignore any security attributes on the original
          route.
        correct: false
    help: "The `ignoreAttributes: true` option in `RedirectController` ensures that
      no attributes from the original route (e.g., `_controller`, `_locale`) are
      carried over to the redirect target, providing a clean redirect."
  - question: How can you display all defined route aliases when using the
      `debug:router` command in Symfony 7?
    answers:
      - value: "`php bin/console debug:router --show-aliases`"
        correct: true
      - value: "`php bin/console debug:router --aliases`"
        correct: false
      - value: "`php bin/console debug:router --list-aliases`"
        correct: false
      - value: "`php bin/console debug:router --all`"
        correct: false
    help: The `--show-aliases` option for `debug:router` explicitly includes route
      aliases in the output, which are otherwise hidden by default.
  - question: What is the primary purpose of `Symfony\Component\Routing\RouteCollection`?
    answers:
      - value: It is a collection of `Route` objects, serving as the central registry
          for all routes in an application.
        correct: true
      - value: It's a class for generating URLs from route names.
        correct: false
      - value: It's responsible for matching incoming requests to routes.
        correct: false
      - value: It's a cache for frequently accessed routes.
        correct: false
    help: The `RouteCollection` is a fundamental class in Symfony's routing
      component that aggregates all individual `Route` objects, forming the
      complete routing map for the application.
  - question: You have a route `/blog/{page}` where `page` should be an integer.
      Which PHP attribute configuration correctly defines this requirement in
      Symfony 7?
    answers:
      - value: >-
          ```php

          #[Route('/blog/{page}', name: 'blog_list', requirements: ['page' =>
          '\\d+'])]

          public function list(int $page): Response

          {
              // ...
          }

          ```
        correct: true
      - value: |-
          ```php
          #[Route('/blog/{page<\\d+>}', name: 'blog_list')]
          public function list(int $page): Response
          {
              // ...
          }
          ```
        correct: true
      - value: |-
          ```php
          #[Route('/blog/{page}', name: 'blog_list')]
          #[Requirement('page', '\\d+')]
          public function list(int $page): Response
          {
              // ...
          }
          ```
        correct: false
      - value: >-
          ```php

          #[Route('/blog/{page}', name: 'blog_list', type: ['page' =>
          'integer'])]

          public function list(int $page): Response

          {
              // ...
          }

          ```
        correct: false
    help: Route parameter requirements can be defined using the `requirements`
      option in the `#[Route]` attribute (with a regex string) or directly in
      the path using the `{param<REGEX>}` syntax.
  - question: What is the purpose of the `service()` function in Symfony 7 routing
      conditions?
    answers:
      - value: It allows you to retrieve a service from the container and use its
          methods in the condition.
        correct: true
      - value: It registers a new service for routing conditions.
        correct: false
      - value: It checks if a service exists in the container.
        correct: false
      - value: It defines a service as a route parameter.
        correct: false
    help: The `service()` function in Expression Language for routing conditions
      enables you to access and utilize services that are tagged with
      `#[AsRoutingConditionService]` or `routing.condition_service` within your
      conditions.
  - question: You need to define a route that handles an optional `page` parameter,
      which defaults to `1` if not provided. Which YAML configuration is correct
      in Symfony 7?
    answers:
      - value: |-
          ```yaml
          blog_list:
              path:       /blog/{page}
              controller: App\\Controller\\BlogController::list
              defaults:
                  page: 1
          ```
        correct: true
      - value: |-
          ```yaml
          blog_list:
              path:       /blog/{page?}
              controller: App\\Controller\\BlogController::list
          ```
        correct: true
      - value: |-
          ```yaml
          blog_list:
              path:       /blog/{page|1}
              controller: App\\Controller\\BlogController::list
          ```
        correct: false
      - value: |-
          ```yaml
          blog_list:
              path:       /blog/{page}
              controller: App\\Controller\\BlogController::list
              options:
                  default_page: 1
          ```
        correct: false
    help: Optional parameters can be defined by appending `?` to the parameter name
      in the path (e.g., `{page?}`) or by providing a default value in the
      `defaults` section of the route configuration.
  - question: What is the purpose of the `_locale` special routing attribute in
      Symfony 7?
    answers:
      - value: It sets the locale on the `Request` object.
        correct: true
      - value: It defines the default language for the application.
        correct: false
      - value: It's used to translate route paths.
        correct: false
      - value: It specifies the preferred language for the user's browser.
        correct: false
    help: The `_locale` special parameter is used to set the locale on the `Request`
      object, which is crucial for internationalized applications to determine
      the language for content and translations.
  - question: When debugging routing issues, what information does `php bin/console
      router:match /lucky/number/8` provide in Symfony 7?
    answers:
      - value: It shows which route matches the given URL and the parameters extracted
          from it.
        correct: true
      - value: It generates a URL for the `lucky_number` route with the parameter `8`.
        correct: false
      - value: It lists all routes that contain `lucky/number` in their path.
        correct: false
      - value: It tests the performance of the router for the given URL.
        correct: false
    help: The `router:match` command is a powerful debugging tool that simulates a
      request to a given URL and displays the matched route, its controller, and
      any extracted parameters.
  - question: Which of the following is a key advantage of using PHP attributes for
      routing configuration in Symfony 7 compared to YAML or XML?
    answers:
      - value: Routes are defined directly alongside the controller logic, improving
          discoverability and cohesion.
        correct: true
      - value: They offer better performance due to being compiled directly into PHP
          opcodes.
        correct: false
      - value: They do not require any additional configuration to be enabled.
        correct: false
      - value: They provide more advanced conditional routing capabilities.
        correct: false
    help: A major advantage of PHP attributes for routing is that the route
      definition is colocated with the controller code it applies to, making it
      easier to understand and maintain.
  - question: What is the purpose of the `_controller` special routing attribute in
      Symfony 7?
    answers:
      - value: It specifies the controller and action that should be executed when the
          route is matched.
        correct: true
      - value: It defines the default controller for the application.
        correct: false
      - value: It's used for autowiring controller dependencies.
        correct: false
      - value: It indicates if the controller is a service or a simple class.
        correct: false
    help: The `_controller` special parameter holds the reference to the controller
      callable (e.g., `App\Controller\BlogController::list`) that Symfony should
      invoke when the route is matched.
  - question: "You want to apply a specific requirement (`_locale: 'en|es|fr'`) to
      all routes imported from a controller directory using YAML configuration
      in Symfony 7. How would you do this?"
    answers:
      - value: |-
          ```yaml
          controllers:
              resource: '../../src/Controller/'
              type: attribute
              requirements:
                  _locale: 'en|es|fr'
          ```
        correct: true
      - value: |-
          ```yaml
          controllers:
              resource: '../../src/Controller/'
              type: attribute
              defaults:
                  _locale: 'en|es|fr'
          ```
        correct: false
      - value: |-
          ```yaml
          controllers:
              resource: '../../src/Controller/'
              type: attribute
              options:
                  locale_requirement: 'en|es|fr'
          ```
        correct: false
      - value: |-
          ```yaml
          controllers:
              resource: '../../src/Controller/'
              type: attribute
              filters:
                  _locale: 'en|es|fr'
          ```
        correct: false
    help: The `requirements` option can be applied to imported route resources to
      set common requirements for all routes loaded from that resource.
  - question: What is the purpose of
      `Symfony\Component\Routing\Loader\LoaderInterface` in Symfony 7?
    answers:
      - value: It defines the contract for classes that load routes from various
          resources (e.g., files, databases).
        correct: true
      - value: It's an interface for services that generate URLs.
        correct: false
      - value: It's used to match incoming requests to routes.
        correct: false
      - value: It provides methods for debugging the router.
        correct: false
    help: The `LoaderInterface` is a core part of Symfony's routing component,
      defining how different types of resources (like YAML files, XML files, or
      PHP attributes) are processed to build the route collection.
  - question: You want to generate a URL for the `blog_list` route with a `page`
      parameter set to `5`. Which `generateUrl()` call is correct in a Symfony 7
      controller?
    answers:
      - value: "`$this->generateUrl('blog_list', ['page' => 5]);`"
        correct: true
      - value: "`$this->generateUrl('blog_list/5');`"
        correct: false
      - value: "`$this->generateUrl('blog_list', 'page=5');`"
        correct: false
      - value: "`$this->generateUrl('blog_list', ['_params' => ['page' => 5]]);`"
        correct: false
    help: The second argument to `generateUrl()` is an associative array of route
      parameters.
  - question: What is the purpose of the `_format` special routing attribute in
      Symfony 7?
    answers:
      - value: It sets the request format (e.g., `html`, `json`) of the `Request`
          object, which can influence the `Content-Type` of the response.
        correct: true
      - value: It defines the default file extension for the URL.
        correct: false
      - value: It specifies the data serialization format for API responses.
        correct: false
      - value: It's used to validate the format of a route parameter.
        correct: false
    help: The `_format` special parameter allows Symfony to determine the requested
      format (e.g., HTML, JSON, XML) from the URL, which can then be used to set
      the `Content-Type` of the response.
  - question: When defining a route with a conditional expression in Symfony 7, how
      can you access the `User-Agent` header from the `Request` object?
    answers:
      - value: "`request.headers.get('User-Agent')`"
        correct: true
      - value: "`context.headers.get('User-Agent')`"
        correct: false
      - value: "`request.userAgent`"
        correct: false
      - value: "`headers['User-Agent']`"
        correct: false
    help: The `request` variable in routing conditions is an instance of
      `Symfony\Component\HttpFoundation\Request`. You can access headers via its
      `headers` property and the `get()` method.
  - question: What is the purpose of the `_fragment` special routing attribute in
      Symfony 7?
    answers:
      - value: It is used to set the fragment identifier (the part of a URL after `#`)
          for a generated URL.
        correct: true
      - value: It specifies a default HTML fragment to be loaded by the controller.
        correct: false
      - value: It defines a URL fragment that is matched against the request URL.
        correct: false
      - value: It indicates that the route should only be accessible via AJAX requests.
        correct: false
    help: The `_fragment` special parameter is used to set the fragment identifier
      for a URL, which is the optional last part of a URL that starts with a `#`
      character and is used to identify a portion of a document.
  - question: You have a route `/blog/{slug}` where `slug` is a required parameter.
      A controller method `show(string $slug)` is associated. If you try to
      access `/blog` without a slug, what kind of error would you expect in
      Symfony 7?
    answers:
      - value: A routing error indicating a missing mandatory parameter for the
          controller.
        correct: true
      - value: A 404 Not Found error.
        correct: true
      - value: A 500 Internal Server Error.
        correct: false
      - value: A deprecation warning.
        correct: false
    help: If a required route parameter is missing from the URL, Symfony's router
      will not be able to match the route, resulting in a 404 Not Found.
      Internally, this might stem from a `ResourceNotFoundException` or a
      controller argument mismatch if a more general route was matched.
  - question: Which of the following is NOT a valid way to define a route in Symfony 7?
    answers:
      - value: Using `.ini` files.
        correct: true
      - value: Using PHP attributes (`#[Route]`).
        correct: false
      - value: Using YAML files (`.yaml`).
        correct: false
      - value: Using PHP files with `RoutingConfigurator`.
        correct: false
    help: Symfony 7 supports PHP attributes, YAML, XML, and PHP files (with
      `RoutingConfigurator`) for route definition. INI files are not a supported
      format for routing.
  - question: What is the primary benefit of using `#[Route]` attributes on a
      controller class in Symfony 7?
    answers:
      - value: To define common URL prefixes, name prefixes, and requirements for all
          routes within that controller.
        correct: true
      - value: To automatically register all public methods of the controller as routes.
        correct: false
      - value: To specify the default template for all actions in the controller.
        correct: false
      - value: To enable automatic dependency injection for all controller methods.
        correct: false
    help: Applying `#[Route]` to a controller class allows you to group routes and
      apply shared configurations like URL prefixes, name prefixes, and
      requirements to all routes defined within that controller, promoting
      reusability and organization.
  - question: You want to create an alias `product_details` for an existing route
      named `product_show` in Symfony 7 using PHP RoutingConfigurator. Which
      snippet is correct?
    answers:
      - value: |-
          ```php
          $routes->alias('product_details', 'product_show');
          ```
        correct: true
      - value: |-
          ```php
          $routes->add('product_details', '/product/{id}')
              ->alias('product_show');
          ```
        correct: false
      - value: |-
          ```php
          $routes->setAlias('product_details', 'product_show');
          ```
        correct: false
      - value: |-
          ```php
          $routes->createAlias('product_details', 'product_show');
          ```
        correct: false
    help: The `alias()` method on the `RoutingConfigurator` is used to create an
      alias, where the first argument is the alias name and the second is the
      name of the target route.
  - question: What is the purpose of the `_locale` special routing attribute in
      Symfony 7?
    answers:
      - value: It sets the locale on the `Request` object for the matched route.
        correct: true
      - value: It defines the default language for the application.
        correct: false
      - value: It's used to translate route paths.
        correct: false
      - value: It specifies the preferred language for the user's browser.
        correct: false
    help: The `_locale` special parameter is used to set the locale on the `Request`
      object, which is crucial for internationalized applications to determine
      the language for content and translations.
  - question: "When configuring a redirect with `RedirectController` in Symfony 7,
      what is the effect of setting `keepQueryParams: true`?"
    answers:
      - value: It ensures that the original query string parameters are preserved and
          appended to the redirected URL.
        correct: true
      - value: It prevents any query parameters from being added to the redirected URL.
        correct: false
      - value: It only keeps query parameters that are explicitly defined as route
          parameters.
        correct: false
      - value: It converts query parameters into path parameters during the redirect.
        correct: false
    help: "The `keepQueryParams: true` option in `RedirectController` ensures that
      any query string parameters present in the original request URL are
      carried over to the redirected URL."
  - question: You want to define a route that matches based on a conditional
      expression involving an environment variable `APP_MAIN_HOST`. Which
      Expression Language condition is correct in Symfony 7?
    answers:
      - value: "`context.getHost() == env('APP_MAIN_HOST')`"
        correct: true
      - value: "`request.host == env('APP_MAIN_HOST')`"
        correct: false
      - value: "`env('APP_MAIN_HOST') matches context.getHost()`"
        correct: false
      - value: "`get_env('APP_MAIN_HOST') == context.getHost()`"
        correct: false
    help: The `env()` function in Expression Language allows access to environment
      variables. `context.getHost()` retrieves the host from the
      `RequestContext`.
  - question: What is the purpose of the `_fragment` special routing attribute in
      Symfony 7?
    answers:
      - value: It is used to set the fragment identifier (the part of a URL after `#`)
          for a generated URL.
        correct: true
      - value: It specifies a default HTML fragment to be loaded by the controller.
        correct: false
      - value: It defines a URL fragment that is matched against the request URL.
        correct: false
      - value: It indicates that the route should only be accessible via AJAX requests.
        correct: false
    help: The `_fragment` special parameter is used to set the fragment identifier
      for a URL, which is the optional last part of a URL that starts with a `#`
      character and is used to identify a portion of a document.
  - question: Which of the following commands would you use to get detailed
      information about a specific route, including its properties like Route
      Name and Value, in Symfony 7?
    answers:
      - value: "`php bin/console debug:router <route_name>`"
        correct: true
      - value: "`php bin/console router:info <route_name>`"
        correct: false
      - value: "`php bin/console route:details <route_name>`"
        correct: false
      - value: "`php bin/console show:route <route_name>`"
        correct: false
    help: The `debug:router` command, when provided with a specific route name, will
      display a detailed breakdown of that route's configuration.
  - question: What is the primary role of `Symfony\Component\Routing\Route` in Symfony 7?
    answers:
      - value: It represents a single route definition, including its path, defaults,
          requirements, and options.
        correct: true
      - value: It's a service that matches incoming requests to URLs.
        correct: false
      - value: It's a collection of all routes in the application.
        correct: false
      - value: It's an interface for defining custom route loaders.
        correct: false
    help: The `Route` class is the fundamental building block of Symfony's routing
      system, encapsulating all the configuration for a single URL pattern and
      its associated behavior.
  - question: "When using `RedirectController` in Symfony 7, what is the effect of
      setting `ignoreAttributes: ['offset', 'limit']`?"
    answers:
      - value: It removes only the `offset` and `limit` attributes from the original
          route when redirecting.
        correct: true
      - value: It prevents the `offset` and `limit` query parameters from being passed
          to the redirected URL.
        correct: false
      - value: It ensures that the `offset` and `limit` parameters are always included
          in the redirected URL.
        correct: false
      - value: It ignores any route requirements related to `offset` and `limit`.
        correct: false
    help: The `ignoreAttributes` option in `RedirectController` can accept an array
      of attribute names to specifically exclude from being carried over to the
      redirect target.
  - question: Which of the following is a valid way to define a route in Symfony 7
      using YAML configuration?
    answers:
      - value: |-
          ```yaml
          blog_list:
              path: /blog
              controller: App\\Controller\\BlogController::list
          ```
        correct: true
      - value: |-
          ```yaml
          blog_list:
              route: /blog
              action: App\\Controller\\BlogController::list
          ```
        correct: false
      - value: |-
          ```yaml
          - name: blog_list
            path: /blog
            controller: App\\Controller\\BlogController::list
          ```
        correct: false
      - value: |-
          ```yaml
          /blog:
              _controller: App\\Controller\\BlogController::list
              _name: blog_list
          ```
        correct: false
    help: In YAML, routes are defined as top-level keys (the route name) with nested
      `path` and `controller` keys.
  - question: What is the purpose of the `_format` special routing attribute in
      Symfony 7?
    answers:
      - value: It sets the request format of the `Request` object, influencing the
          `Content-Type` of the response.
        correct: true
      - value: It specifies the expected file extension for the URL.
        correct: false
      - value: It defines the data serialization format for API responses.
        correct: false
      - value: It is used to validate the format of a route parameter.
        correct: false
    help: The `_format` special parameter is used to set the 'request format' of the
      `Request` object, which in turn can determine the `Content-Type` header of
      the response (e.g., `html` for `text/html`, `json` for
      `application/json`).
  - question: You want to define a route that matches a dynamic subdomain, like
      `blog.example.com` or `news.example.com`, and capture the subdomain as a
      parameter. How would you do this using PHP RoutingConfigurator in Symfony
      7?
    answers:
      - value: |-
          ```php
          $routes->add('dynamic_homepage', '/')
              ->controller([MainController::class, 'dynamicHomepage'])
              ->host('{subdomain}.example.com')
              ->requirements(['subdomain' => 'blog|news'])
          ;
          ```
        correct: true
      - value: |-
          ```php
          $routes->add('dynamic_homepage', '/')
              ->controller([MainController::class, 'dynamicHomepage'])
              ->hostPattern('{subdomain}.example.com')
              ->requirements(['subdomain' => 'blog|news'])
          ;
          ```
        correct: false
      - value: |-
          ```php
          $routes->add('dynamic_homepage', '/')
              ->controller([MainController::class, 'dynamicHomepage'])
              ->domain('{subdomain}.example.com')
              ->requirements(['subdomain' => 'blog|news'])
          ;
          ```
        correct: false
      - value: |-
          ```php
          $routes->add('dynamic_homepage', '/')
              ->controller([MainController::class, 'dynamicHomepage'])
              ->host('{subdomain}.example.com')
              ->where('subdomain', 'blog|news')
          ;
          ```
        correct: false
    help: The `host()` method on the `RoutingConfigurator` route definition allows
      specifying dynamic host patterns, and `requirements()` can be used to
      validate the host parameters.
  - question: What is the primary purpose of the `_controller` special routing
      attribute in Symfony 7?
    answers:
      - value: It determines which controller and action is executed when the route is
          matched.
        correct: true
      - value: It defines the default controller to be used if no other controller is
          specified.
        correct: false
      - value: It specifies the service ID of the controller.
        correct: false
      - value: It's used for autowiring controller arguments.
        correct: false
    help: The `_controller` parameter is a special internal routing attribute that
      holds the callable string (or array) representing the controller and
      method to be executed for the matched route.
  - question: Which of the following is a valid way to define a route in Symfony 7
      using PHP attributes?
    answers:
      - value: |-
          ```php
          #[Route('/products/{id}', name: 'product_show')]
          public function show(): Response
          {
              // ...
          }
          ```
        correct: true
      - value: |-
          ```php
          #[Route(path: '/products/{id}', name: 'product_show')]
          public function show(): Response
          {
              // ...
          }
          ```
        correct: true
      - value: |-
          ```php
          #[Route(route: '/products/{id}', name: 'product_show')]
          public function show(): Response
          {
              // ...
          }
          ```
        correct: false
      - value: |-
          ```php
          #[Path('/products/{id}', name: 'product_show')]
          public function show(): Response
          {
              // ...
          }
          ```
        correct: false
    help: The `#[Route]` attribute is the standard way to define routes in Symfony 7
      using PHP attributes. The `path` argument is typically the first argument,
      or can be explicitly named `path:`.
  - question: What is the purpose of the `_fragment` special routing attribute in
      Symfony 7?
    answers:
      - value: It is used to set the fragment identifier (the part of a URL after `#`)
          for a generated URL.
        correct: true
      - value: It specifies a default HTML fragment to be loaded by the controller.
        correct: false
      - value: It defines a URL fragment that is matched against the request URL.
        correct: false
      - value: It indicates that the route should only be accessible via AJAX requests.
        correct: false
    help: The `_fragment` special parameter is used to set the fragment identifier
      for a URL, which is the optional last part of a URL that starts with a `#`
      character and is used to identify a portion of a document.
  - question: Which of the following is a valid way to define a route in Symfony 7
      using YAML configuration?
    answers:
      - value: |-
          ```yaml
          product_show:
              path: /product/{id}
              controller: App\\Controller\\ProductController::show
          ```
        correct: true
      - value: |-
          ```yaml
          /product/{id}:
              _controller: App\\Controller\\ProductController::show
              _name: product_show
          ```
        correct: false
      - value: |-
          ```yaml
          product_show:
              route: /product/{id}
              action: App\\Controller\\ProductController::show
          ```
        correct: false
      - value: |-
          ```yaml
          - product_show:
              path: /product/{id}
              controller: App\\Controller\\ProductController::show
          ```
        correct: false
    help: In YAML, routes are defined as top-level keys (the route name) with nested
      `path` and `controller` keys.
  - question: What is the purpose of the `_locale` special routing attribute in
      Symfony 7?
    answers:
      - value: It sets the locale on the `Request` object for the matched route.
        correct: true
      - value: It defines the default language for the application.
        correct: false
      - value: It's used to translate route paths.
        correct: false
      - value: It specifies the preferred language for the user's browser.
        correct: false
    help: The `_locale` special parameter is used to set the locale on the `Request`
      object, which is crucial for internationalized applications to determine
      the language for content and translations.
  - question: When defining a route with a conditional expression in Symfony 7, how
      can you access the HTTP method of the request?
    answers:
      - value: "`context.getMethod()`"
        correct: true
      - value: "`request.getMethod()`"
        correct: true
      - value: "`context.httpMethod`"
        correct: false
      - value: "`request.method`"
        correct: false
    help: Both `context` (RequestContext) and `request` (Request) variables provide
      access to the HTTP method via the `getMethod()` method in Expression
      Language.
  - question: Which of the following is a valid way to define a route in Symfony 7
      using PHP RoutingConfigurator?
    answers:
      - value: |-
          ```php
          use App\\Controller\\ProductController;
          use Symfony\\Component\\Routing\\Loader\\Configurator\\RoutingConfigurator;

          return static function (RoutingConfigurator $routes): void {
              $routes->add('product_show', '/product/{id}')
                      ->controller('App\\Controller\\ProductController::show');
          };
          ```
        correct: true
      - value: |-
          ```php
          use App\\Controller\\ProductController;
          use Symfony\\Component\\Routing\\Loader\\Configurator\\RoutingConfigurator;

          return static function (RoutingConfigurator $routes): void {
              $routes->route('product_show', '/product/{id}')
                      ->to(ProductController::class, 'show');
          };
          ```
        correct: false
      - value: |-
          ```php
          use App\\Controller\\ProductController;
          use Symfony\\Component\\Routing\\Loader\\Configurator\\RoutingConfigurator;

          return static function (RoutingConfigurator $routes): void {
              $routes->addRoute('product_show', '/product/{id}', ProductController::class . '::show');
          };
          ```
        correct: false
      - value: |-
          ```php
          use App\\Controller\\ProductController;
          use Symfony\\Component\\Routing\\Loader\\Configurator\\RoutingConfigurator;

          return static function (RoutingConfigurator $routes): void {
              $routes->define('product_show', '/product/{id}')
                      ->controller(ProductController::class, 'show');
          };
          ```
        correct: false
    help: The `add()` method of `RoutingConfigurator` is used to define a new route,
      followed by `controller()` to specify the callable.
  - question: What is the purpose of the `_fragment` special routing attribute in
      Symfony 7?
    answers:
      - value: It is used to set the fragment identifier (the part of a URL after `#`)
          for a generated URL.
        correct: true
      - value: It specifies a default HTML fragment to be loaded by the controller.
        correct: false
      - value: It defines a URL fragment that is matched against the request URL.
        correct: false
      - value: It indicates that the route should only be accessible via AJAX requests.
        correct: false
    help: The `_fragment` special parameter is used to set the fragment identifier
      for a URL, which is the optional last part of a URL that starts with a `#`
      character and is used to identify a portion of a document.
  - question: Which of the following is a valid way to define a route in Symfony 7
      using YAML configuration?
    answers:
      - value: |-
          ```yaml
          tools:
              path:       /tools
              controller: App\\Controller\\DefaultController::developerTools
              env:        dev
          ```
        correct: true
      - value: |-
          ```yaml
          tools:
              route: /tools
              action: App\\Controller\\DefaultController::developerTools
              environment: dev
          ```
        correct: false
      - value: |-
          ```yaml
          - name: tools
            path: /tools
            controller: App\\Controller\\DefaultController::developerTools
            env: dev
          ```
        correct: false
      - value: |-
          ```yaml
          /tools:
              _controller: App\\Controller\\DefaultController::developerTools
              _name: tools
              _env: dev
          ```
        correct: false
    help: In YAML, the `env` option is used directly under the route definition to
      restrict its availability to specific environments.
  - question: What is the purpose of the `_locale` special routing attribute in
      Symfony 7?
    answers:
      - value: It sets the locale on the `Request` object for the matched route.
        correct: true
      - value: It defines the default language for the application.
        correct: false
      - value: It's used to translate route paths.
        correct: false
      - value: It specifies the preferred language for the user's browser.
        correct: false
    help: The `_locale` special parameter is used to set the locale on the `Request`
      object, which is crucial for internationalized applications to determine
      the language for content and translations.
  - question: When importing routes from a controller directory in Symfony 7 using
      PHP RoutingConfigurator, how do you apply a common URL prefix and a name
      prefix to all imported routes?
    answers:
      - value: |-
          ```php
          $routes->import('../../src/Controller/', 'attribute')
              ->prefix('/blog')
              ->namePrefix('blog_')
          ;
          ```
        correct: true
      - value: |-
          ```php
          $routes->import('../../src/Controller/', 'attribute')
              ->setPrefix('/blog')
              ->setNamePrefix('blog_')
          ;
          ```
        correct: false
      - value: >-
          ```php

          $routes->import('../../src/Controller/', 'attribute', ['prefix' =>
          '/blog', 'name_prefix' => 'blog_']);

          ```
        correct: false
      - value: |-
          ```php
          $routes->import('../../src/Controller/', 'attribute')
              ->addPrefix('/blog')
              ->addNamePrefix('blog_')
          ;
          ```
        correct: false
    help: The `prefix()` and `namePrefix()` methods on the imported route definition
      in `RoutingConfigurator` are used to apply common prefixes to all routes
      loaded from that resource.
  - question: What is the purpose of the `_format` special routing attribute in
      Symfony 7?
    answers:
      - value: It sets the request format of the `Request` object, influencing the
          `Content-Type` of the response.
        correct: true
      - value: It specifies the expected file extension for the URL.
        correct: false
      - value: It defines the data serialization format for API responses.
        correct: false
      - value: It is used to validate the format of a route parameter.
        correct: false
    help: The `_format` special parameter is used to set the 'request format' of the
      `Request` object, which in turn can determine the `Content-Type` header of
      the response (e.g., `html` for `text/html`, `json` for
      `application/json`).
  - question: When defining a route with a conditional expression in Symfony 7, how
      can you access configuration parameters (e.g., `app.allowed_browsers`)?
    answers:
      - value: "Using the `parameter()` function: `parameter('app.allowed_browsers')`"
        correct: false
      - value: "Directly referencing them: `%app.allowed_browsers%`"
        correct: true
      - value: "Via the `container` variable:
          `container.getParameter('app.allowed_browsers')`"
        correct: false
      - value: They are not accessible in routing conditions.
        correct: false
    help: Configuration parameters can be directly embedded in Expression Language
      conditions using the `%parameter_name%` syntax.
  - question: What is the purpose of the `_fragment` special routing attribute in
      Symfony 7?
    answers:
      - value: It is used to set the fragment identifier (the part of a URL after `#`)
          for a generated URL.
        correct: true
      - value: It specifies a default HTML fragment to be loaded by the controller.
        correct: false
      - value: It defines a URL fragment that is matched against the request URL.
        correct: false
      - value: It indicates that the route should only be accessible via AJAX requests.
        correct: false
    help: The `_fragment` special parameter is used to set the fragment identifier
      for a URL, which is the optional last part of a URL that starts with a `#`
      character and is used to identify a portion of a document.
  - question: Which of the following is a valid way to define a route in Symfony 7
      using PHP attributes?
    answers:
      - value: |-
          ```php
          #[Route('/blog', name: 'blog_list')]
          public function list(): Response
          {
              // ...
          }
          ```
        correct: true
      - value: |-
          ```php
          #[Route(path: '/blog', name: 'blog_list')]
          public function list(): Response
          {
              // ...
          }
          ```
        correct: true
      - value: |-
          ```php
          #[Route(route: '/blog', name: 'blog_list')]
          public function list(): Response
          {
              // ...
          }
          ```
        correct: false
      - value: |-
          ```php
          #[Path('/blog', name: 'blog_list')]
          public function list(): Response
          {
              // ...
          }
          ```
        correct: false
    help: The `#[Route]` attribute is the standard way to define routes in Symfony 7
      using PHP attributes. The `path` argument is typically the first argument,
      or can be explicitly named `path:`.
  - question: What is the purpose of the `_locale` special routing attribute in
      Symfony 7?
    answers:
      - value: It sets the locale on the `Request` object for the matched route.
        correct: true
      - value: It defines the default language for the application.
        correct: false
      - value: It's used to translate route paths.
        correct: false
      - value: It specifies the preferred language for the user's browser.
        correct: false
    help: The `_locale` special parameter is used to set the locale on the `Request`
      object, which is crucial for internationalized applications to determine
      the language for content and translations.
  - question: When defining a route with a conditional expression in Symfony 7, how
      can you access the `_locale` route parameter?
    answers:
      - value: "`params['_locale']`"
        correct: true
      - value: "`request.attributes.get('_locale')`"
        correct: true
      - value: "`_locale`"
        correct: false
      - value: "`context.locale`"
        correct: false
    help: The `params` variable provides access to all matched route parameters,
      including special ones like `_locale`. You can also access it via
      `request.attributes->get('_locale')`.
  - question: What is the purpose of the `_fragment` special routing attribute in
      Symfony 7?
    answers:
      - value: It is used to set the fragment identifier (the part of a URL after `#`)
          for a generated URL.
        correct: true
      - value: It specifies a default HTML fragment to be loaded by the controller.
        correct: false
      - value: It defines a URL fragment that is matched against the request URL.
        correct: false
      - value: It indicates that the route should only be accessible via AJAX requests.
        correct: false
    help: The `_fragment` special parameter is used to set the fragment identifier
      for a URL, which is the optional last part of a URL that starts with a `#`
      character and is used to identify a portion of a document.
  - question: Which of the following is a valid way to define a route in Symfony 7
      using YAML configuration?
    answers:
      - value: |-
          ```yaml
          article_search:
            path:        /articles/{_locale}/search.{_format}
            controller:  App\\Controller\\ArticleController::search
            locale:      en
            format:      html
            requirements:
                _locale: en|fr
                _format: html|xml
          ```
        correct: true
      - value: |-
          ```yaml
          article_search:
            path:        /articles/{_locale}/search.{_format}
            controller:  App\\Controller\\ArticleController::search
            defaults:
                _locale: en
                _format: html
            requirements:
                _locale: en|fr
                _format: html|xml
          ```
        correct: true
      - value: |-
          ```yaml
          article_search:
            path:        /articles/{_locale}/search.{_format}
            controller:  App\\Controller\\ArticleController::search
            options:
                locale: en
                format: html
            requirements:
                _locale: en|fr
                _format: html|xml
          ```
        correct: false
      - value: |-
          ```yaml
          article_search:
            route:        /articles/{_locale}/search.{_format}
            action:  App\\Controller\\ArticleController::search
            locale:      en
            format:      html
            constraints:
                _locale: en|fr
                _format: html|xml
          ```
        correct: false
    help: Special parameters like `_locale` and `_format` can be defined directly in
      the route configuration, including default values and requirements.
  - question: What is the purpose of the `_locale` special routing attribute in
      Symfony 7?
    answers:
      - value: It sets the locale on the `Request` object for the matched route.
        correct: true
      - value: It defines the default language for the application.
        correct: false
      - value: It's used to translate route paths.
        correct: false
      - value: It specifies the preferred language for the user's browser.
        correct: false
    help: The `_locale` special parameter is used to set the locale on the `Request`
      object, which is crucial for internationalized applications to determine
      the language for content and translations.
  - question: When defining a route with a conditional expression in Symfony 7, how
      can you access the `_format` route parameter?
    answers:
      - value: "`params['_format']`"
        correct: true
      - value: "`request.attributes.get('_format')`"
        correct: true
      - value: "`_format`"
        correct: false
      - value: "`context.format`"
        correct: false
    help: The `params` variable provides access to all matched route parameters,
      including special ones like `_format`. You can also access it via
      `request.attributes->get('_format')`.
  - question: What is the purpose of the `_fragment` special routing attribute in
      Symfony 7?
    answers:
      - value: It is used to set the fragment identifier (the part of a URL after `#`)
          for a generated URL.
        correct: true
      - value: It specifies a default HTML fragment to be loaded by the controller.
        correct: false
      - value: It defines a URL fragment that is matched against the request URL.
        correct: false
      - value: It indicates that the route should only be accessible via AJAX requests.
        correct: false
    help: The `_fragment` special parameter is used to set the fragment identifier
      for a URL, which is the optional last part of a URL that starts with a `#`
      character and is used to identify a portion of a document.
  - question: Which of the following is a valid way to define a route in Symfony 7
      using PHP attributes?
    answers:
      - value: |-
          ```php
          #[Route('/articles/{_locale}/search.{_format}',
              locale: 'en',
              format: 'html',
              requirements: [
                  '_locale' => 'en|fr',
                  '_format' => 'html|xml',
              ],
          )]
          public function search(): Response
          {
              // ...
          }
          ```
        correct: true
      - value: |-
          ```php
          #[Route('/articles/{_locale}/search.{_format}',
              defaults: ['_locale' => 'en', '_format' => 'html'],
              requirements: [
                  '_locale' => 'en|fr',
                  '_format' => 'html|xml',
              ],
          )]
          public function search(): Response
          {
              // ...
          }
          ```
        correct: true
      - value: |-
          ```php
          #[Route('/articles/{_locale}/search.{_format}',
              options: ['locale' => 'en', 'format' => 'html'],
              requirements: [
                  '_locale' => 'en|fr',
                  '_format' => 'html|xml',
              ],
          )]
          public function search(): Response
          {
              // ...
          }
          ```
        correct: false
      - value: |-
          ```php
          #[Route('/articles/{_locale}/search.{_format}',
              defaultLocale: 'en',
              defaultFormat: 'html',
              regexes: [
                  '_locale' => 'en|fr',
                  '_format' => 'html|xml',
              ],
          )]
          public function search(): Response
          {
              // ...
          }
          ```
        correct: false
    help: Special parameters like `_locale` and `_format` can be directly configured
      in the `#[Route]` attribute using `locale`, `format`, and `requirements`
      options.
