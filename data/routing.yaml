category: Routing

questions:
  -
    question: >
      Which PHP attribute is used to define a route directly within a Symfony controller method?
    answers:
      - { value: '`#[Route]`', correct: true }
      - { value: '`#[Path]`', correct: false }
      - { value: '`#[Url]`', correct: false }
      - { value: '`#[Mapping]`', correct: false }
    help: |
      The `#[Route]` attribute is the standard way to define routes directly on controller methods or classes in Symfony.
      https://symfony.com/doc/current/routing.html#defining-routes-as-php-attributes

  -
    question: |
      In YAML, how would you define a basic route named `blog_list` for the path `/blog` that maps to `App\Controller\BlogController::list`?

      ```yaml
      # config/routes.yaml
      blog_list:
          # ???
      ```
    answers:
      - { value: '`path: /blog` and `controller: App\\Controller\\BlogController::list`', correct: true }
      - { value: '`url: /blog` and `action: App\\Controller\\BlogController::list`', correct: false }
      - { value: '`route: /blog` and `handler: App\\Controller\\BlogController::list`', correct: false }
      - { value: '`path: /blog` and `service: App\\Controller\\BlogController::list`', correct: false }
    help: |
      In YAML routing configuration, `path` defines the URL pattern and `controller` specifies the controller and method to execute.
      https://symfony.com/doc/current/routing.html#defining-routes-in-yaml

  -
    question: |
      Consider the following PHP attribute definition for a route:

      ```php
      // src/Controller/BlogController.php
      class BlogController extends AbstractController
      {
          #[Route('/blog/{page}', name: 'blog_list', requirements: ['page' => '\d+'])]
          public function list(int $page): Response
          {
              // ...
          }
      }
      ```
      What is the purpose of `requirements: ['page' => '\d+']` in this route definition?
    answers:
      - { value: 'It ensures the `page` parameter is a string containing only digits.', correct: true }
      - { value: 'It sets a default value of `0` for the `page` parameter if not provided.', correct: false }
      - { value: 'It specifies that the `page` parameter is optional.', correct: false }
      - { value: 'It defines the data type of the `$page` argument in the controller method.', correct: false }
      - { value: 'It restricts the `page` parameter to be an integer.', correct: true }
    help: |
      Route requirements use regular expressions to validate the format of URL parameters. `\d+` ensures one or more digits.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: |
      How would you configure a route in YAML to ensure the `slug` parameter only accepts alphanumeric characters and hyphens?

      ```yaml
      # config/routes.yaml
      blog_show:
          path:       /blog/{slug}
          controller: App\Controller\BlogController::show
          # ???
      ```
    answers:
      - { value: '`requirements: { slug: \'[a-zA-Z0-9-]+\' }`', correct: true }
      - { value: '`defaults: { slug: \'[a-zA-Z0-9-]+\' }`', correct: false }
      - { value: '`options: { slug_regex: \'[a-zA-Z0-9-]+\' }`', correct: false }
      - { value: '`constraints: { slug: \'[a-zA-Z0-9-]+\' }`', correct: false }
    help: |
      The `requirements` key in YAML is used to define regular expression constraints for route parameters.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: |
      Given the route definition below, what will be the value of `$page` if the URL `/blog` is accessed?

      ```php
      // src/Controller/BlogController.php
      class BlogController extends AbstractController
      {
          #[Route('/blog/{page<\d+>}', name: 'blog_list', defaults: ['page' => 1])]
          public function list(int $page): Response
          {
              // ...
          }
      }
      ```
    answers:
      - { value: '`1`', correct: true }
      - { value: '`null`', correct: false }
      - { value: 'An error will occur because `page` is required.', correct: false }
      - { value: '`0`', correct: false }
    help: |
      The `defaults` option provides a default value for a route parameter if it's not present in the URL.
      https://symfony.com/doc/current/routing.html#setting-default-values-for-parameters

  -
    question: |
      You want to set a default value for the `category` parameter in a YAML route. Which key should you use?

      ```yaml
      # config/routes.yaml
      product_list:
          path:       /products/{category}
          controller: App\Controller\ProductController::list
          # ???
              category: 'all'
      ```
    answers:
      - { value: '`defaults:`', correct: true }
      - { value: '`parameters:`', correct: false }
      - { value: '`options:`', correct: false }
      - { value: '`values:`', correct: false }
    help: |
      The `defaults` key in YAML is used to specify default values for route parameters.
      https://symfony.com/doc/current/routing.html#setting-default-values-for-parameters

  -
    question: >
      From a Symfony controller extending `AbstractController`, which method is used to generate a URL for a given route name?
    answers:
      - { value: '`$this->generateUrl()`', correct: true }
      - { value: '`$this->router->generate()`', correct: true }
      - { value: '`$this->getUrl()`', correct: false }
      - { value: '`$this->createUrl()`', correct: false }
      - { value: '`$this->getRouteUrl()`', correct: false }
    help: |
      The `AbstractController` provides a `generateUrl()` helper method, which internally uses the `UrlGeneratorInterface`.
      https://symfony.com/doc/current/routing.html#generating-urls-in-controllers

  -
    question: |
      You need to generate an absolute URL (e.g., `http://example.com/login`) for the `app_login` route within a Symfony service. Which constant from `UrlGeneratorInterface` should you pass as the third argument to the `generate()` method?
    answers:
      - { value: '`UrlGeneratorInterface::ABSOLUTE_URL`', correct: true }
      - { value: '`UrlGeneratorInterface::ABSOLUTE_PATH`', correct: false }
      - { value: '`UrlGeneratorInterface::NETWORK_PATH`', correct: false }
      - { value: '`UrlGeneratorInterface::RELATIVE_PATH`', correct: false }
      - { value: '`UrlGeneratorInterface::FULL_URL`', correct: false }
    help: |
      `UrlGeneratorInterface::ABSOLUTE_URL` generates a URL with the scheme, host, and path.
      https://symfony.com/doc/current/routing.html#generating-urls-in-services

  -
    question: >
      To redirect an old URL `/doc` to a new internal route `doc_page` with a permanent redirect (HTTP 301), which Symfony controller should you use in your routing configuration?
    answers:
      - { value: '`Symfony\\Bundle\\FrameworkBundle\\Controller\\RedirectController`', correct: true }
      - { value: '`Symfony\\Component\\HttpFoundation\\RedirectResponse`', correct: false }
      - { value: '`Symfony\\Component\\Routing\\Controller\\ForwardController`', correct: false }
      - { value: '`App\\Controller\\DefaultRedirectController`', correct: false }
    help: |
      The `RedirectController` is specifically designed for configuring redirects directly in routing.
      https://symfony.com/doc/current/routing.html#redirecting-routes

  -
    question: |
      You want to configure a route to permanently redirect `/legacy/doc` to `https://legacy.example.com/doc`. In YAML, which `defaults` key is used to specify the target URL for an external redirect?

      ```yaml
      # config/routes.yaml
      legacy_doc:
          path: /legacy/doc
          controller: Symfony\Bundle\FrameworkBundle\Controller\RedirectController
          defaults:
              # ???
              permanent: true
      ```
    answers:
      - { value: '`path: ''https://legacy.example.com/doc''`', correct: true }
      - { value: '`url: ''https://legacy.example.com/doc''`', correct: false }
      - { value: '`target: ''https://legacy.example.com/doc''`', correct: false }
      - { value: '`redirect_url: ''https://legacy.example.com/doc''`', correct: false }
    help: |
      When redirecting to an external URL using `RedirectController`, the `path` default parameter specifies the target URL.
      https://symfony.com/doc/current/routing.html#redirecting-to-an-absolute-path-or-external-url

  -
    question: >
      Which special internal routing attribute is used by Symfony to determine which controller and action should be executed when a route is matched?
    answers:
      - { value: '`_controller`', correct: true }
      - { value: '`_action`', correct: false }
      - { value: '`_handler`', correct: false }
      - { value: '`_target`', correct: false }
    help: |
      The `_controller` attribute holds the reference to the controller and method that will handle the request.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes

  -
    question: >
      The `_format` special internal routing attribute is used to set which property of the `Request` object?
    answers:
      - { value: 'The request format, which influences the `Content-Type` of the response.', correct: true }
      - { value: 'The request method (e.g., GET, POST).', correct: false }
      - { value: 'The preferred language for the response.', correct: false }
      - { value: 'The URL path suffix.', correct: false }
    help: |
      The `_format` attribute is used to set the "request format" of the `Request` object, which can then be used to determine the `Content-Type` of the response.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes

  -
    question: |
      How would you define a route using PHP attributes that only matches requests to `m.example.com`?

      ```php
      // src/Controller/MainController.php
      class MainController extends AbstractController
      {
          #[Route('/', name: 'mobile_homepage', # ???)]
          public function mobileHomepage(): Response
          {
              // ...
          }
      }
      ```
    answers:
      - { value: '`host: ''m.example.com''`', correct: true }
      - { value: '`domain: ''m.example.com''`', correct: false }
      - { value: '`hostname: ''m.example.com''`', correct: false }
      - { value: '`server: ''m.example.com''`', correct: false }
    help: |
      The `host` option in the `#[Route]` attribute allows you to match routes based on the domain name.
      https://symfony.com/doc/current/routing.html#matching-a-domain-name

  -
    question: |
      Which of the following YAML configurations correctly defines a route that matches requests to `sub.example.com` where `sub` can be either `m` or `mobile`, with `m` as the default?

      ```yaml
      # config/routes.yaml
      mobile_homepage:
          path:       /
          controller: App\Controller\MainController::mobileHomepage
          host:       "{subdomain}.example.com"
          # ???
      ```
    answers:
      - { value: '`defaults: { subdomain: m }` and `requirements: { subdomain: m|mobile }`', correct: true }
      - { value: '`default_subdomain: m` and `subdomain_pattern: m|mobile`', correct: false }
      - { value: '`parameters: { subdomain: m }` and `constraints: { subdomain: m|mobile }`', correct: false }
      - { value: '`values: { subdomain: m }` and `regex: { subdomain: m|mobile }`', correct: false }
    help: |
      Dynamic host parameters use the same `defaults` and `requirements` syntax as path parameters.
      https://symfony.com/doc/current/routing.html#matching-a-domain-name

  -
    question: |
      You want a route to only match `GET` or `HEAD` requests and only if the `User-Agent` header contains "firefox". Which expression language condition would achieve this in a PHP attribute?

      ```php
      #[Route(
          '/contact',
          name: 'contact',
          condition: # ???
      )]
      public function contact(): Response
      {
          // ...
      }
      ```
    answers:
      - { value: '`"context.getMethod() in [''GET'', ''HEAD''] and request.headers.get(''User-Agent'') matches ''/firefox/i''"`', correct: true }
      - { value: '`"request.getMethod() in [''GET'', ''HEAD''] and request.headers.get(''User-Agent'') contains ''firefox''"`', correct: false }
      - { value: '`"method == 'GET' or method == 'HEAD' and headers['User-Agent'] matches '/firefox/i'"`', correct: false }
      - { value: '`"context.isMethod('GET') or context.isMethod('HEAD') and request.headers.has('User-Agent', '/firefox/i')"`', correct: false }
    help: |
      The `condition` option uses Symfony's Expression Language. `context.getMethod()` accesses the HTTP method, and `request.headers.get()` accesses request headers.
      https://symfony.com/doc/current/routing.html#adding-conditions-to-routes

  -
    question: |
      Given a route `/posts/{id}` and a controller method `showPost(int $id)`, how can you add a condition that the `id` parameter must be less than 1000 using Expression Language in YAML?

      ```yaml
      # config/routes.yaml
      post_show:
          path:       /posts/{id}
          controller: App\Controller\DefaultController::showPost
          # ???
      ```
    answers:
      - { value: '`condition: "params[''id''] < 1000"`', correct: true }
      - { value: '`condition: "id < 1000"`', correct: false }
      - { value: '`where: "params.id < 1000"`', correct: false }
      - { value: '`filter: "id < 1000"`', correct: false }
    help: |
      The `params` variable in Expression Language provides access to matched route parameters.
      https://symfony.com/doc/current/routing.html#adding-conditions-to-routes

  -
    question: >
      Which of the following HTTP methods are implicitly matched by a route if no specific `methods` are defined in its configuration?
    answers:
      - { value: '`GET`', correct: true }
      - { value: '`HEAD`', correct: true }
      - { value: '`POST`', correct: false }
      - { value: '`PUT`', correct: false }
      - { value: '`DELETE`', correct: false }
    help: |
      By default, routes match `GET` and `HEAD` requests if no explicit methods are specified.
      https://symfony.com/doc/current/routing.html#matching-http-methods

  -
    question: |
      You are defining a localized route for an "about us" page. In PHP attributes, how would you specify different paths for English (`en`) and Dutch (`nl`) locales?

      ```php
      // src/Controller/CompanyController.php
      class CompanyController extends AbstractController
      {
          #[Route(path: [
              // ???
          ], name: 'about_us')]
          public function about(): Response
          {
              // ...
          }
      }
      ```
    answers:
      - { value: '`''en'' => ''/about-us'', ''nl'' => ''/over-ons''`', correct: true }
      - { value: '`locale: { en: ''/about-us'', nl: ''/over-ons'' }`', correct: false }
      - { value: '`paths: { en: ''/about-us'', nl: ''/over-ons'' }`', correct: false }
      - { value: '`localized_paths: { en: ''/about-us'', nl: ''/over-ons'' }`', correct: false }
    help: |
      The `path` option in `#[Route]` can accept an associative array mapping locales to their respective paths.
      https://symfony.com/doc/current/routing.html#localized-routes

  -
    question: >
      When generating a URL for a localized route, if you do not explicitly pass the `_locale` parameter, what locale will Symfony use by default?
    answers:
      - { value: 'The current request''s locale.', correct: true }
      - { value: 'The default locale defined in `framework.yaml`.', correct: false }
      - { value: 'The first locale defined in the route configuration.', correct: false }
      - { value: 'The browser''s preferred language.', correct: false }
    help: |
      Symfony's URL generator defaults to the current request's locale when generating URLs for localized routes.
      https://symfony.com/doc/current/routing.html#generating-urls-in-controllers

  -
    question: >
      Which Symfony console command is used to list all registered routes in your application?
    answers:
      - { value: '`php bin/console debug:router`', correct: true }
      - { value: '`php bin/console router:list`', correct: false }
      - { value: '`php bin/console routes:show`', correct: false }
      - { value: '`php bin/console list:routes`', correct: false }
    help: |
      The `debug:router` command provides a comprehensive list of all routes.
      https://symfony.com/doc/current/routing.html#listing-all-routes

  -
    question: >
      To display detailed information for a specific route, such as `app_lucky_number`, using the router debugging command, what would be the correct syntax?
    answers:
      - { value: '`php bin/console debug:router app_lucky_number`', correct: true }
      - { value: '`php bin/console router:info app_lucky_number`', correct: false }
      - { value: '`php bin/console debug:route app_lucky_number`', correct: false }
      - { value: '`php bin/console router:show app_lucky_number`', correct: false }
    help: |
      You can pass the route name as an argument to `debug:router` to get its details.
      https://symfony.com/doc/current/routing.html#displaying-the-details-of-a-specific-route

  -
    question: |
      Consider two routes: `/blog/{slug}` (name: `blog_show`) and `/blog/list` (name: `blog_list`). If `blog_show` is defined before `blog_list` in the same controller, what might happen, and how can `blog_list` be made to match correctly?
    answers:
      - { value: '`blog_show` will greedily match `/blog/list`. `blog_list` needs a higher `priority` (e.g., `priority: 2`).', correct: true }
      - { value: '`blog_list` will always be matched first due to its static path.', correct: false }
      - { value: 'An error will occur due to conflicting routes.', correct: false }
      - { value: 'The order of definition does not matter; Symfony automatically resolves conflicts.', correct: false }
    help: |
      Routes are matched in the order they are loaded. A more specific route like `/blog/list` needs a higher priority to be matched before a greedy route like `/blog/{slug}`.
      https://symfony.com/doc/current/routing.html#route-priority

  -
    question: >
      What is the primary purpose of defining a route alias in Symfony?
    answers:
      - { value: 'To provide an alternative name for an existing route, useful for backward compatibility.', correct: true }
      - { value: 'To create a redirect from one route to another.', correct: false }
      - { value: 'To define a route that can be accessed via multiple HTTP methods.', correct: false }
      - { value: 'To group multiple routes under a common prefix.', correct: false }
    help: |
      Route aliases allow you to refer to the same route definition using different names.
      https://symfony.com/doc/current/routing.html#route-aliases

  -
    question: |
      You have a route named `product_show` that you want to deprecate in favor of `product_details`. How would you configure this in YAML to mark `product_show` as deprecated while aliasing it to `product_details`?

      ```yaml
      # config/routes.yaml
      product_details:
          path: /product/{id}
          controller: App\Controller\ProductController::show

      product_show:
          alias: product_details
          # ???
      ```
    answers:
      - { value: '`deprecated: { package: ''acme/package'', version: ''1.2'' }`', correct: true }
      - { value: '`status: deprecated`', correct: false }
      - { value: '`deprecation_message: ''This route is deprecated.''`', correct: false }
      - { value: '`obsolete: true`', correct: false }
    help: |
      The `deprecated` key with `package` and `version` is used to mark a route alias as deprecated.
      https://symfony.com/doc/current/routing.html#deprecating-route-aliases

  -
    question: |
      By default, Symfony route parameters do not match the `/` (slash) character. How can you configure a route parameter `token` to allow slashes within its value using PHP attributes?

      ```php
      // src/Controller/DefaultController.php
      class DefaultController extends AbstractController
      {
          #[Route('/share/{token}', name: 'share', # ???)]
          public function share($token): Response
          {
              // ...
          }
      }
      ```
    answers:
      - { value: '`requirements: [''token'' => ''.+'']`', correct: true }
      - { value: '`allow_slashes: [''token'']`', correct: false }
      - { value: '`options: { token_allow_slash: true }`', correct: false }
      - { value: '`regex: { token: ''.*'' }`', correct: false }
    help: |
      To allow slashes in a route parameter, you must define a requirement that matches the slash character, such as `.+`.
      https://symfony.com/doc/current/routing.html#allowing-a-slash-character-in-a-route-parameter

  -
    question: |
      You want to apply a common URL prefix `/admin` to all routes imported from `src/Controller/Admin/`. How would you achieve this in a PHP routing configuration file?

      ```php
      // config/routes/admin.php
      use Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator;

      return static function (RoutingConfigurator $routes): void {
          $routes->import('../../src/Controller/Admin/', 'attribute')
              # ???
          ;
      };
      ```
    answers:
      - { value: '`->prefix(''/admin'')`', correct: true }
      - { value: '`->urlPrefix(''/admin'')`', correct: false }
      - { value: '`->addPrefix(''/admin'')`', correct: false }
      - { value: '`->setPrefix(''/admin'')`', correct: false }
    help: |
      The `prefix()` method on the imported route collection allows adding a URL prefix to all imported routes.
      https://symfony.com/doc/current/routing.html#route-groups-and-collections

  -
    question: |
      When importing routes, you want all imported route names to be prefixed with `blog_`. Which option in YAML configuration would you use?

      ```yaml
      # config/routes/attributes.yaml
      controllers:
          resource: '../../src/Controller/'
          type: attribute
          # ???
      ```
    answers:
      - { value: '`name_prefix: ''blog_''`', correct: true }
      - { value: '`prefix_name: ''blog_''`', correct: false }
      - { value: '`route_name_prefix: ''blog_''`', correct: false }
      - { value: '`namePrefix: ''blog_''`', correct: false }
    help: |
      The `name_prefix` option applies a prefix to all route names within the imported collection.
      https://symfony.com/doc/current/routing.html#route-groups-and-collections

  -
    question: >
      What is the purpose of marking a route as `stateless: true` in Symfony?
    answers:
      - { value: 'To prevent session usage during request matching, improving caching.', correct: true }
      - { value: 'To indicate that the route does not require any authentication.', correct: false }
      - { value: 'To disable CSRF protection for the route.', correct: false }
      - { value: 'To force the route to always return a JSON response.', correct: false }
    help: |
      Stateless routes do not use sessions during matching, which can be beneficial for caching.
      https://symfony.com/doc/current/routing.html#stateless-routes

  -
    question: |
      Given a PHP backed enum `OrderStatusEnum` with cases like `OrderStatusEnum::Paid`, how does Symfony handle it when used as a route parameter in a controller method?

      ```php
      // src/Controller/OrderController.php
      class OrderController extends AbstractController
      {
          #[Route('/orders/list/{status}', name: 'list_orders_by_status')]
          public function list(OrderStatusEnum $status): Response
          {
              // ...
          }
      }
      ```
    answers:
      - { value: 'Symfony automatically converts the scalar value from the URL to an instance of `OrderStatusEnum`.', correct: true }
      - { value: 'Symfony requires a custom ParamConverter to handle the enum conversion.', correct: false }
      - { value: 'The route parameter must be type-hinted as `string` or `int`, not the enum itself.', correct: false }
      - { value: 'An error will occur because enums cannot be used directly as route parameters.', correct: false }
    help: |
      Symfony automatically resolves PHP backed enums from route parameters to their corresponding enum instances.
      https://symfony.com/doc/current/routing.html#route-parameters-php-backed-enums

  -
    question: >
      When generating a URL using `UrlGeneratorInterface::generate()`, which constant should be used as the third argument to produce a URL that is relative to the current host, but includes the scheme (e.g., `//example.com/path`)?
    answers:
      - { value: '`UrlGeneratorInterface::NETWORK_PATH`', correct: true }
      - { value: '`UrlGeneratorInterface::ABSOLUTE_URL`', correct: false }
      - { value: '`UrlGeneratorInterface::ABSOLUTE_PATH`', correct: false }
      - { value: '`UrlGeneratorInterface::RELATIVE_PATH`', correct: false }
    help: |
      `NETWORK_PATH` generates a URL that is relative to the current host but includes the scheme.
      https://symfony.com/doc/current/routing.html#generating-urls-in-services

  -
    question: >
      You are generating a URL for a route that expects an `id` parameter. If the `id` is an object (e.g., a UUID object), what is the recommended practice before passing it to `generateUrl()`?
    answers:
      - { value: 'Explicitly cast the object to a string (e.g., `(string) $entity->getUuid()`).', correct: true }
      - { value: 'Pass the object directly; Symfony will handle the conversion.', correct: false }
      - { value: 'Implement a custom `__toString()` method on the object.', correct: true }
      - { value: 'Use a ParamConverter to transform the object before URL generation.', correct: false }
    help: |
      When passing objects as extra parameters to `generateUrl()`, they should be explicitly converted to strings to avoid unexpected behavior. Implementing `__toString()` is also a valid approach for objects that can be represented as strings.
      https://symfony.com/doc/current/routing.html#extra-url-parameters

  -
    question: >
      What is the recommended way to check if a route exists in Symfony without negatively impacting performance by regenerating the routing cache?
    answers:
      - { value: 'Attempt to generate the URL and catch `Symfony\\Component\\Routing\\Exception\\RouteNotFoundException`.', correct: true }
      - { value: 'Inspect the `RouteCollection` directly for the route name.', correct: false }
      - { value: 'Use `Router::hasRoute($routeName)`.', correct: false }
      - { value: 'Call `debug:router` command from PHP.', correct: false }
    help: |
      Catching `RouteNotFoundException` is the preferred and performant way to check for route existence.
      https://symfony.com/doc/current/routing.html#checking-if-a-route-exists

  -
    question: >
      Which command can you use to identify which Symfony route matches a specific URL path, for example, `/lucky/number/8`?
    answers:
      - { value: '`php bin/console router:match /lucky/number/8`', correct: true }
      - { value: '`php bin/console route:find /lucky/number/8`', correct: false }
      - { value: '`php bin/console debug:url /lucky/number/8`', correct: false }
      - { value: '`php bin/console match:route /lucky/number/8`', correct: false }
    help: |
      The `router:match` command helps debug routing by showing which route matches a given URL.
      https://symfony.com/doc/current/routing.html#matching-a-url

  -
    question: |
      You are importing routes from `../../src/Controller/` using PHP configuration. How can you exclude `Debug*Controller.php` files from being loaded?

      ```php
      // config/routes/attributes.php
      use Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator;

      return static function (RoutingConfigurator $routes): void {
          $routes->import(
              '../../src/Controller/',
              'attribute',
              false,
              # ???
          )
          ;
      };
      ```
    answers:
      - { value: '`'../../src/Controller/{Debug*Controller.php}'`', correct: true }
      - { value: '`exclude: [''Debug*Controller.php'']`', correct: false }
      - { value: '`ignore: '../../src/Controller/Debug*Controller.php'`', correct: false }
      - { value: '`filter: '!Debug*Controller.php'`', correct: false }
    help: |
      The fourth argument of `import()` can be a glob pattern (or an array of patterns) to exclude files.
      https://symfony.com/doc/current/routing.html#excluding-files-or-subdirectories

  -
    question: |
      You want to apply locale-specific URL prefixes to imported routes. For English (`en`), there should be no prefix, but for Dutch (`nl`), the prefix should be `/nl`. How would you configure this in YAML?

      ```yaml
      # config/routes/attributes.yaml
      controllers:
          resource: '../../src/Controller/'
          type: attribute
          # ???
      ```
    answers:
      - { value: '`prefix: { en: '''', nl: ''/nl'' }`', correct: true }
      - { value: '`locale_prefix: { en: '''', nl: ''/nl'' }`', correct: false }
      - { value: '`prefixes: { en: '''', nl: ''/nl'' }`', correct: false }
      - { value: '`url_prefix: { en: '''', nl: ''/nl'' }`', correct: false }
    help: |
      The `prefix` option can take an associative array mapping locales to their prefixes.
      https://symfony.com/doc/current/routing.html#prefixing-imported-routes-by-locale

  -
    question: >
      To ensure that all routes imported from a specific controller directory are only accessible over HTTPS, which option should you use in your YAML routing configuration?
    answers:
      - { value: '`schemes: [https]`', correct: true }
      - { value: '`security: https_only`', correct: false }
      - { value: '`require_https: true`', correct: false }
      - { value: '`protocol: https`', correct: false }
    help: |
      The `schemes` option on an imported resource forces all routes within that resource to match only the specified scheme(s).
      https://symfony.com/doc/current/routing.html#forcing-a-scheme-https

  -
    question: >
      What is the primary role of the `_fragment` special internal routing attribute?
    answers:
      - { value: 'To set the fragment identifier (the part of a URL after `#`) for a route.', correct: true }
      - { value: 'To define a default HTML fragment to be rendered by the controller.', correct: false }
      - { value: 'To specify a partial template to be included in the response.', correct: false }
      - { value: 'To indicate that the route should return an HTML fragment instead of a full page.', correct: false }
    help: |
      The `_fragment` attribute is used to set the fragment identifier for a URL.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes

  -
    question: >
      The `_locale` special internal routing attribute is primarily used for what purpose in Symfony?
    answers:
      - { value: 'To set the locale on the `Request` object, influencing translation and content negotiation.', correct: true }
      - { value: 'To define the default language for the entire application.', correct: false }
      - { value: 'To specify the language of the route path itself.', correct: false }
      - { value: 'To determine the user''s timezone.', correct: false }
    help: |
      The `_locale` attribute is used to set the locale on the `Request` object, which is crucial for internationalization.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes

  -
    question: >
      In Symfony's Expression Language for routing conditions, what does the `context` variable represent?
    answers:
      - { value: 'An instance of `Symfony\\Component\\Routing\\RequestContext`, providing information about the route being matched.', correct: true }
      - { value: 'The current `Symfony\\Component\\HttpFoundation\\Request` object.', correct: false }
      - { value: 'An array of matched route parameters.', correct: false }
      - { value: 'The application''s dependency injection container.', correct: false }
    help: |
      The `context` variable in Expression Language for routing conditions is an instance of `RequestContext`.
      https://symfony.com/doc/current/routing.html#expression-language-variables-and-functions

  -
    question: >
      When using Expression Language for route conditions, what does the `request` variable provide access to?
    answers:
      - { value: 'The `Symfony\\Component\\HttpFoundation\\Request` object representing the current HTTP request.', correct: true }
      - { value: 'The `Symfony\\Component\\HttpFoundation\\Response` object being built.', correct: false }
      - { value: 'An array of request headers only.', correct: false }
      - { value: 'The route parameters and their values.', correct: false }
    help: |
      The `request` variable in Expression Language for routing conditions is the `Request` object.
      https://symfony.com/doc/current/routing.html#expression-language-variables-and-functions

  -
    question: >
      In Expression Language for route conditions, how do you access the value of a matched route parameter named `id`?
    answers:
      - { value: '`params[''id'']`', correct: true }
      - { value: '`request.attributes.get('id')`', correct: false }
      - { value: '`context.parameters.id`', correct: false }
      - { value: '`id` (directly)', correct: false }
    help: |
      The `params` variable is an array of matched route parameters.
      https://symfony.com/doc/current/routing.html#expression-language-variables-and-functions

  -
    question: >
      Which Expression Language function allows you to retrieve the value of an environment variable within a route condition?
    answers:
      - { value: '`env(string $name)`', correct: true }
      - { value: '`getenv(string $name)`', correct: false }
      - { value: '`parameter(string $name)`', correct: false }
      - { value: '`config(string $name)`', correct: false }
    help: |
      The `env()` function provides access to environment variables.
      https://symfony.com/doc/current/routing.html#expression-language-variables-and-functions

  -
    question: >
      What is the purpose of the `service(string $alias)` function in Symfony's Expression Language for routing conditions?
    answers:
      - { value: 'It returns a service instance that has been tagged with `#[AsRoutingConditionService]` or `routing.condition_service`.', correct: true }
      - { value: 'It allows injecting any service from the container into the routing condition.', correct: false }
      - { value: 'It defines a new service dynamically for use in the condition.', correct: false }
      - { value: 'It checks if a service exists in the container.', correct: false }
    help: |
      The `service()` function allows using specific services as part of routing conditions, provided they are correctly tagged.
      https://symfony.com/doc/current/routing.html#expression-language-variables-and-functions

  -
    question: >
      When would `UrlGeneratorInterface::ABSOLUTE_PATH` be the appropriate reference type to use when generating a URL?
    answers:
      - { value: 'When you need a URL that starts with a slash and is relative to the web root (e.g., `/blog/post`).', correct: true }
      - { value: 'When you need a full URL including the scheme and host (e.g., `http://example.com/blog/post`).', correct: false }
      - { value: 'When you need a URL relative to the current document (e.g., `../post`).', correct: false }
      - { value: 'When you need a scheme-relative URL (e.g., `//example.com/blog/post`).', correct: false }
    help: |
      `ABSOLUTE_PATH` generates a URL that is an absolute path relative to the web root.
      https://symfony.com/doc/current/routing.html#generating-urls-in-services

  -
    question: >
      Which `UrlGeneratorInterface` constant should you use to generate a URL that is relative to the current document (e.g., `../post` or `post`)?
    answers:
      - { value: '`UrlGeneratorInterface::RELATIVE_PATH`', correct: true }
      - { value: '`UrlGeneratorInterface::ABSOLUTE_PATH`', correct: false }
      - { value: '`UrlGeneratorInterface::NETWORK_PATH`', correct: false }
      - { value: '`UrlGeneratorInterface::CURRENT_RELATIVE_PATH`', correct: false }
    help: |
      `RELATIVE_PATH` generates a URL relative to the current document.
      https://symfony.com/doc/current/routing.html#generating-urls-in-services

  -
    question: >
      What is the expected output when running `php bin/console debug:router --method=GET`?
    answers:
      - { value: 'A list of all routes that match the `GET` HTTP method, including those that match `ANY`.', correct: true }
      - { value: 'A list of all routes, but only showing the `GET` method if explicitly defined.', correct: false }
      - { value: 'An error, as `--method` only accepts `ANY`.', correct: false }
      - { value: 'A list of routes that *only* accept `GET` requests.', correct: false }
    help: |
      The `--method` option filters routes by the specified HTTP method. Routes that match `ANY` method will also be included for `GET`.
      https://symfony.com/doc/current/routing.html#filtering-routes

  -
    question: >
      What does the `php bin/console debug:router --show-aliases` command do?
    answers:
      - { value: 'It displays all defined route aliases in addition to the standard routes.', correct: true }
      - { value: 'It only shows routes that have aliases defined.', correct: false }
      - { value: 'It lists all routes and their associated HTTP methods.', correct: false }
      - { value: 'It provides a detailed breakdown of each route''s configuration, including its controller.', correct: false }
    help: |
      The `--show-aliases` option is used to display route aliases.
      https://symfony.com/doc/current/routing.html#filtering-routes

  -
    question: |
      Which of the following is a valid way to define a route that is only active in the `dev` environment using PHP attributes?

      ```php
      // src/Controller/DefaultController.php
      class DefaultController extends AbstractController
      {
          #[Route('/tools', name: 'tools', # ???)]
          public function developerTools(): Response
          {
              // ...
          }
      }
      ```
    answers:
      - { value: '`env: ''dev''`', correct: true }
      - { value: '`environment: ''dev''`', correct: false }
      - { value: '`if_env: ''dev''`', correct: false }
      - { value: '`config: { env: ''dev'' }`', correct: false }
    help: |
      The `env` option allows you to restrict a route to a specific environment.
      https://symfony.com/doc/current/routing.html#environment-specific-routes

  -
    question: >
      What is the significance of the `_controller` parameter in the context of Symfony routing?
    answers:
      - { value: 'It specifies the fully qualified class name and method of the controller that will handle the request.', correct: true }
      - { value: 'It defines the name of the service that acts as the controller.', correct: false }
      - { value: 'It is a placeholder for dynamic controller selection based on request attributes.', correct: false }
      - { value: 'It indicates whether the controller is an invokable class.', correct: false }
    help: |
      `_controller` is a special internal attribute that maps the route to its executable controller.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes

  -
    question: |
      You are defining a route group in XML. How would you add a global requirement that the `_locale` parameter must be either `en`, `es`, or `fr` for all imported routes?

      ```xml
      <!-- config/routes/attributes.xml -->
      <routes>
          <import resource="../../src/Controller/" type="attribute">
              <!-- ??? -->
          </import>
      </routes>
      ```
    answers:
      - { value: '<requirement key="_locale">en|es|fr</requirement>', correct: true }
      - { value: '<requirements _locale="en|es|fr"/>', correct: false }
      - { value: '<default key="_locale">en|es|fr</default>', correct: false }
      - { value: '<constraint key="_locale">en|es|fr</constraint>', correct: false }
    help: |
      Requirements for imported routes are defined using `<requirement>` tags within the `<import>` tag.
      https://symfony.com/doc/current/routing.html#route-groups-and-collections

  -
    question: >
      When defining a route with a dynamic parameter like `{slug}`, how does Symfony typically pass the value of `slug` to the controller method?
    answers:
      - { value: 'As a method argument with the same name (`$slug`).', correct: true }
      - { value: 'As an element in the `Request` object''s query parameters.', correct: false }
      - { value: 'As a service injected into the controller.', correct: false }
      - { value: 'As a property of the `Request` object''s `attributes` bag.', correct: true }
    help: |
      Symfony automatically injects route parameters as arguments to the controller method. They are also available in the request attributes bag.
      https://symfony.com/doc/current/routing.html#route-parameters

  -
    question: >
      What is the primary benefit of using `RouteCollection` and `UrlMatcher` from the Symfony Routing component directly in a micro-framework setup?
    answers:
      - { value: 'It provides a robust and flexible way to map URLs to specific actions, handling dynamic parameters and conditions.', correct: true }
      - { value: 'It automatically integrates with the Symfony full-stack framework''s services.', correct: false }
      - { value: 'It enables automatic generation of routes from controller annotations.', correct: false }
      - { value: 'It simplifies database interactions for route storage.', correct: false }
    help: |
      The Routing component offers powerful tools for URL matching and generation, even outside the full framework.
      https://symfony.com/doc/current/create_framework/routing.html

  -
    question: >
      If a controller method requires an argument, but the corresponding route path does not define a parameter for it, what type of error will Symfony typically throw?
    answers:
      - { value: 'A `RuntimeException` indicating a missing argument for the controller.', correct: true }
      - { value: 'A `ResourceNotFoundException` because the route cannot be matched.', correct: false }
      - { value: 'A `TypeError` due to an incorrect argument type.', correct: false }
      - { value: 'A `LogicException` related to routing misconfiguration.', correct: false }
    help: |
      Symfony will throw a `RuntimeException` (or a more specific `ControllerArgumentException`) if a controller argument expects a value that is not provided by the matched route.
      https://symfony.com/doc/current/routing.html#troubleshooting-routing

  -
    question: |
      Which of the following YAML configurations correctly enables attribute-based routing by scanning the `src/Controller/` directory for classes in the `App\Controller` namespace?

      ```yaml
      # config/routes/attributes.yaml
      controllers:
          # ???
          type: attribute
      ```
    answers:
      - { value: '`resource: { path: ../../src/Controller/, namespace: App\\Controller }`', correct: true }
      - { value: '`path: ../../src/Controller/` and `namespace: App\\Controller`', correct: false }
      - { value: '`src: App\\Controller` and `directory: ../../src/Controller/`', correct: false }
      - { value: '`import: ../../src/Controller/` and `namespace: App\\Controller`', correct: false }
    help: |
      The `resource` key with `path` and `namespace` is used to configure attribute loading from a directory.
      https://symfony.com/doc/current/routing.html#loading-routes-from-php-attributes

  -
    question: >
      When defining routes in a PHP file using `RoutingConfigurator`, how do you specify the controller for a route?
    answers:
      - { value: 'Using the `controller()` method with an array `[ControllerClass::class, ''methodName'']`.', correct: true }
      - { value: 'Using the `action()` method with a string `''ControllerClass::methodName''`.', correct: false }
      - { value: 'Setting the `_controller` option in `defaults()`.', correct: false }
      - { value: 'By type-hinting the controller in the `add()` method.', correct: false }
    help: |
      The `controller()` method is used to define the controller for a route in the PHP routing configurator.
      https://symfony.com/doc/current/routing.html#defining-routes-in-php-files

  -
    question: >
      What is the purpose of the `UrlGeneratorInterface::ABSOLUTE_URL` constant when generating URLs in Symfony?
    answers:
      - { value: 'To generate a full URL including the scheme, host, and path (e.g., `https://example.com/blog`).', correct: true }
      - { value: 'To generate a URL that is relative to the web root (e.g., `/blog`).', correct: false }
      - { value: 'To generate a URL that is relative to the current document.', correct: false }
      - { value: 'To generate a URL that only includes the path and query string.', correct: false }
    help: |
      `ABSOLUTE_URL` ensures the generated URL is a complete, absolute URL.
      https://symfony.com/doc/current/routing.html#generating-urls-in-services

  -
    question: >
      Which of the following best describes the `Symfony\Component\Routing\RouteCollection` class?
    answers:
      - { value: 'A collection of `Route` objects that represents all defined routes in the application.', correct: true }
      - { value: 'A service that matches incoming requests to routes.', correct: false }
      - { value: 'An object responsible for generating URLs from route names.', correct: false }
      - { value: 'A configuration loader for routing definitions.', correct: false }
    help: |
      `RouteCollection` is the central object that holds all route definitions.
      https://symfony.com/doc/current/routing/custom_route_loader.html

  -
    question: >
      What is the role of `Symfony\Component\Config\Loader\LoaderInterface::supports()` method in the routing component?
    answers:
      - { value: 'It checks if the loader can handle a given resource and its type (e.g., `attribute`, `yaml`).', correct: true }
      - { value: 'It loads the routes from the specified resource.', correct: false }
      - { value: 'It determines if a route matches the current request.', correct: false }
      - { value: 'It validates the syntax of the routing configuration.', correct: false }
    help: |
      The `supports()` method is crucial for the delegating loader to determine which specific loader should be used for a given resource.
      https://symfony.com/doc/current/routing/custom_route_loader.html

  -
    question: >
      Which of the following is a key responsibility of the `Symfony\Component\Routing\Matcher\UrlMatcher` class?
    answers:
      - { value: 'To match an incoming URL path against the defined routes and return the corresponding route parameters and controller.', correct: true }
      - { value: 'To generate URLs from route names and parameters.', correct: false }
      - { value: 'To load route definitions from configuration files.', correct: false }
      - { value: 'To compile the routing cache.', correct: false }
    help: |
      The `UrlMatcher` is responsible for the process of matching a URL to a route.
      https://symfony.com/doc/current/create_framework/routing.html#matching-urls

  -
    question: |
      You have a route defined with a `_format` parameter. In PHP attributes, how would you set a default format of `html` and restrict it to `html` or `xml`?

      ```php
      // src/Controller/ArticleController.php
      class ArticleController extends AbstractController
      {
          #[Route(
              path: '/articles/search.{_format}',
              # ???
          )]
          public function search(): Response
          {
              // ...
          }
      }
      ```
    answers:
      - { value: '`format: ''html'', requirements: [''_format'' => ''html|xml'']`', correct: true }
      - { value: '`defaults: { _format: ''html'' }, requirements: { _format: ''html|xml'' }`', correct: true }
      - { value: '`default_format: ''html'', format_regex: ''html|xml''`', correct: false }
      - { value: '`options: { format: ''html'', format_validation: ''html|xml'' }`', correct: false }
    help: |
      The `format` option sets the default, and `requirements` define the allowed patterns for special parameters like `_format`.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes

  -
    question: >
      Which of the following is NOT a valid way to define a route in Symfony 7?
    answers:
      - { value: 'Using XML configuration files.', correct: false }
      - { value: 'Using PHP attributes directly on controller methods.', correct: false }
      - { value: 'Using YAML configuration files.', correct: false }
      - { value: 'Using INI configuration files.', correct: true }
      - { value: 'Using PHP routing configurator files.', correct: false }
    help: |
      Symfony 7 supports YAML, XML, PHP attributes, and PHP files for routing configuration. INI is not a supported format for routing.
      https://symfony.com/doc/current/routing.html#routing-configuration-formats

  -
    question: >
      What is the purpose of the `#[AsCommand]` attribute in Symfony?
    answers:
      - { value: 'It is used to define a console command, not a web route.', correct: true }
      - { value: 'It defines a route that can only be accessed via the command line.', correct: false }
      - { value: 'It marks a controller as an API endpoint.', correct: false }
      - { value: 'It allows a controller method to be executed as a background job.', correct: false }
    help: |
      The `#[AsCommand]` attribute is part of the Console component, used for defining command-line commands. It is not related to web routing.
      https://symfony.com/doc/current/console.html#configuring-the-command

  -
    question: >
      When importing a route collection, what does setting `trailing-slash-on-root: false` (in XML) or `prefix('/blog', false)` (in PHP) achieve?
    answers:
      - { value: 'It ensures that an imported route with an empty URL path becomes `/blog` instead of `/blog/`.', correct: true }
      - { value: 'It removes trailing slashes from all generated URLs within the imported collection.', correct: false }
      - { value: 'It forces all URLs in the imported collection to end with a trailing slash.', correct: false }
      - { value: 'It disables the automatic addition of a trailing slash to the root path of the application.', correct: false }
    help: |
      This option controls whether a trailing slash is added to the root URL of an imported collection when the imported route itself has an empty path.
      https://symfony.com/doc/current/routing.html#route-groups-and-collections

  -
    question: >
      Which of the following scenarios would typically lead to a "Some mandatory parameters are missing" error when generating a URL?
    answers:
      - { value: 'Attempting to generate a URL for a route with a required parameter (e.g., `{slug}`) but not providing a value for it.', correct: true }
      - { value: 'Providing an invalid data type for a route parameter.', correct: false }
      - { value: 'Trying to generate a URL for a route that does not exist.', correct: false }
      - { value: 'Using an incorrect HTTP method for the route.', correct: false }
    help: |
      This error occurs when a route has mandatory parameters that are not supplied during URL generation.
      https://symfony.com/doc/current/routing.html#troubleshooting-routing

  -
    question: >
      What is the purpose of the `#[Route]` attribute when applied to an entire controller class in Symfony?
    answers:
      - { value: 'It defines a common URL prefix, name prefix, and requirements for all routes defined within that controller.', correct: true }
      - { value: 'It makes all methods in the controller callable as routes without individual `#[Route]` attributes.', correct: false }
      - { value: 'It marks the controller as a service to be automatically loaded by Symfony.', correct: false }
      - { value: 'It forces all routes in the controller to use the same HTTP method.', correct: false }
    help: |
      Applying `#[Route]` to a controller class allows for grouping routes and applying shared configurations.
      https://symfony.com/doc/current/routing.html#defining-route-groups-or-collections

  -
    question: >
      When using the `RedirectController` to redirect to an internal route, which `defaults` key is used to specify the target route name?
    answers:
      - { value: '`route`', correct: true }
      - { value: '`target_route`', correct: false }
      - { value: '`name`', correct: false }
      - { value: '`redirect_to`', correct: false }
    help: |
      The `route` default parameter specifies the name of the internal route to redirect to.
      https://symfony.com/doc/current/routing.html#redirecting-routes

  -
    question: >
      Which of the following is a valid way to define a route in a PHP configuration file using `RoutingConfigurator`?
    answers:
      - { value: '`$routes->add('blog_list', '/blog')->controller([BlogController::class, 'list']);`', correct: true }
      - { value: '`$routes->set('blog_list', '/blog', BlogController::class . '::list');`', correct: false }
      - { value: '`$routes->route('blog_list', '/blog')->to(BlogController::class, 'list');`', correct: false }
      - { value: '`$routes->map('/blog')->name('blog_list')->controller(BlogController::class, 'list');`', correct: false }
    help: |
      The `add()` method, chained with `controller()`, is the standard way to define routes in PHP routing configurator files.
      https://symfony.com/doc/current/routing.html#defining-routes-in-php-files

  -
    question: >
      What is the purpose of the `_locale` parameter when generating a URL for a localized route?
    answers:
      - { value: 'It explicitly sets the locale for the generated URL, overriding the current request''s locale.', correct: true }
      - { value: 'It is automatically determined by Symfony and cannot be manually set during URL generation.', correct: false }
      - { value: 'It defines the default locale for the entire application.', correct: false }
      - { value: 'It is only used for matching incoming requests, not for URL generation.', correct: false }
    help: |
      You can pass `_locale` as a parameter to `generateUrl()` to specify the desired locale for the generated URL.
      https://symfony.com/doc/current/routing.html#generating-urls-in-controllers

  -
    question: >
      When debugging routing, what information does `php bin/console router:match /some/path` provide?
    answers:
      - { value: 'The name of the matched route, its parameters, and the associated controller.', correct: true }
      - { value: 'A list of all routes that *could* match the given path.', correct: false }
      - { value: 'Performance metrics for the routing process.', correct: false }
      - { value: 'Only whether the path matches any route or not.', correct: false }
    help: |
      `router:match` provides detailed information about the matched route.
      https://symfony.com/doc/current/routing.html#matching-a-url

  -
    question: >
      What is the effect of setting `keepQueryParams: true` in a `RedirectController` configuration?
    answers:
      - { value: 'It preserves the original query string parameters when redirecting to the target URL.', correct: true }
      - { value: 'It forces the redirect to use a `GET` request method.', correct: false }
      - { value: 'It appends a random query parameter to prevent caching.', correct: false }
      - { value: 'It ensures that the redirect is always temporary (HTTP 302).', correct: false }
    help: |
      `keepQueryParams` ensures that any query parameters from the original request are carried over to the redirected URL.
      https://symfony.com/doc/current/routing.html#redirecting-routes

  -
    question: >
      What is the purpose of `keepRequestMethod: true` in a `RedirectController` configuration?
    answers:
      - { value: 'It ensures that the HTTP method of the original request is preserved during the redirect.', correct: true }
      - { value: 'It forces the redirect to always use a `POST` method.', correct: false }
      - { value: 'It changes the redirect status code to 307 for temporary redirects and 308 for permanent redirects.', correct: true }
      - { value: 'It only applies to redirects to external URLs.', correct: false }
    help: |
      `keepRequestMethod` preserves the original HTTP method and uses specific status codes (307/308) for the redirect.
      https://symfony.com/doc/current/routing.html#redirecting-routes

  -
    question: >
      Which of the following is a valid way to retrieve the current route's name from the `Request` object within a controller?
    answers:
      - { value: '`$request->attributes->get('_route')`', correct: true }
      - { value: '`$request->getRouteName()`', correct: false }
      - { value: '`$request->get('_route')`', correct: false }
      - { value: '`$request->routeName`', correct: false }
    help: |
      The route name is stored as an attribute on the `Request` object under the key `_route`.
      https://symfony.com/doc/current/routing.html#accessing-route-information

  -
    question: >
      How can you retrieve all matched route parameters from the `Request` object within a Symfony controller?
    answers:
      - { value: '`$request->attributes->get('_route_params')`', correct: true }
      - { value: '`$request->getRouteParameters()`', correct: false }
      - { value: '`$request->query->all()`', correct: false }
      - { value: '`$request->request->all()`', correct: false }
    help: |
      Matched route parameters are stored in the request attributes bag under the key `_route_params`.
      https://symfony.com/doc/current/routing.html#accessing-route-information

  -
    question: >
      What is the primary purpose of `Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader`?
    answers:
      - { value: 'It is the main loader that dispatches route loading to specialized loaders (e.g., for YAML, XML, attributes).', correct: true }
      - { value: 'It loads routes from a database.', correct: false }
      - { value: 'It compiles the routing cache for performance optimization.', correct: false }
      - { value: 'It handles all aspects of URL generation.', correct: false }
    help: |
      The `DelegatingLoader` is responsible for orchestrating the loading of routes from different formats by delegating to specific loaders.
      https://symfony.com/doc/current/routing/custom_route_loader.html

  -
    question: >
      When defining a route using PHP attributes, what is the default value for the `priority` option if not explicitly set?
    answers:
      - { value: '`0`', correct: true }
      - { value: '`1`', correct: false }
      - { value: '`null`', correct: false }
      - { value: '`-1`', correct: false }
    help: |
      The default priority for routes is 0. Higher numbers indicate higher priority.
      https://symfony.com/doc/current/routing.html#route-priority

  -
    question: >
      Which of the following is a valid way to define a route in YAML that only allows `POST` requests?
    answers:
      - { value: '`methods: [POST]`', correct: true }
      - { value: '`method: POST`', correct: false }
      - { value: '`http_method: POST`', correct: false }
      - { value: '`allow_methods: [POST]`', correct: false }
    help: |
      The `methods` key (or `methods` option in attributes/PHP) is used to specify allowed HTTP methods.
      https://symfony.com/doc/current/routing.html#matching-http-methods

  -
    question: |
      You have a route `/articles/{_locale}/search.{_format}`. In YAML, how would you set a default locale of `en` and restrict `_locale` to `en` or `fr`?

      ```yaml
      # config/routes.yaml
      article_search:
          path:        /articles/{_locale}/search.{_format}
          controller:  App\Controller\ArticleController::search
          # ???
      ```
    answers:
      - { value: '`locale: en` and `requirements: { _locale: en|fr }`', correct: true }
      - { value: '`defaults: { _locale: en }` and `requirements: { _locale: en|fr }`', correct: true }
      - { value: '`default_locale: en` and `locale_pattern: en|fr`', correct: false }
      - { value: '`options: { locale: en, locale_regex: en|fr }`', correct: false }
    help: |
      The `locale` key sets the default, and `requirements` define the regex for the `_locale` parameter.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes

  -
    question: >
      What is the main advantage of using PHP attributes for routing configuration compared to YAML or XML files?
    answers:
      - { value: 'Routes are defined directly alongside the controller logic, improving discoverability and reducing context switching.', correct: true }
      - { value: 'It offers better performance due to faster parsing.', correct: false }
      - { value: 'It allows for more complex conditional routing logic.', correct: false }
      - { value: 'It is the only way to define routes with dynamic parameters.', correct: false }
    help: |
      PHP attributes keep route definitions close to the code they relate to.
      https://symfony.com/doc/current/routing.html#loading-routes-from-php-attributes

  -
    question: >
      Which of the following is a valid way to define a route named `product_show` for the path `/product/{id}` in a PHP file using `RoutingConfigurator`?
    answers:
      - { value: '`$routes->add('product_show', '/product/{id}')->controller('App\\Controller\\ProductController::show');`', correct: true }
      - { value: '`$routes->route('product_show', '/product/{id}')->action('App\\Controller\\ProductController::show');`', correct: false }
      - { value: '`$routes->map('/product/{id}')->name('product_show')->to('App\\Controller\\ProductController::show');`', correct: false }
      - { value: '`$routes->configure('product_show', '/product/{id}', 'App\\Controller\\ProductController::show');`', correct: false }
    help: |
      The `add()` method is used to define a route, and `controller()` specifies the handler.
      https://symfony.com/doc/current/routing.html#defining-routes-in-php-files

  -
    question: >
      When defining a route, what is the significance of the `name` option?
    answers:
      - { value: 'It provides a unique identifier for the route, used for URL generation and referencing.', correct: true }
      - { value: 'It specifies the name of the controller method to be executed.', correct: false }
      - { value: 'It is used for debugging purposes only and has no functional impact.', correct: false }
      - { value: 'It defines the default value for a route parameter.', correct: false }
    help: |
      The `name` option is crucial for generating URLs and referencing routes throughout the application.
      https://symfony.com/doc/current/routing.html#defining-a-basic-route

  -
    question: >
      What happens if multiple routes match a given URL in Symfony?
    answers:
      - { value: 'The route with the highest `priority` is matched first.', correct: true }
      - { value: 'The first route defined in the routing configuration is matched.', correct: true }
      - { value: 'Symfony throws an error indicating an ambiguous route match.', correct: false }
      - { value: 'The route with the most specific path is always matched.', correct: false }
    help: |
      Routes are matched in the order they are loaded. The `priority` option can override this order.
      https://symfony.com/doc/current/routing.html#route-priority

  -
    question: >
      Which of the following is a valid way to define a route in XML?
    answers:
      - { value: '`<route id="blog_list" path="/blog" controller="App\\Controller\\BlogController::list"/>`', correct: true }
      - { value: '`<route name="blog_list" url="/blog" handler="App\\Controller\\BlogController::list"/>`', correct: false }
      - { value: '`<path id="blog_list" value="/blog" action="App\\Controller\\BlogController::list"/>`', correct: false }
      - { value: '`<url id="blog_list" path="/blog" target="App\\Controller\\BlogController::list"/>`', correct: false }
    help: |
      XML routing uses `<route>` tags with `id`, `path`, and `controller` attributes.
      https://symfony.com/doc/current/routing.html#defining-routes-in-xml

  -
    question: >
      What is the primary function of the `Symfony\Component\Routing\Generator\UrlGenerator` class?
    answers:
      - { value: 'To generate URLs from route names and their parameters.', correct: true }
      - { value: 'To match incoming URLs to defined routes.', correct: false }
      - { value: 'To load routing configuration from files.', correct: false }
      - { value: 'To validate route parameters against requirements.', correct: false }
    help: |
      The `UrlGenerator` is responsible for creating URLs based on registered routes.
      https://symfony.com/doc/current/create_framework/routing.html#generating-urls

  -
    question: >
      When defining a route with a parameter, what is the purpose of using a regular expression directly in the path (e.g., `/blog/{page<\d+>}`)?
    answers:
      - { value: 'It defines a requirement for the `page` parameter, ensuring it matches the regex.', correct: true }
      - { value: 'It sets a default value for the `page` parameter.', correct: false }
      - { value: 'It makes the `page` parameter optional.', correct: false }
      - { value: 'It specifies the data type for the `page` parameter in the controller.', correct: false }
    help: |
      Inline requirements using `<regex>` directly in the path are a concise way to define parameter constraints.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      What is the purpose of the `env` option in a route definition?
    answers:
      - { value: 'To make the route active only in specific Symfony environments (e.g., `dev`, `prod`).', correct: true }
      - { value: 'To inject environment variables into the controller.', correct: false }
      - { value: 'To define environment-specific route parameters.', correct: false }
      - { value: 'To set the default environment for the application.', correct: false }
    help: |
      The `env` option allows for environment-specific routing, useful for development or testing routes.
      https://symfony.com/doc/current/routing.html#environment-specific-routes

  -
    question: >
      Which of the following is a valid way to define a route that matches requests to `www.example.com` for English locale and `www.example.nl` for Dutch locale when importing routes?
    answers:
      - { value: 'Using `host` option with an associative array of locales and hosts.', correct: true }
      - { value: 'Using separate `#[Route]` attributes for each locale and host combination.', correct: true }
      - { value: 'Using a `locale_host` option.', correct: false }
      - { value: 'Using a `domain_mapping` option.', correct: false }
    help: |
      Host-based routing can be configured with locale-specific hostnames when importing routes or directly on `#[Route]` attributes.
      https://symfony.com/doc/current/routing.html#configure-host-based-routing-import-in-symfony

  -
    question: >
      What is the purpose of the `UrlGeneratorInterface` in Symfony?
    answers:
      - { value: 'It defines the contract for generating URLs from route names and parameters.', correct: true }
      - { value: 'It is responsible for matching incoming requests to routes.', correct: false }
      - { value: 'It loads and compiles routing definitions.', correct: false }
      - { value: 'It provides access to route debugging tools.', correct: false }
    help: |
      `UrlGeneratorInterface` is the interface for the URL generation service.
      https://symfony.com/doc/current/routing.html#generating-urls-in-services

  -
    question: >
      When defining a route with a parameter, what does making the parameter optional mean?
    answers:
      - { value: 'The route will match whether the parameter is present in the URL or not.', correct: true }
      - { value: 'The parameter will always default to `null` if not provided.', correct: false }
      - { value: 'The parameter will be automatically generated by Symfony if missing.', correct: false }
      - { value: 'The parameter can only be passed as a query string parameter.', correct: false }
    help: |
      Optional parameters are defined by providing a default value.
      https://symfony.com/doc/current/routing.html#setting-default-values-for-parameters

  -
    question: >
      What is the primary benefit of using route groups (or collections) in Symfony routing?
    answers:
      - { value: 'To apply common configurations (like prefixes, requirements, hosts) to a set of routes, reducing repetition.', correct: true }
      - { value: 'To define routes that can be enabled or disabled based on user roles.', correct: false }
      - { value: 'To create separate routing caches for different parts of the application.', correct: false }
      - { value: 'To allow routes to be defined in multiple configuration files.', correct: false }
    help: |
      Route groups help organize and apply shared settings to multiple routes.
      https://symfony.com/doc/current/routing.html#route-groups-and-collections

  -
    question: >
      Which of the following is a valid way to define a route with a default value for a parameter in PHP attributes?
    answers:
      - { value: '`#[Route('/blog/{page}', name: 'blog_list', defaults: ['page' => 1])]`', correct: true }
      - { value: '`#[Route('/blog/{page?1}', name: 'blog_list')]`', correct: false }
      - { value: '`#[Route('/blog/{page}', name: 'blog_list', default: ['page' => 1])]`', correct: false }
      - { value: '`#[Route('/blog/{page}', name: 'blog_list', options: { default_page: 1 })]`', correct: false }
    help: |
      The `defaults` option is used to set default values for route parameters.
      https://symfony.com/doc/current/routing.html#setting-default-values-for-parameters

  -
    question: >
      What is the purpose of the `_format` parameter in a route path like `/articles.{_format}`?
    answers:
      - { value: 'It allows the route to match different file extensions (e.g., `.html`, `.json`) and sets the request format accordingly.', correct: true }
      - { value: 'It specifies the default response format for the controller.', correct: false }
      - { value: 'It is a mandatory parameter that must always be present in the URL.', correct: false }
      - { value: 'It is used for versioning API endpoints.', correct: false }
    help: |
      The `_format` parameter is a special parameter that allows content negotiation based on the URL suffix.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes

  -
    question: >
      When importing routes using `RoutingConfigurator`, how do you apply a name prefix to all imported routes?
    answers:
      - { value: 'Using the `namePrefix()` method.', correct: true }
      - { value: 'Using the `prefixName()` method.', correct: false }
      - { value: 'Using the `routeNamePrefix()` method.', correct: false }
      - { value: 'Using the `addNamePrefix()` method.', correct: false }
    help: |
      The `namePrefix()` method applies a prefix to the names of all routes in the imported collection.
      https://symfony.com/doc/current/routing.html#route-groups-and-collections

  -
    question: >
      What is the purpose of the `#[AsRoutingConditionService]` attribute?
    answers:
      - { value: 'It tags a service that can be used within Expression Language conditions for routes.', correct: true }
      - { value: 'It marks a service as a route loader.', correct: false }
      - { value: 'It defines a service that generates URLs.', correct: false }
      - { value: 'It automatically registers a service as a controller.', correct: false }
    help: |
      Services tagged with `#[AsRoutingConditionService]` can be accessed via the `service()` function in route conditions.
      https://symfony.com/doc/current/routing.html#expression-language-variables-and-functions

  -
    question: >
      Which of the following describes a "greedy" route parameter?
    answers:
      - { value: 'A route parameter that uses a regular expression like `.+` or `.*` to match any character, including slashes, potentially matching more than intended.', correct: true }
      - { value: 'A route parameter that is optional and has a default value.', correct: false }
      - { value: 'A route parameter that is required and must always be present in the URL.', correct: false }
      - { value: 'A route parameter that is automatically converted to an object by a ParamConverter.', correct: false }
    help: |
      Greedy patterns can unintentionally match more specific routes if not handled with priority or more restrictive requirements.
      https://symfony.com/doc/current/routing.html#route-priority

  -
    question: >
      When configuring a redirect using `RedirectController`, what is the default HTTP status code for a temporary redirect?
    answers:
      - { value: '`302` (Found)', correct: true }
      - { value: '`301` (Moved Permanently)', correct: false }
      - { value: '`307` (Temporary Redirect)', correct: false }
      - { value: '`303` (See Other)', correct: false }
    help: |
      By default, `RedirectController` issues a 302 redirect.
      https://symfony.com/doc/current/routing.html#redirecting-routes