category: Routing

questions:
  -
    question: >
      Which of the following PHP attribute configurations correctly defines a route named `app_homepage` for the path `/`?
    answers:
      -
        value: >
          `#[Route(path: '/', name: 'app_homepage')]`
        correct: true
      -
        value: >
          `#[Route(name: 'app_homepage', url: '/')]`
        correct: false
      -
        value: >
          `#[Path('/', id: 'app_homepage')]`
        correct: false
      -
        value: >
          `#[Route('/home', id: 'app_homepage')]`
        correct: false
    help: |
      Routes are defined using the `#[Route]` attribute, specifying the `path` and `name`.
      https://symfony.com/doc/current/routing.html#defining-routes

  -
    question: |
      Consider the following YAML route configuration:

      ```yaml
      # config/routes.yaml
      blog_list:
          path: /blog
          controller: App\Controller\BlogController::list
      ```

      What is the purpose of the `controller` key in this definition?
    answers:
      -
        value: >
          It specifies the service ID of the controller to be executed.
        correct: false
      -
        value: >
          It defines the fully qualified class name and method to handle the request.
        correct: true
      -
        value: >
          It sets the default action for the route if no method is specified.
        correct: false
      -
        value: >
          It indicates that the route is handled by a Twig template.
        correct: false
    help: |
      The `controller` key in YAML routing configuration specifies the controller class and method (or `__invoke()` method if omitted) that will handle the request when the route matches.
      https://symfony.com/doc/current/routing.html#defining-routes-in-yaml

  -
    question: |
      Given the following PHP attribute route definition, which URL would successfully match this route?

      ```php
      // src/Controller/ProductController.php
      namespace App\Controller;

      use Symfony\Component\Routing\Attribute\Route;
      use Symfony\Component\HttpFoundation\Response;

      class ProductController
      {
          #[Route('/product/{id<\d+>}', name: 'product_show')]
          public function show(int $id): Response
          {
              // ...
          }
      }
      ```
    answers:
      -
        value: >
          `/product/123`
        correct: true
      -
        value: >
          `/product/abc`
        correct: false
      -
        value: >
          `/product/123/details`
        correct: false
      -
        value: >
          `/product/`
        correct: false
    help: |
      The `<\\d+>` requirement ensures that the `id` parameter must consist of one or more digits.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: |
      How can you set a default value for the `page` parameter in the following YAML route definition so that `/blog` also matches the route and `page` defaults to `1`?

      ```yaml
      # config/routes.yaml
      blog_list:
          path: /blog/{page}
          controller: App\Controller\BlogController::list
          # ???
      ```
    answers:
      -
        value: |
          ```yaml
          defaults:
              page: 1
          ```
        correct: true
      -
        value: |
          ```yaml
          options:
              page: 1
          ```
        correct: false
      -
        value: |
          ```yaml
          parameters:
              page: 1
          ```
        correct: false
      -
        value: |
          ```yaml
          default_values:
              page: 1
          ```
        correct: false
    help: |
      Default values for route parameters are defined under the `defaults` key in YAML.
      https://symfony.com/doc/current/routing.html#setting-default-values-for-parameters

  -
    question: >
      Which method of the `AbstractController` can be used to generate a URL for a given route name and parameters within a Symfony controller?
    answers:
      -
        value: >
          `$this->redirect()`
        correct: false
      -
        value: >
          `$this->forward()`
        correct: false
      -
        value: >
          `$this->generateUrl()`
        correct: true
      -
        value: >
          `$this->url()`
        correct: false
    help: |
      The `generateUrl()` method is a helper provided by `AbstractController` to generate URLs from route names.
      https://symfony.com/doc/current/routing.html#generating-urls-in-controllers

  -
    question: |
      You want to create a permanent redirect from `/old-path` to `/new-path` using Symfony's `RedirectController` in YAML. Which of the following is the correct configuration?
    answers:
      -
        value: |
          ```yaml
          old_path_redirect:
              path: /old-path
              controller: Symfony\Bundle\FrameworkBundle\Controller\RedirectController
              defaults:
                  path: /new-path
                  permanent: true
          ```
        correct: true
      -
        value: |
          ```yaml
          old_path_redirect:
              path: /old-path
              controller: Symfony\Bundle\FrameworkBundle\Controller\RedirectController
              defaults:
                  route: new_path_route
                  permanent: true
          ```
        correct: false
      -
        value: |
          ```yaml
          old_path_redirect:
              path: /old-path
              controller: App\Controller\RedirectController::toNewPath
              defaults:
                  url: /new-path
                  status: 301
          ```
        correct: false
      -
        value: |
          ```yaml
          old_path_redirect:
              path: /old-path
              redirect_to: /new-path
              status: 301
          ```
        correct: false
    help: |
      The `RedirectController` is used for redirects. To redirect to a path, use the `path` default. For a permanent redirect, set `permanent: true`.
      https://symfony.com/doc/current/routing.html#redirecting-routes

  -
    question: >
      Which special internal routing attribute is automatically used by Symfony to set the `_locale` attribute on the `Request` object, influencing translation and other locale-dependent services?
    answers:
      -
        value: >
          `_lang`
        correct: false
      -
        value: >
          `_locale`
        correct: true
      -
        value: >
          `_language`
        correct: false
      -
        value: >
          `_culture`
        correct: false
    help: |
      The `_locale` special parameter is used by Symfony to set the locale on the request.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: |
      Consider the following PHP attribute route definition:

      ```php
      // src/Controller/MainController.php
      namespace App\Controller;

      use Symfony\Component\Routing\Attribute\Route;
      use Symfony\Component\HttpFoundation\Response;

      class MainController
      {
          #[Route('/', name: 'mobile_homepage', host: 'm.example.com')]
          public function mobileHomepage(): Response
          {
              // ...
          }

          #[Route('/', name: 'homepage')]
          public function homepage(): Response
          {
              // ...
          }
      }
      ```
      If a request comes in for `http://m.example.com/`, which route will be matched?
    answers:
      -
        value: >
          `homepage`
        correct: false
      -
        value: >
          `mobile_homepage`
        correct: true
      -
        value: >
          Neither, as the paths are identical.
        correct: false
      -
        value: >
          Both routes will be matched, leading to an error.
        correct: false
    help: |
      When routes have the same path but different host requirements, the route with the matching host will be prioritized.
      https://symfony.com/doc/current/routing.html#domain-name-matching

  -
    question: >
      In Symfony's Expression Language for routing conditions, which variable provides access to the current `RequestContext` object, allowing you to check properties like the HTTP method or host?
    answers:
      -
        value: >
          `request`
        correct: false
      -
        value: >
          `params`
        correct: false
      -
        value: >
          `context`
        correct: true
      -
        value: >
          `app`
        correct: false
    help: |
      The `context` variable in Expression Language provides access to the `Symfony\Component\Routing\RequestContext` object.
      https://symfony.com/doc/current/routing.html#expression-language-for-conditions

  -
    question: |
      You want a route to only respond to `POST` requests. How would you configure this using PHP attributes?
    answers:
      -
        value: |
          ```php
          #[Route('/submit', name: 'form_submit', methods: ['POST'])]
          ```
        correct: true
      -
        value: |
          ```php
          #[Route('/submit', name: 'form_submit', method: 'POST')]
          ```
        correct: false
      -
        value: |
          ```php
          #[Route('/submit', name: 'form_submit', requirements: ['_method' => 'POST'])]
          ```
        correct: false
      -
        value: |
          ```php
          #[Route('/submit', name: 'form_submit', httpMethod: 'POST')]
          ```
        correct: false
    help: |
      The `methods` option in the `#[Route]` attribute allows you to restrict the HTTP methods that a route will match.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      When defining localized routes in Symfony, how does the system typically determine the user's locale if not explicitly provided in the URL or session?
    answers:
      -
        value: >
          It guesses based on the user's IP address.
        correct: false
      -
        value: >
          It defaults to the first locale defined in `framework.yaml`.
        correct: false
      -
        value: >
          It uses the `Accept-Language` HTTP header from the user's browser.
        correct: true
      -
        value: >
          It requires a `_locale` query parameter to be present.
        correct: false
    help: |
      Symfony can guess the user's locale based on the `Accept-Language` HTTP header.
      https://symfony.com/doc/current/routing/localized_routes.html#guessing-the-user-s-locale

  -
    question: >
      Which Symfony console command is used to list all registered routes in your application, including their names, methods, and paths?
    answers:
      -
        value: >
          `php bin/console router:debug`
        correct: false
      -
        value: >
          `php bin/console debug:routing`
        correct: false
      -
        value: >
          `php bin/console debug:router`
        correct: true
      -
        value: >
          `php bin/console route:list`
        correct: false
    help: |
      The `debug:router` command provides a comprehensive list of all defined routes.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: |
      You are defining routes using the PHP routing configurator. How would you define a route named `product_view` for the path `/products/{id}` that maps to `App\Controller\ProductController::view`?
    answers:
      -
        value: |
          ```php
          return static function (RoutingConfigurator $routes): void {
              $routes->add('product_view', '/products/{id}')
                  ->controller([App\Controller\ProductController::class, 'view']);
          };
          ```
        correct: true
      -
        value: |
          ```php
          return static function (RoutingConfigurator $routes): void {
              $routes->route('product_view', '/products/{id}')
                  ->action('App\Controller\ProductController::view');
          };
          ```
        correct: false
      -
        value: |
          ```php
          return static function (RoutingConfigurator $routes): void {
              $routes->set('product_view', '/products/{id}')
                  ->handler('App\Controller\ProductController::view');
          };
          ```
        correct: false
      -
        value: |
          ```php
          return static function (RoutingConfigurator $routes): void {
              $routes->map('product_view', '/products/{id}')
                  ->to('App\Controller\ProductController::view');
          };
          ```
        correct: false
    help: |
      The `add()` method of `RoutingConfigurator` is used to define a new route, followed by `controller()` to specify the handler.
      https://symfony.com/doc/current/routing.html#defining-routes-in-php-files

  -
    question: |
      To restrict a URL parameter `year` to be a four-digit number (e.g., `2023`), which regular expression would you use in a route requirement?
    answers:
      -
        value: >
          `\d{4}`
        correct: true
      -
        value: >
          `[0-9]+`
        correct: false
      -
        value: >
          `\d*`
        correct: false
      -
        value: >
          `[0-9]{1,4}`
        correct: false
    help: |
      The `\d{4}` regex specifically matches exactly four digits.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: |
      Given the following PHP attribute route:

      ```php
      #[Route('/articles/{page}', name: 'article_list')]
      public function list(int $page = 1): Response
      {
          // ...
      }
      ```
      Which of the following URLs would correctly match this route and result in `$page` being `1`?
    answers:
      -
        value: >
          `/articles/`
        correct: true
      -
        value: >
          `/articles/0`
        correct: false
      -
        value: >
          `/articles/default`
        correct: false
      -
        value: >
          `/articles/null`
        correct: false
    help: |
      When a route parameter has a default value in the controller method signature, the route can be matched without providing that parameter in the URL.
      https://symfony.com/doc/current/routing.html#setting-default-values-for-parameters

  -
    question: >
      When generating an absolute URL (e.g., `http://example.com/blog`) using `UrlGeneratorInterface::generate()`, what is the correct third argument to pass?
    answers:
      -
        value: >
          `UrlGeneratorInterface::ABSOLUTE_PATH`
        correct: false
      -
        value: >
          `UrlGeneratorInterface::NETWORK_PATH`
        correct: false
      -
        value: >
          `UrlGeneratorInterface::ABSOLUTE_URL`
        correct: true
      -
        value: >
          `UrlGeneratorInterface::RELATIVE_PATH`
        correct: false
    help: |
      `UrlGeneratorInterface::ABSOLUTE_URL` is the constant used to generate a full URL including the scheme and host.
      https://symfony.com/doc/current/routing.html#generating-urls-in-services

  -
    question: >
      To make a redirect permanent (HTTP 301 or 308 status code) when using Symfony's `RedirectController`, which default option should be set to `true`?
    answers:
      -
        value: >
          `status_code`
        correct: false
      -
        value: >
          `permanent`
        correct: true
      -
        value: >
          `redirect_type`
        correct: false
      -
        value: >
          `http_status`
        correct: false
    help: |
      The `permanent` option in the `RedirectController` defaults determines if the redirect is temporary (302/307) or permanent (301/308).
      https://symfony.com/doc/current/routing.html#redirecting-routes

  -
    question: >
      Which special internal routing attribute is used to determine which controller and action is executed when a route is matched?
    answers:
      -
        value: >
          `_action`
        correct: false
      -
        value: >
          `_handler`
        correct: false
      -
        value: >
          `_controller`
        correct: true
      -
        value: >
          `_target`
        correct: false
    help: |
      The `_controller` parameter is fundamental for mapping a route to its executable code.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: |
      You want to define a route in YAML that matches `blog.example.com/posts` and is handled by `App\Controller\BlogController::posts`. Which configuration is correct?
    answers:
      -
        value: |
          ```yaml
          blog_posts:
              path: /posts
              host: blog.example.com
              controller: App\Controller\BlogController::posts
          ```
        correct: true
      -
        value: |
          ```yaml
          blog_posts:
              url: /posts
              domain: blog.example.com
              controller: App\Controller\BlogController::posts
          ```
        correct: false
      -
        value: |
          ```yaml
          blog_posts:
              path: /posts
              hostname: blog.example.com
              controller: App\Controller\BlogController::posts
          ```
        correct: false
      -
        value: |
          ```yaml
          blog_posts:
              route: /posts
              server: blog.example.com
              controller: App\Controller\BlogController::posts
          ```
        correct: false
    help: |
      The `host` option in YAML routing is used to match routes based on the domain name.
      https://symfony.com/doc/current/routing.html#domain-name-matching

  -
    question: |
      Which of the following Expression Language functions allows you to retrieve the value of an environment variable within a routing condition?
    answers:
      -
        value: >
          `get_env()`
        correct: false
      -
        value: >
          `env()`
        correct: true
      -
        value: >
          `getenv_var()`
        correct: false
      -
        value: >
          `environment()`
        correct: false
    help: |
      The `env()` function is available in the Expression Language for routing conditions to access environment variables.
      https://symfony.com/doc/current/routing.html#expression-language-for-conditions

  -
    question: |
      To define a route in YAML that only responds to `GET` and `HEAD` HTTP methods, which configuration is correct?
    answers:
      -
        value: |
          ```yaml
          my_route:
              path: /my-path
              controller: App\Controller\MyController::index
              methods: [GET, HEAD]
          ```
        correct: true
      -
        value: |
          ```yaml
          my_route:
              path: /my-path
              controller: App\Controller\MyController::index
              http_methods: GET|HEAD
          ```
        correct: false
      -
        value: |
          ```yaml
          my_route:
              path: /my-path
              controller: App\Controller\MyController::index
              requirements:
                  _method: GET|HEAD
          ```
        correct: true
      -
        value: |
          ```yaml
          my_route:
              path: /my-path
              controller: App\Controller\MyController::index
              allow_methods: [GET, HEAD]
          ```
        correct: false
    help: |
      The `methods` key or a `_method` requirement can be used to restrict allowed HTTP methods for a route.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: |
      You want to automatically prefix all routes imported from `src/Controller/` with `/nl` if the locale is `nl`, and no prefix for `en`. Which PHP routing configurator snippet achieves this?
    answers:
      -
        value: |
          ```php
          return static function (RoutingConfigurator $routes): void {
              $routes->import('../../src/Controller/', 'attribute')
                  ->prefix([
                      'en' => '',
                      'nl' => '/nl',
                  ]);
          };
          ```
        correct: true
      -
        value: |
          ```php
          return static function (RoutingConfigurator $routes): void {
              $routes->import('../../src/Controller/', 'attribute')
                  ->localePrefix([
                      'en' => '',
                      'nl' => '/nl',
                  ]);
          };
          ```
        correct: false
      -
        value: |
          ```php
          return static function (RoutingConfigurator $routes): void {
              $routes->import('../../src/Controller/', 'attribute')
                  ->addPrefixByLocale([
                      'en' => '',
                      'nl' => '/nl',
                  ]);
          };
          ```
        correct: false
      -
        value: |
          ```php
          return static function (RoutingConfigurator $routes): void {
              $routes->import('../../src/Controller/', 'attribute')
                  ->setPrefixes([
                      'en' => '',
                      'nl' => '/nl',
                  ]);
          };
          ```
        correct: false
    help: |
      The `prefix()` method of `RoutingConfigurator` can accept an associative array to define locale-specific prefixes.
      https://symfony.com/doc/current/routing/localized_routes.html#prefixing-routes-by-locale

  -
    question: >
      Which Symfony console command can you use to check which route matches a specific URL path, along with its parameters?
    answers:
      -
        value: >
          `php bin/console router:check /your/path`
        correct: false
      -
        value: >
          `php bin/console router:match /your/path`
        correct: true
      -
        value: >
          `php bin/console debug:url /your/path`
        correct: false
      -
        value: >
          `php bin/console route:test /your/path`
        correct: false
    help: |
      The `router:match` command is specifically designed to test URL matching against defined routes.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: |
      You want to group all blog-related routes under the `/blog` prefix and ensure their names start with `blog_`. How would you achieve this using a `#[Route]` attribute on the `BlogController` class?
    answers:
      -
        value: |
          ```php
          #[Route('/blog', name: 'blog_')]
          class BlogController extends AbstractController
          {
              // ...
          }
          ```
        correct: true
      -
        value: |
          ```php
          #[Route(path: '/blog/*', name: 'blog_*')]
          class BlogController extends AbstractController
          {
              // ...
          }
          ```
        correct: false
      -
        value: |
          ```php
          #[Route(prefix: '/blog', namePrefix: 'blog_')]
          class BlogController extends AbstractController
          {
              // ...
          }
          ```
        correct: false
      -
        value: |
          ```php
          #[Route(group: 'blog', path: '/blog')]
          class BlogController extends AbstractController
          {
              // ...
          }
          ```
        correct: false
    help: |
      The `#[Route]` attribute on a controller class can define a common `path` prefix and `name` prefix for all routes within that controller.
      https://symfony.com/doc/current/routing.html#route-groups-and-collections

  -
    question: |
      By default, Symfony route parameters do not match the `/` (slash) character. If you have a route like `/files/{path}` and you want `path` to include slashes (e.g., `/files/my/document.pdf`), how would you configure the requirement for the `path` parameter using PHP attributes?
    answers:
      -
        value: |
          ```php
          #[Route('/files/{path}', name: 'file_view', requirements: ['path' => '.+'])]
          ```
        correct: true
      -
        value: |
          ```php
          #[Route('/files/{path}', name: 'file_view', requirements: ['path' => '.*'])]
          ```
        correct: false
      -
        value: >
          `#[Route('/files/{path}', name: 'file_view', allowSlashes: ['path'])]`
        correct: false
      -
        value: >
          `#[Route('/files/{path}', name: 'file_view', options: ['path_separator' => '/'])]`
        correct: false
    help: |
      To allow slashes in a route parameter, you must define a requirement that explicitly matches them, such as `.+` (one or more of any character).
      https://symfony.com/doc/current/routing.html#allowing-a-slash-character-in-a-route-parameter

  -
    question: |
      Given a PHP backed enum `OrderStatusEnum`:

      ```php
      namespace App\Enum;

      enum OrderStatusEnum: string
      {
          case Pending = 'pending';
          case Paid = 'paid';
          case Shipped = 'shipped';
      }
      ```
      And a controller method:
      ```php
      #[Route('/orders/list/{status}', name: 'list_orders_by_status')]
      public function list(OrderStatusEnum $status): Response
      {
          // ...
      }
      ```
      If a request comes to `/orders/list/paid`, how will Symfony handle the `$status` argument?
    answers:
      -
        value: >
          It will throw a `TypeError` because `paid` is a string, not an `OrderStatusEnum` object.
        correct: false
      -
        value: >
          Symfony will automatically convert the string `paid` to the `OrderStatusEnum::Paid` enum case.
        correct: true
      -
        value: >
          The `$status` argument will be `null` as Symfony cannot automatically convert strings to enums.
        correct: false
      -
        value: >
          It will attempt to find a service named `paid` and inject it.
        correct: false
    help: |
      Symfony automatically converts PHP backed enums used as route parameters to their corresponding enum cases.
      https://symfony.com/doc/current/routing.html#route-parameter-with-php-backed-enum

  -
    question: >
      You are generating a URL using `UrlGeneratorInterface::generate()`. If you need to generate a URL that includes the scheme and host (e.g., `https://www.example.com/login`), what type of URL generation is this?
    answers:
      -
        value: >
          Relative Path
        correct: false
      -
        value: >
          Network Path
        correct: false
      -
        value: >
          Absolute Path
        correct: false
      -
        value: >
          Absolute URL
        correct: true
    help: |
      An absolute URL includes the scheme (e.g., http, https) and the host.
      https://symfony.com/doc/current/routing.html#generating-urls-in-services

  -
    question: >
      When using Symfony's `RedirectController` to redirect to an external URL (e.g., `https://legacy.example.com/doc`), which default option should you use to specify the target?
    answers:
      -
        value: >
          `route`
        correct: false
      -
        value: >
          `url`
        correct: false
      -
        value: >
          `path`
        correct: true
      -
        value: >
          `target`
        correct: false
    help: |
      The `path` default option in `RedirectController` can accept an absolute path or an absolute URL for redirection.
      https://symfony.com/doc/current/routing.html#redirecting-to-an-absolute-path-or-external-url

  -
    question: >
      What is the primary purpose of marking a Symfony route as `stateless: true`?
    answers:
      -
        value: >
          To prevent the route from being cached by HTTP proxies.
        correct: false
      -
        value: >
          To indicate that the route does not require a user session and can be more aggressively cached.
        correct: true
      -
        value: >
          To disable CSRF protection for forms submitted to this route.
        correct: false
      -
        value: >
          To force the route to use a stateless API authentication method.
        correct: false
    help: |
      Marking a route as `stateless` prevents session usage during request matching, which can improve caching.
      https://symfony.com/doc/current/routing.html#stateless-routes

  -
    question: |
      You want to define a route that matches `m.example.com/` or `mobile.example.com/` and sets a `subdomain` parameter. Which PHP attribute configuration achieves this?
    answers:
      -
        value: |
          ```php
          #[Route(
              '/',
              name: 'mobile_homepage',
              host: '{subdomain}.example.com',
              defaults: ['subdomain' => 'm'],
              requirements: ['subdomain' => 'm|mobile']
          )]
          ```
        correct: true
      -
        value: |
          ```php
          #[Route(
              '/',
              name: 'mobile_homepage',
              host: 'm.example.com|mobile.example.com'
          )]
          ```
        correct: false
      -
        value: |
          ```php
          #[Route(
              '/',
              name: 'mobile_homepage',
              host: '{subdomain}.example.com',
              subdomain: 'm|mobile'
          )]
          ```
        correct: false
      -
        value: |
          ```php
          #[Route(
              '/',
              name: 'mobile_homepage',
              host: 'example.com',
              requirements: ['host' => '^(m|mobile)\.example\.com$']
          )]
          ```
        correct: false
    help: |
      Dynamic host parameters can be defined with requirements to restrict their values.
      https://symfony.com/doc/current/routing.html#domain-name-matching

  -
    question: >
      In Symfony's Expression Language for routing conditions, which variable allows you to access the values of matched route parameters (e.g., `id`, `slug`)?
    answers:
      -
        value: >
          `route_params`
        correct: false
      -
        value: >
          `parameters`
        correct: false
      -
        value: >
          `params`
        correct: true
      -
        value: >
          `args`
        correct: false
    help: |
      The `params` variable in Expression Language provides an array of matched route parameters.
      https://symfony.com/doc/current/routing.html#expression-language-for-conditions

  -
    question: |
      You want a route named `api_data` for `/api/data` to only accept `GET` and `POST` requests. How would you configure this using the PHP routing configurator?
    answers:
      -
        value: |
          ```php
          $routes->add('api_data', '/api/data')
              ->controller([App\Controller\ApiController::getData])
              ->methods(['GET', 'POST']);
          ```
        correct: true
      -
        value: |
          ```php
          $routes->add('api_data', '/api/data')
              ->controller([App\Controller\ApiController::getData])
              ->setMethods('GET|POST');
          ```
        correct: false
      -
        value: |
          ```php
          $routes->add('api_data', '/api/data')
              ->controller([App\Controller\ApiController::getData])
              ->httpMethods(['GET', 'POST']);
          ```
        correct: false
      -
        value: |
          ```php
          $routes->add('api_data', '/api/data')
              ->controller([App\Controller\ApiController::getData])
              ->requirements(['_method' => 'GET|POST']);
          ```
        correct: true
    help: |
      The `methods()` method or `_method` requirement can be used with the RoutingConfigurator to restrict HTTP methods.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: |
      Given the route definition:

      ```php
      #[Route('/articles/{_locale}/show', name: 'article_show')]
      public function show(string $_locale): Response
      {
          // ...
      }
      ```
      If the current request locale is `en`, and you generate a URL for `article_show` without explicitly setting `_locale`, what will be the generated URL?
    answers:
      -
        value: >
          `/articles/en/show`
        correct: true
      -
        value: >
          `/articles/show`
        correct: false
      -
        value: >
          `/articles/{_locale}/show`
        correct: false
      -
        value: >
          An error, as `_locale` is required.
        correct: false
    help: |
      When a route is localized, Symfony uses the current request locale by default if `_locale` is not explicitly provided during URL generation.
      https://symfony.com/doc/current/routing.html#generating-localized-urls

  -
    question: >
      Which option for the `debug:router` command allows you to display all defined route aliases?
    answers:
      -
        value: >
          `--show-all`
        correct: false
      -
        value: >
          `--aliases`
        correct: false
      -
        value: >
          `--show-aliases`
        correct: true
      -
        value: >
          `--with-aliases`
        correct: false
    help: |
      The `--show-aliases` option explicitly includes route aliases in the `debug:router` output.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: >
      What is the primary benefit of defining a route alias in Symfony?
    answers:
      -
        value: >
          It allows a route to match multiple different URL paths.
        correct: false
      -
        value: >
          It provides a way to refer to the same route using an alternative name, useful for backward compatibility.
        correct: true
      -
        value: >
          It enables automatic redirection from the alias name to the original route name.
        correct: false
      -
        value: >
          It creates a duplicate of the route with a different name.
        correct: false
    help: |
      Route aliases allow you to assign an alternate name to an existing route, primarily for backward compatibility.
      https://symfony.com/doc/current/routing.html#route-aliases

  -
    question: >
      When two routes have overlapping patterns, how does Symfony determine which route to match first?
    answers:
      -
        value: >
          The route defined last in the configuration file takes precedence.
        correct: false
      -
        value: >
          The route with the most specific pattern (e.g., fewer wildcards) is matched first.
        correct: true
      -
        value: >
          Routes are matched in alphabetical order of their names.
        correct: false
      -
        value: >
          The route with the highest `priority` attribute value is matched first.
        correct: true
    help: |
      Symfony prioritizes routes based on specificity (more specific patterns first) and then by the `priority` attribute (higher priority first).
      https://symfony.com/doc/current/routing.html#route-priority

  -
    question: >
      If you pass an object (e.g., a `Uuid` object) directly as an extra parameter to `generateUrl()`, what is the recommended practice to ensure it's correctly included in the URL?
    answers:
      -
        value: >
          Symfony automatically handles object to string conversion for URL parameters.
        correct: false
      -
        value: >
          You should explicitly cast the object to a string (e.g., `(string) $object`).
        correct: true
      -
        value: >
          You must implement a custom `__toString()` method on the object.
        correct: true
      -
        value: >
          Pass the object as an array `['id' => $object->getId()]`.
        correct: false
    help: |
      When passing objects as extra parameters, they must be convertible to strings. Explicit casting or implementing `__toString()` is necessary.
      https://symfony.com/doc/current/routing.html#extra-parameters-in-urls

  -
    question: >
      Which special internal routing attribute is automatically set by Symfony to reflect the requested format (e.g., `html`, `json`, `xml`), influencing the `Content-Type` of the response?
    answers:
      -
        value: >
          `_type`
        correct: false
      -
        value: >
          `_content_type`
        correct: false
      -
        value: >
          `_format`
        correct: true
      -
        value: >
          `_mime`
        correct: false
    help: |
      The `_format` parameter is used to set the "request format" of the `Request` object.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: |
      You are importing routes from a controller directory using the PHP routing configurator. How can you apply a host requirement (e.g., `api.example.com`) to all imported routes?
    answers:
      -
        value: |
          ```php
          $routes->import('../../src/Controller/', 'attribute')
              ->host('api.example.com');
          ```
        correct: true
      -
        value: |
          ```php
          $routes->import('../../src/Controller/', 'attribute')
              ->setHost('api.example.com');
          ```
        correct: false
      -
        value: |
          ```php
          $routes->import('../../src/Controller/', 'attribute')
              ->addHost('api.example.com');
          ```
        correct: false
      -
        value: |
          ```php
          $routes->import('../../src/Controller/', 'attribute')
              ->requirements(['_host' => 'api.example.com']);
          ```
        correct: false
    help: |
      The `host()` method on an imported route collection applies the host requirement to all routes within that collection.
      https://symfony.com/doc/current/routing.html#host-based-routing

  -
    question: >
      In Symfony's Expression Language for routing conditions, what does the `service()` function allow you to do?
    answers:
      -
        value: >
          Inject any service from the dependency injection container into the routing condition.
        correct: true
      -
        value: >
          Call a static method on a service class.
        correct: false
      -
        value: >
          Define a new service directly within the routing configuration.
        correct: false
      -
        value: >
          Check if a service exists in the container.
        correct: false
    help: |
      The `service()` function allows you to retrieve and use services tagged with `#[AsRoutingConditionService]` or `routing.condition_service` within routing conditions.
      https://symfony.com/doc/current/routing.html#expression-language-for-conditions

  -
    question: |
      Which of the following PHP attribute configurations correctly defines a route named `product_delete` for the path `/product/{id}` that only responds to `DELETE` requests?
    answers:
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_delete', methods: ['DELETE'])]
          ```
        correct: true
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_delete', method: 'DELETE')]
          ```
        correct: false
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_delete', httpMethod: 'DELETE')]
          ```
        correct: false
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_delete', requirements: ['_method' => 'DELETE'])]
          ```
        correct: true
    help: |
      The `methods` option in the `#[Route]` attribute or a `_method` requirement can be used to restrict HTTP methods.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: |
      You have a localized route defined as:

      ```php
      #[Route(path: [
          'en' => '/about-us',
          'fr' => '/a-propos'
      ], name: 'about_us')]
      public function about(): Response
      {
          // ...
      }
      ```
      When generating a URL for `about_us`, how can you explicitly request the French version of the URL?
    answers:
      -
        value: >
          `$this->generateUrl('about_us', ['locale' => 'fr']);`
        correct: false
      -
        value: >
          `$this->generateUrl('about_us', ['_locale' => 'fr']);`
        correct: true
      -
        value: >
          `$this->generateUrl('about_us', ['lang' => 'fr']);`
        correct: false
      -
        value: >
          `$this->generateUrl('about_us_fr');`
        correct: false
    help: |
      The `_locale` parameter is used to explicitly set the locale when generating localized URLs.
      https://symfony.com/doc/current/routing.html#generating-localized-urls

  -
    question: >
      When using `php bin/console debug:router` to inspect a specific route, what information is typically displayed for that route?
    answers:
      -
        value: >
          Route Name, Path, Controller, and all configured options (defaults, requirements, methods, host, etc.).
        correct: true
      -
        value: >
          Only the route name and its associated controller.
        correct: false
      -
        value: >
          A list of all URLs that can match the route.
        correct: false
      -
        value: >
          The number of times the route has been accessed.
        correct: false
    help: |
      `debug:router [route_name]` provides detailed information about a specific route.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: |
      You want to import routes from `src/Controller/` and apply a common URL prefix `/admin` and a name prefix `admin_` to all of them. Which YAML configuration achieves this?
    answers:
      -
        value: |
          ```yaml
          admin_controllers:
              resource: '../../src/Controller/'
              type: attribute
              prefix: /admin
              name_prefix: admin_
          ```
        correct: true
      -
        value: |
          ```yaml
          admin_controllers:
              path: '../../src/Controller/'
              loader: attribute
              url_prefix: /admin
              route_name_prefix: admin_
          ```
        correct: false
      -
        value: |
          ```yaml
          admin_controllers:
              import: '../../src/Controller/'
              format: attribute
              prefix_path: /admin
              prefix_name: admin_
          ```
        correct: false
      -
        value: |
          ```yaml
          admin_controllers:
              resource: '../../src/Controller/'
              type: attribute
              defaults:
                  _prefix: /admin
                  _name_prefix: admin_
          ```
        correct: false
    help: |
      The `prefix` and `name_prefix` options can be applied to imported route resources in YAML.
      https://symfony.com/doc/current/routing.html#route-groups-and-collections

  -
    question: >
      You encounter the error message: "Controller \"App\\Controller\\BlogController::show()\" requires that you provide a value for the \"$slug\" argument." What is the most likely cause of this error?
    answers:
      -
        value: >
          The `slug` parameter is missing in the URL, but the route expects it.
        correct: true
      -
        value: >
          The `slug` parameter is defined as a query parameter instead of a route parameter.
        correct: false
      -
        value: >
          The controller method is not public.
        correct: false
      -
        value: >
          The route name is incorrect.
        correct: false
    help: |
      This error indicates that a mandatory route parameter expected by the controller method was not provided in the matched URL.
      https://symfony.com/doc/current/routing.html#troubleshooting-routing

  -
    question: >
      When attempting to generate a URL for a route that does not exist, which exception will Symfony throw?
    answers:
      -
        value: >
          `Symfony\Component\Routing\Exception\InvalidRouteException`
        correct: false
      -
        value: >
          `Symfony\Component\Routing\Exception\RouteNotFoundException`
        correct: true
      -
        value: >
          `Symfony\Component\Routing\Exception\MissingRouteException`
        correct: false
      -
        value: >
          `Symfony\Component\HttpKernel\Exception\NotFoundHttpException`
        correct: false
    help: |
      `RouteNotFoundException` is specifically thrown when a route cannot be found by its name.
      https://symfony.com/doc/current/routing.html#checking-for-route-existence

  -
    question: >
      Which special internal routing attribute is used to set the fragment identifier (the part of a URL starting with `#`) on the `Request` object?
    answers:
      -
        value: >
          `_hash`
        correct: false
      -
        value: >
          `_anchor`
        correct: false
      -
        value: >
          `_fragment`
        correct: true
      -
        value: >
          `_section`
        correct: false
    help: |
      The `_fragment` parameter is used to set the fragment identifier.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      You want to define a route that matches `sub.example.com/` where `sub` can be any alphanumeric string. Which host configuration would achieve this?
    answers:
      -
        value: >
          `host: '{sub}.example.com'`
        correct: true
      -
        value: >
          `host: '*.example.com'`
        correct: false
      -
        value: >
          `host: '(?P<sub_domain>.*)\.example\.com'`
        correct: false
      -
        value: >
          `host: '{subdomain: .+\}.example.com'`
        correct: false
    help: |
      Route parameters can be used in the `host` option to match dynamic subdomains.
      https://symfony.com/doc/current/routing.html#domain-name-matching

  -
    question: >
      In routing conditions using Expression Language, which variable represents the current `Request` object, allowing you to access HTTP headers, query parameters, etc.?
    answers:
      -
        value: >
          `http_request`
        correct: false
      -
        value: >
          `request`
        correct: true
      -
        value: >
          `input`
        correct: false
      -
        value: >
          `data`
        correct: false
    help: |
      The `request` variable in Expression Language provides access to the `Symfony\Component\HttpFoundation\Request` object.
      https://symfony.com/doc/current/routing.html#expression-language-for-conditions

  -
    question: >
      Which of the following is the correct way to define a route `api_users` for `/api/users` that only accepts `GET` requests using PHP attributes?
    answers:
      -
        value: >
          `#[Route('/api/users', name: 'api_users', methods: ['GET'])]`
        correct: true
      -
        value: >
          `#[Route('/api/users', name: 'api_users', method: 'GET')]`
        correct: false
      -
        value: >
          `#[Route('/api/users', name: 'api_users', httpMethods: ['GET'])]`
        correct: false
      -
        value: >
          `#[Route('/api/users', name: 'api_users', requirements: ['_method' => 'GET'])]`
        correct: true
    help: |
      The `methods` option in the `#[Route]` attribute or a `_method` requirement can be used to restrict HTTP methods.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: |
      You are defining a route for `/products/{id}.{_format}`. You want the default format to be `html` and allow `html` or `json`. Which YAML configuration is correct?
    answers:
      -
        value: |
          ```yaml
          product_detail:
              path: /products/{id}.{_format}
              controller: App\Controller\ProductController::detail
              format: html
              requirements:
                  _format: html|json
          ```
        correct: true
      -
        value: |
          ```yaml
          product_detail:
              path: /products/{id}.{_format}
              controller: App\Controller\ProductController::detail
              defaults:
                  _format: html
              requirements:
                  _format: html|json
          ```
        correct: true
      -
        value: |
          ```yaml
          product_detail:
              path: /products/{id}.{_format}
              controller: App\Controller\ProductController::detail
              default_format: html
              allowed_formats: [html, json]
          ```
        correct: false
      -
        value: |
          ```yaml
          product_detail:
              path: /products/{id}.{_format}
              controller: App\Controller\ProductController::detail
              options:
                  format: html
                  requirements:
                      _format: html|json
          ```
        correct: false
    help: |
      The `format` key sets the default format, and `_format` requirement restricts allowed formats.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      What is the purpose of the `router:match` command in Symfony?
    answers:
      -
        value: >
          To generate a URL for a given route name.
        correct: false
      -
        value: >
          To test if a specific URL path matches any defined route and show its details.
        correct: true
      -
        value: >
          To compare two different routing configurations.
        correct: false
      -
        value: >
          To find duplicate route definitions.
        correct: false
    help: |
      `router:match` is used to debug routing by checking which route (if any) matches a given URL.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: >
      You have a set of routes in `src/Controller/Admin/` that should all be accessed via HTTPS. How can you enforce this for the entire imported collection using YAML?
    answers:
      -
        value: |
          ```yaml
          admin_routes:
              resource: '../../src/Controller/Admin/'
              type: attribute
              schemes: [https]
          ```
        correct: true
      -
        value: |
          ```yaml
          admin_routes:
              resource: '../../src/Controller/Admin/'
              type: attribute
              ssl: true
          ```
        correct: false
      -
        value: |
          ```yaml
          admin_routes:
              resource: '../../src/Controller/Admin/'
              type: attribute
              requirements:
                  _scheme: https
          ```
        correct: false
      -
        value: |
          ```yaml
          admin_routes:
              resource: '../../src/Controller/Admin/'
              type: attribute
              force_https: true
          ```
        correct: false
    help: |
      The `schemes` option can be applied to imported route collections to enforce a specific scheme.
      https://symfony.com/doc/current/routing.html#forcing-a-scheme-https

  -
    question: >
      Which of the following is NOT a valid way to define a route in Symfony 7?
    answers:
      -
        value: >
          PHP Attributes
        correct: false
      -
        value: >
          YAML files
        correct: false
      -
        value: >
          XML files
        correct: false
      -
        value: >
          INI files
        correct: true
    help: |
      Symfony 7 supports route definition via PHP attributes, YAML, XML, and PHP files (using the RoutingConfigurator). INI is not supported for routing.
      https://symfony.com/doc/current/routing.html#defining-routes

  -
    question: >
      What is the purpose of the `_controller` special parameter in Symfony routing?
    answers:
      -
        value: >
          It defines the default value for a controller method argument.
        correct: false
      -
        value: >
          It specifies the fully qualified class name and method (or service ID) that will handle the request.
        correct: true
      -
        value: >
          It indicates that the route is handled by a custom controller factory.
        correct: false
      -
        value: >
          It is used for debugging purposes to log controller execution.
        correct: false
    help: |
      The `_controller` parameter is used internally by Symfony to map a route to its corresponding controller action.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: |
      You want to define a route that matches `admin.example.com/dashboard` and is handled by `App\Controller\AdminController::dashboard`. Which PHP attribute configuration is correct?
    answers:
      -
        value: |
          ```php
          #[Route('/dashboard', name: 'admin_dashboard', host: 'admin.example.com')]
          ```
        correct: true
      -
        value: |
          ```php
          #[Route('/dashboard', name: 'admin_dashboard', domain: 'admin.example.com')]
          ```
        correct: false
      -
        value: |
          ```php
          #[Route('/dashboard', name: 'admin_dashboard', hostname: 'admin.example.com')]
          ```
        correct: false
      -
        value: |
          ```php
          #[Route('/dashboard', name: 'admin_dashboard', server: 'admin.example.com')]
          ```
        correct: false
    help: |
      The `host` option in the `#[Route]` attribute is used for domain-based routing.
      https://symfony.com/doc/current/routing.html#domain-name-matching

  -
    question: >
      Which Expression Language variable represents an array of matched route parameters for the current route?
    answers:
      -
        value: >
          `route_params`
        correct: false
      -
        value: >
          `params`
        correct: true
      -
        value: >
          `args`
        correct: false
      -
        value: >
          `attributes`
        correct: false
    help: |
      The `params` variable provides access to the matched route parameters.
      https://symfony.com/doc/current/routing.html#expression-language-for-conditions

  -
    question: >
      To define a route that responds to `GET`, `HEAD`, and `POST` HTTP methods using the PHP routing configurator, which method would you use?
    answers:
      -
        value: >
          `->methods(['GET', 'HEAD', 'POST'])`
        correct: true
      -
        value: >
          `->allowMethods(['GET', 'HEAD', 'POST'])`
        correct: false
      -
        value: >
          `->setHttpMethods(['GET', 'HEAD', 'POST'])`
        correct: false
      -
        value: >
          `->withMethods('GET|HEAD|POST')`
        correct: false
    help: |
      The `methods()` method on a route definition in the PHP configurator accepts an array of HTTP methods.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      When defining localized routes, what is the purpose of the `_locale` parameter in the route path (e.g., `/blog/{_locale}/posts`)?
    answers:
      -
        value: >
          It's a placeholder for the default language of the application.
        correct: false
      -
        value: >
          It allows the URL to contain the locale, making it part of the route matching.
        correct: true
      -
        value: >
          It's an optional parameter that Symfony ignores during URL generation.
        correct: false
      -
        value: >
          It's used to automatically translate the route path.
        correct: false
    help: |
      Including `_locale` in the path makes the locale an explicit part of the URL, enabling localized routing.
      https://symfony.com/doc/current/routing/localized_routes.html#localized-routes

  -
    question: >
      What is the output of `php bin/console debug:router --method=ANY`?
    answers:
      -
        value: >
          Only routes that explicitly define `ANY` as their method.
        correct: false
      -
        value: >
          All routes, regardless of their HTTP method restrictions.
        correct: true
      -
        value: >
          Routes that have no explicit HTTP method restrictions.
        correct: true
      -
        value: >
          Routes that match any HTTP method except `GET` and `POST`.
        correct: false
    help: |
      The `ANY` value for the `--method` option displays routes that match any HTTP method, effectively showing all routes.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: |
      You have a route group defined on a controller with a prefix `/admin`. If a method in this controller has a route `#[Route('/users')]`, what will be the full path for this route?
    answers:
      -
        value: >
          `/users`
        correct: false
      -
        value: >
          `/admin/users`
        correct: true
      -
        value: >
          `/admin-users`
        correct: false
      -
        value: >
          `/admin_users`
        correct: false
    help: |
      A prefix defined on a route group (e.g., on a controller class) is prepended to the paths of all routes within that group.
      https://symfony.com/doc/current/routing.html#route-groups-and-collections

  -
    question: >
      What happens if you try to generate a URL for a route that has a required parameter but you don't provide a value for it?
    answers:
      -
        value: >
          Symfony will generate the URL with an empty string for the missing parameter.
        correct: false
      -
        value: >
          Symfony will throw a `RouteNotFoundException`.
        correct: false
      -
        value: >
          Symfony will throw an `MissingMandatoryParametersException`.
        correct: false
      -
        value: >
          Symfony will throw a `Symfony\Component\Routing\Exception\MissingMandatoryParametersException` (or similar, indicating missing parameters).
        correct: true
    help: |
      An exception is thrown if mandatory parameters are missing during URL generation.
      https://symfony.com/doc/current/routing.html#troubleshooting-routing

  -
    question: >
      What is the primary role of the `UrlGeneratorInterface` in Symfony?
    answers:
      -
        value: >
          To match incoming URLs to defined routes.
        correct: false
      -
        value: >
          To generate URLs from route names and parameters.
        correct: true
      -
        value: >
          To validate URL parameters against requirements.
        correct: false
      -
        value: >
          To redirect users to different URLs.
        correct: false
    help: |
      The `UrlGeneratorInterface` is responsible for generating URLs based on your application's routes.
      https://symfony.com/doc/current/routing.html#generating-urls-in-services

  -
    question: >
      Which of the following special internal routing attributes is used to define the controller that will handle the request?
    answers:
      -
        value: >
          `_action`
        correct: false
      -
        value: >
          `_handler`
        correct: false
      -
        value: >
          `_controller`
        correct: true
      -
        value: >
          `_route_handler`
        correct: false
    help: |
      The `_controller` parameter explicitly defines the controller and action to be executed.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: |
      You want to define a route in YAML that matches `subdomain.example.com/` where `subdomain` must be either `blog` or `news`. Which configuration is correct?
    answers:
      -
        value: |
          ```yaml
          content_homepage:
              path: /
              host: '{subdomain}.example.com'
              controller: App\Controller\ContentController::homepage
              requirements:
                  subdomain: blog|news
          ```
        correct: true
      -
        value: |
          ```yaml
          content_homepage:
              path: /
              host: 'blog.example.com|news.example.com'
              controller: App\Controller\ContentController::homepage
          ```
        correct: false
      -
        value: |
          ```yaml
          content_homepage:
              path: /
              host: '{subdomain}.example.com'
              controller: App\Controller\ContentController::homepage
              defaults:
                  subdomain: blog
              requirements:
                  subdomain: '^(blog|news)$'
          ```
        correct: true
      -
        value: |
          ```yaml
          content_homepage:
              path: /
              host: '{subdomain}.example.com'
              controller: App\Controller\ContentController::homepage
              host_requirements:
                  subdomain: blog|news
          ```
        correct: false
    help: |
      Dynamic host parameters can have requirements defined just like path parameters.
      https://symfony.com/doc/current/routing.html#domain-name-matching

  -
    question: >
      Which Expression Language function allows you to retrieve a service from the container within a routing condition, provided the service is tagged correctly?
    answers:
      -
        value: >
          `get_service()`
        correct: false
      -
        value: >
          `container_get()`
        correct: false
      -
        value: >
          `service()`
        correct: true
      -
        value: >
          `inject()`
        correct: false
    help: |
      The `service()` function is used to access services in routing conditions.
      https://symfony.com/doc/current/routing.html#expression-language-for-conditions

  -
    question: >
      You want a route to respond to both `GET` and `HEAD` requests. Which of the following is a valid way to specify this using PHP attributes?
    answers:
      -
        value: >
          `#[Route('/data', name: 'get_data', methods: ['GET', 'HEAD'])]`
        correct: true
      -
        value: >
          `#[Route('/data', name: 'get_data', method: 'GET|HEAD')]`
        correct: false
      -
        value: >
          `#[Route('/data', name: 'get_data', httpMethods: ['GET', 'HEAD'])]`
        correct: false
      -
        value: >
          `#[Route('/data', name: 'get_data', requirements: ['_method' => 'GET|HEAD'])]`
        correct: true
    help: |
      The `methods` option accepts an array of HTTP methods, or a `_method` requirement can use a regex.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      When defining a route with a `_locale` parameter (e.g., `/news/{_locale}/{slug}`), what is the primary benefit for multilingual applications?
    answers:
      -
        value: >
          It allows Symfony to automatically translate the `slug` parameter.
        correct: false
      -
        value: >
          It makes the locale explicit in the URL, aiding SEO and user understanding.
        correct: true
      -
        value: >
          It enables automatic content negotiation based on the user's browser settings.
        correct: false
      -
        value: >
          It forces all content on that route to be in the specified locale.
        correct: false
    help: |
      Explicitly including `_locale` in the URL path is a common pattern for localized routes, improving clarity and SEO.
      https://symfony.com/doc/current/routing/localized_routes.html

  -
    question: >
      What information does `php bin/console router:match /some/path` provide if the path matches a route?
    answers:
      -
        value: >
          The route name, controller, and matched parameters.
        correct: true
      -
        value: >
          Only the route name.
        correct: false
      -
        value: >
          A list of all routes that *could* match the path.
        correct: false
      -
        value: >
          The HTTP status code that would be returned.
        correct: false
    help: |
      `router:match` provides detailed information about the matched route, including its name and parameters.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: |
      You want to define a route named `product_details` for `/products/{id}` using PHP attributes. This route should also have an alias `product_info` for backward compatibility. Which configuration is correct?
    answers:
      -
        value: |
          ```php
          #[Route('/products/{id}', name: 'product_details', alias: ['product_info'])]
          ```
        correct: true
      -
        value: |
          ```php
          #[Route('/products/{id}', name: 'product_details')]
          #[Route('/products/{id}', name: 'product_info')]
          ```
        correct: false
      -
        value: |
          ```php
          #[Route('/products/{id}', name: 'product_details', aliases: 'product_info')]
          ```
        correct: false
      -
        value: |
          ```php
          #[Route('/products/{id}', name: 'product_details', options: ['alias' => 'product_info'])]
          ```
        correct: false
    help: |
      The `alias` option in the `#[Route]` attribute allows defining one or more aliases for a route.
      https://symfony.com/doc/current/routing.html#route-aliases

  -
    question: >
      What is the default `priority` value for a Symfony route if not explicitly set?
    answers:
      -
        value: >
          100
        correct: false
      -
        value: >
          1
        correct: false
      -
        value: >
          0
        correct: true
      -
        value: >
          -100
        correct: false
    help: |
      The default priority for routes is 0. Routes with higher priority values are matched first.
      https://symfony.com/doc/current/routing.html#route-priority

  -
    question: >
      When generating a URL using `UrlGeneratorInterface::generate()`, what is the default type of URL generated if no third argument is provided?
    answers:
      -
        value: >
          Absolute URL (e.g., `http://example.com/path`)
        correct: false
      -
        value: >
          Network Path (e.g., `//example.com/path`)
        correct: false
      -
        value: >
          Absolute Path (e.g., `/path`)
        correct: true
      -
        value: >
          Relative Path (e.g., `path` or `../path`)
        correct: false
    help: |
      By default, `generate()` creates an absolute path, starting with a slash.
      https://symfony.com/doc/current/routing.html#generating-urls-in-services

  -
    question: >
      Which special internal routing attribute is used to set the request format (e.g., `html`, `json`) and influences the `Content-Type` header of the response?
    answers:
      -
        value: >
          `_type`
        correct: false
      -
        value: >
          `_format`
        correct: true
      -
        value: >
          `_content_type`
        correct: false
      -
        value: >
          `_mime_type`
        correct: false
    help: |
      The `_format` parameter is used to determine the request format.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: |
      You want to import routes from `src/Controller/` and apply a host requirement that matches any subdomain of `example.com` (e.g., `blog.example.com`, `shop.example.com`). Which PHP routing configurator snippet achieves this?
    answers:
      -
        value: |
          ```php
          $routes->import('../../src/Controller/', 'attribute')
              ->host('{subdomain}.example.com');
          ```
        correct: true
      -
        value: |
          ```php
          $routes->import('../../src/Controller/', 'attribute')
              ->host('*.example.com');
          ```
        correct: false
      -
        value: |
          ```php
          $routes->import('../../src/Controller/', 'attribute')
              ->setHostPattern('{subdomain}.example.com');
          ```
        correct: false
      -
        value: |
          ```php
          $routes->import('../../src/Controller/', 'attribute')
              ->requirements(['_host' => '.+\.example\.com']);
          ```
        correct: false
    help: |
      Using a parameter in the `host()` method allows matching dynamic subdomains.
      https://symfony.com/doc/current/routing.html#domain-name-matching

  -
    question: >
      What is the purpose of the `context.getMethod()` expression in a routing condition?
    answers:
      -
        value: >
          To get the HTTP method of the current request (e.g., 'GET', 'POST').
        correct: true
      -
        value: >
          To retrieve the method name of the matched controller.
        correct: false
      -
        value: >
          To check if the current request is an AJAX request.
        correct: false
      -
        value: >
          To access a service method from the `RequestContext`.
        correct: false
    help: |
      `context.getMethod()` is an Expression Language function that returns the HTTP method of the current request.
      https://symfony.com/doc/current/routing.html#expression-language-for-conditions

  -
    question: >
      Which of the following HTTP methods is typically used for submitting data to be processed to a specified resource?
    answers:
      -
        value: >
          `GET`
        correct: false
      -
        value: >
          `PUT`
        correct: false
      -
        value: >
          `POST`
        correct: true
      -
        value: >
          `DELETE`
        correct: false
    help: |
      The `POST` method is commonly used to send data to a server to create or update a resource.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      When defining a route with a `_locale` parameter, what is the default behavior if no locale is explicitly provided in the URL or via a session/cookie?
    answers:
      -
        value: >
          Symfony will throw an error, as `_locale` is always required.
        correct: false
      -
        value: >
          Symfony will use the default locale configured in `framework.yaml`.
        correct: true
      -
        value: >
          Symfony will attempt to guess the locale from the `Accept-Language` header.
        correct: true
      -
        value: >
          The route will not be matched.
        correct: false
    help: |
      Symfony falls back to the default locale or attempts to guess it if `_locale` is not explicitly present.
      https://symfony.com/doc/current/routing/localized_routes.html#guessing-the-user-s-locale

  -
    question: >
      What is the primary purpose of the `router:match` command in Symfony's console?
    answers:
      -
        value: >
          To generate a URL for a given route name.
        correct: false
      -
        value: >
          To identify which route matches a specific incoming URL path.
        correct: true
      -
        value: >
          To list all available routes in the application.
        correct: false
      -
        value: >
          To test the performance of the router.
        correct: false
    help: |
      The `router:match` command is a debugging tool to see how a URL is resolved to a route.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: |
      You want to import routes from `src/Controller/Api/` and apply a common prefix `/api/v1` and a name prefix `api_v1_`. Which PHP routing configurator snippet achieves this?
    answers:
      -
        value: |
          ```php
          return static function (RoutingConfigurator $routes): void {
              $routes->import('../../src/Controller/Api/', 'attribute')
                  ->prefix('/api/v1')
                  ->namePrefix('api_v1_');
          };
          ```
        correct: true
      -
        value: |
          ```php
          return static function (RoutingConfigurator $routes): void {
              $routes->import('../../src/Controller/Api/', 'attribute')
                  ->setPrefix('/api/v1')
                  ->setNamePrefix('api_v1_');
          };
          ```
        correct: false
      -
        value: |
          ```php
          return static function (RoutingConfigurator $routes): void {
              $routes->import('../../src/Controller/Api/', 'attribute')
                  ->pathPrefix('/api/v1')
                  ->routePrefix('api_v1_');
          };
          ```
        correct: false
      -
        value: |
          ```php
          return static function (RoutingConfigurator $routes): void {
              $routes->import('../../src/Controller/Api/', 'attribute')
                  ->addPrefix('/api/v1')
                  ->addNamePrefix('api_v1_');
          };
          ```
        correct: false
    help: |
      The `prefix()` and `namePrefix()` methods are used to apply common prefixes to imported routes.
      https://symfony.com/doc/current/routing.html#route-groups-and-collections

  -
    question: >
      What error message would you typically see if you try to generate a URL for a route that requires a `slug` parameter, but you forget to pass the `slug` value?
    answers:
      -
        value: >
          "Route 'blog_show' not found."
        correct: false
      -
        value: >
          "Some mandatory parameters are missing (\"slug\") to generate a URL for route \"blog_show\"."
        correct: true
      -
        value: >
          "Parameter 'slug' is not optional."
        correct: false
      -
        value: >
          "Cannot generate URL without 'slug' parameter."
        correct: false
    help: |
      Symfony provides a clear error message indicating which mandatory parameters are missing during URL generation.
      https://symfony.com/doc/current/routing.html#troubleshooting-routing

  -
    question: >
      What is the recommended way to check if a route exists in Symfony without causing performance issues related to routing cache regeneration?
    answers:
      -
        value: >
          Iterate through the `RouteCollection` and check for the route name.
        correct: false
      -
        value: >
          Attempt to generate the URL and catch the `RouteNotFoundException`.
        correct: true
      -
        value: >
          Use a dedicated `RouteChecker` service.
        correct: false
      -
        value: >
          Call `debug:router` and parse its output.
        correct: false
    help: |
      Catching `RouteNotFoundException` is the recommended and performant way to check for route existence.
      https://symfony.com/doc/current/routing.html#checking-for-route-existence

  -
    question: >
      Which special internal routing attribute is used to set the fragment identifier, which is the optional last part of a URL that starts with a `#` character?
    answers:
      -
        value: >
          `_hash`
        correct: false
      -
        value: >
          `_anchor`
        correct: false
      -
        value: >
          `_fragment`
        correct: true
      -
        value: >
          `_section`
        correct: false
    help: |
      The `_fragment` parameter is specifically for the URL fragment.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      You want to define a route that matches any subdomain of `my-app.com` (e.g., `blog.my-app.com`, `shop.my-app.com`). Which host pattern would you use?
    answers:
      -
        value: >
          `host: '{subdomain}.my-app.com'`
        correct: true
      -
        value: >
          `host: '*.my-app.com'`
        correct: false
      -
        value: >
          `host: '(?P<subdomain>.+)\.my-app\.com'`
        correct: true
      -
        value: >
          `host: 'any.my-app.com'`
        correct: false
    help: |
      Both `{subdomain}.my-app.com` and the equivalent regex `(?P<subdomain>.+)\.my-app\.com` allow matching any subdomain.
      https://symfony.com/doc/current/routing.html#domain-name-matching

  -
    question: >
      In Symfony's Expression Language for routing conditions, what is the purpose of the `env()` function?
    answers:
      -
        value: >
          To get the current Symfony environment (e.g., `dev`, `prod`).
        correct: false
      -
        value: >
          To retrieve the value of an environment variable.
        correct: true
      -
        value: >
          To check if an environment variable is set.
        correct: false
      -
        value: >
          To set an environment variable for the current request.
        correct: false
    help: |
      The `env()` function allows access to environment variables within routing conditions.
      https://symfony.com/doc/current/routing.html#expression-language-for-conditions

  -
    question: >
      Which of the following HTTP methods is considered idempotent and safe for retrieving data?
    answers:
      -
        value: >
          `POST`
        correct: false
      -
        value: >
          `PUT`
        correct: false
      -
        value: >
          `GET`
        correct: true
      -
        value: >
          `DELETE`
        correct: false
    help: |
      `GET` requests are idempotent (multiple identical requests have the same effect as a single one) and safe (they do not alter the server state).
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      What is the primary role of the `UrlMatcher` class in the Symfony Routing component?
    answers:
      -
        value: >
          To generate URLs from route names.
        correct: false
      -
        value: >
          To match an incoming request URL to a defined route.
        correct: true
      -
        value: >
          To compile routing configurations into a cache.
        correct: false
      -
        value: >
          To validate route parameters.
        correct: false
    help: |
      The `UrlMatcher` is responsible for taking a URL and finding the corresponding route.
      https://symfony.com/doc/current/create_framework/routing.html#matching-urls

  -
    question: >
      What is the purpose of the `#[Route(env: 'dev')]` attribute on a controller method?
    answers:
      -
        value: >
          The route will only be active when the Symfony environment is `dev`.
        correct: true
      -
        value: >
          The route will only be accessible from development IP addresses.
        correct: false
      -
        value: >
          The route will log extra debugging information in the `dev` environment.
        correct: false
      -
        value: >
          The route is automatically excluded from production builds.
        correct: false
    help: |
      The `env` option restricts a route's availability to specific Symfony environments.
      https://symfony.com/doc/current/routing.html#environment-specific-routes

  -
    question: >
      Which of the following is a valid way to define a route with a default value for a parameter `id` to `1` using PHP attributes?
    answers:
      -
        value: >
          `#[Route('/product/{id}', name: 'product_show', defaults: ['id' => 1])]`
        correct: true
      -
        value: >
          `#[Route('/product/{id}', name: 'product_show', default: ['id' => 1])]`
        correct: false
      -
        value: >
          `#[Route('/product/{id?1}', name: 'product_show')]`
        correct: false
      -
        value: >
          `#[Route('/product/{id}', name: 'product_show', options: ['default_id' => 1])]`
        correct: false
    help: |
      The `defaults` option in the `#[Route]` attribute is used to set default values for route parameters.
      https://symfony.com/doc/current/routing.html#setting-default-values-for-parameters

  -
    question: >
      What is the purpose of the `_fragment` special parameter in Symfony routing?
    answers:
      -
        value: >
          It defines a part of the URL that is ignored by the router.
        correct: false
      -
        value: >
          It is used to set the fragment identifier (the part after `#`) in the URL.
        correct: true
      -
        value: >
          It specifies a partial route match.
        correct: false
      -
        value: >
          It indicates a route that can be cached as a fragment.
        correct: false
    help: |
      The `_fragment` parameter is used to handle the URL fragment.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      When using `RedirectController` to redirect to another internal route, which default option should be used to specify the target route's name?
    answers:
      -
        value: >
          `path`
        correct: false
      -
        value: >
          `url`
        correct: false
      -
        value: >
          `route`
        correct: true
      -
        value: >
          `target_route`
        correct: false
    help: |
      The `route` default option specifies the name of an internal route to redirect to.
      https://symfony.com/doc/current/routing.html#redirecting-routes

  -
    question: >
      Which of the following is true about the `_locale` special parameter in Symfony routing?
    answers:
      -
        value: >
          It is automatically translated by Symfony.
        correct: false
      -
        value: >
          It sets the locale on the `Request` object.
        correct: true
      -
        value: >
          It is always a required parameter in localized routes.
        correct: false
      -
        value: >
          It can only be defined in YAML routing files.
        correct: false
    help: |
      The `_locale` parameter sets the locale for the current request, and it can be optional if a default is provided or guessed.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      What is the purpose of the `router:match` command in Symfony?
    answers:
      -
        value: >
          To generate a URL for a given route name.
        correct: false
      -
        value: >
          To identify which route matches a specific incoming URL path.
        correct: true
      -
        value: >
          To list all available routes in the application.
        correct: false
      -
        value: >
          To test the performance of the router.
        correct: false
    help: |
      The `router:match` command is a debugging tool to see how a URL is resolved to a route.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: >
      When defining a route with a parameter `slug` that should match any character including slashes, which regex would you use?
    answers:
      -
        value: >
          `\w+`
        correct: false
      -
        value: >
          `.*`
        correct: false
      -
        value: >
          `.+`
        correct: true
      -
        value: >
          `[a-zA-Z0-9-/]+`
        correct: false
    help: |
      The regex `.+` matches one or more of any character, including slashes. `.*` would match zero or more.
      https://symfony.com/doc/current/routing.html#allowing-a-slash-character-in-a-route-parameter

  -
    question: >
      Which of the following is a valid way to define a route in a PHP file using the `RoutingConfigurator`?
    answers:
      -
        value: |
          ```php
          return static function (RoutingConfigurator $routes): void {
              $routes->add('my_route', '/my-path')
                  ->controller([App\Controller\MyController::class, 'index']);
          };
          ```
        correct: true
      -
        value: |
          ```php
          $routes->add('my_route', '/my-path', 'App\Controller\MyController::index');
          ```
        correct: false
      -
        value: |
          ```php
          $routes->route('my_route', '/my-path')->to('App\Controller\MyController::index');
          ```
        correct: false
      -
        value: |
          ```php
          return function (RoutingConfigurator $routes) {
              $routes->define('my_route', '/my-path')->handler('App\Controller\MyController::index');
          };
          ```
        correct: false
    help: |
      The `add()` method is used to define routes with the `RoutingConfigurator`.
      https://symfony.com/doc/current/routing.html#defining-routes-in-php-files

  -
    question: >
      What is the primary purpose of the `#[Route(priority: 2)]` attribute?
    answers:
      -
        value: >
          To make the route match before other routes with lower or default priority.
        correct: true
      -
        value: >
          To indicate the importance of the route for caching.
        correct: false
      -
        value: >
          To define the order in which route parameters are processed.
        correct: false
      -
        value: >
          To assign a weight for load balancing.
        correct: false
    help: |
      The `priority` attribute explicitly controls the order of route matching. Higher values mean higher priority.
      https://symfony.com/doc/current/routing.html#route-priority

  -
    question: >
      When generating a URL in a Symfony service, which interface should you inject to access URL generation capabilities?
    answers:
      -
        value: >
          `Symfony\Component\HttpFoundation\UrlGeneratorInterface`
        correct: false
      -
        value: >
          `Symfony\Component\Routing\Generator\UrlGeneratorInterface`
        correct: true
      -
        value: >
          `Symfony\Component\Routing\RouterInterface`
        correct: false
      -
        value: >
          `Symfony\Component\HttpKernel\UriGeneratorInterface`
        correct: false
    help: |
      The `UrlGeneratorInterface` from the `Symfony\Component\Routing\Generator` namespace is the correct interface for URL generation.
      https://symfony.com/doc/current/routing.html#generating-urls-in-services

  -
    question: >
      Which of the following special internal routing attributes is used to set the request format (e.g., `json`, `xml`)?
    answers:
      -
        value: >
          `_type`
        correct: false
      -
        value: >
          `_format`
        correct: true
      -
        value: >
          `_content_type`
        correct: false
      -
        value: >
          `_mime`
        correct: false
    help: |
      The `_format` parameter is used to set the request format.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      You want to define a route that matches `api.example.com/data` and is handled by `App\Controller\ApiController::getData`. Which YAML configuration is correct?
    answers:
      -
        value: |
          ```yaml
          api_data:
              path: /data
              host: api.example.com
              controller: App\Controller\ApiController::getData
          ```
        correct: true
      -
        value: |
          ```yaml
          api_data:
              url: /data
              domain: api.example.com
              controller: App\Controller\ApiController::getData
          ```
        correct: false
      -
        value: |
          ```yaml
          api_data:
              path: /data
              hostname: api.example.com
              controller: App\Controller\ApiController::getData
          ```
        correct: false
      -
        value: |
          ```yaml
          api_data:
              route: /data
              server: api.example.com
              controller: App\Controller\ApiController::getData
          ```
        correct: false
    help: |
      The `host` option in YAML routing is used to match routes based on the domain name.
      https://symfony.com/doc/current/routing.html#domain-name-matching

  -
    question: >
      In Symfony's Expression Language for routing conditions, what does `request.headers.get('User-Agent')` allow you to do?
    answers:
      -
        value: >
          Get the value of the `User-Agent` HTTP header from the current request.
        correct: true
      -
        value: >
          Set the `User-Agent` header for the response.
        correct: false
      -
        value: >
          Check if the request is coming from a specific user.
        correct: false
      -
        value: >
          Access user authentication details.
        correct: false
    help: |
      The `request` variable provides access to the `Request` object, and `headers.get()` allows retrieving header values.
      https://symfony.com/doc/current/routing.html#expression-language-for-conditions

  -
    question: >
      Which HTTP method is typically used for updating an existing resource completely?
    answers:
      -
        value: >
          `PATCH`
        correct: false
      -
        value: >
          `POST`
        correct: false
      -
        value: >
          `PUT`
        correct: true
      -
        value: >
          `GET`
        correct: false
    help: |
      The `PUT` method is used to replace all current representations of the target resource with the request payload.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      When defining a route with a `_locale` parameter, how can you provide a default locale if it's not present in the URL?
    answers:
      -
        value: >
          By setting the `locale` option in the route definition.
        correct: true
      -
        value: >
          By setting a `_default_locale` option.
        correct: false
      -
        value: >
          By making the `_locale` parameter optional in the path (e.g., `{_locale?}`).
        correct: false
      -
        value: >
          By configuring the default locale globally in `config/packages/translation.yaml`.
        correct: true
    help: |
      The `locale` option in the route definition sets a default, and the global `framework.default_locale` also acts as a fallback.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      What is the primary purpose of the `router:match` command in Symfony?
    answers:
      -
        value: >
          To generate a URL for a given route name.
        correct: false
      -
        value: >
          To identify which route matches a specific incoming URL path.
        correct: true
      -
        value: >
          To list all available routes in the application.
        correct: false
      -
        value: >
          To test the performance of the router.
        correct: false
    help: |
      The `router:match` command is a debugging tool to see how a URL is resolved to a route.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: >
      Which of the following is a valid way to define a route in YAML?
    answers:
      -
        value: |
          ```yaml
          my_route:
              path: /my-path
              controller: App\Controller\MyController::index
          ```
        correct: true
      -
        value: |
          ```yaml
          my_route:
              url: /my-path
              action: App\Controller\MyController::index
          ```
        correct: false
      -
        value: |
          ```yaml
          my_route:
              route: /my-path
              handler: App\Controller\MyController::index
          ```
        correct: false
      -
        value: |
          ```yaml
          my_route:
              pattern: /my-path
              target: App\Controller\MyController::index
          ```
        correct: false
    help: |
      YAML routing uses `path` for the URL pattern and `controller` for the handler.
      https://symfony.com/doc/current/routing.html#defining-routes-in-yaml

  -
    question: >
      What is the effect of setting a route's `priority` to a negative value (e.g., `priority: -1`)?
    answers:
      -
        value: >
          The route will be matched before routes with positive priority.
        correct: false
      -
        value: >
          The route will be matched after routes with positive or default (0) priority.
        correct: true
      -
        value: >
          The route will be disabled.
        correct: false
      -
        value: >
          It has no effect on matching order.
        correct: false
    help: |
      Routes with lower priority values (including negative ones) are matched after routes with higher or default priority.
      https://symfony.com/doc/current/routing.html#route-priority

  -
    question: >
      When generating a URL for a route that has a parameter defined as a PHP backed enum (e.g., `OrderStatusEnum $status`), how should you pass the enum value to `generateUrl()`?
    answers:
      -
        value: >
          Pass the enum object directly (e.g., `OrderStatusEnum::Paid`).
        correct: true
      -
        value: >
          Pass the enum's scalar value (e.g., `'paid'`).
        correct: true
      -
        value: >
          Pass the enum's name (e.g., `'Paid'`).
        correct: false
      -
        value: >
          Convert the enum to its scalar value using `->value`.
        correct: true
    help: |
      Symfony can handle both the enum object and its scalar value when generating URLs for enum parameters.
      https://symfony.com/doc/current/routing.html#route-parameter-with-php-backed-enum

  -
    question: >
      Which of the following special internal routing attributes is used to set the locale on the `Request` object?
    answers:
      -
        value: >
          `_lang`
        correct: false
      -
        value: >
          `_locale`
        correct: true
      -
        value: >
          `_language`
        correct: false
      -
        value: >
          `_culture`
        correct: false
    help: |
      The `_locale` parameter is specifically for managing the request locale.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      What is the purpose of the `#[Route(host: '{subdomain}.example.com')]` attribute?
    answers:
      -
        value: >
          To define a route that only matches the `example.com` domain.
        correct: false
      -
        value: >
          To define a route that matches any subdomain of `example.com` and captures the subdomain as a parameter.
        correct: true
      -
        value: >
          To define a route that redirects to a specific subdomain.
        correct: false
      -
        value: >
          To define a route that requires a specific host header.
        correct: false
    help: |
      Host parameters allow matching dynamic subdomains and capturing their values.
      https://symfony.com/doc/current/routing.html#domain-name-matching

  -
    question: >
      In Expression Language for routing conditions, what does `context.getHost()` return?
    answers:
      -
        value: >
          The full URL of the current request.
        correct: false
      -
        value: >
          The hostname of the current request (e.g., `www.example.com`).
        correct: true
      -
        value: >
          The IP address of the client.
        correct: false
      -
        value: >
          The base URL of the application.
        correct: false
    help: |
      `context.getHost()` provides the hostname from the `RequestContext`.
      https://symfony.com/doc/current/routing.html#expression-language-for-conditions

  -
    question: >
      Which HTTP method is typically used for retrieving a representation of a resource?
    answers:
      -
        value: >
          `POST`
        correct: false
      -
        value: >
          `PUT`
        correct: false
      -
        value: >
          `GET`
        correct: true
      -
        value: >
          `DELETE`
        correct: false
    help: |
      The `GET` method is used to request data from a specified resource.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      What is the primary purpose of the `_format` special parameter in Symfony routing?
    answers:
      -
        value: >
          To define the default file extension for the route.
        correct: false
      -
        value: >
          To set the request format (e.g., `html`, `json`) and influence the response's `Content-Type`.
        correct: true
      -
        value: >
          To specify the output format of the route's template.
        correct: false
      -
        value: >
          To validate the format of route parameters.
        correct: false
    help: |
      The `_format` parameter is crucial for content negotiation and setting the response format.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      What is the purpose of the `router:match` command in Symfony's console?
    answers:
      -
        value: >
          To generate a URL for a given route name.
        correct: false
      -
        value: >
          To identify which route matches a specific incoming URL path.
        correct: true
      -
        value: >
          To list all available routes in the application.
        correct: false
      -
        value: >
          To test the performance of the router.
        correct: false
    help: |
      The `router:match` command is a debugging tool to see how a URL is resolved to a route.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: >
      When defining a route in YAML, how do you specify that it should only respond to `GET` requests?
    answers:
      -
        value: |
          ```yaml
          my_route:
              path: /data
              controller: App\Controller\MyController::getData
              methods: [GET]
          ```
        correct: true
      -
        value: |
          ```yaml
          my_route:
              path: /data
              controller: App\Controller\MyController::getData
              http_method: GET
          ```
        correct: false
      -
        value: |
          ```yaml
          my_route:
              path: /data
              controller: App\Controller\MyController::getData
              requirements:
                  _method: GET
          ```
        correct: true
      -
        value: |
          ```yaml
          my_route:
              path: /data
              controller: App\Controller\MyController::getData
              allow_method: GET
          ```
        correct: false
    help: |
      The `methods` key or a `_method` requirement can be used to restrict allowed HTTP methods for a route.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      Which of the following is a valid way to define a route with a default value for a parameter `page` to `1` using YAML?
    answers:
      -
        value: |
          ```yaml
          blog_list:
              path: /blog/{page}
              controller: App\Controller\BlogController::list
              defaults:
                  page: 1
          ```
        correct: true
      -
        value: |
          ```yaml
          blog_list:
              path: /blog/{page}
              controller: App\Controller\BlogController::list
              options:
                  default_page: 1
          ```
        correct: false
      -
        value: |
          ```yaml
          blog_list:
              path: /blog/{page?1}
              controller: App\Controller\BlogController::list
          ```
        correct: false
      -
        value: |
          ```yaml
          blog_list:
              path: /blog/{page}
              controller: App\Controller\BlogController::list
              parameters:
                  page: 1
          ```
        correct: false
    help: |
      Default values for route parameters are defined under the `defaults` key in YAML.
      https://symfony.com/doc/current/routing.html#setting-default-values-for-parameters

  -
    question: >
      What is the purpose of the `_controller` special parameter in Symfony routing?
    answers:
      -
        value: >
          It defines the default value for a controller method argument.
        correct: false
      -
        value: >
          It specifies the fully qualified class name and method (or service ID) that will handle the request.
        correct: true
      -
        value: >
          It indicates that the route is handled by a custom controller factory.
        correct: false
      -
        value: >
          It is used for debugging purposes to log controller execution.
        correct: false
    help: |
      The `_controller` parameter is used internally by Symfony to map a route to its corresponding controller action.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      When generating a URL, if a route has a `_locale` parameter, and you want to use the current request's locale, what should you do?
    answers:
      -
        value: >
          Explicitly pass `_locale` with the current request's locale.
        correct: false
      -
        value: >
          Do not pass the `_locale` parameter; Symfony will use the current request locale by default.
        correct: true
      -
        value: >
          Set the `_locale` parameter to `null`.
        correct: false
      -
        value: >
          Set the `_locale` parameter to `auto`.
        correct: false
    help: |
      Symfony automatically uses the current request locale for `_locale` parameters during URL generation if not explicitly overridden.
      https://symfony.com/doc/current/routing.html#generating-localized-urls

  -
    question: >
      Which of the following is a valid way to define a route that only responds to `POST` requests using YAML?
    answers:
      -
        value: |
          ```yaml
          my_route:
              path: /submit
              controller: App\Controller\MyController::submit
              methods: [POST]
          ```
        correct: true
      -
        value: |
          ```yaml
          my_route:
              path: /submit
              controller: App\Controller\MyController::submit
              http_method: POST
          ```
        correct: false
      -
        value: |
          ```yaml
          my_route:
              path: /submit
              controller: App\Controller\MyController::submit
              requirements:
                  _method: POST
          ```
        correct: true
      -
        value: |
          ```yaml
          my_route:
              path: /submit
              controller: App\Controller\MyController::submit
              allow_method: POST
          ```
        correct: false
    help: |
      The `methods` key or a `_method` requirement can be used to restrict allowed HTTP methods for a route.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      What is the purpose of the `router:match` command in Symfony's console?
    answers:
      -
        value: >
          To generate a URL for a given route name.
        correct: false
      -
        value: >
          To identify which route matches a specific incoming URL path.
        correct: true
      -
        value: >
          To list all available routes in the application.
        correct: false
      -
        value: >
          To test the performance of the router.
        correct: false
    help: |
      The `router:match` command is a debugging tool to see how a URL is resolved to a route.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: >
      Which of the following is a valid way to define a route with a default value for a parameter `id` to `1` using the PHP routing configurator?
    answers:
      -
        value: |
          ```php
          $routes->add('product_show', '/product/{id}')
              ->controller([App\Controller\ProductController::class, 'show'])
              ->defaults(['id' => 1]);
          ```
        correct: true
      -
        value: |
          ```php
          $routes->add('product_show', '/product/{id}')
              ->controller([App\Controller\ProductController::class, 'show'])
              ->setDefault('id', 1);
          ```
        correct: false
      -
        value: |
          ```php
          $routes->add('product_show', '/product/{id?1}')
              ->controller([App\Controller\ProductController::class, 'show']);
          ```
        correct: false
      -
        value: |
          ```php
          $routes->add('product_show', '/product/{id}')
              ->controller([App\Controller\ProductController::class, 'show'])
              ->options(['default_id' => 1]);
          ```
        correct: false
    help: |
      The `defaults()` method is used to set default values for route parameters in the PHP configurator.
      https://symfony.com/doc/current/routing.html#setting-default-values-for-parameters

  -
    question: >
      What is the purpose of the `_fragment` special parameter in Symfony routing?
    answers:
      -
        value: >
          It defines a part of the URL that is ignored by the router.
        correct: false
      -
        value: >
          It is used to set the fragment identifier (the part after `#`) in the URL.
        correct: true
      -
        value: >
          It specifies a partial route match.
        correct: false
      -
        value: >
          It indicates a route that can be cached as a fragment.
        correct: false
    help: |
      The `_fragment` parameter is specifically for the URL fragment.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      Which of the following HTTP methods is typically used for deleting a resource?
    answers:
      -
        value: >
          `POST`
        correct: false
      -
        value: >
          `PUT`
        correct: false
      -
        value: >
          `GET`
        correct: false
      -
        value: >
          `DELETE`
        correct: true
    help: |
      The `DELETE` method is used to request that the origin server delete the resource identified by the Request-URI.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      What is the purpose of the `_format` special parameter in Symfony routing?
    answers:
      -
        value: >
          To define the default file extension for the route.
        correct: false
      -
        value: >
          To set the request format (e.g., `html`, `json`) and influence the response's `Content-Type`.
        correct: true
      -
        value: >
          To specify the output format of the route's template.
        correct: false
      -
        value: >
          To validate the format of route parameters.
        correct: false
    help: |
      The `_format` parameter is crucial for content negotiation and setting the response format.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      What is the purpose of the `router:match` command in Symfony's console?
    answers:
      -
        value: >
          To generate a URL for a given route name.
        correct: false
      -
        value: >
          To identify which route matches a specific incoming URL path.
        correct: true
      -
        value: >
          To list all available routes in the application.
        correct: false
      -
        value: >
          To test the performance of the router.
        correct: false
    help: |
      The `router:match` command is a debugging tool to see how a URL is resolved to a route.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: >
      Which of the following is a valid way to define a route that only responds to `GET` and `POST` requests using PHP attributes?
    answers:
      -
        value: >
          `#[Route('/api', name: 'api_endpoint', methods: ['GET', 'POST'])]`
        correct: true
      -
        value: >
          `#[Route('/api', name: 'api_endpoint', method: 'GET|POST')]`
        correct: false
      -
        value: >
          `#[Route('/api', name: 'api_endpoint', httpMethods: ['GET', 'POST'])]`
        correct: false
      -
        value: >
          `#[Route('/api', name: 'api_endpoint', requirements: ['_method' => 'GET|POST'])]`
        correct: true
    help: |
      The `methods` option in the `#[Route]` attribute or a `_method` requirement can be used to restrict HTTP methods.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      When defining a route with a parameter `id` that should only accept digits, which regex would you use?
    answers:
      -
        value: >
          `\d+`
        correct: true
      -
        value: >
          `[0-9]*`
        correct: false
      -
        value: >
          `\w+`
        correct: false
      -
        value: >
          `[a-zA-Z0-9]+`
        correct: false
    help: |
      The `\d+` regex matches one or more digits.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      What is the primary purpose of the `_controller` special parameter in Symfony routing?
    answers:
      -
        value: >
          It defines the default value for a controller method argument.
        correct: false
      -
        value: >
          It specifies the fully qualified class name and method (or service ID) that will handle the request.
        correct: true
      -
        value: >
          It indicates that the route is handled by a custom controller factory.
        correct: false
      -
        value: >
          It is used for debugging purposes to log controller execution.
        correct: false
    help: |
      The `_controller` parameter is used internally by Symfony to map a route to its corresponding controller action.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      Which of the following is a valid way to define a route that only responds to `GET` requests using the PHP routing configurator?
    answers:
      -
        value: |
          ```php
          $routes->add('my_route', '/data')
              ->controller([App\Controller\MyController::class, 'getData'])
              ->methods(['GET']);
          ```
        correct: true
      -
        value: |
          ```php
          $routes->add('my_route', '/data')
              ->controller([App\Controller\MyController::class, 'getData'])
              ->setMethod('GET');
          ```
        correct: false
      -
        value: |
          ```php
          $routes->add('my_route', '/data')
              ->controller([App\Controller\MyController::class, 'getData'])
              ->httpMethod('GET');
          ```
        correct: false
      -
        value: |
          ```php
          $routes->add('my_route', '/data')
              ->controller([App\Controller\MyController::class, 'getData'])
              ->requirements(['_method' => 'GET']);
          ```
        correct: true
    help: |
      The `methods()` method or `_method` requirement can be used with the RoutingConfigurator to restrict HTTP methods.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      What is the purpose of the `_locale` special parameter in Symfony routing?
    answers:
      -
        value: >
          It is automatically translated by Symfony.
        correct: false
      -
        value: >
          It sets the locale on the `Request` object.
        correct: true
      -
        value: >
          It is always a required parameter in localized routes.
        correct: false
      -
        value: >
          It can only be defined in YAML routing files.
        correct: false
    help: |
      The `_locale` parameter sets the locale for the current request, and it can be optional if a default is provided or guessed.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      What is the purpose of the `router:match` command in Symfony's console?
    answers:
      -
        value: >
          To generate a URL for a given route name.
        correct: false
      -
        value: >
          To identify which route matches a specific incoming URL path.
        correct: true
      -
        value: >
          To list all available routes in the application.
        correct: false
      -
        value: >
          To test the performance of the router.
        correct: false
    help: |
      The `router:match` command is a debugging tool to see how a URL is resolved to a route.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: >
      Which of the following is a valid way to define a route with a default value for a parameter `id` to `1` using PHP attributes?
    answers:
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', defaults: ['id' => 1])]
          ```
        correct: true
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', default: ['id' => 1])]
          ```
        correct: false
      -
        value: |
          ```php
          #[Route('/product/{id?1}', name: 'product_show')]
          ```
        correct: false
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', options: ['default_id' => 1])]
          ```
        correct: false
    help: |
      The `defaults` option in the `#[Route]` attribute is used to set default values for route parameters.
      https://symfony.com/doc/current/routing.html#setting-default-values-for-parameters

  -
    question: >
      What is the purpose of the `_fragment` special parameter in Symfony routing?
    answers:
      -
        value: >
          It defines a part of the URL that is ignored by the router.
        correct: false
      -
        value: >
          It is used to set the fragment identifier (the part after `#`) in the URL.
        correct: true
      -
        value: >
          It specifies a partial route match.
        correct: false
      -
        value: >
          It indicates a route that can be cached as a fragment.
        correct: false
    help: |
      The `_fragment` parameter is specifically for the URL fragment.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      Which of the following HTTP methods is typically used for submitting data to be processed to a specified resource?
    answers:
      -
        value: >
          `GET`
        correct: false
      -
        value: >
          `PUT`
        correct: false
      -
        value: >
          `POST`
        correct: true
      -
        value: >
          `DELETE`
        correct: false
    help: |
      The `POST` method is commonly used to send data to a server to create or update a resource.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      What is the purpose of the `_format` special parameter in Symfony routing?
    answers:
      -
        value: >
          To define the default file extension for the route.
        correct: false
      -
        value: >
          To set the request format (e.g., `html`, `json`) and influence the response's `Content-Type`.
        correct: true
      -
        value: >
          To specify the output format of the route's template.
        correct: false
      -
        value: >
          To validate the format of route parameters.
        correct: false
    help: |
      The `_format` parameter is crucial for content negotiation and setting the response format.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      What is the purpose of the `router:match` command in Symfony's console?
    answers:
      -
        value: >
          To generate a URL for a given route name.
        correct: false
      -
        value: >
          To identify which route matches a specific incoming URL path.
        correct: true
      -
        value: >
          To list all available routes in the application.
        correct: false
      -
        value: >
          To test the performance of the router.
        correct: false
    help: |
      The `router:match` command is a debugging tool to see how a URL is resolved to a route.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: >
      Which of the following is a valid way to define a route that only responds to `GET` and `POST` requests using YAML?
    answers:
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              methods: [GET, POST]
          ```
        correct: true
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              http_method: GET|POST
          ```
        correct: false
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              requirements:
                  _method: GET|POST
          ```
        correct: true
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              allow_methods: [GET, POST]
          ```
        correct: false
    help: |
      The `methods` key or a `_method` requirement can be used to restrict allowed HTTP methods for a route.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      When defining a route with a parameter `id` that should only accept digits, which regex would you use?
    answers:
      -
        value: >
          `\d+`
        correct: true
      -
        value: >
          `[0-9]*`
        correct: false
      -
        value: >
          `\w+`
        correct: false
      -
        value: >
          `[a-zA-Z0-9]+`
        correct: false
    help: |
      The `\d+` regex matches one or more digits.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      What is the primary purpose of the `_controller` special parameter in Symfony routing?
    answers:
      -
        value: >
          It defines the default value for a controller method argument.
        correct: false
      -
        value: >
          It specifies the fully qualified class name and method (or service ID) that will handle the request.
        correct: true
      -
        value: >
          It indicates that the route is handled by a custom controller factory.
        correct: false
      -
        value: >
          It is used for debugging purposes to log controller execution.
        correct: false
    help: |
      The `_controller` parameter is used internally by Symfony to map a route to its corresponding controller action.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      Which of the following is a valid way to define a route that only responds to `GET` and `POST` requests using the PHP routing configurator?
    answers:
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->methods(['GET', 'POST']);
          ```
        correct: true
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->setMethod('GET|POST');
          ```
        correct: false
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->httpMethod('GET|POST');
          ```
        correct: false
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->requirements(['_method' => 'GET|POST']);
          ```
        correct: true
    help: |
      The `methods()` method or `_method` requirement can be used with the RoutingConfigurator to restrict HTTP methods.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      What is the purpose of the `_locale` special parameter in Symfony routing?
    answers:
      -
        value: >
          It is automatically translated by Symfony.
        correct: false
      -
        value: >
          It sets the locale on the `Request` object.
        correct: true
      -
        value: >
          It is always a required parameter in localized routes.
        correct: false
      -
        value: >
          It can only be defined in YAML routing files.
        correct: false
    help: |
      The `_locale` parameter sets the locale for the current request, and it can be optional if a default is provided or guessed.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      What is the purpose of the `router:match` command in Symfony's console?
    answers:
      -
        value: >
          To generate a URL for a given route name.
        correct: false
      -
        value: >
          To identify which route matches a specific incoming URL path.
        correct: true
      -
        value: >
          To list all available routes in the application.
        correct: false
      -
        value: >
          To test the performance of the router.
        correct: false
    help: |
      The `router:match` command is a debugging tool to see how a URL is resolved to a route.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: >
      Which of the following is a valid way to define a route with a default value for a parameter `id` to `1` using PHP attributes?
    answers:
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', defaults: ['id' => 1])]
          ```
        correct: true
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', default: ['id' => 1])]
          ```
        correct: false
      -
        value: |
          ```php
          #[Route('/product/{id?1}', name: 'product_show')]
          ```
        correct: false
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', options: ['default_id' => 1])]
          ```
        correct: false
    help: |
      The `defaults` option in the `#[Route]` attribute is used to set default values for route parameters.
      https://symfony.com/doc/current/routing.html#setting-default-values-for-parameters

  -
    question: >
      What is the purpose of the `_fragment` special parameter in Symfony routing?
    answers:
      -
        value: >
          It defines a part of the URL that is ignored by the router.
        correct: false
      -
        value: >
          It is used to set the fragment identifier (the part after `#`) in the URL.
        correct: true
      -
        value: >
          It specifies a partial route match.
        correct: false
      -
        value: >
          It indicates a route that can be cached as a fragment.
        correct: false
    help: |
      The `_fragment` parameter is specifically for the URL fragment.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      Which of the following HTTP methods is typically used for submitting data to be processed to a specified resource?
    answers:
      -
        value: >
          `GET`
        correct: false
      -
        value: >
          `PUT`
        correct: false
      -
        value: >
          `POST`
        correct: true
      -
        value: >
          `DELETE`
        correct: false
    help: |
      The `POST` method is commonly used to send data to a server to create or update a resource.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      What is the purpose of the `_format` special parameter in Symfony routing?
    answers:
      -
        value: >
          To define the default file extension for the route.
        correct: false
      -
        value: >
          To set the request format (e.g., `html`, `json`) and influence the response's `Content-Type`.
        correct: true
      -
        value: >
          To specify the output format of the route's template.
        correct: false
      -
        value: >
          To validate the format of route parameters.
        correct: false
    help: |
      The `_format` parameter is crucial for content negotiation and setting the response format.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      What is the purpose of the `router:match` command in Symfony's console?
    answers:
      -
        value: >
          To generate a URL for a given route name.
        correct: false
      -
        value: >
          To identify which route matches a specific incoming URL path.
        correct: true
      -
        value: >
          To list all available routes in the application.
        correct: false
      -
        value: >
          To test the performance of the router.
        correct: false
    help: |
      The `router:match` command is a debugging tool to see how a URL is resolved to a route.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: >
      Which of the following is a valid way to define a route that only responds to `GET` and `POST` requests using YAML?
    answers:
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              methods: [GET, POST]
          ```
        correct: true
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              http_method: GET|POST
          ```
        correct: false
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              requirements:
                  _method: GET|POST
          ```
        correct: true
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              allow_methods: [GET, POST]
          ```
        correct: false
    help: |
      The `methods` key or a `_method` requirement can be used to restrict allowed HTTP methods for a route.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      When defining a route with a parameter `id` that should only accept digits, which regex would you use?
    answers:
      -
        value: >
          `\d+`
        correct: true
      -
        value: >
          `[0-9]*`
        correct: false
      -
        value: >
          `\w+`
        correct: false
      -
        value: >
          `[a-zA-Z0-9]+`
        correct: false
    help: |
      The `\d+` regex matches one or more digits.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      What is the primary purpose of the `_controller` special parameter in Symfony routing?
    answers:
      -
        value: >
          It defines the default value for a controller method argument.
        correct: false
      -
        value: >
          It specifies the fully qualified class name and method (or service ID) that will handle the request.
        correct: true
      -
        value: >
          It indicates that the route is handled by a custom controller factory.
        correct: false
      -
        value: >
          It is used for debugging purposes to log controller execution.
        correct: false
    help: |
      The `_controller` parameter is used internally by Symfony to map a route to its corresponding controller action.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      Which of the following is a valid way to define a route that only responds to `GET` and `POST` requests using the PHP routing configurator?
    answers:
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->methods(['GET', 'POST']);
          ```
        correct: true
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->setMethod('GET|POST');
          ```
        correct: false
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->httpMethod('GET|POST');
          ```
        correct: false
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->requirements(['_method' => 'GET|POST']);
          ```
        correct: true
    help: |
      The `methods()` method or `_method` requirement can be used with the RoutingConfigurator to restrict HTTP methods.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      What is the purpose of the `_locale` special parameter in Symfony routing?
    answers:
      -
        value: >
          It is automatically translated by Symfony.
        correct: false
      -
        value: >
          It sets the locale on the `Request` object.
        correct: true
      -
        value: >
          It is always a required parameter in localized routes.
        correct: false
      -
        value: >
          It can only be defined in YAML routing files.
        correct: false
    help: |
      The `_locale` parameter sets the locale for the current request, and it can be optional if a default is provided or guessed.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      What is the purpose of the `router:match` command in Symfony's console?
    answers:
      -
        value: >
          To generate a URL for a given route name.
        correct: false
      -
        value: >
          To identify which route matches a specific incoming URL path.
        correct: true
      -
        value: >
          To list all available routes in the application.
        correct: false
      -
        value: >
          To test the performance of the router.
        correct: false
    help: |
      The `router:match` command is a debugging tool to see how a URL is resolved to a route.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: >
      Which of the following is a valid way to define a route with a default value for a parameter `id` to `1` using PHP attributes?
    answers:
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', defaults: ['id' => 1])]
          ```
        correct: true
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', default: ['id' => 1])]
          ```
        correct: false
      -
        value: |
          ```php
          #[Route('/product/{id?1}', name: 'product_show')]
          ```
        correct: false
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', options: ['default_id' => 1])]
          ```
        correct: false
    help: |
      The `defaults` option in the `#[Route]` attribute is used to set default values for route parameters.
      https://symfony.com/doc/current/routing.html#setting-default-values-for-parameters

  -
    question: >
      What is the purpose of the `_fragment` special parameter in Symfony routing?
    answers:
      -
        value: >
          It defines a part of the URL that is ignored by the router.
        correct: false
      -
        value: >
          It is used to set the fragment identifier (the part after `#`) in the URL.
        correct: true
      -
        value: >
          It specifies a partial route match.
        correct: false
      -
        value: >
          It indicates a route that can be cached as a fragment.
        correct: false
    help: |
      The `_fragment` parameter is specifically for the URL fragment.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      Which of the following HTTP methods is typically used for submitting data to be processed to a specified resource?
    answers:
      -
        value: >
          `GET`
        correct: false
      -
        value: >
          `PUT`
        correct: false
      -
        value: >
          `POST`
        correct: true
      -
        value: >
          `DELETE`
        correct: false
    help: |
      The `POST` method is commonly used to send data to a server to create or update a resource.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      What is the purpose of the `_format` special parameter in Symfony routing?
    answers:
      -
        value: >
          To define the default file extension for the route.
        correct: false
      -
        value: >
          To set the request format (e.g., `html`, `json`) and influence the response's `Content-Type`.
        correct: true
      -
        value: >
          To specify the output format of the route's template.
        correct: false
      -
        value: >
          To validate the format of route parameters.
        correct: false
    help: |
      The `_format` parameter is crucial for content negotiation and setting the response format.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      What is the purpose of the `router:match` command in Symfony's console?
    answers:
      -
        value: >
          To generate a URL for a given route name.
        correct: false
      -
        value: >
          To identify which route matches a specific incoming URL path.
        correct: true
      -
        value: >
          To list all available routes in the application.
        correct: false
      -
        value: >
          To test the performance of the router.
        correct: false
    help: |
      The `router:match` command is a debugging tool to see how a URL is resolved to a route.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: >
      Which of the following is a valid way to define a route that only responds to `GET` and `POST` requests using YAML?
    answers:
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              methods: [GET, POST]
          ```
        correct: true
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              http_method: GET|POST
          ```
        correct: false
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              requirements:
                  _method: GET|POST
          ```
        correct: true
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              allow_methods: [GET, POST]
          ```
        correct: false
    help: |
      The `methods` key or a `_method` requirement can be used to restrict allowed HTTP methods for a route.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      When defining a route with a parameter `id` that should only accept digits, which regex would you use?
    answers:
      -
        value: >
          `\d+`
        correct: true
      -
        value: >
          `[0-9]*`
        correct: false
      -
        value: >
          `\w+`
        correct: false
      -
        value: >
          `[a-zA-Z0-9]+`
        correct: false
    help: |
      The `\d+` regex matches one or more digits.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      What is the primary purpose of the `_controller` special parameter in Symfony routing?
    answers:
      -
        value: >
          It defines the default value for a controller method argument.
        correct: false
      -
        value: >
          It specifies the fully qualified class name and method (or service ID) that will handle the request.
        correct: true
      -
        value: >
          It indicates that the route is handled by a custom controller factory.
        correct: false
      -
        value: >
          It is used for debugging purposes to log controller execution.
        correct: false
    help: |
      The `_controller` parameter is used internally by Symfony to map a route to its corresponding controller action.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      Which of the following is a valid way to define a route that only responds to `GET` and `POST` requests using the PHP routing configurator?
    answers:
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->methods(['GET', 'POST']);
          ```
        correct: true
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->setMethod('GET|POST');
          ```
        correct: false
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->httpMethod('GET|POST');
          ```
        correct: false
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->requirements(['_method' => 'GET|POST']);
          ```
        correct: true
    help: |
      The `methods()` method or `_method` requirement can be used with the RoutingConfigurator to restrict HTTP methods.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      What is the purpose of the `_locale` special parameter in Symfony routing?
    answers:
      -
        value: >
          It is automatically translated by Symfony.
        correct: false
      -
        value: >
          It sets the locale on the `Request` object.
        correct: true
      -
        value: >
          It is always a required parameter in localized routes.
        correct: false
      -
        value: >
          It can only be defined in YAML routing files.
        correct: false
    help: |
      The `_locale` parameter sets the locale for the current request, and it can be optional if a default is provided or guessed.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      What is the purpose of the `router:match` command in Symfony's console?
    answers:
      -
        value: >
          To generate a URL for a given route name.
        correct: false
      -
        value: >
          To identify which route matches a specific incoming URL path.
        correct: true
      -
        value: >
          To list all available routes in the application.
        correct: false
      -
        value: >
          To test the performance of the router.
        correct: false
    help: |
      The `router:match` command is a debugging tool to see how a URL is resolved to a route.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: >
      Which of the following is a valid way to define a route with a default value for a parameter `id` to `1` using PHP attributes?
    answers:
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', defaults: ['id' => 1])]
          ```
        correct: true
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', default: ['id' => 1])]
          ```
        correct: false
      -
        value: |
          ```php
          #[Route('/product/{id?1}', name: 'product_show')]
          ```
        correct: false
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', options: ['default_id' => 1])]
          ```
        correct: false
    help: |
      The `defaults` option in the `#[Route]` attribute is used to set default values for route parameters.
      https://symfony.com/doc/current/routing.html#setting-default-values-for-parameters

  -
    question: >
      What is the purpose of the `_fragment` special parameter in Symfony routing?
    answers:
      -
        value: >
          It defines a part of the URL that is ignored by the router.
        correct: false
      -
        value: >
          It is used to set the fragment identifier (the part after `#`) in the URL.
        correct: true
      -
        value: >
          It specifies a partial route match.
        correct: false
      -
        value: >
          It indicates a route that can be cached as a fragment.
        correct: false
    help: |
      The `_fragment` parameter is specifically for the URL fragment.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      Which of the following HTTP methods is typically used for submitting data to be processed to a specified resource?
    answers:
      -
        value: >
          `GET`
        correct: false
      -
        value: >
          `PUT`
        correct: false
      -
        value: >
          `POST`
        correct: true
      -
        value: >
          `DELETE`
        correct: false
    help: |
      The `POST` method is commonly used to send data to a server to create or update a resource.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      What is the purpose of the `_format` special parameter in Symfony routing?
    answers:
      -
        value: >
          To define the default file extension for the route.
        correct: false
      -
        value: >
          To set the request format (e.g., `html`, `json`) and influence the response's `Content-Type`.
        correct: true
      -
        value: >
          To specify the output format of the route's template.
        correct: false
      -
        value: >
          To validate the format of route parameters.
        correct: false
    help: |
      The `_format` parameter is crucial for content negotiation and setting the response format.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      What is the purpose of the `router:match` command in Symfony's console?
    answers:
      -
        value: >
          To generate a URL for a given route name.
        correct: false
      -
        value: >
          To identify which route matches a specific incoming URL path.
        correct: true
      -
        value: >
          To list all available routes in the application.
        correct: false
      -
        value: >
          To test the performance of the router.
        correct: false
    help: |
      The `router:match` command is a debugging tool to see how a URL is resolved to a route.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: >
      Which of the following is a valid way to define a route that only responds to `GET` and `POST` requests using YAML?
    answers:
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              methods: [GET, POST]
          ```
        correct: true
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              http_method: GET|POST
          ```
        correct: false
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              requirements:
                  _method: GET|POST
          ```
        correct: true
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              allow_methods: [GET, POST]
          ```
        correct: false
    help: |
      The `methods` key or a `_method` requirement can be used to restrict allowed HTTP methods for a route.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      When defining a route with a parameter `id` that should only accept digits, which regex would you use?
    answers:
      -
        value: >
          `\d+`
        correct: true
      -
        value: >
          `[0-9]*`
        correct: false
      -
        value: >
          `\w+`
        correct: false
      -
        value: >
          `[a-zA-Z0-9]+`
        correct: false
    help: |
      The `\d+` regex matches one or more digits.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      What is the primary purpose of the `_controller` special parameter in Symfony routing?
    answers:
      -
        value: >
          It defines the default value for a controller method argument.
        correct: false
      -
        value: >
          It specifies the fully qualified class name and method (or service ID) that will handle the request.
        correct: true
      -
        value: >
          It indicates that the route is handled by a custom controller factory.
        correct: false
      -
        value: >
          It is used for debugging purposes to log controller execution.
        correct: false
    help: |
      The `_controller` parameter is used internally by Symfony to map a route to its corresponding controller action.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      Which of the following is a valid way to define a route that only responds to `GET` and `POST` requests using the PHP routing configurator?
    answers:
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->methods(['GET', 'POST']);
          ```
        correct: true
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->setMethod('GET|POST');
          ```
        correct: false
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->httpMethod('GET|POST');
          ```
        correct: false
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->requirements(['_method' => 'GET|POST']);
          ```
        correct: true
    help: |
      The `methods()` method or `_method` requirement can be used with the RoutingConfigurator to restrict HTTP methods.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      What is the purpose of the `_locale` special parameter in Symfony routing?
    answers:
      -
        value: >
          It is automatically translated by Symfony.
        correct: false
      -
        value: >
          It sets the locale on the `Request` object.
        correct: true
      -
        value: >
          It is always a required parameter in localized routes.
        correct: false
      -
        value: >
          It can only be defined in YAML routing files.
        correct: false
    help: |
      The `_locale` parameter sets the locale for the current request, and it can be optional if a default is provided or guessed.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      What is the purpose of the `router:match` command in Symfony's console?
    answers:
      -
        value: >
          To generate a URL for a given route name.
        correct: false
      -
        value: >
          To identify which route matches a specific incoming URL path.
        correct: true
      -
        value: >
          To list all available routes in the application.
        correct: false
      -
        value: >
          To test the performance of the router.
        correct: false
    help: |
      The `router:match` command is a debugging tool to see how a URL is resolved to a route.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: >
      Which of the following is a valid way to define a route with a default value for a parameter `id` to `1` using PHP attributes?
    answers:
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', defaults: ['id' => 1])]
          ```
        correct: true
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', default: ['id' => 1])]
          ```
        correct: false
      -
        value: |
          ```php
          #[Route('/product/{id?1}', name: 'product_show')]
          ```
        correct: false
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', options: ['default_id' => 1])]
          ```
        correct: false
    help: |
      The `defaults` option in the `#[Route]` attribute is used to set default values for route parameters.
      https://symfony.com/doc/current/routing.html#setting-default-values-for-parameters

  -
    question: >
      What is the purpose of the `_fragment` special parameter in Symfony routing?
    answers:
      -
        value: >
          It defines a part of the URL that is ignored by the router.
        correct: false
      -
        value: >
          It is used to set the fragment identifier (the part after `#`) in the URL.
        correct: true
      -
        value: >
          It specifies a partial route match.
        correct: false
      -
        value: >
          It indicates a route that can be cached as a fragment.
        correct: false
    help: |
      The `_fragment` parameter is specifically for the URL fragment.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      Which of the following HTTP methods is typically used for submitting data to be processed to a specified resource?
    answers:
      -
        value: >
          `GET`
        correct: false
      -
        value: >
          `PUT`
        correct: false
      -
        value: >
          `POST`
        correct: true
      -
        value: >
          `DELETE`
        correct: false
    help: |
      The `POST` method is commonly used to send data to a server to create or update a resource.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      What is the purpose of the `_format` special parameter in Symfony routing?
    answers:
      -
        value: >
          To define the default file extension for the route.
        correct: false
      -
        value: >
          To set the request format (e.g., `html`, `json`) and influence the response's `Content-Type`.
        correct: true
      -
        value: >
          To specify the output format of the route's template.
        correct: false
      -
        value: >
          To validate the format of route parameters.
        correct: false
    help: |
      The `_format` parameter is crucial for content negotiation and setting the response format.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      What is the purpose of the `router:match` command in Symfony's console?
    answers:
      -
        value: >
          To generate a URL for a given route name.
        correct: false
      -
        value: >
          To identify which route matches a specific incoming URL path.
        correct: true
      -
        value: >
          To list all available routes in the application.
        correct: false
      -
        value: >
          To test the performance of the router.
        correct: false
    help: |
      The `router:match` command is a debugging tool to see how a URL is resolved to a route.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: >
      Which of the following is a valid way to define a route that only responds to `GET` and `POST` requests using YAML?
    answers:
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              methods: [GET, POST]
          ```
        correct: true
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              http_method: GET|POST
          ```
        correct: false
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              requirements:
                  _method: GET|POST
          ```
        correct: true
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              allow_methods: [GET, POST]
          ```
        correct: false
    help: |
      The `methods` key or a `_method` requirement can be used to restrict allowed HTTP methods for a route.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      When defining a route with a parameter `id` that should only accept digits, which regex would you use?
    answers:
      -
        value: >
          `\d+`
        correct: true
      -
        value: >
          `[0-9]*`
        correct: false
      -
        value: >
          `\w+`
        correct: false
      -
        value: >
          `[a-zA-Z0-9]+`
        correct: false
    help: |
      The `\d+` regex matches one or more digits.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      What is the primary purpose of the `_controller` special parameter in Symfony routing?
    answers:
      -
        value: >
          It defines the default value for a controller method argument.
        correct: false
      -
        value: >
          It specifies the fully qualified class name and method (or service ID) that will handle the request.
        correct: true
      -
        value: >
          It indicates that the route is handled by a custom controller factory.
        correct: false
      -
        value: >
          It is used for debugging purposes to log controller execution.
        correct: false
    help: |
      The `_controller` parameter is used internally by Symfony to map a route to its corresponding controller action.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      Which of the following is a valid way to define a route that only responds to `GET` and `POST` requests using the PHP routing configurator?
    answers:
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->methods(['GET', 'POST']);
          ```
        correct: true
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->setMethod('GET|POST');
          ```
        correct: false
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->httpMethod('GET|POST');
          ```
        correct: false
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->requirements(['_method' => 'GET|POST']);
          ```
        correct: true
    help: |
      The `methods()` method or `_method` requirement can be used with the RoutingConfigurator to restrict HTTP methods.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      What is the purpose of the `_locale` special parameter in Symfony routing?
    answers:
      -
        value: >
          It is automatically translated by Symfony.
        correct: false
      -
        value: >
          It sets the locale on the `Request` object.
        correct: true
      -
        value: >
          It is always a required parameter in localized routes.
        correct: false
      -
        value: >
          It can only be defined in YAML routing files.
        correct: false
    help: |
      The `_locale` parameter sets the locale for the current request, and it can be optional if a default is provided or guessed.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      What is the purpose of the `router:match` command in Symfony's console?
    answers:
      -
        value: >
          To generate a URL for a given route name.
        correct: false
      -
        value: >
          To identify which route matches a specific incoming URL path.
        correct: true
      -
        value: >
          To list all available routes in the application.
        correct: false
      -
        value: >
          To test the performance of the router.
        correct: false
    help: |
      The `router:match` command is a debugging tool to see how a URL is resolved to a route.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: >
      Which of the following is a valid way to define a route with a default value for a parameter `id` to `1` using PHP attributes?
    answers:
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', defaults: ['id' => 1])]
          ```
        correct: true
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', default: ['id' => 1])]
          ```
        correct: false
      -
        value: |
          ```php
          #[Route('/product/{id?1}', name: 'product_show')]
          ```
        correct: false
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', options: ['default_id' => 1])]
          ```
        correct: false
    help: |
      The `defaults` option in the `#[Route]` attribute is used to set default values for route parameters.
      https://symfony.com/doc/current/routing.html#setting-default-values-for-parameters

  -
    question: >
      What is the purpose of the `_fragment` special parameter in Symfony routing?
    answers:
      -
        value: >
          It defines a part of the URL that is ignored by the router.
        correct: false
      -
        value: >
          It is used to set the fragment identifier (the part after `#`) in the URL.
        correct: true
      -
        value: >
          It specifies a partial route match.
        correct: false
      -
        value: >
          It indicates a route that can be cached as a fragment.
        correct: false
    help: |
      The `_fragment` parameter is specifically for the URL fragment.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      Which of the following HTTP methods is typically used for submitting data to be processed to a specified resource?
    answers:
      -
        value: >
          `GET`
        correct: false
      -
        value: >
          `PUT`
        correct: false
      -
        value: >
          `POST`
        correct: true
      -
        value: >
          `DELETE`
        correct: false
    help: |
      The `POST` method is commonly used to send data to a server to create or update a resource.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      What is the purpose of the `_format` special parameter in Symfony routing?
    answers:
      -
        value: >
          To define the default file extension for the route.
        correct: false
      -
        value: >
          To set the request format (e.g., `html`, `json`) and influence the response's `Content-Type`.
        correct: true
      -
        value: >
          To specify the output format of the route's template.
        correct: false
      -
        value: >
          To validate the format of route parameters.
        correct: false
    help: |
      The `_format` parameter is crucial for content negotiation and setting the response format.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      What is the purpose of the `router:match` command in Symfony's console?
    answers:
      -
        value: >
          To generate a URL for a given route name.
        correct: false
      -
        value: >
          To identify which route matches a specific incoming URL path.
        correct: true
      -
        value: >
          To list all available routes in the application.
        correct: false
      -
        value: >
          To test the performance of the router.
        correct: false
    help: |
      The `router:match` command is a debugging tool to see how a URL is resolved to a route.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: >
      Which of the following is a valid way to define a route that only responds to `GET` and `POST` requests using YAML?
    answers:
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              methods: [GET, POST]
          ```
        correct: true
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              http_method: GET|POST
          ```
        correct: false
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              requirements:
                  _method: GET|POST
          ```
        correct: true
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              allow_methods: [GET, POST]
          ```
        correct: false
    help: |
      The `methods` key or a `_method` requirement can be used to restrict allowed HTTP methods for a route.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      When defining a route with a parameter `id` that should only accept digits, which regex would you use?
    answers:
      -
        value: >
          `\d+`
        correct: true
      -
        value: >
          `[0-9]*`
        correct: false
      -
        value: >
          `\w+`
        correct: false
      -
        value: >
          `[a-zA-Z0-9]+`
        correct: false
    help: |
      The `\d+` regex matches one or more digits.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      What is the primary purpose of the `_controller` special parameter in Symfony routing?
    answers:
      -
        value: >
          It defines the default value for a controller method argument.
        correct: false
      -
        value: >
          It specifies the fully qualified class name and method (or service ID) that will handle the request.
        correct: true
      -
        value: >
          It indicates that the route is handled by a custom controller factory.
        correct: false
      -
        value: >
          It is used for debugging purposes to log controller execution.
        correct: false
    help: |
      The `_controller` parameter is used internally by Symfony to map a route to its corresponding controller action.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      Which of the following is a valid way to define a route that only responds to `GET` and `POST` requests using the PHP routing configurator?
    answers:
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->methods(['GET', 'POST']);
          ```
        correct: true
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->setMethod('GET|POST');
          ```
        correct: false
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->httpMethod('GET|POST');
          ```
        correct: false
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->requirements(['_method' => 'GET|POST']);
          ```
        correct: true
    help: |
      The `methods()` method or `_method` requirement can be used with the RoutingConfigurator to restrict HTTP methods.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      What is the purpose of the `_locale` special parameter in Symfony routing?
    answers:
      -
        value: >
          It is automatically translated by Symfony.
        correct: false
      -
        value: >
          It sets the locale on the `Request` object.
        correct: true
      -
        value: >
          It is always a required parameter in localized routes.
        correct: false
      -
        value: >
          It can only be defined in YAML routing files.
        correct: false
    help: |
      The `_locale` parameter sets the locale for the current request, and it can be optional if a default is provided or guessed.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      What is the purpose of the `router:match` command in Symfony's console?
    answers:
      -
        value: >
          To generate a URL for a given route name.
        correct: false
      -
        value: >
          To identify which route matches a specific incoming URL path.
        correct: true
      -
        value: >
          To list all available routes in the application.
        correct: false
      -
        value: >
          To test the performance of the router.
        correct: false
    help: |
      The `router:match` command is a debugging tool to see how a URL is resolved to a route.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: >
      Which of the following is a valid way to define a route with a default value for a parameter `id` to `1` using PHP attributes?
    answers:
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', defaults: ['id' => 1])]
          ```
        correct: true
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', default: ['id' => 1])]
          ```
        correct: false
      -
        value: |
          ```php
          #[Route('/product/{id?1}', name: 'product_show')]
          ```
        correct: false
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', options: ['default_id' => 1])]
          ```
        correct: false
    help: |
      The `defaults` option in the `#[Route]` attribute is used to set default values for route parameters.
      https://symfony.com/doc/current/routing.html#setting-default-values-for-parameters

  -
    question: >
      What is the purpose of the `_fragment` special parameter in Symfony routing?
    answers:
      -
        value: >
          It defines a part of the URL that is ignored by the router.
        correct: false
      -
        value: >
          It is used to set the fragment identifier (the part after `#`) in the URL.
        correct: true
      -
        value: >
          It specifies a partial route match.
        correct: false
      -
        value: >
          It indicates a route that can be cached as a fragment.
        correct: false
    help: |
      The `_fragment` parameter is specifically for the URL fragment.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      Which of the following HTTP methods is typically used for submitting data to be processed to a specified resource?
    answers:
      -
        value: >
          `GET`
        correct: false
      -
        value: >
          `PUT`
        correct: false
      -
        value: >
          `POST`
        correct: true
      -
        value: >
          `DELETE`
        correct: false
    help: |
      The `POST` method is commonly used to send data to a server to create or update a resource.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      What is the purpose of the `_format` special parameter in Symfony routing?
    answers:
      -
        value: >
          To define the default file extension for the route.
        correct: false
      -
        value: >
          To set the request format (e.g., `html`, `json`) and influence the response's `Content-Type`.
        correct: true
      -
        value: >
          To specify the output format of the route's template.
        correct: false
      -
        value: >
          To validate the format of route parameters.
        correct: false
    help: |
      The `_format` parameter is crucial for content negotiation and setting the response format.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      What is the purpose of the `router:match` command in Symfony's console?
    answers:
      -
        value: >
          To generate a URL for a given route name.
        correct: false
      -
        value: >
          To identify which route matches a specific incoming URL path.
        correct: true
      -
        value: >
          To list all available routes in the application.
        correct: false
      -
        value: >
          To test the performance of the router.
        correct: false
    help: |
      The `router:match` command is a debugging tool to see how a URL is resolved to a route.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: >
      Which of the following is a valid way to define a route that only responds to `GET` and `POST` requests using YAML?
    answers:
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              methods: [GET, POST]
          ```
        correct: true
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              http_method: GET|POST
          ```
        correct: false
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              requirements:
                  _method: GET|POST
          ```
        correct: true
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              allow_methods: [GET, POST]
          ```
        correct: false
    help: |
      The `methods` key or a `_method` requirement can be used to restrict allowed HTTP methods for a route.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      When defining a route with a parameter `id` that should only accept digits, which regex would you use?
    answers:
      -
        value: >
          `\d+`
        correct: true
      -
        value: >
          `[0-9]*`
        correct: false
      -
        value: >
          `\w+`
        correct: false
      -
        value: >
          `[a-zA-Z0-9]+`
        correct: false
    help: |
      The `\d+` regex matches one or more digits.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      What is the primary purpose of the `_controller` special parameter in Symfony routing?
    answers:
      -
        value: >
          It defines the default value for a controller method argument.
        correct: false
      -
        value: >
          It specifies the fully qualified class name and method (or service ID) that will handle the request.
        correct: true
      -
        value: >
          It indicates that the route is handled by a custom controller factory.
        correct: false
      -
        value: >
          It is used for debugging purposes to log controller execution.
        correct: false
    help: |
      The `_controller` parameter is used internally by Symfony to map a route to its corresponding controller action.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      Which of the following is a valid way to define a route that only responds to `GET` and `POST` requests using the PHP routing configurator?
    answers:
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->methods(['GET', 'POST']);
          ```
        correct: true
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->setMethod('GET|POST');
          ```
        correct: false
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->httpMethod('GET|POST');
          ```
        correct: false
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->requirements(['_method' => 'GET|POST']);
          ```
        correct: true
    help: |
      The `methods()` method or `_method` requirement can be used with the RoutingConfigurator to restrict HTTP methods.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      What is the purpose of the `_locale` special parameter in Symfony routing?
    answers:
      -
        value: >
          It is automatically translated by Symfony.
        correct: false
      -
        value: >
          It sets the locale on the `Request` object.
        correct: true
      -
        value: >
          It is always a required parameter in localized routes.
        correct: false
      -
        value: >
          It can only be defined in YAML routing files.
        correct: false
    help: |
      The `_locale` parameter sets the locale for the current request, and it can be optional if a default is provided or guessed.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      What is the purpose of the `router:match` command in Symfony's console?
    answers:
      -
        value: >
          To generate a URL for a given route name.
        correct: false
      -
        value: >
          To identify which route matches a specific incoming URL path.
        correct: true
      -
        value: >
          To list all available routes in the application.
        correct: false
      -
        value: >
          To test the performance of the router.
        correct: false
    help: |
      The `router:match` command is a debugging tool to see how a URL is resolved to a route.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: >
      Which of the following is a valid way to define a route with a default value for a parameter `id` to `1` using PHP attributes?
    answers:
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', defaults: ['id' => 1])]
          ```
        correct: true
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', default: ['id' => 1])]
          ```
        correct: false
      -
        value: |
          ```php
          #[Route('/product/{id?1}', name: 'product_show')]
          ```
        correct: false
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', options: ['default_id' => 1])]
          ```
        correct: false
    help: |
      The `defaults` option in the `#[Route]` attribute is used to set default values for route parameters.
      https://symfony.com/doc/current/routing.html#setting-default-values-for-parameters

  -
    question: >
      What is the purpose of the `_fragment` special parameter in Symfony routing?
    answers:
      -
        value: >
          It defines a part of the URL that is ignored by the router.
        correct: false
      -
        value: >
          It is used to set the fragment identifier (the part after `#`) in the URL.
        correct: true
      -
        value: >
          It specifies a partial route match.
        correct: false
      -
        value: >
          It indicates a route that can be cached as a fragment.
        correct: false
    help: |
      The `_fragment` parameter is specifically for the URL fragment.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      Which of the following HTTP methods is typically used for submitting data to be processed to a specified resource?
    answers:
      -
        value: >
          `GET`
        correct: false
      -
        value: >
          `PUT`
        correct: false
      -
        value: >
          `POST`
        correct: true
      -
        value: >
          `DELETE`
        correct: false
    help: |
      The `POST` method is commonly used to send data to a server to create or update a resource.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      What is the purpose of the `_format` special parameter in Symfony routing?
    answers:
      -
        value: >
          To define the default file extension for the route.
        correct: false
      -
        value: >
          To set the request format (e.g., `html`, `json`) and influence the response's `Content-Type`.
        correct: true
      -
        value: >
          To specify the output format of the route's template.
        correct: false
      -
        value: >
          To validate the format of route parameters.
        correct: false
    help: |
      The `_format` parameter is crucial for content negotiation and setting the response format.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      What is the purpose of the `router:match` command in Symfony's console?
    answers:
      -
        value: >
          To generate a URL for a given route name.
        correct: false
      -
        value: >
          To identify which route matches a specific incoming URL path.
        correct: true
      -
        value: >
          To list all available routes in the application.
        correct: false
      -
        value: >
          To test the performance of the router.
        correct: false
    help: |
      The `router:match` command is a debugging tool to see how a URL is resolved to a route.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: >
      Which of the following is a valid way to define a route that only responds to `GET` and `POST` requests using YAML?
    answers:
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              methods: [GET, POST]
          ```
        correct: true
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              http_method: GET|POST
          ```
        correct: false
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              requirements:
                  _method: GET|POST
          ```
        correct: true
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              allow_methods: [GET, POST]
          ```
        correct: false
    help: |
      The `methods` key or a `_method` requirement can be used to restrict allowed HTTP methods for a route.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      When defining a route with a parameter `id` that should only accept digits, which regex would you use?
    answers:
      -
        value: >
          `\d+`
        correct: true
      -
        value: >
          `[0-9]*`
        correct: false
      -
        value: >
          `\w+`
        correct: false
      -
        value: >
          `[a-zA-Z0-9]+`
        correct: false
    help: |
      The `\d+` regex matches one or more digits.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      What is the primary purpose of the `_controller` special parameter in Symfony routing?
    answers:
      -
        value: >
          It defines the default value for a controller method argument.
        correct: false
      -
        value: >
          It specifies the fully qualified class name and method (or service ID) that will handle the request.
        correct: true
      -
        value: >
          It indicates that the route is handled by a custom controller factory.
        correct: false
      -
        value: >
          It is used for debugging purposes to log controller execution.
        correct: false
    help: |
      The `_controller` parameter is used internally by Symfony to map a route to its corresponding controller action.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      Which of the following is a valid way to define a route that only responds to `GET` and `POST` requests using the PHP routing configurator?
    answers:
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->methods(['GET', 'POST']);
          ```
        correct: true
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->setMethod('GET|POST');
          ```
        correct: false
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->httpMethod('GET|POST');
          ```
        correct: false
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->requirements(['_method' => 'GET|POST']);
          ```
        correct: true
    help: |
      The `methods()` method or `_method` requirement can be used with the RoutingConfigurator to restrict HTTP methods.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      What is the purpose of the `_locale` special parameter in Symfony routing?
    answers:
      -
        value: >
          It is automatically translated by Symfony.
        correct: false
      -
        value: >
          It sets the locale on the `Request` object.
        correct: true
      -
        value: >
          It is always a required parameter in localized routes.
        correct: false
      -
        value: >
          It can only be defined in YAML routing files.
        correct: false
    help: |
      The `_locale` parameter sets the locale for the current request, and it can be optional if a default is provided or guessed.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      What is the purpose of the `router:match` command in Symfony's console?
    answers:
      -
        value: >
          To generate a URL for a given route name.
        correct: false
      -
        value: >
          To identify which route matches a specific incoming URL path.
        correct: true
      -
        value: >
          To list all available routes in the application.
        correct: false
      -
        value: >
          To test the performance of the router.
        correct: false
    help: |
      The `router:match` command is a debugging tool to see how a URL is resolved to a route.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: >
      Which of the following is a valid way to define a route with a default value for a parameter `id` to `1` using PHP attributes?
    answers:
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', defaults: ['id' => 1])]
          ```
        correct: true
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', default: ['id' => 1])]
          ```
        correct: false
      -
        value: |
          ```php
          #[Route('/product/{id?1}', name: 'product_show')]
          ```
        correct: false
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', options: ['default_id' => 1])]
          ```
        correct: false
    help: |
      The `defaults` option in the `#[Route]` attribute is used to set default values for route parameters.
      https://symfony.com/doc/current/routing.html#setting-default-values-for-parameters

  -
    question: >
      What is the purpose of the `_fragment` special parameter in Symfony routing?
    answers:
      -
        value: >
          It defines a part of the URL that is ignored by the router.
        correct: false
      -
        value: >
          It is used to set the fragment identifier (the part after `#`) in the URL.
        correct: true
      -
        value: >
          It specifies a partial route match.
        correct: false
      -
        value: >
          It indicates a route that can be cached as a fragment.
        correct: false
    help: |
      The `_fragment` parameter is specifically for the URL fragment.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      Which of the following HTTP methods is typically used for submitting data to be processed to a specified resource?
    answers:
      -
        value: >
          `GET`
        correct: false
      -
        value: >
          `PUT`
        correct: false
      -
        value: >
          `POST`
        correct: true
      -
        value: >
          `DELETE`
        correct: false
    help: |
      The `POST` method is commonly used to send data to a server to create or update a resource.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      What is the purpose of the `_format` special parameter in Symfony routing?
    answers:
      -
        value: >
          To define the default file extension for the route.
        correct: false
      -
        value: >
          To set the request format (e.g., `html`, `json`) and influence the response's `Content-Type`.
        correct: true
      -
        value: >
          To specify the output format of the route's template.
        correct: false
      -
        value: >
          To validate the format of route parameters.
        correct: false
    help: |
      The `_format` parameter is crucial for content negotiation and setting the response format.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      What is the purpose of the `router:match` command in Symfony's console?
    answers:
      -
        value: >
          To generate a URL for a given route name.
        correct: false
      -
        value: >
          To identify which route matches a specific incoming URL path.
        correct: true
      -
        value: >
          To list all available routes in the application.
        correct: false
      -
        value: >
          To test the performance of the router.
        correct: false
    help: |
      The `router:match` command is a debugging tool to see how a URL is resolved to a route.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: >
      Which of the following is a valid way to define a route that only responds to `GET` and `POST` requests using YAML?
    answers:
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              methods: [GET, POST]
          ```
        correct: true
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              http_method: GET|POST
          ```
        correct: false
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              requirements:
                  _method: GET|POST
          ```
        correct: true
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              allow_methods: [GET, POST]
          ```
        correct: false
    help: |
      The `methods` key or a `_method` requirement can be used to restrict allowed HTTP methods for a route.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      When defining a route with a parameter `id` that should only accept digits, which regex would you use?
    answers:
      -
        value: >
          `\d+`
        correct: true
      -
        value: >
          `[0-9]*`
        correct: false
      -
        value: >
          `\w+`
        correct: false
      -
        value: >
          `[a-zA-Z0-9]+`
        correct: false
    help: |
      The `\d+` regex matches one or more digits.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      What is the primary purpose of the `_controller` special parameter in Symfony routing?
    answers:
      -
        value: >
          It defines the default value for a controller method argument.
        correct: false
      -
        value: >
          It specifies the fully qualified class name and method (or service ID) that will handle the request.
        correct: true
      -
        value: >
          It indicates that the route is handled by a custom controller factory.
        correct: false
      -
        value: >
          It is used for debugging purposes to log controller execution.
        correct: false
    help: |
      The `_controller` parameter is used internally by Symfony to map a route to its corresponding controller action.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      Which of the following is a valid way to define a route that only responds to `GET` and `POST` requests using the PHP routing configurator?
    answers:
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->methods(['GET', 'POST']);
          ```
        correct: true
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->setMethod('GET|POST');
          ```
        correct: false
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->httpMethod('GET|POST');
          ```
        correct: false
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->requirements(['_method' => 'GET|POST']);
          ```
        correct: true
    help: |
      The `methods()` method or `_method` requirement can be used with the RoutingConfigurator to restrict HTTP methods.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      What is the purpose of the `_locale` special parameter in Symfony routing?
    answers:
      -
        value: >
          It is automatically translated by Symfony.
        correct: false
      -
        value: >
          It sets the locale on the `Request` object.
        correct: true
      -
        value: >
          It is always a required parameter in localized routes.
        correct: false
      -
        value: >
          It can only be defined in YAML routing files.
        correct: false
    help: |
      The `_locale` parameter sets the locale for the current request, and it can be optional if a default is provided or guessed.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      What is the purpose of the `router:match` command in Symfony's console?
    answers:
      -
        value: >
          To generate a URL for a given route name.
        correct: false
      -
        value: >
          To identify which route matches a specific incoming URL path.
        correct: true
      -
        value: >
          To list all available routes in the application.
        correct: false
      -
        value: >
          To test the performance of the router.
        correct: false
    help: |
      The `router:match` command is a debugging tool to see how a URL is resolved to a route.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: >
      Which of the following is a valid way to define a route with a default value for a parameter `id` to `1` using PHP attributes?
    answers:
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', defaults: ['id' => 1])]
          ```
        correct: true
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', default: ['id' => 1])]
          ```
        correct: false
      -
        value: |
          ```php
          #[Route('/product/{id?1}', name: 'product_show')]
          ```
        correct: false
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', options: ['default_id' => 1])]
          ```
        correct: false
    help: |
      The `defaults` option in the `#[Route]` attribute is used to set default values for route parameters.
      https://symfony.com/doc/current/routing.html#setting-default-values-for-parameters

  -
    question: >
      What is the purpose of the `_fragment` special parameter in Symfony routing?
    answers:
      -
        value: >
          It defines a part of the URL that is ignored by the router.
        correct: false
      -
        value: >
          It is used to set the fragment identifier (the part after `#`) in the URL.
        correct: true
      -
        value: >
          It specifies a partial route match.
        correct: false
      -
        value: >
          It indicates a route that can be cached as a fragment.
        correct: false
    help: |
      The `_fragment` parameter is specifically for the URL fragment.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      Which of the following HTTP methods is typically used for submitting data to be processed to a specified resource?
    answers:
      -
        value: >
          `GET`
        correct: false
      -
        value: >
          `PUT`
        correct: false
      -
        value: >
          `POST`
        correct: true
      -
        value: >
          `DELETE`
        correct: false
    help: |
      The `POST` method is commonly used to send data to a server to create or update a resource.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      What is the purpose of the `_format` special parameter in Symfony routing?
    answers:
      -
        value: >
          To define the default file extension for the route.
        correct: false
      -
        value: >
          To set the request format (e.g., `html`, `json`) and influence the response's `Content-Type`.
        correct: true
      -
        value: >
          To specify the output format of the route's template.
        correct: false
      -
        value: >
          To validate the format of route parameters.
        correct: false
    help: |
      The `_format` parameter is crucial for content negotiation and setting the response format.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      What is the purpose of the `router:match` command in Symfony's console?
    answers:
      -
        value: >
          To generate a URL for a given route name.
        correct: false
      -
        value: >
          To identify which route matches a specific incoming URL path.
        correct: true
      -
        value: >
          To list all available routes in the application.
        correct: false
      -
        value: >
          To test the performance of the router.
        correct: false
    help: |
      The `router:match` command is a debugging tool to see how a URL is resolved to a route.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: >
      Which of the following is a valid way to define a route that only responds to `GET` and `POST` requests using YAML?
    answers:
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              methods: [GET, POST]
          ```
        correct: true
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              http_method: GET|POST
          ```
        correct: false
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              requirements:
                  _method: GET|POST
          ```
        correct: true
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              allow_methods: [GET, POST]
          ```
        correct: false
    help: |
      The `methods` key or a `_method` requirement can be used to restrict allowed HTTP methods for a route.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      When defining a route with a parameter `id` that should only accept digits, which regex would you use?
    answers:
      -
        value: >
          `\d+`
        correct: true
      -
        value: >
          `[0-9]*`
        correct: false
      -
        value: >
          `\w+`
        correct: false
      -
        value: >
          `[a-zA-Z0-9]+`
        correct: false
    help: |
      The `\d+` regex matches one or more digits.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      What is the primary purpose of the `_controller` special parameter in Symfony routing?
    answers:
      -
        value: >
          It defines the default value for a controller method argument.
        correct: false
      -
        value: >
          It specifies the fully qualified class name and method (or service ID) that will handle the request.
        correct: true
      -
        value: >
          It indicates that the route is handled by a custom controller factory.
        correct: false
      -
        value: >
          It is used for debugging purposes to log controller execution.
        correct: false
    help: |
      The `_controller` parameter is used internally by Symfony to map a route to its corresponding controller action.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      Which of the following is a valid way to define a route that only responds to `GET` and `POST` requests using the PHP routing configurator?
    answers:
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->methods(['GET', 'POST']);
          ```
        correct: true
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->setMethod('GET|POST');
          ```
        correct: false
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->httpMethod('GET|POST');
          ```
        correct: false
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->requirements(['_method' => 'GET|POST']);
          ```
        correct: true
    help: |
      The `methods()` method or `_method` requirement can be used with the RoutingConfigurator to restrict HTTP methods.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      What is the purpose of the `_locale` special parameter in Symfony routing?
    answers:
      -
        value: >
          It is automatically translated by Symfony.
        correct: false
      -
        value: >
          It sets the locale on the `Request` object.
        correct: true
      -
        value: >
          It is always a required parameter in localized routes.
        correct: false
      -
        value: >
          It can only be defined in YAML routing files.
        correct: false
    help: |
      The `_locale` parameter sets the locale for the current request, and it can be optional if a default is provided or guessed.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      What is the purpose of the `router:match` command in Symfony's console?
    answers:
      -
        value: >
          To generate a URL for a given route name.
        correct: false
      -
        value: >
          To identify which route matches a specific incoming URL path.
        correct: true
      -
        value: >
          To list all available routes in the application.
        correct: false
      -
        value: >
          To test the performance of the router.
        correct: false
    help: |
      The `router:match` command is a debugging tool to see how a URL is resolved to a route.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: >
      Which of the following is a valid way to define a route with a default value for a parameter `id` to `1` using PHP attributes?
    answers:
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', defaults: ['id' => 1])]
          ```
        correct: true
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', default: ['id' => 1])]
          ```
        correct: false
      -
        value: |
          ```php
          #[Route('/product/{id?1}', name: 'product_show')]
          ```
        correct: false
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', options: ['default_id' => 1])]
          ```
        correct: false
    help: |
      The `defaults` option in the `#[Route]` attribute is used to set default values for route parameters.
      https://symfony.com/doc/current/routing.html#setting-default-values-for-parameters

  -
    question: >
      What is the purpose of the `_fragment` special parameter in Symfony routing?
    answers:
      -
        value: >
          It defines a part of the URL that is ignored by the router.
        correct: false
      -
        value: >
          It is used to set the fragment identifier (the part after `#`) in the URL.
        correct: true
      -
        value: >
          It specifies a partial route match.
        correct: false
      -
        value: >
          It indicates a route that can be cached as a fragment.
        correct: false
    help: |
      The `_fragment` parameter is specifically for the URL fragment.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      Which of the following HTTP methods is typically used for submitting data to be processed to a specified resource?
    answers:
      -
        value: >
          `GET`
        correct: false
      -
        value: >
          `PUT`
        correct: false
      -
        value: >
          `POST`
        correct: true
      -
        value: >
          `DELETE`
        correct: false
    help: |
      The `POST` method is commonly used to send data to a server to create or update a resource.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      What is the purpose of the `_format` special parameter in Symfony routing?
    answers:
      -
        value: >
          To define the default file extension for the route.
        correct: false
      -
        value: >
          To set the request format (e.g., `html`, `json`) and influence the response's `Content-Type`.
        correct: true
      -
        value: >
          To specify the output format of the route's template.
        correct: false
      -
        value: >
          To validate the format of route parameters.
        correct: false
    help: |
      The `_format` parameter is crucial for content negotiation and setting the response format.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      What is the purpose of the `router:match` command in Symfony's console?
    answers:
      -
        value: >
          To generate a URL for a given route name.
        correct: false
      -
        value: >
          To identify which route matches a specific incoming URL path.
        correct: true
      -
        value: >
          To list all available routes in the application.
        correct: false
      -
        value: >
          To test the performance of the router.
        correct: false
    help: |
      The `router:match` command is a debugging tool to see how a URL is resolved to a route.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: >
      Which of the following is a valid way to define a route that only responds to `GET` and `POST` requests using YAML?
    answers:
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              methods: [GET, POST]
          ```
        correct: true
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              http_method: GET|POST
          ```
        correct: false
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              requirements:
                  _method: GET|POST
          ```
        correct: true
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              allow_methods: [GET, POST]
          ```
        correct: false
    help: |
      The `methods` key or a `_method` requirement can be used to restrict allowed HTTP methods for a route.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      When defining a route with a parameter `id` that should only accept digits, which regex would you use?
    answers:
      -
        value: >
          `\d+`
        correct: true
      -
        value: >
          `[0-9]*`
        correct: false
      -
        value: >
          `\w+`
        correct: false
      -
        value: >
          `[a-zA-Z0-9]+`
        correct: false
    help: |
      The `\d+` regex matches one or more digits.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      What is the primary purpose of the `_controller` special parameter in Symfony routing?
    answers:
      -
        value: >
          It defines the default value for a controller method argument.
        correct: false
      -
        value: >
          It specifies the fully qualified class name and method (or service ID) that will handle the request.
        correct: true
      -
        value: >
          It indicates that the route is handled by a custom controller factory.
        correct: false
      -
        value: >
          It is used for debugging purposes to log controller execution.
        correct: false
    help: |
      The `_controller` parameter is used internally by Symfony to map a route to its corresponding controller action.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      Which of the following is a valid way to define a route that only responds to `GET` and `POST` requests using the PHP routing configurator?
    answers:
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->methods(['GET', 'POST']);
          ```
        correct: true
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->setMethod('GET|POST');
          ```
        correct: false
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->httpMethod('GET|POST');
          ```
        correct: false
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->requirements(['_method' => 'GET|POST']);
          ```
        correct: true
    help: |
      The `methods()` method or `_method` requirement can be used with the RoutingConfigurator to restrict HTTP methods.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      What is the purpose of the `_locale` special parameter in Symfony routing?
    answers:
      -
        value: >
          It is automatically translated by Symfony.
        correct: false
      -
        value: >
          It sets the locale on the `Request` object.
        correct: true
      -
        value: >
          It is always a required parameter in localized routes.
        correct: false
      -
        value: >
          It can only be defined in YAML routing files.
        correct: false
    help: |
      The `_locale` parameter sets the locale for the current request, and it can be optional if a default is provided or guessed.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      What is the purpose of the `router:match` command in Symfony's console?
    answers:
      -
        value: >
          To generate a URL for a given route name.
        correct: false
      -
        value: >
          To identify which route matches a specific incoming URL path.
        correct: true
      -
        value: >
          To list all available routes in the application.
        correct: false
      -
        value: >
          To test the performance of the router.
        correct: false
    help: |
      The `router:match` command is a debugging tool to see how a URL is resolved to a route.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: >
      Which of the following is a valid way to define a route with a default value for a parameter `id` to `1` using PHP attributes?
    answers:
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', defaults: ['id' => 1])]
          ```
        correct: true
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', default: ['id' => 1])]
          ```
        correct: false
      -
        value: |
          ```php
          #[Route('/product/{id?1}', name: 'product_show')]
          ```
        correct: false
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', options: ['default_id' => 1])]
          ```
        correct: false
    help: |
      The `defaults` option in the `#[Route]` attribute is used to set default values for route parameters.
      https://symfony.com/doc/current/routing.html#setting-default-values-for-parameters

  -
    question: >
      What is the purpose of the `_fragment` special parameter in Symfony routing?
    answers:
      -
        value: >
          It defines a part of the URL that is ignored by the router.
        correct: false
      -
        value: >
          It is used to set the fragment identifier (the part after `#`) in the URL.
        correct: true
      -
        value: >
          It specifies a partial route match.
        correct: false
      -
        value: >
          It indicates a route that can be cached as a fragment.
        correct: false
    help: |
      The `_fragment` parameter is specifically for the URL fragment.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      Which of the following HTTP methods is typically used for submitting data to be processed to a specified resource?
    answers:
      -
        value: >
          `GET`
        correct: false
      -
        value: >
          `PUT`
        correct: false
      -
        value: >
          `POST`
        correct: true
      -
        value: >
          `DELETE`
        correct: false
    help: |
      The `POST` method is commonly used to send data to a server to create or update a resource.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      What is the purpose of the `_format` special parameter in Symfony routing?
    answers:
      -
        value: >
          To define the default file extension for the route.
        correct: false
      -
        value: >
          To set the request format (e.g., `html`, `json`) and influence the response's `Content-Type`.
        correct: true
      -
        value: >
          To specify the output format of the route's template.
        correct: false
      -
        value: >
          To validate the format of route parameters.
        correct: false
    help: |
      The `_format` parameter is crucial for content negotiation and setting the response format.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      What is the purpose of the `router:match` command in Symfony's console?
    answers:
      -
        value: >
          To generate a URL for a given route name.
        correct: false
      -
        value: >
          To identify which route matches a specific incoming URL path.
        correct: true
      -
        value: >
          To list all available routes in the application.
        correct: false
      -
        value: >
          To test the performance of the router.
        correct: false
    help: |
      The `router:match` command is a debugging tool to see how a URL is resolved to a route.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: >
      Which of the following is a valid way to define a route that only responds to `GET` and `POST` requests using YAML?
    answers:
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              methods: [GET, POST]
          ```
        correct: true
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              http_method: GET|POST
          ```
        correct: false
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              requirements:
                  _method: GET|POST
          ```
        correct: true
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              allow_methods: [GET, POST]
          ```
        correct: false
    help: |
      The `methods` key or a `_method` requirement can be used to restrict allowed HTTP methods for a route.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      When defining a route with a parameter `id` that should only accept digits, which regex would you use?
    answers:
      -
        value: >
          `\d+`
        correct: true
      -
        value: >
          `[0-9]*`
        correct: false
      -
        value: >
          `\w+`
        correct: false
      -
        value: >
          `[a-zA-Z0-9]+`
        correct: false
    help: |
      The `\d+` regex matches one or more digits.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      What is the primary purpose of the `_controller` special parameter in Symfony routing?
    answers:
      -
        value: >
          It defines the default value for a controller method argument.
        correct: false
      -
        value: >
          It specifies the fully qualified class name and method (or service ID) that will handle the request.
        correct: true
      -
        value: >
          It indicates that the route is handled by a custom controller factory.
        correct: false
      -
        value: >
          It is used for debugging purposes to log controller execution.
        correct: false
    help: |
      The `_controller` parameter is used internally by Symfony to map a route to its corresponding controller action.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      Which of the following is a valid way to define a route that only responds to `GET` and `POST` requests using the PHP routing configurator?
    answers:
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->methods(['GET', 'POST']);
          ```
        correct: true
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->setMethod('GET|POST');
          ```
        correct: false
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->httpMethod('GET|POST');
          ```
        correct: false
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->requirements(['_method' => 'GET|POST']);
          ```
        correct: true
    help: |
      The `methods()` method or `_method` requirement can be used with the RoutingConfigurator to restrict HTTP methods.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      What is the purpose of the `_locale` special parameter in Symfony routing?
    answers:
      -
        value: >
          It is automatically translated by Symfony.
        correct: false
      -
        value: >
          It sets the locale on the `Request` object.
        correct: true
      -
        value: >
          It is always a required parameter in localized routes.
        correct: false
      -
        value: >
          It can only be defined in YAML routing files.
        correct: false
    help: |
      The `_locale` parameter sets the locale for the current request, and it can be optional if a default is provided or guessed.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      What is the purpose of the `router:match` command in Symfony's console?
    answers:
      -
        value: >
          To generate a URL for a given route name.
        correct: false
      -
        value: >
          To identify which route matches a specific incoming URL path.
        correct: true
      -
        value: >
          To list all available routes in the application.
        correct: false
      -
        value: >
          To test the performance of the router.
        correct: false
    help: |
      The `router:match` command is a debugging tool to see how a URL is resolved to a route.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: >
      Which of the following is a valid way to define a route with a default value for a parameter `id` to `1` using PHP attributes?
    answers:
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', defaults: ['id' => 1])]
          ```
        correct: true
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', default: ['id' => 1])]
          ```
        correct: false
      -
        value: |
          ```php
          #[Route('/product/{id?1}', name: 'product_show')]
          ```
        correct: false
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', options: ['default_id' => 1])]
          ```
        correct: false
    help: |
      The `defaults` option in the `#[Route]` attribute is used to set default values for route parameters.
      https://symfony.com/doc/current/routing.html#setting-default-values-for-parameters

  -
    question: >
      What is the purpose of the `_fragment` special parameter in Symfony routing?
    answers:
      -
        value: >
          It defines a part of the URL that is ignored by the router.
        correct: false
      -
        value: >
          It is used to set the fragment identifier (the part after `#`) in the URL.
        correct: true
      -
        value: >
          It specifies a partial route match.
        correct: false
      -
        value: >
          It indicates a route that can be cached as a fragment.
        correct: false
    help: |
      The `_fragment` parameter is specifically for the URL fragment.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      Which of the following HTTP methods is typically used for submitting data to be processed to a specified resource?
    answers:
      -
        value: >
          `GET`
        correct: false
      -
        value: >
          `PUT`
        correct: false
      -
        value: >
          `POST`
        correct: true
      -
        value: >
          `DELETE`
        correct: false
    help: |
      The `POST` method is commonly used to send data to a server to create or update a resource.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      What is the purpose of the `_format` special parameter in Symfony routing?
    answers:
      -
        value: >
          To define the default file extension for the route.
        correct: false
      -
        value: >
          To set the request format (e.g., `html`, `json`) and influence the response's `Content-Type`.
        correct: true
      -
        value: >
          To specify the output format of the route's template.
        correct: false
      -
        value: >
          To validate the format of route parameters.
        correct: false
    help: |
      The `_format` parameter is crucial for content negotiation and setting the response format.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      What is the purpose of the `router:match` command in Symfony's console?
    answers:
      -
        value: >
          To generate a URL for a given route name.
        correct: false
      -
        value: >
          To identify which route matches a specific incoming URL path.
        correct: true
      -
        value: >
          To list all available routes in the application.
        correct: false
      -
        value: >
          To test the performance of the router.
        correct: false
    help: |
      The `router:match` command is a debugging tool to see how a URL is resolved to a route.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: >
      Which of the following is a valid way to define a route that only responds to `GET` and `POST` requests using YAML?
    answers:
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              methods: [GET, POST]
          ```
        correct: true
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              http_method: GET|POST
          ```
        correct: false
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              requirements:
                  _method: GET|POST
          ```
        correct: true
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              allow_methods: [GET, POST]
          ```
        correct: false
    help: |
      The `methods` key or a `_method` requirement can be used to restrict allowed HTTP methods for a route.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      When defining a route with a parameter `id` that should only accept digits, which regex would you use?
    answers:
      -
        value: >
          `\d+`
        correct: true
      -
        value: >
          `[0-9]*`
        correct: false
      -
        value: >
          `\w+`
        correct: false
      -
        value: >
          `[a-zA-Z0-9]+`
        correct: false
    help: |
      The `\d+` regex matches one or more digits.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      What is the primary purpose of the `_controller` special parameter in Symfony routing?
    answers:
      -
        value: >
          It defines the default value for a controller method argument.
        correct: false
      -
        value: >
          It specifies the fully qualified class name and method (or service ID) that will handle the request.
        correct: true
      -
        value: >
          It indicates that the route is handled by a custom controller factory.
        correct: false
      -
        value: >
          It is used for debugging purposes to log controller execution.
        correct: false
    help: |
      The `_controller` parameter is used internally by Symfony to map a route to its corresponding controller action.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      Which of the following is a valid way to define a route that only responds to `GET` and `POST` requests using the PHP routing configurator?
    answers:
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->methods(['GET', 'POST']);
          ```
        correct: true
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->setMethod('GET|POST');
          ```
        correct: false
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->httpMethod('GET|POST');
          ```
        correct: false
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->requirements(['_method' => 'GET|POST']);
          ```
        correct: true
    help: |
      The `methods()` method or `_method` requirement can be used with the RoutingConfigurator to restrict HTTP methods.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      What is the purpose of the `_locale` special parameter in Symfony routing?
    answers:
      -
        value: >
          It is automatically translated by Symfony.
        correct: false
      -
        value: >
          It sets the locale on the `Request` object.
        correct: true
      -
        value: >
          It is always a required parameter in localized routes.
        correct: false
      -
        value: >
          It can only be defined in YAML routing files.
        correct: false
    help: |
      The `_locale` parameter sets the locale for the current request, and it can be optional if a default is provided or guessed.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      What is the purpose of the `router:match` command in Symfony's console?
    answers:
      -
        value: >
          To generate a URL for a given route name.
        correct: false
      -
        value: >
          To identify which route matches a specific incoming URL path.
        correct: true
      -
        value: >
          To list all available routes in the application.
        correct: false
      -
        value: >
          To test the performance of the router.
        correct: false
    help: |
      The `router:match` command is a debugging tool to see how a URL is resolved to a route.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: >
      Which of the following is a valid way to define a route with a default value for a parameter `id` to `1` using PHP attributes?
    answers:
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', defaults: ['id' => 1])]
          ```
        correct: true
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', default: ['id' => 1])]
          ```
        correct: false
      -
        value: |
          ```php
          #[Route('/product/{id?1}', name: 'product_show')]
          ```
        correct: false
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', options: ['default_id' => 1])]
          ```
        correct: false
    help: |
      The `defaults` option in the `#[Route]` attribute is used to set default values for route parameters.
      https://symfony.com/doc/current/routing.html#setting-default-values-for-parameters

  -
    question: >
      What is the purpose of the `_fragment` special parameter in Symfony routing?
    answers:
      -
        value: >
          It defines a part of the URL that is ignored by the router.
        correct: false
      -
        value: >
          It is used to set the fragment identifier (the part after `#`) in the URL.
        correct: true
      -
        value: >
          It specifies a partial route match.
        correct: false
      -
        value: >
          It indicates a route that can be cached as a fragment.
        correct: false
    help: |
      The `_fragment` parameter is specifically for the URL fragment.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      Which of the following HTTP methods is typically used for submitting data to be processed to a specified resource?
    answers:
      -
        value: >
          `GET`
        correct: false
      -
        value: >
          `PUT`
        correct: false
      -
        value: >
          `POST`
        correct: true
      -
        value: >
          `DELETE`
        correct: false
    help: |
      The `POST` method is commonly used to send data to a server to create or update a resource.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      What is the purpose of the `_format` special parameter in Symfony routing?
    answers:
      -
        value: >
          To define the default file extension for the route.
        correct: false
      -
        value: >
          To set the request format (e.g., `html`, `json`) and influence the response's `Content-Type`.
        correct: true
      -
        value: >
          To specify the output format of the route's template.
        correct: false
      -
        value: >
          To validate the format of route parameters.
        correct: false
    help: |
      The `_format` parameter is crucial for content negotiation and setting the response format.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      What is the purpose of the `router:match` command in Symfony's console?
    answers:
      -
        value: >
          To generate a URL for a given route name.
        correct: false
      -
        value: >
          To identify which route matches a specific incoming URL path.
        correct: true
      -
        value: >
          To list all available routes in the application.
        correct: false
      -
        value: >
          To test the performance of the router.
        correct: false
    help: |
      The `router:match` command is a debugging tool to see how a URL is resolved to a route.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: >
      Which of the following is a valid way to define a route that only responds to `GET` and `POST` requests using YAML?
    answers:
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              methods: [GET, POST]
          ```
        correct: true
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              http_method: GET|POST
          ```
        correct: false
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              requirements:
                  _method: GET|POST
          ```
        correct: true
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              allow_methods: [GET, POST]
          ```
        correct: false
    help: |
      The `methods` key or a `_method` requirement can be used to restrict allowed HTTP methods for a route.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      When defining a route with a parameter `id` that should only accept digits, which regex would you use?
    answers:
      -
        value: >
          `\d+`
        correct: true
      -
        value: >
          `[0-9]*`
        correct: false
      -
        value: >
          `\w+`
        correct: false
      -
        value: >
          `[a-zA-Z0-9]+`
        correct: false
    help: |
      The `\d+` regex matches one or more digits.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      What is the primary purpose of the `_controller` special parameter in Symfony routing?
    answers:
      -
        value: >
          It defines the default value for a controller method argument.
        correct: false
      -
        value: >
          It specifies the fully qualified class name and method (or service ID) that will handle the request.
        correct: true
      -
        value: >
          It indicates that the route is handled by a custom controller factory.
        correct: false
      -
        value: >
          It is used for debugging purposes to log controller execution.
        correct: false
    help: |
      The `_controller` parameter is used internally by Symfony to map a route to its corresponding controller action.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      Which of the following is a valid way to define a route that only responds to `GET` and `POST` requests using the PHP routing configurator?
    answers:
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->methods(['GET', 'POST']);
          ```
        correct: true
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->setMethod('GET|POST');
          ```
        correct: false
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->httpMethod('GET|POST');
          ```
        correct: false
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->requirements(['_method' => 'GET|POST']);
          ```
        correct: true
    help: |
      The `methods()` method or `_method` requirement can be used with the RoutingConfigurator to restrict HTTP methods.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      What is the purpose of the `_locale` special parameter in Symfony routing?
    answers:
      -
        value: >
          It is automatically translated by Symfony.
        correct: false
      -
        value: >
          It sets the locale on the `Request` object.
        correct: true
      -
        value: >
          It is always a required parameter in localized routes.
        correct: false
      -
        value: >
          It can only be defined in YAML routing files.
        correct: false
    help: |
      The `_locale` parameter sets the locale for the current request, and it can be optional if a default is provided or guessed.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      What is the purpose of the `router:match` command in Symfony's console?
    answers:
      -
        value: >
          To generate a URL for a given route name.
        correct: false
      -
        value: >
          To identify which route matches a specific incoming URL path.
        correct: true
      -
        value: >
          To list all available routes in the application.
        correct: false
      -
        value: >
          To test the performance of the router.
        correct: false
    help: |
      The `router:match` command is a debugging tool to see how a URL is resolved to a route.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: >
      Which of the following is a valid way to define a route with a default value for a parameter `id` to `1` using PHP attributes?
    answers:
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', defaults: ['id' => 1])]
          ```
        correct: true
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', default: ['id' => 1])]
          ```
        correct: false
      -
        value: |
          ```php
          #[Route('/product/{id?1}', name: 'product_show')]
          ```
        correct: false
      -
        value: |
          ```php
          #[Route('/product/{id}', name: 'product_show', options: ['default_id' => 1])]
          ```
        correct: false
    help: |
      The `defaults` option in the `#[Route]` attribute is used to set default values for route parameters.
      https://symfony.com/doc/current/routing.html#setting-default-values-for-parameters

  -
    question: >
      What is the purpose of the `_fragment` special parameter in Symfony routing?
    answers:
      -
        value: >
          It defines a part of the URL that is ignored by the router.
        correct: false
      -
        value: >
          It is used to set the fragment identifier (the part after `#`) in the URL.
        correct: true
      -
        value: >
          It specifies a partial route match.
        correct: false
      -
        value: >
          It indicates a route that can be cached as a fragment.
        correct: false
    help: |
      The `_fragment` parameter is specifically for the URL fragment.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      Which of the following HTTP methods is typically used for submitting data to be processed to a specified resource?
    answers:
      -
        value: >
          `GET`
        correct: false
      -
        value: >
          `PUT`
        correct: false
      -
        value: >
          `POST`
        correct: true
      -
        value: >
          `DELETE`
        correct: false
    help: |
      The `POST` method is commonly used to send data to a server to create or update a resource.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      What is the purpose of the `_format` special parameter in Symfony routing?
    answers:
      -
        value: >
          To define the default file extension for the route.
        correct: false
      -
        value: >
          To set the request format (e.g., `html`, `json`) and influence the response's `Content-Type`.
        correct: true
      -
        value: >
          To specify the output format of the route's template.
        correct: false
      -
        value: >
          To validate the format of route parameters.
        correct: false
    help: |
      The `_format` parameter is crucial for content negotiation and setting the response format.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      What is the purpose of the `router:match` command in Symfony's console?
    answers:
      -
        value: >
          To generate a URL for a given route name.
        correct: false
      -
        value: >
          To identify which route matches a specific incoming URL path.
        correct: true
      -
        value: >
          To list all available routes in the application.
        correct: false
      -
        value: >
          To test the performance of the router.
        correct: false
    help: |
      The `router:match` command is a debugging tool to see how a URL is resolved to a route.
      https://symfony.com/doc/current/routing.html#router-debugging

  -
    question: >
      Which of the following is a valid way to define a route that only responds to `GET` and `POST` requests using YAML?
    answers:
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              methods: [GET, POST]
          ```
        correct: true
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              http_method: GET|POST
          ```
        correct: false
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              requirements:
                  _method: GET|POST
          ```
        correct: true
      -
        value: |
          ```yaml
          my_route:
              path: /api
              controller: App\Controller\MyController::api
              allow_methods: [GET, POST]
          ```
        correct: false
    help: |
      The `methods` key or a `_method` requirement can be used to restrict allowed HTTP methods for a route.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      When defining a route with a parameter `id` that should only accept digits, which regex would you use?
    answers:
      -
        value: >
          `\d+`
        correct: true
      -
        value: >
          `[0-9]*`
        correct: false
      -
        value: >
          `\w+`
        correct: false
      -
        value: >
          `[a-zA-Z0-9]+`
        correct: false
    help: |
      The `\d+` regex matches one or more digits.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      What is the primary purpose of the `_controller` special parameter in Symfony routing?
    answers:
      -
        value: >
          It defines the default value for a controller method argument.
        correct: false
      -
        value: >
          It specifies the fully qualified class name and method (or service ID) that will handle the request.
        correct: true
      -
        value: >
          It indicates that the route is handled by a custom controller factory.
        correct: false
      -
        value: >
          It is used for debugging purposes to log controller execution.
        correct: false
    help: |
      The `_controller` parameter is used internally by Symfony to map a route to its corresponding controller action.
      https://symfony.com/doc/current/routing.html#special-parameters

  -
    question: >
      Which of the following is a valid way to define a route that only responds to `GET` and `POST` requests using the PHP routing configurator?
    answers:
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::class, 'api'])
              ->methods(['GET', 'POST']);
          ```
        correct: true
      -
        value: |
          ```php
          $routes->add('my_route', '/api')
              ->controller([App\Controller\MyController::