category: Routing

questions:
  -
    question: >
      Which of the following configuration types are officially supported for defining routes in Symfony 7?
    answers:
      - { value: "YAML", correct: true }
      - { value: "PHP Attributes", correct: true }
      - { value: "XML", correct: true }
      - { value: "JSON", correct: false }
      - { value: "INI", correct: false }
      - { value: "PHP Configurator", correct: true }
    help: |
      Symfony 7 primarily supports route definitions via PHP attributes, YAML, XML, and PHP configurator files.
      https://symfony.com/doc/current/routing.html#defining-routes

  -
    question: |
      Given the following PHP attribute definition for a route, what will be the name of the route?

      ```php
      // src/Controller/BlogController.php
      namespace App\Controller;

      use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
      use Symfony\Component\HttpFoundation\Response;
      use Symfony\Component\Routing\Attribute\Route;

      class BlogController extends AbstractController
      {
          #[Route('/blog', name: 'blog_list')]
          public function list(): Response
          {
              // ...
          }
      }
      ```
    answers:
      - { value: "blog_list", correct: true }
      - { value: "/blog", correct: false }
      - { value: "list", correct: false }
      - { value: "App\\Controller\\BlogController::list", correct: false }
    help: |
      The `name` option in the `#[Route]` attribute explicitly defines the route's name, which is used for URL generation.
      https://symfony.com/doc/current/routing.html#defining-routes

  -
    question: |
      How would you define a route in YAML that maps the path `/products` to the `index` method of `App\Controller\ProductController`?
    answers:
      - { value: "```yaml\nproducts_index:\n    path: /products\n    controller: App\\Controller\\ProductController::index\n```", correct: true }
      - { value: "```yaml\nproducts_index:\n    url: /products\n    action: App\\Controller\\ProductController::index\n```", correct: false }
      - { value: "```yaml\n- route: products_index\n  path: /products\n  controller: App\\Controller\\ProductController::index\n```", correct: false }
      - { value: "```yaml\n/products:\n    _controller: App\\Controller\\ProductController::index\n```", correct: false }
    help: |
      In YAML, routes are defined with a unique name, a `path`, and a `controller` key specifying the controller class and method.
      https://symfony.com/doc/current/routing.html#defining-routes

  -
    question: >
      Which of the following is the correct way to import routes from a directory using PHP attributes in `config/routes/attributes.php`?
    answers:
      - { value: "```php\nuse Symfony\\Component\\Routing\\Loader\\Configurator\\RoutingConfigurator;\n\nreturn static function (RoutingConfigurator $routes): void {\n    $routes->import('../../src/Controller/', 'attribute');\n};\n```", correct: true }
      - { value: "```php\nuse Symfony\\Component\\Routing\\Loader\\Configurator\\RoutingConfigurator;\n\nreturn static function (RoutingConfigurator $routes): void {\n    $routes->load('../../src/Controller/', 'attribute');\n};\n```", correct: false }
      - { value: "```php\nuse Symfony\\Component\\Routing\\Loader\\Configurator\\RoutingConfigurator;\n\nreturn static function (RoutingConfigurator $routes): void {\n    $routes->addCollection('../../src/Controller/', 'attribute');\n};\n```", correct: false }
      - { value: "```php\nuse Symfony\\Component\\Routing\\Loader\\Configurator\\RoutingConfigurator;\n\nreturn static function (RoutingConfigurator $routes): void {\n    $routes->fromDirectory('../../src/Controller/', 'attribute');\n};\n```", correct: false }
    help: |
      The `import()` method of `RoutingConfigurator` is used to load routes from a given resource, specifying the type (e.g., 'attribute' for PHP attributes).
      https://symfony.com/doc/current/routing.html#importing-routing-resources

  -
    question: >
      What is the purpose of the `requirements` option in a Symfony route definition?
    answers:
      - { value: "To define regular expressions for URL parameters.", correct: true }
      - { value: "To specify the HTTP methods allowed for the route.", correct: false }
      - { value: "To set default values for missing URL parameters.", correct: false }
      - { value: "To define the controller and action for the route.", correct: false }
    help: |
      The `requirements` option allows you to define regular expressions that URL parameters must match for the route to be considered a match.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: |
      Consider the following route definition:

      ```yaml
      # config/routes.yaml
      blog_list:
          path:       /blog/{page}
          controller: App\Controller\BlogController::list
          requirements:
              page: '\d+'
      ```

      Which URL would successfully match this route?
    answers:
      - { value: "/blog/123", correct: true }
      - { value: "/blog/hello", correct: false }
      - { value: "/blog/", correct: false }
      - { value: "/blog/123/extra", correct: false }
    help: |
      The `requirements` for `page: '\d+'` means the `page` parameter must consist of one or more digits.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: |
      How can you configure a route parameter to allow a slash (`/`) character within its value in Symfony 7?
    answers:
      - { value: "By setting a requirement of `.+` for that parameter.", correct: true }
      - { value: "By setting the `allow_slash` option to `true` for the parameter.", correct: false }
      - { value: "By defining the parameter as `{*param}` in the path.", correct: false }
      - { value: "Slashes are always allowed by default in route parameters.", correct: false }
    help: |
      By default, route parameters do not match the `/` character. To allow it, you must explicitly define a requirement like `.+` for the parameter.
      https://symfony.com/doc/current/routing.html#allowing-a-slash-character-in-a-route-parameter

  -
    question: |
      What is the correct PHP attribute syntax to define a route for `/share/{token}` where `token` can contain any character, including slashes?
    answers:
      - { value: "```php\n#[Route('/share/{token}', name: 'share', requirements: ['token' => '.+'])]\n```", correct: true }
      - { value: "```php\n#[Route('/share/{token}', name: 'share', allow_slash: ['token'])]\n```", correct: false }
      - { value: "```php\n#[Route('/share/{token<.+>}', name: 'share')]\n```", correct: true }
      - { value: "```php\n#[Route('/share/{token}', name: 'share', defaults: ['token' => '.*'])]\n```", correct: false }
    help: |
      You can use the inline requirement syntax `param<regex>` or the `requirements` option to specify a regex like `.+` which matches any character, including slashes.
      https://symfony.com/doc/current/routing.html#allowing-a-slash-character-in-a-route-parameter

  -
    question: >
      Which of the following is the correct way to set a default value for a route parameter named `page` to `1` in a YAML route definition?
    answers:
      - { value: "```yaml\nblog_list:\n    path: /blog/{page}\n    controller: App\\Controller\\BlogController::list\n    defaults:\n        page: 1\n```", correct: true }
      - { value: "```yaml\nblog_list:\n    path: /blog/{page?1}\n    controller: App\\Controller\\BlogController::list\n```", correct: false }
      - { value: "```yaml\nblog_list:\n    path: /blog/{page}\n    default_values:\n        page: 1\n```", correct: false }
      - { value: "```yaml\nblog_list:\n    path: /blog/{page}\n    options:\n        default_page: 1\n```", correct: false }
    help: |
      Default values for route parameters are defined under the `defaults` key in YAML.
      https://symfony.com/doc/current/routing.html#setting-default-values-for-parameters

  -
    question: |
      Given the following controller method:

      ```php
      // src/Controller/OrderController.php
      namespace App\Controller;

      use App\Enum\OrderStatusEnum;
      use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
      use Symfony\Component\HttpFoundation\Response;
      use Symfony\Component\Routing\Attribute\Route;

      class OrderController extends AbstractController
      {
          #[Route('/orders/list/{status}', name: 'list_orders_by_status')]
          public function list(OrderStatusEnum $status = OrderStatusEnum::Paid): Response
          {
              // ...
          }
      }
      ```

      If `OrderStatusEnum` is a PHP backed enum, what value will Symfony automatically convert the `{status}` route parameter to when matching the route?
    answers:
      - { value: "The scalar value of the enum case (e.g., 'paid' if `OrderStatusEnum::Paid` has a string backed value 'paid').", correct: true }
      - { value: "The full enum case name (e.g., 'OrderStatusEnum::Paid').", correct: false }
      - { value: "The ordinal value of the enum case.", correct: false }
      - { value: "Symfony will throw an error as enums are not directly supported as route parameters.", correct: false }
    help: |
      Symfony automatically converts PHP backed enumerations used as route parameters to their scalar values, allowing for cleaner controller argument definitions and type hinting.
      https://symfony.com/doc/current/routing.html#route-parameters-php-backed-enum

  -
    question: >
      When generating a URL in a Symfony controller using `generateUrl()`, which constant should be passed as the third argument to generate an absolute URL (including scheme and host)?
    answers:
      - { value: "`UrlGeneratorInterface::ABSOLUTE_URL`", correct: true }
      - { value: "`UrlGeneratorInterface::ABSOLUTE_PATH`", correct: false }
      - { value: "`UrlGeneratorInterface::NETWORK_PATH`", correct: false }
      - { value: "`UrlGeneratorInterface::RELATIVE_PATH`", correct: false }
    help: |
      `UrlGeneratorInterface::ABSOLUTE_URL` generates a full URL including the scheme, host, and path.
      https://symfony.com/doc/current/routing.html#generating-urls-in-controllers

  -
    question: |
      You are generating a URL in a Symfony service and need to include an object (e.g., a UUID object) as a route parameter. What is the recommended practice to avoid issues?
    answers:
      - { value: "Explicitly cast the object to a string before passing it as a parameter.", correct: true }
      - { value: "Symfony automatically handles object serialization for route parameters.", correct: false }
      - { value: "Pass the object directly; Symfony will call its `__toString()` method if available.", correct: false }
      - { value: "Inject a custom parameter converter service to handle object conversion.", correct: false }
    help: |
      When passing objects as extra parameters to `generateUrl()`, it's necessary to explicitly convert them to strings to avoid issues.
      https://symfony.com/doc/current/routing.html#extra-url-parameters

  -
    question: >
      Which interface should you inject into a Symfony service to generate URLs?
    answers:
      - { value: "`Symfony\\Component\\Routing\\Generator\\UrlGeneratorInterface`", correct: true }
      - { value: "`Symfony\\Component\\HttpFoundation\\UrlHelper`", correct: false }
      - { value: "`Symfony\\Component\\Routing\\RouterInterface`", correct: false }
      - { value: "`Symfony\\Component\\HttpKernel\\UriSigner`", correct: false }
    help: |
      The `UrlGeneratorInterface` is the standard way to generate URLs in Symfony services.
      https://symfony.com/doc/current/routing.html#generating-urls-in-services

  -
    question: >
      When generating a localized URL using `generateUrl()`, how can you explicitly set the locale instead of using the current request's locale?
    answers:
      - { value: "Pass the desired locale as the `_locale` parameter in the arguments array.", correct: true }
      - { value: "Set the locale using `Request::setLocale()` before calling `generateUrl()`.", correct: false }
      - { value: "There is a dedicated `generateLocalizedUrl()` method.", correct: false }
      - { value: "The locale can only be determined from the request and cannot be explicitly set during generation.", correct: false }
    help: |
      To explicitly set the locale for a generated URL, pass the `_locale` parameter in the arguments array.
      https://symfony.com/doc/current/routing.html#generating-urls-in-controllers

  -
    question: >
      What is the default HTTP status code for a temporary redirect configured using Symfony's `RedirectController`?
    answers:
      - { value: "302 Found", correct: true }
      - { value: "301 Moved Permanently", correct: false }
      - { value: "307 Temporary Redirect", correct: false }
      - { value: "303 See Other", correct: false }
    help: |
      Redirections are temporary by default (code 302).
      https://symfony.com/doc/current/routing.html#redirecting-routes

  -
    question: |
      To make a redirect configured with `RedirectController` permanent, which option should be set to `true` in the `defaults`?
    answers:
      - { value: "`permanent`", correct: true }
      - { value: "`status_code`", correct: false }
      - { value: "`is_permanent`", correct: false }
      - { value: "`redirect_type`", correct: false }
    help: |
      Setting the `permanent` default to `true` changes the redirect status code from 302 to 301.
      https://symfony.com/doc/current/routing.html#redirecting-routes

  -
    question: >
      Which option in `RedirectController` configuration ensures that the original query string parameters are preserved during a redirect?
    answers:
      - { value: "`keepQueryParams`", correct: true }
      - { value: "`preserve_query`", correct: false }
      - { value: "`pass_query_params`", correct: false }
      - { value: "`retain_query`", correct: false }
    help: |
      The `keepQueryParams` default option, when set to `true`, will include the original query string parameters in the redirected URL.
      https://symfony.com/doc/current/routing.html#redirecting-routes

  -
    question: >
      When using `RedirectController`, setting `keepRequestMethod` to `true` for a permanent redirect will result in which HTTP status code?
    answers:
      - { value: "308 Permanent Redirect", correct: true }
      - { value: "301 Moved Permanently", correct: false }
      - { value: "307 Temporary Redirect", correct: false }
      - { value: "302 Found", correct: false }
    help: |
      If `keepRequestMethod` is `true`, permanent redirects use the 308 status code instead of 301.
      https://symfony.com/doc/current/routing.html#redirecting-routes

  -
    question: >
      What is the purpose of the `_controller` special route parameter in Symfony?
    answers:
      - { value: "It determines which controller and action is executed when the route is matched.", correct: true }
      - { value: "It defines the default controller for all routes in an application.", correct: false }
      - { value: "It specifies the base path for all controller-defined routes.", correct: false }
      - { value: "It is used for injecting services into the controller.", correct: false }
    help: |
      The `_controller` parameter is fundamental for mapping a matched route to its corresponding controller action.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which special route parameter is used to set the "request format" of the `Request` object, influencing the `Content-Type` of the response (e.g., `application/json` for `json` format)?
    answers:
      - { value: "`_format`", correct: true }
      - { value: "`_type`", correct: false }
      - { value: "`_content_type`", correct: false }
      - { value: "`_response_format`", correct: false }
    help: |
      The `_format` parameter sets the request format, which is used to determine the `Content-Type` of the response.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      What is the primary function of the `_locale` special route parameter?
    answers:
      - { value: "To set the locale on the Request object.", correct: true }
      - { value: "To define the default language for the application.", correct: false }
      - { value: "To automatically translate route paths.", correct: false }
      - { value: "To filter routes based on the user's preferred language.", correct: false }
    help: |
      The `_locale` parameter is used to set the locale on the `Request` object, which is crucial for internationalization.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: |
      Consider the following route definition:

      ```yaml
      # config/routes.yaml
      article_search:
        path:        /articles/{_locale}/search.{_format}
        controller:  App\Controller\ArticleController::search
        locale:      en
        format:      html
        requirements:
            _locale: en|fr
            _format: html|xml
      ```

      What is the purpose of `locale: en` and `format: html` in this configuration?
    answers:
      - { value: "They define the default values for the `_locale` and `_format` parameters if they are not provided in the URL.", correct: true }
      - { value: "They restrict the route to only match requests with `en` locale and `html` format.", correct: false }
      - { value: "They are used for internal caching mechanisms related to locale and format.", correct: false }
      - { value: "They specify the preferred locale and format for URL generation, overriding the current request's locale/format.", correct: false }
    help: |
      These define the default values for the `_locale` and `_format` parameters when they are not explicitly present in the URL.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      How can you configure a route to match a specific subdomain, for example, `m.example.com`?
    answers:
      - { value: "By using the `host` option in the route definition.", correct: true }
      - { value: "By setting a `domain` requirement for the route.", correct: false }
      - { value: "By defining a `subdomain` parameter in the path.", correct: false }
      - { value: "Host matching is not directly supported in Symfony routing.", correct: false }
    help: |
      The `host` option allows you to define routes that match specific hostnames or subdomains.
      https://symfony.com/doc/current/routing.html#host-based-routing

  -
    question: |
      You want to define a route that matches `m.example.com` and `mobile.example.com`, with `m` as the default subdomain. Which PHP attribute configuration is correct?
    answers:
      - { value: "```php\n#[Route(\n    '/',\n    name: 'mobile_homepage',\n    host: '{subdomain}.example.com',\n    defaults: ['subdomain' => 'm'],\n    requirements: ['subdomain' => 'm|mobile'],\n)]\n```", correct: true }
      - { value: "```php\n#[Route(\n    '/',\n    name: 'mobile_homepage',\n    host: ['m.example.com', 'mobile.example.com'],\n    defaults: ['subdomain' => 'm'],\n)]\n```", correct: false }
      - { value: "```php\n#[Route(\n    '/',\n    name: 'mobile_homepage',\n    host: '{subdomain}.example.com',\n    default_host: 'm',\n    host_regex: 'm|mobile',\n)]\n```", correct: false }
      - { value: "```php\n#[Route(\n    '/',\n    name: 'mobile_homepage',\n    domain: '{subdomain}.example.com',\n    defaults: ['subdomain' => 'm'],\n    requirements: ['subdomain' => 'm|mobile'],\n)]\n```", correct: false }
    help: |
      Dynamic host parameters are defined within curly braces in the `host` option, and their defaults and requirements are set using `defaults` and `requirements` respectively.
      https://symfony.com/doc/current/routing.html#host-based-routing

  -
    question: >
      When importing a collection of routes, how can you apply different URL prefixes based on the locale (e.g., `/nl` for Dutch, no prefix for English)?
    answers:
      - { value: "By providing an associative array to the `prefix` option, where keys are locales and values are prefixes.", correct: true }
      - { value: "By using a `locale_prefix` option with a callback function.", correct: false }
      - { value: "This functionality is not available for imported route collections.", correct: false }
      - { value: "By defining separate import statements for each locale.", correct: false }
    help: |
      The `prefix` option for imported routes can accept an associative array mapping locales to their respective prefixes.
      https://symfony.com/doc/current/routing.html#localized-routes

  -
    question: >
      What is the purpose of the `condition` option in a Symfony route definition?
    answers:
      - { value: "To define an Expression Language expression that must evaluate to true for the route to match.", correct: true }
      - { value: "To specify the HTTP methods allowed for the route.", correct: false }
      - { value: "To set a priority for route matching.", correct: false }
      - { value: "To define a redirect rule for the route.", correct: false }
    help: |
      The `condition` option allows you to add complex logic using Symfony's Expression Language to determine if a route should match.
      https://symfony.com/doc/current/routing.html#conditional-request-matching

  -
    question: |
      Which of the following Expression Language variables is an instance of `Symfony\Component\HttpFoundation\Request` and represents the current request?
    answers:
      - { value: "`request`", correct: true }
      - { value: "`context`", correct: false }
      - { value: "`params`", correct: false }
      - { value: "`http_request`", correct: false }
    help: |
      The `request` variable in Expression Language provides access to the current `Request` object.
      https://symfony.com/doc/current/routing.html#expression-language-variables-and-functions

  -
    question: |
      You want to match a route only if the `User-Agent` header contains "firefox" (case-insensitive). Which `condition` expression is correct?
    answers:
      - { value: "`request.headers.get('User-Agent') matches '/firefox/i'`", correct: true }
      - { value: "`request.headers['User-Agent'] contains 'firefox'`", correct: false }
      - { value: "`context.getUserAgent() matches '/firefox/i'`", correct: false }
      - { value: "`request.userAgent() matches '/firefox/i'`", correct: false }
    help: |
      The `request` variable allows access to request headers, and the `matches` operator can be used with regular expressions.
      https://symfony.com/doc/current/routing.html#conditional-request-matching

  -
    question: >
      Which Expression Language function allows you to retrieve the value of an environment variable within a routing condition?
    answers:
      - { value: "`env(string $name)`", correct: true }
      - { value: "`getenv(string $name)`", correct: false }
      - { value: "`parameter(string $name)`", correct: false }
      - { value: "`config(string $name)`", correct: false }
    help: |
      The `env()` function is available in Expression Language to access environment variables.
      https://symfony.com/doc/current/routing.html#expression-language-variables-and-functions

  -
    question: |
      Given a route `/posts/{id}` with a `condition: "params['id'] < 1000"`, what does `params['id']` refer to?
    answers:
      - { value: "The value of the `id` route parameter.", correct: true }
      - { value: "The ID of the current request.", correct: false }
      - { value: "A service named `id`.", correct: false }
      - { value: "A configuration parameter named `id`.", correct: false }
    help: |
      The `params` variable in Expression Language is an array of matched route parameters for the current route.
      https://symfony.com/doc/current/routing.html#expression-language-variables-and-functions

  -
    question: >
      How can you restrict a Symfony route to only respond to `GET` and `HEAD` HTTP methods using PHP attributes?
    answers:
      - { value: "```php\n#[Route('/contact', name: 'contact', methods: ['GET', 'HEAD'])]\n```", correct: true }
      - { value: "```php\n#[Route('/contact', name: 'contact', allow_methods: ['GET', 'HEAD'])]\n```", correct: false }
      - { value: "```php\n#[Route('/contact', name: 'contact', condition: \"context.getMethod() in ['GET', 'HEAD']\")]\n```", correct: true }
      - { value: "```php\n#[Route('/contact', name: 'contact', http_methods: ['GET', 'HEAD'])]\n```", correct: false }
    help: |
      The `methods` option in the `#[Route]` attribute directly specifies allowed HTTP methods. Alternatively, a `condition` using `context.getMethod()` can achieve the same.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      Which of the following HTTP methods is implicitly allowed when you define a route with `GET` as an allowed method, even if not explicitly listed?
    answers:
      - { value: "HEAD", correct: true }
      - { value: "POST", correct: false }
      - { value: "PUT", correct: false }
      - { value: "DELETE", correct: false }
    help: |
      If a route allows `GET` requests, `HEAD` requests are implicitly allowed as well.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      When a route contains the `_locale` parameter (e.g., `/articles/{_locale}/search`), how does Symfony determine the default locale if it's not explicitly provided in the URL?
    answers:
      - { value: "It uses the default locale configured in `framework.yaml` or the user's browser preferences.", correct: true }
      - { value: "It falls back to `en` by default.", correct: false }
      - { value: "It throws a `RouteNotFoundException`.", correct: false }
      - { value: "The `_locale` parameter is always mandatory if present in the path.", correct: false }
    help: |
      Symfony can guess the user's locale based on their browser preferences or use a default configured locale.
      https://symfony.com/doc/current/routing.html#locale-guessing

  -
    question: >
      You have a route defined with a `_locale` parameter. When generating a URL for this route, if you don't explicitly pass `_locale` in the arguments, what locale will Symfony use by default?
    answers:
      - { value: "The current request's locale.", correct: true }
      - { value: "The application's default locale.", correct: false }
      - { value: "The first locale defined in the route's requirements.", correct: false }
      - { value: "An exception will be thrown if `_locale` is missing.", correct: false }
    help: |
      When a route is localized, Symfony uses by default the current request locale if `_locale` is not explicitly passed during URL generation.
      https://symfony.com/doc/current/routing.html#generating-urls-in-controllers

  -
    question: >
      Which command-line tool is used to list all registered routes in a Symfony application?
    answers:
      - { value: "`php bin/console debug:router`", correct: true }
      - { value: "`php bin/console router:list`", correct: false }
      - { value: "`php bin/console routes:show`", correct: false }
      - { value: "`php bin/console routing:dump`", correct: false }
    help: |
      The `debug:router` command provides a comprehensive list of all defined routes.
      https://symfony.com/doc/current/routing.html#listing-all-routes

  -
    question: >
      To display detailed information for a specific route named `app_lucky_number`, which command should you use?
    answers:
      - { value: "`php bin/console debug:router app_lucky_number`", correct: true }
      - { value: "`php bin/console debug:router --name=app_lucky_number`", correct: false }
      - { value: "`php bin/console router:info app_lucky_number`", correct: false }
      - { value: "`php bin/console show:route app_lucky_number`", correct: false }
    help: |
      Passing the route name as an argument to `debug:router` displays its specific details.
      https://symfony.com/doc/current/routing.html#displaying-the-details-of-a-specific-route

  -
    question: >
      Which command helps you determine which Symfony route matches a specific URL path, aiding in debugging routing issues?
    answers:
      - { value: "`php bin/console router:match /lucky/number/8`", correct: true }
      - { value: "`php bin/console debug:url /lucky/number/8`", correct: false }
      - { value: "`php bin/console route:test /lucky/number/8`", correct: false }
      - { value: "`php bin/console match:url /lucky/number/8`", correct: false }
    help: |
      The `router:match` command is specifically designed to identify the route that matches a given URL.
      https://symfony.com/doc/current/routing.html#matching-a-url

  -
    question: >
      When using `php bin/console debug:router`, what option would you use to only display routes that match the `POST` HTTP method?
    answers:
      - { value: "`--method=POST`", correct: true }
      - { value: "`--http-method=POST`", correct: false }
      - { value: "`--filter-method=POST`", correct: false }
      - { value: "`--methods=POST`", correct: false }
    help: |
      The `--method` option filters the displayed routes by the specified HTTP method.
      https://symfony.com/doc/current/routing.html#filtering-routes

  -
    question: >
      What is the recommended way to check if a route exists in Symfony without negatively impacting performance by regenerating the routing cache?
    answers:
      - { value: "Attempt to generate the URL and catch `Symfony\\Component\\Routing\\Exception\\RouteNotFoundException`.", correct: true }
      - { value: "Access the `RouteCollection` directly and check if the route name exists.", correct: false }
      - { value: "Use a dedicated `router.hasRoute()` method.", correct: false }
      - { value: "Inspect the output of `debug:router` in a production environment.", correct: false }
    help: |
      The recommended approach is to attempt URL generation and catch `RouteNotFoundException` if the route doesn't exist, as direct inspection of the route collection can trigger cache regeneration.
      https://symfony.com/doc/current/routing.html#checking-if-a-route-exists

  -
    question: |
      You encounter the error: "Controller \"App\\Controller\\BlogController::show()\" requires that you provide a value for the \"$slug\" argument." What is the most likely cause?
    answers:
      - { value: "The route path for `BlogController::show()` does not define a `{slug}` parameter.", correct: true }
      - { value: "The `$slug` argument in the controller method is not type-hinted correctly.", correct: false }
      - { value: "The service container cannot autowire the `$slug` argument.", correct: false }
      - { value: "The route has a `requirements` constraint for `slug` that is not met.", correct: false }
    help: |
      This error indicates a mismatch between the controller's expected arguments and the parameters provided by the matched route.
      https://symfony.com/doc/current/routing.html#troubleshooting

  -
    question: >
      When defining a route group using PHP attributes on a controller class, what is the effect of the `name` option in the class-level `#[Route]` attribute?
    answers:
      - { value: "It acts as a prefix for all route names defined within that controller.", correct: true }
      - { value: "It defines a default route name for the controller's `__invoke()` method.", correct: false }
      - { value: "It sets the base name for the controller itself, not individual routes.", correct: false }
      - { value: "It is ignored when used on a class-level `#[Route]` attribute.", correct: false }
    help: |
      The `name` option on a class-level `#[Route]` attribute defines a name prefix for all routes within that controller.
      https://symfony.com/doc/current/routing.html#route-groups

  -
    question: |
      Consider the following PHP attribute configuration:

      ```php
      #[Route('/blog', requirements: ['_locale' => 'en|es|fr'], name: 'blog_')]
      class BlogController extends AbstractController
      {
          #[Route('/{_locale}', name: 'index')]
          public function index(): Response
          {
              // ...
          }
      }
      ```

      What will be the full name of the `index` route?
    answers:
      - { value: "blog_index", correct: true }
      - { value: "index", correct: false }
      - { value: "blog_/{_locale}", correct: false }
      - { value: "/blog/{_locale}", correct: false }
    help: |
      The `name` option on the class-level `#[Route]` attribute acts as a prefix for route names defined on methods within that class.
      https://symfony.com/doc/current/routing.html#route-groups

  -
    question: >
      What is the primary benefit of using route groups in Symfony?
    answers:
      - { value: "To apply common configurations (e.g., prefixes, requirements) to multiple routes efficiently.", correct: true }
      - { value: "To improve the performance of route matching by pre-compiling routes.", correct: false }
      - { value: "To define routes that are only accessible to specific user roles.", correct: false }
      - { value: "To organize routes into separate files for better readability.", correct: false }
    help: |
      Route groups allow you to define shared configurations like URL prefixes, name prefixes, and requirements for a collection of routes.
      https://symfony.com/doc/current/routing.html#route-groups

  -
    question: >
      How can you mark a Symfony route as 'stateless' to prevent session usage during request matching for improved caching?
    answers:
      - { value: "By setting the `stateless` option to `true` in the route definition.", correct: true }
      - { value: "By adding a `#[Stateless]` attribute to the controller method.", correct: false }
      - { value: "By configuring the route with a `cache_control` header.", correct: false }
      - { value: "Stateless routes are only supported for API routes.", correct: false }
    help: |
      The `stateless` option, when set to `true`, tells Symfony that the route does not rely on session state, which can improve caching.
      https://symfony.com/doc/current/routing.html#stateless-routes

  -
    question: >
      What is the default `priority` value for a Symfony route if not explicitly specified?
    answers:
      - { value: "0", correct: true }
      - { value: "1", correct: false }
      - { value: "100", correct: false }
      - { value: "The order of definition determines priority if not specified.", correct: false }
    help: |
      Routes have a default priority of 0. Routes with higher priority values are matched before those with lower or default priority.
      https://symfony.com/doc/current/routing.html#route-priority

  -
    question: |
      Consider these two routes defined in the same controller:

      ```php
      class BlogController extends AbstractController
      {
          #[Route('/blog/{slug}', name: 'blog_show')]
          public function show(string $slug): Response {}

          #[Route('/blog/list', name: 'blog_list')]
          public function list(): Response {}
      }
      ```

      If a request comes for `/blog/list`, which route will Symfony match by default, and why?
    answers:
      - { value: "`blog_show`, because it's defined first and has a greedy pattern.", correct: true }
      - { value: "`blog_list`, because it's more specific.", correct: false }
      - { value: "It will result in a routing error due to ambiguity.", correct: false }
      - { value: "The order of definition does not matter; Symfony uses an internal optimization.", correct: false }
    help: |
      Without explicit priority, the order of definition matters for greedy patterns. The more general `blog_show` route would match `/blog/list` if defined first.
      https://symfony.com/doc/current/routing.html#route-priority

  -
    question: >
      To ensure the route `/blog/list` is matched before `/blog/{slug}` when both are defined, what should be done?
    answers:
      - { value: "Assign a higher `priority` value to the `/blog/list` route.", correct: true }
      - { value: "Define `/blog/list` after `/blog/{slug}`.", correct: false }
      - { value: "Add a `requirements` constraint to `/blog/list`.", correct: false }
      - { value: "Use a different HTTP method for `/blog/list`.", correct: false }
    help: |
      Routes with higher priority are matched first. Setting a higher priority for the more specific route ensures it's chosen over a greedy pattern.
      https://symfony.com/doc/current/routing.html#route-priority

  -
    question: >
      What is the purpose of a route alias in Symfony?
    answers:
      - { value: "To provide an alternate name for an existing route, useful for backward compatibility.", correct: true }
      - { value: "To create a shortcut URL that redirects to another route.", correct: false }
      - { value: "To define a route that can be accessed via multiple paths.", correct: false }
      - { value: "To group multiple routes under a single logical name.", correct: false }
    help: |
      Route aliases allow you to assign an alternate name to an existing route, which can be useful for maintaining backward compatibility when route names change.
      https://symfony.com/doc/current/routing.html#creating-route-aliases

  -
    question: |
      You have a route `product_details` and want to deprecate the old route name `product_show` by making it an alias to `product_details`. Which YAML configuration is correct for deprecating the alias with a generic message?
    answers:
      - { value: "```yaml\nproduct_details:\n    path: /product/{id}\n    controller: App\\Controller\\ProductController::show\n\nproduct_show:\n    alias: product_details\n    deprecated:\n        package: 'acme/package'\n        version: '1.2'\n```", correct: true }
      - { value: "```yaml\nproduct_show:\n    path: /product/{id}\n    controller: App\\Controller\\ProductController::show\n    deprecated_alias: product_details\n```", correct: false }
      - { value: "```yaml\nproduct_show:\n    redirect_to: product_details\n    deprecated: true\n```", correct: false }
      - { value: "```yaml\nproduct_details:\n    path: /product/{id}\n    controller: App\\Controller\\ProductController::show\n    aliases:\n        - product_show:\n            deprecated: true\n```", correct: false }
    help: |
      To deprecate an alias, you define the alias and then add a `deprecated` key with `package` and `version` information.
      https://symfony.com/doc/current/routing.html#deprecating-route-aliases

  -
    question: >
      When deprecating a route alias, which placeholder can be used in a custom deprecation message to refer to the deprecated alias's name?
    answers:
      - { value: "`%alias_id%`", correct: true }
      - { value: "`%deprecated_name%`", correct: false }
      - { value: "`%old_route%`", correct: false }
      - { value: "`%alias_name%`", correct: false }
    help: |
      The `%alias_id%` placeholder is available in custom deprecation messages for route aliases.
      https://symfony.com/doc/current/routing.html#deprecating-route-aliases

  -
    question: >
      How can you force an entire imported route collection to use the HTTPS scheme?
    answers:
      - { value: "By setting the `schemes` option to `[https]` on the import statement.", correct: true }
      - { value: "By adding a `#[Scheme('https')]` attribute to the imported controllers.", correct: false }
      - { value: "By configuring `force_https: true` in `framework.yaml`.", correct: false }
      - { value: "This can only be done on individual routes, not collections.", correct: false }
    help: |
      The `schemes` option can be applied to an import statement to enforce a specific scheme for all imported routes.
      https://symfony.com/doc/current/routing.html#forcing-https

  -
    question: >
      Which of the following is NOT a valid type for the `resource` option when importing routes in Symfony?
    answers:
      - { value: "A service ID", correct: false }
      - { value: "A file path", correct: false }
      - { value: "A directory path", correct: false }
      - { value: "A URL to an external API", correct: true }
    help: |
      Symfony's routing loader typically supports file paths, directory paths, and service IDs as resources, but not direct URLs to external APIs for route definitions.
      https://symfony.com/doc/current/routing.html#importing-routing-resources

  -
    question: >
      What happens if you define two routes with identical paths and HTTP methods, but different names, and no explicit priority?
    answers:
      - { value: "The route defined first will be matched.", correct: true }
      - { value: "Symfony will throw an exception during cache warm-up.", correct: false }
      - { value: "The route with the alphabetically first name will be matched.", correct: false }
      - { value: "Neither route will be matched, resulting in a 404.", correct: false }
    help: |
      When routes have the same path and methods, the order in which they are loaded (and thus defined) determines which one is matched first if no explicit priority is set.
      https://symfony.com/doc/current/routing.html#route-priority

  -
    question: >
      Which component is responsible for matching an incoming request URL to a defined route in Symfony?
    answers:
      - { value: "`UrlMatcher`", correct: true }
      - { value: "`UrlGenerator`", correct: false }
      - { value: "`RouteLoader`", correct: false }
      - { value: "`RequestContext`", correct: false }
    help: |
      The `UrlMatcher` is used to match an incoming URL against the registered routes.
      https://symfony.com/doc/current/create_framework/routing.html#matching-a-url

  -
    question: >
      What is the purpose of `Symfony\Component\Routing\RequestContext` in the routing process?
    answers:
      - { value: "It holds fundamental information about the current request, such as the host, scheme, and HTTP method, for route matching.", correct: true }
      - { value: "It stores the matched route parameters after a successful match.", correct: false }
      - { value: "It defines the default values for route parameters.", correct: false }
      - { value: "It is used to generate URLs based on route names.", correct: false }
    help: |
      `RequestContext` encapsulates information about the current request, which is essential for the `UrlMatcher` to perform its task.
      https://symfony.com/doc/current/create_framework/routing.html#matching-a-url

  -
    question: >
      When defining routes in a PHP file using `RoutingConfigurator`, how do you specify the controller for a route?
    answers:
      - { value: "Using the `controller()` method with an array `[ControllerClass::class, 'methodName']`.", correct: true }
      - { value: "Using the `action()` method with a string `ControllerClass::methodName`.", correct: false }
      - { value: "By setting a `_controller` default option.", correct: false }
      - { value: "By passing the controller as the third argument to the `add()` method.", correct: false }
    help: |
      The `controller()` method is used to define the controller for a route in the PHP routing configurator.
      https://symfony.com/doc/current/routing.html#defining-routes-in-php-files

  -
    question: >
      If a controller method implements the `__invoke()` method, how can you define its route in YAML without specifying the method name?
    answers:
      - { value: "By simply providing the controller class name as the `controller` value.", correct: true }
      - { value: "By appending `::__invoke` to the controller class name.", correct: false }
      - { value: "By setting a `_method: __invoke` default.", correct: false }
      - { value: "This is not supported; the method name is always required.", correct: false }
    help: |
      If the action is implemented as the `__invoke()` method of the controller class, you can skip the `::method_name` part in the controller definition.
      https://symfony.com/doc/current/routing.html#defining-routes-in-yaml

  -
    question: >
      What is the primary purpose of the `env` option in a Symfony route definition?
    answers:
      - { value: "To make a route active only in a specific Symfony environment (e.g., `dev`, `prod`).", correct: true }
      - { value: "To define environment variables that are accessible within the route's controller.", correct: false }
      - { value: "To set the default environment for URL generation.", correct: false }
      - { value: "To specify the server environment where the route should be deployed.", correct: false }
    help: |
      The `env` option allows you to restrict a route's availability to one or more specific Symfony environments.
      https://symfony.com/doc/current/routing.html#environment-specific-routes

  -
    question: |
      Given the following YAML configuration:

      ```yaml
      # config/routes.yaml
      tools:
          path:       /tools
          controller: App\Controller\DefaultController::developerTools
          env:        dev
      ```

      Under which environment(s) will the `/tools` route be accessible?
    answers:
      - { value: "Only in the `dev` environment.", correct: true }
      - { value: "In all environments except `prod`.", correct: false }
      - { value: "In `dev` and `test` environments.", correct: false }
      - { value: "In all environments.", correct: false }
    help: |
      The `env: dev` option explicitly restricts the route to only be active in the `dev` environment.
      https://symfony.com/doc/current/routing.html#environment-specific-routes

  -
    question: >
      Which of the following is a valid way to define a route that matches both `GET` and `POST` requests using PHP attributes?
    answers:
      - { value: "```php\n#[Route('/submit', methods: ['GET', 'POST'])]\n```", correct: true }
      - { value: "```php\n#[Route('/submit', method: ['GET', 'POST'])]\n```", correct: false }
      - { value: "```php\n#[Route('/submit', allow: ['GET', 'POST'])]\n```", correct: false }
      - { value: "```php\n#[Route('/submit', http_methods: ['GET', 'POST'])]\n```", correct: false }
    help: |
      The `methods` option in the `#[Route]` attribute accepts an array of allowed HTTP methods.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      What is the primary role of `Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader`?
    answers:
      - { value: "It is the main loader responsible for delegating route loading to specialized loaders (e.g., for YAML, XML, attributes).", correct: true }
      - { value: "It loads all routes directly from the cache.", correct: false }
      - { value: "It handles the compilation of routes into an optimized format.", correct: false }
      - { value: "It is responsible for matching URLs to routes.", correct: false }
    help: |
      The `DelegatingLoader` acts as a central point for loading routes by delegating to specific loaders based on the resource type.
      https://symfony.com/doc/current/routing/custom_route_loader.html#the-routing-component-api

  -
    question: >
      Which method of `Symfony\Component\Config\Loader\LoaderInterface` is used to check if a loader supports a given resource and type?
    answers:
      - { value: "`supports(resource: string, type: string): bool`", correct: true }
      - { value: "`canLoad(resource: string, type: string): bool`", correct: false }
      - { value: "`isSupported(resource: string, type: string): bool`", correct: false }
      - { value: "`check(resource: string, type: string): bool`", correct: false }
    help: |
      The `supports()` method determines if a loader can handle a specific resource and type.
      https://symfony.com/doc/current/routing/custom_route_loader.html#the-routing-component-api

  -
    question: >
      What is the return type of the `load()` method of `Symfony\Component\Config\Loader\LoaderInterface`?
    answers:
      - { value: "`Symfony\\Component\\Routing\\RouteCollection`", correct: true }
      - { value: "`array`", correct: false }
      - { value: "`Symfony\\Component\\Routing\\Route`", correct: false }
      - { value: "`void`", correct: false }
    help: |
      The `load()` method is expected to return a `RouteCollection` containing the loaded routes.
      https://symfony.com/doc/current/routing/custom_route_loader.html#the-routing-component-api

  -
    question: >
      Which class represents a single route definition in the Symfony Routing component?
    answers:
      - { value: "`Symfony\\Component\\Routing\\Route`", correct: true }
      - { value: "`Symfony\\Component\\Routing\\RouteDefinition`", correct: false }
      - { value: "`Symfony\\Component\\Routing\\CompiledRoute`", correct: false }
      - { value: "`Symfony\\Component\\Routing\\RouteConfig`", correct: false }
    help: |
      `Symfony\Component\Routing\Route` is the class that encapsulates all information about a single route.
      https://symfony.com/doc/current/routing/custom_route_loader.html#the-routing-component-api

  -
    question: >
      When importing routes using `RoutingConfigurator`, how can you exclude specific files or subdirectories from being loaded (e.g., `Debug*Controller.php`)?
    answers:
      - { value: "By providing a string or an array of PHP glob patterns to the `exclude` option.", correct: true }
      - { value: "By using a `filter` option with a callback function.", correct: false }
      - { value: "By manually specifying each file to include instead of excluding.", correct: false }
      - { value: "Excluding specific files is not supported during import.", correct: false }
    help: |
      The `exclude` option allows you to specify glob patterns for files or subdirectories to be ignored during route import.
      https://symfony.com/doc/current/routing.html#importing-routing-resources

  -
    question: >
      What is the effect of setting `trailing_slash_on_root: false` on an imported route group with a prefix like `/blog`?
    answers:
      - { value: "An imported route with an empty URL will become `/blog` instead of `/blog/`.", correct: true }
      - { value: "It removes trailing slashes from all generated URLs within the group.", correct: false }
      - { value: "It forces all URLs within the group to have a trailing slash.", correct: false }
      - { value: "It only affects the root path `/` of the application, not prefixed routes.", correct: false }
    help: |
      The `trailing_slash_on_root: false` option specifically controls whether an empty URL within a prefixed group results in a trailing slash.
      https://symfony.com/doc/current/routing.html#route-groups

  -
    question: >
      Which of the following is a valid way to define a route with an inline requirement that the `id` parameter must be an integer?
    answers:
      - { value: "```php\n#[Route('/blog/{id<\d+>}', name: 'blog_post')]\n```", correct: true }
      - { value: "```php\n#[Route('/blog/{id:int}', name: 'blog_post')]\n```", correct: false }
      - { value: "```php\n#[Route('/blog/{id}(int)', name: 'blog_post')]\n```", correct: false }
      - { value: "```php\n#[Route('/blog/{id} where id is integer', name: 'blog_post')]\n```", correct: false }
    help: |
      Inline requirements are defined using angle brackets `<>` after the parameter name, containing the regular expression.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      When defining a route with a dynamic parameter like `{slug}`, how does Symfony typically pass the value of this parameter to the controller method?
    answers:
      - { value: "As an argument to the controller method, with the same name as the parameter.", correct: true }
      - { value: "As a query parameter in the `Request` object.", correct: false }
      - { value: "As an attribute in the `Request` object, accessible via `getAttribute()`.", correct: false }
      - { value: "It's automatically injected into a service named `slug_parameter`.", correct: false }
    help: |
      Symfony's parameter converter automatically maps route parameters to controller method arguments with matching names.
      https://symfony.com/doc/current/routing.html#route-parameters

  -
    question: >
      Which of the following is a valid way to retrieve the current route's name from the `Request` object within a Symfony controller?
    answers:
      - { value: "`$request->attributes->get('_route')`", correct: true }
      - { value: "`$request->get('_route_name')`", correct: false }
      - { value: "`$request->getRoute()`", correct: false }
      - { value: "`$request->routeName`", correct: false }
    help: |
      The route name is stored as an attribute named `_route` in the `Request` object's attribute bag.
      https://symfony.com/doc/current/routing.html#accessing-route-name-and-parameters-from-the-request

  -
    question: >
      To retrieve all matched route parameters from the `Request` object, which attribute should you access?
    answers:
      - { value: "`$request->attributes->get('_route_params')`", correct: true }
      - { value: "`$request->query->all()`", correct: false }
      - { value: "`$request->request->all()`", correct: false }
      - { value: "`$request->getRouteParameters()`", correct: false }
    help: |
      The matched route parameters are stored in the `_route_params` attribute of the `Request` object.
      https://symfony.com/doc/current/routing.html#accessing-route-name-and-parameters-from-the-request

  -
    question: >
      What happens if you try to generate a URL for a route that has mandatory parameters but you don't provide values for them?
    answers:
      - { value: "A `Symfony\\Component\\Routing\\Exception\\MissingMandatoryParametersException` or similar exception will be thrown.", correct: true }
      - { value: "The parameters will be omitted from the URL, leading to an invalid URL.", correct: false }
      - { value: "Symfony will attempt to guess the missing parameters.", correct: false }
      - { value: "The URL will be generated with empty values for the missing parameters.", correct: false }
    help: |
      If mandatory parameters are missing when generating a URL, Symfony will throw an exception indicating the missing parameters.
      https://symfony.com/doc/current/routing.html#troubleshooting

  -
    question: >
      Which of the following describes the `_fragment` special route parameter?
    answers:
      - { value: "Used to set the fragment identifier, the optional last part of a URL that starts with a `#` character.", correct: true }
      - { value: "Used to define a URL fragment for AJAX requests.", correct: false }
      - { value: "Used to specify a Twig template fragment to render.", correct: false }
      - { value: "Used for internal routing optimization related to URL fragments.", correct: false }
    help: |
      The `_fragment` parameter corresponds to the part of a URL after the `#` character.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      When configuring host-based routing, how do you define a dynamic subdomain (e.g., `blog.example.com` where `blog` is a variable)?
    answers:
      - { value: "By enclosing the dynamic part in curly braces within the `host` option, e.g., `{subdomain}.example.com`.", correct: true }
      - { value: "By using a wildcard `*` in the `host` option, e.g., `*.example.com`.", correct: false }
      - { value: "By defining a `subdomain` requirement on the route.", correct: false }
      - { value: "Dynamic subdomains are not directly supported in Symfony routing.", correct: false }
    help: |
      Dynamic parts of a hostname are treated as route parameters and are enclosed in curly braces.
      https://symfony.com/doc/current/routing.html#host-based-routing

  -
    question: >
      What is the primary benefit of using `#[AsRoutingConditionService]` or tagging a service with `routing.condition_service`?
    answers:
      - { value: "It allows the service to be used within routing conditions via the `service()` Expression Language function.", correct: true }
      - { value: "It automatically registers the service as a route loader.", correct: false }
      - { value: "It marks the service as a high-priority service for route matching.", correct: false }
      - { value: "It enables autowiring of routing-related dependencies into the service.", correct: false }
    help: |
      Services tagged with `routing.condition_service` (or using the `#[AsRoutingConditionService]` attribute) can be accessed and used within routing conditions.
      https://symfony.com/doc/current/routing.html#expression-language-variables-and-functions

  -
    question: >
      Which of the following is a valid use case for the `service()` function in a routing condition?
    answers:
      - { value: "Calling a custom service method to evaluate complex business logic for route matching.", correct: true }
      - { value: "Injecting a service directly into the controller from the routing configuration.", correct: false }
      - { value: "Defining a service as the controller for a route.", correct: false }
      - { value: "Retrieving a service parameter from the container.", correct: false }
    help: |
      The `service()` function allows you to execute methods of a registered service within your routing conditions.
      https://symfony.com/doc/current/routing.html#expression-language-variables-and-functions

  -
    question: >
      What is the correct way to define a route that only accepts `GET` requests in YAML?
    answers:
      - { value: "```yaml\nmy_route:\n    path: /my-path\n    controller: App\\Controller\\MyController::index\n    methods: [GET]\n```", correct: true }
      - { value: "```yaml\nmy_route:\n    path: /my-path\n    controller: App\\Controller\\MyController::index\n    http_method: GET\n```", correct: false }
      - { value: "```yaml\nmy_route:\n    path: /my-path\n    controller: App\\Controller\\MyController::index\n    condition: \"context.getMethod() == 'GET'\"\n```", correct: true }
      - { value: "```yaml\nmy_route:\n    path: /my-path\n    controller: App\\Controller\\MyController::index\n    accepts: GET\n```", correct: false }
    help: |
      The `methods` option or a `condition` using `context.getMethod()` can be used to restrict routes by HTTP method.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      When debugging routes, what information does `php bin/console debug:router --show-aliases` provide in addition to the standard route list?
    answers:
      - { value: "It displays all defined route aliases.", correct: true }
      - { value: "It shows the original route name that each alias points to.", correct: false }
      - { value: "It lists only routes that have aliases.", correct: false }
      - { value: "It provides a count of how many aliases exist for each route.", correct: false }
    help: |
      The `--show-aliases` option explicitly includes route aliases in the output of `debug:router`.
      https://symfony.com/doc/current/routing.html#filtering-routes

  -
    question: >
      What is the purpose of the `UrlGenerator` class in the Symfony Routing component?
    answers:
      - { value: "To generate URLs based on a given route name and parameters.", correct: true }
      - { value: "To match incoming URLs to routes.", correct: false }
      - { value: "To load route definitions from configuration files.", correct: false }
      - { value: "To compile routes for performance optimization.", correct: false }
    help: |
      The `UrlGenerator` is responsible for constructing URLs from route definitions.
      https://symfony.com/doc/current/create_framework/routing.html#generating-urls

  -
    question: >
      What is the main advantage of defining routes using PHP attributes directly in controllers compared to YAML or XML files?
    answers:
      - { value: "Routes are defined alongside the controller logic, improving discoverability and reducing context switching.", correct: true }
      - { value: "PHP attributes offer better performance for route matching.", correct: false }
      - { value: "It eliminates the need for routing cache warm-up.", correct: false }
      - { value: "PHP attributes support more advanced routing features not available in other formats.", correct: false }
    help: |
      Defining routes with PHP attributes keeps the route definition close to the code that handles it, which can improve developer experience.
      https://symfony.com/doc/current/routing.html#defining-routes-in-controllers

  -
    question: >
      Which of the following is the correct YAML configuration to enable attribute-based routing by scanning the `src/Controller/` directory?
    answers:
      - { value: "```yaml\ncontrollers:\n    resource:\n        path: ../../src/Controller/\n        namespace: App\\Controller\n    type: attribute\n```", correct: true }
      - { value: "```yaml\nroutes:\n    attributes:\n        resource: ../../src/Controller/\n        namespace: App\\Controller\n```", correct: false }
      - { value: "```yaml\nimport:\n    resource: ../../src/Controller/\n    type: attribute\n```", correct: false }
      - { value: "```yaml\nattribute_routes:\n    path: ../../src/Controller/\n    loader: attribute\n```", correct: false }
    help: |
      The `resource` and `type: attribute` keys are used to configure attribute-based routing in YAML.
      https://symfony.com/doc/current/routing.html#enabling-attribute-based-routing

  -
    question: >
      What is the purpose of the `_route` attribute on the `Request` object after a successful route match?
    answers:
      - { value: "It contains the name of the matched route.", correct: true }
      - { value: "It contains the full path of the matched route.", correct: false }
      - { value: "It indicates the type of the matched route (e.g., 'attribute', 'yaml').", correct: false }
      - { value: "It stores the controller callable for the matched route.", correct: false }
    help: |
      The `_route` attribute stores the name of the route that was successfully matched.
      https://symfony.com/doc/current/routing.html#accessing-route-name-and-parameters-from-the-request

  -
    question: >
      When importing routes with a `namePrefix` (e.g., `blog_`), and an imported route has an empty name, what will be its final name?
    answers:
      - { value: "It will inherit only the `namePrefix` (e.g., `blog_`).", correct: true }
      - { value: "It will remain an empty string.", correct: false }
      - { value: "Symfony will generate a unique name for it.", correct: false }
      - { value: "An error will occur because route names cannot be empty.", correct: false }
    help: |
      The `namePrefix` is prepended to the names of all imported routes. If an imported route has no explicit name, the prefix becomes its name.
      https://symfony.com/doc/current/routing.html#route-groups

  -
    question: >
      Which of the following is a valid way to define a route that matches multiple HTTP methods in PHP attributes?
    answers:
      - { value: "```php\n#[Route('/api/data', methods: ['GET', 'POST', 'PUT'])]\n```", correct: true }
      - { value: "```php\n#[Route('/api/data', method: 'ANY')]\n```", correct: false }
      - { value: "```php\n#[Route('/api/data', methods: 'GET|POST|PUT')]\n```", correct: false }
      - { value: "```php\n#[Route('/api/data', http_methods: ['GET', 'POST', 'PUT'])]\n```", correct: false }
    help: |
      The `methods` option accepts an array of strings, each representing an allowed HTTP method.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      What is the correct way to define a route with an optional parameter `page` that defaults to `1` in PHP attributes?
    answers:
      - { value: "```php\n#[Route('/blog/{page<\d+>?1}', name: 'blog_list')]\n```", correct: true }
      - { value: "```php\n#[Route('/blog/{page}', name: 'blog_list', defaults: ['page' => 1])]\n```", correct: true }
      - { value: "```php\n#[Route('/blog/{page?}', name: 'blog_list', default_page: 1)]\n```", correct: false }
      - { value: "```php\n#[Route('/blog/{page}', name: 'blog_list', optional: ['page' => 1])]\n```", correct: false }
    help: |
      Optional parameters can be defined with a default value using the `defaults` option or inline with `?` and the default value.
      https://symfony.com/doc/current/routing.html#setting-default-values-for-parameters

  -
    question: >
      When using `RedirectController` to redirect to an external URL, which `defaults` key should be used to specify the target URL?
    answers:
      - { value: "`path`", correct: true }
      - { value: "`url`", correct: false }
      - { value: "`target`", correct: false }
      - { value: "`redirect_url`", correct: false }
    help: |
      The `path` default key is used to specify the target path or absolute URL for redirection.
      https://symfony.com/doc/current/routing.html#redirecting-routes

  -
    question: >
      What is the impact of defining a route with `stateless: true` on the Symfony session?
    answers:
      - { value: "The session will not be started or used when matching this route, improving caching potential.", correct: true }
      - { value: "The session will be automatically destroyed after the request is handled.", correct: false }
      - { value: "It forces the session to be stored in a stateless manner (e.g., in a cookie).", correct: false }
      - { value: "It disables session management for the entire application.", correct: false }
    help: |
      Marking a route as stateless prevents Symfony from starting or using the session during the request matching process for that route.
      https://symfony.com/doc/current/routing.html#stateless-routes

  -
    question: >
      Which of the following is a valid way to define a route for `/blog/{page}` where `page` must be an integer, using PHP configurator?
    answers:
      - { value: "```php\n$routes->add('blog_list', '/blog/{page}')\n    ->controller([App\\Controller\\BlogController::class, 'list'])\n    ->requirements(['page' => '\\d+'])\n;\n```", correct: true }
      - { value: "```php\n$routes->add('blog_list', '/blog/{page<\\d+>}')\n    ->controller([App\\Controller\\BlogController::class, 'list'])\n;\n```", correct: true }
      - { value: "```php\n$routes->add('blog_list', '/blog/{page}')\n    ->controller([App\\Controller\\BlogController::class, 'list'])\n    ->where('page', '\\d+')\n;\n```", correct: false }
      - { value: "```php\n$routes->add('blog_list', '/blog/{page}')\n    ->controller([App\\Controller\\BlogController::class, 'list'])\n    ->regex('page', '\\d+')\n;\n```", correct: false }
    help: |
      The `requirements()` method or inline regex syntax can be used to define parameter requirements in the PHP configurator.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      What is the correct way to import routes from a controller directory and apply a URL prefix `/admin` and a name prefix `admin_` using YAML?
    answers:
      - { value: "```yaml\nadmin_controllers:\n    resource: '../../src/Controller/'\n    type: attribute\n    prefix: '/admin'\n    name_prefix: 'admin_'\n```", correct: true }
      - { value: "```yaml\nadmin_routes:\n    import: '../../src/Controller/'\n    type: attribute\n    url_prefix: '/admin'\n    route_name_prefix: 'admin_'\n```", correct: false }
      - { value: "```yaml\n- resource: '../../src/Controller/'\n  type: attribute\n  prefix: '/admin'\n  name_prefix: 'admin_'\n```", correct: false }
      - { value: "```yaml\nadmin:\n    path: /admin\n    name: admin_\n    children:\n        resource: '../../src/Controller/'\n        type: attribute\n```", correct: false }
    help: |
      The `prefix` and `name_prefix` options are used directly on the import statement in YAML to apply these settings to all imported routes.
      https://symfony.com/doc/current/routing.html#route-groups

  -
    question: >
      Which of the following is a valid way to define a route that matches any HTTP method?
    answers:
      - { value: "By omitting the `methods` option in the route definition.", correct: true }
      - { value: "By setting `methods: ['ANY']`.", correct: false }
      - { value: "By setting `methods: []`.", correct: false }
      - { value: "By setting `methods: 'ALL'`.", correct: false }
    help: |
      If no `methods` are specified, the route will match any HTTP method.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      What is the significance of the `_route_params` attribute on the `Request` object after a route has been matched?
    answers:
      - { value: "It is an array containing all parameters extracted from the matched URL path.", correct: true }
      - { value: "It contains all query parameters from the request.", correct: false }
      - { value: "It lists all parameters defined in the route's `defaults`.", correct: false }
      - { value: "It's an object representing the route's configuration.", correct: false }
    help: |
      The `_route_params` attribute holds the key-value pairs of all parameters that were matched from the URL.
      https://symfony.com/doc/current/routing.html#accessing-route-name-and-parameters-from-the-request

  -
    question: >
      When generating a URL, what is the difference between `UrlGeneratorInterface::ABSOLUTE_PATH` and `UrlGeneratorInterface::RELATIVE_PATH`?
    answers:
      - { value: "`ABSOLUTE_PATH` generates a path starting from the web root (e.g., `/blog/post`), while `RELATIVE_PATH` generates a path relative to the current request's path.", correct: true }
      - { value: "`ABSOLUTE_PATH` includes the scheme and host, while `RELATIVE_PATH` only includes the path.", correct: false }
      - { value: "`ABSOLUTE_PATH` is for internal redirects, `RELATIVE_PATH` is for external links.", correct: false }
      - { value: "There is no `RELATIVE_PATH` constant; only `ABSOLUTE_PATH` exists.", correct: false }
    help: |
      `ABSOLUTE_PATH` generates a path from the root, while `RELATIVE_PATH` generates a path relative to the current URL.
      https://symfony.com/doc/current/routing.html#generating-urls-in-controllers

  -
    question: >
      Which of the following scenarios would typically lead to a `Symfony\Component\Routing\Exception\ResourceNotFoundException`?
    answers:
      - { value: "A request URL does not match any defined route.", correct: true }
      - { value: "A controller method argument is missing a value.", correct: false }
      - { value: "A route has a syntax error in its definition.", correct: false }
      - { value: "A service required by a controller cannot be found.", correct: false }
    help: |
      `ResourceNotFoundException` is thrown when the `UrlMatcher` cannot find a matching route for the incoming request path.
      https://symfony.com/doc/current/create_framework/routing.html#matching-a-url

  -
    question: >
      What is the purpose of the `#[Route]` attribute on a Symfony controller class (as opposed to a method)?
    answers:
      - { value: "To define common configuration (prefix, name prefix, requirements) for all routes within that controller.", correct: true }
      - { value: "To specify the default route for the controller.", correct: false }
      - { value: "To mark the controller as a routing entry point.", correct: false }
      - { value: "It is deprecated in Symfony 7.", correct: false }
    help: |
      The `#[Route]` attribute on a class allows for grouping routes and applying shared settings.
      https://symfony.com/doc/current/routing.html#route-groups

  -
    question: >
      When defining localized routes, how can you specify different paths for different locales for the same route name in PHP attributes?
    answers:
      - { value: "By providing an associative array to the `path` option, where keys are locales and values are the paths.", correct: true }
      - { value: "By creating separate `#[Route]` attributes for each locale.", correct: false }
      - { value: "By using a `locale_path` option.", correct: false }
      - { value: "Localized paths are not directly supported in PHP attributes.", correct: false }
    help: |
      The `path` option can take an array mapping locales to their specific paths for localized routes.
      https://symfony.com/doc/current/routing.html#localized-routes

  -
    question: >
      What is the primary reason for using `php bin/console debug:router` during development?
    answers:
      - { value: "To inspect the routing configuration and verify that routes are correctly defined and loaded.", correct: true }
      - { value: "To optimize the routing cache for production deployment.", correct: false }
      - { value: "To test the performance of route matching.", correct: false }
      - { value: "To generate a static HTML file of all application routes.", correct: false }
    help: |
      `debug:router` is an invaluable tool for understanding and troubleshooting routing in a Symfony application.
      https://symfony.com/doc/current/routing.html#listing-all-routes

  -
    question: >
      Which of the following is a valid way to define a route that matches only if the request is made from `www.example.com` in YAML?
    answers:
      - { value: "```yaml\nhomepage:\n    path: /\n    controller: App\\Controller\\MainController::homepage\n    host: www.example.com\n```", correct: true }
      - { value: "```yaml\nhomepage:\n    path: /\n    controller: App\\Controller\\MainController::homepage\n    domain: www.example.com\n```", correct: false }
      - { value: "```yaml\nhomepage:\n    path: /\n    controller: App\\Controller\\MainController::homepage\n    requirements:\n        _host: www.example.com\n```", correct: false }
      - { value: "```yaml\nhomepage:\n    path: /\n    controller: App\\Controller\\MainController::homepage\n    condition: \"context.getHost() == 'www.example.com'\"\n```", correct: true }
    help: |
      The `host` option or a `condition` using `context.getHost()` can be used for host-based routing.
      https://symfony.com/doc/current/routing.html#host-based-routing

  -
    question: >
      What is the purpose of the `#[AsCommand]` attribute in a Symfony console command?
    answers:
      - { value: "To define the command's name, description, and other options directly in the class.", correct: true }
      - { value: "To inject services into the command.", correct: false }
      - { value: "To execute the command automatically.", correct: false }
      - { value: "To link the command to a specific controller.", correct: false }
    help: |
      The `#[AsCommand]` attribute is used to configure the command's name, description, and other options directly in the class.
      https://symfony.com/doc/current/console.html#configuring-the-command

  -
    question: >
      Which of the following correctly configures the HTTP client to use HTTP/2?
    answers:
      - { value: "Set the `http_version` option to \"2.0\" in the client configuration.", correct: true }
      - { value: "Set the `version` option to '2.0' in the client configuration.", correct: false }
      - { value: "Enable the `http2` flag in `framework.yaml`.", correct: false }
    help: |
      To use HTTP/2, you must set the `http_version` option to `2.0` when creating the HTTP client.
      https://symfony.com/doc/current/http_client.html#http-2-support

  -
    question: >
      What is the purpose of `Symfony\Bundle\FrameworkBundle\Routing\RouteLoaderInterface`?
    answers:
      - { value: "It is an interface to be implemented by classes that load routes, typically for autoconfiguration.", correct: true }
      - { value: "It defines the contract for loading routes from external sources like databases.", correct: false }
      - { value: "It's a base class for all Symfony route loaders.", correct: false }
      - { value: "It's used to define custom route compilation logic.", correct: false }
    help: |
      `RouteLoaderInterface` is specifically for classes that load routes, often used in conjunction with autoconfiguration.
      https://symfony.com/doc/current/routing/custom_route_loader.html#the-routing-component-api

  -
    question: >
      When defining a route with a dynamic parameter, what is the default behavior regarding trailing slashes?
    answers:
      - { value: "Symfony redirects URLs with a trailing slash to the version without it, and vice-versa, to ensure a canonical URL.", correct: true }
      - { value: "Trailing slashes are always required for dynamic parameters.", correct: false }
      - { value: "Trailing slashes are always ignored for dynamic parameters.", correct: false }
      - { value: "It depends on the web server configuration.", correct: false }
    help: |
      Symfony handles trailing slashes to ensure canonical URLs, often redirecting to the version without a trailing slash by default for dynamic routes.
      https://symfony.com/doc/current/routing.html#trailing-slashes

  -
    question: >
      What is the purpose of the `#[Route]` attribute's `priority` option?
    answers:
      - { value: "To explicitly control the order in which Symfony evaluates routes, with higher values being matched first.", correct: true }
      - { value: "To define the importance of the route for caching mechanisms.", correct: false }
      - { value: "To set the HTTP status code for the route's response.", correct: false }
      - { value: "To indicate whether the route should be included in `debug:router` output.", correct: false }
    help: |
      The `priority` option is crucial for resolving conflicts between routes with similar patterns, ensuring more specific routes are matched first.
      https://symfony.com/doc/current/routing.html#route-priority

  -
    question: >
      How can you define a route that only matches if the request scheme is `HTTPS` in PHP attributes?
    answers:
      - { value: "```php\n#[Route('/secure', schemes: ['https'])]\n```", correct: true }
      - { value: "```php\n#[Route('/secure', scheme: 'https')]\n```", correct: false }
      - { value: "```php\n#[Route('/secure', condition: \"context.getScheme() == 'https'\")]\n```", correct: true }
      - { value: "```php\n#[Route('/secure', secure: true)]\n```", correct: false }
    help: |
      The `schemes` option or a `condition` using `context.getScheme()` can be used to enforce a specific scheme.
      https://symfony.com/doc/current/routing.html#scheme-requirements

  -
    question: >
      What is the primary advantage of using `RoutingConfigurator` in PHP files for route definition compared to direct `RouteCollection` manipulation?
    answers:
      - { value: "It provides a fluent interface and better readability for defining routes, especially for complex configurations.", correct: true }
      - { value: "It offers significantly better performance for route loading.", correct: false }
      - { value: "It allows for dynamic route generation at runtime.", correct: false }
      - { value: "It is the only way to define routes with conditional logic in PHP.", correct: false }
    help: |
      `RoutingConfigurator` simplifies route definition with its fluent API, making PHP routing configuration more readable and maintainable.
      https://symfony.com/doc/current/routing.html#defining-routes-in-php-files

  -
    question: >
      Which of the following is a valid way to define a route that accepts both `html` and `xml` formats, with `html` as the default, in YAML?
    answers:
      - { value: "```yaml\narticle_search:\n    path: /articles/search.{_format}\n    controller: App\\Controller\\ArticleController::search\n    format: html\n    requirements:\n        _format: html|xml\n```", correct: true }
      - { value: "```yaml\narticle_search:\n    path: /articles/search.{_format}\n    controller: App\\Controller\\ArticleController::search\n    defaults:\n        _format: html\n    formats: [html, xml]\n```", correct: false }
      - { value: "```yaml\narticle_search:\n    path: /articles/search.{_format<html|xml>}\n    controller: App\\Controller\\ArticleController::search\n    default_format: html\n```", correct: false }
      - { value: "```yaml\narticle_search:\n    path: /articles/search\n    controller: App\\Controller\\ArticleController::search\n    _format:\n        default: html\n        allowed: [html, xml]\n```", correct: false }
    help: |
      The `format` option sets the default, and `requirements` defines the allowed formats for the `_format` parameter.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      What is the correct way to generate a URL for a route named `product_show` with an `id` parameter of `123` in a Twig template?
    answers:
      - { value: "`{{ path('product_show', {id: 123}) }}`", correct: true }
      - { value: "`{{ url('product_show', {id: 123}) }}`", correct: false }
      - { value: "`{{ route('product_show', {id: 123}) }}`", correct: false }
      - { value: "`{{ link('product_show', {id: 123}) }}`", correct: false }
    help: |
      The `path()` function in Twig is used to generate relative URLs, and `url()` for absolute URLs.
      https://symfony.com/doc/current/routing.html#generating-urls-in-templates

  -
    question: >
      When using `router:match` command, what does the `_controller` value in the output indicate?
    answers:
      - { value: "The fully qualified class name and method that will be executed for the matched route.", correct: true }
      - { value: "The name of the controller service.", correct: false }
      - { value: "The path to the controller file.", correct: false }
      - { value: "The HTTP method of the controller.", correct: false }
    help: |
      The `_controller` value in the `router:match` output shows the callable that Symfony will execute.
      https://symfony.com/doc/current/routing.html#matching-a-url

  -
    question: >
      What is the primary reason for using `UrlGeneratorInterface::NETWORK_PATH` when generating URLs?
    answers:
      - { value: "To generate a URL relative to the current host, without including the scheme (e.g., `//example.com/path`).", correct: true }
      - { value: "To generate a URL that can be used across different networks.", correct: false }
      - { value: "To generate a URL that is optimized for network performance.", correct: false }
      - { value: "It's a deprecated constant; use `ABSOLUTE_URL` instead.", correct: false }
    help: |
      `NETWORK_PATH` generates a URL that is scheme-relative, useful for content that can be served over both HTTP and HTTPS.
      https://symfony.com/doc/current/routing.html#generating-urls-in-controllers

  -
    question: >
      Which of the following is a valid way to define a route that matches any host in Symfony?
    answers:
      - { value: "By omitting the `host` option in the route definition.", correct: true }
      - { value: "By setting `host: 'ANY'`.", correct: false }
      - { value: "By setting `host: '*'`.", correct: false }
      - { value: "By setting `host: '0.0.0.0'`.", correct: false }
    help: |
      If no `host` is specified, the route will match any host.
      https://symfony.com/doc/current/routing.html#host-based-routing

  -
    question: >
      What is the purpose of the `_scheme` attribute on the `Request` object after a route has been matched?
    answers:
      - { value: "It contains the scheme (e.g., `http` or `https`) used for the current request.", correct: true }
      - { value: "It defines the required scheme for the matched route.", correct: false }
      - { value: "It indicates the default scheme for URL generation.", correct: false }
      - { value: "It's used to force a redirect to a specific scheme.", correct: false }
    help: |
      The `_scheme` attribute reflects the scheme of the incoming request.
      https://symfony.com/doc/current/routing.html#scheme-requirements

  -
    question: >
      What is the correct way to define a route with a default value for the `page` parameter to `1` in PHP configurator?
    answers:
      - { value: "```php\n$routes->add('blog_list', '/blog/{page}')\n    ->controller([App\\Controller\\BlogController::class, 'list'])\n    ->defaults(['page' => 1])\n;\n```", correct: true }
      - { value: "```php\n$routes->add('blog_list', '/blog/{page?1}')\n    ->controller([App\\Controller\\BlogController::class, 'list'])\n;\n```", correct: true }
      - { value: "```php\n$routes->add('blog_list', '/blog/{page}')\n    ->controller([App\\Controller\\BlogController::class, 'list'])\n    ->setDefault('page', 1)\n;\n```", correct: false }
      - { value: "```php\n$routes->add('blog_list', '/blog/{page}')\n    ->controller([App\\Controller\\BlogController::class, 'list'])\n    ->options(['default_page' => 1])\n;\n```", correct: false }
    help: |
      The `defaults()` method or inline default value syntax can be used to set default values for route parameters in the PHP configurator.
      https://symfony.com/doc/current/routing.html#setting-default-values-for-parameters

  -
    question: >
      When importing routes from a controller directory using PHP configurator, how can you apply a global requirement that the `_locale` parameter must be `en`, `es`, or `fr`?
    answers:
      - { value: "```php\n$routes->import('../../src/Controller/', 'attribute')\n    ->requirements(['_locale' => 'en|es|fr'])\n;\n```", correct: true }
      - { value: "```php\n$routes->import('../../src/Controller/', 'attribute')\n    ->setRequirement('_locale', 'en|es|fr')\n;\n```", correct: false }
      - { value: "```php\n$routes->import('../../src/Controller/', 'attribute')\n    ->where('_locale', 'en|es|fr')\n;\n```", correct: false }
      - { value: "```php\n$routes->import('../../src/Controller/', 'attribute')\n    ->localeRequirements('en|es|fr')\n;\n```", correct: false }
    help: |
      The `requirements()` method on the imported route collection allows applying global requirements.
      https://symfony.com/doc/current/routing.html#route-groups

  -
    question: >
      What is the primary function of `Symfony\Component\Routing\RouteCollection`?
    answers:
      - { value: "It is a container for multiple `Route` objects.", correct: true }
      - { value: "It defines the logic for matching URLs to routes.", correct: false }
      - { value: "It handles the caching of route definitions.", correct: false }
      - { value: "It is responsible for generating URLs from route names.", correct: false }
    help: |
      `RouteCollection` is a fundamental class that aggregates individual `Route` objects.
      https://symfony.com/doc/current/routing/custom_route_loader.html#the-routing-component-api

  -
    question: >
      When defining a route with a `condition` using Expression Language, which variable provides access to the `Symfony\Component\Routing\RequestContext` object?
    answers:
      - { value: "`context`", correct: true }
      - { value: "`request_context`", correct: false }
      - { value: "`routing_context`", correct: false }
      - { value: "`this`", correct: false }
    help: |
      The `context` variable in Expression Language refers to the `RequestContext` instance.
      https://symfony.com/doc/current/routing.html#expression-language-variables-and-functions

  -
    question: >
      What is the correct way to define a route alias named `product_details` that points to an existing route named `product_show` using PHP configurator?
    answers:
      - { value: "```php\n$routes->alias('product_details', 'product_show');\n```", correct: true }
      - { value: "```php\n$routes->addAlias('product_details', 'product_show');\n```", correct: false }
      - { value: "```php\n$routes->setAlias('product_details', 'product_show');\n```", correct: false }
      - { value: "```php\n$routes->mapAlias('product_details', 'product_show');\n```", correct: false }
    help: |
      The `alias()` method of `RoutingConfigurator` is used to create route aliases.
      https://symfony.com/doc/current/routing.html#creating-route-aliases

  -
    question: >
      Which of the following is a valid way to define a route that matches only if the request scheme is `HTTP` in YAML?
    answers:
      - { value: "```yaml\nmy_route:\n    path: /my-path\n    controller: App\\Controller\\MyController::index\n    schemes: [http]\n```", correct: true }
      - { value: "```yaml\nmy_route:\n    path: /my-path\n    controller: App\\Controller\\MyController::index\n    scheme: http\n```", correct: false }
      - { value: "```yaml\nmy_route:\n    path: /my-path\n    controller: App\\Controller\\MyController::index\n    condition: \"context.getScheme() == 'http'\"\n```", correct: true }
      - { value: "```yaml\nmy_route:\n    path: /my-path\n    controller: App\\Controller\\MyController::index\n    secure: false\n```", correct: false }
    help: |
      The `schemes` option or a `condition` using `context.getScheme()` can be used to enforce a specific scheme.
      https://symfony.com/doc/current/routing.html#scheme-requirements

  -
    question: >
      What is the purpose of the `router:match` command's output showing `_route_params`?
    answers:
      - { value: "It lists the values of all matched route parameters for the given URL.", correct: true }
      - { value: "It shows the default values for the route's parameters.", correct: false }
      - { value: "It indicates which parameters are mandatory for the route.", correct: false }
      - { value: "It displays the requirements defined for each parameter.", correct: false }
    help: |
      The `_route_params` section of the `router:match` output is useful for verifying that parameters are correctly extracted from the URL.
      https://symfony.com/doc/current/routing.html#matching-a-url

  -
    question: >
      When importing routes, what is the effect of applying a `prefix` like `/blog` to an imported route that has an empty path (e.g., `path: /`)?
    answers:
      - { value: "The imported route's URL will become `/blog/` by default.", correct: true }
      - { value: "The imported route will not be accessible.", correct: false }
      - { value: "The prefix will be ignored for routes with empty paths.", correct: false }
      - { value: "An error will occur during route loading.", correct: false }
    help: |
      An imported route with an empty path will combine with the prefix, resulting in the prefix followed by a trailing slash by default.
      https://symfony.com/doc/current/routing.html#route-groups

  -
    question: >
      Which of the following describes the behavior of `UrlGeneratorInterface::ABSOLUTE_URL` when generating a URL?
    answers:
      - { value: "It generates a full URL including the scheme (http/https), hostname, and path.", correct: true }
      - { value: "It generates a URL relative to the current domain, without the scheme.", correct: false }
      - { value: "It generates a URL that is always relative to the web root.", correct: false }
      - { value: "It generates a URL that includes query parameters but no fragment.", correct: false }
    help: |
      `ABSOLUTE_URL` produces a complete, self-contained URL.
      https://symfony.com/doc/current/routing.html#generating-urls-in-controllers

  -
    question: >
      What is the purpose of the `#[Route]` attribute's `host` option?
    answers:
      - { value: "To restrict the route to match only requests coming from a specific hostname or dynamic subdomain.", correct: true }
      - { value: "To define the default host for URL generation.", correct: false }
      - { value: "To specify the server where the route's controller is hosted.", correct: false }
      - { value: "To configure virtual hosts for the application.", correct: false }
    help: |
      The `host` option allows routes to be matched based on the hostname of the incoming request.
      https://symfony.com/doc/current/routing.html#host-based-routing

  -
    question: >
      When debugging routing, what is the significance of the `Scheme` column in the `debug:router` output?
    answers:
      - { value: "It indicates the required URL scheme (HTTP, HTTPS, or ANY) for the route to match.", correct: true }
      - { value: "It shows the default scheme used when generating URLs for the route.", correct: false }
      - { value: "It specifies the scheme of the server hosting the application.", correct: false }
      - { value: "It is always `ANY` unless explicitly configured.", correct: false }
    help: |
      The `Scheme` column in `debug:router` output displays the scheme requirements for each route.
      https://symfony.com/doc/current/routing.html#listing-all-routes

  -
    question: >
      What is the correct way to define a route that matches any HTTP method and any scheme in YAML?
    answers:
      - { value: "```yaml\nmy_route:\n    path: /my-path\n    controller: App\\Controller\\MyController::index\n    methods: [ANY]\n    schemes: [ANY]\n```", correct: false }
      - { value: "```yaml\nmy_route:\n    path: /my-path\n    controller: App\\Controller\\MyController::index\n```", correct: true }
      - { value: "```yaml\nmy_route:\n    path: /my-path\n    controller: App\\Controller\\MyController::index\n    any_method: true\n    any_scheme: true\n```", correct: false }
      - { value: "```yaml\nmy_route:\n    path: /my-path\n    controller: App\\Controller\\MyController::index\n    methods: []\n    schemes: []\n```", correct: false }
    help: |
      Omitting the `methods` and `schemes` options means the route will match any method and any scheme.
      https://symfony.com/doc/current/routing.html#http-method-requirements
      https://symfony.com/doc/current/routing.html#scheme-requirements

  -
    question: >
      When using `RedirectController` to redirect to an internal route, which `defaults` key should be used to specify the target route's name?
    answers:
      - { value: "`route`", correct: true }
      - { value: "`name`", correct: false }
      - { value: "`target_route`", correct: false }
      - { value: "`redirect_route`", correct: false }
    help: |
      The `route` default key is used to specify the name of the internal route to redirect to.
      https://symfony.com/doc/current/routing.html#redirecting-routes

  -
    question: >
      What is the main purpose of the `UrlMatcher` in the context of a Symfony application's request lifecycle?
    answers:
      - { value: "To determine which controller and action should handle an incoming HTTP request based on its URL.", correct: true }
      - { value: "To generate URLs for links and redirects within the application.", correct: false }
      - { value: "To validate the parameters of a URL against defined requirements.", correct: false }
      - { value: "To load and compile route definitions from configuration files.", correct: false }
    help: |
      The `UrlMatcher` is the core component that performs the reverse operation of URL generation, finding a route for a given request.
      https://symfony.com/doc/current/create_framework/routing.html#matching-a-url

  -
    question: >
      Which of the following is a benefit of using PHP backed enums as route parameters in Symfony 7?
    answers:
      - { value: "Automatic type conversion from the URL segment to the enum instance in the controller.", correct: true }
      - { value: "Improved routing performance due to optimized enum matching.", correct: false }
      - { value: "Direct serialization of enum cases to JSON in responses.", correct: false }
      - { value: "Automatic generation of route requirements based on enum values.", correct: false }
    help: |
      Symfony automatically handles the conversion of the scalar route parameter value to the corresponding PHP backed enum instance.
      https://symfony.com/doc/current/routing.html#route-parameters-php-backed-enum

  -
    question: >
      What is the correct way to define a route with a dynamic parameter `slug` and a default value `default-slug` in PHP attributes?
    answers:
      - { value: "```php\n#[Route('/blog/{slug}', name: 'blog_show', defaults: ['slug' => 'default-slug'])]\n```", correct: true }
      - { value: "```php\n#[Route('/blog/{slug?default-slug}', name: 'blog_show')]\n```", correct: true }
      - { value: "```php\n#[Route('/blog/{slug}', name: 'blog_show', default: 'default-slug')]\n```", correct: false }
      - { value: "```php\n#[Route('/blog/{slug}', name: 'blog_show', options: ['default_slug' => 'default-slug'])]\n```", correct: false }
    help: |
      Default values can be set using the `defaults` option or inline with `?` and the default value.
      https://symfony.com/doc/current/routing.html#setting-default-values-for-parameters

  -
    question: >
      When using `router:match`, if a URL matches multiple routes, which route will be displayed in the output?
    answers:
      - { value: "The route that Symfony's router would actually choose based on its internal matching logic (e.g., priority, specificity).", correct: true }
      - { value: "All matching routes will be displayed.", correct: false }
      - { value: "The route that is alphabetically first by name.", correct: false }
      - { value: "The route that was defined first in the configuration.", correct: false }
    help: |
      `router:match` simulates the actual routing process, showing the single route that would be matched.
      https://symfony.com/doc/current/routing.html#matching-a-url

  -
    question: >
      What is the purpose of the `_host` attribute on the `Request` object after a route has been matched?
    answers:
      - { value: "It contains the hostname from the incoming request.", correct: true }
      - { value: "It defines the required hostname for the matched route.", correct: false }
      - { value: "It indicates the default hostname for URL generation.", correct: false }
      - { value: "It's used to force a redirect to a specific host.", correct: false }
    help: |
      The `_host` attribute reflects the host of the incoming request.
      https://symfony.com/doc/current/routing.html#host-based-routing

  -
    question: >
      What is the primary function of `Symfony\Component\Routing\Generator\UrlGeneratorInterface`?
    answers:
      - { value: "To generate URLs for named routes, considering parameters, schemes, and hosts.", correct: true }
      - { value: "To match incoming URLs to route definitions.", correct: false }
      - { value: "To load route definitions from various sources.", correct: false }
      - { value: "To validate URL parameters against requirements.", correct: false }
    help: |
      `UrlGeneratorInterface` is the contract for generating URLs in Symfony.
      https://symfony.com/doc/current/routing.html#generating-urls-in-services

  -
    question: >
      Which of the following is a valid way to define a route that matches based on a custom header, e.g., `X-Requested-With: XMLHttpRequest`?
    answers:
      - { value: "Using the `condition` option with `request.headers.get('X-Requested-With') == 'XMLHttpRequest'`.", correct: true }
      - { value: "Using a `headers` option in the route definition.", correct: false }
      - { value: "Using a custom route loader that inspects headers.", correct: false }
      - { value: "This type of matching is not directly supported by Symfony's core routing.", correct: false }
    help: |
      Complex conditions involving request headers can be defined using the Expression Language `condition` option.
      https://symfony.com/doc/current/routing.html#conditional-request-matching

  -
    question: >
      What is the correct way to define a route that only accepts `POST` requests in PHP attributes?
    answers:
      - { value: "```php\n#[Route('/submit', methods: ['POST'])]\n```", correct: true }
      - { value: "```php\n#[Route('/submit', method: 'POST')]\n```", correct: false }
      - { value: "```php\n#[Route('/submit', allow_method: 'POST')]\n```", correct: false }
      - { value: "```php\n#[Route('/submit', condition: \"context.getMethod() == 'POST'\")]\n```", correct: true }
    help: |
      The `methods` option or a `condition` using `context.getMethod()` can be used to restrict routes by HTTP method.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      When using `debug:router`, what does the `Host` column indicate?
    answers:
      - { value: "The required hostname for the route to match, or `ANY` if no host is specified.", correct: true }
      - { value: "The IP address of the server hosting the application.", correct: false }
      - { value: "The default host used for URL generation.", correct: false }
      - { value: "The host from which the `debug:router` command was executed.", correct: false }
    help: |
      The `Host` column in `debug:router` output displays the host requirements for each route.
      https://symfony.com/doc/current/routing.html#listing-all-routes

  -
    question: >
      What is the primary benefit of using `php bin/console router:match` over manually testing URLs in a browser for debugging routing issues?
    answers:
      - { value: "It provides detailed information about the matched route, including parameters and controller, without requiring a full HTTP request.", correct: true }
      - { value: "It is faster than making actual HTTP requests.", correct: false }
      - { value: "It can simulate different HTTP methods and headers.", correct: false }
      - { value: "It automatically suggests corrections for routing errors.", correct: false }
    help: |
      `router:match` offers a precise and detailed insight into how Symfony's router interprets a given URL, which is invaluable for debugging.
      https://symfony.com/doc/current/routing.html#matching-a-url

  -
    question: >
      What is the purpose of the `_locale` parameter when defining localized routes with different paths for various locales?
    answers:
      - { value: "It allows the same route name to resolve to different URLs based on the active language.", correct: true }
      - { value: "It automatically translates the content of the page associated with the route.", correct: false }
      - { value: "It is used to filter routes based on the user's browser language.", correct: false }
      - { value: "It defines the default language for the entire application.", correct: false }
    help: |
      Localized routes enable different URL paths for the same logical route depending on the locale.
      https://symfony.com/doc/current/routing.html#localized-routes

  -
    question: >
      Which of the following is a valid way to define a route that only matches if the request is made from `example.com` and the scheme is `https` in PHP attributes?
    answers:
      - { value: "```php\n#[Route('/', host: 'example.com', schemes: ['https'])]\n```", correct: true }
      - { value: "```php\n#[Route('/', host: 'example.com', scheme: 'https')]\n```", correct: false }
      - { value: "```php\n#[Route('/', condition: \"context.getHost() == 'example.com' and context.getScheme() == 'https'\")]\n```", correct: true }
      - { value: "```php\n#[Route('/', domain: 'example.com', secure: true)]\n```", correct: false }
    help: |
      Both the `host` and `schemes` options or a combined `condition` can be used to specify these requirements.
      https://symfony.com/doc/current/routing.html#host-based-routing
      https://symfony.com/doc/current/routing.html#scheme-requirements

  -
    question: >
      What is the correct way to define a route with a custom `condition` expression in YAML?
    answers:
      - { value: "```yaml\nmy_route:\n    path: /my-path\n    controller: App\\Controller\\MyController::index\n    condition: \"request.headers.get('User-Agent') matches '/chrome/i'\"\n```", correct: true }
      - { value: "```yaml\nmy_route:\n    path: /my-path\n    controller: App\\Controller\\MyController::index\n    when: \"request.headers.get('User-Agent') matches '/chrome/i'\"\n```", correct: false }
      - { value: "```yaml\nmy_route:\n    path: /my-path\n    controller: App\\Controller\\MyController::index\n    if: \"request.headers.get('User-Agent') matches '/chrome/i'\"\n```", correct: false }
      - { value: "```yaml\nmy_route:\n    path: /my-path\n    controller: App\\Controller\\MyController::index\n    match_if: \"request.headers.get('User-Agent') matches '/chrome/i'\"\n```", correct: false }
    help: |
      The `condition` key in YAML accepts an Expression Language string.
      https://symfony.com/doc/current/routing.html#conditional-request-matching

  -
    question: >
      What is the purpose of the `_fragment` parameter when generating a URL using `generateUrl()`?
    answers:
      - { value: "It adds a fragment identifier (e.g., `#section`) to the generated URL.", correct: true }
      - { value: "It specifies a Twig template fragment to render.", correct: false }
      - { value: "It is used for AJAX requests to load partial content.", correct: false }
      - { value: "It defines a default fragment for the route.", correct: false }
    help: |
      The `_fragment` parameter is used to append a URL fragment to the generated URL.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is a valid way to define a route with an inline requirement that the `slug` parameter must consist of alphanumeric characters and hyphens?
    answers:
      - { value: "```php\n#[Route('/posts/{slug<[a-zA-Z0-9-]+>}', name: 'post_show')]\n```", correct: true }
      - { value: "```php\n#[Route('/posts/{slug:alpha_dash}', name: 'post_show')]\n```", correct: false }
      - { value: "```php\n#[Route('/posts/{slug}', name: 'post_show', requirements: ['slug' => '[a-zA-Z0-9-]+'])]\n```", correct: true }
      - { value: "```php\n#[Route('/posts/{slug}', name: 'post_show', regex: '[a-zA-Z0-9-]+')]\n```", correct: false }
    help: |
      Inline requirements or the `requirements` option can be used with regular expressions to validate parameter formats.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      What is the primary purpose of the `UrlGeneratorInterface::RELATIVE_PATH` constant when generating URLs?
    answers:
      - { value: "To generate a URL that is relative to the current request's path (e.g., `../images/logo.png`).", correct: true }
      - { value: "To generate a URL that is relative to the web root (e.g., `/images/logo.png`).", correct: false }
      - { value: "To generate a URL without the scheme and host.", correct: false }
      - { value: "To generate a URL that is only valid within the same controller.", correct: false }
    help: |
      `RELATIVE_PATH` is used for generating URLs that are relative to the current location in the URL structure.
      https://symfony.com/doc/current/routing.html#generating-urls-in-controllers

  -
    question: >
      When using `debug:router`, what does the `Path` column indicate?
    answers:
      - { value: "The URL path pattern that the route matches.", correct: true }
      - { value: "The file path to the controller associated with the route.", correct: false }
      - { value: "The absolute URL of the route.", correct: false }
      - { value: "The base path of the application.", correct: false }
    help: |
      The `Path` column shows the URL pattern, including any parameters, that the route is configured to match.
      https://symfony.com/doc/current/routing.html#listing-all-routes

  -
    question: >
      What is the correct way to define a route that matches any HTTP method and any scheme in PHP attributes?
    answers:
      - { value: "```php\n#[Route('/my-path')]\n```", correct: true }
      - { value: "```php\n#[Route('/my-path', methods: ['ANY'], schemes: ['ANY'])]\n```", correct: false }
      - { value: "```php\n#[Route('/my-path', anyMethod: true, anyScheme: true)]\n```", correct: false }
      - { value: "```php\n#[Route('/my-path', methods: [], schemes: [])]\n```", correct: false }
    help: |
      Omitting the `methods` and `schemes` options in `#[Route]` means the route will match any method and any scheme.
      https://symfony.com/doc/current/routing.html#http-method-requirements
      https://symfony.com/doc/current/routing.html#scheme-requirements

  -
    question: >
      What is the purpose of the `_route` attribute on the `Request` object?
    answers:
      - { value: "It stores the name of the route that was matched for the current request.", correct: true }
      - { value: "It stores the full path of the matched route.", correct: false }
      - { value: "It stores the controller callable for the matched route.", correct: false }
      - { value: "It stores the HTTP method used for the matched route.", correct: false }
    help: |
      The `_route` attribute provides the name of the currently matched route.
      https://symfony.com/doc/current/routing.html#accessing-route-name-and-parameters-from-the-request

  -
    question: >
      When using `RedirectController` to redirect to an internal route, how do you pass additional parameters to the target route?
    answers:
      - { value: "By including them as key-value pairs directly in the `defaults` section alongside `route`.", correct: true }
      - { value: "By appending them as a query string to the `route` value.", correct: false }
      - { value: "By using a separate `route_params` key in the `defaults`.", correct: false }
      - { value: "Additional parameters are not supported for internal route redirects.", correct: false }
    help: |
      Any additional key-value pairs in the `defaults` section will be passed as arguments to the target route.
      https://symfony.com/doc/current/routing.html#redirecting-routes

  -
    question: >
      What is the correct way to define a route with a dynamic parameter `id` that must be a positive integer (greater than 0) using PHP attributes?
    answers:
      - { value: "```php\n#[Route('/product/{id<\d+>}', name: 'product_show', requirements: ['id' => '[1-9]\d*'])]\n```", correct: true }
      - { value: "```php\n#[Route('/product/{id<\d+>}', name: 'product_show', condition: \"params['id'] > 0\")]\n```", correct: true }
      - { value: "```php\n#[Route('/product/{id:positive_int}', name: 'product_show')]\n```", correct: false }
      - { value: "```php\n#[Route('/product/{id}', name: 'product_show', min: ['id' => 1])]\n```", correct: false }
    help: |
      Regular expressions in `requirements` or a `condition` can enforce specific numeric constraints.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements
      https://symfony.com/doc/current/routing.html#conditional-request-matching

  -
    question: >
      What is the purpose of the `router.cache_clear` command in Symfony?
    answers:
      - { value: "To clear the routing cache, forcing Symfony to re-read route definitions from configuration files.", correct: true }
      - { value: "To optimize the routing cache for faster lookups.", correct: false }
      - { value: "To display the contents of the routing cache.", correct: false }
      - { value: "To rebuild the entire application cache, including routing.", correct: false }
    help: |
      `router:cache:clear` (or `cache:clear` which includes it) is used to invalidate and rebuild the routing cache.
      https://symfony.com/doc/current/console.html#cache-commands

  -
    question: >
      Which of the following is a valid way to define a route with a `condition` that uses an environment variable `APP_ENV` in YAML?
    answers:
      - { value: "```yaml\nmy_route:\n    path: /my-path\n    controller: App\\Controller\\MyController::index\n    condition: \"env('APP_ENV') == 'dev'\"\n```", correct: true }
      - { value: "```yaml\nmy_route:\n    path: /my-path\n    controller: App\\Controller\\MyController::index\n    condition: \"getenv('APP_ENV') == 'dev'\"\n```", correct: false }
      - { value: "```yaml\nmy_route:\n    path: /my-path\n    controller: App\\Controller\\MyController::index\n    env_condition: \"APP_ENV == 'dev'\"\n```", correct: false }
      - { value: "```yaml\nmy_route:\n    path: /my-path\n    controller: App\\Controller\\MyController::index\n    when_env: dev\n```", correct: false }
    help: |
      The `env()` function in Expression Language allows access to environment variables.
      https://symfony.com/doc/current/routing.html#conditional-request-matching

  -
    question: >
      What is the purpose of the `_format` parameter when defining a route like `/articles/{_locale}/search.{_format}`?
    answers:
      - { value: "It allows the route to match different file extensions (e.g., `.html`, `.json`) and sets the request format accordingly.", correct: true }
      - { value: "It specifies the default response format for the route.", correct: false }
      - { value: "It is used for content negotiation based on the `Accept` header.", correct: false }
      - { value: "It defines the output format of the debugging information for the route.", correct: false }
    help: |
      The `_format` parameter is typically used to handle different content types based on the URL extension.
      https://symfony.com/doc/current/routing.html#special-routing-parameterscategory: Routing

questions:
  -
    question: >
      Which of the following configuration types are officially supported for defining routes in Symfony 7?
    answers:
      - { value: "YAML", correct: true }
      - { value: "PHP Attributes", correct: true }
      - { value: "XML", correct: true }
      - { value: "JSON", correct: false }
      - { value: "INI", correct: false }
      - { value: "PHP Configurator", correct: true }
    help: |
      Symfony 7 primarily supports route definitions via PHP attributes, YAML, XML, and PHP configurator files.
      https://symfony.com/doc/current/routing.html#defining-routes

  -
    question: |
      Given the following PHP attribute definition for a route, what will be the name of the route?

      ```php
      // src/Controller/BlogController.php
      namespace App\Controller;

      use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
      use Symfony\Component\HttpFoundation\Response;
      use Symfony\Component\Routing\Attribute\Route;

      class BlogController extends AbstractController
      {
          #[Route('/blog', name: 'blog_list')]
          public function list(): Response
          {
              // ...
          }
      }
      ```
    answers:
      - { value: "blog_list", correct: true }
      - { value: "/blog", correct: false }
      - { value: "list", correct: false }
      - { value: "App\\Controller\\BlogController::list", correct: false }
    help: |
      The `name` option in the `#[Route]` attribute explicitly defines the route's name, which is used for URL generation.
      https://symfony.com/doc/current/routing.html#defining-routes

  -
    question: |
      How would you define a route in YAML that maps the path `/products` to the `index` method of `App\Controller\ProductController`?
    answers:
      - { value: "```yaml\nproducts_index:\n    path: /products\n    controller: App\\Controller\\ProductController::index\n```", correct: true }
      - { value: "```yaml\nproducts_index:\n    url: /products\n    action: App\\Controller\\ProductController::index\n```", correct: false }
      - { value: "```yaml\n- route: products_index\n  path: /products\n  controller: App\\Controller\\ProductController::index\n```", correct: false }
      - { value: "```yaml\n/products:\n    _controller: App\\Controller\\ProductController::index\n```", correct: false }
    help: |
      In YAML, routes are defined with a unique name, a `path`, and a `controller` key specifying the controller class and method.
      https://symfony.com/doc/current/routing.html#defining-routes

  -
    question: >
      Which of the following is the correct way to import routes from a directory using PHP attributes in `config/routes/attributes.php`?
    answers:
      - { value: "```php\nuse Symfony\\Component\\Routing\\Loader\\Configurator\\RoutingConfigurator;\n\nreturn static function (RoutingConfigurator $routes): void {\n    $routes->import('../../src/Controller/', 'attribute');\n};\n```", correct: true }
      - { value: "```php\nuse Symfony\\Component\\Routing\\Loader\\Configurator\\RoutingConfigurator;\n\nreturn static function (RoutingConfigurator $routes): void {\n    $routes->load('../../src/Controller/', 'attribute');\n};\n```", correct: false }
      - { value: "```php\nuse Symfony\\Component\\Routing\\Loader\\Configurator\\RoutingConfigurator;\n\nreturn static function (RoutingConfigurator $routes): void {\n    $routes->addCollection('../../src/Controller/', 'attribute');\n};\n```", correct: false }
      - { value: "```php\nuse Symfony\\Component\\Routing\\Loader\\Configurator\\RoutingConfigurator;\n\nreturn static function (RoutingConfigurator $routes): void {\n    $routes->fromDirectory('../../src/Controller/', 'attribute');\n};\n```", correct: false }
    help: |
      The `import()` method of `RoutingConfigurator` is used to load routes from a given resource, specifying the type (e.g., 'attribute' for PHP attributes).
      https://symfony.com/doc/current/routing.html#importing-routing-resources

  -
    question: >
      What is the purpose of the `requirements` option in a Symfony route definition?
    answers:
      - { value: "To define regular expressions for URL parameters.", correct: true }
      - { value: "To specify the HTTP methods allowed for the route.", correct: false }
      - { value: "To set default values for missing URL parameters.", correct: false }
      - { value: "To define the controller and action for the route.", correct: false }
    help: |
      The `requirements` option allows you to define regular expressions that URL parameters must match for the route to be considered a match.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: |
      Consider the following route definition:

      ```yaml
      # config/routes.yaml
      blog_list:
          path:       /blog/{page}
          controller: App\Controller\BlogController::list
          requirements:
              page: '\d+'
      ```

      Which URL would successfully match this route?
    answers:
      - { value: "/blog/123", correct: true }
      - { value: "/blog/hello", correct: false }
      - { value: "/blog/", correct: false }
      - { value: "/blog/123/extra", correct: false }
    help: |
      The `requirements` for `page: '\d+'` means the `page` parameter must consist of one or more digits.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: |
      How can you configure a route parameter to allow a slash (`/`) character within its value in Symfony 7?
    answers:
      - { value: "By setting a requirement of `.+` for that parameter.", correct: true }
      - { value: "By setting the `allow_slash` option to `true` for the parameter.", correct: false }
      - { value: "By defining the parameter as `{*param}` in the path.", correct: false }
      - { value: "Slashes are always allowed by default in route parameters.", correct: false }
    help: |
      By default, route parameters do not match the `/` character. To allow it, you must explicitly define a requirement like `.+` for the parameter.
      https://symfony.com/doc/current/routing.html#allowing-a-slash-character-in-a-route-parameter

  -
    question: |
      What is the correct PHP attribute syntax to define a route for `/share/{token}` where `token` can contain any character, including slashes?
    answers:
      - { value: "```php\n#[Route('/share/{token}', name: 'share', requirements: ['token' => '.+'])]\n```", correct: true }
      - { value: "```php\n#[Route('/share/{token}', name: 'share', allow_slash: ['token'])]\n```", correct: false }
      - { value: "```php\n#[Route('/share/{token<.+>}', name: 'share')]\n```", correct: true }
      - { value: "```php\n#[Route('/share/{token}', name: 'share', defaults: ['token' => '.*'])]\n```", correct: false }
    help: |
      You can use the inline requirement syntax `param<regex>` or the `requirements` option to specify a regex like `.+` which matches any character, including slashes.
      https://symfony.com/doc/current/routing.html#allowing-a-slash-character-in-a-route-parameter

  -
    question: >
      Which of the following is the correct way to set a default value for a route parameter named `page` to `1` in a YAML route definition?
    answers:
      - { value: "```yaml\nblog_list:\n    path: /blog/{page}\n    controller: App\\Controller\\BlogController::list\n    defaults:\n        page: 1\n```", correct: true }
      - { value: "```yaml\nblog_list:\n    path: /blog/{page?1}\n    controller: App\\Controller\\BlogController::list\n```", correct: false }
      - { value: "```yaml\nblog_list:\n    path: /blog/{page}\n    default_values:\n        page: 1\n```", correct: false }
      - { value: "```yaml\nblog_list:\n    path: /blog/{page}\n    options:\n        default_page: 1\n```", correct: false }
    help: |
      Default values for route parameters are defined under the `defaults` key in YAML.
      https://symfony.com/doc/current/routing.html#setting-default-values-for-parameters

  -
    question: |
      Given the following controller method:

      ```php
      // src/Controller/OrderController.php
      namespace App\Controller;

      use App\Enum\OrderStatusEnum;
      use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
      use Symfony\Component\HttpFoundation\Response;
      use Symfony\Component\Routing\Attribute\Route;

      class OrderController extends AbstractController
      {
          #[Route('/orders/list/{status}', name: 'list_orders_by_status')]
          public function list(OrderStatusEnum $status = OrderStatusEnum::Paid): Response
          {
              // ...
          }
      }
      ```

      If `OrderStatusEnum` is a PHP backed enum, what value will Symfony automatically convert the `{status}` route parameter to when matching the route?
    answers:
      - { value: "The scalar value of the enum case (e.g., 'paid' if `OrderStatusEnum::Paid` has a string backed value 'paid').", correct: true }
      - { value: "The full enum case name (e.g., 'OrderStatusEnum::Paid').", correct: false }
      - { value: "The ordinal value of the enum case.", correct: false }
      - { value: "Symfony will throw an error as enums are not directly supported as route parameters.", correct: false }
    help: |
      Symfony automatically converts PHP backed enumerations used as route parameters to their scalar values, allowing for cleaner controller argument definitions and type hinting.
      https://symfony.com/doc/current/routing.html#route-parameters-php-backed-enum

  -
    question: >
      When generating a URL in a Symfony controller using `generateUrl()`, which constant should be passed as the third argument to generate an absolute URL (including scheme and host)?
    answers:
      - { value: "`UrlGeneratorInterface::ABSOLUTE_URL`", correct: true }
      - { value: "`UrlGeneratorInterface::ABSOLUTE_PATH`", correct: false }
      - { value: "`UrlGeneratorInterface::NETWORK_PATH`", correct: false }
      - { value: "`UrlGeneratorInterface::RELATIVE_PATH`", correct: false }
    help: |
      `UrlGeneratorInterface::ABSOLUTE_URL` generates a full URL including the scheme, host, and path.
      https://symfony.com/doc/current/routing.html#generating-urls-in-controllers

  -
    question: |
      You are generating a URL in a Symfony service and need to include an object (e.g., a UUID object) as a route parameter. What is the recommended practice to avoid issues?
    answers:
      - { value: "Explicitly cast the object to a string before passing it as a parameter.", correct: true }
      - { value: "Symfony automatically handles object serialization for route parameters.", correct: false }
      - { value: "Pass the object directly; Symfony will call its `__toString()` method if available.", correct: false }
      - { value: "Inject a custom parameter converter service to handle object conversion.", correct: false }
    help: |
      When passing objects as extra parameters to `generateUrl()`, it's necessary to explicitly convert them to strings to avoid issues.
      https://symfony.com/doc/current/routing.html#extra-url-parameters

  -
    question: >
      Which interface should you inject into a Symfony service to generate URLs?
    answers:
      - { value: "`Symfony\\Component\\Routing\\Generator\\UrlGeneratorInterface`", correct: true }
      - { value: "`Symfony\\Component\\HttpFoundation\\UrlHelper`", correct: false }
      - { value: "`Symfony\\Component\\Routing\\RouterInterface`", correct: false }
      - { value: "`Symfony\\Component\\HttpKernel\\UriSigner`", correct: false }
    help: |
      The `UrlGeneratorInterface` is the standard way to generate URLs in Symfony services.
      https://symfony.com/doc/current/routing.html#generating-urls-in-services

  -
    question: >
      When generating a localized URL using `generateUrl()`, how can you explicitly set the locale instead of using the current request's locale?
    answers:
      - { value: "Pass the desired locale as the `_locale` parameter in the arguments array.", correct: true }
      - { value: "Set the locale using `Request::setLocale()` before calling `generateUrl()`.", correct: false }
      - { value: "There is a dedicated `generateLocalizedUrl()` method.", correct: false }
      - { value: "The locale can only be determined from the request and cannot be explicitly set during generation.", correct: false }
    help: |
      To explicitly set the locale for a generated URL, pass the `_locale` parameter in the arguments array.
      https://symfony.com/doc/current/routing.html#generating-urls-in-controllers

  -
    question: >
      What is the default HTTP status code for a temporary redirect configured using Symfony's `RedirectController`?
    answers:
      - { value: "302 Found", correct: true }
      - { value: "301 Moved Permanently", correct: false }
      - { value: "307 Temporary Redirect", correct: false }
      - { value: "303 See Other", correct: false }
    help: |
      Redirections are temporary by default (code 302).
      https://symfony.com/doc/current/routing.html#redirecting-routes

  -
    question: |
      To make a redirect configured with `RedirectController` permanent, which option should be set to `true` in the `defaults`?
    answers:
      - { value: "`permanent`", correct: true }
      - { value: "`status_code`", correct: false }
      - { value: "`is_permanent`", correct: false }
      - { value: "`redirect_type`", correct: false }
    help: |
      Setting the `permanent` default to `true` changes the redirect status code from 302 to 301.
      https://symfony.com/doc/current/routing.html#redirecting-routes

  -
    question: >
      Which option in `RedirectController` configuration ensures that the original query string parameters are preserved during a redirect?
    answers:
      - { value: "`keepQueryParams`", correct: true }
      - { value: "`preserve_query`", correct: false }
      - { value: "`pass_query_params`", correct: false }
      - { value: "`retain_query`", correct: false }
    help: |
      The `keepQueryParams` default option, when set to `true`, will include the original query string parameters in the redirected URL.
      https://symfony.com/doc/current/routing.html#redirecting-routes

  -
    question: >
      When using `RedirectController`, setting `keepRequestMethod` to `true` for a permanent redirect will result in which HTTP status code?
    answers:
      - { value: "308 Permanent Redirect", correct: true }
      - { value: "301 Moved Permanently", correct: false }
      - { value: "307 Temporary Redirect", correct: false }
      - { value: "302 Found", correct: false }
    help: |
      If `keepRequestMethod` is `true`, permanent redirects use the 308 status code instead of 301.
      https://symfony.com/doc/current/routing.html#redirecting-routes

  -
    question: >
      What is the purpose of the `_controller` special route parameter in Symfony?
    answers:
      - { value: "It determines which controller and action is executed when the route is matched.", correct: true }
      - { value: "It defines the default controller for all routes in an application.", correct: false }
      - { value: "It specifies the base path for all controller-defined routes.", correct: false }
      - { value: "It is used for injecting services into the controller.", correct: false }
    help: |
      The `_controller` parameter is fundamental for mapping a matched route to its corresponding controller action.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which special route parameter is used to set the "request format" of the `Request` object, influencing the `Content-Type` of the response (e.g., `application/json` for `json` format)?
    answers:
      - { value: "`_format`", correct: true }
      - { value: "`_type`", correct: false }
      - { value: "`_content_type`", correct: false }
      - { value: "`_response_format`", correct: false }
    help: |
      The `_format` parameter sets the request format, which is used to determine the `Content-Type` of the response.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      What is the primary function of the `_locale` special route parameter?
    answers:
      - { value: "To set the locale on the Request object.", correct: true }
      - { value: "To define the default language for the application.", correct: false }
      - { value: "To automatically translate route paths.", correct: false }
      - { value: "To filter routes based on the user's preferred language.", correct: false }
    help: |
      The `_locale` parameter is used to set the locale on the `Request` object, which is crucial for internationalization.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: |
      Consider the following route definition:

      ```yaml
      # config/routes.yaml
      article_search:
        path:        /articles/{_locale}/search.{_format}
        controller:  App\Controller\ArticleController::search
        locale:      en
        format:      html
        requirements:
            _locale: en|fr
            _format: html|xml
      ```

      What is the purpose of `locale: en` and `format: html` in this configuration?
    answers:
      - { value: "They define the default values for the `_locale` and `_format` parameters if they are not provided in the URL.", correct: true }
      - { value: "They restrict the route to only match requests with `en` locale and `html` format.", correct: false }
      - { value: "They are used for internal caching mechanisms related to locale and format.", correct: false }
      - { value: "They specify the preferred locale and format for URL generation, overriding the current request's locale/format.", correct: false }
    help: |
      These define the default values for the `_locale` and `_format` parameters when they are not explicitly present in the URL.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      How can you configure a route to match a specific subdomain, for example, `m.example.com`?
    answers:
      - { value: "By using the `host` option in the route definition.", correct: true }
      - { value: "By setting a `domain` requirement for the route.", correct: false }
      - { value: "By defining a `subdomain` parameter in the path.", correct: false }
      - { value: "Host matching is not directly supported in Symfony routing.", correct: false }
    help: |
      The `host` option allows you to define routes that match specific hostnames or subdomains.
      https://symfony.com/doc/current/routing.html#host-based-routing

  -
    question: |
      You want to define a route that matches `m.example.com` and `mobile.example.com`, with `m` as the default subdomain. Which PHP attribute configuration is correct?
    answers:
      - { value: "```php\n#[Route(\n    '/',\n    name: 'mobile_homepage',\n    host: '{subdomain}.example.com',\n    defaults: ['subdomain' => 'm'],\n    requirements: ['subdomain' => 'm|mobile'],\n)]\n```", correct: true }
      - { value: "```php\n#[Route(\n    '/',\n    name: 'mobile_homepage',\n    host: ['m.example.com', 'mobile.example.com'],\n    defaults: ['subdomain' => 'm'],\n)]\n```", correct: false }
      - { value: "```php\n#[Route(\n    '/',\n    name: 'mobile_homepage',\n    host: '{subdomain}.example.com',\n    default_host: 'm',\n    host_regex: 'm|mobile',\n)]\n```", correct: false }
      - { value: "```php\n#[Route(\n    '/',\n    name: 'mobile_homepage',\n    domain: '{subdomain}.example.com',\n    defaults: ['subdomain' => 'm'],\n    requirements: ['subdomain' => 'm|mobile'],\n)]\n```", correct: false }
    help: |
      Dynamic host parameters are defined within curly braces in the `host` option, and their defaults and requirements are set using `defaults` and `requirements` respectively.
      https://symfony.com/doc/current/routing.html#host-based-routing

  -
    question: >
      When importing a collection of routes, how can you apply different URL prefixes based on the locale (e.g., `/nl` for Dutch, no prefix for English)?
    answers:
      - { value: "By providing an associative array to the `prefix` option, where keys are locales and values are prefixes.", correct: true }
      - { value: "By using a `locale_prefix` option with a callback function.", correct: false }
      - { value: "This functionality is not available for imported route collections.", correct: false }
      - { value: "By defining separate import statements for each locale.", correct: false }
    help: |
      The `prefix` option for imported routes can accept an associative array mapping locales to their respective prefixes.
      https://symfony.com/doc/current/routing.html#localized-routes

  -
    question: >
      What is the purpose of the `condition` option in a Symfony route definition?
    answers:
      - { value: "To define an Expression Language expression that must evaluate to true for the route to match.", correct: true }
      - { value: "To specify the HTTP methods allowed for the route.", correct: false }
      - { value: "To set a priority for route matching.", correct: false }
      - { value: "To define a redirect rule for the route.", correct: false }
    help: |
      The `condition` option allows you to add complex logic using Symfony's Expression Language to determine if a route should match.
      https://symfony.com/doc/current/routing.html#conditional-request-matching

  -
    question: |
      Which of the following Expression Language variables is an instance of `Symfony\Component\HttpFoundation\Request` and represents the current request?
    answers:
      - { value: "`request`", correct: true }
      - { value: "`context`", correct: false }
      - { value: "`params`", correct: false }
      - { value: "`http_request`", correct: false }
    help: |
      The `request` variable in Expression Language provides access to the current `Request` object.
      https://symfony.com/doc/current/routing.html#expression-language-variables-and-functions

  -
    question: |
      You want to match a route only if the `User-Agent` header contains "firefox" (case-insensitive). Which `condition` expression is correct?
    answers:
      - { value: "`request.headers.get('User-Agent') matches '/firefox/i'`", correct: true }
      - { value: "`request.headers['User-Agent'] contains 'firefox'`", correct: false }
      - { value: "`context.getUserAgent() matches '/firefox/i'`", correct: false }
      - { value: "`request.userAgent() matches '/firefox/i'`", correct: false }
    help: |
      The `request` variable allows access to request headers, and the `matches` operator can be used with regular expressions.
      https://symfony.com/doc/current/routing.html#conditional-request-matching

  -
    question: >
      Which Expression Language function allows you to retrieve the value of an environment variable within a routing condition?
    answers:
      - { value: "`env(string $name)`", correct: true }
      - { value: "`getenv(string $name)`", correct: false }
      - { value: "`parameter(string $name)`", correct: false }
      - { value: "`config(string $name)`", correct: false }
    help: |
      The `env()` function is available in Expression Language to access environment variables.
      https://symfony.com/doc/current/routing.html#expression-language-variables-and-functions

  -
    question: |
      Given a route `/posts/{id}` with a `condition: "params['id'] < 1000"`, what does `params['id']` refer to?
    answers:
      - { value: "The value of the `id` route parameter.", correct: true }
      - { value: "The ID of the current request.", correct: false }
      - { value: "A service named `id`.", correct: false }
      - { value: "A configuration parameter named `id`.", correct: false }
    help: |
      The `params` variable in Expression Language is an array of matched route parameters for the current route.
      https://symfony.com/doc/current/routing.html#expression-language-variables-and-functions

  -
    question: >
      How can you restrict a Symfony route to only respond to `GET` and `HEAD` HTTP methods using PHP attributes?
    answers:
      - { value: "```php\n#[Route('/contact', name: 'contact', methods: ['GET', 'HEAD'])]\n```", correct: true }
      - { value: "```php\n#[Route('/contact', name: 'contact', allow_methods: ['GET', 'HEAD'])]\n```", correct: false }
      - { value: "```php\n#[Route('/contact', name: 'contact', condition: \"context.getMethod() in ['GET', 'HEAD']\")]\n```", correct: true }
      - { value: "```php\n#[Route('/contact', name: 'contact', http_methods: ['GET', 'HEAD'])]\n```", correct: false }
    help: |
      The `methods` option in the `#[Route]` attribute directly specifies allowed HTTP methods. Alternatively, a `condition` using `context.getMethod()` can achieve the same.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      Which of the following HTTP methods is implicitly allowed when you define a route with `GET` as an allowed method, even if not explicitly listed?
    answers:
      - { value: "HEAD", correct: true }
      - { value: "POST", correct: false }
      - { value: "PUT", correct: false }
      - { value: "DELETE", correct: false }
    help: |
      If a route allows `GET` requests, `HEAD` requests are implicitly allowed as well.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      When a route contains the `_locale` parameter (e.g., `/articles/{_locale}/search`), how does Symfony determine the default locale if it's not explicitly provided in the URL?
    answers:
      - { value: "It uses the default locale configured in `framework.yaml` or the user's browser preferences.", correct: true }
      - { value: "It falls back to `en` by default.", correct: false }
      - { value: "It throws a `RouteNotFoundException`.", correct: false }
      - { value: "The `_locale` parameter is always mandatory if present in the path.", correct: false }
    help: |
      Symfony can guess the user's locale based on their browser preferences or use a default configured locale.
      https://symfony.com/doc/current/routing.html#locale-guessing

  -
    question: >
      You have a route defined with a `_locale` parameter. When generating a URL for this route, if you don't explicitly pass `_locale` in the arguments, what locale will Symfony use by default?
    answers:
      - { value: "The current request's locale.", correct: true }
      - { value: "The application's default locale.", correct: false }
      - { value: "The first locale defined in the route's requirements.", correct: false }
      - { value: "An exception will be thrown if `_locale` is missing.", correct: false }
    help: |
      When a route is localized, Symfony uses by default the current request locale if `_locale` is not explicitly passed during URL generation.
      https://symfony.com/doc/current/routing.html#generating-urls-in-controllers

  -
    question: >
      Which command-line tool is used to list all registered routes in a Symfony application?
    answers:
      - { value: "`php bin/console debug:router`", correct: true }
      - { value: "`php bin/console router:list`", correct: false }
      - { value: "`php bin/console routes:show`", correct: false }
      - { value: "`php bin/console routing:dump`", correct: false }
    help: |
      The `debug:router` command provides a comprehensive list of all defined routes.
      https://symfony.com/doc/current/routing.html#listing-all-routes

  -
    question: >
      To display detailed information for a specific route named `app_lucky_number`, which command should you use?
    answers:
      - { value: "`php bin/console debug:router app_lucky_number`", correct: true }
      - { value: "`php bin/console debug:router --name=app_lucky_number`", correct: false }
      - { value: "`php bin/console router:info app_lucky_number`", correct: false }
      - { value: "`php bin/console show:route app_lucky_number`", correct: false }
    help: |
      Passing the route name as an argument to `debug:router` displays its specific details.
      https://symfony.com/doc/current/routing.html#displaying-the-details-of-a-specific-route

  -
    question: >
      Which command helps you determine which Symfony route matches a specific URL path, aiding in debugging routing issues?
    answers:
      - { value: "`php bin/console router:match /lucky/number/8`", correct: true }
      - { value: "`php bin/console debug:url /lucky/number/8`", correct: false }
      - { value: "`php bin/console route:test /lucky/number/8`", correct: false }
      - { value: "`php bin/console match:url /lucky/number/8`", correct: false }
    help: |
      The `router:match` command is specifically designed to identify the route that matches a given URL.
      https://symfony.com/doc/current/routing.html#matching-a-url

  -
    question: >
      When using `php bin/console debug:router`, what option would you use to only display routes that match the `POST` HTTP method?
    answers:
      - { value: "`--method=POST`", correct: true }
      - { value: "`--http-method=POST`", correct: false }
      - { value: "`--filter-method=POST`", correct: false }
      - { value: "`--methods=POST`", correct: false }
    help: |
      The `--method` option filters the displayed routes by the specified HTTP method.
      https://symfony.com/doc/current/routing.html#filtering-routes

  -
    question: >
      What is the recommended way to check if a route exists in Symfony without negatively impacting performance by regenerating the routing cache?
    answers:
      - { value: "Attempt to generate the URL and catch `Symfony\\Component\\Routing\\Exception\\RouteNotFoundException`.", correct: true }
      - { value: "Access the `RouteCollection` directly and check if the route name exists.", correct: false }
      - { value: "Use a dedicated `router.hasRoute()` method.", correct: false }
      - { value: "Inspect the output of `debug:router` in a production environment.", correct: false }
    help: |
      The recommended approach is to attempt URL generation and catch `RouteNotFoundException` if the route doesn't exist, as direct inspection of the route collection can trigger cache regeneration.
      https://symfony.com/doc/current/routing.html#checking-if-a-route-exists

  -
    question: |
      You encounter the error: "Controller \"App\\Controller\\BlogController::show()\" requires that you provide a value for the \"$slug\" argument." What is the most likely cause?
    answers:
      - { value: "The route path for `BlogController::show()` does not define a `{slug}` parameter.", correct: true }
      - { value: "The `$slug` argument in the controller method is not type-hinted correctly.", correct: false }
      - { value: "The service container cannot autowire the `$slug` argument.", correct: false }
      - { value: "The route has a `requirements` constraint for `slug` that is not met.", correct: false }
    help: |
      This error indicates a mismatch between the controller's expected arguments and the parameters provided by the matched route.
      https://symfony.com/doc/current/routing.html#troubleshooting

  -
    question: >
      When defining a route group using PHP attributes on a controller class, what is the effect of the `name` option in the class-level `#[Route]` attribute?
    answers:
      - { value: "It acts as a prefix for all route names defined within that controller.", correct: true }
      - { value: "It defines a default route name for the controller's `__invoke()` method.", correct: false }
      - { value: "It sets the base name for the controller itself, not individual routes.", correct: false }
      - { value: "It is ignored when used on a class-level `#[Route]` attribute.", correct: false }
    help: |
      The `name` option on a class-level `#[Route]` attribute defines a name prefix for all routes within that controller.
      https://symfony.com/doc/current/routing.html#route-groups

  -
    question: |
      Consider the following PHP attribute configuration:

      ```php
      #[Route('/blog', requirements: ['_locale' => 'en|es|fr'], name: 'blog_')]
      class BlogController extends AbstractController
      {
          #[Route('/{_locale}', name: 'index')]
          public function index(): Response
          {
              // ...
          }
      }
      ```

      What will be the full name of the `index` route?
    answers:
      - { value: "blog_index", correct: true }
      - { value: "index", correct: false }
      - { value: "blog_/{_locale}", correct: false }
      - { value: "/blog/{_locale}", correct: false }
    help: |
      The `name` option on the class-level `#[Route]` attribute acts as a prefix for route names defined on methods within that class.
      https://symfony.com/doc/current/routing.html#route-groups

  -
    question: >
      What is the primary benefit of using route groups in Symfony?
    answers:
      - { value: "To apply common configurations (e.g., prefixes, requirements) to multiple routes efficiently.", correct: true }
      - { value: "To improve the performance of route matching by pre-compiling routes.", correct: false }
      - { value: "To define routes that are only accessible to specific user roles.", correct: false }
      - { value: "To organize routes into separate files for better readability.", correct: false }
    help: |
      Route groups allow you to define shared configurations like URL prefixes, name prefixes, and requirements for a collection of routes.
      https://symfony.com/doc/current/routing.html#route-groups

  -
    question: >
      How can you mark a Symfony route as 'stateless' to prevent session usage during request matching for improved caching?
    answers:
      - { value: "By setting the `stateless` option to `true` in the route definition.", correct: true }
      - { value: "By adding a `#[Stateless]` attribute to the controller method.", correct: false }
      - { value: "By configuring the route with a `cache_control` header.", correct: false }
      - { value: "Stateless routes are only supported for API routes.", correct: false }
    help: |
      The `stateless` option, when set to `true`, tells Symfony that the route does not rely on session state, which can improve caching.
      https://symfony.com/doc/current/routing.html#stateless-routes

  -
    question: >
      What is the default `priority` value for a Symfony route if not explicitly specified?
    answers:
      - { value: "0", correct: true }
      - { value: "1", correct: false }
      - { value: "100", correct: false }
      - { value: "The order of definition determines priority if not specified.", correct: false }
    help: |
      Routes have a default priority of 0. Routes with higher priority values are matched before those with lower or default priority.
      https://symfony.com/doc/current/routing.html#route-priority

  -
    question: |
      Consider these two routes defined in the same controller:

      ```php
      class BlogController extends AbstractController
      {
          #[Route('/blog/{slug}', name: 'blog_show')]
          public function show(string $slug): Response {}

          #[Route('/blog/list', name: 'blog_list')]
          public function list(): Response {}
      }
      ```

      If a request comes for `/blog/list`, which route will Symfony match by default, and why?
    answers:
      - { value: "`blog_show`, because it's defined first and has a greedy pattern.", correct: true }
      - { value: "`blog_list`, because it's more specific.", correct: false }
      - { value: "It will result in a routing error due to ambiguity.", correct: false }
      - { value: "The order of definition does not matter; Symfony uses an internal optimization.", correct: false }
    help: |
      Without explicit priority, the order of definition matters for greedy patterns. The more general `blog_show` route would match `/blog/list` if defined first.
      https://symfony.com/doc/current/routing.html#route-priority

  -
    question: >
      To ensure the route `/blog/list` is matched before `/blog/{slug}` when both are defined, what should be done?
    answers:
      - { value: "Assign a higher `priority` value to the `/blog/list` route.", correct: true }
      - { value: "Define `/blog/list` after `/blog/{slug}`.", correct: false }
      - { value: "Add a `requirements` constraint to `/blog/list`.", correct: false }
      - { value: "Use a different HTTP method for `/blog/list`.", correct: false }
    help: |
      Routes with higher priority are matched first. Setting a higher priority for the more specific route ensures it's chosen over a greedy pattern.
      https://symfony.com/doc/current/routing.html#route-priority

  -
    question: >
      What is the purpose of a route alias in Symfony?
    answers:
      - { value: "To provide an alternate name for an existing route, useful for backward compatibility.", correct: true }
      - { value: "To create a shortcut URL that redirects to another route.", correct: false }
      - { value: "To define a route that can be accessed via multiple paths.", correct: false }
      - { value: "To group multiple routes under a single logical name.", correct: false }
    help: |
      Route aliases allow you to assign an alternate name to an existing route, which can be useful for maintaining backward compatibility when route names change.
      https://symfony.com/doc/current/routing.html#creating-route-aliases

  -
    question: |
      You have a route `product_details` and want to deprecate the old route name `product_show` by making it an alias to `product_details`. Which YAML configuration is correct for deprecating the alias with a generic message?
    answers:
      - { value: "```yaml\nproduct_details:\n    path: /product/{id}\n    controller: App\\Controller\\ProductController::show\n\nproduct_show:\n    alias: product_details\n    deprecated:\n        package: 'acme/package'\n        version: '1.2'\n```", correct: true }
      - { value: "```yaml\nproduct_show:\n    path: /product/{id}\n    controller: App\\Controller\\ProductController::show\n    deprecated_alias: product_details\n```", correct: false }
      - { value: "```yaml\nproduct_show:\n    redirect_to: product_details\n    deprecated: true\n```", correct: false }
      - { value: "```yaml\nproduct_details:\n    path: /product/{id}\n    controller: App\\Controller\\ProductController::show\n    aliases:\n        - product_show:\n            deprecated: true\n```", correct: false }
    help: |
      To deprecate an alias, you define the alias and then add a `deprecated` key with `package` and `version` information.
      https://symfony.com/doc/current/routing.html#deprecating-route-aliases

  -
    question: >
      When deprecating a route alias, which placeholder can be used in a custom deprecation message to refer to the deprecated alias's name?
    answers:
      - { value: "`%alias_id%`", correct: true }
      - { value: "`%deprecated_name%`", correct: false }
      - { value: "`%old_route%`", correct: false }
      - { value: "`%alias_name%`", correct: false }
    help: |
      The `%alias_id%` placeholder is available in custom deprecation messages for route aliases.
      https://symfony.com/doc/current/routing.html#deprecating-route-aliases

  -
    question: >
      How can you force an entire imported route collection to use the HTTPS scheme?
    answers:
      - { value: "By setting the `schemes` option to `[https]` on the import statement.", correct: true }
      - { value: "By adding a `#[Scheme('https')]` attribute to the imported controllers.", correct: false }
      - { value: "By configuring `force_https: true` in `framework.yaml`.", correct: false }
      - { value: "This can only be done on individual routes, not collections.", correct: false }
    help: |
      The `schemes` option can be applied to an import statement to enforce a specific scheme for all imported routes.
      https://symfony.com/doc/current/routing.html#forcing-https

  -
    question: >
      Which of the following is NOT a valid type for the `resource` option when importing routes in Symfony?
    answers:
      - { value: "A service ID", correct: false }
      - { value: "A file path", correct: false }
      - { value: "A directory path", correct: false }
      - { value: "A URL to an external API", correct: true }
    help: |
      Symfony's routing loader typically supports file paths, directory paths, and service IDs as resources, but not direct URLs to external APIs for route definitions.
      https://symfony.com/doc/current/routing.html#importing-routing-resources

  -
    question: >
      What happens if you define two routes with identical paths and HTTP methods, but different names, and no explicit priority?
    answers:
      - { value: "The route defined first will be matched.", correct: true }
      - { value: "Symfony will throw an exception during cache warm-up.", correct: false }
      - { value: "The route with the alphabetically first name will be matched.", correct: false }
      - { value: "Neither route will be matched, resulting in a 404.", correct: false }
    help: |
      When routes have the same path and methods, the order in which they are loaded (and thus defined) determines which one is matched first if no explicit priority is set.
      https://symfony.com/doc/current/routing.html#route-priority

  -
    question: >
      Which component is responsible for matching an incoming request URL to a defined route in Symfony?
    answers:
      - { value: "`UrlMatcher`", correct: true }
      - { value: "`UrlGenerator`", correct: false }
      - { value: "`RouteLoader`", correct: false }
      - { value: "`RequestContext`", correct: false }
    help: |
      The `UrlMatcher` is used to match an incoming URL against the registered routes.
      https://symfony.com/doc/current/create_framework/routing.html#matching-a-url

  -
    question: >
      What is the purpose of `Symfony\Component\Routing\RequestContext` in the routing process?
    answers:
      - { value: "It holds fundamental information about the current request, such as the host, scheme, and HTTP method, for route matching.", correct: true }
      - { value: "It stores the matched route parameters after a successful match.", correct: false }
      - { value: "It defines the default values for route parameters.", correct: false }
      - { value: "It is used to generate URLs based on route names.", correct: false }
    help: |
      `RequestContext` encapsulates information about the current request, which is essential for the `UrlMatcher` to perform its task.
      https://symfony.com/doc/current/create_framework/routing.html#matching-a-url

  -
    question: >
      When defining routes in a PHP file using `RoutingConfigurator`, how do you specify the controller for a route?
    answers:
      - { value: "Using the `controller()` method with an array `[ControllerClass::class, 'methodName']`.", correct: true }
      - { value: "Using the `action()` method with a string `ControllerClass::methodName`.", correct: false }
      - { value: "By setting a `_controller` default option.", correct: false }
      - { value: "By passing the controller as the third argument to the `add()` method.", correct: false }
    help: |
      The `controller()` method is used to define the controller for a route in the PHP routing configurator.
      https://symfony.com/doc/current/routing.html#defining-routes-in-php-files

  -
    question: >
      If a controller method implements the `__invoke()` method, how can you define its route in YAML without specifying the method name?
    answers:
      - { value: "By simply providing the controller class name as the `controller` value.", correct: true }
      - { value: "By appending `::__invoke` to the controller class name.", correct: false }
      - { value: "By setting a `_method: __invoke` default.", correct: false }
      - { value: "This is not supported; the method name is always required.", correct: false }
    help: |
      If the action is implemented as the `__invoke()` method of the controller class, you can skip the `::method_name` part in the controller definition.
      https://symfony.com/doc/current/routing.html#defining-routes-in-yaml

  -
    question: >
      What is the primary purpose of the `env` option in a Symfony route definition?
    answers:
      - { value: "To make a route active only in a specific Symfony environment (e.g., `dev`, `prod`).", correct: true }
      - { value: "To define environment variables that are accessible within the route's controller.", correct: false }
      - { value: "To set the default environment for URL generation.", correct: false }
      - { value: "To specify the server environment where the route should be deployed.", correct: false }
    help: |
      The `env` option allows you to restrict a route's availability to one or more specific Symfony environments.
      https://symfony.com/doc/current/routing.html#environment-specific-routes

  -
    question: |
      Given the following YAML configuration:

      ```yaml
      # config/routes.yaml
      tools:
          path:       /tools
          controller: App\Controller\DefaultController::developerTools
          env:        dev
      ```

      Under which environment(s) will the `/tools` route be accessible?
    answers:
      - { value: "Only in the `dev` environment.", correct: true }
      - { value: "In all environments except `prod`.", correct: false }
      - { value: "In `dev` and `test` environments.", correct: false }
      - { value: "In all environments.", correct: false }
    help: |
      The `env: dev` option explicitly restricts the route to only be active in the `dev` environment.
      https://symfony.com/doc/current/routing.html#environment-specific-routes

  -
    question: >
      Which of the following is a valid way to define a route that matches both `GET` and `POST` requests using PHP attributes?
    answers:
      - { value: "```php\n#[Route('/submit', methods: ['GET', 'POST'])]\n```", correct: true }
      - { value: "```php\n#[Route('/submit', method: 'ANY')]\n```", correct: false }
      - { value: "```php\n#[Route('/submit', methods: 'GET|POST|PUT')]\n```", correct: false }
      - { value: "```php\n#[Route('/submit', http_methods: ['GET', 'POST'])]\n```", correct: false }
    help: |
      The `methods` option in the `#[Route]` attribute accepts an array of allowed HTTP methods.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      What is the primary role of `Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader`?
    answers:
      - { value: "It is the main loader responsible for delegating route loading to specialized loaders (e.g., for YAML, XML, attributes).", correct: true }
      - { value: "It loads all routes directly from the cache.", correct: false }
      - { value: "It handles the compilation of routes into an optimized format.", correct: false }
      - { value: "It is responsible for matching URLs to routes.", correct: false }
    help: |
      The `DelegatingLoader` acts as a central point for loading routes by delegating to specific loaders based on the resource type.
      https://symfony.com/doc/current/routing/custom_route_loader.html#the-routing-component-api

  -
    question: >
      Which method of `Symfony\Component\Config\Loader\LoaderInterface` is used to check if a loader supports a given resource and type?
    answers:
      - { value: "`supports(resource: string, type: string): bool`", correct: true }
      - { value: "`canLoad(resource: string, type: string): bool`", correct: false }
      - { value: "`isSupported(resource: string, type: string): bool`", correct: false }
      - { value: "`check(resource: string, type: string): bool`", correct: false }
    help: |
      The `supports()` method determines if a loader can handle a specific resource and type.
      https://symfony.com/doc/current/routing/custom_route_loader.html#the-routing-component-api

  -
    question: >
      What is the return type of the `load()` method of `Symfony\Component\Config\Loader\LoaderInterface`?
    answers:
      - { value: "`Symfony\\Component\\Routing\\RouteCollection`", correct: true }
      - { value: "`array`", correct: false }
      - { value: "`Symfony\\Component\\Routing\\Route`", correct: false }
      - { value: "`void`", correct: false }
    help: |
      The `load()` method is expected to return a `RouteCollection` containing the loaded routes.
      https://symfony.com/doc/current/routing.html#the-routing-component-api

  -
    question: >
      Which class represents a single route definition in the Symfony Routing component?
    answers:
      - { value: "`Symfony\\Component\\Routing\\Route`", correct: true }
      - { value: "`Symfony\\Component\\Routing\\RouteDefinition`", correct: false }
      - { value: "`Symfony\\Component\\Routing\\CompiledRoute`", correct: false }
      - { value: "`Symfony\\Component\\Routing\\RouteConfig`", correct: false }
    help: |
      `Symfony\Component\Routing\Route` is the class that encapsulates all information about a single route.
      https://symfony.com/doc/current/routing.html#the-routing-component-api

  -
    question: >
      When importing routes using `RoutingConfigurator`, how can you exclude specific files or subdirectories from being loaded (e.g., `Debug*Controller.php`)?
    answers:
      - { value: "By providing a string or an array of PHP glob patterns to the `exclude` option.", correct: true }
      - { value: "By using a `filter` option with a callback function.", correct: false }
      - { value: "By manually specifying each file to include instead of excluding.", correct: false }
      - { value: "Excluding specific files is not supported during import.", correct: false }
    help: |
      The `exclude` option allows you to specify glob patterns for files or subdirectories to be ignored during route import.
      https://symfony.com/doc/current/routing.html#importing-routing-resources

  -
    question: >
      What is the effect of setting `trailing_slash_on_root: false` on an imported route group with a prefix like `/blog`?
    answers:
      - { value: "An imported route with an empty URL will become `/blog` instead of `/blog/`.", correct: true }
      - { value: "It removes trailing slashes from all generated URLs within the group.", correct: false }
      - { value: "It forces all URLs within the group to have a trailing slash.", correct: false }
      - { value: "It only affects the root path `/` of the application, not prefixed routes.", correct: false }
    help: |
      The `trailing_slash_on_root: false` option specifically controls whether an empty URL within a prefixed group results in a trailing slash.
      https://symfony.com/doc/current/routing.html#route-groups

  -
    question: >
      What is the primary reason for using `UrlGeneratorInterface::NETWORK_PATH` when generating URLs?
    answers:
      - { value: "To generate a URL relative to the current host, without including the scheme (e.g., `//example.com/path`).", correct: true }
      - { value: "To generate a URL that can be used across different networks.", correct: false }
      - { value: "To generate a URL that is optimized for network performance.", correct: false }
      - { value: "It's a deprecated constant; use `ABSOLUTE_URL` instead.", correct: false }
    help: |
      `NETWORK_PATH` generates a URL that is scheme-relative, useful for content that can be served over both HTTP and HTTPS.
      https://symfony.com/doc/current/routing.html#generating-urls-in-controllers

  -
    question: >
      Which of the following is a valid way to define a route that matches any host in Symfony?
    answers:
      - { value: "By omitting the `host` option in the route definition.", correct: true }
      - { value: "By setting `host: 'ANY'`.", correct: false }
      - { value: "By setting `host: '*'`.", correct: false }
      - { value: "By setting `host: '0.0.0.0'`.", correct: false }
    help: |
      If no `host` is specified, the route will match any host.
      https://symfony.com/doc/current/routing.html#host-based-routing

  -
    question: >
      What is the purpose of the `_scheme` attribute on the `Request` object after a route has been matched?
    answers:
      - { value: "It contains the scheme (e.g., `http` or `https`) used for the current request.", correct: true }
      - { value: "It defines the required scheme for the matched route.", correct: false }
      - { value: "It indicates the default scheme for URL generation.", correct: false }
      - { value: "It's used to force a redirect to a specific scheme.", correct: false }
    help: |
      The `_scheme` attribute reflects the scheme of the incoming request.
      https://symfony.com/doc/current/routing.html#scheme-requirements

  -
    question: >
      What is the correct way to define a route with a default value for the `page` parameter to `1` in PHP configurator?
    answers:
      - { value: "```php\n$routes->add('blog_list', '/blog/{page}')\n    ->controller([App\\Controller\\BlogController::class, 'list'])\n    ->defaults(['page' => 1])\n;\n```", correct: true }
      - { value: "```php\n$routes->add('blog_list', '/blog/{page?1}')\n    ->controller([App\\Controller\\BlogController::class, 'list'])\n;\n```", correct: true }
      - { value: "```php\n$routes->add('blog_list', '/blog/{page}')\n    ->controller([App\\Controller\\BlogController::class, 'list'])\n    ->setDefault('page', 1)\n;\n```", correct: false }
      - { value: "```php\n$routes->add('blog_list', '/blog/{page}')\n    ->controller([App\\Controller\\BlogController::class, 'list'])\n    ->options(['default_page' => 1])\n;\n```", correct: false }
    help: |
      The `defaults()` method or inline default value syntax can be used to set default values for route parameters in the PHP configurator.
      https://symfony.com/doc/current/routing.html#setting-default-values-for-parameters

  -
    question: >
      When importing routes from a controller directory using PHP configurator, how can you apply a global requirement that the `_locale` parameter must be `en`, `es`, or `fr`?
    answers:
      - { value: "```php\n$routes->import('../../src/Controller/', 'attribute')\n    ->requirements(['_locale' => 'en|es|fr'])\n;\n```", correct: true }
      - { value: "```php\n$routes->import('../../src/Controller/', 'attribute')\n    ->setRequirement('_locale', 'en|es|fr')\n;\n```", correct: false }
      - { value: "```php\n$routes->import('../../src/Controller/', 'attribute')\n    ->where('_locale', 'en|es|fr')\n;\n```", correct: false }
      - { value: "```php\n$routes->import('../../src/Controller/', 'attribute')\n    ->localeRequirements('en|es|fr')\n;\n```", correct: false }
    help: |
      The `requirements()` method on the imported route collection allows applying global requirements.
      https://symfony.com/doc/current/routing.html#route-groups

  -
    question: >
      What is the primary function of `Symfony\Component\Routing\RouteCollection`?
    answers:
      - { value: "It is a container for multiple `Route` objects.", correct: true }
      - { value: "It defines the logic for matching URLs to routes.", correct: false }
      - { value: "It handles the caching of route definitions.", correct: false }
      - { value: "It is responsible for generating URLs from route names.", correct: false }
    help: |
      `RouteCollection` is a fundamental class that aggregates individual `Route` objects.
      https://symfony.com/doc/current/routing.html#the-routing-component-api

  -
    question: >
      When defining a route with a `condition` using Expression Language, which variable provides access to the `Symfony\Component\Routing\RequestContext` object?
    answers:
      - { value: "`context`", correct: true }
      - { value: "`request_context`", correct: false }
      - { value: "`routing_context`", correct: false }
      - { value: "`this`", correct: false }
    help: |
      The `context` variable in Expression Language refers to the `RequestContext` instance.
      https://symfony.com/doc/current/routing.html#expression-language-variables-and-functions

  -
    question: >
      What is the correct way to define a route alias named `product_details` that points to an existing route named `product_show` using PHP configurator?
    answers:
      - { value: "```php\n$routes->alias('product_details', 'product_show');\n```", correct: true }
      - { value: "```php\n$routes->addAlias('product_details', 'product_show');\n```", correct: false }
      - { value: "```php\n$routes->setAlias('product_details', 'product_show');\n```", correct: false }
      - { value: "```php\n$routes->mapAlias('product_details', 'product_show');\n```", correct: false }
    help: |
      The `alias()` method of `RoutingConfigurator` is used to create route aliases.
      https://symfony.com/doc/current/routing.html#creating-route-aliases

  -
    question: >
      Which of the following is a valid way to define a route that matches only if the request scheme is `HTTP` in YAML?
    answers:
      - { value: "```yaml\nmy_route:\n    path: /my-path\n    controller: App\\Controller\\MyController::index\n    schemes: [http]\n```", correct: true }
      - { value: "```yaml\nmy_route:\n    path: /my-path\n    controller: App\\Controller\\MyController::index\n    scheme: http\n```", correct: false }
      - { value: "```yaml\nmy_route:\n    path: /my-path\n    controller: App\\Controller\\MyController::index\n    condition: \"context.getScheme() == 'http'\"\n```", correct: true }
      - { value: "```yaml\nmy_route:\n    path: /my-path\n    controller: App\\Controller\\MyController::index\n    secure: false\n```", correct: false }
    help: |
      The `schemes` option or a `condition` using `context.getScheme()` can be used to enforce a specific scheme.
      https://symfony.com/doc/current/routing.html#scheme-requirements

  -
    question: >
      What is the purpose of the `router:match` command's output showing `_route_params`?
    answers:
      - { value: "It lists the values of all matched route parameters for the given URL.", correct: true }
      - { value: "It shows the default values for the route's parameters.", correct: false }
      - { value: "It indicates which parameters are mandatory for the route.", correct: false }
      - { value: "It displays the requirements defined for each parameter.", correct: false }
    help: |
      The `_route_params` section of the `router:match` output is useful for verifying that parameters are correctly extracted from the URL.
      https://symfony.com/doc/current/routing.html#matching-a-url

  -
    question: >
      What is the primary advantage of defining routes using PHP attributes directly in controllers compared to YAML or XML files?
    answers:
      - { value: "Routes are defined alongside the controller logic, improving discoverability and reducing context switching.", correct: true }
      - { value: "PHP attributes offer better performance for route matching.", correct: false }
      - { value: "It eliminates the need for routing cache warm-up.", correct: false }
      - { value: "PHP attributes support more advanced routing features not available in other formats.", correct: false }
    help: |
      Defining routes with PHP attributes keeps the route definition close to the code that handles it, which can improve developer experience.
      https://symfony.com/doc/current/routing.html#defining-routes-in-controllers

  -
    question: >
      Which of the following is the correct YAML configuration to enable attribute-based routing by scanning the `src/Controller/` directory?
    answers:
      - { value: "```yaml\ncontrollers:\n    resource:\n        path: ../../src/Controller/\n        namespace: App\\Controller\n    type: attribute\n```", correct: true }
      - { value: "```yaml\nroutes:\n    attributes:\n        resource: ../../src/Controller/\n        namespace: App\\Controller\n```", correct: false }
      - { value: "```yaml\nimport:\n    resource: ../../src/Controller/\n    type: attribute\n```", correct: false }
      - { value: "```yaml\nattribute_routes:\n    path: ../../src/Controller/\n    loader: attribute\n```", correct: false }
    help: |
      The `resource` and `type: attribute` keys are used to configure attribute-based routing in YAML.
      https://symfony.com/doc/current/routing.html#enabling-attribute-based-routing

  -
    question: >
      What is the purpose of the `_route` attribute on the `Request` object after a successful route match?
    answers:
      - { value: "It contains the name of the matched route.", correct: true }
      - { value: "It contains the full path of the matched route.", correct: false }
      - { value: "It indicates the type of the matched route (e.g., 'attribute', 'yaml').", correct: false }
      - { value: "It stores the controller callable for the matched route.", correct: false }
    help: |
      The `_route` attribute stores the name of the route that was successfully matched.
      https://symfony.com/doc/current/routing.html#accessing-route-name-and-parameters-from-the-request

  -
    question: >
      When importing routes with a `namePrefix` (e.g., `blog_`), and an imported route has an empty name, what will be its final name?
    answers:
      - { value: "It will inherit only the `namePrefix` (e.g., `blog_`).", correct: true }
      - { value: "It will remain an empty string.", correct: false }
      - { value: "Symfony will generate a unique name for it.", correct: false }
      - { value: "An error will occur because route names cannot be empty.", correct: false }
    help: |
      The `namePrefix` is prepended to the names of all imported routes. If an imported route has no explicit name, the prefix becomes its name.
      https://symfony.com/doc/current/routing.html#route-groups

  -
    question: >
      Which of the following is a valid way to define a route that matches multiple HTTP methods in PHP attributes?
    answers:
      - { value: "```php\n#[Route('/api/data', methods: ['GET', 'POST', 'PUT'])]\n```", correct: true }
      - { value: "```php\n#[Route('/api/data', method: 'ANY')]\n```", correct: false }
      - { value: "```php\n#[Route('/api/data', methods: 'GET|POST|PUT')]\n```", correct: false }
      - { value: "```php\n#[Route('/api/data', http_methods: ['GET', 'POST', 'PUT'])]\n```", correct: false }
    help: |
      The `methods` option in the `#[Route]` attribute accepts an array of allowed HTTP methods.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      What is the correct way to define a route with an optional parameter `page` that defaults to `1` in PHP attributes?
    answers:
      - { value: "```php\n#[Route('/blog/{page<\d+>?1}', name: 'blog_list')]\n```", correct: true }
      - { value: "```php\n#[Route('/blog/{page}', name: 'blog_list', defaults: ['page' => 1])]\n```", correct: true }
      - { value: "```php\n#[Route('/blog/{page?}', name: 'blog_list', default_page: 1)]\n```", correct: false }
      - { value: "```php\n#[Route('/blog/{page}', name: 'blog_list', optional: ['page' => 1])]\n```", correct: false }
    help: |
      Optional parameters can be defined with a default value using the `defaults` option or inline with `?` and the default value.
      https://symfony.com/doc/current/routing.html#setting-default-values-for-parameters

  -
    question: >
      When using `RedirectController` to redirect to an external URL, which `defaults` key should be used to specify the target URL?
    answers:
      - { value: "`path`", correct: true }
      - { value: "`url`", correct: false }
      - { value: "`target`", correct: false }
      - { value: "`redirect_url`", correct: false }
    help: |
      The `path` default key is used to specify the target path or absolute URL for redirection.
      https://symfony.com/doc/current/routing.html#redirecting-routes

  -
    question: >
      What is the impact of defining a route with `stateless: true` on the Symfony session?
    answers:
      - { value: "The session will not be started or used when matching this route, improving caching potential.", correct: true }
      - { value: "The session will be automatically destroyed after the request is handled.", correct: false }
      - { value: "It forces the session to be stored in a stateless manner (e.g., in a cookie).", correct: false }
      - { value: "It disables session management for the entire application.", correct: false }
    help: |
      Marking a route as stateless prevents Symfony from starting or using the session during the request matching process for that route.
      https://symfony.com/doc/current/routing.html#stateless-routes

  -
    question: >
      Which of the following is a valid way to define a route for `/blog/{page}` where `page` must be an integer, using PHP configurator?
    answers:
      - { value: "```php\n$routes->add('blog_list', '/blog/{page}')\n    ->controller([App\\Controller\\BlogController::class, 'list'])\n    ->requirements(['page' => '\\d+'])\n;\n```", correct: true }
      - { value: "```php\n$routes->add('blog_list', '/blog/{page<\\d+>}')\n    ->controller([App\\Controller\\BlogController::class, 'list'])\n;\n```", correct: true }
      - { value: "```php\n$routes->add('blog_list', '/blog/{page}')\n    ->controller([App\\Controller\\BlogController::class, 'list'])\n    ->where('page', '\\d+')\n;\n```", correct: false }
      - { value: "```php\n$routes->add('blog_list', '/blog/{page}')\n    ->controller([App\\Controller\\BlogController::class, 'list'])\n    ->regex('page', '\\d+')\n;\n```", correct: false }
    help: |
      The `requirements()` method or inline regex syntax can be used to define parameter requirements in the PHP configurator.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      What is the correct way to import routes from a controller directory and apply a URL prefix `/admin` and a name prefix `admin_` using YAML?
    answers:
      - { value: "```yaml\nadmin_controllers:\n    resource: '../../src/Controller/'\n    type: attribute\n    prefix: '/admin'\n    name_prefix: 'admin_'\n```", correct: true }
      - { value: "```yaml\nadmin_routes:\n    import: '../../src/Controller/'\n    type: attribute\n    url_prefix: '/admin'\n    route_name_prefix: 'admin_'\n```", correct: false }
      - { value: "```yaml\n- resource: '../../src/Controller/'\n  type: attribute\n  prefix: '/admin'\n  name_prefix: 'admin_'\n```", correct: false }
      - { value: "```yaml\nadmin:\n    path: /admin\n    name: admin_\n    children:\n        resource: '../../src/Controller/'\n        type: attribute\n```", correct: false }
    help: |
      The `prefix` and `name_prefix` options are used directly on the import statement in YAML to apply these settings to all imported routes.
      https://symfony.com/doc/current/routing.html#route-groups

  -
    question: >
      Which of the following is a valid way to define a route that matches any HTTP method?
    answers:
      - { value: "By omitting the `methods` option in the route definition.", correct: true }
      - { value: "By setting `methods: ['ANY']`.", correct: false }
      - { value: "By setting `methods: []`.", correct: false }
      - { value: "By setting `methods: 'ALL'`.", correct: false }
    help: |
      If no `methods` are specified, the route will match any HTTP method.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      What is the significance of the `_route_params` attribute on the `Request` object after a route has been matched?
    answers:
      - { value: "It is an array containing all parameters extracted from the matched URL path.", correct: true }
      - { value: "It contains all query parameters from the request.", correct: false }
      - { value: "It lists all parameters defined in the route's `defaults`.", correct: false }
      - { value: "It's an object representing the route's configuration.", correct: false }
    help: |
      The `_route_params` attribute holds the key-value pairs of all parameters that were matched from the URL.
      https://symfony.com/doc/current/routing.html#accessing-route-name-and-parameters-from-the-request

  -
    question: >
      When generating a URL, what is the difference between `UrlGeneratorInterface::ABSOLUTE_PATH` and `UrlGeneratorInterface::RELATIVE_PATH`?
    answers:
      - { value: "`ABSOLUTE_PATH` generates a path starting from the web root (e.g., `/blog/post`), while `RELATIVE_PATH` generates a path relative to the current request's path.", correct: true }
      - { value: "`ABSOLUTE_PATH` includes the scheme and host, while `RELATIVE_PATH` only includes the path.", correct: false }
      - { value: "`ABSOLUTE_PATH` is for internal redirects, `RELATIVE_PATH` is for external links.", correct: false }
      - { value: "There is no `RELATIVE_PATH` constant; only `ABSOLUTE_PATH` exists.", correct: false }
    help: |
      `ABSOLUTE_PATH` generates a path from the root, while `RELATIVE_PATH` generates a path relative to the current URL.
      https://symfony.com/doc/current/routing.html#generating-urls-in-controllers

  -
    question: >
      Which of the following scenarios would typically lead to a `Symfony\Component\Routing\Exception\ResourceNotFoundException`?
    answers:
      - { value: "A request URL does not match any defined route.", correct: true }
      - { value: "A controller method argument is missing a value.", correct: false }
      - { value: "A route has a syntax error in its definition.", correct: false }
      - { value: "A service required by a controller cannot be found.", correct: false }
    help: |
      `ResourceNotFoundException` is thrown when the `UrlMatcher` cannot find a matching route for the incoming request path.
      https://symfony.com/doc/current/create_framework/routing.html#matching-a-url

  -
    question: >
      What is the purpose of the `#[Route]` attribute on a Symfony controller class (as opposed to a method)?
    answers:
      - { value: "To define common configuration (prefix, name prefix, requirements) for all routes within that controller.", correct: true }
      - { value: "To specify the default route for the controller.", correct: false }
      - { value: "To mark the controller as a routing entry point.", correct: false }
      - { value: "It is deprecated in Symfony 7.", correct: false }
    help: |
      The `#[Route]` attribute on a class allows for grouping routes and applying shared settings.
      https://symfony.com/doc/current/routing.html#route-groups

  -
    question: >
      When defining localized routes, how can you specify different paths for different locales for the same route name in PHP attributes?
    answers:
      - { value: "By providing an associative array to the `path` option, where keys are locales and values are the paths.", correct: true }
      - { value: "By creating separate `#[Route]` attributes for each locale.", correct: false }
      - { value: "By using a `locale_path` option.", correct: false }
      - { value: "Localized paths are not directly supported in PHP attributes.", correct: false }
    help: |
      The `path` option can take an array mapping locales to their specific paths for localized routes.
      https://symfony.com/doc/current/routing.html#localized-routes

  -
    question: >
      What is the primary reason for using `php bin/console debug:router` during development?
    answers:
      - { value: "To inspect the routing configuration and verify that routes are correctly defined and loaded.", correct: true }
      - { value: "To optimize the routing cache for production deployment.", correct: false }
      - { value: "To test the performance of route matching.", correct: false }
      - { value: "To generate a static HTML file of all application routes.", correct: false }
    help: |
      `debug:router` is an invaluable tool for understanding and troubleshooting routing in a Symfony application.
      https://symfony.com/doc/current/routing.html#listing-all-routes

  -
    question: >
      Which of the following is a valid way to define a route that matches only if the request is made from `www.example.com` in YAML?
    answers:
      - { value: "```yaml\nhomepage:\n    path: /\n    controller: App\\Controller\\MainController::homepage\n    host: www.example.com\n```", correct: true }
      - { value: "```yaml\nhomepage:\n    path: /\n    controller: App\\Controller\\MainController::homepage\n    domain: www.example.com\n```", correct: false }
      - { value: "```yaml\nhomepage:\n    path: /\n    controller: App\\Controller\\MainController::homepage\n    requirements:\n        _host: www.example.com\n```", correct: false }
      - { value: "```yaml\nhomepage:\n    path: /\n    controller: App\\Controller\\MainController::homepage\n    condition: \"context.getHost() == 'www.example.com'\"\n```", correct: true }
    help: |
      The `host` option or a `condition` using `context.getHost()` can be used for host-based routing.
      https://symfony.com/doc/current/routing.html#host-based-routing

  -
    question: >
      What is the purpose of the `#[AsCommand]` attribute in a Symfony console command?
    answers:
      - { value: "To define the command's name, description, and other options directly in the class.", correct: true }
      - { value: "To inject services into the command.", correct: false }
      - { value: "To execute the command automatically.", correct: false }
      - { value: "To link the command to a specific controller.", correct: false }
    help: |
      The `#[AsCommand]` attribute is used to configure the command's name, description, and other options directly in the class.
      https://symfony.com/doc/current/console.html#configuring-the-command

  -
    question: >
      Which of the following correctly configures the HTTP client to use HTTP/2?
    answers:
      - { value: "Set the `http_version` option to \"2.0\" in the client configuration.", correct: true }
      - { value: "Set the `version` option to '2.0' in the client configuration.", correct: false }
      - { value: "Enable the `http2` flag in `framework.yaml`.", correct: false }
    help: |
      To use HTTP/2, you must set the `http_version` option to `2.0` when creating the HTTP client.
      https://symfony.com/doc/current/http_client.html#http-2-support

  -
    question: >
      What is the purpose of `Symfony\Bundle\FrameworkBundle\Routing\RouteLoaderInterface`?
    answers:
      - { value: "It is an interface to be implemented by classes that load routes, typically for autoconfiguration.", correct: true }
      - { value: "It defines the contract for loading routes from external sources like databases.", correct: false }
      - { value: "It's a base class for all Symfony route loaders.", correct: false }
      - { value: "It's used to define custom route compilation logic.", correct: false }
    help: |
      `RouteLoaderInterface` is specifically for classes that load routes, often used in conjunction with autoconfiguration.
      https://symfony.com/doc/current/routing/custom_route_loader.html#the-routing-component-api

  -
    question: >
      When defining a route with a dynamic parameter, what is the default behavior regarding trailing slashes?
    answers:
      - { value: "Symfony redirects URLs with a trailing slash to the version without it, and vice-versa, to ensure a canonical URL.", correct: true }
      - { value: "Trailing slashes are always required for dynamic parameters.", correct: false }
      - { value: "Trailing slashes are always ignored for dynamic parameters.", correct: false }
      - { value: "It depends on the web server configuration.", correct: false }
    help: |
      Symfony handles trailing slashes to ensure canonical URLs, often redirecting to the version without a trailing slash by default for dynamic routes.
      https://symfony.com/doc/current/routing.html#trailing-slashes

  -
    question: >
      What is the purpose of the `#[Route]` attribute's `priority` option?
    answers:
      - { value: "To explicitly control the order in which Symfony evaluates routes, with higher values being matched first.", correct: true }
      - { value: "To define the importance of the route for caching mechanisms.", correct: false }
      - { value: "To set the HTTP status code for the route's response.", correct: false }
      - { value: "To indicate whether the route should be included in `debug:router` output.", correct: false }
    help: |
      The `priority` option is crucial for resolving conflicts between routes with similar patterns, ensuring more specific routes are matched first.
      https://symfony.com/doc/current/routing.html#route-priority

  -
    question: >
      How can you define a route that only matches if the request scheme is `HTTPS` in PHP attributes?
    answers:
      - { value: "```php\n#[Route('/secure', schemes: ['https'])]\n```", correct: true }
      - { value: "```php\n#[Route('/secure', scheme: 'https')]\n```", correct: false }
      - { value: "```php\n#[Route('/secure', condition: \"context.getScheme() == 'https'\")]\n```", correct: true }
      - { value: "```php\n#[Route('/secure', secure: true)]\n```", correct: false }
    help: |
      The `schemes` option or a `condition` using `context.getScheme()` can be used to enforce a specific scheme.
      https://symfony.com/doc/current/routing.html#scheme-requirements

  -
    question: >
      What is the primary advantage of using `RoutingConfigurator` in PHP files for route definition compared to direct `RouteCollection` manipulation?
    answers:
      - { value: "It provides a fluent interface and better readability for defining routes, especially for complex configurations.", correct: true }
      - { value: "It offers significantly better performance for route loading.", correct: false }
      - { value: "It allows for dynamic route generation at runtime.", correct: false }
      - { value: "It is the only way to define routes with conditional logic in PHP.", correct: false }
    help: |
      `RoutingConfigurator` simplifies route definition with its fluent API, making PHP routing configuration more readable and maintainable.
      https://symfony.com/doc/current/routing.html#defining-routes-in-php-files

  -
    question: >
      Which of the following is a valid way to define a route that accepts both `html` and `xml` formats, with `html` as the default, in YAML?
    answers:
      - { value: "```yaml\narticle_search:\n    path: /articles/search.{_format}\n    controller: App\\Controller\\ArticleController::search\n    format: html\n    requirements:\n        _format: html|xml\n```", correct: true }
      - { value: "```yaml\narticle_search:\n    path: /articles/search.{_format}\n    controller: App\\Controller\\ArticleController::search\n    defaults:\n        _format: html\n    formats: [html, xml]\n```", correct: false }
      - { value: "```yaml\narticle_search:\n    path: /articles/search.{_format<html|xml>}\n    controller: App\\Controller\\ArticleController::search\n    default_format: html\n```", correct: false }
      - { value: "```yaml\narticle_search:\n    path: /articles/search\n    controller: App\\Controller\\ArticleController::search\n    _format:\n        default: html\n        allowed: [html, xml]\n```", correct: false }
    help: |
      The `format` option sets the default, and `requirements` defines the allowed formats for the `_format` parameter.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      What is the correct way to generate a URL for a route named `product_show` with an `id` parameter of `123` in a Twig template?
    answers:
      - { value: "`{{ path('product_show', {id: 123}) }}`", correct: true }
      - { value: "`{{ url('product_show', {id: 123}) }}`", correct: false }
      - { value: "`{{ route('product_show', {id: 123}) }}`", correct: false }
      - { value: "`{{ link('product_show', {id: 123}) }}`", correct: false }
    help: |
      The `path()` function in Twig is used to generate relative URLs, and `url()` for absolute URLs.
      https://symfony.com/doc/current/routing.html#generating-urls-in-templates

  -
    question: >
      When using `router:match` command, what does the `_controller` value in the output indicate?
    answers:
      - { value: "The fully qualified class name and method that will be executed for the matched route.", correct: true }
      - { value: "The name of the controller service.", correct: false }
      - { value: "The path to the controller file.", correct: false }
      - { value: "The HTTP method of the controller.", correct: false }
    help: |
      The `_controller` value in the `router:match` output shows the callable that Symfony will execute.
      https://symfony.com/doc/current/routing.html#matching-a-url

  -
    question: >
      What is the primary reason for using `UrlGeneratorInterface::NETWORK_PATH` when generating URLs?
    answers:
      - { value: "To generate a URL relative to the current host, without including the scheme (e.g., `//example.com/path`).", correct: true }
      - { value: "To generate a URL that can be used across different networks.", correct: false }
      - { value: "To generate a URL that is optimized for network performance.", correct: false }
      - { value: "It's a deprecated constant; use `ABSOLUTE_URL` instead.", correct: false }
    help: |
      `NETWORK_PATH` generates a URL that is scheme-relative, useful for content that can be served over both HTTP and HTTPS.
      https://symfony.com/doc/current/routing.html#generating-urls-in-controllers

  -
    question: >
      What is the correct way to define a route that matches any HTTP method and any scheme in YAML?
    answers:
      - { value: "```yaml\nmy_route:\n    path: /my-path\n    controller: App\\Controller\\MyController::index\n    methods: [ANY]\n    schemes: [ANY]\n```", correct: false }
      - { value: "```yaml\nmy_route:\n    path: /my-path\n    controller: App\\Controller\\MyController::index\n```", correct: true }
      - { value: "```yaml\nmy_route:\n    path: /my-path\n    controller: App\\Controller\\MyController::index\n    any_method: true\n    any_scheme: true\n```", correct: false }
      - { value: "```yaml\nmy_route:\n    path: /my-path\n    controller: App\\Controller\\MyController::index\n    methods: []\n    schemes: []\n```", correct: false }
    help: |
      Omitting the `methods` and `schemes` options means the route will match any method and any scheme.
      https://symfony.com/doc/current/routing.html#http-method-requirements
      https://symfony.com/doc/current/routing.html#scheme-requirements

  -
    question: >
      When using `RedirectController` to redirect to an internal route, which `defaults` key should be used to specify the target route's name?
    answers:
      - { value: "`route`", correct: true }
      - { value: "`name`", correct: false }
      - { value: "`target_route`", correct: false }
      - { value: "`redirect_route`", correct: false }
    help: |
      The `route` default key is used to specify the name of the internal route to redirect to.
      https://symfony.com/doc/current/routing.html#redirecting-routes

  -
    question: >
      What is the main purpose of the `UrlMatcher` in the context of a Symfony application's request lifecycle?
    answers:
      - { value: "To determine which controller and action should handle an incoming HTTP request based on its URL.", correct: true }
      - { value: "To generate URLs for links and redirects within the application.", correct: false }
      - { value: "To validate the parameters of a URL against defined requirements.", correct: false }
      - { value: "To load and compile route definitions from configuration files.", correct: false }
    help: |
      The `UrlMatcher` is the core component that performs the reverse operation of URL generation, finding a route for a given request.
      https://symfony.com/doc/current/create_framework/routing.html#matching-a-url

  -
    question: >
      Which of the following is a benefit of using PHP backed enums as route parameters in Symfony 7?
    answers:
      - { value: "Automatic type conversion from the URL segment to the enum instance in the controller.", correct: true }
      - { value: "Improved routing performance due to optimized enum matching.", correct: false }
      - { value: "Direct serialization of enum cases to JSON in responses.", correct: false }
      - { value: "Automatic generation of route requirements based on enum values.", correct: false }
    help: |
      Symfony automatically handles the conversion of the scalar route parameter value to the corresponding PHP backed enum instance.
      https://symfony.com/doc/current/routing.html#route-parameters-php-backed-enum

  -
    question: >
      What is the correct way to define a route with a dynamic parameter `slug` and a default value `default-slug` in PHP attributes?
    answers:
      - { value: "```php\n#[Route('/blog/{slug}', name: 'blog_show', defaults: ['slug' => 'default-slug'])]\n```", correct: true }
      - { value: "```php\n#[Route('/blog/{slug?default-slug}', name: 'blog_show')]\n```", correct: true }
      - { value: "```php\n#[Route('/blog/{slug}', name: 'blog_show', default: 'default-slug')]\n```", correct: false }
      - { value: "```php\n#[Route('/blog/{slug}', name: 'blog_show', options: ['default_slug' => 'default-slug'])]\n```", correct: false }
    help: |
      Default values can be set using the `defaults` option or inline with `?` and the default value.
      https://symfony.com/doc/current/routing.html#setting-default-values-for-parameters

  -
    question: >
      When using `router:match`, if a URL matches multiple routes, which route will be displayed in the output?
    answers:
      - { value: "The route that Symfony's router would actually choose based on its internal matching logic (e.g., priority, specificity).", correct: true }
      - { value: "All matching routes will be displayed.", correct: false }
      - { value: "The route that is alphabetically first by name.", correct: false }
      - { value: "The route that was defined first in the configuration.", correct: false }
    help: |
      `router:match` simulates the actual routing process, showing the single route that would be matched.
      https://symfony.com/doc/current/routing.html#matching-a-url

  -
    question: >
      What is the purpose of the `_host` attribute on the `Request` object after a route has been matched?
    answers:
      - { value: "It contains the hostname from the incoming request.", correct: true }
      - { value: "It defines the required hostname for the matched route.", correct: false }
      - { value: "It indicates the default hostname for URL generation.", correct: false }
      - { value: "It's used to force a redirect to a specific host.", correct: false }
    help: |
      The `_host` attribute reflects the host of the incoming request.
      https://symfony.com/doc/current/routing.html#host-based-routing

  -
    question: >
      What is the primary function of `Symfony\Component\Routing\Generator\UrlGeneratorInterface`?
    answers:
      - { value: "To generate URLs for named routes, considering parameters, schemes, and hosts.", correct: true }
      - { value: "To match incoming URLs to route definitions.", correct: false }
      - { value: "To load route definitions from various sources.", correct: false }
      - { value: "To validate URL parameters against requirements.", correct: false }
    help: |
      `UrlGeneratorInterface` is the contract for generating URLs in Symfony.
      https://symfony.com/doc/current/routing.html#generating-urls-in-services

  -
    question: >
      Which of the following is a valid way to define a route that matches based on a custom header, e.g., `X-Requested-With: XMLHttpRequest`?
    answers:
      - { value: "Using the `condition` option with `request.headers.get('X-Requested-With') == 'XMLHttpRequest'`.", correct: true }
      - { value: "Using a `headers` option in the route definition.", correct: false }
      - { value: "Using a custom route loader that inspects headers.", correct: false }
      - { value: "This type of matching is not directly supported by Symfony's core routing.", correct: false }
    help: |
      Complex conditions involving request headers can be defined using the Expression Language `condition` option.
      https://symfony.com/doc/current/routing.html#conditional-request-matching

  -
    question: >
      What is the correct way to define a route that only accepts `POST` requests in PHP attributes?
    answers:
      - { value: "```php\n#[Route('/submit', methods: ['POST'])]\n```", correct: true }
      - { value: "```php\n#[Route('/submit', method: 'POST')]\n```", correct: false }
      - { value: "```php\n#[Route('/submit', allow_method: 'POST')]\n```", correct: false }
      - { value: "```php\n#[Route('/submit', condition: \"context.getMethod() == 'POST'\")]\n```", correct: true }
    help: |
      The `methods` option or a `condition` using `context.getMethod()` can be used to restrict routes by HTTP method.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      When using `debug:router`, what does the `Host` column indicate?
    answers:
      - { value: "The required hostname for the route to match, or `ANY` if no host is specified.", correct: true }
      - { value: "The IP address of the server hosting the application.", correct: false }
      - { value: "The default host used for URL generation.", correct: false }
      - { value: "The host from which the `debug:router` command was executed.", correct: false }
    help: |
      The `Host` column in `debug:router` output displays the host requirements for each route.
      https://symfony.com/doc/current/routing.html#listing-all-routes

  -
    question: >
      What is the primary benefit of using `php bin/console router:match` over manually testing URLs in a browser for debugging routing issues?
    answers:
      - { value: "It provides detailed information about the matched route, including parameters and controller, without requiring a full HTTP request.", correct: true }
      - { value: "It is faster than making actual HTTP requests.", correct: false }
      - { value: "It can simulate different HTTP methods and headers.", correct: false }
      - { value: "It automatically suggests corrections for routing errors.", correct: false }
    help: |
      `router:match` offers a precise and detailed insight into how Symfony's router interprets a given URL, which is invaluable for debugging.
      https://symfony.com/doc/current/routing.html#matching-a-url

  -
    question: >
      What is the purpose of the `_locale` parameter when defining localized routes with different paths for various locales?
    answers:
      - { value: "It allows the same route name to resolve to different URLs based on the active language.", correct: true }
      - { value: "It automatically translates the content of the page associated with the route.", correct: false }
      - { value: "It is used to filter routes based on the user's browser language.", correct: false }
      - { value: "It defines the default language for the entire application.", correct: false }
    help: |
      Localized routes enable different URL paths for the same logical route depending on the locale.
      https://symfony.com/doc/current/routing.html#localized-routes

  -
    question: >
      Which of the following is a valid way to define a route that matches only if the request is made from `example.com` and the scheme is `https` in PHP attributes?
    answers:
      - { value: "```php\n#[Route('/', host: 'example.com', schemes: ['https'])]\n```", correct: true }
      - { value: "```php\n#[Route('/', host: 'example.com', scheme: 'https')]\n```", correct: false }
      - { value: "```php\n#[Route('/', condition: \"context.getHost() == 'example.com' and context.getScheme() == 'https'\")]\n```", correct: true }
      - { value: "```php\n#[Route('/', domain: 'example.com', secure: true)]\n```", correct: false }
    help: |
      Both the `host` and `schemes` options or a combined `condition` can be used to specify these requirements.
      https://symfony.com/doc/current/routing.html#host-based-routing
      https://symfony.com/doc/current/routing.html#scheme-requirements

  -
    question: >
      What is the correct way to define a route with a custom `condition` expression in YAML?
    answers:
      - { value: "```yaml\nmy_route:\n    path: /my-path\n    controller: App\\Controller\\MyController::index\n    condition: \"request.headers.get('User-Agent') matches '/chrome/i'\"\n```", correct: true }
      - { value: "```yaml\nmy_route:\n    path: /my-path\n    controller: App\\Controller\\MyController::index\n    when: \"request.headers.get('User-Agent') matches '/chrome/i'\"\n```", correct: false }
      - { value: "```yaml\nmy_route:\n    path: /my-path\n    controller: App\\Controller\\MyController::index\n    if: \"request.headers.get('User-Agent') matches '/chrome/i'\"\n```", correct: false }
      - { value: "```yaml\nmy_route:\n    path: /my-path\n    controller: App\\Controller\\MyController::index\n    match_if: \"request.headers.get('User-Agent') matches '/chrome/i'\"\n```", correct: false }
    help: |
      The `condition` key in YAML accepts an Expression Language string.
      https://symfony.com/doc/current/routing.html#conditional-request-matching

  -
    question: >
      What is the purpose of the `_fragment` parameter when generating a URL using `generateUrl()`?
    answers:
      - { value: "It adds a fragment identifier (e.g., `#section`) to the generated URL.", correct: true }
      - { value: "It specifies a Twig template fragment to render.", correct: false }
      - { value: "It is used for AJAX requests to load partial content.", correct: false }
      - { value: "It defines a default fragment for the route.", correct: false }
    help: |
      The `_fragment` parameter is used to append a URL fragment to the generated URL.
      https://symfony.com/doc/current/routing.html#special-routing-parameters

  -
    question: >
      Which of the following is a valid way to define a route with an inline requirement that the `slug` parameter must consist of alphanumeric characters and hyphens?
    answers:
      - { value: "```php\n#[Route('/posts/{slug<[a-zA-Z0-9-]+>}', name: 'post_show')]\n```", correct: true }
      - { value: "```php\n#[Route('/posts/{slug:alpha_dash}', name: 'post_show')]\n```", correct: false }
      - { value: "```php\n#[Route('/posts/{slug}', name: 'post_show', requirements: ['slug' => '[a-zA-Z0-9-]+'])]\n```", correct: true }
      - { value: "```php\n#[Route('/posts/{slug}', name: 'post_show', regex: '[a-zA-Z0-9-]+')]\n```", correct: false }
    help: |
      Inline requirements or the `requirements` option can be used with regular expressions to validate parameter formats.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements

  -
    question: >
      What is the primary purpose of the `UrlGeneratorInterface::RELATIVE_PATH` constant when generating URLs?
    answers:
      - { value: "To generate a URL that is relative to the current request's path (e.g., `../images/logo.png`).", correct: true }
      - { value: "To generate a URL that is relative to the web root (e.g., `/images/logo.png`).", correct: false }
      - { value: "To generate a URL without the scheme and host.", correct: false }
      - { value: "To generate a URL that is only valid within the same controller.", correct: false }
    help: |
      `RELATIVE_PATH` is used for generating URLs that are relative to the current location in the URL structure.
      https://symfony.com/doc/current/routing.html#generating-urls-in-controllers

  -
    question: >
      When using `debug:router`, what does the `Path` column indicate?
    answers:
      - { value: "The URL path pattern that the route matches.", correct: true }
      - { value: "The file path to the controller associated with the route.", correct: false }
      - { value: "The absolute URL of the route.", correct: false }
      - { value: "The base path of the application.", correct: false }
    help: |
      The `Path` column shows the URL pattern, including any parameters, that the route is configured to match.
      https://symfony.com/doc/current/routing.html#listing-all-routes

  -
    question: >
      What is the correct way to define a route that matches any HTTP method and any scheme in PHP attributes?
    answers:
      - { value: "```php\n#[Route('/my-path')]\n```", correct: true }
      - { value: "```php\n#[Route('/my-path', methods: ['ANY'], schemes: ['ANY'])]\n```", correct: false }
      - { value: "```php\n#[Route('/my-path', anyMethod: true, anyScheme: true)]\n```", correct: false }
      - { value: "```php\n#[Route('/my-path', methods: [], schemes: [])]\n```", correct: false }
    help: |
      Omitting the `methods` and `schemes` options in `#[Route]` means the route will match any method and any scheme.
      https://symfony.com/doc/current/routing.html#http-method-requirements
      https://symfony.com/doc/current/routing.html#scheme-requirements

  -
    question: >
      What is the purpose of the `_route` attribute on the `Request` object?
    answers:
      - { value: "It stores the name of the route that was matched for the current request.", correct: true }
      - { value: "It stores the full path of the matched route.", correct: false }
      - { value: "It stores the controller callable for the matched route.", correct: false }
      - { value: "It stores the HTTP method used for the matched route.", correct: false }
    help: |
      The `_route` attribute provides the name of the currently matched route.
      https://symfony.com/doc/current/routing.html#accessing-route-name-and-parameters-from-the-request

  -
    question: >
      When using `RedirectController` to redirect to an internal route, how do you pass additional parameters to the target route?
    answers:
      - { value: "By including them as key-value pairs directly in the `defaults` section alongside `route`.", correct: true }
      - { value: "By appending them as a query string to the `route` value.", correct: false }
      - { value: "By using a separate `route_params` key in the `defaults`.", correct: false }
      - { value: "Additional parameters are not supported for internal route redirects.", correct: false }
    help: |
      Any additional key-value pairs in the `defaults` section will be passed as arguments to the target route.
      https://symfony.com/doc/current/routing.html#redirecting-routes

  -
    question: >
      What is the correct way to define a route with a dynamic parameter `id` that must be a positive integer (greater than 0) using PHP attributes?
    answers:
      - { value: "```php\n#[Route('/product/{id<\d+>}', name: 'product_show', requirements: ['id' => '[1-9]\d*'])]\n```", correct: true }
      - { value: "```php\n#[Route('/product/{id<\d+>}', name: 'product_show', condition: \"params['id'] > 0\")]\n```", correct: true }
      - { value: "```php\n#[Route('/product/{id:positive_int}', name: 'product_show')]\n```", correct: false }
      - { value: "```php\n#[Route('/product/{id}', name: 'product_show', min: ['id' => 1])]\n```", correct: false }
    help: |
      Regular expressions in `requirements` or a `condition` can enforce specific numeric constraints.
      https://symfony.com/doc/current/routing.html#route-parameters-requirements
      https://symfony.com/doc/current/routing.html#conditional-request-matching

  -
    question: >
      What is the purpose of the `router.cache_clear` command in Symfony?
    answers:
      - { value: "To clear the routing cache, forcing Symfony to re-read route definitions from configuration files.", correct: true }
      - { value: "To optimize the routing cache for faster lookups.", correct: false }
      - { value: "To display the contents of the routing cache.", correct: false }
      - { value: "To rebuild the entire application cache, including routing.", correct: false }
    help: |
      `router:cache:clear` (or `cache:clear` which includes it) is used to invalidate and rebuild the routing cache.
      https://symfony.com/doc/current/console.html#cache-commands

  -
    question: >
      Which of the following is a valid way to define a route with a `condition` that uses an environment variable `APP_ENV` in YAML?
    answers:
      - { value: "```yaml\nmy_route:\n    path: /my-path\n    controller: App\\Controller\\MyController::index\n    condition: \"env('APP_ENV') == 'dev'\"\n```", correct: true }
      - { value: "```yaml\nmy_route:\n    path: /my-path\n    controller: App\\Controller\\MyController::index\n    condition: \"getenv('APP_ENV') == 'dev'\"\n```", correct: false }
      - { value: "```yaml\nmy_route:\n    path: /my-path\n    controller: App\\Controller\\MyController::index\n    env_condition: \"APP_ENV == 'dev'\"\n```", correct: false }
      - { value: "```yaml\nmy_route:\n    path: /my-path\n    controller: App\\Controller\\MyController::index\n    when_env: dev\n```", correct: false }
    help: |
      The `env()` function in Expression Language allows access to environment variables.
      https://symfony.com/doc/current/routing.html#conditional-request-matching

  -
    question: >
      What is the purpose of the `_format` parameter when defining a route like `/articles/{_locale}/search.{_format}`?
    answers:
      - { value: "It allows the route to match different file extensions (e.g., `.html`, `.json`) and sets the request format accordingly.", correct: true }
      - { value: "It specifies the default response format for the route.", correct: false }
      - { value: "It is used for content negotiation based on the `Accept` header.", correct: false }
      - { value: "It defines the output format of the debugging information for the route.", correct: false }
    help: |
      The `_format` parameter is typically used to handle different content types based on the URL extension.
      https://symfony.com/doc/current/routing.html#special-routing-parameters