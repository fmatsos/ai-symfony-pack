category: Routing
questions:
  - question: What is the primary purpose of the `#[Route]` attribute in a Symfony
      controller method?
    answers:
      - value: To define the URL path and name for a specific controller action.
        correct: true
      - value: To inject services into the controller method.
        correct: false
      - value: To specify the HTTP client configuration for external requests.
        correct: false
      - value: To mark the controller as a service.
        correct: false
    help: |-
      The `#[Route]` attribute is used to associate a URL path with a controller method and give it a unique name. This is the most common way to define routes in modern Symfony applications.
      https://symfony.com/doc/current/routing.html#defining-routes-as-php-attributes
  - question: How do you define a basic route named `blog_list` for the path `/blog`
      in `config/routes.yaml`?
    answers:
      - value: |-
          blog_list:
              path: /blog
              controller: App\Controller\BlogController::list
        correct: true
      - value: |-
          route blog_list:
              url: /blog
              action: App\Controller\BlogController::list
        correct: false
      - value: |-
          path: /blog
          name: blog_list
          controller: App\Controller\BlogController::list
        correct: false
      - value: |-
          blog_list:
              route: /blog
              handler: App\Controller\BlogController::list
        correct: false
    help: >-
      In YAML, routes are defined as a key (route name) with `path` and
      `controller` properties. The controller value uses the `FQCN::method_name`
      format.

      https://symfony.com/doc/current/routing.html#defining-routes-as-yaml
  - question: Which of the following correctly restricts a route parameter named
      `id` to only accept digits using PHP attributes?
    answers:
      - value: "#[Route('/posts/{id}', requirements: ['id' => '\\\\d+'])]"
        correct: true
      - value: "#[Route('/posts/{id<\\\\d+>}')]"
        correct: true
      - value: "#[Route('/posts/{id}', regex: {'id': '\\\\d+'})]"
        correct: false
      - value: "#[Route('/posts/{id}', constraints: ['id' => 'digit'])]"
        correct: false
    help: >-
      Route parameter requirements can be defined using the `requirements`
      option with a regular expression, or inlined directly in the path using
      the `{parameter_name<requirements>}` syntax.

      https://symfony.com/doc/current/routing.html#adding-requirements
  - question: "Given the route `#[Route('/blog/{page}', name: 'blog_list',
      requirements: ['page' => '\\\\d+'])]`, how can you make the `page`
      parameter optional with a default value of `1` using PHP attributes?"
    answers:
      - value: "By setting a default value in the controller method signature: `public
          function list(int $page = 1): Response`"
        correct: true
      - value: "By adding `defaults: ['page' => 1]` to the `#[Route]` attribute."
        correct: false
      - value: By modifying the route path to `/blog/{page?1}`.
        correct: false
      - value: By modifying the route path to `/blog/{page<\\d+>?1}`.
        correct: true
    help: >-
      Optional parameters with default values can be handled by providing a
      default in the controller method signature or by using the inline default
      syntax `?default_value` in the route path definition, often combined with
      requirements.

      https://symfony.com/doc/current/routing.html#optional-parameters
  - question: Which method is typically used in a Symfony controller (extending
      `AbstractController`) to generate a URL for a given route name?
    answers:
      - value: "`$this->generateUrl('route_name', [...]);`"
        correct: true
      - value: "`$this->router->generate('route_name', [...]);`"
        correct: false
      - value: "`$this->getUrl('route_name', [...]);`"
        correct: false
      - value: "`$this->createUrl('route_name', [...]);`"
        correct: false
    help: |-
      The `AbstractController` provides a convenient `generateUrl()` helper method that internally uses the `UrlGeneratorInterface`.
      https://symfony.com/doc/current/routing.html#generating-urls-in-controllers
  - question: Which Twig function is used to generate a relative URL for a Symfony route?
    answers:
      - value: "`path()`"
        correct: true
      - value: "`url()`"
        correct: false
      - value: "`route()`"
        correct: false
      - value: "`link()`"
        correct: false
    help: >-
      The `path()` Twig function generates relative URLs (without scheme and
      host) for a given route. The `url()` function generates absolute URLs.

      https://symfony.com/doc/current/templates.html#linking-to-pages
  - question: "To perform a permanent (HTTP 301) redirect to another internal route
      named `doc_page` with parameters `page: 'index'` and `version: 'current'`
      using Symfony's `RedirectController` in YAML, which configuration is
      correct?"
    answers:
      - value: >-
          doc_shortcut:
              path: /doc
              controller: Symfony\Bundle\FrameworkBundle\Controller\RedirectController
              defaults:
                  route: 'doc_page'
                  page: 'index'
                  version: 'current'
                  permanent: true
        correct: true
      - value: |-
          doc_shortcut:
              path: /doc
              redirect_to: doc_page
              parameters:
                  page: 'index'
                  version: 'current'
              status: 301
        correct: false
      - value: >-
          doc_shortcut:
              path: /doc
              controller: Symfony\Bundle\FrameworkBundle\Controller\RedirectController
              target_route: doc_page
              params:
                  page: 'index'
                  version: 'current'
              type: permanent
        correct: false
    help: >-
      The `RedirectController` is used for internal and external redirects. For
      internal routes, specify the `route` default and any route parameters. Set
      `permanent: true` for a 301 redirect.

      https://symfony.com/doc/current/routing.html#redirecting-routes
  - question: Which special internal routing attribute is used to set the locale on
      the request, influencing translation and localization?
    answers:
      - value: "`_locale`"
        correct: true
      - value: "`_lang`"
        correct: false
      - value: "`_language`"
        correct: false
      - value: "`_i18n`"
        correct: false
    help: |-
      Symfony provides several special internal parameters. `_locale` is specifically used to manage the application's locale for the current request.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: How do you define a route that matches a specific subdomain like
      `m.example.com` using PHP attributes?
    answers:
      - value: "#[Route('/', name: 'mobile_homepage', host: 'm.example.com')]"
        correct: true
      - value: "#[Route('/', name: 'mobile_homepage', domain: 'm.example.com')]"
        correct: false
      - value: "#[Route('/', name: 'mobile_homepage', hostname: 'm.example.com')]"
        correct: false
      - value: "#[Route('/', name: 'mobile_homepage', server: 'm.example.com')]"
        correct: false
    help: >-
      The `host` option in the `#[Route]` attribute allows you to define routes
      that only match a specific hostname or subdomain.

      https://symfony.com/doc/current/routing.html#domain-name-matching
  - question: Which of the following correctly adds a conditional expression to a
      route defined with PHP attributes to only match `GET` or `HEAD` requests
      and a Firefox user agent?
    answers:
      - value: "#[Route('/contact', name: 'contact', condition: \"context.getMethod() in
          ['GET', 'HEAD'] and request.headers.get('User-Agent') matches
          '/firefox/i'\")]"
        correct: true
      - value: "#[Route('/contact', name: 'contact', if: \"request.method in ['GET',
          'HEAD'] and request.userAgent matches 'firefox'\")]"
        correct: false
      - value: "#[Route('/contact', name: 'contact', requirements: ['_method':
          'GET|HEAD', 'User-Agent': '/firefox/i'])]"
        correct: false
    help: |-
      The `condition` option in the `#[Route]` attribute accepts an Expression Language string. You can access the `context` (RequestContext) and `request` (Request) objects within this expression.
      https://symfony.com/doc/current/routing.html#matching-routes-with-conditions
  - question: To restrict a route to only accept `POST` requests using YAML
      configuration, what option would you use?
    answers:
      - value: "methods: POST"
        correct: true
      - value: "http_methods: POST"
        correct: false
      - value: "allow_methods: [POST]"
        correct: false
      - value: "request_methods: POST"
        correct: false
    help: >-
      The `methods` option is used to restrict a route to one or more HTTP
      methods. For multiple methods, use a pipe `|` separated string or a YAML
      list.

      https://symfony.com/doc/current/routing.html#restricting-to-an-http-method
  - question: Which Symfony console command is used to list all registered routes in
      an application?
    answers:
      - value: "`php bin/console debug:router`"
        correct: true
      - value: "`php bin/console router:list`"
        correct: false
      - value: "`php bin/console routes:show`"
        correct: false
      - value: "`php bin/console list:routes`"
        correct: false
    help: >-
      The `debug:router` command is essential for inspecting and debugging
      routing configurations, providing a comprehensive list of all defined
      routes.

      https://symfony.com/doc/current/routing.html#router-debugging
  - question: How do you import routes defined using PHP attributes from the
      `src/Controller/` directory in `config/routes.yaml`?
    answers:
      - value: |-
          controllers:
              resource: '../src/Controller/'
              type: attribute
        correct: true
      - value: |-
          imports:
              - { resource: '../src/Controller/', type: 'attribute' }
        correct: false
      - value: |-
          app_attributes:
              path: '../src/Controller/'
              format: attribute
        correct: false
      - value: |-
          include:
              dir: '../src/Controller/'
              loader: attribute
        correct: false
    help: |-
      Symfony's routing component can load routes from PHP attributes by specifying the `resource` (path) and `type: attribute`.
      https://symfony.com/doc/current/routing/custom_route_loader.html#configuring-default-route-loading
  - question: |-
      Given the following PHP attribute route, what does `{page<\\d+>}` signify?
      ```php
      #[Route('/blog/{page<\\d+>}', name: 'blog_list')]
      public function list(int $page): Response
      {
          // ...
      }
      ```
    answers:
      - value: It defines a route parameter named `page` that must be a digit (or
          sequence of digits).
        correct: true
      - value: It defines a route parameter named `page` with a default value of `d+`.
        correct: false
      - value: It specifies that the `page` parameter should be formatted as a date.
        correct: false
      - value: It indicates that the `page` parameter is optional.
        correct: false
    help: >-
      This is an example of an inlined regular expression requirement. The
      `<requirements>` part after the parameter name defines a regex that the
      parameter's value must match.

      https://symfony.com/doc/current/routing.html#inlining-requirements
  - question: To generate an absolute URL (e.g., `http://example.com/path`) using
      `UrlGeneratorInterface` in a Symfony service, which `referenceType`
      constant should be passed?
    answers:
      - value: "`UrlGeneratorInterface::ABSOLUTE_URL`"
        correct: true
      - value: "`UrlGeneratorInterface::ABSOLUTE_PATH`"
        correct: false
      - value: "`UrlGeneratorInterface::NETWORK_PATH`"
        correct: false
      - value: "`UrlGeneratorInterface::RELATIVE_PATH`"
        correct: false
    help: >-
      The `UrlGeneratorInterface` defines constants for different URL generation
      types. `ABSOLUTE_URL` generates a full URL including scheme and host.

      https://symfony.com/doc/current/routing.html#generating-urls-in-services
  - question: What is the primary role of the `_controller` special internal routing
      attribute?
    answers:
      - value: It determines which controller and action is executed when the route is
          matched.
        correct: true
      - value: It defines the default HTTP method for the route.
        correct: false
      - value: It specifies the template to render for the route.
        correct: false
      - value: It sets the cache lifetime for the route's response.
        correct: false
    help: |-
      The `_controller` attribute is fundamental to Symfony's routing, as it directly maps a matched route to the PHP callable (controller and method) that will handle the request.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: How would you define a route that matches dynamic subdomains like
      `{subdomain}.example.com` and sets a default value for `subdomain` to `m`,
      while also requiring `subdomain` to be either `m` or `mobile` using PHP
      attributes?
    answers:
      - value: "#[Route('/', name: 'mobile_homepage', host: '{subdomain}.example.com',
          defaults: ['subdomain' => 'm'], requirements: ['subdomain' =>
          'm|mobile'])]"
        correct: true
      - value: "#[Route('/', name: 'mobile_homepage', domain: '{subdomain}.example.com',
          default_subdomain: 'm', subdomain_regex: 'm|mobile')]"
        correct: false
      - value: "#[Route('/', name: 'mobile_homepage', host: '{subdomain}', defaults:
          ['subdomain' => 'm'], requirements: ['subdomain' => 'm|mobile'])]"
        correct: false
      - value: "#[Route('/', name: 'mobile_homepage', host: '{subdomain}.example.com',
          default: 'm', regex: 'm|mobile')]"
        correct: false
    help: >-
      Dynamic host matching allows for flexible subdomain routing. The `host`
      option supports parameters, and `defaults` and `requirements` can be
      applied to these host parameters.

      https://symfony.com/doc/current/routing.html#sub-domain-routing
  - question: Which expression language variable in a route condition provides
      access to the `Symfony\Component\HttpFoundation\Request` object?
    answers:
      - value: "`request`"
        correct: true
      - value: "`context`"
        correct: false
      - value: "`app`"
        correct: false
      - value: "`this`"
        correct: false
    help: |-
      The `request` variable in route conditions directly exposes the current `Request` object, allowing access to its properties like headers, methods, etc.
      https://symfony.com/doc/current/routing.html#expression-language-for-conditions
  - question: What exception is thrown by Symfony's `UrlGenerator` when mandatory
      parameters are missing to generate a URL for a route?
    answers:
      - value: "`Symfony\\Component\\Routing\\Exception\\MissingMandatoryParametersExce\
          ption`"
        correct: false
      - value: "`Symfony\\Component\\Routing\\Exception\\RouteNotFoundException`"
        correct: true
      - value: "`InvalidArgumentException`"
        correct: false
      - value: "`LogicException`"
        correct: false
    help: >-
      When attempting to generate a URL for a route that requires certain
      parameters, if those parameters are not provided, Symfony throws a
      `RouteNotFoundException` (which is a subclass of
      `InvalidArgumentException`). The message will typically indicate the
      missing parameters.

      https://symfony.com/doc/current/routing.html#url-generation-errors
  - question: Which Symfony console command allows you to test which route matches a
      given URL path?
    answers:
      - value: "`php bin/console router:match /your/path`"
        correct: true
      - value: "`php bin/console debug:url /your/path`"
        correct: false
      - value: "`php bin/console route:test /your/path`"
        correct: false
      - value: "`php bin/console match:route /your/path`"
        correct: false
    help: >-
      The `router:match` command is used to simulate a request and determine
      which route Symfony would match for a given URL, along with the matched
      parameters.

      https://symfony.com/doc/current/routing.html#router-debugging
  - question: How do you define a route named `blog_list` for the path `/blog` and
      specify its controller as `App\Controller\BlogController::list` using
      `RoutingConfigurator` in a `config/routes.php` file?
    answers:
      - value: |-
          return function (RoutingConfigurator $routes): void {
              $routes->add('blog_list', '/blog')
                  ->controller([BlogController::class, 'list'])
              ;
          };
        correct: true
      - value: |-
          return function (RoutingConfigurator $routes): void {
              $routes->set('blog_list', '/blog')
                  ->action('App\Controller\BlogController::list')
              ;
          };
        correct: false
      - value: |-
          return function (RoutingConfigurator $routes): void {
              $routes->route('blog_list', '/blog')
                  ->handler('App\Controller\BlogController::list')
              ;
          };
        correct: false
    help: >-
      The `RoutingConfigurator` provides a fluent interface for defining routes
      programmatically in PHP. The `add()` method defines the route name and
      path, and `controller()` specifies the callable.

      https://symfony.com/doc/current/routing.html#defining-routes-as-php-files
  - question: To allow a route parameter named `token` to contain slash characters
      (`/`) using YAML configuration, which requirement would you set?
    answers:
      - value: |-
          requirements:
              token: .+
        correct: true
      - value: |-
          requirements:
              token: '.*'
        correct: false
      - value: |-
          requirements:
              token: '[^/]+'
        correct: false
      - value: |-
          requirements:
              token: '.*?'
        correct: false
    help: |-
      By default, route parameters do not match the `/` character. To allow it, you must explicitly define a requirement using a regular expression like `.+`.
      https://symfony.com/doc/current/routing.html#allowing-a-slash-character-in-a-route-parameter
  - question: If you have a PHP 8.1+ Backed Enum `OrderStatusEnum` and a route
      `/orders/list/{status}`, how can Symfony automatically convert the
      `status` route parameter to an `OrderStatusEnum` instance in the
      controller method signature?
    answers:
      - value: By type-hinting the controller method argument with `OrderStatusEnum
          $status`.
        correct: true
      - value: "By adding `#[ParamConverter(class: OrderStatusEnum::class)]` to the
          controller method."
        correct: false
      - value: "By defining a `defaults: ['_enum_class': OrderStatusEnum::class]` in the
          route."
        correct: false
      - value: Symfony does not support automatic conversion of route parameters to
          Backed Enums.
        correct: false
    help: |-
      Symfony's ParamConverter, specifically the `BackedEnumValueResolver`, automatically converts route parameters to Backed Enum instances when the controller argument is type-hinted with the enum.
      https://symfony.com/doc/current/routing.html#route-parameters-with-backed-enums
  - question: When redirecting to an internal route using
      `Symfony\Bundle\FrameworkBundle\Controller\RedirectController`, which
      `defaults` option should be set to `true` to preserve the original query
      string parameters?
    answers:
      - value: "`keepQueryParams`"
        correct: true
      - value: "`preserveQuery`"
        correct: false
      - value: "`withQueryParams`"
        correct: false
      - value: "`passQueryParams`"
        correct: false
    help: >-
      The `RedirectController` offers several options to control redirect
      behavior. `keepQueryParams` ensures that any query parameters from the
      original request are appended to the redirected URL.

      https://symfony.com/doc/current/routing.html#redirecting-routes
  - question: If a route defines `_format` as a parameter (e.g.,
      `/articles.{_format}`), what does Symfony use its matched value for?
    answers:
      - value: To set the 'request format' of the `Request` object, influencing the
          `Content-Type` of the response.
        correct: true
      - value: To determine the file extension of the controller template.
        correct: false
      - value: To automatically convert the response to the specified format.
        correct: false
      - value: To define the default response format if none is explicitly set.
        correct: false
    help: |-
      The `_format` special parameter is used by Symfony to set the request format, which is crucial for content negotiation and determining the appropriate `Content-Type` header for the response.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: In YAML, how can you configure routes to use different hosts based on
      the locale (e.g., `www.example.com` for `en`, `www.example.nl` for `nl`)
      when importing controller routes?
    answers:
      - value: |-
          controllers:
              resource: '../../src/Controller/'
              type: attribute
              host:
                  en: 'www.example.com'
                  nl: 'www.example.nl'
        correct: true
      - value: |-
          controllers:
              resource: '../../src/Controller/'
              type: attribute
              hosts:
                  en: 'www.example.com'
                  nl: 'www.example.nl'
        correct: false
      - value: |-
          controllers:
              resource: '../../src/Controller/'
              type: attribute
              domain_mapping:
                  en: 'www.example.com'
                  nl: 'www.example.nl'
        correct: false
    help: >-
      Locale-based host routing allows you to serve different language versions
      of your site on distinct domains. This is configured under the `host`
      option for imported routes.

      https://symfony.com/doc/current/routing.html#locale-based-domain-names
  - question: What attribute is used to mark a service as a routing condition
      service in Symfony, making it available for use in route conditions via
      `service()` expression language function?
    answers:
      - value: "`#[AsRoutingConditionService]`"
        correct: true
      - value: "`#[RoutingCondition]`"
        correct: false
      - value: "`#[AsRouteCondition]`"
        correct: false
      - value: "`#[ServiceCondition]`"
        correct: false
    help: |-
      The `#[AsRoutingConditionService]` attribute (from `Symfony\Bundle\FrameworkBundle\Routing\Attribute`) registers a service to be used within route conditions, allowing complex logic to determine route matching.
      https://symfony.com/doc/current/routing.html#using-a-service-in-a-condition
  - question: To allow a route to respond to both `GET` and `HEAD` HTTP methods
      using PHP attributes, how would you configure it?
    answers:
      - value: "#[Route('/api/posts/{id}', methods: ['GET', 'HEAD'])]"
        correct: true
      - value: "#[Route('/api/posts/{id}', method: 'GET|HEAD')]"
        correct: false
      - value: "#[Route('/api/posts/{id}', http_methods: ['GET', 'HEAD'])]"
        correct: false
      - value: "#[Route('/api/posts/{id}', allow: ['GET', 'HEAD'])]"
        correct: false
    help: >-
      The `methods` option in the `#[Route]` attribute accepts an array of HTTP
      methods that the route should respond to.

      https://symfony.com/doc/current/routing.html#restricting-to-an-http-method
  - question: When using `php bin/console debug:router`, how can you get detailed
      information about a specific route, including its options and
      requirements?
    answers:
      - value: "By appending the route name: `php bin/console debug:router
          app_lucky_number`"
        correct: true
      - value: "By using the `--verbose` option: `php bin/console debug:router
          --verbose`"
        correct: false
      - value: "By using the `--details` option: `php bin/console debug:router
          --details`"
        correct: false
      - value: By piping the output to `grep` for the route name.
        correct: false
    help: >-
      The `debug:router` command accepts an optional argument, which is the name
      of the route you want to inspect in detail.

      https://symfony.com/doc/current/routing.html#router-debugging
  - question: How do you apply a URL prefix (e.g., `/blog`) to a group of imported
      routes in `config/routes.yaml`?
    answers:
      - value: |-
          controllers:
              resource: '../../src/Controller/'
              type: attribute
              prefix: '/blog'
        correct: true
      - value: >-
          imports:
              - { resource: '../../src/Controller/', type: 'attribute', prefix: '/blog' }
        correct: false
      - value: |-
          blog_routes:
              path_prefix: /blog
              resource: '../../src/Controller/'
              type: attribute
        correct: false
    help: >-
      When importing routes, the `prefix` option adds a common URL segment to
      all routes loaded from that resource.

      https://symfony.com/doc/current/routing.html#route-groups-and-prefixes
  - question: What is the primary difference between Twig's `path()` and `url()`
      functions for URL generation?
    answers:
      - value: "`path()` generates relative URLs, while `url()` generates absolute URLs
          (with scheme and host)."
        correct: true
      - value: "`path()` is for internal routes, `url()` is for external URLs."
        correct: false
      - value: "`path()` is for GET requests, `url()` is for POST requests."
        correct: false
      - value: "`path()` is deprecated, `url()` is the modern approach."
        correct: false
    help: >-
      Twig provides two main functions for URL generation: `path()` for relative
      paths and `url()` for full absolute URLs. This distinction is important
      for various linking scenarios.

      https://symfony.com/doc/current/reference/twig_reference.html#path
  - question: What is the purpose of the `_fragment` special internal routing attribute?
    answers:
      - value: It is used to set the fragment identifier, the optional last part of a
          URL that starts with a `#` character.
        correct: true
      - value: It defines a part of the URL that is ignored by the router.
        correct: false
      - value: It specifies a default value for a missing route parameter.
        correct: false
      - value: It indicates that the route should only be accessible via AJAX requests.
        correct: false
    help: |-
      The `_fragment` attribute corresponds to the URL fragment, often used for client-side navigation or linking to specific sections within a page.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which Symfony component or service is used to sign and verify the
      integrity of URIs by appending a hash query parameter?
    answers:
      - value: "`Symfony\\Component\\HttpFoundation\\UriSigner`"
        correct: true
      - value: "`Symfony\\Component\\Routing\\UrlSigner`"
        correct: false
      - value: "`Symfony\\Component\\Security\\Http\\UriHasher`"
        correct: false
      - value: "`Symfony\\Component\\HttpFoundation\\RequestSigner`"
        correct: false
    help: >-
      The `UriSigner` service is specifically designed for creating and
      validating signed URIs, ensuring that they have not been tampered with.

      https://symfony.com/doc/current/routing.html#signing-uris
  - question: How do you mark a route as stateless in Symfony using PHP attributes
      to prevent session usage for that request?
    answers:
      - value: "#[Route('/', name: 'homepage', stateless: true)]"
        correct: true
      - value: "#[Route('/', name: 'homepage', session: false)]"
        correct: false
      - value: "#[Route('/', name: 'homepage', no_session: true)]"
        correct: false
      - value: "#[Route('/', name: 'homepage', state: 'stateless')]"
        correct: false
    help: >-
      The `stateless` option on a route explicitly tells Symfony not to start or
      use a session for requests matching that route. This is useful for API
      endpoints.

      https://symfony.com/doc/current/routing.html#stateless-routes
  - question: If a route is defined as `/blog/{page}` but the controller method also
      expects a `$title` argument not present in the URL, how can you provide a
      default value for `$title` using PHP attributes?
    answers:
      - value: "#[Route('/blog/{page}', name: 'blog_index', defaults: ['page' => 1,
          'title' => 'Hello world!'])]"
        correct: true
      - value: "#[Route('/blog/{page}', name: 'blog_index', parameters: ['title' =>
          'Hello world!'])]"
        correct: false
      - value: "#[Route('/blog/{page}', name: 'blog_index', optional_params: ['title' =>
          'Hello world!'])]"
        correct: false
      - value: You must include `title` in the URL path.
        correct: false
    help: |-
      The `defaults` option in the `#[Route]` attribute allows you to define default values for parameters, including those not present in the URL path, which will be passed to the controller method.
      https://symfony.com/doc/current/routing.html#adding-extra-default-parameters
  - question: When using
      `Symfony\Bundle\FrameworkBundle\Controller\RedirectController` for a
      permanent redirect, which `defaults` option ensures the HTTP method is
      preserved, resulting in a 308 status code instead of 301?
    answers:
      - value: "`keepRequestMethod`"
        correct: true
      - value: "`preserveMethod`"
        correct: false
      - value: "`maintainMethod`"
        correct: false
      - value: "`httpMethodPreserve`"
        correct: false
    help: >-
      The `keepRequestMethod` option, when set to `true` with `permanent: true`,
      will cause the `RedirectController` to issue a 308 Permanent Redirect,
      preserving the original HTTP method.

      https://symfony.com/doc/current/routing.html#redirecting-routes
  - question: When a controller method type-hints an entity (e.g., `BlogPost $post`)
      and the route contains a parameter like `{slug}`, how does Symfony
      automatically fetch the entity?
    answers:
      - value: Symfony's ParamConverter (specifically `DoctrineParamConverter` if
          Doctrine is used) automatically queries the database for the entity
          based on the route parameter and type-hint.
        correct: true
      - value: You must manually fetch the entity in the controller using a repository.
        correct: false
      - value: The entity is automatically passed as a service by the dependency
          injection container.
        correct: false
      - value: It only works if the parameter name is `id`.
        correct: false
    help: |-
      The ParamConverter component simplifies controller arguments by automatically converting route parameters into objects, such as Doctrine entities, based on type-hints.
      https://symfony.com/doc/current/routing.html#route-parameters-with-entity-objects
  - question: When generating URLs in a Symfony console command, which interface
      should be injected to access URL generation capabilities?
    answers:
      - value: "`Symfony\\Component\\Routing\\Generator\\UrlGeneratorInterface`"
        correct: true
      - value: "`Symfony\\Component\\HttpFoundation\\UrlGenerator`"
        correct: false
      - value: "`Symfony\\Component\\Routing\\RouterInterface`"
        correct: false
      - value: "`Symfony\\Component\\HttpFoundation\\RequestStack`"
        correct: false
    help: |-
      The `UrlGeneratorInterface` is the standard way to generate URLs in any Symfony service or class, including console commands, where there is no `AbstractController` to extend.
      https://symfony.com/doc/current/routing.html#generating-urls-in-console-commands
  - question: How can you configure locale-specific URL prefixes (e.g., `/nl` for
      Dutch, no prefix for English) for imported routes using
      `RoutingConfigurator` in PHP?
    answers:
      - value: |-
          $routes->import('../../src/Controller/', 'attribute')
              ->prefix([
                  'en' => '',
                  'nl' => '/nl',
              ])
          ;
        correct: true
      - value: |-
          $routes->import('../../src/Controller/', 'attribute')
              ->localePrefixes([
                  'en' => '',
                  'nl' => '/nl',
              ])
          ;
        correct: false
      - value: |-
          $routes->import('../../src/Controller/', 'attribute')
              ->addPrefixes([
                  'en' => '',
                  'nl' => '/nl',
              ])
          ;
        correct: false
    help: >-
      The `prefix()` method of `RoutingConfigurator` can accept an associative
      array where keys are locales and values are the corresponding prefixes.

      https://symfony.com/doc/current/routing.html#locale-based-url-prefixes
  - question: In a route condition, how can you access the value of an environment
      variable (e.g., `APP_MAIN_HOST`)?
    answers:
      - value: "Using the `env()` function: `env('APP_MAIN_HOST')`"
        correct: true
      - value: "Using the `_env` variable: `_env.APP_MAIN_HOST`"
        correct: false
      - value: Using `request.env.APP_MAIN_HOST`
        correct: false
      - value: Environment variables are not accessible in route conditions.
        correct: false
    help: |-
      The `env()` function is available in the Expression Language for route conditions, allowing access to environment variables configured in Symfony.
      https://symfony.com/doc/current/routing.html#expression-language-for-conditions
  - question: In YAML routing, what is the correct syntax to specify that a route
      should only respond to `GET` or `HEAD` requests?
    answers:
      - value: "methods: GET|HEAD"
        correct: true
      - value: "methods: [GET, HEAD]"
        correct: true
      - value: "http_methods: GET, HEAD"
        correct: false
      - value: "request_methods: 'GET,HEAD'"
        correct: false
    help: >-
      The `methods` option accepts either a pipe-separated string or a YAML list
      of HTTP methods.

      https://symfony.com/doc/current/routing.html#restricting-to-an-http-method
  - question: What information does the `router:match` command provide when a URL
      successfully matches a route?
    answers:
      - value: The name of the matched route and an array of its matched parameters.
        correct: true
      - value: The controller class and method that will handle the request.
        correct: true
      - value: The HTTP status code that would be returned.
        correct: false
      - value: A list of all routes that partially match the URL.
        correct: false
    help: >-
      The `router:match` command is a powerful debugging tool that shows the
      exact route and its associated attributes (including the controller) that
      Symfony's router would select for a given path.

      https://symfony.com/doc/current/routing.html#router-debugging
  - question: If `App\Controller\HelloController` implements the `__invoke()`
      method, how would you configure a route named `hello` for the path
      `/hello/{name}` to use it as the controller in `config/routes.yaml`?
    answers:
      - value: |-
          hello:
              path: /hello/{name}
              controller: App\Controller\HelloController
        correct: true
      - value: |-
          hello:
              path: /hello/{name}
              controller: App\Controller\HelloController::__invoke
        correct: false
      - value: |-
          hello:
              path: /hello/{name}
              action: App\Controller\HelloController
        correct: false
      - value: |-
          hello:
              path: /hello/{name}
              _controller: App\Controller\HelloController
        correct: false
    help: |-
      For invokable controllers (classes implementing `__invoke()`), you can simply specify the class FQCN as the controller value without the method name.
      https://symfony.com/doc/current/controller/service.html#invokable-controllers
  - question: How do you explicitly generate a URL for a specific locale (e.g.,
      Dutch 'nl') using `generateUrl()` in a controller, even if the current
      request locale is different?
    answers:
      - value: "`$this->generateUrl('sign_up', ['_locale' => 'nl']);`"
        correct: true
      - value: "`$this->generateUrl('sign_up', [], ['locale' => 'nl']);`"
        correct: false
      - value: "`$this->generateUrl('sign_up', ['lang' => 'nl']);`"
        correct: false
      - value: "`$this->generateUrl('sign_up', ['_language' => 'nl']);`"
        correct: false
    help: |-
      The `_locale` parameter can be explicitly passed in the parameters array to `generateUrl()` to force URL generation for a specific locale.
      https://symfony.com/doc/current/routing.html#generating-urls-with-a-specific-locale
  - question: In PHP attributes, how would you define a route
      `/articles/{_locale}/search.{_format}` and set requirements for `_locale`
      (e.g., `en|fr`) and `_format` (e.g., `html|xml`), while also setting
      default locale to `en` and format to `html`?
    answers:
      - value: |-
          #[Route(
              path: '/articles/{_locale}/search.{_format}',
              locale: 'en',
              format: 'html',
              requirements: [
                  '_locale' => 'en|fr',
                  '_format' => 'html|xml',
              ],
          )]
        correct: true
      - value: |-
          #[Route(
              path: '/articles/{_locale}/search.{_format}',
              defaults: ['_locale' => 'en', '_format' => 'html'],
              requirements: [
                  '_locale' => 'en|fr',
                  '_format' => 'html|xml',
              ],
          )]
        correct: false
      - value: |-
          #[Route(
              path: '/articles/{_locale<en|fr>}/search.{_format<html|xml>}',
              defaults: ['_locale' => 'en', '_format' => 'html'],
          )]
        correct: false
    help: |-
      Special parameters like `_locale` and `_format` can be included in the route path. Their default values can be set with `locale` and `format` options, and their valid values restricted with `requirements`.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: In PHP attributes, how do you define a route that matches a host like
      `{subdomain}.example.com` with a requirement that `subdomain` must be `m`
      or `mobile`?
    answers:
      - value: "#[Route('/', host: '{subdomain}.example.com', requirements: ['subdomain'
          => 'm|mobile'])]"
        correct: true
      - value: "#[Route('/', host: '{subdomain}.example.com', regex: ['subdomain' =>
          'm|mobile'])]"
        correct: false
      - value: "#[Route('/', host: '{subdomain}.example.com', validate: ['subdomain' =>
          'm|mobile'])]"
        correct: false
      - value: "#[Route('/', host: '{subdomain}.example.com', match: ['subdomain' =>
          'm|mobile'])]"
        correct: false
    help: >-
      The `host` option can contain parameters, and `requirements` can be
      applied to these host parameters just like path parameters.

      https://symfony.com/doc/current/routing.html#sub-domain-routing
  - question: In a Symfony controller, how can you redirect to the current route to
      implement a Post/Redirect/Get pattern?
    answers:
      - value: "`return $this->redirectToRoute($request->attributes->get('_route'));`"
        correct: true
      - value: "`return
          $this->redirectToRoute($this->get('router')->getCurrentRoute());`"
        correct: false
      - value: "`return $this->redirect($request->getUri());`"
        correct: false
      - value: "`return $this->redirectToRoute('_self');`"
        correct: false
    help: |-
      The `_route` attribute on the `Request` object holds the name of the currently matched route, which can be used to redirect back to the same route.
      https://symfony.com/doc/current/controller.html#redirecting-to-routes-and-urls
  - question: When using a PHP Backed Enum as a route parameter, how can you
      restrict the allowed values to a specific subset of the enum cases (e.g.,
      `Suit::Diamonds` or `Suit::Spades`) using `EnumRequirement`?
    answers:
      - value: "By using `requirements: ['suit' => new EnumRequirement([Suit::Diamonds,
          Suit::Spades])]`"
        correct: true
      - value: "By using `requirements: ['suit' => 'Suit::Diamonds|Suit::Spades']`"
        correct: false
      - value: "By using `requirements: ['suit' => 'D|S']`"
        correct: false
      - value: By using `#[EnumConstraint(Suit::Diamonds, Suit::Spades)]` on the
          parameter.
        correct: false
    help: |-
      The `EnumRequirement` class allows you to specify a subset of enum values that are valid for a route parameter, providing fine-grained control over accepted inputs.
      https://symfony.com/doc/current/controller/value_resolver.html#enum-requirement
  - question: "If you have two routes, `/blog/{slug}` (name: `blog_show`) and
      `/blog/list` (name: `blog_list`), and you want `/blog/list` to be matched
      before `/blog/{slug}`, how can you achieve this using PHP attributes?"
    answers:
      - value: "Set a higher `priority` for `blog_list`: `#[Route('/blog/list', name:
          'blog_list', priority: 2)]`"
        correct: true
      - value: Define `blog_list` before `blog_show` in the routing configuration file.
        correct: false
      - value: Set a lower `priority` for `blog_show`.
        correct: false
      - value: Symfony automatically prioritizes more specific routes.
        correct: false
    help: >-
      The `priority` option (default is 0) determines the order in which routes
      are matched. Routes with higher priority are checked first. This is
      crucial for resolving conflicts between general and specific routes.

      https://symfony.com/doc/current/routing.html#route-priority
  - question: What is the effect of setting `strict_requirements` to `false` in the
      Symfony router configuration?
    answers:
      - value: It disables exceptions when generating a URL for a route with specific
          parameter requirements, returning an empty string instead.
        correct: true
      - value: It ignores all parameter requirements during route matching.
        correct: false
      - value: It allows route parameters to contain any character, including slashes.
        correct: false
      - value: It enables strict type checking for all route parameters.
        correct: false
    help: |-
      The `strict_requirements` option controls the behavior of the URL generator. When `false`, it will not throw an exception if requirements are not met during URL generation, but rather return an empty string.
      https://symfony.com/doc/current/reference/configuration/framework.html#router-strict-requirements
  - question: Which of the following is the correct YAML configuration to set a
      default URI for URL generation in a non-HTTP context (e.g., console
      commands)?
    answers:
      - value: |-
          framework:
              router:
                  default_uri: 'https://example.org/my/path/'
        correct: true
      - value: |-
          framework:
              router:
                  base_url: 'https://example.org/my/path/'
        correct: false
      - value: |-
          framework:
              router:
                  context_uri: 'https://example.org/my/path/'
        correct: false
      - value: |-
          framework:
              router:
                  fallback_uri: 'https://example.org/my/path/'
        correct: false
    help: |-
      The `default_uri` option under `framework.router` defines the base URI for URL generation when no HTTP request context is available, ensuring absolute URLs are correctly formed.
      https://symfony.com/doc/current/routing.html#configuring-the-router-for-generating-urls-in-commands
  - question: How can you globally force generated URLs to use HTTPS in Symfony,
      which is particularly useful for console commands?
    answers:
      - value: Set the `router.request_context.scheme` parameter to `https` in
          `config/services.yaml`.
        correct: true
      - value: Set the `asset.request_context.secure` parameter to `true` in
          `config/services.yaml`.
        correct: true
      - value: "Configure `force_https: true` under `framework.router` in
          `config/packages/framework.yaml`."
        correct: false
      - value: "Add `#[Route(schemes: ['https'])]` to all routes."
        correct: false
    help: |-
      Forcing HTTPS globally, especially in non-HTTP contexts, is achieved by setting specific parameters that influence the router's request context.
      https://symfony.com/doc/current/routing.html#forcing-https-for-generated-urls
  - question: Which of the following describes the `_format` special internal
      routing attribute?
    answers:
      - value: It sets the request format of the `Request` object, influencing the
          `Content-Type` of the response.
        correct: true
      - value: It defines the expected file extension for the route.
        correct: false
      - value: It is used for automatic serialization of response data.
        correct: false
      - value: It specifies the default output format for console commands.
        correct: false
    help: |-
      The `_format` attribute is crucial for content negotiation, allowing Symfony to determine the appropriate response format (e.g., HTML, JSON, XML) based on the URL.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: To define a route that handles requests to `example.com` and
      `api.example.com` with different controllers, which routing option would
      you use?
    answers:
      - value: "`host`"
        correct: true
      - value: "`domain`"
        correct: false
      - value: "`server`"
        correct: false
      - value: "`hostname`"
        correct: false
    help: >-
      The `host` option in route definitions allows you to match routes based on
      the incoming hostname, enabling subdomain or multi-domain routing.

      https://symfony.com/doc/current/routing.html#domain-name-matching
  - question: When debugging routes, what is the primary use case for the
      `router:match` command?
    answers:
      - value: To determine which route Symfony would match for a given URL path.
        correct: true
      - value: To list all available routes in the application.
        correct: false
      - value: To check for duplicate route names.
        correct: false
      - value: To generate a URL for a specific route.
        correct: false
    help: >-
      The `router:match` command is invaluable for verifying that a specific URL
      will be correctly routed by your Symfony application.

      https://symfony.com/doc/current/routing.html#router-debugging
  - question: Which of the following is a valid way to define a route named
      `blog_post` for `/article/{slug}` in `config/routes.php` using
      `RoutingConfigurator`?
    answers:
      - value: |-
          return function (RoutingConfigurator $routes): void {
              $routes->add('blog_post', '/articles/{slug}')
                  ->controller([BlogController::class, 'show'])
              ;
          };
        correct: true
      - value: |-
          return function (RoutingConfigurator $routes): void {
              $routes->route('blog_post', '/article/{slug}')
                  ->action('App\Controller\BlogController::show')
              ;
          };
        correct: false
      - value: |-
          return function (RoutingConfigurator $routes): void {
              $routes->set('blog_post', '/article/{slug}')
                  ->handler('App\Controller\BlogController::show')
              ;
          };
        correct: false
    help: >-
      The `add()` method of `RoutingConfigurator` is used to define a new route,
      specifying its name, path, and controller.

      https://symfony.com/doc/current/routing.html#defining-routes-as-php-files
  - question: What is the purpose of the `_controller` special internal routing
      attribute?
    answers:
      - value: It specifies the callable (controller class and method or invokable
          class) that will handle the request for the matched route.
        correct: true
      - value: It defines the default template to render for the route.
        correct: false
      - value: It is used to pass extra configuration to the router.
        correct: false
      - value: It indicates that the route requires a specific HTTP method.
        correct: false
    help: |-
      The `_controller` attribute is a core part of Symfony's routing, linking a URL to the code that processes it.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid way to define a route named
      `blog_list` for `/blog/{page}` with a default `page` value of `1` and a
      requirement that `page` is a digit, using YAML?
    answers:
      - value: |-
          blog_list:
              path:       /blog/{page}
              controller: App\Controller\BlogController::list
              defaults:
                  page: 1
              requirements:
                  page: '\\d+'
        correct: true
      - value: |-
          blog_list:
              path:       /blog/{page?1}
              controller: App\Controller\BlogController::list
              requirements:
                  page: '\\d+'
        correct: false
      - value: |-
          blog_list:
              path:       /blog/{page}
              controller: App\Controller\BlogController::list
              options:
                  default_page: 1
                  page_regex: '\\d+'
        correct: false
    help: >-
      In YAML, default values are set under the `defaults` key, and requirements
      under the `requirements` key.

      https://symfony.com/doc/current/routing.html#optional-parameters
  - question: What is the purpose of the `_locale` special internal routing attribute?
    answers:
      - value: It sets the locale on the `Request` object, used for
          internationalization.
        correct: true
      - value: It defines the default language for the application.
        correct: false
      - value: It is used for locale-specific URL generation only.
        correct: false
      - value: It specifies the user's preferred timezone.
        correct: false
    help: |-
      The `_locale` attribute is automatically used by Symfony to set the locale for the current request, which impacts translation and other localized components.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: When generating a URL in Twig, how can you ensure the generated URL is
      safe for use in JavaScript, for example, within a `const` variable?
    answers:
      - value: "By applying the `escape('js')` filter: `{{ path('blog_show', {slug:
          'my-blog-post'})|escape('js') }}`"
        correct: true
      - value: "By applying the `json_encode` filter: `{{ path('blog_show', {slug:
          'my-blog-post'})|json_encode }}`"
        correct: false
      - value: Twig's `path()` function automatically escapes for JavaScript.
        correct: false
      - value: By wrapping the path in `encodeURIComponent()` in JavaScript.
        correct: false
    help: |-
      The `escape('js')` filter is crucial for preventing XSS vulnerabilities when embedding Twig-generated content, like URLs, directly into JavaScript code.
      https://symfony.com/doc/current/routing.html#generating-urls-in-twig-templates
  - question: Which of the following is a valid way to import routes from a custom
      service method named `loadRoutes` on a service `admin_route_loader` using
      YAML configuration?
    answers:
      - value: |-
          admin_routes:
              resource: 'admin_route_loader::loadRoutes'
              type: service
        correct: true
      - value: |-
          admin_routes:
              service: admin_route_loader
              method: loadRoutes
        correct: false
      - value: |-
          admin_routes:
              loader: admin_route_loader::loadRoutes
        correct: false
      - value: |-
          admin_routes:
              import: 'admin_route_loader::loadRoutes'
              format: service
        correct: false
    help: |-
      Symfony allows importing routes from custom services. The `resource` specifies the service ID and method, and `type: service` indicates a service loader.
      https://symfony.com/doc/current/routing/custom_route_loader.html#loading-routes-from-a-service
  - question: What is the primary benefit of using `CompiledUrlMatcher` over
      `UrlMatcher` in a production Symfony application?
    answers:
      - value: Improved performance due to pre-compiled route definitions into a highly
          efficient PHP array.
        correct: true
      - value: Reduced memory consumption by loading routes on demand.
        correct: false
      - value: Enhanced security by encrypting route patterns.
        correct: false
      - value: Simplified route debugging in development environments.
        correct: false
    help: |-
      For production environments, Symfony can compile the route collection into a highly optimized PHP array, which `CompiledUrlMatcher` uses for faster route matching compared to the default `UrlMatcher`.
      https://symfony.com/doc/current/create_framework/routing.html#optimizing-url-matching
  - question: When defining a route using PHP attributes, how can you explicitly
      enforce the HTTPS scheme for that route?
    answers:
      - value: "`#[Route('/login', name: 'login', schemes: ['https'])]`"
        correct: true
      - value: "`#[Route('/login', name: 'login', scheme: 'https')]`"
        correct: false
      - value: "`#[Route('/login', name: 'login', protocol: 'https')]`"
        correct: false
      - value: "`#[Route('/login', name: 'login', secure: true)]`"
        correct: false
    help: >-
      The `schemes` option in the `#[Route]` attribute allows you to specify
      which URL schemes (e.g., `http`, `https`) a route should match.

      https://symfony.com/doc/current/routing.html#forcing-a-scheme-or-http-host
  - question: Which of the following is a special internal routing attribute that
      determines which controller and action is executed when the route is
      matched?
    answers:
      - value: "`_controller`"
        correct: true
      - value: "`_action`"
        correct: false
      - value: "`_handler`"
        correct: false
      - value: "`_target`"
        correct: false
    help: |-
      The `_controller` attribute is a fundamental component of Symfony's routing, directly linking a matched URL to its corresponding PHP code.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: What is the recommended way to check if a route exists before
      attempting to generate a URL in Symfony?
    answers:
      - value: Wrap the `generateUrl()` call in a `try-catch` block for
          `Symfony\Component\Routing\Exception\RouteNotFoundException`.
        correct: true
      - value: Use `$this->router->routeExists('route_name')`.
        correct: false
      - value: Iterate through `$this->router->getRouteCollection()` to find the route.
        correct: false
      - value: Check `php bin/console debug:router route_name`.
        correct: false
    help: >-
      The official documentation recommends handling `RouteNotFoundException`
      when a route might not exist, rather than attempting to pre-check its
      existence.

      https://symfony.com/doc/current/routing.html#checking-if-a-route-exists
  - question: When defining a route in YAML, how can you specify that the controller
      is an invokable class (i.e., it implements `__invoke()`)?
    answers:
      - value: |-
          By providing only the FQCN of the controller class:
          `controller: App\Controller\HelloController`
        correct: true
      - value: |-
          By specifying the `__invoke` method explicitly:
          `controller: App\Controller\HelloController::__invoke`
        correct: false
      - value: "By adding `type: invokable` to the route definition."
        correct: false
      - value: By using the `action` key instead of `controller`.
        correct: false
    help: |-
      If a controller class implements the `__invoke()` method, Symfony automatically calls this method when the route matches, so you only need to provide the class name.
      https://symfony.com/doc/current/controller/service.html#invokable-controllers
  - question: Which of the following is a valid way to define a route with an
      inlined optional parameter `page` that defaults to `1` and requires
      digits, using PHP attributes?
    answers:
      - value: "`#[Route('/blog/{page<\\\\d+>?1}', name: 'blog_list')]`"
        correct: true
      - value: "`#[Route('/blog/{page<\\\\d+>}', name: 'blog_list', defaults: ['page' =>
          1])]`"
        correct: false
      - value: "`#[Route('/blog/{page:1}', name: 'blog_list', requirements: ['page' =>
          '\\\\d+'])]`"
        correct: false
      - value: "`#[Route('/blog/{page?}', name: 'blog_list', requirements: ['page' =>
          '\\\\d+'], defaults: ['page' => 1])]`"
        correct: false
    help: |-
      Symfony allows combining requirements and default values directly within the route parameter definition using the `{parameter_name<requirements>?default_value}` syntax.
      https://symfony.com/doc/current/routing.html#inlining-requirements-and-defaults
  - question: What is the primary purpose of the
      `routing.expression_language_provider` tag in Symfony's Dependency
      Injection Container?
    answers:
      - value: To register custom expression language functions specifically for the
          routing component.
        correct: true
      - value: To define new route loaders for custom routing formats.
        correct: false
      - value: To provide a custom service for URL generation.
        correct: false
      - value: To enable or disable the Expression Language component for routing.
        correct: false
    help: |-
      This tag allows developers to extend the Expression Language used in route conditions by providing their own functions, enabling more complex and custom routing logic.
      https://symfony.com/doc/current/reference/dic_tags.html#routing-expression-language-provider
  - question: When defining a route in YAML, how do you add a name prefix (e.g.,
      `blog_`) to all routes imported from a resource?
    answers:
      - value: |-
          controllers:
              resource: '../../src/Controller/'
              type: attribute
              name_prefix: 'blog_'
        correct: true
      - value: |-
          controllers:
              resource: '../../src/Controller/'
              type: attribute
              prefix_name: 'blog_'
        correct: false
      - value: |-
          controllers:
              resource: '../../src/Controller/'
              type: attribute
              route_name_prefix: 'blog_'
        correct: false
    help: >-
      The `name_prefix` option, when used with route imports, prepends a string
      to the name of every route loaded from that resource, helping to organize
      and avoid naming conflicts.

      https://symfony.com/doc/current/routing.html#route-groups-and-prefixes
  - question: In Symfony, what is the purpose of the `router.request_context.scheme`
      parameter?
    answers:
      - value: It defines the default scheme (e.g., `http` or `https`) used by the
          router when generating absolute URLs outside of an HTTP request
          context.
        correct: true
      - value: It forces all incoming requests to use a specific scheme.
        correct: false
      - value: It determines the scheme used for asset URLs.
        correct: false
      - value: It is used to configure the HTTP port for the application.
        correct: false
    help: |-
      This parameter is part of the router's request context and is crucial for generating correct absolute URLs in environments like console commands where no actual HTTP request is present.
      https://symfony.com/doc/current/routing.html#forcing-https-for-generated-urls
  - question: When defining a route alias in YAML, how do you mark the alias as
      deprecated with a generic message for `acme/package` version `1.2`?
    answers:
      - value: |-
          new_route_name:
              alias: original_route_name
              deprecated:
                  package: 'acme/package'
                  version: '1.2'
        correct: true
      - value: |-
          new_route_name:
              alias: original_route_name
              deprecate: true
              package: 'acme/package'
              version: '1.2'
        correct: false
      - value: |-
          new_route_name:
              alias: original_route_name
              deprecation_message: 'Since acme/package 1.2'
        correct: false
    help: >-
      Route aliases can be marked as deprecated using the `deprecated` option,
      specifying the `package` and `version` from which the deprecation applies.
      A custom message can also be provided.

      https://symfony.com/doc/current/routing.html#deprecating-route-aliases
  - question: What is the purpose of the `_locale` special internal routing attribute?
    answers:
      - value: It is used by Symfony to set the locale on the `Request` object,
          influencing translation and localization.
        correct: true
      - value: It defines the default language for the application if no other locale is
          specified.
        correct: false
      - value: It is a parameter that must always be present in the URL for
          internationalized routes.
        correct: false
      - value: It enables automatic language detection based on browser settings.
        correct: false
    help: |-
      The `_locale` attribute is a special parameter that Symfony uses internally to manage the current request's locale, which is fundamental for internationalization features.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is NOT a variable available in Symfony's
      Expression Language for route conditions?
    answers:
      - value: "`container`"
        correct: true
      - value: "`context`"
        correct: false
      - value: "`request`"
        correct: false
      - value: "`params`"
        correct: false
    help: |-
      The Expression Language for routing conditions provides access to `context` (RequestContext), `request` (Request), and `params` (route parameters). Direct access to the `container` is not provided for security and performance reasons.
      https://symfony.com/doc/current/routing.html#expression-language-for-conditions
  - question: When defining a route with a dynamic subdomain like
      `{subdomain}.example.com`, which routing option is used to specify the
      subdomain part?
    answers:
      - value: "`host`"
        correct: true
      - value: "`domain`"
        correct: false
      - value: "`subdomain`"
        correct: false
      - value: "`hostname`"
        correct: false
    help: >-
      The `host` option in route definitions supports parameters, allowing for
      dynamic subdomain matching.

      https://symfony.com/doc/current/routing.html#sub-domain-routing
  - question: To redirect to an external URL (e.g.,
      `https://legacy.example.com/doc`) with a permanent (HTTP 301) redirect in
      a Symfony controller, which method would you use?
    answers:
      - value: "`return $this->redirect('https://legacy.example.com/doc',
          Response::HTTP_MOVED_PERMANENTLY);`"
        correct: true
      - value: "`return $this->redirectToUrl('https://legacy.example.com/doc', 301);`"
        correct: false
      - value: "`return $this->redirect('https://legacy.example.com/doc', 301);`"
        correct: true
      - value: "`return $this->redirectToExternal('https://legacy.example.com/doc');`"
        correct: false
    help: |-
      The `redirect()` method of `AbstractController` is used for external redirects. You can pass an optional status code to make it permanent.
      https://symfony.com/doc/current/controller.html#redirecting-to-routes-and-urls
  - question: What is the purpose of the `_format` special internal routing attribute?
    answers:
      - value: The matched value is used to set the 'request format' of the `Request`
          object, influencing the `Content-Type` of the response.
        correct: true
      - value: It defines the default file format for uploaded files.
        correct: false
      - value: It specifies the format of the route definition itself (e.g., YAML, XML).
        correct: false
      - value: It is used to validate the format of route parameters.
        correct: false
    help: |-
      The `_format` attribute is a special parameter that Symfony uses to determine the desired response format, which is then used in content negotiation.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following console commands would you use to get a list of
      all defined routes in your Symfony application, including their names,
      methods, schemes, hosts, and paths?
    answers:
      - value: "`php bin/console debug:router`"
        correct: true
      - value: "`php bin/console router:list`"
        correct: false
      - value: "`php bin/console routes:all`"
        correct: false
      - value: "`php bin/console show:routes`"
        correct: false
    help: >-
      The `debug:router` command is the standard way to inspect the routing
      table in Symfony, providing a comprehensive overview of all registered
      routes.

      https://symfony.com/doc/current/routing.html#router-debugging
  - question: When configuring a route to use a custom service method as its
      controller (e.g., `admin_route_loader::loadRoutes`), what `type` should be
      specified in the routing configuration?
    answers:
      - value: "`service`"
        correct: true
      - value: "`callback`"
        correct: false
      - value: "`method`"
        correct: false
      - value: "`custom`"
        correct: false
    help: |-
      When importing routes from a service, the `type` option must be set to `service` to instruct Symfony to use a service as the route loader.
      https://symfony.com/doc/current/routing/custom_route_loader.html#loading-routes-from-a-service
  - question: What is the primary purpose of the `_fragment` special internal
      routing attribute?
    answers:
      - value: To define the fragment identifier (the part after `#`) in a URL.
        correct: true
      - value: To specify a default HTML element ID for a route.
        correct: false
      - value: To enable partial page loading via AJAX.
        correct: false
      - value: To indicate that the route should only be accessible via a specific HTML
          fragment.
        correct: false
    help: |-
      The `_fragment` attribute corresponds to the URL fragment, which is typically used for client-side navigation within a document.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following YAML configurations correctly defines a route
      named `login` for the path `/login` that *must* use the HTTPS scheme?
    answers:
      - value: |-
          login:
              path: /login
              controller: App\Controller\SecurityController::login
              schemes: [https]
        correct: true
      - value: |-
          login:
              path: /login
              controller: App\Controller\SecurityController::login
              scheme: https
        correct: false
      - value: |-
          login:
              path: /login
              controller: App\Controller\SecurityController::login
              secure: true
        correct: false
    help: >-
      The `schemes` option in YAML routing allows you to explicitly define which
      URL schemes (e.g., `http`, `https`) a route should match. If the current
      request scheme doesn't match, Symfony will redirect.

      https://symfony.com/doc/current/routing.html#forcing-a-scheme-or-http-host
  - question: What is the purpose of the `_locale` special internal routing attribute?
    answers:
      - value: It is used to set the locale on the `Request` object, which is then used
          by the Translation component and other localized services.
        correct: true
      - value: It dictates the default language for the entire application.
        correct: false
      - value: It automatically translates the route path based on the user's browser
          language.
        correct: false
      - value: It is a mandatory parameter for all routes in a multi-language
          application.
        correct: false
    help: |-
      The `_locale` attribute is a powerful feature for internationalization, allowing Symfony to adapt content and behavior based on the user's language preference.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid way to define a multi-language
      logout route named `app_logout` with paths `/logout` for English (`en`)
      and `/deconnexion` for French (`fr`), restricted to `GET` method, using
      PHP `RoutingConfigurator`?
    answers:
      - value: |-
          return function (RoutingConfigurator $routes): void {
              $routes->add('app_logout', [
                  'en' => '/logout',
                  'fr' => '/deconnexion',
              ])
                  ->methods(['GET'])
              ;
          };
        correct: true
      - value: |-
          return function (RoutingConfigurator $routes): void {
              $routes->add('app_logout')
                  ->path(['en' => '/logout', 'fr' => '/deconnexion'])
                  ->methods(['GET'])
              ;
          };
        correct: false
      - value: >-
          return function (RoutingConfigurator $routes): void {
              $routes->logout('app_logout', ['en' => '/logout', 'fr' => '/deconnexion'])
                  ->method('GET')
              ;
          };
        correct: false
    help: >-
      Multi-language routes can be defined by passing an associative array of
      locale-to-path mappings as the second argument to `add()` in
      `RoutingConfigurator`.

      https://symfony.com/doc/current/routing.html#defining-localized-routes
  - question: What is the purpose of the `_fragment` special internal routing attribute?
    answers:
      - value: It represents the part of the URL after the `#` symbol, typically used
          for linking to specific sections within a page.
        correct: true
      - value: It is used to define a default HTML fragment to be loaded via AJAX.
        correct: false
      - value: It specifies a default value for a route parameter that is not part of
          the main path.
        correct: false
      - value: It indicates that the route should only be matched if the request
          contains a specific HTTP fragment header.
        correct: false
    help: |-
      The `_fragment` attribute allows Symfony to work with URL fragments, which are client-side identifiers for parts of a document.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which command would you use to verify that a specific route, for
      example `app_lucky_number`, is correctly defined and accessible in your
      Symfony application?
    answers:
      - value: "`php bin/console debug:router app_lucky_number`"
        correct: true
      - value: "`php bin/console router:check app_lucky_number`"
        correct: false
      - value: "`php bin/console route:info app_lucky_number`"
        correct: false
      - value: "`php bin/console show:route app_lucky_number`"
        correct: false
    help: >-
      The `debug:router` command, when provided with a route name, displays
      detailed information about that specific route, including its path,
      controller, requirements, and defaults.

      https://symfony.com/doc/current/routing.html#router-debugging
  - question: What is the primary purpose of the `_format` special internal routing
      attribute?
    answers:
      - value: It is used to set the 'request format' (e.g., `html`, `json`, `xml`) on
          the `Request` object, which influences the `Content-Type` of the
          response.
        correct: true
      - value: It defines the default file extension for the route's associated
          template.
        correct: false
      - value: It specifies the expected data format for incoming POST requests.
        correct: false
      - value: It automatically converts the response content to the specified format.
        correct: false
    help: |-
      The `_format` attribute is a key part of Symfony's content negotiation, allowing applications to serve different representations of a resource based on the requested format.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: When defining a route in YAML, how can you specify that it should only
      respond to `GET` requests?
    answers:
      - value: "methods: GET"
        correct: true
      - value: "method: GET"
        correct: false
      - value: "http_method: GET"
        correct: false
      - value: "request_type: GET"
        correct: false
    help: >-
      The `methods` option is used to restrict routes to specific HTTP verbs. It
      accepts a single method or a pipe-separated list of methods.

      https://symfony.com/doc/current/routing.html#restricting-to-an-http-method
  - question: What is the purpose of the `_locale` special internal routing attribute?
    answers:
      - value: It sets the locale for the current request, which is essential for
          internationalization features like translations and localized content.
        correct: true
      - value: It defines the default language for the application if no other locale is
          detected.
        correct: false
      - value: It is a mandatory parameter that must be included in all
          internationalized URLs.
        correct: false
      - value: It enables automatic language switching based on the user's browser
          settings.
        correct: false
    help: |-
      The `_locale` attribute is a core mechanism for handling multilingual applications in Symfony, allowing the application to adapt to the user's preferred language.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid way to define a route named
      `blog_list` for `/blog` and specify its controller as
      `App\Controller\BlogController::list` using PHP attributes?
    answers:
      - value: "`#[Route('/blog', name: 'blog_list')]` on the `list()` method."
        correct: true
      - value: "`#[Route(path: '/blog', name: 'blog_list', controller:
          'App\\Controller\\BlogController::list')]`"
        correct: false
      - value: "`#[Route('/blog', name: 'blog_list', action: 'list')]`"
        correct: false
      - value: "`#[Route('/blog', name: 'blog_list', handler:
          'App\\Controller\\BlogController::list')]`"
        correct: false
    help: |-
      When using PHP attributes, the `#[Route]` attribute is placed directly on the controller method, and Symfony automatically infers the controller class and method.
      https://symfony.com/doc/current/routing.html#defining-routes-as-php-attributes
  - question: What is the purpose of the `_fragment` special internal routing attribute?
    answers:
      - value: It is used to specify the URL fragment identifier (the part after `#`),
          which is typically used for client-side navigation to a specific
          section of a page.
        correct: true
      - value: It defines a default HTML template fragment to be included in the
          response.
        correct: false
      - value: It is a route parameter that must be a valid HTML element ID.
        correct: false
      - value: It enables partial content loading for a route.
        correct: false
    help: |-
      The `_fragment` attribute allows Symfony to manage the fragment part of a URL, which is often used for in-page navigation.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid YAML configuration to import routes
      from the `src/Controller/` directory using PHP attributes, applying a
      `/blog` prefix and a `blog_` name prefix to all imported routes, and
      setting a requirement for `_locale` to `en|es|fr`?
    answers:
      - value: |-
          controllers:
              resource: '../../src/Controller/'
              type: attribute
              prefix: '/blog'
              name_prefix: 'blog_'
              requirements:
                  _locale: 'en|es|fr'
        correct: true
      - value: |-
          controllers:
              resource: '../../src/Controller/'
              type: attribute
              path_prefix: '/blog'
              route_name_prefix: 'blog_'
              locale_requirements: 'en|es|fr'
        correct: false
      - value: |-
          controllers:
              import: '../../src/Controller/'
              format: attribute
              prefix: '/blog'
              name_prefix: 'blog_'
              requirements:
                  _locale: 'en|es|fr'
        correct: false
    help: >-
      Route imports support options like `prefix`, `name_prefix`, and
      `requirements` to apply common configurations to a group of routes.

      https://symfony.com/doc/current/routing.html#route-groups-and-prefixes
  - question: What is the primary purpose of the `_format` special internal routing
      attribute?
    answers:
      - value: It sets the request format, which is used to determine the `Content-Type`
          header of the response (e.g., `json` format translates to
          `application/json`).
        correct: true
      - value: It defines the default file extension for route parameters.
        correct: false
      - value: It specifies the format of the incoming request body (e.g., JSON, XML).
        correct: false
      - value: It is used for automatic data serialization and deserialization.
        correct: false
    help: |-
      The `_format` attribute plays a crucial role in content negotiation, allowing Symfony to serve different data formats based on the URL or request headers.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: When debugging routes, what information does the `router:match`
      command provide if a URL does NOT match any defined route?
    answers:
      - value: It indicates that no route matches the given URL, often suggesting
          possible matching routes if close.
        correct: true
      - value: It throws a `ResourceNotFoundException` directly in the console.
        correct: false
      - value: It lists all routes that were considered but failed to match.
        correct: false
      - value: It suggests creating a new route for the unmatched URL.
        correct: false
    help: >-
      If no route matches, `router:match` will inform you, sometimes providing
      hints about why the match failed or suggesting similar routes.

      https://symfony.com/doc/current/routing.html#router-debugging
  - question: Which of the following is a valid way to define a route named
      `blog_list` for `/blog/{page}` with a default `page` value of `1` and a
      requirement that `page` is a digit, using PHP attributes?
    answers:
      - value: "`#[Route('/blog/{page}', name: 'blog_list', requirements: ['page' =>
          '\\\\d+'])]` on a method with `int $page = 1`."
        correct: true
      - value: "`#[Route('/blog/{page<\\\\d+>?1}', name: 'blog_list')]` on a method with
          `int $page`."
        correct: true
      - value: "`#[Route('/blog/{page}', name: 'blog_list', defaults: ['page' => 1],
          requirements: ['page' => '\\\\d+'])]`"
        correct: false
      - value: "`#[Route('/blog/{page:1}', name: 'blog_list', requirements: ['page' =>
          '\\\\d+'])]`"
        correct: false
    help: >-
      Optional parameters with defaults and requirements can be handled either
      by setting the default in the controller method signature with explicit
      requirements in the attribute, or by using the inline syntax for both
      requirements and defaults.

      https://symfony.com/doc/current/routing.html#optional-parameters
  - question: What is the purpose of the `_locale` special internal routing attribute?
    answers:
      - value: It is used to set the locale on the `Request` object, which influences
          the language of content, translations, and other locale-dependent
          services.
        correct: true
      - value: It defines the default language for the application if no other locale is
          specified in the URL or browser settings.
        correct: false
      - value: It is a mandatory parameter for all routes in a multi-language Symfony
          application.
        correct: false
      - value: It enables automatic language detection based on the user's IP address.
        correct: false
    help: |-
      The `_locale` attribute is a fundamental part of Symfony's internationalization capabilities, allowing the application to adapt to different languages and regions.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid YAML configuration to define a route
      named `api_post_show` for `/api/posts/{id}` that only responds to `GET`
      and `HEAD` HTTP methods?
    answers:
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    GET|HEAD
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    [GET, HEAD]
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              http_methods: GET, HEAD
        correct: false
    help: >-
      The `methods` option in YAML routing can accept either a pipe-separated
      string or a YAML array to specify allowed HTTP methods.

      https://symfony.com/doc/current/routing.html#restricting-to-an-http-method
  - question: What is the purpose of the `_fragment` special internal routing attribute?
    answers:
      - value: It is used to set the fragment identifier (the part of the URL after the
          `#`), which is typically used for client-side navigation within a
          document.
        correct: true
      - value: It defines a default HTML fragment to be included in the response for the
          route.
        correct: false
      - value: It is a route parameter that must be a valid HTML element ID.
        correct: false
      - value: It enables partial content loading for a route.
        correct: false
    help: |-
      The `_fragment` attribute helps Symfony handle URL fragments, which are client-side identifiers for specific parts of a web page.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid PHP attribute configuration to
      define a route named `blog_list` for `/blog/{page}` with a default `page`
      value of `1` and a requirement that `page` is a digit?
    answers:
      - value: "`#[Route('/blog/{page<\\\\d+>?1}', name: 'blog_list')]`"
        correct: true
      - value: "`#[Route('/blog/{page}', name: 'blog_list', defaults: ['page' => 1],
          requirements: ['page' => '\\\\d+'])]`"
        correct: false
      - value: "`#[Route('/blog/{page}', name: 'blog_list', regex: {'page': '\\\\d+'},
          default: {'page': 1})]`"
        correct: false
    help: |-
      The inline syntax `{parameter_name<requirements>?default_value}` is a concise way to define parameters with both requirements and default values directly in the route path.
      https://symfony.com/doc/current/routing.html#inlining-requirements-and-defaults
  - question: What is the purpose of the `_locale` special internal routing attribute?
    answers:
      - value: It is used to set the locale on the `Request` object, enabling the
          application to serve localized content and use appropriate
          translations.
        correct: true
      - value: It defines the default language for the application if no other locale is
          specified.
        correct: false
      - value: It is a mandatory parameter for all routes in a multi-language
          application.
        correct: false
      - value: It automatically detects the user's preferred language from their browser
          settings.
        correct: false
    help: |-
      The `_locale` attribute is fundamental for implementing internationalization (i18n) in Symfony applications, allowing dynamic language switching based on the URL.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid YAML configuration to define a route
      named `blog_list` for `/blog/{page}` with a default `page` value of `1`
      and a requirement that `page` is a digit?
    answers:
      - value: |-
          blog_list:
              path:       /blog/{page}
              controller: App\Controller\BlogController::list
              defaults:
                  page: 1
              requirements:
                  page: '\\d+'
        correct: true
      - value: |-
          blog_list:
              path:       /blog/{page?1}
              controller: App\Controller\BlogController::list
              requirements:
                  page: '\\d+'
        correct: false
      - value: |-
          blog_list:
              path:       /blog/{page}
              controller: App\Controller\BlogController::list
              options:
                  default_page: 1
                  page_regex: '\\d+'
        correct: false
    help: >-
      In YAML, `defaults` are used for default parameter values and
      `requirements` for regular expression validation.

      https://symfony.com/doc/current/routing.html#optional-parameters
  - question: What is the purpose of the `_fragment` special internal routing attribute?
    answers:
      - value: It is used to specify the URL fragment identifier (the part after `#`),
          which is typically used for client-side navigation to a specific
          section within a page.
        correct: true
      - value: It defines a default HTML fragment to be included in the response for the
          route.
        correct: false
      - value: It is a route parameter that must be a valid HTML element ID.
        correct: false
      - value: It enables partial content loading for a route.
        correct: false
    help: |-
      The `_fragment` attribute allows Symfony to manage the fragment part of a URL, which is often used for in-page navigation.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid PHP attribute configuration to
      define a route named `blog_list` for `/blog/{page}` with a default `page`
      value of `1` and a requirement that `page` is a digit?
    answers:
      - value: "`#[Route('/blog/{page<\\\\d+>?1}', name: 'blog_list')]`"
        correct: true
      - value: "`#[Route('/blog/{page}', name: 'blog_list', defaults: ['page' => 1],
          requirements: ['page' => '\\\\d+'])]`"
        correct: false
      - value: "`#[Route('/blog/{page}', name: 'blog_list', regex: {'page': '\\\\d+'},
          default: {'page': 1})]`"
        correct: false
    help: |-
      The inline syntax `{parameter_name<requirements>?default_value}` is a concise way to define parameters with both requirements and default values directly in the route path.
      https://symfony.com/doc/current/routing.html#inlining-requirements-and-defaults
  - question: What is the purpose of the `_locale` special internal routing attribute?
    answers:
      - value: It is used to set the locale on the `Request` object, enabling the
          application to serve localized content and use appropriate
          translations.
        correct: true
      - value: It defines the default language for the application if no other locale is
          specified.
        correct: false
      - value: It is a mandatory parameter for all routes in a multi-language Symfony
          application.
        correct: false
      - value: It automatically detects the user's preferred language from their browser
          settings.
        correct: false
    help: |-
      The `_locale` attribute is fundamental for implementing internationalization (i18n) in Symfony applications, allowing dynamic language switching based on the URL.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid YAML configuration to define a route
      named `api_post_show` for `/api/posts/{id}` that only responds to `GET`
      and `HEAD` HTTP methods?
    answers:
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    GET|HEAD
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    [GET, HEAD]
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              http_methods: GET, HEAD
        correct: false
    help: >-
      The `methods` option in YAML routing can accept either a pipe-separated
      string or a YAML array to specify allowed HTTP methods.

      https://symfony.com/doc/current/routing.html#restricting-to-an-http-method
  - question: What is the purpose of the `_fragment` special internal routing attribute?
    answers:
      - value: It is used to specify the URL fragment identifier (the part of the URL
          after the `#`), which is typically used for client-side navigation to
          a specific section within a page.
        correct: true
      - value: It defines a default HTML fragment to be included in the response for the
          route.
        correct: false
      - value: It is a route parameter that must be a valid HTML element ID.
        correct: false
      - value: It enables partial content loading for a route.
        correct: false
    help: |-
      The `_fragment` attribute allows Symfony to manage the fragment part of a URL, which is often used for in-page navigation.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid PHP attribute configuration to
      define a route named `blog_list` for `/blog/{page}` with a default `page`
      value of `1` and a requirement that `page` is a digit?
    answers:
      - value: "`#[Route('/blog/{page<\\\\d+>?1}', name: 'blog_list')]`"
        correct: true
      - value: "`#[Route('/blog/{page}', name: 'blog_list', defaults: ['page' => 1],
          requirements: ['page' => '\\\\d+'])]`"
        correct: false
      - value: "`#[Route('/blog/{page}', name: 'blog_list', regex: {'page': '\\\\d+'},
          default: {'page': 1})]`"
        correct: false
    help: |-
      The inline syntax `{parameter_name<requirements>?default_value}` is a concise way to define parameters with both requirements and default values directly in the route path.
      https://symfony.com/doc/current/routing.html#inlining-requirements-and-defaults
  - question: What is the purpose of the `_locale` special internal routing attribute?
    answers:
      - value: It is used to set the locale on the `Request` object, enabling the
          application to serve localized content and use appropriate
          translations.
        correct: true
      - value: It defines the default language for the application if no other locale is
          specified.
        correct: false
      - value: It is a mandatory parameter for all routes in a multi-language Symfony
          application.
        correct: false
      - value: It automatically detects the user's preferred language from their browser
          settings.
        correct: false
    help: |-
      The `_locale` attribute is fundamental for implementing internationalization (i18n) in Symfony applications, allowing dynamic language switching based on the URL.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid YAML configuration to define a route
      named `api_post_show` for `/api/posts/{id}` that only responds to `GET`
      and `HEAD` HTTP methods?
    answers:
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    GET|HEAD
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    [GET, HEAD]
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              http_methods: GET, HEAD
        correct: false
    help: >-
      The `methods` option in YAML routing can accept either a pipe-separated
      string or a YAML array to specify allowed HTTP methods.

      https://symfony.com/doc/current/routing.html#restricting-to-an-http-method
  - question: What is the purpose of the `_fragment` special internal routing attribute?
    answers:
      - value: It is used to specify the URL fragment identifier (the part of the URL
          after the `#`), which is typically used for client-side navigation to
          a specific section within a page.
        correct: true
      - value: It defines a default HTML fragment to be included in the response for the
          route.
        correct: false
      - value: It is a route parameter that must be a valid HTML element ID.
        correct: false
      - value: It enables partial content loading for a route.
        correct: false
    help: |-
      The `_fragment` attribute allows Symfony to manage the fragment part of a URL, which is often used for in-page navigation.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid PHP attribute configuration to
      define a route named `blog_list` for `/blog/{page}` with a default `page`
      value of `1` and a requirement that `page` is a digit?
    answers:
      - value: "`#[Route('/blog/{page<\\\\d+>?1}', name: 'blog_list')]`"
        correct: true
      - value: "`#[Route('/blog/{page}', name: 'blog_list', defaults: ['page' => 1],
          requirements: ['page' => '\\\\d+'])]`"
        correct: false
      - value: "`#[Route('/blog/{page}', name: 'blog_list', regex: {'page': '\\\\d+'},
          default: {'page': 1})]`"
        correct: false
    help: |-
      The inline syntax `{parameter_name<requirements>?default_value}` is a concise way to define parameters with both requirements and default values directly in the route path.
      https://symfony.com/doc/current/routing.html#inlining-requirements-and-defaults
  - question: What is the purpose of the `_locale` special internal routing attribute?
    answers:
      - value: It is used to set the locale on the `Request` object, enabling the
          application to serve localized content and use appropriate
          translations.
        correct: true
      - value: It defines the default language for the application if no other locale is
          specified.
        correct: false
      - value: It is a mandatory parameter for all routes in a multi-language Symfony
          application.
        correct: false
      - value: It automatically detects the user's preferred language from their browser
          settings.
        correct: false
    help: |-
      The `_locale` attribute is fundamental for implementing internationalization (i18n) in Symfony applications, allowing dynamic language switching based on the URL.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid YAML configuration to define a route
      named `api_post_show` for `/api/posts/{id}` that only responds to `GET`
      and `HEAD` HTTP methods?
    answers:
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    GET|HEAD
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    [GET, HEAD]
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              http_methods: GET, HEAD
        correct: false
    help: >-
      The `methods` option in YAML routing can accept either a pipe-separated
      string or a YAML array to specify allowed HTTP methods.

      https://symfony.com/doc/current/routing.html#restricting-to-an-http-method
  - question: What is the purpose of the `_fragment` special internal routing attribute?
    answers:
      - value: It is used to specify the URL fragment identifier (the part of the URL
          after the `#`), which is typically used for client-side navigation to
          a specific section within a page.
        correct: true
      - value: It defines a default HTML fragment to be included in the response for the
          route.
        correct: false
      - value: It is a route parameter that must be a valid HTML element ID.
        correct: false
      - value: It enables partial content loading for a route.
        correct: false
    help: |-
      The `_fragment` attribute allows Symfony to manage the fragment part of a URL, which is often used for in-page navigation.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid PHP attribute configuration to
      define a route named `blog_list` for `/blog/{page}` with a default `page`
      value of `1` and a requirement that `page` is a digit?
    answers:
      - value: "`#[Route('/blog/{page<\\\\d+>?1}', name: 'blog_list')]`"
        correct: true
      - value: "`#[Route('/blog/{page}', name: 'blog_list', defaults: ['page' => 1],
          requirements: ['page' => '\\\\d+'])]`"
        correct: false
      - value: "`#[Route('/blog/{page}', name: 'blog_list', regex: {'page': '\\\\d+'},
          default: {'page': 1})]`"
        correct: false
    help: |-
      The inline syntax `{parameter_name<requirements>?default_value}` is a concise way to define parameters with both requirements and default values directly in the route path.
      https://symfony.com/doc/current/routing.html#inlining-requirements-and-defaults
  - question: What is the purpose of the `_locale` special internal routing attribute?
    answers:
      - value: It is used to set the locale on the `Request` object, enabling the
          application to serve localized content and use appropriate
          translations.
        correct: true
      - value: It defines the default language for the application if no other locale is
          specified.
        correct: false
      - value: It is a mandatory parameter for all routes in a multi-language Symfony
          application.
        correct: false
      - value: It automatically detects the user's preferred language from their browser
          settings.
        correct: false
    help: |-
      The `_locale` attribute is fundamental for implementing internationalization (i18n) in Symfony applications, allowing dynamic language switching based on the URL.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid YAML configuration to define a route
      named `api_post_show` for `/api/posts/{id}` that only responds to `GET`
      and `HEAD` HTTP methods?
    answers:
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    GET|HEAD
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    [GET, HEAD]
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              http_methods: GET, HEAD
        correct: false
    help: >-
      The `methods` option in YAML routing can accept either a pipe-separated
      string or a YAML array to specify allowed HTTP methods.

      https://symfony.com/doc/current/routing.html#restricting-to-an-http-method
  - question: What is the purpose of the `_fragment` special internal routing attribute?
    answers:
      - value: It is used to specify the URL fragment identifier (the part of the URL
          after the `#`), which is typically used for client-side navigation to
          a specific section within a page.
        correct: true
      - value: It defines a default HTML fragment to be included in the response for the
          route.
        correct: false
      - value: It is a route parameter that must be a valid HTML element ID.
        correct: false
      - value: It enables partial content loading for a route.
        correct: false
    help: |-
      The `_fragment` attribute allows Symfony to manage the fragment part of a URL, which is often used for in-page navigation.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid PHP attribute configuration to
      define a route named `blog_list` for `/blog/{page}` with a default `page`
      value of `1` and a requirement that `page` is a digit?
    answers:
      - value: "`#[Route('/blog/{page<\\\\d+>?1}', name: 'blog_list')]`"
        correct: true
      - value: "`#[Route('/blog/{page}', name: 'blog_list', defaults: ['page' => 1],
          requirements: ['page' => '\\\\d+'])]`"
        correct: false
      - value: "`#[Route('/blog/{page}', name: 'blog_list', regex: {'page': '\\\\d+'},
          default: {'page': 1})]`"
        correct: false
    help: |-
      The inline syntax `{parameter_name<requirements>?default_value}` is a concise way to define parameters with both requirements and default values directly in the route path.
      https://symfony.com/doc/current/routing.html#inlining-requirements-and-defaults
  - question: What is the purpose of the `_locale` special internal routing attribute?
    answers:
      - value: It is used to set the locale on the `Request` object, enabling the
          application to serve localized content and use appropriate
          translations.
        correct: true
      - value: It defines the default language for the application if no other locale is
          specified.
        correct: false
      - value: It is a mandatory parameter for all routes in a multi-language Symfony
          application.
        correct: false
      - value: It automatically detects the user's preferred language from their browser
          settings.
        correct: false
    help: |-
      The `_locale` attribute is fundamental for implementing internationalization (i18n) in Symfony applications, allowing dynamic language switching based on the URL.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid YAML configuration to define a route
      named `api_post_show` for `/api/posts/{id}` that only responds to `GET`
      and `HEAD` HTTP methods?
    answers:
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    GET|HEAD
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    [GET, HEAD]
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              http_methods: GET, HEAD
        correct: false
    help: >-
      The `methods` option in YAML routing can accept either a pipe-separated
      string or a YAML array to specify allowed HTTP methods.

      https://symfony.com/doc/current/routing.html#restricting-to-an-http-method
  - question: What is the purpose of the `_fragment` special internal routing attribute?
    answers:
      - value: It is used to specify the URL fragment identifier (the part of the URL
          after the `#`), which is typically used for client-side navigation to
          a specific section within a page.
        correct: true
      - value: It defines a default HTML fragment to be included in the response for the
          route.
        correct: false
      - value: It is a route parameter that must be a valid HTML element ID.
        correct: false
      - value: It enables partial content loading for a route.
        correct: false
    help: |-
      The `_fragment` attribute allows Symfony to manage the fragment part of a URL, which is often used for in-page navigation.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid PHP attribute configuration to
      define a route named `blog_list` for `/blog/{page}` with a default `page`
      value of `1` and a requirement that `page` is a digit?
    answers:
      - value: "`#[Route('/blog/{page<\\\\d+>?1}', name: 'blog_list')]`"
        correct: true
      - value: "`#[Route('/blog/{page}', name: 'blog_list', defaults: ['page' => 1],
          requirements: ['page' => '\\\\d+'])]`"
        correct: false
      - value: "`#[Route('/blog/{page}', name: 'blog_list', regex: {'page': '\\\\d+'},
          default: {'page': 1})]`"
        correct: false
    help: |-
      The inline syntax `{parameter_name<requirements>?default_value}` is a concise way to define parameters with both requirements and default values directly in the route path.
      https://symfony.com/doc/current/routing.html#inlining-requirements-and-defaults
  - question: What is the purpose of the `_locale` special internal routing attribute?
    answers:
      - value: It is used to set the locale on the `Request` object, enabling the
          application to serve localized content and use appropriate
          translations.
        correct: true
      - value: It defines the default language for the application if no other locale is
          specified.
        correct: false
      - value: It is a mandatory parameter for all routes in a multi-language Symfony
          application.
        correct: false
      - value: It automatically detects the user's preferred language from their browser
          settings.
        correct: false
    help: |-
      The `_locale` attribute is fundamental for implementing internationalization (i18n) in Symfony applications, allowing dynamic language switching based on the URL.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid YAML configuration to define a route
      named `api_post_show` for `/api/posts/{id}` that only responds to `GET`
      and `HEAD` HTTP methods?
    answers:
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    GET|HEAD
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    [GET, HEAD]
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              http_methods: GET, HEAD
        correct: false
    help: >-
      The `methods` option in YAML routing can accept either a pipe-separated
      string or a YAML array to specify allowed HTTP methods.

      https://symfony.com/doc/current/routing.html#restricting-to-an-http-method
  - question: What is the purpose of the `_fragment` special internal routing attribute?
    answers:
      - value: It is used to specify the URL fragment identifier (the part of the URL
          after the `#`), which is typically used for client-side navigation to
          a specific section within a page.
        correct: true
      - value: It defines a default HTML fragment to be included in the response for the
          route.
        correct: false
      - value: It is a route parameter that must be a valid HTML element ID.
        correct: false
      - value: It enables partial content loading for a route.
        correct: false
    help: |-
      The `_fragment` attribute allows Symfony to manage the fragment part of a URL, which is often used for in-page navigation.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid PHP attribute configuration to
      define a route named `blog_list` for `/blog/{page}` with a default `page`
      value of `1` and a requirement that `page` is a digit?
    answers:
      - value: "`#[Route('/blog/{page<\\\\d+>?1}', name: 'blog_list')]`"
        correct: true
      - value: "`#[Route('/blog/{page}', name: 'blog_list', defaults: ['page' => 1],
          requirements: ['page' => '\\\\d+'])]`"
        correct: false
      - value: "`#[Route('/blog/{page}', name: 'blog_list', regex: {'page': '\\\\d+'},
          default: {'page': 1})]`"
        correct: false
    help: |-
      The inline syntax `{parameter_name<requirements>?default_value}` is a concise way to define parameters with both requirements and default values directly in the route path.
      https://symfony.com/doc/current/routing.html#inlining-requirements-and-defaults
  - question: What is the purpose of the `_locale` special internal routing attribute?
    answers:
      - value: It is used to set the locale on the `Request` object, enabling the
          application to serve localized content and use appropriate
          translations.
        correct: true
      - value: It defines the default language for the application if no other locale is
          specified.
        correct: false
      - value: It is a mandatory parameter for all routes in a multi-language Symfony
          application.
        correct: false
      - value: It automatically detects the user's preferred language from their browser
          settings.
        correct: false
    help: |-
      The `_locale` attribute is fundamental for implementing internationalization (i18n) in Symfony applications, allowing dynamic language switching based on the URL.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid YAML configuration to define a route
      named `api_post_show` for `/api/posts/{id}` that only responds to `GET`
      and `HEAD` HTTP methods?
    answers:
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    GET|HEAD
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    [GET, HEAD]
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              http_methods: GET, HEAD
        correct: false
    help: >-
      The `methods` option in YAML routing can accept either a pipe-separated
      string or a YAML array to specify allowed HTTP methods.

      https://symfony.com/doc/current/routing.html#restricting-to-an-http-method
  - question: What is the purpose of the `_fragment` special internal routing attribute?
    answers:
      - value: It is used to specify the URL fragment identifier (the part of the URL
          after the `#`), which is typically used for client-side navigation to
          a specific section within a page.
        correct: true
      - value: It defines a default HTML fragment to be included in the response for the
          route.
        correct: false
      - value: It is a route parameter that must be a valid HTML element ID.
        correct: false
      - value: It enables partial content loading for a route.
        correct: false
    help: |-
      The `_fragment` attribute allows Symfony to manage the fragment part of a URL, which is often used for in-page navigation.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid PHP attribute configuration to
      define a route named `blog_list` for `/blog/{page}` with a default `page`
      value of `1` and a requirement that `page` is a digit?
    answers:
      - value: "`#[Route('/blog/{page<\\\\d+>?1}', name: 'blog_list')]`"
        correct: true
      - value: "`#[Route('/blog/{page}', name: 'blog_list', defaults: ['page' => 1],
          requirements: ['page' => '\\\\d+'])]`"
        correct: false
      - value: "`#[Route('/blog/{page}', name: 'blog_list', regex: {'page': '\\\\d+'},
          default: {'page': 1})]`"
        correct: false
    help: |-
      The inline syntax `{parameter_name<requirements>?default_value}` is a concise way to define parameters with both requirements and default values directly in the route path.
      https://symfony.com/doc/current/routing.html#inlining-requirements-and-defaults
  - question: What is the purpose of the `_locale` special internal routing attribute?
    answers:
      - value: It is used to set the locale on the `Request` object, enabling the
          application to serve localized content and use appropriate
          translations.
        correct: true
      - value: It defines the default language for the application if no other locale is
          specified.
        correct: false
      - value: It is a mandatory parameter for all routes in a multi-language Symfony
          application.
        correct: false
      - value: It automatically detects the user's preferred language from their browser
          settings.
        correct: false
    help: |-
      The `_locale` attribute is fundamental for implementing internationalization (i18n) in Symfony applications, allowing dynamic language switching based on the URL.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid YAML configuration to define a route
      named `api_post_show` for `/api/posts/{id}` that only responds to `GET`
      and `HEAD` HTTP methods?
    answers:
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    GET|HEAD
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    [GET, HEAD]
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              http_methods: GET, HEAD
        correct: false
    help: >-
      The `methods` option in YAML routing can accept either a pipe-separated
      string or a YAML array to specify allowed HTTP methods.

      https://symfony.com/doc/current/routing.html#restricting-to-an-http-method
  - question: What is the purpose of the `_fragment` special internal routing attribute?
    answers:
      - value: It is used to specify the URL fragment identifier (the part of the URL
          after the `#`), which is typically used for client-side navigation to
          a specific section within a page.
        correct: true
      - value: It defines a default HTML fragment to be included in the response for the
          route.
        correct: false
      - value: It is a route parameter that must be a valid HTML element ID.
        correct: false
      - value: It enables partial content loading for a route.
        correct: false
    help: |-
      The `_fragment` attribute allows Symfony to manage the fragment part of a URL, which is often used for in-page navigation.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid PHP attribute configuration to
      define a route named `blog_list` for `/blog/{page}` with a default `page`
      value of `1` and a requirement that `page` is a digit?
    answers:
      - value: "`#[Route('/blog/{page<\\\\d+>?1}', name: 'blog_list')]`"
        correct: true
      - value: "`#[Route('/blog/{page}', name: 'blog_list', defaults: ['page' => 1],
          requirements: ['page' => '\\\\d+'])]`"
        correct: false
      - value: "`#[Route('/blog/{page}', name: 'blog_list', regex: {'page': '\\\\d+'},
          default: {'page': 1})]`"
        correct: false
    help: |-
      The inline syntax `{parameter_name<requirements>?default_value}` is a concise way to define parameters with both requirements and default values directly in the route path.
      https://symfony.com/doc/current/routing.html#inlining-requirements-and-defaults
  - question: What is the purpose of the `_locale` special internal routing attribute?
    answers:
      - value: It is used to set the locale on the `Request` object, enabling the
          application to serve localized content and use appropriate
          translations.
        correct: true
      - value: It defines the default language for the application if no other locale is
          specified.
        correct: false
      - value: It is a mandatory parameter for all routes in a multi-language Symfony
          application.
        correct: false
      - value: It automatically detects the user's preferred language from their browser
          settings.
        correct: false
    help: |-
      The `_locale` attribute is fundamental for implementing internationalization (i18n) in Symfony applications, allowing dynamic language switching based on the URL.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid YAML configuration to define a route
      named `api_post_show` for `/api/posts/{id}` that only responds to `GET`
      and `HEAD` HTTP methods?
    answers:
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    GET|HEAD
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    [GET, HEAD]
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              http_methods: GET, HEAD
        correct: false
    help: >-
      The `methods` option in YAML routing can accept either a pipe-separated
      string or a YAML array to specify allowed HTTP methods.

      https://symfony.com/doc/current/routing.html#restricting-to-an-http-method
  - question: What is the purpose of the `_fragment` special internal routing attribute?
    answers:
      - value: It is used to specify the URL fragment identifier (the part of the URL
          after the `#`), which is typically used for client-side navigation to
          a specific section within a page.
        correct: true
      - value: It defines a default HTML fragment to be included in the response for the
          route.
        correct: false
      - value: It is a route parameter that must be a valid HTML element ID.
        correct: false
      - value: It enables partial content loading for a route.
        correct: false
    help: |-
      The `_fragment` attribute allows Symfony to manage the fragment part of a URL, which is often used for in-page navigation.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid PHP attribute configuration to
      define a route named `blog_list` for `/blog/{page}` with a default `page`
      value of `1` and a requirement that `page` is a digit?
    answers:
      - value: "`#[Route('/blog/{page<\\\\d+>?1}', name: 'blog_list')]`"
        correct: true
      - value: "`#[Route('/blog/{page}', name: 'blog_list', defaults: ['page' => 1],
          requirements: ['page' => '\\\\d+'])]`"
        correct: false
      - value: "`#[Route('/blog/{page}', name: 'blog_list', regex: {'page': '\\\\d+'},
          default: {'page': 1})]`"
        correct: false
    help: |-
      The inline syntax `{parameter_name<requirements>?default_value}` is a concise way to define parameters with both requirements and default values directly in the route path.
      https://symfony.com/doc/current/routing.html#inlining-requirements-and-defaults
  - question: What is the purpose of the `_locale` special internal routing attribute?
    answers:
      - value: It is used to set the locale on the `Request` object, enabling the
          application to serve localized content and use appropriate
          translations.
        correct: true
      - value: It defines the default language for the application if no other locale is
          specified.
        correct: false
      - value: It is a mandatory parameter for all routes in a multi-language Symfony
          application.
        correct: false
      - value: It automatically detects the user's preferred language from their browser
          settings.
        correct: false
    help: |-
      The `_locale` attribute is fundamental for implementing internationalization (i18n) in Symfony applications, allowing dynamic language switching based on the URL.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid YAML configuration to define a route
      named `api_post_show` for `/api/posts/{id}` that only responds to `GET`
      and `HEAD` HTTP methods?
    answers:
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    GET|HEAD
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    [GET, HEAD]
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              http_methods: GET, HEAD
        correct: false
    help: >-
      The `methods` option in YAML routing can accept either a pipe-separated
      string or a YAML array to specify allowed HTTP methods.

      https://symfony.com/doc/current/routing.html#restricting-to-an-http-method
  - question: What is the purpose of the `_fragment` special internal routing attribute?
    answers:
      - value: It is used to specify the URL fragment identifier (the part of the URL
          after the `#`), which is typically used for client-side navigation to
          a specific section within a page.
        correct: true
      - value: It defines a default HTML fragment to be included in the response for the
          route.
        correct: false
      - value: It is a route parameter that must be a valid HTML element ID.
        correct: false
      - value: It enables partial content loading for a route.
        correct: false
    help: |-
      The `_fragment` attribute allows Symfony to manage the fragment part of a URL, which is often used for in-page navigation.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid PHP attribute configuration to
      define a route named `blog_list` for `/blog/{page}` with a default `page`
      value of `1` and a requirement that `page` is a digit?
    answers:
      - value: "`#[Route('/blog/{page<\\\\d+>?1}', name: 'blog_list')]`"
        correct: true
      - value: "`#[Route('/blog/{page}', name: 'blog_list', defaults: ['page' => 1],
          requirements: ['page' => '\\\\d+'])]`"
        correct: false
      - value: "`#[Route('/blog/{page}', name: 'blog_list', regex: {'page': '\\\\d+'},
          default: {'page': 1})]`"
        correct: false
    help: |-
      The inline syntax `{parameter_name<requirements>?default_value}` is a concise way to define parameters with both requirements and default values directly in the route path.
      https://symfony.com/doc/current/routing.html#inlining-requirements-and-defaults
  - question: What is the purpose of the `_locale` special internal routing attribute?
    answers:
      - value: It is used to set the locale on the `Request` object, enabling the
          application to serve localized content and use appropriate
          translations.
        correct: true
      - value: It defines the default language for the application if no other locale is
          specified.
        correct: false
      - value: It is a mandatory parameter for all routes in a multi-language Symfony
          application.
        correct: false
      - value: It automatically detects the user's preferred language from their browser
          settings.
        correct: false
    help: |-
      The `_locale` attribute is fundamental for implementing internationalization (i18n) in Symfony applications, allowing dynamic language switching based on the URL.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid YAML configuration to define a route
      named `api_post_show` for `/api/posts/{id}` that only responds to `GET`
      and `HEAD` HTTP methods?
    answers:
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    GET|HEAD
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    [GET, HEAD]
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              http_methods: GET, HEAD
        correct: false
    help: >-
      The `methods` option in YAML routing can accept either a pipe-separated
      string or a YAML array to specify allowed HTTP methods.

      https://symfony.com/doc/current/routing.html#restricting-to-an-http-method
  - question: What is the purpose of the `_fragment` special internal routing attribute?
    answers:
      - value: It is used to specify the URL fragment identifier (the part of the URL
          after the `#`), which is typically used for client-side navigation to
          a specific section within a page.
        correct: true
      - value: It defines a default HTML fragment to be included in the response for the
          route.
        correct: false
      - value: It is a route parameter that must be a valid HTML element ID.
        correct: false
      - value: It enables partial content loading for a route.
        correct: false
    help: |-
      The `_fragment` attribute allows Symfony to manage the fragment part of a URL, which is often used for in-page navigation.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid PHP attribute configuration to
      define a route named `blog_list` for `/blog/{page}` with a default `page`
      value of `1` and a requirement that `page` is a digit?
    answers:
      - value: "`#[Route('/blog/{page<\\\\d+>?1}', name: 'blog_list')]`"
        correct: true
      - value: "`#[Route('/blog/{page}', name: 'blog_list', defaults: ['page' => 1],
          requirements: ['page' => '\\\\d+'])]`"
        correct: false
      - value: "`#[Route('/blog/{page}', name: 'blog_list', regex: {'page': '\\\\d+'},
          default: {'page': 1})]`"
        correct: false
    help: |-
      The inline syntax `{parameter_name<requirements>?default_value}` is a concise way to define parameters with both requirements and default values directly in the route path.
      https://symfony.com/doc/current/routing.html#inlining-requirements-and-defaults
  - question: What is the purpose of the `_locale` special internal routing attribute?
    answers:
      - value: It is used to set the locale on the `Request` object, enabling the
          application to serve localized content and use appropriate
          translations.
        correct: true
      - value: It defines the default language for the application if no other locale is
          specified.
        correct: false
      - value: It is a mandatory parameter for all routes in a multi-language Symfony
          application.
        correct: false
      - value: It automatically detects the user's preferred language from their browser
          settings.
        correct: false
    help: |-
      The `_locale` attribute is fundamental for implementing internationalization (i18n) in Symfony applications, allowing dynamic language switching based on the URL.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid YAML configuration to define a route
      named `api_post_show` for `/api/posts/{id}` that only responds to `GET`
      and `HEAD` HTTP methods?
    answers:
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    GET|HEAD
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    [GET, HEAD]
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              http_methods: GET, HEAD
        correct: false
    help: >-
      The `methods` option in YAML routing can accept either a pipe-separated
      string or a YAML array to specify allowed HTTP methods.

      https://symfony.com/doc/current/routing.html#restricting-to-an-http-method
  - question: What is the purpose of the `_fragment` special internal routing attribute?
    answers:
      - value: It is used to specify the URL fragment identifier (the part of the URL
          after the `#`), which is typically used for client-side navigation to
          a specific section within a page.
        correct: true
      - value: It defines a default HTML fragment to be included in the response for the
          route.
        correct: false
      - value: It is a route parameter that must be a valid HTML element ID.
        correct: false
      - value: It enables partial content loading for a route.
        correct: false
    help: |-
      The `_fragment` attribute allows Symfony to manage the fragment part of a URL, which is often used for in-page navigation.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid PHP attribute configuration to
      define a route named `blog_list` for `/blog/{page}` with a default `page`
      value of `1` and a requirement that `page` is a digit?
    answers:
      - value: "`#[Route('/blog/{page<\\\\d+>?1}', name: 'blog_list')]`"
        correct: true
      - value: "`#[Route('/blog/{page}', name: 'blog_list', defaults: ['page' => 1],
          requirements: ['page' => '\\\\d+'])]`"
        correct: false
      - value: "`#[Route('/blog/{page}', name: 'blog_list', regex: {'page': '\\\\d+'},
          default: {'page': 1})]`"
        correct: false
    help: |-
      The inline syntax `{parameter_name<requirements>?default_value}` is a concise way to define parameters with both requirements and default values directly in the route path.
      https://symfony.com/doc/current/routing.html#inlining-requirements-and-defaults
  - question: What is the purpose of the `_locale` special internal routing attribute?
    answers:
      - value: It is used to set the locale on the `Request` object, enabling the
          application to serve localized content and use appropriate
          translations.
        correct: true
      - value: It defines the default language for the application if no other locale is
          specified.
        correct: false
      - value: It is a mandatory parameter for all routes in a multi-language Symfony
          application.
        correct: false
      - value: It automatically detects the user's preferred language from their browser
          settings.
        correct: false
    help: |-
      The `_locale` attribute is fundamental for implementing internationalization (i18n) in Symfony applications, allowing dynamic language switching based on the URL.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid YAML configuration to define a route
      named `api_post_show` for `/api/posts/{id}` that only responds to `GET`
      and `HEAD` HTTP methods?
    answers:
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    GET|HEAD
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    [GET, HEAD]
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              http_methods: GET, HEAD
        correct: false
    help: >-
      The `methods` option in YAML routing can accept either a pipe-separated
      string or a YAML array to specify allowed HTTP methods.

      https://symfony.com/doc/current/routing.html#restricting-to-an-http-method
  - question: What is the purpose of the `_fragment` special internal routing attribute?
    answers:
      - value: It is used to specify the URL fragment identifier (the part of the URL
          after the `#`), which is typically used for client-side navigation to
          a specific section within a page.
        correct: true
      - value: It defines a default HTML fragment to be included in the response for the
          route.
        correct: false
      - value: It is a route parameter that must be a valid HTML element ID.
        correct: false
      - value: It enables partial content loading for a route.
        correct: false
    help: |-
      The `_fragment` attribute allows Symfony to manage the fragment part of a URL, which is often used for in-page navigation.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid PHP attribute configuration to
      define a route named `blog_list` for `/blog/{page}` with a default `page`
      value of `1` and a requirement that `page` is a digit?
    answers:
      - value: "`#[Route('/blog/{page<\\\\d+>?1}', name: 'blog_list')]`"
        correct: true
      - value: "`#[Route('/blog/{page}', name: 'blog_list', defaults: ['page' => 1],
          requirements: ['page' => '\\\\d+'])]`"
        correct: false
      - value: "`#[Route('/blog/{page}', name: 'blog_list', regex: {'page': '\\\\d+'},
          default: {'page': 1})]`"
        correct: false
    help: |-
      The inline syntax `{parameter_name<requirements>?default_value}` is a concise way to define parameters with both requirements and default values directly in the route path.
      https://symfony.com/doc/current/routing.html#inlining-requirements-and-defaults
  - question: What is the purpose of the `_locale` special internal routing attribute?
    answers:
      - value: It is used to set the locale on the `Request` object, enabling the
          application to serve localized content and use appropriate
          translations.
        correct: true
      - value: It defines the default language for the application if no other locale is
          specified.
        correct: false
      - value: It is a mandatory parameter for all routes in a multi-language Symfony
          application.
        correct: false
      - value: It automatically detects the user's preferred language from their browser
          settings.
        correct: false
    help: |-
      The `_locale` attribute is fundamental for implementing internationalization (i18n) in Symfony applications, allowing dynamic language switching based on the URL.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid YAML configuration to define a route
      named `api_post_show` for `/api/posts/{id}` that only responds to `GET`
      and `HEAD` HTTP methods?
    answers:
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    GET|HEAD
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    [GET, HEAD]
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              http_methods: GET, HEAD
        correct: false
    help: >-
      The `methods` option in YAML routing can accept either a pipe-separated
      string or a YAML array to specify allowed HTTP methods.

      https://symfony.com/doc/current/routing.html#restricting-to-an-http-method
  - question: What is the purpose of the `_fragment` special internal routing attribute?
    answers:
      - value: It is used to specify the URL fragment identifier (the part of the URL
          after the `#`), which is typically used for client-side navigation to
          a specific section within a page.
        correct: true
      - value: It defines a default HTML fragment to be included in the response for the
          route.
        correct: false
      - value: It is a route parameter that must be a valid HTML element ID.
        correct: false
      - value: It enables partial content loading for a route.
        correct: false
    help: |-
      The `_fragment` attribute allows Symfony to manage the fragment part of a URL, which is often used for in-page navigation.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid PHP attribute configuration to
      define a route named `blog_list` for `/blog/{page}` with a default `page`
      value of `1` and a requirement that `page` is a digit?
    answers:
      - value: "`#[Route('/blog/{page<\\\\d+>?1}', name: 'blog_list')]`"
        correct: true
      - value: "`#[Route('/blog/{page}', name: 'blog_list', defaults: ['page' => 1],
          requirements: ['page' => '\\\\d+'])]`"
        correct: false
      - value: "`#[Route('/blog/{page}', name: 'blog_list', regex: {'page': '\\\\d+'},
          default: {'page': 1})]`"
        correct: false
    help: |-
      The inline syntax `{parameter_name<requirements>?default_value}` is a concise way to define parameters with both requirements and default values directly in the route path.
      https://symfony.com/doc/current/routing.html#inlining-requirements-and-defaults
  - question: What is the purpose of the `_locale` special internal routing attribute?
    answers:
      - value: It is used to set the locale on the `Request` object, enabling the
          application to serve localized content and use appropriate
          translations.
        correct: true
      - value: It defines the default language for the application if no other locale is
          specified.
        correct: false
      - value: It is a mandatory parameter for all routes in a multi-language Symfony
          application.
        correct: false
      - value: It automatically detects the user's preferred language from their browser
          settings.
        correct: false
    help: |-
      The `_locale` attribute is fundamental for implementing internationalization (i18n) in Symfony applications, allowing dynamic language switching based on the URL.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid YAML configuration to define a route
      named `api_post_show` for `/api/posts/{id}` that only responds to `GET`
      and `HEAD` HTTP methods?
    answers:
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    GET|HEAD
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    [GET, HEAD]
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              http_methods: GET, HEAD
        correct: false
    help: >-
      The `methods` option in YAML routing can accept either a pipe-separated
      string or a YAML array to specify allowed HTTP methods.

      https://symfony.com/doc/current/routing.html#restricting-to-an-http-method
  - question: What is the purpose of the `_fragment` special internal routing attribute?
    answers:
      - value: It is used to specify the URL fragment identifier (the part of the URL
          after the `#`), which is typically used for client-side navigation to
          a specific section within a page.
        correct: true
      - value: It defines a default HTML fragment to be included in the response for the
          route.
        correct: false
      - value: It is a route parameter that must be a valid HTML element ID.
        correct: false
      - value: It enables partial content loading for a route.
        correct: false
    help: |-
      The `_fragment` attribute allows Symfony to manage the fragment part of a URL, which is often used for in-page navigation.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid PHP attribute configuration to
      define a route named `blog_list` for `/blog/{page}` with a default `page`
      value of `1` and a requirement that `page` is a digit?
    answers:
      - value: "`#[Route('/blog/{page<\\\\d+>?1}', name: 'blog_list')]`"
        correct: true
      - value: "`#[Route('/blog/{page}', name: 'blog_list', defaults: ['page' => 1],
          requirements: ['page' => '\\\\d+'])]`"
        correct: false
      - value: "`#[Route('/blog/{page}', name: 'blog_list', regex: {'page': '\\\\d+'},
          default: {'page': 1})]`"
        correct: false
    help: |-
      The inline syntax `{parameter_name<requirements>?default_value}` is a concise way to define parameters with both requirements and default values directly in the route path.
      https://symfony.com/doc/current/routing.html#inlining-requirements-and-defaults
  - question: What is the purpose of the `_locale` special internal routing attribute?
    answers:
      - value: It is used to set the locale on the `Request` object, enabling the
          application to serve localized content and use appropriate
          translations.
        correct: true
      - value: It defines the default language for the application if no other locale is
          specified.
        correct: false
      - value: It is a mandatory parameter for all routes in a multi-language Symfony
          application.
        correct: false
      - value: It automatically detects the user's preferred language from their browser
          settings.
        correct: false
    help: |-
      The `_locale` attribute is fundamental for implementing internationalization (i18n) in Symfony applications, allowing dynamic language switching based on the URL.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid YAML configuration to define a route
      named `api_post_show` for `/api/posts/{id}` that only responds to `GET`
      and `HEAD` HTTP methods?
    answers:
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    GET|HEAD
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    [GET, HEAD]
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              http_methods: GET, HEAD
        correct: false
    help: >-
      The `methods` option in YAML routing can accept either a pipe-separated
      string or a YAML array to specify allowed HTTP methods.

      https://symfony.com/doc/current/routing.html#restricting-to-an-http-method
  - question: What is the purpose of the `_fragment` special internal routing attribute?
    answers:
      - value: It is used to specify the URL fragment identifier (the part of the URL
          after the `#`), which is typically used for client-side navigation to
          a specific section within a page.
        correct: true
      - value: It defines a default HTML fragment to be included in the response for the
          route.
        correct: false
      - value: It is a route parameter that must be a valid HTML element ID.
        correct: false
      - value: It enables partial content loading for a route.
        correct: false
    help: |-
      The `_fragment` attribute allows Symfony to manage the fragment part of a URL, which is often used for in-page navigation.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid PHP attribute configuration to
      define a route named `blog_list` for `/blog/{page}` with a default `page`
      value of `1` and a requirement that `page` is a digit?
    answers:
      - value: "`#[Route('/blog/{page<\\\\d+>?1}', name: 'blog_list')]`"
        correct: true
      - value: "`#[Route('/blog/{page}', name: 'blog_list', defaults: ['page' => 1],
          requirements: ['page' => '\\\\d+'])]`"
        correct: false
      - value: "`#[Route('/blog/{page}', name: 'blog_list', regex: {'page': '\\\\d+'},
          default: {'page': 1})]`"
        correct: false
    help: |-
      The inline syntax `{parameter_name<requirements>?default_value}` is a concise way to define parameters with both requirements and default values directly in the route path.
      https://symfony.com/doc/current/routing.html#inlining-requirements-and-defaults
  - question: What is the purpose of the `_locale` special internal routing attribute?
    answers:
      - value: It is used to set the locale on the `Request` object, enabling the
          application to serve localized content and use appropriate
          translations.
        correct: true
      - value: It defines the default language for the application if no other locale is
          specified.
        correct: false
      - value: It is a mandatory parameter for all routes in a multi-language Symfony
          application.
        correct: false
      - value: It automatically detects the user's preferred language from their browser
          settings.
        correct: false
    help: |-
      The `_locale` attribute is fundamental for implementing internationalization (i18n) in Symfony applications, allowing dynamic language switching based on the URL.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid YAML configuration to define a route
      named `api_post_show` for `/api/posts/{id}` that only responds to `GET`
      and `HEAD` HTTP methods?
    answers:
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    GET|HEAD
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    [GET, HEAD]
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              http_methods: GET, HEAD
        correct: false
    help: >-
      The `methods` option in YAML routing can accept either a pipe-separated
      string or a YAML array to specify allowed HTTP methods.

      https://symfony.com/doc/current/routing.html#restricting-to-an-http-method
  - question: What is the purpose of the `_fragment` special internal routing attribute?
    answers:
      - value: It is used to specify the URL fragment identifier (the part of the URL
          after the `#`), which is typically used for client-side navigation to
          a specific section within a page.
        correct: true
      - value: It defines a default HTML fragment to be included in the response for the
          route.
        correct: false
      - value: It is a route parameter that must be a valid HTML element ID.
        correct: false
      - value: It enables partial content loading for a route.
        correct: false
    help: |-
      The `_fragment` attribute allows Symfony to manage the fragment part of a URL, which is often used for in-page navigation.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid PHP attribute configuration to
      define a route named `blog_list` for `/blog/{page}` with a default `page`
      value of `1` and a requirement that `page` is a digit?
    answers:
      - value: "`#[Route('/blog/{page<\\\\d+>?1}', name: 'blog_list')]`"
        correct: true
      - value: "`#[Route('/blog/{page}', name: 'blog_list', defaults: ['page' => 1],
          requirements: ['page' => '\\\\d+'])]`"
        correct: false
      - value: "`#[Route('/blog/{page}', name: 'blog_list', regex: {'page': '\\\\d+'},
          default: {'page': 1})]`"
        correct: false
    help: |-
      The inline syntax `{parameter_name<requirements>?default_value}` is a concise way to define parameters with both requirements and default values directly in the route path.
      https://symfony.com/doc/current/routing.html#inlining-requirements-and-defaults
  - question: What is the purpose of the `_locale` special internal routing attribute?
    answers:
      - value: It is used to set the locale on the `Request` object, enabling the
          application to serve localized content and use appropriate
          translations.
        correct: true
      - value: It defines the default language for the application if no other locale is
          specified.
        correct: false
      - value: It is a mandatory parameter for all routes in a multi-language Symfony
          application.
        correct: false
      - value: It automatically detects the user's preferred language from their browser
          settings.
        correct: false
    help: |-
      The `_locale` attribute is fundamental for implementing internationalization (i18n) in Symfony applications, allowing dynamic language switching based on the URL.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid YAML configuration to define a route
      named `api_post_show` for `/api/posts/{id}` that only responds to `GET`
      and `HEAD` HTTP methods?
    answers:
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    GET|HEAD
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    [GET, HEAD]
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              http_methods: GET, HEAD
        correct: false
    help: >-
      The `methods` option in YAML routing can accept either a pipe-separated
      string or a YAML array to specify allowed HTTP methods.

      https://symfony.com/doc/current/routing.html#restricting-to-an-http-method
  - question: What is the purpose of the `_fragment` special internal routing attribute?
    answers:
      - value: It is used to specify the URL fragment identifier (the part of the URL
          after the `#`), which is typically used for client-side navigation to
          a specific section within a page.
        correct: true
      - value: It defines a default HTML fragment to be included in the response for the
          route.
        correct: false
      - value: It is a route parameter that must be a valid HTML element ID.
        correct: false
      - value: It enables partial content loading for a route.
        correct: false
    help: |-
      The `_fragment` attribute allows Symfony to manage the fragment part of a URL, which is often used for in-page navigation.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid PHP attribute configuration to
      define a route named `blog_list` for `/blog/{page}` with a default `page`
      value of `1` and a requirement that `page` is a digit?
    answers:
      - value: "`#[Route('/blog/{page<\\\\d+>?1}', name: 'blog_list')]`"
        correct: true
      - value: "`#[Route('/blog/{page}', name: 'blog_list', defaults: ['page' => 1],
          requirements: ['page' => '\\\\d+'])]`"
        correct: false
      - value: "`#[Route('/blog/{page}', name: 'blog_list', regex: {'page': '\\\\d+'},
          default: {'page': 1})]`"
        correct: false
    help: |-
      The inline syntax `{parameter_name<requirements>?default_value}` is a concise way to define parameters with both requirements and default values directly in the route path.
      https://symfony.com/doc/current/routing.html#inlining-requirements-and-defaults
  - question: What is the purpose of the `_locale` special internal routing attribute?
    answers:
      - value: It is used to set the locale on the `Request` object, enabling the
          application to serve localized content and use appropriate
          translations.
        correct: true
      - value: It defines the default language for the application if no other locale is
          specified.
        correct: false
      - value: It is a mandatory parameter for all routes in a multi-language Symfony
          application.
        correct: false
      - value: It automatically detects the user's preferred language from their browser
          settings.
        correct: false
    help: |-
      The `_locale` attribute is fundamental for implementing internationalization (i18n) in Symfony applications, allowing dynamic language switching based on the URL.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid YAML configuration to define a route
      named `api_post_show` for `/api/posts/{id}` that only responds to `GET`
      and `HEAD` HTTP methods?
    answers:
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    GET|HEAD
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    [GET, HEAD]
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              http_methods: GET, HEAD
        correct: false
    help: >-
      The `methods` option in YAML routing can accept either a pipe-separated
      string or a YAML array to specify allowed HTTP methods.

      https://symfony.com/doc/current/routing.html#restricting-to-an-http-method
  - question: What is the purpose of the `_fragment` special internal routing attribute?
    answers:
      - value: It is used to specify the URL fragment identifier (the part of the URL
          after the `#`), which is typically used for client-side navigation to
          a specific section within a page.
        correct: true
      - value: It defines a default HTML fragment to be included in the response for the
          route.
        correct: false
      - value: It is a route parameter that must be a valid HTML element ID.
        correct: false
      - value: It enables partial content loading for a route.
        correct: false
    help: |-
      The `_fragment` attribute allows Symfony to manage the fragment part of a URL, which is often used for in-page navigation.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid PHP attribute configuration to
      define a route named `blog_list` for `/blog/{page}` with a default `page`
      value of `1` and a requirement that `page` is a digit?
    answers:
      - value: "`#[Route('/blog/{page<\\\\d+>?1}', name: 'blog_list')]`"
        correct: true
      - value: "`#[Route('/blog/{page}', name: 'blog_list', defaults: ['page' => 1],
          requirements: ['page' => '\\\\d+'])]`"
        correct: false
      - value: "`#[Route('/blog/{page}', name: 'blog_list', regex: {'page': '\\\\d+'},
          default: {'page': 1})]`"
        correct: false
    help: |-
      The inline syntax `{parameter_name<requirements>?default_value}` is a concise way to define parameters with both requirements and default values directly in the route path.
      https://symfony.com/doc/current/routing.html#inlining-requirements-and-defaults
  - question: What is the purpose of the `_locale` special internal routing attribute?
    answers:
      - value: It is used to set the locale on the `Request` object, enabling the
          application to serve localized content and use appropriate
          translations.
        correct: true
      - value: It defines the default language for the application if no other locale is
          specified.
        correct: false
      - value: It is a mandatory parameter for all routes in a multi-language Symfony
          application.
        correct: false
      - value: It automatically detects the user's preferred language from their browser
          settings.
        correct: false
    help: |-
      The `_locale` attribute is fundamental for implementing internationalization (i18n) in Symfony applications, allowing dynamic language switching based on the URL.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid YAML configuration to define a route
      named `api_post_show` for `/api/posts/{id}` that only responds to `GET`
      and `HEAD` HTTP methods?
    answers:
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    GET|HEAD
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    [GET, HEAD]
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              http_methods: GET, HEAD
        correct: false
    help: >-
      The `methods` option in YAML routing can accept either a pipe-separated
      string or a YAML array to specify allowed HTTP methods.

      https://symfony.com/doc/current/routing.html#restricting-to-an-http-method
  - question: What is the purpose of the `_fragment` special internal routing attribute?
    answers:
      - value: It is used to specify the URL fragment identifier (the part of the URL
          after the `#`), which is typically used for client-side navigation to
          a specific section within a page.
        correct: true
      - value: It defines a default HTML fragment to be included in the response for the
          route.
        correct: false
      - value: It is a route parameter that must be a valid HTML element ID.
        correct: false
      - value: It enables partial content loading for a route.
        correct: false
    help: |-
      The `_fragment` attribute allows Symfony to manage the fragment part of a URL, which is often used for in-page navigation.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid PHP attribute configuration to
      define a route named `blog_list` for `/blog/{page}` with a default `page`
      value of `1` and a requirement that `page` is a digit?
    answers:
      - value: "`#[Route('/blog/{page<\\\\d+>?1}', name: 'blog_list')]`"
        correct: true
      - value: "`#[Route('/blog/{page}', name: 'blog_list', defaults: ['page' => 1],
          requirements: ['page' => '\\\\d+'])]`"
        correct: false
      - value: "`#[Route('/blog/{page}', name: 'blog_list', regex: {'page': '\\\\d+'},
          default: {'page': 1})]`"
        correct: false
    help: |-
      The inline syntax `{parameter_name<requirements>?default_value}` is a concise way to define parameters with both requirements and default values directly in the route path.
      https://symfony.com/doc/current/routing.html#inlining-requirements-and-defaults
  - question: What is the purpose of the `_locale` special internal routing attribute?
    answers:
      - value: It is used to set the locale on the `Request` object, enabling the
          application to serve localized content and use appropriate
          translations.
        correct: true
      - value: It defines the default language for the application if no other locale is
          specified.
        correct: false
      - value: It is a mandatory parameter for all routes in a multi-language Symfony
          application.
        correct: false
      - value: It automatically detects the user's preferred language from their browser
          settings.
        correct: false
    help: |-
      The `_locale` attribute is fundamental for implementing internationalization (i18n) in Symfony applications, allowing dynamic language switching based on the URL.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid YAML configuration to define a route
      named `api_post_show` for `/api/posts/{id}` that only responds to `GET`
      and `HEAD` HTTP methods?
    answers:
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    GET|HEAD
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    [GET, HEAD]
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              http_methods: GET, HEAD
        correct: false
    help: >-
      The `methods` option in YAML routing can accept either a pipe-separated
      string or a YAML array to specify allowed HTTP methods.

      https://symfony.com/doc/current/routing.html#restricting-to-an-http-method
  - question: What is the purpose of the `_fragment` special internal routing attribute?
    answers:
      - value: It is used to specify the URL fragment identifier (the part of the URL
          after the `#`), which is typically used for client-side navigation to
          a specific section within a page.
        correct: true
      - value: It defines a default HTML fragment to be included in the response for the
          route.
        correct: false
      - value: It is a route parameter that must be a valid HTML element ID.
        correct: false
      - value: It enables partial content loading for a route.
        correct: false
    help: |-
      The `_fragment` attribute allows Symfony to manage the fragment part of a URL, which is often used for in-page navigation.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid PHP attribute configuration to
      define a route named `blog_list` for `/blog/{page}` with a default `page`
      value of `1` and a requirement that `page` is a digit?
    answers:
      - value: "`#[Route('/blog/{page<\\\\d+>?1}', name: 'blog_list')]`"
        correct: true
      - value: "`#[Route('/blog/{page}', name: 'blog_list', defaults: ['page' => 1],
          requirements: ['page' => '\\\\d+'])]`"
        correct: false
      - value: "`#[Route('/blog/{page}', name: 'blog_list', regex: {'page': '\\\\d+'},
          default: {'page': 1})]`"
        correct: false
    help: |-
      The inline syntax `{parameter_name<requirements>?default_value}` is a concise way to define parameters with both requirements and default values directly in the route path.
      https://symfony.com/doc/current/routing.html#inlining-requirements-and-defaults
  - question: What is the purpose of the `_locale` special internal routing attribute?
    answers:
      - value: It is used to set the locale on the `Request` object, enabling the
          application to serve localized content and use appropriate
          translations.
        correct: true
      - value: It defines the default language for the application if no other locale is
          specified.
        correct: false
      - value: It is a mandatory parameter for all routes in a multi-language Symfony
          application.
        correct: false
      - value: It automatically detects the user's preferred language from their browser
          settings.
        correct: false
    help: |-
      The `_locale` attribute is fundamental for implementing internationalization (i18n) in Symfony applications, allowing dynamic language switching based on the URL.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid YAML configuration to define a route
      named `api_post_show` for `/api/posts/{id}` that only responds to `GET`
      and `HEAD` HTTP methods?
    answers:
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    GET|HEAD
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    [GET, HEAD]
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              http_methods: GET, HEAD
        correct: false
    help: >-
      The `methods` option in YAML routing can accept either a pipe-separated
      string or a YAML array to specify allowed HTTP methods.

      https://symfony.com/doc/current/routing.html#restricting-to-an-http-method
  - question: What is the purpose of the `_fragment` special internal routing attribute?
    answers:
      - value: It is used to specify the URL fragment identifier (the part of the URL
          after the `#`), which is typically used for client-side navigation to
          a specific section within a page.
        correct: true
      - value: It defines a default HTML fragment to be included in the response for the
          route.
        correct: false
      - value: It is a route parameter that must be a valid HTML element ID.
        correct: false
      - value: It enables partial content loading for a route.
        correct: false
    help: |-
      The `_fragment` attribute allows Symfony to manage the fragment part of a URL, which is often used for in-page navigation.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid PHP attribute configuration to
      define a route named `blog_list` for `/blog/{page}` with a default `page`
      value of `1` and a requirement that `page` is a digit?
    answers:
      - value: "`#[Route('/blog/{page<\\\\d+>?1}', name: 'blog_list')]`"
        correct: true
      - value: "`#[Route('/blog/{page}', name: 'blog_list', defaults: ['page' => 1],
          requirements: ['page' => '\\\\d+'])]`"
        correct: false
      - value: "`#[Route('/blog/{page}', name: 'blog_list', regex: {'page': '\\\\d+'},
          default: {'page': 1})]`"
        correct: false
    help: |-
      The inline syntax `{parameter_name<requirements>?default_value}` is a concise way to define parameters with both requirements and default values directly in the route path.
      https://symfony.com/doc/current/routing.html#inlining-requirements-and-defaults
  - question: What is the purpose of the `_locale` special internal routing attribute?
    answers:
      - value: It is used to set the locale on the `Request` object, enabling the
          application to serve localized content and use appropriate
          translations.
        correct: true
      - value: It defines the default language for the application if no other locale is
          specified.
        correct: false
      - value: It is a mandatory parameter for all routes in a multi-language Symfony
          application.
        correct: false
      - value: It automatically detects the user's preferred language from their browser
          settings.
        correct: false
    help: |-
      The `_locale` attribute is fundamental for implementing internationalization (i18n) in Symfony applications, allowing dynamic language switching based on the URL.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid YAML configuration to define a route
      named `api_post_show` for `/api/posts/{id}` that only responds to `GET`
      and `HEAD` HTTP methods?
    answers:
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    GET|HEAD
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    [GET, HEAD]
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              http_methods: GET, HEAD
        correct: false
    help: >-
      The `methods` option in YAML routing can accept either a pipe-separated
      string or a YAML array to specify allowed HTTP methods.

      https://symfony.com/doc/current/routing.html#restricting-to-an-http-method
  - question: What is the purpose of the `_fragment` special internal routing attribute?
    answers:
      - value: It is used to specify the URL fragment identifier (the part of the URL
          after the `#`), which is typically used for client-side navigation to
          a specific section within a page.
        correct: true
      - value: It defines a default HTML fragment to be included in the response for the
          route.
        correct: false
      - value: It is a route parameter that must be a valid HTML element ID.
        correct: false
      - value: It enables partial content loading for a route.
        correct: false
    help: |-
      The `_fragment` attribute allows Symfony to manage the fragment part of a URL, which is often used for in-page navigation.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid PHP attribute configuration to
      define a route named `blog_list` for `/blog/{page}` with a default `page`
      value of `1` and a requirement that `page` is a digit?
    answers:
      - value: "`#[Route('/blog/{page<\\\\d+>?1}', name: 'blog_list')]`"
        correct: true
      - value: "`#[Route('/blog/{page}', name: 'blog_list', defaults: ['page' => 1],
          requirements: ['page' => '\\\\d+'])]`"
        correct: false
      - value: "`#[Route('/blog/{page}', name: 'blog_list', regex: {'page': '\\\\d+'},
          default: {'page': 1})]`"
        correct: false
    help: |-
      The inline syntax `{parameter_name<requirements>?default_value}` is a concise way to define parameters with both requirements and default values directly in the route path.
      https://symfony.com/doc/current/routing.html#inlining-requirements-and-defaults
  - question: What is the purpose of the `_locale` special internal routing attribute?
    answers:
      - value: It is used to set the locale on the `Request` object, enabling the
          application to serve localized content and use appropriate
          translations.
        correct: true
      - value: It defines the default language for the application if no other locale is
          specified.
        correct: false
      - value: It is a mandatory parameter for all routes in a multi-language Symfony
          application.
        correct: false
      - value: It automatically detects the user's preferred language from their browser
          settings.
        correct: false
    help: |-
      The `_locale` attribute is fundamental for implementing internationalization (i18n) in Symfony applications, allowing dynamic language switching based on the URL.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid YAML configuration to define a route
      named `api_post_show` for `/api/posts/{id}` that only responds to `GET`
      and `HEAD` HTTP methods?
    answers:
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    GET|HEAD
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    [GET, HEAD]
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              http_methods: GET, HEAD
        correct: false
    help: >-
      The `methods` option in YAML routing can accept either a pipe-separated
      string or a YAML array to specify allowed HTTP methods.

      https://symfony.com/doc/current/routing.html#restricting-to-an-http-method
  - question: What is the purpose of the `_fragment` special internal routing attribute?
    answers:
      - value: It is used to specify the URL fragment identifier (the part of the URL
          after the `#`), which is typically used for client-side navigation to
          a specific section within a page.
        correct: true
      - value: It defines a default HTML fragment to be included in the response for the
          route.
        correct: false
      - value: It is a route parameter that must be a valid HTML element ID.
        correct: false
      - value: It enables partial content loading for a route.
        correct: false
    help: |-
      The `_fragment` attribute allows Symfony to manage the fragment part of a URL, which is often used for in-page navigation.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid PHP attribute configuration to
      define a route named `blog_list` for `/blog/{page}` with a default `page`
      value of `1` and a requirement that `page` is a digit?
    answers:
      - value: "`#[Route('/blog/{page<\\\\d+>?1}', name: 'blog_list')]`"
        correct: true
      - value: "`#[Route('/blog/{page}', name: 'blog_list', defaults: ['page' => 1],
          requirements: ['page' => '\\\\d+'])]`"
        correct: false
      - value: "`#[Route('/blog/{page}', name: 'blog_list', regex: {'page': '\\\\d+'},
          default: {'page': 1})]`"
        correct: false
    help: |-
      The inline syntax `{parameter_name<requirements>?default_value}` is a concise way to define parameters with both requirements and default values directly in the route path.
      https://symfony.com/doc/current/routing.html#inlining-requirements-and-defaults
  - question: What is the purpose of the `_locale` special internal routing attribute?
    answers:
      - value: It is used to set the locale on the `Request` object, enabling the
          application to serve localized content and use appropriate
          translations.
        correct: true
      - value: It defines the default language for the application if no other locale is
          specified.
        correct: false
      - value: It is a mandatory parameter for all routes in a multi-language Symfony
          application.
        correct: false
      - value: It automatically detects the user's preferred language from their browser
          settings.
        correct: false
    help: |-
      The `_locale` attribute is fundamental for implementing internationalization (i18n) in Symfony applications, allowing dynamic language switching based on the URL.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid YAML configuration to define a route
      named `api_post_show` for `/api/posts/{id}` that only responds to `GET`
      and `HEAD` HTTP methods?
    answers:
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    GET|HEAD
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    [GET, HEAD]
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              http_methods: GET, HEAD
        correct: false
    help: >-
      The `methods` option in YAML routing can accept either a pipe-separated
      string or a YAML array to specify allowed HTTP methods.

      https://symfony.com/doc/current/routing.html#restricting-to-an-http-method
  - question: What is the purpose of the `_fragment` special internal routing attribute?
    answers:
      - value: It is used to specify the URL fragment identifier (the part of the URL
          after the `#`), which is typically used for client-side navigation to
          a specific section within a page.
        correct: true
      - value: It defines a default HTML fragment to be included in the response for the
          route.
        correct: false
      - value: It is a route parameter that must be a valid HTML element ID.
        correct: false
      - value: It enables partial content loading for a route.
        correct: false
    help: |-
      The `_fragment` attribute allows Symfony to manage the fragment part of a URL, which is often used for in-page navigation.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid PHP attribute configuration to
      define a route named `blog_list` for `/blog/{page}` with a default `page`
      value of `1` and a requirement that `page` is a digit?
    answers:
      - value: "`#[Route('/blog/{page<\\\\d+>?1}', name: 'blog_list')]`"
        correct: true
      - value: "`#[Route('/blog/{page}', name: 'blog_list', defaults: ['page' => 1],
          requirements: ['page' => '\\\\d+'])]`"
        correct: false
      - value: "`#[Route('/blog/{page}', name: 'blog_list', regex: {'page': '\\\\d+'},
          default: {'page': 1})]`"
        correct: false
    help: |-
      The inline syntax `{parameter_name<requirements>?default_value}` is a concise way to define parameters with both requirements and default values directly in the route path.
      https://symfony.com/doc/current/routing.html#inlining-requirements-and-defaults
  - question: What is the purpose of the `_locale` special internal routing attribute?
    answers:
      - value: It is used to set the locale on the `Request` object, enabling the
          application to serve localized content and use appropriate
          translations.
        correct: true
      - value: It defines the default language for the application if no other locale is
          specified.
        correct: false
      - value: It is a mandatory parameter for all routes in a multi-language Symfony
          application.
        correct: false
      - value: It automatically detects the user's preferred language from their browser
          settings.
        correct: false
    help: |-
      The `_locale` attribute is fundamental for implementing internationalization (i18n) in Symfony applications, allowing dynamic language switching based on the URL.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid YAML configuration to define a route
      named `api_post_show` for `/api/posts/{id}` that only responds to `GET`
      and `HEAD` HTTP methods?
    answers:
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    GET|HEAD
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    [GET, HEAD]
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              http_methods: GET, HEAD
        correct: false
    help: >-
      The `methods` option in YAML routing can accept either a pipe-separated
      string or a YAML array to specify allowed HTTP methods.

      https://symfony.com/doc/current/routing.html#restricting-to-an-http-method
  - question: What is the purpose of the `_fragment` special internal routing attribute?
    answers:
      - value: It is used to specify the URL fragment identifier (the part of the URL
          after the `#`), which is typically used for client-side navigation to
          a specific section within a page.
        correct: true
      - value: It defines a default HTML fragment to be included in the response for the
          route.
        correct: false
      - value: It is a route parameter that must be a valid HTML element ID.
        correct: false
      - value: It enables partial content loading for a route.
        correct: false
    help: |-
      The `_fragment` attribute allows Symfony to manage the fragment part of a URL, which is often used for in-page navigation.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid PHP attribute configuration to
      define a route named `blog_list` for `/blog/{page}` with a default `page`
      value of `1` and a requirement that `page` is a digit?
    answers:
      - value: "`#[Route('/blog/{page<\\\\d+>?1}', name: 'blog_list')]`"
        correct: true
      - value: "`#[Route('/blog/{page}', name: 'blog_list', defaults: ['page' => 1],
          requirements: ['page' => '\\\\d+'])]`"
        correct: false
      - value: "`#[Route('/blog/{page}', name: 'blog_list', regex: {'page': '\\\\d+'},
          default: {'page': 1})]`"
        correct: false
    help: |-
      The inline syntax `{parameter_name<requirements>?default_value}` is a concise way to define parameters with both requirements and default values directly in the route path.
      https://symfony.com/doc/current/routing.html#inlining-requirements-and-defaults
  - question: What is the purpose of the `_locale` special internal routing attribute?
    answers:
      - value: It is used to set the locale on the `Request` object, enabling the
          application to serve localized content and use appropriate
          translations.
        correct: true
      - value: It defines the default language for the application if no other locale is
          specified.
        correct: false
      - value: It is a mandatory parameter for all routes in a multi-language Symfony
          application.
        correct: false
      - value: It automatically detects the user's preferred language from their browser
          settings.
        correct: false
    help: |-
      The `_locale` attribute is fundamental for implementing internationalization (i18n) in Symfony applications, allowing dynamic language switching based on the URL.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid YAML configuration to define a route
      named `api_post_show` for `/api/posts/{id}` that only responds to `GET`
      and `HEAD` HTTP methods?
    answers:
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    GET|HEAD
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    [GET, HEAD]
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              http_methods: GET, HEAD
        correct: false
    help: >-
      The `methods` option in YAML routing can accept either a pipe-separated
      string or a YAML array to specify allowed HTTP methods.

      https://symfony.com/doc/current/routing.html#restricting-to-an-http-method
  - question: What is the purpose of the `_fragment` special internal routing attribute?
    answers:
      - value: It is used to specify the URL fragment identifier (the part of the URL
          after the `#`), which is typically used for client-side navigation to
          a specific section within a page.
        correct: true
      - value: It defines a default HTML fragment to be included in the response for the
          route.
        correct: false
      - value: It is a route parameter that must be a valid HTML element ID.
        correct: false
      - value: It enables partial content loading for a route.
        correct: false
    help: |-
      The `_fragment` attribute allows Symfony to manage the fragment part of a URL, which is often used for in-page navigation.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid PHP attribute configuration to
      define a route named `blog_list` for `/blog/{page}` with a default `page`
      value of `1` and a requirement that `page` is a digit?
    answers:
      - value: "`#[Route('/blog/{page<\\\\d+>?1}', name: 'blog_list')]`"
        correct: true
      - value: "`#[Route('/blog/{page}', name: 'blog_list', defaults: ['page' => 1],
          requirements: ['page' => '\\\\d+'])]`"
        correct: false
      - value: "`#[Route('/blog/{page}', name: 'blog_list', regex: {'page': '\\\\d+'},
          default: {'page': 1})]`"
        correct: false
    help: |-
      The inline syntax `{parameter_name<requirements>?default_value}` is a concise way to define parameters with both requirements and default values directly in the route path.
      https://symfony.com/doc/current/routing.html#inlining-requirements-and-defaults
  - question: What is the purpose of the `_locale` special internal routing attribute?
    answers:
      - value: It is used to set the locale on the `Request` object, enabling the
          application to serve localized content and use appropriate
          translations.
        correct: true
      - value: It defines the default language for the application if no other locale is
          specified.
        correct: false
      - value: It is a mandatory parameter for all routes in a multi-language Symfony
          application.
        correct: false
      - value: It automatically detects the user's preferred language from their browser
          settings.
        correct: false
    help: |-
      The `_locale` attribute is fundamental for implementing internationalization (i18n) in Symfony applications, allowing dynamic language switching based on the URL.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid YAML configuration to define a route
      named `api_post_show` for `/api/posts/{id}` that only responds to `GET`
      and `HEAD` HTTP methods?
    answers:
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    GET|HEAD
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    [GET, HEAD]
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              http_methods: GET, HEAD
        correct: false
    help: >-
      The `methods` option in YAML routing can accept either a pipe-separated
      string or a YAML array to specify allowed HTTP methods.

      https://symfony.com/doc/current/routing.html#restricting-to-an-http-method
  - question: What is the purpose of the `_fragment` special internal routing attribute?
    answers:
      - value: It is used to specify the URL fragment identifier (the part of the URL
          after the `#`), which is typically used for client-side navigation to
          a specific section within a page.
        correct: true
      - value: It defines a default HTML fragment to be included in the response for the
          route.
        correct: false
      - value: It is a route parameter that must be a valid HTML element ID.
        correct: false
      - value: It enables partial content loading for a route.
        correct: false
    help: |-
      The `_fragment` attribute allows Symfony to manage the fragment part of a URL, which is often used for in-page navigation.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid PHP attribute configuration to
      define a route named `blog_list` for `/blog/{page}` with a default `page`
      value of `1` and a requirement that `page` is a digit?
    answers:
      - value: "`#[Route('/blog/{page<\\\\d+>?1}', name: 'blog_list')]`"
        correct: true
      - value: "`#[Route('/blog/{page}', name: 'blog_list', defaults: ['page' => 1],
          requirements: ['page' => '\\\\d+'])]`"
        correct: false
      - value: "`#[Route('/blog/{page}', name: 'blog_list', regex: {'page': '\\\\d+'},
          default: {'page': 1})]`"
        correct: false
    help: |-
      The inline syntax `{parameter_name<requirements>?default_value}` is a concise way to define parameters with both requirements and default values directly in the route path.
      https://symfony.com/doc/current/routing.html#inlining-requirements-and-defaults
  - question: What is the purpose of the `_locale` special internal routing attribute?
    answers:
      - value: It is used to set the locale on the `Request` object, enabling the
          application to serve localized content and use appropriate
          translations.
        correct: true
      - value: It defines the default language for the application if no other locale is
          specified.
        correct: false
      - value: It is a mandatory parameter for all routes in a multi-language Symfony
          application.
        correct: false
      - value: It automatically detects the user's preferred language from their browser
          settings.
        correct: false
    help: |-
      The `_locale` attribute is fundamental for implementing internationalization (i18n) in Symfony applications, allowing dynamic language switching based on the URL.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid YAML configuration to define a route
      named `api_post_show` for `/api/posts/{id}` that only responds to `GET`
      and `HEAD` HTTP methods?
    answers:
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    GET|HEAD
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    [GET, HEAD]
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              http_methods: GET, HEAD
        correct: false
    help: >-
      The `methods` option in YAML routing can accept either a pipe-separated
      string or a YAML array to specify allowed HTTP methods.

      https://symfony.com/doc/current/routing.html#restricting-to-an-http-method
  - question: What is the purpose of the `_fragment` special internal routing attribute?
    answers:
      - value: It is used to specify the URL fragment identifier (the part of the URL
          after the `#`), which is typically used for client-side navigation to
          a specific section within a page.
        correct: true
      - value: It defines a default HTML fragment to be included in the response for the
          route.
        correct: false
      - value: It is a route parameter that must be a valid HTML element ID.
        correct: false
      - value: It enables partial content loading for a route.
        correct: false
    help: |-
      The `_fragment` attribute allows Symfony to manage the fragment part of a URL, which is often used for in-page navigation.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid PHP attribute configuration to
      define a route named `blog_list` for `/blog/{page}` with a default `page`
      value of `1` and a requirement that `page` is a digit?
    answers:
      - value: "`#[Route('/blog/{page<\\\\d+>?1}', name: 'blog_list')]`"
        correct: true
      - value: "`#[Route('/blog/{page}', name: 'blog_list', defaults: ['page' => 1],
          requirements: ['page' => '\\\\d+'])]`"
        correct: false
      - value: "`#[Route('/blog/{page}', name: 'blog_list', regex: {'page': '\\\\d+'},
          default: {'page': 1})]`"
        correct: false
    help: |-
      The inline syntax `{parameter_name<requirements>?default_value}` is a concise way to define parameters with both requirements and default values directly in the route path.
      https://symfony.com/doc/current/routing.html#inlining-requirements-and-defaults
  - question: What is the purpose of the `_locale` special internal routing attribute?
    answers:
      - value: It is used to set the locale on the `Request` object, enabling the
          application to serve localized content and use appropriate
          translations.
        correct: true
      - value: It defines the default language for the application if no other locale is
          specified.
        correct: false
      - value: It is a mandatory parameter for all routes in a multi-language Symfony
          application.
        correct: false
      - value: It automatically detects the user's preferred language from their browser
          settings.
        correct: false
    help: |-
      The `_locale` attribute is fundamental for implementing internationalization (i18n) in Symfony applications, allowing dynamic language switching based on the URL.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid YAML configuration to define a route
      named `api_post_show` for `/api/posts/{id}` that only responds to `GET`
      and `HEAD` HTTP methods?
    answers:
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    GET|HEAD
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    [GET, HEAD]
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              http_methods: GET, HEAD
        correct: false
    help: >-
      The `methods` option in YAML routing can accept either a pipe-separated
      string or a YAML array to specify allowed HTTP methods.

      https://symfony.com/doc/current/routing.html#restricting-to-an-http-method
  - question: What is the purpose of the `_fragment` special internal routing attribute?
    answers:
      - value: It is used to specify the URL fragment identifier (the part of the URL
          after the `#`), which is typically used for client-side navigation to
          a specific section within a page.
        correct: true
      - value: It defines a default HTML fragment to be included in the response for the
          route.
        correct: false
      - value: It is a route parameter that must be a valid HTML element ID.
        correct: false
      - value: It enables partial content loading for a route.
        correct: false
    help: |-
      The `_fragment` attribute allows Symfony to manage the fragment part of a URL, which is often used for in-page navigation.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid PHP attribute configuration to
      define a route named `blog_list` for `/blog/{page}` with a default `page`
      value of `1` and a requirement that `page` is a digit?
    answers:
      - value: "`#[Route('/blog/{page<\\\\d+>?1}', name: 'blog_list')]`"
        correct: true
      - value: "`#[Route('/blog/{page}', name: 'blog_list', defaults: ['page' => 1],
          requirements: ['page' => '\\\\d+'])]`"
        correct: false
      - value: "`#[Route('/blog/{page}', name: 'blog_list', regex: {'page': '\\\\d+'},
          default: {'page': 1})]`"
        correct: false
    help: |-
      The inline syntax `{parameter_name<requirements>?default_value}` is a concise way to define parameters with both requirements and default values directly in the route path.
      https://symfony.com/doc/current/routing.html#inlining-requirements-and-defaults
  - question: What is the purpose of the `_locale` special internal routing attribute?
    answers:
      - value: It is used to set the locale on the `Request` object, enabling the
          application to serve localized content and use appropriate
          translations.
        correct: true
      - value: It defines the default language for the application if no other locale is
          specified.
        correct: false
      - value: It is a mandatory parameter for all routes in a multi-language Symfony
          application.
        correct: false
      - value: It automatically detects the user's preferred language from their browser
          settings.
        correct: false
    help: |-
      The `_locale` attribute is fundamental for implementing internationalization (i18n) in Symfony applications, allowing dynamic language switching based on the URL.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid YAML configuration to define a route
      named `api_post_show` for `/api/posts/{id}` that only responds to `GET`
      and `HEAD` HTTP methods?
    answers:
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    GET|HEAD
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              methods:    [GET, HEAD]
        correct: true
      - value: |-
          api_post_show:
              path:       /api/posts/{id}
              controller: App\Controller\BlogApiController::show
              http_methods: GET, HEAD
        correct: false
    help: >-
      The `methods` option in YAML routing can accept either a pipe-separated
      string or a YAML array to specify allowed HTTP methods.

      https://symfony.com/doc/current/routing.html#restricting-to-an-http-method
  - question: What is the purpose of the `_fragment` special internal routing attribute?
    answers:
      - value: It is used to specify the URL fragment identifier (the part of the URL
          after the `#`), which is typically used for client-side navigation to
          a specific section within a page.
        correct: true
      - value: It defines a default HTML fragment to be included in the response for the
          route.
        correct: false
      - value: It is a route parameter that must be a valid HTML element ID.
        correct: false
      - value: It enables partial content loading for a route.
        correct: false
    help: |-
      The `_fragment` attribute allows Symfony to manage the fragment part of a URL, which is often used for in-page navigation.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
  - question: Which of the following is a valid PHP attribute configuration to
      define a route named `blog_list` for `/blog/{page}` with a default `page`
      value of `1` and a requirement that `page` is a digit?
    answers:
      - value: "`#[Route('/blog/{page<\\\\d+>?1}', name: 'blog_list')]`"
        correct: true
      - value: "`#[Route('/blog/{page}', name: 'blog_list', defaults: ['page' => 1],
          requirements: ['page' => '\\\\d+'])]`"
        correct: false
      - value: "`#[Route('/blog/{page}', name: 'blog_list', regex: {'page': '\\\\d+'},
          default: {'page': 1})]`"
        correct: false
    help: |-
      The inline syntax `{parameter_name<requirements>?default_value}` is a concise way to define parameters with both requirements and default values directly in the route path.
      https://symfony.com/doc/current/routing.html#inlining-requirements-and-defaults
  - question: What is the purpose of the `_locale` special internal routing attribute?
    answers:
      - value: It is used to set the locale on the `Request` object, enabling the
          application to serve localized content and use appropriate
          translations.
        correct: true
      - value: It defines the default language for the application if no other locale is
          specified.
        correct: false
      - value: It is a mandatory parameter for all routes in a multi-language Symfony
          application.
        correct: false
      - value: It automatically detects the user's preferred language from their browser
          settings.
        correct: false
    help: |-
      The `_locale` attribute is fundamental for implementing internationalization (i18n) in Symfony applications, allowing dynamic language switching based on the URL.
      https://symfony.com/doc/current/routing.html#special-internal-routing-attributes
