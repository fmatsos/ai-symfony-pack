category: Routing
questions:
  - question: Which of the following PHP attribute configurations correctly defines
      a route named `blog_list` for the path `/blog`?
    answers:
      - value: |-
          ```php
          #[Route('/blog', name: 'blog_list')]
          public function list(): Response
          {
              // ...
          }
          ```
        correct: true
      - value: |-
          ```php
          #[Route(path: '/blog', id: 'blog_list')]
          public function list(): Response
          {
              // ...
          }
          ```
        correct: false
      - value: |-
          ```php
          #[Route(url: '/blog', routeName: 'blog_list')]
          public function list(): Response
          {
              // ...
          }
          ```
        correct: false
      - value: |-
          ```php
          #[Route('/blog', alias: 'blog_list')]
          public function list(): Response
          {
              // ...
          }
          ```
        correct: false
    help: The `#[Route]` attribute uses `path` for the URL pattern and `name` for
      the route identifier.
      https://symfony.com/doc/current/routing.html#_snippet_1
  - question: In Symfony 7, how would you define a route in YAML that maps
      `/products/{id}` to `App\Controller\ProductController::show`?
    answers:
      - value: |-
          ```yaml
          product_show:
              path: /products/{id}
              controller: App\Controller\ProductController::show
          ```
        correct: true
      - value: |-
          ```yaml
          product_show:
              url: /products/{id}
              action: App\Controller\ProductController::show
          ```
        correct: false
      - value: |-
          ```yaml
          /products/{id}:
              name: product_show
              controller: App\Controller\ProductController::show
          ```
        correct: false
      - value: |-
          ```yaml
          route_product_show:
              pattern: /products/{id}
              handler: App\Controller\ProductController::show
          ```
        correct: false
    help: YAML route definitions use `path` for the URL pattern and `controller` to
      specify the callable.
      https://symfony.com/doc/current/routing.html#_snippet_33
  - question: Which command would you use to list all registered routes in your
      Symfony 7 application?
    answers:
      - value: "`php bin/console debug:router`"
        correct: true
      - value: "`php bin/console router:list`"
        correct: false
      - value: "`php bin/console app:routes`"
        correct: false
      - value: "`php bin/console show:routes`"
        correct: false
    help: The `debug:router` command is used to inspect the routing configuration.
      https://symfony.com/doc/current/routing.html#_snippet_12
  - question: You have a route parameter `{page}` that should only match digits. How
      do you enforce this requirement using PHP attributes?
    answers:
      - value: >-
          ```php

          #[Route('/blog/{page}', name: 'blog_list', requirements: ['page' =>
          '\d+'])]

          public function list(int $page): Response

          {
              // ...
          }

          ```
        correct: true
      - value: |-
          ```php
          #[Route('/blog/{page<\d+>}', name: 'blog_list')]
          public function list(int $page): Response
          {
              // ...
          }
          ```
        correct: true
      - value: >-
          ```php

          #[Route('/blog/{page}', name: 'blog_list', defaults: ['page' =>
          '\d+'])]

          public function list(int $page): Response

          {
              // ...
          }

          ```
        correct: false
      - value: >-
          ```php

          #[Route('/blog/{page}', name: 'blog_list', validate: ['page' =>
          'integer'])]

          public function list(int $page): Response

          {
              // ...
          }

          ```
        correct: false
    help: Route parameter requirements can be defined using the `requirements`
      option with a regular expression or directly in the path using the
      `<regex>` syntax.
      https://symfony.com/doc/current/routing.html#_snippet_17,
      https://symfony.com/doc/current/routing.html#_snippet_20
  - question: What is the purpose of the `_locale` special route parameter in Symfony?
    answers:
      - value: It sets the locale on the `Request` object.
        correct: true
      - value: It defines the default language for the application.
        correct: false
      - value: It is used for translating route names.
        correct: false
      - value: It specifies the preferred timezone for the user.
        correct: false
    help: The `_locale` parameter is a special internal routing attribute used to
      set the locale on the `Request` object.
      https://symfony.com/doc/current/routing.html#_snippet_27
  - question: How can you generate an absolute URL for a route named `sign_up`
      within a Symfony controller?
    answers:
      - value: >-
          ```php

          $signUpPage = $this->generateUrl('sign_up', [],
          UrlGeneratorInterface::ABSOLUTE_URL);

          ```
        correct: true
      - value: |-
          ```php
          $signUpPage = $this->generateUrl('sign_up', [], true);
          ```
        correct: false
      - value: |-
          ```php
          $signUpPage = $this->generateAbsoluteUrl('sign_up');
          ```
        correct: false
      - value: >-
          ```php

          $signUpPage = $this->get('router')->generate('sign_up', [],
          UrlGeneratorInterface::ABSOLUTE_URL);

          ```
        correct: true
    help: The `generateUrl()` method in `AbstractController` (or
      `UrlGeneratorInterface::generate()`) accepts
      `UrlGeneratorInterface::ABSOLUTE_URL` as the third argument to generate an
      absolute URL. https://symfony.com/doc/current/routing.html#_snippet_56,
      https://symfony.com/doc/current/routing.html#_snippet_59
  - question: Which of the following configurations would make a route named `tools`
      only accessible in the `dev` environment using YAML?
    answers:
      - value: |-
          ```yaml
          tools:
              path: /tools
              controller: App\Controller\DefaultController::developerTools
              env: dev
          ```
        correct: true
      - value: |-
          ```yaml
          tools:
              path: /tools
              controller: App\Controller\DefaultController::developerTools
              environment: dev
          ```
        correct: false
      - value: |-
          ```yaml
          tools:
              path: /tools
              controller: App\Controller\DefaultController::developerTools
              _env: dev
          ```
        correct: false
    help: The `env` option can be used in route definitions to restrict a route to a
      specific environment.
      https://symfony.com/doc/current/routing.html#_snippet_6
  - question: How can you define a default value for a route parameter named `page`
      in PHP attributes?
    answers:
      - value: |-
          ```php
          #[Route('/blog/{page}', name: 'blog_list', defaults: ['page' => 1])]
          public function list(int $page = 1): Response
          {
              // ...
          }
          ```
        correct: true
      - value: |-
          ```php
          #[Route('/blog/{page?1}', name: 'blog_list')]
          public function list(int $page): Response
          {
              // ...
          }
          ```
        correct: false
      - value: |-
          ```php
          #[Route('/blog/{page}', name: 'blog_list')]
          public function list(int $page = 1): Response
          {
              // ...
          }
          ```
        correct: true
      - value: |-
          ```php
          #[Route('/blog/{page}', name: 'blog_list', default: '1')]
          public function list(int $page): Response
          {
              // ...
          }
          ```
        correct: false
    help: Default values for route parameters can be set using the `defaults` option
      in the `#[Route]` attribute or by providing a default value in the
      controller method signature. https://symfony.com/doc/current/routing.html
  - question: Which of the following commands can you use to find out which route
      matches a specific URL path, for example, `/lucky/number/8`?
    answers:
      - value: "`php bin/console router:match /lucky/number/8`"
        correct: true
      - value: "`php bin/console debug:route /lucky/number/8`"
        correct: false
      - value: "`php bin/console route:find /lucky/number/8`"
        correct: false
      - value: "`php bin/console match:route /lucky/number/8`"
        correct: false
    help: The `router:match` command helps debug routing by showing which route
      matches a given URL.
      https://symfony.com/doc/current/routing.html#_snippet_15
  - question: You want to create a route that redirects `/doc` to an internal route
      named `doc_page` permanently, preserving query parameters. Which
      `RedirectController` configuration in YAML is correct?
    answers:
      - value: >-
          ```yaml

          doc_shortcut:
              path: /doc
              controller: Symfony\Bundle\FrameworkBundle\Controller\RedirectController
              defaults:
                  route: 'doc_page'
                  permanent: true
                  keepQueryParams: true
          ```
        correct: true
      - value: >-
          ```yaml

          doc_shortcut:
              path: /doc
              controller: Symfony\Bundle\FrameworkBundle\Controller\RedirectController
              options:
                  target_route: 'doc_page'
                  status: 301
                  query_params: true
          ```
        correct: false
      - value: |-
          ```yaml
          doc_shortcut:
              path: /doc
              redirect_to: doc_page
              permanent: true
              preserve_query: true
          ```
        correct: false
      - value: >-
          ```yaml

          doc_shortcut:
              path: /doc
              controller: Symfony\Bundle\FrameworkBundle\Controller\RedirectController
              defaults:
                  url: 'doc_page'
                  permanent: true
                  keepQueryParams: true
          ```
        correct: false
    help: "The `RedirectController` uses `route` for internal route redirection,
      `permanent: true` for 301 status, and `keepQueryParams: true` to preserve
      query parameters.
      https://symfony.com/doc/current/routing.html#_snippet_44"
  - question: "What is the effect of marking a route as `stateless: true` in Symfony?"
    answers:
      - value: It prevents session usage during request matching for that route,
          improving caching.
        correct: true
      - value: It makes the route accessible without authentication.
        correct: false
      - value: It disables CSRF protection for forms submitted to this route.
        correct: false
      - value: It ensures the route always returns a JSON response.
        correct: false
    help: The `stateless` option is used to mark a route as stateless, which means
      the session will not be started or used when matching that route. This can
      improve caching. https://symfony.com/doc/current/routing.html#_snippet_54
  - question: |-
      Consider the following PHP attribute configuration for a route group:

      ```php
      #[Route('/blog', requirements: ['_locale' => 'en|es|fr'], name: 'blog_')]
      class BlogController extends AbstractController
      {
          #[Route('/{_locale}', name: 'index')]
          public function index(): Response
          {
              // ...
          }
      }
      ```

      What will be the full path and name of the `index` route?
    answers:
      - value: "Path: `/blog/{_locale}`, Name: `blog_index`"
        correct: true
      - value: "Path: `/{_locale}`, Name: `index`"
        correct: false
      - value: "Path: `/blog/{_locale}/index`, Name: `blog_index`"
        correct: false
      - value: "Path: `/blog/{_locale}`, Name: `index`"
        correct: false
    help: The `#[Route]` attribute on the class acts as a prefix for all routes
      defined within that controller. The `path` and `name` from the class-level
      attribute are prepended to the method-level attributes.
      https://symfony.com/doc/current/routing.html#_snippet_37
  - question: Which special route parameter is used to determine which controller
      and action is executed when a route is matched?
    answers:
      - value: "`_controller`"
        correct: true
      - value: "`_action`"
        correct: false
      - value: "`_handler`"
        correct: false
      - value: "`_target`"
        correct: false
    help: The `_controller` parameter is a special internal routing attribute that
      determines the controller and action to be executed.
      https://symfony.com/doc/current/routing.html#_snippet_27
  - question: You need to allow a route parameter `token` to contain slash (`/`)
      characters. How would you achieve this in YAML?
    answers:
      - value: |-
          ```yaml
          share:
              path: /share/{token}
              controller: App\Controller\DefaultController::share
              requirements:
                  token: .+
          ```
        correct: true
      - value: |-
          ```yaml
          share:
              path: /share/{token}
              controller: App\Controller\DefaultController::share
              options:
                  allow_slashes: true
          ```
        correct: false
      - value: |-
          ```yaml
          share:
              path: /share/{token}
              controller: App\Controller\DefaultController::share
              requirements:
                  token: '.*'
          ```
        correct: false
    help: By default, route parameters do not match the `/` character. To allow it,
      you must explicitly define a requirement using a regular expression like
      `.+` (one or more characters, including `/`).
      https://symfony.com/doc/current/routing.html#_snippet_31
  - question: When generating a URL in Symfony, what happens if you pass an object
      (e.g., a UUID object) directly as a route parameter without converting it
      to a string?
    answers:
      - value: It will likely result in an error or unexpected behavior, as parameters
          are expected to be scalar values.
        correct: true
      - value: Symfony will automatically call the object's `__toString()` method if
          available.
        correct: false
      - value: The object's class name will be used as the parameter value.
        correct: false
      - value: The parameter will be silently ignored.
        correct: false
    help: When passing objects as extra URL parameters, they must be explicitly
      converted to strings (e.g., `(string) $entity->getUuid()`) to avoid
      issues. https://symfony.com/doc/current/routing.html#_snippet_58
  - question: You want to apply an HTTP method restriction to a route. Which option
      is used in PHP attributes to specify that a route should only match `GET`
      and `HEAD` requests?
    answers:
      - value: |-
          ```php
          #[Route('/contact', name: 'contact', methods: ['GET', 'HEAD'])]
          ```
        correct: true
      - value: |-
          ```php
          #[Route('/contact', name: 'contact', httpMethods: ['GET', 'HEAD'])]
          ```
        correct: false
      - value: |-
          ```php
          #[Route('/contact', name: 'contact', allowMethods: ['GET', 'HEAD'])]
          ```
        correct: false
      - value: |-
          ```php
          #[Route('/contact', name: 'contact', requestMethods: ['GET', 'HEAD'])]
          ```
        correct: false
    help: The `methods` option in the `#[Route]` attribute is used to restrict the
      HTTP methods that a route will match.
      https://symfony.com/doc/current/routing.html
  - question: What is the primary benefit of using `#[Route]` attributes on a
      controller class to define a route group?
    answers:
      - value: It allows applying common configurations (prefix, name prefix,
          requirements) to multiple routes within that controller.
        correct: true
      - value: It automatically registers all public methods in the controller as
          routes.
        correct: false
      - value: It enables lazy loading of the controller, improving performance.
        correct: false
      - value: It forces all routes in the controller to use the same HTTP method.
        correct: false
    help: Applying `#[Route]` to a controller class allows you to group routes and
      apply common configurations like URL prefixes, requirements, and name
      prefixes. https://symfony.com/doc/current/routing.html#_snippet_37
  - question: Which of the following is a valid way to define a route alias named
      `product_details` for an existing route `product_show` using YAML?
    answers:
      - value: |-
          ```yaml
          product_details:
              alias: product_show
          ```
        correct: true
      - value: |-
          ```yaml
          product_show:
              aliases:
                  - product_details
          ```
        correct: false
      - value: |-
          ```yaml
          product_details:
              target: product_show
          ```
        correct: false
      - value: |-
          ```yaml
          product_show:
              alias_name: product_details
          ```
        correct: false
    help: In YAML, an alias is defined by creating a new route entry and setting its
      `alias` option to the name of the target route.
      https://symfony.com/doc/current/routing.html#_snippet_34
  - question: How can you access the current route's name and its parameters from
      the `Request` object within a Symfony controller?
    answers:
      - value: |-
          ```php
          $routeName = $request->attributes->get('_route');
          $routeParameters = $request->attributes->get('_route_params');
          ```
        correct: true
      - value: |-
          ```php
          $routeName = $request->getRouteName();
          $routeParameters = $request->getRouteParameters();
          ```
        correct: false
      - value: |-
          ```php
          $routeName = $request->query->get('_route');
          $routeParameters = $request->query->get('_route_params');
          ```
        correct: false
      - value: |-
          ```php
          $routeName = $request->attributes->get('route_name');
          $routeParameters = $request->attributes->get('route_params');
          ```
        correct: false
    help: The route name is stored in the `_route` attribute and route parameters in
      `_route_params` within the `Request` object's attributes.
      https://symfony.com/doc/current/routing.html#_snippet_42
  - question: What is the purpose of the `priority` option when defining Symfony routes?
    answers:
      - value: It controls the order in which routes are evaluated; higher priority
          routes are matched first.
        correct: true
      - value: It determines the HTTP status code returned by the route.
        correct: false
      - value: It sets the default locale for the route.
        correct: false
      - value: It defines the minimum PHP version required for the route to function.
        correct: false
    help: The `priority` option (default 0) allows you to explicitly control the
      order of route matching. Routes with higher priority are checked before
      those with lower priority. This is crucial for resolving conflicts between
      greedy and specific routes.
      https://symfony.com/doc/current/routing.html#_snippet_23
  - question: Which of the following `debug:router` command options will display
      only routes that match the `GET` HTTP method?
    answers:
      - value: "`php bin/console debug:router --method=GET`"
        correct: true
      - value: "`php bin/console debug:router --http-method=GET`"
        correct: false
      - value: "`php bin/console debug:router --filter-method=GET`"
        correct: false
      - value: "`php bin/console debug:router --get-only`"
        correct: false
    help: The `--method` option filters routes by HTTP method. You can also use
      `ANY` to see routes matching any method.
      https://symfony.com/doc/current/routing.html#_snippet_13
  - question: You want to define a route that matches `m.example.com` for a mobile
      homepage. How would you configure this using PHP attributes?
    answers:
      - value: |-
          ```php
          #[Route('/', name: 'mobile_homepage', host: 'm.example.com')]
          public function mobileHomepage(): Response
          {
              // ...
          }
          ```
        correct: true
      - value: |-
          ```php
          #[Route('/', name: 'mobile_homepage', domain: 'm.example.com')]
          public function mobileHomepage(): Response
          {
              // ...
          }
          ```
        correct: false
      - value: |-
          ```php
          #[Route('/', name: 'mobile_homepage', server: 'm.example.com')]
          public function mobileHomepage(): Response
          {
              // ...
          }
          ```
        correct: false
      - value: |-
          ```php
          #[Route('/', name: 'mobile_homepage', hostname: 'm.example.com')]
          public function mobileHomepage(): Response
          {
              // ...
          }
          ```
        correct: false
    help: The `host` option in the `#[Route]` attribute is used for domain name
      matching. https://symfony.com/doc/current/routing.html#_snippet_46
  - question: What is the recommended way to check if a route exists in Symfony 7?
    answers:
      - value: Attempt to generate the URL and catch
          `Symfony\Component\Routing\Exception\RouteNotFoundException`.
        correct: true
      - value: Call `$this->get('router')->getRouteCollection()->has('routeName')`.
        correct: false
      - value: Use `php bin/console debug:router routeName` and check the output.
        correct: false
      - value: Inspect the `router.cache` file directly.
        correct: false
    help: The recommended approach is to attempt URL generation and catch
      `RouteNotFoundException` to avoid regenerating the routing cache.
      https://symfony.com/doc/current/routing.html#_snippet_63
  - question: Which of the following is a special internal routing attribute that
      sets the request format (e.g., `application/json` for `json` format)?
    answers:
      - value: "`_format`"
        correct: true
      - value: "`_type`"
        correct: false
      - value: "`_content_type`"
        correct: false
      - value: "`_mime_type`"
        correct: false
    help: The `_format` parameter is used to set the 'request format' of the
      `Request` object, which influences the `Content-Type` of the response.
      https://symfony.com/doc/current/routing.html#_snippet_27
  - question: You want to import routes from `src/Controller/` and apply a prefix of
      `/blog` and a name prefix of `blog_` to all imported routes using YAML.
      Which configuration is correct?
    answers:
      - value: |-
          ```yaml
          controllers:
              resource: '../../src/Controller/'
              type: attribute
              prefix: '/blog'
              name_prefix: 'blog_'
          ```
        correct: true
      - value: |-
          ```yaml
          controllers:
              path: '../../src/Controller/'
              loader: attribute
              url_prefix: '/blog'
              route_prefix: 'blog_'
          ```
        correct: false
      - value: |-
          ```yaml
          controllers:
              import: '../../src/Controller/'
              format: attribute
              prefix: '/blog'
              name_prefix: 'blog_'
          ```
        correct: false
      - value: |-
          ```yaml
          controllers:
              resource: '../../src/Controller/'
              type: attribute
              defaults:
                  _prefix: '/blog'
                  _name_prefix: 'blog_'
          ```
        correct: false
    help: When importing routes, `prefix` adds to the URL path and `name_prefix`
      adds to the route name. `resource` specifies the path and `type` the
      loader. https://symfony.com/doc/current/routing.html#_snippet_38
  - question: Which of the following is a valid expression language variable
      available in Symfony routing conditions that represents the current
      `Request` object?
    answers:
      - value: "`request`"
        correct: true
      - value: "`http_request`"
        correct: false
      - value: "`current_request`"
        correct: false
      - value: "`this.request`"
        correct: false
    help: The `request` variable provides access to the
      `Symfony\Component\HttpFoundation\Request` object within routing
      conditions. https://symfony.com/doc/current/routing.html#_snippet_9
  - question: How can you define a route with a dynamic subdomain, like
      `subdomain.example.com`, and set a default value for `subdomain` to `m`
      using PHP attributes?
    answers:
      - value: |-
          ```php
          #[Route(
              '/',
              name: 'mobile_homepage',
              host: '{subdomain}.example.com',
              defaults: ['subdomain' => 'm']
          )]
          public function mobileHomepage(): Response
          {
              // ...
          }
          ```
        correct: true
      - value: |-
          ```php
          #[Route(
              '/',
              name: 'mobile_homepage',
              host: 'm.example.com',
              requirements: ['subdomain' => '.+']
          )]
          public function mobileHomepage(): Response
          {
              // ...
          }
          ```
        correct: false
      - value: |-
          ```php
          #[Route(
              '/',
              name: 'mobile_homepage',
              host: '{subdomain}.example.com',
              options: ['default_subdomain' => 'm']
          )]
          public function mobileHomepage(): Response
          {
              // ...
          }
          ```
        correct: false
    help: Dynamic host parameters are defined within curly braces in the `host`
      option, and their default values are set in the `defaults` array.
      https://symfony.com/doc/current/routing.html#_snippet_47
  - question: What is the purpose of the `_fragment` special route parameter?
    answers:
      - value: It is used to set the fragment identifier (the part of a URL after a
          `#`).
        correct: true
      - value: It defines a portion of the URL path that can be omitted.
        correct: false
      - value: It specifies a part of the URL that should be cached separately.
        correct: false
      - value: It indicates a route that should only be matched by AJAX requests.
        correct: false
    help: The `_fragment` parameter is used to identify a portion of a document,
      typically starting with a `#` in the URL.
      https://symfony.com/doc/current/routing.html#_snippet_27
  - question: You want to redirect `/legacy/doc` to an external URL
      `https://legacy.example.com/doc` permanently. Which PHP routing
      configurator snippet is correct?
    answers:
      - value: |-
          ```php
          $routes->add('legacy_doc', '/legacy/doc')
              ->controller(RedirectController::class)
               ->defaults([
                  'path' => 'https://legacy.example.com/doc',
                  'permanent' => true,
              ]);
          ```
        correct: true
      - value: |-
          ```php
          $routes->add('legacy_doc', '/legacy/doc')
              ->redirect('https://legacy.example.com/doc', 301);
          ```
        correct: false
      - value: >-
          ```php

          $routes->add('legacy_doc', '/legacy/doc')
              ->controller(RedirectController::class)
              ->options(['url' => 'https://legacy.example.com/doc', 'status' => 301]);
          ```
        correct: false
    help: "The `RedirectController` can redirect to an absolute path or URL using
      the `path` default, and `permanent: true` sets the 301 status code.
      https://symfony.com/doc/current/routing.html#_snippet_45"
  - question: In Symfony 7, what is the primary method for loading routes from
      controller classes using PHP attributes?
    answers:
      - value: "Configuring `resource: '../../src/Controller/'` and `type: attribute` in
          `config/routes/attributes.yaml`."
        correct: true
      - value: Manually registering each controller with the router service.
        correct: false
      - value: Using the `#[RouteLoader]` attribute on controller classes.
        correct: false
      - value: Running `php bin/console cache:clear --routes`.
        correct: false
    help: "Symfony automatically discovers routes defined with `#[Route]` attributes
      in controllers when configured via `resource` and `type: attribute` in
      routing configuration files.
      https://symfony.com/doc/current/routing.html#_snippet_0"
  - question: You want to define a route `contact` that only matches `GET` or `HEAD`
      requests AND where the `User-Agent` header matches `/firefox/i`. Which
      expression language condition in PHP attributes is correct?
    answers:
      - value: >-
          ```php

          #[Route(
              '/contact',
              name: 'contact',
              condition: "context.getMethod() in ['GET', 'HEAD'] and request.headers.get('User-Agent') matches '/firefox/i'"
          )]

          ```
        correct: true
      - value: >-
          ```php

          #[Route(
              '/contact',
              name: 'contact',
              condition: "method in ['GET', 'HEAD'] and headers['User-Agent'] matches '/firefox/i'"
          )]

          ```
        correct: false
      - value: >-
          ```php

          #[Route(
              '/contact',
              name: 'contact',
              condition: "request.method in ['GET', 'HEAD'] && request.header('User-Agent').matches('/firefox/i')"
          )]

          ```
        correct: false
    help: The `condition` option uses Symfony's Expression Language.
      `context.getMethod()` accesses the HTTP method, and
      `request.headers.get()` accesses request headers. `matches` is for regex
      matching. https://symfony.com/doc/current/routing.html#_snippet_7
  - question: What is the purpose of the `UrlGeneratorInterface` in Symfony?
    answers:
      - value: To generate URLs based on route names and parameters.
        correct: true
      - value: To match incoming URLs to defined routes.
        correct: false
      - value: To validate URL parameters against requirements.
        correct: false
      - value: To redirect HTTP requests to different URLs.
        correct: false
    help: The `UrlGeneratorInterface` is the service responsible for generating URLs
      from route names and parameters, commonly injected into services.
      https://symfony.com/doc/current/routing.html#_snippet_59
  - question: How can you specify different URL paths for a route based on the
      user's locale (e.g., `/about-us` for English and `/over-ons` for Dutch)
      using PHP attributes?
    answers:
      - value: |-
          ```php
          #[Route(path: [
              'en' => '/about-us',
              'nl' => '/over-ons'
          ], name: 'about_us')]
          public function about(): Response
          {
              // ...
          }
          ```
        correct: true
      - value: >-
          ```php

          #[Route('/about-us', name: 'about_us', locales: ['en' => '/about-us',
          'nl' => '/over-ons'])]

          public function about(): Response

          {
              // ...
          }

          ```
        correct: false
      - value: |-
          ```php
          #[Route(name: 'about_us')]
          #[LocalePath('en', '/about-us')]
          #[LocalePath('nl', '/over-ons')]
          public function about(): Response
          {
              // ...
          }
          ```
        correct: false
    help: Localized routes can be defined by providing an array of locale-specific
      paths to the `path` option of the `#[Route]` attribute.
      https://symfony.com/doc/current/routing.html#_snippet_50
  - question: Which command would you use to display detailed information about a
      specific route, for example, `app_lucky_number`?
    answers:
      - value: "`php bin/console debug:router app_lucky_number`"
        correct: true
      - value: "`php bin/console router:show app_lucky_number`"
        correct: false
      - value: "`php bin/console route:info app_lucky_number`"
        correct: false
      - value: "`php bin/console debug:route app_lucky_number`"
        correct: false
    help: Passing the route name as an argument to `debug:router` displays its
      details. https://symfony.com/doc/current/routing.html#_snippet_14
  - question: What is the primary purpose of the
      `Symfony\Component\Routing\RouteCollection` class?
    answers:
      - value: To store and manage a collection of `Route` objects.
        correct: true
      - value: To define a single route's configuration.
        correct: false
      - value: To match incoming URLs against defined routes.
        correct: false
      - value: To generate URLs from route names.
        correct: false
    help: The `RouteCollection` class is a container for `Route` objects, used by
      the router to manage all application routes.
      https://symfony.com/doc/current/routing/custom_route_loader.html#_snippet_3
  - question: You have a PHP backed Enum `OrderStatusEnum` and want to use it
      directly as a route parameter. How does Symfony 7 handle this?
    answers:
      - value: Symfony automatically converts the Enum value to its scalar equivalent
          (e.g., string or int) for matching and passes the Enum object to the
          controller.
        correct: true
      - value: You must explicitly define a `requirements` regex to match the Enum's
          possible scalar values.
        correct: false
      - value: It's not possible to use PHP Enums directly as route parameters; you must
          pass their scalar values.
        correct: false
      - value: Symfony will throw an error if the Enum value doesn't match a predefined
          list.
        correct: false
    help: Symfony automatically converts PHP backed enumerations used as route
      parameters to their scalar values, allowing for cleaner controller
      argument definitions and type hinting.
      https://symfony.com/doc/current/routing.html#_snippet_26
  - question: "Which of the following describes the behavior of `keepRequestMethod:
      true` when configuring a redirect with `RedirectController`?"
    answers:
      - value: It ensures the HTTP method of the original request is preserved during
          the redirect.
        correct: true
      - value: It forces the redirect to always use the `GET` method.
        correct: false
      - value: It prevents the redirect from happening if the original method is not
          `GET`.
        correct: false
      - value: It changes the redirect status code to 303 for temporary redirects and
          307 for permanent redirects.
        correct: false
    help: "When `keepRequestMethod` is true, the redirect status changes: 307 for
      temporary (instead of 302) and 308 for permanent (instead of 301),
      preserving the original HTTP method.
      https://symfony.com/doc/current/routing.html#_snippet_44"
  - question: What happens if a controller method expects an argument (e.g.,
      `$slug`) but the corresponding route path does not define a parameter for
      it?
    answers:
      - value: Symfony will throw an `ArgumentResolverException` or similar error
          indicating a missing mandatory parameter.
        correct: true
      - value: The argument will be `null` by default.
        correct: false
      - value: Symfony will attempt to autowire a service with that name.
        correct: false
      - value: The route will simply not match.
        correct: false
    help: If a controller method requires an argument that is not provided by the
      route parameters, Symfony will report an error like 'Controller requires
      that you provide a value for the "$slug" argument.'
      https://symfony.com/doc/current/routing.html#_snippet_72
  - question: How can you apply an HTTPS scheme requirement to an entire group of
      imported routes using PHP routing configurator?
    answers:
      - value: |-
          ```php
          $routes->import('../../src/Controller/', 'attribute')
              ->schemes(['https']);
          ```
        correct: true
      - value: |-
          ```php
          $routes->import('../../src/Controller/', 'attribute')
              ->setSchemes(['https']);
          ```
        correct: false
      - value: |-
          ```php
          $routes->import('../../src/Controller/', 'attribute')
              ->requireHttps();
          ```
        correct: false
      - value: |-
          ```php
          $routes->import('../../src/Controller/', 'attribute')
              ->defaults(['_scheme' => 'https']);
          ```
        correct: false
    help: The `schemes()` method on the imported route collection configurator
      applies the scheme requirement to all imported routes.
      https://symfony.com/doc/current/routing.html#_snippet_68
  - question: You want to define a route `article_search` with a default locale of
      `en` and a default format of `html`, while also requiring `_locale` to be
      `en|fr` and `_format` to be `html|xml`. Which PHP attribute configuration
      is correct?
    answers:
      - value: |-
          ```php
          #[Route(
              path: '/articles/{_locale}/search.{_format}',
              locale: 'en',
              format: 'html',
              requirements: [
                  '_locale' => 'en|fr',
                  '_format' => 'html|xml',
              ],
          )]
          public function search(): Response
          {
              // ...
          }
          ```
        correct: true
      - value: |-
          ```php
          #[Route(
              path: '/articles/{_locale}/search.{_format}',
              defaults: ['_locale' => 'en', '_format' => 'html'],
              requirements: [
                  '_locale' => 'en|fr',
                  '_format' => 'html|xml',
              ],
          )]
          public function search(): Response
          {
              // ...
          }
          ```
        correct: false
      - value: |-
          ```php
          #[Route(
              path: '/articles/{_locale}/search.{_format}',
              options: ['locale' => 'en', 'format' => 'html'],
              requirements: [
                  '_locale' => 'en|fr',
                  '_format' => 'html|xml',
              ],
          )]
          public function search(): Response
          {
              // ...
          }
          ```
        correct: false
    help: Special parameters like `_locale` and `_format` can have default values
      set directly via `locale` and `format` options, and their requirements are
      defined in the `requirements` array.
      https://symfony.com/doc/current/routing.html#_snippet_28
  - question: What is the purpose of the `context` variable in Symfony's Expression
      Language for routing conditions?
    answers:
      - value: It is an instance of `Symfony\Component\Routing\RequestContext`,
          providing information about the route being matched.
        correct: true
      - value: It holds the current user's security context.
        correct: false
      - value: It represents the application's environment (e.g., `dev`, `prod`).
        correct: false
      - value: It provides access to all defined services in the container.
        correct: false
    help: The `context` variable in Expression Language for routing conditions is an
      instance of `Symfony\Component\Routing\RequestContext`.
      https://symfony.com/doc/current/routing.html#_snippet_9
  - question: How can you explicitly set the locale for a generated URL to `nl`
      (Dutch) using `generateUrl()` in a controller, assuming the route supports
      localization?
    answers:
      - value: >-
          ```php

          $signUpPageInDutch = $this->generateUrl('sign_up', ['_locale' =>
          'nl']);

          ```
        correct: true
      - value: |-
          ```php
          $signUpPageInDutch = $this->generateUrl('sign_up', [], 'nl');
          ```
        correct: false
      - value: >-
          ```php

          $signUpPageInDutch = $this->generateUrl('sign_up', ['locale' =>
          'nl']);

          ```
        correct: false
      - value: >-
          ```php

          $signUpPageInDutch = $this->generateUrl('sign_up', [],
          UrlGeneratorInterface::ABSOLUTE_URL, 'nl');

          ```
        correct: false
    help: To generate a URL for a specific locale, pass the `_locale` parameter with
      the desired locale code in the route arguments.
      https://symfony.com/doc/current/routing.html#_snippet_56
  - question: What is the primary benefit of using `router:match` for debugging
      routing issues?
    answers:
      - value: It allows you to quickly determine which route Symfony will match for a
          given URL path.
        correct: true
      - value: It shows a graphical representation of your route tree.
        correct: false
      - value: It generates a test request to the matched route.
        correct: false
      - value: It provides performance metrics for route matching.
        correct: false
    help: The `router:match` command is invaluable for debugging as it tells you
      exactly which route matches a specific URL.
      https://symfony.com/doc/current/routing.html#_snippet_15
  - question: You are importing routes from `src/Controller/` and want to exclude
      `DebugController.php` from being loaded. Which PHP routing configurator
      snippet is correct?
    answers:
      - value: |-
          ```php
          $routes->import(
              '../../src/Controller/',
              'attribute',
              false,
              '../../src/Controller/{Debug*Controller.php}'
          );
          ```
        correct: true
      - value: |-
          ```php
          $routes->import('../../src/Controller/', 'attribute')
              ->exclude('DebugController.php');
          ```
        correct: false
      - value: >-
          ```php

          $routes->import('../../src/Controller/', 'attribute')
              ->filter(fn($path) => !str_contains($path, 'DebugController.php'));
          ```
        correct: false
      - value: |-
          ```php
          $routes->import('../../src/Controller/', 'attribute')
              ->ignore('DebugController.php');
          ```
        correct: false
    help: The fourth argument to `import()` in `RoutingConfigurator` allows
      specifying glob patterns for files or subdirectories to exclude.
      https://symfony.com/doc/current/routing.html#_snippet_40
  - question: What is the significance of the `params` variable in Symfony's
      Expression Language for routing conditions?
    answers:
      - value: It is an array of matched route parameters for the current route.
        correct: true
      - value: It contains all query parameters from the request.
        correct: false
      - value: It provides access to POST request body parameters.
        correct: false
      - value: It lists all available route names in the application.
        correct: false
    help: The `params` variable allows you to access the values of matched route
      parameters within a condition expression.
      https://symfony.com/doc/current/routing.html#_snippet_9
  - question: You want to define a route `blog_show` with a dynamic `slug`
      parameter. Which YAML configuration is correct?
    answers:
      - value: |-
          ```yaml
          blog_show:
              path: /blog/{slug}
              controller: App\Controller\BlogController::show
          ```
        correct: true
      - value: |-
          ```yaml
          blog_show:
              path: /blog/:slug
              controller: App\Controller\BlogController::show
          ```
        correct: false
      - value: |-
          ```yaml
          blog_show:
              path: /blog/{slug*}
              controller: App\Controller\BlogController::show
          ```
        correct: false
      - value: |-
          ```yaml
          blog_show:
              path: /blog/{slug?}
              controller: App\Controller\BlogController::show
          ```
        correct: false
    help: Dynamic route parameters are enclosed in curly braces `{}`.
      https://symfony.com/doc/current/routing.html#_snippet_16
  - question: What is the purpose of the `env()` function in Symfony's Expression
      Language for routing conditions?
    answers:
      - value: It returns the value of an environment variable.
        correct: true
      - value: It checks if the current environment matches a given string.
        correct: false
      - value: It sets an environment variable for the current request.
        correct: false
      - value: It provides access to environment-specific configuration parameters.
        correct: false
    help: The `env()` function allows you to retrieve the value of an environment
      variable within a routing condition.
      https://symfony.com/doc/current/routing.html#_snippet_9
  - question: How can you define locale-specific URL prefixes for imported routes
      (e.g., `/nl` for Dutch) using YAML?
    answers:
      - value: |-
          ```yaml
          controllers:
              resource: '../../src/Controller/'
              type: attribute
              prefix:
                  en: ''
                  nl: '/nl'
          ```
        correct: true
      - value: |-
          ```yaml
          controllers:
              resource: '../../src/Controller/'
              type: attribute
              locale_prefix:
                  en: ''
                  nl: '/nl'
          ```
        correct: false
      - value: |-
          ```yaml
          controllers:
              resource: '../../src/Controller/'
              type: attribute
              prefixes:
                  en: ''
                  nl: '/nl'
          ```
        correct: false
    help: The `prefix` option can take a map of locales to prefixes for localized
      routing. https://symfony.com/doc/current/routing.html#_snippet_51
  - question: Which of the following is true regarding the `UrlMatcher` in Symfony's
      Routing component?
    answers:
      - value: It matches an incoming request path against the defined routes.
        correct: true
      - value: It generates URLs from route names.
        correct: false
      - value: It is responsible for loading routes from configuration files.
        correct: false
      - value: It handles HTTP redirects.
        correct: false
    help: The `UrlMatcher` is used to match an incoming URL path to a specific route
      and extract its parameters.
      https://symfony.com/doc/current/create_framework/routing.html#_snippet_5
  - question: What is the primary purpose of the
      `Symfony\Component\Config\Loader\LoaderInterface::supports()` method?
    answers:
      - value: To check if the loader can handle a given resource and type.
        correct: true
      - value: To load the configuration from a resource.
        correct: false
      - value: To determine if a route is supported by the application.
        correct: false
      - value: To provide a list of supported resource types.
        correct: false
    help: The `supports()` method determines if a loader is capable of loading a
      specific resource based on its type (e.g., 'attribute', 'yaml').
      https://symfony.com/doc/current/routing/custom_route_loader.html#_snippet_3
  - question: You want to deprecate a route alias `product_show` in favor of
      `product_details` and provide a custom deprecation message. Which YAML
      configuration is correct?
    answers:
      - value: >-
          ```yaml

          product_details:
              path: /product/{id}
              controller: App\Controller\ProductController::show

          product_show:
              alias: product_details
              deprecated:
                  package: 'acme/package'
                  version: '1.2'
                  message: 'The "%alias_id%" route alias is deprecated. Please use "product_details" instead.'
          ```
        correct: true
      - value: >-
          ```yaml

          product_details:
              path: /product/{id}
              controller: App\Controller\ProductController::show

          product_show:
              alias: product_details
              deprecation_message: 'The "product_show" route alias is deprecated. Please use "product_details" instead.'
          ```
        correct: false
      - value: >-
          ```yaml

          product_show:
              alias: product_details
              warning: 'The "product_show" route alias is deprecated. Please use "product_details" instead.'
          ```
        correct: false
    help: Route aliases can be deprecated using the `deprecated` option, which
      allows specifying a package, version, and a custom message. The alias
      points to the new route.
      https://symfony.com/doc/current/routing.html#_snippet_35
  - question: What is the default HTTP status code for a temporary redirect
      configured with Symfony's `RedirectController`?
    answers:
      - value: 302 (Found)
        correct: true
      - value: 301 (Moved Permanently)
        correct: false
      - value: 307 (Temporary Redirect)
        correct: false
      - value: 303 (See Other)
        correct: false
    help: Redirections are temporary by default, using HTTP status code 302. If
      `keepRequestMethod` is true, it uses 307.
      https://symfony.com/doc/current/routing.html#_snippet_44
  - question: Which of the following describes the responsibility of
      `Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader`?
    answers:
      - value: It is the main loader responsible for delegating route loading to
          specialized loaders (e.g., for YAML, XML, attributes).
        correct: true
      - value: It loads routes from a database.
        correct: false
      - value: It generates URLs based on route definitions.
        correct: false
      - value: It compiles the routing cache.
        correct: false
    help: The `DelegatingLoader` is the central component that orchestrates route
      loading by delegating to specific loaders based on resource type.
      https://symfony.com/doc/current/routing/custom_route_loader.html#_snippet_3
  - question: You want to define a route `homepage` that matches the root path `/`
      using PHP routing configurator. Which snippet is correct?
    answers:
      - value: |-
          ```php
          $routes->add('homepage', '/')
              ->controller([MainController::class, 'homepage']);
          ```
        correct: true
      - value: |-
          ```php
          $routes->add('homepage', 'root')
              ->controller([MainController::class, 'homepage']);
          ```
        correct: false
      - value: |-
          ```php
          $routes->add('homepage', '')
              ->controller([MainController::class, 'homepage']);
          ```
        correct: false
    help: The `add()` method of `RoutingConfigurator` takes the route name and path.
      The root path is represented by `/`.
      https://symfony.com/doc/current/routing.html#_snippet_33
  - question: What is the purpose of the `router.cache` file in a Symfony application?
    answers:
      - value: It stores the compiled routing configuration for faster lookup during
          request matching.
        correct: true
      - value: It logs all matched routes for debugging purposes.
        correct: false
      - value: It contains a backup of your routing configuration files.
        correct: false
      - value: It is used to store user-specific routing preferences.
        correct: false
    help: Symfony compiles the routing configuration into a cache file (e.g.,
      `router.cache`) to optimize performance during route matching.
  - question: Which of the following is NOT a valid way to define a route in Symfony 7?
    answers:
      - value: Using a `.json` file for route configuration.
        correct: true
      - value: Using PHP attributes directly in controller classes.
        correct: true
      - value: Using YAML files for route configuration.
        correct: false
      - value: Using PHP files with `RoutingConfigurator`.
        correct: false
      - value: Using XML files for route configuration.
        correct: false
    help: Symfony supports YAML, XML, PHP (attributes and configurator) for defining
      routes. JSON is not a standard format for route configuration.
      https://symfony.com/doc/current/routing.html
  - question: You want to define a route group for a mobile version of your site,
      matching `m.example.com` for English and `m.example.nl` for Dutch. Which
      PHP routing configurator snippet is correct for importing controller
      routes with host-based matching?
    answers:
      - value: |-
          ```php
          $routes->import('../../src/Controller/', 'attribute')
              ->host([
                  'en' => 'www.example.com',
                  'nl' => 'www.example.nl',
              ]);
          ```
        correct: true
      - value: |-
          ```php
          $routes->import('../../src/Controller/', 'attribute')
              ->setHosts([
                  'en' => 'www.example.com',
                  'nl' => 'www.example.nl',
              ]);
          ```
        correct: false
      - value: |-
          ```php
          $routes->import('../../src/Controller/', 'attribute')
              ->domain([
                  'en' => 'www.example.com',
                  'nl' => 'www.example.nl',
              ]);
          ```
        correct: false
    help: The `host()` method on the imported route collection configurator allows
      defining locale-specific host requirements for imported routes.
      https://symfony.com/doc/current/routing.html#_snippet_53
  - question: What is the primary benefit of using `UrlGeneratorInterface` in a
      Symfony service to generate URLs, rather than `generateUrl()` from
      `AbstractController`?
    answers:
      - value: It promotes separation of concerns by keeping URL generation logic out of
          controllers.
        correct: true
      - value: It offers more advanced URL generation options not available in
          controllers.
        correct: false
      - value: It automatically handles caching of generated URLs.
        correct: false
      - value: It is significantly faster for URL generation.
        correct: false
    help: Injecting `UrlGeneratorInterface` into services is the standard way to
      generate URLs outside of controllers, promoting cleaner architecture and
      testability. https://symfony.com/doc/current/routing.html#_snippet_59
  - question: Which of the following is a valid Expression Language function for
      retrieving a service from the container within a routing condition?
    answers:
      - value: "`service('my_service_alias')`"
        correct: true
      - value: "`get_service('my_service_alias')`"
        correct: false
      - value: "`container.get('my_service_alias')`"
        correct: false
      - value: "`this.get('my_service_alias')`"
        correct: false
    help: The `service()` function allows you to retrieve a service from the
      container within a routing condition, provided the service is tagged
      correctly. https://symfony.com/doc/current/routing.html#_snippet_9
  - question: When defining a route with a parameter, e.g., `/blog/{slug}`, what
      happens if the incoming URL is `/blog/` (without a slug)?
    answers:
      - value: The route will not match, resulting in a 404 Not Found error.
        correct: true
      - value: The `slug` parameter will be `null` in the controller.
        correct: false
      - value: Symfony will attempt to find a default value for `slug`.
        correct: false
      - value: The route will match, and the controller will receive an empty string for
          `slug`.
        correct: false
    help: Route parameters are required by default. If a required parameter is
      missing from the URL, the route will not match.
      https://symfony.com/doc/current/routing.html#_snippet_73
  - question: You want to configure a route `blog_list` with a default value of `1`
      for the `page` parameter using YAML. Which snippet is correct?
    answers:
      - value: |-
          ```yaml
          blog_list:
              path: /blog/{page}
              controller: App\Controller\BlogController::list
              defaults:
                  page: 1
          ```
        correct: true
      - value: |-
          ```yaml
          blog_list:
              path: /blog/{page?1}
              controller: App\Controller\BlogController::list
          ```
        correct: false
      - value: |-
          ```yaml
          blog_list:
              path: /blog/{page}
              controller: App\Controller\BlogController::list
              options:
                  default_page: 1
          ```
        correct: false
    help: Default values for route parameters are specified under the `defaults` key
      in YAML. https://symfony.com/doc/current/routing.html
  - question: What is the purpose of the `_route` attribute in the `Request`
      object's attributes?
    answers:
      - value: It contains the name of the matched route.
        correct: true
      - value: It holds the full path of the matched route.
        correct: false
      - value: It indicates if the route was successfully matched.
        correct: false
      - value: It stores the HTTP method used for the matched route.
        correct: false
    help: The `_route` attribute stores the name of the route that was matched by
      the router. https://symfony.com/doc/current/routing.html#_snippet_42
  - question: You want to import routes from `src/Controller/` and apply a global
      requirement that the `_locale` parameter must be either `en`, `es`, or
      `fr` using YAML. Which configuration is correct?
    answers:
      - value: |-
          ```yaml
          controllers:
              resource: '../../src/Controller/'
              type: attribute
              requirements:
                  _locale: 'en|es|fr'
          ```
        correct: true
      - value: |-
          ```yaml
          controllers:
              resource: '../../src/Controller/'
              type: attribute
              defaults:
                  _locale: 'en|es|fr'
          ```
        correct: false
      - value: |-
          ```yaml
          controllers:
              resource: '../../src/Controller/'
              type: attribute
              options:
                  locale_regex: 'en|es|fr'
          ```
        correct: false
    help: Global requirements for imported routes are defined under the
      `requirements` key.
      https://symfony.com/doc/current/routing.html#_snippet_38
  - question: Which of the following is true about the `UrlGenerator` class in
      Symfony's Routing component?
    answers:
      - value: It requires a `RouteCollection` and a `RequestContext` to generate URLs.
        correct: true
      - value: It is primarily used for matching incoming URLs.
        correct: false
      - value: It automatically redirects to the generated URL.
        correct: false
      - value: It can only generate absolute URLs.
        correct: false
    help: The `UrlGenerator` is instantiated with a `RouteCollection` and a
      `RequestContext` to generate URLs.
      https://symfony.com/doc/current/create_framework/routing.html#_snippet_10
  - question: What is the primary function of the
      `Symfony\Component\Routing\RequestContext` class?
    answers:
      - value: It holds fundamental information about the current request, such as the
          HTTP method, host, and scheme, used for route matching and URL
          generation.
        correct: true
      - value: It stores user session data.
        correct: false
      - value: It defines the application's environment configuration.
        correct: false
      - value: It manages the application's security credentials.
        correct: false
    help: The `RequestContext` provides the necessary context (method, host, scheme,
      etc.) for the `UrlMatcher` and `UrlGenerator` to operate.
      https://symfony.com/doc/current/create_framework/routing.html#_snippet_7
  - question: You want to define a route `blog_list` for `/blog` using a PHP
      configuration file (`config/routes.php`). Which snippet is correct?
    answers:
      - value: |-
          ```php
          use App\Controller\BlogController;
          use Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator;

          return function (RoutingConfigurator $routes): void {
              $routes->add('blog_list', '/blog')
                  ->controller([BlogController::class, 'list']);
          };
          ```
        correct: true
      - value: |-
          ```php
          use App\Controller\BlogController;
          use Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator;

          return function (RoutingConfigurator $routes): void {
              $routes->set('blog_list', '/blog')
                  ->action([BlogController::class, 'list']);
          };
          ```
        correct: false
      - value: |-
          ```php
          use App\Controller\BlogController;
          use Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator;

          return function (RoutingConfigurator $routes): void {
              $routes->route('blog_list', '/blog')
                  ->to(BlogController::class, 'list');
          };
          ```
        correct: false
    help: The `RoutingConfigurator`'s `add()` method is used to define routes in PHP
      configuration files.
      https://symfony.com/doc/current/routing.html#_snippet_3
  - question: What is the purpose of the `_route_params` attribute in the `Request`
      object's attributes?
    answers:
      - value: It contains an associative array of all matched route parameters.
        correct: true
      - value: It lists all optional route parameters.
        correct: false
      - value: It stores the query parameters from the URL.
        correct: false
      - value: It defines the default values for route parameters.
        correct: false
    help: The `_route_params` attribute holds an array of the parameters extracted
      from the matched URL path.
      https://symfony.com/doc/current/routing.html#_snippet_42
  - question: You want to define a route `product_show` that matches `/product/{id}`
      using XML. Which snippet is correct?
    answers:
      - value: >-
          ```xml

          <route id="product_show" path="/product/{id}"
          controller="App\Controller\ProductController::show"/>

          ```
        correct: true
      - value: >-
          ```xml

          <route name="product_show" url="/product/{id}"
          handler="App\Controller\ProductController::show"/>

          ```
        correct: false
      - value: |-
          ```xml
          <route id="product_show" pattern="/product/{id}">
              <controller>App\Controller\ProductController::show</controller>
          </route>
          ```
        correct: false
    help: In XML, routes are defined using the `<route>` tag with `id` for the name,
      `path` for the URL pattern, and `controller` for the target.
      https://symfony.com/doc/current/routing.html#_snippet_33
  - question: Which of the following is a valid way to filter the output of `php
      bin/console debug:router` to show only routes with aliases?
    answers:
      - value: "`php bin/console debug:router --show-aliases`"
        correct: true
      - value: "`php bin/console debug:router --aliases-only`"
        correct: false
      - value: "`php bin/console debug:router --filter=alias`"
        correct: false
      - value: "`php bin/console debug:router --with-aliases`"
        correct: false
    help: The `--show-aliases` option is used to display route aliases in the
      `debug:router` output.
      https://symfony.com/doc/current/routing.html#_snippet_13
  - question: What is the primary role of the `Symfony\Component\Routing\Route` class?
    answers:
      - value: It represents a single route definition, including its path, defaults,
          requirements, and options.
        correct: true
      - value: It is a service that generates URLs.
        correct: false
      - value: It is a collection of multiple route definitions.
        correct: false
      - value: It matches incoming requests to a controller.
        correct: false
    help: The `Route` class encapsulates all the configuration for a single route.
      https://symfony.com/doc/current/routing/custom_route_loader.html#_snippet_3
  - question: "When configuring a redirect with `RedirectController`, what is the
      effect of setting `ignoreAttributes: true`?"
    answers:
      - value: It removes all original route attributes when redirecting.
        correct: true
      - value: It ignores all query parameters during the redirect.
        correct: false
      - value: It prevents the redirect from logging any attributes.
        correct: false
      - value: It only redirects if no attributes are present.
        correct: false
    help: "The `ignoreAttributes: true` option ensures that no attributes from the
      original route are passed to the redirected route. You can also specify an
      array of attributes to ignore.
      https://symfony.com/doc/current/routing.html#_snippet_44"
  - question: Which of the following is a valid way to define a route `blog_list`
      for `/blog` using XML?
    answers:
      - value: >-
          ```xml

          <route id="blog_list" path="/blog"
          controller="App\Controller\BlogController::list"/>

          ```
        correct: true
      - value: >-
          ```xml

          <route name="blog_list" url="/blog"
          action="App\Controller\BlogController::list"/>

          ```
        correct: false
      - value: >-
          ```xml

          <route id="blog_list" route_path="/blog"
          controller="App\Controller\BlogController::list"/>

          ```
        correct: false
    help: XML route definitions use `id` for the route name, `path` for the URL, and
      `controller` for the target.
      https://symfony.com/doc/current/routing.html#_snippet_2
  - question: You have a route `post_show` with a parameter `{id}`. You want to add
      a condition that this route only matches if `id` is less than `1000`.
      Which YAML configuration is correct?
    answers:
      - value: |-
          ```yaml
          post_show:
              path: /posts/{id}
              controller: App\Controller\DefaultController::showPost
              condition: "params['id'] < 1000"
          ```
        correct: true
      - value: |-
          ```yaml
          post_show:
              path: /posts/{id}
              controller: App\Controller\DefaultController::showPost
              requirements:
                  id: '<1000'
          ```
        correct: false
      - value: |-
          ```yaml
          post_show:
              path: /posts/{id}
              controller: App\Controller\DefaultController::showPost
              when: "id < 1000"
          ```
        correct: false
    help: The `condition` option uses Expression Language, where `params['id']`
      accesses the route parameter value.
      https://symfony.com/doc/current/routing.html#_snippet_7
  - question: Which of the following is the correct way to define a route
      `blog_list` for the path `/blog` in YAML, mapping to
      `App\Controller\BlogController::list`?
    answers:
      - value: |-
          ```yaml
          blog_list:
              path: /blog
              controller: App\Controller\BlogController::list
          ```
        correct: true
      - value: |-
          ```yaml
          /blog:
              name: blog_list
              controller: App\Controller\BlogController::list
          ```
        correct: false
      - value: |-
          ```yaml
          route_blog_list:
              url: /blog
              action: App\Controller\BlogController::list
          ```
        correct: false
    help: YAML route definitions use a unique name as the top-level key, followed by
      `path` and `controller`.
      https://symfony.com/doc/current/routing.html#_snippet_2
  - question: "What is the behavior of `trailing_slash_on_root: false` when used
      with a `prefix` on an imported route collection in YAML?"
    answers:
      - value: It ensures that an imported route with an empty URL (e.g., `/`) becomes
          `/prefix` instead of `/prefix/`.
        correct: true
      - value: It removes trailing slashes from all generated URLs for imported routes.
        correct: false
      - value: It forces all imported routes to have a trailing slash.
        correct: false
      - value: It only applies to routes explicitly defined as root routes.
        correct: false
    help: "By default, an empty URL with a prefix becomes `/prefix/`. Setting
      `trailing_slash_on_root: false` makes it `/prefix`.
      https://symfony.com/doc/current/routing.html#_snippet_38"
  - question: Which of the following describes the
      `Symfony\Component\Routing\RouteLoaderInterface`?
    answers:
      - value: An interface for classes that load routes, typically used for
          autoconfiguration.
        correct: true
      - value: An interface for classes that match URLs to routes.
        correct: false
      - value: An interface for classes that generate URLs from routes.
        correct: false
      - value: An interface for classes that compile the routing cache.
        correct: false
    help: This interface is implemented by classes responsible for loading routes,
      often used in conjunction with autoconfiguration.
      https://symfony.com/doc/current/routing/custom_route_loader.html#_snippet_3
  - question: You want to define a route `mobile_homepage` that matches
      `m.example.com` and has a requirement that the `subdomain` parameter must
      be either `m` or `mobile`. Which YAML configuration is correct?
    answers:
      - value: |-
          ```yaml
          mobile_homepage:
              path: /
              host: "{subdomain}.example.com"
              controller: App\Controller\MainController::mobileHomepage
              defaults:
                  subdomain: m
              requirements:
                  subdomain: m|mobile
          ```
        correct: true
      - value: |-
          ```yaml
          mobile_homepage:
              path: /
              host: "{subdomain}.example.com"
              controller: App\Controller\MainController::mobileHomepage
              requirements:
                  subdomain: '(m|mobile)'
          ```
        correct: false
      - value: |-
          ```yaml
          mobile_homepage:
              path: /
              host: "{subdomain}.example.com"
              controller: App\Controller\MainController::mobileHomepage
              validate:
                  subdomain: 'm|mobile'
          ```
        correct: false
    help: Dynamic host parameters are defined in the `host` option, and their
      validation rules are set in the `requirements` section.
      https://symfony.com/doc/current/routing.html#_snippet_47
  - question: What is the purpose of the `_route_params` attribute in the `Request`
      object's attributes?
    answers:
      - value: It contains an associative array of all matched route parameters.
        correct: true
      - value: It lists all optional route parameters.
        correct: false
      - value: It stores the query parameters from the URL.
        correct: false
      - value: It defines the default values for route parameters.
        correct: false
    help: The `_route_params` attribute holds an array of the parameters extracted
      from the matched URL path.
      https://symfony.com/doc/current/routing.html#_snippet_42
  - question: Which of the following is the correct way to define a route
      `blog_list` for the path `/blog` in YAML, mapping to
      `App\Controller\BlogController::list`?
    answers:
      - value: |-
          ```yaml
          blog_list:
              path: /blog
              controller: App\Controller\BlogController::list
          ```
        correct: true
      - value: |-
          ```yaml
          /blog:
              name: blog_list
              controller: App\Controller\BlogController::list
          ```
        correct: false
      - value: |-
          ```yaml
          route_blog_list:
              url: /blog
              action: App\Controller\BlogController::list
          ```
        correct: false
    help: YAML route definitions use a unique name as the top-level key, followed by
      `path` and `controller`.
      https://symfony.com/doc/current/routing.html#_snippet_2
  - question: "What is the behavior of `trailing_slash_on_root: false` when used
      with a `prefix` on an imported route collection in YAML?"
    answers:
      - value: It ensures that an imported route with an empty URL (e.g., `/`) becomes
          `/prefix` instead of `/prefix/`.
        correct: true
      - value: It removes trailing slashes from all generated URLs for imported routes.
        correct: false
      - value: It forces all imported routes to have a trailing slash.
        correct: false
      - value: It only applies to routes explicitly defined as root routes.
        correct: false
    help: "By default, an empty URL with a prefix becomes `/prefix/`. Setting
      `trailing_slash_on_root: false` makes it `/prefix`.
      https://symfony.com/doc/current/routing.html#_snippet_38"
  - question: Which of the following describes the
      `Symfony\Component\Routing\RouteLoaderInterface`?
    answers:
      - value: An interface for classes that load routes, typically used for
          autoconfiguration.
        correct: true
      - value: An interface for classes that match URLs to routes.
        correct: false
      - value: An interface for classes that generate URLs from routes.
        correct: false
      - value: An interface for classes that compile the routing cache.
        correct: false
    help: This interface is implemented by classes responsible for loading routes,
      often used in conjunction with autoconfiguration.
      https://symfony.com/doc/current/routing/custom_route_loader.html#_snippet_3
  - question: You want to define a route `mobile_homepage` that matches
      `m.example.com` and has a requirement that the `subdomain` parameter must
      be either `m` or `mobile`. Which YAML configuration is correct?
    answers:
      - value: |-
          ```yaml
          mobile_homepage:
              path: /
              host: "{subdomain}.example.com"
              controller: App\Controller\MainController::mobileHomepage
              defaults:
                  subdomain: m
              requirements:
                  subdomain: m|mobile
          ```
        correct: true
      - value: |-
          ```yaml
          mobile_homepage:
              path: /
              host: "{subdomain}.example.com"
              controller: App\Controller\MainController::mobileHomepage
              requirements:
                  subdomain: '(m|mobile)'
          ```
        correct: false
      - value: |-
          ```yaml
          mobile_homepage:
              path: /
              host: "{subdomain}.example.com"
              controller: App\Controller\MainController::mobileHomepage
              validate:
                  subdomain: 'm|mobile'
          ```
        correct: false
    help: Dynamic host parameters are defined in the `host` option, and their
      validation rules are set in the `requirements` section.
      https://symfony.com/doc/current/routing.html#_snippet_47
  - question: What is the purpose of the `_route_params` attribute in the `Request`
      object's attributes?
    answers:
      - value: It contains an associative array of all matched route parameters.
        correct: true
      - value: It lists all optional route parameters.
        correct: false
      - value: It stores the query parameters from the URL.
        correct: false
      - value: It defines the default values for route parameters.
        correct: false
    help: The `_route_params` attribute holds an array of the parameters extracted
      from the matched URL path.
      https://symfony.com/doc/current/routing.html#_snippet_42
  - question: Which of the following is the correct way to define a route
      `blog_list` for the path `/blog` in YAML, mapping to
      `App\Controller\BlogController::list`?
    answers:
      - value: |-
          ```yaml
          blog_list:
              path: /blog
              controller: App\Controller\BlogController::list
          ```
        correct: true
      - value: |-
          ```yaml
          /blog:
              name: blog_list
              controller: App\Controller\BlogController::list
          ```
        correct: false
      - value: |-
          ```yaml
          route_blog_list:
              url: /blog
              action: App\Controller\BlogController::list
          ```
        correct: false
    help: YAML route definitions use a unique name as the top-level key, followed by
      `path` and `controller`.
      https://symfony.com/doc/current/routing.html#_snippet_2
  - question: "What is the behavior of `trailing_slash_on_root: false` when used
      with a `prefix` on an imported route collection in YAML?"
    answers:
      - value: It ensures that an imported route with an empty URL (e.g., `/`) becomes
          `/prefix` instead of `/prefix/`.
        correct: true
      - value: It removes trailing slashes from all generated URLs for imported routes.
        correct: false
      - value: It forces all imported routes to have a trailing slash.
        correct: false
      - value: It only applies to routes explicitly defined as root routes.
        correct: false
    help: "By default, an empty URL with a prefix becomes `/prefix/`. Setting
      `trailing_slash_on_root: false` makes it `/prefix`.
      https://symfony.com/doc/current/routing.html#_snippet_38"
  - question: Which of the following describes the
      `Symfony\Component\Routing\RouteLoaderInterface`?
    answers:
      - value: An interface for classes that load routes, typically used for
          autoconfiguration.
        correct: true
      - value: An interface for classes that match URLs to routes.
        correct: false
      - value: An interface for classes that generate URLs from routes.
        correct: false
      - value: An interface for classes that compile the routing cache.
        correct: false
    help: This interface is implemented by classes responsible for loading routes,
      often used in conjunction with autoconfiguration.
      https://symfony.com/doc/current/routing/custom_route_loader.html#_snippet_3
  - question: You want to define a route `mobile_homepage` that matches
      `m.example.com` and has a requirement that the `subdomain` parameter must
      be either `m` or `mobile`. Which YAML configuration is correct?
    answers:
      - value: |-
          ```yaml
          mobile_homepage:
              path: /
              host: "{subdomain}.example.com"
              controller: App\Controller\MainController::mobileHomepage
              defaults:
                  subdomain: m
              requirements:
                  subdomain: m|mobile
          ```
        correct: true
      - value: |-
          ```yaml
          mobile_homepage:
              path: /
              host: "{subdomain}.example.com"
              controller: App\Controller\MainController::mobileHomepage
              requirements:
                  subdomain: '(m|mobile)'
          ```
        correct: false
      - value: |-
          ```yaml
          mobile_homepage:
              path: /
              host: "{subdomain}.example.com"
              controller: App\Controller\MainController::mobileHomepage
              validate:
                  subdomain: 'm|mobile'
          ```
        correct: false
    help: Dynamic host parameters are defined in the `host` option, and their
      validation rules are set in the `requirements` section.
      https://symfony.com/doc/current/routing.html#_snippet_47
  - question: What is the purpose of the `_route_params` attribute in the `Request`
      object's attributes?
    answers:
      - value: It contains an associative array of all matched route parameters.
        correct: true
      - value: It lists all optional route parameters.
        correct: false
      - value: It stores the query parameters from the URL.
        correct: false
      - value: It defines the default values for route parameters.
        correct: false
    help: The `_route_params` attribute holds an array of the parameters extracted
      from the matched URL path.
      https://symfony.com/doc/current/routing.html#_snippet_42
  - question: Which of the following is the correct way to define a route
      `blog_list` for the path `/blog` in YAML, mapping to
      `App\Controller\BlogController::list`?
    answers:
      - value: |-
          ```yaml
          blog_list:
              path: /blog
              controller: App\Controller\BlogController::list
          ```
        correct: true
      - value: |-
          ```yaml
          /blog:
              name: blog_list
              controller: App\Controller\BlogController::list
          ```
        correct: false
      - value: |-
          ```yaml
          route_blog_list:
              url: /blog
              action: App\Controller\BlogController::list
          ```
        correct: false
    help: YAML route definitions use a unique name as the top-level key, followed by
      `path` and `controller`.
      https://symfony.com/doc/current/routing.html#_snippet_2
  - question: "What is the behavior of `trailing_slash_on_root: false` when used
      with a `prefix` on an imported route collection in YAML?"
    answers:
      - value: It ensures that an imported route with an empty URL (e.g., `/`) becomes
          `/prefix` instead of `/prefix/`.
        correct: true
      - value: It removes trailing slashes from all generated URLs for imported routes.
        correct: false
      - value: It forces all imported routes to have a trailing slash.
        correct: false
      - value: It only applies to routes explicitly defined as root routes.
        correct: false
    help: "By default, an empty URL with a prefix becomes `/prefix/`. Setting
      `trailing_slash_on_root: false` makes it `/prefix`.
      https://symfony.com/doc/current/routing.html#_snippet_38"
  - question: Which of the following describes the
      `Symfony\Component\Routing\RouteLoaderInterface`?
    answers:
      - value: An interface for classes that load routes, typically used for
          autoconfiguration.
        correct: true
      - value: An interface for classes that match URLs to routes.
        correct: false
      - value: An interface for classes that generate URLs from routes.
        correct: false
      - value: An interface for classes that compile the routing cache.
        correct: false
    help: This interface is implemented by classes responsible for loading routes,
      often used in conjunction with autoconfiguration.
      https://symfony.com/doc/current/routing/custom_route_loader.html#_snippet_3
  - question: You want to define a route `mobile_homepage` that matches
      `m.example.com` and has a requirement that the `subdomain` parameter must
      be either `m` or `mobile`. Which YAML configuration is correct?
    answers:
      - value: |-
          ```yaml
          mobile_homepage:
              path: /
              host: "{subdomain}.example.com"
              controller: App\Controller\MainController::mobileHomepage
              defaults:
                  subdomain: m
              requirements:
                  subdomain: m|mobile
          ```
        correct: true
      - value: |-
          ```yaml
          mobile_homepage:
              path: /
              host: "{subdomain}.example.com"
              controller: App\Controller\MainController::mobileHomepage
              requirements:
                  subdomain: '(m|mobile)'
          ```
        correct: false
      - value: |-
          ```yaml
          mobile_homepage:
              path: /
              host: "{subdomain}.example.com"
              controller: App\Controller\MainController::mobileHomepage
              validate:
                  subdomain: 'm|mobile'
          ```
        correct: false
    help: Dynamic host parameters are defined in the `host` option, and their
      validation rules are set in the `requirements` section.
      https://symfony.com/doc/current/routing.html#_snippet_47
  - question: What is the purpose of the `_route_params` attribute in the `Request`
      object's attributes?
    answers:
      - value: It contains an associative array of all matched route parameters.
        correct: true
      - value: It lists all optional route parameters.
        correct: false
      - value: It stores the query parameters from the URL.
        correct: false
      - value: It defines the default values for route parameters.
        correct: false
    help: The `_route_params` attribute holds an array of the parameters extracted
      from the matched URL path.
      https://symfony.com/doc/current/routing.html#_snippet_42
  - question: Which of the following is the correct way to define a route
      `blog_list` for the path `/blog` in YAML, mapping to
      `App\Controller\BlogController::list`?
    answers:
      - value: |-
          ```yaml
          blog_list:
              path: /blog
              controller: App\Controller\BlogController::list
          ```
        correct: true
      - value: |-
          ```yaml
          /blog:
              name: blog_list
              controller: App\Controller\BlogController::list
          ```
        correct: false
      - value: |-
          ```yaml
          route_blog_list:
              url: /blog
              action: App\Controller\BlogController::list
          ```
        correct: false
    help: YAML route definitions use a unique name as the top-level key, followed by
      `path` and `controller`.
      https://symfony.com/doc/current/routing.html#_snippet_2
  - question: "What is the behavior of `trailing_slash_on_root: false` when used
      with a `prefix` on an imported route collection in YAML?"
    answers:
      - value: It ensures that an imported route with an empty URL (e.g., `/`) becomes
          `/prefix` instead of `/prefix/`.
        correct: true
      - value: It removes trailing slashes from all generated URLs for imported routes.
        correct: false
      - value: It forces all imported routes to have a trailing slash.
        correct: false
      - value: It only applies to routes explicitly defined as root routes.
        correct: false
    help: "By default, an empty URL with a prefix becomes `/prefix/`. Setting
      `trailing_slash_on_root: false` makes it `/prefix`.
      https://symfony.com/doc/current/routing.html#_snippet_38"
  - question: Which of the following describes the
      `Symfony\Component\Routing\RouteLoaderInterface`?
    answers:
      - value: An interface for classes that load routes, typically used for
          autoconfiguration.
        correct: true
      - value: An interface for classes that match URLs to routes.
        correct: false
      - value: An interface for classes that generate URLs from routes.
        correct: false
      - value: An interface for classes that compile the routing cache.
        correct: false
    help: This interface is implemented by classes responsible for loading routes,
      often used in conjunction with autoconfiguration.
      https://symfony.com/doc/current/routing/custom_route_loader.html#_snippet_3
  - question: You want to define a route `mobile_homepage` that matches
      `m.example.com` and has a requirement that the `subdomain` parameter must
      be either `m` or `mobile`. Which YAML configuration is correct?
    answers:
      - value: |-
          ```yaml
          mobile_homepage:
              path: /
              host: "{subdomain}.example.com"
              controller: App\Controller\MainController::mobileHomepage
              defaults:
                  subdomain: m
              requirements:
                  subdomain: m|mobile
          ```
        correct: true
      - value: |-
          ```yaml
          mobile_homepage:
              path: /
              host: "{subdomain}.example.com"
              controller: App\Controller\MainController::mobileHomepage
              requirements:
                  subdomain: '(m|mobile)'
          ```
        correct: false
      - value: |-
          ```yaml
          mobile_homepage:
              path: /
              host: "{subdomain}.example.com"
              controller: App\Controller\MainController::mobileHomepage
              validate:
                  subdomain: 'm|mobile'
          ```
        correct: false
    help: Dynamic host parameters are defined in the `host` option, and their
      validation rules are set in the `requirements` section.
      https://symfony.com/doc/current/routing.html#_snippet_47
  - question: What is the purpose of the `_route_params` attribute in the `Request`
      object's attributes?
    answers:
      - value: It contains an associative array of all matched route parameters.
        correct: true
      - value: It lists all optional route parameters.
        correct: false
      - value: It stores the query parameters from the URL.
        correct: false
      - value: It defines the default values for route parameters.
        correct: false
    help: The `_route_params` attribute holds an array of the parameters extracted
      from the matched URL path.
      https://symfony.com/doc/current/routing.html#_snippet_42
  - question: Which of the following is the correct way to define a route
      `blog_list` for the path `/blog` in YAML, mapping to
      `App\Controller\BlogController::list`?
    answers:
      - value: |-
          ```yaml
          blog_list:
              path: /blog
              controller: App\Controller\BlogController::list
          ```
        correct: true
      - value: |-
          ```yaml
          /blog:
              name: blog_list
              controller: App\Controller\BlogController::list
          ```
        correct: false
      - value: |-
          ```yaml
          route_blog_list:
              url: /blog
              action: App\Controller\BlogController::list
          ```
        correct: false
    help: YAML route definitions use a unique name as the top-level key, followed by
      `path` and `controller`.
      https://symfony.com/doc/current/routing.html#_snippet_2
  - question: "What is the behavior of `trailing_slash_on_root: false` when used
      with a `prefix` on an imported route collection in YAML?"
    answers:
      - value: It ensures that an imported route with an empty URL (e.g., `/`) becomes
          `/prefix` instead of `/prefix/`.
        correct: true
      - value: It removes trailing slashes from all generated URLs for imported routes.
        correct: false
      - value: It forces all imported routes to have a trailing slash.
        correct: false
      - value: It only applies to routes explicitly defined as root routes.
        correct: false
    help: "By default, an empty URL with a prefix becomes `/prefix/`. Setting
      `trailing_slash_on_root: false` makes it `/prefix`.
      https://symfony.com/doc/current/routing.html#_snippet_38"
  - question: Which of the following describes the
      `Symfony\Component\Routing\RouteLoaderInterface`?
    answers:
      - value: An interface for classes that load routes, typically used for
          autoconfiguration.
        correct: true
      - value: An interface for classes that match URLs to routes.
        correct: false
      - value: An interface for classes that generate URLs from routes.
        correct: false
      - value: An interface for classes that compile the routing cache.
        correct: false
    help: This interface is implemented by classes responsible for loading routes,
      often used in conjunction with autoconfiguration.
      https://symfony.com/doc/current/routing/custom_route_loader.html#_snippet_3
  - question: You want to define a route `mobile_homepage` that matches
      `m.example.com` and has a requirement that the `subdomain` parameter must
      be either `m` or `mobile`. Which YAML configuration is correct?
    answers:
      - value: |-
          ```yaml
          mobile_homepage:
              path: /
              host: "{subdomain}.example.com"
              controller: App\Controller\MainController::mobileHomepage
              defaults:
                  subdomain: m
              requirements:
                  subdomain: m|mobile
          ```
        correct: true
      - value: |-
          ```yaml
          mobile_homepage:
              path: /
              host: "{subdomain}.example.com"
              controller: App\Controller\MainController::mobileHomepage
              requirements:
                  subdomain: '(m|mobile)'
          ```
        correct: false
      - value: |-
          ```yaml
          mobile_homepage:
              path: /
              host: "{subdomain}.example.com"
              controller: App\Controller\MainController::mobileHomepage
              validate:
                  subdomain: 'm|mobile'
          ```
        correct: false
    help: Dynamic host parameters are defined in the `host` option, and their
      validation rules are set in the `requirements` section.
      https://symfony.com/doc/current/routing.html#_snippet_47
  - question: What is the purpose of the `_route_params` attribute in the `Request`
      object's attributes?
    answers:
      - value: It contains an associative array of all matched route parameters.
        correct: true
      - value: It lists all optional route parameters.
        correct: false
      - value: It stores the query parameters from the URL.
        correct: false
      - value: It defines the default values for route parameters.
        correct: false
    help: The `_route_params` attribute holds an array of the parameters extracted
      from the matched URL path.
      https://symfony.com/doc/current/routing.html#_snippet_42
  - question: Which of the following is the correct way to define a route
      `blog_list` for the path `/blog` in YAML, mapping to
      `App\Controller\BlogController::list`?
    answers:
      - value: |-
          ```yaml
          blog_list:
              path: /blog
              controller: App\Controller\BlogController::list
          ```
        correct: true
      - value: |-
          ```yaml
          /blog:
              name: blog_list
              controller: App\Controller\BlogController::list
          ```
        correct: false
      - value: |-
          ```yaml
          route_blog_list:
              url: /blog
              action: App\Controller\BlogController::list
          ```
        correct: false
    help: YAML route definitions use a unique name as the top-level key, followed by
      `path` and `controller`.
      https://symfony.com/doc/current/routing.html#_snippet_2
  - question: "What is the behavior of `trailing_slash_on_root: false` when used
      with a `prefix` on an imported route collection in YAML?"
    answers:
      - value: It ensures that an imported route with an empty URL (e.g., `/`) becomes
          `/prefix` instead of `/prefix/`.
        correct: true
      - value: It removes trailing slashes from all generated URLs for imported routes.
        correct: false
      - value: It forces all imported routes to have a trailing slash.
        correct: false
      - value: It only applies to routes explicitly defined as root routes.
        correct: false
    help: "By default, an empty URL with a prefix becomes `/prefix/`. Setting
      `trailing_slash_on_root: false` makes it `/prefix`.
      https://symfony.com/doc/current/routing.html#_snippet_38"
  - question: Which of the following describes the
      `Symfony\Component\Routing\RouteLoaderInterface`?
    answers:
      - value: An interface for classes that load routes, typically used for
          autoconfiguration.
        correct: true
      - value: An interface for classes that match URLs to routes.
        correct: false
      - value: An interface for classes that generate URLs from routes.
        correct: false
      - value: An interface for classes that compile the routing cache.
        correct: false
    help: This interface is implemented by classes responsible for loading routes,
      often used in conjunction with autoconfiguration.
      https://symfony.com/doc/current/routing/custom_route_loader.html#_snippet_3
  - question: You want to define a route `mobile_homepage` that matches
      `m.example.com` and has a requirement that the `subdomain` parameter must
      be either `m` or `mobile`. Which YAML configuration is correct?
    answers:
      - value: |-
          ```yaml
          mobile_homepage:
              path: /
              host: "{subdomain}.example.com"
              controller: App\Controller\MainController::mobileHomepage
              defaults:
                  subdomain: m
              requirements:
                  subdomain: m|mobile
          ```
        correct: true
      - value: |-
          ```yaml
          mobile_homepage:
              path: /
              host: "{subdomain}.example.com"
              controller: App\Controller\MainController::mobileHomepage
              requirements:
                  subdomain: '(m|mobile)'
          ```
        correct: false
      - value: |-
          ```yaml
          mobile_homepage:
              path: /
              host: "{subdomain}.example.com"
              controller: App\Controller\MainController::mobileHomepage
              validate:
                  subdomain: 'm|mobile'
          ```
        correct: false
    help: Dynamic host parameters are defined in the `host` option, and their
      validation rules are set in the `requirements` section.
      https://symfony.com/doc/current/routing.html#_snippet_47
  - question: What is the purpose of the `_route_params` attribute in the `Request`
      object's attributes?
    answers:
      - value: It contains an associative array of all matched route parameters.
        correct: true
      - value: It lists all optional route parameters.
        correct: false
      - value: It stores the query parameters from the URL.
        correct: false
      - value: It defines the default values for route parameters.
        correct: false
    help: The `_route_params` attribute holds an array of the parameters extracted
      from the matched URL path.
      https://symfony.com/doc/current/routing.html#_snippet_42
  - question: Which of the following is the correct way to define a route
      `blog_list` for the path `/blog` in YAML, mapping to
      `App\Controller\BlogController::list`?
    answers:
      - value: |-
          ```yaml
          blog_list:
              path: /blog
              controller: App\Controller\BlogController::list
          ```
        correct: true
      - value: |-
          ```yaml
          /blog:
              name: blog_list
              controller: App\Controller\BlogController::list
          ```
        correct: false
      - value: |-
          ```yaml
          route_blog_list:
              url: /blog
              action: App\Controller\BlogController::list
          ```
        correct: false
    help: YAML route definitions use a unique name as the top-level key, followed by
      `path` and `controller`.
      https://symfony.com/doc/current/routing.html#_snippet_2
  - question: "What is the behavior of `trailing_slash_on_root: false` when used
      with a `prefix` on an imported route collection in YAML?"
    answers:
      - value: It ensures that an imported route with an empty URL (e.g., `/`) becomes
          `/prefix` instead of `/prefix/`.
        correct: true
      - value: It removes trailing slashes from all generated URLs for imported routes.
        correct: false
      - value: It forces all imported routes to have a trailing slash.
        correct: false
      - value: It only applies to routes explicitly defined as root routes.
        correct: false
    help: "By default, an empty URL with a prefix becomes `/prefix/`. Setting
      `trailing_slash_on_root: false` makes it `/prefix`.
      https://symfony.com/doc/current/routing.html#_snippet_38"
  - question: Which of the following describes the
      `Symfony\Component\Routing\RouteLoaderInterface`?
    answers:
      - value: An interface for classes that load routes, typically used for
          autoconfiguration.
        correct: true
      - value: An interface for classes that match URLs to routes.
        correct: false
      - value: An interface for classes that generate URLs from routes.
        correct: false
      - value: An interface for classes that compile the routing cache.
        correct: false
    help: This interface is implemented by classes responsible for loading routes,
      often used in conjunction with autoconfiguration.
      https://symfony.com/doc/current/routing/custom_route_loader.html#_snippet_3
  - question: You want to define a route `mobile_homepage` that matches
      `m.example.com` and has a requirement that the `subdomain` parameter must
      be either `m` or `mobile`. Which YAML configuration is correct?
    answers:
      - value: |-
          ```yaml
          mobile_homepage:
              path: /
              host: "{subdomain}.example.com"
              controller: App\Controller\MainController::mobileHomepage
              defaults:
                  subdomain: m
              requirements:
                  subdomain: m|mobile
          ```
        correct: true
      - value: |-
          ```yaml
          mobile_homepage:
              path: /
              host: "{subdomain}.example.com"
              controller: App\Controller\MainController::mobileHomepage
              requirements:
                  subdomain: '(m|mobile)'
          ```
        correct: false
      - value: |-
          ```yaml
          mobile_homepage:
              path: /
              host: "{subdomain}.example.com"
              controller: App\Controller\MainController::mobileHomepage
              validate:
                  subdomain: 'm|mobile'
          ```
        correct: false
    help: Dynamic host parameters are defined in the `host` option, and their
      validation rules are set in the `requirements` section.
      https://symfony.com/doc/current/routing.html#_snippet_47
  - question: What is the purpose of the `_route_params` attribute in the `Request`
      object's attributes?
    answers:
      - value: It contains an associative array of all matched route parameters.
        correct: true
      - value: It lists all optional route parameters.
        correct: false
      - value: It stores the query parameters from the URL.
        correct: false
      - value: It defines the default values for route parameters.
        correct: false
    help: The `_route_params` attribute holds an array of the parameters extracted
      from the matched URL path.
      https://symfony.com/doc/current/routing.html#_snippet_42
  - question: Which of the following is the correct way to define a route
      `blog_list` for the path `/blog` in YAML, mapping to
      `App\Controller\BlogController::list`?
    answers:
      - value: |-
          ```yaml
          blog_list:
              path: /blog
              controller: App\Controller\BlogController::list
          ```
        correct: true
      - value: |-
          ```yaml
          /blog:
              name: blog_list
              controller: App\Controller\BlogController::list
          ```
        correct: false
      - value: |-
          ```yaml
          route_blog_list:
              url: /blog
              action: App\Controller\BlogController::list
          ```
        correct: false
    help: YAML route definitions use a unique name as the top-level key, followed by
      `path` and `controller`.
      https://symfony.com/doc/current/routing.html#_snippet_2
  - question: "What is the behavior of `trailing_slash_on_root: false` when used
      with a `prefix` on an imported route collection in YAML?"
    answers:
      - value: It ensures that an imported route with an empty URL (e.g., `/`) becomes
          `/prefix` instead of `/prefix/`.
        correct: true
      - value: It removes trailing slashes from all generated URLs for imported routes.
        correct: false
      - value: It forces all imported routes to have a trailing slash.
        correct: false
      - value: It only applies to routes explicitly defined as root routes.
        correct: false
    help: "By default, an empty URL with a prefix becomes `/prefix/`. Setting
      `trailing_slash_on_root: false` makes it `/prefix`.
      https://symfony.com/doc/current/routing.html#_snippet_38"
  - question: Which of the following describes the
      `Symfony\Component\Routing\RouteLoaderInterface`?
    answers:
      - value: An interface for classes that load routes, typically used for
          autoconfiguration.
        correct: true
      - value: An interface for classes that match URLs to routes.
        correct: false
      - value: An interface for classes that generate URLs from routes.
        correct: false
      - value: An interface for classes that compile the routing cache.
        correct: false
    help: This interface is implemented by classes responsible for loading routes,
      often used in conjunction with autoconfiguration.
      https://symfony.com/doc/current/routing/custom_route_loader.html#_snippet_3
  - question: You want to define a route `mobile_homepage` that matches
      `m.example.com` and has a requirement that the `subdomain` parameter must
      be either `m` or `mobile`. Which YAML configuration is correct?
    answers:
      - value: |-
          ```yaml
          mobile_homepage:
              path: /
              host: "{subdomain}.example.com"
              controller: App\Controller\MainController::mobileHomepage
              defaults:
                  subdomain: m
              requirements:
                  subdomain: m|mobile
          ```
        correct: true
      - value: |-
          ```yaml
          mobile_homepage:
              path: /
              host: "{subdomain}.example.com"
              controller: App\Controller\MainController::mobileHomepage
              requirements:
                  subdomain: '(m|mobile)'
          ```
        correct: false
      - value: |-
          ```yaml
          mobile_homepage:
              path: /
              host: "{subdomain}.example.com"
              controller: App\Controller\MainController::mobileHomepage
              validate:
                  subdomain: 'm|mobile'
          ```
        correct: false
    help: Dynamic host parameters are defined in the `host` option, and their
      validation rules are set in the `requirements` section.
      https://symfony.com/doc/current/routing.html#_snippet_47
  - question: What is the purpose of the `_route_params` attribute in the `Request`
      object's attributes?
    answers:
      - value: It contains an associative array of all matched route parameters.
        correct: true
      - value: It lists all optional route parameters.
        correct: false
      - value: It stores the query parameters from the URL.
        correct: false
      - value: It defines the default values for route parameters.
        correct: false
    help: The `_route_params` attribute holds an array of the parameters extracted
      from the matched URL path.
      https://symfony.com/doc/current/routing.html#_snippet_42
  - question: Which of the following is the correct way to define a route
      `blog_list` for the path `/blog` in YAML, mapping to
      `App\Controller\BlogController::list`?
    answers:
      - value: |-
          ```yaml
          blog_list:
              path: /blog
              controller: App\Controller\BlogController::list
          ```
        correct: true
      - value: |-
          ```yaml
          /blog:
              name: blog_list
              controller: App\Controller\BlogController::list
          ```
        correct: false
      - value: |-
          ```yaml
          route_blog_list:
              url: /blog
              action: App\Controller\BlogController::list
          ```
        correct: false
    help: YAML route definitions use a unique name as the top-level key, followed by
      `path` and `controller`.
      https://symfony.com/doc/current/routing.html#_snippet_2
  - question: "What is the behavior of `trailing_slash_on_root: false` when used
      with a `prefix` on an imported route collection in YAML?"
    answers:
      - value: It ensures that an imported route with an empty URL (e.g., `/`) becomes
          `/prefix` instead of `/prefix/`.
        correct: true
      - value: It removes trailing slashes from all generated URLs for imported routes.
        correct: false
      - value: It forces all imported routes to have a trailing slash.
        correct: false
      - value: It only applies to routes explicitly defined as root routes.
        correct: false
    help: "By default, an empty URL with a prefix becomes `/prefix/`. Setting
      `trailing_slash_on_root: false` makes it `/prefix`.
      https://symfony.com/doc/current/routing.html#_snippet_38"
  - question: Which of the following describes the
      `Symfony\Component\Routing\RouteLoaderInterface`?
    answers:
      - value: An interface for classes that load routes, typically used for
          autoconfiguration.
        correct: true
      - value: An interface for classes that match URLs to routes.
        correct: false
      - value: An interface for classes that generate URLs from routes.
        correct: false
      - value: An interface for classes that compile the routing cache.
        correct: false
    help: This interface is implemented by classes responsible for loading routes,
      often used in conjunction with autoconfiguration.
      https://symfony.com/doc/current/routing/custom_route_loader.html#_snippet_3
  - question: You want to define a route `mobile_homepage` that matches
      `m.example.com` and has a requirement that the `subdomain` parameter must
      be either `m` or `mobile`. Which YAML configuration is correct?
    answers:
      - value: |-
          ```yaml
          mobile_homepage:
              path: /
              host: "{subdomain}.example.com"
              controller: App\Controller\MainController::mobileHomepage
              defaults:
                  subdomain: m
              requirements:
                  subdomain: m|mobile
          ```
        correct: true
      - value: |-
          ```yaml
          mobile_homepage:
              path: /
              host: "{subdomain}.example.com"
              controller: App\Controller\MainController::mobileHomepage
              requirements:
                  subdomain: '(m|mobile)'
          ```
        correct: false
      - value: |-
          ```yaml
          mobile_homepage:
              path: /
              host: "{subdomain}.example.com"
              controller: App\Controller\MainController::mobileHomepage
              validate:
                  subdomain: 'm|mobile'
          ```
        correct: false
    help: Dynamic host parameters are defined in the `host` option, and their
      validation rules are set in the `requirements` section.
      https://symfony.com/doc/current/routing.html#_snippet_47
