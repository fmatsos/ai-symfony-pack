category: Routing
questions:
  - question: Which of the following PHP attributes is used to define a route
      directly on a controller method in Symfony 7?
    answers:
      - value: "`#[Route]`"
        correct: true
      - value: "`#[Path]`"
        correct: false
      - value: "`#[Url]`"
        correct: false
      - value: "`#[Map]`"
        correct: false
    help: The `#[Route]` attribute is the standard way to define routes in Symfony 7
      controllers using PHP attributes.
      https://symfony.com/doc/current/routing.html#_snippet_1
  - question: In Symfony 7, how would you configure your `config/routes.yaml` file
      to load routes defined via PHP attributes from the `App\Controller`
      namespace?
    answers:
      - value: |-
          ```yaml
          controllers:
              resource: ../src/Controller/
              type: attribute
          ```
        correct: true
      - value: |-
          ```yaml
          routes:
              path: ../src/Controller/
              format: annotations
          ```
        correct: false
      - value: |-
          ```yaml
          app_routes:
              import: App\\Controller
              loader: attributes
          ```
        correct: false
      - value: |-
          ```yaml
          attributes:
              dir: ../src/Controller/
              namespace: App\\Controller
          ```
        correct: false
    help: To enable attribute routing, you specify the resource path and set the
      `type` to `attribute` in your routing configuration.
      https://github.com/fmatsos/symfony-docs/blob/v7.0/routing/custom_route_loader.rst#_snippet_1
  - question: |-
      Given the following Symfony 7 route definition in YAML:

      ```yaml
      blog_list:
          path:       /blog/{page}
          controller: App\\Controller\\BlogController::list
          defaults:
              page: 1
          requirements:
              page: '\d+'
      ```

      Which of the following URLs will successfully match this route?
    answers:
      - value: "`/blog`"
        correct: true
      - value: "`/blog/2`"
        correct: true
      - value: "`/blog/hello`"
        correct: false
      - value: "`/blog/`"
        correct: true
    help: The `page` parameter is optional due to the default value. The requirement
      `\d+` ensures it matches only digits if provided.
      https://symfony.com/doc/current/routing.html#_snippet_19
  - question: You need to generate an absolute URL (e.g.,
      `https://example.com/login`) for the route `login` within a Symfony 7
      controller. Which `UrlGeneratorInterface` constant should you use with
      `generateUrl()`?
    answers:
      - value: "`UrlGeneratorInterface::ABSOLUTE_URL`"
        correct: true
      - value: "`UrlGeneratorInterface::ABSOLUTE_PATH`"
        correct: false
      - value: "`UrlGeneratorInterface::NETWORK_PATH`"
        correct: false
      - value: "`UrlGeneratorInterface::RELATIVE_PATH`"
        correct: false
    help: The `ABSOLUTE_URL` constant ensures the generated URL includes the scheme,
      host, and path. https://symfony.com/doc/current/routing.html#_snippet_55
  - question: To redirect permanently from `/old-page` to `/new-page` using
      Symfony's `RedirectController` in a PHP routing configurator, which
      `defaults` key should be set to `true`?
    answers:
      - value: "`permanent`"
        correct: true
      - value: "`status_code`"
        correct: false
      - value: "`keep_method`"
        correct: false
      - value: "`redirect_type`"
        correct: false
    help: Setting the `permanent` default to `true` with `RedirectController`
      results in a 301 (Moved Permanently) or 308 (Permanent Redirect) HTTP
      status code. https://symfony.com/doc/current/routing.html#_snippet_38
  - question: Which special internal routing attribute in Symfony 7 is used to set
      the `_format` of the `Request` object, influencing the `Content-Type` of
      the response?
    answers:
      - value: "`_format`"
        correct: true
      - value: "`_type`"
        correct: false
      - value: "`_content_type`"
        correct: false
      - value: "`_response_format`"
        correct: false
    help: The `_format` attribute is specifically designed to set the request
      format, which then dictates the response's Content-Type.
      https://symfony.com/doc/current/routing.html#_snippet_25
  - question: You want a specific route to only match requests coming from
      `api.example.com`. How can you achieve this using PHP attributes in
      Symfony 7?
    answers:
      - value: |-
          ```php
          #[Route('/data', name: 'api_data', host: 'api.example.com')]
          ```
        correct: true
      - value: |-
          ```php
          #[Route('/data', name: 'api_data', domain: 'api.example.com')]
          ```
        correct: false
      - value: >-
          ```php

          #[Route('/data', name: 'api_data', requirements: ['_host' =>
          'api.example.com'])]

          ```
        correct: false
      - value: >-
          ```php

          #[Route('/data', name: 'api_data', condition: 'request.getHost() ==
          "api.example.com"')]

          ```
        correct: false
    help: The `host` option in the `#[Route]` attribute allows you to specify a
      required hostname for a route.
      https://symfony.com/doc/current/routing.html#_snippet_40
  - question: In a Symfony 7 route `condition` expression, which variable provides
      access to the current `Request` object?
    answers:
      - value: "`request`"
        correct: true
      - value: "`context`"
        correct: false
      - value: "`params`"
        correct: false
      - value: "`http_request`"
        correct: false
    help: The `request` variable in route conditions is an instance of
      `Symfony\Component\HttpFoundation\Request`.
      https://symfony.com/doc/current/routing.html#_snippet_11
  - question: Which of the following Symfony 7 console commands can be used to
      inspect the details of a specific route, including its path, requirements,
      and defaults?
    answers:
      - value: "`php bin/console debug:router <route_name>`"
        correct: true
      - value: "`php bin/console router:show <route_name>`"
        correct: false
      - value: "`php bin/console route:info <route_name>`"
        correct: false
      - value: "`php bin/console router:inspect <route_name>`"
        correct: false
    help: The `debug:router` command, when provided with a route name, displays
      comprehensive information about that specific route.
      https://symfony.com/doc/current/routing.html#_snippet_14
  - question: To restrict a Symfony 7 route `/api/users` to only accept `GET` and
      `HEAD` HTTP methods using PHP attributes, which is the correct syntax?
    answers:
      - value: >-
          ```php

          #[Route('/api/users', name: 'api_users_list', methods: ['GET',
          'HEAD'])]

          ```
        correct: true
      - value: >-
          ```php

          #[Route('/api/users', name: 'api_users_list', http_methods: ['GET',
          'HEAD'])]

          ```
        correct: false
      - value: >-
          ```php

          #[Route('/api/users', name: 'api_users_list', allow_methods: ['GET',
          'HEAD'])]

          ```
        correct: false
      - value: >-
          ```php

          #[Route('/api/users', name: 'api_users_list', condition:
          'context.getMethod() in ["GET", "HEAD"]')]

          ```
        correct: false
    help: The `methods` option in the `#[Route]` attribute allows you to specify the
      allowed HTTP methods for a route.
      https://symfony.com/doc/current/routing.html#_snippet_6
  - question: Which of the following is a valid way to define a route with an
      optional parameter `slug` that defaults to `homepage` in Symfony 7 using
      PHP attributes?
    answers:
      - value: >-
          ```php

          #[Route('/{slug}', name: 'page_show', defaults: ['slug' =>
          'homepage'])]

          public function show(string $slug): Response

          { /* ... */ }

          ```
        correct: true
      - value: >-
          ```php

          #[Route('/{slug?}', name: 'page_show', defaults: ['slug' =>
          'homepage'])]

          public function show(string $slug): Response

          { /* ... */ }

          ```
        correct: false
      - value: |-
          ```php
          #[Route('/{slug}', name: 'page_show')]
          public function show(string $slug = 'homepage'): Response
          { /* ... */ }
          ```
        correct: true
      - value: >-
          ```php

          #[Route('/{slug}', name: 'page_show', optional: ['slug' =>
          'homepage'])]

          public function show(string $slug): Response

          { /* ... */ }

          ```
        correct: false
    help: Optional parameters can be defined by providing a default value in the
      `defaults` option of the route or by setting a default value for the
      corresponding controller argument.
      https://symfony.com/doc/current/routing.html#_snippet_19
  - question: When generating a URL in Twig for a Symfony 7 route named
      `product_detail` that requires an `id` parameter, which syntax is correct?
    answers:
      - value: "`{{ path('product_detail', {id: product.id}) }}`"
        correct: true
      - value: "`{{ url('product_detail', id: product.id) }}`"
        correct: false
      - value: "`{{ route('product_detail', {id: product.id}) }}`"
        correct: false
      - value: "`{{ generate_url('product_detail', {id: product.id}) }}`"
        correct: false
    help: The `path()` Twig function is used to generate URLs for named routes,
      passing parameters as an associative array.
      https://symfony.com/doc/current/routing.html#_snippet_68
  - question: Which of the following special internal routing attributes in Symfony
      7 is used to set the locale on the request, influencing translation and
      localization?
    answers:
      - value: "`_locale`"
        correct: true
      - value: "`_lang`"
        correct: false
      - value: "`_language`"
        correct: false
      - value: "`_i18n`"
        correct: false
    help: The `_locale` attribute is specifically designed for internationalization
      purposes within Symfony routing.
      https://symfony.com/doc/current/routing.html#_snippet_25
  - question: You want to define a route that matches `/documents/{path}` where
      `path` can contain forward slashes (e.g.,
      `/documents/folder/subfolder/file.pdf`). How would you configure the
      requirement for the `path` parameter using PHP attributes in Symfony 7?
    answers:
      - value: >-
          ```php

          #[Route('/documents/{path}', name: 'document_view', requirements:
          ['path' => '.+'])]

          ```
        correct: true
      - value: >-
          ```php

          #[Route('/documents/{path}', name: 'document_view', requirements:
          ['path' => '.*'])]

          ```
        correct: false
      - value: >-
          ```php

          #[Route('/documents/{path}', name: 'document_view', allow_slashes:
          true)]

          ```
        correct: false
      - value: |-
          ```php
          #[Route('/documents/{path<.+>}', name: 'document_view')]
          ```
        correct: true
    help: To allow slashes in a route parameter, you must use a regular expression
      like `.+` (one or more characters) or `.*` (zero or more characters) as
      its requirement. Both separate and inline syntaxes are valid.
      https://symfony.com/doc/current/routing.html#_snippet_29
  - question: Which Symfony 7 console command helps you determine which route
      matches a given URL path?
    answers:
      - value: "`php bin/console router:match /your/url/path`"
        correct: true
      - value: "`php bin/console debug:url /your/url/path`"
        correct: false
      - value: "`php bin/console route:find /your/url/path`"
        correct: false
      - value: "`php bin/console router:test /your/url/path`"
        correct: false
    help: The `router:match` command is specifically designed to test a URL against
      your defined routes and show which one matches.
      https://symfony.com/doc/current/routing.html#_snippet_14
  - question: To apply a prefix of `/admin` and a name prefix of `admin_` to all
      routes imported from a controller directory using YAML configuration in
      Symfony 7, which is the correct approach?
    answers:
      - value: |-
          ```yaml
          admin_controllers:
              resource: '../../src/Controller/Admin/'
              type: attribute
              prefix: '/admin'
              name_prefix: 'admin_'
          ```
        correct: true
      - value: |-
          ```yaml
          admin_routes:
              path: '../../src/Controller/Admin/'
              annotations: true
              url_prefix: '/admin'
              route_prefix: 'admin_'
          ```
        correct: false
      - value: >-
          ```yaml

          imports:
              - { resource: '../../src/Controller/Admin/', prefix: '/admin', name_prefix: 'admin_' }
          ```
        correct: false
      - value: |-
          ```yaml
          _defaults:
              prefix: '/admin'
              name_prefix: 'admin_'
          admin_controllers:
              resource: '../../src/Controller/Admin/'
              type: attribute
          ```
        correct: false
    help: The `prefix` and `name_prefix` options can be applied directly to an
      imported resource in YAML to group and prefix routes.
      https://symfony.com/doc/current/routing.html#_snippet_33
  - question: Which of the following options can be used in a Symfony 7 route
      definition to prevent session usage for that specific request, helping to
      avoid `UnexpectedSessionUsageException`?
    answers:
      - value: "`stateless: true`"
        correct: true
      - value: "`session_disabled: true`"
        correct: false
      - value: "`no_session: true`"
        correct: false
      - value: "`session_management: false`"
        correct: false
    help: The `stateless` option, when set to `true`, marks a route as stateless,
      preventing Symfony from starting or using a session for requests matching
      that route. https://symfony.com/doc/current/routing.html#_snippet_47
  - question: You have a `BlogPost` entity and a route `/blog/{slug}`. How can
      Symfony 7 automatically fetch the `BlogPost` object based on the `slug`
      and inject it directly into your controller method?
    answers:
      - value: By type-hinting the `BlogPost` entity in the controller method signature.
        correct: true
      - value: "By adding a `#[ParamConverter('slug', class: BlogPost::class)]`
          attribute."
        correct: false
      - value: By configuring a custom service in `services.yaml` to handle the
          conversion.
        correct: false
      - value: By explicitly calling `find()` on the entity manager inside the
          controller.
        correct: false
    help: Symfony's ParamConverter component automatically converts route parameters
      to objects when type-hinted in controller arguments, typically fetching
      entities from the database.
      https://symfony.com/doc/current/routing.html#_snippet_23
  - question: Which special internal routing attribute in Symfony 7 is used to
      define the fragment identifier (the part of a URL starting with `#`)?
    answers:
      - value: "`_fragment`"
        correct: true
      - value: "`_anchor`"
        correct: false
      - value: "`_hash`"
        correct: false
      - value: "`_section`"
        correct: false
    help: The `_fragment` attribute is used to explicitly set the URL fragment.
      https://symfony.com/doc/current/routing.html#_snippet_25
  - question: When defining a route in Symfony 7 using PHP attributes, how can you
      set a specific priority for a route to ensure it's matched before other,
      more general routes?
    answers:
      - value: "Using the `priority` option, e.g., `#[Route('/blog/list', name:
          'blog_list', priority: 2)]`"
        correct: true
      - value: "Using the `order` option, e.g., `#[Route('/blog/list', name:
          'blog_list', order: 2)]`"
        correct: false
      - value: By placing the more specific route definition earlier in the file (if
          using YAML/XML).
        correct: false
      - value: "Using the `weight` option, e.g., `#[Route('/blog/list', name:
          'blog_list', weight: 2)]`"
        correct: false
    help: The `priority` option in the `#[Route]` attribute allows you to explicitly
      control the order in which routes are evaluated by the router. Higher
      values mean higher priority.
      https://symfony.com/doc/current/routing.html#_snippet_22
  - question: You want to define a route `/products/{id}` where `id` must be an
      integer. How can you define this requirement using PHP attributes in
      Symfony 7, without using a separate `requirements` array?
    answers:
      - value: |-
          ```php
          #[Route('/products/{id<\d+>}', name: 'product_show')]
          ```
        correct: true
      - value: |-
          ```php
          #[Route('/products/{id:int}', name: 'product_show')]
          ```
        correct: false
      - value: |-
          ```php
          #[Route('/products/{id}', name: 'product_show', type: 'int')]
          ```
        correct: false
      - value: |-
          ```php
          #[Route('/products/{id}', name: 'product_show', regex: '\d+')]
          ```
        correct: false
    help: Symfony 7 allows inline regular expression requirements for route
      parameters using the `<regex>` syntax.
      https://symfony.com/doc/current/routing.html#_snippet_18
  - question: Which of the following is a valid way to define a route in
      `config/routes.php` using the `RoutingConfigurator` in Symfony 7?
    answers:
      - value: |-
          ```php
          use App\\Controller\\BlogController;
          use Symfony\\Component\\Routing\\Loader\\Configurator\\RoutingConfigurator;

          return function (RoutingConfigurator $routes): void {
              $routes->add('blog_list', '/blog')
                  ->controller([BlogController::class, 'list'])
              ;
          };
          ```
        correct: true
      - value: |-
          ```php
          use App\\Controller\\BlogController;
          use Symfony\\Component\\Routing\\Loader\\Configurator\\RoutingConfigurator;

          return function (RoutingConfigurator $routes) {
              $routes->route('blog_list', '/blog', 'App\\Controller\\BlogController::list');
          };
          ```
        correct: false
      - value: |-
          ```php
          use App\\Controller\\BlogController;
          use Symfony\\Component\\Routing\\Loader\\Configurator\\RoutingConfigurator;

          return static function ($routes) {
              $routes->define('blog_list', '/blog', BlogController::class . '::list');
          };
          ```
        correct: false
    help: The `add()` method of `RoutingConfigurator` is used to define a new route,
      followed by `controller()` to specify the action.
      https://symfony.com/doc/current/routing.html#_snippet_4
  - question: When defining a route with a `condition` in Symfony 7, which
      expression language function allows you to retrieve a routing condition
      service?
    answers:
      - value: "`service(string $alias)`"
        correct: true
      - value: "`get_service(string $alias)`"
        correct: false
      - value: "`call_service(string $alias)`"
        correct: false
      - value: "`container.get(string $alias)`"
        correct: false
    help: The `service()` function can be used within a route condition expression
      to call a method on a registered service.
      https://symfony.com/doc/current/routing.html#_snippet_11
  - question: To register a custom routing loader service in Symfony 7, which tag
      must be applied to the service definition?
    answers:
      - value: "`routing.loader`"
        correct: true
      - value: "`kernel.event_subscriber`"
        correct: false
      - value: "`controller.service_arguments`"
        correct: false
      - value: "`console.command`"
        correct: false
    help: Services tagged with `routing.loader` are automatically discovered by
      Symfony's routing component and can be used to load routes from custom
      sources.
      https://symfony.com/doc/current/reference/dic_tags.html#_snippet_20
  - question: You have a route `/products/{id}` and you want to pass an additional
      default parameter `source` with the value `web` to the controller, even
      though it's not part of the URL path. How would you achieve this using PHP
      attributes in Symfony 7?
    answers:
      - value: >-
          ```php

          #[Route('/products/{id}', name: 'product_detail', defaults: ['source'
          => 'web'])]

          ```
        correct: true
      - value: >-
          ```php

          #[Route('/products/{id}', name: 'product_detail', extra_params:
          ['source' => 'web'])]

          ```
        correct: false
      - value: |-
          ```php
          #[Route('/products/{id}', name: 'product_detail')]
          public function detail(int $id, string $source = 'web'): Response
          { /* ... */ }
          ```
        correct: false
      - value: >-
          ```php

          #[Route('/products/{id}', name: 'product_detail', context: ['source'
          => 'web'])]

          ```
        correct: false
    help: The `defaults` option can be used to provide default values for route
      parameters, including those not present in the URL path, which are then
      passed to the controller.
      https://symfony.com/doc/current/routing.html#_snippet_28
  - question: Which of the following is NOT a valid way to define a route in Symfony 7?
    answers:
      - value: Using XML configuration files.
        correct: false
      - value: Using PHP attributes directly in controller classes.
        correct: false
      - value: Using JSON configuration files.
        correct: true
      - value: Using YAML configuration files.
        correct: false
      - value: Using PHP configurator files.
        correct: false
    help: Symfony primarily supports YAML, XML, PHP (configurator), and PHP
      attributes for defining routes. JSON is not a standard routing
      configuration format. https://symfony.com/doc/current/routing.html
  - question: You need to enforce HTTPS for a specific route `/secure-area` in
      Symfony 7 using PHP attributes. How would you do this?
    answers:
      - value: |-
          ```php
          #[Route('/secure-area', name: 'secure_area', schemes: ['https'])]
          ```
        correct: true
      - value: |-
          ```php
          #[Route('/secure-area', name: 'secure_area', secure: true)]
          ```
        correct: false
      - value: |-
          ```php
          #[Route('/secure-area', name: 'secure_area', protocol: 'https')]
          ```
        correct: false
      - value: >-
          ```php

          #[Route('/secure-area', name: 'secure_area', condition:
          'context.getScheme() == "https"')]

          ```
        correct: false
    help: The `schemes` option in the `#[Route]` attribute allows you to specify the
      required URL schemes (e.g., `https`).
      https://symfony.com/doc/current/routing.html#_snippet_58
  - question: When defining a route with a `condition` in Symfony 7, which
      expression language variable provides access to an array of matched route
      parameters for the current route?
    answers:
      - value: "`params`"
        correct: true
      - value: "`route_params`"
        correct: false
      - value: "`parameters`"
        correct: false
      - value: "`args`"
        correct: false
    help: The `params` variable allows you to access route parameter values within a
      condition expression.
      https://symfony.com/doc/current/routing.html#_snippet_11
  - question: Which of the following is the correct way to define a localized route
      in Symfony 7 using YAML, where the `about_us` route has paths `/about-us`
      for English and `/over-ons` for Dutch?
    answers:
      - value: |-
          ```yaml
          about_us:
              path:
                  en: /about-us
                  nl: /over-ons
              controller: App\\Controller\\CompanyController::about
          ```
        correct: true
      - value: |-
          ```yaml
          about_us_en:
              path: /about-us
              controller: App\\Controller\\CompanyController::about
          about_us_nl:
              path: /over-ons
              controller: App\\Controller\\CompanyController::about
          ```
        correct: false
      - value: |-
          ```yaml
          about_us:
              path: { en: /about-us, nl: /over-ons }
              controller: App\\Controller\\CompanyController::about
          ```
        correct: false
    help: Localized routes can be defined by providing a map of locale-specific
      paths under the `path` key.
      https://symfony.com/doc/current/routing.html#_snippet_43
  - question: To generate a URL for a route named `user_profile` with a `username`
      parameter from a Symfony 7 console command, which object should be
      injected and what method should be called?
    answers:
      - value: "`UrlGeneratorInterface` and `generate()`"
        correct: true
      - value: "`RouterInterface` and `generateUrl()`"
        correct: false
      - value: "`UrlGenerator` and `generate()`"
        correct: false
      - value: "`Router` and `url()`"
        correct: false
    help: The `UrlGeneratorInterface` is the service responsible for generating URLs
      from route names and parameters, and its primary method is `generate()`.
      https://symfony.com/doc/current/routing.html#_snippet_55
  - question: What is the purpose of the `#[AsRoutingConditionService]` attribute in
      Symfony 7?
    answers:
      - value: To register a service that can be used in route `condition` expressions.
        correct: true
      - value: To define a service as a custom route loader.
        correct: false
      - value: To mark a service as a controller for a specific route.
        correct: false
      - value: To automatically inject route parameters into a service.
        correct: false
    help: The `#[AsRoutingConditionService]` attribute allows you to make a service
      available for use within Symfony's expression language in route
      conditions. https://symfony.com/doc/current/routing.html#_snippet_12
  - question: When using `RedirectController` in Symfony 7, which `defaults` option
      should be set to `true` to preserve the original query string parameters
      during a redirect?
    answers:
      - value: "`keepQueryParams`"
        correct: true
      - value: "`preserveQueryParams`"
        correct: false
      - value: "`passQueryParams`"
        correct: false
      - value: "`retainQueryParams`"
        correct: false
    help: The `keepQueryParams` option ensures that any query parameters from the
      original request are appended to the redirected URL.
      https://symfony.com/doc/current/routing.html#_snippet_38
  - question: Which special internal routing attribute in Symfony 7 is used to
      determine which controller and action is executed when the route is
      matched?
    answers:
      - value: "`_controller`"
        correct: true
      - value: "`_action`"
        correct: false
      - value: "`_target`"
        correct: false
      - value: "`_handler`"
        correct: false
    help: The `_controller` attribute explicitly defines the callable responsible
      for handling the request for a given route.
      https://symfony.com/doc/current/routing.html#_snippet_25
  - question: You want to import routes from `src/Controller/` and apply a global
      requirement that the `_locale` parameter must be either `en`, `es`, or
      `fr`. How would you configure this using PHP attributes on the controller
      class in Symfony 7?
    answers:
      - value: >-
          ```php

          #[Route('/blog', requirements: ['_locale' => 'en|es|fr'], name:
          'blog_')]

          class BlogController extends AbstractController

          { /* ... */ }

          ```
        correct: true
      - value: |-
          ```php
          #[Route('/blog', defaults: ['_locale' => 'en|es|fr'], name: 'blog_')]
          class BlogController extends AbstractController
          { /* ... */ }
          ```
        correct: false
      - value: |-
          ```php
          #[Route('/blog', locale_regex: 'en|es|fr', name: 'blog_')]
          class BlogController extends AbstractController
          { /* ... */ }
          ```
        correct: false
    help: Requirements can be applied at the class level using the `#[Route]`
      attribute, which then applies to all routes defined within that
      controller. https://symfony.com/doc/current/routing.html#_snippet_33
  - question: When defining a route in Symfony 7 using YAML, what is the correct
      format for specifying the controller?
    answers:
      - value: "`App\\Controller\\BlogController::list`"
        correct: true
      - value: "`App:Blog:list`"
        correct: false
      - value: "`@App/Controller/BlogController::list`"
        correct: false
      - value: "`BlogController::listAction`"
        correct: false
    help: The standard format for specifying a controller in YAML is
      `Fully\Qualified\ClassName::methodName`.
      https://symfony.com/doc/current/routing.html#_snippet_2
  - question: Which of the following is a valid way to define a route with a dynamic
      subdomain in Symfony 7 using PHP attributes, where the subdomain can be
      `m` or `mobile`?
    answers:
      - value: >-
          ```php

          #[Route('/', name: 'mobile_homepage', host: '{subdomain}.example.com',
          requirements: ['subdomain' => 'm|mobile'], defaults: ['subdomain' =>
          'm'])]

          ```
        correct: true
      - value: >-
          ```php

          #[Route('/', name: 'mobile_homepage', host: 'example.com', subdomain:
          '{subdomain}', requirements: ['subdomain' => 'm|mobile'])]

          ```
        correct: false
      - value: >-
          ```php

          #[Route('/', name: 'mobile_homepage', host:
          'm.example.com|mobile.example.com')]

          ```
        correct: false
    help: Dynamic host requirements are defined using curly braces for the variable
      part and `requirements` for the regex, along with `defaults` for a default
      value. https://symfony.com/doc/current/routing.html#_snippet_42
  - question: To check if a route exists before generating a URL in Symfony 7, what
      is the recommended approach to handle cases where the route might not be
      defined?
    answers:
      - value: Wrap the `generate()` call in a `try-catch` block for
          `RouteNotFoundException`.
        correct: true
      - value: Use `RouterInterface::hasRoute($routeName)` before generating the URL.
        correct: false
      - value: Check `RouterInterface::getRouteCollection()->get($routeName)` for
          `null`.
        correct: false
      - value: Call `RouterInterface::routeExists($routeName)`.
        correct: false
    help: The recommended way to check for a route's existence is to catch the
      `RouteNotFoundException` that `generate()` throws.
      https://symfony.com/doc/current/routing.html#_snippet_56
  - question: Which of the following is a valid way to define a route with a
      condition that checks if the HTTP method is `GET` or `HEAD` using PHP
      attributes in Symfony 7?
    answers:
      - value: >-
          ```php

          #[Route('/contact', name: 'contact', condition: 'context.getMethod()
          in ["GET", "HEAD"]')]

          ```
        correct: true
      - value: |-
          ```php
          #[Route('/contact', name: 'contact', methods: ['GET', 'HEAD'])]
          ```
        correct: false
      - value: >-
          ```php

          #[Route('/contact', name: 'contact', if: 'request.isMethod("GET") or
          request.isMethod("HEAD")')]

          ```
        correct: false
      - value: >-
          ```php

          #[Route('/contact', name: 'contact', check: 'context.getMethod() in
          ["GET", "HEAD"]')]

          ```
        correct: false
    help: The `condition` option accepts an expression language string.
      `context.getMethod()` provides the HTTP method.
      https://symfony.com/doc/current/routing.html#_snippet_7
  - question: When redirecting using `RedirectController` in Symfony 7, which
      `defaults` option should be set to `true` to ensure the HTTP method (e.g.,
      POST) is preserved during the redirect, resulting in a 307 or 308 status
      code?
    answers:
      - value: "`keepRequestMethod`"
        correct: true
      - value: "`preserveMethod`"
        correct: false
      - value: "`forwardMethod`"
        correct: false
      - value: "`httpMethodPreserve`"
        correct: false
    help: The `keepRequestMethod` option ensures that the original HTTP method is
      used for the redirected request, which changes the redirect status code to
      307 (temporary) or 308 (permanent).
      https://symfony.com/doc/current/routing.html#_snippet_38
  - question: What is the primary benefit of using PHP attributes for routing
      configuration in Symfony 7?
    answers:
      - value: It keeps route definitions co-located with the controller logic.
        correct: true
      - value: It improves routing performance significantly compared to YAML or XML.
        correct: false
      - value: It allows for more complex conditional routing logic than other formats.
        correct: false
      - value: It eliminates the need for `composer require symfony/routing`.
        correct: false
    help: PHP attributes provide a convenient way to define routes directly within
      the controller class, making the code more readable and maintainable by
      keeping related logic together.
      https://symfony.com/doc/current/routing.html#_snippet_1
  - question: You are debugging a routing issue in Symfony 7. You suspect a route
      parameter is not matching correctly. Which section of the `php bin/console
      debug:router <route_name>` output would be most helpful?
    answers:
      - value: "`Requirements`"
        correct: true
      - value: "`Defaults`"
        correct: false
      - value: "`Options`"
        correct: false
      - value: "`Method`"
        correct: false
    help: The `Requirements` section of the `debug:router` output shows the regular
      expressions or other constraints applied to each route parameter, which is
      crucial for debugging matching issues.
      https://symfony.com/doc/current/routing.html#_snippet_14
  - question: "Which of the following describes the behavior of
      `trailing_slash_on_root: false` when importing routes in Symfony 7 YAML
      configuration?"
    answers:
      - value: It removes the trailing slash from an imported route with an empty URL
          (e.g., `/blog/` becomes `/blog`).
        correct: true
      - value: It forces all generated URLs to not have a trailing slash.
        correct: false
      - value: It only affects routes defined directly in the `routes.yaml` file.
        correct: false
      - value: It adds a trailing slash to all imported routes.
        correct: false
    help: The `trailing_slash_on_root` option specifically controls the behavior of
      the trailing slash for routes that would otherwise result in a path like
      `/prefix/`. Setting it to `false` removes the trailing slash for such root
      paths. https://symfony.com/doc/current/routing.html#_snippet_35
  - question: In Symfony 7, how can you define an alias `new_route_name` for an
      existing route `original_route_name` using YAML configuration?
    answers:
      - value: |-
          ```yaml
          new_route_name:
              alias: original_route_name
          ```
        correct: true
      - value: |-
          ```yaml
          alias:
              new_route_name: original_route_name
          ```
        correct: false
      - value: |-
          ```yaml
          original_route_name:
              aliases: [new_route_name]
          ```
        correct: false
      - value: |-
          ```yaml
          new_route_name:
              redirect_to: original_route_name
          ```
        correct: false
    help: Route aliasing allows multiple names to point to the same underlying route
      definition. https://symfony.com/doc/current/routing.html#_snippet_31
  - question: You need to retrieve the current route name and all its parameters
      from the `Request` object within a Symfony 7 controller. Which properties
      of the `Request` object's `attributes` bag should you access?
    answers:
      - value: "`_route` and `_route_params`"
        correct: true
      - value: "`_name` and `_params`"
        correct: false
      - value: "`_route_name` and `_route_parameters`"
        correct: false
      - value: "`_id` and `_args`"
        correct: false
    help: The `_route` attribute holds the matched route name, and `_route_params`
      holds an associative array of the matched parameters.
      https://symfony.com/doc/current/routing.html#_snippet_37
  - question: Which of the following best describes the role of `UrlMatcher` in
      Symfony's Routing component?
    answers:
      - value: It matches an incoming URL path to a defined route.
        correct: true
      - value: It generates a URL from a given route name and parameters.
        correct: false
      - value: It compiles route definitions into an optimized format.
        correct: false
      - value: It manages the collection of all registered routes.
        correct: false
    help: "The `UrlMatcher` is responsible for the 'matching' part of routing:
      taking a request URL and finding the corresponding route.
      https://symfony.com/doc/current/create_framework/routing.html#_snippet_7"
  - question: You want to define a route `/admin/dashboard` that is only accessible
      if the user's User-Agent header matches `/firefox/i`. How would you
      implement this condition using YAML configuration in Symfony 7?
    answers:
      - value: >-
          ```yaml

          admin_dashboard:
              path: /admin/dashboard
              controller: App\\Controller\\AdminController::dashboard
              condition: "request.headers.get('User-Agent') matches '/firefox/i'"
          ```
        correct: true
      - value: |-
          ```yaml
          admin_dashboard:
              path: /admin/dashboard
              controller: App\\Controller\\AdminController::dashboard
              requirements:
                  User-Agent: '/firefox/i'
          ```
        correct: false
      - value: |-
          ```yaml
          admin_dashboard:
              path: /admin/dashboard
              controller: App\\Controller\\AdminController::dashboard
              if: "request.headers.get('User-Agent') matches '/firefox/i'"
          ```
        correct: false
    help: The `condition` option in YAML allows using expression language to define
      complex matching logic based on request properties.
      https://symfony.com/doc/current/routing.html#_snippet_8
  - question: What is the primary purpose of the `_format` special internal routing
      attribute in Symfony 7?
    answers:
      - value: To set the request format, influencing the `Content-Type` of the
          response.
        correct: true
      - value: To define the expected file extension for the URL.
        correct: false
      - value: To specify the data serialization format for the controller.
        correct: false
      - value: To automatically convert route parameters to a specific data type.
        correct: false
    help: The `_format` attribute is crucial for content negotiation, allowing
      Symfony to determine the desired response format (e.g., HTML, JSON, XML).
      https://symfony.com/doc/current/routing.html#_snippet_25
  - question: You want to define a route `/articles/{year}/{title}.{_format}`. How
      would you define `_format` as an optional parameter with a default value
      of `html` using PHP attributes in Symfony 7?
    answers:
      - value: >-
          ```php

          #[Route('/articles/{year}/{title}.{_format}', name: 'article_show',
          defaults: ['_format' => 'html'])]

          ```
        correct: true
      - value: >-
          ```php

          #[Route('/articles/{year}/{title}.{_format?html}', name:
          'article_show')]

          ```
        correct: false
      - value: >-
          ```php

          #[Route('/articles/{year}/{title}', name: 'article_show', format:
          'html')]

          ```
        correct: false
    help: Default values for special parameters like `_format` are set using the
      `defaults` option.
      https://symfony.com/doc/current/routing.html#_snippet_28
  - question: Which of the following best describes the function of
      `RouterInterface::generate()` in Symfony 7?
    answers:
      - value: It constructs a URL for a given route name and set of parameters.
        correct: true
      - value: It finds the best matching route for a given URL path.
        correct: false
      - value: It reloads the routing cache.
        correct: false
      - value: It validates route parameters against their requirements.
        correct: false
    help: The `generate()` method of `UrlGeneratorInterface` (which
      `RouterInterface` extends) is used to create URLs.
      https://symfony.com/doc/current/routing.html#_snippet_55
  - question: You need to redirect from `/old-blog` to an external URL
      `https://new.example.com/blog` permanently using `RedirectController` in
      Symfony 7. Which `defaults` option should be used to specify the target
      URL?
    answers:
      - value: "`path`"
        correct: true
      - value: "`url`"
        correct: false
      - value: "`target`"
        correct: false
      - value: "`redirect_url`"
        correct: false
    help: When redirecting to an external URL, the `path` default can be set to an
      absolute URL. https://symfony.com/doc/current/routing.html#_snippet_38
  - question: What is the purpose of the `_locale` special internal routing
      attribute in Symfony 7?
    answers:
      - value: To set the locale on the request for translation and localization.
        correct: true
      - value: To define the default language for the application.
        correct: false
      - value: To automatically detect the user's browser language.
        correct: false
      - value: To restrict a route to a specific language.
        correct: false
    help: The `_locale` attribute is a fundamental part of Symfony's
      internationalization features, allowing the application to adapt to
      different languages.
      https://symfony.com/doc/current/routing.html#_snippet_25
  - question: How can you define a route in Symfony 7 that matches different
      hostnames based on the locale, e.g., `www.example.com` for English and
      `www.example.nl` for Dutch, using PHP configurator?
    answers:
      - value: |-
          ```php
          return static function (RoutingConfigurator $routes): void {
              $routes->import('../../src/Controller/', 'attribute')
                  ->host([
                      'en' => 'www.example.com',
                      'nl' => 'www.example.nl',
                  ])
              ;
          };
          ```
        correct: true
      - value: |-
          ```php
          return static function (RoutingConfigurator $routes): void {
              $routes->add('homepage', '/')
                  ->host('www.example.com')
                  ->locale('en')
              ;
              $routes->add('homepage_nl', '/')
                  ->host('www.example.nl')
                  ->locale('nl')
              ;
          };
          ```
        correct: false
      - value: |-
          ```php
          return static function (RoutingConfigurator $routes): void {
              $routes->import('../../src/Controller/', 'attribute')
                  ->addHostLocale('en', 'www.example.com')
                  ->addHostLocale('nl', 'www.example.nl')
              ;
          };
          ```
        correct: false
    help: The `host()` method on the `RoutingConfigurator` can accept an associative
      array mapping locales to hostnames for imported routes.
      https://symfony.com/doc/current/routing.html#_snippet_46
  - question: Which of the following is the correct way to define a route in
      `config/routes.yaml` that uses an invokable controller (a class with an
      `__invoke()` method)?
    answers:
      - value: |-
          ```yaml
          my_route:
              path: /my-path
              controller: App\\Controller\\MyInvokableController
          ```
        correct: true
      - value: |-
          ```yaml
          my_route:
              path: /my-path
              controller: App\\Controller\\MyInvokableController::__invoke
          ```
        correct: false
      - value: |-
          ```yaml
          my_route:
              path: /my-path
              controller: App\\Controller\\MyInvokableController::invoke
          ```
        correct: false
    help: For invokable controllers, you can simply provide the fully qualified
      class name as the `controller` value.
      https://symfony.com/doc/current/routing.html#_snippet_2
  - question: You want to exclude `DebugEmailController.php` when importing routes
      from `src/Controller/` using PHP configurator in Symfony 7. Which method
      on `RoutingConfigurator` should you use?
    answers:
      - value: "`import()` with a fourth argument for exclusion patterns."
        correct: true
      - value: "`exclude()` after `import()`."
        correct: false
      - value: "`ignore()` after `import()`."
        correct: false
      - value: There is no direct method; you must filter manually.
        correct: false
    help: The `import()` method of `RoutingConfigurator` allows an optional fourth
      argument for exclusion patterns.
      https://symfony.com/doc/current/routing.html#_snippet_33
  - question: What is the default HTTP status code for a temporary redirect
      triggered by Symfony's `RedirectController`?
    answers:
      - value: 302 Found
        correct: true
      - value: 301 Moved Permanently
        correct: false
      - value: 307 Temporary Redirect
        correct: false
      - value: 303 See Other
        correct: false
    help: By default, `RedirectController` performs a 302 redirect. If
      `keepRequestMethod` is true, it uses 307.
      https://symfony.com/doc/current/routing.html#_snippet_38
  - question: Which of the following is a valid PHP 8.2 backed enum that can be used
      as a route parameter in Symfony 7, and how would it be type-hinted in the
      controller?
    answers:
      - value: |-
          ```php
          enum OrderStatusEnum: string
          {
              case Paid = 'paid';
              case Pending = 'pending';
          }
          // Controller: public function list(OrderStatusEnum $status): Response
          ```
        correct: true
      - value: |-
          ```php
          enum OrderStatusEnum
          {
              case Paid;
              case Pending;
          }
          // Controller: public function list(OrderStatusEnum $status): Response
          ```
        correct: false
      - value: |-
          ```php
          class OrderStatusEnum extends Enum
          {
              public const PAID = 'paid';
          }
          // Controller: public function list(OrderStatusEnum $status): Response
          ```
        correct: false
    help: Symfony's routing supports PHP 8.1+ backed enums as route parameters,
      automatically converting the scalar value to the enum case.
      https://symfony.com/doc/current/routing.html#_snippet_24
  - question: When defining a route condition in Symfony 7, how can you access
      environment variables?
    answers:
      - value: Using the `env(string $name)` function.
        correct: true
      - value: Using `$_ENV['VAR_NAME']` directly.
        correct: false
      - value: Using `getenv('VAR_NAME')` directly.
        correct: false
      - value: Using `container.env('VAR_NAME')`.
        correct: false
    help: The `env()` function in the expression language provides a safe way to
      access environment variables within route conditions.
      https://symfony.com/doc/current/routing.html#_snippet_11
  - question: What is the purpose of the `name-prefix` option when importing routes
      in Symfony 7 XML configuration?
    answers:
      - value: It adds a prefix to the name of all imported routes.
        correct: true
      - value: It adds a prefix to the URL path of all imported routes.
        correct: false
      - value: It defines a namespace for the imported route names.
        correct: false
      - value: It filters imported routes based on their names.
        correct: false
    help: The `name-prefix` option helps organize route names, especially when
      importing multiple sets of routes.
      https://symfony.com/doc/current/routing.html#_snippet_33
  - question: You have a route `/products/{id}` where `id` must be a positive
      integer. Which of the following regular expressions would correctly
      enforce this requirement in Symfony 7?
    answers:
      - value: "`\\d+`"
        correct: true
      - value: "`[0-9]+`"
        correct: true
      - value: "`\\d*`"
        correct: false
      - value: "`[1-9]\\d*`"
        correct: true
    help: "`\\d+` matches one or more digits. `[0-9]+` is equivalent. `[1-9]\\d*`
      matches a non-zero digit followed by zero or more digits, ensuring a
      positive integer. `\\d*` would allow an empty string.
      https://symfony.com/doc/current/routing.html#_snippet_18"
  - question: When defining a route in Symfony 7 using PHP attributes, how can you
      specify that the route should only respond to requests from `example.com`
      and `www.example.com`?
    answers:
      - value: |-
          ```php
          #[Route('/', name: 'homepage', host: 'example.com|www.example.com')]
          ```
        correct: true
      - value: >-
          ```php

          #[Route('/', name: 'homepage', hosts: ['example.com',
          'www.example.com'])]

          ```
        correct: false
      - value: >-
          ```php

          #[Route('/', name: 'homepage', condition: 'context.getHost() matches
          "/^(www\.)?example\.com$/"')]

          ```
        correct: false
    help: The `host` option can accept a regular expression to match multiple
      hostnames. https://symfony.com/doc/current/routing.html#_snippet_40
  - question: What is the primary function of the `UrlGeneratorInterface` in Symfony 7?
    answers:
      - value: To generate URLs for named routes.
        correct: true
      - value: To match incoming URLs to routes.
        correct: false
      - value: To manage the routing cache.
        correct: false
      - value: To define new routes programmatically.
        correct: false
    help: The `UrlGeneratorInterface` is part of the Symfony Routing component
      specifically for URL generation, while `UrlMatcherInterface` handles
      matching. https://symfony.com/doc/current/routing.html#_snippet_55
  - question: You are debugging a routing issue where a specific URL is not matching
      any route. Which Symfony 7 console command would you use to see which
      route (if any) matches that URL and what parameters it extracts?
    answers:
      - value: "`php bin/console router:match /your/problem/url`"
        correct: true
      - value: "`php bin/console debug:router --url=/your/problem/url`"
        correct: false
      - value: "`php bin/console route:test /your/problem/url`"
        correct: false
      - value: "`php bin/console router:debug --path=/your/problem/url`"
        correct: false
    help: The `router:match` command is designed to simulate a request and show the
      matching route and its parameters.
      https://symfony.com/doc/current/routing.html#_snippet_14
  - question: Which of the following is true regarding the `_controller` special
      internal routing attribute in Symfony 7?
    answers:
      - value: It specifies the controller and method to be executed for a matched
          route.
        correct: true
      - value: It can be dynamically set based on route parameters.
        correct: true
      - value: It is always implicitly defined by Symfony when using attributes.
        correct: true
      - value: It is only used for invokable controllers.
        correct: false
    help: The `_controller` attribute is fundamental to how Symfony dispatches
      requests to controllers. It is implicitly set when using `#[Route]`
      attributes on methods, but can also be explicitly defined or overridden.
      https://symfony.com/doc/current/routing.html#_snippet_25
  - question: When defining a route with a `condition` in Symfony 7, how can you
      access a route parameter named `id`?
    answers:
      - value: "`params['id']`"
        correct: true
      - value: "`request.attributes.get('id')`"
        correct: false
      - value: "`id`"
        correct: false
      - value: "`route_params.id`"
        correct: false
    help: The `params` variable in the expression language provides direct access to
      the matched route parameters.
      https://symfony.com/doc/current/routing.html#_snippet_7
  - question: You want to define a route `/products/{category}/{slug}` where
      `category` is optional and defaults to `all`. How would you achieve this
      using YAML in Symfony 7?
    answers:
      - value: |-
          ```yaml
          product_list:
              path:       /products/{category}/{slug}
              controller: App\\Controller\\ProductController::list
              defaults:
                  category: all
          ```
        correct: true
      - value: |-
          ```yaml
          product_list:
              path:       /products/{category?}/{slug}
              controller: App\\Controller\\ProductController::list
              defaults:
                  category: all
          ```
        correct: false
      - value: |-
          ```yaml
          product_list:
              path:       /products/{category}/{slug}
              controller: App\\Controller\\ProductController::list
              optional:
                  category: all
          ```
        correct: false
    help: The `defaults` key in YAML is used to provide default values for route
      parameters, making them optional.
      https://symfony.com/doc/current/routing.html#_snippet_19
  - question: Which of the following methods can be used to generate a URL in a
      Symfony 7 controller that extends `AbstractController`?
    answers:
      - value: "`$this->generateUrl()`"
        correct: true
      - value: "`$this->container->get('router')->generate()`"
        correct: true
      - value: "`$this->url()`"
        correct: false
      - value: "`$this->get('router')->generateUrl()`"
        correct: false
    help: The `AbstractController` provides a convenient `generateUrl()` shortcut
      method. You can also access the router service directly via the container.
      https://symfony.com/doc/current/routing.html#_snippet_50
  - question: What is the recommended Composer command to install the Symfony
      Routing component in a new project?
    answers:
      - value: "`composer require symfony/routing`"
        correct: true
      - value: "`composer install symfony/routing`"
        correct: false
      - value: "`composer add symfony/routing`"
        correct: false
      - value: "`composer get symfony/routing`"
        correct: false
    help: The `composer require` command is used to add new dependencies to a PHP
      project.
      https://symfony.com/doc/current/create_framework/routing.html#_snippet_2
  - question: You have a route `/products/{id}` where `id` should only accept values
      less than 1000. How would you define this condition using PHP attributes
      in Symfony 7?
    answers:
      - value: >-
          ```php

          #[Route('/products/{id}', name: 'product_show', condition:
          'params["id"] < 1000')]

          ```
        correct: true
      - value: >-
          ```php

          #[Route('/products/{id}', name: 'product_show', requirements: ['id' =>
          '<1000'])]

          ```
        correct: false
      - value: |-
          ```php
          #[Route('/products/{id}', name: 'product_show', filter: 'id < 1000')]
          ```
        correct: false
    help: Complex conditions involving route parameters can be expressed using the
      `condition` option and the `params` variable in expression language.
      https://symfony.com/doc/current/routing.html#_snippet_7
  - question: Which of the following is a valid way to define a route in Symfony 7
      that matches different hostnames based on the locale, e.g.,
      `www.example.com` for English and `www.example.nl` for Dutch, using YAML
      configuration?
    answers:
      - value: |-
          ```yaml
          controllers:
              resource: '../../src/Controller/'
              type: attribute
              host:
                  en: 'www.example.com'
                  nl: 'www.example.nl'
          ```
        correct: true
      - value: |-
          ```yaml
          homepage_en:
              path: /
              host: www.example.com
              controller: App\\Controller\\MainController::homepage
              locale: en
          homepage_nl:
              path: /
              host: www.example.nl
              controller: App\\Controller\\MainController::homepage
              locale: nl
          ```
        correct: false
      - value: |-
          ```yaml
          controllers:
              resource: '../../src/Controller/'
              type: attribute
              locale_hosts:
                  en: 'www.example.com'
                  nl: 'www.example.nl'
          ```
        correct: false
    help: The `host` option can be used with a map of locales to hostnames when
      importing routes to enable locale-based domain matching.
      https://symfony.com/doc/current/routing.html#_snippet_46
  - question: What happens if a Symfony 7 route parameter type-hinted with a PHP
      backed enum (e.g., `OrderStatusEnum $status`) receives an invalid scalar
      value from the URL?
    answers:
      - value: Symfony automatically throws a 404 Not Found exception.
        correct: true
      - value: A `TypeError` is thrown, indicating an invalid enum case.
        correct: false
      - value: The parameter receives `null`, and the controller must handle it.
        correct: false
      - value: Symfony attempts to find a default value for the parameter.
        correct: false
    help: Symfony's ParamConverter, which handles enum parameters, will
      automatically generate a 404 response if the provided scalar value does
      not correspond to a valid enum case.
      https://symfony.com/doc/current/routing.html#_snippet_24
  - question: Which of the following is the correct way to define a route in
      `config/routes.php` using the `RoutingConfigurator` that has a `_locale`
      parameter with a default value of `en`?
    answers:
      - value: |-
          ```php
          $routes->add('homepage', '/')
              ->controller([MainController::class, 'homepage'])
              ->defaults(['_locale' => 'en'])
          ;
          ```
        correct: true
      - value: |-
          ```php
          $routes->add('homepage', '/')
              ->controller([MainController::class, 'homepage'])
              ->locale('en')
          ;
          ```
        correct: false
      - value: |-
          ```php
          $routes->add('homepage', '/{_locale}')
              ->controller([MainController::class, 'homepage'])
              ->defaults(['_locale' => 'en'])
          ;
          ```
        correct: true
    help: Default values for route parameters, including special ones like
      `_locale`, are set using the `defaults()` method. If `_locale` is part of
      the path, it needs to be defined there too.
      https://symfony.com/doc/current/routing.html#_snippet_28
  - question: When using `RedirectController` in Symfony 7, which `defaults` option
      can be used to remove all original route attributes when redirecting, or
      specify which attributes to ignore?
    answers:
      - value: "`ignoreAttributes`"
        correct: true
      - value: "`removeAttributes`"
        correct: false
      - value: "`clearAttributes`"
        correct: false
      - value: "`excludeAttributes`"
        correct: false
    help: The `ignoreAttributes` option allows fine-grained control over which
      attributes are preserved or removed during a redirect.
      https://symfony.com/doc/current/routing.html#_snippet_38
  - question: You need to generate a URL in Twig for a route named `product_search`
      with query parameters `query=symfony` and `page=2`. Which syntax is
      correct?
    answers:
      - value: "`{{ path('product_search', {query: 'symfony', page: 2}) }}`"
        correct: true
      - value: "`{{ path('product_search', { _query: {query: 'symfony', page: 2} }) }}`"
        correct: false
      - value: "`{{ url('product_search', {query: 'symfony', page: 2}) }}`"
        correct: false
    help: Extra parameters passed to `path()` that are not part of the route
      definition are automatically appended as query parameters.
      https://symfony.com/doc/current/routing.html#_snippet_50
  - question: What is the purpose of the `_fragment` special internal routing
      attribute in Symfony 7?
    answers:
      - value: It defines the optional last part of a URL that starts with a `#`
          character.
        correct: true
      - value: It specifies a section within a page to load via AJAX.
        correct: false
      - value: It indicates a partial page render.
        correct: false
      - value: It is used for client-side routing only.
        correct: false
    help: The `_fragment` attribute corresponds to the URL fragment, often used for
      internal page navigation.
      https://symfony.com/doc/current/routing.html#_snippet_25
  - question: Which of the following is true about the order of route evaluation in
      Symfony 7?
    answers:
      - value: Routes with higher `priority` values are evaluated before those with
          lower values.
        correct: true
      - value: The order of definition in configuration files (YAML, XML, PHP)
          determines the evaluation order.
        correct: false
      - value: More specific routes are always evaluated before more general routes,
          regardless of explicit priority.
        correct: false
      - value: Routes are evaluated alphabetically by their names.
        correct: false
    help: While Symfony tries to optimize matching, explicit `priority` is the
      definitive way to control evaluation order, especially for routes that
      might overlap. https://symfony.com/doc/current/routing.html#_snippet_22
  - question: You want to define a route `/products/{id}` where `id` must be a UUID.
      How would you define this requirement using YAML in Symfony 7?
    answers:
      - value: >-
          ```yaml

          product_show:
              path:       /products/{id}
              controller: App\\Controller\\ProductController::show
              requirements:
                  id: '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}'
          ```
        correct: true
      - value: |-
          ```yaml
          product_show:
              path:       /products/{id<uuid>}
              controller: App\\Controller\\ProductController::show
          ```
        correct: false
      - value: |-
          ```yaml
          product_show:
              path:       /products/{id}
              controller: App\\Controller\\ProductController::show
              type: uuid
          ```
        correct: false
    help: Regular expressions are used in the `requirements` section to validate
      route parameters. https://symfony.com/doc/current/routing.html#_snippet_18
  - question: What is the purpose of the `#[AsRoutingConditionService]` attribute in
      Symfony 7?
    answers:
      - value: It allows a service to be called within a route `condition` expression.
        correct: true
      - value: It registers a service as a custom route loader.
        correct: false
      - value: It automatically injects route parameters into a service's constructor.
        correct: false
      - value: It marks a service as a global routing listener.
        correct: false
    help: This attribute makes a service callable via the `service()` function in
      route conditions. https://symfony.com/doc/current/routing.html#_snippet_12
  - question: You want to define a route `/search` that only responds to `GET`
      requests. How would you configure this using YAML in Symfony 7?
    answers:
      - value: |-
          ```yaml
          search_page:
              path: /search
              controller: App\\Controller\\SearchController::index
              methods: [GET]
          ```
        correct: true
      - value: |-
          ```yaml
          search_page:
              path: /search
              controller: App\\Controller\\SearchController::index
              http_methods: [GET]
          ```
        correct: false
      - value: |-
          ```yaml
          search_page:
              path: /search
              controller: App\\Controller\\SearchController::index
              condition: "context.getMethod() == 'GET'"
          ```
        correct: false
    help: The `methods` option in YAML is used to restrict a route to specific HTTP
      methods. https://symfony.com/doc/current/routing.html#_snippet_6
  - question: Which of the following is a valid way to define a route in Symfony 7
      using PHP attributes, ensuring that the `slug` parameter is passed as a
      string to the controller?
    answers:
      - value: |-
          ```php
          #[Route('/blog/{slug}', name: 'blog_show')]
          public function show(string $slug): Response
          { /* ... */ }
          ```
        correct: true
      - value: |-
          ```php
          #[Route('/blog/{slug:string}', name: 'blog_show')]
          public function show($slug): Response
          { /* ... */ }
          ```
        correct: false
      - value: |-
          ```php
          #[Route('/blog/{slug}', name: 'blog_show', type: 'string')]
          public function show($slug): Response
          { /* ... */ }
          ```
        correct: false
    help: Symfony automatically infers the type of route parameters from the
      controller method's type hints.
      https://symfony.com/doc/current/routing.html#_snippet_15
  - question: When generating a URL for a route with a `_locale` parameter in
      Symfony 7, how can you explicitly set the locale for the generated URL?
    answers:
      - value: Pass `['_locale' => 'nl']` in the parameters array to `generateUrl()`.
        correct: true
      - value: Set the locale on the `RequestStack` before generating the URL.
        correct: false
      - value: Use a dedicated `generateLocalizedUrl()` method.
        correct: false
      - value: The locale is always derived from the current request.
        correct: false
    help: The `_locale` parameter can be explicitly overridden when generating a URL
      by including it in the parameters array.
      https://symfony.com/doc/current/routing.html#_snippet_55
  - question: What is the primary purpose of the `debug:router` command in Symfony 7?
    answers:
      - value: To list all registered routes in the application.
        correct: true
      - value: To clear the routing cache.
        correct: false
      - value: To test if a URL matches a specific route.
        correct: false
      - value: To generate a routing graph visualization.
        correct: false
    help: The `debug:router` command provides a comprehensive overview of all routes
      known to the Symfony application.
      https://symfony.com/doc/current/routing.html#_snippet_14
  - question: Which of the following is a valid way to define a route in Symfony 7
      using XML configuration?
    answers:
      - value: >-
          ```xml

          <route id="blog_list" path="/blog"
          controller="App\\Controller\\BlogController::list"/>

          ```
        correct: true
      - value: >-
          ```xml

          <route name="blog_list" url="/blog"
          handler="App\\Controller\\BlogController::list"/>

          ```
        correct: false
      - value: |-
          ```xml
          <route id="blog_list" path="/blog">
              <controller>App\\Controller\\BlogController::list</controller>
          </route>
          ```
        correct: false
    help: XML routing uses the `<route>` element with `id`, `path`, and `controller`
      attributes. https://symfony.com/doc/current/routing.html#_snippet_3
  - question: When defining a route with a `condition` in Symfony 7, which
      expression language function allows you to retrieve the value of an
      environment variable?
    answers:
      - value: "`env(string $name)`"
        correct: true
      - value: "`get_env(string $name)`"
        correct: false
      - value: "`parameter(string $name)`"
        correct: false
      - value: "`app.env(string $name)`"
        correct: false
    help: The `env()` function is specifically designed to access environment
      variables within Symfony's expression language.
      https://symfony.com/doc/current/routing.html#_snippet_11
  - question: You want to define a route `/articles/{id}` where `id` must be an
      integer, and you want to use a separate `requirements` array in PHP
      attributes. Which is the correct syntax in Symfony 7?
    answers:
      - value: >-
          ```php

          #[Route('/articles/{id}', name: 'article_show', requirements: ['id' =>
          '\d+'])]

          ```
        correct: true
      - value: >-
          ```php

          #[Route('/articles/{id}', name: 'article_show', constraints: ['id' =>
          '\d+'])]

          ```
        correct: false
      - value: >-
          ```php

          #[Route('/articles/{id}', name: 'article_show', regex: ['id' =>
          '\d+'])]

          ```
        correct: false
    help: The `requirements` option accepts an associative array where keys are
      parameter names and values are their regex requirements.
      https://symfony.com/doc/current/routing.html#_snippet_19
  - question: What is the purpose of the `_fragment` special internal routing
      attribute in Symfony 7?
    answers:
      - value: It is used to set the fragment identifier (the part after `#`) in a URL.
        correct: true
      - value: It defines a partial view to be loaded.
        correct: false
      - value: It indicates a specific section of a page for SEO purposes.
        correct: false
      - value: It's an internal attribute not exposed to developers.
        correct: false
    help: The `_fragment` attribute is a standard way to manage URL fragments within
      Symfony. https://symfony.com/doc/current/routing.html#_snippet_25
  - question: Which of the following is true about the `stateless` option for routes
      in Symfony 7?
    answers:
      - value: It prevents Symfony from starting or using a session for requests
          matching that route.
        correct: true
      - value: It automatically sets HTTP headers to prevent caching.
        correct: false
      - value: It makes the route accessible without authentication.
        correct: false
      - value: It's only applicable to API routes.
        correct: false
    help: The `stateless` option is useful for routes that do not require session
      management, such as certain API endpoints, to avoid unnecessary session
      starts or warnings.
      https://symfony.com/doc/current/routing.html#_snippet_47
  - question: You want to define a route `/admin/{id}` where `id` must be a positive
      integer, and you want to apply a prefix of `/admin` to all routes imported
      from a specific controller directory using PHP configurator in Symfony 7.
      Which is the correct way to do this?
    answers:
      - value: |-
          ```php
          return static function (RoutingConfigurator $routes): void {
              $routes->import('../../src/Controller/Admin/', 'attribute')
                  ->prefix('/admin')
                  ->requirements(['id' => '\d+'])
              ;
          };
          ```
        correct: true
      - value: |-
          ```php
          return static function (RoutingConfigurator $routes): void {
              $routes->prefix('/admin')
                  ->import('../../src/Controller/Admin/', 'attribute')
                  ->requirements(['id' => '\d+'])
              ;
          };
          ```
        correct: false
      - value: |-
          ```php
          return static function (RoutingConfigurator $routes): void {
              $routes->addPrefix('/admin')
                  ->import('../../src/Controller/Admin/', 'attribute')
                  ->addRequirements(['id' => '\d+'])
              ;
          };
          ```
        correct: false
    help: The `prefix()` and `requirements()` methods can be chained after
      `import()` to apply settings to a group of routes.
      https://symfony.com/doc/current/routing.html#_snippet_34
  - question: Which of the following is a valid way to define a route in Symfony 7
      using YAML, where the `_locale` parameter is part of the path and has a
      default value?
    answers:
      - value: |-
          ```yaml
          homepage:
              path:       /{_locale}/
              controller: App\\Controller\\MainController::homepage
              defaults:
                  _locale: en
              requirements:
                  _locale: en|fr|de
          ```
        correct: true
      - value: |-
          ```yaml
          homepage:
              path:       /
              controller: App\\Controller\\MainController::homepage
              locale: en
          ```
        correct: false
      - value: |-
          ```yaml
          homepage:
              path:       /{_locale}
              controller: App\\Controller\\MainController::homepage
              default_locale: en
          ```
        correct: false
    help: The `_locale` parameter can be part of the path, and its default value is
      set under the `defaults` key, with optional `requirements`.
      https://symfony.com/doc/current/routing.html#_snippet_19
  - question: You have a custom route loader service in Symfony 7. How would you
      configure your `config/routes.yaml` to use this custom loader, assuming it
      supports the type `extra`?
    answers:
      - value: |-
          ```yaml
          app_extra:
              resource: ./
              type: extra
          ```
        correct: true
      - value: |-
          ```yaml
          app_extra:
              loader: App\\Routing\\CustomLoader
              type: extra
          ```
        correct: false
      - value: |-
          ```yaml
          app_extra:
              import: App\\Routing\\CustomLoader
              format: extra
          ```
        correct: false
    help: To use a custom route loader, you specify its supported `type` when
      importing a resource. Symfony will then find the service tagged with
      `routing.loader` that supports that type.
      https://symfony.com/doc/current/routing/custom_route_loader.html#_snippet_6
  - question: What is the purpose of the `_controller` special internal routing
      attribute in Symfony 7?
    answers:
      - value: It defines the PHP callable (controller and method) that will handle the
          request.
        correct: true
      - value: It specifies the name of the route.
        correct: false
      - value: It sets the default values for route parameters.
        correct: false
      - value: It determines the HTTP method allowed for the route.
        correct: false
    help: The `_controller` attribute is fundamental to Symfony's request
      dispatching, linking a matched route to its execution logic.
      https://symfony.com/doc/current/routing.html#_snippet_25
  - question: You want to define a route `/api/data` that should only match if the
      request is made over HTTPS. How would you configure this using YAML in
      Symfony 7?
    answers:
      - value: |-
          ```yaml
          api_data:
              path: /api/data
              controller: App\\Controller\\ApiController::data
              schemes: [https]
          ```
        correct: true
      - value: |-
          ```yaml
          api_data:
              path: /api/data
              controller: App\\Controller\\ApiController::data
              secure: true
          ```
        correct: false
      - value: |-
          ```yaml
          api_data:
              path: /api/data
              controller: App\\Controller\\ApiController::data
              condition: "context.getScheme() == 'https'"
          ```
        correct: false
    help: The `schemes` option in YAML allows you to specify the required protocol
      for a route. https://symfony.com/doc/current/routing.html#_snippet_61
  - question: When generating a URL in Symfony 7, what happens if you pass a
      parameter that is not defined in the route's path and is not a special
      internal parameter?
    answers:
      - value: The parameter is automatically appended to the URL as a query string
          parameter.
        correct: true
      - value: An `InvalidParameterException` is thrown.
        correct: false
      - value: The parameter is ignored.
        correct: false
      - value: The URL generation fails silently.
        correct: false
    help: Symfony's URL generator is smart enough to convert extra parameters into
      query string parameters.
      https://symfony.com/doc/current/routing.html#_snippet_50
  - question: Which of the following is a valid way to define a route in Symfony 7
      using PHP attributes, ensuring that the `id` parameter is an integer and
      has a default value of `1`?
    answers:
      - value: >-
          ```php

          #[Route('/items/{id}', name: 'item_show', defaults: ['id' => 1],
          requirements: ['id' => '\d+'])]

          public function show(int $id): Response

          { /* ... */ }

          ```
        correct: true
      - value: |-
          ```php
          #[Route('/items/{id<\d+>}', name: 'item_show', defaults: ['id' => 1])]
          public function show(int $id): Response
          { /* ... */ }
          ```
        correct: true
      - value: |-
          ```php
          #[Route('/items/{id}', name: 'item_show')]
          public function show(int $id = 1): Response
          { /* ... */ }
          ```
        correct: true
    help: Optional parameters with defaults can be set via `defaults` or by
      providing a default value in the controller method signature. Requirements
      ensure type validation.
      https://symfony.com/doc/current/routing.html#_snippet_19
  - question: What is the purpose of the `_locale` special internal routing
      attribute in Symfony 7?
    answers:
      - value: It is used to set the locale on the `Request` object, affecting
          translations.
        correct: true
      - value: It defines the default language for the entire application.
        correct: false
      - value: It enables automatic language detection from browser headers.
        correct: false
      - value: It is a placeholder for the user's preferred timezone.
        correct: false
    help: The `_locale` attribute is fundamental for internationalization (i18n) in
      Symfony, allowing content to be served in different languages.
      https://symfony.com/doc/current/routing.html#_snippet_25
  - question: When defining a route with a `condition` in Symfony 7, which
      expression language variable provides access to the `RequestContext`
      object?
    answers:
      - value: "`context`"
        correct: true
      - value: "`request_context`"
        correct: false
      - value: "`router_context`"
        correct: false
      - value: "`routing_context`"
        correct: false
    help: The `context` variable provides access to information like the HTTP
      method, scheme, host, and base URL of the current request.
      https://symfony.com/doc/current/routing.html#_snippet_11
  - question: You want to define a route `/blog/{slug}` where `slug` must match a
      specific format (e.g., `[a-z0-9-]+`). How would you define this
      requirement using YAML in Symfony 7?
    answers:
      - value: |-
          ```yaml
          blog_show:
              path:       /blog/{slug}
              controller: App\\Controller\\BlogController::show
              requirements:
                  slug: '[a-z0-9-]+'
          ```
        correct: true
      - value: |-
          ```yaml
          blog_show:
              path:       /blog/{slug<[a-z0-9-]+>}
              controller: App\\Controller\\BlogController::show
          ```
        correct: false
      - value: |-
          ```yaml
          blog_show:
              path:       /blog/{slug}
              controller: App\\Controller\\BlogController::show
              regex:
                  slug: '[a-z0-9-]+'
          ```
        correct: false
    help: The `requirements` key in YAML is used to define regular expressions for
      route parameters. https://symfony.com/doc/current/routing.html#_snippet_19
  - question: Which of the following is true about the `router:match` command in
      Symfony 7?
    answers:
      - value: It simulates an incoming URL and shows which route matches it.
        correct: true
      - value: It generates a URL for a given route name.
        correct: false
      - value: It lists all routes that contain a specific parameter.
        correct: false
      - value: It validates the syntax of your routing configuration files.
        correct: false
    help: The `router:match` command is a powerful debugging tool for understanding
      how Symfony's router interprets URLs.
      https://symfony.com/doc/current/routing.html#_snippet_14
  - question: You want to define a route `/products/{id}` where `id` must be an
      integer, and you want to use PHP configurator. Which is the correct syntax
      in Symfony 7?
    answers:
      - value: |-
          ```php
          $routes->add('product_show', '/products/{id}')
              ->controller([ProductController::class, 'show'])
              ->requirements(['id' => '\d+'])
          ;
          ```
        correct: true
      - value: |-
          ```php
          $routes->add('product_show', '/products/{id:int}')
              ->controller([ProductController::class, 'show'])
          ;
          ```
        correct: false
      - value: |-
          ```php
          $routes->add('product_show', '/products/{id}')
              ->controller([ProductController::class, 'show'])
              ->setRequirement('id', '\d+')
          ;
          ```
        correct: false
    help: The `requirements()` method on `RoutingConfigurator` is used to set
      regular expression requirements for route parameters.
      https://symfony.com/doc/current/routing.html#_snippet_20
  - question: What is the purpose of the `_format` special internal routing
      attribute in Symfony 7?
    answers:
      - value: It determines the content type of the response (e.g., `application/json`
          for `json` format).
        correct: true
      - value: It specifies the file extension for the route path.
        correct: false
      - value: It defines the data format for incoming request bodies.
        correct: false
      - value: It is used for versioning API endpoints.
        correct: false
    help: The `_format` attribute is a key component of content negotiation in
      Symfony, linking the requested format to the response's `Content-Type`
      header. https://symfony.com/doc/current/routing.html#_snippet_25
  - question: You want to define a route that matches `/blog/{slug}` and has a
      default `_locale` of `en`. How would you achieve this using PHP attributes
      in Symfony 7?
    answers:
      - value: >-
          ```php

          #[Route('/blog/{slug}', name: 'blog_post', defaults: ['_locale' =>
          'en'])]

          ```
        correct: true
      - value: |-
          ```php
          #[Route('/blog/{slug}', name: 'blog_post', locale: 'en')]
          ```
        correct: false
      - value: |-
          ```php
          #[Route('/blog/{slug}', name: 'blog_post')]
          public function show(string $slug, string $_locale = 'en'): Response
          { /* ... */ }
          ```
        correct: true
    help: Default values for special parameters like `_locale` can be set via the
      `defaults` option or by providing a default value in the controller method
      signature. https://symfony.com/doc/current/routing.html#_snippet_28
  - question: Which of the following describes the behavior of
      `UrlGeneratorInterface::ABSOLUTE_PATH` when generating a URL in Symfony 7?
    answers:
      - value: It generates a URL relative to the web root (e.g., `/blog/my-post`).
        correct: true
      - value: It generates a full URL including scheme and host (e.g.,
          `https://example.com/blog/my-post`).
        correct: false
      - value: It generates a URL relative to the current script (e.g., `../my-post`).
        correct: false
      - value: It generates a URL without the scheme (e.g.,
          `//example.com/blog/my-post`).
        correct: false
    help: The `ABSOLUTE_PATH` constant is used for generating URLs that start with a
      slash and are relative to the domain root.
      https://symfony.com/doc/current/routing.html#_snippet_55
  - question: When defining a route in Symfony 7 using PHP attributes, how can you
      apply a prefix of `/api` and a name prefix of `api_` to all routes within
      a controller class?
    answers:
      - value: |-
          ```php
          #[Route('/api', name: 'api_')]
          class ApiController extends AbstractController
          { /* ... */ }
          ```
        correct: true
      - value: |-
          ```php
          #[RoutePrefix('/api', namePrefix: 'api_')]
          class ApiController extends AbstractController
          { /* ... */ }
          ```
        correct: false
      - value: |-
          ```php
          #[Route(path: '/api', name: 'api_')]
          class ApiController extends AbstractController
          { /* ... */ }
          ```
        correct: false
    help: The `#[Route]` attribute can be applied at the class level to define a
      common prefix and name prefix for all routes within that controller.
      https://symfony.com/doc/current/routing.html#_snippet_33
  - question: Which of the following is a valid way to define a route in Symfony 7
      using PHP attributes, where the `slug` parameter is optional and defaults
      to `default-slug`?
    answers:
      - value: >-
          ```php

          #[Route('/blog/{slug}', name: 'blog_entry', defaults: ['slug' =>
          'default-slug'])]

          public function entry(string $slug): Response

          { /* ... */ }

          ```
        correct: true
      - value: >-
          ```php

          #[Route('/blog/{slug?}', name: 'blog_entry', defaults: ['slug' =>
          'default-slug'])]

          public function entry(string $slug): Response

          { /* ... */ }

          ```
        correct: false
      - value: |-
          ```php
          #[Route('/blog/{slug}', name: 'blog_entry')]
          public function entry(string $slug = 'default-slug'): Response
          { /* ... */ }
          ```
        correct: true
    help: Optional parameters can be defined by providing a default value in the
      `defaults` option of the route or by setting a default value for the
      corresponding controller argument.
      https://symfony.com/doc/current/routing.html#_snippet_19
  - question: What is the purpose of the `_locale` special internal routing
      attribute in Symfony 7?
    answers:
      - value: It is used to explicitly set the language for the current request.
        correct: true
      - value: It defines the default timezone for the application.
        correct: false
      - value: It controls the currency format for international users.
        correct: false
      - value: It is only used when generating localized URLs.
        correct: false
    help: The `_locale` attribute is a fundamental part of Symfony's
      internationalization features.
      https://symfony.com/doc/current/routing.html#_snippet_25
  - question: When defining a route with a `condition` in Symfony 7, what does the
      `params` variable represent?
    answers:
      - value: An array of matched route parameters for the current route.
        correct: true
      - value: An array of all request query parameters.
        correct: false
      - value: An array of all default values for the route.
        correct: false
      - value: An array of all controller arguments.
        correct: false
    help: The `params` variable allows you to access the dynamic parts of the URL
      that were matched by the route.
      https://symfony.com/doc/current/routing.html#_snippet_11
  - question: You want to define a route `/download/{file}` where `file` can contain
      forward slashes (e.g., `folder/document.pdf`). How would you configure
      this requirement using YAML in Symfony 7?
    answers:
      - value: |-
          ```yaml
          download_file:
              path:       /download/{file}
              controller: App\\Controller\\DownloadController::file
              requirements:
                  file: '.+'
          ```
        correct: true
      - value: |-
          ```yaml
          download_file:
              path:       /download/{file<.+>}
              controller: App\\Controller\\DownloadController::file
          ```
        correct: false
      - value: |-
          ```yaml
          download_file:
              path:       /download/{file}
              controller: App\\Controller\\DownloadController::file
              allow_slashes: true
          ```
        correct: false
    help: The `.+` regex matches one or more characters, including slashes, allowing
      them within a route parameter.
      https://symfony.com/doc/current/routing.html#_snippet_29
  - question: Which of the following is true about the `_format` special internal
      routing attribute in Symfony 7?
    answers:
      - value: It can be defined as a route parameter in the path (e.g., `{_format}`).
        correct: true
      - value: It automatically sets the `Accept` header of the response.
        correct: false
      - value: Its value is always derived from the request's `Content-Type` header.
        correct: false
      - value: It is only used for API routes.
        correct: false
    help: The `_format` parameter can be explicitly included in the route path,
      allowing the URL to dictate the format.
      https://symfony.com/doc/current/routing.html#_snippet_25
  - question: You want to define a route `/dashboard` that only matches requests
      from `admin.example.com`. How would you configure this using YAML in
      Symfony 7?
    answers:
      - value: |-
          ```yaml
          admin_dashboard:
              path:       /dashboard
              host:       admin.example.com
              controller: App\\Controller\\AdminController::dashboard
          ```
        correct: true
      - value: |-
          ```yaml
          admin_dashboard:
              path:       /dashboard
              domain:     admin.example.com
              controller: App\\Controller\\AdminController::dashboard
          ```
        correct: false
      - value: |-
          ```yaml
          admin_dashboard:
              path:       /dashboard
              controller: App\\Controller\\AdminController::dashboard
              condition: "context.getHost() == 'admin.example.com'"
          ```
        correct: false
    help: The `host` option in YAML is used to specify a required hostname for a
      route. https://symfony.com/doc/current/routing.html#_snippet_40
  - question: Which of the following is a valid way to define a localized route in
      Symfony 7 using PHP configurator, where the `contact` route has paths
      `/contact-us` for English and `/neem-contact-op` for Dutch?
    answers:
      - value: |-
          ```php
          $routes->add('contact', [
              'en' => '/contact-us',
              'nl' => '/neem-contact-op',
          ])
              ->controller([ContactController::class, 'index'])
          ;
          ```
        correct: true
      - value: |-
          ```php
          $routes->add('contact_en', '/contact-us')
              ->controller([ContactController::class, 'index'])
              ->locale('en')
          ;
          $routes->add('contact_nl', '/neem-contact-op')
              ->controller([ContactController::class, 'index'])
              ->locale('nl')
          ;
          ```
        correct: false
      - value: |-
          ```php
          $routes->add('contact', '/contact-us')
              ->controller([ContactController::class, 'index'])
              ->setLocalizedPath('nl', '/neem-contact-op')
          ;
          ```
        correct: false
    help: The `add()` method of `RoutingConfigurator` can accept an associative
      array for locale-specific paths.
      https://symfony.com/doc/current/routing.html#_snippet_44
  - question: You want to define a route `/report/{id}` where `id` must be an
      integer, and you want to use XML configuration. Which is the correct
      syntax in Symfony 7?
    answers:
      - value: >-
          ```xml

          <route id="report_show" path="/report/{id}"
          controller="App\\Controller\\ReportController::show">
              <requirement key="id">\\d+</requirement>
          </route>

          ```
        correct: true
      - value: >-
          ```xml

          <route id="report_show" path="/report/{id<\\d+>}"
          controller="App\\Controller\\ReportController::show"/>

          ```
        correct: false
      - value: >-
          ```xml

          <route id="report_show" path="/report/{id}"
          controller="App\\Controller\\ReportController::show" type="int"/>

          ```
        correct: false
    help: In XML, requirements are defined using nested `<requirement>` tags with
      `key` and the regex value.
      https://symfony.com/doc/current/routing.html#_snippet_19
  - question: What is the purpose of the `_locale` special internal routing
      attribute in Symfony 7?
    answers:
      - value: It is used to determine the language of the content served for the
          request.
        correct: true
      - value: It specifies the default country for the user.
        correct: false
      - value: It is only used for generating URLs, not for matching.
        correct: false
      - value: It defines the character encoding of the response.
        correct: false
    help: The `_locale` attribute plays a central role in Symfony's
      internationalization features, allowing the application to adapt to
      different languages based on the URL or other factors.
      https://symfony.com/doc/current/routing.html#_snippet_25
  - question: When defining a route with a `condition` in Symfony 7, which
      expression language variable provides access to the `Request` object?
    answers:
      - value: "`request`"
        correct: true
      - value: "`http_request`"
        correct: false
      - value: "`current_request`"
        correct: false
      - value: "`this.request`"
        correct: false
    help: The `request` variable is an instance of
      `Symfony\Component\HttpFoundation\Request`, allowing access to headers,
      query parameters, and other request details.
      https://symfony.com/doc/current/routing.html#_snippet_11
  - question: You want to define a route `/api/users` that only accepts `POST`
      requests. How would you configure this using XML in Symfony 7?
    answers:
      - value: >-
          ```xml

          <route id="api_users_create" path="/api/users"
          controller="App\\Controller\\ApiController::create" methods="POST"/>

          ```
        correct: true
      - value: >-
          ```xml

          <route id="api_users_create" path="/api/users"
          controller="App\\Controller\\ApiController::create">
              <method>POST</method>
          </route>

          ```
        correct: false
      - value: >-
          ```xml

          <route id="api_users_create" path="/api/users"
          controller="App\\Controller\\ApiController::create"
          http-methods="POST"/>

          ```
        correct: false
    help: The `methods` attribute in the `<route>` tag specifies allowed HTTP
      methods. https://symfony.com/doc/current/routing.html#_snippet_6
  - question: Which of the following is true about the `_format` special internal
      routing attribute in Symfony 7?
    answers:
      - value: It influences the `Content-Type` header of the response.
        correct: true
      - value: It can be automatically determined from the URL's file extension (e.g.,
          `.json`).
        correct: true
      - value: It can be set as a default value for a route.
        correct: true
      - value: It is primarily used for routing to different template engines.
        correct: false
    help: The `_format` attribute is versatile, allowing explicit definition in the
      path, default values, and influencing response headers.
      https://symfony.com/doc/current/routing.html#_snippet_25
  - question: You want to define a route `/docs/{version}/{page}` where `version` is
      optional and defaults to `current`. How would you achieve this using XML
      in Symfony 7?
    answers:
      - value: >-
          ```xml

          <route id="doc_page" path="/docs/{version}/{page}"
          controller="App\\Controller\\DocController::show">
              <default key="version">current</default>
          </route>

          ```
        correct: true
      - value: >-
          ```xml

          <route id="doc_page" path="/docs/{version?}/{page}"
          controller="App\\Controller\\DocController::show">
              <default key="version">current</default>
          </route>

          ```
        correct: false
      - value: >-
          ```xml

          <route id="doc_page" path="/docs/{version}/{page}"
          controller="App\\Controller\\DocController::show"
          default-version="current"/>

          ```
        correct: false
    help: Default values for route parameters in XML are defined using nested
      `<default>` tags. https://symfony.com/doc/current/routing.html#_snippet_19
  - question: Which of the following is true about the `_locale` special internal
      routing attribute in Symfony 7?
    answers:
      - value: It can be part of the route path (e.g., `/{_locale}/blog`).
        correct: true
      - value: It can be set as a default value for a route.
        correct: true
      - value: It can be used to define locale-specific hostnames.
        correct: true
      - value: It is automatically detected from the user's browser settings without any
          configuration.
        correct: false
    help: The `_locale` attribute is highly configurable and can be integrated into
      paths, defaults, and even host matching for advanced internationalization.
      https://symfony.com/doc/current/routing.html#_snippet_25
  - question: You want to define a route `/admin/users` that only responds to `GET`
      requests. How would you configure this using PHP configurator in Symfony
      7?
    answers:
      - value: |-
          ```php
          $routes->add('admin_users_list', '/admin/users')
              ->controller([AdminController::class, 'list'])
              ->methods(['GET'])
          ;
          ```
        correct: true
      - value: |-
          ```php
          $routes->add('admin_users_list', '/admin/users')
              ->controller([AdminController::class, 'list'])
              ->setMethods(['GET'])
          ;
          ```
        correct: false
      - value: |-
          ```php
          $routes->add('admin_users_list', '/admin/users')
              ->controller([AdminController::class, 'list'])
              ->condition("context.getMethod() == 'GET'")
          ;
          ```
        correct: false
    help: The `methods()` method on `RoutingConfigurator` is used to restrict a
      route to specific HTTP methods.
      https://symfony.com/doc/current/routing.html#_snippet_6
  - question: What is the primary benefit of using `UrlGeneratorInterface` for URL
      generation in Symfony 7, especially in services or commands, compared to
      directly concatenating strings?
    answers:
      - value: It ensures URLs are correctly formed, including handling parameters,
          locales, and absolute/relative paths.
        correct: true
      - value: It automatically checks if the target route exists, preventing runtime
          errors.
        correct: false
      - value: It improves application performance by caching generated URLs.
        correct: false
      - value: It allows generating URLs to routes that are not publicly exposed.
        correct: false
    help: The `UrlGeneratorInterface` abstracts away the complexities of URL
      construction, ensuring consistency and correctness across the application.
      https://symfony.com/doc/current/routing.html#_snippet_55
  - question: You want to define a route `/products/{id}` where `id` must be an
      integer. How would you define this requirement using XML in Symfony 7,
      without using a separate `<requirement>` tag?
    answers:
      - value: >-
          ```xml

          <route id="product_show" path="/products/{id<\\d+>}"
          controller="App\\Controller\\ProductController::show"/>

          ```
        correct: true
      - value: >-
          ```xml

          <route id="product_show" path="/products/{id}"
          controller="App\\Controller\\ProductController::show" type="int"/>

          ```
        correct: false
      - value: >-
          ```xml

          <route id="product_show" path="/products/{id}"
          controller="App\\Controller\\ProductController::show" regex="\\d+"/>

          ```
        correct: false
    help: Inline requirements using `<regex>` syntax are supported in XML for route
      parameters. https://symfony.com/doc/current/routing.html#_snippet_18
  - question: What is the purpose of the `_fragment` special internal routing
      attribute in Symfony 7?
    answers:
      - value: It represents the part of the URL after the `#` symbol.
        correct: true
      - value: It is used to load a specific section of a page using JavaScript.
        correct: false
      - value: It defines a partial template to be rendered.
        correct: false
      - value: It's an internal Symfony identifier for route caching.
        correct: false
    help: The `_fragment` attribute corresponds to the URL fragment identifier,
      often used for client-side navigation within a single page.
      https://symfony.com/doc/current/routing.html#_snippet_25
  - question: Which of the following is true about the `stateless` option for routes
      in Symfony 7?
    answers:
      - value: It prevents Symfony from initiating a session for requests matching that
          route.
        correct: true
      - value: It is particularly useful for API endpoints that don't require session
          state.
        correct: true
      - value: "It automatically adds a `Cache-Control: no-cache` header to the
          response."
        correct: false
      - value: It forces the route to use HTTP Basic Authentication.
        correct: false
    help: The `stateless` option is a performance and correctness feature for routes
      that should not interact with the session.
      https://symfony.com/doc/current/routing.html#_snippet_47
  - question: You want to define a route `/blog/{slug}` where `slug` is optional and
      defaults to `latest`. How would you achieve this using PHP configurator in
      Symfony 7?
    answers:
      - value: |-
          ```php
          $routes->add('blog_entry', '/blog/{slug}')
              ->controller([BlogController::class, 'entry'])
              ->defaults(['slug' => 'latest'])
          ;
          ```
        correct: true
      - value: |-
          ```php
          $routes->add('blog_entry', '/blog/{slug?}')
              ->controller([BlogController::class, 'entry'])
              ->defaults(['slug' => 'latest'])
          ;
          ```
        correct: false
      - value: |-
          ```php
          $routes->add('blog_entry', '/blog/{slug}')
              ->controller([BlogController::class, 'entry'])
              ->setDefaults(['slug' => 'latest'])
          ;
          ```
        correct: false
    help: The `defaults()` method on `RoutingConfigurator` is used to provide
      default values for route parameters.
      https://symfony.com/doc/current/routing.html#_snippet_20
  - question: What is the purpose of the `_locale` special internal routing
      attribute in Symfony 7?
    answers:
      - value: It is used by Symfony's Translation component to determine the current
          language.
        correct: true
      - value: It defines the default currency for the application.
        correct: false
      - value: It is only relevant for routes with a `host` option.
        correct: false
      - value: It automatically redirects users to their preferred language version of
          the site.
        correct: false
    help: The `_locale` attribute is fundamental for internationalization, allowing
      Symfony to load the correct translations and adapt content based on the
      user's language preference.
      https://symfony.com/doc/current/routing.html#_snippet_25
