category: Symfony Architecture

questions:
  -
    question: >
      What is the primary role of Symfony Flex in a Symfony 7 application?
    answers:
      - { value: 'To simplify the installation and management of Symfony applications and their dependencies through recipes.', correct: true }
      - { value: 'To replace Composer as the sole dependency manager for PHP projects.', correct: false }
      - { value: 'To provide a graphical user interface for managing Symfony project settings.', correct: false }
      - { value: 'To automatically generate all application code, including controllers and entities.', correct: false }
    help: |
      Symfony Flex is a Composer plugin that streamlines the creation and management of Symfony applications by automating common tasks through "recipes".
      https://symfony.com/doc/current/setup/symfony_flex.html

  -
    question: >
      Which license is Symfony Framework and its components primarily distributed under?
    answers:
      - { value: 'MIT License', correct: true }
      - { value: 'GPLv3 License', correct: false }
      - { value: 'Apache License 2.0', correct: false }
      - { value: 'BSD License', correct: false }
    help: |
      Symfony is open source and released under the MIT license, which is a permissive free software license.
      https://symfony.com/doc/current/contributing/code/license.html

  -
    question: >
      What is a Symfony Component?
    answers:
      - { value: 'A standalone PHP library that can be used independently of the full Symfony Framework.', correct: true }
      - { value: 'A pre-built Symfony application ready for deployment.', correct: false }
      - { value: 'A visual element used in the Symfony profiler for debugging.', correct: false }
      - { value: 'A database abstraction layer for Symfony applications.', correct: false }
    help: |
      Symfony Components are a set of decoupled and reusable PHP libraries that form the foundation of the Symfony Framework. They can be used independently in any PHP project.
      https://symfony.com/doc/current/components/index.html

  -
    question: >
      Which of the following describes a "Bridge" in the context of Symfony architecture?
    answers:
      - { value: 'A component that integrates a third-party library with the Symfony Framework.', correct: true }
      - { value: 'A design pattern for connecting two unrelated services within an application.', correct: false }
      - { value: 'A tool for migrating data between different database systems.', correct: false }
      - { value: 'A network protocol used for inter-process communication in Symfony.', correct: false }
    help: |
      Symfony Bridges provide integration between Symfony components or the full framework and external third-party libraries (e.g., MonologBridge, TwigBridge).
      https://symfony.com/doc/current/components/index.html#bridges

  -
    question: >
      Which directory is typically used for storing application-specific PHP classes like controllers, services, and entities in a standard Symfony 7 project?
    answers:
      - { value: '`bin/`', correct: false }
      - { value: '`var/`', correct: false }
      - { value: '`src/`', correct: true }
      - { value: '`public/`', correct: false }
    help: |
      The `src/` directory is where all your application's PHP code resides, following the PSR-4 autoloading standard.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#directory-structure

  -
    question: |
      Consider the standard Symfony request handling lifecycle. Which event is dispatched *before* the controller is executed?
    answers:
      - { value: '`KernelEvents::REQUEST`', correct: true }
      - { value: '`KernelEvents::RESPONSE`', correct: false }
      - { value: '`KernelEvents::VIEW`', correct: false }
      - { value: '`KernelEvents::CONTROLLER_ARGUMENTS`', correct: false }
      - { value: '`KernelEvents::EXCEPTION`', correct: false }
    help: |
      The `KernelEvents::REQUEST` event is dispatched at the very beginning of the request handling, allowing listeners to modify the request or return a response immediately.
      https://symfony.com/doc/current/components/http_kernel/introduction.html#the-kernel-events

  -
    question: >
      How does Symfony typically handle uncaught exceptions during the request lifecycle?
    answers:
      - { value: 'It dispatches a `KernelEvents::EXCEPTION` event and then renders an error page.', correct: true }
      - { value: 'It immediately stops execution and displays a blank page.', correct: false }
      - { value: 'It logs the exception and redirects to the homepage.', correct: false }
      - { value: 'It converts all exceptions into HTTP 404 Not Found errors.', correct: false }
    help: |
      When an uncaught exception occurs, Symfony's HttpKernel dispatches the `KernelEvents::EXCEPTION` event, allowing listeners to handle the exception and potentially convert it into a `Response`.
      https://symfony.com/doc/current/components/http_kernel/introduction.html#the-kernel-events

  -
    question: >
      What is the purpose of the `EventDispatcher` component in Symfony?
    answers:
      - { value: 'To allow different parts of an application to communicate with each other in a decoupled way.', correct: true }
      - { value: 'To manage database transactions and ensure data integrity.', correct: false }
      - { value: 'To handle user authentication and authorization.', correct: false }
      - { value: 'To optimize the performance of HTTP requests.', correct: false }
    help: |
      The EventDispatcher component implements the Mediator pattern, allowing components to dispatch events and other components to listen for and react to those events without direct coupling.
      https://symfony.com/doc/current/components/event_dispatcher.html

  -
    question: >
      According to Symfony's official best practices, where should business logic primarily reside?
    answers:
      - { value: 'Directly within controllers to keep related code together.', correct: false }
      - { value: 'In dedicated service classes, injected into controllers or other services.', correct: true }
      - { value: 'In Twig templates for easier presentation layer access.', correct: false }
      - { value: 'In global helper functions for universal access.', correct: false }
    help: |
      Symfony best practices advocate for thin controllers that delegate business logic to dedicated service classes, promoting reusability, testability, and separation of concerns.
      https://symfony.com/doc/current/best_practices.html#controllers-should-be-thin

  -
    question: >
      What is the typical release cycle for a new major Symfony version (e.g., Symfony 6 to Symfony 7)?
    answers:
      - { value: 'Every 6 months', correct: false }
      - { value: 'Every 12 months', correct: true }
      - { value: 'Every 24 months', correct: false }
      - { value: 'Only when major PHP versions are released', correct: false }
    help: |
      New major Symfony versions are typically released every year, usually in November.
      https://symfony.com/releases

  -
    question: >
      What does Symfony's Backward Compatibility Promise guarantee?
    answers:
      - { value: 'That all public APIs will remain unchanged within a major version.', correct: true }
      - { value: 'That applications will always run on older PHP versions without modification.', correct: false }
      - { value: 'That all internal code can be changed without notice.', correct: false }
      - { value: 'That all third-party bundles will always be compatible with new Symfony versions.', correct: false }
    help: |
      Symfony's Backward Compatibility Promise ensures that public APIs will not change within a major version, providing stability for developers. Deprecations are introduced to signal future changes.
      https://symfony.com/doc/current/contributing/code/bc.html

  -
    question: >
      How does Symfony typically signal a feature or API that will be removed or changed in a future major version?
    answers:
      - { value: 'By immediately removing the feature without prior notice.', correct: false }
      - { value: 'By marking it as "deprecated" and issuing a deprecation notice.', correct: true }
      - { value: 'By changing its name to a new, incompatible name.', correct: false }
      - { value: 'By moving it to a separate, unsupported component.', correct: false }
    help: |
      Symfony uses deprecations to warn developers about features or APIs that will be removed or changed in the next major version, giving them time to adapt their code.
      https://symfony.com/doc/current/contributing/code/bc.html#deprecations

  -
    question: >
      Which of the following is the recommended way to override a core Symfony service's behavior?
    answers:
      - { value: 'Directly modifying the service definition in `vendor/symfony/` directory.', correct: false }
      - { value: 'Using the `decorates` option in your service definition.', correct: true }
      - { value: 'Creating a new service with the same name and hoping it overrides.', correct: false }
      - { value: 'Extending the core service class and changing its namespace.', correct: false }
    help: |
      The `decorates` option in service definitions is the official and recommended way to modify or replace a service's behavior without directly altering its original definition.
      https://symfony.com/doc/current/service_container/service_decoration.html

  -
    question: >
      Which of the following PSRs (PHP Standard Recommendations) is primarily concerned with logging interfaces, and is widely adopted by Symfony?
    answers:
      - { value: 'PSR-1 (Basic Coding Standard)', correct: false }
      - { value: 'PSR-3 (Logger Interface)', correct: true }
      - { value: 'PSR-7 (HTTP Message Interfaces)', correct: false }
      - { value: 'PSR-11 (Container Interface)', correct: false }
    help: |
      PSR-3 defines a common interface for logging libraries, which Symfony's Monolog Bridge implements, allowing for consistent logging across applications.
      https://www.php-fig.org/psr/psr-3/

  -
    question: >
      What is the purpose of the `public/index.php` file in a Symfony 7 application?
    answers:
      - { value: 'It contains all the application''s routing definitions.', correct: false }
      - { value: 'It serves as the single entry point for all web requests.', correct: true }
      - { value: 'It stores all environment variables for the application.', correct: false }
      - { value: 'It is the main configuration file for the web server.', correct: false }
    help: |
      `public/index.php` is the front controller, the single entry point for all web requests, responsible for bootstrapping the Symfony application.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#the-front-controller

  -
    question: >
      Which command would you use to list all autowirable services in your Symfony application?
    answers:
      - { value: '`php bin/console debug:container`', correct: false }
      - { value: '`php bin/console debug:autowiring`', correct: true }
      - { value: '`php bin/console debug:services`', correct: false }
      - { value: '`php bin/console list:services`', correct: false }
    help: |
      The `debug:autowiring` command shows which interfaces and classes Symfony can automatically inject into your services and controllers.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#_snippet_2

  -
    question: |
      Given the following `.env` file snippet, what is the current environment of the Symfony application?

      ```bash
      # .env
      ###> symfony/framework-bundle ###
      APP_ENV=prod
      APP_SECRET=your_secret_key
      ###< symfony/framework-bundle ###
      ```
    answers:
      - { value: '`dev`', correct: false }
      - { value: '`test`', correct: false }
      - { value: '`prod`', correct: true }
      - { value: '`staging`', correct: false }
    help: |
      The `APP_ENV` environment variable, typically defined in the `.env` file, determines the current environment of the Symfony application.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#_snippet_9

  -
    question: >
      What is the purpose of the `var/cache/` directory in a Symfony application?
    answers:
      - { value: 'To store application logs.', correct: false }
      - { value: 'To store temporary cache files generated by Symfony and its components.', correct: true }
      - { value: 'To store database migration files.', correct: false }
      - { value: 'To store user-uploaded files.', correct: false }
    help: |
      The `var/cache/` directory is used by Symfony to store all generated cache files, which include compiled service containers, routes, templates, and more, to improve performance.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#directory-structure

  -
    question: >
      Which of the following configuration formats are officially supported by Symfony 7 for defining services and routes?
    answers:
      - { value: 'JSON', correct: false }
      - { value: 'YAML', correct: true }
      - { value: 'XML', correct: true }
      - { value: 'PHP', correct: true }
      - { value: 'INI', correct: false }
    help: |
      Symfony supports YAML, XML, and PHP for defining configuration, including services, routes, and framework settings.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#_snippet_8

  -
    question: >
      When installing a new bundle via Composer (e.g., `composer require doctrine`), how does Symfony Flex typically automate its configuration?
    answers:
      - { value: 'It manually prompts the user for configuration details during installation.', correct: false }
      - { value: 'It downloads and executes a "recipe" that adds necessary configuration files and updates existing ones.', correct: true }
      - { value: 'It creates a new database and pre-populates it with default data.', correct: false }
      - { value: 'It automatically generates a new controller for the bundle.', correct: false }
    help: |
      Symfony Flex uses "recipes" to automate the installation and configuration of bundles and other dependencies, adding and modifying files as needed.
      https://symfony.com/doc/current/setup/symfony_flex.html#how-it-works

  -
    question: >
      What is the purpose of the `#[Route]` attribute in a Symfony 7 controller?
    answers:
      - { value: 'To define the template file associated with the action.', correct: false }
      - { value: 'To specify the services to be injected into the controller.', correct: false }
      - { value: 'To configure the URL path, HTTP methods, and name for a controller action.', correct: true }
      - { value: 'To declare the controller as a public service.', correct: false }
    help: |
      The `#[Route]` attribute (PHP attribute) is the recommended way to define routes directly on controller methods, specifying the path, name, and allowed HTTP methods.
      https://symfony.com/doc/current/routing.html#defining-routes-as-attributes

  -
    question: |
      Which of the following code snippets correctly injects the `Psr\Log\LoggerInterface` into a Symfony service's constructor using autowiring?
    answers:
      - { value: '`public function __construct(private LoggerInterface $logger)`', correct: true }
      - { value: '`public function __construct(private $logger)`', correct: false }
      - { value: '`public function __construct(#[Inject('logger')] private $logger)`', correct: false }
      - { value: '`public function __construct(#[Autowire(service: 'monolog.logger')] private $logger)`', correct: false }
    help: |
      Symfony's autowiring automatically resolves and injects services when you type-hint against their interfaces or classes in constructors or method arguments. `Psr\Log\LoggerInterface` is a commonly autowired interface.
      https://symfony.com/doc/current/service_container/autowiring.html

  -
    question: >
      What is the primary benefit of using the `PropertyAccess` component in Symfony?
    answers:
      - { value: 'To securely access private properties of objects without getters/setters.', correct: false }
      - { value: 'To provide a unified way to read and write values from objects or arrays using property paths.', correct: true }
      - { value: 'To generate getter and setter methods automatically for entities.', correct: false }
      - { value: 'To validate data against a set of constraints.', correct: false }
    help: |
      The PropertyAccess component allows you to read from and write to properties of objects or elements of arrays using simple string paths, abstracting away the underlying access mechanism (public properties, getters/setters, `__call`, `__get`).
      https://symfony.com/doc/current/components/property_access.html

  -
    question: |
      Given the following PHP code, what will be the output of the `var_dump` statement?

      ```php
      use Symfony\Component\PropertyAccess\PropertyAccess;

      class Person
      {
          public string $firstName;
      }

      $person = new Person();
      $propertyAccessor = PropertyAccess::createPropertyAccessorBuilder()
          ->disableExceptionOnInvalidPropertyPath()
          ->getPropertyAccessor();

      $value = $propertyAccessor->getValue($person, 'lastName');
      var_dump($value);
      ```
    answers:
      - { value: 'An instance of `NoSuchPropertyException` will be thrown.', correct: false }
      - { value: '`null`', correct: true }
      - { value: 'An empty string `""`.', correct: false }
      - { value: 'The value of `$person->firstName`.', correct: false }
    help: |
      By calling `disableExceptionOnInvalidPropertyPath()`, the `PropertyAccessor` is configured to return `null` instead of throwing a `NoSuchPropertyException` when a property path does not exist.
      https://symfony.com/doc/current/components/property_access.html#disable-exception-on-invalid-property-path

  -
    question: >
      Which component is responsible for extracting information about class properties, such as their types, descriptions, and whether they are readable or writable?
    answers:
      - { value: '`PropertyAccess` component', correct: false }
      - { value: '`Serializer` component', correct: false }
      - { value: '`PropertyInfo` component', correct: true }
      - { value: '`Validator` component', correct: false }
    help: |
      The PropertyInfo component provides an API to extract information about properties of a PHP class, including their types, descriptions, and accessors.
      https://symfony.com/doc/current/components/property_info.html

  -
    question: >
      Which of the following extractors can be used with the `PropertyInfo` component to get property type information by analyzing constructor arguments?
    answers:
      - { value: '`ReflectionExtractor`', correct: false }
      - { value: '`PhpDocExtractor`', correct: false }
      - { value: '`ConstructorExtractor`', correct: true }
      - { value: '`SerializerExtractor`', correct: false }
    help: |
      The `ConstructorExtractor` (introduced in Symfony 7.3) is specifically designed to extract property information by analyzing constructor arguments, often in conjunction with `ReflectionExtractor` or `PhpStanExtractor`.
      https://symfony.com/doc/current/components/property_info.html#constructor-extractor

  -
    question: >
      What is the purpose of the `Envelope` in the Symfony Messenger component?
    answers:
      - { value: 'It defines the database schema for messages.', correct: false }
      - { value: 'It wraps a message and allows adding metadata (stamps) during dispatch.', correct: true }
      - { value: 'It is the primary interface for sending messages to external APIs.', correct: false }
      - { value: 'It represents the final processed result of a message.', correct: false }
    help: |
      The `Envelope` is a Messenger-specific concept that wraps messages, allowing full flexibility inside the message bus by enabling the addition of useful information through *envelope stamps*.
      https://symfony.com/doc/current/components/messenger.html#_snippet_1

  -
    question: >
      In Symfony's `Config` component, what is the purpose of `arrayPrototype()` when defining a configuration tree?
    answers:
      - { value: 'To define a fixed-size array with predefined keys.', correct: false }
      - { value: 'To allow for multiple, numerically indexed instances of a complex configuration structure.', correct: true }
      - { value: 'To create an associative array where keys are automatically generated.', correct: false }
      - { value: 'To mark an array as optional in the configuration.', correct: false }
    help: |
      `arrayPrototype()` is used to define a prototype for array nodes, allowing for an arbitrary number of child elements that conform to the defined structure. This is common for lists of similar configurations (e.g., multiple database connections).
      https://symfony.com/doc/current/components/config/definition.html#prototyped-array-nodes

  -
    question: >
      Which asset configuration option in Symfony is used to globally append a query parameter (e.g., `?v=2`) to all rendered asset paths for cache busting?
    answers:
      - { value: '`json_manifest_path`', correct: false }
      - { value: '`strict_mode`', correct: false }
      - { value: '`version`', correct: true }
      - { value: '`base_path`', correct: false }
    help: |
      The `version` option in the `assets` configuration allows you to define a global version string that will be appended as a query parameter to asset URLs, forcing browsers to re-download them.
      https://symfony.com/doc/current/reference/configuration/framework.html#version

  -
    question: |
      Consider the following Symfony console command definition:

      ```php
      // src/Command/MyCommand.php
      namespace App\Command;

      use Symfony\Component\Console\Attribute\AsCommand;
      use Symfony\Component\Console\Command\Command;
      use Symfony\Component\Console\Input\InputInterface;
      use Symfony\Component\Console\Output\OutputInterface;

      #[AsCommand(name: 'app:my-command', description: 'A test command')]
      class MyCommand extends Command
      {
          protected function execute(InputInterface $input, OutputInterface $output): int
          {
              $output->writeln('Hello from my command!');
              return Command::SUCCESS;
          }
      }
      ```
      What is the purpose of the `#[AsCommand]` attribute?
    answers:
      - { value: 'To define the command''s name and description, enabling autoconfiguration.', correct: true }
      - { value: 'To mark the command as a service that can be autowired.', correct: false }
      - { value: 'To specify the default arguments and options for the command.', correct: false }
      - { value: 'To link the command to a specific database table.', correct: false }
    help: |
      The `#[AsCommand]` attribute (PHP attribute) is used to configure console commands directly in their class, including their name and description, which enables Symfony's autoconfiguration for commands.
      https://symfony.com/doc/current/console.html#configuring-the-command

  -
    question: >
      What is the primary benefit of using the Symfony `Runtime` component?
    answers:
      - { value: 'It provides a full-stack web server for development.', correct: false }
      - { value: 'It simplifies the bootstrapping process of PHP applications, allowing different entry points (web, console, etc.) to share common logic.', correct: true }
      - { value: 'It replaces Composer for managing project dependencies.', correct: false }
      - { value: 'It offers a comprehensive ORM solution for database interactions.', correct: false }
    help: |
      The Symfony Runtime component simplifies the bootstrapping of PHP applications, making it easier to create different entry points (web, console, message consumers) while sharing common initialization logic.
      https://symfony.com/doc/current/components/runtime.html

  -
    question: >
      Which of the following directories is typically used to store environment-specific configuration files in a Symfony 7 application?
    answers:
      - { value: '`src/`', correct: false }
      - { value: '`public/`', correct: false }
      - { value: '`config/packages/` and `config/services.yaml` (with `when@env` blocks)', correct: true }
      - { value: '`var/log/`', correct: false }
    help: |
      Symfony allows for environment-specific configuration within `config/packages/` and `config/services.yaml` using `when@env` blocks or separate files like `framework.yaml` and `framework_dev.yaml`.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#_snippet_8

  -
    question: >
      What is the purpose of the `composer.lock` file in a Symfony Flex project?
    answers:
      - { value: 'It locks the application to a specific Symfony version, preventing updates.', correct: false }
      - { value: 'It records the exact versions of all installed dependencies, ensuring reproducible builds.', correct: true }
      - { value: 'It stores the database schema for the application.', correct: false }
      - { value: 'It defines the autoloading rules for the project.', correct: false }
    help: |
      The `composer.lock` file records the exact version of every dependency installed in your project, ensuring that anyone else installing the project gets the exact same versions.
      https://getcomposer.org/doc/01-basic-usage.md#composer-lock-the-lock-file

  -
    question: >
      Which of the following is considered a core principle of Symfony's architecture regarding code organization?
    answers:
      - { value: 'Monolithic design where all code resides in one file.', correct: false }
      - { value: 'Strong coupling between components to ensure tight integration.', correct: false }
      - { value: 'Separation of concerns, promoting modularity and reusability.', correct: true }
      - { value: 'Extensive use of global variables for data sharing.', correct: false }
    help: |
      Symfony's architecture is built around the principle of separation of concerns, using components to provide modular and reusable functionalities.
      https://symfony.com/doc/current/quick_tour/the_architecture.html

  -
    question: >
      What is the main advantage of using PHP attributes (e.g., `#[Route]`, `#[AsCommand]`) for configuration in Symfony 7?
    answers:
      - { value: 'They are executed at runtime, making the application slower.', correct: false }
      - { value: 'They allow configuration to be defined directly alongside the code it configures, improving readability and discoverability.', correct: true }
      - { value: 'They replace the need for Composer for dependency management.', correct: false }
      - { value: 'They are only supported in development environments.', correct: false }
    help: |
      PHP attributes allow for declarative configuration directly within the code, making it more intuitive to see how a class or method is configured.
      https://symfony.com/doc/current/controller.html#attributes

  -
    question: >
      What is the purpose of the `MicroKernelTrait` in Symfony?
    answers:
      - { value: 'To enable full-stack framework features in a microservice.', correct: false }
      - { value: 'To simplify the creation of small, self-contained Symfony applications or microservices by providing common kernel functionalities.', correct: true }
      - { value: 'To convert a full Symfony application into a standalone PHP script.', correct: false }
      - { value: 'To automatically generate API documentation for a microservice.', correct: false }
    help: |
      The `MicroKernelTrait` provides a convenient way to build small, optimized Symfony applications or microservices by including essential kernel functionalities.
      https://symfony.com/doc/current/configuration/micro_kernel_trait.html

  -
    question: >
      Which of the following is a key responsibility of a `Middleware` in the Symfony Messenger component?
    answers:
      - { value: 'To serialize and send messages to a message broker.', correct: false }
      - { value: 'To retrieve messages from a queue and deserialize them.', correct: false }
      - { value: 'To handle cross-cutting concerns like logging, validation, or transactions during message dispatch.', correct: true }
      - { value: 'To execute the business logic associated with a message.', correct: false }
    help: |
      Middleware in Symfony Messenger can access the message and its envelope during dispatch, handling cross-cutting concerns like logging, validation, or transactions.
      https://symfony.com/doc/current/components/messenger.html#_snippet_1

  -
    question: >
      What is the primary goal of Symfony's adherence to PSRs (PHP Standard Recommendations)?
    answers:
      - { value: 'To enforce a specific coding style across all Symfony projects.', correct: false }
      - { value: 'To ensure interoperability and consistency with other PHP libraries and frameworks.', correct: true }
      - { value: 'To reduce the number of dependencies in Symfony applications.', correct: false }
      - { value: 'To provide a built-in ORM for database interactions.', correct: false }
    help: |
      Symfony embraces PSRs to promote interoperability, allowing developers to easily integrate Symfony components with other PSR-compliant libraries and frameworks.
      https://symfony.com/doc/current/contributing/code/standards.html

  -
    question: >
      According to Symfony's naming conventions and PSR-4, if you have a service class named `MyAwesomeService` in the `App\Service` namespace, where should its file be located?
    answers:
      - { value: '`src/Service/MyAwesomeService.php`', correct: true }
      - { value: '`config/service/MyAwesomeService.php`', correct: false }
      - { value: '`var/MyAwesomeService.php`', correct: false }
      - { value: '`public/MyAwesomeService.php`', correct: false }
    help: |
      PSR-4 autoloading, which Symfony uses, maps namespaces to directory paths. For `App\Service\MyAwesomeService`, the file should be `src/Service/MyAwesomeService.php`.
      https://www.php-fig.org/psr/psr-4/

  -
    question: >
      What is the main purpose of the `HttpKernel` component in Symfony?
    answers:
      - { value: 'To handle database connections and queries.', correct: false }
      - { value: 'To provide a system for converting a `Request` into a `Response` by dispatching events.', correct: true }
      - { value: 'To render HTML templates and manage assets.', correct: false }
      - { value: 'To manage user sessions and security tokens.', correct: false }
    help: |
      The HttpKernel component is the core of Symfony's request-response lifecycle, responsible for taking a `Request` object and returning a `Response` object, driven by a series of events.
      https://symfony.com/doc/current/components/http_kernel.html

  -
    question: >
      Which of the following is a best practice for managing environment variables in Symfony 7?
    answers:
      - { value: 'Hardcoding sensitive credentials directly in PHP files.', correct: false }
      - { value: 'Using the `.env` file for local development and environment variables (e.g., `$_SERVER`) for production.', correct: true }
      - { value: 'Storing all environment variables in the `parameters.yaml` file.', correct: false }
      - { value: 'Committing the `.env.local` file to version control.', correct: false }
    help: |
      Symfony encourages using the `.env` file for local development and relying on actual environment variables (e.g., set by your hosting provider) in production for security and flexibility. `.env.local` should not be committed.
      https://symfony.com/doc/current/configuration/secrets.html

  -
    question: >
      What is the role of the `config/bundles.php` file in a Symfony 7 application?
    answers:
      - { value: 'It defines all the application''s routes.', correct: false }
      - { value: 'It lists all the bundles enabled for different environments.', correct: true }
      - { value: 'It contains the database connection parameters.', correct: false }
      - { value: 'It stores the application''s security configuration.', correct: false }
    help: |
      `config/bundles.php` is a generated file that lists all the bundles (Symfony packages) that are enabled in your application, often with environment-specific conditions.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#directory-structure

  -
    question: >
      When should you typically consider creating a custom Symfony bundle?
    answers:
      - { value: 'For every new feature or piece of business logic in your application.', correct: false }
      - { value: 'When you need to package reusable functionality (e.g., a set of services, controllers, and configurations) that can be shared across multiple Symfony projects.', correct: true }
      - { value: 'To store your application''s Twig templates.', correct: false }
      - { value: 'To manage your Composer dependencies.', correct: false }
    help: |
      Custom bundles are best suited for packaging reusable sets of features that can be dropped into different Symfony applications, not for organizing typical application-specific code.
      https://symfony.com/doc/current/bundles.html

  -
    question: >
      Which of the following is a key benefit of Symfony's Dependency Injection Container?
    answers:
      - { value: 'It automatically generates database migrations.', correct: false }
      - { value: 'It manages the instantiation and wiring of services, promoting loose coupling and testability.', correct: true }
      - { value: 'It provides a built-in caching mechanism for HTTP responses.', correct: false }
      - { value: 'It handles all routing and URL generation.', correct: false }
    help: |
      The Dependency Injection Container is central to Symfony's architecture, managing how services are created and given their dependencies, leading to more modular and testable code.
      https://symfony.com/doc/current/service_container.html

  -
    question: >
      What is the recommended way to define services in Symfony 7 for autowiring?
    answers:
      - { value: 'Manually defining every service with its arguments in `services.yaml`.', correct: false }
      - { value: 'Using PHP attributes (`#[AsService]`) or type-hinting constructor arguments and letting Symfony autowire them.', correct: true }
      - { value: 'Storing service definitions in the `public/` directory.', correct: false }
      - { value: 'Defining services directly within controller methods.', correct: false }
    help: |
      Symfony's autowiring and autoconfiguration features, often used with PHP attributes or simple type-hinting, are the recommended way to define and manage services.
      https://symfony.com/doc/current/service_container/autowiring.html

  -
    question: >
      Which of the following describes the `RequestStack` service in Symfony?
    answers:
      - { value: 'A service that manages the history of all HTTP requests made by the application.', correct: false }
      - { value: 'A service that provides access to the current and master `Request` objects, especially useful in sub-requests.', correct: true }
      - { value: 'A service that stores user session data across multiple requests.', correct: false }
      - { value: 'A service that handles the queuing and processing of background tasks.', correct: false }
    help: |
      The `RequestStack` service allows you to access the current `Request` object, and also the "master" request in case of sub-requests (e.g., when embedding controllers).
      https://symfony.com/doc/current/components/http_foundation.html#request-stack

  -
    question: >
      What is the purpose of the `var/log/` directory in a Symfony application?
    answers:
      - { value: 'To store temporary cache files.', correct: false }
      - { value: 'To store application log files (e.g., `dev.log`, `prod.log`).', correct: true }
      - { value: 'To store database backups.', correct: false }
      - { value: 'To store compiled assets.', correct: false }
    help: |
      The `var/log/` directory is where Symfony writes its log files, which are essential for debugging and monitoring application behavior.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#directory-structure

  -
    question: >
      Which of the following is a key aspect of Symfony's approach to backward compatibility?
    answers:
      - { value: 'Breaking changes are introduced frequently without warning.', correct: false }
      - { value: 'New features are always introduced in minor versions without deprecations.', correct: false }
      - { value: 'Deprecations are introduced in minor versions to prepare for breaking changes in the next major version.', correct: true }
      - { value: 'All features are guaranteed to work indefinitely without any changes.', correct: false }
    help: |
      Symfony follows a clear backward compatibility policy: breaking changes only occur in major versions, and they are always preceded by deprecation notices in the preceding minor versions.
      https://symfony.com/doc/current/contributing/code/bc.html

  -
    question: >
      What is the significance of the `composer.json` file in a Symfony Flex project?
    answers:
      - { value: 'It contains the application''s database credentials.', correct: false }
      - { value: 'It defines the project''s dependencies and metadata, and is used by Composer to manage packages.', correct: true }
      - { value: 'It stores the compiled version of the application.', correct: false }
      - { value: 'It is the main entry point for web requests.', correct: false }
    help: |
      `composer.json` is the manifest file for Composer, defining your project's dependencies, scripts, and other metadata.
      https://getcomposer.org/doc/01-basic-usage.md#composer-json-project-setup

  -
    question: >
      Which of the following is the recommended way to manage static assets (CSS, JavaScript, images) in a Symfony 7 application?
    answers:
      - { value: 'Manually linking assets using absolute URLs in Twig templates.', correct: false }
      - { value: 'Using the `asset()` Twig function or the `AssetsExtension` in PHP, often combined with Webpack Encore or AssetMapper.', correct: true }
      - { value: 'Storing all assets directly in the `src/` directory.', correct: false }
      - { value: 'Embedding all CSS and JavaScript directly into HTML files.', correct: false }
    help: |
      Symfony provides the Asset component and integrates well with tools like Webpack Encore or AssetMapper to manage and version assets efficiently. The `asset()` function is used to generate correct asset URLs.
      https://symfony.com/doc/current/frontend.html

  -
    question: >
      What is the purpose of the `config/routes.yaml` (or `routes.xml`, `routes.php`) file in a Symfony application?
    answers:
      - { value: 'To define all services in the application.', correct: false }
      - { value: 'To configure the database connection.', correct: false }
      - { value: 'To define the URL patterns and their associated controllers or actions.', correct: true }
      - { value: 'To manage user authentication and authorization.', correct: false }
    help: |
      The `config/routes.yaml` (or its XML/PHP equivalents) is where you define the routing configuration for your application, mapping URLs to controllers.
      https://symfony.com/doc/current/routing.html

  -
    question: >
      Which of the following best describes Symfony's approach to "Framework Interoperability"?
    answers:
      - { value: 'It forces developers to use only Symfony-specific libraries.', correct: false }
      - { value: 'It designs components to be standalone and adhere to PSRs, allowing them to be used with other frameworks or standalone PHP projects.', correct: true }
      - { value: 'It provides built-in tools to convert code from other frameworks to Symfony.', correct: false }
      - { value: 'It restricts the use of third-party libraries within Symfony applications.', correct: false }
    help: |
      Symfony's components are designed to be interoperable by being decoupled and adhering to PHP Standards Recommendations (PSRs), allowing them to be used outside the full framework.
      https://symfony.com/doc/current/components/index.html

  -
    question: >
      What is the primary function of the `KernelEvents::RESPONSE` event in the Symfony request lifecycle?
    answers:
      - { value: 'To allow listeners to modify the `Request` object before controller execution.', correct: false }
      - { value: 'To allow listeners to modify the `Response` object before it is sent to the client.', correct: true }
      - { value: 'To handle exceptions that occur during the request.', correct: false }
      - { value: 'To resolve the controller arguments.', correct: false }
    help: |
      The `KernelEvents::RESPONSE` event is dispatched after the controller has returned a `Response` object, allowing listeners to modify the response (e.g., add headers, compress content) before it's sent.
      https://symfony.com/doc/current/components/http_kernel/introduction.html#the-kernel-events

  -
    question: >
      Which of the following is a standard naming convention for controller classes in Symfony?
    answers:
      - { value: 'CamelCase, ending with `Controller` (e.g., `ProductController`).', correct: true }
      - { value: 'snake_case, ending with `_controller` (e.g., `product_controller`).', correct: false }
      - { value: 'All lowercase, without any specific suffix.', correct: false }
      - { value: 'Any name, as long as it''s unique.', correct: false }
    help: |
      Symfony's best practices and common conventions suggest naming controller classes with CamelCase and appending `Controller` (e.g., `DefaultController`, `ProductController`).
      https://symfony.com/doc/current/best_practices.html#controllers

  -
    question: >
      What is the purpose of the `bin/console` executable in a Symfony 7 application?
    answers:
      - { value: 'It is the main entry point for web requests.', correct: false }
      - { value: 'It provides a command-line interface for managing and interacting with the Symfony application.', correct: true }
      - { value: 'It compiles the application''s source code into an executable binary.', correct: false }
      - { value: 'It manages the application''s database schema.', correct: false }
    help: |
      The `bin/console` script is the entry point for all console commands in a Symfony application, allowing you to run various tasks from the command line.
      https://symfony.com/doc/current/console.html

  -
    question: >
      Which of the following is an example of a "Bridge" component in Symfony?
    answers:
      - { value: '`HttpFoundation`', correct: false }
      - { value: '`DependencyInjection`', correct: false }
      - { value: '`MonologBridge`', correct: true }
      - { value: '`Routing`', correct: false }
    help: |
      `MonologBridge` integrates the popular Monolog logging library with Symfony's logging system, making it a prime example of a bridge component.
      https://symfony.com/doc/current/components/monolog.html

  -
    question: >
      What is the recommended approach for handling sensitive information (e.g., API keys, database passwords) in Symfony 7?
    answers:
      - { value: 'Storing them directly in `parameters.yaml` and committing to Git.', correct: false }
      - { value: 'Using Symfony''s built-in Secrets management or environment variables.', correct: true }
      - { value: 'Hardcoding them in a PHP class that is committed to version control.', correct: false }
      - { value: 'Encrypting them and storing the encryption key in the `.env` file.', correct: false }
    help: |
      Symfony provides a robust Secrets management system and encourages the use of environment variables for sensitive data to keep them out of version control.
      https://symfony.com/doc/current/configuration/secrets.html

  -
    question: >
      What is the purpose of the `composer install` command in a Symfony Flex project?
    answers:
      - { value: 'To update all project dependencies to their latest versions.', correct: false }
      - { value: 'To install the project''s dependencies based on the exact versions specified in `composer.lock`.', correct: true }
      - { value: 'To create a new Symfony project from scratch.', correct: false }
      - { value: 'To run the application''s test suite.', correct: false }
    help: |
      `composer install` reads the `composer.lock` file and downloads the exact versions of dependencies listed there, ensuring consistent environments.
      https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies

  -
    question: >
      Which of the following is a benefit of using Symfony's `EventDispatcher` component?
    answers:
      - { value: 'It tightly couples different parts of the application, making changes easier.', correct: false }
      - { value: 'It promotes a publish-subscribe pattern, allowing for highly decoupled and extensible code.', correct: true }
      - { value: 'It eliminates the need for dependency injection.', correct: false }
      - { value: 'It provides a built-in ORM for database interactions.', correct: false }
    help: |
      The EventDispatcher allows components to interact without direct knowledge of each other, fostering a highly extensible and maintainable codebase.
      https://symfony.com/doc/current/components/event_dispatcher.html

  -
    question: >
      What is the primary purpose of the `public/` directory in a Symfony application?
    answers:
      - { value: 'To store all application source code.', correct: false }
      - { value: 'To serve as the web root, containing publicly accessible files like `index.php` and assets.', correct: true }
      - { value: 'To store temporary cache and log files.', correct: false }
      - { value: 'To store Composer dependencies.', correct: false }
    help: |
      The `public/` directory is the web server's document root and contains the front controller (`index.php`) and all public assets.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#directory-structure

  -
    question: >
      Which of the following is a characteristic of a "Long Term Support" (LTS) release in Symfony?
    answers:
      - { value: 'It receives bug fixes and security updates for a shorter period (e.g., 8 months).', correct: false }
      - { value: 'It receives bug fixes and security updates for a longer period (e.g., 3 years for bug fixes, 4 years for security).', correct: true }
      - { value: 'It introduces major breaking changes compared to the previous version.', correct: false }
      - { value: 'It is only available for commercial projects.', correct: false }
    help: |
      LTS versions of Symfony provide extended support periods for bug fixes and security updates, making them suitable for projects requiring long-term stability.
      https://symfony.com/releases

  -
    question: >
      What is the main purpose of the `KernelEvents::CONTROLLER` event in the Symfony request lifecycle?
    answers:
      - { value: 'To resolve the controller arguments before the controller is called.', correct: false }
      - { value: 'To allow listeners to modify the controller callable before it is executed.', correct: true }
      - { value: 'To handle exceptions thrown by the controller.', correct: false }
      - { value: 'To generate the final HTTP response.', correct: false }
    help: |
      The `KernelEvents::CONTROLLER` event is dispatched after the controller has been resolved but before its arguments are resolved. It allows listeners to modify the controller callable.
      https://symfony.com/doc/current/components/http_kernel/introduction.html#the-kernel-events

  -
    question: >
      Which of the following is the correct way to define a custom Twig filter in Symfony 7 using PHP attributes?
    answers:
      - { value: 'Implementing `Twig\Extension\AbstractExtension` and using `#[AsTwigFilter]` on the method.', correct: true }
      - { value: 'Creating a service and tagging it with `twig.extension`.', correct: false }
      - { value: 'Defining the filter directly in `config/services.yaml` without a dedicated class.', correct: false }
      - { value: 'Extending `Twig_SimpleFilter` and registering it manually.', correct: false }
    help: |
      Symfony 7 leverages PHP attributes like `#[AsTwigFilter]` to simplify the registration of custom Twig filters and functions, enabling autoconfiguration.
      https://symfony.com/doc/current/templating/twig_extension.html#_snippet_6

  -
    question: >
      What is the purpose of the `config/` directory in a Symfony 7 application?
    answers:
      - { value: 'To store all application source code.', correct: false }
      - { value: 'To store all configuration files for the application, including services, routes, and packages.', correct: true }
      - { value: 'To store temporary files and logs.', correct: false }
      - { value: 'To store publicly accessible web assets.', correct: false }
    help: |
      The `config/` directory contains all the configuration files for your Symfony application, organized by purpose (e.g., `packages/`, `services.yaml`, `routes.yaml`).
      https://symfony.com/doc/current/quick_tour/the_architecture.html#directory-structure

  -
    question: >
      Which of the following best describes the "Framework Overloading" concept in Symfony?
    answers:
      - { value: 'The process of installing multiple Symfony frameworks in a single project.', correct: false }
      - { value: 'The ability to override or extend core Symfony services, templates, or other components with your own custom implementations.', correct: true }
      - { value: 'A performance optimization technique for loading framework classes faster.', correct: false }
      - { value: 'A security vulnerability that allows unauthorized access to framework internals.', correct: false }
    help: |
      Framework overloading refers to Symfony's flexibility in allowing developers to override or extend many aspects of the framework's default behavior, such as services, templates, and even parts of bundles.
      https://symfony.com/doc/current/bundles/override.html

  -
    question: >
      What is the primary benefit of using a multi-application kernel setup in Symfony?
    answers:
      - { value: 'It allows a single application to run on multiple web servers simultaneously.', correct: false }
      - { value: 'It enables hosting multiple distinct applications (e.g., admin, API) within a single Symfony project, sharing common code while maintaining separate configurations and entry points.', correct: true }
      - { value: 'It automatically generates separate database schemas for each application.', correct: false }
      - { value: 'It provides a built-in load balancer for high-traffic applications.', correct: false }
    help: |
      A multi-application kernel setup allows for better organization and management of distinct applications that share a common codebase, often seen in monorepos.
      https://symfony.com/doc/current/configuration/multiple_kernels.html

  -
    question: >
      Which of the following is a standard PHP naming convention (PSR-1/PSR-12) that Symfony adheres to for method names?
    answers:
      - { value: 'snake_case (e.g., `get_user_name()`)', correct: false }
      - { value: 'PascalCase (e.g., `GetUserName()`)', correct: false }
      - { value: 'camelCase (e.g., `getUserName()`)', correct: true }
      - { value: 'kebab-case (e.g., `get-user-name()`)', correct: false }
    help: |
      PSR-1 and PSR-12, which Symfony follows, recommend `camelCase` for method names.
      https://www.php-fig.org/psr/psr-12/

  -
    question: >
      What is the purpose of the `vendor/` directory in a Symfony application?
    answers:
      - { value: 'To store custom application code.', correct: false }
      - { value: 'To store all third-party libraries and dependencies managed by Composer.', correct: true }
      - { value: 'To store temporary cache files.', correct: false }
      - { value: 'To store publicly accessible web assets.', correct: false }
    help: |
      The `vendor/` directory is where Composer installs all your project's dependencies, including Symfony components and other third-party libraries.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#directory-structure

  -
    question: >
      Which of the following is an example of a "Component" in Symfony?
    answers:
      - { value: '`FrameworkBundle`', correct: false }
      - { value: '`HttpKernel`', correct: true }
      - { value: '`DoctrineBundle`', correct: false }
      - { value: '`SensioFrameworkExtraBundle`', correct: false }
    help: |
      `HttpKernel` is a core Symfony Component that provides the fundamental request-response flow, and can be used independently of the full framework.
      https://symfony.com/doc/current/components/http_kernel.html

  -
    question: >
      What is the primary function of the `KernelEvents::TERMINATE` event in the Symfony request lifecycle?
    answers:
      - { value: 'To stop the application immediately after a response is sent.', correct: false }
      - { value: 'To perform tasks after the response has been sent to the client, but before PHP terminates (e.g., logging, sending emails).', correct: true }
      - { value: 'To handle exceptions that occurred during the request.', correct: false }
      - { value: 'To modify the request parameters before processing.', correct: false }
    help: |
      The `KernelEvents::TERMINATE` event is dispatched after the response has been sent to the client, allowing for long-running tasks that don't need to block the user's browser.
      https://symfony.com/doc/current/components/http_kernel/introduction.html#the-kernel-events

  -
    question: >
      Which of the following is a key principle of Symfony's "Backward Compatibility Promise"?
    answers:
      - { value: 'Public APIs will never change, even across major versions.', correct: false }
      - { value: 'New features are always introduced as breaking changes.', correct: false }
      - { value: 'Internal code can change at any time without warning.', correct: true }
      - { value: 'All deprecated features are immediately removed in patch releases.', correct: false }
    help: |
      The B.C. promise applies to public APIs. Internal code, which is not part of the public API, can change without notice.
      https://symfony.com/doc/current/contributing/code/bc.html#what-is-covered-by-the-bc-promise

  -
    question: >
      How does Symfony Flex handle the initial setup of a new project (e.g., creating `config/` files, `public/index.php`)?
    answers:
      - { value: 'It requires manual creation of all necessary files and directories.', correct: false }
      - { value: 'It uses a default "skeleton" recipe to generate the basic project structure and essential files.', correct: true }
      - { value: 'It downloads a pre-built virtual machine with the project already configured.', correct: false }
      - { value: 'It prompts the user interactively for every file to be created.', correct: false }
    help: |
      When you create a new Symfony project with Flex, it applies a default "skeleton" recipe that sets up the basic directory structure and essential configuration files.
      https://symfony.com/doc/current/setup/symfony_flex.html#creating-a-new-symfony-application

  -
    question: >
      What is the purpose of the `#[AsService]` attribute (or equivalent service configuration) in Symfony 7?
    answers:
      - { value: 'To mark a class as a controller.', correct: false }
      - { value: 'To register a class as a service in the Dependency Injection Container, enabling autowiring and other service features.', correct: true }
      - { value: 'To define a database entity.', correct: false }
      - { value: 'To specify a class as a Twig extension.', correct: false }
    help: |
      The `#[AsService]` attribute (or its YAML/XML equivalent) is used to explicitly register a class as a service, making it available for dependency injection and other container features.
      https://symfony.com/doc/current/service_container.html#defining-services-in-php-attributes

  -
    question: >
      Which of the following is a core principle of Symfony's release management regarding new features?
    answers:
      - { value: 'New features are only introduced in LTS versions.', correct: false }
      - { value: 'New features are introduced in minor versions (e.g., 6.1, 6.2) and are backward compatible.', correct: true }
      - { value: 'New features always require a major version upgrade.', correct: false }
      - { value: 'New features are released daily without a fixed schedule.', correct: false }
    help: |
      New features are introduced in minor versions and are always backward compatible within the same major version.
      https://symfony.com/releases

  -
    question: >
      What is the recommended way to handle data validation in Symfony 7 applications?
    answers:
      - { value: 'Manually writing validation logic in every controller action.', correct: false }
      - { value: 'Using the `Validator` component with constraints defined via PHP attributes or YAML/XML.', correct: true }
      - { value: 'Relying solely on database constraints for data integrity.', correct: false }
      - { value: 'Implementing custom validation functions in Twig templates.', correct: false }
    help: |
      The Symfony Validator component provides a powerful and flexible way to validate data using constraints, which can be defined via PHP attributes, YAML, or XML.
      https://symfony.com/doc/current/validation.html

  -
    question: >
      What is the purpose of the `KernelEvents::VIEW` event in the Symfony request lifecycle?
    answers:
      - { value: 'To render the final HTML output directly.', correct: false }
      - { value: 'To convert a non-Response return value from a controller (e.g., an array of data) into a `Response` object.', correct: true }
      - { value: 'To handle user authentication.', correct: false }
      - { value: 'To log errors before they are displayed.', correct: false }
    help: |
      The `KernelEvents::VIEW` event is dispatched when a controller returns something other than a `Response` object, allowing listeners to transform that return value into a `Response`.
      https://symfony.com/doc/current/components/http_kernel/introduction.html#the-kernel-events

  -
    question: >
      Which of the following describes Symfony's approach to "Deprecations Best Practices"?
    answers:
      - { value: 'Deprecations are only announced in blog posts, not in the code.', correct: false }
      - { value: 'Deprecations are introduced with clear warnings (e.g., `E_USER_DEPRECATED` notices) to give developers time to migrate before removal in a major version.', correct: true }
      - { value: 'Deprecated features are immediately removed without any warning period.', correct: false }
      - { value: 'Deprecations only apply to internal Symfony code, not public APIs.', correct: false }
    help: |
      Symfony provides clear deprecation notices to guide developers through API changes, ensuring a smooth upgrade path between major versions.
      https://symfony.com/doc/current/contributing/code/bc.html#deprecations

  -
    question: >
      What is the role of the `composer update` command in a Symfony Flex project?
    answers:
      - { value: 'To install the project''s dependencies based on `composer.lock`.', correct: false }
      - { value: 'To update all project dependencies to their latest allowed versions according to `composer.json` and update `composer.lock`.', correct: true }
      - { value: 'To remove all installed dependencies from the `vendor/` directory.', correct: false }
      - { value: 'To create a new Symfony project.', correct: false }
    help: |
      `composer update` resolves the latest compatible versions of your dependencies based on `composer.json` and updates the `composer.lock` file.
      https://getcomposer.org/doc/01-basic-usage.md#updating-dependencies

  -
    question: >
      Which of the following is a standard naming convention for route names in Symfony?
    answers:
      - { value: 'Using spaces (e.g., `my new route`)', correct: false }
      - { value: 'Using `.` as a separator (e.g., `app.product.show`)', correct: true }
      - { value: 'Using `_` as a separator (e.g., `app_product_show`)', correct: true }
      - { value: 'Using `camelCase` (e.g., `appProductShow`)', correct: false }
    help: |
      Symfony's routing component allows both `.` and `_` as separators for route names, with `.` often preferred for hierarchical organization (e.g., `app.product.show`).
      https://symfony.com/doc/current/routing.html#route-names

  -
    question: >
      What is the purpose of the `autoload_runtime.php` file generated by Symfony Flex?
    answers:
      - { value: 'It contains all the application''s routing definitions.', correct: false }
      - { value: 'It is part of the `Runtime` component and simplifies the bootstrapping of different application types (web, console) by loading necessary classes and environment variables.', correct: true }
      - { value: 'It defines the database schema for the application.', correct: false }
      - { value: 'It is a configuration file for the web server.', correct: false }
    help: |
      `autoload_runtime.php` is part of the Symfony Runtime component, providing a flexible way to bootstrap your application based on the execution context (web, console).
      https://symfony.com/doc/current/components/runtime.html

  -
    question: >
      Which of the following is a common practice for organizing controllers in a Symfony 7 application?
    answers:
      - { value: 'Placing all controllers in the root of the `src/` directory.', correct: false }
      - { value: 'Organizing them into subdirectories within `src/Controller/` based on their domain or feature (e.g., `src/Controller/Admin/`, `src/Controller/Api/`).', correct: true }
      - { value: 'Storing them in the `public/` directory for direct access.', correct: false }
      - { value: 'Defining them as anonymous functions in `config/routes.yaml`.', correct: false }
    help: |
      Organizing controllers into subdirectories within `src/Controller/` based on domain or feature helps maintain a clean and scalable codebase.
      https://symfony.com/doc/current/best_practices.html#controllers

  -
    question: >
      What is the purpose of the `KernelEvents::EXCEPTION` event in the Symfony request lifecycle?
    answers:
      - { value: 'To log all successful requests.', correct: false }
      - { value: 'To allow listeners to handle exceptions thrown during the request and potentially return a `Response`.', correct: true }
      - { value: 'To validate incoming request data.', correct: false }
      - { value: 'To dispatch a new request after the current one finishes.', correct: false }
    help: |
      The `KernelEvents::EXCEPTION` event is crucial for centralized exception handling, allowing you to catch and process exceptions before they result in a generic error page.
      https://symfony.com/doc/current/components/http_kernel/introduction.html#the-kernel-events

  -
    question: >
      Which of the following is a key advantage of Symfony's component-based architecture?
    answers:
      - { value: 'It requires all projects to use the full Symfony Framework.', correct: false }
      - { value: 'It allows developers to use only the parts of Symfony they need, promoting lightweight and flexible applications.', correct: true }
      - { value: 'It restricts the use of external PHP libraries.', correct: false }
      - { value: 'It provides a graphical user interface for application development.', correct: false }
    help: |
      The component-based architecture allows developers to pick and choose only the necessary components, making Symfony highly flexible and adaptable to various project needs.
      https://symfony.com/doc/current/components/index.html

  -
    question: >
      What is the purpose of the `MicroKernelTrait::registerBundles()` method when building a micro-kernel in Symfony?
    answers:
      - { value: 'To define the application''s routing configuration.', correct: false }
      - { value: 'To register the bundles that should be enabled for the application.', correct: true }
      - { value: 'To configure the dependency injection container.', correct: false }
      - { value: 'To handle HTTP requests directly.', correct: false }
    help: |
      The `registerBundles()` method in `MicroKernelTrait` is where you define which Symfony bundles your micro-application will use.
      https://symfony.com/doc/current/configuration/micro_kernel_trait.html#_snippet_5

  -
    question: >
      Which of the following is a common practice for organizing services in a Symfony 7 application?
    answers:
      - { value: 'Defining all services in a single, large `services.yaml` file.', correct: false }
      - { value: 'Organizing services into logical groups within `config/services.yaml` or separate files in `config/services/` based on their domain or functionality.', correct: true }
      - { value: 'Creating a new service file for every single class in the `src/` directory.', correct: false }
      - { value: 'Placing service definitions directly inside controller classes.', correct: false }
    help: |
      Organizing service definitions logically, either within `services.yaml` or in separate files, improves maintainability and readability.
      https://symfony.com/doc/current/service_container.html#configuring-services

  -
    question: >
      What is the primary benefit of Symfony's "Backward Compatibility Promise" for developers?
    answers:
      - { value: 'It eliminates the need for testing applications after upgrades.', correct: false }
      - { value: 'It ensures that applications can be upgraded to new major versions with minimal effort, thanks to a predictable deprecation process.', correct: true }
      - { value: 'It guarantees that all third-party bundles will always be compatible.', correct: false }
      - { value: 'It allows developers to ignore deprecation warnings without consequences.', correct: false }
    help: |
      The B.C. promise, combined with deprecations, aims to make upgrades between major Symfony versions as smooth as possible by providing a clear path for migration.
      https://symfony.com/doc/current/contributing/code/bc.html

  -
    question: >
      Which of the following is a standard naming convention for configuration files in Symfony?
    answers:
      - { value: 'Using `.` as a separator for environment-specific files (e.g., `framework.yaml`, `framework_dev.yaml`).', correct: false }
      - { value: 'Using `_` as a separator for environment-specific files (e.g., `framework.yaml`, `framework_dev.yaml`).', correct: true }
      - { value: 'Using `camelCase` for all configuration files.', correct: false }
      - { value: 'Any name, as long as the extension is correct.', correct: false }
    help: |
      Symfony often uses `_` to denote environment-specific configuration files (e.g., `framework_dev.yaml`, `services_test.yaml`).
      https://symfony.com/doc/current/quick_tour/the_architecture.html#_snippet_8

  -
    question: >
      What is the purpose of the `symfony.lock` file in a Symfony Flex project?
    answers:
      - { value: 'It stores the exact versions of all Composer dependencies.', correct: false }
      - { value: 'It tracks which Symfony Flex recipes have been applied to the project.', correct: true }
      - { value: 'It defines the application''s database schema.', correct: false }
      - { value: 'It is a temporary file generated during Composer updates.', correct: false }
    help: |
      The `symfony.lock` file is specific to Symfony Flex and tracks the state of applied recipes, ensuring consistent project setup across environments.
      https://symfony.com/doc/current/setup/symfony_flex.html#how-it-works

  -
    question: >
      Which of the following is a key benefit of Symfony's adherence to PSR-11 (Container Interface)?
    answers:
      - { value: 'It provides a standard way to log messages.', correct: false }
      - { value: 'It defines a common interface for dependency injection containers, promoting interoperability between different container implementations.', correct: true }
      - { value: 'It specifies how HTTP messages should be represented.', correct: false }
      - { value: 'It defines a standard for autoloading classes.', correct: false }
    help: |
      PSR-11 provides a common interface for dependency injection containers, allowing developers to switch between different container implementations without changing their service consumers.
      https://www.php-fig.org/psr/psr-11/

  -
    question: >
      What is the main advantage of using PHP for Symfony configuration files (e.g., `config/services.php`) compared to YAML or XML?
    answers:
      - { value: 'PHP configuration files are always faster to parse than YAML or XML.', correct: false }
      - { value: 'PHP configuration allows for more complex logic, conditional statements, and direct manipulation of the container.', correct: true }
      - { value: 'PHP configuration files are automatically committed to version control.', correct: false }
      - { value: 'PHP configuration files do not require any caching.', correct: false }
    help: |
      PHP configuration files offer the most flexibility, allowing for dynamic and conditional configuration logic that is not possible with static YAML or XML.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#_snippet_8

  -
    question: >
      Which of the following is a core principle of Symfony's code organization regarding controllers?
    answers:
      - { value: 'Controllers should contain all business logic and database interactions.', correct: false }
      - { value: 'Controllers should be "thin," primarily responsible for orchestrating services and returning responses.', correct: true }
      - { value: 'Controllers should directly render HTML without using a templating engine.', correct: false }
      - { value: 'Controllers should be responsible for managing user sessions and security.', correct: false }
    help: |
      Symfony best practices emphasize keeping controllers thin, delegating complex tasks to dedicated services.
      https://symfony.com/doc/current/best_practices.html#controllers-should-be-thin

  -
    question: >
      What is the purpose of the `KernelEvents::CONTROLLER_ARGUMENTS` event in the Symfony request lifecycle?
    answers:
      - { value: 'To modify the controller itself before execution.', correct: false }
      - { value: 'To allow listeners to modify the arguments passed to the controller method before it is called.', correct: true }
      - { value: 'To resolve the controller itself from the request.', correct: false }
      - { value: 'To handle exceptions thrown during argument resolution.', correct: false }
    help: |
      The `KernelEvents::CONTROLLER_ARGUMENTS` event is dispatched after the controller has been resolved but before its arguments are passed to the controller method, allowing for modification of those arguments.
      https://symfony.com/doc/current/components/http_kernel/introduction.html#the-kernel-events

  -
    question: >
      Which of the following is a standard PHP naming convention (PSR-1/PSR-12) that Symfony adheres to for class names?
    answers:
      - { value: 'snake_case (e.g., `my_class`)', correct: false }
      - { value: 'PascalCase (e.g., `MyClass`)', correct: true }
      - { value: 'camelCase (e.g., `myClass`)', correct: false }
      - { value: 'kebab-case (e.g., `my-class`)', correct: false }
    help: |
      PSR-1 and PSR-12, which Symfony follows, recommend `PascalCase` for class names.
      https://www.php-fig.org/psr/psr-12/

  -
    question: >
      What is the main difference between a "Standard" Symfony release and an "LTS" (Long Term Support) release?
    answers:
      - { value: 'Standard releases are only for development, LTS for production.', correct: false }
      - { value: 'Standard releases have shorter support periods (typically 8 months), while LTS releases have significantly longer support periods (e.g., 3-4 years).', correct: true }
      - { value: 'LTS releases introduce more breaking changes than standard releases.', correct: false }
      - { value: 'Standard releases are free, while LTS releases require a paid license.', correct: false }
    help: |
      Symfony offers both standard releases with shorter support cycles and LTS releases designed for long-term stability with extended support.
      https://symfony.com/releases

  -
    question: >
      What is the purpose of the `assets.json_manifest_path` configuration option in Symfony's FrameworkBundle?
    answers:
      - { value: 'To define a global version string for all assets.', correct: false }
      - { value: 'To specify the path to a `manifest.json` file used for asset versioning (e.g., generated by Webpack Encore).', correct: true }
      - { value: 'To set a base URL for all assets.', correct: false }
      - { value: 'To enable strict mode for asset validation.', correct: false }
    help: |
      The `json_manifest_path` option allows Symfony to read asset versions from a `manifest.json` file, commonly used with asset build tools like Webpack Encore.
      https://symfony.com/doc/current/reference/configuration/framework.html#json-manifest-path

  -
    question: >
      What is the primary purpose of the `KernelEvents::REQUEST` event in the Symfony request lifecycle?
    answers:
      - { value: 'To render the final HTTP response.', correct: false }
      - { value: 'To allow listeners to modify the `Request` object or return a `Response` directly at the very beginning of the request handling process.', correct: true }
      - { value: 'To resolve the controller and its arguments.', correct: false }
      - { value: 'To handle exceptions that occur during the request.', correct: false }
    help: |
      The `KernelEvents::REQUEST` event is the first event dispatched in the request handling process, making it ideal for early modifications or returning a response (e.g., for security checks).
      https://symfony.com/doc/current/components/http_kernel/introduction.html#the-kernel-events

  -
    question: >
      Which of the following is a key aspect of Symfony's "Release Management and Roadmap Schedule"?
    answers:
      - { value: 'New major versions are released unpredictably.', correct: false }
      - { value: 'Symfony follows a predictable release schedule with annual major releases and regular minor/patch releases.', correct: true }
      - { value: 'Only LTS versions receive security updates.', correct: false }
      - { value: 'The roadmap is kept secret until a new version is released.', correct: false }
    help: |
      Symfony has a well-defined and public release schedule, including annual major releases and regular maintenance releases, providing predictability for planning.
      https://symfony.com/releases

  -
    question: >
      Which of the following PSRs (PHP Standard Recommendations) is primarily concerned with HTTP Message Interfaces (Request and Response objects)?
    answers:
      - { value: 'PSR-1 (Basic Coding Standard)', correct: false }
      - { value: 'PSR-3 (Logger Interface)', correct: false }
      - { value: 'PSR-7 (HTTP Message Interfaces)', correct: true }
      - { value: 'PSR-11 (Container Interface)', correct: false }
    help: |
      PSR-7 defines interfaces for HTTP messages, including `RequestInterface` and `ResponseInterface`, which Symfony's `HttpFoundation` component implements.
      https://www.php-fig.org/psr/psr-7/

  -
    question: >
      What is the purpose of the `assets.version_format` configuration option in Symfony's FrameworkBundle?
    answers:
      - { value: 'To specify the file path to a manifest.json file.', correct: false }
      - { value: 'To define a `sprintf` pattern for constructing asset paths with versioning (e.g., query string or path-based).', correct: true }
      - { value: 'To enable or disable strict mode for asset validation.', correct: false }
      - { value: 'To set a base path for all assets.', correct: false }
    help: |
      `version_format` allows fine-grained control over how the asset version is incorporated into the URL, supporting both query string and path-based versioning.
      https://symfony.com/doc/current/reference/configuration/framework.html#version-format

  -
    question: >
      Which of the following is a common naming convention for services defined in Symfony's Dependency Injection Container?
    answers:
      - { value: 'Using `.` as a separator for hierarchical service names (e.g., `app.mailer.transport`).', correct: true }
      - { value: 'Using `_` as a separator for service names (e.g., `app_mailer_transport`).', correct: true }
      - { value: 'Using `camelCase` for all service names.', correct: false }
      - { value: 'Service names must always be fully qualified class names.', correct: false }
    help: |
      Symfony commonly uses both `.` and `_` as separators for service IDs, often preferring `.` for hierarchical organization.
      https://symfony.com/doc/current/service_container.html#service-ids

  -
    question: >
      What is the purpose of the `src/Kernel.php` file in a Symfony 7 application?
    answers:
      - { value: 'It defines all the application''s routes.', correct: false }
      - { value: 'It is the main entry point for the Symfony application, responsible for bootstrapping the framework and registering bundles.', correct: true }
      - { value: 'It contains all the application''s database entities.', correct: false }
      - { value: 'It stores environment variables.', correct: false }
    help: |
      `src/Kernel.php` is the core of your Symfony application, extending `AbstractKernel` and responsible for loading bundles, configuring the container, and defining routes.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#the-kernel

  -
    question: >
      Which of the following is a key benefit of Symfony Flex's "recipes"?
    answers:
      - { value: 'They allow manual configuration of every bundle after installation.', correct: false }
      - { value: 'They automate the setup and configuration of bundles and other dependencies, reducing boilerplate and ensuring best practices.', correct: true }
      - { value: 'They provide a graphical interface for managing project settings.', correct: false }
      - { value: 'They replace Composer for dependency management.', correct: false }
    help: |
      Flex recipes are automated scripts that configure packages, create files, and apply best practices, significantly simplifying project setup and maintenance.
      https://symfony.com/doc/current/setup/symfony_flex.html#how-it-works

  -
    question: >
      What is the primary purpose of the `composer require` command in a Symfony Flex project?
    answers:
      - { value: 'To update all installed dependencies to their latest versions.', correct: false }
      - { value: 'To install a new package (dependency) and automatically apply its Symfony Flex recipe.', correct: true }
      - { value: 'To remove an existing package from the project.', correct: false }
      - { value: 'To run the application''s test suite.', correct: false }
    help: |
      `composer require` adds a new package to your `composer.json` and installs it, and if a Flex recipe exists for the package, it will be applied automatically.
      https://symfony.com/doc/current/setup/symfony_flex.html#installing-new-dependencies

  -
    question: >
      Which of the following is a standard PHP naming convention (PSR-1/PSR-12) that Symfony adheres to for property names?
    answers:
      - { value: 'snake_case (e.g., `user_name`)', correct: false }
      - { value: 'PascalCase (e.g., `UserName`)', correct: false }
      - { value: 'camelCase (e.g., `userName`)', correct: true }
      - { value: 'kebab-case (e.g., `user-name`)', correct: false }
    help: |
      PSR-12, which Symfony follows, recommends `camelCase` for property names.
      https://www.php-fig.org/psr/psr-12/

  -
    question: >
      What is the purpose of the `throw_exception_on_invalid_index` option in the `property_accessor` configuration of FrameworkBundle?
    answers:
      - { value: 'When enabled, the property_accessor service throws an exception when you try to access an invalid index of an array.', correct: true }
      - { value: 'When enabled, the property_accessor service returns `null` for invalid array indexes.', correct: false }
      - { value: 'It controls whether exceptions are thrown for invalid object properties.', correct: false }
      - { value: 'It enables magic `__call()` for property access.', correct: false }
    help: |
      This option, when enabled, changes the default behavior of `PropertyAccessor` to throw an exception for invalid array indexes, which can be useful for stricter error handling.
      https://symfony.com/doc/current/reference/configuration/framework.html#throw-exception-on-invalid-index

  -
    question: >
      What is the primary purpose of the `assets.strict_mode` configuration option in Symfony's FrameworkBundle?
    answers:
      - { value: 'To disable asset versioning.', correct: false }
      - { value: 'To assert that all requested assets are present in the manifest file, helping detect typos or missing assets.', correct: true }
      - { value: 'To force all asset URLs to be absolute.', correct: false }
      - { value: 'To enable automatic compilation of assets.', correct: false }
    help: |
      When `strict_mode` is enabled, the asset component will throw an exception if an asset requested via `asset()` is not found in the configured manifest file.
      https://symfony.com/doc/current/reference/configuration/framework.html#strict-mode

  -
    question: >
      Which of the following is a key aspect of Symfony's "Framework Interoperability"?
    answers:
      - { value: 'Symfony components can only be used within a full Symfony application.', correct: false }
      - { value: 'Symfony components are designed to be standalone and adhere to common PHP standards (PSRs), allowing them to be easily integrated into other PHP projects or frameworks.', correct: true }
      - { value: 'Symfony provides built-in tools to convert code from other frameworks to Symfony.', correct: false }
      - { value: 'Symfony requires all third-party libraries to be written specifically for Symfony.', correct: false }
    help: |
      Symfony's commitment to interoperability means its components are reusable and can be integrated into diverse PHP ecosystems.
      https://symfony.com/doc/current/components/index.html

  -
    question: >
      What is the purpose of the `property_info.with_constructor_extractor` configuration option in Symfony 7.3+?
    answers:
      - { value: 'To enable extraction of property information from PHP DocBlocks only.', correct: false }
      - { value: 'To configure the `PropertyInfo` service to extract property information from constructor arguments using the `ConstructorExtractor`.', correct: true }
      - { value: 'To disable all property information extraction.', correct: false }
      - { value: 'To only extract property information from public properties.', correct: false }
    help: |
      Introduced in Symfony 7.3, `with_constructor_extractor` allows the `PropertyInfo` component to leverage constructor arguments for property type and other information.
      https://symfony.com/doc/current/reference/configuration/framework.html#property-info-with-constructor-extractor

  -
    question: >
      Which of the following is a standard PHP naming convention (PSR-1/PSR-12) that Symfony adheres to for constants?
    answers:
      - { value: 'camelCase (e.g., `myConstant`)', correct: false }
      - { value: 'ALL_CAPS_WITH_UNDERSCORES (e.g., `MY_CONSTANT`)', correct: true }
      - { value: 'PascalCase (e.g., `MyConstant`)', correct: false }
      - { value: 'snake_case (e.g., `my_constant`)', correct: false }
    help: |
      PSR-1 and PSR-12, which Symfony follows, recommend `ALL_CAPS_WITH_UNDERSCORES` for constants.
      https://www.php-fig.org/psr/psr-12/

  -
    question: >
      What is the purpose of the `assets.base_path` configuration option in Symfony's FrameworkBundle?
    answers:
      - { value: 'To define a global version for all assets.', correct: false }
      - { value: 'To set a base URL or path that is prepended to all asset URLs generated by the `asset()` function.', correct: true }
      - { value: 'To specify the path to a manifest.json file.', correct: false }
      - { value: 'To enable strict mode for asset validation.', correct: false }
    help: |
      The `base_path` option is useful when your assets are served from a subdirectory or a CDN.
      https://symfony.com/doc/current/reference/configuration/framework.html#base-path

  -
    question: >
      Which of the following is a key benefit of Symfony's use of PHP attributes for configuration?
    answers:
      - { value: 'It makes the application run faster by compiling attributes into bytecode.', correct: false }
      - { value: 'It centralizes configuration in a single YAML file, making it easier to manage.', correct: false }
      - { value: 'It allows configuration to be defined directly within the relevant PHP code, improving discoverability and reducing context switching.', correct: true }
      - { value: 'It eliminates the need for Composer for dependency management.', correct: false }
    help: |
      PHP attributes provide a concise and co-located way to configure various Symfony features, such as routing, services, and console commands.
      https://symfony.com/doc/current/controller.html#attributes

  -
    question: >
      What is the purpose of the `var/` directory in a Symfony application?
    answers:
      - { value: 'To store all application source code.', correct: false }
      - { value: 'To store temporary application files, including cache, logs, and sessions.', correct: true }
      - { value: 'To store publicly accessible web assets.', correct: false }
      - { value: 'To store Composer dependencies.', correct: false }
    help: |
      The `var/` directory is used for volatile data like cache, logs, and sessions, which are typically not committed to version control.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#directory-structure

  -
    question: >
      Which of the following is a key aspect of Symfony's "Backward Compatibility Promise"?
    answers:
      - { value: 'It guarantees that all third-party bundles will always be compatible with new Symfony versions.', correct: false }
      - { value: 'It ensures that public APIs will not change within a major version, providing stability for developers.', correct: true }
      - { value: 'It means that deprecated features are immediately removed without warning.', correct: false }
      - { value: 'It applies only to internal Symfony code, not to public APIs.', correct: false }
    help: |
      The B.C. promise is a core commitment to stability for public APIs within a major version.
      https://symfony.com/doc/current/contributing/code/bc.html

  -
    question: >
      What is the purpose of the `MicroKernelTrait::configureRoutes()` method when building a micro-kernel in Symfony?
    answers:
      - { value: 'To register the bundles that should be enabled for the application.', correct: false }
      - { value: 'To define the application''s routing configuration.', correct: true }
      - { value: 'To configure the dependency injection container.', correct: false }
      - { value: 'To handle HTTP requests directly.', correct: false }
    help: |
      The `configureRoutes()` method in `MicroKernelTrait` is where you define the routes for your micro-application.
      https://symfony.com/doc/current/configuration/multiple_kernels.html#_snippet_3

  -
    question: >
      Which of the following describes the responsibility of a "Handler" in the Symfony Messenger component?
    answers:
      - { value: 'To serialize and send messages to a message broker.', correct: false }
      - { value: 'To retrieve messages from a queue and deserialize them.', correct: false }
      - { value: 'To handle messages by executing the business logic applicable to them.', correct: true }
      - { value: 'To add metadata to messages before dispatch.', correct: false }
    help: |
      Handlers are responsible for the actual business logic that processes a given message.
      https://symfony.com/doc/current/components/messenger.html#_snippet_1

  -
    question: >
      What is the primary purpose of the `MicroKernelTrait::configureContainer()` method when building a micro-kernel in Symfony?
    answers:
      - { value: 'To register the bundles that should be enabled for the application.', correct: false }
      - { value: 'To define the application''s routing configuration.', correct: false }
      - { value: 'To configure the dependency injection container, including services and parameters.', correct: true }
      - { value: 'To handle HTTP requests directly.', correct: false }
    help: |
      The `configureContainer()` method in `MicroKernelTrait` is where you load and configure the dependency injection container for your micro-application.
      https://symfony.com/doc/current/configuration/multiple_kernels.html#_snippet_3

  -
    question: >
      Which of the following is a key benefit of Symfony's use of the `Psr\Log\LoggerInterface`?
    answers:
      - { value: 'It forces the use of Monolog as the only logging library.', correct: false }
      - { value: 'It provides a standardized interface for logging, allowing developers to switch logging implementations without changing application code.', correct: true }
      - { value: 'It automatically sends logs to a remote server.', correct: false }
      - { value: 'It eliminates the need for log files.', correct: false }
    help: |
      By adhering to PSR-3, Symfony ensures that any PSR-3 compliant logger can be used interchangeably, promoting flexibility.
      https://www.php-fig.org/psr/psr-3/

  -
    question: >
      Which of the following is a standard PHP naming convention (PSR-1/PSR-12) that Symfony adheres to for interface names?
    answers:
      - { value: 'snake_case (e.g., `my_interface`)', correct: false }
      - { value: 'PascalCase, typically ending with `Interface` (e.g., `MyInterface`)', correct: true }
      - { value: 'camelCase (e.g., `myInterface`)', correct: false }
      - { value: 'kebab-case (e.g., `my-interface`)', correct: false }
    help: |
      PSR-1 and PSR-12, which Symfony follows, recommend `PascalCase` for interface names, often with an `Interface` suffix for clarity.
      https://www.php-fig.org/psr/psr-12/

  -
    question: >
      What is the purpose of the `bin/` directory in a Symfony application?
    answers:
      - { value: 'To store all application source code.', correct: false }
      - { value: 'To store executable scripts, such as `bin/console`.', correct: true }
      - { value: 'To store temporary files and logs.', correct: false }
      - { value: 'To store publicly accessible web assets.', correct: false }
    help: |
      The `bin/` directory contains executable scripts, most notably `bin/console`, which provides the command-line interface for Symfony.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#directory-structure

  -
    question: >
      Which of the following is a key characteristic of Symfony's approach to "Deprecations Best Practices"?
    answers:
      - { value: 'Deprecations are only visible in the Symfony source code comments.', correct: false }
      - { value: 'Deprecation notices are triggered at runtime (e.g., `E_USER_DEPRECATED`) to alert developers when they are using deprecated features.', correct: true }
      - { value: 'Deprecated features are automatically replaced with new ones by Symfony Flex.', correct: false }
      - { value: 'Deprecations are only announced in major version releases.', correct: false }
    help: |
      Symfony actively uses runtime deprecation notices to ensure developers are aware of upcoming changes and can migrate their code proactively.
      https://symfony.com/doc/current/contributing/code/bc.html#deprecations

  -
    question: >
      What is the main reason for Symfony's recommendation to keep controllers "thin"?
    answers:
      - { value: 'To improve the performance of HTTP requests by reducing controller file size.', correct: false }
      - { value: 'To promote separation of concerns, making business logic reusable, testable, and independent of the HTTP layer.', correct: true }
      - { value: 'To simplify the routing configuration.', correct: false }
      - { value: 'To reduce the number of services injected into controllers.', correct: false }
    help: |
      Thin controllers delegate complex logic to services, adhering to the Single Responsibility Principle and improving code quality.
      https://symfony.com/doc/current/best_practices.html#controllers-should-be-thin

  -
    question: >
      Which of the following is a key aspect of Symfony's "Release Management and Roadmap Schedule"?
    answers:
      - { value: 'Security issues are only addressed in major releases.', correct: false }
      - { value: 'Security fixes are backported to all actively maintained versions (LTS and standard).', correct: true }
      - { value: 'The roadmap is determined solely by community contributions.', correct: false }
      - { value: 'New features are prioritized over stability.', correct: false }
    help: |
      Symfony prioritizes security, backporting fixes to all supported versions to ensure ongoing protection for applications.
      https://symfony.com/releases

  -
    question: >
      What is the purpose of the `composer dump-autoload` command in a Symfony application?
    answers:
      - { value: 'To install new Composer dependencies.', correct: false }
      - { value: 'To update the Composer autoloader files, which is necessary after adding new classes or changing namespaces.', correct: true }
      - { value: 'To remove all installed Composer dependencies.', correct: false }
      - { value: 'To run the application''s test suite.', correct: false }
    help: |
      `composer dump-autoload` regenerates the autoloader files, ensuring that newly added classes can be found by the application.
      https://getcomposer.org/doc/01-basic-usage.md#autoloading

  -
    question: >
      Which of the following is a common practice for organizing templates in a Symfony 7 application?
    answers:
      - { value: 'Storing all templates in the `public/` directory.', correct: false }
      - { value: 'Organizing them into subdirectories within `templates/` based on their domain or feature (e.g., `templates/product/`, `templates/security/`).', correct: true }
      - { value: 'Embedding all HTML directly into controller methods.', correct: false }
      - { value: 'Using a single `base.html.twig` file for all content.', correct: false }
    help: |
      Organizing templates logically within the `templates/` directory improves maintainability and discoverability.
      https://symfony.com/doc/current/templating.html#template-naming

  -
    question: >
      What is the primary role of the `#[AsTwigFilter]` attribute in Symfony 7?
    answers:
      - { value: 'To define a Twig function.', correct: false }
      - { value: 'To register a PHP method as a custom Twig filter, enabling autoconfiguration.', correct: true }
      - { value: 'To inject services into a Twig extension.', correct: false }
      - { value: 'To define a Twig global variable.', correct: false }
    help: |
      The `#[AsTwigFilter]` attribute simplifies the process of creating and registering custom Twig filters, making them automatically available in your templates.
      https://symfony.com/doc/current/templating/twig_extension.html#_snippet_6

  -
    question: >
      Which of the following is a key benefit of Symfony's "Framework Interoperability" for developers?
    answers:
      - { value: 'It allows developers to use Symfony components in non-Symfony projects, increasing code reuse and flexibility.', correct: true }
      - { value: 'It forces all PHP projects to adopt Symfony as their primary framework.', correct: false }
      - { value: 'It eliminates the need for Composer for dependency management.', correct: false }
      - { value: 'It provides a built-in ORM for all database systems.', correct: false }
    help: |
      The interoperability of Symfony components means they can be leveraged in a wider range of PHP applications, not just full Symfony projects.
      https://symfony.com/doc/current/components/index.html

  -
    question: >
      What is the purpose of the `config/services.yaml` (or `services.xml`, `services.php`) file in a Symfony application?
    answers:
      - { value: 'To define all the application''s routes.', correct: false }
      - { value: 'To configure the Dependency Injection Container, defining services, parameters, and their relationships.', correct: true }
      - { value: 'To store environment variables.', correct: false }
      - { value: 'To manage user authentication and authorization.', correct: false }
    help: |
      `config/services.yaml` is the primary file for configuring your application's services, including their definitions, arguments, and tags.
      https://symfony.com/doc/current/service_container.html#configuring-services

  -
    question: >
      Which of the following is a key characteristic of Symfony's "Backward Compatibility Promise"?
    answers:
      - { value: 'It applies to all internal classes and methods.', correct: false }
      - { value: 'It applies to public APIs (classes, methods, services, configuration) within a major version.', correct: true }
      - { value: 'It guarantees that all third-party bundles will always be compatible.', correct: false }
      - { value: 'It means that deprecated features are immediately removed without warning.', correct: false }
    help: |
      The B.C. promise specifically covers public APIs, ensuring stability for developers who rely on them.
      https://symfony.com/doc/current/contributing/code/bc.html#what-is-covered-by-the-bc-promise

  -
    question: >
      What is the primary purpose of the `KernelEvents::FINISH_REQUEST` event in the Symfony request lifecycle?
    answers:
      - { value: 'To send the response to the client.', correct: false }
      - { value: 'To allow listeners to perform tasks after the controller has returned a response, but before the `KernelEvents::RESPONSE` event is dispatched.', correct: true }
      - { value: 'To handle exceptions that occurred during the request.', correct: false }
      - { value: 'To resolve the controller arguments.', correct: false }
    help: |
      The `KernelEvents::FINISH_REQUEST` event is dispatched after the controller has returned a response, but before the `KernelEvents::RESPONSE` event, allowing for final modifications or cleanup related to the request.
      https://symfony.com/doc/current/components/http_kernel/introduction.html#the-kernel-events

  -
    question: >
      Which of the following is a standard PHP naming convention (PSR-1/PSR-12) that Symfony adheres to for namespace names?
    answers:
      - { value: 'snake_case (e.g., `my_namespace`)', correct: false }
      - { value: 'PascalCase (e.g., `MyNamespace`)', correct: true }
      - { value: 'camelCase (e.g., `myNamespace`)', correct: false }
      - { value: 'kebab-case (e.g., `my-namespace`)', correct: false }
    help: |
      PSR-1 and PSR-12, which Symfony follows, recommend `PascalCase` for namespace names.
      https://www.php-fig.org/psr/psr-12/