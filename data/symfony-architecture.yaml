category: Symfony Architecture
questions:
  -
    question: 'What is the primary role of Symfony Flex?'
    answers:
      - { value: 'To provide a full-stack MVC framework for rapid application development.', correct: false }
      - { value: 'To automate the installation and configuration of Symfony packages and bundles via Composer recipes.', correct: true }
      - { value: 'To replace Composer as the primary dependency manager for Symfony projects.', correct: false }
      - { value: 'To generate boilerplate code for controllers, entities, and forms.', correct: false }
    help: |
      Symfony Flex is a Composer plugin that automates the installation and configuration of Symfony packages.
      https://github.com/symfony/symfony-docs/blob/7.3/quick_tour/flex_recipes.rst#_snippet_1
  -
    question: 'How does Symfony Flex determine which recipes to apply when a package is installed?'
    answers:
      - { value: 'It reads a global configuration file on the developer''s machine.', correct: false }
      - { value: 'It checks a central Symfony Flex server for registered package aliases and their associated recipes.', correct: true }
      - { value: 'It analyzes the package''s `composer.json` for a `symfony-recipe` key.', correct: false }
      - { value: 'It prompts the user to manually select a recipe from a list.', correct: false }
    help: |
      Symfony Flex resolves package aliases to official recipes from a central server.
      https://github.com/symfony/symfony-docs/blob/7.3/quick_tour/flex_recipes.rst#_snippet_1
  -
    question: 'Which Composer command is used to install a Symfony package and leverage Flex recipes?'
    answers:
      - { value: '`composer flex:install <package-name>`', correct: false }
      - { value: '`composer symfony:require <package-name>`', correct: false }
      - { value: '`composer require <package-name>`', correct: true }
      - { value: '`composer add <package-name>`', correct: false }
    help: |
      Symfony Flex integrates directly with `composer require`.
      https://github.com/symfony/symfony-docs/blob/7.3/setup.rst#_snippet_8
  -
    question: 'Where can you customize the default directories used by Symfony Flex (e.g., `src/`, `config/`)?'
    answers:
      - { value: 'In the `app/config/parameters.yaml` file.', correct: false }
      - { value: 'In the `extra` section of your `composer.json` file.', correct: true }
      - { value: 'Via environment variables set in the `.env` file.', correct: false }
      - { value: 'Through a custom Flex plugin configuration.', correct: false }
    help: |
      The `src-dir` and other directory paths can be customized in `composer.json`.
      https://github.com/symfony/symfony-docs/blob/7.3/setup/flex.rst#_snippet_6
  -
    question: 'What is the purpose of a Flex recipe''s `ref` field in a private recipe repository?'
    answers:
      - { value: 'It specifies the minimum PHP version required by the recipe.', correct: false }
      - { value: 'It defines the Composer package name for the recipe.', correct: false }
      - { value: 'It is a unique identifier (checksum) used by Composer to track recipe modifications.', correct: true }
      - { value: 'It indicates the type of application the recipe is intended for (e.g., web, console).', correct: false }
    help: |
      The `ref` field is a unique identifier, often a commit hash, for tracking recipe changes.
      https://github.com/symfony/symfony-docs/blob/7.3/setup/flex_private_recipes.rst#_snippet_0
  -
    question: 'What is the core principle behind Symfony''s component-based architecture?'
    answers:
      - { value: 'To provide a monolithic framework with tightly coupled features.', correct: false }
      - { value: 'To offer reusable, decoupled PHP libraries that can be used independently or together.', correct: true }
      - { value: 'To enforce a strict Model-View-Controller (MVC) pattern in all applications.', correct: false }
      - { value: 'To prioritize convention over configuration for all aspects of development.', correct: false }
    help: |
      Symfony is built as a set of decoupled components.
      https://symfony.com/doc/current/components.html
  -
    question: 'Which Symfony component provides an object-oriented abstraction layer for HTTP requests and responses?'
    answers:
      - { value: '`HttpFoundation`', correct: true }
      - { value: '`HttpKernel`', correct: false }
      - { value: '`Routing`', correct: false }
      - { value: '`EventDispatcher`', correct: false }
    help: |
      The HttpFoundation component provides classes for handling HTTP requests and responses.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_foundation.rst#_snippet_0
  -
    question: 'Which component is responsible for handling events and dispatching them to listeners and subscribers?'
    answers:
      - { value: '`DependencyInjection`', correct: false }
      - { value: '`EventDispatcher`', correct: true }
      - { value: '`Config`', correct: false }
      - { value: '`Messenger`', correct: false }
    help: |
      The EventDispatcher component implements the Mediator design pattern.
      https://github.com/symfony/symfony-docs/blob/7.3/components/event_dispatcher.rst#_snippet_0
  -
    question: 'Which component is used for accessing properties of objects or arrays using a simple string notation (e.g., `user.address.street`)?'
    answers:
      - { value: '`PropertyInfo`', correct: false }
      - { value: '`Serializer`', correct: false }
      - { value: '`PropertyAccess`', correct: true }
      - { value: '`Form`', correct: false }
    help: |
      The PropertyAccess component provides utilities for reading and writing to an object or array.
      https://github.com/symfony/symfony-docs/blob/7.3/components/property_access.rst#_snippet_0
  -
    question: 'Which component helps in building robust command-line applications?'
    answers:
      - { value: '`Process`', correct: false }
      - { value: '`Console`', correct: true }
      - { value: '`Yaml`', correct: false }
      - { value: '`Finder`', correct: false }
    help: |
      The Console component allows you to create command-line commands.
      https://github.com/symfony/symfony-docs/blob/7.3/components/console/events.rst#_snippet_0
  -
    question: 'What is the recommended top-level directory structure for a Symfony 7 application?'
    answers:
      - { value: '`app/`, `src/`, `web/`', correct: false }
      - { value: '`bin/`, `config/`, `public/`, `src/`, `var/`', correct: true }
      - { value: '`bundles/`, `Resources/`, `app/`', correct: false }
      - { value: '`library/`, `modules/`, `templates/`', correct: false }
    help: |
      Symfony Flex applications follow a standard directory structure.
      https://github.com/symfony/symfony-docs/blob/7.3/best_practices.rst#_snippet_1
  -
    question: 'Where should application-specific PHP classes (e.g., controllers, services, entities) typically reside in a Symfony Flex project?'
    answers:
      - { value: 'In the `app/` directory.', correct: false }
      - { value: 'In the `src/` directory, under the main application namespace (e.g., `App\`).', correct: true }
      - { value: 'In the `vendor/` directory.', correct: false }
      - { value: 'In the `bin/` directory.', correct: false }
    help: |
      The `src/` directory is where your application''s PHP code lives.
      https://github.com/symfony/symfony-docs/blob/7.3/best_practices.rst#_snippet_1
  -
    question: 'What is the purpose of the `config/` directory in a Symfony application?'
    answers:
      - { value: 'To store all application logs.', correct: false }
      - { value: 'To contain all Composer dependencies.', correct: false }
      - { value: 'To hold the application''s configuration files (services, routes, packages, etc.).', correct: true }
      - { value: 'To store static assets like CSS and JavaScript.', correct: false }
    help: |
      The `config/` directory contains all the configuration files.
      https://github.com/symfony/symfony-docs/blob/7.3/best_practices.rst#_snippet_1
  -
    question: 'Where are Twig templates typically stored in a Symfony application?'
    answers:
      - { value: 'In the `public/templates/` directory.', correct: false }
      - { value: 'In the `var/templates/` directory.', correct: false }
      - { value: 'In the `templates/` directory at the project root.', correct: true }
      - { value: 'Within each bundle''s `Resources/views/` directory.', correct: false }
    help: |
      Templates are stored in the `templates/` directory.
      https://github.com/symfony/symfony-docs/blob/7.3/quick_tour/flex_recipes.rst#_snippet_4
  -
    question: 'What is the recommended way to define application-wide configuration parameters in Symfony?'
    answers:
      - { value: 'Directly in PHP files using global variables.', correct: false }
      - { value: 'In the `parameters` section of `config/services.yaml` (or XML/PHP equivalent).', correct: true }
      - { value: 'As constants within the `Kernel` class.', correct: false }
      - { value: 'Using `.ini` files in the root directory.', correct: false }
    help: |
      Parameters are defined in `config/services.yaml` and should follow naming conventions.
      https://github.com/symfony/symfony-docs/blob/7.3/best_practices.rst#_snippet_2
  -
    question: 'What is the main purpose of the `HttpKernel` component in Symfony''s request handling process?'
    answers:
      - { value: 'To manage database connections and ORM entities.', correct: false }
      - { value: 'To provide a flexible architecture for converting a `Request` into a `Response`.', correct: true }
      - { value: 'To handle asset versioning and URL generation.', correct: false }
      - { value: 'To render Twig templates and manage form submissions.', correct: false }
    help: |
      The HttpKernel component handles the conversion of a Request to a Response.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_kernel.rst#_snippet_1
  -
    question: 'Which Symfony class represents an incoming HTTP request and provides methods to access its data?'
    answers:
      - { value: '`Symfony\Component\HttpFoundation\ServerRequest`', correct: false }
      - { value: '`Symfony\Component\HttpFoundation\Request`', correct: true }
      - { value: '`Symfony\Component\HttpFoundation\HttpRequest`', correct: false }
      - { value: '`Symfony\Component\HttpFoundation\IncomingRequest`', correct: false }
    help: |
      The Request class is an object-oriented representation of the raw HTTP request.
      https://github.com/symfony/symfony-docs/blob/7.3/introduction/http_fundamentals.rst#_snippet_5
  -
    question: 'What is the role of the `RequestStack` service in Symfony?'
    answers:
      - { value: 'It stores all HTTP requests made during the application''s lifetime for debugging purposes.', correct: false }
      - { value: 'It manages a stack of `Request` objects, allowing access to the current (main or sub) request.', correct: true }
      - { value: 'It is responsible for routing incoming requests to the correct controller.', correct: false }
      - { value: 'It provides a cache for frequently accessed request parameters.', correct: false }
    help: |
      The RequestStack service provides access to the current request and its parent requests.
      https://github.com/symfony/symfony-docs/blob/7.3/service_container/request.rst#_snippet_0
  -
    question: 'How does Symfony typically resolve controller method arguments (e.g., `Request $request`, `string $name`)?'
    answers:
      - { value: 'It uses reflection to guess the argument values based on their names.', correct: false }
      - { value: 'It relies on the `ArgumentResolver` to match arguments with values from the `Request` attributes, type-hints, and custom value resolvers.', correct: true }
      - { value: 'It expects all arguments to be explicitly passed from the routing configuration.', correct: false }
      - { value: 'It automatically injects all registered services into controller arguments by default.', correct: false }
    help: |
      Symfony''s ArgumentResolver handles controller argument resolution.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_kernel.rst#_snippet_10
  -
    question: 'Which event is the first to be dispatched during the `HttpKernel::handle()` method execution?'
    answers:
      - { value: '`kernel.response`', correct: false }
      - { value: '`kernel.controller`', correct: false }
      - { value: '`kernel.request`', correct: true }
      - { value: '`kernel.exception`', correct: false }
    help: |
      `kernel.request` is the first event dispatched in the HttpKernel.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_kernel.rst#_snippet_4
  -
    question: 'Which Symfony event is dispatched when an exception occurs during the request handling process?'
    answers:
      - { value: '`kernel.error`', correct: false }
      - { value: '`kernel.terminate`', correct: false }
      - { value: '`kernel.exception`', correct: true }
      - { value: '`kernel.fatal_error`', correct: false }
    help: |
      The `kernel.exception` event is dispatched when an exception is thrown.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/events.rst#_snippet_11
  -
    question: 'How can you map a specific PHP exception to a custom HTTP status code in Symfony''s configuration?'
    answers:
      - { value: 'By throwing `Symfony\Component\HttpFoundation\Response` directly with the desired status code.', correct: false }
      - { value: 'By configuring the `framework.exceptions` section in `config/packages/` files.', correct: true }
      - { value: 'By implementing a custom `ExceptionConverterInterface`.', correct: false }
      - { value: 'By defining a global `try-catch` block in `public/index.php`.', correct: false }
    help: |
      The `framework.exceptions` configuration allows mapping exceptions to HTTP status codes.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#_snippet_38
  -
    question: 'What is the purpose of `Symfony\Component\HttpKernel\Exception\HttpExceptionInterface`?'
    answers:
      - { value: 'It provides a way to log HTTP-related errors to a database.', correct: false }
      - { value: 'It defines a contract for exceptions that carry an HTTP status code and optional headers.', correct: true }
      - { value: 'It automatically redirects the user to an error page when thrown.', correct: false }
      - { value: 'It is a base class for all exceptions thrown by Symfony components.', correct: false }
    help: |
      `HttpException` and its interface allow exceptions to carry HTTP status codes and headers.
      https://github.com/symfony/symfony-docs/blob/7.3/controller.rst#_snippet_19
  -
    question: 'How can you prevent the Symfony test client from catching exceptions during functional tests?'
    answers:
      - { value: 'By setting `APP_ENV=test` in the `.env.test` file.', correct: false }
      - { value: 'By calling `$client->disableExceptionHandling();`.', correct: false }
      - { value: 'By calling `$client->catchExceptions(false);`.', correct: true }
      - { value: 'By adding a `throw_exceptions: true` configuration in `config/packages/test/framework.yaml`.', correct: false }
    help: |
      `$client->catchExceptions(false)` makes PHPUnit report exceptions directly.
      https://github.com/symfony/symfony-docs/blob/7.3/testing.rst#_snippet_37
  -
    question: 'What is the default behavior of the Symfony kernel regarding uncaught `Throwable` exceptions?'
    answers:
      - { value: 'It logs them and immediately terminates the application with a generic error message.', correct: false }
      - { value: 'It converts them into appropriate HTTP responses (e.g., 500 Internal Server Error).', correct: true }
      - { value: 'It re-throws them, expecting the web server to handle the error.', correct: false }
      - { value: 'It sends an email notification to the developer without affecting the user experience.', correct: false }
    help: |
      The `handle_all_throwables` option controls whether the kernel catches all `Throwable` exceptions.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#_snippet_46
  -
    question: 'What is the purpose of the `EventDispatcher` component?'
    answers:
      - { value: 'To manage database transactions and entity persistence.', correct: false }
      - { value: 'To provide a centralized system for components to communicate through events.', correct: true }
      - { value: 'To handle routing and URL generation.', correct: false }
      - { value: 'To create and validate web forms.', correct: false }
    help: |
      The EventDispatcher component implements the Mediator design pattern.
      https://github.com/symfony/symfony-docs/blob/7.3/components/event_dispatcher.rst#_snippet_0
  -
    question: 'How can you register a class as an event listener in Symfony using service tags?'
    answers:
      - { value: 'By implementing `EventListenerInterface` and autowiring it.', correct: false }
      - { value: 'By adding the `#[AsEventListener]` attribute to the class or method, or tagging the service with `kernel.event_listener`.', correct: true }
      - { value: 'By manually adding it to the `EventDispatcher` in `public/index.php`.', correct: false }
      - { value: 'By extending `AbstractEventListener` and overriding the `registerEvents()` method.', correct: false }
    help: |
      Listeners can be registered via `#[AsEventListener]` attribute or `kernel.event_listener` tag.
      https://github.com/symfony/symfony-docs/blob/7.3/event_dispatcher.rst#_snippet_1
      https://github.com/symfony/symfony-docs/blob/7.3/event_dispatcher.rst#_snippet_3
  -
    question: 'Which interface must a class implement to be considered an event subscriber?'
    answers:
      - { value: '`Psr\EventDispatcher\EventSubscriberInterface`', correct: false }
      - { value: '`Symfony\Component\EventDispatcher\EventSubscriberInterface`', correct: true }
      - { value: '`Symfony\Contracts\EventDispatcher\EventSubscriber`', correct: false }
      - { value: '`Symfony\Component\HttpKernel\EventListener\SubscriberInterface`', correct: false }
    help: |
      Event subscribers implement `EventSubscriberInterface` to define their subscribed events.
      https://github.com/symfony/symfony-docs/blob/7.3/components/event_dispatcher.rst#_snippet_12
  -
    question: 'What is the effect of calling `stopPropagation()` on an event object within a listener?'
    answers:
      - { value: 'It throws an exception, halting the request processing.', correct: false }
      - { value: 'It prevents any further listeners for that specific event from being called.', correct: true }
      - { value: 'It re-dispatches the event with a higher priority.', correct: false }
      - { value: 'It logs the event and its listeners to the debug toolbar.', correct: false }
    help: |
      `stopPropagation()` prevents further listeners from being invoked for the current event.
      https://github.com/symfony/symfony-docs/blob/7.3/components/event_dispatcher.rst#_snippet_19
  -
    question: 'Which kernel event is dispatched after a controller returns a value that is *not* a `Response` object?'
    answers:
      - { value: '`kernel.response`', correct: false }
      - { value: '`kernel.terminate`', correct: false }
      - { value: '`kernel.view`', correct: true }
      - { value: '`kernel.controller_arguments`', correct: false }
    help: |
      The `kernel.view` event is dispatched when a controller returns something other than a `Response`.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_kernel.rst#_snippet_12
  -
    question: 'What is the recommended way to create a new Symfony 7 project?'
    answers:
      - { value: 'Manually create the directory structure and install components via Composer.', correct: false }
      - { value: 'Use the Symfony CLI tool: `symfony new my_project_directory`.', correct: true }
      - { value: 'Download a ZIP archive from symfony.com and extract it.', correct: false }
      - { value: 'Execute `composer create-project symfony/skeleton my_project_directory` and then manually configure it.', correct: false }
    help: |
      The Symfony CLI tool simplifies project creation.
      https://github.com/symfony/symfony-docs/blob/7.3/best_practices.rst#_snippet_0
  -
    question: 'Where should global configuration parameters be defined in a Symfony application?'
    answers:
      - { value: 'Directly in `public/index.php`.', correct: false }
      - { value: 'In the `parameters` section of `config/services.yaml` (or XML/PHP equivalent).', correct: true }
      - { value: 'As environment variables only, never in configuration files.', correct: false }
      - { value: 'In a custom `parameters.php` file included by the kernel.', correct: false }
    help: |
      Parameters are defined in `config/services.yaml` and should follow naming conventions.
      https://github.com/symfony/symfony-docs/blob/7.3/best_practices.rst#_snippet_2
  -
    question: 'What is the recommended approach for defining configuration values that are shared across multiple parts of your application, including Twig templates or Doctrine entities?'
    answers:
      - { value: 'Using global PHP variables.', correct: false }
      - { value: 'Defining them as public constants within a relevant PHP class (e.g., an entity).', correct: true }
      - { value: 'Injecting them directly into services via constructor arguments.', correct: false }
      - { value: 'Storing them in the session for global access.', correct: false }
    help: |
      Class constants are recommended for global configuration values.
      https://github.com/symfony/symfony-docs/blob/7.3/best_practices.rst#_snippet_3
  -
    question: 'What is a recommended practice for testing all public URLs of a Symfony application to ensure they return successful responses?'
    answers:
      - { value: 'Manually browsing all pages after each deployment.', correct: false }
      - { value: 'Implementing a smoke test using PHPUnit with a data provider for URLs.', correct: true }
      - { value: 'Using a third-party website monitoring service only.', correct: false }
      - { value: 'Checking server access logs for 200 status codes.', correct: false }
    help: |
      Smoke tests with PHPUnit and data providers are a good practice.
      https://github.com/symfony/symfony-docs/blob/7.3/best_practices.rst#_snippet_4
  -
    question: 'When modifying Webpack Encore configuration, what is a key best practice to avoid overwriting default settings?'
    answers:
      - { value: 'Always re-generate `webpack.config.js` from scratch after each change.', correct: false }
      - { value: 'Use `Object.assign()` to merge new configurations with existing ones.', correct: false }
      - { value: 'Modify existing arrays or objects (e.g., `config.resolve.extensions.push()`) rather than reassigning them.', correct: true }
      - { value: 'Store custom configurations in a separate file and import them.', correct: false }
    help: |
      Always modify existing objects/arrays in Webpack Encore config, don''t overwrite.
      https://github.com/symfony/symfony-docs/blob/7.3/frontend/encore/advanced-config.rst#_snippet_0
  -
    question: 'What is the typical release cycle for Symfony minor versions (e.g., 6.3 to 6.4)?'
    answers:
      - { value: 'Every two years.', correct: false }
      - { value: 'Every six months.', correct: true }
      - { value: 'Monthly.', correct: false }
      - { value: 'Annually.', correct: false }
    help: |
      Symfony usually releases minor versions every six months.
      Source: https://symfony.com/releases
  -
    question: 'How long are Symfony Long Term Support (LTS) versions maintained for bug fixes and security fixes?'
    answers:
      - { value: '1 year for bug fixes, 2 years for security fixes.', correct: false }
      - { value: '3 years for bug fixes, 4 years for security fixes.', correct: true }
      - { value: '5 years for both bug and security fixes.', correct: false }
      - { value: 'Until the next major version is released.', correct: false }
    help: |
      Symfony LTS versions have extended maintenance periods.
      Source: https://symfony.com/releases
  -
    question: 'What is the purpose of the `symfony/flex` `endpoint` configuration in `composer.json`?'
    answers:
      - { value: 'To define the default Composer repository for all packages.', correct: false }
      - { value: 'To specify the URL of a private Symfony Flex recipe repository.', correct: true }
      - { value: 'To enable or disable Symfony Flex for the project.', correct: false }
      - { value: 'To configure the API endpoint for Symfony''s built-in HTTP client.', correct: false }
    help: |
      The `endpoint` configuration points Flex to recipe repositories.
      https://github.com/symfony/symfony-docs/blob/7.3/setup/flex_private_recipes.rst#_snippet_7
  -
    question: 'What is the recommended command to update all Symfony packages in a project to their latest compatible versions?'
    answers:
      - { value: '`composer update symfony/*`', correct: true }
      - { value: '`composer upgrade symfony`', correct: false }
      - { value: '`composer install symfony`', correct: false }
      - { value: '`symfony update`', correct: false }
    help: |
      `composer update symfony/*` updates all Symfony-related packages.
      https://github.com/symfony/symfony-docs/blob/7.3/setup/unstable_versions.rst#_snippet_3
  -
    question: 'What is the main benefit of using Symfony Flex recipes for release management?'
    answers:
      - { value: 'They allow developers to skip Composer updates entirely.', correct: false }
      - { value: 'They provide automated configuration changes and file management during package updates, simplifying upgrades.', correct: true }
      - { value: 'They enforce specific coding standards across all installed packages.', correct: false }
      - { value: 'They replace the need for version control systems like Git.', correct: false }
    help: |
      Flex recipes automate configuration, simplifying upgrades.
      https://github.com/symfony/symfony-docs/blob/7.3/quick_tour/flex_recipes.rst#_snippet_1
  -
    question: 'What is Symfony''s backward compatibility promise regarding public APIs?'
    answers:
      - { value: 'Public APIs may change at any time without prior notice.', correct: false }
      - { value: 'Public APIs are guaranteed to remain unchanged across all minor and major versions.', correct: false }
      - { value: 'Public APIs are stable within a major version, and breaking changes are introduced only in new major versions with deprecation notices in previous minor versions.', correct: true }
      - { value: 'Only interfaces are guaranteed to be backward compatible; concrete classes can change freely.', correct: false }
    help: |
      Symfony follows a strict backward compatibility policy.
      https://symfony.com/doc/current/contributing/code/bc.html
  -
    question: 'Which types of changes are generally allowed in a minor Symfony release without breaking backward compatibility?'
    answers:
      - { value: 'Removing public methods or properties.', correct: false }
      - { value: 'Changing the name of public methods.', correct: false }
      - { value: 'Adding new public methods or properties.', correct: true }
      - { value: 'Changing the return type of public methods without deprecation.', correct: false }
    help: |
      Adding public methods or properties is generally allowed in minor releases.
      https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/bc.rst#_snippet_0
  -
    question: 'How can you safely add a new optional argument to a public method in a minor Symfony release without breaking existing callers?'
    answers:
      - { value: 'By adding the argument directly with a default value and no deprecation.', correct: false }
      - { value: 'By introducing a new method with the argument and deprecating the old one.', correct: false }
      - { value: 'By initially adding the argument as a commented-out parameter in the signature and using `func_num_args()` and `func_get_arg()` for backward compatibility, along with a deprecation notice.', correct: true }
      - { value: 'It is not possible to add new arguments without breaking backward compatibility.', correct: false }
    help: |
      Using `func_num_args()` and `func_get_arg()` with deprecation allows safe argument addition.
      https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/bc.rst#_snippet_2
      https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/bc.rst#_snippet_4
  -
    question: 'What is the recommended way to check for API differences between Symfony versions in your code, instead of relying on `Kernel::VERSION_ID`?'
    answers:
      - { value: 'Using `if/else` statements based on `Kernel::VERSION_ID`.', correct: false }
      - { value: 'Checking for the existence of specific methods or classes using `method_exists()` or `class_exists()`.', correct: true }
      - { value: 'Relying on Composer''s version constraints to handle compatibility automatically.', correct: false }
      - { value: 'Writing separate codebases for each Symfony version.', correct: false }
    help: |
      `method_exists()` is the recommended way to check for API changes.
      https://github.com/symfony/symfony-docs/blob/7.3/setup/bundles.rst#_snippet_7
  -
    question: 'When a public method''s default argument value changes in a future major version, how should this be communicated to users in a minor release?'
    answers:
      - { value: 'By simply changing the default value without any notification.', correct: false }
      - { value: 'By throwing a runtime exception if the argument is not explicitly passed.', correct: false }
      - { value: 'By issuing a deprecation notice using `trigger_deprecation()` when the argument is not explicitly passed.', correct: true }
      - { value: 'By updating the documentation only, without code-level warnings.', correct: false }
    help: |
      `trigger_deprecation()` should be used to warn about changing default values.
      https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/bc.rst#_snippet_5
  -
    question: 'How do you programmatically trigger a deprecation warning in Symfony?'
    answers:
      - { value: 'By using `trigger_error(''Deprecated'', E_USER_DEPRECATED);`.', correct: false }
      - { value: 'By calling `Symfony\Component\Deprecation\Deprecation::warn();`.', correct: false }
      - { value: 'By using the `trigger_deprecation()` function from `symfony/deprecation-contracts`.', correct: true }
      - { value: 'By adding a `@deprecated` annotation to the method without any code change.', correct: false }
    help: |
      The `trigger_deprecation()` function is used to issue deprecation warnings.
      https://github.com/symfony/symfony-docs/blob/7.3/components/phpunit_bridge.rst#_snippet_6
  -
    question: 'Where are deprecation notices typically reported when running PHPUnit tests with `symfony/phpunit-bridge`?'
    answers:
      - { value: 'In the web debug toolbar only.', correct: false }
      - { value: 'In a separate log file in `var/log/`.', correct: false }
      - { value: 'In the console output of PHPUnit, summarized at the end of the test run.', correct: true }
      - { value: 'As PHP fatal errors, halting the test execution.', correct: false }
    help: |
      `symfony/phpunit-bridge` summarizes deprecation notices in the console output.
      https://github.com/symfony/symfony-docs/blob/7.3/setup/upgrade_major.rst#_snippet_1
  -
    question: 'What is the purpose of a deprecation baseline file (`baselineFile`) when running tests with `SYMFONY_DEPRECATIONS_HELPER`?'
    answers:
      - { value: 'To automatically fix all deprecated code in the project.', correct: false }
      - { value: 'To generate a report of all *new* deprecations, ignoring those already present in the baseline.', correct: true }
      - { value: 'To prevent any deprecation warnings from being displayed during tests.', correct: false }
      - { value: 'To define a list of deprecations that should always be ignored.', correct: false }
    help: |
      A baseline file helps track new deprecations while ignoring existing ones.
      https://github.com/symfony/symfony-docs/blob/7.3/components/phpunit_bridge.rst#_snippet_11
  -
    question: 'How can you deprecate a Symfony service or route alias in configuration?'
    answers:
      - { value: 'By removing the service/route entirely from the configuration.', correct: false }
      - { value: 'By adding a `deprecated: true` flag to its definition.', correct: false }
      - { value: 'By using the `deprecated` key with `package` and `version` (and optional `message`) under the service/route alias definition.', correct: true }
      - { value: 'By moving the service/route to a separate `deprecated.yaml` file.', correct: false }
    help: |
      The `deprecated` key is used to mark services or route aliases as deprecated.
      https://github.com/symfony/symfony-docs/blob/7.3/service_container/alias_private.rst#_snippet_7
      https://github.com/symfony/symfony-docs/blob/7.3/routing.rst#_snippet_35
  -
    question: 'What is the recommended way to document a deprecation in a component''s `CHANGELOG.md` and `UPGRADE.md` files?'
    answers:
      - { value: 'Only add a note in `CHANGELOG.md` when the feature is removed.', correct: false }
      - { value: 'Add a "Deprecate" entry in `CHANGELOG.md` for the minor version, and a "Remove" entry in `UPGRADE.md` for the next major version.', correct: true }
      - { value: 'Only add a note in `UPGRADE.md` with a detailed migration guide.', correct: false }
      - { value: 'Use a single entry in `README.md` for all deprecations.', correct: false }
    help: |
      Deprecations should be documented in both `CHANGELOG.md` and `UPGRADE.md`.
      https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/conventions.rst#_snippet_7
      https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/conventions.rst#_snippet_8
      https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/conventions.rst#_snippet_9
  -
    question: 'What is the purpose of overriding the `getPath()` method in a Symfony bundle class?'
    answers:
      - { value: 'To define the bundle''s public assets directory.', correct: false }
      - { value: 'To specify the bundle''s default configuration file path.', correct: false }
      - { value: 'To ensure the bundle correctly identifies its root directory, especially for older Symfony versions or custom structures.', correct: true }
      - { value: 'To register the bundle''s services with the dependency injection container.', correct: false }
    help: |
      Overriding `getPath()` ensures correct bundle root directory resolution.
      https://github.com/symfony/symfony-docs/blob/7.3/bundles.rst#_snippet_3
  -
    question: 'How can you manage multiple distinct Symfony applications within a single project directory structure?'
    answers:
      - { value: 'By creating separate Composer projects for each application.', correct: false }
      - { value: 'By using Symfony''s multi-application kernel feature, with each app in its own subdirectory (e.g., `apps/admin`, `apps/api`).', correct: true }
      - { value: 'By defining all routes and services in a single `config/` directory and using conditional logic.', correct: false }
      - { value: 'By installing each application as a separate Symfony bundle.', correct: false }
    help: |
      Symfony supports multiple applications within a single project.
      https://github.com/symfony/symfony-docs/blob/7.3/configuration/multiple_kernels.rst#_snippet_14
  -
    question: 'What is the role of the `MicroKernelTrait` in Symfony?'
    answers:
      - { value: 'It enables lazy loading of all services in the container.', correct: false }
      - { value: 'It provides a minimal kernel implementation for micro-applications, simplifying bootstrapping and configuration.', correct: true }
      - { value: 'It automatically registers all bundles found in the `src/` directory.', correct: false }
      - { value: 'It adds support for HTTP caching and ESI to the application.', correct: false }
    help: |
      `MicroKernelTrait` provides a minimal kernel for micro-applications.
      https://github.com/symfony/symfony-docs/blob/7.3/configuration/micro_kernel_trait.rst#_snippet_5
  -
    question: 'When integrating a legacy application with Symfony, what is the purpose of the `LegacyBridge` class?'
    answers:
      - { value: 'To automatically convert all legacy code to Symfony bundles.', correct: false }
      - { value: 'To provide a mechanism for Symfony to handle requests that are not routed by Symfony, passing them to the legacy application.', correct: true }
      - { value: 'To enable Symfony components to directly use legacy database connections.', correct: false }
      - { value: 'To generate deprecation notices for all legacy code.', correct: false }
    help: |
      The `LegacyBridge` helps route unhandled requests to the legacy application.
      https://github.com/symfony/symfony-docs/blob/7.3/migration.rst#_snippet_3
  -
    question: 'How can you configure environment-specific settings in Symfony?'
    answers:
      - { value: 'By using `if/else` statements directly in `config/services.yaml`.', correct: false }
      - { value: 'By creating separate configuration files (e.g., `config/packages/framework.yaml`, `config/packages/prod/framework.yaml`) and using the `when@env` syntax.', correct: true }
      - { value: 'By defining all settings in `parameters.yaml` and overriding them with environment variables.', correct: false }
      - { value: 'By modifying the `php.ini` file for each environment.', correct: false }
    help: |
      Symfony supports environment-specific configurations using `when@env`.
      https://github.com/symfony/symfony-docs/blob/7.3/quick_tour/the_architecture.rst#_snippet_8
  -
    question: 'Which PSR standard defines interfaces for HTTP messages (requests and responses)?'
    answers:
      - { value: 'PSR-3 (Logger Interface)', correct: false }
      - { value: 'PSR-7 (HTTP Message Interface)', correct: true }
      - { value: 'PSR-11 (Container Interface)', correct: false }
      - { value: 'PSR-18 (HTTP Client Interface)', correct: false }
    help: |
      PSR-7 defines interfaces for HTTP messages.
      https://www.php-fig.org/psr/psr-7/
  -
    question: 'Which PSR standard defines a common interface for logging libraries?'
    answers:
      - { value: 'PSR-1 (Basic Coding Standard)', correct: false }
      - { value: 'PSR-3 (Logger Interface)', correct: true }
      - { value: 'PSR-6 (Caching Interface)', correct: false }
      - { value: 'PSR-14 (Event Dispatcher)', correct: false }
    help: |
      PSR-3 defines the Logger Interface.
      https://www.php-fig.org/psr/psr-3/
  -
    question: 'Which Symfony component provides a bridge between HttpFoundation and PSR-7 interfaces?'
    answers:
      - { value: '`HttpClient`', correct: false }
      - { value: '`PsrHttpMessageBridge`', correct: true }
      - { value: '`HttpFoundation`', correct: false }
      - { value: '`Serializer`', correct: false }
    help: |
      The PsrHttpMessageBridge component provides interoperability between HttpFoundation and PSR-7.
      https://github.com/symfony/symfony-docs/blob/7.3/components/psr7.rst#_snippet_0
  -
    question: 'Which PSR standard defines interfaces for caching mechanisms?'
    answers:
      - { value: 'PSR-6 (Caching Interface)', correct: true }
      - { value: 'PSR-16 (Simple Cache)', correct: true }
      - { value: 'PSR-17 (HTTP Factories)', correct: false }
      - { value: 'PSR-18 (HTTP Client)', correct: false }
    help: |
      PSR-6 defines the CacheItemPoolInterface, and PSR-16 defines the simple CacheInterface.
      https://www.php-fig.org/psr/psr-6/
      https://www.php-fig.org/psr/psr-16/
  -
    question: 'How does Symfony''s `HttpClient` component relate to PSR-18?'
    answers:
      - { value: 'It is a direct implementation of PSR-18 without any additional features.', correct: false }
      - { value: 'It provides a `Psr18Client` class that implements PSR-18''s `ClientInterface`, allowing it to be used as a PSR-18 client.', correct: true }
      - { value: 'It is a standalone HTTP client that does not adhere to any PSR standards.', correct: false }
      - { value: 'It only consumes PSR-7 messages but does not implement PSR-18.', correct: false }
    help: |
      Symfony''s HttpClient provides a PSR-18 compliant client.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_68
  -
    question: 'What is the recommended naming convention for application-wide parameters in `config/services.yaml`?'
    answers:
      - { value: 'Using generic names like `dir` or `path`.', correct: false }
      - { value: 'Prefixing them with `app.` (e.g., `app.admin_email`) to prevent collisions and using descriptive names.', correct: true }
      - { value: 'Using `snake_case` for all parameter names without any prefix.', correct: false }
      - { value: 'All parameters should be defined as environment variables only.', correct: false }
    help: |
      Parameters should be prefixed with `app.` and be descriptive.
      https://github.com/symfony/symfony-docs/blob/7.3/best_practices.rst#_snippet_2
  -
    question: 'What is the standard naming convention for Twig form fragments that customize all fields of a specific type?'
    answers:
      - { value: '`_field_type_part` (e.g., `_text_widget`)', correct: false }
      - { value: '`field-type_field-part` (e.g., `textarea_widget`)', correct: true }
      - { value: '`form_type_part` (e.g., `form_text_widget`)', correct: false }
      - { value: '`type_part_field` (e.g., `text_widget_field`)', correct: false }
    help: |
      Form fragments for all fields of the same type follow `field-type_field-part`.
      https://github.com/symfony/symfony-docs/blob/7.3/form/form_themes.rst#_snippet_9
  -
    question: 'When using the Serializer component, how can you map a PHP property name (e.g., `firstName`) to a different serialized name (e.g., `first_name`)?'
    answers:
      - { value: 'By manually transforming the array before serialization.', correct: false }
      - { value: 'By implementing a custom `NameConverterInterface` and configuring the serializer to use it.', correct: true }
      - { value: 'By using a `#[SerializedAs]` attribute on the property.', correct: false }
      - { value: 'The Serializer component automatically converts camelCase to snake_case by default.', correct: false }
    help: |
      Custom `NameConverterInterface` allows mapping PHP property names to different serialized names.
      https://github.com/symfony/symfony-docs/blob/7.3/serializer/custom_name_converter.rst#_snippet_2
  -
    question: 'What is the recommended naming convention for getter methods for a "main" relation (e.g., `User` has `Address`)?'
    answers:
      - { value: '`get()`', correct: true }
      - { value: '`getAddress()`', correct: false }
      - { value: '`retrieveAddress()`', correct: false }
      - { value: '`fetchAddress()`', correct: false }
    help: |
      For a main relation, the getter should be named `get()`.
      https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/conventions.rst#_snippet_0
  -
    question: 'When generating slugs using `Symfony\Component\String\Slugger\SluggerInterface`, what is the default separator character?'
    answers:
      - { value: 'Underscore (`_`)', correct: false }
      - { value: 'Hyphen (`-`)', correct: true }
      - { value: 'Space (` `)', correct: false }
      - { value: 'Dot (`.`)', correct: false }
    help: |
      The default separator for slugs is a hyphen.
      https://github.com/symfony/symfony-docs/blob/7.3/string.rst#_snippet_37
  -
    question: 'What is the purpose of the `Symfony\Component\HttpKernel\TerminableInterface`?'
    answers:
      - { value: 'It defines methods for gracefully shutting down the application server.', correct: false }
      - { value: 'It allows the kernel to perform post-response tasks after the response has been sent to the client.', correct: true }
      - { value: 'It marks a kernel as capable of handling multiple requests concurrently.', correct: false }
      - { value: 'It provides a way to terminate a request early with an error.', correct: false }
    help: |
      `TerminableInterface` allows the kernel to perform tasks after the response is sent.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_kernel.rst#_snippet_15
  -
    question: 'Which of the following is a valid way to define environment-specific routing configuration in Symfony?'
    answers:
      - { value: 'Using `if (Kernel::ENV == ''prod'')` inside `config/routes.yaml`.', correct: false }
      - { value: 'Creating `config/routes_prod.yaml` and `config/routes_dev.yaml` files.', correct: false }
      - { value: 'Using the `when@prod:` block in `config/packages/routing.yaml`.', correct: true }
      - { value: 'Defining separate `Router` services for each environment.', correct: false }
    help: |
      The `when@env` syntax allows environment-specific configuration.
      https://github.com/symfony/symfony-docs/blob/7.3/quick_tour/the_architecture.rst#_snippet_8
  -
    question: 'Which event is dispatched by the Symfony Console component when an exception is thrown during command execution?'
    answers:
      - { value: '`ConsoleEvents::EXCEPTION`', correct: false }
      - { value: '`ConsoleEvents::ERROR`', correct: true }
      - { value: '`ConsoleEvents::TERMINATE`', correct: false }
      - { value: '`ConsoleEvents::CRITICAL`', correct: false }
    help: |
      `ConsoleEvents::ERROR` is dispatched when an exception occurs in a console command.
      https://github.com/symfony/symfony-docs/blob/7.3/components/console/events.rst#_snippet_3
  -
    question: 'What is the purpose of the `Symfony\Component\HttpKernel\Event\RequestEvent::isMainRequest()` method?'
    answers:
      - { value: 'To check if the request is an AJAX request.', correct: false }
      - { value: 'To determine if the current request is the primary request or a sub-request (e.g., from ESI).', correct: true }
      - { value: 'To verify if the request method is GET or POST.', correct: false }
      - { value: 'To check if the request has been handled by a controller.', correct: false }
    help: |
      `isMainRequest()` differentiates between main requests and sub-requests.
      https://github.com/symfony/symfony-docs/blob/7.3/event_dispatcher.rst#_snippet_7
  -
    question: 'Which of the following is a valid way to register an event subscriber in Symfony?'
    answers:
      - { value: 'Manually calling `addListener()` for each event in the kernel.', correct: false }
      - { value: 'Implementing `EventSubscriberInterface` and tagging the service with `kernel.event_subscriber`.', correct: true }
      - { value: 'Extending `AbstractSubscriber` and overriding `getEvents()`.', correct: false }
      - { value: 'Adding the subscriber class directly to `config/bundles.php`.', correct: false }
    help: |
      Event subscribers are registered by implementing `EventSubscriberInterface` and using the `kernel.event_subscriber` tag.
      https://github.com/symfony/symfony-docs/blob/7.3/components/event_dispatcher.rst#_snippet_14
  -
    question: 'What is the primary benefit of using `symfony/flex` in a Symfony project?'
    answers:
      - { value: 'It removes the need for Composer entirely.', correct: false }
      - { value: 'It automates the setup and configuration of packages and bundles, reducing boilerplate code.', correct: true }
      - { value: 'It provides a built-in ORM for database interactions.', correct: false }
      - { value: 'It enforces a specific UI/UX design system.', correct: false }
    help: |
      Symfony Flex streamlines package installation and configuration.
      https://github.com/symfony/symfony-docs/blob/7.3/quick_tour/flex_recipes.rst#_snippet_1
  -
    question: 'Which component is primarily responsible for converting a controller''s return value (if not a `Response` object) into an actual `Response` object?'
    answers:
      - { value: '`Routing`', correct: false }
      - { value: '`HttpFoundation`', correct: false }
      - { value: '`HttpKernel` (specifically, the `kernel.view` event)', correct: true }
      - { value: '`Serializer`', correct: false }
    help: |
      The `kernel.view` event in HttpKernel is used to transform non-Response return values.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_kernel.rst#_snippet_12
  -
    question: 'When defining a custom `VersionStrategyInterface` for assets, which method is responsible for returning the actual version string for a given asset path?'
    answers:
      - { value: '`applyVersion(string $path)`', correct: false }
      - { value: '`getVersion(string $path)`', correct: true }
      - { value: '`generateVersion(string $path)`', correct: false }
      - { value: '`getAssetHash(string $path)`', correct: false }
    help: |
      The `getVersion()` method returns the version string for an asset.
      https://github.com/symfony/symfony-docs/blob/7.3/components/asset.rst#_snippet_10
  -
    question: 'What is the purpose of the `composer.json` `conflict` section when migrating from Symfony Standard Edition to Symfony Flex?'
    answers:
      - { value: 'To list packages that are incompatible with Symfony Flex.', correct: false }
      - { value: 'To prevent the old `symfony/symfony` meta-package from being reinstalled.', correct: true }
      - { value: 'To define alternative package versions for different environments.', correct: false }
      - { value: 'To specify packages that should be ignored by Symfony Flex.', correct: false }
    help: |
      The `conflict` section is used to prevent `symfony/symfony` from being reinstalled.
      https://github.com/symfony/symfony-docs/blob/7.3/setup/flex.rst#_snippet_3
  -
    question: 'Which of the following is a valid PSR-4 autoloading configuration in `composer.json` for a Symfony application''s `src/` directory mapping to the `App\` namespace?'
    answers:
      - { value: '''"autoload": { "psr-4": { "App\\\\": "src/" } }''', correct: true }
      - { value: '''"autoload": { "App\\\\": "src/" }''', correct: false }
      - { value: '''"autoload": { "classmap": { "App\\\\": "src/" } }''', correct: false }
      - { value: '''"autoload": { "files": [ "src/App.php" ] }''', correct: false }
    help: |
      PSR-4 autoloading maps namespaces to directories.
      https://github.com/symfony/symfony-docs/blob/7.3/configuration/micro_kernel_trait.rst#_snippet_8
  -
    question: 'When configuring a Symfony Workflow, which option allows you to specify a custom service to handle the storage and retrieval of the subject''s current place?'
    answers:
      - { value: '`state_store`', correct: false }
      - { value: '`marking_store`', correct: true }
      - { value: '`history_store`', correct: false }
      - { value: '`place_accessor`', correct: false }
    help: |
      The `marking_store` option allows defining a custom service for managing workflow places.
      https://github.com/symfony/symfony-docs/blob/7.3/workflow.rst#_snippet_34
  -
    question: 'What is the purpose of the `SYMFONY_DEPRECATIONS_HELPER` environment variable when running PHPUnit tests?'
    answers:
      - { value: 'To automatically fix deprecation warnings in the code.', correct: false }
      - { value: 'To enable verbose logging of all application events.', correct: false }
      - { value: 'To configure how deprecation notices are handled and reported during test execution.', correct: true }
      - { value: 'To disable all PHPUnit tests that trigger deprecations.', correct: false }
    help: |
      `SYMFONY_DEPRECATIONS_HELPER` controls deprecation reporting in tests.
      https://github.com/symfony/symfony-docs/blob/7.3/components/phpunit_bridge.rst#_snippet_7
  -
    question: 'Which of the following is a key responsibility of a `Middleware` in the Symfony Messenger component?'
    answers:
      - { value: 'Serializing and sending messages to a message broker.', correct: false }
      - { value: 'Retrieving and deserializing messages from a message broker.', correct: false }
      - { value: 'Handling messages using the business logic applicable to the messages.', correct: false }
      - { value: 'Accessing the message and its envelope, handling cross-cutting concerns, and calling the next middleware.', correct: true }
    help: |
      Middleware handles cross-cutting concerns and calls the next middleware in the chain.
      https://github.com/symfony/symfony-docs/blob/7.3/components/messenger.rst#_snippet_1
  -
    question: 'When configuring Symfony''s `framework.assets` section, what is the purpose of the `version_format` option?'
    answers:
      - { value: 'To define the file extension for asset files.', correct: false }
      - { value: 'To specify the `sprintf` pattern used to construct an asset''s path with its version.', correct: true }
      - { value: 'To set the default version number for all assets.', correct: false }
      - { value: 'To enable or disable asset versioning globally.', correct: false }
    help: |
      `version_format` defines the `sprintf` pattern for asset URLs with versions.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#_snippet_12
  -
    question: 'What is the primary purpose of the `kernel.terminate` event?'
    answers:
      - { value: 'To allow listeners to modify the HTTP response before it is sent to the client.', correct: false }
      - { value: 'To perform long-running or non-blocking tasks after the HTTP response has been sent to the client.', correct: true }
      - { value: 'To handle exceptions that occurred during the request processing.', correct: false }
      - { value: 'To resolve the controller and its arguments before execution.', correct: false }
    help: |
      The `kernel.terminate` event is triggered after the response has been sent, for post-response tasks.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_kernel.rst#_snippet_14
  -
    question: 'Which of the following is a valid way to retrieve the current `Request` object in a Symfony service that is not a controller?'
    answers:
      - { value: 'Directly type-hinting `Request $request` in the service constructor.', correct: false }
      - { value: 'Injecting `RequestStack $requestStack` and calling `$requestStack->getCurrentRequest()`.', correct: true }
      - { value: 'Accessing the global `$_SERVER` superglobal directly.', correct: false }
      - { value: 'Using `Request::createFromGlobals()` in the service method.', correct: false }
    help: |
      Inject `RequestStack` to get the current `Request` in services.
      https://github.com/symfony/symfony-docs/blob/7.3/service_container/request.rst#_snippet_0
  -
    question: 'Which Symfony component provides a `TreeBuilder` for defining and validating configuration trees?'
    answers:
      - { value: '`Yaml`', correct: false }
      - { value: '`Config`', correct: true }
      - { value: '`OptionsResolver`', correct: false }
      - { value: '`PropertyInfo`', correct: false }
    help: |
      The `Config` component provides the `TreeBuilder` for configuration definition.
      https://github.com/symfony/symfony-docs/blob/7.3/components/config/definition.rst#_snippet_4
  -
    question: 'When defining a Symfony bundle, which `composer.json` `type` is recommended to enable automatic bundle activation by Symfony Flex?'
    answers:
      - { value: '`symfony-project`', correct: false }
      - { value: '`symfony-bundle`', correct: true }
      - { value: '`library`', correct: false }
      - { value: '`symfony-component`', correct: false }
    help: |
      Setting the `type` to `symfony-bundle` enables Flex to activate it automatically.
      https://github.com/symfony/symfony-docs/blob/7.3/bundles/best_practices.rst#_snippet_3
  -
    question: 'What is the purpose of the `#[AsEventListener]` attribute in Symfony 7?'
    answers:
      - { value: 'To define a service as an event dispatcher.', correct: false }
      - { value: 'To automatically register a class method as an event listener without explicit service configuration.', correct: true }
      - { value: 'To mark an event class as a global event.', correct: false }
      - { value: 'To specify the priority of an event dispatcher service.', correct: false }
    help: |
      `#[AsEventListener]` automates listener registration.
      https://github.com/symfony/symfony-docs/blob/7.3/event_dispatcher.rst#_snippet_3
  -
    question: 'Which of the following is a valid way to configure a custom asset version strategy in Symfony?'
    answers:
      - { value: 'By setting the `assets.version` parameter to a custom string.', correct: false }
      - { value: 'By implementing `Symfony\Component\Asset\VersionStrategy\VersionStrategyInterface` and configuring it as the `assets.version_strategy` service.', correct: true }
      - { value: 'By manually appending a query string to all asset URLs in Twig templates.', correct: false }
      - { value: 'By using the `assets.json_manifest_path` option only.', correct: false }
    help: |
      Custom version strategies implement `VersionStrategyInterface`.
      https://github.com/symfony/symfony-docs/blob/7.3/frontend/custom_version_strategy.rst#_snippet_1
  -
    question: 'When configuring a Symfony application for multiple kernels (e.g., admin and API), how are the `bundles.php`, `routes.yaml`, and `services.yaml` files typically organized for each application?'
    answers:
      - { value: 'All configuration files are merged into a single set in `config/`.', correct: false }
      - { value: 'Each application has its own `config/` directory (e.g., `apps/admin/config/`, `apps/api/config/`).', correct: true }
      - { value: 'Configuration is managed entirely through environment variables.', correct: false }
      - { value: 'Separate bundles are created for each application, and their configurations are loaded via `Extension` classes.', correct: false }
    help: |
      Multiple kernels typically have their own `config/` directories.
      https://github.com/symfony/symfony-docs/blob/7.3/configuration/multiple_kernels.rst#_snippet_14
  -
    question: 'What is the purpose of the `#[WithHttpStatus]` attribute in Symfony 7?'
    answers:
      - { value: 'To define the default HTTP status code for a controller action.', correct: false }
      - { value: 'To automatically map an HTTP status code and response headers when a custom exception is thrown.', correct: true }
      - { value: 'To mark a service as an HTTP client.', correct: false }
      - { value: 'To enforce HTTP/2 protocol for a specific route.', correct: false }
    help: |
      `#[WithHttpStatus]` allows mapping exceptions to HTTP status codes and headers.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#_snippet_40
  -
    question: 'Which of the following is a valid way to define a prototyped array of scalar values in Symfony''s configuration definition (PHP)?'
    answers:
      - { value: '`->arrayNode(''names'')->scalarNode()->end()`', correct: false }
      - { value: '`->arrayNode(''names'')->scalarPrototype()->end()`', correct: true }
      - { value: '`->scalarNode(''names'')->arrayPrototype()->end()`', correct: false }
      - { value: '`->arrayNode(''names'')->prototype(''scalar'')->end()`', correct: false }
    help: |
      `scalarPrototype()` is used to define a prototyped array of scalar values.
      https://github.com/symfony/symfony-docs/blob/7.3/components/config/definition.rst#_snippet_13
  -
    question: 'What is the recommended way to handle sensitive configuration data (e.g., database credentials, API keys) in a Symfony application?'
    answers:
      - { value: 'Hardcoding them directly in `config/services.yaml`.', correct: false }
      - { value: 'Storing them in version control in plain text files.', correct: false }
      - { value: 'Using environment variables, typically loaded via `.env` files, and referencing them with `''%env(VAR_NAME)%''`.', correct: true }
      - { value: 'Encrypting them directly in the database.', correct: false }
    help: |
      Environment variables are recommended for sensitive data.
      https://github.com/symfony/symfony-docs/blob/7.3/quick_tour/the_architecture.rst#_snippet_10
  -
    question: 'Which Symfony component provides the `u()` function for string manipulation (e.g., `u(''hello'')->camel()`)?'
    answers:
      - { value: '`String`', correct: true }
      - { value: '`Util`', correct: false }
      - { value: '`Common`', correct: false }
      - { value: '`Text`', correct: false }
    help: |
      The String component provides the `u()` function for string manipulation.
      https://github.com/symfony/symfony-docs/blob/7.3/string.rst#_snippet_10
  -
    question: 'What is the purpose of the `Symfony\Component\PropertyInfo\PropertyInfoExtractor`?'
    answers:
      - { value: 'To extract data from HTML forms.', correct: false }
      - { value: 'To provide a unified API for extracting various information about class properties (types, descriptions, etc.).', correct: true }
      - { value: 'To convert property names between different casing conventions.', correct: false }
      - { value: 'To validate property values against predefined constraints.', correct: false }
    help: |
      `PropertyInfoExtractor` provides a unified API for property information.
      https://github.com/symfony/symfony-docs/blob/7.3/components/property_info.rst#_snippet_3
  -
    question: 'Which of the following is a valid way to define a service in Symfony using PHP configuration?'
    answers:
      - { value: '''$services->set(''App\Service\MyService'', MyService::class);''', correct: true }
      - { value: '''$container->register(''my_service'', MyService::class);''', correct: false }
      - { value: '''services: { App\Service\MyService: ~ }''', correct: false }
      - { value: '''<service id="App\Service\MyService"/>''', correct: false }
    help: |
      Services can be defined using PHP configurators.
      https://symfony.com/doc/current/service_container/definitions.html#configuring-services-in-php
  -
    question: 'What is the purpose of the `Symfony\Component\HttpKernel\HttpKernelInterface::handle()` method?'
    answers:
      - { value: 'To send the HTTP response to the client.', correct: false }
      - { value: 'To process an incoming `Request` object and return a `Response` object.', correct: true }
      - { value: 'To register all application bundles.', correct: false }
      - { value: 'To compile the dependency injection container.', correct: false }
    help: |
      `HttpKernelInterface::handle()` is responsible for converting a Request into a Response.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_kernel.rst#_snippet_1
  -
    question: 'Which component provides the `UrlMatcher` and `RequestContext` classes for routing incoming requests?'
    answers:
      - { value: '`HttpKernel`', correct: false }
      - { value: '`HttpFoundation`', correct: false }
      - { value: '`Routing`', correct: true }
      - { value: '`WebLink`', correct: false }
    help: |
      The Routing component provides URL matching capabilities.
      https://github.com/symfony/symfony-docs/blob/7.3/create_framework/routing.rst#_snippet_7
  -
    question: 'What is the main advantage of using `EventSubscriberInterface` over `EventListenerInterface` for event handling?'
    answers:
      - { value: 'Subscribers are automatically registered by Symfony, requiring less manual configuration.', correct: true }
      - { value: 'Subscribers can listen to events with higher priority than listeners.', correct: false }
      - { value: 'Subscribers can stop event propagation, while listeners cannot.', correct: false }
      - { value: 'Subscribers can modify the event object, while listeners cannot.', correct: false }
    help: |
      Subscribers encapsulate event registration logic and are automatically registered.
      https://github.com/symfony/symfony-docs/blob/7.3/components/event_dispatcher.rst#_snippet_14
  -
    question: 'What is the purpose of the `kernel.finish_request` event?'
    answers:
      - { value: 'It is dispatched before the controller is executed.', correct: false }
      - { value: 'It is dispatched after the response has been sent to the client.', correct: false }
      - { value: 'It is dispatched after the controller has returned a response, but before the response is sent, allowing for final modifications.', correct: false }
      - { value: 'It is dispatched after a request has been handled, but before sub-requests are processed, allowing for state cleanup (e.g., resetting locale).', correct: true }
    help: |
      `kernel.finish_request` is used to reset global state, especially for sub-requests.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/events.rst#_snippet_10
  -
    question: 'Which of the following is a valid way to define a `stringNode` with a default value in Symfony''s configuration definition (PHP)?'
    answers:
      - { value: '`->stringNode(''my_option'')->defaultValue(''default'')->end()`', correct: true }
      - { value: '`->scalarNode(''my_option'')->defaultValue(''default'')->end()`', correct: true }
      - { value: '`->stringNode(''my_option'', ''default'')->end()`', correct: false }
      - { value: '`->variableNode(''my_option'')->defaultValue(''default'')->end()`', correct: false }
    help: |
      `stringNode()` (Symfony 7.2+) and `scalarNode()` can define string nodes with default values.
      https://github.com/symfony/symfony-docs/blob/7.3/components/config/definition.rst#_snippet_4
  -
    question: 'What is the purpose of the `symfony/phpunit-bridge` package?'
    answers:
      - { value: 'To provide a full-fledged testing framework for Symfony applications.', correct: false }
      - { value: 'To integrate PHPUnit with Symfony, offering tools like deprecation reporting and test client enhancements.', correct: true }
      - { value: 'To replace PHPUnit with a custom Symfony testing solution.', correct: false }
      - { value: 'To generate test data fixtures for Doctrine ORM.', correct: false }
    help: |
      `symfony/phpunit-bridge` integrates PHPUnit with Symfony.
      https://github.com/symfony/symfony-docs/blob/7.3/components/phpunit_bridge.rst#_snippet_0
  -
    question: 'When upgrading a Symfony project to a new major version, what is a crucial step to ensure the application uses the newly updated components correctly?'
    answers:
      - { value: 'Manually updating all `use` statements in every PHP file.', correct: false }
      - { value: 'Running `composer install --no-dev` to remove development dependencies.', correct: false }
      - { value: 'Clearing the entire Symfony cache directory (`var/cache/`).', correct: true }
      - { value: 'Re-generating all database migrations.', correct: false }
    help: |
      Clearing the cache is crucial after a major version upgrade.
      https://github.com/symfony/symfony-docs/blob/7.3/setup/upgrade_major.rst#_snippet_7
  -
    question: 'What is the primary goal of Symfony''s backward compatibility policy?'
    answers:
      - { value: 'To allow developers to upgrade Symfony versions without any code changes.', correct: false }
      - { value: 'To ensure that applications built with older Symfony versions can run on newer PHP versions.', correct: false }
      - { value: 'To provide a predictable upgrade path for applications by minimizing breaking changes in minor versions and clearly communicating them for major versions.', correct: true }
      - { value: 'To force developers to rewrite their applications with every new major release.', correct: false }
    help: |
      The backward compatibility policy aims for predictable upgrades.
      https://symfony.com/doc/current/contributing/code/bc.html
  -
    question: 'Which of the following is considered a breaking change in a Symfony minor release, according to its backward compatibility promise?'
    answers:
      - { value: 'Adding a new public method to a class.', correct: false }
      - { value: 'Adding a new optional argument to a public method.', correct: false }
      - { value: 'Removing a public method from a class.', correct: true }
      - { value: 'Changing the internal implementation of a private method.', correct: false }
    help: |
      Removing public methods is a breaking change.
      https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/bc.rst#_snippet_0
  -
    question: 'When deprecating a class or method, what is the recommended way to include the class name in the deprecation message for better debugging and consistency?'
    answers:
      - { value: 'Using `__CLASS__` magic constant.', correct: false }
      - { value: 'Using `get_debug_type($object_or_class_name)`.', correct: true }
      - { value: 'Manually typing the class name as a string.', correct: false }
      - { value: 'Using `(new \ReflectionClass($object))->getName()`.', correct: false }
    help: |
      `get_debug_type()` is recommended for class names in deprecation messages.
      https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/standards.rst#_snippet_3
  -
    question: 'What is the purpose of the `framework.router.cache_dir` configuration option (deprecated since Symfony 7.1)?'
    answers:
      - { value: 'To specify the directory for storing compiled Twig templates.', correct: false }
      - { value: 'To define where routing information was cached, with `~` (null) disabling caching.', correct: true }
      - { value: 'To configure the directory for storing HTTP cache responses.', correct: false }
      - { value: 'To set the location for application log files.', correct: false }
    help: |
      `router.cache_dir` was used to specify the routing cache directory.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#_snippet_116
  -
    question: 'Which of the following is a PSR-16 compatible cache adapter in Symfony?'
    answers:
      - { value: '`FilesystemAdapter`', correct: false }
      - { value: '`Psr16Adapter` (wraps a PSR-6 pool)', correct: true }
      - { value: '`ArrayAdapter`', correct: false }
      - { value: '`RedisAdapter`', correct: false }
    help: |
      `Psr16Adapter` wraps a PSR-6 cache pool to provide a PSR-16 interface.
      https://github.com/symfony/symfony-docs/blob/7.3/components/cache/psr6_psr16_adapters.rst#_snippet_1
  -
    question: 'What is the default naming convention for the HTML `name` attribute of a Symfony form field when no custom name is specified?'
    answers:
      - { value: 'It is derived from the form type class name (e.g., `task` for `TaskType`).', correct: true }
      - { value: 'It defaults to `form_field`.', correct: false }
      - { value: 'It is always `data`.', correct: false }
      - { value: 'It is randomly generated for security.', correct: false }
    help: |
      The default form name is derived from the form type class name.
      https://symfony.com/doc/current/forms/field_names.html
  -
    question: 'Which of the following is a valid method for retrieving a country name by its ISO 3166-1 alpha-2 code using the `Symfony\Component\Intl\Countries` component?'
    answers:
      - { value: '`Countries::getName(''US'')`', correct: true }
      - { value: '`Countries::getCountryName(''US'')`', correct: false }
      - { value: '`Countries::find(''US'')`', correct: false }
      - { value: '`Countries::get(''US'')`', correct: false }
    help: |
      `Countries::getName()` is used to retrieve a country name by its alpha-2 code.
      https://github.com/symfony/symfony-docs/blob/7.3/components/intl.rst#_snippet_5
  -
    question: 'What is the purpose of the `Symfony\Component\Messenger\Stamp\DispatchAfterCurrentBusStamp`?'
    answers:
      - { value: 'To mark a message for immediate dispatch, bypassing any middleware.', correct: false }
      - { value: 'To ensure a message is dispatched only after the current message handler completes successfully and its transaction is committed.', correct: true }
      - { value: 'To defer message dispatch until the application terminates.', correct: false }
      - { value: 'To prioritize the message over all other messages in the queue.', correct: false }
    help: |
      `DispatchAfterCurrentBusStamp` ensures transactional integrity for event dispatch.
      https://github.com/symfony/symfony-docs/blob/7.3/messenger.rst#_snippet_87
  -
    question: 'Which of the following is a valid way to define a `booleanNode` with a default value of `true` in Symfony''s configuration definition (PHP)?'
    answers:
      - { value: '`->booleanNode(''my_option'')->defaultTrue()->end()`', correct: true }
      - { value: '`->booleanNode(''my_option'', true)->end()`', correct: false }
      - { value: '`->scalarNode(''my_option'')->defaultTrue()->end()`', correct: false }
      - { value: '`->booleanNode(''my_option'')->defaultValue(true)->end()`', correct: true }
    help: |
      `defaultTrue()` and `defaultValue(true)` are valid for boolean nodes.
      https://github.com/symfony/symfony-docs/blob/7.3/components/config/definition.rst#_snippet_4
  -
    question: 'What is the purpose of the `Symfony\Component\VarExporter\LazyGhostTrait` (deprecated since Symfony 7.3)?'
    answers:
      - { value: 'To export PHP variables to a string representation.', correct: false }
      - { value: 'To create objects where properties are initialized only when first accessed, deferring heavy computations.', correct: true }
      - { value: 'To serialize objects into a binary format for storage.', correct: false }
      - { value: 'To provide a mechanism for deep cloning objects.', correct: false }
    help: |
      `LazyGhostTrait` was used for deferred object initialization.
      https://github.com/symfony/symfony-docs/blob/7.3/components/var_exporter.rst#_snippet_11
  -
    question: 'Which of the following is a valid way to retrieve the name of a language by its ISO 639-1 alpha-2 code using the `Symfony\Component\Intl\Languages` component?'
    answers:
      - { value: '`Languages::getLanguageName(''en'')`', correct: false }
      - { value: '`Languages::getName(''en'')`', correct: true }
      - { value: '`Languages::getLocaleName(''en'')`', correct: false }
      - { value: '`Languages::find(''en'')`', correct: false }
    help: |
      `Languages::getName()` is used to retrieve a language name by its alpha-2 code.
      https://github.com/symfony/symfony-docs/blob/7.3/components/intl.rst#_snippet_1
  -
    question: 'What is the purpose of the `Symfony\Component\HttpKernel\Event\ControllerEvent`?'
    answers:
      - { value: 'It is dispatched after the controller has been executed.', correct: false }
      - { value: 'It allows listeners to modify the controller callable before its execution.', correct: true }
      - { value: 'It provides access to the raw HTTP request data before routing.', correct: false }
      - { value: 'It is used to transform the controller''s return value into a Response.', correct: false }
    help: |
      `ControllerEvent` allows modification of the controller callable.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_kernel.rst#_snippet_8
  -
    question: 'Which of the following is a valid way to configure the `framework.assets.base_path` option in YAML?'
    answers:
      - { value: '''assets: base_path: /images''', correct: false }
      - { value: '''framework: assets: base_path: /images''', correct: true }
      - { value: '''framework: assets: path: /images''', correct: false }
      - { value: '''base_path: /images''', correct: false }
    help: |
      `base_path` is configured under `framework.assets`.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#_snippet_2
  -
    question: 'When using `PropertyAccessor`, which method is automatically called if it exists on an object to retrieve a property''s value (e.g., for `firstName` property)?'
    answers:
      - { value: '`getFirstName()`', correct: true }
      - { value: '`isFirstName()`', correct: false }
      - { value: '`hasFirstName()`', correct: false }
      - { value: '`retrieveFirstName()`', correct: false }
    help: |
      `PropertyAccessor` uses standard getter methods like `getFirstName()`.
      https://github.com/symfony/symfony-docs/blob/7.3/components/property_access.rst#_snippet_7
  -
    question: 'What is the purpose of the `Symfony\Component\DependencyInjection\Extension\PrependExtensionInterface`?'
    answers:
      - { value: 'To load a bundle''s configuration into the container.', correct: false }
      - { value: 'To allow a bundle extension to modify the container builder by prepending configuration before other extensions load.', correct: true }
      - { value: 'To define services that should be loaded before all others.', correct: false }
      - { value: 'To mark a bundle as compatible with multiple Symfony versions.', correct: false }
    help: |
      `PrependExtensionInterface` allows an extension to prepend configuration.
      https://github.com/symfony/symfony-docs/blob/7.3/bundles/prepend_extension.rst#_snippet_3
  -
    question: 'Which of the following is a valid way to configure a global form theme in Symfony using PHP configuration?'
    answers:
      - { value: '''$twig->addGlobal(''form_theme'', ''bootstrap_5_horizontal_layout.html.twig'');''', correct: false }
      - { value: '''$framework->form()->theme(''bootstrap_5_horizontal_layout.html.twig'');''', correct: false }
      - { value: '''$twig->formThemes([''bootstrap_5_horizontal_layout.html.twig'']);''', correct: true }
      - { value: '''$twig->setFormTheme(''bootstrap_5_horizontal_layout.html.twig'');''', correct: false }
    help: |
      Global form themes are configured via `twig.formThemes`.
      https://github.com/symfony/symfony-docs/blob/7.3/forms.rst#_snippet_0
  -
    question: 'Which of the following is a valid way to configure a named asset package with a custom base URL in Symfony (YAML)?'
    answers:
      - { value: '''assets: packages: my_package: base_url: 'http://cdn.example.com/assets' ''', correct: false }
      - { value: '''assets: packages: my_package: base_urls: 'http://cdn.example.com/assets' ''', correct: true }
      - { value: '''assets: my_package: base_urls: 'http://cdn.example.com/assets' ''', correct: false }
      - { value: '''packages: my_package: base_urls: 'http://cdn.example.com/assets' ''', correct: false }
    help: |
      Named asset packages use `base_urls` under `framework.assets.packages`.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#_snippet_6
  -
    question: 'What is the purpose of `Symfony\Component\HttpKernel\Event\ControllerArgumentsEvent`?'
    answers:
      - { value: 'To resolve the controller callable from the request.', correct: false }
      - { value: 'To allow listeners to modify the arguments passed to the controller method before its execution.', correct: true }
      - { value: 'To convert the controller''s return value into a `Response`.', correct: false }
      - { value: 'To handle exceptions thrown by controller arguments.', correct: false }
    help: |
      `ControllerArgumentsEvent` allows modification of controller arguments.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/events.rst#_snippet_4
  -
    question: 'Which of the following is a valid way to configure the `framework.serializer.name_converter` option to use the built-in `snake_case_to_camel_case` converter in YAML?'
    answers:
      - { value: '''serializer: name_converter: snake_case_to_camel_case''', correct: false }
      - { value: '''framework: serializer: name_converter: 'serializer.name_converter.snake_case_to_camel_case' ''', correct: true }
      - { value: '''framework: serializer: name_converter: Symfony\Component\Serializer\NameConverter\SnakeCaseToCamelCaseNameConverter::class''', correct: false }
      - { value: '''framework: serializer: name_converter: snakeCaseToCamelCase''', correct: false }
    help: |
      Built-in name converters are referenced by their service IDs.
      https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#_snippet_37
  -
    question: 'What is the purpose of the `Symfony\Component\HttpClient\Psr18Client` class?'
    answers:
      - { value: 'It is a standalone HTTP client that does not implement any PSR.', correct: false }
      - { value: 'It provides a PSR-18 compliant HTTP client implementation based on Symfony''s `HttpClient` component.', correct: true }
      - { value: 'It converts PSR-7 messages to HttpFoundation messages.', correct: false }
      - { value: 'It is a mock client used only for testing HTTP requests.', correct: false }
    help: |
      `Psr18Client` provides a PSR-18 compliant HTTP client.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_69
  -
    question: 'Which of the following is a valid way to reference a parameter named `app.admin_email` in a Symfony YAML configuration file?'
    answers:
      - { value: '''email: app.admin_email''', correct: false }
      - { value: '''email: %app.admin_email%''', correct: true }
      - { value: '''email: $app.admin_email''', correct: false }
      - { value: '''email: @app.admin_email''', correct: false }
    help: |
      Parameters are referenced by wrapping their name in `%%`.
      https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#_snippet_9
  -
    question: 'Which of the following is a valid way to configure the `framework.assets.version` option to apply a global version string `v2` to all assets in YAML?'
    answers:
      - { value: '''assets: version: v2''', correct: false }
      - { value: '''framework: assets: version: v2''', correct: true }
      - { value: '''framework: assets: default_version: v2''', correct: false }
      - { value: '''version: v2''', correct: false }
    help: |
      The `version` option is configured under `framework.assets`.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#_snippet_10
  -
    question: 'What is the purpose of `Symfony\Component\Form\Form::handleRequest()` method?'
    answers:
      - { value: 'To render the form HTML in a Twig template.', correct: false }
      - { value: 'To process the incoming HTTP request and populate the form with submitted data.', correct: true }
      - { value: 'To validate the form data against defined constraints.', correct: false }
      - { value: 'To create a new instance of a form type.', correct: false }
    help: |
      `handleRequest()` processes the request and populates the form.
      https://github.com/symfony/symfony-docs/blob/7.3/components/form.rst#_snippet_26
  -
    question: 'Which of the following describes the `kernel.response` event?'
    answers:
      - { value: 'It is dispatched before the controller is found.', correct: false }
      - { value: 'It is dispatched after a `Response` object has been created, allowing listeners to modify it before sending.', correct: true }
      - { value: 'It is dispatched only when an error occurs during response generation.', correct: false }
      - { value: 'It is responsible for sending the final HTTP response to the client.', correct: false }
    help: |
      `kernel.response` allows modification of the Response object before it''s sent.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_kernel.rst#_snippet_13
  -
    question: 'Which of the following is a valid way to configure a custom `MarkingStore` service for a Symfony Workflow in PHP?'
    answers:
      - { value: '''$workflow->markingStore()->service(MyMarkingStore::class);''', correct: true }
      - { value: '''$workflow->setMarkingStore(MyMarkingStore::class);''', correct: false }
      - { value: '''$workflow->markingStore()->type('custom')->service('my_marking_store_service');''', correct: false }
      - { value: '''$workflow->addMarkingStore(new MyMarkingStore());''', correct: false }
    help: |
      The `markingStore()->service()` method is used to configure a custom marking store.
      https://github.com/symfony/symfony-docs/blob/7.3/workflow.rst#_snippet_34
  -
    question: 'What is the purpose of `Symfony\Component\HttpKernel\Event\ExceptionEvent::getThrowable()`?'
    answers:
      - { value: 'To retrieve the HTTP status code associated with the exception.', correct: false }
      - { value: 'To get the original `Throwable` instance that triggered the exception event.', correct: true }
      - { value: 'To set a new `Throwable` instance to be handled by other listeners.', correct: false }
      - { value: 'To check if the exception is an instance of `HttpExceptionInterface`.', correct: false }
    help: |
      `getThrowable()` returns the original exception.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_kernel.rst#_snippet_15
  -
    question: 'Which of the following is a valid way to configure the `framework.php_errors.log` option to map `E_DEPRECATED` to `LogLevel::ERROR` in PHP?'
    answers:
      - { value: '''$framework->phpErrors()->log(E_DEPRECATED, LogLevel::ERROR);''', correct: false }
      - { value: '''$framework->phpErrors()->log(\E_DEPRECATED, LogLevel::ERROR);''', correct: true }
      - { value: '''$framework->phpErrors()->log('E_DEPRECATED', 'error');''', correct: false }
      - { value: '''$framework->phpErrors()->mapError(E_DEPRECATED, LogLevel::ERROR);''', correct: false }
    help: |
      PHP constants for error levels are used with `phpErrors()->log()`.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#_snippet_106
  -
    question: 'Which component provides the `Psr16Cache` and `Psr16Adapter` classes for interoperability between PSR-6 and PSR-16 caching interfaces?'
    answers:
      - { value: '`Cache`', correct: true }
      - { value: '`Contracts`', correct: false }
      - { value: '`Common`', correct: false }
      - { value: '`Proxy`', correct: false }
    help: |
      The Cache component provides PSR-6 and PSR-16 adapters.
      https://github.com/symfony/symfony-docs/blob/7.3/components/cache/psr6_psr16_adapters.rst#_snippet_1
  -
    question: 'What is the purpose of `Symfony\Component\DependencyInjection\Attribute\AutowireMethodOf` (introduced in Symfony 7.1)?'
    answers:
      - { value: 'To autowire a service by its method name as a constructor argument.', correct: false }
      - { value: 'To automatically autowire a specific method of a service as a `Closure` based on the property name.', correct: true }
      - { value: 'To define a service method as a factory for other services.', correct: false }
      - { value: 'To mark a method as requiring autowiring for its arguments.', correct: false }
    help: |
      `#[AutowireMethodOf]` autowires a service method as a `Closure`.
      https://github.com/symfony/symfony-docs/blob/7.3/service_container/autowiring.rst#_snippet_22
  -
    question: 'Which of the following is the correct way to define a `string` property with a `#[SerializedName]` attribute in PHP to change its serialized name?'
    answers:
      - { value: '''private string $name; #[SerializedName("customer_name")]''', correct: false }
      - { value: '''#[SerializedName("customer_name")] private string $name;''', correct: true }
      - { value: '''#[SerializedName(name: "customer_name")] private string $name;''', correct: false }
      - { value: '''@SerializedName("customer_name") private string $name;''', correct: false }
    help: |
      The `#[SerializedName]` attribute is placed directly above the property.
      https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#_snippet_33
  -
    question: 'What is the purpose of `Symfony\Component\Messenger\Exception\RecoverableMessageHandlingException` (introduced in Symfony 7.2)?'
    answers:
      - { value: 'To mark a message as permanently failed and prevent retries.', correct: false }
      - { value: 'To indicate that a message handling failed but can be retried, optionally with a custom delay.', correct: true }
      - { value: 'To force immediate re-dispatch of a message to another transport.', correct: false }
      - { value: 'To log a message handling error without affecting the message retry strategy.', correct: false }
    help: |
      `RecoverableMessageHandlingException` allows custom retry delays.
      https://github.com/symfony/symfony-docs/blob/7.3/messenger.rst#_snippet_38
  -
    question: 'What is the purpose of the `framework.session.name` configuration option?'
    answers:
      - { value: 'To define the name of the session cookie.', correct: true }
      - { value: 'To set the session ID length.', correct: false }
      - { value: 'To specify the session storage handler.', correct: false }
      - { value: 'To configure the session lifetime.', correct: false }
    help: |
      `session.name` specifies the name of the session cookie.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#_snippet_148
  -
    question: 'Which of the following is a valid way to disable the `throw_exception_on_invalid_index` option for the `property_accessor` service in Symfony (PHP)?'
    answers:
      - { value: '''$framework->propertyAccessor()->throwExceptionOnInvalidIndex(false);''', correct: true }
      - { value: '''$framework->propertyAccessor()->setThrowExceptionOnInvalidIndex(false);''', correct: false }
      - { value: '''$framework->property_accessor()->disableInvalidIndexException();''', correct: false }
      - { value: '''$framework->property_accessor()->throwExceptionOnInvalidIndex(null);''', correct: false }
    help: |
      The `throwExceptionOnInvalidIndex()` method is used to configure this option.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#_snippet_108
  -
    question: 'What is the purpose of `Symfony\Component\HttpKernel\Event\TerminateEvent`?'
    answers:
      - { value: 'It is dispatched before the controller is executed.', correct: false }
      - { value: 'It is dispatched after the response has been sent to the client, allowing for cleanup or deferred tasks.', correct: true }
      - { value: 'It is dispatched when an exception occurs during request handling.', correct: false }
      - { value: 'It is used to transform the controller''s return value into a Response.', correct: false }
    help: |
      `TerminateEvent` is dispatched after the response is sent.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_kernel.rst#_snippet_15
  -
    question: 'What is the primary role of the `Symfony\Component\HttpFoundation\Response` class?'
    answers:
      - { value: 'To parse incoming HTTP requests.', correct: false }
      - { value: 'To represent an HTTP response that can be sent back to the client.', correct: true }
      - { value: 'To manage session data.', correct: false }
      - { value: 'To handle file uploads.', correct: false }
    help: |
      The Response class represents an HTTP response.
      https://symfony.com/doc/current/components/http_foundation.html#response-class
  -
    question: 'Which of the following is a valid way to enable the `property_info.with_constructor_extractor` option (introduced in Symfony 7.3) in PHP configuration?'
    answers:
      - { value: '''$framework->propertyInfo()->withConstructorExtractor(true);''', correct: true }
      - { value: '''$framework->propertyInfo()->enableConstructorExtractor();''', correct: false }
      - { value: '''$framework->property_info()->with_constructor_extractor(true);''', correct: false }
      - { value: '''$framework->propertyInfo()->setConstructorExtractor(true);''', correct: false }
    help: |
      `withConstructorExtractor()` enables the constructor extractor for property info.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#_snippet_111
  -
    question: 'Which of the following is a valid way to define a `floatNode` with a maximum value of `5E45` in Symfony''s configuration definition (PHP)?'
    answers:
      - { value: '`->floatNode(''my_value'')->max(5E45)->end()`', correct: true }
      - { value: '`->floatNode(''my_value'', 5E45)->end()`', correct: false }
      - { value: '`->scalarNode(''my_value'')->max(5E45)->end()`', correct: false }
      - { value: '`->floatNode(''my_value'')->maxValue(5E45)->end()`', correct: false }
    help: |
      `max()` is used to set the maximum value for numeric nodes.
      https://github.com/symfony/symfony-docs/blob/7.3/components/config/definition.rst#_snippet_3
  -
    question: 'Which of the following is a valid way to configure the `framework.router.https_port` option to `8443` in YAML?'
    answers:
      - { value: '''router: https_port: 8443''', correct: false }
      - { value: '''framework: router: https_port: 8443''', correct: true }
      - { value: '''framework: router: ssl_port: 8443''', correct: false }
      - { value: '''https_port: 8443''', correct: false }
    help: |
      `https_port` is configured under `framework.router`.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#_snippet_119
  -
    question: 'What is the purpose of the `Symfony\Component\String\Inflector\InflectorInterface`?'
    answers:
      - { value: 'To convert strings between different casing conventions (e.g., camelCase, snake_case).', correct: false }
      - { value: 'To pluralize and singularize words in different languages.', correct: true }
      - { value: 'To generate URL-friendly slugs from strings.', correct: false }
      - { value: 'To perform string padding and trimming operations.', correct: false }
    help: |
      `InflectorInterface` provides methods for pluralization and singularization.
      https://github.com/symfony/symfony-docs/blob/7.3/string.rst#_snippet_46
  -
    question: 'What is the purpose of the `#[AutowireIterator]` attribute in Symfony 7?'
    answers:
      - { value: 'To autowire a single service from the container.', correct: false }
      - { value: 'To inject a collection of services tagged with a specific name as an `iterable`.', correct: true }
      - { value: 'To define a service that can be iterated over.', correct: false }
      - { value: 'To autowire a service that implements the `Iterator` interface.', correct: false }
    help: |
      `#[AutowireIterator]` injects collections of tagged services.
      https://github.com/symfony/symfony-docs/blob/7.3/service_container/tags.rst#_snippet_32
  -
    question: 'Which of the following is a valid way to use the `inline_css` Twig filter?'
    answers:
      - { value: '''{{ html_content|inline_css }}''', correct: false }
      - { value: '''{% apply inline_css %}<style>h1{color:red;}</style><h1>Hello</h1>{% endapply %}''', correct: true }
      - { value: '''<style>{{ 'h1{color:red;}'|inline_css }}</style>''', correct: false }
      - { value: '''{% inline_css %}<style>h1{color:red;}</style><h1>Hello</h1>{% endinline_css %}''', correct: false }
    help: |
      The `inline_css` filter is used with the `apply` tag.
      https://github.com/symfony/symfony-docs/blob/7.3/mailer.rst#_snippet_56
  -
    question: 'What is the purpose of `Symfony\Component\PropertyAccess\PropertyAccessorBuilder::disableExceptionOnInvalidPropertyPath()`?'
    answers:
      - { value: 'To throw an exception when a property path is invalid.', correct: false }
      - { value: 'To return `null` instead of throwing a `NoSuchPropertyException` when a property path does not exist.', correct: true }
      - { value: 'To enable magic methods for property access.', correct: false }
      - { value: 'To ignore all errors during property access.', correct: false }
    help: |
      `disableExceptionOnInvalidPropertyPath()` makes the accessor return `null` for invalid paths.
      https://github.com/symfony/symfony-docs/blob/7.3/components/property_access.rst#_snippet_10
  -
    question: 'Which of the following is the correct way to retrieve a service from the container and specify that an exception should be thrown if the service does not exist?'
    answers:
      - { value: '''$container->get('my_service', ContainerInterface::EXCEPTION_ON_INVALID_REFERENCE);''', correct: true }
      - { value: '''$container->get('my_service', true);''', correct: false }
      - { value: '''$container->get('my_service')->throwExceptionIfNotFound();''', correct: false }
      - { value: '''$container->get('my_service', ContainerInterface::NULL_ON_INVALID_REFERENCE);''', correct: false }
    help: |
      `ContainerInterface::EXCEPTION_ON_INVALID_REFERENCE` ensures an exception is thrown.
      https://github.com/symfony/symfony-docs/blob/7.3/components/dependency_injection.rst#_snippet_11
  -
    question: 'What is the purpose of the `framework.serializer.named_serializers` configuration option?'
    answers:
      - { value: 'To define a single, global serializer instance for the application.', correct: false }
      - { value: 'To configure multiple distinct serializer instances with different settings (e.g., name converters, default contexts).', correct: true }
      - { value: 'To specify the default serialization format (e.g., JSON, XML).', correct: false }
      - { value: 'To enable or disable the serializer component entirely.', correct: false }
    help: |
      `named_serializers` allows defining multiple serializer instances.
      https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#_snippet_56
  -
    question: 'Which of the following describes the `FormEvents::PRE_SUBMIT` event?'
    answers:
      - { value: 'Dispatched after the form''s model data has been denormalized.', correct: false }
      - { value: 'Dispatched at the beginning of the form submission process, allowing modification of request data or form fields.', correct: true }
      - { value: 'Dispatched when a form is initialized with data for display.', correct: false }
      - { value: 'Dispatched after the form has been validated.', correct: false }
    help: |
      `PRE_SUBMIT` is dispatched at the beginning of submission, allowing data/field modification.
      https://github.com/symfony/symfony-docs/blob/7.3/form/events.rst#_snippet_3