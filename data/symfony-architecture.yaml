category: Symfony Architecture

questions:
  -
    question: >
      Which of the following best describes the primary purpose of Symfony Flex?
    answers:
      - { value: 'To provide a full-stack MVC framework for web development.', correct: false }
      - { value: 'To simplify the installation and configuration of Symfony packages and their dependencies.', correct: true }
      - { value: 'To manage database migrations and schema updates.', correct: false }
      - { value: 'To generate boilerplate code for controllers and entities.', correct: false }
    help: |
      Symfony Flex is a Composer plugin that simplifies the installation and management of Symfony packages by automating common configuration tasks.
      https://symfony.com/doc/current/setup/symfony_flex.html

  -
    question: >
      Under which open-source license is the Symfony Framework primarily distributed?
    answers:
      - { value: 'MIT License', correct: true }
      - { value: 'GPLv3 License', correct: false }
      - { value: 'Apache License 2.0', correct: false }
      - { value: 'BSD License', correct: false }
    help: |
      Symfony is released under the MIT license, which is a permissive free software license.
      https://symfony.com/doc/current/contributing/code/license.html

  -
    question: >
      Which Symfony component is responsible for handling HTTP requests and responses, providing an object-oriented layer over PHP's raw HTTP functions?
    answers:
      - { value: 'HttpFoundation', correct: true }
      - { value: 'HttpKernel', correct: false }
      - { value: 'Routing', correct: false }
      - { value: 'EventDispatcher', correct: false }
    help: |
      The HttpFoundation component provides an object-oriented layer for the HTTP specification, abstracting away the raw PHP HTTP functions.
      https://symfony.com/doc/current/components/http_foundation.html

  -
    question: |
      Consider the default Symfony project structure. In which directory would you typically find the main application kernel (`Kernel.php`)?
      ```
      your_project/
      ├─ assets/
      ├─ bin/
      ├─ config/
      ├─ public/
      ├─ src/
      │  ├─ Kernel.php
      │  └─ ...
      └─ ...
      ```
    answers:
      - { value: '`config/`', correct: false }
      - { value: '`public/`', correct: false }
      - { value: '`src/`', correct: true }
      - { value: '`bin/`', correct: false }
    help: |
      The `Kernel.php` file, which is the entry point for the Symfony application, is located in the `src/` directory by default.
      https://symfony.com/doc/current/best_practices.html#_snippet_1

  -
    question: >
      What is the purpose of the `public/index.php` file in a Symfony application?
    answers:
      - { value: 'It contains all the application''s business logic.', correct: false }
      - { value: 'It serves as the front controller, handling all incoming HTTP requests and bootstrapping the Symfony application.', correct: true }
      - { value: 'It is used for database connection configuration only.', correct: false }
      - { value: 'It defines all the application''s routes.', correct: false }
    help: |
      The `public/index.php` file is the front controller, the single entry point for all web requests, responsible for bootstrapping the Symfony Kernel and handling the request-response cycle.
      https://symfony.com/doc/current/configuration/micro_kernel_trait.html#_snippet_16

  -
    question: >
      Which of the following is a core responsibility of the `HttpKernel` component in Symfony?
    answers:
      - { value: 'To manage database connections.', correct: false }
      - { value: 'To handle the request-response lifecycle, including routing, controller execution, and event dispatching.', correct: true }
      - { value: 'To provide a templating engine.', correct: false }
      - { value: 'To encrypt sensitive data.', correct: false }
    help: |
      The HttpKernel component handles the request-response lifecycle, dispatching events at various stages to allow other components to interact with the process.
      https://symfony.com/doc/current/components/http_kernel.html

  -
    question: >
      When a Symfony application encounters an unhandled exception, which component is primarily responsible for converting it into an appropriate HTTP response?
    answers:
      - { value: 'EventDispatcher', correct: false }
      - { value: 'HttpFoundation', correct: false }
      - { value: 'ErrorHandler', correct: true }
      - { value: 'DebugBundle', correct: false }
    help: |
      The ErrorHandler component is responsible for handling PHP errors and exceptions, converting them into `ErrorException` and `FlattenException` objects, which can then be rendered into appropriate HTTP responses.
      https://symfony.com/doc/current/components/error_handler.html

  -
    question: >
      Which kernel event is dispatched right before the controller is executed?
    answers:
      - { value: 'kernel.response', correct: false }
      - { value: 'kernel.request', correct: false }
      - { value: 'kernel.controller', correct: true }
      - { value: 'kernel.view', correct: false }
    help: |
      The `kernel.controller` event is dispatched after the controller has been determined but before it is executed.
      https://symfony.com/doc/current/reference/events.html#kernel-controller

  -
    question: >
      According to Symfony's official best practices, where should custom services be placed by default?
    answers:
      - { value: '`config/services.yaml`', correct: false }
      - { value: '`src/Service/`', correct: true }
      - { value: '`var/`', correct: false }
      - { value: '`public/`', correct: false }
    help: |
      Custom services are typically placed in the `src/` directory, often within a `Service/` subdirectory, following the principle of organizing code by feature or domain.
      https://symfony.com/doc/current/best_practices.html#_snippet_1

  -
    question: >
      Which of the following statements is true regarding Symfony's Long Term Support (LTS) releases?
    answers:
      - { value: 'LTS releases receive bug fixes for 6 months and security fixes for 1 year.', correct: false }
      - { value: 'LTS releases receive bug fixes for 1 year and security fixes for 2 years.', correct: false }
      - { value: 'LTS releases receive bug fixes for 3 years and security fixes for 4 years.', correct: true }
      - { value: 'LTS releases receive no bug fixes, only security fixes for 5 years.', correct: false }
    help: |
      Symfony LTS versions are maintained for 3 years for bug fixes and 4 years for security fixes.
      https://symfony.com/releases

  -
    question: >
      What does Symfony's Backward Compatibility Promise (BCP) primarily guarantee?
    answers:
      - { value: 'That all new features will be compatible with previous PHP versions.', correct: false }
      - { value: 'That minor version updates will not break existing code, requiring only minimal changes for major versions.', correct: true }
      - { value: 'That all deprecated features will be removed in the next minor release.', correct: false }
      - { value: 'That the API will remain unchanged for at least 10 years.', correct: false }
    help: |
      The Backward Compatibility Promise ensures that minor version updates (e.g., 6.0 to 6.1) do not introduce breaking changes, while major versions (e.g., 6.x to 7.x) may.
      https://symfony.com/doc/current/contributing/code/bc.html

  -
    question: >
      When a feature is deprecated in Symfony, what is the recommended practice for developers?
    answers:
      - { value: 'Immediately remove the deprecated code from their applications.', correct: false }
      - { value: 'Ignore the deprecation until a major version upgrade.', correct: false }
      - { value: 'Update their code to use the new recommended alternative as soon as feasible, typically before the next major version.', correct: true }
      - { value: 'Report the deprecation as a bug.', correct: false }
    help: |
      Deprecations are a warning that a feature will be removed or changed in a future major version. Developers should update their code to use the new alternative.
      https://symfony.com/doc/current/contributing/code/bc.html#deprecations

  -
    question: >
      Which of the following is a valid way to create a new Symfony project optimized for microservices or APIs using the Symfony CLI?
    answers:
      - { value: '`symfony new my_project --full`', correct: false }
      - { value: '`symfony new my_project --web`', correct: false }
      - { value: '`symfony new my_project --version="7.3.x-dev"`', correct: true }
      - { value: '`symfony new my_project --minimal`', correct: false }
    help: |
      The `symfony new` command with a specific version or without a recipe name creates a minimal project suitable for microservices or APIs.
      https://symfony.com/doc/current/setup.html#_snippet_2

  -
    question: >
      Symfony adheres to several PHP Standard Recommendations (PSRs). Which PSR defines the common interfaces for HTTP messages, including Request and Response objects?
    answers:
      - { value: 'PSR-3 (Logger Interface)', correct: false }
      - { value: 'PSR-7 (HTTP Message Interfaces)', correct: true }
      - { value: 'PSR-11 (Container Interface)', correct: false }
      - { value: 'PSR-14 (Event Dispatcher)', correct: false }
    help: |
      Symfony's HttpFoundation component provides an implementation of PSR-7 for HTTP messages.
      https://www.php-fig.org/psr/psr-7/

  -
    question: >
      According to Symfony's naming conventions, what is the typical suffix for a class that acts as a controller?
    answers:
      - { value: '`Handler`', correct: false }
      - { value: '`Manager`', correct: false }
      - { value: '`Controller`', correct: true }
      - { value: '`Service`', correct: false }
    help: |
      Symfony's best practices recommend suffixing controller classes with `Controller`.
      https://symfony.com/doc/current/best_practices.html#_snippet_1

  -
    question: |
      Given the following `composer.json` snippet, what is the purpose of the `"autoload"` section with `"files"`?
      ```json
      {
          "require": {
              "symfony/http-foundation": "^4.0"
          },
          "autoload": {
              "files": ["model.php","controllers.php"]
          }
      }
      ```
    answers:
      - { value: 'To define PSR-4 autoloading for specific namespaces.', correct: false }
      - { value: 'To automatically include specified PHP files on every request, regardless of class usage.', correct: true }
      - { value: 'To declare Composer plugins.', correct: false }
      - { value: 'To specify the entry point for the web server.', correct: false }
    help: |
      The `"files"` autoloading type in Composer automatically includes the listed files on every request, which is useful for global functions or non-class-based scripts.
      https://getcomposer.org/doc/04-schema.md#autoload

  -
    question: >
      Which of the following Symfony components is essential for building forms and handling their submission and validation?
    answers:
      - { value: 'Serializer', correct: false }
      - { value: 'Form', correct: true }
      - { value: 'Messenger', correct: false }
      - { value: 'Workflow', correct: false }
    help: |
      The Form component provides tools for building, processing, and validating forms.
      https://symfony.com/doc/current/components/form.html

  -
    question: >
      What is the primary benefit of using Symfony's Dependency Injection component?
    answers:
      - { value: 'It automatically generates database schemas.', correct: false }
      - { value: 'It manages object creation and dependencies, promoting loose coupling and testability.', correct: true }
      - { value: 'It handles user authentication and authorization.', correct: false }
      - { value: 'It provides a templating engine for rendering views.', correct: false }
    help: |
      The DependencyInjection component allows you to standardize and centralize the way objects are constructed and configured, leading to more maintainable and testable code.
      https://symfony.com/doc/current/components/dependency_injection.html

  -
    question: >
      In a Symfony application, what is the purpose of the `var/cache/` directory?
    answers:
      - { value: 'To store application logs.', correct: false }
      - { value: 'To store compiled templates, service container definitions, and other temporary files for performance optimization.', correct: true }
      - { value: 'To store user-uploaded files.', correct: false }
      - { value: 'To store database migration files.', correct: false }
    help: |
      The `var/cache/` directory stores all the cache files generated by Symfony, such as compiled service container, routes, and Twig templates, to improve application performance.
      https://symfony.com/doc/current/best_practices.html#_snippet_1

  -
    question: >
      Which command is used to install the Monolog logger in a Symfony application via Composer, leveraging Symfony Flex?
    answers:
      - { value: '`composer install monolog/monolog`', correct: false }
      - { value: '`composer require logger`', correct: true }
      - { value: '`composer add monolog`', correct: false }
      - { value: '`composer update monolog`', correct: false }
    help: |
      Symfony Flex provides "recipes" for common packages. `composer require logger` is the Flex-aware command to install Monolog.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#_snippet_0

  -
    question: |
      Which of the following configuration types can be used to define routes in Symfony?
    answers:
      - { value: 'YAML', correct: true }
      - { value: 'XML', correct: true }
      - { value: 'PHP', correct: true }
      - { value: 'JSON', correct: false }
    help: |
      Symfony supports defining routes using YAML, XML, PHP files, and PHP attributes.
      https://symfony.com/doc/current/routing.html#_snippet_6

  -
    question: >
      What is the role of the `#[Route]` attribute (or annotation) in a Symfony controller?
    answers:
      - { value: 'To define the service ID for the controller.', correct: false }
      - { value: 'To specify the template file to render.', correct: false }
      - { value: 'To map a URL path to a controller action.', correct: true }
      - { value: 'To inject dependencies into the controller.', correct: false }
    help: |
      The `#[Route]` attribute is used to define routes directly on controller methods or classes, mapping URLs to specific actions.
      https://symfony.com/doc/current/routing.html#routing-controllers-attributes

  -
    question: >
      When configuring environment-specific settings in Symfony, which file is typically used to set the `APP_ENV` and `APP_SECRET` variables?
    answers:
      - { value: '`config/services.yaml`', correct: false }
      - { value: '`composer.json`', correct: false }
      - { value: '`.env`', correct: true }
      - { value: '`public/index.php`', correct: false }
    help: |
      The `.env` file is used to define environment variables like `APP_ENV` and `APP_SECRET` that are loaded by the Dotenv component.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#_snippet_10

  -
    question: >
      Which Symfony component provides the `EventDispatcher` and allows for a decoupled architecture through the observer pattern?
    answers:
      - { value: 'DependencyInjection', correct: false }
      - { value: 'EventDispatcher', correct: true }
      - { value: 'Messenger', correct: false }
      - { value: 'Workflow', correct: false }
    help: |
      The EventDispatcher component implements the observer pattern, allowing components to communicate with each other by dispatching and listening to events.
      https://symfony.com/doc/current/components/event_dispatcher.html

  -
    question: >
      What is the primary benefit of using a "MicroKernelTrait" in a Symfony application?
    answers:
      - { value: 'It enables full-stack features like forms and security by default.', correct: false }
      - { value: 'It simplifies the kernel configuration for smaller applications or APIs by providing sensible defaults.', correct: true }
      - { value: 'It allows the application to run entirely without a web server.', correct: false }
      - { value: 'It automatically generates all necessary bundles.', correct: false }
    help: |
      The `MicroKernelTrait` simplifies the kernel setup for micro-applications by providing default implementations for `registerBundles()`, `configureContainer()`, and `configureRoutes()`.
      https://symfony.com/doc/current/configuration/micro_kernel_trait.html

  -
    question: |
      Which command would you use to check which services are available for autowiring in your Symfony application?
    answers:
      - { value: '`php bin/console debug:container`', correct: false }
      - { value: '`php bin/console debug:router`', correct: false }
      - { value: '`php bin/console debug:autowiring`', correct: true }
      - { value: '`php bin/console cache:clear`', correct: false }
    help: |
      The `debug:autowiring` command lists all interfaces and classes that Symfony can automatically inject into your services and controllers.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#_snippet_2

  -
    question: >
      What is the purpose of the `vendor/` directory in a Symfony project?
    answers:
      - { value: 'To store application-specific source code.', correct: false }
      - { value: 'To store Composer-managed third-party libraries and dependencies.', correct: true }
      - { value: 'To store cache and log files.', correct: false }
      - { value: 'To store public web assets like CSS and JavaScript.', correct: false }
    help: |
      The `vendor/` directory contains all the third-party libraries and dependencies installed via Composer.
      https://symfony.com/doc/current/best_practices.html#_snippet_1

  -
    question: |
      Given the following controller snippet, how does Symfony automatically provide the `LoggerInterface` instance to the `index` method?
      ```php
      namespace App\Controller;

      use Psr\Log\LoggerInterface;
      use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
      use Symfony\Component\HttpFoundation\Response;
      use Symfony\Component\Routing\Attribute\Route;

      class DefaultController extends AbstractController
      {
          #[Route('/hello/{name}', methods: ['GET'])]
          public function index(string $name, LoggerInterface $logger): Response
          {
              $logger->info("Saying hello to $name!");
              // ...
          }
      }
      ```
    answers:
      - { value: 'Through manual service configuration in `services.yaml`.', correct: false }
      - { value: 'Through Symfony''s autowiring feature, which resolves type-hinted dependencies from the service container.', correct: true }
      - { value: 'By directly instantiating `LoggerInterface` within the method.', correct: false }
      - { value: 'It''s a global variable automatically available in all controllers.', correct: false }
    help: |
      Symfony's autowiring automatically injects services into constructors and method arguments based on their type-hints, provided the service is defined in the container (which `LoggerInterface` is by default with Monolog).
      https://symfony.com/doc/current/quick_tour/the_architecture.html#_snippet_1

  -
    question: >
      Which of the following is a key characteristic of Symfony components?
    answers:
      - { value: 'They are tightly coupled and cannot be used independently.', correct: false }
      - { value: 'They are standalone PHP libraries that can be used independently of the full Symfony Framework.', correct: true }
      - { value: 'They only work with specific database systems.', correct: false }
      - { value: 'They require a specific web server configuration to function.', correct: false }
    help: |
      Symfony components are a set of decoupled and reusable PHP libraries that can be used independently or as part of the full Symfony Framework.
      https://symfony.com/components

  -
    question: >
      What is the primary role of Symfony Flex "recipes"?
    answers:
      - { value: 'To provide a graphical user interface for Symfony applications.', correct: false }
      - { value: 'To automate the installation and configuration of packages by adding/modifying files in the project.', correct: true }
      - { value: 'To generate database migration files.', correct: false }
      - { value: 'To manage user roles and permissions.', correct: false }
    help: |
      Flex recipes are small sets of instructions (files) that automate the installation and configuration of packages, integrating them seamlessly into a Symfony application.
      https://symfony.com/doc/current/setup/symfony_flex.html#recipes

  -
    question: >
      Which directory typically contains Twig templates in a standard Symfony project?
    answers:
      - { value: '`src/`', correct: false }
      - { value: '`public/`', correct: false }
      - { value: '`templates/`', correct: true }
      - { value: '`var/`', correct: false }
    help: |
      By default, Twig templates are stored in the `templates/` directory.
      https://symfony.com/doc/current/best_practices.html#_snippet_1

  -
    question: >
      What is the purpose of the `bin/console` executable in a Symfony application?
    answers:
      - { value: 'It is the web server entry point.', correct: false }
      - { value: 'It is the command-line tool for executing Symfony commands, such as cache clearing, database migrations, and debugging.', correct: true }
      - { value: 'It compiles the application''s assets.', correct: false }
      - { value: 'It manages Composer dependencies.', correct: false }
    help: |
      The `bin/console` script is the Symfony command-line tool, used for various administrative tasks and debugging.
      https://symfony.com/doc/current/console.html

  -
    question: >
      Which of the following is a benefit of Symfony's adherence to PSRs (PHP Standard Recommendations)?
    answers:
      - { value: 'It forces developers to use specific third-party libraries.', correct: false }
      - { value: 'It ensures interoperability with other PHP libraries and frameworks that also implement these standards.', correct: true }
      - { value: 'It guarantees faster application performance.', correct: false }
      - { value: 'It eliminates the need for Composer.', correct: false }
    help: |
      Adherence to PSRs promotes interoperability, allowing Symfony components to be easily integrated with other PSR-compliant libraries and frameworks.
      https://symfony.com/doc/current/contributing/code/standards.html

  -
    question: >
      When should you consider creating a custom Twig extension (e.g., a filter or function) in Symfony?
    answers:
      - { value: 'When you need to perform complex database queries directly in your templates.', correct: false }
      - { value: 'When you want to encapsulate reusable presentation logic that involves data manipulation or formatting within templates.', correct: true }
      - { value: 'When you need to handle form submissions.', correct: false }
      - { value: 'When you want to define new routes.', correct: false }
    help: |
      Custom Twig extensions (filters, functions, tags) are used to add custom logic to your templates, encapsulating reusable presentation logic.
      https://symfony.com/doc/current/templates/twig_extensions.html

  -
    question: >
      What is the primary purpose of the `config/packages/` directory in a Symfony application?
    answers:
      - { value: 'To store application-specific business logic.', correct: false }
      - { value: 'To define global services.', correct: false }
      - { value: 'To store configuration files for individual bundles and Symfony components.', correct: true }
      - { value: 'To store database migration files.', correct: false }
    help: |
      The `config/packages/` directory contains configuration files that are specific to individual Symfony bundles or components.
      https://symfony.com/doc/current/configuration.html#_snippet_0

  -
    question: >
      Which of the following best describes a "bridge" in the context of Symfony components?
    answers:
      - { value: 'A component that connects two different Symfony applications.', correct: false }
      - { value: 'A component that provides an integration layer between a Symfony component and a third-party library or PHP extension.', correct: true }
      - { value: 'A component that allows Symfony to run on different operating systems.', correct: false }
      - { value: 'A component that generates API documentation.', correct: false }
    help: |
      Symfony "bridges" are components that provide an integration layer between a Symfony component and a third-party library or PHP extension. For example, `MonologBridge` integrates Monolog with Symfony's logging.
      https://symfony.com/doc/current/components/index.html (Conceptual understanding, not direct snippet)

  -
    question: >
      What is the significance of the `APP_ENV` environment variable in a Symfony application?
    answers:
      - { value: 'It defines the application''s secret key for security.', correct: false }
      - { value: 'It specifies the current environment (e.g., `dev`, `prod`, `test`), influencing debugging, caching, and logging behavior.', correct: true }
      - { value: 'It determines the database connection string.', correct: false }
      - { value: 'It sets the default locale for the application.', correct: false }
    help: |
      `APP_ENV` controls the application's environment, which affects how Symfony behaves, including debugging, caching, and logging.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#_snippet_9

  -
    question: >
      When developing a Symfony application, what is the recommended practice for handling sensitive information like API keys or database credentials?
    answers:
      - { value: 'Hardcode them directly in `config/services.yaml`.', correct: false }
      - { value: 'Store them in version-controlled files like `parameters.yaml`.', correct: false }
      - { value: 'Use environment variables, typically loaded via the `.env` file, and access them through Symfony''s parameters or secrets management.', correct: true }
      - { value: 'Store them in public JavaScript files.', correct: false }
    help: |
      Sensitive information should be stored in environment variables (e.g., in `.env` or server configuration) and accessed via Symfony's parameters or secrets.
      https://symfony.com/doc/current/configuration/secrets.html

  -
    question: >
      Which Symfony component is responsible for providing a flexible and extensible message bus system for sending and receiving messages (commands, events, queries)?
    answers:
      - { value: 'Workflow', correct: false }
      - { value: 'Messenger', correct: true }
      - { value: 'Mailer', correct: false }
      - { value: 'Notifier', correct: false }
    help: |
      The Messenger component provides a message bus for handling messages, allowing for asynchronous processing and decoupling.
      https://symfony.com/doc/current/components/messenger.html

  -
    question: >
      What is the main purpose of the `composer.lock` file in a Symfony project?
    answers:
      - { value: 'To define the project''s dependencies.', correct: false }
      - { value: 'To lock the exact versions of all installed dependencies, ensuring consistent installations across environments.', correct: true }
      - { value: 'To store application configuration.', correct: false }
      - { value: 'To manage database schema changes.', correct: false }
    help: |
      The `composer.lock` file records the exact version of every dependency installed, ensuring that `composer install` always installs the same versions.
      https://getcomposer.org/doc/01-basic-usage.md#composer-lock-the-lock-file

  -
    question: >
      Which of the following is an example of a "kernel event" that is dispatched after the controller has returned a `Response` object, but before it is sent to the client?
    answers:
      - { value: '`kernel.request`', correct: false }
      - { value: '`kernel.controller`', correct: false }
      - { value: '`kernel.response`', correct: true }
      - { value: '`kernel.terminate`', correct: false }
    help: |
      The `kernel.response` event is dispatched after the controller has returned a `Response` object, allowing listeners to modify the response before it is sent.
      https://symfony.com/doc/current/reference/events.html#kernel-response

  -
    question: >
      What is the recommended way to start a new Symfony project using the Symfony CLI, ensuring you get the latest stable version?
    answers:
      - { value: '`composer create-project symfony/skeleton my_project`', correct: false }
      - { value: '`symfony new my_project`', correct: true }
      - { value: '`symfony new my_project --version=lts`', correct: false }
      - { value: '`git clone symfony/symfony my_project`', correct: false }
    help: |
      `symfony new my_project_directory` creates a new project using the latest stable Symfony version by default.
      https://symfony.com/doc/current/best_practices.html#_snippet_0

  -
    question: >
      When overriding a core Symfony service, what is the recommended approach to ensure maintainability and avoid issues during upgrades?
    answers:
      - { value: 'Directly modify the vendor file of the Symfony component.', correct: false }
      - { value: 'Create a new service with the same ID and configure it to replace the original in your `services.yaml`.', correct: true }
      - { value: 'Extend the original service class and register it with a different ID.', correct: false }
      - { value: 'Use PHP''s `runkit` extension to redefine the class at runtime.', correct: false }
    help: |
      To override a service, you should define a new service with the same ID in your `services.yaml` (or other configuration) and ensure it's loaded after the original definition.
      https://symfony.com/doc/current/service_container/replacing_services.html

  -
    question: >
      Which Symfony component provides a powerful configuration system that allows defining and validating complex configuration structures for bundles and applications?
    answers:
      - { value: 'Yaml', correct: false }
      - { value: 'Config', correct: true }
      - { value: 'OptionsResolver', correct: false }
      - { value: 'PropertyAccess', correct: false }
    help: |
      The Config component provides tools for defining and validating configuration structures, often used by bundles to process their configuration.
      https://symfony.com/doc/current/components/config/definition.html

  -
    question: >
      What is the purpose of the `when@prod` block in Symfony configuration files (e.g., `config/packages/routing.yaml`)?
    answers:
      - { value: 'It defines configuration that is only applied when the `APP_ENV` is set to `dev`.', correct: false }
      - { value: 'It defines configuration that is only applied when the `APP_ENV` is set to `prod`.', correct: true }
      - { value: 'It defines configuration that is applied in all environments except `prod`.', correct: false }
      - { value: 'It is a deprecated syntax and should not be used.', correct: false }
    help: |
      The `when@env` syntax allows you to define configuration that is only loaded when the application's `APP_ENV` matches the specified environment.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#_snippet_8

  -
    question: >
      Which of the following is a standard Symfony naming convention for a service class that generates greetings?
    answers:
      - { value: '`GreetingGenerator`', correct: true }
      - { value: '`GreetingService`', correct: false }
      - { value: '`GreetingUtil`', correct: false }
      - { value: '`GreetHelper`', correct: false }
    help: |
      While `GreetingService` is also common, `GreetingGenerator` aligns well with the example provided in the documentation for a class that generates greetings. Symfony encourages descriptive naming.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#_snippet_3

  -
    question: >
      What is the primary advantage of using a front controller pattern in a web application like Symfony?
    answers:
      - { value: 'It eliminates the need for a web server.', correct: false }
      - { value: 'It centralizes request handling, allowing for common tasks like security, routing, and error handling to be applied consistently.', correct: true }
      - { value: 'It directly exposes all PHP files to the web.', correct: false }
      - { value: 'It prevents the use of Composer for dependency management.', correct: false }
    help: |
      The front controller pattern centralizes all incoming requests through a single entry point, enabling consistent processing of requests and responses.
      https://symfony.com/doc/current/introduction/from_flat_php_to_symfony.html#_snippet_11

  -
    question: >
      Which Symfony component provides tools for creating and managing workflows and state machines?
    answers:
      - { value: 'Security', correct: false }
      - { value: 'Messenger', correct: false }
      - { value: 'Workflow', correct: true }
      - { value: 'Validator', correct: false }
    help: |
      The Workflow component allows you to define and manage workflows and state machines.
      https://symfony.com/doc/current/components/workflow.html

  -
    question: >
      What is the purpose of the `composer require --dev symfony/profiler-pack` command?
    answers:
      - { value: 'To install the Symfony Profiler for production environments.', correct: false }
      - { value: 'To install the Symfony Profiler and its dependencies for development and debugging purposes.', correct: true }
      - { value: 'To remove the Symfony Profiler from the project.', correct: false }
      - { value: 'To update the Symfony Profiler to the latest version.', correct: false }
    help: |
      The `--dev` flag indicates that the profiler pack is a development dependency, meaning it's installed only in development environments.
      https://symfony.com/doc/current/profiler.html#_snippet_0

  -
    question: >
      In Symfony's release management, what does an "LTS" version signify?
    answers:
      - { value: 'Limited Technical Support', correct: false }
      - { value: 'Long-Term Stability', correct: false }
      - { value: 'Long-Term Support', correct: true }
      - { value: 'Latest Test Release', correct: false }
    help: |
      LTS stands for Long-Term Support, indicating a version with extended maintenance and support.
      https://symfony.com/releases

  -
    question: >
      Which of the following is a common practice for organizing controllers in a Symfony application?
    answers:
      - { value: 'Placing all controllers in the root `src/` directory.', correct: false }
      - { value: 'Organizing them into subdirectories within `src/Controller/` based on features or domains.', correct: true }
      - { value: 'Storing them in the `public/` directory.', correct: false }
      - { value: 'Defining them directly in `config/routes.yaml`.', correct: false }
    help: |
      Controllers are typically organized in `src/Controller/` and can be further grouped into subdirectories for better organization.
      https://symfony.com/doc/current/best_practices.html#_snippet_1

  -
    question: >
      What is the purpose of the `#[AsCommand]` attribute in a Symfony console command class?
    answers:
      - { value: 'To define the command''s name and description, making it discoverable by the console application.', correct: true }
      - { value: 'To mark the command as a service for autowiring.', correct: false }
      - { value: 'To specify the input arguments and options for the command.', correct: false }
      - { value: 'To automatically execute the command on a schedule.', correct: false }
    help: |
      The `#[AsCommand]` attribute is used to configure the command's name, description, and other options directly in the class, replacing the static `$defaultName` property.
      https://symfony.com/doc/current/console.html#configuring-the-command

  -
    question: >
      Which Symfony component provides a robust framework for testing web applications, including functional and end-to-end tests?
    answers:
      - { value: 'BrowserKit', correct: true }
      - { value: 'DomCrawler', correct: false }
      - { value: 'WebProfilerBundle', correct: false }
      - { value: 'DebugBundle', correct: false }
    help: |
      The BrowserKit component provides a way to simulate HTTP requests and interact with a web application programmatically, forming the basis for functional tests. Panther extends this for end-to-end testing.
      https://symfony.com/doc/current/components/browser_kit.html

  -
    question: >
      What is the primary function of Symfony's `EventDispatcher` component in the request-response lifecycle?
    answers:
      - { value: 'To handle database transactions.', correct: false }
      - { value: 'To allow different parts of the application to communicate and react to specific actions without tight coupling.', correct: true }
      - { value: 'To manage user sessions.', correct: false }
      - { value: 'To render HTML templates.', correct: false }
    help: |
      The EventDispatcher component enables a loosely coupled architecture by allowing events to be dispatched and listeners to react to them, facilitating communication between different parts of the application.
      https://symfony.com/doc/current/components/event_dispatcher.html

  -
    question: >
      Which of the following is a standard naming convention for a repository class associated with an `App\Entity\Product` entity?
    answers:
      - { value: '`ProductManager`', correct: false }
      - { value: '`ProductService`', correct: false }
      - { value: '`ProductRepository`', correct: true }
      - { value: '`ProductHandler`', correct: false }
    help: |
      Repository classes, typically used with Doctrine ORM, are conventionally named by appending `Repository` to the entity name.
      https://symfony.com/doc/current/doctrine.html#creating-an-entity-class

  -
    question: >
      What is the purpose of the `public/build/` directory in a Symfony application?
    answers:
      - { value: 'It stores Composer dependencies.', correct: false }
      - { value: 'It contains compiled frontend assets (e.g., CSS, JavaScript) generated by Webpack Encore.', correct: true }
      - { value: 'It stores application logs.', correct: false }
      - { value: 'It is a temporary directory for cache files.', correct: false }
    help: |
      The `public/build/` directory is where Webpack Encore outputs compiled frontend assets.
      https://symfony.com/doc/current/frontend/encore/installation.html

  -
    question: >
      When should you consider using Symfony's `RedirectController` for routing?
    answers:
      - { value: 'When you need to perform complex business logic before redirecting.', correct: false }
      - { value: 'When you need to redirect a URL to another internal route or external URL with simple configuration, without writing a custom controller.', correct: true }
      - { value: 'When you want to render a Twig template.', correct: false }
      - { value: 'When you need to handle form submissions and validation.', correct: false }
    help: |
      The `RedirectController` provides a simple way to configure redirects directly in your routing configuration without the need for a dedicated controller action.
      https://symfony.com/doc/current/routing.html#_snippet_44

  -
    question: >
      Which command is used to install the Symfony Validator component?
    answers:
      - { value: '`composer require symfony/validation`', correct: false }
      - { value: '`composer require validator`', correct: false }
      - { value: '`composer require symfony/validator`', correct: true }
      - { value: '`composer install validator`', correct: false }
    help: |
      The command to install the Symfony Validator component is `composer require symfony/validator`.
      https://symfony.com/doc/current/forms.html#_snippet_12

  -
    question: >
      What is the primary function of the `Kernel` class in a Symfony application?
    answers:
      - { value: 'It handles database connections and queries.', correct: false }
      - { value: 'It acts as the central orchestrator, bootstrapping the application, registering bundles, configuring the container, and handling the request-response lifecycle.', correct: true }
      - { value: 'It defines all the application''s routes and controllers.', correct: false }
      - { value: 'It manages user authentication and authorization.', correct: false }
    help: |
      The `Kernel` class is the core of a Symfony application, responsible for bootstrapping, bundle registration, container configuration, and managing the request-response flow.
      https://symfony.com/doc/current/components/http_kernel.html

  -
    question: >
      Which of the following is a recommended practice for managing application assets (CSS, JavaScript, images) in Symfony?
    answers:
      - { value: 'Placing them directly in the `src/` directory.', correct: false }
      - { value: 'Using Webpack Encore to compile and manage them, outputting to `public/build/`.', correct: true }
      - { value: 'Manually linking them from external CDNs without local copies.', correct: false }
      - { value: 'Storing them in the `var/log/` directory.', correct: false }
    help: |
      Symfony recommends using Webpack Encore for managing and compiling frontend assets, which are then served from `public/build/`.
      https://symfony.com/doc/current/frontend/encore/installation.html

  -
    question: >
      What is the purpose of the `#[AsTwigFilter]` attribute in a custom Twig extension?
    answers:
      - { value: 'To define a new Twig function.', correct: false }
      - { value: 'To register a PHP method as a Twig filter, enabling autoconfiguration of the extension.', correct: true }
      - { value: 'To inject services into the Twig extension.', correct: false }
      - { value: 'To mark the Twig extension as a global service.', correct: false }
    help: |
      The `#[AsTwigFilter]` attribute allows Symfony to automatically register a method as a Twig filter, simplifying the configuration of custom Twig extensions.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#_snippet_6

  -
    question: >
      Which of the following is NOT a core concept of the Symfony Messenger component?
    answers:
      - { value: 'Sender', correct: false }
      - { value: 'Receiver', correct: false }
      - { value: 'Handler', correct: false }
      - { value: 'Renderer', correct: true }
    help: |
      The core concepts of Symfony Messenger include Sender, Receiver, Handler, Middleware, Envelope, and Envelope Stamps. Renderer is not a core Messenger concept.
      https://symfony.com/doc/current/components/messenger.html#_snippet_1

  -
    question: >
      What is the primary benefit of Symfony's "components" architecture?
    answers:
      - { value: 'It forces developers to use the full Symfony Framework for every project.', correct: false }
      - { value: 'It allows developers to use individual Symfony libraries in any PHP project, promoting reusability and flexibility.', correct: true }
      - { value: 'It ensures that all Symfony applications have the same directory structure.', correct: false }
      - { value: 'It eliminates the need for Composer to manage dependencies.', correct: false }
    help: |
      The component-based architecture allows individual Symfony libraries to be used independently, promoting reusability and flexibility in various PHP projects.
      https://symfony.com/components

  -
    question: >
      Which command is typically used to install the Symfony FrameworkBundle and Runtime components for a minimal Symfony application?
    answers:
      - { value: '`composer require symfony/full-stack`', correct: false }
      - { value: '`composer require symfony/framework-bundle symfony/runtime`', correct: true }
      - { value: '`composer install symfony/framework`', correct: false }
      - { value: '`symfony new my_project --minimal`', correct: false }
    help: |
      These are the essential components for a basic Symfony application setup.
      https://symfony.com/doc/current/configuration/micro_kernel_trait.html#_snippet_0

  -
    question: >
      What is the purpose of the `symfony/requirements-checker` package?
    answers:
      - { value: 'To generate a list of required Composer packages.', correct: false }
      - { value: 'To verify if the server environment meets Symfony''s technical requirements, especially for production deployment.', correct: true }
      - { value: 'To check for deprecated Symfony features in your code.', correct: false }
      - { value: 'To analyze code quality and coding standards.', correct: false }
    help: |
      The `symfony/requirements-checker` package provides a script to check if the server environment meets all the technical requirements for running Symfony.
      https://symfony.com/doc/current/deployment.html#_snippet_0

  -
    question: >
      Which of the following is a key aspect of Symfony's backward compatibility promise regarding deprecations?
    answers:
      - { value: 'Deprecated features are immediately removed in the next minor version.', correct: false }
      - { value: 'Deprecated features are guaranteed to work for at least 5 major versions.', correct: false }
      - { value: 'Deprecated features will continue to work until the next major version, providing a clear upgrade path.', correct: true }
      - { value: 'Deprecated features are automatically replaced by new ones during `composer update`.', correct: false }
    help: |
      Deprecated features are kept for an entire major version cycle, giving developers time to migrate their code before they are removed in the next major version.
      https://symfony.com/doc/current/contributing/code/bc.html#deprecations

  -
    question: >
      What is the primary role of the `public/` directory in a Symfony project?
    answers:
      - { value: 'To store all application source code.', correct: false }
      - { value: 'To contain all publicly accessible files, such as the front controller (`index.php`) and compiled assets.', correct: true }
      - { value: 'To store configuration files.', correct: false }
      - { value: 'To store temporary cache files.', correct: false }
    help: |
      The `public/` directory is the web root, containing the `index.php` front controller and all other publicly accessible assets.
      https://symfony.com/doc/current/best_practices.html#_snippet_1

  -
    question: >
      When integrating a legacy application with Symfony, what is a common strategy to gradually migrate to Symfony?
    answers:
      - { value: 'Rewrite the entire legacy application from scratch in Symfony immediately.', correct: false }
      - { value: 'Run the Symfony kernel alongside the legacy application, allowing Symfony to handle new routes while the legacy app handles unhandled ones.', correct: true }
      - { value: 'Use a separate database for Symfony and the legacy application.', correct: false }
      - { value: 'Disable all Symfony components and only use the legacy code.', correct: false }
    help: |
      A common strategy is to integrate the Symfony kernel into the legacy application's front controller, allowing Symfony to handle new routes and gradually migrating functionality.
      https://symfony.com/doc/current/migration.html#_snippet_2

  -
    question: >
      Which Symfony component provides a flexible way to manage and retrieve configuration parameters from various sources (e.g., YAML, XML, PHP files, environment variables)?
    answers:
      - { value: 'DependencyInjection', correct: true }
      - { value: 'Yaml', correct: false }
      - { value: 'Dotenv', correct: false }
      - { value: 'PropertyAccess', correct: false }
    help: |
      The DependencyInjection component is at the heart of Symfony's configuration system, allowing parameters and services to be defined and retrieved.
      https://symfony.com/doc/current/components/dependency_injection.html

  -
    question: >
      What is the purpose of the `assets` configuration in `framework.yaml`?
    answers:
      - { value: 'To define database connection settings.', correct: false }
      - { value: 'To configure base paths or URLs for serving static assets (CSS, JS, images).', correct: true }
      - { value: 'To manage user authentication tokens.', correct: false }
      - { value: 'To define routing rules.', correct: false }
    help: |
      The `assets` configuration under `framework` allows you to define base paths or URLs for assets, useful for CDN integration.
      https://symfony.com/doc/current/reference/configuration/framework.html#_snippet_2

  -
    question: >
      Which of the following is a standard naming convention for an event subscriber class in Symfony?
    answers:
      - { value: '`UserListener`', correct: false }
      - { value: '`UserEvent`', correct: false }
      - { value: '`UserSubscriber`', correct: true }
      - { value: '`UserObserver`', correct: false }
    help: |
      Event subscriber classes are conventionally named by appending `Subscriber` to their descriptive name.
      https://symfony.com/doc/current/event_dispatcher/event_subscribers.html

  -
    question: >
      What is the primary purpose of the `var/log/` directory in a Symfony application?
    answers:
      - { value: 'To store application cache files.', correct: false }
      - { value: 'To store database backups.', correct: false }
      - { value: 'To store application log files (e.g., `dev.log`, `prod.log`).', correct: true }
      - { value: 'To store user-uploaded files.', correct: false }
    help: |
      The `var/log/` directory is where Symfony stores various log files, such as `dev.log` and `prod.log`, depending on the environment.
      https://symfony.com/doc/current/best_practices.html#_snippet_1

  -
    question: >
      Which of the following is true about Symfony's release schedule for non-LTS versions?
    answers:
      - { value: 'Non-LTS versions receive bug fixes for 3 years and security fixes for 4 years.', correct: false }
      - { value: 'Non-LTS versions receive bug fixes for 8 months and security fixes for 14 months.', correct: true }
      - { value: 'Non-LTS versions are immediately deprecated upon the release of the next minor version.', correct: false }
      - { value: 'Non-LTS versions receive no bug fixes or security fixes.', correct: false }
    help: |
      Non-LTS versions receive bug fixes for 8 months and security fixes for 14 months.
      https://symfony.com/releases

  -
    question: >
      What is the role of the `Symfony\Component\HttpFoundation\Request` object in the Symfony request handling process?
    answers:
      - { value: 'It sends the HTTP response back to the client.', correct: false }
      - { value: 'It represents the incoming HTTP request, encapsulating all request data (headers, query parameters, body, etc.).', correct: true }
      - { value: 'It defines the application''s routing rules.', correct: false }
      - { value: 'It manages the application''s service container.', correct: false }
    help: |
      The `Request` object encapsulates all the information from the HTTP request, providing an object-oriented way to access it.
      https://symfony.com/doc/current/components/http_foundation.html#_snippet_5

  -
    question: >
      Which of the following describes Symfony's approach to framework overloading or extending core functionality?
    answers:
      - { value: 'Direct modification of files in the `vendor/` directory is encouraged.', correct: false }
      - { value: 'It promotes extending classes, overriding services, and using events to customize behavior without modifying core files.', correct: true }
      - { value: 'It relies solely on PHP''s `__call` and `__get` magic methods for extensions.', correct: false }
      - { value: 'Overloading is strictly forbidden and will lead to application instability.', correct: false }
    help: |
      Symfony encourages extending classes, overriding services, and using the event dispatcher to customize and extend functionality without directly modifying core files.
      https://symfony.com/doc/current/cookbook/bundles/override.html (Conceptual understanding)

  -
    question: >
      What is the purpose of the `config/bundles.php` file in a Symfony application?
    answers:
      - { value: 'To define all application routes.', correct: false }
      - { value: 'To register all bundles (Symfony components or third-party libraries) that are enabled in the application.', correct: true }
      - { value: 'To configure database connections.', correct: false }
      - { value: 'To define global parameters for the service container.', correct: false }
    help: |
      The `config/bundles.php` file is where all the bundles used by the application are registered.
      https://symfony.com/doc/current/configuration.html#_snippet_0

  -
    question: >
      Which of the following is a key principle of Symfony's code organization best practices?
    answers:
      - { value: 'Placing all code in a single file for simplicity.', correct: false }
      - { value: 'Organizing code by feature or domain, rather than by type (e.g., all controllers in one folder, all services in another).', correct: true }
      - { value: 'Avoiding the use of namespaces to simplify class loading.', correct: false }
      - { value: 'Storing sensitive configuration directly in publicly accessible directories.', correct: false }
    help: |
      Symfony's best practices advocate for organizing code by feature or domain (e.g., `src/User/`, `src/Product/`) rather than by type (`src/Controller/`, `src/Service/`).
      https://symfony.com/doc/current/best_practices.html#_snippet_1

  -
    question: >
      Which Symfony component provides tools for handling command-line interfaces (CLIs)?
    answers:
      - { value: 'Console', correct: true }
      - { value: 'Process', correct: false }
      - { value: 'Finder', correct: false }
      - { value: 'Yaml', correct: false }
    help: |
      The Console component provides all the tools to create command-line commands.
      https://symfony.com/doc/current/components/console.html

  -
    question: >
      What is the primary purpose of the `Symfony\Component\HttpFoundation\Response` object in the Symfony request handling process?
    answers:
      - { value: 'It processes incoming HTTP requests.', correct: false }
      - { value: 'It represents the outgoing HTTP response, including content, headers, and status code.', correct: true }
      - { value: 'It manages user sessions.', correct: false }
      - { value: 'It handles database queries.', correct: false }
    help: |
      The `Response` object encapsulates all the information that will be sent back to the client, such as content, HTTP headers, and status code.
      https://symfony.com/doc/current/components/http_foundation.html#_snippet_5

  -
    question: >
      Which of the following is a valid way to specify a Symfony version when creating a new project using the Symfony CLI?
    answers:
      - { value: '`symfony new my_project --version=latest`', correct: false }
      - { value: '`symfony new my_project --version=lts`', correct: true }
      - { value: '`symfony new my_project --version=stable`', correct: false }
      - { value: '`symfony new my_project --version=dev`', correct: false }
    help: |
      You can specify `lts` for the latest Long Term Support version, `next` for the upcoming version, or an exact version string like `"6.4.*"`.
      https://symfony.com/doc/current/setup.html#_snippet_10

  -
    question: >
      What is the role of the `composer.json` file in a Symfony project?
    answers:
      - { value: 'It defines the application''s database schema.', correct: false }
      - { value: 'It declares the project''s dependencies and metadata, used by Composer to manage packages.', correct: true }
      - { value: 'It stores environment variables.', correct: false }
      - { value: 'It contains all the application''s business logic.', correct: false }
    help: |
      The `composer.json` file is the central configuration file for Composer, defining project dependencies, autoloading rules, and other metadata.
      https://getcomposer.org/doc/01-basic-usage.md#composer-json-project-setup

  -
    question: >
      Which Symfony component provides a flexible and powerful way to define and manage security features like authentication, authorization, and firewalls?
    answers:
      - { value: 'Security', correct: true }
      - { value: 'Validator', correct: false }
      - { value: 'Form', correct: false }
      - { value: 'Mailer', correct: false }
    help: |
      The Security component provides the core functionalities for implementing security in Symfony applications.
      https://symfony.com/doc/current/components/security.html

  -
    question: >
      What is the purpose of the `#[Autowire]` attribute in Symfony?
    answers:
      - { value: 'To manually define a service in the container.', correct: false }
      - { value: 'To explicitly specify which service to inject when autowiring cannot determine it automatically, or to inject a specific service ID.', correct: true }
      - { value: 'To mark a class as a controller.', correct: false }
      - { value: 'To prevent a service from being autowired.', correct: false }
    help: |
      The `#[Autowire]` attribute allows for explicit autowiring, specifying the exact service to inject or providing arguments for service creation.
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring-attributes

  -
    question: >
      Which of the following is a best practice for naming services in Symfony?
    answers:
      - { value: 'Using generic names like `my_service` for all services.', correct: false }
      - { value: 'Using fully-qualified class names (FQCNs) as service IDs for autowiring, or descriptive names for explicitly defined services.', correct: true }
      - { value: 'Naming services with a `_` prefix to indicate they are private.', correct: false }
      - { value: 'Avoiding any naming conventions to allow for maximum flexibility.', correct: false }
    help: |
      Using FQCNs for autowiring is standard, and for explicitly defined services, descriptive and clear names are recommended.
      https://symfony.com/doc/current/service_container/autowiring.html

  -
    question: >
      What is the primary purpose of the `src/` directory in a Symfony project?
    answers:
      - { value: 'To store third-party libraries.', correct: false }
      - { value: 'To contain all application-specific source code, including controllers, services, entities, and custom classes.', correct: true }
      - { value: 'To store public web assets.', correct: false }
      - { value: 'To store cached data.', correct: false }
    help: |
      The `src/` directory is where all your application's custom PHP code resides.
      https://symfony.com/doc/current/best_practices.html#_snippet_1

  -
    question: >
      Which of the following is a key aspect of Symfony's approach to backward compatibility?
    answers:
      - { value: 'Breaking changes are introduced in every minor version.', correct: false }
      - { value: 'Public APIs are generally stable within a major version, with breaking changes reserved for new major versions.', correct: true }
      - { value: 'All internal code is guaranteed to be backward compatible across all versions.', correct: false }
      - { value: 'Symfony provides automated tools to fix all backward compatibility breaks.', correct: false }
    help: |
      Symfony maintains backward compatibility for its public APIs within a major version, with breaking changes only occurring in new major versions.
      https://symfony.com/doc/current/contributing/code/bc.html

  -
    question: >
      What is the purpose of the `kernel.terminate` event in the Symfony request-response lifecycle?
    answers:
      - { value: 'It is dispatched before the request is handled.', correct: false }
      - { value: 'It is dispatched after the response has been sent to the client, allowing for cleanup tasks or long-running processes.', correct: true }
      - { value: 'It is dispatched when an exception occurs.', correct: false }
      - { value: 'It is dispatched before the controller is executed.', correct: false }
    help: |
      The `kernel.terminate` event is dispatched after the response has been sent to the client, making it suitable for tasks that can run after the user has received the response.
      https://symfony.com/doc/current/reference/events.html#kernel-terminate

  -
    question: >
      Which of the following is a common naming convention for an entity class in Symfony?
    answers:
      - { value: '`UserEntity`', correct: false }
      - { value: '`UserObject`', correct: false }
      - { value: '`User`', correct: true }
      - { value: '`UserDTO`', correct: false }
    help: |
      Entity classes are typically named after the singular noun they represent, without a suffix like `Entity`.
      https://symfony.com/doc/current/doctrine.html#creating-an-entity-class

  -
    question: >
      What is the primary benefit of Symfony's "bundle" concept?
    answers:
      - { value: 'It allows for the creation of standalone PHP applications without Symfony.', correct: false }
      - { value: 'It provides a structured way to organize and reuse features (code, configuration, assets) within and across Symfony applications.', correct: true }
      - { value: 'It is a deprecated feature and should not be used in new projects.', correct: false }
      - { value: 'It is only used for third-party integrations, not for application-specific code.', correct: false }
    help: |
      Bundles are like plugins in other software, providing a structured way to package and reuse features within Symfony applications.
      https://symfony.com/doc/current/bundles.html

  -
    question: >
      Which of the following is a key aspect of Symfony's approach to framework interoperability?
    answers:
      - { value: 'It aims to replace all other PHP frameworks.', correct: false }
      - { value: 'It leverages Composer for dependency management and adheres to PSRs to ensure compatibility with other PHP libraries and tools.', correct: true }
      - { value: 'It only supports its own proprietary standards.', correct: false }
      - { value: 'It requires a specific operating system to run.', correct: false }
    help: |
      Symfony's interoperability is achieved through Composer for dependency management and adherence to PSRs, allowing it to work well with other PHP components.
      https://symfony.com/doc/current/components/index.html (Conceptual understanding)

  -
    question: >
      What is the purpose of the `config/services.yaml` file in a Symfony application?
    answers:
      - { value: 'To define all application routes.', correct: false }
      - { value: 'To configure the Dependency Injection Container, defining services and their dependencies.', correct: true }
      - { value: 'To store environment variables.', correct: false }
      - { value: 'To manage database migrations.', correct: false }
    help: |
      The `config/services.yaml` file is the primary location for defining and configuring services in the Dependency Injection Container.
      https://symfony.com/doc/current/service_container.html

  -
    question: >
      Which of the following is a recommended practice for handling deprecations in your Symfony application?
    answers:
      - { value: 'Disable deprecation notices to avoid cluttering logs.', correct: false }
      - { value: 'Address deprecations as they appear, ideally before upgrading to the next major Symfony version.', correct: true }
      - { value: 'Wait until the deprecated feature is completely removed before refactoring.', correct: false }
      - { value: 'Treat deprecations as critical errors that must be fixed immediately in production.', correct: false }
    help: |
      It's best practice to address deprecations proactively to ensure a smoother upgrade path to future major versions.
      https://symfony.com/doc/current/contributing/code/bc.html#deprecations

  -
    question: >
      What is the primary purpose of Symfony's `MicroKernelTrait`?
    answers:
      - { value: 'To enable full-stack features like forms and security by default.', correct: false }
      - { value: 'To simplify the kernel implementation for smaller applications or APIs by providing default methods for bundle registration, container, and route configuration.', correct: true }
      - { value: 'To allow the application to run entirely without a web server.', correct: false }
      - { value: 'To automatically generate all necessary bundles.', correct: false }
    help: |
      The `MicroKernelTrait` simplifies the kernel setup for micro-applications by providing default implementations for `registerBundles()`, `configureContainer()`, and `configureRoutes()`.
      https://symfony.com/doc/current/configuration/micro_kernel_trait.html

  -
    question: >
      Which of the following is a standard naming convention for a form type class in Symfony?
    answers:
      - { value: '`UserForm`', correct: false }
      - { value: '`UserType`', correct: true }
      - { value: '`UserBuilder`', correct: false }
      - { value: '`UserHandler`', correct: false }
    help: |
      Form type classes are conventionally named by appending `Type` to their descriptive name.
      https://symfony.com/doc/current/forms.html#creating-form-classes

  -
    question: >
      What is the significance of the `APP_SECRET` environment variable in a Symfony application?
    answers:
      - { value: 'It defines the application''s environment (e.g., `dev`, `prod`).', correct: false }
      - { value: 'It is a secret string used for various security-related tasks, such as generating CSRF tokens and signing cookies.', correct: true }
      - { value: 'It specifies the database password.', correct: false }
      - { value: 'It controls the application''s debugging mode.', correct: false }
    help: |
      `APP_SECRET` is a unique secret string used for security purposes, including CSRF protection and session management.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#_snippet_10

  -
    question: >
      Which of the following is a core principle behind Symfony's architecture regarding components?
    answers:
      - { value: 'Components are tightly coupled and depend heavily on each other.', correct: false }
      - { value: 'Components are designed to be decoupled and reusable, allowing them to be used independently or as part of the full framework.', correct: true }
      - { value: 'Components are only for internal Symfony use and cannot be used in other projects.', correct: false }
      - { value: 'Components must always be installed as a single monolithic package.', correct: false }
    help: |
      Symfony's components are designed to be decoupled and reusable, promoting modularity and flexibility.
      https://symfony.com/components

  -
    question: >
      What is the primary purpose of the `tests/` directory in a Symfony project?
    answers:
      - { value: 'To store application configuration.', correct: false }
      - { value: 'To contain all automated tests (unit, functional, integration) for the application.', correct: true }
      - { value: 'To store temporary cache files.', correct: false }
      - { value: 'To store user-uploaded files.', correct: false }
    help: |
      The `tests/` directory is where all the application's automated tests are stored.
      https://symfony.com/doc/current/best_practices.html#_snippet_1

  -
    question: >
      Which of the following is a key benefit of Symfony's event dispatcher system?
    answers:
      - { value: 'It eliminates the need for dependency injection.', correct: false }
      - { value: 'It promotes loose coupling between different parts of the application, allowing for easier extension and modification.', correct: true }
      - { value: 'It forces all code to be written in a single file.', correct: false }
      - { value: 'It automatically handles all database operations.', correct: false }
    help: |
      The event dispatcher promotes loose coupling by allowing components to interact without direct dependencies, making the application more flexible and extensible.
      https://symfony.com/doc/current/components/event_dispatcher.html

  -
    question: >
      What is the purpose of the `symfony/serializer-pack`?
    answers:
      - { value: 'To handle form submissions.', correct: false }
      - { value: 'To provide tools for converting PHP objects to various formats (e.g., JSON, XML) and vice versa.', correct: true }
      - { value: 'To manage user authentication.', correct: false }
      - { value: 'To send emails.', correct: false }
    help: |
      The `symfony/serializer-pack` installs the Serializer component and its common dependencies, used for converting objects to/from various formats.
      https://symfony.com/doc/current/serializer.html#_snippet_0

  -
    question: >
      Which of the following is a standard naming convention for a command class in Symfony?
    answers:
      - { value: '`MyCommand`', correct: true }
      - { value: '`MyConsole`', correct: false }
      - { value: '`MyTask`', correct: false }
      - { value: '`MyExecutor`', correct: false }
    help: |
      Command classes are conventionally named by appending `Command` to their descriptive name.
      https://symfony.com/doc/current/console.html#creating-a-command

  -
    question: >
      What is the role of the `symfony/runtime` component?
    answers:
      - { value: 'It provides a full-stack web framework.', correct: false }
      - { value: 'It abstracts away the global state and superglobals, making applications more testable and reusable in different PHP environments (e.g., web, CLI, serverless).', correct: true }
      - { value: 'It manages database connections.', correct: false }
      - { value: 'It handles routing and controller resolution.', correct: false }
    help: |
      The Runtime component provides a thin layer that abstracts away the global state and superglobals, allowing a single application to run in different PHP environments.
      https://symfony.com/doc/current/components/runtime.html

  -
    question: >
      Which of the following is a common practice for handling exceptions in Symfony controllers?
    answers:
      - { value: 'Catching every possible exception and logging it manually.', correct: false }
      - { value: 'Allowing unhandled exceptions to bubble up, relying on Symfony''s exception handling to convert them into appropriate HTTP responses (e.g., 404, 500).', correct: true }
      - { value: 'Returning a plain text error message for all exceptions.', correct: false }
      - { value: 'Using `die()` or `exit()` to stop execution on any error.', correct: false }
    help: |
      Symfony's exception handling mechanism (via the ErrorHandler component and kernel events) is designed to catch unhandled exceptions and convert them into proper HTTP responses.
      https://symfony.com/doc/current/controller/exceptions.html

  -
    question: >
      What is the primary purpose of the `templates/` directory in a Symfony project?
    answers:
      - { value: 'To store PHP classes.', correct: false }
      - { value: 'To store Twig template files for rendering views.', correct: true }
      - { value: 'To store configuration files.', correct: false }
      - { value: 'To store JavaScript files.', correct: false }
    help: |
      The `templates/` directory is the default location for Twig template files.
      https://symfony.com/doc/current/best_practices.html#_snippet_1

  -
    question: >
      Which of the following describes Symfony's approach to release management and roadmap schedule?
    answers:
      - { value: 'New major versions are released annually, with LTS versions every two years.', correct: false }
      - { value: 'New major versions are released every two years, with LTS versions every four years.', correct: true }
      - { value: 'Releases are ad-hoc and do not follow a predictable schedule.', correct: false }
      - { value: 'Only LTS versions are released, with no regular versions.', correct: false }
    help: |
      Symfony releases a new major version every two years, with LTS versions being released every four years.
      https://symfony.com/releases

  -
    question: >
      What is the purpose of the `composer require symfony/twig-bundle` command?
    answers:
      - { value: 'To install the Twig templating engine without Symfony integration.', correct: false }
      - { value: 'To install the TwigBundle, which integrates the Twig templating engine with the Symfony Framework.', correct: true }
      - { value: 'To remove the Twig templating engine.', correct: false }
      - { value: 'To update Twig templates.', correct: false }
    help: |
      This command installs the TwigBundle, providing the necessary integration for Twig in a Symfony application.
      https://symfony.com/doc/current/templates.html#_snippet_0

  -
    question: >
      Which of the following is a common naming convention for an event class in Symfony?
    answers:
      - { value: '`UserCreatedEvent`', correct: true }
      - { value: '`UserEventData`', correct: false }
      - { value: '`UserAction`', correct: false }
      - { value: '`UserNotifier`', correct: false }
    help: |
      Event classes are typically named by appending `Event` to a description of the action that occurred.
      https://symfony.com/doc/current/event_dispatcher.html#creating-an-event-class

  -
    question: >
      What is the primary role of Symfony's `Routing` component?
    answers:
      - { value: 'To handle database queries.', correct: false }
      - { value: 'To map incoming HTTP requests to the appropriate controller and action based on defined URL patterns.', correct: true }
      - { value: 'To manage user sessions.', correct: false }
      - { value: 'To render HTML templates.', correct: false }
    help: |
      The Routing component maps incoming HTTP requests to the controller and action that should handle them.
      https://symfony.com/doc/current/components/routing.html

  -
    question: >
      Which of the following is a key benefit of Symfony's adherence to the "Convention over Configuration" principle?
    answers:
      - { value: 'It requires extensive manual configuration for every feature.', correct: false }
      - { value: 'It reduces the amount of configuration needed by providing sensible defaults and conventions, allowing developers to focus on business logic.', correct: true }
      - { value: 'It eliminates the need for any configuration files.', correct: false }
      - { value: 'It forces developers to use specific third-party libraries.', correct: false }
    help: |
      Convention over Configuration means that Symfony provides sensible defaults and conventions, reducing the need for explicit configuration and allowing developers to be more productive.
      (General Symfony principle, not tied to a specific snippet, but fundamental to its architecture).

  -
    question: >
      What is the purpose of the `composer require doctrine` command in a Symfony application?
    answers:
      - { value: 'To install the Doctrine ORM and its associated Symfony bundle for database interaction.', correct: true }
      - { value: 'To install only the Doctrine DBAL component.', correct: false }
      - { value: 'To remove Doctrine from the project.', correct: false }
      - { value: 'To update Doctrine entities.', correct: false }
    help: |
      `composer require doctrine` installs the Doctrine ORM and the DoctrineBundle, which integrates Doctrine with Symfony.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#_snippet_11

  -
    question: >
      Which of the following is a standard naming convention for a data fixture class in Symfony?
    answers:
      - { value: '`AppFixtures`', correct: true }
      - { value: '`AppData`', correct: false }
      - { value: '`AppLoader`', correct: false }
      - { value: '`AppSeeder`', correct: false }
    help: |
      Data fixture classes are conventionally named by appending `Fixtures` to their descriptive name.
      https://symfony.com/doc/current/bundles/DoctrineFixturesBundle/index.html

  -
    question: >
      What is the primary purpose of the `config/routes/` directory in a Symfony application?
    answers:
      - { value: 'To store configuration for services.', correct: false }
      - { value: 'To define application-wide routing configurations, often separated by environment or feature.', correct: true }
      - { value: 'To store asset configuration.', correct: false }
      - { value: 'To store security configurations.', correct: false }
    help: |
      The `config/routes/` directory is used to organize routing configurations, allowing for better modularity and environment-specific routing.
      https://symfony.com/doc/current/routing.html

  -
    question: >
      Which of the following is a key characteristic of Symfony's approach to backward compatibility regarding internal APIs?
    answers:
      - { value: 'Internal APIs are guaranteed to be backward compatible across all versions.', correct: false }
      - { value: 'Internal APIs are not subject to the backward compatibility promise and may change between minor versions.', correct: true }
      - { value: 'Internal APIs are automatically updated during Composer updates.', correct: false }
      - { value: 'Internal APIs are publicly documented and should be used by developers.', correct: false }
    help: |
      The backward compatibility promise applies primarily to public APIs. Internal APIs are not guaranteed to be stable and may change in minor versions.
      https://symfony.com/doc/current/contributing/code/bc.html

  -
    question: >
      What is the purpose of the `symfony/ldap` component?
    answers:
      - { value: 'To interact with relational databases.', correct: false }
      - { value: 'To provide an LDAP client for interacting with LDAP servers.', correct: true }
      - { value: 'To manage user authentication via OAuth.', correct: false }
      - { value: 'To handle file uploads.', correct: false }
    help: |
      The `symfony/ldap` component provides a client for interacting with LDAP servers.
      https://symfony.com/doc/current/security/ldap.html#_snippet_0

  -
    question: >
      Which of the following is a standard naming convention for an event listener class in Symfony?
    answers:
      - { value: '`UserListener`', correct: true }
      - { value: '`UserObserver`', correct: false }
      - { value: '`UserHandler`', correct: false }
      - { value: '`UserProcessor`', correct: false }
    help: |
      Event listener classes are conventionally named by appending `Listener` to their descriptive name.
      https://symfony.com/doc/current/event_dispatcher.html#creating-an-event-listener

  -
    question: >
      What is the primary benefit of Symfony's `MicroKernelTrait` for multi-application setups?
    answers:
      - { value: 'It forces all applications to share the same configuration files.', correct: false }
      - { value: 'It allows for independent configuration (bundles, services, routes) for each application while sharing a common kernel and project structure.', correct: true }
      - { value: 'It eliminates the need for multiple front controllers.', correct: false }
      - { value: 'It automatically deploys each application to a separate server.', correct: false }
    help: |
      The `MicroKernelTrait` can be extended to support multiple applications within a single project, allowing each app to have its own configuration while sharing common resources.
      https://symfony.com/doc/current/configuration/multiple_kernels.html#_snippet_3

  -
    question: >
      Which of the following is a key responsibility of a `Handler` in the Symfony Messenger component?
    answers:
      - { value: 'To serialize and send messages to a message broker.', correct: false }
      - { value: 'To retrieve and deserialize messages from a message broker.', correct: false }
      - { value: 'To apply business logic to a message.', correct: true }
      - { value: 'To modify the message envelope during dispatch.', correct: false }
    help: |
      A Handler is responsible for processing a message using the application's business logic.
      https://symfony.com/doc/current/components/messenger.html#_snippet_1

  -
    question: >
      What is the purpose of the `symfony/webpack-encore-bundle`?
    answers:
      - { value: 'To manage PHP dependencies.', correct: false }
      - { value: 'To integrate Webpack Encore, a JavaScript tool for asset compilation, with Symfony applications.', correct: true }
      - { value: 'To provide a full-stack JavaScript framework.', correct: false }
      - { value: 'To handle server-side rendering of React components.', correct: false }
    help: |
      The Webpack Encore Bundle provides the integration between Symfony and Webpack Encore for managing frontend assets.
      https://symfony.com/doc/current/frontend/encore/installation.html#_snippet_0

  -
    question: >
      Which of the following is a key responsibility of a `Middleware` in the Symfony Messenger component?
    answers:
      - { value: 'To store messages persistently in a database.', correct: false }
      - { value: 'To access the message and its envelope during dispatch and handle cross-cutting concerns like logging or validation.', correct: true }
      - { value: 'To define the routing for messages.', correct: false }
      - { value: 'To send messages to external APIs.', correct: false }
    help: |
      Middleware can intercept messages during dispatch, allowing for cross-cutting concerns like logging, validation, or transactions.
      https://symfony.com/doc/current/components/messenger.html#_snippet_1

  -
    question: >
      What is the purpose of the `assets.base_urls` configuration in `framework.yaml`?
    answers:
      - { value: 'To define a single base URL for all assets.', correct: false }
      - { value: 'To specify multiple base URLs for assets, allowing for CDN integration and load balancing.', correct: true }
      - { value: 'To configure the default asset versioning strategy.', correct: false }
      - { value: 'To disable asset management in Symfony.', correct: false }
    help: |
      `base_urls` allows you to define an array of URLs from which assets will be served, useful for CDN integration.
      https://symfony.com/doc/current/reference/configuration/framework.html#_snippet_3

  -
    question: >
      Which of the following best describes the role of an "Envelope" in the Symfony Messenger component?
    answers:
      - { value: 'It is the raw message payload itself.', correct: false }
      - { value: 'It wraps a message, allowing additional metadata (stamps) to be attached for processing by middleware or transports.', correct: true }
      - { value: 'It defines the routing for messages.', correct: false }
      - { value: 'It is a persistent storage for messages.', correct: false }
    help: |
      An Envelope wraps a message and allows for the addition of "stamps" (metadata) that can be used by middleware or transports.
      https://symfony.com/doc/current/components/messenger.html#_snippet_1

  -
    question: >
      What is the primary purpose of the `config/` directory in a Symfony project?
    answers:
      - { value: 'To store application source code.', correct: false }
      - { value: 'To store all application configuration files (e.g., services, routes, packages, bundles).', correct: true }
      - { value: 'To store public web assets.', correct: false }
      - { value: 'To store temporary files.', correct: false }
    help: |
      The `config/` directory contains all the application's configuration files.
      https://symfony.com/doc/current/configuration.html#_snippet_0

  -
    question: >
      Which of the following is a standard naming convention for a service that performs a specific action, like sending an email?
    answers:
      - { value: '`EmailSender`', correct: true }
      - { value: '`EmailService`', correct: false }
      - { value: '`EmailManager`', correct: false }
      - { value: '`EmailHelper`', correct: false }
    help: |
      Services are typically named descriptively based on their function. `EmailSender` clearly indicates its responsibility.
      (General Symfony naming convention, not tied to a specific snippet).

  -
    question: >
      What is the purpose of the `assets.packages` configuration in `framework.yaml`?
    answers:
      - { value: 'To define global asset base URLs.', correct: false }
      - { value: 'To define named asset packages with their own base URLs, allowing for different CDNs or asset locations.', correct: true }
      - { value: 'To enable or disable asset versioning.', correct: false }
      - { value: 'To configure the default asset output directory.', correct: false }
    help: |
      `assets.packages` allows you to define multiple named asset packages, each with its own base URLs, useful for organizing and serving assets from different sources.
      https://symfony.com/doc/current/reference/configuration/framework.html#_snippet_6

  -
    question: >
      What is the purpose of the `symfony/http-kernel` component?
    answers:
      - { value: 'It provides utilities for interacting with the file system.', correct: false }
      - { value: 'It provides the core logic for handling requests and responses, including controller resolution and event dispatching.', correct: true }
      - { value: 'It offers tools for building command-line applications.', correct: false }
      - { value: 'It manages database connections.', correct: false }
    help: |
      The HttpKernel component is the core of the Symfony Framework, responsible for the request-response lifecycle.
      https://symfony.com/doc/current/create_framework/http_kernel_controller_resolver.html#_snippet_2

  -
    question: >
      Which of the following is a key responsibility of a `Receiver` in the Symfony Messenger component?
    answers:
      - { value: 'To serialize and send messages to a message broker.', correct: false }
      - { value: 'To retrieve, deserialize, and forward messages to their handlers.', correct: true }
      - { value: 'To apply business logic to a message.', correct: false }
      - { value: 'To add metadata to the message envelope.', correct: false }
    help: |
      A Receiver is responsible for pulling messages from a transport, deserializing them, and passing them to the message bus for handling.
      https://symfony.com/doc/current/components/messenger.html#_snippet_1

  -
    question: >
      Which of the following is a key responsibility of a `Sender` in the Symfony Messenger component?
    answers:
      - { value: 'To retrieve and deserialize messages from a message broker.', correct: false }
      - { value: 'To serialize messages and send them to a message broker or third-party API.', correct: true }
      - { value: 'To apply business logic to a message.', correct: false }
      - { value: 'To handle exceptions during message processing.', correct: false }
    help: |
      A Sender is responsible for taking a message, serializing it, and sending it to a message transport.
      https://symfony.com/doc/current/components/messenger.html#_snippet_1

  -
    question: >
      What is the purpose of the `assets.base_path` configuration in `framework.yaml`?
    answers:
      - { value: 'To define a base URL for assets.', correct: false }
      - { value: 'To prepend a path to all generated asset URLs, useful when assets are not served from the web root.', correct: true }
      - { value: 'To specify the default asset version.', correct: false }
      - { value: 'To configure the asset cache directory.', correct: false }
    help: |
      `base_path` allows you to prepend a path to all generated asset URLs, useful for serving assets from a subdirectory.
      https://symfony.com/doc/current/reference/configuration/framework.html#_snippet_2

  -
    question: >
      Which of the following is a standard naming convention for a security voter class in Symfony?
    answers:
      - { value: '`UserVoter`', correct: true }
      - { value: '`UserAuthenticator`', correct: false }
      - { value: '`UserGuard`', correct: false }
      - { value: '`UserPolicy`', correct: false }
    help: |
      Security voter classes are conventionally named by appending `Voter` to their descriptive name.
      https://symfony.com/doc/current/security/voters.html