category: Symfony Architecture

questions:
  -
    question: >
      What is the primary purpose of Symfony Flex in a Symfony 7 application?
    answers:
      - { value: "To manage application deployments to production servers.", correct: false }
      - { value: "To provide a simplified way to install and manage Symfony packages and their dependencies.", correct: true }
      - { value: "To generate boilerplate code for new entities and controllers.", correct: false }
      - { value: "To optimize the database schema for better performance.", correct: false }
    help: |
      Symfony Flex is a Composer plugin that simplifies the installation and management of Symfony packages by automating common tasks through "recipes".
      https://symfony.com/doc/current/setup/symfony_flex.html

  -
    question: >
      Which file is generated by Symfony Flex to keep track of installed recipes and their versions?
    answers:
      - { value: "composer.lock", correct: false }
      - { value: "symfony.lock", correct: true }
      - { value: "flex.json", correct: false }
      - { value: "bundles.php", correct: false }
    help: |
      The `symfony.lock` file stores information about the recipes applied to your project, ensuring consistent installations across environments.
      https://symfony.com/doc/current/setup/symfony_flex.html#the-symfony-lock-file

  -
    question: >
      Under what license is the Symfony Framework and its components distributed?
    answers:
      - { value: "GPLv3", correct: false }
      - { value: "MIT License", correct: true }
      - { value: "Apache License 2.0", correct: false }
      - { value: "LGPLv2.1", correct: false }
    help: |
      Symfony is open source and released under the MIT license, which is a permissive free software license.
      https://symfony.com/doc/current/contributing/code/license.html

  -
    question: >
      Which of the following statements accurately describes a Symfony Component?
    answers:
      - { value: "A Symfony Component is a standalone PHP library that can be used independently of the full Symfony Framework.", correct: true }
      - { value: "A Symfony Component is a deprecated feature replaced by bundles.", correct: false }
      - { value: "A Symfony Component is a full-stack framework for building web applications.", correct: false }
      - { value: "A Symfony Component is a graphical user interface for managing Symfony projects.", correct: false }
    help: |
      Symfony Components are reusable PHP libraries that solve common web development problems. They can be used as part of the Symfony Framework or in any other PHP project.
      https://symfony.com/doc/current/components/index.html

  -
    question: |
      Consider the following PHP code snippet using the `PropertyAccessor` component:

      ```php
      use Symfony\Component\PropertyAccess\PropertyAccess;

      class User
      {
          public ?string $name = null;
      }

      $user = new User();
      $propertyAccessor = PropertyAccess::createPropertyAccessor();
      $propertyAccessor->setValue($user, 'name', 'Alice');
      ```

      What will be the value of `$user->name` after this code executes?
    answers:
      - { value: "null", correct: false }
      - { value: "Alice", correct: true }
      - { value: "An exception will be thrown.", correct: false }
      - { value: "The value will remain undefined.", correct: false }
    help: |
      The `setValue` method of `PropertyAccessor` is used to set the value of a property on an object or array, even if it's protected or private (via setters).
      https://symfony.com/doc/current/components/property_access.html#setting-values

  -
    question: >
      What is the primary role of a "Bridge" in the context of Symfony's architecture?
    answers:
      - { value: "To connect Symfony applications to external APIs.", correct: false }
      - { value: "To provide compatibility layers between Symfony components and third-party libraries.", correct: true }
      - { value: "To manage database connections and migrations.", correct: false }
      - { value: "To generate HTML templates from Twig files.", correct: false }
    help: |
      Symfony Bridges provide integration points, allowing Symfony components to work seamlessly with popular third-party libraries (e.g., MonologBridge, DoctrineBridge).
      https://symfony.com/doc/current/components/index.html

  -
    question: >
      Which of the following best describes the standard code organization within the `src/` directory of a Symfony 7 application?
    answers:
      - { value: "It contains only controllers and templates.", correct: false }
      - { value: "It contains all application-specific PHP code, including controllers, entities, services, and commands.", correct: true }
      - { value: "It is reserved for third-party libraries installed via Composer.", correct: false }
      - { value: "It stores cached data and log files.", correct: false }
    help: |
      The `src/` directory is where all your application's custom PHP code resides, following a logical structure (e.g., `Controller/`, `Entity/`, `Service/`).
      https://symfony.com/doc/current/best_practices.html#code-organization

  -
    question: >
      What is the role of the front controller (`public/index.php`) in a Symfony 7 application?
    answers:
      - { value: "It handles all HTTP requests and bootstraps the Symfony Kernel.", correct: true }
      - { value: "It serves static assets like CSS and JavaScript files.", correct: false }
      - { value: "It defines all application routes.", correct: false }
      - { value: "It manages database connections.", correct: false }
    help: |
      The front controller is the single entry point for all HTTP requests, responsible for initializing the application and delegating the request to the kernel.
      https://symfony.com/doc/current/introduction/from_flat_php_to_symfony.html#the-front-controller

  -
    question: >
      When an unhandled exception occurs in a Symfony 7 application, which component is primarily responsible for converting it into an appropriate HTTP Response?
    answers:
      - { value: "The Router component.", correct: false }
      - { value: "The Event Dispatcher, specifically the `kernel.exception` event.", correct: true }
      - { value: "The Security component.", correct: false }
      - { value: "The Form component.", correct: false }
    help: |
      Symfony's `HttpKernel` dispatches a `kernel.exception` event when an exception is thrown, allowing listeners to convert the exception into a `Response`.
      https://symfony.com/doc/current/event_dispatcher.html#kernel-events

  -
    question: >
      Which of the following is a core principle of Symfony's backward compatibility promise?
    answers:
      - { value: "Major versions will always introduce breaking changes without deprecation.", correct: false }
      - { value: "Minor versions (e.g., 7.0 to 7.1) will never introduce breaking changes.", correct: true }
      - { value: "All public APIs are guaranteed to remain unchanged indefinitely.", correct: false }
      - { value: "Deprecations are only announced in LTS releases.", correct: false }
    help: |
      Symfony adheres to a strong backward compatibility promise, ensuring that minor versions do not introduce breaking changes to public APIs.
      https://symfony.com/doc/current/contributing/code/bc.html

  -
    question: >
      What is the recommended way to check for deprecations in a Symfony 7 application during development?
    answers:
      - { value: "Manually review all Composer dependencies for deprecation notices.", correct: false }
      - { value: "Run the application in `prod` environment and check logs.", correct: false }
      - { value: "Use the `debug:container` command.", correct: false }
      - { value: "Run tests and observe deprecation notices, or use the `symfony/error-handler` component.", correct: true }
    help: |
      Symfony's `ErrorHandler` component helps catch and report deprecations. Running your test suite is also a good way to uncover them.
      https://symfony.com/doc/current/components/error_handler.html#deprecations

  -
    question: >
      Which PSR (PHP Standard Recommendation) is Symfony's `LoggerInterface` (used by Monolog) compliant with?
    answers:
      - { value: "PSR-7 (HTTP Message Interfaces)", correct: false }
      - { value: "PSR-3 (Logger Interface)", correct: true }
      - { value: "PSR-11 (Container Interface)", correct: false }
      - { value: "PSR-14 (Event Dispatcher)", correct: false }
    help: |
      Symfony's logging mechanism, often powered by Monolog, adheres to PSR-3 for a common logger interface.
      https://www.php-fig.org/psr/psr-3/

  -
    question: >
      According to Symfony's naming conventions, which of the following is the correct way to name a service class?
    answers:
      - { value: "my_service.php", correct: false }
      - { value: "MyService", correct: true }
      - { value: "myservice", correct: false }
      - { value: "My_Service_Class", correct: false }
    help: |
      Symfony follows PSR-1 and PSR-2 for coding style, which includes PascalCase for class names.
      https://symfony.com/doc/current/contributing/code/standards.html#classes-and-interfaces

  -
    question: >
      What is the primary benefit of using environment variables (e.g., `APP_ENV`) in Symfony 7 for configuration?
    answers:
      - { value: "They improve application performance by caching configuration.", correct: false }
      - { value: "They allow easy switching of application behavior between different environments (e.g., dev, prod) without code changes.", correct: true }
      - { value: "They are primarily used for storing sensitive user data.", correct: false }
      - { value: "They define database table structures.", correct: false }
    help: |
      Environment variables, often managed via the `.env` file, are crucial for adapting application behavior (like debugging, logging levels, database connections) to different environments.
      https://symfony.com/doc/current/configuration.html#environment-variables

  -
    question: >
      Which of the following is a key characteristic of Symfony's release management strategy for LTS (Long Term Support) versions?
    answers:
      - { value: "LTS versions receive bug fixes for 6 months and security fixes for 1 year.", correct: false }
      - { value: "LTS versions receive bug fixes for 3 years and security fixes for 4 years.", correct: true }
      - { value: "LTS versions are released annually.", correct: false }
      - { value: "LTS versions do not support new features.", correct: false }
    help: |
      Symfony LTS versions provide extended support periods, crucial for long-term projects.
      https://symfony.com/releases

  -
    question: >
      How does Symfony Flex typically handle the installation of a new bundle (e.g., `doctrine/doctrine-bundle`)?
    answers:
      - { value: "It manually modifies `config/bundles.php` and adds database configuration to `.env`.", correct: true }
      - { value: "It only downloads the package, requiring manual configuration.", correct: false }
      - { value: "It creates a new controller and entity for the bundle.", correct: false }
      - { value: "It automatically creates a new database and tables.", correct: false }
    help: |
      Flex uses "recipes" to automate common configuration tasks, such as registering bundles and adding environment variables.
      https://symfony.com/doc/current/setup/symfony_flex.html#what-flex-does

  -
    question: >
      Which of the following is NOT a core Symfony Component?
    answers:
      - { value: "HttpClient", correct: false }
      - { value: "Console", correct: false }
      - { value: "Doctrine ORM", correct: true }
      - { value: "Routing", correct: false }
    help: |
      Doctrine ORM is a separate, popular third-party library that integrates well with Symfony via a bridge, but it is not a core Symfony Component itself.
      https://symfony.com/doc/current/components/index.html

  -
    question: >
      What is the primary benefit of using the `#[AsCommand]` attribute for Symfony console commands in Symfony 7?
    answers:
      - { value: "It allows the command to be executed directly from a web browser.", correct: false }
      - { value: "It simplifies command configuration by allowing it directly on the class, replacing static properties.", correct: true }
      - { value: "It automatically registers the command as a service.", correct: false }
      - { value: "It enables automatic argument and option parsing without defining them.", correct: false }
    help: |
      The `#[AsCommand]` attribute (introduced in Symfony 6.2) provides a modern, attribute-based way to configure console commands, making them more concise.
      https://symfony.com/doc/current/console.html#configuring-the-command

  -
    question: >
      Which of the following is the correct directory for storing application-specific configuration files in Symfony 7?
    answers:
      - { value: "app/", correct: false }
      - { value: "config/", correct: true }
      - { value: "var/", correct: false }
      - { value: "src/Resources/config/", correct: false }
    help: |
      The `config/` directory is the standard location for all application configuration files (e.g., services, routes, packages).
      https://symfony.com/doc/current/best_practices.html#code-organization

  -
    question: >
      What is the purpose of the `MicroKernelTrait` in Symfony 7, particularly for multi-application setups?
    answers:
      - { value: "It provides a full-stack framework for microservices.", correct: false }
      - { value: "It simplifies the creation of lightweight kernels by providing default implementations for common kernel methods.", correct: true }
      - { value: "It enables automatic API documentation generation.", correct: false }
      - { value: "It is used for managing database migrations.", correct: false }
    help: |
      The `MicroKernelTrait` is designed to help build smaller, more focused Symfony applications or to manage multiple applications within a single project by providing sensible defaults for kernel configuration.
      https://symfony.com/doc/current/configuration/micro_kernel_trait.html

  -
    question: >
      Which of the following is a valid way to define an invokable controller in Symfony 7?
    answers:
      - { value: "A class with a public `__invoke()` method, annotated with `#[Route]`.", correct: true }
      - { value: "A class that extends `AbstractController` and has a method named `indexAction()`.", correct: false }
      - { value: "A static method within a service class.", correct: false }
      - { value: "A function defined directly in a routing YAML file.", correct: false }
    help: |
      Invokable controllers (single-action controllers) use the `__invoke()` magic method to handle requests, often combined with attributes for routing.
      https://symfony.com/doc/current/controller/service.html#invokable-controllers

  -
    question: >
      In Symfony's request handling flow, which event is dispatched immediately after the controller is determined but before it is executed?
    answers:
      - { value: "kernel.request", correct: false }
      - { value: "kernel.controller", correct: true }
      - { value: "kernel.response", correct: false }
      - { value: "kernel.view", correct: false }
    help: |
      The `kernel.controller` event allows listeners to modify the controller callable before it is executed.
      https://symfony.com/doc/current/reference/events.html#kernel-events

  -
    question: >
      What is the primary responsibility of the `HttpKernel` component in Symfony?
    answers:
      - { value: "To render Twig templates into HTML.", correct: false }
      - { value: "To handle a `Request` and return a `Response`.", correct: true }
      - { value: "To manage database connections and ORM entities.", correct: false }
      - { value: "To send emails and notifications.", correct: false }
    help: |
      The `HttpKernel` component is the core of Symfony's request-response cycle, responsible for processing incoming requests and generating appropriate responses.
      https://symfony.com/doc/current/components/http_kernel.html

  -
    question: >
      Which of the following is considered a best practice for organizing business logic in a Symfony 7 application?
    answers:
      - { value: "Placing all business logic directly within controller methods.", correct: false }
      - { value: "Creating dedicated service classes to encapsulate business logic and injecting them into controllers.", correct: true }
      - { value: "Storing business logic in global functions.", correct: false }
      - { value: "Using static methods exclusively for all business operations.", correct: false }
    help: |
      Separating business logic into services promotes reusability, testability, and a cleaner architecture.
      https://symfony.com/doc/current/best_practices.html#controllers-should-be-thin

  -
    question: >
      How often are new major versions of Symfony (e.g., Symfony 6 to Symfony 7) typically released?
    answers:
      - { value: "Every 6 months.", correct: false }
      - { value: "Every year.", correct: false }
      - { value: "Every 2 years.", correct: true }
      - { value: "Every 4 years.", correct: false }
    help: |
      Symfony major versions are released every two years, with an LTS release every four years.
      https://symfony.com/releases

  -
    question: >
      Which PSR defines the interface for a Dependency Injection Container, which Symfony's service container implements?
    answers:
      - { value: "PSR-1 (Basic Coding Standard)", correct: false }
      - { value: "PSR-7 (HTTP Message Interfaces)", correct: false }
      - { value: "PSR-11 (Container Interface)", correct: true }
      - { value: "PSR-18 (HTTP Client)", correct: false }
    help: |
      Symfony's Service Container is compliant with PSR-11, ensuring interoperability with other libraries that adhere to this standard.
      https://www.php-fig.org/psr/psr-11/

  -
    question: >
      According to Symfony's naming conventions, what is the typical suffix for a controller class?
    answers:
      - { value: "Controller", correct: true }
      - { value: "Handler", correct: false }
      - { value: "Manager", correct: false }
      - { value: "Service", correct: false }
    help: |
      Controller classes typically end with `Controller` (e.g., `DefaultController`).
      https://symfony.com/doc/current/best_practices.html#controllers

  -
    question: >
      What is the purpose of the `PropertyInfo` component in Symfony?
    answers:
      - { value: "To access and modify object properties directly.", correct: false }
      - { value: "To extract metadata about class properties, such as types, descriptions, and accessors.", correct: true }
      - { value: "To validate property values against a set of rules.", correct: false }
      - { value: "To convert object properties to array format for serialization.", correct: false }
    help: |
      The `PropertyInfo` component provides a way to retrieve information about properties of a PHP class, which is useful for various other components like Serializer, Form, and Validator.
      https://symfony.com/doc/current/components/property_info.html

  -
    question: >
      Which of the following is a common use case for the Symfony Event Dispatcher component?
    answers:
      - { value: "Defining application routes.", correct: false }
      - { value: "Decoupling components by allowing them to communicate without direct dependencies.", correct: true }
      - { value: "Managing database transactions.", correct: false }
      - { value: "Rendering Twig templates.", correct: false }
    help: |
      The Event Dispatcher allows you to implement the Observer design pattern, enabling loose coupling between different parts of your application.
      https://symfony.com/doc/current/components/event_dispatcher.html

  -
    question: >
      When should you consider "framework overloading" or overriding core Symfony behavior?
    answers:
      - { value: "For every new feature to customize Symfony's default behavior.", correct: false }
      - { value: "Only when a specific requirement cannot be met through standard configuration or extension points.", correct: true }
      - { value: "To improve application performance without changing any code.", correct: false }
      - { value: "To replace all Symfony components with custom implementations.", correct: false }
    help: |
      Overriding core framework behavior should be a last resort, as it can make upgrades more difficult. Symfony provides many extension points for customization without direct overloading.
      https://symfony.com/doc/current/bundles/override.html

  -
    question: >
      What is the primary role of "recipes" in Symfony Flex?
    answers:
      - { value: "They are pre-configured Docker images for Symfony applications.", correct: false }
      - { value: "They are automated scripts that configure your project when installing Composer packages.", correct: true }
      - { value: "They define the database schema for your application.", correct: false }
      - { value: "They are a set of coding standards for Symfony projects.", correct: false }
    help: |
      Flex recipes automate common installation and configuration tasks, such as creating configuration files, registering bundles, and adding environment variables.
      https://symfony.com/doc/current/setup/symfony_flex.html#what-flex-does

  -
    question: >
      Which of the following is a benefit of using Symfony's `HttpClient` component over traditional PHP functions like `file_get_contents()` or `curl`?
    answers:
      - { value: "Built-in support for HTTP/2 and asynchronous requests.", correct: true }
      - { value: "It is significantly faster for all types of HTTP requests.", correct: false }
      - { value: "It automatically handles all API authentication.", correct: false }
      - { value: "It does not require any external dependencies.", correct: false }
    help: |
      Symfony's `HttpClient` provides a powerful, modern, and testable way to make HTTP requests, with features like HTTP/2, retries, and mocking.
      https://symfony.com/doc/current/http_client.html

  -
    question: >
      How does Symfony ensure backward compatibility when introducing new features or making internal changes?
    answers:
      - { value: "By never changing any public API.", correct: false }
      - { value: "By introducing deprecations in minor versions before removing features in major versions.", correct: true }
      - { value: "By providing a migration tool that automatically updates all deprecated code.", correct: false }
      - { value: "By maintaining separate codebases for each Symfony version.", correct: false }
    help: |
      Symfony follows a strict backward compatibility policy, using deprecations to signal upcoming changes and give developers time to adapt.
      https://symfony.com/doc/current/contributing/code/bc.html#deprecations

  -
    question: >
      Which of the following describes the role of the `Envelope` in the Symfony Messenger component?
    answers:
      - { value: "It is the primary interface for sending messages.", correct: false }
      - { value: "It wraps a message and allows adding metadata (stamps) for processing by middleware and transports.", correct: true }
      - { value: "It is responsible for deserializing messages from the transport.", correct: false }
      - { value: "It defines the routing for messages to their handlers.", correct: false }
    help: |
      The `Envelope` is a core concept in Messenger, providing a flexible way to attach additional information to messages as they travel through the bus.
      https://symfony.com/doc/current/components/messenger.html#envelope

  -
    question: >
      What is the recommended approach for managing static assets (CSS, JavaScript, images) in a modern Symfony 7 application?
    answers:
      - { value: "Hardcoding absolute URLs to assets in Twig templates.", correct: false }
      - { value: "Using `Webpack Encore` for asset compilation, versioning, and integration with the `Asset` component.", correct: true }
      - { value: "Storing all assets directly in the `src/` directory.", correct: false }
      - { value: "Manually copying assets to the `public/` directory after every change.", correct: false }
    help: |
      Webpack Encore is the recommended tool for managing front-end assets in Symfony, providing modern build processes and integration with the Asset component for versioning.
      https://symfony.com/doc/current/frontend.html

  -
    question: >
      Which of the following PSRs does Symfony's `HttpClient` component adhere to for HTTP client interoperability?
    answers:
      - { value: "PSR-3 (Logger Interface)", correct: false }
      - { value: "PSR-7 (HTTP Message Interfaces)", correct: false }
      - { value: "PSR-18 (HTTP Client)", correct: true }
      - { value: "PSR-14 (Event Dispatcher)", correct: false }
    help: |
      Symfony's `HttpClient` component implements PSR-18, ensuring it can be used interchangeably with other PSR-18 compliant HTTP clients.
      https://www.php-fig.org/psr/psr-18/

  -
    question: >
      What is the purpose of the `var/cache/` directory in a Symfony 7 application?
    answers:
      - { value: "To store application source code.", correct: false }
      - { value: "To store temporary cache files generated by Symfony and its components for performance optimization.", correct: true }
      - { value: "To store user-uploaded files.", correct: false }
      - { value: "To store database backup files.", correct: false }
    help: |
      The `var/cache/` directory holds all cached data, including compiled container, routes, and Twig templates, which significantly speeds up the application.
      https://symfony.com/doc/current/best_practices.html#code-organization

  -
    question: >
      When configuring a Symfony application, what is the recommended file format for defining services and parameters?
    answers:
      - { value: "JSON", correct: false }
      - { value: "INI", correct: false }
      - { value: "YAML", correct: true }
      - { value: "XML", correct: true }
      - { value: "PHP", correct: true }
    help: |
      Symfony supports YAML, XML, and PHP for configuration. YAML is often preferred for its readability, but all three are valid and widely used.
      https://symfony.com/doc/current/service_container/configuration.html

  -
    question: >
      Which of the following is an example of a "kernel event" in Symfony?
    answers:
      - { value: "user.registered", correct: false }
      - { value: "kernel.request", correct: true }
      - { value: "database.connected", correct: false }
      - { value: "form.submitted", correct: false }
    help: |
      Kernel events are dispatched by the `HttpKernel` component at various stages of the request-response lifecycle (e.g., `kernel.request`, `kernel.controller`, `kernel.response`).
      https://symfony.com/doc/current/reference/events.html#kernel-events

  -
    question: >
      What is the primary benefit of using the "service container" (Dependency Injection Container) in Symfony?
    answers:
      - { value: "It automatically generates database migrations.", correct: false }
      - { value: "It manages the lifecycle and dependencies of objects (services), promoting loose coupling and testability.", correct: true }
      - { value: "It handles all routing and URL generation.", correct: false }
      - { value: "It provides a graphical interface for application management.", correct: false }
    help: |
      The service container is central to Symfony's architecture, managing services and their dependencies, which leads to more maintainable and testable code.
      https://symfony.com/doc/current/service_container.html

  -
    question: >
      Which of the following is a standard naming convention for a configuration file defining services in Symfony?
    answers:
      - { value: "services.json", correct: false }
      - { value: "services.yaml", correct: true }
      - { value: "config.php", correct: false }
      - { value: "app_services.xml", correct: false }
    help: |
      The conventional name for service definitions is `services.yaml` (or `.xml`, `.php`).
      https://symfony.com/doc/current/service_container/configuration.html

  -
    question: >
      What is the purpose of the `public/` directory in a Symfony 7 application?
    answers:
      - { value: "It contains all PHP source code.", correct: false }
      - { value: "It is the web root directory, containing the front controller and public assets.", correct: true }
      - { value: "It stores application logs and cache files.", correct: false }
      - { value: "It holds Composer dependencies.", correct: false }
    help: |
      The `public/` directory is the document root for your web server, making it the only publicly accessible directory.
      https://symfony.com/doc/current/best_practices.html#code-organization

  -
    question: >
      When is a feature typically removed from Symfony after being marked as deprecated?
    answers:
      - { value: "In the next minor version.", correct: false }
      - { value: "In the next major version.", correct: true }
      - { value: "After 6 months.", correct: false }
      - { value: "It is never removed, only marked as deprecated indefinitely.", correct: false }
    help: |
      Deprecated features are typically removed in the next major version of Symfony, giving developers ample time to migrate.
      https://symfony.com/doc/current/contributing/code/bc.html#deprecations

  -
    question: >
      Which of the following is a key advantage of using Symfony's `Messenger` component for asynchronous processing?
    answers:
      - { value: "It guarantees immediate execution of all tasks.", correct: false }
      - { value: "It allows offloading long-running tasks to message queues, improving responsiveness and scalability.", correct: true }
      - { value: "It replaces the need for a database.", correct: false }
      - { value: "It provides a built-in user authentication system.", correct: false }
    help: |
      The Messenger component is designed for sending and receiving messages, enabling asynchronous processing and decoupling parts of your application.
      https://symfony.com/doc/current/components/messenger.html

  -
    question: >
      What is the role of `#[Autowire]` attribute in Symfony 7's dependency injection?
    answers:
      - { value: "It explicitly defines the service ID to be injected when type-hinting is ambiguous or insufficient.", correct: true }
      - { value: "It automatically creates a new service definition for the class.", correct: false }
      - { value: "It marks a service as public and accessible from the container.", correct: false }
      - { value: "It prevents a service from being autowired.", correct: false }
    help: |
      The `#[Autowire]` attribute provides fine-grained control over autowiring, allowing you to specify the exact service or parameter to inject.
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring-specific-arguments

  -
    question: >
      Which of the following is a common reason for a Symfony application to use multiple kernels?
    answers:
      - { value: "To support different database systems within a single application.", correct: false }
      - { value: "To manage distinct applications (e.g., admin, API) within the same project, each with its own configuration and bundles.", correct: true }
      - { value: "To enable hot-reloading of code changes during development.", correct: false }
      - { value: "To automatically scale the application across multiple servers.", correct: false }
    help: |
      Multiple kernels can be used to manage complex projects with distinct application contexts, allowing for separate configurations and dependencies for each.
      https://symfony.com/doc/current/configuration/multiple_kernels.html

  -
    question: >
      What is the purpose of the `var/log/` directory in a Symfony 7 application?
    answers:
      - { value: "To store temporary session files.", correct: false }
      - { value: "To store application log files (e.g., `dev.log`, `prod.log`).", correct: true }
      - { value: "To store compiled Twig templates.", correct: false }
      - { value: "To store Composer's vendor dependencies.", correct: false }
    help: |
      The `var/log/` directory is where Symfony writes application logs, which are crucial for debugging and monitoring.
      https://symfony.com/doc/current/best_practices.html#code-organization

  -
    question: >
      Which of the following is a best practice for handling sensitive configuration data (e.g., API keys, database credentials) in Symfony 7?
    answers:
      - { value: "Hardcoding them directly in `config/services.yaml`.", correct: false }
      - { value: "Storing them in version-controlled `.env` files directly.", correct: false }
      - { value: "Using environment variables, potentially managed by Symfony's `secrets` system for production.", correct: true }
      - { value: "Embedding them as comments in PHP files.", correct: false }
    help: |
      Sensitive data should be handled securely, typically through environment variables or Symfony's dedicated secrets management.
      https://symfony.com/doc/current/configuration/secrets.html

  -
    question: >
      What does the `PropertyAccessor::disableExceptionOnInvalidPropertyPath()` method achieve?
    answers:
      - { value: "It makes the PropertyAccessor throw an exception when a property is not writable.", correct: false }
      - { value: "It causes the PropertyAccessor to return `null` instead of throwing a `NoSuchPropertyException` for non-existent paths.", correct: true }
      - { value: "It disables all exceptions from the PropertyAccessor component.", correct: false }
      - { value: "It enables strict type checking for property access.", correct: false }
    help: |
      This method allows for more graceful handling of non-existent property paths, returning `null` instead of interrupting execution with an exception.
      https://symfony.com/doc/current/components/property_access.html#disabling-exceptions-on-invalid-property-paths

  -
    question: >
      Which of the following is a key responsibility of a `Handler` in the Symfony Messenger component?
    answers:
      - { value: "To send messages to a message broker.", correct: false }
      - { value: "To retrieve messages from a message queue.", correct: false }
      - { value: "To execute the business logic associated with a specific message.", correct: true }
      - { value: "To serialize messages before sending them.", correct: false }
    help: |
      Handlers are responsible for processing the actual business logic when a message is consumed from the bus.
      https://symfony.com/doc/current/components/messenger.html#handlers

  -
    question: >
      What is the primary purpose of the `composer.lock` file in a Symfony Flex project?
    answers:
      - { value: "To store application configuration.", correct: false }
      - { value: "To record the exact versions of all direct and indirect dependencies, ensuring reproducible builds.", correct: true }
      - { value: "To manage Symfony Flex recipes.", correct: false }
      - { value: "To define application routes.", correct: false }
    help: |
      The `composer.lock` file locks down the exact versions of all installed packages, ensuring that `composer install` always produces the same dependency tree.
      https://getcomposer.org/doc/01-basic-usage.md#composer-lock-the-lock-file

  -
    question: >
      Which of the following is a recommended naming convention for a bundle in Symfony?
    answers:
      - { value: "my_bundle", correct: false }
      - { value: "MyBundle", correct: true }
      - { value: "MyBundleBundle", correct: false }
      - { value: "mybundle", correct: false }
    help: |
      Bundle names typically follow PascalCase and end with "Bundle" (e.g., `AcmeDemoBundle`).
      https://symfony.com/doc/current/bundles/best_practices.html#bundle-naming-conventions

  -
    question: >
      What is the significance of PSR-14 (Event Dispatcher) for Symfony's Event Dispatcher component?
    answers:
      - { value: "It defines how HTTP requests and responses should be handled.", correct: false }
      - { value: "It standardizes the interface for dispatching and listening to events, promoting interoperability.", correct: true }
      - { value: "It specifies how to log messages to various destinations.", correct: false }
      - { value: "It provides a standard for dependency injection containers.", correct: false }
    help: |
      PSR-14 provides a common interface for event dispatching, allowing different libraries to use the same event system.
      https://www.php-fig.org/psr/psr-14/

  -
    question: >
      Which of the following is a valid way to define a prototyped array of scalar values in Symfony's Config component?
    answers:
      - { value: "->arrayNode('drivers')->scalarNode()->end()", correct: false }
      - { value: "->arrayNode('drivers')->scalarPrototype()->end()", correct: true }
      - { value: "->scalarNode('drivers')->arrayPrototype()->end()", correct: false }
      - { value: "->prototype('scalar')->end()", correct: false }
    help: |
      The `scalarPrototype()` method is used to define an array where each element is a scalar value.
      https://symfony.com/doc/current/components/config/definition.html#prototyped-arrays

  -
    question: >
      What is the primary goal of Symfony's "Backward Compatibility Promise"?
    answers:
      - { value: "To ensure that all applications run on the latest PHP version without modifications.", correct: false }
      - { value: "To guarantee that minor version upgrades (e.g., 7.0 to 7.1) do not introduce breaking changes to public APIs.", correct: true }
      - { value: "To prevent any new features from being added to existing Symfony versions.", correct: false }
      - { value: "To allow developers to use deprecated features indefinitely.", correct: false }
    help: |
      The B.C. promise is a commitment to stability, making minor version upgrades safe and predictable.
      https://symfony.com/doc/current/contributing/code/bc.html

  -
    question: >
      When configuring assets in Symfony, what is the purpose of the `version_format` option?
    answers:
      - { value: "To define the file extension for asset files.", correct: false }
      - { value: "To specify a `sprintf` pattern for constructing asset paths with versioning (e.g., query string or path-based).", correct: true }
      - { value: "To set the default version number for all assets.", correct: false }
      - { value: "To enable automatic asset minification.", correct: false }
    help: |
      The `version_format` allows flexible control over how asset versions are appended to URLs, supporting various caching strategies.
      https://symfony.com/doc/current/reference/configuration/framework.html#version-format

  -
    question: >
      Which of the following is a best practice for writing PHP code in Symfony, adhering to PSR-1 and PSR-12?
    answers:
      - { value: "Using snake_case for all class and method names.", correct: false }
      - { value: "Placing opening curly braces on a new line for classes and methods.", correct: true }
      - { value: "Omitting type declarations for function arguments and return values.", correct: false }
      - { value: "Using tabs for indentation.", correct: false }
    help: |
      Symfony follows PSR-1 (Basic Coding Standard) and PSR-12 (Extended Coding Style Guide), which dictate various coding style rules including brace placement.
      https://symfony.com/doc/current/contributing/code/standards.html

  -
    question: >
      What is the primary function of the `PropertyInfoExtractor` in Symfony's `PropertyInfo` component?
    answers:
      - { value: "To modify property values at runtime.", correct: false }
      - { value: "To aggregate information from multiple property info extractors (e.g., Reflection, PhpDoc) to provide comprehensive property metadata.", correct: true }
      - { value: "To serialize objects into different formats.", correct: false }
      - { value: "To generate getters and setters for class properties.", correct: false }
    help: |
      The `PropertyInfoExtractor` acts as a facade, combining the capabilities of various specific extractors to provide a complete picture of a property's metadata.
      https://symfony.com/doc/current/components/property_info.html#propertyinfoextractor

  -
    question: >
      Which of the following is a valid method for configuring Symfony services?
    answers:
      - { value: "Using PHP attributes directly on service classes.", correct: true }
      - { value: "Defining services in `composer.json`.", correct: false }
      - { value: "Using global PHP variables.", correct: false }
      - { value: "Defining services in `public/index.php`.", correct: false }
    help: |
      Symfony supports PHP attributes (since Symfony 5.1), YAML, XML, and PHP files for service configuration.
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring-specific-arguments

  -
    question: >
      What is the purpose of the `getBuiltInType()` method of the `Symfony\Component\PropertyInfo\Type` object?
    answers:
      - { value: "To return the fully-qualified class name of the property.", correct: false }
      - { value: "To check if the property is nullable.", correct: false }
      - { value: "To return the basic PHP data type of the property (e.g., 'string', 'int', 'object').", correct: true }
      - { value: "To determine if the property is a collection.", correct: false }
    help: |
      The `getBuiltInType()` method provides the fundamental PHP type of a property, which is essential for type-aware operations.
      https://symfony.com/doc/current/components/property_info.html#type-object

  -
    question: >
      Which of the following best describes the "Framework Interoperability" principle in Symfony?
    answers:
      - { value: "Symfony components can only be used within a full Symfony application.", correct: false }
      - { value: "Symfony actively adopts and contributes to PHP Standards Recommendations (PSRs) to promote reusability and compatibility with other libraries.", correct: true }
      - { value: "Symfony applications can automatically run on any web server without configuration.", correct: false }
      - { value: "Symfony provides built-in tools to convert code from other frameworks to Symfony.", correct: false }
    help: |
      Symfony's strong adherence to PSRs makes its components highly interoperable with other PHP projects and libraries.
      https://symfony.com/doc/current/components/index.html#interoperability

  -
    question: >
      What is the primary purpose of the `composer.json` file in a Symfony Flex project?
    answers:
      - { value: "To store application configuration settings.", correct: false }
      - { value: "To define project metadata and declare direct dependencies.", correct: true }
      - { value: "To manage environment variables.", correct: false }
      - { value: "To store cached application data.", correct: false }
    help: |
      The `composer.json` file is Composer's main configuration file, listing your project's direct dependencies and other metadata.
      https://getcomposer.org/doc/01-basic-usage.md#composer-json-project-setup

  -
    question: >
      What is the main advantage of using `#[AsTwigFilter]` attribute to define a custom Twig filter in Symfony 7?
    answers:
      - { value: "It makes the filter available globally without explicit Twig extension registration.", correct: true }
      - { value: "It allows the filter to be written in JavaScript.", correct: false }
      - { value: "It automatically generates Twig templates.", correct: false }
      - { value: "It prevents the filter from being overridden.", correct: false }
    help: |
      The `#[AsTwigFilter]` attribute leverages Symfony's autoconfiguration to automatically register your filter as part of a Twig extension.
      https://symfony.com/doc/current/templating/twig_extension.html#registering-the-extension

  -
    question: >
      Which of the following is a common scenario where the `PropertyAccessor` component is particularly useful?
    answers:
      - { value: "Performing complex mathematical calculations.", correct: false }
      - { value: "Accessing and manipulating properties of objects or arrays dynamically, especially when dealing with nested structures or unknown property paths.", correct: true }
      - { value: "Sending HTTP requests to external APIs.", correct: false }
      - { value: "Generating random numbers.", correct: false }
    help: |
      `PropertyAccessor` simplifies working with object and array properties, abstracting away the complexities of getters, setters, and public properties.
      https://symfony.com/doc/current/components/property_access.html

  -
    question: >
      What is the purpose of the `when@prod` configuration block in Symfony's YAML configuration files?
    answers:
      - { value: "It applies configuration only when the `APP_ENV` is set to `dev`.", correct: false }
      - { value: "It applies configuration only when the `APP_ENV` is set to `prod`.", correct: true }
      - { value: "It defines configuration that applies to all environments.", correct: false }
      - { value: "It is used for defining test-specific configurations.", correct: false }
    help: |
      The `when@env` syntax allows you to apply specific configuration based on the current application environment.
      https://symfony.com/doc/current/configuration.html#environment-based-configuration

  -
    question: >
      Which of the following is a characteristic of Symfony's "Deprecations Best Practices"?
    answers:
      - { value: "Deprecated features are removed without prior notice.", correct: false }
      - { value: "Deprecations are introduced in major versions and removed in minor versions.", correct: false }
      - { value: "Deprecations are announced with clear messages and alternatives, giving developers time to adapt before removal in a future major version.", correct: true }
      - { value: "Deprecations are only for internal Symfony components, not for public APIs.", correct: false }
    help: |
      Symfony's deprecation policy is designed to provide a smooth upgrade path by clearly communicating upcoming changes.
      https://symfony.com/doc/current/contributing/code/bc.html#deprecations

  -
    question: >
      What is the primary purpose of the `Psr\Log\LoggerInterface` in Symfony?
    answers:
      - { value: "To define a standard interface for sending HTTP requests.", correct: false }
      - { value: "To provide a common interface for logging messages, allowing interchangeable logging implementations (e.g., Monolog).", correct: true }
      - { value: "To manage user authentication and authorization.", correct: false }
      - { value: "To define routing rules for incoming requests.", correct: false }
    help: |
      `Psr\Log\LoggerInterface` is a standard interface for logging, ensuring that any PSR-3 compliant logger can be used with Symfony.
      https://www.php-fig.org/psr/psr-3/

  -
    question: >
      What is the role of `Symfony\Component\HttpFoundation\Request` object in Symfony's architecture?
    answers:
      - { value: "It represents the outgoing HTTP response.", correct: false }
      - { value: "It encapsulates all information from the incoming HTTP request (headers, query parameters, body, etc.).", correct: true }
      - { value: "It defines the application's database schema.", correct: false }
      - { value: "It manages user sessions.", correct: false }
    help: |
      The `Request` object is a powerful abstraction over the raw HTTP request, providing a convenient way to access all request data.
      https://symfony.com/doc/current/components/http_foundation.html#request

  -
    question: >
      Which of the following is a best practice for naming services in Symfony's Dependency Injection Container?
    answers:
      - { value: "Using short, cryptic names to save space.", correct: false }
      - { value: "Using fully-qualified class names (FQCNs) as service IDs for autowiring, or descriptive snake_case names for explicitly defined services.", correct: true }
      - { value: "Naming all services with a common prefix like `my_service_`.", correct: false }
      - { value: "Using only integers as service IDs.", correct: false }
    help: |
      Using FQCNs for autowiring is standard. For services that require explicit definition, descriptive snake_case names improve readability.
      https://symfony.com/doc/current/service_container.html#service-naming-conventions

  -
    question: >
      What is the purpose of the `#[AsCommand]` attribute when defining a console command in Symfony 7?
    answers:
      - { value: "To make the command accessible via HTTP requests.", correct: false }
      - { value: "To configure the command's name, description, and other metadata directly on the command class.", correct: true }
      - { value: "To register the command as a service in the container.", correct: false }
      - { value: "To automatically generate arguments and options for the command.", correct: false }
    help: |
      The `#[AsCommand]` attribute simplifies command configuration by allowing metadata to be defined directly on the class.
      https://symfony.com/doc/current/console.html#configuring-the-command

  -
    question: >
      Which of the following is true regarding Symfony's approach to PSR adherence?
    answers:
      - { value: "Symfony only adheres to PSRs related to HTTP messages.", correct: false }
      - { value: "Symfony components are designed to be PSR-compliant where applicable, promoting interoperability with other PHP libraries.", correct: true }
      - { value: "Symfony develops its own standards that are incompatible with PSRs.", correct: false }
      - { value: "PSR adherence is only relevant for Symfony's internal development, not for end-user applications.", correct: false }
    help: |
      Symfony is a strong proponent of PHP-FIG and adopts relevant PSRs to ensure its components are reusable and integrate well within the wider PHP ecosystem.
      https://symfony.com/doc/current/components/index.html#interoperability

  -
    question: >
      What is the main difference between a "Component" and a "Bundle" in Symfony's architecture?
    answers:
      - { value: "Components are full-stack applications, while Bundles are reusable PHP libraries.", correct: false }
      - { value: "Components are standalone PHP libraries, while Bundles are a structured way to package features and configuration specifically for Symfony applications.", correct: true }
      - { value: "Components are only for front-end development, while Bundles are for back-end.", correct: false }
      - { value: "Components are deprecated, while Bundles are the modern approach.", correct: false }
    help: |
      Components are generic PHP libraries. Bundles are Symfony-specific plugins that encapsulate features (controllers, services, routes, templates) and can be easily integrated into a Symfony application.
      https://symfony.com/doc/current/bundles.html#what-is-a-bundle

  -
    question: >
      Which of the following is a best practice for handling exceptions in Symfony 7 applications?
    answers:
      - { value: "Catching every exception and displaying a generic error message to the user.", correct: false }
      - { value: "Letting Symfony's exception listener handle unhandled exceptions and customize error pages for a better user experience.", correct: true }
      - { value: "Logging all exceptions to the console only.", correct: false }
      - { value: "Ignoring exceptions in production environments.", correct: false }
    help: |
      Symfony's `HttpKernel` handles exceptions gracefully, and you can customize error pages to provide user-friendly feedback.
      https://symfony.com/doc/current/controller/error_pages.html

  -
    question: >
      What is the primary purpose of the `kernel.response` event in Symfony?
    answers:
      - { value: "To modify the incoming request before it reaches the controller.", correct: false }
      - { value: "To allow listeners to modify the `Response` object before it is sent to the client.", correct: true }
      - { value: "To determine which controller should handle the request.", correct: false }
      - { value: "To log exceptions that occur during request processing.", correct: false }
    help: |
      The `kernel.response` event is dispatched just before the response is sent, providing an opportunity to modify headers, content, or add additional processing.
      https://symfony.com/doc/current/reference/events.html#kernel-events

  -
    question: >
      Which of the following is a key benefit of Symfony Flex's recipe system?
    answers:
      - { value: "It allows developers to write custom Composer plugins.", correct: false }
      - { value: "It automates common configuration tasks, reducing manual setup and ensuring consistency across projects.", correct: true }
      - { value: "It provides a graphical user interface for managing project dependencies.", correct: false }
      - { value: "It replaces Composer entirely for dependency management.", correct: false }
    help: |
      Recipes are at the heart of Flex, streamlining the process of integrating new packages into a Symfony application.
      https://symfony.com/doc/current/setup/symfony_flex.html#what-flex-does

  -
    question: >
      What is the significance of the `APP_ENV` environment variable in a Symfony 7 application?
    answers:
      - { value: "It defines the application's secret key for security.", correct: false }
      - { value: "It determines the current application environment (e.g., `dev`, `prod`, `test`), influencing configuration loading and debugging behavior.", correct: true }
      - { value: "It specifies the database connection URL.", correct: false }
      - { value: "It sets the default language for the application.", correct: false }
    help: |
      `APP_ENV` is crucial for environment-specific configuration and behavior, allowing Symfony to adapt to different deployment contexts.
      https://symfony.com/doc/current/configuration.html#environment-variables

  -
    question: >
      When defining a configuration tree using Symfony's `Config` component, what is the purpose of `arrayPrototype()`?
    answers:
      - { value: "To define a single, fixed array node.", correct: false }
      - { value: "To allow for multiple, numerically indexed instances of a complex array structure, each conforming to a defined schema.", correct: true }
      - { value: "To define an associative array with predefined keys.", correct: false }
      - { value: "To mark an array node as optional.", correct: false }
    help: |
      `arrayPrototype()` is used when you expect a list of similar configuration blocks, such as multiple database connections or service definitions.
      https://symfony.com/doc/current/components/config/definition.html#prototyped-arrays

  -
    question: >
      Which of the following describes Symfony's approach to "Release Management and Roadmap Schedule"?
    answers:
      - { value: "Symfony releases new major versions every 6 months.", correct: false }
      - { value: "Symfony has a predictable release cycle with regular minor versions and LTS releases every two years.", correct: true }
      - { value: "Symfony releases are entirely unpredictable and depend on community contributions.", correct: false }
      - { value: "Symfony only releases new versions when critical security vulnerabilities are found.", correct: false }
    help: |
      Symfony maintains a clear and predictable release schedule, which helps developers plan upgrades and maintain their applications.
      https://symfony.com/releases

  -
    question: >
      What is the primary benefit of using a `MessageBusInterface` for handling commands and queries in Symfony Messenger?
    answers:
      - { value: "It ensures that all operations are executed synchronously and immediately.", correct: false }
      - { value: "It provides a centralized dispatching mechanism, decoupling the sender from the handler and enabling asynchronous processing.", correct: true }
      - { value: "It automatically validates all incoming messages.", correct: false }
      - { value: "It replaces the need for controllers in a web application.", correct: false }
    help: |
      The message bus acts as a central point for dispatching messages, allowing for flexible and decoupled architectures, including CQRS and event sourcing.
      https://symfony.com/doc/current/components/messenger.html#dispatching-messages

  -
    question: >
      Which of the following is a key aspect of Symfony's "Code Organization" best practices?
    answers:
      - { value: "Placing all application code in a single file for simplicity.", correct: false }
      - { value: "Structuring code logically into directories like `src/Controller`, `src/Entity`, `config/`, and `templates/`.", correct: true }
      - { value: "Using a flat directory structure for all files.", correct: false }
      - { value: "Storing all dependencies directly in the project root.", correct: false }
    help: |
      Symfony promotes a clear and consistent directory structure to enhance maintainability and readability.
      https://symfony.com/doc/current/best_practices.html#code-organization

  -
    question: >
      What is the purpose of the `isNullable()` method of the `Symfony\Component\PropertyInfo\Type` object?
    answers:
      - { value: "To check if the property is a collection.", correct: false }
      - { value: "To determine if the property can be set to `null`.", correct: true }
      - { value: "To get the class name of the property.", correct: false }
      - { value: "To retrieve the default value of the property.", correct: false }
    help: |
      The `isNullable()` method provides crucial information for validation and serialization, indicating whether a property can legally hold a `null` value.
      https://symfony.com/doc/current/components/property_info.html#type-object

  -
    question: >
      Which of the following is a best practice for naming classes in Symfony?
    answers:
      - { value: "Using camelCase for all class names.", correct: false }
      - { value: "Using snake_case for all class names.", correct: false }
      - { value: "Using PascalCase for all class names.", correct: true }
      - { value: "Using all uppercase letters for class names.", correct: false }
    help: |
      Symfony adheres to PSR-1, which specifies PascalCase for class names.
      https://www.php-fig.org/psr/psr-1/

  -
    question: >
      What is the primary purpose of the `kernel.request` event in Symfony?
    answers:
      - { value: "To send the HTTP response to the client.", correct: false }
      - { value: "To allow listeners to modify the `Request` object or return a `Response` early, before the controller is executed.", correct: true }
      - { value: "To determine which template to render.", correct: false }
      - { value: "To log all incoming requests.", correct: false }
    help: |
      The `kernel.request` event is the earliest kernel event, providing a powerful hook for pre-processing requests.
      https://symfony.com/doc/current/reference/events.html#kernel-events

  -
    question: >
      What is the purpose of the `strict_mode` option in Symfony's asset configuration?
    answers:
      - { value: "It forces all assets to be loaded via HTTPS.", correct: false }
      - { value: "It asserts that all requested assets are present in the manifest file, helping detect typos or missing assets.", correct: true }
      - { value: "It enables automatic minification of assets.", correct: false }
      - { value: "It prevents assets from being cached by the browser.", correct: false }
    help: |
      `strict_mode` is useful during development to catch errors related to missing or incorrectly referenced assets.
      https://symfony.com/doc/current/reference/configuration/framework.html#strict-mode

  -
    question: >
      Which of the following is a key characteristic of Symfony's "Components" in relation to its "Framework"?
    answers:
      - { value: "Components are tightly coupled to the Framework and cannot be used independently.", correct: false }
      - { value: "Components are standalone, decoupled PHP libraries that can be used independently or as building blocks for the full Framework.", correct: true }
      - { value: "Components are only used for internal Symfony development and are not exposed to end-users.", correct: false }
      - { value: "Components are a legacy feature that has been replaced by bundles.", correct: false }
    help: |
      The modular nature of Symfony's components is a core strength, allowing developers to pick and choose what they need.
      https://symfony.com/doc/current/components/index.html

  -
    question: >
      What is the primary reason for Symfony's adherence to PSRs (PHP Standard Recommendations)?
    answers:
      - { value: "To force developers to use a specific IDE.", correct: false }
      - { value: "To ensure interoperability and consistency across different PHP projects and libraries.", correct: true }
      - { value: "To reduce the number of features in the framework.", correct: false }
      - { value: "To make Symfony exclusive to certain hosting providers.", correct: false }
    help: |
      PSRs promote common interfaces and coding styles, fostering a more collaborative and interoperable PHP ecosystem.
      https://www.php-fig.org/psr/

  -
    question: >
      Which of the following is a valid naming convention for a configuration file defining routes in Symfony?
    answers:
      - { value: "routes.yml", correct: true }
      - { value: "routing.xml", correct: true }
      - { value: "routes.php", correct: true }
      - { value: "urls.json", correct: false }
    help: |
      Symfony supports YAML, XML, and PHP for route configuration, with common filenames like `routes.yaml`, `routes.xml`, or `routes.php`.
      https://symfony.com/doc/current/routing.html#loading-routes

  -
    question: >
      What is the purpose of the `ConstructorExtractor` in Symfony's `PropertyInfo` component, introduced in Symfony 7.3?
    answers:
      - { value: "To extract property information from public getters and setters.", correct: false }
      - { value: "To extract property information directly from constructor arguments, leveraging typed properties and PHPStan/Reflection.", correct: true }
      - { value: "To extract property information from database schema definitions.", correct: false }
      - { value: "To extract property information from Twig templates.", correct: false }
    help: |
      The `ConstructorExtractor` provides a modern way to infer property types and other metadata directly from constructor definitions, especially useful with PHP 8+ typed properties.
      https://symfony.com/doc/current/reference/configuration/framework.html#property-info-with-constructor-extractor

  -
    question: >
      Which of the following is a core principle of Symfony's "Deprecations Best Practices"?
    answers:
      - { value: "Deprecations are only announced in major versions.", correct: false }
      - { value: "Deprecated features are immediately removed without warning.", correct: false }
      - { value: "Deprecations are introduced in minor versions to give developers time to migrate before removal in a subsequent major version.", correct: true }
      - { value: "Deprecations are only for internal Symfony code, not for public APIs.", correct: false }
    help: |
      Symfony's deprecation policy is designed to provide a clear and predictable upgrade path for applications.
      https://symfony.com/doc/current/contributing/code/bc.html#deprecations

  -
    question: >
      What is the purpose of the `getCollectionValueTypes()` method of the `Symfony\Component\PropertyInfo\Type` object?
    answers:
      - { value: "To get the type of the collection's keys.", correct: false }
      - { value: "To determine if the property is a collection.", correct: false }
      - { value: "To return additional `Type` objects for the types of elements within a collection.", correct: true }
      - { value: "To get the total number of elements in a collection.", correct: false }
    help: |
      This method is crucial for understanding the specific types of elements contained within a collection property, enabling more precise type handling.
      https://symfony.com/doc/current/components/property_info.html#type-object

  -
    question: >
      Which of the following is a benefit of using Symfony's `PropertyAccess` component?
    answers:
      - { value: "It provides a simple way to access object properties, even if they are private or protected, via getters/setters or public properties.", correct: true }
      - { value: "It automatically generates database queries for property access.", correct: false }
      - { value: "It validates property values against predefined constraints.", correct: false }
      - { value: "It serializes objects into JSON or XML format.", correct: false }
    help: |
      `PropertyAccess` abstracts away the details of how to access a property, making code more flexible and robust.
      https://symfony.com/doc/current/components/property_access.html

  -
    question: >
      What is the role of the `Receiver` in the Symfony Messenger component?
    answers:
      - { value: "To send messages to a message broker.", correct: false }
      - { value: "To retrieve messages from a message queue or API endpoint, deserialize them, and forward them to handlers.", correct: true }
      - { value: "To apply business logic to messages.", correct: false }
      - { value: "To add metadata to messages.", correct: false }
    help: |
      Receivers are responsible for consuming messages from a transport and passing them to the message bus for handling.
      https://symfony.com/doc/current/components/messenger.html#receiver

  -
    question: >
      Which of the following is an example of a "Bridge" in Symfony?
    answers:
      - { value: "FrameworkBundle", correct: false }
      - { value: "MonologBridge", correct: true }
      - { value: "HttpClient", correct: false }
      - { value: "Routing", correct: false }
    help: |
      `MonologBridge` provides the integration between the Symfony Framework and the Monolog logging library.
      https://symfony.com/doc/current/components/index.html

  -
    question: >
      What is the purpose of the `throw_exception_on_invalid_index` option in Symfony's `property_accessor` configuration?
    answers:
      - { value: "It forces the `PropertyAccessor` to always return `null` for invalid indexes.", correct: false }
      - { value: "It configures the `property_accessor` service to throw an exception when trying to access an invalid array index.", correct: true }
      - { value: "It disables all error reporting for property access.", correct: false }
      - { value: "It enables automatic creation of missing array indexes.", correct: false }
    help: |
      By default, accessing an invalid array index with `PropertyAccessor` might not throw an exception. This option allows you to enforce stricter error handling.
      https://symfony.com/doc/current/reference/configuration/framework.html#throw-exception-on-invalid-index

  -
    question: >
      Which of the following is a key benefit of Symfony's "Event Dispatcher" component?
    answers:
      - { value: "It enforces strict coupling between components.", correct: false }
      - { value: "It allows for flexible and decoupled communication between different parts of an application through events and listeners.", correct: true }
      - { value: "It provides a built-in ORM for database interactions.", correct: false }
      - { value: "It is used for generating HTML forms.", correct: false }
    help: |
      The Event Dispatcher is a powerful tool for building extensible and maintainable applications by promoting loose coupling.
      https://symfony.com/doc/current/components/event_dispatcher.html

  -
    question: >
      What is the purpose of the `getShortDescription()` method in Symfony's `PropertyInfo` component?
    answers:
      - { value: "To retrieve a detailed, multi-paragraph description of a property.", correct: false }
      - { value: "To get a brief, single-line description of a property, typically from PHPDoc or attributes.", correct: true }
      - { value: "To retrieve the property's type information.", correct: false }
      - { value: "To get the property's default value.", correct: false }
    help: |
      `getShortDescription()` is useful for displaying concise information about properties, often used in documentation or debugging tools.
      https://symfony.com/doc/current/components/property_info.html#propertyinfoextractor-api

  -
    question: >
      Which of the following is a characteristic of Symfony's "Framework Overloading" best practices?
    answers:
      - { value: "It is encouraged for all custom modifications.", correct: false }
      - { value: "It refers to directly modifying Symfony's core files.", correct: false }
      - { value: "It should be avoided unless absolutely necessary, favoring extension points and configuration over direct overrides.", correct: true }
      - { value: "It is the primary way to add new features to Symfony.", correct: false }
    help: |
      While possible, direct "overloading" of framework internals can lead to maintenance headaches. Symfony provides many ways to extend and customize without direct modification.
      https://symfony.com/doc/current/bundles/override.html

  -
    question: >
      What is the purpose of the `getTypes()` method in Symfony's `PropertyInfo` component?
    answers:
      - { value: "To get a list of all properties in a class.", correct: false }
      - { value: "To retrieve detailed type information for a specific property, including built-in type, nullability, and collection details.", correct: true }
      - { value: "To check if a property is readable or writable.", correct: false }
      - { value: "To get the short description of a property.", correct: false }
    help: |
      The `getTypes()` method returns an array of `Type` objects, providing comprehensive information about a property's type.
      https://symfony.com/doc/current/components/property_info.html#propertyinfoextractor-api

  -
    question: >
      Which of the following describes the "Backward Compatibility Promise" in Symfony?
    answers:
      - { value: "All new features are immediately available in older Symfony versions.", correct: false }
      - { value: "Minor versions (e.g., 7.0 to 7.1) will not introduce breaking changes to public APIs, ensuring smooth upgrades.", correct: true }
      - { value: "Major versions are released without any deprecation warnings.", correct: false }
      - { value: "The promise applies only to internal Symfony code, not to user-facing APIs.", correct: false }
    help: |
      Symfony's B.C. promise is a cornerstone of its stability, allowing developers to upgrade with confidence.
      https://symfony.com/doc/current/contributing/code/bc.html

  -
    question: >
      What is the primary role of the `Sender` in the Symfony Messenger component?
    answers:
      - { value: "To process messages using business logic.", correct: false }
      - { value: "To retrieve messages from a message queue.", correct: false }
      - { value: "To serialize messages and send them to a message broker or third-party API.", correct: true }
      - { value: "To add middleware to the message bus.", correct: false }
    help: |
      Senders are responsible for the actual transportation of messages to their destination.
      https://symfony.com/doc/current/components/messenger.html#sender

  -
    question: >
      What is the purpose of the `#[AsCommand]` attribute in Symfony 7 console commands?
    answers:
      - { value: "It defines the command's dependencies.", correct: false }
      - { value: "It configures the command's name and description directly on the class, replacing static properties.", correct: true }
      - { value: "It automatically executes the command when the application starts.", correct: false }
      - { value: "It makes the command available as an HTTP endpoint.", correct: false }
    help: |
      The `#[AsCommand]` attribute, introduced in Symfony 6.2, provides a modern, attribute-based way to configure console commands.
      https://symfony.com/doc/current/console.html#configuring-the-command

  -
    question: >
      Which of the following is a best practice for organizing templates in a Symfony 7 application?
    answers:
      - { value: "Storing all templates in the `src/` directory.", correct: false }
      - { value: "Placing templates in the `templates/` directory, often organized by controller or feature.", correct: true }
      - { value: "Embedding HTML directly within PHP controller files.", correct: false }
      - { value: "Storing templates in the `public/` directory.", correct: false }
    help: |
      The `templates/` directory is the standard location for Twig templates, promoting a clean separation of concerns.
      https://symfony.com/doc/current/best_practices.html#code-organization

  -
    question: >
      What is the primary purpose of the `#[Route]` attribute in Symfony 7 controllers?
    answers:
      - { value: "To define the controller's dependencies.", correct: false }
      - { value: "To configure the URL path, HTTP methods, and other routing options for a controller action.", correct: true }
      - { value: "To mark the controller as a service.", correct: false }
      - { value: "To enable automatic serialization of controller responses.", correct: false }
    help: |
      The `#[Route]` attribute provides a concise and powerful way to define routes directly on controller methods.
      https://symfony.com/doc/current/routing.html#using-attributes

  -
    question: >
      What is the role of `Envelope Stamps` in the Symfony Messenger component?
    answers:
      - { value: "They are used to encrypt messages for secure transport.", correct: false }
      - { value: "They are pieces of metadata attached to an `Envelope`, providing additional information for middleware or transports.", correct: true }
      - { value: "They define the message's unique identifier.", correct: false }
      - { value: "They are responsible for deserializing messages.", correct: false }
    help: |
      Stamps allow for flexible and dynamic modification of message behavior as they pass through the message bus.
      https://symfony.com/doc/current/components/messenger.html#envelope-stamps

  -
    question: >
      Which of the following is a key aspect of Symfony's "Release Management and Roadmap Schedule"?
    answers:
      - { value: "New major versions are released every 6 months.", correct: false }
      - { value: "Symfony provides LTS (Long Term Support) versions with extended maintenance periods.", correct: true }
      - { value: "There is no public roadmap for Symfony releases.", correct: false }
      - { value: "Security fixes are only provided for the latest minor version.", correct: false }
    help: |
      LTS releases are crucial for applications requiring long-term stability and support.
      https://symfony.com/releases

  -
    question: >
      What is the purpose of the `isCollection()` method of the `Symfony\Component\PropertyInfo\Type` object?
    answers:
      - { value: "To check if the property is nullable.", correct: false }
      - { value: "To determine if the property represents a collection (e.g., an array or an object implementing `Traversable`).", correct: true }
      - { value: "To get the built-in PHP type of the property.", correct: false }
      - { value: "To retrieve the class name of the collection elements.", correct: false }
    help: |
      This method helps in understanding the structure of a property, particularly for properties that hold multiple values.
      https://symfony.com/doc/current/components/property_info.html#type-object

  -
    question: >
      Which of the following is a best practice for naming methods in Symfony?
    answers:
      - { value: "Using PascalCase for all method names.", correct: false }
      - { value: "Using snake_case for all method names.", correct: false }
      - { value: "Using camelCase for all method names.", correct: true }
      - { value: "Using all uppercase letters for method names.", correct: false }
    help: |
      Symfony adheres to PSR-1, which specifies camelCase for method names.
      https://www.php-fig.org/psr/psr-1/

  -
    question: >
      What is the primary benefit of using "Dependency Injection" in Symfony?
    answers:
      - { value: "It makes code harder to test by tightly coupling components.", correct: false }
      - { value: "It allows objects to declare their dependencies, which are then provided by the container, promoting loose coupling and testability.", correct: true }
      - { value: "It automatically generates database schemas.", correct: false }
      - { value: "It provides a global registry for all application variables.", correct: false }
    help: |
      Dependency Injection is a fundamental design pattern in Symfony, making applications more modular and easier to maintain.
      https://symfony.com/doc/current/service_container.html#what-is-dependency-injection

  -
    question: >
      Which of the following describes Symfony's approach to "Framework Interoperability"?
    answers:
      - { value: "Symfony components are designed to be used exclusively within the full Symfony Framework.", correct: false }
      - { value: "Symfony actively embraces and adheres to PHP Standards Recommendations (PSRs) to ensure its components can be easily integrated with other PHP libraries and frameworks.", correct: true }
      - { value: "Symfony discourages the use of any third-party libraries.", correct: false }
      - { value: "Symfony provides its own unique standards that are incompatible with other PHP projects.", correct: false }
    help: |
      Symfony's commitment to PSRs is a key factor in its widespread adoption and flexibility within the PHP ecosystem.
      https://symfony.com/doc/current/components/index.html#interoperability

  -
    question: >
      What is the purpose of the `getProperties()` method in Symfony's `PropertyInfo` component?
    answers:
      - { value: "To retrieve the value of a specific property.", correct: false }
      - { value: "To get a list of all public properties for a given class.", correct: true }
      - { value: "To check if a property exists on a class.", correct: false }
      - { value: "To set the value of a property.", correct: false }
    help: |
      The `getProperties()` method is useful for introspection, allowing you to dynamically discover the properties of a class.
      https://symfony.com/doc/current/components/property_info.html#propertyinfoextractor-api

  -
    question: >
      Which of the following is a common naming convention for a controller method that handles a specific action?
    answers:
      - { value: "my_action()", correct: false }
      - { value: "myAction()", correct: true }
      - { value: "MyAction()", correct: false }
      - { value: "handle()", correct: false }
    help: |
      Controller action methods typically follow camelCase (e.g., `indexAction`, `showAction`).
      https://symfony.com/doc/current/best_practices.html#controllers

  -
    question: >
      What is the main purpose of the `vendor/` directory in a Symfony 7 application?
    answers:
      - { value: "To store application-specific source code.", correct: false }
      - { value: "To store all third-party libraries and dependencies managed by Composer.", correct: true }
      - { value: "To store cached data and log files.", correct: false }
      - { value: "To store public assets like CSS and JavaScript.", correct: false }
    help: |
      The `vendor/` directory is where Composer installs all your project's dependencies. It should not be version-controlled.
      https://getcomposer.org/doc/01-basic-usage.md#autoloading

  -
    question: >
      What is the primary benefit of using `#[Autowire]` attribute for injecting services in Symfony 7?
    answers:
      - { value: "It eliminates the need for any service configuration.", correct: false }
      - { value: "It allows for explicit control over which service is injected when autowiring might be ambiguous, or to inject specific parameters.", correct: true }
      - { value: "It makes services publicly accessible from anywhere in the application.", correct: false }
      - { value: "It automatically creates new service definitions for classes.", correct: false }
    help: |
      `#[Autowire]` provides a powerful way to fine-tune dependency injection, especially useful for disambiguating services or injecting scalar values.
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring-specific-arguments

  -
    question: >
      Which of the following is a core principle of Symfony's "Code Organization"?
    answers:
      - { value: "All code should be placed in a single file.", correct: false }
      - { value: "Code should be grouped by type (e.g., all controllers together, all entities together) and placed in logical directories.", correct: true }
      - { value: "Code organization is left entirely to the developer's discretion.", correct: false }
      - { value: "Code should be organized based on the number of lines in each file.", correct: false }
    help: |
      Symfony promotes a clear and consistent directory structure to enhance maintainability and readability.
      https://symfony.com/doc/current/best_practices.html#code-organization