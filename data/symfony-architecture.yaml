category: Symfony Architecture

questions:
  -
    question: >
      What is the primary purpose of Symfony Flex in a Symfony application?
    answers:
      - { value: 'To simplify the installation and management of Symfony packages and their dependencies.', correct: true }
      - { value: 'To provide a full-stack MVC framework for rapid application development.', correct: false }
      - { value: 'To generate boilerplate code for controllers and entities automatically.', correct: false }
      - { value: 'To manage database migrations and schema updates.', correct: false }
    help: |
      Symfony Flex is a Composer plugin that provides recipes to automate the installation and configuration of Symfony packages, simplifying project setup and maintenance.
      https://symfony.com/doc/current/setup/symfony_flex.html

  -
    question: >
      Under which open-source license is the Symfony framework distributed?
    answers:
      - { value: 'MIT License', correct: true }
      - { value: 'GPLv3 License', correct: false }
      - { value: 'Apache 2.0 License', correct: false }
      - { value: 'BSD 3-Clause License', correct: false }
    help: |
      Symfony is released under the MIT license, which is a permissive free software license.
      https://symfony.com/doc/current/contributing/code/license.html

  -
    question: >
      Which of the following best describes Symfony Components?
    answers:
      - { value: 'Standalone PHP libraries that can be used independently of the full Symfony framework.', correct: true }
      - { value: 'Pre-built modules that provide full-stack functionality for specific features like user management.', correct: false }
      - { value: 'Graphical user interfaces for managing Symfony applications.', correct: false }
      - { value: 'Database abstraction layers for various SQL and NoSQL databases.', correct: false }
    help: |
      Symfony Components are a set of decoupled and reusable PHP libraries that form the foundation of the Symfony framework, but can also be used in any PHP project.
      https://symfony.com/components

  -
    question: >
      What is the typical role of a "Bridge" in the Symfony architecture?
    answers:
      - { value: 'To integrate third-party libraries or components with the Symfony framework.', correct: true }
      - { value: 'To provide a bridge between different database systems.', correct: false }
      - { value: 'To connect Symfony applications to external APIs.', correct: false }
      - { value: 'To facilitate communication between different Symfony components.', correct: false }
    help: |
      Bridges are specific Symfony packages that provide integration between a Symfony Component and a third-party library (e.g., TwigBridge integrates Twig with Symfony).
      https://symfony.com/doc/current/components/index.html#bridges

  -
    question: >
      Which directory is typically used for storing application-specific PHP classes, such as controllers, services, and entities, in a standard Symfony Flex project?
    answers:
      - { value: '`src/`', correct: true }
      - { value: '`app/`', correct: false }
      - { value: '`bin/`', correct: false }
      - { value: '`var/`', correct: false }
    help: |
      The `src/` directory is where all your application's PHP code resides, including controllers, services, entities, and other custom classes.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#code-organization

  -
    question: >
      In a Symfony application, what is the primary role of `public/index.php`?
    answers:
      - { value: 'It acts as the front controller, bootstrapping the application and handling all incoming requests.', correct: true }
      - { value: 'It contains all the routing definitions for the application.', correct: false }
      - { value: 'It is responsible for rendering all Twig templates.', correct: false }
      - { value: 'It stores all environment variables for the application.', correct: false }
    help: |
      `public/index.php` is the front controller, the single entry point for all web requests, responsible for bootstrapping the Symfony Kernel and handling the request-response lifecycle.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#the-front-controller

  -
    question: >
      Which of the following is the correct way to inject the main logger service into a Symfony controller using autowiring?
    answers:
      - { value: '`Psr\\Log\\LoggerInterface $logger`', correct: true }
      - { value: '`Logger $logger`', correct: false }
      - { value: '`#[Inject(''monolog.logger'')] $logger`', correct: false }
      - { value: '`#[Autowire(service: ''logger'')] $logger`', correct: false }
    help: |
      Symfony's autowiring automatically injects the `Psr\\Log\\LoggerInterface` when type-hinted, providing the default logger service.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#_snippet_1

  -
    question: >
      Which of the following statements is true regarding Symfony's Long Term Support (LTS) releases?
    answers:
      - { value: 'LTS releases receive bug fixes and security updates for a longer period than standard releases.', correct: true }
      - { value: 'LTS releases introduce major new features and backward incompatible changes.', correct: false }
      - { value: 'LTS releases are only available to Symfony paid subscribers.', correct: false }
      - { value: 'LTS releases are typically released every six months.', correct: false }
    help: |
      Symfony provides LTS releases that offer extended maintenance periods for bug fixes and security updates, making them suitable for projects requiring long-term stability.
      https://symfony.com/releases

  -
    question: >
      What does Symfony's Backward Compatibility Promise (BCP) primarily guarantee?
    answers:
      - { value: 'That minor and patch releases will not introduce breaking changes to public APIs.', correct: true }
      - { value: 'That all code written for previous Symfony versions will run without modification on new major versions.', correct: false }
      - { value: 'That all third-party bundles will always be compatible with new Symfony releases.', correct: false }
      - { value: 'That Symfony applications can be deployed on any PHP version without issues.', correct: false }
    help: |
      The Backward Compatibility Promise ensures that minor and patch releases of Symfony will not introduce breaking changes to its public APIs, allowing for smooth upgrades within a major version.
      https://symfony.com/doc/current/contributing/code/bc.html

  -
    question: >
      What is the recommended approach for handling deprecated features in a Symfony application?
    answers:
      - { value: 'Address deprecation notices as they appear and migrate to the new recommended APIs before upgrading to the next major version.', correct: true }
      - { value: 'Ignore deprecation notices until a major version upgrade, then fix them all at once.', correct: false }
      - { value: 'Disable deprecation notices in production environments to improve performance.', correct: false }
      - { value: 'Use the `@deprecated` annotation to suppress all deprecation warnings.', correct: false }
    help: |
      It's best practice to address deprecation notices proactively, as they indicate features that will be removed or changed in future major versions.
      https://symfony.com/doc/current/contributing/code/bc.html#deprecations

  -
    question: >
      Which of the following is a common way to "overload" or customize the behavior of a core Symfony service?
    answers:
      - { value: 'Decorating the service definition in the `services.yaml` file.', correct: true }
      - { value: 'Directly modifying the source code of the Symfony FrameworkBundle.', correct: false }
      - { value: 'Using PHP''s `runkit` extension to override core classes at runtime.', correct: false }
      - { value: 'Defining a new service with the same ID as the core service, which is generally discouraged.', correct: false }
    help: |
      Service decoration is the recommended way to modify or extend the behavior of existing services in Symfony without directly altering their source code.
      https://symfony.com/doc/current/service_container/service_decoration.html

  -
    question: >
      Which PHP Standard Recommendation (PSR) does Symfony's EventDispatcher component primarily adhere to?
    answers:
      - { value: 'PSR-14 (Event Dispatcher)', correct: true }
      - { value: 'PSR-7 (HTTP Message)', correct: false }
      - { value: 'PSR-11 (Container)', correct: false }
      - { value: 'PSR-3 (Logger)', correct: false }
    help: |
      The Symfony EventDispatcher component implements PSR-14, providing a common interface for dispatching and listening to events.
      https://www.php-fig.org/psr/psr-14/

  -
    question: >
      What is the recommended naming convention for Symfony service IDs that are autowired?
    answers:
      - { value: 'The fully qualified class name (FQCN) of the service.', correct: true }
      - { value: 'A snake_case string representing the service''s purpose.', correct: false }
      - { value: 'A camelCase string prefixed with `app.`, e.g., `app.myService`.', correct: false }
      - { value: 'A numeric ID for faster lookup in the container.', correct: false }
    help: |
      When using autowiring, Symfony automatically registers services using their fully qualified class name (FQCN) as the service ID.
      https://symfony.com/doc/current/service_container/autowiring.html

  -
    question: >
      When installing a new Symfony package via Composer, what is the role of a "Flex recipe"?
    answers:
      - { value: 'It automatically configures the package by adding or modifying files in your project, such as configuration, routes, or services.', correct: true }
      - { value: 'It compiles the package''s source code into an optimized binary for faster execution.', correct: false }
      - { value: 'It generates a graphical user interface for managing the package''s settings.', correct: false }
      - { value: 'It creates a new database table for the package''s data.', correct: false }
    help: |
      Flex recipes are small sets of automated instructions that configure packages, making their installation and integration into a Symfony application seamless.
      https://symfony.com/doc/current/setup/symfony_flex.html#recipes

  -
    question: >
      Which Symfony component is responsible for handling the HTTP request and generating the HTTP response?
    answers:
      - { value: 'HttpKernel', correct: true }
      - { value: 'HttpFoundation', correct: false }
      - { value: 'Routing', correct: false }
      - { value: 'EventDispatcher', correct: false }
    help: |
      The HttpKernel component provides the core system that handles a request and returns a response, acting as the central dispatcher for the application.
      https://symfony.com/doc/current/components/http_kernel.html

  -
    question: >
      What is the primary benefit of using Symfony's `MicroKernelTrait`?
    answers:
      - { value: 'It simplifies the creation of lightweight, single-file Symfony applications or multi-application setups.', correct: true }
      - { value: 'It automatically generates database entities and repositories.', correct: false }
      - { value: 'It provides a built-in web server for development purposes.', correct: false }
      - { value: 'It enables real-time communication via WebSockets.', correct: false }
    help: |
      The `MicroKernelTrait` allows for building small, self-contained Symfony applications or managing multiple applications within a single project by simplifying kernel configuration.
      https://symfony.com/doc/current/configuration/micro_kernel_trait.html

  -
    question: |
      Consider the following invokable controller:

      ```php
      // src/Controller/Hello.php
      namespace App\Controller;

      use Symfony\Component\HttpFoundation\Response;
      use Symfony\Component\Routing\Attribute\Route;

      #[Route('/hello/{name}', name: 'hello')]
      class Hello
      {
          public function __invoke(string $name = 'World'): Response
          {
              return new Response(sprintf('Hello %s!', $name));
          }
      }
      ```

      How would you define the route for this controller in `config/routes.yaml`?
    answers:
      - { value: 'hello:
          path:       /hello/{name}
          controller: App\\Controller\\Hello', correct: true }
      - { value: 'hello:
          path:       /hello/{name}
          _controller: App\\Controller\\Hello::__invoke', correct: false }
      - { value: 'hello:
          path:       /hello/{name}
          action:     App\\Controller\\Hello', correct: false }
      - { value: 'hello:
          path:       /hello/{name}
          service:    App\\Controller\\Hello', correct: false }
    help: |
      For invokable controllers, you only need to specify the class name as the controller in the route definition. Symfony automatically calls the `__invoke()` method.
      https://symfony.com/doc/current/controller/service.html#invokable-controllers

  -
    question: >
      During the Symfony request handling process, which object is responsible for resolving the controller and its arguments based on the incoming request?
    answers:
      - { value: 'The HttpKernel component.', correct: true }
      - { value: 'The Router component.', correct: false }
      - { value: 'The EventDispatcher component.', correct: false }
      - { value: 'The DependencyInjection component.', correct: false }
    help: |
      The HttpKernel component, specifically through its `ControllerResolver` and `ArgumentResolver` services, is responsible for determining which controller to execute and what arguments to pass to it.
      https://symfony.com/doc/current/create_framework/http_kernel_controller_resolver.html

  -
    question: >
      Which Kernel event is dispatched when an uncaught exception occurs during the Symfony request handling process?
    answers:
      - { value: '`KernelEvents::EXCEPTION`', correct: true }
      - { value: '`KernelEvents::ERROR`', correct: false }
      - { value: '`KernelEvents::TERMINATE`', correct: false }
      - { value: '`KernelEvents::REQUEST`', correct: false }
    help: |
      The `KernelEvents::EXCEPTION` event is dispatched when an exception is thrown during any stage of the request handling. Listeners to this event can modify the response or replace the exception.
      https://symfony.com/doc/current/reference/events.html#kernel-events

  -
    question: >
      What is the key difference between an Event Listener and an Event Subscriber in Symfony's Event Dispatcher component?
    answers:
      - { value: 'An Event Listener implements `EventSubscriberInterface` and declares its subscribed events, while an Event Subscriber is a plain PHP callable or class that is manually registered.', correct: false }
      - { value: 'An Event Listener is a plain PHP callable or class that is manually registered to specific events, while an Event Subscriber implements `EventSubscriberInterface` and declares its subscribed events.', correct: true }
      - { value: 'Event Listeners can only react to one event, whereas Event Subscribers can react to multiple events.', correct: false }
      - { value: 'Event Listeners are always prioritized higher than Event Subscribers.', correct: false }
    help: |
      Event Listeners are registered individually for each event, while Event Subscribers implement `EventSubscriberInterface` and declare all the events they subscribe to in a single method.
      https://symfony.com/doc/current/event_dispatcher.html#event-listeners-and-event-subscribers

  -
    question: |
      Given the following configuration for different environments:

      ```yaml
      # config/packages/routing.yaml
      framework:
          router:
              utf8: true

      when@prod:
          framework:
              router:
                  strict_requirements: null
      ```

      What is the purpose of the `when@prod` block?
    answers:
      - { value: 'To apply specific configuration only when the `APP_ENV` environment variable is set to `prod`.', correct: true }
      - { value: 'To define a route that is only accessible in the production environment.', correct: false }
      - { value: 'To enable a debug mode specifically for the production environment.', correct: false }
      - { value: 'To load a different set of bundles in production.', correct: false }
    help: |
      The `when@env` syntax allows you to apply configuration specific to a given environment, such as `prod` or `dev`.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#_snippet_8

  -
    question: >
      How often are new minor versions of Symfony typically released?
    answers:
      - { value: 'Every six months.', correct: true }
      - { value: 'Annually.', correct: false }
      - { value: 'Every two years.', correct: false }
      - { value: 'On an as-needed basis, without a fixed schedule.', correct: false }
    help: |
      Symfony usually releases a new minor version every six months, typically in May and November.
      https://symfony.com/releases

  -
    question: >
      Which of the following is NOT considered a backward incompatible change according to Symfony's Backward Compatibility Promise?
    answers:
      - { value: 'Adding a new method to an interface.', correct: false }
      - { value: 'Changing the signature of a public method.', correct: false }
      - { value: 'Removing a public method from a class.', correct: false }
      - { value: 'Adding a new optional argument to the end of a method signature.', correct: true }
    help: |
      Adding a new optional argument at the end of a method signature is generally considered backward compatible, as existing calls to the method will still work. Other options represent breaking changes.
      https://symfony.com/doc/current/contributing/code/bc.html#backward-compatibility-rules

  -
    question: >
      When a feature is deprecated in Symfony, what is the recommended way to notify developers of its impending removal?
    answers:
      - { value: 'By triggering a `E_USER_DEPRECATED` error in the code.', correct: true }
      - { value: 'By removing the feature immediately without prior warning.', correct: false }
      - { value: 'By adding a comment in the code indicating it''s deprecated.', correct: false }
      - { value: 'By logging a critical error to the application logs.', correct: false }
    help: |
      Symfony uses `E_USER_DEPRECATED` errors to signal that a feature is deprecated and will be removed in a future major version, allowing developers to update their code proactively.
      https://symfony.com/doc/current/contributing/code/bc.html#deprecations

  -
    question: >
      Which of the following is a valid method for overriding a service definition provided by a Symfony bundle?
    answers:
      - { value: 'Creating a new service definition with the same ID and using the `public: false` attribute.', correct: false }
      - { value: 'Using the `_defaults` section in `services.yaml` to redefine the service.', correct: false }
      - { value: 'Using service decoration to wrap or replace the original service.', correct: true }
      - { value: 'Directly modifying the bundle''s `services.xml` or `services.yaml` file.', correct: false }
    help: |
      Service decoration (`decorates` option) is the official and recommended way to override or extend services provided by bundles without modifying the bundle's source code.
      https://symfony.com/doc/current/service_container/service_decoration.html

  -
    question: >
      Which PSR (PHP Standard Recommendation) defines a common interface for a dependency injection container?
    answers:
      - { value: 'PSR-11 (Container)', correct: true }
      - { value: 'PSR-3 (Logger)', correct: false }
      - { value: 'PSR-7 (HTTP Message)', correct: false }
      - { value: 'PSR-1 (Basic Coding Standard)', correct: false }
    help: |
      PSR-11 defines the `ContainerInterface` and `ContainerExceptionInterface` for interoperable dependency injection containers.
      https://www.php-fig.org/psr/psr-11/

  -
    question: >
      What is the recommended naming convention for Symfony controller classes?
    answers:
      - { value: 'They should end with `Controller` (e.g., `ProductController`).', correct: true }
      - { value: 'They should be named after the route they handle (e.g., `homepage.php`).', correct: false }
      - { value: 'They should always be invokable classes.', correct: false }
      - { value: 'They should be prefixed with `App` (e.g., `AppProduct`).', correct: false }
    help: |
      Symfony best practices suggest that controller classes should be suffixed with `Controller` for clarity and consistency.
      https://symfony.com/doc/current/best_practices.html#controllers

  -
    question: |
      After installing Doctrine ORM using `composer require doctrine`, what change would you expect to see in your `.env` file?
    answers:
      - { value: 'A new `DATABASE_URL` environment variable is added.', correct: true }
      - { value: 'The `APP_ENV` variable is automatically switched to `prod`.', correct: false }
      - { value: 'A `DOCTRINE_VERSION` variable is added.', correct: false }
      - { value: 'The `APP_SECRET` is regenerated.', correct: false }
    help: |
      Symfony Flex recipes, like the one for Doctrine, automatically add necessary environment variables (e.g., `DATABASE_URL`) to your `.env` file.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#_snippet_12

  -
    question: >
      Which Symfony component provides tools to read and write properties of PHP objects or arrays using property paths (e.g., `person.address.street`)?
    answers:
      - { value: 'PropertyAccess', correct: true }
      - { value: 'Serializer', correct: false }
      - { value: 'Validator', correct: false }
      - { value: 'Form', correct: false }
    help: |
      The PropertyAccess component allows you to read and write to public properties, private properties (via getters/setters), and array indices using a simple string path.
      https://symfony.com/doc/current/components/property_access.html

  -
    question: >
      Which Symfony bridge is typically used for integrating the Twig templating engine?
    answers:
      - { value: 'TwigBridge', correct: true }
      - { value: 'TemplatingBridge', correct: false }
      - { value: 'ViewBridge', correct: false }
      - { value: 'RendererBridge', correct: false }
    help: |
      The `symfony/twig-bridge` package provides the integration between the Twig templating engine and the Symfony framework.
      https://symfony.com/doc/current/components/twig.html

  -
    question: |
      Given the following service definition:

      ```php
      // src/GreetingGenerator.php
      namespace App;

      class GreetingGenerator
      {
          public function getRandomGreeting(): string
          {
              $greetings = ['Hey', 'Yo', 'Aloha'];
              $greeting = $greetings[array_rand($greetings)];

              return $greeting;
          }
      }
      ```

      How would you inject an instance of `GreetingGenerator` into a controller using autowiring?
    answers:
      - { value: 'Type-hint `GreetingGenerator $generator` in the controller method or constructor.', correct: true }
      - { value: 'Manually define the service in `services.yaml` and inject it by name.', correct: false }
      - { value: 'Use `#[Inject(service: ''greeting_generator'')]` attribute.', correct: false }
      - { value: 'Call `new GreetingGenerator()` directly in the controller.', correct: false }
    help: |
      Symfony's autowiring automatically detects and injects services based on type hints in constructors or method arguments, provided the service is configured for autowiring (which is default for classes in `src/`).
      https://symfony.com/doc/current/quick_tour/the_architecture.html#_snippet_4

  -
    question: >
      What is the correct order of the following kernel events during a typical Symfony request lifecycle?
      1. `KernelEvents::RESPONSE`
      2. `KernelEvents::REQUEST`
      3. `KernelEvents::CONTROLLER`
      4. `KernelEvents::VIEW`
    answers:
      - { value: '2, 3, 4, 1', correct: true }
      - { value: '2, 4, 3, 1', correct: false }
      - { value: '1, 2, 3, 4', correct: false }
      - { value: '3, 2, 4, 1', correct: false }
    help: |
      The typical order of kernel events is: `REQUEST` (before controller), `CONTROLLER` (before controller execution), `VIEW` (after controller returns data, before response), and `RESPONSE` (before sending the response).
      https://symfony.com/doc/current/reference/events.html#kernel-events

  -
    question: >
      When handling exceptions in a Symfony application, what is the default behavior in the `dev` environment compared to the `prod` environment?
    answers:
      - { value: 'In `dev`, detailed error pages with stack traces are shown; in `prod`, a generic error page is displayed.', correct: true }
      - { value: 'In `dev`, exceptions are silently ignored; in `prod`, they cause the application to crash.', correct: false }
      - { value: 'In `dev`, exceptions are always logged to the database; in `prod`, they are logged to a file.', correct: false }
      - { value: 'In `dev`, all exceptions are converted to HTTP 500 errors; in `prod`, they are converted to HTTP 404 errors.', correct: false }
    help: |
      Symfony's exception handling provides detailed debugging information in the `dev` environment, while showing user-friendly error pages in `prod` to prevent sensitive information leakage.
      https://symfony.com/doc/current/controller/error_pages.html

  -
    question: >
      What is the purpose of the `APP_ENV` environment variable in a Symfony application?
    answers:
      - { value: 'It defines the current application environment (e.g., `dev`, `prod`, `test`), influencing configuration loading and debugging behavior.', correct: true }
      - { value: 'It specifies the application''s secret key for security purposes.', correct: false }
      - { value: 'It sets the base URL for the application''s assets.', correct: false }
      - { value: 'It determines the default language for the application.', correct: false }
    help: |
      The `APP_ENV` environment variable is crucial for Symfony applications, as it dictates which environment-specific configurations are loaded and how the application behaves (e.g., debug mode, logging levels).
      https://symfony.com/doc/current/quick_tour/the_architecture.html#_snippet_9

  -
    question: >
      Which of the following describes a key aspect of Symfony's release management roadmap?
    answers:
      - { value: 'New major versions are released every two years, with minor versions every six months.', correct: true }
      - { value: 'Only LTS versions receive security updates after their initial release.', correct: false }
      - { value: 'All new features are introduced in patch releases.', correct: false }
      - { value: 'There is no fixed schedule; releases are made when features are ready.', correct: false }
    help: |
      Symfony follows a predictable release schedule with new major versions every two years and minor versions every six months, ensuring a clear roadmap for developers.
      https://symfony.com/releases

  -
    question: >
      Which of the following PHP Standard Recommendations (PSRs) is most relevant to Symfony's HTTP Client component?
    answers:
      - { value: 'PSR-18 (HTTP Client)', correct: true }
      - { value: 'PSR-7 (HTTP Message)', correct: false }
      - { value: 'PSR-17 (HTTP Factories)', correct: false }
      - { value: 'PSR-6 (Caching)', correct: false }
    help: |
      The Symfony HTTP Client component adheres to PSR-18, providing an interoperable interface for sending HTTP requests. It also leverages PSR-7 and PSR-17 for HTTP message and factory standards.
      https://symfony.com/doc/current/components/http_client.html#psr-compliance

  -
    question: >
      What is the purpose of the `symfony.lock` file in a Symfony Flex project?
    answers:
      - { value: 'It records the exact versions of Symfony recipes applied to the project, ensuring consistent recipe application across environments.', correct: true }
      - { value: 'It locks the version of PHP used by the application.', correct: false }
      - { value: 'It stores the compiled service container for faster boot times.', correct: false }
      - { value: 'It defines the database schema for the application.', correct: false }
    help: |
      The `symfony.lock` file is managed by Symfony Flex and tracks the exact versions of recipes that have been applied to your project, ensuring reproducibility.
      https://symfony.com/doc/current/setup/symfony_flex.html#symfony-lock

  -
    question: >
      Which Symfony component is designed to extract various kinds of information about class properties, such as their types, descriptions, and accessors?
    answers:
      - { value: 'PropertyInfo', correct: true }
      - { value: 'PropertyAccess', correct: false }
      - { value: 'Serializer', correct: false }
      - { value: 'Reflection', correct: false }
    help: |
      The PropertyInfo component provides an API to extract metadata about class properties, including their types, descriptions, and whether they are readable or writable.
      https://symfony.com/doc/current/components/property_info.html

  -
    question: >
      Which Symfony bridge is used to integrate the Monolog logging library?
    answers:
      - { value: 'MonologBridge', correct: true }
      - { value: 'LoggingBridge', correct: false }
      - { value: 'LoggerBridge', correct: false }
      - { value: 'PsrLogBridge', correct: false }
    help: |
      The `symfony/monolog-bridge` package provides the integration between the Monolog logging library and the Symfony framework.
      https://symfony.com/doc/current/logging.html

  -
    question: >
      What is the recommended PHP namespace structure for application-specific classes (e.g., controllers, services) in a Symfony Flex project?
    answers:
      - { value: '`App\\`', correct: true }
      - { value: '`MyProject\\`', correct: false }
      - { value: '`Symfony\\App\\`', correct: false }
      - { value: '`Bundle\\`', correct: false }
    help: |
      Symfony Flex encourages the use of the `App\\` namespace for all application-specific code within the `src/` directory.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#code-organization

  -
    question: >
      In the Symfony request-response lifecycle, what is the role of the `Response` object?
    answers:
      - { value: 'It encapsulates the HTTP response that will be sent back to the client, including headers and content.', correct: true }
      - { value: 'It contains all the parameters from the incoming HTTP request.', correct: false }
      - { value: 'It is responsible for routing the request to the correct controller.', correct: false }
      - { value: 'It manages the application''s session data.', correct: false }
    help: |
      The `Response` object, part of the HttpFoundation component, represents the HTTP response that the application will send back to the client.
      https://symfony.com/doc/current/components/http_foundation.html#response

  -
    question: >
      How does Symfony typically handle displaying custom error pages (e.g., 404 Not Found, 500 Internal Server Error) in a production environment?
    answers:
      - { value: 'By rendering specific Twig templates (e.g., `error.html.twig`, `exception.html.twig`) based on the HTTP status code.', correct: true }
      - { value: 'By redirecting to an external error handling service.', correct: false }
      - { value: 'By displaying raw PHP error messages.', correct: false }
      - { value: 'By terminating the application without any output.', correct: false }
    help: |
      Symfony allows you to customize error pages by creating specific Twig templates that are rendered when an exception occurs, providing a user-friendly experience in production.
      https://symfony.com/doc/current/controller/error_pages.html

  -
    question: >
      When registering event listeners or subscribers in Symfony, what property can be used to influence the order in which they are called for a specific event?
    answers:
      - { value: '`priority`', correct: true }
      - { value: '`order`', correct: false }
      - { value: '`weight`', correct: false }
      - { value: '`sequence`', correct: false }
    help: |
      The `priority` option (an integer, higher means earlier execution) can be used when registering event listeners or in the `getSubscribedEvents()` method of an event subscriber to control their execution order.
      https://symfony.com/doc/current/event_dispatcher.html#event-priority

  -
    question: >
      What is the recommended best practice for managing sensitive configuration data (e.g., database credentials, API keys) in a Symfony application?
    answers:
      - { value: 'Store them as environment variables, typically loaded from the `.env` file.', correct: true }
      - { value: 'Hardcode them directly in `config/services.yaml`.', correct: false }
      - { value: 'Commit them to version control in plain text.', correct: false }
      - { value: 'Store them in a publicly accessible JSON file.', correct: false }
    help: |
      Sensitive data should be stored outside of version control, preferably as environment variables, and loaded into the application via the `.env` file or server configuration.
      https://symfony.com/doc/current/configuration.html#environment-variables

  -
    question: >
      Which PHP Standard Recommendation (PSR) does Symfony's HTTP Client component primarily implement for sending requests?
    answers:
      - { value: 'PSR-18 (HTTP Client)', correct: true }
      - { value: 'PSR-7 (HTTP Message)', correct: false }
      - { value: 'PSR-17 (HTTP Factories)', correct: false }
      - { value: 'PSR-3 (Logger)', correct: false }
    help: |
      The Symfony HTTP Client component adheres to PSR-18, which defines a common interface for HTTP clients.
      https://symfony.com/doc/current/components/http_client.html#psr-compliance

  -
    question: >
      What is the purpose of the `#[AsCommand]` attribute in a Symfony console command class?
    answers:
      - { value: 'To define the command''s name and description, enabling autoconfiguration.', correct: true }
      - { value: 'To mark the command as a service for dependency injection.', correct: false }
      - { value: 'To automatically execute the command on a schedule.', correct: false }
      - { value: 'To specify the required arguments and options for the command.', correct: false }
    help: |
      The `#[AsCommand]` attribute (introduced in Symfony 6.2) allows you to configure console commands directly in their class, including their name and description, leveraging autoconfiguration.
      https://symfony.com/doc/current/console.html#configuring-the-command

  -
    question: >
      Which of the following is a core principle behind Symfony's component-based architecture?
    answers:
      - { value: 'Modularity and reusability, allowing components to be used independently.', correct: true }
      - { value: 'Tight coupling between all parts of the framework for maximum performance.', correct: false }
      - { value: 'Reliance on global variables for configuration and state management.', correct: false }
      - { value: 'Strict adherence to a single, monolithic application structure.', correct: false }
    help: |
      Symfony's components are designed to be modular and reusable, promoting a decoupled architecture where parts can be used independently or together.
      https://symfony.com/components

  -
    question: >
      What is the main advantage of using Symfony Flex for managing project dependencies?
    answers:
      - { value: 'It automates the configuration of packages, reducing manual setup and potential errors.', correct: true }
      - { value: 'It replaces Composer as the primary dependency manager.', correct: false }
      - { value: 'It allows installing packages from private repositories without authentication.', correct: false }
      - { value: 'It provides a graphical interface for managing Composer packages.', correct: false }
    help: |
      Symfony Flex streamlines dependency management by providing recipes that automatically configure packages, saving developers time and ensuring consistent setups.
      https://symfony.com/doc/current/setup/symfony_flex.html

  -
    question: >
      In Symfony's request-response flow, what is the purpose of the `Request` object?
    answers:
      - { value: 'It encapsulates all information from the incoming HTTP request, such as headers, query parameters, and body content.', correct: true }
      - { value: 'It is used to send data back to the client as an HTTP response.', correct: false }
      - { value: 'It defines the application''s routing rules.', correct: false }
      - { value: 'It manages user authentication and authorization.', correct: false }
    help: |
      The `Request` object, part of the HttpFoundation component, is a powerful object-oriented representation of the incoming HTTP request.
      https://symfony.com/doc/current/components/http_foundation.html#request

  -
    question: >
      What is the primary role of the `var/` directory in a Symfony application?
    answers:
      - { value: 'To store generated cache files, logs, and other temporary data that are not part of the version control.', correct: true }
      - { value: 'To store all application source code.', correct: false }
      - { value: 'To store public assets like CSS, JavaScript, and images.', correct: false }
      - { value: 'To store configuration files.', correct: false }
    help: |
      The `var/` directory contains volatile data such as cache, logs, and sessions, which are typically generated at runtime and should not be committed to version control.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#code-organization

  -
    question: >
      Which of the following is a key benefit of using the Event Dispatcher component in Symfony?
    answers:
      - { value: 'It promotes decoupling between different parts of the application, allowing them to communicate without direct dependencies.', correct: true }
      - { value: 'It provides a built-in mechanism for database transaction management.', correct: false }
      - { value: 'It automatically generates API documentation for your application.', correct: false }
      - { value: 'It handles all routing and URL generation.', correct: false }
    help: |
      The Event Dispatcher component enables a publish-subscribe pattern, which helps decouple components by allowing them to react to events without knowing about each other.
      https://symfony.com/doc/current/components/event_dispatcher.html

  -
    question: >
      What is the purpose of the `config/` directory in a Symfony Flex project?
    answers:
      - { value: 'To store all application configuration files (e.g., `services.yaml`, `routes.yaml`, `packages/`).', correct: true }
      - { value: 'To store application-specific PHP classes.', correct: false }
      - { value: 'To store public assets like images and stylesheets.', correct: false }
      - { value: 'To store temporary cache files.', correct: false }
    help: |
      The `config/` directory is dedicated to all application configuration, including service definitions, routing, and environment-specific settings.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#code-organization

  -
    question: >
      What is the primary function of the `#[AsTwigFilter]` attribute in Symfony?
    answers:
      - { value: 'To register a PHP method as a custom Twig filter, enabling autoconfiguration.', correct: true }
      - { value: 'To define a Twig function that can be called in templates.', correct: false }
      - { value: 'To mark a Twig template for caching.', correct: false }
      - { value: 'To inject services directly into Twig templates.', correct: false }
    help: |
      The `#[AsTwigFilter]` attribute (introduced in Symfony 6.2) allows you to easily register custom Twig filters by annotating the PHP method that implements the filter logic.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#_snippet_6

  -
    question: >
      Which of the following describes Symfony's approach to backward compatibility when introducing new features?
    answers:
      - { value: 'New features are typically added in a backward-compatible way, often through new methods or optional arguments, with deprecations for old ways.', correct: true }
      - { value: 'New features always break existing code to encourage migration to the latest best practices.', correct: false }
      - { value: 'New features are only introduced in major versions to avoid any compatibility concerns.', correct: false }
      - { value: 'Symfony only adds new features to LTS releases.', correct: false }
    help: |
      Symfony strives to introduce new features in a backward-compatible manner, using deprecations to guide users towards new APIs before removing old ones in major versions.
      https://symfony.com/doc/current/contributing/code/bc.html

  -
    question: >
      What is the recommended approach for defining services in a modern Symfony 7 application?
    answers:
      - { value: 'Using PHP attributes for autowiring and autoconfiguration.', correct: true }
      - { value: 'Manually defining every service in `services.xml`.', correct: false }
      - { value: 'Using global functions to encapsulate business logic.', correct: false }
      - { value: 'Creating static classes with public static methods.', correct: false }
    help: |
      Symfony 7 heavily promotes autowiring and autoconfiguration, primarily through PHP attributes, to simplify service definition and dependency injection.
      https://symfony.com/doc/current/service_container/autowiring.html

  -
    question: >
      Which of the following is a key responsibility of the `HttpKernel` in Symfony?
    answers:
      - { value: 'To manage the entire request-response lifecycle, from receiving a request to sending a response.', correct: true }
      - { value: 'To store application-specific configuration parameters.', correct: false }
      - { value: 'To render HTML templates using Twig.', correct: false }
      - { value: 'To interact with the database using Doctrine ORM.', correct: false }
    help: |
      The `HttpKernel` is the central piece of a Symfony application, orchestrating the entire process of handling an HTTP request and generating an HTTP response.
      https://symfony.com/doc/current/components/http_kernel.html

  -
    question: >
      What is the primary purpose of the `public/` directory in a Symfony application?
    answers:
      - { value: 'To serve as the web root, containing the front controller (`index.php`) and public assets.', correct: true }
      - { value: 'To store private configuration files.', correct: false }
      - { value: 'To store all PHP source code.', correct: false }
      - { value: 'To store generated cache files.', correct: false }
    help: |
      The `public/` directory is the web server's document root, making its contents directly accessible via HTTP. It contains the `index.php` front controller and public assets.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#code-organization

  -
    question: >
      Which PHP Standard Recommendation (PSR) does Symfony's Logger component adhere to for logging messages?
    answers:
      - { value: 'PSR-3 (Logger Interface)', correct: true }
      - { value: 'PSR-7 (HTTP Message)', correct: false }
      - { value: 'PSR-11 (Container)', correct: false }
      - { value: 'PSR-14 (Event Dispatcher)', correct: false }
    help: |
      Symfony's logging system is built on top of PSR-3, which defines a common interface for logging libraries.
      https://symfony.com/doc/current/logging.html#autowiring-logger-channels

  -
    question: >
      When is the `KernelEvents::TERMINATE` event dispatched in the Symfony request lifecycle?
    answers:
      - { value: 'After the response has been sent to the client.', correct: true }
      - { value: 'Before the controller is executed.', correct: false }
      - { value: 'When an exception occurs.', correct: false }
      - { value: 'Before the request is handled.', correct: false }
    help: |
      The `KernelEvents::TERMINATE` event is dispatched after the response has been sent to the client, allowing for post-response tasks like logging or cleanup.
      https://symfony.com/doc/current/reference/events.html#kernel-events

  -
    question: >
      What is the recommended way to define environment-specific configuration in Symfony?
    answers:
      - { value: 'Using `when@env` blocks in configuration files (e.g., `when@prod:` in `services.yaml`).', correct: true }
      - { value: 'Creating separate `config_dev.yaml`, `config_prod.yaml` files.', correct: false }
      - { value: 'Using PHP `if` statements directly in `config/services.php`.', correct: false }
      - { value: 'Defining all configurations in a single file and commenting out environment-specific settings.', correct: false }
    help: |
      Symfony provides the `when@env` syntax in configuration files (YAML, XML, PHP) to apply settings conditionally based on the current application environment.
      https://symfony.com/doc/current/configuration/environments.html

  -
    question: >
      What is the primary purpose of the `PropertyInfo` component's `ConstructorExtractor`?
    answers:
      - { value: 'To extract property information by analyzing constructor arguments.', correct: true }
      - { value: 'To generate constructor methods for entities automatically.', correct: false }
      - { value: 'To validate the types of constructor arguments at runtime.', correct: false }
      - { value: 'To inject services into a class''s constructor.', correct: false }
    help: |
      The `ConstructorExtractor` in the PropertyInfo component is used to derive property information, such as types, directly from the constructor's arguments.
      https://symfony.com/doc/current/components/property_info.html#_snippet_24

  -
    question: >
      Which of the following is a common use case for Symfony's Messenger component?
    answers:
      - { value: 'Asynchronously processing long-running tasks like sending emails or image resizing.', correct: true }
      - { value: 'Building real-time chat applications with WebSockets.', correct: false }
      - { value: 'Managing user authentication and authorization.', correct: false }
      - { value: 'Generating PDF documents from HTML templates.', correct: false }
    help: |
      The Messenger component is designed for sending and receiving messages, typically for asynchronous processing of tasks that don't need an immediate response, improving application responsiveness.
      https://symfony.com/doc/current/components/messenger.html

  -
    question: >
      What is an "Envelope" in the context of the Symfony Messenger component?
    answers:
      - { value: 'A Messenger-specific concept that wraps messages, allowing the addition of useful information through "envelope stamps".', correct: true }
      - { value: 'A container for multiple messages to be processed in a batch.', correct: false }
      - { value: 'The physical file where messages are stored before being processed.', correct: false }
      - { value: 'A unique identifier for a message in the message bus.', correct: false }
    help: |
      The `Envelope` is a core concept in Symfony Messenger, wrapping a message and allowing metadata (stamps) to be attached for use by middleware or transports.
      https://symfony.com/doc/current/components/messenger.html#_snippet_1

  -
    question: >
      What is the role of a "Handler" in the Symfony Messenger component?
    answers:
      - { value: 'Responsible for handling messages using the business logic applicable to the messages.', correct: true }
      - { value: 'Responsible for sending messages to a message broker.', correct: false }
      - { value: 'Responsible for retrieving messages from a message queue.', correct: false }
      - { value: 'Responsible for validating messages before they are dispatched.', correct: false }
    help: |
      Handlers contain the actual business logic that processes a specific type of message. They are invoked by the `HandleMessageMiddleware`.
      https://symfony.com/doc/current/components/messenger.html#_snippet_1

  -
    question: >
      Which of the following best describes the function of "Middleware" in the Symfony Messenger component?
    answers:
      - { value: 'They can access the message and its wrapper (the envelope) while it is dispatched through the bus, handling cross-cutting concerns.', correct: true }
      - { value: 'They are responsible for serializing and deserializing messages for transport.', correct: false }
      - { value: 'They define the routing rules for messages to different handlers.', correct: false }
      - { value: 'They provide a persistent storage mechanism for messages.', correct: false }
    help: |
      Middleware in Messenger allows you to intercept and modify messages and their envelopes during dispatch, enabling cross-cutting concerns like logging, validation, or transactions.
      https://symfony.com/doc/current/components/messenger.html#_snippet_1

  -
    question: >
      What is the purpose of "Envelope Stamps" in Symfony Messenger?
    answers:
      - { value: 'Pieces of information attached to your message, such as serializer context for transport, or any sort of metadata for middleware or transport layers.', correct: true }
      - { value: 'A unique timestamp indicating when the message was created.', correct: false }
      - { value: 'A cryptographic signature to ensure message integrity.', correct: false }
      - { value: 'A mechanism to group related messages together.', correct: false }
    help: |
      Envelope stamps are arbitrary pieces of data that can be attached to a message's envelope, providing additional context or instructions for middleware or transports.
      https://symfony.com/doc/current/components/messenger.html#_snippet_1

  -
    question: >
      What is the primary role of the `PropertyAccessor` component in Symfony?
    answers:
      - { value: 'To read and write values to properties of objects or elements of arrays using a string-based property path.', correct: true }
      - { value: 'To convert PHP objects to JSON or XML format.', correct: false }
      - { value: 'To validate data against a set of rules.', correct: false }
      - { value: 'To generate getter and setter methods for class properties.', correct: false }
    help: |
      The PropertyAccessor component provides a unified way to access properties on objects or elements in arrays, regardless of whether they are public properties, private properties with getters/setters, or array indices.
      https://symfony.com/doc/current/components/property_access.html

  -
    question: >
      Which of the following methods of `PropertyAccessorBuilder` would you use to prevent `NoSuchPropertyException` from being thrown when accessing a non-existent property path?
    answers:
      - { value: '`disableExceptionOnInvalidPropertyPath()`', correct: true }
      - { value: '`ignoreInvalidPropertyPath()`', correct: false }
      - { value: '`allowMissingProperty()`', correct: false }
      - { value: '`suppressErrors()`', correct: false }
    help: |
      The `disableExceptionOnInvalidPropertyPath()` method configures the `PropertyAccessor` to return `null` instead of throwing an exception when a property path does not exist.
      https://symfony.com/doc/current/components/property_access.html#_snippet_10

  -
    question: >
      Which of the following is a valid way to access a nested array element using `PropertyAccessor`?
    answers:
      - { value: '`[0][first_name]`', correct: true }
      - { value: '`0.first_name`', correct: false }
      - { value: '`0->first_name`', correct: false }
      - { value: '`[0].first_name`', correct: false }
    help: |
      `PropertyAccessor` uses bracket notation (`[]`) for array access, and you can chain them for nested arrays.
      https://symfony.com/doc/current/components/property_access.html#_snippet_4

  -
    question: >
      What is the purpose of the `throw_exception_on_invalid_index` option in the `property_accessor` configuration?
    answers:
      - { value: 'When enabled, the `property_accessor` service throws an exception when you try to access an invalid index of an array.', correct: true }
      - { value: 'It prevents the `property_accessor` from throwing any exceptions.', correct: false }
      - { value: 'It enables throwing exceptions only for object properties, not array indices.', correct: false }
      - { value: 'It is deprecated in Symfony 7.', correct: false }
    help: |
      The `throw_exception_on_invalid_index` option controls whether an exception is thrown when attempting to access a non-existent array index using the `PropertyAccessor`. It is `false` by default.
      https://symfony.com/doc/current/reference/configuration/framework.html#_snippet_108

  -
    question: >
      Which of the following is a valid method for extracting property types using the `PropertyInfo` component?
    answers:
      - { value: '`getTypes(string $class, string $property)`', correct: true }
      - { value: '`getPropertyType(string $class, string $property)`', correct: false }
      - { value: '`getType(string $class, string $property)`', correct: false }
      - { value: '`extractTypes(string $class, string $property)`', correct: false }
    help: |
      The `PropertyTypeExtractorInterface` defines the `getTypes()` method for retrieving type information for a specific property.
      https://symfony.com/doc/current/components/property_info.html#_snippet_4

  -
    question: >
      What does the `getBuiltInType()` method of a `Symfony\\Component\\PropertyInfo\\Type` object return?
    answers:
      - { value: 'The built-in PHP data type (e.g., ''string'', ''int'', ''array'', ''object'').', correct: true }
      - { value: 'The fully-qualified class name for object types.', correct: false }
      - { value: 'Whether the property is nullable.', correct: false }
      - { value: 'Whether the property is a collection.', correct: false }
    help: |
      The `getBuiltInType()` method returns one of the predefined PHP data types as a string.
      https://symfony.com/doc/current/components/property_info.html#_snippet_15

  -
    question: >
      In Symfony's configuration component, what is the purpose of `arrayPrototype()` when defining a configuration tree?
    answers:
      - { value: 'To define a configuration node that can have multiple, numerically indexed entries, each conforming to a specified structure.', correct: true }
      - { value: 'To define an array node where keys are explicitly named.', correct: false }
      - { value: 'To define an array node that can only contain scalar values.', correct: false }
      - { value: 'To define an array node that is optional.', correct: false }
    help: |
      `arrayPrototype()` is used to define a list of complex configurations, where each item in the list follows a defined structure, allowing for flexible and repeatable configuration blocks.
      https://symfony.com/doc/current/components/config/definition.html#_snippet_10

  -
    question: >
      What is the purpose of `scalarPrototype()` in Symfony's configuration definition?
    answers:
      - { value: 'To define an array node that can contain multiple scalar values (strings, integers, booleans, etc.).', correct: true }
      - { value: 'To define a single scalar value for a configuration option.', correct: false }
      - { value: 'To define an array node that can contain only objects.', correct: false }
      - { value: 'To define a scalar value that is optional.', correct: false }
    help: |
      `scalarPrototype()` is used to define an array where each element is a simple scalar value, resulting in a numerically indexed array in the final configuration.
      https://symfony.com/doc/current/components/config/definition.html#_snippet_13

  -
    question: >
      Which of the following is a valid way to configure a base path for assets in Symfony's `framework.yaml`?
    answers:
      - { value: '`assets:
          base_path: ''/images''`', correct: true }
      - { value: '`assets_base_path: /images`', correct: false }
      - { value: '`asset_base_url: /images`', correct: false }
      - { value: '`framework:
          asset_path: /images`', correct: false }
    help: |
      The `base_path` option under `framework.assets` allows you to define a base path that will be prepended to all asset URLs generated by the application.
      https://symfony.com/doc/current/reference/configuration/framework.html#_snippet_2

  -
    question: >
      What is the purpose of the `strict_mode` option in Symfony's asset configuration?
    answers:
      - { value: 'When enabled, it asserts that all requested assets are present in the manifest file, helping detect typos or missing assets.', correct: true }
      - { value: 'It forces all assets to be served over HTTPS.', correct: false }
      - { value: 'It disables asset versioning.', correct: false }
      - { value: 'It prevents the use of external asset hosts.', correct: false }
    help: |
      The `strict_mode` option, when enabled, validates that all assets requested via the asset component are actually defined in the manifest file, which is useful for catching errors.
      https://symfony.com/doc/current/reference/configuration/framework.html#_snippet_8

  -
    question: >
      What is the purpose of the `version` option in Symfony's asset configuration?
    answers:
      - { value: 'To globally append a query parameter to all rendered asset paths, effectively busting browser caches.', correct: true }
      - { value: 'To specify the version of the Symfony framework used by the application.', correct: false }
      - { value: 'To define the version of the asset manifest file.', correct: false }
      - { value: 'To enable automatic asset compilation and versioning.', correct: false }
    help: |
      The `version` option adds a query parameter (e.g., `?v=123`) to asset URLs, forcing browsers to re-download them when the version changes, thus bypassing cache.
      https://symfony.com/doc/current/reference/configuration/framework.html#_snippet_9

  -
    question: >
      Which of the following is a valid format string for `version_format` to achieve path-based asset versioning (e.g., `/version-5/images/logo.png`)?
    answers:
      - { value: '`version-%%2$s/%%1$s`', correct: true }
      - { value: '`%%s?version=%%s`', correct: false }
      - { value: '`%%1$s/%%2$s`', correct: false }
      - { value: '`%%s-%%s`', correct: false }
    help: |
      The `version_format` option uses `sprintf` syntax. `%%2$s` refers to the version, and `%%1$s` refers to the original path. Doubling `%%` escapes the percentage sign.
      https://symfony.com/doc/current/reference/configuration/framework.html#_snippet_12

  -
    question: >
      What is the primary purpose of the `#[Autowire]` attribute in Symfony?
    answers:
      - { value: 'To explicitly define how a service dependency should be injected, overriding default autowiring behavior.', correct: true }
      - { value: 'To mark a class as a service that can be autowired.', correct: false }
      - { value: 'To generate a service definition automatically.', correct: false }
      - { value: 'To prevent a service from being autowired.', correct: false }
    help: |
      The `#[Autowire]` attribute provides fine-grained control over dependency injection, allowing you to specify a specific service, parameter, or expression to be injected.
      https://symfony.com/doc/current/service_container/autowiring.html#_autowire

  -
    question: >
      Which of the following is a valid PHP attribute for defining a route in a Symfony controller?
    answers:
      - { value: '`#[Route('/path', name: 'route_name')]`', correct: true }
      - { value: '`@Route("/path", name="route_name")`', correct: false }
      - { value: '`#[Path('/path', name: 'route_name')]`', correct: false }
      - { value: '`@path("/path", name="route_name")`', correct: false }
    help: |
      Since Symfony 6.0, PHP attributes (e.g., `#[Route]`) are the recommended way to define routes directly in controller classes.
      https://symfony.com/doc/current/routing.html#defining-routes-as-attributes

  -
    question: >
      What is the default behavior of Symfony's autowiring for services defined in the `src/` directory?
    answers:
      - { value: 'Classes in `src/` are automatically registered as services and their dependencies are injected based on type-hints.', correct: true }
      - { value: 'Classes in `src/` must be manually defined in `services.yaml` to be used as services.', correct: false }
      - { value: 'Only interfaces in `src/` are autowired by default.', correct: false }
      - { value: 'Autowiring is disabled by default for all services.', correct: false }
    help: |
      By default, Symfony's autowiring automatically registers and injects dependencies for classes located in the `src/` directory, simplifying service configuration.
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring-by-default

  -
    question: >
      Which of the following is a key benefit of using Symfony's Dependency Injection Container?
    answers:
      - { value: 'It manages the instantiation and configuration of services, promoting loose coupling and testability.', correct: true }
      - { value: 'It provides a built-in ORM for database interaction.', correct: false }
      - { value: 'It automatically generates HTML forms from PHP classes.', correct: false }
      - { value: 'It handles all user authentication and authorization logic.', correct: false }
    help: |
      The Dependency Injection Container is central to Symfony's architecture, managing service creation and dependencies, which leads to more modular, testable, and maintainable code.
      https://symfony.com/doc/current/service_container.html

  -
    question: >
      What is the purpose of the `composer.json` file in a Symfony Flex project?
    answers:
      - { value: 'It defines the project''s dependencies, scripts, and other Composer-related configurations.', correct: true }
      - { value: 'It stores the application''s environment variables.', correct: false }
      - { value: 'It contains the application''s routing definitions.', correct: false }
      - { value: 'It stores the compiled service container.', correct: false }
    help: |
      `composer.json` is the standard Composer configuration file, listing all project dependencies and other Composer-related settings, including Symfony Flex recipes.
      https://symfony.com/doc/current/setup/symfony_flex.html#composer-json

  -
    question: >
      What is the primary goal of Symfony's "Backward Compatibility Promise"?
    answers:
      - { value: 'To ensure that upgrading between minor versions of Symfony is as smooth as possible without requiring code changes for public APIs.', correct: true }
      - { value: 'To guarantee that all third-party bundles will always work with the latest Symfony version.', correct: false }
      - { value: 'To prevent any new features from being introduced in minor releases.', correct: false }
      - { value: 'To ensure that Symfony applications can run on any PHP version.', correct: false }
    help: |
      The BCP is a commitment to minimize breaking changes between minor versions, making upgrades easier and more predictable for developers.
      https://symfony.com/doc/current/contributing/code/bc.html

  -
    question: >
      Which of the following is a common practice for organizing code in a Symfony application to promote reusability and maintainability?
    answers:
      - { value: 'Encapsulating business logic in dedicated service classes and injecting them where needed.', correct: true }
      - { value: 'Placing all application logic directly within controller methods.', correct: false }
      - { value: 'Using global functions and variables for shared functionality.', correct: false }
      - { value: 'Creating a single, large class for the entire application.', correct: false }
    help: |
      Symfony encourages separating concerns by placing business logic in services, which are then injected into controllers or other services, promoting modularity and testability.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#code-organization

  -
    question: >
      What is the purpose of the `vendor/` directory in a Symfony project?
    answers:
      - { value: 'To store all third-party libraries and dependencies managed by Composer.', correct: true }
      - { value: 'To store application-specific source code.', correct: false }
      - { value: 'To store public web assets.', correct: false }
      - { value: 'To store configuration files.', correct: false }
    help: |
      The `vendor/` directory is where Composer installs all the project's dependencies, including Symfony components and other third-party libraries.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#code-organization

  -
    question: >
      Which of the following is a characteristic of a "Monolithic" application architecture, which Symfony aims to help developers avoid?
    answers:
      - { value: 'All application components are tightly coupled and deployed as a single, indivisible unit.', correct: true }
      - { value: 'The application is composed of small, independent services that communicate via APIs.', correct: false }
      - { value: 'Components can be developed and deployed independently.', correct: false }
      - { value: 'The application is highly scalable horizontally.', correct: false }
    help: |
      Symfony's component-based and decoupled architecture aims to move away from monolithic designs towards more modular and maintainable applications.
      https://symfony.com/doc/current/introduction/from_flat_php_to_symfony.html

  -
    question: >
      What is the main benefit of using environment variables (e.g., `APP_ENV`, `DATABASE_URL`) in Symfony for configuration?
    answers:
      - { value: 'They allow configuration to be easily changed between different deployment environments without modifying code.', correct: true }
      - { value: 'They provide a faster way to load configuration than YAML files.', correct: false }
      - { value: 'They are automatically encrypted for security.', correct: false }
      - { value: 'They are only used in the development environment.', correct: false }
    help: |
      Environment variables provide a flexible way to manage configuration that varies across environments (development, production, testing) without hardcoding values in the application's codebase.
      https://symfony.com/doc/current/configuration.html#environment-variables

  -
    question: >
      Which of the following is an example of a "Bridge" in Symfony?
    answers:
      - { value: '`MonologBridge` (integrating Monolog with Symfony)', correct: true }
      - { value: '`HttpKernel` (core component for request handling)', correct: false }
      - { value: '`Routing` (component for URL matching)', correct: false }
      - { value: '`FrameworkBundle` (the main Symfony bundle)', correct: false }
    help: |
      Bridges are specific packages that integrate third-party libraries, like Monolog, with the Symfony framework.
      https://symfony.com/doc/current/components/index.html#bridges

  -
    question: >
      What is the primary purpose of the `MicroKernelTrait` in a Symfony application?
    answers:
      - { value: 'To simplify the creation of small, self-contained Symfony applications or to manage multiple applications within a single project.', correct: true }
      - { value: 'To enable automatic generation of database migrations.', correct: false }
      - { value: 'To provide a built-in web server for development.', correct: false }
      - { value: 'To integrate with external API gateways.', correct: false }
    help: |
      The `MicroKernelTrait` is designed for building lightweight Symfony applications or for multi-application setups by providing simplified kernel configuration.
      https://symfony.com/doc/current/configuration/micro_kernel_trait.html

  -
    question: >
      What is the recommended approach for defining bundles in a Symfony Flex application?
    answers:
      - { value: 'Registering them in `config/bundles.php`.', correct: true }
      - { value: 'Defining them directly in `composer.json`.', correct: false }
      - { value: 'Using PHP attributes on the bundle class.', correct: false }
      - { value: 'They are automatically discovered by Symfony Flex.', correct: false }
    help: |
      Bundles are registered in the `config/bundles.php` file, which is loaded by the kernel to determine which bundles are active in the application. Symfony Flex often adds entries to this file automatically.
      https://symfony.com/doc/current/bundles.html#registering-bundles

  -
    question: >
      Which of the following describes Symfony's approach to framework interoperability?
    answers:
      - { value: 'It adheres to various PHP Standard Recommendations (PSRs) to ensure compatibility with other PHP libraries and frameworks.', correct: true }
      - { value: 'It provides built-in tools to convert code from other frameworks to Symfony.', correct: false }
      - { value: 'It requires all third-party libraries to be specifically designed for Symfony.', correct: false }
      - { value: 'It only supports its own proprietary standards.', correct: false }
    help: |
      Symfony is a strong proponent of PHP-FIG's PSRs, implementing many of them to ensure its components are interoperable with other PHP projects.
      https://symfony.com/doc/current/components/index.html#psr-compliance

  -
    question: >
      What is the purpose of the `#[AsService]` attribute (or similar autoconfiguration) in Symfony?
    answers:
      - { value: 'To automatically register a class as a service in the dependency injection container without explicit YAML/XML configuration.', correct: true }
      - { value: 'To define a service as public and accessible from the container.', correct: false }
      - { value: 'To mark a service for lazy loading.', correct: false }
      - { value: 'To inject specific parameters into a service.', correct: false }
    help: |
      While `#[AsService]` is not a direct Symfony attribute, the concept of autoconfiguration (often enabled by default for `src/` classes or via specific attributes like `#[AsCommand]`, `#[AsTwigExtension]`) automatically registers classes as services.
      https://symfony.com/doc/current/service_container/autowiring.html#autoconfiguration

  -
    question: >
      Which of the following is a key characteristic of Symfony's approach to code organization?
    answers:
      - { value: 'Separation of concerns, with distinct directories for configuration, source code, public assets, and temporary files.', correct: true }
      - { value: 'Placing all application code in a single `app.php` file.', correct: false }
      - { value: 'Relying heavily on global functions and variables.', correct: false }
      - { value: 'Mixing business logic directly within template files.', correct: false }
    help: |
      Symfony promotes a clear separation of concerns through its standard directory structure, which helps organize code logically and improve maintainability.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#code-organization

  -
    question: >
      What is the primary purpose of the `HttpKernelInterface` in Symfony?
    answers:
      - { value: 'It defines the contract for a kernel that handles a `Request` and returns a `Response`.', correct: true }
      - { value: 'It provides methods for routing incoming requests.', correct: false }
      - { value: 'It defines the structure for HTTP messages.', correct: false }
      - { value: 'It provides an interface for logging messages.', correct: false }
    help: |
      The `HttpKernelInterface` is the fundamental interface for any Symfony application, defining the core contract for processing HTTP requests.
      https://symfony.com/doc/current/components/http_kernel.html

  -
    question: >
      What is the primary benefit of using "invokable controllers" (controllers with an `__invoke()` method) in Symfony?
    answers:
      - { value: 'They allow a controller to be a single class responsible for a single action, promoting the Action-Domain-Responder (ADR) pattern.', correct: true }
      - { value: 'They automatically handle all routing for the application.', correct: false }
      - { value: 'They provide a built-in caching mechanism for controller responses.', correct: false }
      - { value: 'They eliminate the need for dependency injection in controllers.', correct: false }
    help: |
      Invokable controllers are a clean way to represent a single action per controller, aligning well with the ADR pattern and improving code organization.
      https://symfony.com/doc/current/controller/service.html#invokable-controllers

  -
    question: >
      Which of the following is a key principle of Symfony's "Backward Compatibility Promise" (BCP)?
    answers:
      - { value: 'Public APIs should not change in minor or patch releases.', correct: true }
      - { value: 'All internal code is guaranteed to remain unchanged across all versions.', correct: false }
      - { value: 'Deprecations are immediately removed in the next minor release.', correct: false }
      - { value: 'New features are only introduced in major releases.', correct: false }
    help: |
      The BCP focuses on maintaining stability for public APIs across minor and patch releases, allowing developers to upgrade confidently.
      https://symfony.com/doc/current/contributing/code/bc.html

  -
    question: >
      What is the purpose of the `APP_SECRET` environment variable in a Symfony application?
    answers:
      - { value: 'It is a unique secret key used for various security-related tasks, such as signing cookies and CSRF tokens.', correct: true }
      - { value: 'It defines the database password for the application.', correct: false }
      - { value: 'It specifies the encryption key for sensitive data storage.', correct: false }
      - { value: 'It is used to generate unique session IDs.', correct: false }
    help: |
      The `APP_SECRET` is a crucial security parameter used by Symfony for tasks like session management, CSRF protection, and signing. It should be unique for each application and kept secret.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#_snippet_10

  -
    question: >
      Which of the following is a key aspect of Symfony's approach to "Release Management"?
    answers:
      - { value: 'A predictable release schedule with clear distinctions between major, minor, and LTS versions.', correct: true }
      - { value: 'Releasing new versions only when a critical security vulnerability is found.', correct: false }
      - { value: 'A continuous delivery model where new features are deployed daily.', correct: false }
      - { value: 'Relying solely on community contributions for new releases.', correct: false }
    help: |
      Symfony's release management is characterized by a well-defined and predictable schedule, making it easier for developers to plan upgrades and long-term support.
      https://symfony.com/releases

  -
    question: >
      What is the primary role of the `EventDispatcher` component in Symfony?
    answers:
      - { value: 'To allow different parts of the application to communicate with each other in a decoupled way by dispatching and listening to events.', correct: true }
      - { value: 'To manage the application''s routing configuration.', correct: false }
      - { value: 'To handle all database interactions.', correct: false }
      - { value: 'To render HTML templates.', correct: false }
    help: |
      The EventDispatcher component implements the Mediator design pattern, enabling a publish-subscribe communication model that promotes loose coupling.
      https://symfony.com/doc/current/components/event_dispatcher.html

  -
    question: >
      Which of the following is a common naming convention for services in Symfony when autowiring is enabled?
    answers:
      - { value: 'The fully qualified class name (FQCN) of the service.', correct: true }
      - { value: 'A short, descriptive string in snake_case.', correct: false }
      - { value: 'A numeric ID.', correct: false }
      - { value: 'The file name of the service class.', correct: false }
    help: |
      With autowiring enabled, Symfony automatically uses the FQCN of a class as its service ID, simplifying service configuration.
      https://symfony.com/doc/current/service_container/autowiring.html

  -
    question: >
      What is the purpose of the `#[AsEventListener]` attribute in Symfony?
    answers:
      - { value: 'To register a PHP method as an event listener for a specific event, enabling autoconfiguration.', correct: true }
      - { value: 'To define a new event that can be dispatched.', correct: false }
      - { value: 'To mark a class as an event subscriber.', correct: false }
      - { value: 'To inject the Event Dispatcher service.', correct: false }
    help: |
      The `#[AsEventListener]` attribute (introduced in Symfony 6.2) allows you to configure event listeners directly in their class, specifying the event they listen to and their priority.
      https://symfony.com/doc/current/event_dispatcher.html#registering-event-listeners

  -
    question: >
      Which of the following describes the typical structure for a multi-application Symfony project using multiple kernels?
    answers:
      - { value: 'A shared `config/` directory and separate `apps/` directories, each containing its own `config/` and `src/` for distinct applications.', correct: true }
      - { value: 'Each application is a completely separate Symfony project in its own repository.', correct: false }
      - { value: 'All applications share a single `src/` directory but have separate `public/` directories.', correct: false }
      - { value: 'Applications are defined as separate bundles within a single kernel.', correct: false }
    help: |
      Symfony supports multi-application setups where distinct applications can share common resources while maintaining their own configurations and codebases, often using the `MicroKernelTrait`.
      https://symfony.com/doc/current/configuration/multiple_kernels.html#_snippet_14

  -
    question: >
      What is the primary role of the `ContainerConfigurator` object when configuring services in PHP files (e.g., `services.php`)?
    answers:
      - { value: 'It provides a fluent API for defining and configuring services, parameters, and imports.', correct: true }
      - { value: 'It is used to compile the service container.', correct: false }
      - { value: 'It acts as a service locator for retrieving services.', correct: false }
      - { value: 'It defines the application''s routing.', correct: false }
    help: |
      The `ContainerConfigurator` is the main object used in PHP-based service configuration to define services, import other configuration files, and set parameters.
      https://symfony.com/doc/current/service_container/configuration.html#php-configuration

  -
    question: >
      What is the purpose of the `ReflectionExtractor` within the Symfony PropertyInfo component?
    answers:
      - { value: 'To extract property information (like types, readability, writability) using PHP''s Reflection API.', correct: true }
      - { value: 'To generate PHP reflection classes automatically.', correct: false }
      - { value: 'To analyze PHP code for syntax errors.', correct: false }
      - { value: 'To provide a mechanism for dynamic method calls.', correct: false }
    help: |
      The `ReflectionExtractor` leverages PHP's built-in Reflection API to gather information about class properties and methods.
      https://symfony.com/doc/current/components/property_info.html#_snippet_17

  -
    question: >
      Which of the following is a valid method for extracting a short description of a property using the `PropertyInfo` component?
    answers:
      - { value: '`getShortDescription(string $class, string $property)`', correct: true }
      - { value: '`getDescription(string $class, string $property)`', correct: false }
      - { value: '`getSummary(string $class, string $property)`', correct: false }
      - { value: '`getDocComment(string $class, string $property)`', correct: false }
    help: |
      The `PropertyDescriptionExtractorInterface` defines the `getShortDescription()` method for retrieving a brief description of a property.
      https://symfony.com/doc/current/components/property_info.html#_snippet_4

  -
    question: >
      What is the purpose of the `PhpDocExtractor` within the Symfony PropertyInfo component?
    answers:
      - { value: 'To extract property information (like types and descriptions) by parsing PHPDoc annotations.', correct: true }
      - { value: 'To generate PHPDoc blocks for classes and methods.', correct: false }
      - { value: 'To validate the correctness of PHPDoc annotations.', correct: false }
      - { value: 'To convert PHPDoc to HTML documentation.', correct: false }
    help: |
      The `PhpDocExtractor` analyzes PHPDoc comments to extract property types and descriptions, relying on the `phpdocumentor/reflection-docblock` library.
      https://symfony.com/doc/current/components/property_info.html#_snippet_19

  -
    question: >
      What is the purpose of the `PhpStanExtractor` within the Symfony PropertyInfo component?
    answers:
      - { value: 'To extract advanced property information (like types and descriptions) by leveraging PHPStan''s parser for static analysis.', correct: true }
      - { value: 'To integrate PHPStan into the Symfony build process.', correct: false }
      - { value: 'To provide a command-line interface for PHPStan.', correct: false }
      - { value: 'To generate PHPStan configuration files.', correct: false }
    help: |
      The `PhpStanExtractor` uses PHPStan's capabilities to provide more accurate and detailed property information, especially for complex types.
      https://symfony.com/doc/current/components/property_info.html#_snippet_20

  -
    question: >
      Which of the following is a valid way to enable the `ConstructorExtractor` for the `property_info` service in Symfony 7.3+?
    answers:
      - { value: 'Set `property_info.with_constructor_extractor: true` in your framework configuration.', correct: true }
      - { value: 'Add `#[AsConstructorExtractor]` attribute to your service classes.', correct: false }
      - { value: 'Manually register `ConstructorExtractor` in `services.yaml`.', correct: false }
      - { value: 'It is enabled by default in Symfony 7.3+.', correct: false }
    help: |
      The `property_info.with_constructor_extractor` option, introduced in Symfony 7.3, allows you to enable the `ConstructorExtractor` for property information extraction.
      https://symfony.com/doc/current/reference/configuration/framework.html#_snippet_111

  -
    question: >
      What is the significance of the `registerBundles()` method in a Symfony Kernel (especially when using `MicroKernelTrait`)?
    answers:
      - { value: 'It defines the list of bundles that should be loaded and activated for the application.', correct: true }
      - { value: 'It registers new services with the dependency injection container.', correct: false }
      - { value: 'It configures the application''s routing.', correct: false }
      - { value: 'It registers event listeners for the kernel.', correct: false }
    help: |
      The `registerBundles()` method is where you explicitly list all the bundles that your Symfony application will use, allowing the kernel to load and configure them.
      https://symfony.com/doc/current/configuration/micro_kernel_trait.html#_snippet_5

  -
    question: >
      When using Symfony's autowiring, how does it handle union types (e.g., `NormalizerInterface|DenormalizerInterface`) in constructor arguments?
    answers:
      - { value: 'It attempts to autowire a service that matches any of the types in the union.', correct: true }
      - { value: 'It throws an error, as union types are not supported for autowiring.', correct: false }
      - { value: 'It only autowires the first type in the union.', correct: false }
      - { value: 'It requires explicit configuration for each type in the union.', correct: false }
    help: |
      Symfony's autowiring is smart enough to handle union and intersection types, attempting to find a service that satisfies the type hint.
      https://symfony.com/doc/current/service_container/autowiring.html#_snippet_10

  -
    question: >
      Which of the following is a characteristic of Symfony's approach to "Deprecations"?
    answers:
      - { value: 'They provide a grace period for developers to update their code before a feature is removed in a future major version.', correct: true }
      - { value: 'They are only announced in blog posts, not in the code itself.', correct: false }
      - { value: 'Deprecated features are immediately removed without warning.', correct: false }
      - { value: 'They only apply to internal Symfony code, not public APIs.', correct: false }
    help: |
      Deprecations are a key part of Symfony's backward compatibility strategy, giving developers time to adapt their code before breaking changes are introduced.
      https://symfony.com/doc/current/contributing/code/bc.html#deprecations

  -
    question: >
      What is the purpose of the `#[AsController]` attribute in Symfony?
    answers:
      - { value: 'It is not a standard Symfony attribute; controllers are typically discovered by routing or autoconfiguration.', correct: true }
      - { value: 'To explicitly mark a class as a controller for routing purposes.', correct: false }
      - { value: 'To enable autowiring for controller arguments.', correct: false }
      - { value: 'To define the base path for all routes in the controller.', correct: false }
    help: |
      Symfony controllers are typically discovered through routing definitions (e.g., `#[Route]` attributes) or by being defined as services and then referenced. There isn't a dedicated `#[AsController]` attribute.
      https://symfony.com/doc/current/controller.html

  -
    question: >
      What is the primary role of the `Routing` component in Symfony?
    answers:
      - { value: 'To match incoming HTTP requests to the correct controller and action based on defined patterns.', correct: true }
      - { value: 'To generate URLs for named routes.', correct: false }
      - { value: 'To manage the application''s database connections.', correct: false }
      - { value: 'To handle user authentication and authorization.', correct: false }
    help: |
      The Routing component is responsible for mapping incoming URLs to specific controller actions and generating URLs from route names.
      https://symfony.com/doc/current/components/routing.html

  -
    question: >
      Which of the following is a best practice for organizing configuration files in a Symfony application?
    answers:
      - { value: 'Using separate files for different concerns (e.g., `services.yaml`, `routes.yaml`, `framework.yaml`) and environment-specific overrides.', correct: true }
      - { value: 'Placing all configuration in a single, large `config.yaml` file.', correct: false }
      - { value: 'Hardcoding configuration values directly in PHP code.', correct: false }
      - { value: 'Storing configuration in a database table.', correct: false }
    help: |
      Symfony encourages organizing configuration into logical files and using environment-specific overrides to keep the configuration manageable and clear.
      https://symfony.com/doc/current/configuration.html

  -
    question: >
      What is the purpose of the `Psr\\Log\\LoggerInterface` in Symfony?
    answers:
      - { value: 'It provides a standard interface for logging messages, allowing interchangeable logging libraries.', correct: true }
      - { value: 'It is a concrete implementation of a logger service.', correct: false }
      - { value: 'It defines how log files should be stored on the file system.', correct: false }
      - { value: 'It is used for debugging purposes only in the development environment.', correct: false }
    help: |
      `Psr\\Log\\LoggerInterface` is a PSR-3 interface that defines common methods for logging, ensuring interoperability between different logging implementations like Monolog.
      https://symfony.com/doc/current/logging.html#autowiring-logger-channels

  -
    question: >
      What is the primary benefit of Symfony's adherence to PHP Standard Recommendations (PSRs)?
    answers:
      - { value: 'It promotes interoperability and reusability of Symfony components with other PHP libraries and frameworks.', correct: true }
      - { value: 'It guarantees faster execution of Symfony applications.', correct: false }
      - { value: 'It eliminates the need for Composer in Symfony projects.', correct: false }
      - { value: 'It provides a built-in ORM for database interactions.', correct: false }
    help: |
      Adhering to PSRs makes Symfony components more generic and usable outside the full framework, fostering a healthier PHP ecosystem.
      https://symfony.com/doc/current/components/index.html#psr-compliance

  -
    question: >
      Which of the following is a key aspect of Symfony's "Framework Overloading" capabilities?
    answers:
      - { value: 'The ability to override or extend core services, templates, and configurations provided by Symfony or its bundles.', correct: true }
      - { value: 'The ability to run multiple Symfony applications on the same server instance.', correct: false }
      - { value: 'The process of upgrading Symfony to a newer version.', correct: false }
      - { value: 'The automatic detection and loading of third-party libraries.', correct: false }
    help: |
      Framework overloading refers to Symfony's powerful mechanisms for customizing or replacing parts of the framework or bundles without modifying their original source code.
      https://symfony.com/doc/current/bundles/override.html

  -
    question: >
      What is the purpose of the `MicroKernelTrait`'s `getCacheDir()` method in a multi-application setup?
    answers:
      - { value: 'To define a unique cache directory for each application, preventing cache conflicts.', correct: true }
      - { value: 'To clear the application''s cache automatically on every request.', correct: false }
      - { value: 'To specify the maximum size of the cache directory.', correct: false }
      - { value: 'To disable caching for the application.', correct: false }
    help: |
      In multi-application setups, overriding `getCacheDir()` and `getLogDir()` in the kernel allows you to isolate cache and log files for each application.
      https://symfony.com/doc/current/configuration/multiple_kernels.html#_snippet_3

  -
    question: >
      Which of the following is a common naming convention for configuration files in Symfony?
    answers:
      - { value: 'Using YAML, XML, or PHP files with descriptive names (e.g., `services.yaml`, `routes.xml`).', correct: true }
      - { value: 'Using `.ini` files for all configurations.', correct: false }
      - { value: 'Storing all configuration in a single `.env` file.', correct: false }
      - { value: 'Using JSON files exclusively for configuration.', correct: false }
    help: |
      Symfony supports YAML, XML, and PHP for configuration, and it's best practice to organize them logically by concern and environment.
      https://symfony.com/doc/current/configuration.html

  -
    question: >
      What is the primary purpose of the `Response` object in Symfony's request-response cycle?
    answers:
      - { value: 'To encapsulate the HTTP response data (headers, content, status code) that will be sent back to the client.', correct: true }
      - { value: 'To process the incoming HTTP request data.', correct: false }
      - { value: 'To handle database queries and updates.', correct: false }
      - { value: 'To manage user sessions and authentication.', correct: false }
    help: |
      The `Response` object is the final output of the Symfony application's request handling, containing all the information needed to form the HTTP response.
      https://symfony.com/doc/current/components/http_foundation.html#response

  -
    question: >
      Which of the following is a key characteristic of Symfony's approach to "Code Organization"?
    answers:
      - { value: 'A clear separation of concerns, with dedicated directories for different types of code and resources.', correct: true }
      - { value: 'A single file containing all application logic for simplicity.', correct: false }
      - { value: 'Reliance on global variables for data sharing between components.', correct: false }
      - { value: 'Mixing HTML, CSS, and JavaScript directly within PHP files.', correct: false }
    help: |
      Symfony's directory structure and best practices promote a highly organized codebase, making it easier to navigate, maintain, and scale.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#code-organization

  -
    question: >
      What is the purpose of the `#[AsEventListener]` attribute in Symfony?
    answers:
      - { value: 'To register a PHP method as an event listener for a specific event, enabling autoconfiguration.', correct: true }
      - { value: 'To define a new event that can be dispatched.', correct: false }
      - { value: 'To mark a class as an event subscriber.', correct: false }
      - { value: 'To inject the Event Dispatcher service.', correct: false }
    help: |
      The `#[AsEventListener]` attribute (introduced in Symfony 6.2) allows you to configure event listeners directly in their class, specifying the event they listen to and their priority.
      https://symfony.com/doc/current/event_dispatcher.html#registering-event-listeners

  -
    question: >
      What is the primary purpose of the `Psr\\Log\\LoggerInterface` in Symfony?
    answers:
      - { value: 'It provides a standard interface for logging messages, allowing interchangeable logging libraries.', correct: true }
      - { value: 'It is a concrete implementation of a logger service.', correct: false }
      - { value: 'It defines how log files should be stored on the file system.', correct: false }
      - { value: 'It is used for debugging purposes only in the development environment.', correct: false }
    help: |
      `Psr\\Log\\LoggerInterface` is a PSR-3 interface that defines common methods for logging, ensuring interoperability between different logging implementations like Monolog.
      https://symfony.com/doc/current/logging.html#autowiring-logger-channels

  -
    question: >
      What is the primary benefit of Symfony's adherence to PHP Standard Recommendations (PSRs)?
    answers:
      - { value: 'It promotes interoperability and reusability of Symfony components with other PHP libraries and frameworks.', correct: true }
      - { value: 'It guarantees faster execution of Symfony applications.', correct: false }
      - { value: 'It eliminates the need for Composer in Symfony projects.', correct: false }
      - { value: 'It provides a built-in ORM for database interactions.', correct: false }
    help: |
      Adhering to PSRs makes Symfony components more generic and usable outside the full framework, fostering a healthier PHP ecosystem.
      https://symfony.com/doc/current/components/index.html#psr-compliance

  -
    question: >
      Which of the following describes Symfony's approach to "Framework Overloading" capabilities?
    answers:
      - { value: 'The ability to override or extend core services, templates, and configurations provided by Symfony or its bundles.', correct: true }
      - { value: 'The ability to run multiple Symfony applications on the same server instance.', correct: false }
      - { value: 'The process of upgrading Symfony to a newer version.', correct: false }
      - { value: 'The automatic detection and loading of third-party libraries.', correct: false }
    help: |
      Framework overloading refers to Symfony's powerful mechanisms for customizing or replacing parts of the framework or bundles without modifying their original source code.
      https://symfony.com/doc/current/bundles/override.html

  -
    question: >
      What is the purpose of the `MicroKernelTrait`'s `getCacheDir()` method in a multi-application setup?
    answers:
      - { value: 'To define a unique cache directory for each application, preventing cache conflicts.', correct: true }
      - { value: 'To clear the application''s cache automatically on every request.', correct: false }
      - { value: 'To specify the maximum size of the cache directory.', correct: false }
      - { value: 'To disable caching for the application.', correct: false }
    help: |
      In multi-application setups, overriding `getCacheDir()` and `getLogDir()` in the kernel allows you to isolate cache and log files for each application.
      https://symfony.com/doc/current/configuration/multiple_kernels.html#_snippet_3

  -
    question: >
      Which of the following is a common naming convention for configuration files in Symfony?
    answers:
      - { value: 'Using YAML, XML, or PHP files with descriptive names (e.g., `services.yaml`, `routes.xml`).', correct: true }
      - { value: 'Using `.ini` files for all configurations.', correct: false }
      - { value: 'Storing all configuration in a single `.env` file.', correct: false }
      - { value: 'Using JSON files exclusively for configuration.', correct: false }
    help: |
      Symfony supports YAML, XML, and PHP for configuration, and it's best practice to organize them logically by concern and environment.
      https://symfony.com/doc/current/configuration.html

  -
    question: >
      What is the primary purpose of the `Response` object in Symfony's request-response cycle?
    answers:
      - { value: 'To encapsulate the HTTP response data (headers, content, status code) that will be sent back to the client.', correct: true }
      - { value: 'To process the incoming HTTP request data.', correct: false }
      - { value: 'To handle database queries and updates.', correct: false }
      - { value: 'To manage user sessions and authentication.', correct: false }
    help: |
      The `Response` object is the final output of the Symfony application's request handling, containing all the information needed to form the HTTP response.
      https://symfony.com/doc/current/components/http_foundation.html#response

  -
    question: >
      Which of the following is a key characteristic of Symfony's approach to "Code Organization"?
    answers:
      - { value: 'A clear separation of concerns, with dedicated directories for different types of code and resources.', correct: true }
      - { value: 'A single file containing all application logic for simplicity.', correct: false }
      - { value: 'Relying on global variables for data sharing between components.', correct: false }
      - { value: 'Mixing HTML, CSS, and JavaScript directly within PHP files.', correct: false }
    help: |
      Symfony's directory structure and best practices promote a highly organized codebase, making it easier to navigate, maintain, and scale.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#code-organization

  -
    question: >
      What is the purpose of the `#[AsEventListener]` attribute in Symfony?
    answers:
      - { value: 'To register a PHP method as an event listener for a specific event, enabling autoconfiguration.', correct: true }
      - { value: 'To define a new event that can be dispatched.', correct: false }
      - { value: 'To mark a class as an event subscriber.', correct: false }
      - { value: 'To inject the Event Dispatcher service.', correct: false }
    help: |
      The `#[AsEventListener]` attribute (introduced in Symfony 6.2) allows you to configure event listeners directly in their class, specifying the event they listen to and their priority.
      https://symfony.com/doc/current/event_dispatcher.html#registering-event-listeners

  -
    question: >
      What is the primary purpose of the `Psr\\Log\\LoggerInterface` in Symfony?
    answers:
      - { value: 'It provides a standard interface for logging messages, allowing interchangeable logging libraries.', correct: true }
      - { value: 'It is a concrete implementation of a logger service.', correct: false }
      - { value: 'It defines how log files should be stored on the file system.', correct: false }
      - { value: 'It is used for debugging purposes only in the development environment.', correct: false }
    help: |
      `Psr\\Log\\LoggerInterface` is a PSR-3 interface that defines common methods for logging, ensuring interoperability between different logging implementations like Monolog.
      https://symfony.com/doc/current/logging.html#autowiring-logger-channels

  -
    question: >
      What is the primary benefit of Symfony's adherence to PHP Standard Recommendations (PSRs)?
    answers:
      - { value: 'It promotes interoperability and reusability of Symfony components with other PHP libraries and frameworks.', correct: true }
      - { value: 'It guarantees faster execution of Symfony applications.', correct: false }
      - { value: 'It eliminates the need for Composer in Symfony projects.', correct: false }
      - { value: 'It provides a built-in ORM for database interactions.', correct: false }
    help: |
      Adhering to PSRs makes Symfony components more generic and usable outside the full framework, fostering a healthier PHP ecosystem.
      https://symfony.com/doc/current/components/index.html#psr-compliance

  -
    question: >
      Which of the following describes Symfony's approach to "Framework Overloading" capabilities?
    answers:
      - { value: 'The ability to override or extend core services, templates, and configurations provided by Symfony or its bundles.', correct: true }
      - { value: 'The ability to run multiple Symfony applications on the same server instance.', correct: false }
      - { value: 'The process of upgrading Symfony to a newer version.', correct: false }
      - { value: 'The automatic detection and loading of third-party libraries.', correct: false }
    help: |
      Framework overloading refers to Symfony's powerful mechanisms for customizing or replacing parts of the framework or bundles without modifying their original source code.
      https://symfony.com/doc/current/bundles/override.html

  -
    question: >
      What is the purpose of the `MicroKernelTrait`'s `getCacheDir()` method in a multi-application setup?
    answers:
      - { value: 'To define a unique cache directory for each application, preventing cache conflicts.', correct: true }
      - { value: 'To clear the application''s cache automatically on every request.', correct: false }
      - { value: 'To specify the maximum size of the cache directory.', correct: false }
      - { value: 'To disable caching for the application.', correct: false }
    help: |
      In multi-application setups, overriding `getCacheDir()` and `getLogDir()` in the kernel allows you to isolate cache and log files for each application.
      https://symfony.com/doc/current/configuration/multiple_kernels.html#_snippet_3

  -
    question: >
      Which of the following is a common naming convention for configuration files in Symfony?
    answers:
      - { value: 'Using YAML, XML, or PHP files with descriptive names (e.g., `services.yaml`, `routes.xml`).', correct: true }
      - { value: 'Using `.ini` files for all configurations.', correct: false }
      - { value: 'Storing all configuration in a single `.env` file.', correct: false }
      - { value: 'Using JSON files exclusively for configuration.', correct: false }
    help: |
      Symfony supports YAML, XML, and PHP for configuration, and it's best practice to organize them logically by concern and environment.
      https://symfony.com/doc/current/configuration.html

  -
    question: >
      What is the primary purpose of the `Response` object in Symfony's request-response cycle?
    answers:
      - { value: 'To encapsulate the HTTP response data (headers, content, status code) that will be sent back to the client.', correct: true }
      - { value: 'To process the incoming HTTP request data.', correct: false }
      - { value: 'To handle database queries and updates.', correct: false }
      - { value: 'To manage user sessions and authentication.', correct: false }
    help: |
      The `Response` object is the final output of the Symfony application's request handling, containing all the information needed to form the HTTP response.
      https://symfony.com/doc/current/components/http_foundation.html#response

  -
    question: >
      Which of the following is a key characteristic of Symfony's approach to "Code Organization"?
    answers:
      - { value: 'A clear separation of concerns, with dedicated directories for different types of code and resources.', correct: true }
      - { value: 'A single file containing all application logic for simplicity.', correct: false }
      - { value: 'Relying on global variables for data sharing between components.', correct: false }
      - { value: 'Mixing HTML, CSS, and JavaScript directly within PHP files.', correct: false }
    help: |
      Symfony's directory structure and best practices promote a highly organized codebase, making it easier to navigate, maintain, and scale.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#code-organization

  -
    question: >
      What is the purpose of the `#[AsEventListener]` attribute in Symfony?
    answers:
      - { value: 'To register a PHP method as an event listener for a specific event, enabling autoconfiguration.', correct: true }
      - { value: 'To define a new event that can be dispatched.', correct: false }
      - { value: 'To mark a class as an event subscriber.', correct: false }
      - { value: 'To inject the Event Dispatcher service.', correct: false }
    help: |
      The `#[AsEventListener]` attribute (introduced in Symfony 6.2) allows you to configure event listeners directly in their class, specifying the event they listen to and their priority.
      https://symfony.com/doc/current/event_dispatcher.html#registering-event-listeners

  -
    question: >
      What is the primary purpose of the `Psr\\Log\\LoggerInterface` in Symfony?
    answers:
      - { value: 'It provides a standard interface for logging messages, allowing interchangeable logging libraries.', correct: true }
      - { value: 'It is a concrete implementation of a logger service.', correct: false }
      - { value: 'It defines how log files should be stored on the file system.', correct: false }
      - { value: 'It is used for debugging purposes only in the development environment.', correct: false }
    help: |
      `Psr\\Log\\LoggerInterface` is a PSR-3 interface that defines common methods for logging, ensuring interoperability between different logging implementations like Monolog.
      https://symfony.com/doc/current/logging.html#autowiring-logger-channels

  -
    question: >
      What is the primary benefit of Symfony's adherence to PHP Standard Recommendations (PSRs)?
    answers:
      - { value: 'It promotes interoperability and reusability of Symfony components with other PHP libraries and frameworks.', correct: true }
      - { value: 'It guarantees faster execution of Symfony applications.', correct: false }
      - { value: 'It eliminates the need for Composer in Symfony projects.', correct: false }
      - { value: 'It provides a built-in ORM for database interactions.', correct: false }
    help: |
      Adhering to PSRs makes Symfony components more generic and usable outside the full framework, fostering a healthier PHP ecosystem.
      https://symfony.com/doc/current/components/index.html#psr-compliance

  -
    question: >
      Which of the following describes Symfony's approach to "Framework Overloading" capabilities?
    answers:
      - { value: 'The ability to override or extend core services, templates, and configurations provided by Symfony or its bundles.', correct: true }
      - { value: 'The ability to run multiple Symfony applications on the same server instance.', correct: false }
      - { value: 'The process of upgrading Symfony to a newer version.', correct: false }
      - { value: 'The automatic detection and loading of third-party libraries.', correct: false }
    help: |
      Framework overloading refers to Symfony's powerful mechanisms for customizing or replacing parts of the framework or bundles without modifying their original source code.
      https://symfony.com/doc/current/bundles/override.html

  -
    question: >
      What is the purpose of the `MicroKernelTrait`'s `getCacheDir()` method in a multi-application setup?
    answers:
      - { value: 'To define a unique cache directory for each application, preventing cache conflicts.', correct: true }
      - { value: 'To clear the application''s cache automatically on every request.', correct: false }
      - { value: 'To specify the maximum size of the cache directory.', correct: false }
      - { value: 'To disable caching for the application.', correct: false }
    help: |
      In multi-application setups, overriding `getCacheDir()` and `getLogDir()` in the kernel allows you to isolate cache and log files for each application.
      https://symfony.com/doc/current/configuration/multiple_kernels.html#_snippet_3

  -
    question: >
      Which of the following is a common naming convention for configuration files in Symfony?
    answers:
      - { value: 'Using YAML, XML, or PHP files with descriptive names (e.g., `services.yaml`, `routes.xml`).', correct: true }
      - { value: 'Using `.ini` files for all configurations.', correct: false }
      - { value: 'Storing all configuration in a single `.env` file.', correct: false }
      - { value: 'Using JSON files exclusively for configuration.', correct: false }
    help: |
      Symfony supports YAML, XML, and PHP for configuration, and it's best practice to organize them logically by concern and environment.
      https://symfony.com/doc/current/configuration.html

  -
    question: >
      What is the primary purpose of the `Response` object in Symfony's request-response cycle?
    answers:
      - { value: 'To encapsulate the HTTP response data (headers, content, status code) that will be sent back to the client.', correct: true }
      - { value: 'To process the incoming HTTP request data.', correct: false }
      - { value: 'To handle database queries and updates.', correct: false }
      - { value: 'To manage user sessions and authentication.', correct: false }
    help: |
      The `Response` object is the final output of the Symfony application's request handling, containing all the information needed to form the HTTP response.
      https://symfony.com/doc/current/components/http_foundation.html#response

  -
    question: >
      Which of the following is a key characteristic of Symfony's approach to "Code Organization"?
    answers:
      - { value: 'A clear separation of concerns, with dedicated directories for different types of code and resources.', correct: true }
      - { value: 'A single file containing all application logic for simplicity.', correct: false }
      - { value: 'Relying on global variables for data sharing between components.', correct: false }
      - { value: 'Mixing HTML, CSS, and JavaScript directly within PHP files.', correct: false }
    help: |
      Symfony's directory structure and best practices promote a highly organized codebase, making it easier to navigate, maintain, and scale.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#code-organization

  -
    question: >
      What is the purpose of the `#[AsEventListener]` attribute in Symfony?
    answers:
      - { value: 'To register a PHP method as an event listener for a specific event, enabling autoconfiguration.', correct: true }
      - { value: 'To define a new event that can be dispatched.', correct: false }
      - { value: 'To mark a class as an event subscriber.', correct: false }
      - { value: 'To inject the Event Dispatcher service.', correct: false }
    help: |
      The `#[AsEventListener]` attribute (introduced in Symfony 6.2) allows you to configure event listeners directly in their class, specifying the event they listen to and their priority.
      https://symfony.com/doc/current/event_dispatcher.html#registering-event-listeners

  -
    question: >
      What is the primary purpose of the `Psr\\Log\\LoggerInterface` in Symfony?
    answers:
      - { value: 'It provides a standard interface for logging messages, allowing interchangeable logging libraries.', correct: true }
      - { value: 'It is a concrete implementation of a logger service.', correct: false }
      - { value: 'It defines how log files should be stored on the file system.', correct: false }
      - { value: 'It is used for debugging purposes only in the development environment.', correct: false }
    help: |
      `Psr\\Log\\LoggerInterface` is a PSR-3 interface that defines common methods for logging, ensuring interoperability between different logging implementations like Monolog.
      https://symfony.com/doc/current/logging.html#autowiring-logger-channels

  -
    question: >
      What is the primary benefit of Symfony's adherence to PHP Standard Recommendations (PSRs)?
    answers:
      - { value: 'It promotes interoperability and reusability of Symfony components with other PHP libraries and frameworks.', correct: true }
      - { value: 'It guarantees faster execution of Symfony applications.', correct: false }
      - { value: 'It eliminates the need for Composer in Symfony projects.', correct: false }
      - { value: 'It provides a built-in ORM for database interactions.', correct: false }
    help: |
      Adhering to PSRs makes Symfony components more generic and usable outside the full framework, fostering a healthier PHP ecosystem.
      https://symfony.com/doc/current/components/index.html#psr-compliance

  -
    question: >
      Which of the following describes Symfony's approach to "Framework Overloading" capabilities?
    answers:
      - { value: 'The ability to override or extend core services, templates, and configurations provided by Symfony or its bundles.', correct: true }
      - { value: 'The ability to run multiple Symfony applications on the same server instance.', correct: false }
      - { value: 'The process of upgrading Symfony to a newer version.', correct: false }
      - { value: 'The automatic detection and loading of third-party libraries.', correct: false }
    help: |
      Framework overloading refers to Symfony's powerful mechanisms for customizing or replacing parts of the framework or bundles without modifying their original source code.
      https://symfony.com/doc/current/bundles/override.html

  -
    question: >
      What is the purpose of the `MicroKernelTrait`'s `getCacheDir()` method in a multi-application setup?
    answers:
      - { value: 'To define a unique cache directory for each application, preventing cache conflicts.', correct: true }
      - { value: 'To clear the application''s cache automatically on every request.', correct: false }
      - { value: 'To specify the maximum size of the cache directory.', correct: false }
      - { value: 'To disable caching for the application.', correct: false }
    help: |
      In multi-application setups, overriding `getCacheDir()` and `getLogDir()` in the kernel allows you to isolate cache and log files for each application.
      https://symfony.com/doc/current/configuration/multiple_kernels.html#_snippet_3

  -
    question: >
      Which of the following is a common naming convention for configuration files in Symfony?
    answers:
      - { value: 'Using YAML, XML, or PHP files with descriptive names (e.g., `services.yaml`, `routes.xml`).', correct: true }
      - { value: 'Using `.ini` files for all configurations.', correct: false }
      - { value: 'Storing all configuration in a single `.env` file.', correct: false }
      - { value: 'Using JSON files exclusively for configuration.', correct: false }
    help: |
      Symfony supports YAML, XML, and PHP for configuration, and it's best practice to organize them logically by concern and environment.
      https://symfony.com/doc/current/configuration.html

  -
    question: >
      What is the primary purpose of the `Response` object in Symfony's request-response cycle?
    answers:
      - { value: 'To encapsulate the HTTP response data (headers, content, status code) that will be sent back to the client.', correct: true }
      - { value: 'To process the incoming HTTP request data.', correct: false }
      - { value: 'To handle database queries and updates.', correct: false }
      - { value: 'To manage user sessions and authentication.', correct: false }
    help: |
      The `Response` object is the final output of the Symfony application's request handling, containing all the information needed to form the HTTP response.
      https://symfony.com/doc/current/components/http_foundation.html#response

  -
    question: >
      Which of the following is a key characteristic of Symfony's approach to "Code Organization"?
    answers:
      - { value: 'A clear separation of concerns, with dedicated directories for different types of code and resources.', correct: true }
      - { value: 'A single file containing all application logic for simplicity.', correct: false }
      - { value: 'Relying on global variables for data sharing between components.', correct: false }
      - { value: 'Mixing HTML, CSS, and JavaScript directly within PHP files.', correct: false }
    help: |
      Symfony's directory structure and best practices promote a highly organized codebase, making it easier to navigate, maintain, and scale.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#code-organization

  -
    question: >
      What is the purpose of the `#[AsEventListener]` attribute in Symfony?
    answers:
      - { value: 'To register a PHP method as an event listener for a specific event, enabling autoconfiguration.', correct: true }
      - { value: 'To define a new event that can be dispatched.', correct: false }
      - { value: 'To mark a class as an event subscriber.', correct: false }
      - { value: 'To inject the Event Dispatcher service.', correct: false }
    help: |
      The `#[AsEventListener]` attribute (introduced in Symfony 6.2) allows you to configure event listeners directly in their class, specifying the event they listen to and their priority.
      https://symfony.com/doc/current/event_dispatcher.html#registering-event-listeners

  -
    question: >
      What is the primary purpose of the `Psr\\Log\\LoggerInterface` in Symfony?
    answers:
      - { value: 'It provides a standard interface for logging messages, allowing interchangeable logging libraries.', correct: true }
      - { value: 'It is a concrete implementation of a logger service.', correct: false }
      - { value: 'It defines how log files should be stored on the file system.', correct: false }
      - { value: 'It is used for debugging purposes only in the development environment.', correct: false }
    help: |
      `Psr\\Log\\LoggerInterface` is a PSR-3 interface that defines common methods for logging, ensuring interoperability between different logging implementations like Monolog.
      https://symfony.com/doc/current/logging.html#autowiring-logger-channels

  -
    question: >
      What is the primary benefit of Symfony's adherence to PHP Standard Recommendations (PSRs)?
    answers:
      - { value: 'It promotes interoperability and reusability of Symfony components with other PHP libraries and frameworks.', correct: true }
      - { value: 'It guarantees faster execution of Symfony applications.', correct: false }
      - { value: 'It eliminates the need for Composer in Symfony projects.', correct: false }
      - { value: 'It provides a built-in ORM for database interactions.', correct: false }
    help: |
      Adhering to PSRs makes Symfony components more generic and usable outside the full framework, fostering a healthier PHP ecosystem.
      https://symfony.com/doc/current/components/index.html#psr-compliance

  -
    question: >
      Which of the following describes Symfony's approach to "Framework Overloading" capabilities?
    answers:
      - { value: 'The ability to override or extend core services, templates, and configurations provided by Symfony or its bundles.', correct: true }
      - { value: 'The ability to run multiple Symfony applications on the same server instance.', correct: false }
      - { value: 'The process of upgrading Symfony to a newer version.', correct: false }
      - { value: 'The automatic detection and loading of third-party libraries.', correct: false }
    help: |
      Framework overloading refers to Symfony's powerful mechanisms for customizing or replacing parts of the framework or bundles without modifying their original source code.
      https://symfony.com/doc/current/bundles/override.html

  -
    question: >
      What is the purpose of the `MicroKernelTrait`'s `getCacheDir()` method in a multi-application setup?
    answers:
      - { value: 'To define a unique cache directory for each application, preventing cache conflicts.', correct: true }
      - { value: 'To clear the application''s cache automatically on every request.', correct: false }
      - { value: 'To specify the maximum size of the cache directory.', correct: false }
      - { value: 'To disable caching for the application.', correct: false }
    help: |
      In multi-application setups, overriding `getCacheDir()` and `getLogDir()` in the kernel allows you to isolate cache and log files for each application.
      https://symfony.com/doc/current/configuration/multiple_kernels.html#_snippet_3

  -
    question: >
      Which of the following is a common naming convention for configuration files in Symfony?
    answers:
      - { value: 'Using YAML, XML, or PHP files with descriptive names (e.g., `services.yaml`, `routes.xml`).', correct: true }
      - { value: 'Using `.ini` files for all configurations.', correct: false }
      - { value: 'Storing all configuration in a single `.env` file.', correct: false }
      - { value: 'Using JSON files exclusively for configuration.', correct: false }
    help: |
      Symfony supports YAML, XML, and PHP for configuration, and it's best practice to organize them logically by concern and environment.
      https://symfony.com/doc/current/configuration.html

  -
    question: >
      What is the primary purpose of the `Response` object in Symfony's request-response cycle?
    answers:
      - { value: 'To encapsulate the HTTP response data (headers, content, status code) that will be sent back to the client.', correct: true }
      - { value: 'To process the incoming HTTP request data.', correct: false }
      - { value: 'To handle database queries and updates.', correct: false }
      - { value: 'To manage user sessions and authentication.', correct: false }
    help: |
      The `Response` object is the final output of the Symfony application's request handling, containing all the information needed to form the HTTP response.
      https://symfony.com/doc/current/components/http_foundation.html#response

  -
    question: >
      Which of the following is a key characteristic of Symfony's approach to "Code Organization"?
    answers:
      - { value: 'A clear separation of concerns, with dedicated directories for different types of code and resources.', correct: true }
      - { value: 'A single file containing all application logic for simplicity.', correct: false }
      - { value: 'Relying on global variables for data sharing between components.', correct: false }
      - { value: 'Mixing HTML, CSS, and JavaScript directly within PHP files.', correct: false }
    help: |
      Symfony's directory structure and best practices promote a highly organized codebase, making it easier to navigate, maintain, and scale.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#code-organization

  -
    question: >
      What is the purpose of the `#[AsEventListener]` attribute in Symfony?
    answers:
      - { value: 'To register a PHP method as an event listener for a specific event, enabling autoconfiguration.', correct: true }
      - { value: 'To define a new event that can be dispatched.', correct: false }
      - { value: 'To mark a class as an event subscriber.', correct: false }
      - { value: 'To inject the Event Dispatcher service.', correct: false }
    help: |
      The `#[AsEventListener]` attribute (introduced in Symfony 6.2) allows you to configure event listeners directly in their class, specifying the event they listen to and their priority.
      https://symfony.com/doc/current/event_dispatcher.html#registering-event-listeners

  -
    question: >
      What is the primary purpose of the `Psr\\Log\\LoggerInterface` in Symfony?
    answers:
      - { value: 'It provides a standard interface for logging messages, allowing interchangeable logging libraries.', correct: true }
      - { value: 'It is a concrete implementation of a logger service.', correct: false }
      - { value: 'It defines how log files should be stored on the file system.', correct: false }
      - { value: 'It is used for debugging purposes only in the development environment.', correct: false }
    help: |
      `Psr\\Log\\LoggerInterface` is a PSR-3 interface that defines common methods for logging, ensuring interoperability between different logging implementations like Monolog.
      https://symfony.com/doc/current/logging.html#autowiring-logger-channels

  -
    question: >
      What is the primary benefit of Symfony's adherence to PHP Standard Recommendations (PSRs)?
    answers:
      - { value: 'It promotes interoperability and reusability of Symfony components with other PHP libraries and frameworks.', correct: true }
      - { value: 'It guarantees faster execution of Symfony applications.', correct: false }
      - { value: 'It eliminates the need for Composer in Symfony projects.', correct: false }
      - { value: 'It provides a built-in ORM for database interactions.', correct: false }
    help: |
      Adhering to PSRs makes Symfony components more generic and usable outside the full framework, fostering a healthier PHP ecosystem.
      https://symfony.com/doc/current/components/index.html#psr-compliance

  -
    question: >
      Which of the following describes Symfony's approach to "Framework Overloading" capabilities?
    answers:
      - { value: 'The ability to override or extend core services, templates, and configurations provided by Symfony or its bundles.', correct: true }
      - { value: 'The ability to run multiple Symfony applications on the same server instance.', correct: false }
      - { value: 'The process of upgrading Symfony to a newer version.', correct: false }
      - { value: 'The automatic detection and loading of third-party libraries.', correct: false }
    help: |
      Framework overloading refers to Symfony's powerful mechanisms for customizing or replacing parts of the framework or bundles without modifying their original source code.
      https://symfony.com/doc/current/bundles/override.html

  -
    question: >
      What is the purpose of the `MicroKernelTrait`'s `getCacheDir()` method in a multi-application setup?
    answers:
      - { value: 'To define a unique cache directory for each application, preventing cache conflicts.', correct: true }
      - { value: 'To clear the application''s cache automatically on every request.', correct: false }
      - { value: 'To specify the maximum size of the cache directory.', correct: false }
      - { value: 'To disable caching for the application.', correct: false }
    help: |
      In multi-application setups, overriding `getCacheDir()` and `getLogDir()` in the kernel allows you to isolate cache and log files for each application.
      https://symfony.com/doc/current/configuration/multiple_kernels.html#_snippet_3

  -
    question: >
      Which of the following is a common naming convention for configuration files in Symfony?
    answers:
      - { value: 'Using YAML, XML, or PHP files with descriptive names (e.g., `services.yaml`, `routes.xml`).', correct: true }
      - { value: 'Using `.ini` files for all configurations.', correct: false }
      - { value: 'Storing all configuration in a single `.env` file.', correct: false }
      - { value: 'Using JSON files exclusively for configuration.', correct: false }
    help: |
      Symfony supports YAML, XML, and PHP for configuration, and it's best practice to organize them logically by concern and environment.
      https://symfony.com/doc/current/configuration.html

  -
    question: >
      What is the primary purpose of the `Response` object in Symfony's request-response cycle?
    answers:
      - { value: 'To encapsulate the HTTP response data (headers, content, status code) that will be sent back to the client.', correct: true }
      - { value: 'To process the incoming HTTP request data.', correct: false }
      - { value: 'To handle database queries and updates.', correct: false }
      - { value: 'To manage user sessions and authentication.', correct: false }
    help: |
      The `Response` object is the final output of the Symfony application's request handling, containing all the information needed to form the HTTP response.
      https://symfony.com/doc/current/components/http_foundation.html#response

  -
    question: >
      Which of the following is a key characteristic of Symfony's approach to "Code Organization"?
    answers:
      - { value: 'A clear separation of concerns, with dedicated directories for different types of code and resources.', correct: true }
      - { value: 'A single file containing all application logic for simplicity.', correct: false }
      - { value: 'Relying on global variables for data sharing between components.', correct: false }
      - { value: 'Mixing HTML, CSS, and JavaScript directly within PHP files.', correct: false }
    help: |
      Symfony's directory structure and best practices promote a highly organized codebase, making it easier to navigate, maintain, and scale.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#code-organization

  -
    question: >
      What is the purpose of the `#[AsEventListener]` attribute in Symfony?
    answers:
      - { value: 'To register a PHP method as an event listener for a specific event, enabling autoconfiguration.', correct: true }
      - { value: 'To define a new event that can be dispatched.', correct: false }
      - { value: 'To mark a class as an event subscriber.', correct: false }
      - { value: 'To inject the Event Dispatcher service.', correct: false }
    help: |
      The `#[AsEventListener]` attribute (introduced in Symfony 6.2) allows you to configure event listeners directly in their class, specifying the event they listen to and their priority.
      https://symfony.com/doc/current/event_dispatcher.html#registering-event-listeners

  -
    question: >
      What is the primary purpose of the `Psr\\Log\\LoggerInterface` in Symfony?
    answers:
      - { value: 'It provides a standard interface for logging messages, allowing interchangeable logging libraries.', correct: true }
      - { value: 'It is a concrete implementation of a logger service.', correct: false }
      - { value: 'It defines how log files should be stored on the file system.', correct: false }
      - { value: 'It is used for debugging purposes only in the development environment.', correct: false }
    help: |
      `Psr\\Log\\LoggerInterface` is a PSR-3 interface that defines common methods for logging, ensuring interoperability between different logging implementations like Monolog.
      https://symfony.com/doc/current/logging.html#autowiring-logger-channels

  -
    question: >
      What is the primary benefit of Symfony's adherence to PHP Standard Recommendations (PSRs)?
    answers:
      - { value: 'It promotes interoperability and reusability of Symfony components with other PHP libraries and frameworks.', correct: true }
      - { value: 'It guarantees faster execution of Symfony applications.', correct: false }
      - { value: 'It eliminates the need for Composer in Symfony projects.', correct: false }
      - { value: 'It provides a built-in ORM for database interactions.', correct: false }
    help: |
      Adhering to PSRs makes Symfony components more generic and usable outside the full framework, fostering a healthier PHP ecosystem.
      https://symfony.com/doc/current/components/index.html#psr-compliance

  -
    question: >
      Which of the following describes Symfony's approach to "Framework Overloading" capabilities?
    answers:
      - { value: 'The ability to override or extend core services, templates, and configurations provided by Symfony or its bundles.', correct: true }
      - { value: 'The ability to run multiple Symfony applications on the same server instance.', correct: false }
      - { value: 'The process of upgrading Symfony to a newer version.', correct: false }
      - { value: 'The automatic detection and loading of third-party libraries.', correct: false }
    help: |
      Framework overloading refers to Symfony's powerful mechanisms for customizing or replacing parts of the framework or bundles without modifying their original source code.
      https://symfony.com/doc/current/bundles/override.html

  -
    question: >
      What is the purpose of the `MicroKernelTrait`'s `getCacheDir()` method in a multi-application setup?
    answers:
      - { value: 'To define a unique cache directory for each application, preventing cache conflicts.', correct: true }
      - { value: 'To clear the application''s cache automatically on every request.', correct: false }
      - { value: 'To specify the maximum size of the cache directory.', correct: false }
      - { value: 'To disable caching for the application.', correct: false }
    help: |
      In multi-application setups, overriding `getCacheDir()` and `getLogDir()` in the kernel allows you to isolate cache and log files for each application.
      https://symfony.com/doc/current/configuration/multiple_kernels.html#_snippet_3

  -
    question: >
      Which of the following is a common naming convention for configuration files in Symfony?
    answers:
      - { value: 'Using YAML, XML, or PHP files with descriptive names (e.g., `services.yaml`, `routes.xml`).', correct: true }
      - { value: 'Using `.ini` files for all configurations.', correct: false }
      - { value: 'Storing all configuration in a single `.env` file.', correct: false }
      - { value: 'Using JSON files exclusively for configuration.', correct: false }
    help: |
      Symfony supports YAML, XML, and PHP for configuration, and it's best practice to organize them logically by concern and environment.
      https://symfony.com/doc/current/configuration.html

  -
    question: >
      What is the primary purpose of the `Response` object in Symfony's request-response cycle?
    answers:
      - { value: 'To encapsulate the HTTP response data (headers, content, status code) that will be sent back to the client.', correct: true }
      - { value: 'To process the incoming HTTP request data.', correct: false }
      - { value: 'To handle database queries and updates.', correct: false }
      - { value: 'To manage user sessions and authentication.', correct: false }
    help: |
      The `Response` object is the final output of the Symfony application's request handling, containing all the information needed to form the HTTP response.
      https://symfony.com/doc/current/components/http_foundation.html#response

  -
    question: >
      Which of the following is a key characteristic of Symfony's approach to "Code Organization"?
    answers:
      - { value: 'A clear separation of concerns, with dedicated directories for different types of code and resources.', correct: true }
      - { value: 'A single file containing all application logic for simplicity.', correct: false }
      - { value: 'Relying on global variables for data sharing between components.', correct: false }
      - { value: 'Mixing HTML, CSS, and JavaScript directly within PHP files.', correct: false }
    help: |
      Symfony's directory structure and best practices promote a highly organized codebase, making it easier to navigate, maintain, and scale.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#code-organization