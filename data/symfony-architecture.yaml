category: Symfony Architecture

questions:
  -
    question: >
      What is the primary purpose of Symfony Flex in a Symfony application?
    answers:
      -
        value: >
          To provide a graphical user interface for application management.
        correct: false
      -
        value: >
          To simplify the installation and management of Symfony packages and their dependencies through recipes.
        correct: true
      -
        value: >
          To compile frontend assets like CSS and JavaScript.
        correct: false
      -
        value: >
          To manage database migrations and schema updates.
        correct: false
    help: |
      Symfony Flex is a Composer plugin that simplifies the installation and management of Symfony packages by automating common tasks through "recipes".
      https://symfony.com/doc/current/setup/flex.html

  -
    question: >
      Under which open-source license is the Symfony framework distributed?
    answers:
      -
        value: >
          GPLv3
        correct: false
      -
        value: >
          Apache 2.0
        correct: false
      -
        value: >
          MIT License
        correct: true
      -
        value: >
          LGPLv2.1
        correct: false
    help: |
      Symfony is released under the MIT license, which is a permissive free software license.
      https://symfony.com/doc/current/contributing/code/license.html

  -
    question: >
      Which Symfony component provides the `Request` and `Response` objects, fundamental for handling HTTP communication?
    answers:
      -
        value: >
          HttpFoundation
        correct: true
      -
        value: >
          HttpKernel
        correct: false
      -
        value: >
          Routing
        correct: false
      -
        value: >
          WebLink
        correct: false
    help: |
      The HttpFoundation component defines an object-oriented layer for the HTTP specification, providing `Request` and `Response` classes.
      https://symfony.com/doc/current/components/http_foundation.html

  -
    question: >
      In a standard Symfony application, where are application-specific services, controllers, and entities typically located?
    answers:
      -
        value: >
          `vendor/`
        correct: false
      -
        value: >
          `bin/`
        correct: false
      -
        value: >
          `src/`
        correct: true
      -
        value: >
          `var/`
        correct: false
    help: |
      The `src/` directory is where all your application's PHP code resides, including controllers, services, entities, and other custom classes.
      https://symfony.com/doc/current/setup/directory_structure.html

  -
    question: >
      What is the core component responsible for handling HTTP requests and returning HTTP responses in Symfony, acting as the central dispatcher?
    answers:
      -
        value: >
          Routing
        correct: false
      -
        value: >
          HttpFoundation
        correct: false
      -
        value: >
          HttpKernel
        correct: true
      -
        value: >
          EventDispatcher
        correct: false
    help: |
      The HttpKernel component provides the `HttpKernelInterface`, which is the core of the Symfony framework, responsible for handling a request and returning a response.
      https://symfony.com/doc/current/components/http_kernel.html

  -
    question: >
      Which Symfony component enables a decoupled communication system where objects can dispatch events and other objects can listen to them?
    answers:
      -
        value: >
          Messenger
        correct: false
      -
        value: >
          Workflow
        correct: false
      -
        value: >
          EventDispatcher
        correct: true
      -
        value: >
          DependencyInjection
        correct: false
    help: |
      The EventDispatcher component provides tools to allow your application components to communicate with each other by dispatching and listening to events.
      https://symfony.com/doc/current/components/event_dispatcher.html

  -
    question: >
      What is the recommended approach for managing application dependencies within Symfony services?
    answers:
      -
        value: >
          Directly instantiating dependencies using the `new` keyword within the service.
        correct: false
      -
        value: >
          Using the global `$_SERVER` or `$_ENV` superglobals to access configuration.
        correct: false
      -
        value: >
          Relying on Symfony's Dependency Injection Container and autowiring.
        correct: true
      -
        value: >
          Fetching services from a static registry class.
        correct: false
    help: |
      Symfony strongly recommends using its Dependency Injection Container, especially with autowiring, to manage service dependencies. This promotes testability and maintainability.
      https://symfony.com/doc/current/service_container.html#autowiring-services

  -
    question: >
      According to Symfony's Backward Compatibility Promise, when are breaking changes generally allowed?
    answers:
      -
        value: >
          In any minor release (e.g., 7.0 to 7.1) for new features.
        correct: false
      -
        value: >
          Only in major releases (e.g., 6.x to 7.0).
        correct: true
      -
        value: >
          In patch releases (e.g., 7.0.1 to 7.0.2) for critical bug fixes.
        correct: false
      -
        value: >
          Whenever a new PHP version is released.
        correct: false
    help: |
      Symfony's Backward Compatibility Promise states that breaking changes are only introduced in major versions. Minor versions add new features but maintain backward compatibility.
      https://symfony.com/doc/current/contributing/code/bc.html

  -
    question: |
      Which Symfony console command can help identify services that are available for autowiring and potentially reveal deprecations related to service definitions?
    answers:
      -
        value: >
          `php bin/console debug:container`
        correct: false
      -
        value: >
          `php bin/console debug:autowiring`
        correct: true
      -
        value: >
          `php bin/console lint:container`
        correct: false
      -
        value: >
          `php bin/console config:dump`
        correct: false
    help: |
      The `debug:autowiring` command lists all autowirable services and can be useful for understanding how Symfony resolves dependencies and for identifying potential issues or deprecations.
      https://symfony.com/doc/current/service_container/autowiring.html#listing-autowirable-services

  -
    question: >
      Symfony adheres to several PHP Standards Recommendations (PSRs). Which PSR defines the common interface for logging libraries, often implemented by Monolog in Symfony applications?
    answers:
      -
        value: >
          PSR-7 (HTTP Message Interfaces)
        correct: false
      -
        value: >
          PSR-11 (Container Interface)
        correct: false
      -
        value: >
          PSR-3 (Logger Interface)
        correct: true
      -
        value: >
          PSR-4 (Autoloading Standard)
        correct: false
    help: |
      Symfony's logging component integrates with Monolog and adheres to PSR-3, the Logger Interface, ensuring interoperability with other logging solutions.
      https://symfony.com/doc/current/logging.html#autowiring-logger-channels

  -
    question: >
      What is the recommended naming convention for controller classes in Symfony?
    answers:
      -
        value: >
          `MyController.php`
        correct: false
      -
        value: >
          `My_Controller.php`
        correct: false
      -
        value: >
          `MyController.php` (e.g., `DefaultController`, `ProductController`)
        correct: true
      -
        value: >
          `my_controller.php`
        correct: false
    help: |
      Symfony follows standard PHP naming conventions. Controller classes should use PascalCase and typically end with `Controller`.
      https://symfony.com/doc/current/best_practices.html#controllers

  -
    question: >
      When you run `composer require logger` in a Symfony application, what mechanism is primarily responsible for automatically configuring the Monolog bundle?
    answers:
      -
        value: >
          Manual configuration in `config/packages/monolog.yaml`.
        correct: false
      -
        value: >
          Symfony Flex recipes.
        correct: true
      -
        value: >
          Composer's autoloader.
        correct: false
      -
        value: >
          The Symfony installer script.
        correct: false
    help: |
      Symfony Flex automatically executes "recipes" when packages are installed or removed, which configure the application (e.g., adding bundle entries, creating config files).
      https://symfony.com/doc/current/setup/flex.html

  -
    question: >
      In the Symfony Messenger component, what is the role of a `Sender`?
    answers:
      -
        value: >
          To retrieve messages from a message broker.
        correct: false
      -
        value: >
          To execute the business logic associated with a message.
        correct: false
      -
        value: >
          To serialize and send messages to a message broker or third-party API.
        correct: true
      -
        value: >
          To wrap messages with additional metadata.
        correct: false
    help: |
      A `Sender` is responsible for serializing and sending messages to a message broker or third-party API.
      https://symfony.com/doc/current/components/messenger.html#senders-receivers-and-handlers

  -
    question: >
      In the Symfony Messenger component, what is the primary function of a `Receiver`?
    answers:
      -
        value: >
          To dispatch messages onto the message bus.
        correct: false
      -
        value: >
          To retrieve, deserialize, and forward messages to handler(s).
        correct: true
      -
        value: >
          To add stamps to an envelope.
        correct: false
      -
        value: >
          To transform messages into a different format.
        correct: false
    help: |
      A `Receiver` is responsible for retrieving, deserializing, and forwarding messages to one or more handlers.
      https://symfony.com/doc/current/components/messenger.html#senders-receivers-and-handlers

  -
    question: >
      What is an `Envelope` in the Symfony Messenger component?
    answers:
      -
        value: >
          A type of message transport.
        correct: false
      -
        value: >
          A Messenger-specific concept that wraps messages, allowing the addition of useful information through *envelope stamps*.
        correct: true
      -
        value: >
          A special type of message handler.
        correct: false
      -
        value: >
          A configuration file for message routing.
        correct: false
    help: |
      The `Envelope` is a Messenger-specific concept that wraps messages, enabling flexibility by allowing the addition of metadata through *envelope stamps*.
      https://symfony.com/doc/current/components/messenger.html#envelope-and-stamps

  -
    question: |
      Given the following directory structure for a multi-application Symfony project, where would the `bundles.php` file for the 'admin' application typically be located?

      ```
      your-project/
      ├─ apps/
      │  ├─ admin/
      │  │  ├─ config/
      │  │  │  ├─ bundles.php
      │  │  │  ├─ routes.yaml
      │  │  │  └─ services.yaml
      │  │  └─ src/
      │  └─ api/
      │     └─ ...
      ```
    answers:
      -
        value: >
          `your-project/config/bundles.php`
        correct: false
      -
        value: >
          `your-project/apps/admin/config/bundles.php`
        correct: true
      -
        value: >
          `your-project/apps/admin/src/bundles.php`
        correct: false
      -
        value: >
          `your-project/var/bundles.php`
        correct: false
    help: |
      In a multi-application setup, each application typically has its own `config/` directory containing application-specific configuration, including `bundles.php`.
      https://symfony.com/doc/current/configuration/multiple_kernels.html#directory-layout

  -
    question: |
      Consider the following Symfony controller method:

      ```php
      namespace App\Controller;

      use Psr\Log\LoggerInterface;
      use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
      use Symfony\Component\HttpFoundation\Response;
      use Symfony\Component\Routing\Attribute\Route;

      class DefaultController extends AbstractController
      {
          #[Route('/hello/{name}', methods: ['GET'])]
          public function index(string $name, LoggerInterface $logger): Response
          {
              $logger->info("Saying hello to $name!");
              // ...
          }
      }
      ```
      How does Symfony automatically provide the `LoggerInterface` instance to the `index` method?
    answers:
      -
        value: >
          Through manual service configuration in `services.yaml`.
        correct: false
      -
        value: >
          By calling a static method on the `Logger` class.
        correct: false
      -
        value: >
          Via autowiring, which recognizes the `LoggerInterface` type-hint.
        correct: true
      -
        value: >
          By fetching it from the global container directly within the method.
        correct: false
    help: |
      Symfony's autowiring feature automatically injects services into controller methods or service constructors when a type-hint matches an available service.
      https://symfony.com/doc/current/service_container/autowiring.html

  -
    question: >
      What is the main benefit of using the EventDispatcher component for application architecture?
    answers:
      -
        value: >
          It centralizes all application logic into a single class.
        correct: false
      -
        value: >
          It tightly couples different parts of the application.
        correct: false
      -
        value: >
          It promotes decoupling and modularity by allowing components to communicate without direct dependencies.
        correct: true
      -
        value: >
          It automatically generates database schemas.
        correct: false
    help: |
      The EventDispatcher component is a core part of Symfony's architecture, enabling a highly decoupled and extensible application design.
      https://symfony.com/doc/current/components/event_dispatcher.html

  -
    question: |
      You want to set a router option differently for the `prod` environment in Symfony. Which of the following YAML configurations correctly achieves this?
    answers:
      -
        value: |
          ```yaml
          # config/packages/routing.yaml
          framework:
              router:
                  utf8: true

          when@prod:
              framework:
                  router:
                      strict_requirements: null
          ```
        correct: true
      -
        value: |
          ```yaml
          # config/packages/routing.yaml
          framework:
              router:
                  utf8: true
                  strict_requirements: true # This will be overridden

          framework@prod:
              router:
                  strict_requirements: null
          ```
        correct: false
      -
        value: |
          ```yaml
          # config/packages/routing.yaml
          framework:
              router:
                  utf8: true
          prod:
              framework:
                  router:
                      strict_requirements: null
          ```
        correct: false
      -
        value: |
          ```yaml
          # config/packages/routing.yaml
          framework:
              router:
                  utf8: true
          if (prod):
              framework:
                  router:
                      strict_requirements: null
          ```
        correct: false
    help: |
      Symfony uses `when@env:` blocks in configuration files to apply specific settings only when the application is running in a particular environment.
      https://symfony.com/doc/current/configuration/environments.html#environment-specific-configuration

  -
    question: >
      How often are new minor versions of Symfony typically released?
    answers:
      -
        value: >
          Every month
        correct: false
      -
        value: >
          Every 6 months
        correct: true
      -
        value: >
          Every year
        correct: false
      -
        value: >
          Every 2 years
        correct: false
    help: |
      Symfony releases a new minor version every six months, typically in May and November.
      https://symfony.com/doc/current/contributing/community/releases.html

  -
    question: >
      What is the recommended way to handle deprecation notices in your Symfony application during development?
    answers:
      -
        value: >
          Ignore them, as they will only cause issues in future major versions.
        correct: false
      -
        value: >
          Disable deprecation logging entirely in `config/packages/framework.yaml`.
        correct: false
      -
        value: >
          Address them proactively to ensure smooth upgrades to future Symfony versions.
        correct: true
      -
        value: >
          Downgrade Symfony to a version without deprecations.
        correct: false
    help: |
      Deprecation notices are warnings that a feature will be removed or changed in a future major version. It's best practice to address them as they appear to facilitate easier upgrades.
      https://symfony.com/doc/current/contributing/code/deprecations.html

  -
    question: >
      If you need to customize the behavior of a core Symfony service, what is the primary mechanism provided by the Dependency Injection Container to achieve this without modifying the original service class?
    answers:
      -
        value: >
          Service aliasing
        correct: false
      -
        value: >
          Service decoration
        correct: true
      -
        value: >
          Service tagging
        correct: false
      -
        value: >
          Service autowiring
        correct: false
    help: |
      Service decoration allows you to replace an existing service with your own, while still being able to use the original service inside your decorator.
      https://symfony.com/doc/current/service_container/service_decoration.html

  -
    question: >
      Which PSR defines the common interface for a dependency injection container, which Symfony's service container implements?
    answers:
      -
        value: >
          PSR-1 (Basic Coding Standard)
        correct: false
      -
        value: >
          PSR-6 (Caching Interface)
        correct: false
      -
        value: >
          PSR-11 (Container Interface)
        correct: true
      -
        value: >
          PSR-14 (Event Dispatcher)
        correct: false
    help: |
      Symfony's service container implements PSR-11, the Container Interface, promoting interoperability with other PHP libraries and frameworks.
      https://symfony.com/doc/current/components/dependency_injection/container_interface.html

  -
    question: >
      What is the purpose of the Symfony PropertyAccess component?
    answers:
      -
        value: >
          To validate data against a set of rules.
        correct: false
      -
        value: >
          To provide a unified way to read from and write to properties of objects or arrays using property paths.
        correct: true
      -
        value: >
          To convert objects to arrays and vice-versa.
        correct: false
      -
        value: >
          To manage file uploads.
        correct: false
    help: |
      The PropertyAccess component provides a way to read and write to properties of objects or arrays using a simple string notation (property paths).
      https://symfony.com/doc/current/components/property_access.html

  -
    question: |
      Given the following PHP code using `PropertyAccessor`:

      ```php
      // ...
      class Person
      {
          public string $firstName;
          private array $children = [];

          public function setChildren($children): void
          {
              $this->children = $children;
          }

          public function getChildren(): array
          {
              return $this->children;
          }
      }

      $person = new Person();
      $propertyAccessor->setValue($person, 'children[0].firstName', 'Wouter');
      ```
      What is the equivalent direct PHP code for the `setValue` operation shown?
    answers:
      -
        value: >
          `$person->children[0]->firstName = 'Wouter';`
        correct: true
      -
        value: >
          `$person->setChildren()[0]->firstName = 'Wouter';`
        correct: false
      -
        value: >
          `$person->getChildren()->firstName[0] = 'Wouter';`
        correct: false
      -
        value: >
          `$person->set('children[0].firstName', 'Wouter');`
        correct: false
    help: |
      The PropertyAccessor component abstracts direct property access. The example demonstrates setting a nested property within an array of objects.
      https://symfony.com/doc/current/components/property_access.html#writing-to-properties

  -
    question: >
      What is the primary role of the Symfony PropertyInfo component?
    answers:
      -
        value: >
          To generate PHP classes from database schemas.
        correct: false
      -
        value: >
          To provide an API to extract information about the properties of a PHP class.
        correct: true
      -
        value: >
          To serialize and deserialize PHP objects.
        correct: false
      -
        value: >
          To manage application configuration.
        correct: false
    help: |
      The PropertyInfo component provides an API to extract information about the properties of a PHP class (e.g., types, descriptions, readability, writability).
      https://symfony.com/doc/current/components/property_info.html

  -
    question: >
      Which `PropertyInfoExtractorInterface` method would you use to get an array of all property names for a given class?
    answers:
      -
        value: >
          `getTypes(class: string, property: string)`
        correct: false
      -
        value: >
          `getProperties(class: string)`
        correct: true
      -
        value: >
          `getShortDescription(class: string, property: string)`
        correct: false
      -
        value: >
          `isReadable(class: string, property: string)`
        correct: false
    help: |
      The `PropertyListExtractorInterface` defines the `getProperties()` method, which returns an array of property names for a given class.
      https://symfony.com/doc/current/components/property_info.html#propertyinfoextractor-api

  -
    question: >
      In Symfony's Config component, what is the purpose of `arrayPrototype()` when defining a configuration tree?
    answers:
      -
        value: >
          To define a single, fixed array node.
        correct: false
      -
        value: >
          To specify that a node must be an associative array with predefined keys.
        correct: false
      -
        value: >
          To allow for multiple, numerically indexed instances of a complex array structure within the configuration.
        correct: true
      -
        value: >
          To mark an array node as optional.
        correct: false
    help: |
      `arrayPrototype()` is used to define a prototype for an array node, meaning that the node can contain multiple entries, each conforming to the structure defined within the prototype.
      https://symfony.com/doc/current/components/config/definition.html#prototyped-array-nodes

  -
    question: |
      Consider the following invokable controller:

      ```php
      // src/Controller/Hello.php
      namespace App\Controller;

      use Symfony\Component\HttpFoundation\Response;
      use Symfony\Component\Routing\Attribute\Route;

      #[Route('/hello/{name}', name: 'hello')]
      class Hello
      {
          public function __invoke(string $name = 'World'): Response
          {
              return new Response(sprintf('Hello %s!', $name));
          }
      }
      ```
      How would you define a route for this controller in `config/routes.yaml` if you were not using attributes?
    answers:
      -
        value: |
          ```yaml
          # config/routes.yaml
          hello:
              path:       /hello/{name}
              controller: App\Controller\Hello::index
          ```
        correct: false
      -
        value: |
          ```yaml
          # config/routes.yaml
          hello:
              path:       /hello/{name}
              controller: App\Controller\Hello
          ```
        correct: true
      -
        value: |
          ```yaml
          # config/routes.yaml
          hello:
              path:       /hello/{name}
              _controller: App\Controller\Hello::__invoke
          ```
        correct: false
      -
        value: |
          ```yaml
          # config/routes.yaml
          hello:
              path:       /hello/{name}
              action:     App\Controller\Hello
          ```
        correct: false
    help: |
      For invokable controllers, you simply reference the class name as the controller. Symfony's `HttpKernel` will automatically call the `__invoke()` method.
      https://symfony.com/doc/current/controller/service.html#invokable-controllers

  -
    question: >
      What is the main reason Symfony discourages hardcoding asset URLs directly in HTML templates?
    answers:
      -
        value: >
          It prevents the use of CDN (Content Delivery Network).
        correct: false
      -
        value: >
          It makes asset versioning and cache busting difficult to manage.
        correct: true
      -
        value: >
          It increases the load time of the page.
        correct: false
      -
        value: >
          It is a security vulnerability.
        correct: false
    help: |
      Hardcoding asset URLs makes it difficult to implement cache busting (e.g., by adding version numbers to filenames or query strings) and manage different asset paths across environments.
      https://symfony.com/doc/current/components/asset.html#why-use-the-asset-component

  -
    question: >
      Which Symfony FrameworkBundle configuration option is used to globally append a query parameter (e.g., `?v2`) to all rendered asset paths for cache busting?
    answers:
      -
        value: >
          `assets.strict_mode`
        correct: false
      -
        value: >
          `assets.json_manifest_path`
        correct: false
      -
        value: >
          `assets.version`
        correct: true
      -
        value: >
          `assets.base_path`
        correct: false
    help: |
      The `assets.version` option adds a query parameter to all asset URLs, which helps in cache busting. You must manually increment this value on deployment.
      https://symfony.com/doc/current/reference/configuration/framework.html#version

  -
    question: >
      You want to ensure that all requested assets are present in your `manifest.json` file to detect typos or missing assets. Which `assets` configuration option should you enable in `framework.yaml`?
    answers:
      -
        value: >
          `strict_mode`
        correct: true
      -
        value: >
          `version_strategy`
        correct: false
      -
        value: >
          `json_manifest_path`
        correct: false
      -
        value: >
          `enable_integrity`
        correct: false
    help: |
      The `strict_mode` option, when enabled, asserts that all requested assets are present in the manifest file, which is useful for detecting typos or missing assets.
      https://symfony.com/doc/current/reference/configuration/framework.html#strict-mode

  -
    question: >
      When implementing a multi-application kernel using `MicroKernelTrait`, how would you typically separate the cache directories for each application?
    answers:
      -
        value: >
          By overriding the `getCacheDir()` method in the kernel to include an application-specific identifier.
        correct: true
      -
        value: >
          By configuring separate `cache_dir` parameters in `services.yaml`.
        correct: false
      -
        value: >
          By defining a unique `APP_CACHE_DIR` environment variable for each application.
        correct: true
      -
        value: >
          Symfony automatically separates cache directories for multiple kernels.
        correct: false
    help: |
      You can override `getCacheDir()` in your custom kernel to include an application ID, or use an environment variable like `APP_CACHE_DIR` to achieve separate cache directories.
      https://symfony.com/doc/current/configuration/multiple_kernels.html#dividing-cache-and-logs

  -
    question: >
      What is the primary purpose of the Symfony Runtime component?
    answers:
      -
        value: >
          To provide a set of tools for building command-line applications.
        correct: false
      -
        value: >
          To abstract the bootstrapping process of PHP applications, making them compatible with various SAPI and serverless environments.
        correct: true
      -
        value: >
          To manage application dependencies and autoloading.
        correct: false
      -
        value: >
          To handle database connections and ORM.
        correct: false
    help: |
      The Runtime component provides a thin layer that abstracts the bootstrapping of PHP applications, allowing them to run in different environments (e.g., web servers, CLI, serverless) without modifying the application code.
      https://symfony.com/doc/current/components/runtime.html

  -
    question: |
      If you are building a console application with multiple commands using the Symfony Runtime component, what type of object should your `public/index.php` (or equivalent) return from its closure?
    answers:
      -
        value: >
          A `Symfony\Component\HttpFoundation\Response` object.
        correct: false
      -
        value: >
          A `Symfony\Component\Console\Application` instance.
        correct: true
      -
        value: >
          A `Symfony\Component\HttpKernel\KernelInterface` instance.
        correct: false
      -
        value: >
          A simple `callable` that returns an integer.
        correct: false
    help: |
      For console applications with multiple commands, the Runtime component expects the closure to return an instance of `Symfony\Component\Console\Application`.
      https://symfony.com/doc/current/components/runtime.html#console-application

  -
    question: |
      Given the following service constructor, what type hints would allow Symfony's autowiring to correctly inject an object that can both normalize and denormalize data, or a general serializer?

      ```php
      use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
      use Symfony\Component\Serializer\Normalizer\NormalizerInterface;
      use Symfony\Component\Serializer\SerializerInterface;

      class DataFormatter
      {
          public function __construct(
              private /* ??? */ $transformer,
          ) {
              // ...
          }
          // ...
      }
      ```
    answers:
      -
        value: >
          `NormalizerInterface|DenormalizerInterface`
        correct: false
      -
        value: >
          `(NormalizerInterface&DenormalizerInterface)|SerializerInterface`
        correct: true
      -
        value: >
          `NormalizerInterface&DenormalizerInterface`
        correct: false
      -
        value: >
          `SerializerInterface|NormalizerInterface|DenormalizerInterface`
        correct: false
    help: |
      Symfony's autowiring supports PHP 8.1+ union and intersection types. `(NormalizerInterface&DenormalizerInterface)` represents an object that implements both interfaces, and `|SerializerInterface` allows for a `SerializerInterface` as an alternative.
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring-with-union-and-intersection-types

  -
    question: >
      When an unhandled exception occurs during the request handling process in Symfony, which kernel event is dispatched to allow listeners to handle or transform the exception into a `Response`?
    answers:
      -
        value: >
          `KernelEvents::REQUEST`
        correct: false
      -
        value: >
          `KernelEvents::RESPONSE`
        correct: false
      -
        value: >
          `KernelEvents::EXCEPTION`
        correct: true
      -
        value: >
          `KernelEvents::TERMINATE`
        correct: false
    help: |
      The `KernelEvents::EXCEPTION` event is dispatched when an exception occurs during the handling of a request. Listeners can catch this event to modify the response or handle the exception.
      https://symfony.com/doc/current/components/http_kernel/introduction.html#the-kernel-events

  -
    question: >
      What is the purpose of the `trigger_deprecation()` function in Symfony?
    answers:
      -
        value: >
          To immediately stop execution if a deprecated feature is used.
        correct: false
      -
        value: >
          To log a deprecation notice, informing developers about upcoming changes or removals of features.
        correct: true
      -
        value: >
          To mark a class or method as deprecated for static analysis tools.
        correct: false
      -
        value: >
          To automatically upgrade deprecated code to the latest version.
        correct: false
    help: |
      `trigger_deprecation()` is a helper function used by Symfony and its components to emit deprecation notices, guiding developers to update their code.
      https://symfony.com/doc/current/contributing/code/deprecations.html#triggering-deprecations

  -
    question: >
      You have created a custom service `App\GreetingGenerator`. How would you inject this service into a controller using Symfony's autowiring?
    answers:
      -
        value: >
          By manually fetching it from the container using `$this->container->get('app.greeting_generator')`.
        correct: false
      -
        value: >
          By type-hinting `App\GreetingGenerator` in the controller method or constructor.
        correct: true
      -
        value: >
          By defining an alias for the service in `config/services.yaml`.
        correct: false
      -
        value: >
          By extending `App\GreetingGenerator` in your controller.
        correct: false
    help: |
      Symfony's autowiring automatically injects services when their class or interface is type-hinted in a constructor or method.
      https://symfony.com/doc/current/service_container/autowiring.html

  -
    question: >
      Which kernel event is dispatched right before the controller is executed?
    answers:
      -
        value: >
          `KernelEvents::REQUEST`
        correct: false
      -
        value: >
          `KernelEvents::CONTROLLER`
        correct: true
      -
        value: >
          `KernelEvents::VIEW`
        correct: false
      -
        value: >
          `KernelEvents::RESPONSE`
        correct: false
    help: |
      The `KernelEvents::CONTROLLER` event is dispatched after the controller has been resolved but before it is executed, allowing listeners to modify the controller or its arguments.
      https://symfony.com/doc/current/components/http_kernel/introduction.html#the-kernel-events

  -
    question: >
      Which of the following changes would generally NOT be considered a violation of Symfony's Backward Compatibility Promise for a minor release?
    answers:
      -
        value: >
          Removing a public method from a stable class.
        correct: false
      -
        value: >
          Changing the signature of a public method.
        correct: false
      -
        value: >
          Adding a new public method to an existing stable class.
        correct: true
      -
        value: >
          Renaming a public service ID.
        correct: false
    help: |
      Adding new public methods to existing stable classes is generally considered a backward-compatible change, as it does not break existing code.
      https://symfony.com/doc/current/contributing/code/bc.html#what-is-covered

  -
    question: >
      What is the recommended way to override a service definition in Symfony's Dependency Injection Container?
    answers:
      -
        value: >
          Modify the original service definition file in `vendor/`.
        correct: false
      -
        value: >
          Create a new service with the same ID in your application's `services.yaml` or a dedicated configuration file.
        correct: true
      -
        value: >
          Use PHP's `runkit` extension to modify the service at runtime.
        correct: false
      -
        value: >
          Extend the service class and register the new class with a different ID.
        correct: false
    help: |
      You can override a service definition by defining a new service with the same ID. The last definition loaded for a given ID wins.
      https://symfony.com/doc/current/service_container/replacing_services.html

  -
    question: >
      What is the typical support duration for a Symfony Long Term Support (LTS) version?
    answers:
      -
        value: >
          1 year
        correct: false
      -
        value: >
          2 years
        correct: false
      -
        value: >
          3 years for bug fixes and 5 years for security fixes.
        correct: true
      -
        value: >
          5 years for bug fixes and 10 years for security fixes.
        correct: false
    help: |
      LTS versions of Symfony receive 3 years of bug fixes and 5 years of security fixes.
      https://symfony.com/doc/current/contributing/community/releases.html#long-term-support-lts

  -
    question: >
      Why is adherence to PSRs (PHP Standards Recommendations) important for a framework like Symfony?
    answers:
      -
        value: >
          It forces developers to use a specific IDE.
        correct: false
      -
        value: >
          It ensures interoperability and easier integration with other PHP libraries and frameworks.
        correct: true
      -
        value: >
          It reduces the performance of the application.
        correct: false
      -
        value: >
          It dictates the specific database technology to be used.
        correct: false
    help: |
      PSRs provide common interfaces and coding standards, which allows different PHP components and frameworks to work together seamlessly. Symfony adheres to many PSRs for this reason.
      https://www.php-fig.org/psr/

  -
    question: >
      What is the standard naming convention for configuration files in Symfony, particularly for environment-specific configurations?
    answers:
      -
        value: >
          `config.yaml`, `config_prod.yaml`
        correct: false
      -
        value: >
          `{bundle}.yaml`, `{bundle}_{env}.yaml` (e.g., `framework.yaml`, `framework_dev.yaml`)
        correct: true
      -
        value: >
          `{env}.yaml`, `{env}_{bundle}.yaml`
        correct: false
      -
        value: >
          `config/{env}/{bundle}.yaml`
        correct: false
    help: |
      Symfony typically uses `filename.yaml` for general configuration and `filename_env.yaml` for environment-specific overrides (e.g., `framework.yaml` and `framework_dev.yaml`).
      https://symfony.com/doc/current/configuration/environments.html

  -
    question: >
      By default, what happens when `PropertyAccessor::getValue()` is called with a property path that does not exist on an object?
    answers:
      -
        value: >
          It returns `null`.
        correct: false
      -
        value: >
          It throws a `Symfony\Component\PropertyAccess\Exception\NoSuchPropertyException`.
        correct: true
      -
        value: >
          It attempts to call a magic `__get()` method.
        correct: false
      -
        value: >
          It logs a warning and continues execution.
        correct: false
    help: |
      By default, `PropertyAccessor::getValue()` throws a `NoSuchPropertyException` if the property path does not exist.
      https://symfony.com/doc/current/components/property_access.html#handling-non-existing-properties

  -
    question: >
      You want `PropertyAccessor` to return `null` instead of throwing an exception when an invalid property path is accessed. How can you configure the `PropertyAccessorBuilder` to achieve this?
    answers:
      -
        value: >
          Call `enableExceptionOnInvalidPropertyPath()`
        correct: false
      -
        value: >
          Call `disableExceptionOnInvalidPropertyPath()`
        correct: true
      -
        value: >
          Set `strict_mode` to `false`
        correct: false
      -
        value: >
          Implement `__isset()` in the target object.
        correct: false
    help: |
      The `PropertyAccessorBuilder` provides the `disableExceptionOnInvalidPropertyPath()` method to change the default behavior and return `null` for non-existent paths.
      https://symfony.com/doc/current/components/property_access.html#handling-non-existing-properties

  -
    question: >
      Which `PropertyInfoExtractorInterface` method would you use to determine if a property can be read from an object?
    answers:
      -
        value: >
          `isWritable(class: string, property: string)`
        correct: false
      -
        value: >
          `isReadable(class: string, property: string)`
        correct: true
      -
        value: >
          `getTypes(class: string, property: string)`
        correct: false
      -
        value: >
          `getProperties(class: string)`
        correct: false
    help: |
      The `PropertyAccessExtractorInterface` defines `isReadable()` and `isWritable()` methods to check property access.
      https://symfony.com/doc/current/components/property_info.html#propertyinfoextractor-api

  -
    question: >
      What is the main benefit of creating custom services (like `GreetingGenerator` in the documentation) instead of putting all logic directly into controllers?
    answers:
      -
        value: >
          It makes controllers more complex.
        correct: false
      -
        value: >
          It promotes code reusability, testability, and separation of concerns.
        correct: true
      -
        value: >
          It eliminates the need for dependency injection.
        correct: false
      -
        value: >
          It speeds up routing configuration.
        correct: false
    help: |
      Moving business logic into services keeps controllers lean, improves reusability of logic across different parts of the application, and makes code easier to test in isolation.
      https://symfony.com/doc/current/best_practices.html#controllers-should-be-thin

  -
    question: |
      Consider the following configuration definition for a `drivers` array:

      ```php
      $node
          ->fixXmlConfig('driver')
          ->children()
              ->arrayNode('drivers')
                  ->scalarPrototype()->end()
              ->end()
          ->end()
      ;
      ```
      Which of the following YAML configurations would be valid for this definition?
    answers:
      -
        value: |
          ```yaml
          drivers: [mysql, sqlite]
          ```
        correct: true
      -
        value: |
          ```yaml
          drivers:
              - name: mysql
              - name: sqlite
          ```
        correct: false
      -
        value: |
          ```yaml
          drivers:
                  mysql: ~
                  sqlite: ~
          ```
        correct: false
      -
        value: |
          ```yaml
          drivers: 'mysql, sqlite'
          ```
        correct: false
    help: |
      `scalarPrototype()` indicates that the array node will contain a list of scalar values. The YAML example `drivers: [mysql, sqlite]` correctly represents such a list.
      https://symfony.com/doc/current/components/config/definition.html#prototyped-scalar-nodes

  -
    question: >
      Which of the following is NOT a core component of the Symfony framework?
    answers:
      -
        value: >
          HttpKernel
        correct: false
      -
        value: >
          Doctrine ORM
        correct: true
      -
        value: >
          EventDispatcher
        correct: false
      -
        value: >
          DependencyInjection
        correct: false
    help: |
      Doctrine ORM is a popular third-party library often used with Symfony, but it is not a core Symfony component itself.
      https://symfony.com/doc/current/components/index.html

  -
    question: >
      What is the purpose of the `#[AsCommand]` attribute in a Symfony console command class?
    answers:
      -
        value: >
          To define the command's name, description, and other options directly on the class.
        correct: true
      -
        value: >
          To mark the command as a service for autowiring.
        correct: false
      -
        value: >
          To specify the PHP version required by the command.
        correct: false
      -
        value: >
          To automatically execute the command on a schedule.
        correct: false
    help: |
      The `#[AsCommand]` attribute (introduced in Symfony 6.2) allows you to configure console commands directly in their class definition, replacing the need for `static $defaultName` and `static $defaultDescription`.
      https://symfony.com/doc/current/console.html#configuring-the-command

  -
    question: >
      When installing a new Symfony package via Composer, what is the role of the `symfony/flex` plugin in managing environment variables (e.g., `DATABASE_URL`)?
    answers:
      -
        value: >
          It prompts the user to manually enter environment variables during installation.
        correct: false
      -
        value: >
          It automatically adds or updates relevant environment variables in the `.env` file based on Flex recipes.
        correct: true
      -
        value: >
          It stores all environment variables in the Composer cache.
        correct: false
      -
        value: >
          It ignores environment variables and expects manual configuration.
        correct: false
    help: |
      Symfony Flex recipes often include instructions to add or update environment variables in the `.env` file, simplifying configuration for new packages.
      https://symfony.com/doc/current/setup/flex.html#environment-variables

  -
    question: >
      Which of the following is a common practice for organizing services in a Symfony application?
    answers:
      -
        value: >
          Defining all services in a single, large `services.yaml` file.
        correct: false
      -
        value: >
          Organizing services into logical subdirectories within `src/` and using autoconfigure/autowire.
        correct: true
      -
        value: >
          Storing service definitions directly within controller files.
        correct: false
      -
        value: >
          Using global variables to store service instances.
        correct: false
    help: |
      Symfony encourages organizing services into logical namespaces and directories within `src/`, leveraging autoconfigure and autowire for automatic service registration.
      https://symfony.com/doc/current/best_practices.html#services

  -
    question: >
      What is the primary benefit of using `MicroKernelTrait` when building a Symfony application?
    answers:
      -
        value: >
          It enables full-stack framework features by default.
        correct: false
      -
        value: >
          It provides a lightweight way to create custom kernels for micro-applications or APIs.
        correct: true
      -
        value: >
          It automatically generates all necessary configuration files.
        correct: false
      -
        value: >
          It allows direct access to the global container without autowiring.
        correct: false
    help: |
      The `MicroKernelTrait` simplifies the creation of custom Symfony kernels, making it ideal for building lightweight applications or APIs where you only need specific framework features.
      https://symfony.com/doc/current/configuration/micro_kernel_trait.html

  -
    question: >
      In Symfony, what is the purpose of the `public/index.php` file?
    answers:
      -
        value: >
          It contains all the application's business logic.
        correct: false
      -
        value: >
          It is the single entry point for all HTTP requests to the application.
        correct: true
      -
        value: >
          It stores database connection credentials.
        correct: false
      -
        value: >
          It defines all application routes.
        correct: false
    help: |
      The `public/index.php` file is the front controller, serving as the single entry point for all web requests, bootstrapping the Symfony application.
      https://symfony.com/doc/current/setup/directory_structure.html#public-directory

  -
    question: >
      Which of the following is a key responsibility of a `Middleware` in the Symfony Messenger component?
    answers:
      -
        value: >
          To serialize messages before sending them.
        correct: false
      -
        value: >
          To handle messages using the business logic.
        correct: false
      -
        value: >
          To access the message and its envelope during dispatch and handle cross-cutting concerns.
        correct: true
      -
        value: >
          To retrieve messages from external queues.
        correct: false
    help: |
      Middleware in Messenger can access the message and its envelope during dispatch, allowing for cross-cutting concerns like logging, validation, or transactions.
      https://symfony.com/doc/current/components/messenger.html#middleware

  -
    question: >
      What is the purpose of `Envelope Stamps` in the Symfony Messenger component?
    answers:
      -
        value: >
          To define the message's routing key.
        correct: false
      -
        value: >
          To attach pieces of information or metadata to a message for middleware or transport layers.
        correct: true
      -
        value: >
          To encrypt the message payload.
        correct: false
      -
        value: >
          To specify the message handler.
        correct: false
    help: |
      Envelope Stamps are pieces of information attached to a message within its envelope, providing metadata for middleware or transport layers.
      https://symfony.com/doc/current/components/messenger.html#envelope-and-stamps

  -
    question: >
      When should you consider creating a custom Symfony Bridge?
    answers:
      -
        value: >
          When you need to integrate a third-party library that doesn't have a native Symfony integration.
        correct: true
      -
        value: >
          When you want to define a new service in your application.
        correct: false
      -
        value: >
          When you need to create a new controller.
        correct: false
      -
        value: >
          When you want to override a core Symfony service.
        correct: false
    help: |
      Symfony Bridges are components that provide integration between Symfony and other popular third-party libraries (e.g., Twig, Monolog, Doctrine). You'd create one to integrate a library that lacks existing integration.
      https://symfony.com/doc/current/components/index.html#bridges

  -
    question: >
      What is the main advantage of using PHP attributes (e.g., `#[Route]`, `#[AsCommand]`) for configuration in Symfony 7 over YAML or XML?
    answers:
      -
        value: >
          They are faster to parse.
        correct: false
      -
        value: >
          They allow configuration to be defined directly alongside the code it configures, improving discoverability.
        correct: true
      -
        value: >
          They are more human-readable for complex configurations.
        correct: false
      -
        value: >
          They are automatically versioned by Composer.
        correct: false
    help: |
      PHP attributes allow for co-locating configuration (like routes or command definitions) directly with the code, making it easier to understand and maintain.
      https://symfony.com/doc/current/routing.html#routing-attributes

  -
    question: >
      Which of the following is a recommended best practice for Symfony controllers?
    answers:
      -
        value: >
          Controllers should contain all business logic.
        correct: false
      -
        value: >
          Controllers should be "thin" and delegate business logic to services.
        correct: true
      -
        value: >
          Controllers should directly interact with the database.
        correct: false
      -
        value: >
          Controllers should handle all form processing and validation.
        correct: false
    help: |
      The "thin controllers, fat models/services" principle is a core Symfony best practice, advocating for controllers to primarily handle request/response flow and delegate complex logic.
      https://symfony.com/doc/current/best_practices.html#controllers-should-be-thin

  -
    question: >
      What is the purpose of the `var/cache/` directory in a Symfony application?
    answers:
      -
        value: >
          To store application logs.
        correct: false
      -
        value: >
          To store temporary files and cached data generated by Symfony.
        correct: true
      -
        value: >
          To store database files.
        correct: false
      -
        value: >
          To store Composer dependencies.
        correct: false
    help: |
      The `var/cache/` directory holds all the cache files generated by Symfony, including compiled container, routes, and Twig templates, for performance optimization.
      https://symfony.com/doc/current/setup/directory_structure.html#var-directory

  -
    question: >
      What is the purpose of the `var/log/` directory in a Symfony application?
    answers:
      -
        value: >
          To store application configuration files.
        correct: false
      -
        value: >
          To store database backup files.
        correct: false
      -
        value: >
          To store application log files (e.g., `dev.log`, `prod.log`).
        correct: true
      -
        value: >
          To store compiled assets.
        correct: false
    help: |
      The `var/log/` directory is where Symfony writes its log files, which are crucial for debugging and monitoring application behavior.
      https://symfony.com/doc/current/setup/directory_structure.html#var-directory

  -
    question: >
      Which of the following is a valid way to change the application environment from `dev` to `prod` in a Symfony application?
    answers:
      -
        value: >
          Modifying the `APP_ENV` variable in the `.env` file.
        correct: true
      -
        value: >
          Changing the `environment` parameter in `config/services.yaml`.
        correct: false
      -
        value: >
          Running `composer update --env=prod`.
        correct: false
      -
        value: >
          Editing the `Kernel::getEnvironment()` method directly.
        correct: false
    help: |
      The `APP_ENV` environment variable, typically set in the `.env` file, determines the current application environment (e.g., `dev`, `prod`, `test`).
      https://symfony.com/doc/current/configuration/environments.html#the-app-env-environment-variable

  -
    question: >
      What is the primary role of `config/bundles.php` in a Symfony application?
    answers:
      -
        value: >
          To define application routes.
        correct: false
      -
        value: >
          To register all bundles used by the application, enabling their features.
        correct: true
      -
        value: >
          To configure database connections.
        correct: false
      -
        value: >
          To define application services.
        correct: false
    help: |
      `config/bundles.php` is a PHP file that returns an array of all bundles registered in the application, often conditionally based on the environment.
      https://symfony.com/doc/current/setup/directory_structure.html#config-directory

  -
    question: >
      When is the `KernelEvents::RESPONSE` event dispatched in the Symfony request lifecycle?
    answers:
      -
        value: >
          Before the controller is executed.
        correct: false
      -
        value: >
          After the controller has returned a `Response` object, but before it is sent to the client.
        correct: true
      -
        value: >
          When an exception occurs.
        correct: false
      -
        value: >
          After the response has been sent to the client.
        correct: false
    help: |
      The `KernelEvents::RESPONSE` event is dispatched after the controller has returned a `Response` object, allowing listeners to modify or replace the response before it is sent.
      https://symfony.com/doc/current/components/http_kernel/introduction.html#the-kernel-events

  -
    question: >
      What is the purpose of the `#[AsTwigFilter]` attribute in Symfony 7?
    answers:
      -
        value: >
          To define a Twig function.
        correct: false
      -
        value: >
          To register a custom Twig filter automatically via autoconfiguration.
        correct: true
      -
        value: >
          To create a new Twig extension.
        correct: false
      -
        value: >
          To mark a Twig template for caching.
        correct: false
    help: |
      The `#[AsTwigFilter]` attribute allows you to register custom Twig filters directly on the method that implements the filter, leveraging Symfony's autoconfiguration.
      https://symfony.com/doc/current/templating/twig_extension.html#registering-filters-functions-and-tests-as-services

  -
    question: >
      Which of the following is a valid way to define a base path for assets in Symfony's `framework.yaml`?
    answers:
      -
        value: |
          ```yaml
          framework:
              assets:
                  base_path: '/images'
          ```
        correct: true
      -
        value: |
          ```yaml
          framework:
              assets_base_path: '/images'
          ```
        correct: false
      -
        value: |
          ```yaml
          assets:
              base_path: '/images'
          ```
        correct: false
      -
        value: |
          ```yaml
          framework:
              assets: '/images'
          ```
        correct: false
    help: |
      The `base_path` option under `framework.assets` allows you to define a base path that will be prepended to all asset URLs generated by the Asset component.
      https://symfony.com/doc/current/reference/configuration/framework.html#base-path

  -
    question: >
      What is the primary benefit of using `PropertyInfoExtractor` over direct reflection for extracting property information?
    answers:
      -
        value: >
          It is always faster than reflection.
        correct: false
      -
        value: >
          It provides a unified API to extract information from various sources (e.g., PHP types, PHPDoc, constructor arguments).
        correct: true
      -
        value: >
          It allows modifying property values directly.
        correct: false
      -
        value: >
          It automatically generates getters and setters.
        correct: false
    help: |
      The PropertyInfo component provides a higher-level abstraction over reflection, allowing for the extraction of property information from multiple sources (reflection, PHPDoc, PHPStan) through a unified API.
      https://symfony.com/doc/current/components/property_info.html

  -
    question: >
      Which of the following is a valid built-in type returned by `Symfony\Component\PropertyInfo\Type::getBuiltInType()`?
    answers:
      -
        value: >
          `array`
        correct: true
      -
        value: >
          `integer`
        correct: false
      -
        value: >
          `boolean`
        correct: false
      -
        value: >
          `resource`
        correct: true
    help: |
      `Type::getBuiltInType()` returns one of the PHP built-in types such as `array`, `bool`, `int`, `string`, `object`, `resource`, etc.
      https://symfony.com/doc/current/components/property_info.html#type-object

  -
    question: >
      What does the `throw_exception_on_invalid_index` option in `property_accessor` configuration control?
    answers:
      -
        value: >
          Whether an exception is thrown when a property path is invalid.
        correct: false
      -
        value: >
          Whether an exception is thrown when trying to access an invalid index of an array.
        correct: true
      -
        value: >
          Whether an exception is thrown when a property is not writable.
        correct: false
      -
        value: >
          Whether an exception is thrown when a property is not readable.
        correct: false
    help: |
      The `throw_exception_on_invalid_index` option specifically controls whether `PropertyAccessor` throws an exception when an invalid array index is accessed. By default, this is `false`.
      https://symfony.com/doc/current/reference/configuration/framework.html#throw-exception-on-invalid-index

  -
    question: >
      What is the role of `PhpDocExtractor` in the Symfony PropertyInfo component?
    answers:
      -
        value: >
          To extract property information by analyzing PHPStan annotations.
        correct: false
      -
        value: >
          To extract property information by parsing PHPDoc annotations.
        correct: true
      -
        value: >
          To extract property information from constructor arguments.
        correct: false
      -
        value: >
          To extract property information using PHP's reflection API.
        correct: false
    help: |
      The `PhpDocExtractor` extracts property types and descriptions by parsing PHPDoc annotations.
      https://symfony.com/doc/current/components/property_info.html#phpdocextractor

  -
    question: >
      What is the purpose of the `configureContainer()` method in a Symfony Kernel (especially when using `MicroKernelTrait`)?
    answers:
      -
        value: >
          To define application routes.
        correct: false
      -
        value: >
          To register bundles.
        correct: false
      -
        value: >
          To load and configure services into the Dependency Injection Container.
        correct: true
      -
        value: >
          To handle HTTP requests.
        correct: false
    help: |
      The `configureContainer()` method is where you load configuration files (e.g., `services.yaml`, `framework.yaml`) to define and configure services in the Dependency Injection Container.
      https://symfony.com/doc/current/configuration/micro_kernel_trait.html#configuring-the-container

  -
    question: >
      What is the purpose of the `configureRoutes()` method in a Symfony Kernel (especially when using `MicroKernelTrait`)?
    answers:
      -
        value: >
          To load and configure application routes.
        correct: true
      -
        value: >
          To define application services.
        correct: false
      -
        value: >
          To register bundles.
        correct: false
      -
        value: >
          To handle exceptions.
        correct: false
    help: |
      The `configureRoutes()` method is where you load route definitions from configuration files (e.g., `routes.yaml`) or attributes.
      https://symfony.com/doc/current/configuration/micro_kernel_trait.html#configuring-routes

  -
    question: >
      What does the `version_format` option in Symfony's asset configuration allow you to define?
    answers:
      -
        value: >
          The specific version of the asset component to use.
        correct: false
      -
        value: >
          A `sprintf` pattern to construct an asset's path by incorporating its version.
        correct: true
      -
        value: >
          The format of the `manifest.json` file.
        correct: false
      -
        value: >
          The default version number for all assets.
        correct: false
    help: |
      `version_format` is a `sprintf` pattern used with the `version` option to create the final asset path, allowing for flexible versioning strategies (e.g., query string or path-based).
      https://symfony.com/doc/current/reference/configuration/framework.html#version-format

  -
    question: >
      Which of the following is a benefit of Symfony's "Convention over Configuration" approach?
    answers:
      -
        value: >
          It requires explicit configuration for every component.
        correct: false
      -
        value: >
          It reduces the amount of configuration needed for common tasks.
        correct: true
      -
        value: >
          It makes the framework less flexible.
        correct: false
      -
        value: >
          It eliminates the need for any configuration files.
        correct: false
    help: |
      "Convention over Configuration" means Symfony provides sensible defaults and expects certain conventions, reducing the need for explicit configuration for common scenarios.
      https://symfony.com/doc/current/best_practices.html#convention-over-configuration

  -
    question: >
      What is the primary role of the `KernelEvents::TERMINATE` event?
    answers:
      -
        value: >
          To handle exceptions before the response is sent.
        correct: false
      -
        value: >
          To perform tasks after the response has been sent to the client.
        correct: true
      -
        value: >
          To resolve the controller for the request.
        correct: false
      -
        value: >
          To modify the request before it is handled.
        correct: false
    help: |
      The `KernelEvents::TERMINATE` event is dispatched after the response has been sent to the client, allowing for long-running tasks that don't block the user.
      https://symfony.com/doc/current/components/http_kernel/introduction.html#the-kernel-events

  -
    question: >
      What is the purpose of the `PhpStanExtractor` in the Symfony PropertyInfo component?
    answers:
      -
        value: >
          To extract property information from PHPDoc annotations.
        correct: false
      -
        value: >
          To extract property information by analyzing constructor arguments using reflection.
        correct: false
      -
        value: >
          To extract advanced type and description information from properties and methods by leveraging PHPStan's parser.
        correct: true
      -
        value: >
          To extract property information from database schema.
        correct: false
    help: |
      The `PhpStanExtractor` uses PHPStan's parser to extract more detailed and accurate type and description information, especially for complex types.
      https://symfony.com/doc/current/components/property_info.html#phpstanextractor

  -
    question: >
      In Symfony's release management, what is a "minor" version (e.g., 7.1, 7.2)?
    answers:
      -
        value: >
          A version that introduces backward incompatible changes.
        correct: false
      -
        value: >
          A version that only contains bug fixes and security updates.
        correct: false
      -
        value: >
          A version that introduces new features while maintaining backward compatibility.
        correct: true
      -
        value: >
          A version that is not officially supported.
        correct: false
    help: |
      Minor versions in Symfony introduce new features and improvements but are always backward compatible with the previous minor version of the same major release.
      https://symfony.com/doc/current/contributing/community/releases.html#minor-versions

  -
    question: >
      What is the primary purpose of the `ReflectionExtractor` in the Symfony PropertyInfo component?
    answers:
      -
        value: >
          To extract property information from PHPDoc comments.
        correct: false
      -
        value: >
          To extract property information using PHP's built-in Reflection API.
        correct: true
      -
        value: >
          To extract property information from database schema.
        correct: false
      -
        value: >
          To extract property information from configuration files.
        correct: false
    help: |
      The `ReflectionExtractor` uses PHP's Reflection API to gather basic property information like names, types (from native type hints), readability, and writability.
      https://symfony.com/doc/current/components/property_info.html#reflectionextractor

  -
    question: >
      Which of the following describes Symfony's approach to framework interoperability?
    answers:
      -
        value: >
          Symfony avoids using any external standards to maintain full control.
        correct: false
      -
        value: >
          Symfony actively adopts and implements PHP Standards Recommendations (PSRs) to ensure compatibility.
        correct: true
      -
        value: >
          Symfony only supports its own proprietary interfaces.
        correct: false
      -
        value: >
          Symfony requires all third-party libraries to be rewritten to fit its internal structure.
        correct: false
    help: |
      Symfony is a strong advocate and adopter of PSRs, which promotes interoperability with other PHP libraries and frameworks.
      https://symfony.com/doc/current/best_practices.html#framework-interoperability

  -
    question: >
      What is the purpose of the `ConstructorExtractor` in the Symfony PropertyInfo component?
    answers:
      -
        value: >
          To extract property information from private properties only.
        correct: false
      -
        value: >
          To extract property information by analyzing constructor arguments.
        correct: true
      -
        value: >
          To extract property information from getter methods.
        correct: false
      -
        value: >
          To extract property information from static properties.
        correct: false
    help: |
      The `ConstructorExtractor` (introduced in Symfony 7.3) extracts property information by analyzing the arguments of a class's constructor.
      https://symfony.com/doc/current/components/property_info.html#constructorextractor

  -
    question: >
      What is the primary motivation behind Symfony's Backward Compatibility Promise (BCP)?
    answers:
      -
        value: >
          To force users to upgrade to the latest version immediately.
        correct: false
      -
        value: >
          To ensure that applications built with Symfony can be upgraded to newer versions with minimal effort.
        correct: true
      -
        value: >
          To prevent the introduction of new features.
        correct: false
      -
        value: >
          To make Symfony development slower.
        correct: false
    help: |
      The BCP aims to provide a stable and predictable upgrade path for Symfony applications, reducing the cost and effort of keeping projects up-to-date.
      https://symfony.com/doc/current/contributing/code/bc.html

  -
    question: >
      Which directory in a standard Symfony application is designed to be the web server's document root?
    answers:
      -
        value: >
          `src/`
        correct: false
      -
        value: >
          `config/`
        correct: false
      -
        value: >
          `public/`
        correct: true
      -
        value: >
          `bin/`
        correct: false
    help: |
      The `public/` directory contains the front controller (`index.php`) and all public assets, and it should be configured as the web server's document root.
      https://symfony.com/doc/current/setup/directory_structure.html#public-directory

  -
    question: >
      What is the purpose of the `#[Route]` attribute in Symfony 7?
    answers:
      -
        value: >
          To define a service for dependency injection.
        correct: false
      -
        value: >
          To configure a database connection.
        correct: false
      -
        value: >
          To define the URL path, HTTP methods, and name for a controller action.
        correct: true
      -
        value: >
          To mark a class as a Twig extension.
        correct: false
    help: |
      The `#[Route]` attribute is used to define routing configuration directly on controller methods or invokable controller classes.
      https://symfony.com/doc/current/routing.html#routing-attributes

  -
    question: >
      What is the main advantage of Symfony's component-based architecture?
    answers:
      -
        value: >
          It forces developers to use all Symfony features.
        correct: false
      -
        value: >
          It allows developers to use individual Symfony components in non-Symfony applications.
        correct: true
      -
        value: >
          It makes the framework monolithic.
        correct: false
      -
        value: >
          It eliminates the need for Composer.
        correct: false
    help: |
      Symfony's components are decoupled and reusable, meaning you can use them independently in any PHP project, not just full-stack Symfony applications.
      https://symfony.com/doc/current/components/index.html

  -
    question: >
      What is the typical release schedule for new major versions of Symfony (e.g., 6.0, 7.0)?
    answers:
      -
        value: >
          Every 6 months
        correct: false
      -
        value: >
          Every year
        correct: false
      -
        value: >
          Every 2 years
        correct: true
      -
        value: >
          Every 5 years
        correct: false
    help: |
      New major versions of Symfony are typically released every two years.
      https://symfony.com/doc/current/contributing/community/releases.html#major-versions

  -
    question: >
      Which of the following is a standard practice for managing environment-specific configurations in Symfony?
    answers:
      -
        value: >
          Hardcoding environment variables directly in PHP files.
        correct: false
      -
        value: >
          Using `if/else` statements in `config/services.yaml` to switch configurations.
        correct: false
      -
        value: >
          Leveraging `when@env` blocks in configuration files or separate environment-specific config files.
        correct: true
      -
        value: >
          Storing all environment-specific settings in the database.
        correct: false
    help: |
      Symfony provides mechanisms like `when@env` blocks in configuration files or dedicated `config/packages/{env}/` directories to manage environment-specific settings.
      https://symfony.com/doc/current/configuration/environments.html

  -
    question: >
      What is the purpose of the `APP_SECRET` environment variable in a Symfony application?
    answers:
      -
        value: >
          To define the database password.
        correct: false
      -
        value: >
          To store a secret key used for various security-related tasks like session encryption and CSRF protection.
        correct: true
      -
        value: >
          To specify the application's name.
        correct: false
      -
        value: >
          To configure the email sender address.
        correct: false
    help: |
      The `APP_SECRET` is a unique, random string used by Symfony for security purposes, such as signing session cookies and generating CSRF tokens.
      https://symfony.com/doc/current/reference/configuration/framework.html#secret

  -
    question: >
      Which Symfony component is responsible for compiling and validating configuration trees from various sources (YAML, XML, PHP)?
    answers:
      -
        value: >
          Yaml
        correct: false
      -
        value: >
          Config
        correct: true
      -
        value: >
          PropertyAccess
        correct: false
      -
        value: >
          Serializer
        correct: false
    help: |
      The Config component provides tools to define and validate configuration trees, ensuring that application settings are structured correctly.
      https://symfony.com/doc/current/components/config/definition.html

  -
    question: >
      What is the purpose of the `getParent()` method in a custom Symfony Form Type class?
    answers:
      -
        value: >
          To define the form's default options.
        correct: false
      -
        value: >
          To return the fully-qualified class name of the parent form type from which the custom type inherits functionality.
        correct: true
      -
        value: >
          To get the name of the form field.
        correct: false
      -
        value: >
          To build the form's fields.
        correct: false
    help: |
      The `getParent()` method in a custom form type specifies the parent type from which it inherits behavior, allowing for extension without direct PHP inheritance.
      https://symfony.com/doc/current/form/create_custom_field_type.html#the-getparent-method

  -
    question: >
      How does Symfony Flex handle the installation of Doctrine ORM, including database environment variables?
    answers:
      -
        value: >
          It requires manual configuration of database credentials after installation.
        correct: false
      -
        value: >
          It automatically adds a `DATABASE_URL` environment variable to the `.env` file via a Flex recipe.
        correct: true
      -
        value: >
          It prompts the user for database details during the `composer require` command.
        correct: false
      -
        value: >
          It only installs the Doctrine libraries, without any configuration.
        correct: false
    help: |
      When you `composer require doctrine`, Symfony Flex's recipe for DoctrineBundle automatically adds the `DATABASE_URL` environment variable to your `.env` file.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#_snippet_12

  -
    question: >
      Which of the following is a common naming convention for service IDs in Symfony's Dependency Injection Container?
    answers:
      -
        value: >
          Using PascalCase (e.g., `MyService`).
        correct: false
      -
        value: >
          Using snake_case (e.g., `my_service`).
        correct: true
      -
        value: >
          Using kebab-case (e.g., `my-service`).
        correct: false
      -
        value: >
          Using camelCase (e.g., `myService`).
        correct: false
    help: |
      While not strictly enforced, `snake_case` is a common and recommended convention for service IDs in Symfony.
      https://symfony.com/doc/current/service_container/definitions.html#referencing-services

  -
    question: >
      What is the primary purpose of the `bin/console` executable in a Symfony application?
    answers:
      -
        value: >
          To serve the web application.
        correct: false
      -
        value: >
          To execute command-line tasks and interact with the application.
        correct: true
      -
        value: >
          To manage Composer dependencies.
        correct: false
      -
        value: >
          To compile frontend assets.
        correct: false
    help: |
      The `bin/console` script is the entry point for all command-line operations in a Symfony application, allowing you to run various commands provided by Symfony and your bundles.
      https://symfony.com/doc/current/console.html

  -
    question: >
      Which of the following best describes the "Framework Overloading" concept in Symfony?
    answers:
      -
        value: >
          Running multiple Symfony applications on the same server.
        correct: false
      -
        value: >
          Replacing or extending core Symfony services, templates, or other components with your own custom versions.
        correct: true
      -
        value: >
          Using a different framework alongside Symfony.
        correct: false
      -
        value: >
          Loading too many bundles, leading to performance issues.
        correct: false
    help: |
      Framework overloading refers to the ability to customize or replace parts of the Symfony framework (e.g., services, templates, controllers) with your own implementations.
      https://symfony.com/doc/current/bundles/override.html

  -
    question: >
      What is the main benefit of Symfony's focus on "decoupling" in its architecture?
    answers:
      -
        value: >
          It makes the framework harder to learn.
        correct: false
      -
        value: >
          It allows components to be used independently and promotes easier testing and maintenance.
        correct: true
      -
        value: >
          It increases the overall size of the application.
        correct: false
      -
        value: >
          It requires more boilerplate code.
        correct: false
    help: |
      Decoupling means that components have minimal dependencies on each other, making them reusable, testable, and easier to maintain. This is a core principle of Symfony's architecture.
      https://symfony.com/doc/current/components/index.html

  -
    question: >
      Which PSR defines the common interface for an HTTP client, which Symfony's HttpClient component implements?
    answers:
      -
        value: >
          PSR-7 (HTTP Message Interfaces)
        correct: false
      -
        value: >
          PSR-18 (HTTP Client)
        correct: true
      -
        value: >
          PSR-17 (HTTP Factories)
        correct: false
      -
        value: >
          PSR-15 (HTTP Handlers)
        correct: false
    help: |
      Symfony's HttpClient component implements PSR-18, the HTTP Client interface, ensuring interoperability with other HTTP client implementations.
      https://symfony.com/doc/current/components/http_client.html#psr-18-http-client

  -
    question: >
      What is the recommended way to manage static assets (CSS, JavaScript, images) in a modern Symfony application?
    answers:
      -
        value: >
          Manually placing them in the `public/` directory and linking directly.
        correct: false
      -
        value: >
          Using Webpack Encore (or similar build tools) with the Symfony Asset component.
        correct: true
      -
        value: >
          Storing them in the `src/` directory and serving them via PHP.
        correct: false
      -
        value: >
          Embedding all assets directly into Twig templates.
        correct: false
    help: |
      Symfony recommends using Webpack Encore for managing and compiling frontend assets, integrated with the Asset component for proper URL generation and versioning.
      https://symfony.com/doc/current/frontend.html

  -
    question: >
      What is the purpose of the `#[Target]` attribute in Symfony's Dependency Injection?
    answers:
      -
        value: >
          To specify the target class for a service.
        correct: false
      -
        value: >
          To define an alias for a service.
        correct: false
      -
        value: >
          To explicitly specify the service ID or parameter name when autowiring an argument that cannot be uniquely identified by its type.
        correct: true
      -
        value: >
          To mark a service as private.
        correct: false
    help: |
      The `#[Target]` attribute allows you to explicitly name the service or parameter to be injected when autowiring cannot determine it uniquely from the type hint (e.g., multiple services implement the same interface).
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring-with-target-attribute

  -
    question: >
      Which of the following is a key characteristic of Symfony's "full-stack" framework approach?
    answers:
      -
        value: >
          It only provides tools for the backend.
        correct: false
      -
        value: >
          It provides a comprehensive set of tools and components for building entire web applications, from routing to templating and security.
        correct: true
      -
        value: >
          It requires all components to be installed manually.
        correct: false
      -
        value: >
          It is designed only for microservices.
        correct: false
    help: |
      Symfony as a full-stack framework provides all the necessary tools and components to build complete web applications, covering various aspects of web development.
      https://symfony.com/doc/current/introduction/the_architecture.html

  -
    question: >
      What is the purpose of the `composer.json` file in a Symfony application?
    answers:
      -
        value: >
          To define application routes.
        correct: false
      -
        value: >
          To manage PHP dependencies and autoloading.
        correct: true
      -
        value: >
          To store application configuration.
        correct: false
      -
        value: >
          To define database schema.
        correct: false
    help: |
      The `composer.json` file is Composer's configuration file, defining project dependencies, scripts, and autoloading rules.
      https://getcomposer.org/doc/01-basic-usage.md#composer-json-project-setup