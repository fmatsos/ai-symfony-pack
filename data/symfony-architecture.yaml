category: Symfony Architecture
questions:
  -
    question: "What is the primary purpose of Symfony Flex in a Symfony 7 application?"
    answers:
      - { value: "To replace Composer as the primary dependency manager.", correct: false }
      - { value: "To provide a streamlined way to install and configure Symfony packages and bundles.", correct: true }
      - { value: "To automatically generate all application code, including controllers and entities.", correct: false }
      - { value: "To enforce a specific UI framework like Bootstrap or Tailwind CSS.", correct: false }
    help: |
      Symfony Flex is a Composer plugin that simplifies the installation and management of Symfony applications by automating common tasks like package configuration.
      https://github.com/symfony/symfony-docs/blob/7.3/setup.rst#_snippet_8
  -
    question: "When using Symfony Flex, what happens if you run `composer require logger`?"
    answers:
      - { value: "Composer will report an error because 'logger' is not a valid package name.", correct: false }
      - { value: "Symfony Flex will intercept the alias and install `symfony/monolog-bundle` along with its recipe.", correct: true }
      - { value: "Symfony Flex will install a generic PHP logging library without any specific Symfony integration.", correct: false }
      - { value: "The command will prompt you to manually select a logging bundle from a list.", correct: false }
    help: |
      Symfony Flex recognizes common aliases for Symfony packages and automatically installs the correct package and its recipe.
      https://github.com/symfony/symfony-docs/blob/7.3/quick_tour/the_architecture.rst#_snippet_0
  -
    question: "Which of the following Composer commands is used to install Symfony Flex itself?"
    answers:
      - { value: "`composer install symfony/flex`", correct: false }
      - { value: "`composer require symfony/flex`", correct: true }
      - { value: "`symfony flex:install`", correct: false }
      - { value: "`composer create-project symfony/flex-skeleton`", correct: false }
    help: |
      `composer require symfony/flex` is the command to add Symfony Flex as a dependency to your project.
      https://github.com/symfony/symfony-docs/blob/7.3/setup/flex.rst#_snippet_1
  -
    question: "You want to change the default `src/` directory used by Symfony Flex recipes to `src/App`. How can you achieve this?"
    answers:
      - { value: "Modify the `bin/console` file to point to the new directory.", correct: false }
      - { value: "Set the `APP_SRC_DIR` environment variable in your `.env` file.", correct: false }
      - { value: "Add a `src-dir` key in the `extra` section of your `composer.json` file.", correct: true }
      - { value: "Run `php bin/console flex:config:src-dir src/App`.", correct: false }
    help: |
      The `src-dir` key in the `extra` section of `composer.json` allows customizing the source directory for Flex recipes.
      https://github.com/symfony/symfony-docs/blob/7.3/setup/flex.rst#_snippet_6
  -
    question: "Which of the following statements about Symfony's license are true?"
    answers:
      - { value: "Symfony is licensed under the MIT license.", correct: true }
      - { value: "Symfony is proprietary software and requires a commercial license.", correct: false }
      - { value: "Symfony components are GPL licensed, but the framework is LGPL.", correct: false }
      - { value: "Symfony uses a dual-licensing model, requiring a fee for commercial use.", correct: false }
    help: |
      Symfony is open-source software released under the MIT license. This information is typically found in the project's LICENSE file.
      https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/standards.rst#_snippet_1
  -
    question: "What is the primary characteristic of Symfony Components?"
    answers:
      - { value: "They are tightly coupled to the full Symfony Framework and cannot be used independently.", correct: false }
      - { value: "They are reusable, decoupled PHP libraries that can be used in any PHP project, not just Symfony applications.", correct: true }
      - { value: "They are only available as part of the Symfony Standard Edition distribution.", correct: false }
      - { value: "They provide a complete MVC framework on their own, without needing other components.", correct: false }
    help: |
      Symfony Components are standalone PHP libraries designed for reusability.
      https://github.com/symfony/symfony-docs/blob/7.3/components/using_components.rst#_snippet_1
  -
    question: "You want to parse a YAML string in a standalone PHP script without the full Symfony Framework. Which Symfony component would you use?"
    answers:
      - { value: "Symfony/Config", correct: false }
      - { value: "Symfony/Yaml", correct: true }
      - { value: "Symfony/Serializer", correct: false }
      - { value: "Symfony/Console", correct: false }
    help: |
      The Symfony Yaml component provides functions for parsing and dumping YAML.
      https://github.com/symfony/symfony-docs/blob/7.3/components/yaml.rst#_snippet_0
  -
    question: "Which Symfony component provides an object-oriented abstraction layer for HTTP requests and responses?"
    answers:
      - { value: "Symfony/HttpKernel", correct: false }
      - { value: "Symfony/Routing", correct: false }
      - { value: "Symfony/HttpFoundation", correct: true }
      - { value: "Symfony/HttpClient", correct: false }
    help: |
      The HttpFoundation component defines an object-oriented layer for the HTTP specification.
      https://github.com/symfony/symfony-docs/blob/7.3/introduction/http_fundamentals.rst#_snippet_5
  -
    question: "What is the purpose of the `Symfony\\Component\\Asset\\PackageInterface`?"
    answers:
      - { value: "To define how assets are compiled and minified.", correct: false }
      - { value: "To provide methods for retrieving asset versions and public URLs.", correct: true }
      - { value: "To manage asset dependencies and automatically include them in templates.", correct: false }
      - { value: "To serve assets directly from the filesystem without a web server.", correct: false }
    help: |
      `PackageInterface` defines the contract for asset packages, including methods for versioning and URL generation.
      https://github.com/symfony/symfony-docs/blob/7.3/components/asset.rst#_snippet_3
  -
    question: "Which of the following is a core responsibility of the `Symfony\\Component\\Messenger\\Middleware` component?"
    answers:
      - { value: "To serialize and send messages to a message broker.", correct: false }
      - { value: "To retrieve and deserialize messages from a message queue.", correct: false }
      - { value: "To handle messages using the business logic applicable to the messages.", correct: false }
      - { value: "To access the message and its wrapper (the envelope) while it is dispatched through the bus, handling cross-cutting concerns.", correct: true }
    help: |
      Middleware intercepts messages during dispatch to handle concerns like logging, validation, or transactions.
      https://github.com/symfony/symfony-docs/blob/7.3/components/messenger.rst#_snippet_1
  -
    question: "What is a 'Bridge' in the context of Symfony's architecture?"
    answers:
      - { value: "A standalone application built on top of Symfony components.", correct: false }
      - { value: "A component that provides integration between a third-party library and Symfony's core components.", correct: true }
      - { value: "A tool for migrating legacy PHP applications to Symfony.", correct: false }
      - { value: "A mechanism for connecting multiple Symfony applications together.", correct: false }
    help: |
      Bridges provide integration between Symfony components and other popular PHP libraries.
      https://github.com/symfony/symfony-docs/blob/7.3/components/form.rst#_snippet_13
  -
    question: "Which Symfony Bridge is essential for rendering forms using Twig templates?"
    answers:
      - { value: "Symfony/AssetBridge", correct: false }
      - { value: "Symfony/DoctrineBridge", correct: false }
      - { value: "Symfony/TwigBridge", correct: true }
      - { value: "Symfony/SecurityBridge", correct: false }
    help: |
      TwigBridge provides the necessary integration for rendering Symfony Forms with Twig.
      https://github.com/symfony/symfony-docs/blob/7.3/components/form.rst#_snippet_13
  -
    question: "Which of the following directories is NOT part of the default Symfony Flex project structure?"
    answers:
      - { value: "src/", correct: false }
      - { value: "app/", correct: true }
      - { value: "config/", correct: false }
      - { value: "public/", correct: false }
    help: |
      The `app/` directory was part of older Symfony Standard Edition, but not the default Flex structure.
      https://github.com/symfony/symfony-docs/blob/7.3/setup/flex.rst#_snippet_0
  -
    question: "Where should most of your application's custom PHP classes (e.g., controllers, services, entities) reside in a Symfony Flex project?"
    answers:
      - { value: "In the `vendor/` directory.", correct: false }
      - { value: "In the `public/` directory.", correct: false }
      - { value: "In the `src/` directory.", correct: true }
      - { value: "In the `bin/` directory.", correct: false }
    help: |
      The `src/` directory is where all your application's custom PHP code lives.
      https://github.com/symfony/symfony-docs/blob/7.3/best_practices.rst#_snippet_1
  -
    question: "When defining application-wide configuration values in Symfony, what is the recommended best practice for naming parameters in `config/services.yaml`?"
    answers:
      - { value: "Use generic names like `dir` or `path`.", correct: false }
      - { value: "Prefix them with `app.` and use short, descriptive names (e.g., `app.contents_dir`).", correct: true }
      - { value: "Use only uppercase names with underscores (e.g., `APP_DIRECTORY`).", correct: false }
      - { value: "Store them directly in environment variables without defining them as parameters.", correct: false }
    help: |
      Parameters should be prefixed with `app.` and have clear, descriptive names.
      https://github.com/symfony/symfony-docs/blob/7.3/best_practices.rst#_snippet_2
  -
    question: "What is the purpose of the `Symfony\\Component\\HttpFoundation\\Request::createFromGlobals()` method?"
    answers:
      - { value: "To create a new HTTP response object from global variables.", correct: false }
      - { value: "To create a new Request object by populating it from PHP's superglobals (`$_GET`, `$_POST`, `$_SERVER`, etc.).", correct: true }
      - { value: "To send an HTTP request to an external server.", correct: false }
      - { value: "To retrieve a specific request parameter from the URL query string.", correct: false }
    help: |
      `createFromGlobals()` is used to instantiate a Request object from the current PHP execution environment.
      https://github.com/symfony/symfony-docs/blob/7.3/introduction/from_flat_php_to_symfony.rst#_snippet_19
  -
    question: "Which method of the `Symfony\\Component\\HttpFoundation\\Request` object would you use to get the URI path (e.g., `/blog/post`) without the query string?"
    answers:
      - { value: "`$request->getUri()`", correct: false }
      - { value: "`$request->getPathInfo()`", correct: true }
      - { value: "`$request->query->all()`", correct: false }
      - { value: "`$request->getBaseUrl()`", correct: false }
    help: |
      `getPathInfo()` returns the path of the request, excluding the script filename and query string.
      https://github.com/symfony/symfony-docs/blob/7.3/introduction/http_fundamentals.rst#_snippet_5
  -
    question: "In a Symfony application, what is the primary role of the `HttpKernel::handle()` method?"
    answers:
      - { value: "To send the HTTP response back to the client.", correct: false }
      - { value: "To handle an incoming HTTP Request and convert it into a Response.", correct: true }
      - { value: "To resolve controller arguments based on the request.", correct: false }
      - { value: "To dispatch all kernel events in a specific order.", correct: false }
    help: |
      The `handle()` method is the core of the HttpKernel, responsible for the entire request-response lifecycle.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_kernel.rst#_snippet_1
  -
    question: "You need to access the current `Request` object within a Symfony service. Which service should you inject to reliably get the current request?"
    answers:
      - { value: "`Symfony\\Component\\HttpFoundation\\Request` directly.", correct: false }
      - { value: "`Symfony\\Component\\HttpFoundation\\RequestStack` and then call `getCurrentRequest()`.", correct: true }
      - { value: "`Symfony\\Component\\HttpKernel\\HttpKernelInterface`.", correct: false }
      - { value: "The global `$_SERVER` superglobal.", correct: false }
    help: |
      The `RequestStack` service is designed to provide access to the current request in any service.
      https://github.com/symfony/symfony-docs/blob/7.3/service_container/request.rst#_snippet_0
  -
    question: "When a Symfony controller returns a value that is NOT a `Response` object (e.g., an array or a string), which kernel event is dispatched to convert this value into a `Response`?"
    answers:
      - { value: "`kernel.request`", correct: false }
      - { value: "`kernel.controller`", correct: false }
      - { value: "`kernel.view`", correct: true }
      - { value: "`kernel.response`", correct: false }
    help: |
      The `kernel.view` event is specifically for transforming non-Response return values from controllers into Response objects.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_kernel.rst#_snippet_12
  -
    question: "Which of the following exceptions is typically thrown by Symfony when a requested resource (e.g., a page or API endpoint) is not found?"
    answers:
      - { value: "`\\RuntimeException`", correct: false }
      - { value: "`Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException`", correct: true }
      - { value: "`Symfony\\Component\\Routing\\Exception\\ResourceNotFoundException`", correct: false }
      - { value: "`\\InvalidArgumentException`", correct: false }
    help: |
      `NotFoundHttpException` is the standard way to signal a 404 Not Found error in Symfony controllers.
      https://github.com/symfony/symfony-docs/blob/7.3/controller.rst#_snippet_16
  -
    question: "You want to customize the HTTP status code and headers for a specific custom exception in Symfony. Which attribute can you use on your exception class?"
    answers:
      - { value: "`#[AsException]`", correct: false }
      - { value: "`#[WithHttpStatus]`", correct: true }
      - { value: "`#[ResponseStatus]`", correct: false }
      - { value: "`#[HttpError]`", correct: false }
    help: |
      The `#[WithHttpStatus]` attribute allows mapping custom exceptions to specific HTTP status codes and headers.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#_snippet_40
  -
    question: "When making an HTTP request with Symfony's HTTP Client, which exception interface should you catch to handle transport-level errors (e.g., network issues, timeouts)?"
    answers:
      - { value: "`Symfony\\Component\\HttpClient\\Exception\\ClientExceptionInterface`", correct: false }
      - { value: "`Symfony\\Component\\HttpClient\\Exception\\ServerExceptionInterface`", correct: false }
      - { value: "`Symfony\\Contracts\\HttpClient\\Exception\\TransportExceptionInterface`", correct: true }
      - { value: "`\\RuntimeException`", correct: false }
    help: |
      `TransportExceptionInterface` is the general interface for errors that occur at the transport layer.
      https://github.com/symfony/symfony-docs/blob/7.3/http_client.rst#_snippet_55
  -
    question: "What is the purpose of the `handle_all_throwables` configuration option in `framework.yaml`?"
    answers:
      - { value: "To disable all PHP error logging in production.", correct: false }
      - { value: "To force all exceptions to be logged at the `CRITICAL` level.", correct: false }
      - { value: "To ensure the Symfony kernel catches all `\\Throwable` exceptions and converts them into HTTP responses.", correct: true }
      - { value: "To re-throw all exceptions, preventing Symfony from handling them.", correct: false }
    help: |
      When `handle_all_throwables` is true, Symfony's kernel will catch and handle all PHP `Throwable` instances.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/configuration/framework.rst#_snippet_46
  -
    question: "Which of the following `ConsoleEvents` is dispatched whenever an exception occurs during command execution?"
    answers:
      - { value: "`ConsoleEvents::COMMAND`", correct: false }
      - { value: "`ConsoleEvents::TERMINATE`", correct: false }
      - { value: "`ConsoleEvents::ERROR`", correct: true }
      - { value: "`ConsoleEvents::SIGNAL`", correct: false }
    help: |
      `ConsoleEvents::ERROR` is dispatched when a command throws an exception.
      https://github.com/symfony/symfony-docs/blob/7.3/components/console/events.rst#_snippet_3
  -
    question: "What is the primary benefit of using an Event Subscriber (implementing `EventSubscriberInterface`) over a regular Event Listener in Symfony?"
    answers:
      - { value: "Subscribers are always executed before listeners, regardless of priority.", correct: false }
      - { value: "Subscribers automatically register all public methods as listeners without explicit configuration.", correct: false }
      - { value: "Subscribers encapsulate all event registration logic within a single class, making it more organized and reusable.", correct: true }
      - { value: "Subscribers can only listen to Kernel events, while listeners can listen to any event.", correct: false }
    help: |
      Event subscribers centralize event configuration, making them easier to manage.
      https://github.com/symfony/symfony-docs/blob/7.3/components/event_dispatcher.rst#_snippet_12
  -
    question: "You want to prevent further listeners from being called for a specific event after your listener has processed it. Which method should you call on the `Event` object?"
    answers:
      - { value: "`$event->cancel()`", correct: false }
      - { value: "`$event->stopListening()`", correct: false }
      - { value: "`$event->stopPropagation()`", correct: true }
      - { value: "`$event->preventPropagation()`", correct: false }
    help: |
      The `stopPropagation()` method stops the event from being passed to subsequent listeners.
      https://github.com/symfony/symfony-docs/blob/7.3/components/event_dispatcher.rst#_snippet_15
  -
    question: "Which `KernelEvent` is dispatched FIRST in the Symfony request lifecycle, allowing you to add more information to the `Request` object or return a `Response` directly?"
    answers:
      - { value: "`kernel.controller`", correct: false }
      - { value: "`kernel.request`", correct: true }
      - { value: "`kernel.response`", correct: false }
      - { value: "`kernel.view`", correct: false }
    help: |
      `kernel.request` is the very first event, making it suitable for early request manipulation or short-circuiting.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_kernel.rst#_snippet_4
  -
    question: "Which command-line tool can you use to list all registered events and their associated listeners in a Symfony application?"
    answers:
      - { value: "`php bin/console debug:container --events`", correct: false }
      - { value: "`php bin/console event:list`", correct: false }
      - { value: "`php bin/console debug:event-dispatcher`", correct: true }
      - { value: "`php bin/console router:debug --events`", correct: false }
    help: |
      The `debug:event-dispatcher` command provides a comprehensive list of all configured event listeners.
      https://github.com/symfony/symfony-docs/blob/7.3/event_dispatcher.rst#_snippet_10
  -
    question: "Which `FormEvents` is dispatched at the very beginning of the form submission process, before data is bound, allowing you to change request data or dynamically add/remove form fields?"
    answers:
      - { value: "`FormEvents::SUBMIT`", correct: false }
      - { value: "`FormEvents::POST_SUBMIT`", correct: false }
      - { value: "`FormEvents::PRE_SUBMIT`", correct: true }
      - { value: "`FormEvents::POST_SET_DATA`", correct: false }
    help: |
      `PRE_SUBMIT` is the earliest event during submission, ideal for modifying raw request data or form structure.
      https://github.com/symfony/symfony-docs/blob/7.3/form/events.rst#_snippet_3
  -
    question: "What is the recommended approach for organizing your application's custom code (e.g., `Controller`, `Entity`, `Repository`) in a Symfony Flex project?"
    answers:
      - { value: "Place all code directly in the `src/` directory without subdirectories.", correct: false }
      - { value: "Create a separate bundle for each logical part of your application.", correct: false }
      - { value: "Organize code into subdirectories under `src/` based on their type (e.g., `src/Controller`, `src/Entity`).", correct: true }
      - { value: "Store all custom code in the `var/` directory.", correct: false }
    help: |
      The default Symfony Flex structure encourages organizing code by type within the `src/` directory.
      https://github.com/symfony/symfony-docs/blob/7.3/best_practices.rst#_snippet_1
  -
    question: "When should you use a PHP class constant (e.g., `public const FOO = 'bar';`) instead of a service container parameter for a configuration value in Symfony?"
    answers:
      - { value: "When the value needs to be accessible globally, such as in Twig templates or Doctrine entities, and is not environment-dependent.", correct: true }
      - { value: "When the value is sensitive and should be loaded from environment variables.", correct: false }
      - { value: "When the value needs to be dynamically changed at runtime.", correct: false }
      - { value: "When the value is only used within a single service definition.", correct: false }
    help: |
      Class constants are suitable for globally accessible, static configuration values.
      https://github.com/symfony/symfony-docs/blob/7.3/best_practices.rst#_snippet_3
  -
    question: "Which command is used to create a new Symfony application based on the official Symfony Demo application, providing a fully-functional example with recommended practices?"
    answers:
      - { value: "`composer create-project symfony/skeleton my_project --demo`", correct: false }
      - { value: "`symfony new my_project_directory --demo`", correct: true }
      - { value: "`php bin/console app:install-demo`", correct: false }
      - { value: "`composer require symfony/demo-app`", correct: false }
    help: |
      The `symfony new --demo` command creates a project based on the Symfony Demo application.
      https://github.com/symfony/symfony-docs/blob/7.3/setup.rst#_snippet_12
  -
    question: "What is the maintenance policy for a standard Symfony version (non-LTS) regarding bug fixes and security issues?"
    answers:
      - { value: "Bugs fixed for 1 year, Security issues fixed for 2 years.", correct: false }
      - { value: "Bugs fixed for 8 months, Security issues fixed for 8 months.", correct: true }
      - { value: "Bugs fixed for 2 years, Security issues fixed for 3 years.", correct: false }
      - { value: "Bugs fixed for 3 years, Security issues fixed for 4 years.", correct: false }
    help: |
      Standard Symfony versions receive bug fixes and security updates for 8 months.
      https://github.com/symfony/symfony-docs/blob/7.3/contributing/community/releases.rst#_snippet_0
  -
    question: "After a major Symfony version upgrade, what is a crucial step to ensure the application uses the newly updated components correctly and to avoid unexpected behavior?"
    answers:
      - { value: "Run `composer update --prefer-lowest`.", correct: false }
      - { value: "Clear the entire Symfony cache directory (`var/cache/*`).", correct: true }
      - { value: "Manually update all `config/packages/*.yaml` files.", correct: false }
      - { value: "Reinstall all Composer dependencies using `composer install --no-scripts`.", correct: false }
    help: |
      Clearing the cache is essential after major upgrades to ensure new code and configurations are loaded.
      https://github.com/symfony/symfony-docs/blob/7.3/setup/upgrade_major.rst#_snippet_7
  -
    question: "Which Composer configuration option allows you to specify unreleased Symfony package versions and enables Composer to install unstable packages for testing new Symfony features?"
    answers:
      - { value: "`prefer-stable`", correct: false }
      - { value: "`minimum-stability`", correct: true }
      - { value: "`allow-unstable`", correct: false }
      - { value: "`dev-dependencies`", correct: false }
    help: |
      Setting `minimum-stability` to `beta` or `dev` allows Composer to install unstable versions.
      https://github.com/symfony/symfony-docs/blob/7.3/setup/unstable_versions.rst#_snippet_1
  -
    question: "When deploying a Symfony application to production, which Composer flags are recommended for installing dependencies to ensure optimal performance and exclude development-only packages?"
    answers:
      - { value: "`--dev --optimize-autoloader`", correct: false }
      - { value: "`--no-scripts --no-plugins`", correct: false }
      - { value: "`--no-dev --optimize-autoloader`", correct: true }
      - { value: "`--prefer-lowest --no-interaction`", correct: false }
    help: |
      `--no-dev` excludes dev dependencies, and `--optimize-autoloader` improves autoloading performance.
      https://github.com/symfony/symfony-docs/blob/7.3/deployment.rst#_snippet_4
  -
    question: "What is Symfony's Backward Compatibility (BC) promise primarily concerned with?"
    answers:
      - { value: "Guaranteeing that all new features will be compatible with old PHP versions.", correct: false }
      - { value: "Ensuring that existing public APIs remain stable and do not break userland code in minor versions.", correct: true }
      - { value: "Promising that no code will ever be deprecated or removed.", correct: false }
      - { value: "Providing automatic migration tools for all major version upgrades.", correct: false }
    help: |
      Symfony's BC promise focuses on maintaining stability of public APIs across minor versions.
      https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/bc.rst#_snippet_0
  -
    question: "You need to add a new optional argument to an existing public method in a Symfony component without breaking backward compatibility in a minor release. What is the recommended initial approach?"
    answers:
      - { value: "Add the argument with a default value directly to the method signature.", correct: false }
      - { value: "Add the argument as a commented-out parameter in the method signature and use `func_num_args()` and `func_get_arg()`.", correct: true }
      - { value: "Create a new method with the additional argument and deprecate the old one.", correct: false }
      - { value: "Make the method `final` and introduce the new argument in a new version.", correct: false }
    help: |
      Using `func_num_args()` and `func_get_arg()` with a commented-out argument allows for BC in minor versions.
      https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/bc.rst#_snippet_2
  -
    question: "Which environment variable can be used to specify a required Symfony version for testing in a CI environment, ensuring all Symfony packages adhere to that version?"
    answers:
      - { value: "`SYMFONY_VERSION`", correct: false }
      - { value: "`APP_SYMFONY_VERSION`", correct: false }
      - { value: "`SYMFONY_REQUIRE`", correct: true }
      - { value: "`COMPOSER_SYMFONY_VERSION`", correct: false }
    help: |
      `SYMFONY_REQUIRE` allows setting a global Symfony version constraint for Composer.
      https://github.com/symfony/symfony-docs/blob/7.3/bundles/best_practices.rst#_snippet_2
  -
    question: "Which of the following changes to a public method in a Symfony component is generally NOT allowed under the Backward Compatibility promise?"
    answers:
      - { value: "Adding a new public method.", correct: false }
      - { value: "Changing the method's name.", correct: true }
      - { value: "Adding a new argument with a default value.", correct: true }
      - { value: "Making the method `final`.", correct: true }
    help: |
      Changing a public method's name, adding arguments with default values, or making it final are generally BC breaks.
      https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/bc.rst#_snippet_1
  -
    question: "What is the recommended way to explicitly trigger a deprecation warning in your PHP code for a feature that will be removed in a future Symfony major version?"
    answers:
      - { value: "`trigger_error('Deprecated feature', E_USER_DEPRECATED);`", correct: false }
      - { value: "`@trigger_deprecation('vendor/package', 'X.Y', 'Your message');`", correct: true }
      - { value: "`throw new \\DeprecatedException('Your message');`", correct: false }
      - { value: "`console.log('Deprecated feature');`", correct: false }
    help: |
      The `trigger_deprecation()` function from `symfony/deprecation-contracts` is the standard way to issue deprecation warnings.
      https://github.com/symfony/symfony-docs/blob/7.3/components/phpunit_bridge.rst#_snippet_6
  -
    question: "You have an old route named `product_show` that you want to deprecate in favor of a new route `product_details`. How can you achieve this while providing backward compatibility in Symfony 7?"
    answers:
      - { value: "Remove `product_show` and add a redirect to `product_details`.", correct: false }
      - { value: "Define `product_show` as an alias of `product_details` and mark the alias as deprecated.", correct: true }
      - { value: "Use a custom event listener to intercept `product_show` and redirect.", correct: false }
      - { value: "Modify the `Router` service to automatically map `product_show` to `product_details`.", correct: false }
    help: |
      Route aliases can be deprecated, allowing old route names to point to new ones with a deprecation notice.
      https://github.com/symfony/symfony-docs/blob/7.3/routing.rst#_snippet_35
  -
    question: "Which environment variable is used to configure the Symfony PHPUnit Bridge to control deprecation reporting during tests (e.g., to generate a baseline or ignore specific deprecations)?"
    answers:
      - { value: "`PHPUNIT_DEPRECATIONS`", correct: false }
      - { value: "`SYMFONY_TEST_DEPRECATIONS`", correct: false }
      - { value: "`SYMFONY_DEPRECATIONS_HELPER`", correct: true }
      - { value: "`APP_DEPRECATIONS_MODE`", correct: false }
    help: |
      `SYMFONY_DEPRECATIONS_HELPER` provides fine-grained control over deprecation reporting in tests.
      https://github.com/symfony/symfony-docs/blob/7.3/components/phpunit_bridge.rst#_snippet_7
  -
    question: "What is the purpose of the `debug:container --deprecations` command in Symfony?"
    answers:
      - { value: "To list all deprecated services and parameters that are currently in use in your application.", correct: true }
      - { value: "To generate a report of all deprecated classes in your `vendor/` directory.", correct: false }
      - { value: "To automatically fix deprecation warnings in your configuration files.", correct: false }
      - { value: "To show a list of all deprecated commands available in the console.", correct: false }
    help: |
      This command helps identify deprecations related to the service container's compilation.
      https://github.com/symfony/symfony-docs/blob/7.3/components/phpunit_bridge.rst#_snippet_14
  -
    question: "When documenting a deprecation in Symfony's `CHANGELOG.md` or `UPGRADE.md` files, what information is typically included?"
    answers:
      - { value: "The exact date and time the deprecation was introduced.", correct: false }
      - { value: "The name of the developer who introduced the deprecation.", correct: false }
      - { value: "The version in which the feature was deprecated and a clear explanation of the replacement or alternative.", correct: true }
      - { value: "A list of all projects that are affected by the deprecation.", correct: false }
    help: |
      Deprecation entries should clearly state the version and provide guidance for migration.
      https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/conventions.rst#_snippet_8
  -
    question: "How can you override a Symfony bundle's default template (e.g., `templates/bundles/TwigBundle/Exception/error.html.twig`) with your own custom version?"
    answers:
      - { value: "Modify the bundle's `src/Resources/views/` directory directly.", correct: false }
      - { value: "Place your custom template in `templates/bundles/<BundleName>/` with the same path as the original.", correct: true }
      - { value: "Configure a new Twig path in `twig.yaml` that points to your custom template.", correct: false }
      - { value: "Use the `template_override` option in your controller.", correct: false }
    help: |
      Symfony's bundle inheritance mechanism allows overriding templates by placing them in specific paths.
      https://github.com/symfony/symfony-docs/blob/7.3/controller/error_pages.rst#_snippet_1
  -
    question: "What is 'service decoration' in Symfony's Dependency Injection component?"
    answers:
      - { value: "Adding visual styles to a service in the Web Debug Toolbar.", correct: false }
      - { value: "Replacing a service with a completely different implementation.", correct: false }
      - { value: "Wrapping an existing service with another service to add or modify its behavior without changing its original class.", correct: true }
      - { value: "Making a service public so it can be accessed from anywhere in the application.", correct: false }
    help: |
      Service decoration allows you to wrap and extend existing services.
      https://github.com/symfony/symfony-docs/blob/7.3/service_container/service_decoration.rst#_snippet_13
  -
    question: "A bundle's extension implements `PrependExtensionInterface`. When is its `prepend()` method called during the container compilation process?"
    answers:
      - { value: "After all other bundle extensions' `load()` methods have been called.", correct: false }
      - { value: "Before any other bundle extensions' `load()` methods are called.", correct: true }
      - { value: "Only when the bundle is explicitly enabled in a specific environment.", correct: false }
      - { value: "During the `kernel.request` event, before any controllers are executed.", correct: false }
    help: |
      `prepend()` methods are called early in the compilation process, allowing extensions to modify other bundles' configurations.
      https://github.com/symfony/symfony-docs/blob/7.3/bundles/prepend_extension.rst#_snippet_3
  -
    question: "Which of the following PSRs (PHP Standard Recommendations) does Symfony's `EventDispatcher` component adhere to?"
    answers:
      - { value: "PSR-3 (Logger Interface)", correct: false }
      - { value: "PSR-7 (HTTP Message Interfaces)", correct: false }
      - { value: "PSR-14 (Event Dispatcher)", correct: true }
      - { value: "PSR-11 (Container Interface)", correct: false }
    help: |
      The EventDispatcher component implements PSR-14.
      https://www.php-fig.org/psr/psr-14/
  -
    question: "You have a PSR-6 compatible cache pool (e.g., `FilesystemAdapter`). You need to use it with a library that only accepts a PSR-16 `CacheInterface`. Which Symfony class can you use to adapt your PSR-6 cache to PSR-16?"
    answers:
      - { value: "`Symfony\\Component\\Cache\\Adapter\\Psr6Adapter`", correct: false }
      - { value: "`Symfony\\Component\\Cache\\Psr16Cache`", correct: true }
      - { value: "`Symfony\\Component\\Cache\\CacheFactory`", correct: false }
      - { value: "`Symfony\\Component\\Cache\\Simple\\Psr16Cache`", correct: false }
    help: |
      `Psr16Cache` wraps a PSR-6 cache pool to expose a PSR-16 interface.
      https://github.com/symfony/symfony-docs/blob/7.3/components/cache/psr6_psr16_adapters.rst#_snippet_3
  -
    question: "Which Symfony component provides a `ContainerCommandLoader` that allows lazy loading of console commands from a PSR-11 compatible dependency injection container?"
    answers:
      - { value: "Symfony/Console", correct: true }
      - { value: "Symfony/DependencyInjection", correct: false }
      - { value: "Symfony/FrameworkBundle", correct: false }
      - { value: "Symfony/Messenger", correct: false }
    help: |
      `ContainerCommandLoader` is part of the Console component and uses PSR-11 for lazy loading.
      https://github.com/symfony/symfony-docs/blob/7.3/console/lazy_commands.rst#_snippet_3
  -
    question: "Which of the following is the correct naming convention for a getter method that retrieves a collection of 'products' associated with a 'category' in Symfony, following the 'Other Relations Methods' guideline?"
    answers:
      - { value: "`getProducts()`", correct: true }
      - { value: "`getProduct()`", correct: false }
      - { value: "`allProducts()`", correct: false }
      - { value: "`retrieveProducts()`", correct: false }
    help: |
      For "other relations," the `all()` method maps to `getXXXs()`.
      https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/conventions.rst#_snippet_0
  -
    question: "When defining a form theme in Twig, what is the naming pattern for a block that customizes the `widget` part of all `textarea` fields?"
    answers:
      - { value: "`_textarea_widget`", correct: false }
      - { value: "`textarea_widget`", correct: true }
      - { value: "`form_textarea_widget`", correct: false }
      - { value: "`widget_textarea`", correct: false }
    help: |
      The pattern for all fields of the same type is `field-type_field-part`.
      https://github.com/symfony/symfony-docs/blob/7.3/form/form_themes.rst#_snippet_9
  -
    question: "You have a PHP property named `customerName` in your entity, but you want it to be serialized as `customer_name` in JSON output. Which attribute from the Serializer component would you use?"
    answers:
      - { value: "`#[SerializedAs('customer_name')]`", correct: false }
      - { value: "`#[JsonName('customer_name')]`", correct: false }
      - { value: "`#[SerializedName('customer_name')]`", correct: true }
      - { value: "`#[JsonProperty('customer_name')]`", correct: false }
    help: |
      `#[SerializedName]` allows mapping a PHP property name to a different serialized name.
      https://github.com/symfony/symfony-docs/blob/7.3/serializer.rst#_snippet_33
  -
    question: "Which of the following is the recommended way to get the debug-friendly class name of an object (e.g., in exception messages) in Symfony, especially when dealing with anonymous classes or proxies?"
    answers:
      - { value: "`get_class($object)`", correct: false }
      - { value: "`$object::class`", correct: false }
      - { value: "`get_debug_type($object)`", correct: true }
      - { value: "`(new \\ReflectionClass($object))->getName()`", correct: false }
    help: |
      `get_debug_type()` provides a more robust way to get the class name for debugging purposes.
      https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/standards.rst#_snippet_3
  -
    question: "What is the purpose of the `Symfony\\Component\\Intl\\Countries::getName('GB', 'de')` method call?"
    answers:
      - { value: "To get the English name of the country with code 'GB'.", correct: false }
      - { value: "To get the German name of the country with code 'GB'.", correct: true }
      - { value: "To get the country code for 'Germany'.", correct: false }
      - { value: "To check if 'GB' is a valid country code.", correct: false }
    help: |
      The second argument specifies the locale for translation.
      https://github.com/symfony/symfony-docs/blob/7.3/components/intl.rst#_snippet_5
  -
    question: "What is Symfony Flex's role in Docker integration?"
    answers:
      - { value: "It replaces Docker Compose for managing containers.", correct: false }
      - { value: "It automatically generates Dockerfiles and Docker Compose configurations for your application.", correct: false }
      - { value: "It provides placeholders in Dockerfiles where recipes can inject Docker-related configurations.", correct: true }
      - { value: "It runs Docker containers directly from Composer commands.", correct: false }
    help: |
      Symfony Flex recipes can modify Dockerfiles using specific placeholders.
      https://github.com/symfony/symfony-docs/blob/7.3/setup/docker.rst#_snippet_0
  -
    question: "Which command would you use to apply new Symfony Flex recipes to an existing project without reinstalling all Composer dependencies?"
    answers:
      - { value: "`composer update --recipes`", correct: false }
      - { value: "`php bin/console flex:apply`", correct: false }
      - { value: "`composer recipes`", correct: true }
      - { value: "`composer sync-recipes`", correct: false }
    help: |
      The `composer recipes` command applies new recipes or updates existing ones.
      https://github.com/symfony/symfony-docs/blob/7.3/setup/flex_private_recipes.rst#_snippet_8
  -
    question: "Which component is responsible for handling external processes, allowing you to run shell commands from PHP?"
    answers:
      - { value: "Symfony/Console", correct: false }
      - { value: "Symfony/Process", correct: true }
      - { value: "Symfony/Exec", correct: false }
      - { value: "Symfony/Runtime", correct: false }
    help: |
      The Process component provides an object-oriented API for executing external commands.
      https://github.com/symfony/symfony-docs/blob/7.3/components/process.rst#_snippet_0
  -
    question: "What is the purpose of `Symfony\\Component\\VarExporter\\Hydrator`?"
    answers:
      - { value: "To convert PHP objects to arrays for serialization.", correct: false }
      - { value: "To create new instances of objects without calling their constructors.", correct: false }
      - { value: "To populate properties of an already existing object.", correct: true }
      - { value: "To export PHP variables into a string representation.", correct: false }
    help: |
      The Hydrator is used to set properties on an existing object.
      https://github.com/symfony/symfony-docs/blob/7.3/components/var_exporter.rst#_snippet_6
  -
    question: "What is the primary goal of the Symfony Runtime component?"
    answers:
      - { value: "To replace the Symfony Kernel with a simpler application bootstrap.", correct: false }
      - { value: "To provide a generic entry point for PHP applications, allowing them to run in various environments (web, console, serverless) without modification.", correct: true }
      - { value: "To optimize application performance by compiling PHP code into native binaries.", correct: false }
      - { value: "To manage application dependencies and autoloading.", correct: false }
    help: |
      The Runtime component provides a universal entry point for different PHP execution models.
      https://github.com/symfony/symfony-docs/blob/7.3/components/runtime.rst#_snippet_6
  -
    question: "Which of the following is a key responsibility of the `Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver`?"
    answers:
      - { value: "To determine which controller should handle a given request.", correct: false }
      - { value: "To convert the raw HTTP request into a `Response` object.", correct: false }
      - { value: "To determine the values for controller method arguments based on the `Request` attributes, type-hints, and custom value resolvers.", correct: true }
      - { value: "To dispatch events during the request lifecycle.", correct: false }
    help: |
      The `ArgumentResolver` is responsible for preparing the arguments for controller methods.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_kernel.rst#_snippet_10
  -
    question: "When processing a form submission in a Symfony controller, which method is typically called on the `Form` object to bind the request data to the form and trigger validation?"
    answers:
      - { value: "`$form->submit($request->request->all());`", correct: false }
      - { value: "`$form->bind($request);`", correct: false }
      - { value: "`$form->handleRequest($request);`", correct: true }
      - { value: "`$form->process($request);`", correct: false }
    help: |
      `handleRequest()` is the standard method for processing form submissions.
      https://github.com/symfony/symfony-docs/blob/7.3/forms.rst#_snippet_11
  -
    question: "Which of the following is a recommended best practice for writing functional tests in Symfony?"
    answers:
      - { value: "Use `$_GET` and `$_POST` directly to simulate requests.", correct: false }
      - { value: "Perform smoke tests on all application URLs using data providers to ensure they return 2xx responses.", correct: true }
      - { value: "Only test controllers, not the full request-response cycle.", correct: false }
      - { value: "Avoid using `WebTestCase` and `KernelBrowser` for simplicity.", correct: false }
    help: |
      Smoke tests with data providers are a good practice for ensuring basic URL availability.
      https://github.com/symfony/symfony-docs/blob/7.3/best_practices.rst#_snippet_4
  -
    question: "What is the purpose of the `SYMFONY_DEPRECATIONS_HELPER='baselineFile=./tests/allowed.json'` environment variable when running PHPUnit tests in Symfony?"
    answers:
      - { value: "To generate a new deprecation baseline file.", correct: false }
      - { value: "To ignore all deprecations during the test run.", correct: false }
      - { value: "To ignore deprecations listed in `./tests/allowed.json` while still reporting new ones.", correct: true }
      - { value: "To stop the test suite immediately if any deprecation is encountered.", correct: false }
    help: |
      `baselineFile` allows you to define a set of known deprecations to ignore.
      https://github.com/symfony/symfony-docs/blob/7.3/components/phpunit_bridge.rst#_snippet_11
  -
    question: "Which Composer package should you install as a development dependency to automatically detect and report deprecated features when running your Symfony test suite?"
    answers:
      - { value: "`symfony/debug-bundle`", correct: false }
      - { value: "`symfony/var-dumper`", correct: false }
      - { value: "`symfony/phpunit-bridge`", correct: true }
      - { value: "`symfony/flex-dev`", correct: false }
    help: |
      `symfony/phpunit-bridge` integrates deprecation reporting with PHPUnit.
      https://github.com/symfony/symfony-docs/blob/7.3/setup/upgrade_major.rst#_snippet_0
  -
    question: "What is the primary purpose of the `PrependExtensionInterface` in a Symfony Bundle's Extension class?"
    answers:
      - { value: "To load the bundle's configuration into the container.", correct: false }
      - { value: "To allow the bundle to modify configuration of other bundles before they are loaded.", correct: true }
      - { value: "To define compiler passes that run after the container is built.", correct: false }
      - { value: "To register event listeners for the bundle.", correct: false }
    help: |
      The `prepend()` method allows an extension to modify the container builder before other extensions load their configuration.
      https://github.com/symfony/symfony-docs/blob/7.3/bundles/prepend_extension.rst#_snippet_3
  -
    question: "Which PSR (PHP Standard Recommendation) defines interfaces for a common abstraction for caching libraries, allowing different cache implementations to be swapped without changing application code?"
    answers:
      - { value: "PSR-3 (Logger Interface)", correct: false }
      - { value: "PSR-7 (HTTP Message Interfaces)", correct: false }
      - { value: "PSR-6 (Caching Interface)", correct: true }
      - { value: "PSR-11 (Container Interface)", correct: false }
    help: |
      PSR-6 defines the common interfaces for caching.
      https://www.php-fig.org/psr/psr-6/
  -
    question: "Which of the following is an example of a 'Main Relation Method' following Symfony's naming conventions for collection management?"
    answers:
      - { value: "`getUsers()`", correct: false }
      - { value: "`hasItem()`", correct: false }
      - { value: "`add()`", correct: true }
      - { value: "`removeUser()`", correct: false }
    help: |
      `add()` is a standard method for managing a "main" collection.
      https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/conventions.rst#_snippet_0
  -
    question: "You want to customize the HTML `name` attribute of a Symfony form from its default generated value. Which method of `FormFactoryInterface` should you use?"
    answers:
      - { value: "`create()`", correct: false }
      - { value: "`createBuilder()`", correct: false }
      - { value: "`createNamed()`", correct: true }
      - { value: "`createForm()`", correct: false }
    help: |
      `createNamed()` allows you to specify a custom name for the form.
      https://github.com/symfony/symfony-docs/blob/7.3/forms.rst#_snippet_25
  -
    question: "Which of the following is a valid way to define a sequence (list/array) in YAML?"
    answers:
      - { value: "`items: [item1, item2]`", correct: true }
      - { value: "`items: {item1, item2}`", correct: false }
      - { value: "`items: item1; item2;`", correct: false }
      - { value: "`items: | item1 | item2`", correct: false }
    help: |
      YAML sequences are typically denoted by hyphens or square brackets.
      https://github.com/symfony/symfony-docs/blob/7.3/reference/formats/yaml.rst#_snippet_8
  -
    question: "What is the purpose of the `symfony/flex` package in a Symfony application?"
    answers:
      - { value: "It is a full-stack framework that includes all Symfony components by default.", correct: false }
      - { value: "It's a Composer plugin that provides recipes to automate the installation and configuration of Symfony packages.", correct: true }
      - { value: "It's a command-line tool for managing Symfony applications without Composer.", correct: false }
      - { value: "It's a dependency injection container compiler that optimizes performance.", correct: false }
    help: |
      Symfony Flex is a Composer plugin that streamlines Symfony project management.
      https://github.com/symfony/symfony-docs/blob/7.3/setup/flex.rst#_snippet_1
  -
    question: "Which of the following describes the `symfony/http-kernel` component?"
    answers:
      - { value: "It provides a set of reusable PHP classes for handling HTTP requests and responses.", correct: false }
      - { value: "It is a lightweight micro-framework for building small web applications.", correct: false }
      - { value: "It provides the core logic for handling a request and turning it into a response, acting as the 'brain' of the Symfony Framework.", correct: true }
      - { value: "It is responsible for routing URLs to the correct controllers.", correct: false }
    help: |
      The HttpKernel component is the core of the Symfony framework, managing the request-response lifecycle.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_kernel.rst#_snippet_0
  -
    question: "What is the main advantage of using `Symfony\\Component\\EventDispatcher\\EventDispatcher` in your application?"
    answers:
      - { value: "It allows direct function calls to specific parts of your code.", correct: false }
      - { value: "It promotes loose coupling by allowing different parts of an application to communicate without direct dependencies.", correct: true }
      - { value: "It provides a global registry for all services in your application.", correct: false }
      - { value: "It automatically logs all method calls for debugging purposes.", correct: false }
    help: |
      The EventDispatcher promotes loose coupling by enabling an observer pattern.
      https://github.com/symfony/symfony-docs/blob/7.3/components/event_dispatcher.rst#_snippet_1
  -
    question: "Which of the following is a core principle of Symfony's backward compatibility promise?"
    answers:
      - { value: "Public APIs should not change in minor versions.", correct: true }
      - { value: "All internal methods are guaranteed to remain stable.", correct: false }
      - { value: "Deprecations are never introduced, only removals in major versions.", correct: false }
      - { value: "Code written for Symfony 2.0 will always run on Symfony 7.0 without modification.", correct: false }
    help: |
      The BC promise focuses on public APIs remaining stable in minor releases.
      https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/bc.rst#_snippet_0
  -
    question: "What is the recommended way to clear the Symfony cache in a production environment?"
    answers:
      - { value: "`php bin/console cache:clear --env=dev`", correct: false }
      - { value: "`rm -rf var/cache/*`", correct: false }
      - { value: "`APP_ENV=prod APP_DEBUG=0 php bin/console cache:clear`", correct: true }
      - { value: "`composer dump-autoload --optimize`", correct: false }
    help: |
      Clearing the cache with `APP_ENV=prod` and `APP_DEBUG=0` ensures it's optimized for production.
      https://github.com/symfony/symfony-docs/blob/7.3/deployment.rst#_snippet_5
  -
    question: "Which of the following is a best practice for naming parameters in `config/services.yaml`?"
    answers:
      - { value: "Using very generic names like `path` or `url`.", correct: false }
      - { value: "Prefixing them with `app.` and using descriptive names (e.g., `app.uploads_dir`).", correct: true }
      - { value: "Using only camelCase for all parameter names.", correct: false }
      - { value: "Storing all parameters directly in the `.env` file without defining them in `services.yaml`.", correct: false }
    help: |
      Prefixing parameters with `app.` helps avoid collisions and improves clarity.
      https://github.com/symfony/symfony-docs/blob/7.3/best_practices.rst#_snippet_2
  -
    question: "What is the purpose of the `kernel.terminate` event in Symfony?"
    answers:
      - { value: "It is dispatched before the controller is executed.", correct: false }
      - { value: "It allows modifying the HTTP response before it is sent.", correct: false }
      - { value: "It is dispatched after the HTTP response has been sent to the client, allowing for deferred, non-blocking operations.", correct: true }
      - { value: "It handles exceptions that occur during the request lifecycle.", correct: false }
    help: |
      `kernel.terminate` is used for post-response tasks like logging or sending emails.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_kernel.rst#_snippet_14
  -
    question: "Which Symfony component provides the `Finder` class, used for finding files and directories based on various criteria (e.g., name, path, size)?"
    answers:
      - { value: "Symfony/Filesystem", correct: false }
      - { value: "Symfony/Console", correct: false }
      - { value: "Symfony/Finder", correct: true }
      - { value: "Symfony/Asset", correct: false }
    help: |
      The Finder component is dedicated to file system iteration and filtering.
      https://github.com/symfony/symfony-docs/blob/7.3/components/finder.rst#_snippet_0
  -
    question: "What is the primary role of `symfony/framework-bundle` in a Symfony application?"
    answers:
      - { value: "It provides all Symfony components as a single package.", correct: false }
      - { value: "It integrates and configures the core Symfony components into a full-stack framework.", correct: true }
      - { value: "It is responsible for managing database connections.", correct: false }
      - { value: "It provides a templating engine for rendering views.", correct: false }
    help: |
      The FrameworkBundle provides the glue that integrates the standalone components into a cohesive framework.
      https://github.com/symfony/symfony-docs/blob/7.3/quick_tour/flex_recipes.rst#_snippet_0
  -
    question: "Which of the following is a valid method for registering an event listener with the `EventDispatcher` in Symfony?"
    answers:
      - { value: "Calling `EventDispatcher::attachListener('event_name', $listener);`", correct: false }
      - { value: "Using `EventDispatcher::addListener('event_name', [$listenerObject, 'methodName']);`", correct: true }
      - { value: "Defining a public static method `listenToEvent()` in your listener class.", correct: false }
      - { value: "Adding a `#[Listen]` attribute to the listener class.", correct: false }
    help: |
      `addListener()` is used to register a callable as an event listener.
      https://github.com/symfony/symfony-docs/blob/7.3/components/event_dispatcher.rst#_snippet_2
  -
    question: "In Symfony's release management, what is the duration of bug fixes for a Long-Term Support (LTS) version?"
    answers:
      - { value: "8 months", correct: false }
      - { value: "1 year", correct: false }
      - { value: "3 years", correct: true }
      - { value: "5 years", correct: false }
    help: |
      LTS versions receive bug fixes for 3 years.
      https://github.com/symfony/symfony-docs/blob/7.3/contributing/community/releases.rst#_snippet_0
  -
    question: "Which of the following is NOT a valid `FormEvents` constant in Symfony?"
    answers:
      - { value: "`FormEvents::PRE_SUBMIT`", correct: false }
      - { value: "`FormEvents::POST_SUBMIT`", correct: false }
      - { value: "`FormEvents::PRE_BIND`", correct: true }
      - { value: "`FormEvents::SUBMIT`", correct: false }
    help: |
      `PRE_BIND` is an outdated event name; `PRE_SUBMIT` is used instead.
      https://github.com/symfony/symfony-docs/blob/7.3/form/events.rst#_snippet_2
  -
    question: "What is the purpose of the `symfony/requirements-checker` package?"
    answers:
      - { value: "To check if your PHP code adheres to Symfony's coding standards.", correct: false }
      - { value: "To verify if the server environment meets Symfony's technical requirements.", correct: true }
      - { value: "To audit your Composer dependencies for security vulnerabilities.", correct: false }
      - { value: "To generate a report of deprecated features used in your application.", correct: false }
    help: |
      The `requirements-checker` helps ensure your server environment is compatible with Symfony.
      https://github.com/symfony/symfony-docs/blob/7.3/deployment.rst#_snippet_0
  -
    question: "Which of the following is a valid method naming convention for an 'Other Relations Method' that checks for the existence of a 'tag' in a collection?"
    answers:
      - { value: "`hasTag()`", correct: true }
      - { value: "`getTag()`", correct: false }
      - { value: "`checkTag()`", correct: false }
      - { value: "`containsTag()`", correct: false }
    help: |
      For "other relations," the `has()` method maps to `hasXXX()`.
      https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/conventions.rst#_snippet_0
  -
    question: "What is the primary purpose of the `Symfony\\Component\\HttpFoundation\\RequestStack` service?"
    answers:
      - { value: "To store all incoming HTTP requests for logging purposes.", correct: false }
      - { value: "To provide access to the current request and manage a stack of requests (e.g., for sub-requests).", correct: true }
      - { value: "To handle HTTP sessions and cookies.", correct: false }
      - { value: "To validate incoming request parameters.", correct: false }
    help: |
      `RequestStack` is designed to manage and provide access to the current request, especially in contexts with sub-requests.
      https://github.com/symfony/symfony-docs/blob/7.3/service_container/request.rst#_snippet_0
  -
    question: "Which of the following `KernelEvents` is dispatched after the controller callable has been determined but before it is executed, allowing for modification of the controller or its attributes?"
    answers:
      - { value: "`kernel.request`", correct: false }
      - { value: "`kernel.controller`", correct: true }
      - { value: "`kernel.controller_arguments`", correct: false }
      - { value: "`kernel.view`", correct: false }
    help: |
      `kernel.controller` is the event where the controller can be inspected or replaced.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_kernel.rst#_snippet_8
  -
    question: "What is the recommended approach for organizing your Symfony project's configuration files?"
    answers:
      - { value: "Place all configuration in a single `config.yaml` file.", correct: false }
      - { value: "Organize configuration into separate files by concern within the `config/packages/` directory.", correct: true }
      - { value: "Store all configuration directly in environment variables.", correct: false }
      - { value: "Use a database to store all application configuration.", correct: false }
    help: |
      Symfony recommends organizing configuration into smaller, topic-specific files under `config/packages/`.
      https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#_snippet_0
  -
    question: "What is the purpose of the `#[AsEventListener]` attribute in Symfony 7?"
    answers:
      - { value: "To automatically register a service as an event listener without needing a `services.yaml` entry or `getSubscribedEvents()`.", correct: true }
      - { value: "To define the priority of an event listener in `services.yaml`.", correct: false }
      - { value: "To dispatch an event from a controller.", correct: false }
      - { value: "To mark a method as an event subscriber.", correct: false }
    help: |
      `#[AsEventListener]` simplifies event listener registration using PHP attributes.
      https://github.com/symfony/symfony-docs/blob/7.3/event_dispatcher.rst#_snippet_3
  -
    question: "Which of the following is a valid method naming convention for an 'Other Relations Method' that replaces all 'products' in a collection?"
    answers:
      - { value: "`setProducts()`", correct: true }
      - { value: "`replaceProducts()`", correct: true }
      - { value: "`updateProducts()`", correct: false }
      - { value: "`resetProducts()`", correct: false }
    help: |
      `setXXX()` and `replaceXXX()` are both valid for replacing elements in "other relations". `setXXX()` may also add new elements.
      https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/conventions.rst#_snippet_0
  -
    question: "Which of the following `KernelEvents` is dispatched after the controller has returned a value (but not a `Response` object), allowing listeners to transform this value into a `Response`?"
    answers:
      - { value: "`kernel.request`", correct: false }
      - { value: "`kernel.controller`", correct: false }
      - { value: "`kernel.view`", correct: true }
      - { value: "`kernel.response`", correct: false }
    help: |
      The `kernel.view` event is specifically for transforming non-Response return values into Response objects.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_kernel.rst#_snippet_12
  -
    question: "What is the purpose of the `symfony/flex` package in a Symfony application?"
    answers:
      - { value: "It is a full-stack framework that includes all Symfony components by default.", correct: false }
      - { value: "It's a Composer plugin that provides recipes to automate the installation and configuration of Symfony packages.", correct: true }
      - { value: "It's a command-line tool for managing Symfony applications without Composer.", correct: false }
      - { value: "It's a dependency injection container compiler that optimizes performance.", correct: false }
    help: |
      Symfony Flex is a Composer plugin that streamlines Symfony project management.
      https://github.com/symfony/symfony-docs/blob/7.3/setup/flex.rst#_snippet_1
  -
    question: "Which of the following describes the `symfony/http-kernel` component?"
    answers:
      - { value: "It provides a set of reusable PHP classes for handling HTTP requests and responses.", correct: false }
      - { value: "It is a lightweight micro-framework for building small web applications.", correct: false }
      - { value: "It provides the core logic for handling a request and turning it into a response, acting as the 'brain' of the Symfony Framework.", correct: true }
      - { value: "It is responsible for routing URLs to the correct controllers.", correct: false }
    help: |
      The HttpKernel component is the core of the Symfony framework, managing the request-response lifecycle.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_kernel.rst#_snippet_0
  -
    question: "What is the main advantage of using `Symfony\\Component\\EventDispatcher\\EventDispatcher` in your application?"
    answers:
      - { value: "It allows direct function calls to specific parts of your code.", correct: false }
      - { value: "It promotes loose coupling by allowing different parts of an application to communicate without direct dependencies.", correct: true }
      - { value: "It provides a global registry for all services in your application.", correct: false }
      - { value: "It automatically logs all method calls for debugging purposes.", correct: false }
    help: |
      The EventDispatcher promotes loose coupling by enabling an observer pattern.
      https://github.com/symfony/symfony-docs/blob/7.3/components/event_dispatcher.rst#_snippet_1
  -
    question: "Which of the following is a core principle of Symfony's backward compatibility promise?"
    answers:
      - { value: "Public APIs should not change in minor versions.", correct: true }
      - { value: "All internal methods are guaranteed to remain stable.", correct: false }
      - { value: "Deprecations are never introduced, only removals in major versions.", correct: false }
      - { value: "Code written for Symfony 2.0 will always run on Symfony 7.0 without modification.", correct: false }
    help: |
      The BC promise focuses on public APIs remaining stable in minor releases.
      https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/bc.rst#_snippet_0
  -
    question: "What is the recommended way to clear the Symfony cache in a production environment?"
    answers:
      - { value: "`php bin/console cache:clear --env=dev`", correct: false }
      - { value: "`rm -rf var/cache/*`", correct: false }
      - { value: "`APP_ENV=prod APP_DEBUG=0 php bin/console cache:clear`", correct: true }
      - { value: "`composer dump-autoload --optimize`", correct: false }
    help: |
      Clearing the cache with `APP_ENV=prod` and `APP_DEBUG=0` ensures it's optimized for production.
      https://github.com/symfony/symfony-docs/blob/7.3/deployment.rst#_snippet_5
  -
    question: "Which of the following is a best practice for naming parameters in `config/services.yaml`?"
    answers:
      - { value: "Using very generic names like `path` or `url`.", correct: false }
      - { value: "Prefixing them with `app.` and using descriptive names (e.g., `app.uploads_dir`).", correct: true }
      - { value: "Using only camelCase for all parameter names.", correct: false }
      - { value: "Storing all parameters directly in the `.env` file without defining them in `services.yaml`.", correct: false }
    help: |
      Prefixing parameters with `app.` helps avoid collisions and improves clarity.
      https://github.com/symfony/symfony-docs/blob/7.3/best_practices.rst#_snippet_2
  -
    question: "What is the purpose of the `kernel.terminate` event in Symfony?"
    answers:
      - { value: "It is dispatched before the controller is executed.", correct: false }
      - { value: "It allows modifying the HTTP response before it is sent.", correct: false }
      - { value: "It is dispatched after the HTTP response has been sent to the client, allowing for deferred, non-blocking operations.", correct: true }
      - { value: "It handles exceptions that occur during the request lifecycle.", correct: false }
    help: |
      `kernel.terminate` is used for post-response tasks like logging or sending emails.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_kernel.rst#_snippet_14
  -
    question: "Which Symfony component provides the `Finder` class, used for finding files and directories based on various criteria (e.g., name, path, size)?"
    answers:
      - { value: "Symfony/Filesystem", correct: false }
      - { value: "Symfony/Console", correct: false }
      - { value: "Symfony/Finder", correct: true }
      - { value: "Symfony/Asset", correct: false }
    help: |
      The Finder component is dedicated to file system iteration and filtering.
      https://github.com/symfony/symfony-docs/blob/7.3/components/finder.rst#_snippet_0
  -
    question: "What is the primary role of `symfony/framework-bundle` in a Symfony application?"
    answers:
      - { value: "It provides all Symfony components as a single package.", correct: false }
      - { value: "It integrates and configures the core Symfony components into a full-stack framework.", correct: true }
      - { value: "It is responsible for managing database connections.", correct: false }
      - { value: "It provides a templating engine for rendering views.", correct: false }
    help: |
      The FrameworkBundle provides the glue that integrates the standalone components into a cohesive framework.
      https://github.com/symfony/symfony-docs/blob/7.3/quick_tour/flex_recipes.rst#_snippet_0
  -
    question: "Which of the following is a valid method for registering an event listener with the `EventDispatcher` in Symfony?"
    answers:
      - { value: "Calling `EventDispatcher::attachListener('event_name', $listener);`", correct: false }
      - { value: "Using `EventDispatcher::addListener('event_name', [$listenerObject, 'methodName']);`", correct: true }
      - { value: "Defining a public static method `listenToEvent()` in your listener class.", correct: false }
      - { value: "Adding a `#[Listen]` attribute to the listener class.", correct: false }
    help: |
      `addListener()` is used to register a callable as an event listener.
      https://github.com/symfony/symfony-docs/blob/7.3/components/event_dispatcher.rst#_snippet_2
  -
    question: "In Symfony's release management, what is the duration of bug fixes for a Long-Term Support (LTS) version?"
    answers:
      - { value: "8 months", correct: false }
      - { value: "1 year", correct: false }
      - { value: "3 years", correct: true }
      - { value: "5 years", correct: false }
    help: |
      LTS versions receive bug fixes for 3 years.
      https://github.com/symfony/symfony-docs/blob/7.3/contributing/community/releases.rst#_snippet_0
  -
    question: "Which of the following is NOT a valid `FormEvents` constant in Symfony?"
    answers:
      - { value: "`FormEvents::PRE_SUBMIT`", correct: false }
      - { value: "`FormEvents::POST_SUBMIT`", correct: false }
      - { value: "`FormEvents::PRE_BIND`", correct: true }
      - { value: "`FormEvents::SUBMIT`", correct: false }
    help: |
      `PRE_BIND` is an outdated event name; `PRE_SUBMIT` is used instead.
      https://github.com/symfony/symfony-docs/blob/7.3/form/events.rst#_snippet_2
  -
    question: "What is the purpose of the `symfony/requirements-checker` package?"
    answers:
      - { value: "To check if your PHP code adheres to Symfony's coding standards.", correct: false }
      - { value: "To verify if the server environment meets Symfony's technical requirements.", correct: true }
      - { value: "To audit your Composer dependencies for security vulnerabilities.", correct: false }
      - { value: "To generate a report of deprecated features used in your application.", correct: false }
    help: |
      The `requirements-checker` helps ensure your server environment is compatible with Symfony.
      https://github.com/symfony/symfony-docs/blob/7.3/deployment.rst#_snippet_0
  -
    question: "Which of the following is a valid method naming convention for an 'Other Relations Method' that checks for the existence of a 'tag' in a collection?"
    answers:
      - { value: "`hasTag()`", correct: true }
      - { value: "`getTag()`", correct: false }
      - { value: "`checkTag()`", correct: false }
      - { value: "`containsTag()`", correct: false }
    help: |
      For "other relations," the `has()` method maps to `hasXXX()`.
      https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/conventions.rst#_snippet_0
  -
    question: "What is the primary purpose of the `Symfony\\Component\\HttpFoundation\\RequestStack` service?"
    answers:
      - { value: "To store all incoming HTTP requests for logging purposes.", correct: false }
      - { value: "To provide access to the current request and manage a stack of requests (e.g., for sub-requests).", correct: true }
      - { value: "To handle HTTP sessions and cookies.", correct: false }
      - { value: "To validate incoming request parameters.", correct: false }
    help: |
      `RequestStack` is designed to manage and provide access to the current request, especially in contexts with sub-requests.
      https://github.com/symfony/symfony-docs/blob/7.3/service_container/request.rst#_snippet_0
  -
    question: "Which of the following `KernelEvents` is dispatched after the controller callable has been determined but before it is executed, allowing for modification of the controller or its attributes?"
    answers:
      - { value: "`kernel.request`", correct: false }
      - { value: "`kernel.controller`", correct: true }
      - { value: "`kernel.controller_arguments`", correct: false }
      - { value: "`kernel.view`", correct: false }
    help: |
      `kernel.controller` is the event where the controller can be inspected or replaced.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_kernel.rst#_snippet_8
  -
    question: "What is the recommended approach for organizing your Symfony project's configuration files?"
    answers:
      - { value: "Place all configuration in a single `config.yaml` file.", correct: false }
      - { value: "Organize configuration into separate files by concern within the `config/packages/` directory.", correct: true }
      - { value: "Store all configuration directly in environment variables.", correct: false }
      - { value: "Use a database to store all application configuration.", correct: false }
    help: |
      Symfony recommends organizing configuration into smaller, topic-specific files under `config/packages/`.
      https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#_snippet_0
  -
    question: "What is the purpose of the `#[AsEventListener]` attribute in Symfony 7?"
    answers:
      - { value: "To automatically register a service as an event listener without needing a `services.yaml` entry or `getSubscribedEvents()`.", correct: true }
      - { value: "To define the priority of an event listener in `services.yaml`.", correct: false }
      - { value: "To dispatch an event from a controller.", correct: false }
      - { value: "To mark a method as an event subscriber.", correct: false }
    help: |
      `#[AsEventListener]` simplifies event listener registration using PHP attributes.
      https://github.com/symfony/symfony-docs/blob/7.3/event_dispatcher.rst#_snippet_3
  -
    question: "Which of the following is a valid method naming convention for an 'Other Relations Method' that replaces all 'products' in a collection?"
    answers:
      - { value: "`setProducts()`", correct: true }
      - { value: "`replaceProducts()`", correct: true }
      - { value: "`updateProducts()`", correct: false }
      - { value: "`resetProducts()`", correct: false }
    help: |
      `setXXX()` and `replaceXXX()` are both valid for replacing elements in "other relations". `setXXX()` may also add new elements.
      https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/conventions.rst#_snippet_0
  -
    question: "Which of the following `KernelEvents` is dispatched after the controller has returned a value (but not a `Response` object), allowing listeners to transform this value into a `Response`?"
    answers:
      - { value: "`kernel.request`", correct: false }
      - { value: "`kernel.controller`", correct: false }
      - { value: "`kernel.view`", correct: true }
      - { value: "`kernel.response`", correct: false }
    help: |
      The `kernel.view` event is specifically for transforming non-Response return values into Response objects.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_kernel.rst#_snippet_12
  -
    question: "What is the purpose of the `symfony/flex` package in a Symfony application?"
    answers:
      - { value: "It is a full-stack framework that includes all Symfony components by default.", correct: false }
      - { value: "It's a Composer plugin that provides recipes to automate the installation and configuration of Symfony packages.", correct: true }
      - { value: "It's a command-line tool for managing Symfony applications without Composer.", correct: false }
      - { value: "It's a dependency injection container compiler that optimizes performance.", correct: false }
    help: |
      Symfony Flex is a Composer plugin that streamlines Symfony project management.
      https://github.com/symfony/symfony-docs/blob/7.3/setup/flex.rst#_snippet_1
  -
    question: "Which of the following describes the `symfony/http-kernel` component?"
    answers:
      - { value: "It provides a set of reusable PHP classes for handling HTTP requests and responses.", correct: false }
      - { value: "It is a lightweight micro-framework for building small web applications.", correct: false }
      - { value: "It provides the core logic for handling a request and turning it into a response, acting as the 'brain' of the Symfony Framework.", correct: true }
      - { value: "It is responsible for routing URLs to the correct controllers.", correct: false }
    help: |
      The HttpKernel component is the core of the Symfony framework, managing the request-response lifecycle.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_kernel.rst#_snippet_0
  -
    question: "What is the main advantage of using `Symfony\\Component\\EventDispatcher\\EventDispatcher` in your application?"
    answers:
      - { value: "It allows direct function calls to specific parts of your code.", correct: false }
      - { value: "It promotes loose coupling by allowing different parts of an application to communicate without direct dependencies.", correct: true }
      - { value: "It provides a global registry for all services in your application.", correct: false }
      - { value: "It automatically logs all method calls for debugging purposes.", correct: false }
    help: |
      The EventDispatcher promotes loose coupling by enabling an observer pattern.
      https://github.com/symfony/symfony-docs/blob/7.3/components/event_dispatcher.rst#_snippet_1
  -
    question: "Which of the following is a core principle of Symfony's backward compatibility promise?"
    answers:
      - { value: "Public APIs should not change in minor versions.", correct: true }
      - { value: "All internal methods are guaranteed to remain stable.", correct: false }
      - { value: "Deprecations are never introduced, only removals in major versions.", correct: false }
      - { value: "Code written for Symfony 2.0 will always run on Symfony 7.0 without modification.", correct: false }
    help: |
      The BC promise focuses on public APIs remaining stable in minor releases.
      https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/bc.rst#_snippet_0
  -
    question: "What is the recommended way to clear the Symfony cache in a production environment?"
    answers:
      - { value: "`php bin/console cache:clear --env=dev`", correct: false }
      - { value: "`rm -rf var/cache/*`", correct: false }
      - { value: "`APP_ENV=prod APP_DEBUG=0 php bin/console cache:clear`", correct: true }
      - { value: "`composer dump-autoload --optimize`", correct: false }
    help: |
      Clearing the cache with `APP_ENV=prod` and `APP_DEBUG=0` ensures it's optimized for production.
      https://github.com/symfony/symfony-docs/blob/7.3/deployment.rst#_snippet_5
  -
    question: "Which of the following is a best practice for naming parameters in `config/services.yaml`?"
    answers:
      - { value: "Using very generic names like `path` or `url`.", correct: false }
      - { value: "Prefixing them with `app.` and using descriptive names (e.g., `app.uploads_dir`).", correct: true }
      - { value: "Using only camelCase for all parameter names.", correct: false }
      - { value: "Storing all parameters directly in the `.env` file without defining them in `services.yaml`.", correct: false }
    help: |
      Prefixing parameters with `app.` helps avoid collisions and improves clarity.
      https://github.com/symfony/symfony-docs/blob/7.3/best_practices.rst#_snippet_2
  -
    question: "What is the purpose of the `kernel.terminate` event in Symfony?"
    answers:
      - { value: "It is dispatched before the controller is executed.", correct: false }
      - { value: "It allows modifying the HTTP response before it is sent.", correct: false }
      - { value: "It is dispatched after the HTTP response has been sent to the client, allowing for deferred, non-blocking operations.", correct: true }
      - { value: "It handles exceptions that occur during the request lifecycle.", correct: false }
    help: |
      `kernel.terminate` is used for post-response tasks like logging or sending emails.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_kernel.rst#_snippet_14
  -
    question: "Which Symfony component provides the `Finder` class, used for finding files and directories based on various criteria (e.g., name, path, size)?"
    answers:
      - { value: "Symfony/Filesystem", correct: false }
      - { value: "Symfony/Console", correct: false }
      - { value: "Symfony/Finder", correct: true }
      - { value: "Symfony/Asset", correct: false }
    help: |
      The Finder component is dedicated to file system iteration and filtering.
      https://github.com/symfony/symfony-docs/blob/7.3/components/finder.rst#_snippet_0
  -
    question: "What is the primary role of `symfony/framework-bundle` in a Symfony application?"
    answers:
      - { value: "It provides all Symfony components as a single package.", correct: false }
      - { value: "It integrates and configures the core Symfony components into a full-stack framework.", correct: true }
      - { value: "It is responsible for managing database connections.", correct: false }
      - { value: "It provides a templating engine for rendering views.", correct: false }
    help: |
      The FrameworkBundle provides the glue that integrates the standalone components into a cohesive framework.
      https://github.com/symfony/symfony-docs/blob/7.3/quick_tour/flex_recipes.rst#_snippet_0
  -
    question: "Which of the following is a valid method for registering an event listener with the `EventDispatcher` in Symfony?"
    answers:
      - { value: "Calling `EventDispatcher::attachListener('event_name', $listener);`", correct: false }
      - { value: "Using `EventDispatcher::addListener('event_name', [$listenerObject, 'methodName']);`", correct: true }
      - { value: "Defining a public static method `listenToEvent()` in your listener class.", correct: false }
      - { value: "Adding a `#[Listen]` attribute to the listener class.", correct: false }
    help: |
      `addListener()` is used to register a callable as an event listener.
      https://github.com/symfony/symfony-docs/blob/7.3/components/event_dispatcher.rst#_snippet_2
  -
    question: "In Symfony's release management, what is the duration of bug fixes for a Long-Term Support (LTS) version?"
    answers:
      - { value: "8 months", correct: false }
      - { value: "1 year", correct: false }
      - { value: "3 years", correct: true }
      - { value: "5 years", correct: false }
    help: |
      LTS versions receive bug fixes for 3 years.
      https://github.com/symfony/symfony-docs/blob/7.3/contributing/community/releases.rst#_snippet_0
  -
    question: "Which of the following is NOT a valid `FormEvents` constant in Symfony?"
    answers:
      - { value: "`FormEvents::PRE_SUBMIT`", correct: false }
      - { value: "`FormEvents::POST_SUBMIT`", correct: false }
      - { value: "`FormEvents::PRE_BIND`", correct: true }
      - { value: "`FormEvents::SUBMIT`", correct: false }
    help: |
      `PRE_BIND` is an outdated event name; `PRE_SUBMIT` is used instead.
      https://github.com/symfony/symfony-docs/blob/7.3/form/events.rst#_snippet_2
  -
    question: "What is the purpose of the `symfony/requirements-checker` package?"
    answers:
      - { value: "To check if your PHP code adheres to Symfony's coding standards.", correct: false }
      - { value: "To verify if the server environment meets Symfony's technical requirements.", correct: true }
      - { value: "To audit your Composer dependencies for security vulnerabilities.", correct: false }
      - { value: "To generate a report of deprecated features used in your application.", correct: false }
    help: |
      The `requirements-checker` helps ensure your server environment is compatible with Symfony.
      https://github.com/symfony/symfony-docs/blob/7.3/deployment.rst#_snippet_0
  -
    question: "Which of the following is a valid method naming convention for an 'Other Relations Method' that checks for the existence of a 'tag' in a collection?"
    answers:
      - { value: "`hasTag()`", correct: true }
      - { value: "`getTag()`", correct: false }
      - { value: "`checkTag()`", correct: false }
      - { value: "`containsTag()`", correct: false }
    help: |
      For "other relations," the `has()` method maps to `hasXXX()`.
      https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/conventions.rst#_snippet_0
  -
    question: "What is the primary purpose of the `Symfony\\Component\\HttpFoundation\\RequestStack` service?"
    answers:
      - { value: "To store all incoming HTTP requests for logging purposes.", correct: false }
      - { value: "To provide access to the current request and manage a stack of requests (e.g., for sub-requests).", correct: true }
      - { value: "To handle HTTP sessions and cookies.", correct: false }
      - { value: "To validate incoming request parameters.", correct: false }
    help: |
      `RequestStack` is designed to manage and provide access to the current request, especially in contexts with sub-requests.
      https://github.com/symfony/symfony-docs/blob/7.3/service_container/request.rst#_snippet_0
  -
    question: "Which of the following `KernelEvents` is dispatched after the controller callable has been determined but before it is executed, allowing for modification of the controller or its attributes?"
    answers:
      - { value: "`kernel.request`", correct: false }
      - { value: "`kernel.controller`", correct: true }
      - { value: "`kernel.controller_arguments`", correct: false }
      - { value: "`kernel.view`", correct: false }
    help: |
      `kernel.controller` is the event where the controller can be inspected or replaced.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_kernel.rst#_snippet_8
  -
    question: "What is the recommended approach for organizing your Symfony project's configuration files?"
    answers:
      - { value: "Place all configuration in a single `config.yaml` file.", correct: false }
      - { value: "Organize configuration into separate files by concern within the `config/packages/` directory.", correct: true }
      - { value: "Store all configuration directly in environment variables.", correct: false }
      - { value: "Use a database to store all application configuration.", correct: false }
    help: |
      Symfony recommends organizing configuration into smaller, topic-specific files under `config/packages/`.
      https://github.com/symfony/symfony-docs/blob/7.3/configuration.rst#_snippet_0
  -
    question: "What is the purpose of the `#[AsEventListener]` attribute in Symfony 7?"
    answers:
      - { value: "To automatically register a service as an event listener without needing a `services.yaml` entry or `getSubscribedEvents()`.", correct: true }
      - { value: "To define the priority of an event listener in `services.yaml`.", correct: false }
      - { value: "To dispatch an event from a controller.", correct: false }
      - { value: "To mark a method as an event subscriber.", correct: false }
    help: |
      `#[AsEventListener]` simplifies event listener registration using PHP attributes.
      https://github.com/symfony/symfony-docs/blob/7.3/event_dispatcher.rst#_snippet_3
  -
    question: "Which of the following is a valid method naming convention for an 'Other Relations Method' that replaces all 'products' in a collection?"
    answers:
      - { value: "`setProducts()`", correct: true }
      - { value: "`replaceProducts()`", correct: true }
      - { value: "`updateProducts()`", correct: false }
      - { value: "`resetProducts()`", correct: false }
    help: |
      `setXXX()` and `replaceXXX()` are both valid for replacing elements in "other relations". `setXXX()` may also add new elements.
      https://github.com/symfony/symfony-docs/blob/7.3/contributing/code/conventions.rst#_snippet_0
  -
    question: "Which of the following `KernelEvents` is dispatched after the controller has returned a value (but not a `Response` object), allowing listeners to transform this value into a `Response`?"
    answers:
      - { value: "`kernel.request`", correct: false }
      - { value: "`kernel.controller`", correct: false }
      - { value: "`kernel.view`", correct: true }
      - { value: "`kernel.response`", correct: false }
    help: |
      The `kernel.view` event is specifically for transforming non-Response return values into Response objects.
      https://github.com/symfony/symfony-docs/blob/7.3/components/http_kernel.rst#_snippet_12