category: Symfony Architecture

questions:
  -
    question: >
      What is the primary role of Symfony Flex in a Symfony application?
    answers:
      - { value: "To manage and automate the installation and configuration of Symfony packages and their dependencies.", correct: true }
      - { value: "To provide a graphical user interface for Symfony development.", correct: false }
      - { value: "To replace Composer as the primary dependency manager.", correct: false }
      - { value: "To compile PHP code into optimized binaries for faster execution.", correct: false }
    help: |
      Symfony Flex is a Composer plugin that simplifies the installation and configuration of Symfony applications and packages by automating common tasks through "recipes".
      https://symfony.com/doc/current/setup/flex.html

  -
    question: >
      Under which open-source license is the Symfony Framework and its components primarily distributed?
    answers:
      - { value: "MIT License", correct: true }
      - { value: "GPLv3 License", correct: false }
      - { value: "Apache 2.0 License", correct: false }
      - { value: "BSD License", correct: false }
    help: |
      The Symfony Framework and its components are released under the MIT license.
      https://symfony.com/doc/current/contributing/code/license.html

  -
    question: >
      Which of the following best describes a Symfony Component?
    answers:
      - { value: "A standalone PHP library that provides a specific feature and can be used independently of the full Symfony Framework.", correct: true }
      - { value: "A complete web application built with Symfony.", correct: false }
      - { value: "A plugin that extends the functionality of the Symfony CLI.", correct: false }
      - { value: "A database abstraction layer for Symfony applications.", correct: false }
    help: |
      Symfony Components are reusable PHP libraries that solve common web development problems. They can be used independently or as part of the full Symfony Framework.
      https://symfony.com/components

  -
    question: >
      In a standard Symfony application, where are the application's main PHP classes (e.g., controllers, services, entities) typically located?
    answers:
      - { value: "In the `public/` directory.", correct: false }
      - { value: "In the `var/` directory.", correct: false }
      - { value: "In the `src/` directory.", correct: true }
      - { value: "In the `vendor/` directory.", correct: false }
    help: |
      The `src/` directory is where all your application's PHP code resides, including controllers, services, entities, and other custom classes.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#code-organization

  -
    question: >
      What is the core component responsible for handling an incoming HTTP request and returning an HTTP response in Symfony?
    answers:
      - { value: "The EventDispatcher component.", correct: false }
      - { value: "The HttpFoundation component.", correct: true }
      - { value: "The Routing component.", correct: false }
      - { value: "The DependencyInjection component.", correct: false }
    help: |
      The HttpFoundation component defines an object-oriented layer for the HTTP specification, providing `Request` and `Response` classes. The HttpKernel component then builds upon this to manage the request-response lifecycle.
      https://symfony.com/doc/current/components/http_foundation.html

  -
    question: >
      Symfony adheres to several PSR standards. Which PSR defines the common interface for logging libraries, often implemented by Monolog in Symfony?
    answers:
      - { value: "PSR-7 (HTTP Message Interfaces)", correct: false }
      - { value: "PSR-3 (Logger Interface)", correct: true }
      - { value: "PSR-11 (Container Interface)", correct: false }
      - { value: "PSR-14 (Event Dispatcher)", correct: false }
    help: |
      Symfony uses PSR-3 for logging, which defines a common interface for logger implementations. Monolog is the default logging library integrated via the MonologBundle.
      https://symfony.com/doc/current/logging.html#autowiring-logger-channels

  -
    question: >
      When a feature is deprecated in Symfony, what is the typical approach for developers to be informed and to migrate their code?
    answers:
      - { value: "Deprecated features immediately stop working in the next minor version.", correct: false }
      - { value: "Symfony emits deprecation notices (warnings) during development, and the feature is removed in a future major version.", correct: true }
      - { value: "A new major version is released every month with breaking changes.", correct: false }
      - { value: "Developers must manually check the Symfony changelog for every release.", correct: false }
    help: |
      Symfony follows a clear deprecation policy. Deprecated features trigger warnings in debug mode, giving developers time to migrate before the feature is removed in a subsequent major version.
      https://symfony.com/doc/current/contributing/code/bc.html#deprecations

  -
    question: >
      What is Symfony's Backward Compatibility Promise (BCP) primarily designed to ensure for developers?
    answers:
      - { value: "That all new features are immediately available in older Symfony versions.", correct: false }
      - { value: "That upgrading between minor versions (e.x., 7.0 to 7.1) will not introduce breaking changes.", correct: true }
      - { value: "That all third-party bundles will always be compatible with the latest Symfony version.", correct: false }
      - { value: "That PHP versions older than 8.2 remain fully supported.", correct: false }
    help: |
      Symfony's BCP ensures that minor version upgrades do not introduce breaking changes, making upgrades smoother. Breaking changes are reserved for major versions.
      https://symfony.com/doc/current/contributing/code/bc.html

  -
    question: >
      Which component in Symfony allows different parts of an application to communicate with each other in a decoupled way by dispatching and listening for events?
    answers:
      - { value: "The Routing component.", correct: false }
      - { value: "The HttpKernel component.", correct: false }
      - { value: "The EventDispatcher component.", correct: true }
      - { value: "The Security component.", correct: false }
    help: |
      The EventDispatcher component implements the Mediator design pattern and allows you to dispatch events and attach listeners to them, promoting loose coupling.
      https://symfony.com/doc/current/components/event_dispatcher.html

  -
    question: |
      Given the following service definition, how would you correctly inject the `Psr\Log\LoggerInterface` service?

      ```php
      namespace App\Service;

      use Psr\Log\LoggerInterface;

      class MyService
      {
          public function __construct(
              private /* ??? */ $logger
          ) {}
      }
      ```
    answers:
      - { value: "`LoggerInterface`", correct: true }
      - { value: "`#[Autowire(service: 'monolog.logger')]`", correct: false }
      - { value: "`#[Target('monolog.logger')]`", correct: false }
      - { value: "`Psr\\Log\\LoggerInterface`", correct: true }
      - { value: "`Monolog\\Logger`", correct: false }
    help: |
      Symfony's autowiring mechanism automatically injects services based on type hints. `Psr\Log\LoggerInterface` is the standard interface for logging, and Symfony will resolve it to the default logger.
      https://symfony.com/doc/current/logging.html#autowiring-logger-channels

  -
    question: >
      After running `composer require doctrine` in a new Symfony project, which environment variable is automatically added by Symfony Flex to the `.env` file?
    answers:
      - { value: "APP_SECRET", correct: false }
      - { value: "MAILER_DSN", correct: false }
      - { value: "DATABASE_URL", correct: true }
      - { value: "MESSENGER_TRANSPORT_DSN", correct: false }
    help: |
      When you install Doctrine ORM via Composer, Symfony Flex automatically adds a `DATABASE_URL` environment variable to your `.env` file to configure the database connection.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#_snippet_12

  -
    question: >
      Which PHP magic method must be implemented in a controller class to make it "invokable" in Symfony, allowing it to be directly used as a controller without specifying a method name?
    answers:
      - { value: "`__call()`", correct: false }
      - { value: "`__invoke()`", correct: true }
      - { value: "`__construct()`", correct: false }
      - { value: "`__toString()`", correct: false }
    help: |
      An invokable controller is a class that defines a `__invoke()` method. Symfony can then directly call an instance of this class as a controller.
      https://symfony.com/doc/current/controller/service.html#invokable-controllers

  -
    question: |
      Consider the following PHP code using the `PropertyAccessor` component:

      ```php
      use Symfony\Component\PropertyAccess\PropertyAccess;

      class Person
      {
          public string $name;
      }

      $person = new Person();

      $propertyAccessor = PropertyAccess::createPropertyAccessorBuilder()
          ->disableExceptionOnInvalidPropertyPath()
          ->getPropertyAccessor();

      $value = $propertyAccessor->getValue($person, 'birthday');
      ```
      What will be the value of `$value` in this scenario?
    answers:
      - { value: "An instance of `Symfony\\Component\\PropertyAccess\\Exception\\NoSuchPropertyException`.", correct: false }
      - { value: "An empty string `\"\"`.", correct: false }
      - { value: "`null`", correct: true }
      - { value: "The string `\"birthday\"`.", correct: false }
    help: |
      When `disableExceptionOnInvalidPropertyPath()` is used, `PropertyAccessor` will return `null` instead of throwing a `NoSuchPropertyException` if the property path does not exist.
      https://symfony.com/doc/current/components/property_access.html#disable-exception-on-non-existing-property-paths

  -
    question: >
      To change the Symfony application's environment from `dev` to `prod`, which environment variable in the `.env` file should be modified?
    answers:
      - { value: "APP_DEBUG", correct: false }
      - { value: "APP_SECRET", correct: false }
      - { value: "APP_ENV", correct: true }
      - { value: "DATABASE_URL", correct: false }
    help: |
      The `APP_ENV` environment variable defines the current environment (e.g., `dev`, `prod`, `test`) for the Symfony application, influencing configuration loading and debugging behavior.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#_snippet_9

  -
    question: >
      Which Symfony configuration option is used to globally append a query parameter (e.g., `?v2`) to all rendered asset paths for cache busting?
    answers:
      - { value: "`json_manifest_path`", correct: false }
      - { value: "`version`", correct: true }
      - { value: "`strict_mode`", correct: false }
      - { value: "`base_path`", correct: false }
    help: |
      The `version` option in the `assets` configuration is used to add a global query parameter to asset URLs, forcing browsers to reload assets after a deployment.
      https://symfony.com/doc/current/reference/configuration/framework.html#version

  -
    question: >
      In the Symfony Messenger component, what is the primary role of a `Sender`?
    answers:
      - { value: "To retrieve messages from a message broker.", correct: false }
      - { value: "To handle the business logic of a message.", correct: false }
      - { value: "To serialize and send messages to a message broker or third-party API.", correct: true }
      - { value: "To wrap messages with additional metadata.", correct: false }
    help: |
      A `Sender` is responsible for serializing a message and sending it to a message broker or an external API.
      https://symfony.com/doc/current/components/messenger.html#senders-receivers-and-handlers

  -
    question: >
      In the Symfony Messenger component, what is the primary role of a `Receiver`?
    answers:
      - { value: "To dispatch messages to the message bus.", correct: false }
      - { value: "To retrieve, deserialize, and forward messages to handler(s).", correct: true }
      - { value: "To apply cross-cutting concerns to messages.", correct: false }
      - { value: "To store messages in a database.", correct: false }
    help: |
      A `Receiver` is responsible for retrieving messages from a transport (e.g., a message queue), deserializing them, and passing them to the message bus for handling.
      https://symfony.com/doc/current/components/messenger.html#senders-receivers-and-handlers

  -
    question: >
      In the Symfony Messenger component, what is the primary role of a `Handler`?
    answers:
      - { value: "To send messages to external systems.", correct: false }
      - { value: "To retrieve messages from a queue.", correct: false }
      - { value: "To apply business logic to a specific message type.", correct: true }
      - { value: "To add stamps to an envelope.", correct: false }
    help: |
      A `Handler` contains the business logic that processes a specific type of message. It's invoked by the `HandleMessageMiddleware`.
      https://symfony.com/doc/current/components/messenger.html#senders-receivers-and-handlers

  -
    question: >
      What is an `Envelope` in the Symfony Messenger component?
    answers:
      - { value: "A special type of message that can be sent without a handler.", correct: false }
      - { value: "A Messenger-specific concept that wraps messages, allowing the addition of useful information through *envelope stamps*.", correct: true }
      - { value: "A configuration file for Messenger transports.", correct: false }
      - { value: "A log file generated by Messenger operations.", correct: false }
    help: |
      The `Envelope` is a core Messenger concept that wraps your message, allowing you to attach additional metadata or instructions (stamps) to it.
      https://symfony.com/doc/current/components/messenger.html#envelope-stamps

  -
    question: >
      Which interface should an extractor implement to provide information about whether a property is readable or writable using the `PropertyInfo` component?
    answers:
      - { value: "`PropertyListExtractorInterface`", correct: false }
      - { value: "`PropertyTypeExtractorInterface`", correct: false }
      - { value: "`PropertyAccessExtractorInterface`", correct: true }
      - { value: "`PropertyDescriptionExtractorInterface`", correct: false }
    help: |
      The `PropertyAccessExtractorInterface` defines methods like `isReadable()` and `isWritable()` for determining property access.
      https://symfony.com/doc/current/components/property_info.html#extractors

  -
    question: >
      Which `PropertyInfo` extractor is primarily used to extract property information by analyzing constructor arguments, especially useful since Symfony 7.3?
    answers:
      - { value: "`PhpDocExtractor`", correct: false }
      - { value: "`ReflectionExtractor`", correct: false }
      - { value: "`ConstructorExtractor`", correct: true }
      - { value: "`PhpStanExtractor`", correct: false }
    help: |
      The `ConstructorExtractor` (introduced in Symfony 7.3) is designed to extract property information directly from constructor arguments.
      https://symfony.com/doc/current/components/property_info.html#constructor-extractor

  -
    question: >
      When setting up a multi-application Symfony project, where are application-specific configuration files (e.g., `bundles.php`, `routes.yaml`) typically located for an application named 'admin'?
    answers:
      - { value: "In the root `config/` directory.", correct: false }
      - { value: "In `apps/admin/config/`.", correct: true }
      - { value: "In `src/admin/config/`.", correct: false }
      - { value: "In `var/cache/admin/`.", correct: false }
    help: |
      For multi-application setups, a common pattern is to place each application's specific configuration and source code within its own subdirectory under `apps/`.
      https://symfony.com/doc/current/configuration/multiple_kernels.html#_snippet_14

  -
    question: |
      Given the following YAML configuration snippet, what is the purpose of `when@prod`?

      ```yaml
      # config/packages/routing.yaml
      framework:
          router:
              utf8: true

      when@prod:
          framework:
              router:
                  strict_requirements: null
      ```
    answers:
      - { value: "It defines configuration that applies only when the `APP_ENV` environment variable is set to `prod`.", correct: true }
      - { value: "It indicates that the `strict_requirements` option is deprecated in production.", correct: false }
      - { value: "It's a comment indicating a production-only setting, but has no functional effect.", correct: false }
      - { value: "It specifies that the router should only be used in production environments.", correct: false }
    help: |
      The `when@env` syntax allows you to apply specific configuration only when the application is running in a particular environment (e.g., `prod`, `dev`, `test`).
      https://symfony.com/doc/current/configuration.html#environment-specific-configuration

  -
    question: >
      What is the recommended naming convention for a Symfony controller class that handles a specific resource, for example, a `Product` resource?
    answers:
      - { value: "`ProductController`", correct: true }
      - { value: "`ProductService`", correct: false }
      - { value: "`ProductHandler`", correct: false }
      - { value: "`ProductBundle`", correct: false }
    help: |
      Symfony recommends naming controller classes with the resource name followed by `Controller`, e.g., `ProductController`.
      https://symfony.com/doc/current/controller.html#controller-naming-convention

  -
    question: >
      If you need to replace a core Symfony service with your own custom implementation, what is the recommended approach in the Dependency Injection Container?
    answers:
      - { value: "Directly modify the core Symfony service class in `vendor/`.", correct: false }
      - { value: "Use service decoration to wrap the original service with your custom logic.", correct: true }
      - { value: "Create a new service with the same name and Symfony will automatically override it.", correct: false }
      - { value: "Delete the original service definition from the framework configuration.", correct: false }
    help: |
      Service decoration is the recommended way to modify or replace existing services in Symfony without directly altering their original definitions.
      https://symfony.com/doc/current/service_container/service_decoration.html

  -
    question: >
      What is the typical support period for a Symfony Long Term Support (LTS) release?
    answers:
      - { value: "6 months of bug fixes, 8 months of security fixes.", correct: false }
      - { value: "1 year of bug fixes, 18 months of security fixes.", correct: false }
      - { value: "3 years of bug fixes, 4 years of security fixes.", correct: true }
      - { value: "5 years of bug fixes, 10 years of security fixes.", correct: false }
    help: |
      Symfony LTS releases receive 3 years of bug fixes and 4 years of security fixes.
      https://symfony.com/releases

  -
    question: >
      Which PSR standard does Symfony's `ServiceSubscriberInterface` relate to, promoting interoperability with dependency injection containers?
    answers:
      - { value: "PSR-3 (Logger Interface)", correct: false }
      - { value: "PSR-7 (HTTP Message Interfaces)", correct: false }
      - { value: "PSR-11 (Container Interface)", correct: true }
      - { value: "PSR-18 (HTTP Client)", correct: false }
    help: |
      `ServiceSubscriberInterface` is a Symfony-specific interface that works in conjunction with PSR-11 (Container Interface) to allow services to declare their dependencies in a type-hinted way, improving autowiring and service location.
      https://symfony.com/doc/current/service_container/service_subscribers_locators.html

  -
    question: >
      Which kernel event is dispatched *before* the controller is executed, allowing for modifications to the `Request` object or the controller itself?
    answers:
      - { value: "`kernel.response`", correct: false }
      - { value: "`kernel.exception`", correct: false }
      - { value: "`kernel.controller`", correct: true }
      - { value: "`kernel.view`", correct: false }
    help: |
      The `kernel.controller` event is dispatched after the controller has been resolved but before it is executed. This allows listeners to modify the controller or its arguments. (Note: In Symfony 6+, these are often represented by `ControllerEvent`).
      https://symfony.com/doc/current/reference/events.html#kernel-controller

  -
    question: >
      Why is it considered a best practice to encapsulate business logic within dedicated service classes rather than directly in controllers?
    answers:
      - { value: "To make controllers shorter and more focused on HTTP concerns.", correct: true }
      - { value: "To improve code reusability across different parts of the application.", correct: true }
      - { value: "To simplify testing of the business logic independently.", correct: true }
      - { value: "To prevent direct database access from controllers.", correct: false }
    help: |
      Separating business logic into services promotes the Single Responsibility Principle, making controllers lean, improving reusability, and simplifying testing.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#_snippet_3

  -
    question: >
      Which command would you use to list all services that Symfony can automatically inject into your classes via autowiring?
    answers:
      - { value: "`php bin/console debug:container`", correct: false }
      - { value: "`php bin/console debug:autowiring`", correct: true }
      - { value: "`php bin/console debug:router`", correct: false }
      - { value: "`php bin/console cache:clear`", correct: false }
    help: |
      The `debug:autowiring` command lists all services that are available for autowiring in your Symfony application.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#_snippet_2

  -
    question: >
      To read a value from a nested array like `['user' => ['address' => ['city' => 'Paris']]]` using `PropertyAccessor`, what would be the correct property path?
    answers:
      - { value: "`user.address.city`", correct: false }
      - { value: "`[user][address][city]`", correct: true }
      - { value: "`user->address->city`", correct: false }
      - { value: "`user:address:city`", correct: false }
    help: |
      When accessing array elements with `PropertyAccessor`, you use bracket notation (e.g., `[key]`).
      https://symfony.com/doc/current/components/property_access.html#reading-values-from-arrays

  -
    question: >
      If you configure `assets.json_manifest_path` in `framework.yaml`, what type of file is Symfony expecting at that path?
    answers:
      - { value: "A YAML file containing asset definitions.", correct: false }
      - { value: "A JSON file containing an associative array of asset names and their compiled names.", correct: true }
      - { value: "A PHP file that returns an array of asset paths.", correct: false }
      - { value: "An XML file with asset mappings.", correct: false }
    help: |
      The `json_manifest_path` option expects a `manifest.json` file, typically generated by asset build tools, containing a mapping of original asset names to their versioned or compiled names.
      https://symfony.com/doc/current/reference/configuration/framework.html#json-manifest-path

  -
    question: >
      By default, does the `property_accessor` service throw an exception when you try to access an invalid index of an array?
    answers:
      - { value: "Yes, always.", correct: false }
      - { value: "No, it returns `null` by default.", correct: true }
      - { value: "It depends on the `APP_ENV`.", correct: false }
      - { value: "It only throws an exception if strict mode is enabled.", correct: false }
    help: |
      By default, the `property_accessor` service does not throw an exception for invalid array indexes; it returns `null`. This behavior can be changed with the `throw_exception_on_invalid_index` option.
      https://symfony.com/doc/current/reference/configuration/framework.html#throw-exception-on-invalid-index

  -
    question: >
      Which method of the `Symfony\Component\PropertyInfo\Type` class would you use to determine if a property can be set to `null`?
    answers:
      - { value: "`getBuiltInType()`", correct: false }
      - { value: "`isCollection()`", correct: false }
      - { value: "`isNullable()`", correct: true }
      - { value: "`getClassName()`", correct: false }
    help: |
      The `isNullable()` method of the `Type` class indicates whether the property can accept a `null` value.
      https://symfony.com/doc/current/components/property_info.html#type-object

  -
    question: >
      What is the main benefit of using a `MicroKernelTrait` in Symfony applications?
    answers:
      - { value: "It allows for building smaller, more focused applications by providing a minimal kernel setup.", correct: true }
      - { value: "It automatically registers all bundles found in the `src/` directory.", correct: false }
      - { value: "It enables hot-reloading of services without clearing the cache.", correct: false }
      - { value: "It provides built-in support for GraphQL APIs.", correct: false }
    help: |
      The `MicroKernelTrait` simplifies the creation of micro-applications or API-only applications by providing a streamlined kernel, reducing boilerplate.
      https://symfony.com/doc/current/configuration/micro_kernel_trait.html

  -
    question: >
      What is the primary function of a "Bridge" in the Symfony architecture (e.g., MonologBridge, TwigBridge)?
    answers:
      - { value: "To provide a standalone version of a Symfony component.", correct: false }
      - { value: "To integrate a third-party library with the Symfony Framework.", correct: true }
      - { value: "To generate boilerplate code for new Symfony projects.", correct: false }
      - { value: "To handle database migrations.", correct: false }
    help: |
      Symfony Bridges are components that provide integration between the Symfony Framework and popular third-party libraries, adapting them to Symfony's conventions and services.
      https://symfony.com/doc/current/components/dependency_injection/tags.html#bridges

  -
    question: >
      In the Symfony request lifecycle, what is the purpose of the `ControllerResolver`?
    answers:
      - { value: "To convert the Request object into a Response object.", correct: false }
      - { value: "To determine which controller and method should be executed for a given request.", correct: true }
      - { value: "To handle routing and match the URL to a route.", correct: false }
      - { value: "To render the final view template.", correct: false }
    help: |
      The `ControllerResolver` is responsible for taking the controller string (e.g., `App\Controller\DefaultController::index`) and turning it into a callable PHP function or method.
      https://symfony.com/doc/current/create_framework/http_kernel_controller_resolver.html

  -
    question: >
      In a production Symfony environment (`APP_ENV=prod`), how are exceptions typically presented to the end-user by default?
    answers:
      - { value: "As a detailed stack trace with debugging information.", correct: false }
      - { value: "As a generic error page (e.g., 500 Internal Server Error) without exposing sensitive details.", correct: true }
      - { value: "Exceptions are automatically logged and then ignored.", correct: false }
      - { value: "The application crashes and displays a blank page.", correct: false }
    help: |
      In production, Symfony hides detailed error messages and stack traces from the end-user for security reasons, displaying a user-friendly error page instead. Detailed errors are logged.
      https://symfony.com/doc/current/controller/exception_controller.html

  -
    question: >
      Which of the following is considered a Symfony best practice for managing application configuration?
    answers:
      - { value: "Hardcoding sensitive credentials directly in PHP files.", correct: false }
      - { value: "Using environment variables (e.g., via `.env` files) for environment-specific settings.", correct: true }
      - { value: "Storing all configuration in a single, large XML file.", correct: false }
      - { value: "Manually editing the `vendor/` directory for configuration changes.", correct: false }
    help: |
      Using environment variables (often managed via `.env` files and the Dotenv component) is a best practice for handling environment-specific and sensitive configuration.
      https://symfony.com/doc/current/configuration.html#environment-variables

  -
    question: >
      What is the standard naming convention for a Symfony Bundle class?
    answers:
      - { value: "It must end with `Bundle` (e.g., `AcmeDemoBundle`).", correct: true }
      - { value: "It must start with `Bundle` (e.g., `BundleAcmeDemo`).", correct: false }
      - { value: "It can be named anything as long as it's registered.", correct: false }
      - { value: "It must be named `AppBundle`.", correct: false }
    help: |
      Symfony bundles follow a strict naming convention, requiring the class name to end with `Bundle`.
      https://symfony.com/doc/current/bundles.html#bundle-naming-conventions

  -
    question: >
      What is the purpose of a "recipe" in Symfony Flex?
    answers:
      - { value: "A set of instructions that Symfony Flex uses to automate the installation and configuration of a package.", correct: true }
      - { value: "A pre-built Symfony application ready for deployment.", correct: false }
      - { value: "A template for creating new Symfony components.", correct: false }
      - { value: "A database migration script.", correct: false }
    help: |
      Flex recipes are small sets of automated instructions that tell Symfony Flex how to integrate a Composer package into your application, including creating config files, updating `.env`, etc.
      https://symfony.com/doc/current/setup/flex.html#what-is-a-recipe

  -
    question: >
      Which Messenger component concept allows you to attach additional metadata or instructions to a message as it travels through the bus?
    answers:
      - { value: "Handlers", correct: false }
      - { value: "Receivers", correct: false }
      - { value: "Stamps", correct: true }
      - { value: "Middleware", correct: false }
    help: |
      `Stamps` are pieces of information attached to an `Envelope` that can be used by middleware or transports to modify behavior or add context.
      https://symfony.com/doc/current/components/messenger.html#envelope-stamps

  -
    question: >
      When using `PropertyInfoExtractor`, which method would you call to get a list of all properties available on a given class?
    answers:
      - { value: "`getTypes()`", correct: false }
      - { value: "`getProperties()`", correct: true }
      - { value: "`getShortDescription()`", correct: false }
      - { value: "`isReadable()`", correct: false }
    help: |
      The `getProperties()` method, part of `PropertyListExtractorInterface`, is used to retrieve an array of property names for a class.
      https://symfony.com/doc/current/components/property_info.html#propertyinfoextractor

  -
    question: |
      Consider the following PHP configuration for the router:

      ```php
      // config/packages/framework.php
      namespace Symfony\Component\DependencyInjection\Loader\Configurator;

      use Symfony\Config\FrameworkConfig;

      return static function (FrameworkConfig $framework, ContainerConfigurator $container): void {
          $framework->router()
              ->utf8(true)
          ;

          if ('prod' === $container->env()) {
              $framework->router()
                  ->strictRequirements(null)
              ;
          }
      };
      ```
      What is the effect of the `if ('prod' === $container->env())` block?
    answers:
      - { value: "It applies the `strictRequirements` setting only when the application is running in the `prod` environment.", correct: true }
      - { value: "It causes an error if the `strictRequirements` option is not set in production.", correct: false }
      - { value: "It ensures that `utf8` is only enabled in production.", correct: false }
      - { value: "It's a debugging statement that has no effect on production.", correct: false }
    help: |
      Similar to `when@env` in YAML, this PHP code block conditionally applies configuration based on the current application environment, ensuring `strictRequirements` is set to `null` only in production.
      https://symfony.com/doc/current/configuration.html#environment-specific-configuration

  -
    question: >
      Which kernel event is dispatched *after* the controller has returned its value, but *before* the response is sent, allowing for modification of the `Response` object?
    answers:
      - { value: "`kernel.request`", correct: false }
      - { value: "`kernel.controller`", correct: false }
      - { value: "`kernel.response`", correct: true }
      - { value: "`kernel.terminate`", correct: false }
    help: |
      The `kernel.response` event (represented by `ResponseEvent`) is dispatched just before the response is sent to the client, providing an opportunity to modify it.
      https://symfony.com/doc/current/reference/events.html#kernel-response

  -
    question: >
      Symfony's HTTP Client component adheres to which PSR standard for HTTP client interfaces?
    answers:
      - { value: "PSR-1 (Basic Coding Standard)", correct: false }
      - { value: "PSR-18 (HTTP Client)", correct: true }
      - { value: "PSR-17 (HTTP Factories)", correct: false }
      - { value: "PSR-15 (HTTP Handlers)", correct: false }
    help: |
      The Symfony HTTP Client component implements PSR-18, providing a standardized way to make HTTP requests.
      https://symfony.com/doc/current/components/http_client.html#psr-18-http-client

  -
    question: >
      What is the recommended approach for handling multiple distinct applications within a single Symfony project structure?
    answers:
      - { value: "Creating multiple independent Symfony projects in separate directories.", correct: false }
      - { value: "Using a single kernel and separating applications into distinct subdirectories under `apps/` with their own configurations.", correct: true }
      - { value: "Defining all applications within a single `src/Controller/` directory.", correct: false }
      - { value: "Relying solely on routing prefixes to differentiate applications.", correct: false }
    help: |
      Symfony supports multi-application setups, often by using a single kernel and organizing each application into its own subdirectory within an `apps/` folder, with dedicated configuration.
      https://symfony.com/doc/current/configuration/multiple_kernels.html

  -
    question: >
      If you want to use a custom `sprintf` pattern to construct an asset's path (e.g., for path-based versioning like `/version-5/images/logo.png`), which asset configuration option would you use?
    answers:
      - { value: "`version`", correct: false }
      - { value: "`json_manifest_path`", correct: false }
      - { value: "`version_format`", correct: true }
      - { value: "`base_path`", correct: false }
    help: |
      The `version_format` option allows you to define a `sprintf` pattern to customize how the asset version is incorporated into the asset's path.
      https://symfony.com/doc/current/reference/configuration/framework.html#version-format

  -
    question: >
      Which method of `PropertyAccessorBuilder` would you use to enable the use of PHP's magic `__call()` method for property access?
    answers:
      - { value: "`disableExceptionOnInvalidPropertyPath()`", correct: false }
      - { value: "`enableMagicCall()`", correct: true }
      - { value: "`throwExceptionOnInvalidIndex()`", correct: false }
      - { value: "`setOption()`", correct: false }
    help: |
      The `enableMagicCall()` method on `PropertyAccessorBuilder` allows the `PropertyAccessor` to interact with properties accessed via the `__call()` magic method.
      https://symfony.com/doc/current/components/property_access.html#magic-call

  -
    question: >
      How does Symfony handle major versions (e.g., Symfony 6 to Symfony 7) regarding backward compatibility?
    answers:
      - { value: "Major versions are fully backward compatible with previous major versions.", correct: false }
      - { value: "Major versions may introduce backward compatibility breaks, requiring code migration.", correct: true }
      - { value: "Major versions are released every month and are always stable.", correct: false }
      - { value: "Backward compatibility is only guaranteed for LTS releases.", correct: false }
    help: |
      Major Symfony versions (e.g., 6.0, 7.0) are allowed to introduce backward compatibility breaks, which is why a migration guide is provided. Minor versions (e.g., 7.0 to 7.1) maintain backward compatibility.
      https://symfony.com/doc/current/contributing/code/bc.html#major-versions

  -
    question: >
      Which of the following is NOT a core component of the Symfony Framework?
    answers:
      - { value: "HttpFoundation", correct: false }
      - { value: "Routing", correct: false }
      - { value: "Doctrine ORM", correct: true }
      - { value: "EventDispatcher", correct: false }
    help: |
      Doctrine ORM is a popular third-party library for database interaction, not a core Symfony component, though it's commonly used with Symfony.
      https://symfony.com/components

  -
    question: >
      What is the primary benefit of Symfony's adherence to PSR standards?
    answers:
      - { value: "It makes Symfony applications run faster.", correct: false }
      - { value: "It ensures interoperability with other PHP libraries and frameworks.", correct: true }
      - { value: "It eliminates the need for Composer.", correct: false }
      - { value: "It provides a built-in ORM for database operations.", correct: false }
    help: |
      Adherence to PSRs (PHP Standard Recommendations) promotes interoperability, allowing Symfony applications to easily integrate with other PSR-compliant libraries and tools.
      https://www.php-fig.org/psr/

  -
    question: >
      In Symfony's code organization, what is the purpose of the `config/` directory?
    answers:
      - { value: "To store application logs.", correct: false }
      - { value: "To hold all application templates.", correct: false }
      - { value: "To contain configuration files for services, routing, packages, etc.", correct: true }
      - { value: "To store compiled cache files.", correct: false }
    help: |
      The `config/` directory is where all your application's configuration files (YAML, XML, PHP) are stored, defining services, routes, packages, and more.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#code-organization

  -
    question: >
      Which of the following is a key responsibility of `Middleware` in the Symfony Messenger component?
    answers:
      - { value: "To serialize messages for transport.", correct: false }
      - { value: "To retrieve messages from a queue.", correct: false }
      - { value: "To handle cross-cutting concerns like logging, validation, or transactions during message dispatch.", correct: true }
      - { value: "To define the business logic for a message.", correct: false }
    help: |
      Middleware in Messenger can access the message and its envelope during dispatch, handling concerns that apply across multiple message types.
      https://symfony.com/doc/current/components/messenger.html#middleware

  -
    question: >
      What does the `#[AsCommand]` attribute primarily do when applied to a console command class in Symfony?
    answers:
      - { value: "It automatically executes the command on application startup.", correct: false }
      - { value: "It defines the command's name, description, and other configuration directly in the class.", correct: true }
      - { value: "It registers the command as a service in the dependency injection container.", correct: false }
      - { value: "It marks the command as deprecated.", correct: false }
    help: |
      The `#[AsCommand]` attribute allows you to configure a console command's name, description, and other options directly within its class, leveraging PHP attributes for configuration.
      https://symfony.com/doc/current/console.html#configuring-the-command

  -
    question: >
      Which directory in a standard Symfony application is typically used for storing temporary files, cache, and logs?
    answers:
      - { value: "`public/`", correct: false }
      - { value: "`src/`", correct: false }
      - { value: "`var/`", correct: true }
      - { value: "`bin/`", correct: false }
    help: |
      The `var/` directory contains generated files such as the cache (`var/cache/`) and logs (`var/log/`).
      https://symfony.com/doc/current/quick_tour/the_architecture.html#code-organization

  -
    question: >
      What is the purpose of the `#[AsTwigFilter]` attribute in Symfony?
    answers:
      - { value: "To define a Twig function.", correct: false }
      - { value: "To register a custom Twig filter automatically via autoconfiguration.", correct: true }
      - { value: "To mark a Twig template as cacheable.", correct: false }
      - { value: "To inject services into a Twig extension.", correct: false }
    help: |
      The `#[AsTwigFilter]` attribute allows Symfony to automatically register a PHP method as a Twig filter, simplifying the process of creating custom Twig extensions.
      https://symfony.com/doc/current/templating/twig_extension.html#creating-your-own-extensions

  -
    question: >
      When developing a Symfony application, what is the primary reason for using the `dev` environment (`APP_ENV=dev`)?
    answers:
      - { value: "To maximize application performance for end-users.", correct: false }
      - { value: "To enable debugging tools, detailed error messages, and logging for development purposes.", correct: true }
      - { value: "To deploy the application to a production server.", correct: false }
      - { value: "To run automated tests without a web server.", correct: false }
    help: |
      The `dev` environment is optimized for development, providing extensive debugging information, detailed error pages, and verbose logging to aid developers.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#_snippet_9

  -
    question: >
      Which of the following is a valid way to define a service in Symfony's Dependency Injection Container?
    answers:
      - { value: "Using YAML configuration files.", correct: true }
      - { value: "Using XML configuration files.", correct: true }
      - { value: "Using PHP configuration files.", correct: true }
      - { value: "Directly instantiating classes in the `public/index.php` file.", correct: false }
    help: |
      Symfony supports defining services using YAML, XML, or PHP configuration files.
      https://symfony.com/doc/current/service_container.html#defining-services-in-yaml-xml-or-php

  -
    question: >
      What is the primary purpose of the `public/` directory in a Symfony application?
    answers:
      - { value: "To store all PHP source code.", correct: false }
      - { value: "To serve as the web server's document root, containing publicly accessible files like `index.php` and assets.", correct: true }
      - { value: "To store cache and log files.", correct: false }
      - { value: "To manage Composer dependencies.", correct: false }
    help: |
      The `public/` directory is the web server's document root, meaning it's the only directory directly accessible from the web. It contains the front controller (`index.php`) and public assets.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#code-organization

  -
    question: >
      Which of the following describes a "Bridge" in Symfony's architecture?
    answers:
      - { value: "A component that provides a graphical user interface for Symfony applications.", correct: false }
      - { value: "A mechanism for connecting two different Symfony applications.", correct: false }
      - { value: "A component that adapts a third-party library to work seamlessly within the Symfony Framework.", correct: true }
      - { value: "A tool for generating database schema from entities.", correct: false }
    help: |
      Bridges are Symfony components that provide integration layers for popular third-party libraries, allowing them to be used effectively within the Symfony ecosystem.
      https://symfony.com/doc/current/components/dependency_injection/tags.html#bridges

  -
    question: >
      What is the significance of the `APP_SECRET` environment variable in a Symfony application?
    answers:
      - { value: "It defines the application's database connection string.", correct: false }
      - { value: "It's a unique secret key used for security-related tasks like session management, CSRF protection, and signing cookies.", correct: true }
      - { value: "It specifies the application's environment (e.g., dev, prod).", correct: false }
      - { value: "It's used to configure asset versioning.", correct: false }
    help: |
      `APP_SECRET` is a crucial security parameter used for various cryptographic operations within Symfony, and it should be a unique, strong random string for each application.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#_snippet_10

  -
    question: >
      Which Symfony component provides the `Request` and `Response` objects, encapsulating the HTTP specification?
    answers:
      - { value: "Routing", correct: false }
      - { value: "HttpKernel", correct: false }
      - { value: "HttpFoundation", correct: true }
      - { value: "Console", correct: false }
    help: |
      The HttpFoundation component provides the fundamental `Request` and `Response` classes, which are object-oriented representations of HTTP messages.
      https://symfony.com/doc/current/components/http_foundation.html

  -
    question: >
      When defining a configuration tree using Symfony's Config component, what does `arrayPrototype()` allow you to define?
    answers:
      - { value: "A single, fixed array of scalar values.", correct: false }
      - { value: "A numerically indexed list where each item is a complex array with its own defined children.", correct: true }
      - { value: "An associative array with predefined keys.", correct: false }
      - { value: "A list of scalar values that can be of any type.", correct: false }
    help: |
      `arrayPrototype()` is used to define a prototype for elements within a numerically indexed list, where each element itself is an array with a defined structure.
      https://symfony.com/doc/current/components/config/definition.html#prototyped-array-nodes

  -
    question: >
      Which of the following is a benefit of using Symfony Flex?
    answers:
      - { value: "It reduces the size of your `vendor/` directory.", correct: false }
      - { value: "It automates the creation and modification of configuration files based on installed packages.", correct: true }
      - { value: "It replaces the need for a web server like Apache or Nginx.", correct: false }
      - { value: "It provides a built-in database for development.", correct: false }
    help: |
      Symfony Flex automates common configuration tasks, such as creating configuration files, registering bundles, and setting up environment variables, based on "recipes" provided by packages.
      https://symfony.com/doc/current/setup/flex.html

  -
    question: >
      What is the purpose of the `kernel.terminate` event in the Symfony request lifecycle?
    answers:
      - { value: "It's dispatched before any controller is executed.", correct: false }
      - { value: "It allows for modifications to the `Response` object before it's sent.", correct: false }
      - { value: "It's dispatched after the response has been sent to the client, allowing for long-running tasks.", correct: true }
      - { value: "It handles exceptions that occur during the request.", correct: false }
    help: |
      The `kernel.terminate` event is dispatched after the response has been sent to the client, making it suitable for tasks that can be deferred (e.g., sending emails, logging) without delaying the user's experience.
      https://symfony.com/doc/current/reference/events.html#kernel-terminate

  -
    question: >
      What is the primary purpose of the `MicroKernelTrait` in a Symfony `Kernel` class?
    answers:
      - { value: "To automatically discover and register all services in the `src/` directory.", correct: false }
      - { value: "To provide a minimal kernel implementation suitable for small applications or APIs, reducing boilerplate.", correct: true }
      - { value: "To enable hot-swapping of bundles at runtime.", correct: false }
      - { value: "To enforce strict coding standards across the application.", correct: false }
    help: |
      The `MicroKernelTrait` provides a simplified way to create a Symfony kernel, especially useful for micro-applications or API-only projects, by handling common kernel setup.
      https://symfony.com/doc/current/configuration/micro_kernel_trait.html

  -
    question: >
      Which of the following is a naming convention for services in Symfony's Dependency Injection Container?
    answers:
      - { value: "Services should always be named with a `.` separator (e.g., `app.my_service`).", correct: false }
      - { value: "Services should be named using their Fully Qualified Class Name (FQCN) for autowiring.", correct: true }
      - { value: "Services must be named with a `_` prefix.", correct: false }
      - { value: "Service names are case-insensitive.", correct: false }
    help: |
      For autowiring, Symfony often uses the Fully Qualified Class Name (FQCN) as the service ID. For manually defined services, a convention like `app.service_name` is common.
      https://symfony.com/doc/current/service_container.html#service-naming-conventions

  -
    question: >
      What does it mean for a Symfony component to be "decoupled"?
    answers:
      - { value: "It means the component can only be used within the full Symfony Framework.", correct: false }
      - { value: "It means the component has no dependencies on any other PHP libraries.", correct: false }
      - { value: "It means the component can be used independently of other Symfony components and the full framework.", correct: true }
      - { value: "It means the component is not actively maintained.", correct: false }
    help: |
      Symfony components are designed to be decoupled, meaning they can be used as standalone libraries in any PHP project, not just Symfony applications.
      https://symfony.com/components

  -
    question: >
      Which PSR standard does Symfony's EventDispatcher component adhere to?
    answers:
      - { value: "PSR-1 (Basic Coding Standard)", correct: false }
      - { value: "PSR-6 (Caching Interface)", correct: false }
      - { value: "PSR-14 (Event Dispatcher)", correct: true }
      - { value: "PSR-11 (Container Interface)", correct: false }
    help: |
      The Symfony EventDispatcher component implements PSR-14, providing a standardized way to dispatch and listen for events.
      https://symfony.com/doc/current/components/event_dispatcher.html#psr-14-event-dispatcher

  -
    question: >
      What is the purpose of the `var/cache/` directory in a Symfony application?
    answers:
      - { value: "To store application source code.", correct: false }
      - { value: "To store compiled service container, routes, and Twig templates for performance.", correct: true }
      - { value: "To hold public assets like images and CSS.", correct: false }
      - { value: "To manage Composer dependencies.", correct: false }
    help: |
      The `var/cache/` directory stores the application's cache files, including the compiled service container, route definitions, and Twig templates, which are generated to optimize performance.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#code-organization

  -
    question: >
      Which of the following statements about Symfony's release management is true?
    answers:
      - { value: "New major versions are released every 6 months.", correct: false }
      - { value: "LTS (Long Term Support) versions receive longer periods of bug fixes and security updates.", correct: true }
      - { value: "All Symfony versions are supported indefinitely.", correct: false }
      - { value: "Minor versions (e.g., 7.0 to 7.1) typically introduce backward compatibility breaks.", correct: false }
    help: |
      Symfony has a defined release schedule with LTS versions offering extended support periods, which is crucial for long-term projects.
      https://symfony.com/releases

  -
    question: >
      When using the `PropertyAccessor` component, what is the primary difference between accessing a public property directly and using a getter method?
    answers:
      - { value: "There is no difference; `PropertyAccessor` treats them identically.", correct: false }
      - { value: "Accessing a public property is always faster than using a getter.", correct: false }
      - { value: "Using a getter method allows for custom logic or validation before returning the property's value.", correct: true }
      - { value: "Public properties cannot be accessed by `PropertyAccessor`.", correct: false }
    help: |
      `PropertyAccessor` can use public properties, getters (`get*`, `is*`, `has*`), and setters (`set*`). Using getter/setter methods allows for encapsulation and custom logic.
      https://symfony.com/doc/current/components/property_access.html#reading-and-writing

  -
    question: >
      Which of the following is a best practice for handling deprecations in your Symfony application?
    answers:
      - { value: "Ignore deprecation warnings until a major version upgrade.", correct: false }
      - { value: "Regularly review and address deprecation warnings during development to prepare for future upgrades.", correct: true }
      - { value: "Disable all deprecation warnings in production.", correct: false }
      - { value: "Downgrade Symfony to avoid deprecated features.", correct: false }
    help: |
      Addressing deprecations proactively during development is crucial for smooth upgrades to future major versions of Symfony.
      https://symfony.com/doc/current/contributing/code/bc.html#deprecations

  -
    question: >
      What is the purpose of the `#[Route]` attribute in a Symfony controller method?
    answers:
      - { value: "To define the service ID for the controller.", correct: false }
      - { value: "To specify the HTTP method(s) and URL path that trigger the controller action.", correct: true }
      - { value: "To inject services into the controller method.", correct: false }
      - { value: "To mark the controller method as deprecated.", correct: false }
    help: |
      The `#[Route]` attribute (or annotations in older Symfony versions) is used to configure routing for a controller method, mapping a URL path and HTTP methods to a specific action.
      https://symfony.com/doc/current/routing.html#routing-attributes

  -
    question: >
      Which component provides a powerful object-oriented way to manipulate objects and arrays using property paths (e.g., `user.address.street`)?
    answers:
      - { value: "Serializer", correct: false }
      - { value: "PropertyAccess", correct: true }
      - { value: "Validator", correct: false }
      - { value: "Form", correct: false }
    help: |
      The PropertyAccess component allows you to read and write to properties of objects or arrays using simple string paths, even for nested structures.
      https://symfony.com/doc/current/components/property_access.html

  -
    question: >
      What is the primary role of the `Kernel` class (e.g., `src/Kernel.php`) in a Symfony application?
    answers:
      - { value: "It's responsible for handling all database interactions.", correct: false }
      - { value: "It's the central entry point that bootstraps the application, registers bundles, and builds the service container.", correct: true }
      - { value: "It contains all the application's routing definitions.", correct: false }
      - { value: "It serves static assets directly to the browser.", correct: false }
    help: |
      The `Kernel` class is the heart of a Symfony application. It's responsible for booting the application, registering bundles, loading configuration, and building the service container.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#the-kernel

  -
    question: >
      Which of the following is a valid way to define a prototyped array of scalar values in Symfony's Config component?
    answers:
      - { value: "`arrayNode('drivers')->scalarPrototype()->end()`", correct: true }
      - { value: "`arrayNode('drivers')->arrayPrototype()->end()`", correct: false }
      - { value: "`scalarNode('drivers')->arrayPrototype()->end()`", correct: false }
      - { value: "`arrayNode('drivers')->children()->scalarNode('value')->end()`", correct: false }
    help: |
      `scalarPrototype()` is used within an `arrayNode` to define a numerically indexed list where each element is a simple scalar value.
      https://symfony.com/doc/current/components/config/definition.html#prototyped-scalar-nodes

  -
    question: >
      What is the purpose of the `composer.json` file in a Symfony project?
    answers:
      - { value: "To define the application's database schema.", correct: false }
      - { value: "To manage PHP dependencies and scripts for the project.", correct: true }
      - { value: "To configure the web server.", correct: false }
      - { value: "To store user session data.", correct: false }
    help: |
      `composer.json` is the configuration file for Composer, PHP's dependency manager. It lists project dependencies, scripts, and other metadata.
      https://getcomposer.org/doc/01-basic-usage.md#composer-json-project-setup

  -
    question: >
      Which of the following is a characteristic of Symfony's "components-based" architecture?
    answers:
      - { value: "It requires all applications to use the full Symfony Framework.", correct: false }
      - { value: "It promotes reusability by allowing individual features to be used independently.", correct: true }
      - { value: "It means Symfony applications are always single-file scripts.", correct: false }
      - { value: "It restricts the use of third-party libraries.", correct: false }
    help: |
      The component-based architecture is a cornerstone of Symfony, enabling developers to pick and choose specific functionalities without adopting the entire framework.
      https://symfony.com/components

  -
    question: >
      What is the primary function of the `vendor/` directory in a Symfony application?
    answers:
      - { value: "To store application-specific source code.", correct: false }
      - { value: "To contain all third-party libraries and dependencies managed by Composer.", correct: true }
      - { value: "To store configuration files.", correct: false }
      - { value: "To serve as the public web root.", correct: false }
    help: |
      The `vendor/` directory is where Composer installs all your project's dependencies, including Symfony components and any other third-party libraries.
      https://getcomposer.org/doc/01-basic-usage.md#vendor-directory

  -
    question: >
      Which of the following is an example of a PSR that Symfony adheres to for HTTP message interfaces?
    answers:
      - { value: "PSR-3 (Logger Interface)", correct: false }
      - { value: "PSR-7 (HTTP Message Interfaces)", correct: true }
      - { value: "PSR-11 (Container Interface)", correct: false }
      - { value: "PSR-14 (Event Dispatcher)", correct: false }
    help: |
      Symfony's HttpFoundation component provides its own `Request` and `Response` objects, but its HTTP Client and other components often interact with PSR-7 (HTTP Message Interfaces) and PSR-17 (HTTP Factories) for interoperability.
      https://symfony.com/doc/current/components/http_client.html#psr-18-http-client

  -
    question: >
      What is the purpose of the `bin/console` executable in a Symfony application?
    answers:
      - { value: "To start the built-in web server.", correct: false }
      - { value: "To run Composer commands.", correct: false }
      - { value: "To execute Symfony console commands for various administrative and development tasks.", correct: true }
      - { value: "To compile Twig templates.", correct: false }
    help: |
      The `bin/console` script is the entry point for Symfony's command-line interface, allowing you to run various commands for tasks like cache clearing, database migrations, and debugging.
      https://symfony.com/doc/current/console.html

  -
    question: >
      In Symfony's `PropertyInfo` component, what is the purpose of `PropertyTypeExtractorInterface`?
    answers:
      - { value: "To list all properties of a class.", correct: false }
      - { value: "To determine if a property is readable or writable.", correct: false }
      - { value: "To extract detailed type information (e.g., built-in type, class name, nullability) for a property.", correct: true }
      - { value: "To get short and long descriptions of a property.", correct: false }
    help: |
      `PropertyTypeExtractorInterface` defines the method `getTypes()` which returns an array of `Type` objects, providing detailed information about a property's type.
      https://symfony.com/doc/current/components/property_info.html#extractors

  -
    question: >
      What is the primary role of the `Router` component in Symfony?
    answers:
      - { value: "To handle user authentication.", correct: false }
      - { value: "To match an incoming URL to a specific controller and generate URLs from route names.", correct: true }
      - { value: "To manage database connections.", correct: false }
      - { value: "To render HTML templates.", correct: false }
    help: |
      The Routing component is responsible for mapping incoming HTTP requests to the correct controller action and for generating URLs based on defined routes.
      https://symfony.com/doc/current/routing.html

  -
    question: >
      Which of the following is a best practice for organizing application code within the `src/` directory?
    answers:
      - { value: "Placing all classes directly in `src/` without subdirectories.", correct: false }
      - { value: "Organizing classes into logical subdirectories based on their role (e.g., `Controller/`, `Service/`, `Entity/`).", correct: true }
      - { value: "Creating a new bundle for every single class.", correct: false }
      - { value: "Storing all configuration files in `src/`.", correct: false }
    help: |
      Organizing classes into logical subdirectories within `src/` (e.g., `Controller`, `Service`, `Entity`, `Repository`) improves code readability, maintainability, and discoverability.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#code-organization

  -
    question: >
      What is the purpose of the `when@test` configuration block in Symfony?
    answers:
      - { value: "It applies configuration only when running the application in a web browser.", correct: false }
      - { value: "It defines configuration specific to the `test` environment, typically for automated testing.", correct: true }
      - { value: "It's used to define configuration that applies to all environments except `prod`.", correct: false }
      - { value: "It's a deprecated configuration syntax.", correct: false }
    help: |
      The `when@test` block allows you to apply configuration specifically for the `test` environment, which is commonly used for functional and unit testing.
      https://symfony.com/doc/current/configuration.html#environment-specific-configuration

  -
    question: >
      Which component is responsible for managing the lifecycle of services and injecting dependencies into them?
    answers:
      - { value: "EventDispatcher", correct: false }
      - { value: "Routing", correct: false }
      - { value: "DependencyInjection", correct: true }
      - { value: "Serializer", correct: false }
    help: |
      The DependencyInjection component is the core of Symfony's service container, responsible for creating, configuring, and managing services and their dependencies.
      https://symfony.com/doc/current/components/dependency_injection.html

  -
    question: >
      What is the primary function of a "Bundle" in Symfony?
    answers:
      - { value: "A standalone PHP library that provides a single, specific feature.", correct: false }
      - { value: "A structured set of files (PHP code, configurations, templates, assets) that implements a feature or functionality and can be reused.", correct: true }
      - { value: "A tool for managing database migrations.", correct: false }
      - { value: "A graphical user interface for Symfony applications.", correct: false }
    help: |
      A Bundle is Symfony's way of packaging features. It's a directory structure that contains everything related to a specific feature, making it reusable across projects.
      https://symfony.com/doc/current/bundles.html

  -
    question: >
      Which of the following is a key principle of Symfony's architecture regarding extensibility?
    answers:
      - { value: "The framework is designed to be monolithic and not easily extended.", correct: false }
      - { value: "It uses a plugin-based system where all extensions must be installed via a central marketplace.", correct: false }
      - { value: "It is highly extensible through its component-based design, events, and service container.", correct: true }
      - { value: "Extensibility is achieved primarily by modifying core framework files.", correct: false }
    help: |
      Symfony's architecture is built for extensibility, leveraging its components, event dispatcher, and dependency injection container to allow developers to customize and extend functionality.
      https://symfony.com/doc/current/quick_tour/the_architecture.html

  -
    question: >
      What is the purpose of the `autoload_runtime.php` file in a Symfony application?
    answers:
      - { value: "It's a deprecated file that is no longer used.", correct: false }
      - { value: "It's part of the Symfony Runtime component, providing a flexible way to bootstrap applications (web, console, etc.) without relying on global state.", correct: true }
      - { value: "It contains all the application's routing definitions.", correct: false }
      - { value: "It's used for compiling assets during deployment.", correct: false }
    help: |
      `autoload_runtime.php` is part of the Symfony Runtime component, which provides a modern and flexible way to bootstrap different types of PHP applications (web, console, message consumers) by isolating global state.
      https://symfony.com/doc/current/components/runtime.html

  -
    question: >
      Which of the following best describes Symfony's approach to "Framework Interoperability"?
    answers:
      - { value: "Symfony applications can only interact with other Symfony applications.", correct: false }
      - { value: "Symfony components are designed to be used independently and adhere to PHP Standards Recommendations (PSRs) to facilitate integration with other libraries and frameworks.", correct: true }
      - { value: "Symfony provides built-in tools to convert code from other frameworks to Symfony.", correct: false }
      - { value: "Interoperability is achieved by avoiding all third-party dependencies.", correct: false }
    help: |
      Symfony's commitment to interoperability is demonstrated by its component-based design and adherence to PSRs, allowing its parts to be used with other PHP projects.
      https://symfony.com/doc/current/components.html