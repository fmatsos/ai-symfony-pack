category: Symfony Architecture

questions:
  -
    question: >
      What is the primary purpose of Symfony Flex in a Symfony 7 application?
    answers:
      - { value: "To simplify the installation and management of Symfony packages and their dependencies.", correct: true }
      - { value: "To provide a graphical user interface for Symfony development.", correct: false }
      - { value: "To replace Composer as the primary dependency manager.", correct: false }
      - { value: "To automatically generate all application code, including business logic.", correct: false }
    help: |
      Symfony Flex is a Composer plugin that simplifies the installation and management of Symfony applications and their dependencies by automating common tasks through "recipes."
      https://symfony.com/doc/current/setup/symfony_flex.html

  -
    question: |
      When you run `composer require logger` in a Symfony 7 application, what is the typical outcome related to Symfony Flex?
    answers:
      - { value: "Flex installs the Monolog bundle and creates or updates configuration files (e.g., `config/packages/monolog.yaml`).", correct: true }
      - { value: "Flex only installs the `psr/log` package, requiring manual configuration of a logger.", correct: false }
      - { value: "Flex removes all existing logging configurations from the application.", correct: false }
      - { value: "Flex prompts the user to manually choose a logging library from a list.", correct: false }
    help: |
      Symfony Flex automatically executes "recipes" when packages are installed. For `logger`, it installs the Monolog bundle and sets up its basic configuration.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#install-monolog-logger-in-symfony

  -
    question: >
      Under which open-source license is the Symfony framework distributed?
    answers:
      - { value: "MIT License", correct: true }
      - { value: "GPLv3 License", correct: false }
      - { value: "Apache License 2.0", correct: false }
      - { value: "BSD License", correct: false }
    help: |
      Symfony is released under the MIT license, which is a permissive free software license.
      https://symfony.com/doc/current/contributing/code/licensing.html

  -
    question: >
      What is a core characteristic of Symfony Components?
    answers:
      - { value: "They are standalone PHP libraries that can be used independently of the full Symfony framework.", correct: true }
      - { value: "They are tightly coupled modules that can only function within a full Symfony application.", correct: false }
      - { value: "They are primarily designed for front-end development and JavaScript integration.", correct: false }
      - { value: "They are commercial extensions requiring a paid license for usage.", correct: false }
    help: |
      Symfony Components are a set of decoupled and reusable PHP libraries. They can be used independently in any PHP project, not just a full Symfony application.
      https://symfony.com/doc/current/components/index.html

  -
    question: >
      Which Symfony Component is responsible for abstracting the HTTP specification, providing classes like `Request` and `Response`?
    answers:
      - { value: "HttpFoundation", correct: true }
      - { value: "Routing", correct: false }
      - { value: "HttpKernel", correct: false }
      - { value: "WebLink", correct: false }
    help: |
      The HttpFoundation component defines an object-oriented layer for the HTTP specification. It provides `Request` and `Response` classes.
      https://symfony.com/doc/current/components/http_foundation.html

  -
    question: >
      What is the primary role of the Symfony DependencyInjection component?
    answers:
      - { value: "To manage the instantiation and lifecycle of objects (services) within an application.", correct: true }
      - { value: "To handle database interactions and ORM mapping.", correct: false }
      - { value: "To process and validate user input from web forms.", correct: false }
      - { value: "To manage user authentication and authorization.", correct: false }
    help: |
      The DependencyInjection component allows you to standardize and centralize the way objects are constructed in your application. It manages services.
      https://symfony.com/doc/current/components/dependency_injection.html

  -
    question: >
      Which Symfony Component implements the Mediator design pattern, allowing different parts of an application to communicate without direct coupling?
    answers:
      - { value: "EventDispatcher", correct: true }
      - { value: "Messenger", correct: false }
      - { value: "Workflow", correct: false }
      - { value: "Notifier", correct: false }
    help: |
      The EventDispatcher component provides tools to implement the "Mediator" design pattern, allowing components to dispatch events and other components to listen to them.
      https://symfony.com/doc/current/components/event_dispatcher.html

  -
    question: >
      Which Symfony Component is used to create powerful command-line applications?
    answers:
      - { value: "Console", correct: true }
      - { value: "Process", correct: false }
      - { value: "Finder", correct: false }
      - { value: "Filesystem", correct: false }
    help: |
      The Console component allows you to create command-line commands.
      https://symfony.com/doc/current/components/console.html

  -
    question: |
      Consider the following PHP code using Symfony's PropertyAccess component:

      ```php
      use Symfony\Component\PropertyAccess\PropertyAccess;

      class Person
      {
          public string $firstName;
      }

      $person = new Person();
      $propertyAccessor = PropertyAccess::createPropertyAccessor();
      $propertyAccessor->setValue($person, 'firstName', 'Alice');
      $value = $propertyAccessor->getValue($person, 'firstName');
      ```

      What will be the value of `$value` after executing this code?
    answers:
      - { value: "\"Alice\"", correct: true }
      - { value: "null", correct: false }
      - { value: "An instance of `Person`", correct: false }
      - { value: "A `NoSuchPropertyException` will be thrown.", correct: false }
    help: |
      The `PropertyAccessor` component allows reading and writing to object properties or array elements using a string path. `setValue` sets the value, and `getValue` retrieves it.
      https://symfony.com/doc/current/components/property_access.html#reading-and-writing

  -
    question: |
      Which method of `Symfony\Component\PropertyInfo\PropertyInfoExtractor` would you use to get a list of all properties available on a given class?
    answers:
      - { value: "`getProperties(string $class)`", correct: true }
      - { value: "`getTypes(string $class, string $property)`", correct: false }
      - { value: "`getShortDescription(string $class, string $property)`", correct: false }
      - { value: "`isReadable(string $class, string $property)`", correct: false }
    help: |
      The `getProperties()` method of `PropertyInfoExtractor` (which uses `PropertyListExtractorInterface`) is used to list all properties of a class.
      https://symfony.com/doc/current/components/property_info.html#propertyinfoextractor-api

  -
    question: >
      In the Symfony Messenger component, what is the primary responsibility of a "Sender"?
    answers:
      - { value: "To serialize and send messages to a message broker or third-party API.", correct: true }
      - { value: "To retrieve, deserialize, and forward messages to handler(s).", correct: false }
      - { value: "To handle messages using the business logic applicable to the messages.", correct: false }
      - { value: "To access the message and its wrapper (the envelope) while it is dispatched through the bus.", correct: false }
    help: |
      A Sender in Symfony Messenger is responsible for sending messages to an external transport (e.g., a message queue).
      https://symfony.com/doc/current/components/messenger.html#sender

  -
    question: |
      Given the following `Configuration` class snippet using Symfony's Config component:

      ```php
      use Symfony\Component\Config\Definition\Builder\TreeBuilder;
      use Symfony\Component\Config\Definition\ConfigurationInterface;

      class Configuration implements ConfigurationInterface
      {
          public function getConfigTreeBuilder(): TreeBuilder
          {
              $treeBuilder = new TreeBuilder('my_bundle');
              $rootNode = $treeBuilder->getRootNode();

              $rootNode
                  ->children()
                      ->arrayNode('connections')
                          ->arrayPrototype()
                              ->children()
                                  ->scalarNode('driver')->end()
                                  ->scalarNode('host')->end()
                              ->end()
                          ->end()
                      ->end()
                  ->end()
              ;

              return $treeBuilder;
          }
      }
      ```

      Which of the following YAML configurations would be valid for the `connections` node?
    answers:
      - { value: '''connections: [{"driver": "mysql", "host": "localhost"}, {"driver": "pgsql", "host": "remote"}]''', correct: true }
      - { value: '''connections: { mysql: { driver: "mysql", host: "localhost" }, pgsql: { driver: "pgsql", host: "remote" } }''', correct: false }
      - { value: '''connections: "mysql"''', correct: false }
      - { value: '''connections: { driver: "mysql", host: "localhost" }''', correct: false }
    help: |
      The `arrayPrototype()` method defines a numerically indexed list of arrays, where each inner array conforms to the specified children (`driver`, `host`).
      https://symfony.com/doc/current/components/config/definition.html#prototyped-array-nodes

  -
    question: >
      What is the primary role of a "Bridge" in the Symfony ecosystem?
    answers:
      - { value: "To provide integration between a Symfony Component and a third-party library.", correct: true }
      - { value: "To create a connection between two different Symfony Components.", correct: false }
      - { value: "To act as a gateway for external API calls within a Symfony application.", correct: false }
      - { value: "To manage database migrations and schema updates.", correct: false }
    help: |
      Symfony "Bridges" are small libraries that integrate Symfony Components with popular third-party libraries. For example, MonologBridge integrates the Monolog library with Symfony's logging system.
      https://symfony.com/doc/current/components/index.html (Conceptual understanding of bridges)

  -
    question: >
      Which directory in a standard Symfony 7 application is typically used to store custom PHP classes, such as services, controllers, and entities?
    answers:
      - { value: "`src/`", correct: true }
      - { value: "`var/`", correct: false }
      - { value: "`public/`", correct: false }
      - { value: "`bin/`", correct: false }
    help: |
      The `src/` directory is where your application's PHP source code resides.
      https://symfony.com/doc/current/quick_tour/the_architecture.html

  -
    question: |
      Consider the following Symfony controller:

      ```php
      // src/Controller/HelloController.php
      namespace App\Controller;

      use Symfony\Component\HttpFoundation\Response;
      use Symfony\Component\Routing\Attribute\Route;

      #[Route('/hello/{name}', name: 'app_hello')]
      class HelloController
      {
          public function __invoke(string $name = 'World'): Response
          {
              return new Response(sprintf('Hello %s!', $name));
          }
      }
      ```

      What is this type of controller called, and why is it used?
    answers:
      - { value: "An invokable controller, used for single-action controllers following the Action-Domain-Responder (ADR) pattern.", correct: true }
      - { value: "A service controller, primarily used for injecting multiple services via method arguments.", correct: false }
      - { value: "A static controller, which does not require instantiation.", correct: false }
      - { value: "A deprecated controller type, no longer recommended in Symfony 7.", correct: false }
    help: |
      Controllers with an `__invoke()` method are known as invokable controllers. They are often used for single-action controllers, aligning with patterns like ADR.
      https://symfony.com/doc/current/controller/service.html#invokable-controllers

  -
    question: >
      In a Symfony application designed for multiple distinct applications (e.g., 'admin' and 'api') sharing some core bundles and configurations, which of the following is a recommended approach for organizing the project structure?
    answers:
      - { value: "Using multiple kernel classes, each with its own `apps/{app_id}/config` and `src/` directories.", correct: true }
      - { value: "Placing all application code and configuration within a single `src/` and `config/` directory, using conditional logic to differentiate behavior.", correct: false }
      - { value: "Creating separate Composer projects for each application, with no shared code.", correct: false }
      - { value: "Relying solely on environment variables to switch between application contexts.", correct: false }
    help: |
      Symfony supports multi-application architectures by allowing you to define multiple kernels, each with its own configuration and source code directories, often organized under an `apps/` folder.
      https://symfony.com/doc/current/configuration/multiple_kernels.html

  -
    question: >
      What is the correct order of events in the Symfony request handling lifecycle, starting from the initial request?
    answers:
      - { value: "Request -> Routing -> Controller -> Response", correct: true }
      - { value: "Controller -> Request -> Routing -> Response", correct: false }
      - { value: "Routing -> Request -> Response -> Controller", correct: false }
      - { value: "Response -> Controller -> Routing -> Request", correct: false }
    help: |
      The basic lifecycle involves the request being received, routed to a controller, the controller generating a response, and the response being sent back.
      https://symfony.com/doc/current/components/http_kernel.html (Conceptual understanding of the flow)

  -
    question: >
      What is the primary responsibility of the `HttpKernel` component in a Symfony application?
    answers:
      - { value: "To convert a `Request` into a `Response` by orchestrating various sub-systems like routing, controllers, and event listeners.", correct: true }
      - { value: "To manage the application's database connections and ORM.", correct: false }
      - { value: "To handle asset versioning and URL generation for static files.", correct: false }
      - { value: "To provide a templating engine for rendering HTML views.", correct: false }
    help: |
      The HttpKernel component is the core of a Symfony application, taking a `Request` object and returning a `Response` object. It dispatches events and coordinates other components.
      https://symfony.com/doc/current/components/http_kernel.html

  -
    question: >
      How does Symfony typically handle exceptions that occur during the request-response lifecycle?
    answers:
      - { value: "By dispatching a `kernel.exception` event, allowing listeners to convert the exception into a `Response`.", correct: true }
      - { value: "By immediately terminating the application with a fatal error.", correct: false }
      - { value: "By logging the exception and redirecting to the homepage.", correct: false }
      - { value: "By displaying the raw exception stack trace directly to the user in all environments.", correct: false }
    help: |
      When an exception is thrown, the HttpKernel dispatches the `kernel.exception` event, allowing listeners (like the default `ErrorController`) to handle it and generate an appropriate response.
      https://symfony.com/doc/current/controller/error_pages.html

  -
    question: >
      Which kernel event is dispatched immediately before the controller is executed, allowing for modifications to the controller or its arguments?
    answers:
      - { value: "`kernel.controller`", correct: true }
      - { value: "`kernel.request`", correct: false }
      - { value: "`kernel.response`", correct: false }
      - { value: "`kernel.view`", correct: false }
    help: |
      The `kernel.controller` event is dispatched after the controller has been resolved but before it is executed.
      https://symfony.com/doc/current/reference/events.html#kernel-controller

  -
    question: |
      Which of the following is considered a Symfony best practice for injecting dependencies into a service or controller?
    answers:
      - { value: "Using constructor injection with type-hinting for autowiring.", correct: true }
      - { value: "Using the `new` keyword directly inside the service to instantiate its dependencies.", correct: false }
      - { value: "Accessing the service container directly via `->get('service_id')` in controllers.", correct: false }
      - { value: "Relying on global variables to store and retrieve service instances.", correct: false }
    help: |
      Constructor injection with type-hinting is the recommended way to inject dependencies, leveraging Symfony's autowiring capabilities.
      https://symfony.com/doc/current/service_container/autowiring.html

  -
    question: |
      To change the Symfony application environment from `dev` to `prod`, which environment variable should be modified, and where is it typically configured?
    answers:
      - { value: "APP_ENV in the `.env` file.", correct: true }
      - { value: "SYMFONY_ENV in `php.ini`.", correct: false }
      - { value: "ENVIRONMENT in `composer.json`.", correct: false }
      - { value: "DEBUG_MODE in `config/services.yaml`.", correct: false }
    help: |
      The `APP_ENV` environment variable, typically defined in the `.env` file, controls the application's environment.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#change-symfony-application-environment-app-env

  -
    question: >
      What is the typical release cycle for a Symfony Long Term Support (LTS) version?
    answers:
      - { value: "A new LTS version is released every two years and supported for three years for bugs and four years for security issues.", correct: true }
      - { value: "A new LTS version is released annually and supported for one year.", correct: false }
      - { value: "LTS versions are released quarterly and supported for six months.", correct: false }
      - { value: "Symfony no longer offers LTS versions; all releases have short support cycles.", correct: false }
    help: |
      Symfony LTS versions are released every two years and offer extended support periods.
      https://symfony.com/releases

  -
    question: >
      What does Symfony's Backward Compatibility Promise guarantee?
    answers:
      - { value: "That minor versions (e.g., 7.0 to 7.1) will not introduce breaking changes, and major versions (e.g., 6.x to 7.x) will clearly document them.", correct: true }
      - { value: "That all code written for Symfony 2 will run without modification on Symfony 7.", correct: false }
      - { value: "That no public API will ever change or be removed.", correct: false }
      - { value: "That all third-party bundles will remain compatible across all Symfony versions.", correct: false }
    help: |
      Symfony has a strong backward compatibility promise, ensuring that minor versions are backward compatible and breaking changes in major versions are well-documented.
      https://symfony.com/doc/current/contributing/code/bc.html

  -
    question: >
      What is the recommended best practice for dealing with deprecations in a Symfony application?
    answers:
      - { value: "Address deprecations as they appear, typically during minor version upgrades, to ensure a smooth transition to future major versions.", correct: true }
      - { value: "Ignore deprecation warnings until a major version upgrade, then fix them all at once.", correct: false }
      - { value: "Disable deprecation warnings in all environments to prevent clutter in logs.", correct: false }
      - { value: "Rewrite the entire application whenever a new major Symfony version is released.", correct: false }
    help: |
      It is best practice to address deprecations proactively to make future upgrades easier.
      https://symfony.com/doc/current/contributing/code/conventions.html#deprecations

  -
    question: >
      Which of the following is a valid method for "overloading" or customizing a bundle's resources (e.g., templates, configurations) in Symfony 7?
    answers:
      - { value: "Placing a file with the same path in your application's `templates/bundles/` directory (for templates) or `config/packages/` (for configuration).", correct: true }
      - { value: "Directly modifying the source code of the installed bundle in `vendor/`.", correct: false }
      - { value: "Using a Composer patch to apply changes to the bundle.", correct: false }
      - { value: "There is no official way to customize bundle resources; you must fork the bundle.", correct: false }
    help: |
      Symfony allows you to override bundle resources (like templates and configurations) by placing files in specific paths within your application's directories.
      https://symfony.com/doc/current/bundles/override.html

  -
    question: >
      Which of the following PHP Standard Recommendations (PSRs) is most directly related to the `LoggerInterface` used for logging in Symfony applications?
    answers:
      - { value: "PSR-3 (Logger Interface)", correct: true }
      - { value: "PSR-7 (HTTP Message Interfaces)", correct: false }
      - { value: "PSR-11 (Container Interface)", correct: false }
      - { value: "PSR-14 (Event Dispatcher)", correct: false }
    help: |
      Symfony's logging system, including `LoggerInterface`, adheres to PSR-3, which defines a common interface for logging libraries.
      https://symfony.com/doc/current/logging.html#autowiring-logger-channels

  -
    question: >
      According to Symfony's naming conventions, what is the recommended casing for class names?
    answers:
      - { value: "PascalCase (e.g., `MyService`, `DefaultController`)", correct: true }
      - { value: "camelCase (e.g., `myService`, `defaultController`)", correct: false }
      - { value: "snake_case (e.g., `my_service`, `default_controller`)", correct: false }
      - { value: "kebab-case (e.g., `my-service`, `default-controller`)", correct: false }
    help: |
      Symfony follows PSR-1 and PSR-4, which dictate PascalCase for class names.
      https://symfony.com/doc/current/contributing/code/conventions.html#naming-conventions

  -
    question: >
      What is a "recipe" in the context of Symfony Flex?
    answers:
      - { value: "A set of automated instructions (e.g., configuration files, environment variables) that Flex applies when a package is installed or removed.", correct: true }
      - { value: "A pre-built Symfony application template that can be deployed directly.", correct: false }
      - { value: "A specific version constraint for a Composer package.", correct: false }
      - { value: "A database migration script for a Symfony application.", correct: false }
    help: |
      A Flex recipe is a set of automated instructions that Flex applies to your project when you install or remove a Composer package.
      https://symfony.com/doc/current/setup/symfony_flex.html#what-is-symfony-flex

  -
    question: >
      Which of the following Symfony Components is explicitly designed to be used as a standalone library in any PHP project, even without the full Symfony Framework?
    answers:
      - { value: "HttpFoundation", correct: true }
      - { value: "Routing", correct: true }
      - { value: "Console", correct: true }
      - { value: "WebProfilerBundle", correct: false }
      - { value: "DebugBundle", correct: false }
    help: |
      Many Symfony components are designed for standalone use. HttpFoundation, Routing, and Console are prime examples. Bundles like WebProfilerBundle and DebugBundle are framework-specific.
      https://symfony.com/doc/current/components/index.html

  -
    question: |
      Consider the following PHP class and `PropertyAccessor` usage:

      ```php
      use Symfony\Component\PropertyAccess\PropertyAccess;

      class Person
      {
          private array $data = [];

          public function __get(string $name): mixed
          {
              return $this->data[$name] ?? null;
          }

          public function __isset(string $name): bool
          {
              return isset($this->data[$name]);
          }

          public function __set(string $name, mixed $value): void
          {
              $this->data[$name] = $value;
          }
      }

      $person = new Person();
      $propertyAccessor = PropertyAccess::createPropertyAccessor();
      $propertyAccessor->setValue($person, 'age', 30);
      $age = $propertyAccessor->getValue($person, 'age');
      ```

      What is the value of `$age` after execution, and which PHP magic methods are being leveraged by `PropertyAccessor`?
    answers:
      - { value: "30; `__get()` and `__set()`", correct: true }
      - { value: "null; `__call()` and `__invoke()`", correct: false }
      - { value: "An exception will be thrown because `age` is not a public property.", correct: false }
      - { value: "30; `__callStatic()` and `__debugInfo()`", correct: false }
    help: |
      The `PropertyAccessor` component can interact with PHP's magic methods like `__get()`, `__set()`, and `__isset()` to access dynamic properties.
      https://symfony.com/doc/current/components/property_access.html#magic-methods

  -
    question: >
      Which of the following Symfony PropertyInfo extractors relies on parsing PHPDoc annotations to retrieve property information?
    answers:
      - { value: "PhpDocExtractor", correct: true }
      - { value: "ReflectionExtractor", correct: false }
      - { value: "ConstructorExtractor", correct: false }
      - { value: "PhpStanExtractor", correct: false }
    help: |
      The `PhpDocExtractor` parses PHPDoc annotations to extract property types and descriptions.
      https://symfony.com/doc/current/components/property_info.html#using-phpdocextractor

  -
    question: >
      In the Symfony Messenger component, what is an "Envelope Stamp"?
    answers:
      - { value: "A piece of metadata attached to a message that can be read or modified by middleware or transports.", correct: true }
      - { value: "A unique identifier for a message within the message bus.", correct: false }
      - { value: "A cryptographic signature used to secure messages.", correct: false }
      - { value: "A mechanism for defining the routing of messages to specific handlers.", correct: false }
    help: |
      Envelope Stamps are pieces of information attached to your message, providing metadata for middleware or transport layers.
      https://symfony.com/doc/current/components/messenger.html#envelope-stamps

  -
    question: |
      Given the following configuration definition using Symfony's Config component:

      ```php
      use Symfony\Component\Config\Definition\Builder\TreeBuilder;
      use Symfony\Component\Config\Definition\ConfigurationInterface;

      class Configuration implements ConfigurationInterface
      {
          public function getConfigTreeBuilder(): TreeBuilder
          {
              $treeBuilder = new TreeBuilder('my_app');
              $rootNode = $treeBuilder->getRootNode();

              $rootNode
                  ->children()
                      ->arrayNode('drivers')
                          ->scalarPrototype()->end()
                      ->end()
                  ->end()
              ;

              return $treeBuilder;
          }
      }
      ```

      Which YAML configuration correctly defines the `drivers` array?
    answers:
      - { value: "drivers: [\"mysql\", \"sqlite\"]", correct: true }
      - { value: "drivers: { driver1: \"mysql\", driver2: \"sqlite\" }", correct: false }
      - { value: "drivers: \"mysql\"", correct: false }
      - { value: "drivers: { 0: \"mysql\", 1: \"sqlite\" }", correct: true }
    help: |
      `scalarPrototype()` defines a numerically indexed array where each element is a scalar value. Both `["mysql", "sqlite"]` and `{ 0: "mysql", 1: "sqlite" }` are valid YAML representations of such an array.
      https://symfony.com/doc/current/components/config/definition.html#prototyped-scalar-nodes

  -
    question: >
      Where should business logic and reusable code that is not directly related to HTTP requests (e.g., data manipulation, external API calls) typically be placed in a Symfony application?
    answers:
      - { value: "In dedicated service classes within the `src/` directory.", correct: true }
      - { value: "Directly inside controller methods.", correct: false }
      - { value: "In Twig templates.", correct: false }
      - { value: "In global functions defined in `public/index.php`.", correct: false }
    help: |
      Business logic and reusable code should be encapsulated in services, promoting separation of concerns and testability.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#create-a-custom-service-class-in-symfony

  -
    question: >
      How does Symfony primarily determine which controller and action to execute for an incoming HTTP request?
    answers:
      - { value: "Through the Routing component, which matches the request URL and method to a defined route.", correct: true }
      - { value: "By scanning all PHP files in the `src/Controller/` directory for a matching function name.", correct: false }
      - { value: "Based on the order of controller files in the filesystem.", correct: false }
      - { value: "By using a hardcoded switch statement in the `public/index.php` file.", correct: false }
    help: |
      The Routing component is responsible for mapping incoming HTTP requests to the appropriate controller and action based on defined routes.
      https://symfony.com/doc/current/routing.html

  -
    question: >
      When an exception occurs in a Symfony application, which component is primarily responsible for transforming that exception into a user-friendly HTTP response (e.g., a 404 or 500 error page)?
    answers:
      - { value: "The HttpKernel component, via the `kernel.exception` event and its listeners (like the default error controller).", correct: true }
      - { value: "The Debug component, which only displays the raw stack trace.", correct: false }
      - { value: "The Routing component, which redirects to a predefined error URL.", correct: false }
      - { value: "The Security component, which blocks the request entirely.", correct: false }
    help: |
      The HttpKernel, specifically through the `kernel.exception` event, manages the conversion of exceptions into HTTP responses.
      https://symfony.com/doc/current/controller/error_pages.html

  -
    question: >
      What is the key difference between an Event Listener and an Event Subscriber in Symfony's EventDispatcher component?
    answers:
      - { value: "An Event Listener defines a method to call for a specific event, while an Event Subscriber defines which events it listens to and their corresponding methods.", correct: true }
      - { value: "An Event Listener can only listen to one event, while an Event Subscriber can listen to multiple events.", correct: false }
      - { value: "Event Listeners are configured in YAML, while Event Subscribers are configured with PHP attributes.", correct: false }
      - { value: "Event Listeners are deprecated in Symfony 7, replaced by Event Subscribers.", correct: false }
    help: |
      Event Listeners are simple callables that respond to events. Event Subscribers implement `EventSubscriberInterface` and declare which events they subscribe to and the methods to call.
      https://symfony.com/doc/current/components/event_dispatcher.html#event-listeners-and-subscribers

  -
    question: >
      Which of the following configuration formats is officially supported and commonly used in Symfony 7 applications?
    answers:
      - { value: "YAML", correct: true }
      - { value: "XML", correct: true }
      - { value: "PHP", correct: true }
      - { value: "JSON", correct: false }
    help: |
      Symfony officially supports YAML, XML, and PHP for configuration. JSON is not a primary configuration format.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#configure-symfony-for-different-environments-yaml-xml-php

  -
    question: >
      What is the primary purpose of the `symfony.lock` file in a Symfony Flex project?
    answers:
      - { value: "To store the exact versions of Symfony recipes applied to the project, ensuring consistent application setup across environments.", correct: true }
      - { value: "To lock the versions of all Composer dependencies, similar to `composer.lock`.", correct: false }
      - { value: "To define the application's environment variables.", correct: false }
      - { value: "To store cached data for faster application boot-up.", correct: false }
    help: |
      The `symfony.lock` file tracks the exact versions of Symfony Flex recipes applied to your project, ensuring reproducibility of the application structure.
      https://symfony.com/doc/current/setup/symfony_flex.html#what-is-symfony-flex (Conceptual understanding of symfony.lock)

  -
    question: |
      When configuring the `property_accessor` service in `framework.yaml`, which option allows the accessor to return `null` instead of throwing a `NoSuchPropertyException` when a property path does not exist?
    answers:
      - { value: "`throw_exception_on_invalid_property_path: false`", correct: false }
      - { value: "`disable_exception_on_invalid_property_path: true`", correct: true }
      - { value: "`ignore_missing_properties: true`", correct: false }
      - { value: "`allow_null_on_missing_path: true`", correct: false }
    help: |
      The `disableExceptionOnInvalidPropertyPath()` method (or its configuration equivalent) allows the `PropertyAccessor` to return `null` instead of throwing an exception for non-existent paths. The configuration option is `property_accessor.throw_exception_on_invalid_property_path` which defaults to `false` for invalid *indexes*, but for invalid *paths* you use the builder method. The question asks about *property path* not *invalid index*. The `framework.yaml` configuration snippet provided in the docs for `throw_exception_on_invalid_index` is different. The correct option is `disableExceptionOnInvalidPropertyPath()` on the builder. So the closest correct answer is the one that disables the exception. Let me re-evaluate this.
      The documentation states: `throw_exception_on_invalid_index: type: boolean default: false description: When enabled, the property_accessor service throws an exception when you try to access an invalid index of an array.`
      For `NoSuchPropertyException` on invalid *property paths*, the example shows `PropertyAccess::createPropertyAccessorBuilder()->disableExceptionOnInvalidPropertyPath()`.
      There isn't a direct YAML config for `disableExceptionOnInvalidPropertyPath` in the provided snippets. However, the question asks about the *option* that allows it. The option is conceptually `disable_exception_on_invalid_property_path`. I will assume the question implies the conceptual configuration, even if not directly a YAML key in `framework.yaml` for this specific behavior.

      Let's re-check the `framework.rst` for `property_accessor` config.
      `property_accessor.throw_exception_on_invalid_index` is the only related config.
      The code snippet `disableExceptionOnInvalidPropertyPath()` is a builder method.
      The question asks "which option allows the accessor to return null instead of throwing a NoSuchPropertyException when a property path does not exist?".
      This is specifically about `NoSuchPropertyException` for *invalid property paths*, not *invalid indexes*.
      Given the provided documentation, the `disableExceptionOnInvalidPropertyPath()` method is the way to achieve this. If it were a YAML option, it would likely be named similarly.
      The option `throw_exception_on_invalid_property_path: false` is a plausible YAML representation of disabling the exception. The other options are clearly wrong or refer to different concepts.
      Let's stick with the most direct interpretation of "disable exception".

      Revised answer for Q37:
      - { value: "`throw_exception_on_invalid_property_path: false`", correct: true } (This is a common pattern for disabling exceptions, even if the exact YAML key isn't in the provided snippet for *paths* vs *indexes*).
      The provided snippet only has `throw_exception_on_invalid_index`.
      Let's re-read the prompt: "use your internal knowledge and access to up-to-date Symfony documentation to validate every question and answer for accuracy."
      My internal knowledge says `disableExceptionOnInvalidPropertyPath()` is the method. If it were a config, it would be `property_accessor.disable_exception_on_invalid_property_path: true` or `property_accessor.throw_exception_on_invalid_property_path: false`.
      Given the options, `throw_exception_on_invalid_property_path: false` is the most logical.

      Let me re-evaluate the options for Q37.
      The snippet for `disableExceptionOnInvalidPropertyPath()` is:
      ```php
      $propertyAccessor = PropertyAccess::createPropertyAccessorBuilder()
          ->disableExceptionOnInvalidPropertyPath()
          ->getPropertyAccessor();
      ```
      This is a builder method, not a config key.
      The only config key related to exceptions in `property_accessor` is `throw_exception_on_invalid_index`.
      The question is specifically about `NoSuchPropertyException` for *invalid property paths*.
      If there's no direct YAML config for this, then the question might be flawed or expecting knowledge of common config patterns.

      Let's assume the question is asking for the *conceptual* configuration.
      Option 1: `throw_exception_on_invalid_property_path: false` - This would conceptually disable the exception.
      Option 2: `disable_exception_on_invalid_property_path: true` - This is also conceptually correct.
      The provided documentation snippet for `property_accessor` only shows `throw_exception_on_invalid_index`.
      This is a tricky one because the exact YAML key for *paths* isn't in the provided docs.

      I will choose the option that best reflects the *intent* of disabling the exception for invalid paths, even if the exact YAML key isn't explicitly documented in the provided snippets for *paths* (only for *indexes*).
      The `disableExceptionOnInvalidPropertyPath()` method is the PHP way.
      If it were a config, it would be a boolean.
      `throw_exception_on_invalid_property_path: false` means "don't throw exception".
      `disable_exception_on_invalid_property_path: true` means "disable exception".
      Both are plausible.

      Let's check the official Symfony docs for `framework.property_accessor` configuration.
      Searching `symfony.com/doc/current/reference/configuration/framework.html` for `property_accessor`.
      It lists `throw_exception_on_invalid_index` (default `false`).
      It does *not* list a `throw_exception_on_invalid_property_path` or `disable_exception_on_invalid_property_path`.
      This means the behavior of returning `null` for invalid property paths when using `PropertyAccess::createPropertyAccessor()` is the *default* behavior for `PropertyAccessor` *unless* the exception is explicitly enabled.
      No, that's not right. `NoSuchPropertyException` *is* thrown by default for invalid paths.
      The `disableExceptionOnInvalidPropertyPath()` builder method *changes* this default behavior.

      So, if the question is about *configuring* it via YAML, and the YAML config for this specific behavior isn't present in the docs, I should avoid making up a YAML key.
      The prompt says: "Every question, answer, and explanation must be 100% accurate, according to the official Symfony 7 and PHP 8.2 documentation."

      Since the `framework.yaml` snippet only shows `throw_exception_on_invalid_index`, and the `disableExceptionOnInvalidPropertyPath()` is a *builder method*, not a YAML config, I should rephrase this question or remove it if I cannot find a direct YAML configuration for this.

      Let's re-examine the `PropertyAccess` component documentation.
      "By default, the PropertyAccessor throws a `Symfony\Component\PropertyAccess\Exception\NoSuchPropertyException` when you try to read or write to a non-existent property path."
      "If you want to return null instead of throwing an exception, you can configure the PropertyAccessor using the `PropertyAccessorBuilder`:"
      ```php
      $propertyAccessor = PropertyAccess::createPropertyAccessorBuilder()
          ->disableExceptionOnInvalidPropertyPath()
          ->getPropertyAccessor();
      ```
      This confirms it's a builder method, not a YAML config.

      Therefore, I cannot ask a question about a YAML config for this specific behavior based on the provided docs. I need to replace Q37.

      **New Q37 (Framework Interoperability - PSR-7/17)**
      **New Q38 (Event Dispatcher - Custom Event)**
      **New Q39 (Best Practices - Testing)**
      **New Q40 (Release Management - Maintenance)**
      **New Q41 (Backward Compatibility - Deprecation Strategy)**
      **New Q42 (Deprecations - How to find them)**
      **New Q43 (Framework Overloading - Services)**
      **New Q44 (Framework Interoperability - PSR-11 Container)**
      **New Q45 (Naming Conventions - Routes)**
      **New Q46 (Flex - `composer.lock` vs `symfony.lock`)**
      **New Q47 (PropertyAccess - Nested Arrays)**
      **New Q48 (PropertyInfo - `ConstructorExtractor` usage)**
      **New Q49 (Messenger - Query Bus)**
      **New Q50 (Code Organization - Twig Extension)**

      This is a better plan. I will ensure the questions are distinct and cover the subtopics.

Let's continue generating from Q37.

```yaml
category: Symfony Architecture

questions:
  -
    question: >
      What is the primary purpose of Symfony Flex in a Symfony 7 application?
    answers:
      - { value: "To simplify the installation and management of Symfony packages and their dependencies.", correct: true }
      - { value: "To provide a graphical user interface for Symfony development.", correct: false }
      - { value: "To replace Composer as the primary dependency manager.", correct: false }
      - { value: "To automatically generate all application code, including business logic.", correct: false }
    help: |
      Symfony Flex is a Composer plugin that simplifies the installation and management of Symfony applications and their dependencies by automating common tasks through "recipes."
      https://symfony.com/doc/current/setup/symfony_flex.html

  -
    question: |
      When you run `composer require logger` in a Symfony 7 application, what is the typical outcome related to Symfony Flex?
    answers:
      - { value: "Flex installs the Monolog bundle and creates or updates configuration files (e.g., `config/packages/monolog.yaml`).", correct: true }
      - { value: "Flex only installs the `psr/log` package, requiring manual configuration of a logger.", correct: false }
      - { value: "Flex removes all existing logging configurations from the application.", correct: false }
      - { value: "Flex prompts the user to manually choose a logging library from a list.", correct: false }
    help: |
      Symfony Flex automatically executes "recipes" when packages are installed. For `logger`, it installs the Monolog bundle and sets up its basic configuration.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#install-monolog-logger-in-symfony

  -
    question: >
      Under which open-source license is the Symfony framework distributed?
    answers:
      - { value: "MIT License", correct: true }
      - { value: "GPLv3 License", correct: false }
      - { value: "Apache License 2.0", correct: false }
      - { value: "BSD License", correct: false }
    help: |
      Symfony is released under the MIT license, which is a permissive free software license.
      https://symfony.com/doc/current/contributing/code/licensing.html

  -
    question: >
      What is a core characteristic of Symfony Components?
    answers:
      - { value: "They are standalone PHP libraries that can be used independently of the full Symfony framework.", correct: true }
      - { value: "They are tightly coupled modules that can only function within a full Symfony application.", correct: false }
      - { value: "They are primarily designed for front-end development and JavaScript integration.", correct: false }
      - { value: "They are commercial extensions requiring a paid license for usage.", correct: false }
    help: |
      Symfony Components are a set of decoupled and reusable PHP libraries. They can be used independently in any PHP project, not just a full Symfony application.
      https://symfony.com/doc/current/components/index.html

  -
    question: >
      Which Symfony Component is responsible for abstracting the HTTP specification, providing classes like `Request` and `Response`?
    answers:
      - { value: "HttpFoundation", correct: true }
      - { value: "Routing", correct: false }
      - { value: "HttpKernel", correct: false }
      - { value: "WebLink", correct: false }
    help: |
      The HttpFoundation component defines an object-oriented layer for the HTTP specification. It provides `Request` and `Response` classes.
      https://symfony.com/doc/current/components/http_foundation.html

  -
    question: >
      What is the primary role of the Symfony DependencyInjection component?
    answers:
      - { value: "To manage the instantiation and lifecycle of objects (services) within an application.", correct: true }
      - { value: "To handle database interactions and ORM mapping.", correct: false }
      - { value: "To process and validate user input from web forms.", correct: false }
      - { value: "To manage user authentication and authorization.", correct: false }
    help: |
      The DependencyInjection component allows you to standardize and centralize the way objects are constructed in your application. It manages services.
      https://symfony.com/doc/current/components/dependency_injection.html

  -
    question: >
      Which Symfony Component implements the Mediator design pattern, allowing different parts of an application to communicate without direct coupling?
    answers:
      - { value: "EventDispatcher", correct: true }
      - { value: "Messenger", correct: false }
      - { value: "Workflow", correct: false }
      - { value: "Notifier", correct: false }
    help: |
      The EventDispatcher component provides tools to implement the "Mediator" design pattern, allowing components to dispatch events and other components to listen to them.
      https://symfony.com/doc/current/components/event_dispatcher.html

  -
    question: >
      Which Symfony Component is used to create powerful command-line applications?
    answers:
      - { value: "Console", correct: true }
      - { value: "Process", correct: false }
      - { value: "Finder", correct: false }
      - { value: "Filesystem", correct: false }
    help: |
      The Console component allows you to create command-line commands.
      https://symfony.com/doc/current/components/console.html

  -
    question: |
      Consider the following PHP code using Symfony's PropertyAccess component:

      ```php
      use Symfony\Component\PropertyAccess\PropertyAccess;

      class Person
      {
          public string $firstName;
      }

      $person = new Person();
      $propertyAccessor = PropertyAccess::createPropertyAccessor();
      $propertyAccessor->setValue($person, 'firstName', 'Alice');
      $value = $propertyAccessor->getValue($person, 'firstName');
      ```

      What will be the value of `$value` after executing this code?
    answers:
      - { value: "\"Alice\"", correct: true }
      - { value: "null", correct: false }
      - { value: "An instance of `Person`", correct: false }
      - { value: "A `NoSuchPropertyException` will be thrown.", correct: false }
    help: |
      The `PropertyAccessor` component allows reading and writing to object properties or array elements using a string path. `setValue` sets the value, and `getValue` retrieves it.
      https://symfony.com/doc/current/components/property_access.html#reading-and-writing

  -
    question: |
      Which method of `Symfony\Component\PropertyInfo\PropertyInfoExtractor` would you use to get a list of all properties available on a given class?
    answers:
      - { value: "`getProperties(string $class)`", correct: true }
      - { value: "`getTypes(string $class, string $property)`", correct: false }
      - { value: "`getShortDescription(string $class, string $property)`", correct: false }
      - { value: "`isReadable(string $class, string $property)`", correct: false }
    help: |
      The `getProperties()` method of `PropertyInfoExtractor` (which uses `PropertyListExtractorInterface`) is used to list all properties of a class.
      https://symfony.com/doc/current/components/property_info.html#propertyinfoextractor-api

  -
    question: >
      In the Symfony Messenger component, what is the primary responsibility of a "Sender"?
    answers:
      - { value: "To serialize and send messages to a message broker or third-party API.", correct: true }
      - { value: "To retrieve, deserialize, and forward messages to handler(s).", correct: false }
      - { value: "To handle messages using the business logic applicable to the messages.", correct: false }
      - { value: "To access the message and its wrapper (the envelope) while it is dispatched through the bus.", correct: false }
    help: |
      A Sender in Symfony Messenger is responsible for sending messages to an external transport (e.g., a message queue).
      https://symfony.com/doc/current/components/messenger.html#sender

  -
    question: |
      Given the following `Configuration` class snippet using Symfony's Config component:

      ```php
      use Symfony\Component\Config\Definition\Builder\TreeBuilder;
      use Symfony\Component\Config\Definition\ConfigurationInterface;

      class Configuration implements ConfigurationInterface
      {
          public function getConfigTreeBuilder(): TreeBuilder
          {
              $treeBuilder = new TreeBuilder('my_bundle');
              $rootNode = $treeBuilder->getRootNode();

              $rootNode
                  ->children()
                      ->arrayNode('connections')
                          ->arrayPrototype()
                              ->children()
                                  ->scalarNode('driver')->end()
                                  ->scalarNode('host')->end()
                              ->end()
                          ->end()
                      ->end()
                  ->end()
              ;

              return $treeBuilder;
          }
      }
      ```

      Which of the following YAML configurations would be valid for the `connections` node?
    answers:
      - { value: '''connections: [{"driver": "mysql", "host": "localhost"}, {"driver": "pgsql", "host": "remote"}]''', correct: true }
      - { value: '''connections: { mysql: { driver: "mysql", host: "localhost" }, pgsql: { driver: "pgsql", host: "remote" } }''', correct: false }
      - { value: '''connections: "mysql"''', correct: false }
      - { value: '''connections: { driver: "mysql", host: "localhost" }''', correct: false }
    help: |
      The `arrayPrototype()` method defines a numerically indexed list of arrays, where each inner array conforms to the specified children (`driver`, `host`).
      https://symfony.com/doc/current/components/config/definition.html#prototyped-array-nodes

  -
    question: >
      What is the primary role of a "Bridge" in the Symfony ecosystem?
    answers:
      - { value: "To provide integration between a Symfony Component and a third-party library.", correct: true }
      - { value: "To create a connection between two different Symfony Components.", correct: false }
      - { value: "To act as a gateway for external API calls within a Symfony application.", correct: false }
      - { value: "To manage database migrations and schema updates.", correct: false }
    help: |
      Symfony "Bridges" are small libraries that integrate Symfony Components with popular third-party libraries. For example, MonologBridge integrates the Monolog library with Symfony's logging system.
      https://symfony.com/doc/current/components/index.html (Conceptual understanding of bridges)

  -
    question: >
      Which directory in a standard Symfony 7 application is typically used to store custom PHP classes, such as services, controllers, and entities?
    answers:
      - { value: "`src/`", correct: true }
      - { value: "`var/`", correct: false }
      - { value: "`public/`", correct: false }
      - { value: "`bin/`", correct: false }
    help: |
      The `src/` directory is where your application's PHP source code resides.
      https://symfony.com/doc/current/quick_tour/the_architecture.html

  -
    question: |
      Consider the following Symfony controller:

      ```php
      // src/Controller/HelloController.php
      namespace App\Controller;

      use Symfony\Component\HttpFoundation\Response;
      use Symfony\Component\Routing\Attribute\Route;

      #[Route('/hello/{name}', name: 'app_hello')]
      class HelloController
      {
          public function __invoke(string $name = 'World'): Response
          {
              return new Response(sprintf('Hello %s!', $name));
          }
      }
      ```

      What is this type of controller called, and why is it used?
    answers:
      - { value: "An invokable controller, used for single-action controllers following the Action-Domain-Responder (ADR) pattern.", correct: true }
      - { value: "A service controller, primarily used for injecting multiple services via method arguments.", correct: false }
      - { value: "A static controller, which does not require instantiation.", correct: false }
      - { value: "A deprecated controller type, no longer recommended in Symfony 7.", correct: false }
    help: |
      Controllers with an `__invoke()` method are known as invokable controllers. They are often used for single-action controllers, aligning with patterns like ADR.
      https://symfony.com/doc/current/controller/service.html#invokable-controllers

  -
    question: >
      In a Symfony application designed for multiple distinct applications (e.g., 'admin' and 'api') sharing some core bundles and configurations, which of the following is a recommended approach for organizing the project structure?
    answers:
      - { value: "Using multiple kernel classes, each with its own `apps/{app_id}/config` and `src/` directories.", correct: true }
      - { value: "Placing all application code and configuration within a single `src/` and `config/` directory, using conditional logic to differentiate behavior.", correct: false }
      - { value: "Creating separate Composer projects for each application, with no shared code.", correct: false }
      - { value: "Relying solely on environment variables to switch between application contexts.", correct: false }
    help: |
      Symfony supports multi-application architectures by allowing you to define multiple kernels, each with its own configuration and source code directories, often organized under an `apps/` folder.
      https://symfony.com/doc/current/configuration/multiple_kernels.html

  -
    question: >
      What is the correct order of events in the Symfony request handling lifecycle, starting from the initial request?
    answers:
      - { value: "Request -> Routing -> Controller -> Response", correct: true }
      - { value: "Controller -> Request -> Routing -> Response", correct: false }
      - { value: "Routing -> Request -> Response -> Controller", correct: false }
      - { value: "Response -> Controller -> Routing -> Request", correct: false }
    help: |
      The basic lifecycle involves the request being received, routed to a controller, the controller generating a response, and the response being sent back.
      https://symfony.com/doc/current/components/http_kernel.html (Conceptual understanding of the flow)

  -
    question: >
      What is the primary responsibility of the `HttpKernel` component in a Symfony application?
    answers:
      - { value: "To convert a `Request` into a `Response` by orchestrating various sub-systems like routing, controllers, and event listeners.", correct: true }
      - { value: "To manage the application's database connections and ORM.", correct: false }
      - { value: "To handle asset versioning and URL generation for static files.", correct: false }
      - { value: "To provide a templating engine for rendering HTML views.", correct: false }
    help: |
      The HttpKernel component is the core of a Symfony application, taking a `Request` object and returning a `Response` object. It dispatches events and coordinates other components.
      https://symfony.com/doc/current/components/http_kernel.html

  -
    question: >
      How does Symfony typically handle exceptions that occur during the request-response lifecycle?
    answers:
      - { value: "By dispatching a `kernel.exception` event, allowing listeners to convert the exception into a `Response`.", correct: true }
      - { value: "By immediately terminating the application with a fatal error.", correct: false }
      - { value: "By logging the exception and redirecting to the homepage.", correct: false }
      - { value: "By displaying the raw exception stack trace directly to the user in all environments.", correct: false }
    help: |
      When an exception is thrown, the HttpKernel dispatches the `kernel.exception` event, allowing listeners (like the default `ErrorController`) to handle it and generate an appropriate response.
      https://symfony.com/doc/current/controller/error_pages.html

  -
    question: >
      Which kernel event is dispatched immediately before the controller is executed, allowing for modifications to the controller or its arguments?
    answers:
      - { value: "`kernel.controller`", correct: true }
      - { value: "`kernel.request`", correct: false }
      - { value: "`kernel.response`", correct: false }
      - { value: "`kernel.view`", correct: false }
    help: |
      The `kernel.controller` event is dispatched after the controller has been resolved but before it is executed.
      https://symfony.com/doc/current/reference/events.html#kernel-controller

  -
    question: |
      Which of the following is considered a Symfony best practice for injecting dependencies into a service or controller?
    answers:
      - { value: "Using constructor injection with type-hinting for autowiring.", correct: true }
      - { value: "Using the `new` keyword directly inside the service to instantiate its dependencies.", correct: false }
      - { value: "Accessing the service container directly via `->get('service_id')` in controllers.", correct: false }
      - { value: "Relying on global variables to store and retrieve service instances.", correct: false }
    help: |
      Constructor injection with type-hinting is the recommended way to inject dependencies, leveraging Symfony's autowiring capabilities.
      https://symfony.com/doc/current/service_container/autowiring.html

  -
    question: |
      To change the Symfony application environment from `dev` to `prod`, which environment variable should be modified, and where is it typically configured?
    answers:
      - { value: "APP_ENV in the `.env` file.", correct: true }
      - { value: "SYMFONY_ENV in `php.ini`.", correct: false }
      - { value: "ENVIRONMENT in `composer.json`.", correct: false }
      - { value: "DEBUG_MODE in `config/services.yaml`.", correct: false }
    help: |
      The `APP_ENV` environment variable, typically defined in the `.env` file, controls the application's environment.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#change-symfony-application-environment-app-env

  -
    question: >
      What is the typical release cycle for a Symfony Long Term Support (LTS) version?
    answers:
      - { value: "A new LTS version is released every two years and supported for three years for bugs and four years for security issues.", correct: true }
      - { value: "A new LTS version is released annually and supported for one year.", correct: false }
      - { value: "LTS versions are released quarterly and supported for six months.", correct: false }
      - { value: "Symfony no longer offers LTS versions; all releases have short support cycles.", correct: false }
    help: |
      Symfony LTS versions are released every two years and offer extended support periods.
      https://symfony.com/releases

  -
    question: >
      What does Symfony's Backward Compatibility Promise guarantee?
    answers:
      - { value: "That minor versions (e.g., 7.0 to 7.1) will not introduce breaking changes, and major versions (e.g., 6.x to 7.x) will clearly document them.", correct: true }
      - { value: "That all code written for Symfony 2 will run without modification on Symfony 7.", correct: false }
      - { value: "That no public API will ever change or be removed.", correct: false }
      - { value: "That all third-party bundles will remain compatible across all Symfony versions.", correct: false }
    help: |
      Symfony has a strong backward compatibility promise, ensuring that minor versions are backward compatible and breaking changes in major versions are well-documented.
      https://symfony.com/doc/current/contributing/code/bc.html

  -
    question: >
      What is the recommended best practice for dealing with deprecations in a Symfony application?
    answers:
      - { value: "Address deprecations as they appear, typically during minor version upgrades, to ensure a smooth transition to future major versions.", correct: true }
      - { value: "Ignore deprecation warnings until a major version upgrade, then fix them all at once.", correct: false }
      - { value: "Disable deprecation warnings in all environments to prevent clutter in logs.", correct: false }
      - { value: "Rewrite the entire application whenever a new major Symfony version is released.", correct: false }
    help: |
      It is best practice to address deprecations proactively to make future upgrades easier.
      https://symfony.com/doc/current/contributing/code/conventions.html#deprecations

  -
    question: >
      Which of the following is a valid method for "overloading" or customizing a bundle's resources (e.g., templates, configurations) in Symfony 7?
    answers:
      - { value: "Placing a file with the same path in your application's `templates/bundles/` directory (for templates) or `config/packages/` (for configuration).", correct: true }
      - { value: "Directly modifying the source code of the installed bundle in `vendor/`.", correct: false }
      - { value: "Using a Composer patch to apply changes to the bundle.", correct: false }
      - { value: "There is no official way to customize bundle resources; you must fork the bundle.", correct: false }
    help: |
      Symfony allows you to override bundle resources (like templates and configurations) by placing files in specific paths within your application's directories.
      https://symfony.com/doc/current/bundles/override.html

  -
    question: >
      Which of the following PHP Standard Recommendations (PSRs) is most directly related to the `LoggerInterface` used for logging in Symfony applications?
    answers:
      - { value: "PSR-3 (Logger Interface)", correct: true }
      - { value: "PSR-7 (HTTP Message Interfaces)", correct: false }
      - { value: "PSR-11 (Container Interface)", correct: false }
      - { value: "PSR-14 (Event Dispatcher)", correct: false }
    help: |
      Symfony's logging system, including `LoggerInterface`, adheres to PSR-3, which defines a common interface for logging libraries.
      https://symfony.com/doc/current/logging.html#autowiring-logger-channels

  -
    question: >
      According to Symfony's naming conventions, what is the recommended casing for class names?
    answers:
      - { value: "PascalCase (e.g., `MyService`, `DefaultController`)", correct: true }
      - { value: "camelCase (e.g., `myService`, `defaultController`)", correct: false }
      - { value: "snake_case (e.g., `my_service`, `default_controller`)", correct: false }
      - { value: "kebab-case (e.g., `my-service`, `default-controller`)", correct: false }
    help: |
      Symfony follows PSR-1 and PSR-4, which dictate PascalCase for class names.
      https://symfony.com/doc/current/contributing/code/conventions.html#naming-conventions

  -
    question: >
      What is a "recipe" in the context of Symfony Flex?
    answers:
      - { value: "A set of automated instructions (e.g., configuration files, environment variables) that Flex applies when a package is installed or removed.", correct: true }
      - { value: "A pre-built Symfony application template that can be deployed directly.", correct: false }
      - { value: "A specific version constraint for a Composer package.", correct: false }
      - { value: "A database migration script for a Symfony application.", correct: false }
    help: |
      A Flex recipe is a set of automated instructions that Flex applies to your project when you install or remove a Composer package.
      https://symfony.com/doc/current/setup/symfony_flex.html#what-is-symfony-flex

  -
    question: >
      Which of the following Symfony Components is explicitly designed to be used as a standalone library in any PHP project, even without the full Symfony Framework?
    answers:
      - { value: "HttpFoundation", correct: true }
      - { value: "Routing", correct: true }
      - { value: "Console", correct: true }
      - { value: "WebProfilerBundle", correct: false }
      - { value: "DebugBundle", correct: false }
    help: |
      Many Symfony components are designed for standalone use. HttpFoundation, Routing, and Console are prime examples. Bundles like WebProfilerBundle and DebugBundle are framework-specific.
      https://symfony.com/doc/current/components/index.html

  -
    question: |
      Consider the following PHP class and `PropertyAccessor` usage:

      ```php
      use Symfony\Component\PropertyAccess\PropertyAccess;

      class Person
      {
          private array $data = [];

          public function __get(string $name): mixed
          {
              return $this->data[$name] ?? null;
          }

          public function __isset(string $name): bool
          {
              return isset($this->data[$name]);
          }

          public function __set(string $name, mixed $value): void
          {
              $this->data[$name] = $value;
          }
      }

      $person = new Person();
      $propertyAccessor = PropertyAccess::createPropertyAccessor();
      $propertyAccessor->setValue($person, 'age', 30);
      $age = $propertyAccessor->getValue($person, 'age');
      ```

      What is the value of `$age` after execution, and which PHP magic methods are being leveraged by `PropertyAccessor`?
    answers:
      - { value: "30; `__get()` and `__set()`", correct: true }
      - { value: "null; `__call()` and `__invoke()`", correct: false }
      - { value: "An exception will be thrown because `age` is not a public property.", correct: false }
      - { value: "30; `__callStatic()` and `__debugInfo()`", correct: false }
    help: |
      The `PropertyAccessor` component can interact with PHP's magic methods like `__get()`, `__set()`, and `__isset()` to access dynamic properties.
      https://symfony.com/doc/current/components/property_access.html#magic-methods

  -
    question: >
      Which of the following Symfony PropertyInfo extractors relies on parsing PHPDoc annotations to retrieve property information?
    answers:
      - { value: "PhpDocExtractor", correct: true }
      - { value: "ReflectionExtractor", correct: false }
      - { value: "ConstructorExtractor", correct: false }
      - { value: "PhpStanExtractor", correct: false }
    help: |
      The `PhpDocExtractor` parses PHPDoc annotations to extract property types and descriptions.
      https://symfony.com/doc/current/components/property_info.html#using-phpdocextractor

  -
    question: >
      In the Symfony Messenger component, what is an "Envelope Stamp"?
    answers:
      - { value: "A piece of metadata attached to a message that can be read or modified by middleware or transports.", correct: true }
      - { value: "A unique identifier for a message within the message bus.", correct: false }
      - { value: "A cryptographic signature used to secure messages.", correct: false }
      - { value: "A mechanism for defining the routing of messages to specific handlers.", correct: false }
    help: |
      Envelope Stamps are pieces of information attached to your message, providing metadata for middleware or transport layers.
      https://symfony.com/doc/current/components/messenger.html#envelope-stamps

  -
    question: |
      Given the following configuration definition using Symfony's Config component:

      ```php
      use Symfony\Component\Config\Definition\Builder\TreeBuilder;
      use Symfony\Component\Config\Definition\ConfigurationInterface;

      class Configuration implements ConfigurationInterface
      {
          public function getConfigTreeBuilder(): TreeBuilder
          {
              $treeBuilder = new TreeBuilder('my_app');
              $rootNode = $treeBuilder->getRootNode();

              $rootNode
                  ->children()
                      ->arrayNode('drivers')
                          ->scalarPrototype()->end()
                      ->end()
                  ->end()
              ;

              return $treeBuilder;
          }
      }
      ```

      Which YAML configuration correctly defines the `drivers` array?
    answers:
      - { value: "drivers: [\"mysql\", \"sqlite\"]", correct: true }
      - { value: "drivers: { driver1: \"mysql\", driver2: \"sqlite\" }", correct: false }
      - { value: "drivers: \"mysql\"", correct: false }
      - { value: "drivers: { 0: \"mysql\", 1: \"sqlite\" }", correct: true }
    help: |
      `scalarPrototype()` defines a numerically indexed array where each element is a scalar value. Both `["mysql", "sqlite"]` and `{ 0: "mysql", 1: "sqlite" }` are valid YAML representations of such an array.
      https://symfony.com/doc/current/components/config/definition.html#prototyped-scalar-nodes

  -
    question: >
      Where should business logic and reusable code that is not directly related to HTTP requests (e.g., data manipulation, external API calls) typically be placed in a Symfony application?
    answers:
      - { value: "In dedicated service classes within the `src/` directory.", correct: true }
      - { value: "Directly inside controller methods.", correct: false }
      - { value: "In Twig templates.", correct: false }
      - { value: "In global functions defined in `public/index.php`.", correct: false }
    help: |
      Business logic and reusable code should be encapsulated in services, promoting separation of concerns and testability.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#create-a-custom-service-class-in-symfony

  -
    question: >
      How does Symfony primarily determine which controller and action to execute for an incoming HTTP request?
    answers:
      - { value: "Through the Routing component, which matches the request URL and method to a defined route.", correct: true }
      - { value: "By scanning all PHP files in the `src/Controller/` directory for a matching function name.", correct: false }
      - { value: "Based on the order of controller files in the filesystem.", correct: false }
      - { value: "By using a hardcoded switch statement in the `public/index.php` file.", correct: false }
    help: |
      The Routing component is responsible for mapping incoming HTTP requests to the appropriate controller and action based on defined routes.
      https://symfony.com/doc/current/routing.html

  -
    question: >
      When an exception occurs in a Symfony application, which component is primarily responsible for transforming that exception into a user-friendly HTTP response (e.g., a 404 or 500 error page)?
    answers:
      - { value: "The HttpKernel component, via the `kernel.exception` event and its listeners (like the default error controller).", correct: true }
      - { value: "The Debug component, which only displays the raw stack trace.", correct: false }
      - { value: "The Routing component, which redirects to a predefined error URL.", correct: false }
      - { value: "The Security component, which blocks the request entirely.", correct: false }
    help: |
      The HttpKernel, specifically through the `kernel.exception` event, manages the conversion of exceptions into HTTP responses.
      https://symfony.com/doc/current/controller/error_pages.html

  -
    question: >
      What is the key difference between an Event Listener and an Event Subscriber in Symfony's EventDispatcher component?
    answers:
      - { value: "An Event Listener defines a method to call for a specific event, while an Event Subscriber defines which events it listens to and their corresponding methods.", correct: true }
      - { value: "An Event Listener can only listen to one event, while an Event Subscriber can listen to multiple events.", correct: false }
      - { value: "Event Listeners are configured in YAML, while Event Subscribers are configured with PHP attributes.", correct: false }
      - { value: "Event Listeners are deprecated in Symfony 7, replaced by Event Subscribers.", correct: false }
    help: |
      Event Listeners are simple callables that respond to events. Event Subscribers implement `EventSubscriberInterface` and declare which events they subscribe to and the methods to call.
      https://symfony.com/doc/current/components/event_dispatcher.html#event-listeners-and-subscribers

  -
    question: >
      Which of the following configuration formats is officially supported and commonly used in Symfony 7 applications?
    answers:
      - { value: "YAML", correct: true }
      - { value: "XML", correct: true }
      - { value: "PHP", correct: true }
      - { value: "JSON", correct: false }
    help: |
      Symfony officially supports YAML, XML, and PHP for configuration. JSON is not a primary configuration format.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#configure-symfony-for-different-environments-yaml-xml-php

  -
    question: >
      What is the primary purpose of the `symfony.lock` file in a Symfony Flex project?
    answers:
      - { value: "To store the exact versions of Symfony recipes applied to the project, ensuring consistent application setup across environments.", correct: true }
      - { value: "To lock the versions of all Composer dependencies, similar to `composer.lock`.", correct: false }
      - { value: "To define the application's environment variables.", correct: false }
      - { value: "To store cached data for faster application boot-up.", correct: false }
    help: |
      The `symfony.lock` file tracks the exact versions of Symfony Flex recipes applied to your project, ensuring reproducibility of the application structure.
      https://symfony.com/doc/current/setup/symfony_flex.html#what-is-symfony-flex (Conceptual understanding of symfony.lock)

  -
    question: |
      Consider the following array:
      ```php
      $data = [
          'users' => [
              ['name' => 'Alice', 'email' => 'alice@example.com'],
              ['name' => 'Bob', 'email' => 'bob@example.com'],
          ],
      ];
      ```
      How would you use Symfony's `PropertyAccessor` to get the email of the second user?
    answers:
      - { value: "`$propertyAccessor->getValue($data, '[users][1][email]')`", correct: true }
      - { value: "`$propertyAccessor->getValue($data, 'users.1.email')`", correct: false }
      - { value: "`$propertyAccessor->getValue($data, 'users[1].email')`", correct: false }
      - { value: "`$propertyAccessor->getValue($data, 'users->1->email')`", correct: false }
    help: |
      For accessing elements in nested arrays, the `PropertyAccessor` uses bracket notation for array keys.
      https://symfony.com/doc/current/components/property_access.html#reading-values-from-arrays

  -
    question: |
      Which of the following statements about `Symfony\Component\PropertyInfo\Extractor\ConstructorExtractor` is true in Symfony 7.3+?
    answers:
      - { value: "It extracts property information by analyzing constructor arguments and can leverage `ReflectionExtractor` or `PhpStanExtractor`.", correct: true }
      - { value: "It is primarily used for extracting information from PHPDoc blocks.", correct: false }
      - { value: "It is a deprecated component in Symfony 7.", correct: false }
      - { value: "It only works for public properties defined directly on the class, not constructor-promoted properties.", correct: false }
    help: |
      `ConstructorExtractor` (introduced in Symfony 7.3) extracts property information from constructor arguments, often by delegating to other extractors like `ReflectionExtractor`.
      https://symfony.com/doc/current/components/property_info.html#constructorextractor

  -
    question: |
      In Symfony Messenger, when implementing a synchronous query bus, which trait is commonly used in a class that dispatches queries and expects a direct result?
    answers:
      - { value: "`Symfony\\Component\\Messenger\\HandleTrait`", correct: true }
      - { value: "`Symfony\\Component\\Messenger\\DispatchTrait`", correct: false }
      - { value: "`Symfony\\Component\\Messenger\\ReceiverTrait`", correct: false }
      - { value: "`Symfony\\Component\\Messenger\\SenderTrait`", correct: false }
    help: |
      The `HandleTrait` provides a `handle()` method that allows for synchronous message handling, suitable for query buses where an immediate result is expected.
      https://symfony.com/doc/current/messenger.html#synchronous-queries

  -
    question: |
      To create a custom Twig filter named `greet` in Symfony 7, which of the following approaches is recommended for autoconfiguration?
    answers:
      - { value: "Create a PHP class, implement `Twig\\Extension\\ExtensionInterface`, and use the `#[AsTwigFilter('greet')]` attribute on the filter method.", correct: true }
      - { value: "Define the filter directly in `config/services.yaml` without a dedicated PHP class.", correct: false }
      - { value: "Place a Twig file named `greet.html.twig` in the `templates/` directory.", correct: false }
      - { value: "Manually register the filter in the `public/index.php` file.", correct: false }
    help: |
      Symfony's autoconfiguration, combined with the `#[AsTwigFilter]` attribute, is the modern and recommended way to register custom Twig filters.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#create-a-custom-twig-filter-with-autoconfiguration-in-symfony-php

  -
    question: >
      Which PHP Standard Recommendation (PSR) defines interfaces for HTTP messages, including `RequestInterface` and `ResponseInterface`, which Symfony's HttpFoundation component adheres to?
    answers:
      - { value: "PSR-7 (HTTP Message Interfaces)", correct: true }
      - { value: "PSR-17 (HTTP Factories)", correct: true }
      - { value: "PSR-15 (HTTP Handlers)", correct: false }
      - { value: "PSR-18 (HTTP Client)", correct: false }
    help: |
      Symfony's HttpFoundation component aligns with PSR-7 for HTTP message interfaces and PSR-17 for HTTP message factories.
      https://symfony.com/doc/current/components/http_foundation.html (Conceptual understanding of PSR adherence)

  -
    question: >
      When creating a custom event in Symfony, what is the recommended practice for defining the event name?
    answers:
      - { value: "Define a public `const` property named `NAME` (or similar) within the event class itself.", correct: true }
      - { value: "Hardcode the event name as a string directly in the `EventDispatcher::dispatch()` call.", correct: false }
      - { value: "Use a randomly generated string for each event dispatch.", correct: false }
      - { value: "Rely on Symfony's autoconfiguration to generate event names automatically.", correct: false }
    help: |
      It's a best practice to define the event name as a public constant within the event class to avoid typos and centralize its definition.
      https://symfony.com/doc/current/components/event_dispatcher.html#creating-and-dispatching-an-event

  -
    question: >
      What is the recommended approach for testing Symfony applications, particularly for functional and integration tests?
    answers:
      - { value: "Using PHPUnit with Symfony's `WebTestCase` or `KernelTestCase` to simulate HTTP requests and interact with the application.", correct: true }
      - { value: "Manually clicking through the application in a web browser for every change.", correct: false }
      - { value: "Only performing unit tests on individual classes, without testing the full application flow.", correct: false }
      - { value: "Relying solely on external end-to-end testing tools without any internal application tests.", correct: false }
    help: |
      Symfony provides `WebTestCase` and `KernelTestCase` classes to facilitate functional and integration testing with PHPUnit.
      https://symfony.com/doc/current/testing.html

  -
    question: >
      What is the typical maintenance period for a regular (non-LTS) Symfony release (e.g., Symfony 7.1)?
    answers:
      - { value: "8 months for bug fixes and 14 months for security fixes.", correct: true }
      - { value: "3 years for bug fixes and 4 years for security fixes.", correct: false }
      - { value: "6 months for all fixes, then end-of-life.", correct: false }
      - { value: "Until the next major version is released.", correct: false }
    help: |
      Regular Symfony releases typically receive bug fixes for 8 months and security fixes for 14 months.
      https://symfony.com/releases

  -
    question: >
      When a feature is marked as "deprecated" in Symfony, what does it typically imply regarding its future use?
    answers:
      - { value: "It will be removed in the next major version of Symfony, and users should migrate away from it.", correct: true }
      - { value: "It is an experimental feature that may or may not be included in future versions.", correct: false }
      - { value: "It is a bug that will be fixed in the next patch release.", correct: false }
      - { value: "It is a feature that has been replaced by a more performant alternative, but remains fully supported indefinitely.", correct: false }
    help: |
      Deprecations in Symfony signal that a feature or API will be removed in the next major version, giving users time to adapt.
      https://symfony.com/doc/current/contributing/code/conventions.html#deprecations

  -
    question: >
      How can you identify deprecation warnings in your Symfony 7 application during development?
    answers:
      - { value: "By checking the web debug toolbar, console output, and log files for deprecation notices.", correct: true }
      - { value: "By running `composer validate`.", correct: false }
      - { value: "By inspecting the `vendor/symfony/symfony/CHANGELOG.md` file.", correct: false }
      - { value: "Deprecations are only visible in production environments.", correct: false }
    help: |
      Deprecation warnings are visible in the web debug toolbar, console output, and logs in development environments.
      https://symfony.com/doc/current/components/debug/deprecations.html

  -
    question: >
      If you need to replace a service provided by a Symfony bundle with your own custom implementation, what is the recommended approach?
    answers:
      - { value: "Decorate the original service in your `services.yaml` file, injecting the original service into your decorator.", correct: true }
      - { value: "Delete the original service definition from the bundle's configuration files.", correct: false }
      - { value: "Copy the bundle's service class into your `src/` directory and modify it directly.", correct: false }
      - { value: "Use a compiler pass to remove the original service and define your new one.", correct: false }
    help: |
      Service decoration is the recommended way to replace or extend existing services without modifying the original bundle's code.
      https://symfony.com/doc/current/service_container/service_decoration.html

  -
    question: >
      Which PHP Standard Recommendation (PSR) defines a common interface for a service container, which Symfony's Dependency Injection component adheres to?
    answers:
      - { value: "PSR-11 (Container Interface)", correct: true }
      - { value: "PSR-1 (Basic Coding Standard)", correct: false }
      - { value: "PSR-4 (Autoloader)", correct: false }
      - { value: "PSR-6 (Caching Interface)", correct: false }
    help: |
      Symfony's Dependency Injection component implements PSR-11, providing a standardized way to access services from a container.
      https://symfony.com/doc/current/components/dependency_injection.html (Conceptual understanding of PSR adherence)

  -
    question: >
      According to Symfony's naming conventions, what is the recommended format for route names?
    answers:
      - { value: "snake_case (e.g., `app_product_show`, `blog_post_list`)", correct: true }
      - { value: "camelCase (e.g., `appProductShow`, `blogPostList`)", correct: false }
      - { value: "kebab-case (e.g., `app-product-show`, `blog-post-list`)", correct: false }
      - { value: "PascalCase (e.g., `AppProductShow`, `BlogPostList`)", correct: false }
    help: |
      While not strictly enforced by PHP, Symfony's common practice and examples often use snake_case for route names.
      https://symfony.com/doc/current/routing.html#route-names

  -
    question: >
      What is the key difference between `composer.lock` and `symfony.lock` in a Symfony Flex project?
    answers:
      - { value: "`composer.lock` tracks exact versions of all Composer dependencies, while `symfony.lock` tracks exact versions of Symfony Flex recipes.", correct: true }
      - { value: "`composer.lock` is used for development, and `symfony.lock` is used for production deployments.", correct: false }
      - { value: "They are identical files; `symfony.lock` is just an alias for `composer.lock`.", correct: false }
      - { value: "`symfony.lock` is manually maintained, while `composer.lock` is generated automatically.", correct: false }
    help: |
      `composer.lock` locks your Composer dependencies. `symfony.lock` locks the state of your Flex recipes, ensuring consistent application structure.
      https://symfony.com/doc/current/setup/symfony_flex.html#what-is-symfony-flex

  -
    question: |
      Consider the following PHP code:
      ```php
      use Symfony\Component\PropertyInfo\Extractor\ConstructorExtractor;
      use Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor;

      class MyClass
      {
          public function __construct(
              private string $name,
              private int $age
          ) {}
      }

      $extractor = new ConstructorExtractor([new ReflectionExtractor()]);
      $types = $extractor->getTypes(MyClass::class, 'name');
      ```
      What will the `$types` variable contain after this code executes?
    answers:
      - { value: "An array containing a `Symfony\\Component\\PropertyInfo\\Type` object for 'string'.", correct: true }
      - { value: "An empty array, as `ConstructorExtractor` only works with public properties.", correct: false }
      - { value: "An array containing `ReflectionProperty` objects for 'name' and 'age'.", correct: false }
      - { value: "A `NoSuchPropertyException` will be thrown.", correct: false }
    help: |
      `ConstructorExtractor` can extract type information from constructor-promoted properties by leveraging other extractors like `ReflectionExtractor`.
      https://symfony.com/doc/current/components/property_info.html#constructorextractor

  -
    question: >
      In Symfony's Messenger component, what is the primary role of a "Handler"?
    answers:
      - { value: "To execute the business logic associated with a specific message.", correct: true }
      - { value: "To send messages to external systems.", correct: false }
      - { value: "To receive messages from a queue.", correct: false }
      - { value: "To serialize and deserialize messages.", correct: false }
    help: |
      A Handler is responsible for processing a message using the application's business logic.
      https://symfony.com/doc/current/components/messenger.html#handler

  -
    question: |
      Given the following Twig extension class in Symfony 7:

      ```php
      // src/Twig/AppExtension.php
      namespace App\Twig;

      use Twig\Extension\AbstractExtension;
      use Twig\TwigFilter;

      class AppExtension extends AbstractExtension
      {
          public function getFilters(): array
          {
              return [
                  new TwigFilter('reverse', [$this, 'reverseString']),
              ];
          }

          public function reverseString(string $value): string
          {
              return strrev($value);
          }
      }
      ```
      How would you enable Symfony's autoconfiguration for this Twig extension without explicitly defining it as a service in `services.yaml`?
    answers:
      - { value: "Add the `#[AsTwigExtension]` attribute to the `AppExtension` class.", correct: true }
      - { value: "Ensure the class is located in the `src/Twig/` directory.", correct: true }
      - { value: "Implement `Symfony\\Contracts\\Service\\ServiceSubscriberInterface`.", correct: false }
      - { value: "Run `composer dump-autoload`.", correct: false }
    help: |
      Symfony's autoconfiguration detects Twig extensions by the `#[AsTwigExtension]` attribute and their location in `src/Twig/`.
      https://symfony.com/doc/current/templating/twig_extension.html#registering-as-a-service

  -
    question: >
      Which of the following is a key benefit of adhering to PSRs (PHP Standard Recommendations) in a Symfony application?
    answers:
      - { value: "Improved interoperability with other PHP libraries and frameworks.", correct: true }
      - { value: "Automatic performance optimization of the application.", correct: false }
      - { value: "Elimination of the need for Composer.", correct: false }
      - { value: "Guaranteed backward compatibility across all PHP versions.", correct: false }
    help: |
      PSRs promote interoperability by providing common interfaces and coding standards, making it easier to integrate different libraries.
      https://www.php-fig.org/psr/

  -
    question: >
      What is the primary purpose of the `MicroKernelTrait` in a Symfony application?
    answers:
      - { value: "To simplify the creation of small, self-contained Symfony applications or microservices.", correct: true }
      - { value: "To enable full-stack Symfony features in a minimal setup.", correct: false }
      - { value: "To provide a graphical interface for kernel configuration.", correct: false }
      - { value: "To automatically generate all bundles required by the application.", correct: false }
    help: |
      The `MicroKernelTrait` simplifies the process of creating a minimal Symfony kernel, often used for microservices or small applications.
      https://symfony.com/doc/current/configuration/micro_kernel_trait.html

  -
    question: >
      In Symfony's request handling, what is the role of the `RouterInterface`?
    answers:
      - { value: "To match an incoming URL to a specific route and generate parameters for the controller.", correct: true }
      - { value: "To send HTTP responses back to the client.", correct: false }
      - { value: "To validate user input from forms.", correct: false }
      - { value: "To manage database connections.", correct: false }
    help: |
      The `RouterInterface` (implemented by the Routing component) is responsible for matching incoming requests to routes and generating URLs.
      https://symfony.com/doc/current/routing.html

  -
    question: >
      Which of the following is a Symfony best practice for organizing configuration files?
    answers:
      - { value: "Using environment-specific configuration files (e.g., `services_dev.yaml`, `routing_prod.yaml`).", correct: true }
      - { value: "Storing all configuration in a single, large `config.yaml` file.", correct: false }
      - { value: "Hardcoding configuration values directly into PHP classes.", correct: false }
      - { value: "Using separate configuration files for each controller.", correct: false }
    help: |
      Symfony encourages environment-specific configuration files to manage settings for different environments (dev, prod, test).
      https://symfony.com/doc/current/quick_tour/the_architecture.html#configure-symfony-for-different-environments-yaml-xml-php

  -
    question: >
      What is the primary purpose of the `var/cache/` directory in a Symfony application?
    answers:
      - { value: "To store cached data, such as compiled container, Twig templates, and routing information, for performance optimization.", correct: true }
      - { value: "To store application logs.", correct: false }
      - { value: "To store Composer dependencies.", correct: false }
      - { value: "To store public web assets.", correct: false }
    help: |
      The `var/cache/` directory holds all generated cache files, which are crucial for Symfony's performance.
      https://symfony.com/doc/current/quick_tour/the_architecture.html

  -
    question: >
      Which of the following is a recommended practice for handling sensitive information (e.g., database credentials, API keys) in a Symfony application?
    answers:
      - { value: "Storing them in environment variables, typically loaded from a `.env` file, and accessed via `$_ENV` or `$_SERVER`.", correct: true }
      - { value: "Committing them directly into `config/services.yaml`.", correct: false }
      - { value: "Hardcoding them into PHP classes.", correct: false }
      - { value: "Storing them in public Twig templates.", correct: false }
    help: |
      Environment variables are the standard and secure way to manage sensitive configuration data in Symfony.
      https://symfony.com/doc/current/configuration/secrets.html

  -
    question: >
      What is the purpose of the `public/index.php` file in a Symfony 7 application?
    answers:
      - { value: "It is the front controller that bootstraps the Symfony application and handles all incoming HTTP requests.", correct: true }
      - { value: "It contains all the application's business logic.", correct: false }
      - { value: "It is a static HTML file displayed as the homepage.", correct: false }
      - { value: "It is responsible for running database migrations.", correct: false }
    help: |
      `public/index.php` is the front controller, the single entry point for all web requests, responsible for bootstrapping the kernel.
      https://symfony.com/doc/current/quick_tour/the_architecture.html

  -
    question: >
      What is the recommended way to register a service in Symfony 7 when using autowiring and autoconfigure?
    answers:
      - { value: "By placing the service class in the `src/` directory and ensuring it's type-hinted where used, letting Symfony discover it.", correct: true }
      - { value: "Explicitly defining every service with its arguments in `config/services.yaml`.", correct: false }
      - { value: "Using a global `new` operator whenever the service is needed.", correct: false }
      - { value: "Adding a `#[Service]` attribute to the class definition.", correct: false }
    help: |
      With autowiring and autoconfigure enabled (default in Flex), most services are automatically registered by simply placing them in `src/` and type-hinting them.
      https://symfony.com/doc/current/service_container/autowiring.html

  -
    question: >
      Which of the following is NOT a core principle of Symfony's architecture?
    answers:
      - { value: "Tight coupling between components to ensure maximum performance.", correct: true }
      - { value: "Decoupling and reusability of components.", correct: false }
      - { value: "Convention over configuration.", correct: false }
      - { value: "Extensibility through events and dependency injection.", correct: false }
    help: |
      Symfony emphasizes decoupling and reusability of its components, not tight coupling.
      https://symfony.com/doc/current/components/index.html (Conceptual understanding)

  -
    question: >
      What is the primary function of the `var/log/` directory in a Symfony application?
    answers:
      - { value: "To store application logs (e.g., `dev.log`, `prod.log`).", correct: true }
      - { value: "To store temporary cache files.", correct: false }
      - { value: "To store database backup files.", correct: false }
      - { value: "To store Composer's installation logs.", correct: false }
    help: |
      The `var/log/` directory is where Symfony writes application logs, typically separated by environment.
      https://symfony.com/doc/current/quick_tour/the_architecture.html

  -
    question: >
      When developing a Symfony application, what is the purpose of the `APP_SECRET` environment variable?
    answers:
      - { value: "It is a unique secret key used for various security-related tasks, such as session encryption, CSRF protection, and signing URLs.", correct: true }
      - { value: "It defines the database password for the application.", correct: false }
      - { value: "It specifies the API key for external services.", correct: false }
      - { value: "It is used to enable or disable the debug mode.", correct: false }
    help: |
      `APP_SECRET` is a crucial security parameter used for various cryptographic operations within Symfony.
      https://symfony.com/doc/current/reference/configuration/framework.html#secret

  -
    question: >
      Which of the following is a valid way to define a route in Symfony 7 using PHP attributes?
    answers:
      - { value: "Using `#[Route('/path', name: 'route_name')]` directly on a controller method or class.", correct: true }
      - { value: "Using `@Route('/path', name='route_name')` in PHPDoc blocks.", correct: false }
      - { value: "Defining routes in a separate `.php` file and importing them via `#[Import]`.", correct: false }
      - { value: "There is no attribute support for routing in Symfony 7.", correct: false }
    help: |
      PHP attributes (`#[Route]`) are the modern and recommended way to define routes directly in controller classes or methods.
      https://symfony.com/doc/current/routing.html#defining-routes-as-attributes

  -
    question: >
      What is the primary benefit of using Symfony's EventDispatcher component?
    answers:
      - { value: "It promotes decoupling between different parts of the application, allowing them to communicate without direct dependencies.", correct: true }
      - { value: "It automatically optimizes database queries for faster execution.", correct: false }
      - { value: "It generates user interfaces automatically based on data models.", correct: false }
      - { value: "It provides a built-in authentication and authorization system.", correct: false }
    help: |
      The EventDispatcher allows for a highly decoupled architecture, where components can react to events without knowing about each other.
      https://symfony.com/doc/current/components/event_dispatcher.html

  -
    question: >
      When configuring assets in Symfony, what is the purpose of the `json_manifest_path` option?
    answers:
      - { value: "To specify the path to a `manifest.json` file used for asset versioning (e.g., generated by Webpack Encore).", correct: true }
      - { value: "To define the base URL for all assets.", correct: false }
      - { value: "To enable strict mode for asset validation.", correct: false }
      - { value: "To specify the default asset version string.", correct: false }
    help: |
      The `json_manifest_path` option points to a JSON file containing asset versioning information, commonly used with build tools like Webpack Encore.
      https://symfony.com/doc/current/reference/configuration/framework.html#assets-json-manifest-path

  -
    question: >
      What is the purpose of the `strict_mode` option in Symfony's asset configuration?
    answers:
      - { value: "When enabled, it asserts that all requested assets are present in the manifest file, helping detect typos or missing assets.", correct: true }
      - { value: "It forces all asset URLs to use HTTPS.", correct: false }
      - { value: "It disables asset caching in production environments.", correct: false }
      - { value: "It enables automatic asset minification and concatenation.", correct: false }
    help: |
      `strict_mode` helps catch errors by ensuring that all assets requested via the asset component are actually defined in the manifest.
      https://symfony.com/doc/current/reference/configuration/framework.html#strict-mode

  -
    question: >
      In Symfony's release management, what is the significance of a "minor" version release (e.g., from 7.0 to 7.1)?
    answers:
      - { value: "It introduces new features and improvements while maintaining backward compatibility.", correct: true }
      - { value: "It introduces breaking changes and requires significant migration efforts.", correct: false }
      - { value: "It only contains bug fixes and security patches.", correct: false }
      - { value: "It signifies the end-of-life for the previous major version.", correct: false }
    help: |
      Minor versions in Symfony (e.g., 7.1, 7.2) add new features and improvements while strictly adhering to backward compatibility.
      https://symfony.com/releases

  -
    question: >
      Which of the following is a valid approach for defining a custom service in Symfony 7 that is automatically wired by the container?
    answers:
      - { value: "Create a PHP class in `src/` and type-hint it in a constructor where it's needed.", correct: true }
      - { value: "Define the service explicitly in `config/services.xml` with all its arguments.", correct: false }
      - { value: "Use a global static method to access the service instance.", correct: false }
      - { value: "Store the service instance in the session for later retrieval.", correct: false }
    help: |
      Symfony's autowiring automatically injects services based on type-hints, provided the service class is discoverable (e.g., in `src/`).
      https://symfony.com/doc/current/service_container/autowiring.html

  -
    question: >
      What is the purpose of the `version_format` option in Symfony's asset configuration?
    answers:
      - { value: "It defines a `sprintf` pattern to construct an asset's path by incorporating its version, allowing for query string or path-based versioning.", correct: true }
      - { value: "It specifies the file format of the asset manifest (e.g., JSON, XML).", correct: false }
      - { value: "It sets the minimum required PHP version for asset processing.", correct: false }
      - { value: "It defines the default asset version string for all assets.", correct: false }
    help: |
      `version_format` allows customizing how the asset version is embedded into the asset URL (e.g., as a query parameter or part of the path).
      https://symfony.com/doc/current/reference/configuration/framework.html#version-format

  -
    question: >
      Which of the following describes the "Framework Overloading" concept in Symfony?
    answers:
      - { value: "The ability to customize or replace parts of Symfony's core behavior or bundled features without modifying the `vendor/` directory.", correct: true }
      - { value: "Running multiple Symfony applications on the same server instance.", correct: false }
      - { value: "Using a large number of bundles in a single application, potentially leading to performance issues.", correct: false }
      - { value: "Overriding PHP's built-in functions with Symfony-specific implementations.", correct: false }
    help: |
      Framework overloading refers to Symfony's mechanisms (like service decoration, template overriding) that allow you to customize the framework's default behavior.
      https://symfony.com/doc/current/bundles/override.html (Conceptual understanding)

  -
    question: >
      Which PHP Standard Recommendation (PSR) defines a common interface for an HTTP client, which Symfony's HttpClient component adheres to?
    answers:
      - { value: "PSR-18 (HTTP Client)", correct: true }
      - { value: "PSR-7 (HTTP Message Interfaces)", correct: false }
      - { value: "PSR-11 (Container Interface)", correct: false }
      - { value: "PSR-14 (Event Dispatcher)", correct: false }
    help: |
      Symfony's HttpClient component implements PSR-18, providing a standardized way to make HTTP requests.
      https://symfony.com/doc/current/components/http_client.html (Conceptual understanding of PSR adherence)

  -
    question: >
      According to Symfony's naming conventions, what is the recommended casing for service IDs in the Dependency Injection Container?
    answers:
      - { value: "snake_case (e.g., `app.my_service`, `monolog.logger`)", correct: true }
      - { value: "camelCase (e.g., `appMyService`, `monologLogger`)", correct: false }
      - { value: "PascalCase (e.g., `AppMyService`, `MonologLogger`)", correct: false }
      - { value: "kebab-case (e.g., `app-my-service`, `monolog-logger`)", correct: false }
    help: |
      While not strictly enforced, snake_case is the widely adopted convention for service IDs in Symfony.
      https://symfony.com/doc/current/service_container.html#referencing-services

  -
    question: >
      What is the primary role of the `composer.lock` file in a Symfony Flex project?
    answers:
      - { value: "To record the exact versions of all direct and indirect Composer dependencies, ensuring reproducible builds.", correct: true }
      - { value: "To define the application's environment variables.", correct: false }
      - { value: "To store Symfony Flex recipe information.", correct: false }
      - { value: "To manage database schema versions.", correct: false }
    help: |
      `composer.lock` is generated by Composer to lock the exact versions of all installed packages, ensuring consistent dependency resolution.
      https://getcomposer.org/doc/01-basic-usage.md#composer-lock-the-lock-file

  -
    question: >
      When using `PropertyAccessor` in Symfony, what is the default behavior if you attempt to access a non-existent property path (e.g., `getValue($object, 'nonExistentProperty')`)?
    answers:
      - { value: "It throws a `Symfony\\Component\\PropertyAccess\\Exception\\NoSuchPropertyException`.", correct: true }
      - { value: "It returns `null`.", correct: false }
      - { value: "It automatically creates the missing property.", correct: false }
      - { value: "It logs a warning and continues execution.", correct: false }
    help: |
      By default, `PropertyAccessor` throws a `NoSuchPropertyException` for invalid property paths. This behavior can be modified using `disableExceptionOnInvalidPropertyPath()`.
      https://symfony.com/doc/current/components/property_access.html#disabling-exceptions-for-non-existing-property-paths

  -
    question: >
      What is the purpose of enabling `property_info.with_constructor_extractor` in Symfony 7.3+ configuration?
    answers:
      - { value: "It configures the `property_info` service to extract property information from constructor arguments.", correct: true }
      - { value: "It enables automatic dependency injection for constructor arguments.", correct: false }
      - { value: "It allows the `PropertyAccessor` to access private constructor properties.", correct: false }
      - { value: "It forces all services to use constructor injection.", correct: false }
    help: |
      The `property_info.with_constructor_extractor` option (introduced in Symfony 7.3) enables the `ConstructorExtractor` for the `property_info` service.
      https://symfony.com/doc/current/reference/configuration/framework.html#property-info-with-constructor-extractor

  -
    question: >
      In Symfony Messenger, what is the primary difference between handling a "Command" and handling a "Query"?
    answers:
      - { value: "Commands typically modify state and do not return a value, while Queries retrieve data and return a value.", correct: true }
      - { value: "Commands are always handled asynchronously, while Queries are always handled synchronously.", correct: false }
      - { value: "Commands are processed by Senders, while Queries are processed by Receivers.", correct: false }
      - { value: "Commands require explicit service definitions, while Queries are autowired.", correct: false }
    help: |
      This distinction aligns with the Command Query Responsibility Segregation (CQRS) pattern, where commands change state and queries retrieve state.
      https://symfony.com/doc/current/messenger.html#synchronous-queries (Conceptual understanding of CQRS in Messenger)

  -
    question: |
      Consider the following Twig extension:

      ```php
      // src/Twig/GreetingExtension.php
      namespace App\Twig;

      use App\GreetingGenerator;
      use Twig\Extension\AbstractExtension;
      use Twig\TwigFilter;
      use Twig\Attribute\AsTwigFilter;

      class GreetingExtension extends AbstractExtension
      {
          public function __construct(
              private GreetingGenerator $greetingGenerator,
          ) {
          }

          #[AsTwigFilter('greet')]
          public function greetUser(string $name): string
          {
              $greeting =  $this->greetingGenerator->getRandomGreeting();
              return "$greeting $name!";
          }
      }
      ```
      And the Twig template:
      ```twig
      {# templates/default/index.html.twig #}
      <h1>{{ user_name|greet }}</h1>
      ```
      If `user_name` is "Alice", what is a possible output in the rendered HTML?
    answers:
      - { value: "<h1>Yo Alice!</h1>", correct: true }
      - { value: "<h1>Alice</h1>", correct: false }
      - { value: "<h1>{{ user_name|greet }}</h1>", correct: false }
      - { value: "A Twig error, as the filter is not correctly registered.", correct: false }
    help: |
      The `#[AsTwigFilter]` attribute registers the `greet` filter. The `GreetingGenerator` provides a random greeting, which is then combined with the `user_name`.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#create-a-custom-twig-filter-with-autoconfiguration-in-symfony-php

  -
    question: >
      What is the primary role of the `Kernel` class (e.g., `src/Kernel.php`) in a Symfony application?
    answers:
      - { value: "It is the central entry point that bootstraps the application, registers bundles, and configures the container and routes.", correct: true }
      - { value: "It handles all HTTP requests and responses directly.", correct: false }
      - { value: "It defines the application's database schema.", correct: false }
      - { value: "It contains all the application's business logic.", correct: false }
    help: |
      The `Kernel` class is the heart of a Symfony application, responsible for loading bundles, configuring the environment, and building the service container.
      https://symfony.com/doc/current/components/http_kernel.html#the-kernel-class

  -
    question: >
      Which of the following is a benefit of using Symfony's Dependency Injection Container?
    answers:
      - { value: "It promotes loose coupling between components by injecting dependencies rather than hardcoding them.", correct: true }
      - { value: "It eliminates the need for Composer to manage dependencies.", correct: false }
      - { value: "It automatically generates all necessary database tables.", correct: false }
      - { value: "It provides a built-in templating engine for front-end development.", correct: false }
    help: |
      The Dependency Injection Container is central to Symfony's architecture, promoting loose coupling and testability by managing service instantiation and injection.
      https://symfony.com/doc/current/components/dependency_injection.html

  -
    question: >
      What is the purpose of the `config/bundles.php` file in a Symfony 7 application?
    answers:
      - { value: "It defines which Symfony bundles are enabled for each environment (e.g., `dev`, `prod`).", correct: true }
      - { value: "It contains the application's database connection details.", correct: false }
      - { value: "It lists all Composer packages installed in the project.", correct: false }
      - { value: "It defines the application's routes.", correct: false }
    help: |
      `config/bundles.php` is where you register and enable the bundles used in your Symfony application, often conditionally for different environments.
      https://symfony.com/doc/current/quick_tour/the_architecture.html

  -
    question: >
      Which of the following is a core principle of Symfony's "Convention over Configuration" approach?
    answers:
      - { value: "Providing sensible defaults and standard directory structures to reduce the amount of explicit configuration needed.", correct: true }
      - { value: "Requiring developers to explicitly configure every aspect of the application.", correct: false }
      - { value: "Prioritizing performance over ease of development.", correct: false }
      - { value: "Discouraging the use of third-party libraries.", correct: false }
    help: |
      "Convention over Configuration" means Symfony provides smart defaults and conventions, reducing the need for verbose configuration files.
      https://symfony.com/doc/current/introduction/from_flat_php_to_symfony.html (Conceptual understanding)

  -
    question: >
      In Symfony's EventDispatcher component, what is the purpose of an event's "priority"?
    answers:
      - { value: "To determine the order in which listeners for the same event are executed (higher priority runs first).", correct: true }
      - { value: "To indicate the severity level of the event (e.g., critical, warning).", correct: false }
      - { value: "To specify how many times an event can be dispatched.", correct: false }
      - { value: "To define the event's unique identifier.", correct: false }
    help: |
      Priorities allow you to control the execution order of multiple listeners attached to the same event.
      https://symfony.com/doc/current/components/event_dispatcher.html#event-priorities

  -
    question: >
      What is the primary advantage of using environment variables (e.g., `APP_ENV`, `DATABASE_URL`) for configuration in Symfony?
    answers:
      - { value: "They allow for easy switching of application settings between different deployment environments without changing code.", correct: true }
      - { value: "They are automatically encrypted, providing strong security for sensitive data.", correct: false }
      - { value: "They improve application performance by caching configuration values.", correct: false }
      - { value: "They are the only way to configure Symfony applications.", correct: false }
    help: |
      Environment variables provide a flexible and secure way to manage configuration that varies between environments.
      https://symfony.com/doc/current/configuration.html#environment-variables

  -
    question: >
      Which of the following describes Symfony's approach to backward compatibility for minor releases (e.g., 7.0 to 7.1)?
    answers:
      - { value: "Minor releases are strictly backward compatible, meaning existing code should continue to work without modification.", correct: true }
      - { value: "Minor releases may introduce breaking changes, but they are always documented.", correct: false }
      - { value: "Minor releases are essentially new major versions with a different naming scheme.", correct: false }
      - { value: "Backward compatibility is not a concern for minor releases.", correct: false }
    help: |
      Symfony's backward compatibility promise ensures that minor releases are fully backward compatible.
      https://symfony.com/doc/current/contributing/code/bc.html

  -
    question: >
      What is the purpose of the `composer.json` file in a Symfony Flex project?
    answers:
      - { value: "It declares the project's dependencies and metadata, and is used by Composer to manage packages.", correct: true }
      - { value: "It defines the application's routes and controllers.", correct: false }
      - { value: "It stores cached data for faster application loading.", correct: false }
      - { value: "It is a configuration file for the web server.", correct: false }
    help: |
      `composer.json` is the main configuration file for Composer, defining project dependencies and other metadata.
      https://getcomposer.org/doc/01-basic-usage.md#composer-json-project-setup

  -
    question: >
      Which of the following is a valid method for accessing a service from the Dependency Injection Container in a Symfony controller (though generally discouraged in favor of autowiring)?
    answers:
      - { value: "Extending `AbstractController` and using `$this->container->get('service_id')` or `$this->get('service_id')`.", correct: true }
      - { value: "Using a global `ServiceLocator` instance.", correct: false }
      - { value: "Directly instantiating the service class with `new ServiceClass()`.", correct: false }
      - { value: "Accessing services via `$_GLOBALS['services']['service_id']`.", correct: false }
    help: |
      While autowiring is preferred, `AbstractController` provides methods like `get()` or direct container access for retrieving services.
      https://symfony.com/doc/current/controller/service.html#accessing-services

  -
    question: >
      What is the primary responsibility of a "Middleware" in the Symfony Messenger component?
    answers:
      - { value: "To intercept messages during dispatch, allowing for cross-cutting concerns like logging, validation, or transactions.", correct: true }
      - { value: "To convert messages between different formats.", correct: false }
      - { value: "To store messages persistently in a database.", correct: false }
      - { value: "To define the routing rules for messages.", correct: false }
    help: |
      Middleware can access and modify messages as they are dispatched through the message bus, handling concerns like logging or validation.
      https://symfony.com/doc/current/components/messenger.html#middleware

  -
    question: >
      What is the purpose of the `bin/console` executable in a Symfony application?
    answers:
      - { value: "It is the command-line entry point for running Symfony console commands.", correct: true }
      - { value: "It is a script for deploying the application to a production server.", correct: false }
      - { value: "It contains the application's web server configuration.", correct: false }
      - { value: "It is used to compile Twig templates.", correct: false }
    help: |
      `bin/console` is the main script for interacting with Symfony's Console component, allowing you to run various commands.
      https://symfony.com/doc/current/console.html

  -
    question: >
      Which of the following is a recommended naming convention for controller class names in Symfony?
    answers:
      - { value: "Ending with `Controller` (e.g., `ProductController`, `DefaultController`).", correct: true }
      - { value: "Starting with `Controller` (e.g., `ControllerProduct`, `ControllerDefault`).", correct: false }
      - { value: "Using only the resource name (e.g., `Product`, `Default`).", correct: false }
      - { value: "Using `_controller` suffix (e.g., `product_controller`, `default_controller`).", correct: false }
    help: |
      Symfony's conventions suggest suffixing controller class names with `Controller`.
      https://symfony.com/doc/current/controller.html#controller-naming-conventions

  -
    question: >
      What is the primary responsibility of the `Response` object in Symfony's request-response flow?
    answers:
      - { value: "To encapsulate all the data and HTTP headers that will be sent back to the client.", correct: true }
      - { value: "To parse incoming HTTP requests.", correct: false }
      - { value: "To execute database queries.", correct: false }
      - { value: "To manage user sessions.", correct: false }
    help: |
      The `Response` object represents the HTTP response that will be sent back to the client, containing content, headers, and status code.
      https://symfony.com/doc/current/components/http_foundation.html#response

  -
    question: >
      Which of the following is a key aspect of Symfony's backward compatibility promise regarding deprecations?
    answers:
      - { value: "Features are deprecated for at least one major version before being removed, providing a clear upgrade path.", correct: true }
      - { value: "Deprecated features are immediately removed upon release of a new minor version.", correct: false }
      - { value: "Deprecations are only announced in the documentation, not through code warnings.", correct: false }
      - { value: "Symfony guarantees that no feature will ever be deprecated.", correct: false }
    help: |
      Symfony has a policy of deprecating features for at least one major version before their removal, giving developers time to adapt.
      https://symfony.com/doc/current/contributing/code/bc.html#deprecations

  -
    question: >
      What is the purpose of the `composer install` command in a Symfony Flex project?
    answers:
      - { value: "To install all project dependencies based on the `composer.lock` file, and apply Symfony Flex recipes.", correct: true }
      - { value: "To update all project dependencies to their latest compatible versions.", correct: false }
      - { value: "To create a new Symfony project from scratch.", correct: false }
      - { value: "To run the application's test suite.", correct: false }
    help: |
      `composer install` installs dependencies from `composer.lock` and triggers Flex recipes for new packages.
      https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies

  -
    question: >
      Which of the following is a key benefit of using Symfony's `PropertyInfo` component?
    answers:
      - { value: "It provides a unified API to extract various types of information (e.g., types, descriptions, writability) about class properties from different sources (e.g., Reflection, PHPDoc).", correct: true }
      - { value: "It automatically validates data against property types.", correct: false }
      - { value: "It generates getter and setter methods for properties.", correct: false }
      - { value: "It encrypts property values for security.", correct: false }
    help: |
      The `PropertyInfo` component offers a flexible way to retrieve metadata about class properties using various extractors.
      https://symfony.com/doc/current/components/property_info.html

  -
    question: >
      What is the purpose of the `#[AsCommand]` attribute in a Symfony 7 console command?
    answers:
      - { value: "To configure the command's name, description, and other options directly on the command class.", correct: true }
      - { value: "To mark the command as a service for autowiring.", correct: false }
      - { value: "To define the command's arguments and options in a separate configuration file.", correct: false }
      - { value: "To specify the PHP version required to run the command.", correct: false }
    help: |
      The `#[AsCommand]` attribute is the modern way to configure console commands in Symfony, replacing static properties.
      https://symfony.com/doc/current/console.html#configuring-the-command

  -
    question: >
      What is the primary role of the `Request` object in Symfony's request-response flow?
    answers:
      - { value: "To encapsulate all incoming HTTP request data, including headers, query parameters, and body content.", correct: true }
      - { value: "To generate HTML responses.", correct: false }
      - { value: "To interact with the database.", correct: false }
      - { value: "To manage application-level events.", correct: false }
    help: |
      The `Request` object represents an HTTP request, providing an object-oriented way to access all its components.
      https://symfony.com/doc/current/components/http_foundation.html#request

  -
    question: >
      Which of the following is a recommended best practice for organizing controllers in a Symfony application?
    answers:
      - { value: "Placing them in the `src/Controller/` directory, often grouped by domain or feature.", correct: true }
      - { value: "Storing all controllers in the root of the `src/` directory.", correct: false }
      - { value: "Embedding controller logic directly within Twig templates.", correct: false }
      - { value: "Using a single controller class for the entire application.", correct: false }
    help: |
      Controllers are typically organized within `src/Controller/` and can be further grouped into subdirectories.
      https://symfony.com/doc/current/controller.html#controller-organization

  -
    question: >
      What is the purpose of the `MicroKernelTrait::registerBundles()` method when building a custom kernel?
    answers:
      - { value: "It defines the list of bundles that should be registered with the kernel for the application.", correct: true }
      - { value: "It registers new services with the Dependency Injection Container.", correct: false }
      - { value: "It configures the application's routing.", correct: false }
      - { value: "It loads environment variables from the `.env` file.", correct: false }
    help: |
      The `registerBundles()` method in a custom kernel (often using `MicroKernelTrait`) is where you explicitly define which bundles your application will use.
      https://symfony.com/doc/current/configuration/micro_kernel_trait.html#registerbundles

  -
    question: >
      Which of the following is a benefit of using Symfony's EventDispatcher component for handling application events?
    answers:
      - { value: "It promotes a highly decoupled architecture by allowing components to interact without direct knowledge of each other.", correct: true }
      - { value: "It automatically generates database migrations.", correct: false }
      - { value: "It provides a built-in authentication system.", correct: false }
      - { value: "It simplifies the creation of web forms.", correct: false }
    help: |
      The EventDispatcher is a core component for building decoupled and extensible applications.
      https://symfony.com/doc/current/components/event_dispatcher.html

  -
    question: >
      What is the purpose of the `framework.yaml` configuration file in a Symfony 7 application?
    answers:
      - { value: "It configures the core FrameworkBundle, including settings for routing, sessions, assets, and more.", correct: true }
      - { value: "It defines all custom services for the application.", correct: false }
      - { value: "It lists all installed Composer packages.", correct: false }
      - { value: "It contains database connection details.", correct: false }
    help: |
      `framework.yaml` is the central configuration file for the FrameworkBundle, which provides the core features of Symfony.
      https://symfony.com/doc/current/reference/configuration/framework.html

  -
    question: >
      Which of the following PHP Standard Recommendations (PSRs) defines a common interface for event dispatchers, which Symfony's EventDispatcher component adheres to?
    answers:
      - { value: "PSR-14 (Event Dispatcher)", correct: true }
      - { value: "PSR-3 (Logger Interface)", correct: false }
      - { value: "PSR-7 (HTTP Message Interfaces)", correct: false }
      - { value: "PSR-11 (Container Interface)", correct: false }
    help: |
      Symfony's EventDispatcher component implements PSR-14, providing a standardized way to dispatch and listen for events.
      https://symfony.com/doc/current/components/event_dispatcher.html (Conceptual understanding of PSR adherence)

  -
    question: >
      What is the primary purpose of the `src/` directory in a standard Symfony 7 application?
    answers:
      - { value: "To contain all the application's custom PHP code, including controllers, services, entities, and commands.", correct: true }
      - { value: "To store public web assets like CSS and JavaScript files.", correct: false }
      - { value: "To store cached data and log files.", correct: false }
      - { value: "To manage Composer dependencies.", correct: false }
    help: |
      The `src/` directory is where all your own PHP code for the application resides.
      https://symfony.com/doc/current/quick_tour/the_architecture.html

  -
    question: >
      What is the purpose of the `public/` directory in a Symfony 7 application?
    answers:
      - { value: "It is the web server's document root, containing publicly accessible files like `index.php` and static assets.", correct: true }
      - { value: "It stores all application configuration files.", correct: false }
      - { value: "It contains all the application's PHP source code.", correct: false }
      - { value: "It is used for storing temporary files during development.", correct: false }
    help: |
      The `public/` directory is the web server's document root, serving as the entry point for web requests.
      https://symfony.com/doc/current/quick_tour/the_architecture.html

  -
    question: >
      Which of the following is a recommended Symfony best practice for handling data persistence?
    answers:
      - { value: "Using an Object-Relational Mapper (ORM) like Doctrine, integrated via a Symfony bundle.", correct: true }
      - { value: "Writing raw SQL queries directly in controller methods.", correct: false }
      - { value: "Storing all data in session variables.", correct: false }
      - { value: "Using flat files for all data storage.", correct: false }
    help: |
      Symfony applications commonly use Doctrine ORM for database interactions, integrated through the DoctrineBundle.
      https://symfony.com/doc/current/doctrine.html

  -
    question: >
      What is the primary role of the `var/` directory in a Symfony application?
    answers:
      - { value: "To store generated files that are not part of the version control, such as cache, logs, and sessions.", correct: true }
      - { value: "To store all application source code.", correct: false }
      - { value: "To store Composer dependencies.", correct: false }
      - { value: "To store public web assets.", correct: false }
    help: |
      The `var/` directory contains volatile data like cache, logs, and sessions, which are typically excluded from version control.
      https://symfony.com/doc/current/quick_tour/the_architecture.html

  -
    question: >
      Which of the following is a common naming convention for service classes in Symfony?
    answers:
      - { value: "Placing them in `src/Service/` or a domain-specific subdirectory within `src/`.", correct: true }
      - { value: "Naming them with a `_service` suffix (e.g., `my_service.php`).", correct: false }
      - { value: "Storing them in the `public/` directory.", correct: false }
      - { value: "Defining them as anonymous classes directly in configuration files.", correct: false }
    help: |
      Service classes are typically placed in `src/Service/` or other logical subdirectories within `src/`.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#create-a-custom-service-class-in-symfony

  -
    question: >
      What is the purpose of the `config/` directory in a Symfony 7 application?
    answers:
      - { value: "To store all application configuration files (e.g., `services.yaml`, `routes.yaml`, `packages/`).", correct: true }
      - { value: "To store application source code.", correct: false }
      - { value: "To store temporary cache files.", correct: false }
      - { value: "To store public web assets.", correct: false }
    help: |
      The `config/` directory contains all the application's configuration files.
      https://symfony.com/doc/current/quick_tour/the_architecture.html

  -
    question: >
      What is the primary benefit of Symfony's "Bundle" concept?
    answers:
      - { value: "Bundles are self-contained units of functionality that can be reused across different Symfony applications.", correct: true }
      - { value: "Bundles automatically generate all necessary application code.", correct: false }
      - { value: "Bundles replace the need for Composer for dependency management.", correct: false }
      - { value: "Bundles provide a graphical user interface for application development.", correct: false }
    help: |
      Bundles are the fundamental building blocks of a Symfony application, providing modular and reusable features.
      https://symfony.com/doc/current/bundles.html

  -
    question: >
      Which of the following is a valid way to define services in Symfony 7?
    answers:
      - { value: "Using YAML configuration files (e.g., `config/services.yaml`).", correct: true }
      - { value: "Using XML configuration files (e.g., `config/services.xml`).", correct: true }
      - { value: "Using PHP configuration files (e.g., `config/services.php`).", correct: true }
      - { value: "Defining services as global variables in `public/index.php`.", correct: false }
    help: |
      Symfony supports YAML, XML, and PHP for defining services in the Dependency Injection Container.
      https://symfony.com/doc/current/service_container.html#defining-services

  -
    question: >
      What is the purpose of the `vendor/` directory in a Symfony application?
    answers:
      - { value: "It contains all third-party libraries and dependencies managed by Composer.", correct: true }
      - { value: "It stores the application's custom source code.", correct: false }
      - { value: "It stores cached data and log files.", correct: false }
      - { value: "It contains public web assets.", correct: false }
    help: |
      The `vendor/` directory is where Composer installs all your project's dependencies.
      https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies

  -
    question: >
      Which of the following is a recommended practice for handling exceptions in a production Symfony environment?
    answers:
      - { value: "Configuring a custom error page or a dedicated error controller to display user-friendly messages.", correct: true }
      - { value: "Displaying the full stack trace to end-users for debugging purposes.", correct: false }
      - { value: "Disabling error logging to improve performance.", correct: false }
      - { value: "Redirecting all errors to a generic homepage without any specific error message.", correct: false }
    help: |
      In production, exceptions should be handled gracefully by displaying custom error pages and logging the details.
      https://symfony.com/doc/current/controller/error_pages.html#customizing-error-pages

  -
    question: >
      What is the primary role of the `composer update` command in a Symfony Flex project?
    answers:
      - { value: "To update all project dependencies to their latest compatible versions according to `composer.json` and apply relevant Flex recipes.", correct: true }
      - { value: "To install dependencies for the first time based on `composer.lock`.", correct: false }
      - { value: "To remove all installed packages.", correct: false }
      - { value: "To validate the syntax of `composer.json`.", correct: false }
    help: |
      `composer update` updates dependencies and triggers Flex recipes for any changes.
      https://getcomposer.org/doc/01-basic-usage.md#updating-dependencies

  -
    question: >
      What is the purpose of the `assets` configuration section in `framework.yaml`?
    answers:
      - { value: "To configure how static assets (e.g., CSS, JavaScript, images) are handled, including base paths, versioning, and manifest files.", correct: true }
      - { value: "To define database connection details.", correct: false }
      - { value: "To configure the application's security settings.", correct: false }
      - { value: "To manage service definitions.", correct: false }
    help: |
      The `assets` configuration within `framework.yaml` controls various aspects of asset management in Symfony.
      https://symfony.com/doc/current/reference/configuration/framework.html#assets

  -
    question: >
      Which of the following is a benefit of using Symfony's `PropertyAccess` component?
    answers:
      - { value: "It provides a unified way to read and write values to properties of objects or elements of arrays, regardless of their visibility (public, private via getters/setters, or magic methods).", correct: true }
      - { value: "It automatically generates database entities from class definitions.", correct: false }
      - { value: "It encrypts sensitive data stored in object properties.", correct: false }
      - { value: "It validates data types of properties automatically.", correct: false }
    help: |
      The `PropertyAccess` component simplifies access to properties and array elements, abstracting away the underlying access mechanism.
      https://symfony.com/doc/current/components/property_access.html

  -
    question: >
      What is the primary purpose of the `bin/` directory in a Symfony application?
    answers:
      - { value: "To contain executable scripts, primarily the `console` command.", correct: true }
      - { value: "To store binary files for the web server.", correct: false }
      - { value: "To store compiled application code.", correct: false }
      - { value: "To store database migration scripts.", correct: false }
    help: |
      The `bin/` directory contains executable scripts, most notably `bin/console`.
      https://symfony.com/doc/current/quick_tour/the_architecture.html

  -
    question: >
      What is the primary purpose of the `templates/` directory in a Symfony application?
    answers:
      - { value: "To store Twig template files for rendering HTML responses.", correct: true }
      - { value: "To store PHP classes for services.", correct: false }
      - { value: "To store JavaScript and CSS assets.", correct: false }
      - { value: "To store database migration files.", correct: false }
    help: |
      The `templates/` directory is the default location for Twig template files.
      https://symfony.com/doc/current/templating.html

  -
    question: >
      In Symfony's release management, what is the significance of a "major" version release (e.g., from Symfony 6.x to 7.x)?
    answers:
      - { value: "It may introduce backward-incompatible changes, requiring migration efforts, but also brings significant new features and improvements.", correct: true }
      - { value: "It only contains bug fixes and security patches, with no new features.", correct: false }
      - { value: "It is a Long Term Support (LTS) release with extended maintenance.", correct: false }
      - { value: "It is a patch release that fixes critical bugs.", correct: false }
    help: |
      Major versions (e.g., Symfony 7) are allowed to introduce backward-incompatible changes, but these are always documented.
      https://symfony.com/releases

  -
    question: >
      Which of the following is a recommended practice for naming services in Symfony?
    answers:
      - { value: "Using descriptive names that reflect their purpose (e.g., `app.user_manager`, `app.email_sender`).", correct: true }
      - { value: "Using short, cryptic names to save typing.", correct: false }
      - { value: "Naming all services `service_1`, `service_2`, etc.", correct: false }
      - { value: "Using the fully qualified class name as the service ID for all services.", correct: false }
    help: |
      Clear and descriptive service IDs improve readability and maintainability.
      https://symfony.com/doc/current/service_container.html#referencing-services

  -
    question: >
      What is the purpose of the `autoload.php` file (or `autoload_runtime.php` in Symfony 6.x/7.x) in a Symfony application?
    answers:
      - { value: "It is generated by Composer and responsible for autoloading all PHP classes in the project.", correct: true }
      - { value: "It contains the application's main configuration.", correct: false }
      - { value: "It defines the application's routes.", correct: false }
      - { value: "It is a custom script for deploying the application.", correct: false }
    help: |
      Composer's autoloader (via `autoload.php` or `autoload_runtime.php`) ensures that PHP classes are loaded on demand.
      https://getcomposer.org/doc/01-basic-usage.md#autoloading

  -
    question: >
      Which of the following is a key benefit of Symfony's adherence to PSRs (PHP Standard Recommendations)?
    answers:
      - { value: "It ensures that Symfony components and the framework itself are interoperable with other PSR-compliant libraries and tools.", correct: true }
      - { value: "It guarantees that Symfony applications will run on any PHP version.", correct: false }
      - { value: "It eliminates the need for manual configuration in Symfony applications.", correct: false }
      - { value: "It provides a built-in ORM for database interactions.", correct: false }
    help: |
      Adherence to PSRs is crucial for interoperability within the broader PHP ecosystem.
      https://www.php-fig.org/psr/

  -
    question: >
      What is the primary role of the `EventDispatcher` component in Symfony's architecture?
    answers:
      - { value: "To allow different parts of the application to communicate in a decoupled way by dispatching and listening for events.", correct: true }
      - { value: "To manage the application's routing configuration.", correct: false }
      - { value: "To handle database interactions.", correct: false }
      - { value: "To generate HTML responses.", correct: false }
    help: |
      The EventDispatcher is a central hub for communication between decoupled components through events.
      https://symfony.com/doc/current/components/event_dispatcher.html

  -
    question: >
      What is the purpose of the `KernelEvents::EXCEPTION` event in Symfony?
    answers:
      - { value: "It is dispatched when an exception occurs during the request handling, allowing listeners to create a response from the exception.", correct: true }
      - { value: "It is dispatched when a new service is added to the container.", correct: false }
      - { value: "It is dispatched when a route is matched to a controller.", correct: false }
      - { value: "It is dispatched when the application is shutting down.", correct: false }
    help: |
      `KernelEvents::EXCEPTION` is a crucial event for handling errors and converting them into appropriate HTTP responses.
      https://symfony.com/doc/current/reference/events.html#kernel-exception

  -
    question: >
      Which of the following is a recommended best practice for organizing application code in Symfony?
    answers:
      - { value: "Grouping related classes by feature or domain within the `src/` directory (e.g., `src/User/`, `src/Product/`).", correct: true }
      - { value: "Placing all classes directly in the `src/` root.", correct: false }
      - { value: "Organizing classes strictly by type (e.g., all controllers in `src/Controller/`, all services in `src/Service/`).", correct: false }
      - { value: "Storing all code in a single PHP file.", correct: false }
    help: |
      Organizing code by feature or domain within `src/` improves maintainability and discoverability.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#code-organization

  -
    question: >
      What is the primary purpose of Symfony's `Runtime` component?
    answers:
      - { value: "To provide a lightweight entry point for applications, allowing them to be run in various environments (web, console, serverless) without a full kernel.", correct: true }
      - { value: "To manage application dependencies.", correct: false }
      - { value: "To generate code automatically.", correct: false }
      - { value: "To provide a graphical user interface for application management.", correct: false }
    help: |
      The Runtime component simplifies the bootstrapping of Symfony applications for different execution contexts.
      https://symfony.com/doc/current/components/runtime.html

  -
    question: >
      Which of the following describes Symfony's approach to "Framework Interoperability"?
    answers:
      - { value: "Adhering to PHP Standards Recommendations (PSRs) to ensure components can be used with other frameworks and libraries.", correct: true }
      - { value: "Providing built-in tools to convert Symfony applications to other frameworks.", correct: false }
      - { value: "Limiting the use of external libraries to maintain strict control over the codebase.", correct: false }
      - { value: "Developing proprietary interfaces that are unique to Symfony.", correct: false }
    help: |
      Symfony's commitment to PSRs is a cornerstone of its interoperability.
      https://www.php-fig.org/psr/ (Conceptual understanding)

  -
    question: >
      What is the purpose of the `when@prod` block in Symfony's configuration files (e.g., `config/packages/routing.yaml`)?
    answers:
      - { value: "To apply configuration settings specifically when the application is running in the `prod` (production) environment.", correct: true }
      - { value: "To define configuration that applies to all environments except `prod`.", correct: false }
      - { value: "To specify configuration for local development only.", correct: false }
      - { value: "To mark configuration as deprecated for future removal.", correct: false }
    help: |
      `when@env` blocks allow you to apply configuration conditionally based on the current application environment.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#configure-symfony-for-different-environments-yaml-xml-php

  -
    question: >
      Which of the following is a common naming convention for methods in Symfony?
    answers:
      - { value: "camelCase (e.g., `getUserName`, `processRequest`).", correct: true }
      - { value: "snake_case (e.g., `get_user_name`, `process_request`).", correct: false }
      - { value: "PascalCase (e.g., `GetUserName`, `ProcessRequest`).", correct: false }
      - { value: "kebab-case (e.g., `get-user-name`, `process-request`).", correct: false }
    help: |
      Symfony follows PSR-1, which dictates camelCase for method names.
      https://symfony.com/doc/current/contributing/code/conventions.html#naming-conventions

  -
    question: >
      What is the purpose of the `assets.base_path` configuration option in `framework.yaml`?
    answers:
      - { value: "To define a base URL or path that is prepended to all asset URLs generated by the application.", correct: true }
      - { value: "To specify the directory where source asset files are located.", correct: false }
      - { value: "To enable asset versioning globally.", correct: false }
      - { value: "To configure a CDN for serving assets.", correct: false }
    help: |
      `assets.base_path` allows you to set a common base path for all your assets, useful for deploying to subdirectories or CDNs.
      https://symfony.com/doc/current/reference/configuration/framework.html#assets-base-path

  -
    question: >
      What is the primary purpose of the `router.yaml` (or `routes.yaml`) file in a Symfony application?
    answers:
      - { value: "To define the application's URL patterns and map them to specific controllers or services.", correct: true }
      - { value: "To configure the database connection.", correct: false }
      - { value: "To define all application services.", correct: false }
      - { value: "To manage environment variables.", correct: false }
    help: |
      `routes.yaml` is the standard location for defining your application's routes using YAML.
      https://symfony.com/doc/current/routing.html#defining-routes-in-yaml

  -
    question: >
      Which of the following is a key principle of Symfony's approach to code organization?
    answers:
      - { value: "Separation of concerns, where different responsibilities (e.g., routing, controllers, services, templates) are handled by distinct components or layers.", correct: true }
      - { value: "Monolithic architecture, where all code resides in a single file.", correct: false }
      - { value: "Tight coupling between all parts of the application.", correct: false }
      - { value: "Prioritizing manual configuration over automated processes.", correct: false }
    help: |
      Symfony's architecture strongly emphasizes separation of concerns, leading to modular and maintainable code.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#code-organization

  -
    question: >
      What is the purpose of the `MicroKernelTrait`'s `configureContainer()` method when building a custom kernel?
    answers:
      - { value: "To load and configure the Dependency Injection Container, typically by importing service definitions from configuration files.", correct: true }
      - { value: "To define the application's routes.", correct: false }
      - { value: "To register bundles with the kernel.", correct: false }
      - { value: "To handle incoming HTTP requests.", correct: false }
    help: |
      `configureContainer()` is used to load service definitions and configure the Dependency Injection Container.
      https://symfony.com/doc/current/configuration/micro_kernel_trait.html#configurecontainer

  -
    question: >
      Which of the following is a key benefit of Symfony's release management strategy, including LTS and regular releases?
    answers:
      - { value: "It provides predictable upgrade paths and long-term stability for enterprise applications, alongside rapid innovation for new features.", correct: true }
      - { value: "It forces developers to upgrade to the latest version every six months.", correct: false }
      - { value: "It eliminates the need for any manual migration efforts during upgrades.", correct: false }
      - { value: "It ensures that all third-party bundles are always compatible with the latest Symfony version.", correct: false }
    help: |
      Symfony's release strategy balances stability (LTS) with innovation (regular releases), offering clear upgrade paths.
      https://symfony.com/releases

  -
    question: >
      What is the primary purpose of the `MicroKernelTrait::configureRoutes()` method when building a custom kernel?
    answers:
      - { value: "To load and configure the application's routing definitions.", correct: true }
      - { value: "To register bundles with the kernel.", correct: false }
      - { value: "To configure the Dependency Injection Container.", correct: false }
      - { value: "To handle exceptions during request processing.", correct: false }
    help: |
      `configureRoutes()` is used to load routing definitions for the application.
      https://symfony.com/doc/current/configuration/micro_kernel_trait.html#configureroutes

  -
    question: >
      Which of the following is a common practice for handling assets (CSS, JavaScript, images) in a modern Symfony 7 application?
    answers:
      - { value: "Using Webpack Encore to compile and version assets, and then referencing them in Twig templates using the `asset()` function.", correct: true }
      - { value: "Hardcoding asset URLs directly in HTML files.", correct: false }
      - { value: "Manually copying asset files to the `public/` directory after every change.", correct: false }
      - { value: "Storing all assets in the `src/` directory and serving them directly.", correct: false }
    help: |
      Webpack Encore is the recommended tool for managing front-end assets in Symfony, with `asset()` for referencing.
      https://symfony.com/doc/current/frontend.html

  -
    question: >
      What is the purpose of the `PropertyInfoExtractor` in Symfony's `PropertyInfo` component?
    answers:
      - { value: "It acts as a facade that aggregates information from multiple property info extractors (e.g., Reflection, PHPDoc) to provide comprehensive property metadata.", correct: true }
      - { value: "It is a single extractor that uses only PHP's reflection API.", correct: false }
      - { value: "It is responsible for validating property values.", correct: false }
      - { value: "It generates new properties on classes at runtime.", correct: false }
    help: |
      `PropertyInfoExtractor` combines the capabilities of various extractors to provide a complete picture of a property's metadata.
      https://symfony.com/doc/current/components/property_info.html#propertyinfoextractor-api

  -
    question: >
      Which of the following is a key aspect of Symfony's approach to "Deprecations"?
    answers:
      - { value: "They are introduced in minor versions and removed in the next major version, providing a clear migration path.", correct: true }
      - { value: "They are immediately removed without prior warning.", correct: false }
      - { value: "They are only announced in blog posts, not in code.", correct: false }
      - { value: "They are permanent warnings that never lead to feature removal.", correct: false }
    help: |
      Symfony's deprecation policy is designed to give developers ample time to adapt to changes.
      https://symfony.com/doc/current/contributing/code/conventions.html#deprecations

  -
    question: >
      What is the primary benefit of using Symfony's `HttpClient` component?
    answers:
      - { value: "It provides a powerful and flexible way to make HTTP requests to external APIs or services, with features like retries, mocking, and error handling.", correct: true }
      - { value: "It is a full-stack web server for hosting Symfony applications.", correct: false }
      - { value: "It manages database connections and ORM entities.", correct: false }
      - { value: "It provides a templating engine for rendering HTML.", correct: false }
    help: |
      The `HttpClient` component is a robust tool for making HTTP requests, adhering to PSR-18.
      https://symfony.com/doc/current/components/http_client.html

  -
    question: >
      Which of the following is a recommended practice for handling sensitive data (e.g., API keys, database passwords) in a Symfony application's configuration?
    answers:
      - { value: "Using Symfony's 'secrets' management system or environment variables loaded from `.env` files.", correct: true }
      - { value: "Hardcoding them directly into `config/services.yaml`.", correct: false }
      - { value: "Committing them to version control in plain text.", correct: false }
      - { value: "Storing them in public Twig templates.", correct: false }
    help: |
      Symfony's secrets management and environment variables are the secure ways to handle sensitive configuration.
      https://symfony.com/doc/current/configuration/secrets.html

  -
    question: >
      What is the primary purpose of the `composer.lock` file in a Symfony application?
    answers:
      - { value: "To ensure that the exact same versions of all dependencies are installed across different environments.", correct: true }
      - { value: "To define the application's environment variables.", correct: false }
      - { value: "To store Symfony Flex recipe information.", correct: false }
      - { value: "To manage database schema versions.", correct: false }
    help: |
      `composer.lock` ensures reproducible dependency installations.
      https://getcomposer.org/doc/01-basic-usage.md#composer-lock-the-lock-file

  -
    question: >
      What is the primary role of the `Event` class in Symfony's EventDispatcher component?
    answers:
      - { value: "It is an object that encapsulates information about something that has happened in the application, which listeners can react to.", correct: true }
      - { value: "It is a configuration file for event listeners.", correct: false }
      - { value: "It is a service that dispatches events.", correct: false }
      - { value: "It is a database table for storing event logs.", correct: false }
    help: |
      An `Event` object carries data related to an occurrence in the application, allowing listeners to respond.
      https://symfony.com/doc/current/components/event_dispatcher.html#creating-and-dispatching-an-event

  -
    question: >
      Which of the following is a recommended practice for organizing Twig templates in a Symfony application?
    answers:
      - { value: "Placing them in the `templates/` directory, often grouped by bundle or feature (e.g., `templates/blog/`, `templates/security/`).", correct: true }
      - { value: "Storing all templates in the `public/` directory.", correct: false }
      - { value: "Embedding HTML directly within PHP controller files.", correct: false }
      - { value: "Using a single `index.html.twig` file for the entire application.", correct: false }
    help: |
      Templates are typically organized within the `templates/` directory, often mirroring the bundle or feature structure.
      https://symfony.com/doc/current/templating.html#template-naming-and-locations

  -
    question: >
      What is the primary purpose of Symfony's "Service Container"?
    answers:
      - { value: "To manage the instantiation, configuration, and delivery of objects (services) throughout the application, promoting loose coupling and testability.", correct: true }
      - { value: "To store user session data.", correct: false }
      - { value: "To handle HTTP routing and URL generation.", correct: false }
      - { value: "To provide a graphical interface for application management.", correct: false }
    help: |
      The Service Container is the heart of Symfony's Dependency Injection, managing the lifecycle of services.
      https://symfony.com/doc/current/service_container.html

  -
    question: >
      Which of the following is a key benefit of Symfony's "Bundle" system for code organization?
    answers:
      - { value: "It allows for modular and reusable units of functionality that can be easily shared across projects or contributed to the community.", correct: true }
      - { value: "It eliminates the need for Composer to manage dependencies.", correct: false }
      - { value: "It automatically generates all necessary database tables.", correct: false }
      - { value: "It provides a built-in content management system (CMS).", correct: false }
    help: |
      Bundles are Symfony's way of packaging modular features for reuse.
      https://symfony.com/doc/current/bundles.html

  -
    question: >
      What is the primary purpose of the `composer require` command in a Symfony Flex project?
    answers:
      - { value: "To add new packages to the project's `composer.json` and install them, triggering relevant Symfony Flex recipes.", correct: true }
      - { value: "To update existing packages to their latest compatible versions.", correct: false }
      - { value: "To remove installed packages from the project.", correct: false }
      - { value: "To generate a new Symfony project.", correct: false }
    help: |
      `composer require` is used to add new dependencies and install them, with Flex automating configuration.
      https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies

  -
    question: >
      Which of the following is a common practice for handling exceptions in a development Symfony environment?
    answers:
      - { value: "Displaying detailed error pages with stack traces and debug information via the Web Debug Toolbar.", correct: true }
      - { value: "Redirecting all errors to a generic homepage.", correct: false }
      - { value: "Suppressing all error messages to avoid clutter.", correct: false }
      - { value: "Sending error notifications via email to the development team for every exception.", correct: false }
    help: |
      In development, Symfony provides rich debugging tools for exceptions, including stack traces.
      https://symfony.com/doc/current/controller/error_pages.html#customizing-error-pages

  -
    question: >
      What is the purpose of the `config/packages/` directory in a Symfony application?
    answers:
      - { value: "To store configuration files for individual bundles or framework features, often organized by bundle name (e.g., `framework.yaml`, `doctrine.yaml`).", correct: true }
      - { value: "To store custom PHP classes.", correct: false }
      - { value: "To store public web assets.", correct: false }
      - { value: "To store temporary cache files.", correct: false }
    help: |
      `config/packages/` contains configuration files for various bundles and framework features.
      https://symfony.com/doc/current/quick_tour/the_architecture.html

  -
    question: >
      What is the primary purpose of the `KernelEvents::REQUEST` event in Symfony?
    answers:
      - { value: "It is dispatched at the very beginning of the request handling process, allowing listeners to modify the request or return a response immediately.", correct: true }
      - { value: "It is dispatched after the controller has returned a response.", correct: false }
      - { value: "It is dispatched when an exception occurs.", correct: false }
      - { value: "It is dispatched when a service is loaded from the container.", correct: false }
    help: |
      `KernelEvents::REQUEST` is the first event in the request lifecycle, providing an early hook for request manipulation.
      https://symfony.com/doc/current/reference/events.html#kernel-request

  -
    question: >
      Which of the following is a common naming convention for console commands in Symfony?
    answers:
      - { value: "Using a colon-separated namespace and a descriptive name (e.g., `app:user:create`, `cache:clear`).", correct: true }
      - { value: "Using camelCase without namespaces (e.g., `userCreate`, `cacheClear`).", correct: false }
      - { value: "Using snake_case with underscores (e.g., `app_user_create`, `cache_clear`).", correct: false }
      - { value: "Using only numbers as command names.", correct: false }
    help: |
      Symfony console commands typically follow a `namespace:command-name` convention.
      https://symfony.com/doc/current/console.html#command-names

  -
    question: >
      What is the purpose of the `when@dev` block in Symfony's configuration files (e.g., `config/packages/framework.yaml`)?
    answers:
      - { value: "To apply configuration settings specifically when the application is running in the `dev` (development) environment.", correct: true }
      - { value: "To define configuration that applies to all environments except `dev`.", correct: false }
      - { value: "To specify configuration for production only.", correct: false }
      - { value: "To mark configuration as stable for release.", correct: false }
    help: |
      `when@env` blocks allow environment-specific configuration, with `when@dev` for development settings.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#configure-symfony-for-different-environments-yaml-xml-php

  -
    question: >
      What is the primary purpose of the `MicroKernelTrait`'s `getCacheDir()` method in a multi-application Symfony setup?
    answers:
      - { value: "To define a unique cache directory for each application, preventing cache conflicts.", correct: true }
      - { value: "To specify the shared cache directory for all applications.", correct: false }
      - { value: "To clear the cache for all applications simultaneously.", correct: false }
      - { value: "To configure cache invalidation strategies.", correct: false }
    help: |
      In a multi-kernel setup, `getCacheDir()` can be overridden to provide separate cache directories per application.
      https://symfony.com/doc/current/configuration/multiple_kernels.html#symfony-multi-application-kernel-implementation

  -
    question: >
      Which of the following is a key aspect of Symfony's "Backward Compatibility Promise"?
    answers:
      - { value: "Minor versions (e.g., 7.0 to 7.1) will not introduce breaking changes to public APIs.", correct: true }
      - { value: "Major versions (e.g., 6.x to 7.x) will never introduce breaking changes.", correct: false }
      - { value: "All internal APIs are guaranteed to remain stable across all versions.", correct: false }
      - { value: "Third-party bundles are guaranteed to be compatible with all Symfony versions.", correct: false }
    help: |
      Symfony's B/C promise focuses on public APIs in minor versions.
      https://symfony.com/doc/current/contributing/code/bc.html

  -
    question: >
      What is the purpose of the `KernelEvents::RESPONSE` event in Symfony?
    answers:
      - { value: "It is dispatched after the controller has returned a `Response` object, allowing listeners to modify the response before it is sent to the client.", correct: true }
      - { value: "It is dispatched before the controller is executed.", correct: false }
      - { value: "It is dispatched when an HTTP request is received.", correct: false }
      - { value: "It is dispatched when an exception occurs.", correct: false }
    help: |
      `KernelEvents::RESPONSE` provides a hook to modify the response before it is sent.
      https://symfony.com/doc/current/reference/events.html#kernel-response

  -
    question: >
      What is the primary purpose of the `MicroKernelTrait`'s `getLogDir()` method in a multi-application Symfony setup?
    answers:
      - { value: "To define a unique log directory for each application, preventing log file conflicts.", correct: true }
      - { value: "To specify the shared log directory for all applications.", correct: false }
      - { value: "To clear the logs for all applications simultaneously.", correct: false }
      - { value: "To configure log rotation strategies.", correct: false }
    help: |
      Similar to `getCacheDir()`, `getLogDir()` can be overridden to provide separate log directories per application.
      https://symfony.com/doc/current/configuration/multiple_kernels.html#symfony-multi-application-kernel-implementation

  -
    question: >
      Which of the following describes Symfony's approach to "Framework Overloading" in the context of bundles?
    answers:
      - { value: "It allows developers to override specific files (e.g., templates, controllers, configuration) from a third-party bundle within their own application.", correct: true }
      - { value: "It refers to the process of installing too many bundles, leading to performance degradation.", correct: false }
      - { value: "It means replacing the entire Symfony framework with a different one.", correct: false }
      - { value: "It is a deprecated feature in Symfony 7.", correct: false }
    help: |
      Bundle overriding is a key feature of framework overloading, allowing customization without modifying vendor code.
      https://symfony.com/doc/current/bundles/override.html

  -
    question: >
      What is the primary benefit of using Symfony's `#[AsCommand]` attribute for console commands?
    answers:
      - { value: "It simplifies command configuration by allowing metadata to be defined directly in the class, reducing boilerplate.", correct: true }
      - { value: "It automatically executes the command on a schedule.", correct: false }
      - { value: "It enables commands to be run directly in the web browser.", correct: false }
      - { value: "It removes the need for the `symfony/console` component.", correct: false }
    help: |
      The `#[AsCommand]` attribute streamlines command definition.
      https://symfony.com/doc/current/console.html#configuring-the-command

  -
    question: >
      What is the purpose of the `KernelEvents::VIEW` event in Symfony?
    answers:
      - { value: "It is dispatched after a controller returns something other than a `Response` object, allowing listeners to convert it into a `Response`.", correct: true }
      - { value: "It is dispatched before the controller is executed.", correct: false }
      - { value: "It is dispatched when an HTTP request is received.", correct: false }
      - { value: "It is dispatched when an exception occurs.", correct: false }
    help: |
      `KernelEvents::VIEW` is used to convert non-Response return values from controllers into actual `Response` objects.
      https://symfony.com/doc/current/reference/events.html#kernel-view

  -
    question: >
      Which of the following is a key principle of Symfony's approach to "Release Management"?
    answers:
      - { value: "Providing a clear and predictable schedule for new releases, including LTS versions with extended support.", correct: true }
      - { value: "Releasing new major versions every month to ensure rapid feature delivery.", correct: false }
      - { value: "Avoiding any form of versioning to simplify dependency management.", correct: false }
      - { value: "Only releasing new versions when critical security vulnerabilities are found.", correct: false }
    help: |
      Symfony's release management is structured to provide predictability and long-term support.
      https://symfony.com/releases

  -
    question: >
      What is the purpose of the `PropertyInfo` component's `getTypes()` method?
    answers:
      - { value: "To retrieve detailed type information (e.g., built-in type, nullability, class name) for a specific property of a class.", correct: true }
      - { value: "To get a list of all properties on a class.", correct: false }
      - { value: "To check if a property is readable or writable.", correct: false }
      - { value: "To generate type hints for class properties.", correct: false }
    help: |
      `getTypes()` provides comprehensive type metadata for properties.
      https://symfony.com/doc/current/components/property_info.html#extracting-property-type-information-with-propertyinfo

  -
    question: >
      Which of the following is a common naming convention for event names in Symfony?
    answers:
      - { value: "Using snake_case, often prefixed with a domain or component name (e.g., `app.user_registered`, `kernel.request`).", correct: true }
      - { value: "Using PascalCase (e.g., `UserRegisteredEvent`, `KernelRequestEvent`).", correct: false }
      - { value: "Using camelCase (e.g., `userRegistered`, `kernelRequest`).", correct: false }
      - { value: "Using UUIDs for uniqueness.", correct: false }
    help: |
      Snake_case with a clear domain prefix is common for event names.
      https://symfony.com/doc/current/components/event_dispatcher.html#naming-conventions

  -
    question: >
      What is the primary purpose of Symfony's `MicroKernelTrait`?
    answers:
      - { value: "To provide a simplified way to create a Symfony kernel for microservices or small applications, reducing boilerplate.", correct: true }
      - { value: "To enable full-stack Symfony features in a minimal setup.", correct: false }
      - { value: "To provide a graphical interface for kernel configuration.", correct: false }
      - { value: "To automatically generate all bundles required by the application.", correct: false }
    help: |
      The `MicroKernelTrait` simplifies kernel creation for lightweight applications.
      https://symfony.com/doc/current/configuration/micro_kernel_trait.html

  -
    question: >
      What is the purpose of the `assets.version` configuration option in `framework.yaml`?
    answers:
      - { value: "To globally append a query parameter (e.g., `?v=1`) to all rendered asset paths for cache busting.", correct: true }
      - { value: "To specify the file path to an asset manifest.", correct: false }
      - { value: "To enable strict mode for asset validation.", correct: false }
      - { value: "To define the base URL for all assets.", correct: false }
    help: |
      The `assets.version` option is used to force browsers to reload assets by changing their URL.
      https://symfony.com/doc/current/reference/configuration/framework.html#assets-version

  -
    question: >
      Which of the following is a recommended practice for handling deprecations in a Symfony application's test suite?
    answers:
      - { value: "Ensuring that tests pass without deprecation warnings, treating them as failures to encourage early fixes.", correct: true }
      - { value: "Ignoring deprecation warnings in tests, as they do not affect functionality.", correct: false }
      - { value: "Disabling deprecation warnings entirely in the test environment.", correct: false }
      - { value: "Only running tests in production to catch deprecations.", correct: false }
    help: |
      Addressing deprecations in tests helps maintain a healthy codebase and prepares for future upgrades.
      https://symfony.com/doc/current/components/debug/deprecations.html#testing-for-deprecations

  -
    question: >
      What is the primary purpose of the `PropertyInfo` component?
    answers:
      - { value: "To extract metadata about class properties, such as their types, descriptions, and writability, from various sources (e.g., PHP Reflection, PHPDoc).", correct: true }
      - { value: "To access and modify object properties dynamically.", correct: false }
      - { value: "To generate PHP code for data transfer objects.", correct: false }
      - { value: "To validate data against property constraints.", correct: false }
    help: |
      The `PropertyInfo` component provides a flexible way to get information about properties.
      https://symfony.com/doc/current/components/property_info.html

  -
    question: >
      What is the purpose of Symfony's `#[AsTwigFilter]` attribute?
    answers:
      - { value: "To automatically register a PHP method as a Twig filter, simplifying Twig extension creation.", correct: true }
      - { value: "To define a Twig function.", correct: false }
      - { value: "To mark a Twig template as deprecated.", correct: false }
      - { value: "To inject services into Twig templates.", correct: false }
    help: |
      `#[AsTwigFilter]` simplifies the registration of custom Twig filters through autoconfiguration.
      https://symfony.com/doc/current/templating/twig_extension.html#registering-as-a-service

  -
    question: >
      Which of the following describes Symfony's approach to "Framework Overloading" for services?
    answers:
      - { value: "The ability to replace or decorate existing services in the Dependency Injection Container with custom implementations.", correct: true }
      - { value: "The process of creating a large number of services, leading to a bloated container.", correct: false }
      - { value: "The practice of using global variables to store service instances.", correct: false }
      - { value: "The automatic generation of all service definitions.", correct: false }
    help: |
      Service decoration is a powerful feature for customizing framework or bundle services.
      https://symfony.com/doc/current/service_container/service_decoration.html

  -
    question: >
      What is the primary purpose of the `composer dump-autoload` command in a Symfony application?
    answers:
      - { value: "To regenerate the Composer autoloader files, which are essential for Symfony to find and load PHP classes.", correct: true }
      - { value: "To install all project dependencies.", correct: false }
      - { value: "To clear the Symfony cache.", correct: false }
      - { value: "To update all project dependencies to their latest versions.", correct: false }
    help: |
      `composer dump-autoload` rebuilds the autoloader, necessary after adding new classes or changing namespaces.
      https://getcomposer.org/doc/01-basic-usage.md#autoloading

  -
    question: >
      What is the primary purpose of the `vendor/symfony/symfony/` directory (or similar component directories within `vendor/symfony/`) in a Symfony application?
    answers:
      - { value: "It contains the source code of the Symfony Framework itself and its core components, managed by Composer.", correct: true }
      - { value: "It stores the application's custom source code.", correct: false }
      - { value: "It stores cached data and log files.", correct: false }
      - { value: "It contains public web assets.", correct: false }
    help: |
      The `vendor/symfony/` directory holds the Symfony framework's source code, installed via Composer.
      https://symfony.com/doc/current/quick_tour/the_architecture.html

  -
    question: >
      What is the primary benefit of Symfony's "Backward Compatibility Promise"?
    answers:
      - { value: "It provides a stable and predictable upgrade path for applications, minimizing breaking changes between minor versions.", correct: true }
      - { value: "It ensures that all third-party libraries are always compatible with the latest Symfony version.", correct: false }
      - { value: "It eliminates the need for any manual code changes during major version upgrades.", correct: false }
      - { value: "It guarantees that all deprecated features will remain supported indefinitely.", correct: false }
    help: |
      The B/C promise is crucial for predictable upgrades.
      https://symfony.com/doc/current/contributing/code/bc.html

  -
    question: >
      Which of the following is a common naming convention for parameters in Symfony's Dependency Injection Container?
    answers:
      - { value: "Using snake_case, often prefixed with the bundle or application name (e.g., `app.my_param`, `database_host`).", correct: true }
      - { value: "Using camelCase (e.g., `appMyParam`, `databaseHost`).", correct: false }
      - { value: "Using PascalCase (e.g., `AppMyParam`, `DatabaseHost`).", correct: false }
      - { value: "Using kebab-case (e.g., `app-my-param`, `database-host`).", correct: false }
    help: |
      Snake_case is the common convention for parameter names.
      https://symfony.com/doc/current/service_container/parameters.html

  -
    question: >
      What is the primary purpose of the `symfony/framework-bundle` in a Symfony application?
    answers:
      - { value: "It provides the core features of the Symfony framework, integrating various components and offering essential services like routing, sessions, and templating.", correct: true }
      - { value: "It is a bundle for managing user authentication and authorization.", correct: false }
      - { value: "It is a bundle for interacting with databases via Doctrine ORM.", correct: false }
      - { value: "It is a bundle for creating command-line applications.", correct: false }
    help: |
      The FrameworkBundle is the central bundle that ties together many Symfony components to form the full framework.
      https://symfony.com/doc/current/bundles/framework.html

  -
    question: >
      Which of the following is a key aspect of Symfony's "Release Management" regarding security fixes?
    answers:
      - { value: "Security fixes are provided for a longer period than bug fixes, especially for LTS versions.", correct: true }
      - { value: "Security fixes are only applied to the latest major version.", correct: false }
      - { value: "Security vulnerabilities are publicly disclosed without prior fixes.", correct: false }
      - { value: "Symfony does not provide security fixes; users must rely on third-party patches.", correct: false }
    help: |
      Symfony has a strong commitment to security, providing extended security support for releases.
      https://symfony.com/releases

  -
    question: >
      What is the role of the `composer.lock` file in ensuring consistent deployments of a Symfony application?
    answers:
      - { value: "It ensures that the exact same versions of all project dependencies are installed on every environment (development, staging, production).", correct: true }
      - { value: "It locks the application's environment variables to specific values.", correct: false }
      - { value: "It prevents any new packages from being added to the project.", correct: false }
      - { value: "It automatically updates all dependencies to their latest versions.", correct: false }
    help: |
      `composer.lock` is critical for reproducible builds across environments.
      https://getcomposer.org/doc/01-basic-usage.md#composer-lock-the-lock-filecategory: Symfony Architecture

questions:
  -
    question: >
      What is the primary purpose of Symfony Flex in a Symfony 7 application?
    answers:
      - { value: "To simplify the installation and management of Symfony packages and their dependencies.", correct: true }
      - { value: "To provide a graphical user interface for Symfony development.", correct: false }
      - { value: "To replace Composer as the primary dependency manager.", correct: false }
      - { value: "To automatically generate all application code, including business logic.", correct: false }
    help: |
      Symfony Flex is a Composer plugin that simplifies the installation and management of Symfony applications and their dependencies by automating common tasks through "recipes."
      https://symfony.com/doc/current/setup/symfony_flex.html

  -
    question: |
      When you run `composer require logger` in a Symfony 7 application, what is the typical outcome related to Symfony Flex?
    answers:
      - { value: "Flex installs the Monolog bundle and creates or updates configuration files (e.g., `config/packages/monolog.yaml`).", correct: true }
      - { value: "Flex only installs the `psr/log` package, requiring manual configuration of a logger.", correct: false }
      - { value: "Flex removes all existing logging configurations from the application.", correct: false }
      - { value: "Flex prompts the user to manually choose a logging library from a list.", correct: false }
    help: |
      Symfony Flex automatically executes "recipes" when packages are installed. For `logger`, it installs the Monolog bundle and sets up its basic configuration.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#install-monolog-logger-in-symfony

  -
    question: >
      Under which open-source license is the Symfony framework distributed?
    answers:
      - { value: "MIT License", correct: true }
      - { value: "GPLv3 License", correct: false }
      - { value: "Apache License 2.0", correct: false }
      - { value: "BSD License", correct: false }
    help: |
      Symfony is released under the MIT license, which is a permissive free software license.
      https://symfony.com/doc/current/contributing/code/licensing.html

  -
    question: >
      What is a core characteristic of Symfony Components?
    answers:
      - { value: "They are standalone PHP libraries that can be used independently of the full Symfony framework.", correct: true }
      - { value: "They are tightly coupled modules that can only function within a full Symfony application.", correct: false }
      - { value: "They are primarily designed for front-end development and JavaScript integration.", correct: false }
      - { value: "They are commercial extensions requiring a paid license for usage.", correct: false }
    help: |
      Symfony Components are a set of decoupled and reusable PHP libraries. They can be used independently in any PHP project, not just a full Symfony application.
      https://symfony.com/doc/current/components/index.html

  -
    question: >
      Which Symfony Component is responsible for abstracting the HTTP specification, providing classes like `Request` and `Response`?
    answers:
      - { value: "HttpFoundation", correct: true }
      - { value: "Routing", correct: false }
      - { value: "HttpKernel", correct: false }
      - { value: "WebLink", correct: false }
    help: |
      The HttpFoundation component defines an object-oriented layer for the HTTP specification. It provides `Request` and `Response` classes.
      https://symfony.com/doc/current/components/http_foundation.html

  -
    question: >
      What is the primary role of the Symfony DependencyInjection component?
    answers:
      - { value: "To manage the instantiation and lifecycle of objects (services) within an application.", correct: true }
      - { value: "To handle database interactions and ORM mapping.", correct: false }
      - { value: "To process and validate user input from web forms.", correct: false }
      - { value: "To manage user authentication and authorization.", correct: false }
    help: |
      The DependencyInjection component allows you to standardize and centralize the way objects are constructed in your application. It manages services.
      https://symfony.com/doc/current/components/dependency_injection.html

  -
    question: >
      Which Symfony Component implements the Mediator design pattern, allowing different parts of an application to communicate without direct coupling?
    answers:
      - { value: "EventDispatcher", correct: true }
      - { value: "Messenger", correct: false }
      - { value: "Workflow", correct: false }
      - { value: "Notifier", correct: false }
    help: |
      The EventDispatcher component provides tools to implement the "Mediator" design pattern, allowing components to dispatch events and other components to listen to them.
      https://symfony.com/doc/current/components/event_dispatcher.html

  -
    question: >
      Which Symfony Component is used to create powerful command-line applications?
    answers:
      - { value: "Console", correct: true }
      - { value: "Process", correct: false }
      - { value: "Finder", correct: false }
      - { value: "Filesystem", correct: false }
    help: |
      The Console component allows you to create command-line commands.
      https://symfony.com/doc/current/components/console.html

  -
    question: |
      Consider the following PHP code using Symfony's PropertyAccess component:

      ```php
      use Symfony\Component\PropertyAccess\PropertyAccess;

      class Person
      {
          public string $firstName;
      }

      $person = new Person();
      $propertyAccessor = PropertyAccess::createPropertyAccessor();
      $propertyAccessor->setValue($person, 'firstName', 'Alice');
      $value = $propertyAccessor->getValue($person, 'firstName');
      ```

      What will be the value of `$value` after executing this code?
    answers:
      - { value: "\"Alice\"", correct: true }
      - { value: "null", correct: false }
      - { value: "An instance of `Person`", correct: false }
      - { value: "A `NoSuchPropertyException` will be thrown.", correct: false }
    help: |
      The `PropertyAccessor` component allows reading and writing to object properties or array elements using a string path. `setValue` sets the value, and `getValue` retrieves it.
      https://symfony.com/doc/current/components/property_access.html#reading-and-writing

  -
    question: |
      Which method of `Symfony\Component\PropertyInfo\PropertyInfoExtractor` would you use to get a list of all properties available on a given class?
    answers:
      - { value: "`getProperties(string $class)`", correct: true }
      - { value: "`getTypes(string $class, string $property)`", correct: false }
      - { value: "`getShortDescription(string $class, string $property)`", correct: false }
      - { value: "`isReadable(string $class, string $property)`", correct: false }
    help: |
      The `getProperties()` method of `PropertyInfoExtractor` (which uses `PropertyListExtractorInterface`) is used to list all properties of a class.
      https://symfony.com/doc/current/components/property_info.html#propertyinfoextractor-api

  -
    question: >
      In the Symfony Messenger component, what is the primary responsibility of a "Sender"?
    answers:
      - { value: "To serialize and send messages to a message broker or third-party API.", correct: true }
      - { value: "To retrieve, deserialize, and forward messages to handler(s).", correct: false }
      - { value: "To handle messages using the business logic applicable to the messages.", correct: false }
      - { value: "To access the message and its wrapper (the envelope) while it is dispatched through the bus.", correct: false }
    help: |
      A Sender in Symfony Messenger is responsible for sending messages to an external transport (e.g., a message queue).
      https://symfony.com/doc/current/components/messenger.html#sender

  -
    question: |
      Given the following `Configuration` class snippet using Symfony's Config component:

      ```php
      use Symfony\Component\Config\Definition\Builder\TreeBuilder;
      use Symfony\Component\Config\Definition\ConfigurationInterface;

      class Configuration implements ConfigurationInterface
      {
          public function getConfigTreeBuilder(): TreeBuilder
          {
              $treeBuilder = new TreeBuilder('my_bundle');
              $rootNode = $treeBuilder->getRootNode();

              $rootNode
                  ->children()
                      ->arrayNode('connections')
                          ->arrayPrototype()
                              ->children()
                                  ->scalarNode('driver')->end()
                                  ->scalarNode('host')->end()
                              ->end()
                          ->end()
                      ->end()
                  ->end()
              ;

              return $treeBuilder;
          }
      }
      ```

      Which of the following YAML configurations would be valid for the `connections` node?
    answers:
      - { value: '''connections: [{"driver": "mysql", "host": "localhost"}, {"driver": "pgsql", "host": "remote"}]''', correct: true }
      - { value: '''connections: { mysql: { driver: "mysql", host: "localhost" }, pgsql: { driver: "pgsql", host: "remote" } }''', correct: false }
      - { value: '''connections: "mysql"''', correct: false }
      - { value: '''connections: { driver: "mysql", host: "localhost" }''', correct: false }
    help: |
      The `arrayPrototype()` method defines a numerically indexed list of arrays, where each inner array conforms to the specified children (`driver`, `host`).
      https://symfony.com/doc/current/components/config/definition.html#prototyped-array-nodes

  -
    question: >
      What is the primary role of a "Bridge" in the Symfony ecosystem?
    answers:
      - { value: "To provide integration between a Symfony Component and a third-party library.", correct: true }
      - { value: "To create a connection between two different Symfony Components.", correct: false }
      - { value: "To act as a gateway for external API calls within a Symfony application.", correct: false }
      - { value: "To manage database migrations and schema updates.", correct: false }
    help: |
      Symfony "Bridges" are small libraries that integrate Symfony Components with popular third-party libraries. For example, MonologBridge integrates the Monolog library with Symfony's logging system.
      https://symfony.com/doc/current/components/index.html (Conceptual understanding of bridges)

  -
    question: >
      Which directory in a standard Symfony 7 application is typically used to store custom PHP classes, such as services, controllers, and entities?
    answers:
      - { value: "`src/`", correct: true }
      - { value: "`var/`", correct: false }
      - { value: "`public/`", correct: false }
      - { value: "`bin/`", correct: false }
    help: |
      The `src/` directory is where your application's PHP source code resides.
      https://symfony.com/doc/current/quick_tour/the_architecture.html

  -
    question: |
      Consider the following Symfony controller:

      ```php
      // src/Controller/HelloController.php
      namespace App\Controller;

      use Symfony\Component\HttpFoundation\Response;
      use Symfony\Component\Routing\Attribute\Route;

      #[Route('/hello/{name}', name: 'app_hello')]
      class HelloController
      {
          public function __invoke(string $name = 'World'): Response
          {
              return new Response(sprintf('Hello %s!', $name));
          }
      }
      ```

      What is this type of controller called, and why is it used?
    answers:
      - { value: "An invokable controller, used for single-action controllers following the Action-Domain-Responder (ADR) pattern.", correct: true }
      - { value: "A service controller, primarily used for injecting multiple services via method arguments.", correct: false }
      - { value: "A static controller, which does not require instantiation.", correct: false }
      - { value: "A deprecated controller type, no longer recommended in Symfony 7.", correct: false }
    help: |
      Controllers with an `__invoke()` method are known as invokable controllers. They are often used for single-action controllers, aligning with patterns like ADR.
      https://symfony.com/doc/current/controller/service.html#invokable-controllers

  -
    question: >
      In a Symfony application designed for multiple distinct applications (e.g., 'admin' and 'api') sharing some core bundles and configurations, which of the following is a recommended approach for organizing the project structure?
    answers:
      - { value: "Using multiple kernel classes, each with its own `apps/{app_id}/config` and `src/` directories.", correct: true }
      - { value: "Placing all application code and configuration within a single `src/` and `config/` directory, using conditional logic to differentiate behavior.", correct: false }
      - { value: "Creating separate Composer projects for each application, with no shared code.", correct: false }
      - { value: "Relying solely on environment variables to switch between application contexts.", correct: false }
    help: |
      Symfony supports multi-application architectures by allowing you to define multiple kernels, each with its own configuration and source code directories, often organized under an `apps/` folder.
      https://symfony.com/doc/current/configuration/multiple_kernels.html

  -
    question: >
      What is the correct order of events in the Symfony request handling lifecycle, starting from the initial request?
    answers:
      - { value: "Request -> Routing -> Controller -> Response", correct: true }
      - { value: "Controller -> Request -> Routing -> Response", correct: false }
      - { value: "Routing -> Request -> Response -> Controller", correct: false }
      - { value: "Response -> Controller -> Routing -> Request", correct: false }
    help: |
      The basic lifecycle involves the request being received, routed to a controller, the controller generating a response, and the response being sent back.
      https://symfony.com/doc/current/components/http_kernel.html (Conceptual understanding of the flow)

  -
    question: >
      What is the primary responsibility of the `HttpKernel` component in a Symfony application?
    answers:
      - { value: "To convert a `Request` into a `Response` by orchestrating various sub-systems like routing, controllers, and event listeners.", correct: true }
      - { value: "To manage the application's database connections and ORM.", correct: false }
      - { value: "To handle asset versioning and URL generation for static files.", correct: false }
      - { value: "To provide a templating engine for rendering HTML views.", correct: false }
    help: |
      The HttpKernel component is the core of a Symfony application, taking a `Request` object and returning a `Response` object. It dispatches events and coordinates other components.
      https://symfony.com/doc/current/components/http_kernel.html

  -
    question: >
      How does Symfony typically handle exceptions that occur during the request-response lifecycle?
    answers:
      - { value: "By dispatching a `kernel.exception` event, allowing listeners to convert the exception into a `Response`.", correct: true }
      - { value: "By immediately terminating the application with a fatal error.", correct: false }
      - { value: "By logging the exception and redirecting to the homepage.", correct: false }
      - { value: "By displaying the raw exception stack trace directly to the user in all environments.", correct: false }
    help: |
      When an exception is thrown, the HttpKernel dispatches the `kernel.exception` event, allowing listeners (like the default `ErrorController`) to handle it and generate an appropriate response.
      https://symfony.com/doc/current/controller/error_pages.html

  -
    question: >
      Which kernel event is dispatched immediately before the controller is executed, allowing for modifications to the controller or its arguments?
    answers:
      - { value: "`kernel.controller`", correct: true }
      - { value: "`kernel.request`", correct: false }
      - { value: "`kernel.response`", correct: false }
      - { value: "`kernel.view`", correct: false }
    help: |
      The `kernel.controller` event is dispatched after the controller has been resolved but before it is executed.
      https://symfony.com/doc/current/reference/events.html#kernel-controller

  -
    question: |
      Which of the following is considered a Symfony best practice for injecting dependencies into a service or controller?
    answers:
      - { value: "Using constructor injection with type-hinting for autowiring.", correct: true }
      - { value: "Using the `new` keyword directly inside the service to instantiate its dependencies.", correct: false }
      - { value: "Accessing the service container directly via `->get('service_id')` in controllers.", correct: false }
      - { value: "Relying on global variables to store and retrieve service instances.", correct: false }
    help: |
      Constructor injection with type-hinting is the recommended way to inject dependencies, leveraging Symfony's autowiring capabilities.
      https://symfony.com/doc/current/service_container/autowiring.html

  -
    question: |
      To change the Symfony application environment from `dev` to `prod`, which environment variable should be modified, and where is it typically configured?
    answers:
      - { value: "APP_ENV in the `.env` file.", correct: true }
      - { value: "SYMFONY_ENV in `php.ini`.", correct: false }
      - { value: "ENVIRONMENT in `composer.json`.", correct: false }
      - { value: "DEBUG_MODE in `config/services.yaml`.", correct: false }
    help: |
      The `APP_ENV` environment variable, typically defined in the `.env` file, controls the application's environment.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#change-symfony-application-environment-app-env

  -
    question: >
      What is the typical release cycle for a Symfony Long Term Support (LTS) version?
    answers:
      - { value: "A new LTS version is released every two years and supported for three years for bugs and four years for security issues.", correct: true }
      - { value: "A new LTS version is released annually and supported for one year.", correct: false }
      - { value: "LTS versions are released quarterly and supported for six months.", correct: false }
      - { value: "Symfony no longer offers LTS versions; all releases have short support cycles.", correct: false }
    help: |
      Symfony LTS versions are released every two years and offer extended support periods.
      https://symfony.com/releases

  -
    question: >
      What does Symfony's Backward Compatibility Promise guarantee?
    answers:
      - { value: "That minor versions (e.g., 7.0 to 7.1) will not introduce breaking changes, and major versions (e.g., 6.x to 7.x) will clearly document them.", correct: true }
      - { value: "That all code written for Symfony 2 will run without modification on Symfony 7.", correct: false }
      - { value: "That no public API will ever change or be removed.", correct: false }
      - { value: "That all third-party bundles will remain compatible across all Symfony versions.", correct: false }
    help: |
      Symfony has a strong backward compatibility promise, ensuring that minor versions are backward compatible and breaking changes in major versions are well-documented.
      https://symfony.com/doc/current/contributing/code/bc.html

  -
    question: >
      What is the recommended best practice for dealing with deprecations in a Symfony application?
    answers:
      - { value: "Address deprecations as they appear, typically during minor version upgrades, to ensure a smooth transition to future major versions.", correct: true }
      - { value: "Ignore deprecation warnings until a major version upgrade, then fix them all at once.", correct: false }
      - { value: "Disable deprecation warnings in all environments to prevent clutter in logs.", correct: false }
      - { value: "Rewrite the entire application whenever a new major Symfony version is released.", correct: false }
    help: |
      It is best practice to address deprecations proactively to make future upgrades easier.
      https://symfony.com/doc/current/contributing/code/conventions.html#deprecations

  -
    question: >
      Which of the following is a valid method for "overloading" or customizing a bundle's resources (e.g., templates, configurations) in Symfony 7?
    answers:
      - { value: "Placing a file with the same path in your application's `templates/bundles/` directory (for templates) or `config/packages/` (for configuration).", correct: true }
      - { value: "Directly modifying the source code of the installed bundle in `vendor/`.", correct: false }
      - { value: "Using a Composer patch to apply changes to the bundle.", correct: false }
      - { value: "There is no official way to customize bundle resources; you must fork the bundle.", correct: false }
    help: |
      Symfony allows you to override bundle resources (like templates and configurations) by placing files in specific paths within your application's directories.
      https://symfony.com/doc/current/bundles/override.html

  -
    question: >
      Which of the following PHP Standard Recommendations (PSRs) is most directly related to the `LoggerInterface` used for logging in Symfony applications?
    answers:
      - { value: "PSR-3 (Logger Interface)", correct: true }
      - { value: "PSR-7 (HTTP Message Interfaces)", correct: false }
      - { value: "PSR-11 (Container Interface)", correct: false }
      - { value: "PSR-14 (Event Dispatcher)", correct: false }
    help: |
      Symfony's logging system, including `LoggerInterface`, adheres to PSR-3, which defines a common interface for logging libraries.
      https://symfony.com/doc/current/logging.html#autowiring-logger-channels

  -
    question: >
      According to Symfony's naming conventions, what is the recommended casing for class names?
    answers:
      - { value: "PascalCase (e.g., `MyService`, `DefaultController`)", correct: true }
      - { value: "camelCase (e.g., `myService`, `defaultController`)", correct: false }
      - { value: "snake_case (e.g., `my_service`, `default_controller`)", correct: false }
      - { value: "kebab-case (e.g., `my-service`, `default-controller`)", correct: false }
    help: |
      Symfony follows PSR-1 and PSR-4, which dictate PascalCase for class names.
      https://symfony.com/doc/current/contributing/code/conventions.html#naming-conventions

  -
    question: >
      What is a "recipe" in the context of Symfony Flex?
    answers:
      - { value: "A set of automated instructions (e.g., configuration files, environment variables) that Flex applies when a package is installed or removed.", correct: true }
      - { value: "A pre-built Symfony application template that can be deployed directly.", correct: false }
      - { value: "A specific version constraint for a Composer package.", correct: false }
      - { value: "A database migration script for a Symfony application.", correct: false }
    help: |
      A Flex recipe is a set of automated instructions that Flex applies to your project when you install or remove a Composer package.
      https://symfony.com/doc/current/setup/symfony_flex.html#what-is-symfony-flex

  -
    question: >
      Which of the following Symfony Components is explicitly designed to be used as a standalone library in any PHP project, even without the full Symfony Framework?
    answers:
      - { value: "HttpFoundation", correct: true }
      - { value: "Routing", correct: true }
      - { value: "Console", correct: true }
      - { value: "WebProfilerBundle", correct: false }
      - { value: "DebugBundle", correct: false }
    help: |
      Many Symfony components are designed for standalone use. HttpFoundation, Routing, and Console are prime examples. Bundles like WebProfilerBundle and DebugBundle are framework-specific.
      https://symfony.com/doc/current/components/index.html

  -
    question: |
      Consider the following PHP class and `PropertyAccessor` usage:

      ```php
      use Symfony\Component\PropertyAccess\PropertyAccess;

      class Person
      {
          private array $data = [];

          public function __get(string $name): mixed
          {
              return $this->data[$name] ?? null;
          }

          public function __isset(string $name): bool
          {
              return isset($this->data[$name]);
          }

          public function __set(string $name, mixed $value): void
          {
              $this->data[$name] = $value;
          }
      }

      $person = new Person();
      $propertyAccessor = PropertyAccess::createPropertyAccessor();
      $propertyAccessor->setValue($person, 'age', 30);
      $age = $propertyAccessor->getValue($person, 'age');
      ```

      What is the value of `$age` after execution, and which PHP magic methods are being leveraged by `PropertyAccessor`?
    answers:
      - { value: "30; `__get()` and `__set()`", correct: true }
      - { value: "null; `__call()` and `__invoke()`", correct: false }
      - { value: "An exception will be thrown because `age` is not a public property.", correct: false }
      - { value: "30; `__callStatic()` and `__debugInfo()`", correct: false }
    help: |
      The `PropertyAccessor` component can interact with PHP's magic methods like `__get()`, `__set()`, and `__isset()` to access dynamic properties.
      https://symfony.com/doc/current/components/property_access.html#magic-methods

  -
    question: >
      Which of the following Symfony PropertyInfo extractors relies on parsing PHPDoc annotations to retrieve property information?
    answers:
      - { value: "PhpDocExtractor", correct: true }
      - { value: "ReflectionExtractor", correct: false }
      - { value: "ConstructorExtractor", correct: false }
      - { value: "PhpStanExtractor", correct: false }
    help: |
      The `PhpDocExtractor` parses PHPDoc annotations to extract property types and descriptions.
      https://symfony.com/doc/current/components/property_info.html#using-phpdocextractor

  -
    question: >
      In the Symfony Messenger component, what is an "Envelope Stamp"?
    answers:
      - { value: "A piece of metadata attached to a message that can be read or modified by middleware or transports.", correct: true }
      - { value: "A unique identifier for a message within the message bus.", correct: false }
      - { value: "A cryptographic signature used to secure messages.", correct: false }
      - { value: "A mechanism for defining the routing of messages to specific handlers.", correct: false }
    help: |
      Envelope Stamps are pieces of information attached to your message, providing metadata for middleware or transport layers.
      https://symfony.com/doc/current/components/messenger.html#envelope-stamps

  -
    question: |
      Given the following configuration definition using Symfony's Config component:

      ```php
      use Symfony\Component\Config\Definition\Builder\TreeBuilder;
      use Symfony\Component\Config\Definition\ConfigurationInterface;

      class Configuration implements ConfigurationInterface
      {
          public function getConfigTreeBuilder(): TreeBuilder
          {
              $treeBuilder = new TreeBuilder('my_app');
              $rootNode = $treeBuilder->getRootNode();

              $rootNode
                  ->children()
                      ->arrayNode('drivers')
                          ->scalarPrototype()->end()
                      ->end()
                  ->end()
              ;

              return $treeBuilder;
          }
      }
      ```

      Which YAML configuration correctly defines the `drivers` array?
    answers:
      - { value: "drivers: [\"mysql\", \"sqlite\"]", correct: true }
      - { value: "drivers: { driver1: \"mysql\", driver2: \"sqlite\" }", correct: false }
      - { value: "drivers: \"mysql\"", correct: false }
      - { value: "drivers: { 0: \"mysql\", 1: \"sqlite\" }", correct: true }
    help: |
      `scalarPrototype()` defines a numerically indexed array where each element is a scalar value. Both `["mysql", "sqlite"]` and `{ 0: "mysql", 1: "sqlite" }` are valid YAML representations of such an array.
      https://symfony.com/doc/current/components/config/definition.html#prototyped-scalar-nodes

  -
    question: >
      Where should business logic and reusable code that is not directly related to HTTP requests (e.g., data manipulation, external API calls) typically be placed in a Symfony application?
    answers:
      - { value: "In dedicated service classes within the `src/` directory.", correct: true }
      - { value: "Directly inside controller methods.", correct: false }
      - { value: "In Twig templates.", correct: false }
      - { value: "In global functions defined in `public/index.php`.", correct: false }
    help: |
      Business logic and reusable code should be encapsulated in services, promoting separation of concerns and testability.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#create-a-custom-service-class-in-symfony

  -
    question: >
      How does Symfony primarily determine which controller and action to execute for an incoming HTTP request?
    answers:
      - { value: "Through the Routing component, which matches the request URL and method to a defined route.", correct: true }
      - { value: "By scanning all PHP files in the `src/Controller/` directory for a matching function name.", correct: false }
      - { value: "Based on the order of controller files in the filesystem.", correct: false }
      - { value: "By using a hardcoded switch statement in the `public/index.php` file.", correct: false }
    help: |
      The Routing component is responsible for mapping incoming HTTP requests to the appropriate controller and action based on defined routes.
      https://symfony.com/doc/current/routing.html

  -
    question: >
      When an exception occurs in a Symfony application, which component is primarily responsible for transforming that exception into a user-friendly HTTP response (e.g., a 404 or 500 error page)?
    answers:
      - { value: "The HttpKernel component, via the `kernel.exception` event and its listeners (like the default error controller).", correct: true }
      - { value: "The Debug component, which only displays the raw stack trace.", correct: false }
      - { value: "The Routing component, which redirects to a predefined error URL.", correct: false }
      - { value: "The Security component, which blocks the request entirely.", correct: false }
    help: |
      The HttpKernel, specifically through the `kernel.exception` event, manages the conversion of exceptions into HTTP responses.
      https://symfony.com/doc/current/controller/error_pages.html

  -
    question: >
      What is the key difference between an Event Listener and an Event Subscriber in Symfony's EventDispatcher component?
    answers:
      - { value: "An Event Listener defines a method to call for a specific event, while an Event Subscriber defines which events it listens to and their corresponding methods.", correct: true }
      - { value: "An Event Listener can only listen to one event, while an Event Subscriber can listen to multiple events.", correct: false }
      - { value: "Event Listeners are configured in YAML, while Event Subscribers are configured with PHP attributes.", correct: false }
      - { value: "Event Listeners are deprecated in Symfony 7, replaced by Event Subscribers.", correct: false }
    help: |
      Event Listeners are simple callables that respond to events. Event Subscribers implement `EventSubscriberInterface` and declare which events they subscribe to and the methods to call.
      https://symfony.com/doc/current/components/event_dispatcher.html#event-listeners-and-subscribers

  -
    question: >
      Which of the following configuration formats is officially supported and commonly used in Symfony 7 applications?
    answers:
      - { value: "YAML", correct: true }
      - { value: "XML", correct: true }
      - { value: "PHP", correct: true }
      - { value: "JSON", correct: false }
    help: |
      Symfony officially supports YAML, XML, and PHP for configuration. JSON is not a primary configuration format.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#configure-symfony-for-different-environments-yaml-xml-php

  -
    question: >
      What is the primary purpose of the `symfony.lock` file in a Symfony Flex project?
    answers:
      - { value: "To store the exact versions of Symfony recipes applied to the project, ensuring consistent application setup across environments.", correct: true }
      - { value: "To lock the versions of all Composer dependencies, similar to `composer.lock`.", correct: false }
      - { value: "To define the application's environment variables.", correct: false }
      - { value: "To store cached data for faster application boot-up.", correct: false }
    help: |
      The `symfony.lock` file tracks the exact versions of Symfony Flex recipes applied to your project, ensuring reproducibility of the application structure.
      https://symfony.com/doc/current/setup/symfony_flex.html#what-is-symfony-flex (Conceptual understanding of symfony.lock)

  -
    question: |
      Consider the following array:
      ```php
      $data = [
          'users' => [
              ['name' => 'Alice', 'email' => 'alice@example.com'],
              ['name' => 'Bob', 'email' => 'bob@example.com'],
          ],
      ];
      ```
      How would you use Symfony's `PropertyAccessor` to get the email of the second user?
    answers:
      - { value: "`$propertyAccessor->getValue($data, '[users][1][email]')`", correct: true }
      - { value: "`$propertyAccessor->getValue($data, 'users.1.email')`", correct: false }
      - { value: "`$propertyAccessor->getValue($data, 'users[1].email')`", correct: false }
      - { value: "`$propertyAccessor->getValue($data, 'users->1->email')`", correct: false }
    help: |
      For accessing elements in nested arrays, the `PropertyAccessor` uses bracket notation for array keys.
      https://symfony.com/doc/current/components/property_access.html#reading-values-from-arrays

  -
    question: |
      Which of the following statements about `Symfony\Component\PropertyInfo\Extractor\ConstructorExtractor` is true in Symfony 7.3+?
    answers:
      - { value: "It extracts property information by analyzing constructor arguments and can leverage `ReflectionExtractor` or `PhpStanExtractor`.", correct: true }
      - { value: "It is primarily used for extracting information from PHPDoc blocks.", correct: false }
      - { value: "It is a deprecated component in Symfony 7.", correct: false }
      - { value: "It only works for public properties defined directly on the class, not constructor-promoted properties.", correct: false }
    help: |
      `ConstructorExtractor` (introduced in Symfony 7.3) extracts property information from constructor arguments, often by delegating to other extractors like `ReflectionExtractor`.
      https://symfony.com/doc/current/components/property_info.html#constructorextractor

  -
    question: |
      In Symfony Messenger, when implementing a synchronous query bus, which trait is commonly used in a class that dispatches queries and expects a direct result?
    answers:
      - { value: "`Symfony\\Component\\Messenger\\HandleTrait`", correct: true }
      - { value: "`Symfony\\Component\\Messenger\\DispatchTrait`", correct: false }
      - { value: "`Symfony\\Component\\Messenger\\ReceiverTrait`", correct: false }
      - { value: "`Symfony\\Component\\Messenger\\SenderTrait`", correct: false }
    help: |
      The `HandleTrait` provides a `handle()` method that allows for synchronous message handling, suitable for query buses where an immediate result is expected.
      https://symfony.com/doc/current/messenger.html#synchronous-queries

  -
    question: |
      To create a custom Twig filter named `greet` in Symfony 7, which of the following approaches is recommended for autoconfiguration?
    answers:
      - { value: "Create a PHP class, implement `Twig\\Extension\\AbstractExtension`, and use the `#[AsTwigFilter('greet')]` attribute on the filter method.", correct: true }
      - { value: "Define the filter directly in `config/services.yaml` without a dedicated PHP class.", correct: false }
      - { value: "Place a Twig file named `greet.html.twig` in the `templates/` directory.", correct: false }
      - { value: "Manually register the filter in the `public/index.php` file.", correct: false }
    help: |
      Symfony's autoconfiguration, combined with the `#[AsTwigFilter]` attribute, is the modern and recommended way to register custom Twig filters.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#create-a-custom-twig-filter-with-autoconfiguration-in-symfony-php

  -
    question: >
      Which PHP Standard Recommendation (PSR) defines interfaces for HTTP messages, including `RequestInterface` and `ResponseInterface`, which Symfony's HttpFoundation component adheres to?
    answers:
      - { value: "PSR-7 (HTTP Message Interfaces)", correct: true }
      - { value: "PSR-17 (HTTP Factories)", correct: true }
      - { value: "PSR-15 (HTTP Handlers)", correct: false }
      - { value: "PSR-18 (HTTP Client)", correct: false }
    help: |
      Symfony's HttpFoundation component aligns with PSR-7 for HTTP message interfaces and PSR-17 for HTTP message factories.
      https://symfony.com/doc/current/components/http_foundation.html (Conceptual understanding of PSR adherence)

  -
    question: >
      When creating a custom event in Symfony, what is the recommended practice for defining the event name?
    answers:
      - { value: "Define a public `const` property named `NAME` (or similar) within the event class itself.", correct: true }
      - { value: "Hardcode the event name as a string directly in the `EventDispatcher::dispatch()` call.", correct: false }
      - { value: "Use a randomly generated string for each event dispatch.", correct: false }
      - { value: "Rely on Symfony's autoconfiguration to generate event names automatically.", correct: false }
    help: |
      It's a best practice to define the event name as a public constant within the event class to avoid typos and centralize its definition.
      https://symfony.com/doc/current/components/event_dispatcher.html#creating-and-dispatching-an-event

  -
    question: >
      What is the recommended approach for testing Symfony applications, particularly for functional and integration tests?
    answers:
      - { value: "Using PHPUnit with Symfony's `WebTestCase` or `KernelTestCase` to simulate HTTP requests and interact with the application.", correct: true }
      - { value: "Manually clicking through the application in a web browser for every change.", correct: false }
      - { value: "Only performing unit tests on individual classes, without testing the full application flow.", correct: false }
      - { value: "Relying solely on external end-to-end testing tools without any internal application tests.", correct: false }
    help: |
      Symfony provides `WebTestCase` and `KernelTestCase` classes to facilitate functional and integration testing with PHPUnit.
      https://symfony.com/doc/current/testing.html

  -
    question: >
      What is the typical maintenance period for a regular (non-LTS) Symfony release (e.g., Symfony 7.1)?
    answers:
      - { value: "8 months for bug fixes and 14 months for security fixes.", correct: true }
      - { value: "3 years for bug fixes and 4 years for security fixes.", correct: false }
      - { value: "6 months for all fixes, then end-of-life.", correct: false }
      - { value: "Until the next major version is released.", correct: false }
    help: |
      Regular Symfony releases typically receive bug fixes for 8 months and security fixes for 14 months.
      https://symfony.com/releases

  -
    question: >
      When a feature is marked as "deprecated" in Symfony, what does it typically imply regarding its future use?
    answers:
      - { value: "It will be removed in the next major version of Symfony, and users should migrate away from it.", correct: true }
      - { value: "It is an experimental feature that may or may not be included in future versions.", correct: false }
      - { value: "It is a bug that will be fixed in the next patch release.", correct: false }
      - { value: "It is a feature that has been replaced by a more performant alternative, but remains fully supported indefinitely.", correct: false }
    help: |
      Deprecations in Symfony signal that a feature or API will be removed in the next major version, giving users time to adapt.
      https://symfony.com/doc/current/contributing/code/conventions.html#deprecations

  -
    question: >
      How can you identify deprecation warnings in your Symfony 7 application during development?
    answers:
      - { value: "By checking the web debug toolbar, console output, and log files for deprecation notices.", correct: true }
      - { value: "By running `composer validate`.", correct: false }
      - { value: "By inspecting the `vendor/symfony/symfony/CHANGELOG.md` file.", correct: false }
      - { value: "Deprecations are only visible in production environments.", correct: false }
    help: |
      Deprecation warnings are visible in the web debug toolbar, console output, and logs in development environments.
      https://symfony.com/doc/current/components/debug/deprecations.html

  -
    question: >
      If you need to replace a service provided by a Symfony bundle with your own custom implementation, what is the recommended approach?
    answers:
      - { value: "Decorate the original service in your `services.yaml` file, injecting the original service into your decorator.", correct: true }
      - { value: "Delete the original service definition from the bundle's configuration files.", correct: false }
      - { value: "Copy the bundle's service class into your `src/` directory and modify it directly.", correct: false }
      - { value: "Use a compiler pass to remove the original service and define your new one.", correct: false }
    help: |
      Service decoration is the recommended way to replace or extend existing services without modifying the original bundle's code.
      https://symfony.com/doc/current/service_container/service_decoration.html

  -
    question: >
      Which PHP Standard Recommendation (PSR) defines a common interface for a service container, which Symfony's Dependency Injection component adheres to?
    answers:
      - { value: "PSR-11 (Container Interface)", correct: true }
      - { value: "PSR-1 (Basic Coding Standard)", correct: false }
      - { value: "PSR-4 (Autoloader)", correct: false }
      - { value: "PSR-6 (Caching Interface)", correct: false }
    help: |
      Symfony's Dependency Injection component implements PSR-11, providing a standardized way to access services from a container.
      https://symfony.com/doc/current/components/dependency_injection.html (Conceptual understanding of PSR adherence)

  -
    question: >
      According to Symfony's naming conventions, what is the recommended format for route names?
    answers:
      - { value: "snake_case (e.g., `app_product_show`, `blog_post_list`)", correct: true }
      - { value: "camelCase (e.g., `appProductShow`, `blogPostList`)", correct: false }
      - { value: "kebab-case (e.g., `app-product-show`, `blog-post-list`)", correct: false }
      - { value: "PascalCase (e.g., `AppProductShow`, `BlogPostList`)", correct: false }
    help: |
      While not strictly enforced by PHP, Symfony's common practice and examples often use snake_case for route names.
      https://symfony.com/doc/current/routing.html#route-names

  -
    question: >
      What is the key difference between `composer.lock` and `symfony.lock` in a Symfony Flex project?
    answers:
      - { value: "`composer.lock` tracks exact versions of all Composer dependencies, while `symfony.lock` tracks exact versions of Symfony Flex recipes.", correct: true }
      - { value: "`composer.lock` is used for development, and `symfony.lock` is used for production deployments.", correct: false }
      - { value: "They are identical files; `symfony.lock` is just an alias for `composer.lock`.", correct: false }
      - { value: "`symfony.lock` is manually maintained, while `composer.lock` is generated automatically.", correct: false }
    help: |
      `composer.lock` locks your Composer dependencies. `symfony.lock` locks the state of your Flex recipes, ensuring reproducibility of the application structure.
      https://symfony.com/doc/current/setup/symfony_flex.html#what-is-symfony-flex (Conceptual understanding of symfony.lock)

  -
    question: >
      When using `PropertyAccessor` in Symfony, what is the default behavior if you attempt to access a non-existent property path (e.g., `getValue($object, 'nonExistentProperty')`)?
    answers:
      - { value: "It throws a `Symfony\\Component\\PropertyAccess\\Exception\\NoSuchPropertyException`.", correct: true }
      - { value: "It returns `null`.", correct: false }
      - { value: "It automatically creates the missing property.", correct: false }
      - { value: "It logs a warning and continues execution.", correct: false }
    help: |
      By default, `PropertyAccessor` throws a `NoSuchPropertyException` for invalid property paths. This behavior can be modified using `disableExceptionOnInvalidPropertyPath()`.
      https://symfony.com/doc/current/components/property_access.html#disabling-exceptions-for-non-existing-property-paths

  -
    question: >
      What is the purpose of enabling `property_info.with_constructor_extractor` in Symfony 7.3+ configuration?
    answers:
      - { value: "It configures the `property_info` service to extract property information from constructor arguments.", correct: true }
      - { value: "It enables automatic dependency injection for constructor arguments.", correct: false }
      - { value: "It allows the `PropertyAccessor` to access private constructor properties.", correct: false }
      - { value: "It forces all services to use constructor injection.", correct: false }
    help: |
      The `property_info.with_constructor_extractor` option (introduced in Symfony 7.3) enables the `ConstructorExtractor` for the `property_info` service.
      https://symfony.com/doc/current/reference/configuration/framework.html#property-info-with-constructor-extractor

  -
    question: >
      In Symfony Messenger, what is the primary difference between handling a "Command" and handling a "Query"?
    answers:
      - { value: "Commands typically modify state and do not return a value, while Queries retrieve data and return a value.", correct: true }
      - { value: "Commands are always handled asynchronously, while Queries are always handled synchronously.", correct: false }
      - { value: "Commands are processed by Senders, while Queries are processed by Receivers.", correct: false }
      - { value: "Commands require explicit service definitions, while Queries are autowired.", correct: false }
    help: |
      This distinction aligns with the Command Query Responsibility Segregation (CQRS) pattern, where commands change state and queries retrieve state.
      https://symfony.com/doc/current/messenger.html#synchronous-queries (Conceptual understanding of CQRS in Messenger)

  -
    question: |
      Consider the following Twig extension:

      ```php
      // src/Twig/GreetingExtension.php
      namespace App\Twig;

      use App\GreetingGenerator;
      use Twig\Extension\AbstractExtension;
      use Twig\TwigFilter;
      use Twig\Attribute\AsTwigFilter;

      class GreetingExtension extends AbstractExtension
      {
          public function __construct(
              private GreetingGenerator $greetingGenerator,
          ) {
          }

          #[AsTwigFilter('greet')]
          public function greetUser(string $name): string
          {
              $greeting =  $this->greetingGenerator->getRandomGreeting();
              return "$greeting $name!";
          }
      }
      ```
      And the Twig template:
      ```twig
      {# templates/default/index.html.twig #}
      <h1>{{ user_name|greet }}</h1>
      ```
      If `user_name` is "Alice", what is a possible output in the rendered HTML?
    answers:
      - { value: "<h1>Yo Alice!</h1>", correct: true }
      - { value: "<h1>Alice</h1>", correct: false }
      - { value: "<h1>{{ user_name|greet }}</h1>", correct: false }
      - { value: "A Twig error, as the filter is not correctly registered.", correct: false }
    help: |
      The `#[AsTwigFilter]` attribute registers the `greet` filter. The `GreetingGenerator` provides a random greeting, which is then combined with the `user_name`.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#create-a-custom-twig-filter-with-autoconfiguration-in-symfony-php

  -
    question: >
      What is the primary role of the `Kernel` class (e.g., `src/Kernel.php`) in a Symfony application?
    answers:
      - { value: "It is the central entry point that bootstraps the application, registers bundles, and configures the container and routes.", correct: true }
      - { value: "It handles all HTTP requests and responses directly.", correct: false }
      - { value: "It defines the application's database schema.", correct: false }
      - { value: "It contains all the application's business logic.", correct: false }
    help: |
      The `Kernel` class is the heart of a Symfony application, responsible for loading bundles, configuring the environment, and building the service container.
      https://symfony.com/doc/current/components/http_kernel.html#the-kernel-class

  -
    question: >
      Which of the following is a benefit of using Symfony's Dependency Injection Container?
    answers:
      - { value: "It promotes loose coupling between components by injecting dependencies rather than hardcoding them.", correct: true }
      - { value: "It eliminates the need for Composer to manage dependencies.", correct: false }
      - { value: "It automatically generates all necessary database tables.", correct: false }
      - { value: "It provides a built-in templating engine for front-end development.", correct: false }
    help: |
      The Dependency Injection Container is central to Symfony's architecture, promoting loose coupling and testability by managing service instantiation and injection.
      https://symfony.com/doc/current/components/dependency_injection.html

  -
    question: >
      What is the purpose of the `config/bundles.php` file in a Symfony 7 application?
    answers:
      - { value: "It defines which Symfony bundles are enabled for each environment (e.g., `dev`, `prod`).", correct: true }
      - { value: "It contains the application's database connection details.", correct: false }
      - { value: "It lists all Composer packages installed in the project.", correct: false }
      - { value: "It defines the application's routes.", correct: false }
    help: |
      `config/bundles.php` is where you register and enable the bundles used in your Symfony application, often conditionally for different environments.
      https://symfony.com/doc/current/quick_tour/the_architecture.html

  -
    question: >
      Which of the following is a core principle of Symfony's "Convention over Configuration" approach?
    answers:
      - { value: "Providing sensible defaults and standard directory structures to reduce the amount of explicit configuration needed.", correct: true }
      - { value: "Requiring developers to explicitly configure every aspect of the application.", correct: false }
      - { value: "Prioritizing performance over ease of development.", correct: false }
      - { value: "Discouraging the use of third-party libraries.", correct: false }
    help: |
      "Convention over Configuration" means Symfony provides smart defaults and conventions, reducing the need for verbose configuration files.
      https://symfony.com/doc/current/introduction/from_flat_php_to_symfony.html (Conceptual understanding)

  -
    question: >
      In Symfony's EventDispatcher component, what is the purpose of an event's "priority"?
    answers:
      - { value: "To determine the order in which listeners for the same event are executed (higher priority runs first).", correct: true }
      - { value: "To indicate the severity level of the event (e.g., critical, warning).", correct: false }
      - { value: "To specify how many times an event can be dispatched.", correct: false }
      - { value: "To define the event's unique identifier.", correct: false }
    help: |
      Priorities allow you to control the execution order of multiple listeners attached to the same event.
      https://symfony.com/doc/current/components/event_dispatcher.html#event-priorities

  -
    question: >
      What is the primary advantage of using environment variables (e.g., `APP_ENV`, `DATABASE_URL`) for configuration in Symfony?
    answers:
      - { value: "They allow for easy switching of application settings between different deployment environments without changing code.", correct: true }
      - { value: "They are automatically encrypted, providing strong security for sensitive data.", correct: false }
      - { value: "They improve application performance by caching configuration values.", correct: false }
      - { value: "They are the only way to configure Symfony applications.", correct: false }
    help: |
      Environment variables provide a flexible and secure way to manage configuration that varies between environments.
      https://symfony.com/doc/current/configuration.html#environment-variables

  -
    question: >
      Which of the following describes Symfony's approach to backward compatibility for minor releases (e.g., 7.0 to 7.1)?
    answers:
      - { value: "Minor releases are strictly backward compatible, meaning existing code should continue to work without modification.", correct: true }
      - { value: "Minor releases may introduce breaking changes, but they are always documented.", correct: false }
      - { value: "Minor releases are essentially new major versions with a different naming scheme.", correct: false }
      - { value: "Backward compatibility is not a concern for minor releases.", correct: false }
    help: |
      Symfony's backward compatibility promise ensures that minor releases are fully backward compatible.
      https://symfony.com/doc/current/contributing/code/bc.html

  -
    question: >
      What is the purpose of the `composer.json` file in a Symfony Flex project?
    answers:
      - { value: "It declares the project's dependencies and metadata, and is used by Composer to manage packages.", correct: true }
      - { value: "It defines the application's routes and controllers.", correct: false }
      - { value: "It stores cached data for faster application loading.", correct: false }
      - { value: "It is a configuration file for the web server.", correct: false }
    help: |
      `composer.json` is the main configuration file for Composer, defining project dependencies and other metadata.
      https://getcomposer.org/doc/01-basic-usage.md#composer-json-project-setup

  -
    question: >
      Which of the following is a valid method for accessing a service from the Dependency Injection Container in a Symfony controller (though generally discouraged in favor of autowiring)?
    answers:
      - { value: "Extending `AbstractController` and using `$this->container->get('service_id')` or `$this->get('service_id')`.", correct: true }
      - { value: "Using a global `ServiceLocator` instance.", correct: false }
      - { value: "Directly instantiating the service class with `new ServiceClass()`.", correct: false }
      - { value: "Accessing services via `$_GLOBALS['services']['service_id']`.", correct: false }
    help: |
      While autowiring is preferred, `AbstractController` provides methods like `get()` or direct container access for retrieving services.
      https://symfony.com/doc/current/controller/service.html#accessing-services

  -
    question: >
      What is the primary responsibility of a "Middleware" in the Symfony Messenger component?
    answers:
      - { value: "To intercept messages during dispatch, allowing for cross-cutting concerns like logging, validation, or transactions.", correct: true }
      - { value: "To convert messages between different formats.", correct: false }
      - { value: "To store messages persistently in a database.", correct: false }
      - { value: "To define the routing rules for messages.", correct: false }
    help: |
      Middleware can access and modify messages as they are dispatched through the message bus, handling concerns like logging or validation.
      https://symfony.com/doc/current/components/messenger.html#middleware

  -
    question: >
      What is the purpose of the `bin/console` executable in a Symfony application?
    answers:
      - { value: "It is the command-line entry point for running Symfony console commands.", correct: true }
      - { value: "It is a script for deploying the application to a production server.", correct: false }
      - { value: "It contains the application's web server configuration.", correct: false }
      - { value: "It is used to compile Twig templates.", correct: false }
    help: |
      `bin/console` is the main script for interacting with Symfony's Console component, allowing you to run various commands.
      https://symfony.com/doc/current/console.html

  -
    question: >
      Which of the following is a recommended naming convention for controller class names in Symfony?
    answers:
      - { value: "Ending with `Controller` (e.g., `ProductController`, `DefaultController`).", correct: true }
      - { value: "Starting with `Controller` (e.g., `ControllerProduct`, `ControllerDefault`).", correct: false }
      - { value: "Using only the resource name (e.g., `Product`, `Default`).", correct: false }
      - { value: "Using `_controller` suffix (e.g., `product_controller`, `default_controller`).", correct: false }
    help: |
      Symfony's conventions suggest suffixing controller class names with `Controller`.
      https://symfony.com/doc/current/controller.html#controller-naming-conventions

  -
    question: >
      What is the primary responsibility of the `Response` object in Symfony's request-response flow?
    answers:
      - { value: "To encapsulate all the data and HTTP headers that will be sent back to the client.", correct: true }
      - { value: "To parse incoming HTTP requests.", correct: false }
      - { value: "To execute database queries.", correct: false }
      - { value: "To manage user sessions.", correct: false }
    help: |
      The `Response` object represents the HTTP response that will be sent back to the client, containing content, headers, and status code.
      https://symfony.com/doc/current/components/http_foundation.html#response

  -
    question: >
      Which of the following is a key aspect of Symfony's backward compatibility promise regarding deprecations?
    answers:
      - { value: "Features are deprecated for at least one major version before being removed, providing a clear upgrade path.", correct: true }
      - { value: "Deprecated features are immediately removed upon release of a new minor version.", correct: false }
      - { value: "Deprecations are only announced in the documentation, not through code warnings.", correct: false }
      - { value: "Symfony guarantees that no feature will ever be deprecated.", correct: false }
    help: |
      Deprecations in Symfony signal that a feature or API will be removed in the next major version, giving users time to adapt.
      https://symfony.com/doc/current/contributing/code/bc.html#deprecations

  -
    question: >
      What is the purpose of the `composer install` command in a Symfony Flex project?
    answers:
      - { value: "To install all project dependencies based on the `composer.lock` file, and apply Symfony Flex recipes.", correct: true }
      - { value: "To update all project dependencies to their latest compatible versions.", correct: false }
      - { value: "To create a new Symfony project from scratch.", correct: false }
      - { value: "To run the application's test suite.", correct: false }
    help: |
      `composer install` installs dependencies from `composer.lock` and triggers Flex recipes for new packages.
      https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies

  -
    question: >
      Which of the following is a key benefit of using Symfony's `PropertyInfo` component?
    answers:
      - { value: "It provides a unified API to extract various types of information (e.g., types, descriptions, writability) about class properties from different sources (e.g., Reflection, PHPDoc).", correct: true }
      - { value: "It automatically validates data against property types.", correct: false }
      - { value: "It generates getter and setter methods for properties.", correct: false }
      - { value: "It encrypts property values for security.", correct: false }
    help: |
      The `PropertyInfo` component offers a flexible way to retrieve metadata about class properties using various extractors.
      https://symfony.com/doc/current/components/property_info.html

  -
    question: >
      What is the purpose of the `#[AsCommand]` attribute in a Symfony 7 console command?
    answers:
      - { value: "To configure the command's name, description, and other options directly on the command class.", correct: true }
      - { value: "To mark the command as a service for autowiring.", correct: false }
      - { value: "To define the command's arguments and options in a separate configuration file.", correct: false }
      - { value: "To specify the PHP version required to run the command.", correct: false }
    help: |
      The `#[AsCommand]` attribute is the modern way to configure console commands in Symfony, replacing static properties.
      https://symfony.com/doc/current/console.html#configuring-the-command

  -
    question: >
      What is the primary role of the `Request` object in Symfony's request-response flow?
    answers:
      - { value: "To encapsulate all incoming HTTP request data, including headers, query parameters, and body content.", correct: true }
      - { value: "To generate HTML responses.", correct: false }
      - { value: "To interact with the database.", correct: false }
      - { value: "To manage application-level events.", correct: false }
    help: |
      The `Request` object represents an HTTP request, providing an object-oriented way to access all its components.
      https://symfony.com/doc/current/components/http_foundation.html#request

  -
    question: >
      Which of the following is a recommended best practice for organizing controllers in a Symfony application?
    answers:
      - { value: "Placing them in the `src/Controller/` directory, often grouped by domain or feature.", correct: true }
      - { value: "Storing all controllers in the root of the `src/` directory.", correct: false }
      - { value: "Embedding controller logic directly within Twig templates.", correct: false }
      - { value: "Using a single controller class for the entire application.", correct: false }
    help: |
      Controllers are typically organized within `src/Controller/` and can be further grouped into subdirectories.
      https://symfony.com/doc/current/controller.html#controller-organization

  -
    question: >
      What is the purpose of the `MicroKernelTrait::registerBundles()` method when building a custom kernel?
    answers:
      - { value: "It defines the list of bundles that should be registered with the kernel for the application.", correct: true }
      - { value: "It registers new services with the Dependency Injection Container.", correct: false }
      - { value: "It configures the application's routing.", correct: false }
      - { value: "It loads environment variables from the `.env` file.", correct: false }
    help: |
      The `registerBundles()` method in a custom kernel (often using `MicroKernelTrait`) is where you explicitly define which bundles your application will use.
      https://symfony.com/doc/current/configuration/micro_kernel_trait.html#registerbundles

  -
    question: >
      Which of the following is a benefit of using Symfony's EventDispatcher component for handling application events?
    answers:
      - { value: "It promotes a highly decoupled architecture by allowing components to interact without direct knowledge of each other.", correct: true }
      - { value: "It automatically generates database migrations.", correct: false }
      - { value: "It provides a built-in authentication system.", correct: false }
      - { value: "It simplifies the creation of web forms.", correct: false }
    help: |
      The EventDispatcher is a core component for building decoupled and extensible applications.
      https://symfony.com/doc/current/components/event_dispatcher.html

  -
    question: >
      What is the purpose of the `framework.yaml` configuration file in a Symfony 7 application?
    answers:
      - { value: "It configures the core FrameworkBundle, including settings for routing, sessions, assets, and more.", correct: true }
      - { value: "It defines all custom services for the application.", correct: false }
      - { value: "It lists all installed Composer packages.", correct: false }
      - { value: "It contains database connection details.", correct: false }
    help: |
      `framework.yaml` is the central configuration file for the FrameworkBundle, which provides the core features of Symfony.
      https://symfony.com/doc/current/reference/configuration/framework.html

  -
    question: >
      Which of the following PHP Standard Recommendations (PSRs) defines a common interface for event dispatchers, which Symfony's EventDispatcher component adheres to?
    answers:
      - { value: "PSR-14 (Event Dispatcher)", correct: true }
      - { value: "PSR-3 (Logger Interface)", correct: false }
      - { value: "PSR-7 (HTTP Message Interfaces)", correct: false }
      - { value: "PSR-11 (Container Interface)", correct: false }
    help: |
      Symfony's EventDispatcher component implements PSR-14, providing a standardized way to dispatch and listen for events.
      https://symfony.com/doc/current/components/event_dispatcher.html (Conceptual understanding of PSR adherence)

  -
    question: >
      What is the primary purpose of the `src/` directory in a standard Symfony 7 application?
    answers:
      - { value: "To contain all the application's custom PHP code, including controllers, services, entities, and commands.", correct: true }
      - { value: "To store public web assets like CSS and JavaScript files.", correct: false }
      - { value: "To store cached data and log files.", correct: false }
      - { value: "To manage Composer dependencies.", correct: false }
    help: |
      The `src/` directory is where all your own PHP code for the application resides.
      https://symfony.com/doc/current/quick_tour/the_architecture.html

  -
    question: >
      What is the purpose of the `public/` directory in a Symfony 7 application?
    answers:
      - { value: "It is the web server's document root, containing publicly accessible files like `index.php` and static assets.", correct: true }
      - { value: "It stores all application configuration files.", correct: false }
      - { value: "It contains all the application's PHP source code.", correct: false }
      - { value: "It is used for storing temporary files during development.", correct: false }
    help: |
      The `public/` directory is the web server's document root, serving as the entry point for web requests.
      https://symfony.com/doc/current/quick_tour/the_architecture.html

  -
    question: >
      Which of the following is a recommended Symfony best practice for handling data persistence?
    answers:
      - { value: "Using an Object-Relational Mapper (ORM) like Doctrine, integrated via a Symfony bundle.", correct: true }
      - { value: "Writing raw SQL queries directly in controller methods.", correct: false }
      - { value: "Storing all data in session variables.", correct: false }
      - { value: "Using flat files for all data storage.", correct: false }
    help: |
      Symfony applications commonly use Doctrine ORM for database interactions, integrated through the DoctrineBundle.
      https://symfony.com/doc/current/doctrine.html

  -
    question: >
      What is the primary role of the `var/` directory in a Symfony application?
    answers:
      - { value: "To store generated files that are not part of the version control, such as cache, logs, and sessions.", correct: true }
      - { value: "To store all application source code.", correct: false }
      - { value: "To store Composer dependencies.", correct: false }
      - { value: "To store public web assets.", correct: false }
    help: |
      The `var/` directory contains volatile data like cache, logs, and sessions, which are typically excluded from version control.
      https://symfony.com/doc/current/quick_tour/the_architecture.html

  -
    question: >
      Which of the following is a common naming convention for service classes in Symfony?
    answers:
      - { value: "Placing them in `src/Service/` or a domain-specific subdirectory within `src/`.", correct: true }
      - { value: "Naming them with a `_service` suffix (e.g., `my_service.php`).", correct: false }
      - { value: "Storing them in the `public/` directory.", correct: false }
      - { value: "Defining them as anonymous classes directly in configuration files.", correct: false }
    help: |
      Service classes are typically placed in `src/Service/` or other logical subdirectories within `src/`.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#create-a-custom-service-class-in-symfony

  -
    question: >
      What is the purpose of the `config/` directory in a Symfony 7 application?
    answers:
      - { value: "To store all application configuration files (e.g., `services.yaml`, `routes.yaml`, `packages/`).", correct: true }
      - { value: "To store application source code.", correct: false }
      - { value: "To store temporary cache files.", correct: false }
      - { value: "To store public web assets.", correct: false }
    help: |
      The `config/` directory contains all the application's configuration files.
      https://symfony.com/doc/current/quick_tour/the_architecture.html

  -
    question: >
      What is the primary benefit of Symfony's "Bundle" concept?
    answers:
      - { value: "Bundles are self-contained units of functionality that can be reused across different Symfony applications.", correct: true }
      - { value: "Bundles automatically generate all necessary application code.", correct: false }
      - { value: "Bundles replace the need for Composer for dependency management.", correct: false }
      - { value: "Bundles provide a graphical user interface for application development.", correct: false }
    help: |
      Bundles are the fundamental building blocks of a Symfony application, providing modular and reusable features.
      https://symfony.com/doc/current/bundles.html

  -
    question: >
      Which of the following is a valid way to define services in Symfony 7?
    answers:
      - { value: "Using YAML configuration files (e.g., `config/services.yaml`).", correct: true }
      - { value: "Using XML configuration files (e.g., `config/services.xml`).", correct: true }
      - { value: "Using PHP configuration files (e.g., `config/services.php`).", correct: true }
      - { value: "Defining services as global variables in `public/index.php`.", correct: false }
    help: |
      Symfony supports YAML, XML, and PHP for defining services in the Dependency Injection Container.
      https://symfony.com/doc/current/service_container.html#defining-services

  -
    question: >
      What is the purpose of the `vendor/` directory in a Symfony application?
    answers:
      - { value: "It contains all third-party libraries and dependencies managed by Composer.", correct: true }
      - { value: "It stores the application's custom source code.", correct: false }
      - { value: "It stores cached data and log files.", correct: false }
      - { value: "It contains public web assets.", correct: false }
    help: |
      The `vendor/` directory is where Composer installs all your project's dependencies.
      https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies

  -
    question: >
      Which of the following is a recommended practice for handling exceptions in a production Symfony environment?
    answers:
      - { value: "Configuring a custom error page or a dedicated error controller to display user-friendly messages.", correct: true }
      - { value: "Displaying the full stack trace to end-users for debugging purposes.", correct: false }
      - { value: "Disabling error logging to improve performance.", correct: false }
      - { value: "Redirecting all errors to a generic homepage without any specific error message.", correct: false }
    help: |
      In production, exceptions should be handled gracefully by displaying custom error pages and logging the details.
      https://symfony.com/doc/current/controller/error_pages.html#customizing-error-pages

  -
    question: >
      What is the primary role of the `composer update` command in a Symfony Flex project?
    answers:
      - { value: "To update all project dependencies to their latest compatible versions according to `composer.json` and apply relevant Flex recipes.", correct: true }
      - { value: "To install dependencies for the first time based on `composer.lock`.", correct: false }
      - { value: "To remove all installed packages.", correct: false }
      - { value: "To validate the syntax of `composer.json`.", correct: false }
    help: |
      `composer update` updates dependencies and triggers Flex recipes for any changes.
      https://getcomposer.org/doc/01-basic-usage.md#updating-dependencies

  -
    question: >
      What is the purpose of the `assets` configuration section in `framework.yaml`?
    answers:
      - { value: "To configure how static assets (e.g., CSS, JavaScript, images) are handled, including base paths, versioning, and manifest files.", correct: true }
      - { value: "To define database connection details.", correct: false }
      - { value: "To configure the application's security settings.", correct: false }
      - { value: "To manage service definitions.", correct: false }
    help: |
      The `assets` configuration within `framework.yaml` controls various aspects of asset management in Symfony.
      https://symfony.com/doc/current/reference/configuration/framework.html#assets

  -
    question: >
      Which of the following is a benefit of using Symfony's `PropertyAccess` component?
    answers:
      - { value: "It provides a unified way to read and write values to properties of objects or elements of arrays, regardless of their visibility (public, private via getters/setters, or magic methods).", correct: true }
      - { value: "It automatically generates database entities from class definitions.", correct: false }
      - { value: "It encrypts sensitive data stored in object properties.", correct: false }
      - { value: "It validates data types of properties automatically.", correct: false }
    help: |
      The `PropertyAccess` component simplifies access to properties and array elements, abstracting away the underlying access mechanism.
      https://symfony.com/doc/current/components/property_access.html

  -
    question: >
      What is the primary purpose of the `bin/` directory in a Symfony application?
    answers:
      - { value: "To contain executable scripts, primarily the `console` command.", correct: true }
      - { value: "To store binary files for the web server.", correct: false }
      - { value: "To store compiled application code.", correct: false }
      - { value: "To store database migration scripts.", correct: false }
    help: |
      The `bin/` directory contains executable scripts, most notably `bin/console`.
      https://symfony.com/doc/current/quick_tour/the_architecture.html

  -
    question: >
      What is the primary purpose of the `templates/` directory in a Symfony application?
    answers:
      - { value: "To store Twig template files for rendering HTML responses.", correct: true }
      - { value: "To store PHP classes for services.", correct: false }
      - { value: "To store JavaScript and CSS assets.", correct: false }
      - { value: "To store database migration files.", correct: false }
    help: |
      The `templates/` directory is the default location for Twig template files.
      https://symfony.com/doc/current/templating.html

  -
    question: >
      In Symfony's release management, what is the significance of a "major" version release (e.g., from Symfony 6.x to 7.x)?
    answers:
      - { value: "It may introduce backward-incompatible changes, requiring migration efforts, but also brings significant new features and improvements.", correct: true }
      - { value: "It only contains bug fixes and security patches, with no new features.", correct: false }
      - { value: "It is a Long Term Support (LTS) release with extended maintenance.", correct: false }
      - { value: "It is a patch release that fixes critical bugs.", correct: false }
    help: |
      Major versions (e.g., Symfony 7) are allowed to introduce backward-incompatible changes, but these are always documented.
      https://symfony.com/releases

  -
    question: >
      Which of the following is a recommended practice for naming services in Symfony?
    answers:
      - { value: "Using descriptive names that reflect their purpose (e.g., `app.user_manager`, `app.email_sender`).", correct: true }
      - { value: "Using short, cryptic names to save typing.", correct: false }
      - { value: "Naming all services `service_1`, `service_2`, etc.", correct: false }
      - { value: "Using the fully qualified class name as the service ID for all services.", correct: false }
    help: |
      Clear and descriptive service IDs improve readability and maintainability.
      https://symfony.com/doc/current/service_container.html#referencing-services

  -
    question: >
      What is the purpose of the `autoload.php` file (or `autoload_runtime.php` in Symfony 6.x/7.x) in a Symfony application?
    answers:
      - { value: "It is generated by Composer and responsible for autoloading all PHP classes in the project.", correct: true }
      - { value: "It contains the application's main configuration.", correct: false }
      - { value: "It defines the application's routes.", correct: false }
      - { value: "It is a custom script for deploying the application.", correct: false }
    help: |
      Composer's autoloader (via `autoload.php` or `autoload_runtime.php`) ensures that PHP classes are loaded on demand.
      https://getcomposer.org/doc/01-basic-usage.md#autoloading

  -
    question: >
      Which of the following is a key benefit of Symfony's adherence to PSRs (PHP Standard Recommendations)?
    answers:
      - { value: "It ensures that Symfony components and the framework itself are interoperable with other PSR-compliant libraries and tools.", correct: true }
      - { value: "It guarantees that Symfony applications will run on any PHP version.", correct: false }
      - { value: "It eliminates the need for manual configuration in Symfony applications.", correct: false }
      - { value: "It provides a built-in ORM for database interactions.", correct: false }
    help: |
      PSRs promote interoperability by providing common interfaces and coding standards, making it easier to integrate different libraries.
      https://www.php-fig.org/psr/

  -
    question: >
      What is the primary role of the `EventDispatcher` component in Symfony's architecture?
    answers:
      - { value: "To allow different parts of the application to communicate in a decoupled way by dispatching and listening for events.", correct: true }
      - { value: "To manage the application's routing configuration.", correct: false }
      - { value: "To handle database interactions.", correct: false }
      - { value: "To generate HTML responses.", correct: false }
    help: |
      The EventDispatcher is a central hub for communication between decoupled components through events.
      https://symfony.com/doc/current/components/event_dispatcher.html

  -
    question: >
      What is the purpose of the `KernelEvents::EXCEPTION` event in Symfony?
    answers:
      - { value: "It is dispatched when an exception occurs during the request handling, allowing listeners to create a response from the exception.", correct: true }
      - { value: "It is dispatched when a new service is added to the container.", correct: false }
      - { value: "It is dispatched when a route is matched to a controller.", correct: false }
      - { value: "It is dispatched when the application is shutting down.", correct: false }
    help: |
      `KernelEvents::EXCEPTION` is a crucial event for handling errors and converting them into appropriate HTTP responses.
      https://symfony.com/doc/current/reference/events.html#kernel-exception

  -
    question: >
      Which of the following is a recommended best practice for organizing application code in Symfony?
    answers:
      - { value: "Grouping related classes by feature or domain within the `src/` directory (e.g., `src/User/`, `src/Product/`).", correct: true }
      - { value: "Placing all classes directly in the `src/` root.", correct: false }
      - { value: "Organizing classes strictly by type (e.g., all controllers in `src/Controller/`, all services in `src/Service/`).", correct: false }
      - { value: "Storing all code in a single PHP file.", correct: false }
    help