category: Symfony Architecture
questions:
  - question: What is the primary role of Symfony Flex in a Symfony 7 application?
    answers:
      - value: To manage application dependencies and automate common tasks like package
          installation and configuration.
        correct: true
      - value: To provide a graphical user interface for Symfony development.
        correct: false
      - value: To compile PHP code into machine-readable bytecode for performance
          optimization.
        correct: false
      - value: To replace Composer as the primary package manager for PHP projects.
        correct: false
    help: Symfony Flex is a Composer plugin that streamlines the installation and
      configuration of Symfony packages by providing recipes that automate
      common tasks.
  - question: Which of the following best describes the licensing model for Symfony
      7 components?
    answers:
      - value: MIT License
        correct: true
      - value: GPLv3 License
        correct: false
      - value: Apache 2.0 License
        correct: false
      - value: LGPLv2.1 License
        correct: false
    help: Symfony components are released under the MIT license, which is a
      permissive free software license.
  - question: Which Symfony component is responsible for handling HTTP requests and
      responses?
    answers:
      - value: HttpFoundation
        correct: true
      - value: Routing
        correct: false
      - value: DependencyInjection
        correct: false
      - value: EventDispatcher
        correct: false
    help: The HttpFoundation component provides an object-oriented layer for the
      HTTP specification, including Request and Response objects.
  - question: In Symfony 7, what is the purpose of a 'Bridge'?
    answers:
      - value: To integrate Symfony components with third-party libraries.
        correct: true
      - value: To provide a backward compatibility layer for deprecated features.
        correct: false
      - value: To define the application's routing configuration.
        correct: false
      - value: To manage database connections and ORM entities.
        correct: false
    help: Symfony Bridges are small packages that integrate Symfony components with
      popular third-party libraries, allowing them to work seamlessly together.
  - question: According to Symfony's official best practices, where should most of
      your application's custom PHP classes reside?
    answers:
      - value: "`src/` directory"
        correct: true
      - value: "`app/` directory"
        correct: false
      - value: "`bin/` directory"
        correct: false
      - value: "`var/` directory"
        correct: false
    help: The `src/` directory is where all your application's PHP classes,
      including controllers, services, entities, and commands, should be placed.
  - question: Which of the following correctly describes the flow of a typical HTTP
      request in a Symfony 7 application?
    answers:
      - value: Request -> Front Controller -> Kernel -> Event Listeners -> Controller ->
          Response
        correct: true
      - value: Request -> Controller -> Kernel -> Event Listeners -> Front Controller ->
          Response
        correct: false
      - value: Front Controller -> Request -> Event Listeners -> Kernel -> Controller ->
          Response
        correct: false
      - value: Kernel -> Request -> Front Controller -> Controller -> Event Listeners ->
          Response
        correct: false
    help: The request flow starts with the front controller, which delegates to the
      Kernel. The Kernel dispatches events, resolves the controller, executes
      it, and returns a Response.
  - question: How does Symfony 7 typically handle exceptions that occur during the
      request-response cycle?
    answers:
      - value: The HttpKernel component catches exceptions and converts them into
          appropriate HTTP responses (e.g., 404, 500).
        correct: true
      - value: All exceptions are logged and the application terminates immediately.
        correct: false
      - value: Exceptions are re-thrown to the web server, which then handles the error
          page.
        correct: false
      - value: A global `try-catch` block in `public/index.php` handles all exceptions.
        correct: false
    help: The HttpKernel component provides an exception listener that catches
      exceptions and transforms them into Response objects, often rendering
      error pages.
  - question: What is the role of the Event Dispatcher component in Symfony 7?
    answers:
      - value: It provides a centralized mechanism for components to communicate with
          each other by dispatching and listening for events.
        correct: true
      - value: It manages the application's routing configuration.
        correct: false
      - value: It handles the serialization and deserialization of data.
        correct: false
      - value: It is responsible for compiling Twig templates.
        correct: false
    help: The EventDispatcher component implements the Mediator design pattern,
      allowing decoupled components to interact through events.
  - question: Which of the following is an official Symfony 7 best practice
      regarding configuration?
    answers:
      - value: Use environment variables for sensitive data and environment-specific
          settings.
        correct: true
      - value: Hardcode all configuration values directly in PHP files.
        correct: false
      - value: Store all configuration in a single YAML file.
        correct: false
      - value: Avoid using configuration files and rely solely on autowiring.
        correct: false
    help: Symfony strongly recommends using environment variables (e.g., via `.env`
      files) for configuration that varies between environments or contains
      sensitive information.
  - question: What is Symfony's Backward Compatibility Promise (BCP) primarily
      concerned with?
    answers:
      - value: Ensuring that minor version updates do not break existing applications.
        correct: true
      - value: Guaranteeing that major version updates will always be fully compatible.
        correct: false
      - value: Promising that all deprecated features will be removed in the next minor
          release.
        correct: false
      - value: Providing a migration tool for automatic code upgrades between major
          versions.
        correct: false
    help: The BCP states that minor versions (e.g., 7.0 to 7.1) will not introduce
      backward incompatible changes, making upgrades smoother.
  - question: When a feature is deprecated in Symfony 7, what is the recommended
      practice for developers?
    answers:
      - value: Stop using the deprecated feature immediately and refactor your code.
        correct: false
      - value: Ignore deprecation notices as they do not affect functionality.
        correct: false
      - value: Continue using the deprecated feature until the next major Symfony
          release, then migrate.
        correct: true
      - value: Downgrade Symfony to a version where the feature is not deprecated.
        correct: false
    help: Deprecated features are typically removed in the *next major* Symfony
      version. Developers are encouraged to migrate away from them before the
      next major release.
  - question: Which of the following is NOT a core Symfony component?
    answers:
      - value: Doctrine ORM
        correct: true
      - value: Console
        correct: false
      - value: Yaml
        correct: false
      - value: Finder
        correct: false
    help: Doctrine ORM is a popular third-party library for database interaction,
      while Console, Yaml, and Finder are core Symfony components.
  - question: What is the purpose of the `MicroKernelTrait` in Symfony 7?
    answers:
      - value: To simplify the creation of small, self-contained Symfony applications or
          APIs.
        correct: true
      - value: To enable advanced caching mechanisms for improved performance.
        correct: false
      - value: To provide a command-line interface for managing the application.
        correct: false
      - value: To automatically generate database schemas from Doctrine entities.
        correct: false
    help: The `MicroKernelTrait` helps in building lightweight Symfony applications
      by providing a minimal kernel implementation.
  - question: |-
      Consider the following Symfony 7 configuration snippet:

      ```yaml
      # config/packages/framework.yaml
      framework:
          assets:
              base_path: '/images'
      ```

      What effect does this configuration have on asset URLs?
    answers:
      - value: It prepends `/images` to all asset URLs generated by the application.
        correct: true
      - value: It specifies the directory where compiled assets are stored.
        correct: false
      - value: It defines a new asset package named 'images'.
        correct: false
      - value: It enables image optimization for all assets.
        correct: false
    help: The `base_path` option in the `assets` configuration prepends the
      specified path to all asset URLs, useful for CDN integration or
      sub-directory deployments.
  - question: Which PSR (PHP Standard Recommendation) is most directly related to
      the Symfony HttpFoundation component?
    answers:
      - value: PSR-7 (HTTP Message Interfaces)
        correct: true
      - value: PSR-3 (Logger Interface)
        correct: false
      - value: PSR-4 (Autoloader)
        correct: false
      - value: PSR-11 (Container Interface)
        correct: false
    help: Symfony's HttpFoundation component provides its own Request and Response
      objects, but it heavily influenced and aligns with PSR-7, which defines
      common interfaces for HTTP messages.
  - question: What is the recommended naming convention for a service class in Symfony 7?
    answers:
      - value: PascalCase, typically ending with 'Service' or reflecting its purpose
          (e.g., `ProductManager`, `Mailer`).
        correct: true
      - value: snake_case, all lowercase with underscores.
        correct: false
      - value: camelCase, starting with a lowercase letter.
        correct: false
      - value: kebab-case, using hyphens.
        correct: false
    help: Symfony follows standard PHP naming conventions. Classes, including
      services, should be named in PascalCase.
  - question: When should you consider 'overloading' a Symfony Framework feature
      (e.g., replacing a default service)?
    answers:
      - value: When you need to modify or extend the behavior of a core Symfony service
          without altering its original code.
        correct: true
      - value: As a first resort for any customization.
        correct: false
      - value: Never, as it breaks Symfony's internal architecture.
        correct: false
      - value: Only when upgrading to a new major Symfony version.
        correct: false
    help: Service decoration or replacing services is a powerful feature for
      customizing Symfony's behavior without directly modifying vendor code,
      adhering to the Open/Closed Principle.
  - question: Which of the following commands would you use to list all autowirable
      services in your Symfony 7 application?
    answers:
      - value: "`php bin/console debug:autowiring`"
        correct: true
      - value: "`php bin/console list:services`"
        correct: false
      - value: "`php bin/console container:debug`"
        correct: false
      - value: "`php bin/console service:list`"
        correct: false
    help: The `debug:autowiring` command shows which interfaces and classes Symfony
      can automatically inject into your services and controllers.
  - question: >-
      Given the following PHP code for a custom service:


      ```php

      // src/GreetingGenerator.php

      namespace App;


      use Psr\Log\LoggerInterface;


      class GreetingGenerator

      {
          public function __construct(
              private LoggerInterface $logger,
          ) {
          }

          public function getRandomGreeting(): string
          {
              $greetings = ['Hey', 'Yo', 'Aloha'];
              $greeting = $greetings[array_rand($greetings)];

              $this->logger->info('Using the greeting: '.$greeting);

              return $greeting;
          }
      }

      ```


      How does Symfony 7 primarily inject the `LoggerInterface` into the
      `GreetingGenerator` service?
    answers:
      - value: Through autowiring, based on the type hint `LoggerInterface`.
        correct: true
      - value: By explicitly defining the `logger` argument in `services.yaml`.
        correct: false
      - value: By using a setter injection method.
        correct: false
      - value: It's automatically available as a global variable.
        correct: false
    help: Symfony's autowiring feature automatically resolves and injects
      dependencies based on type hints in constructor arguments, method
      arguments, or properties.
  - question: What is the purpose of the `APP_ENV` environment variable in a Symfony
      7 application?
    answers:
      - value: To define the current application environment (e.g., `dev`, `prod`,
          `test`).
        correct: true
      - value: To store the application's secret key for security.
        correct: false
      - value: To specify the root directory of the application.
        correct: false
      - value: To configure the database connection string.
        correct: false
    help: The `APP_ENV` variable determines the environment Symfony is running in,
      affecting configuration loading, debugging tools, and caching strategies.
  - question: Which of the following is a key benefit of using Symfony's
      component-based architecture?
    answers:
      - value: Reusability of individual components in other PHP projects.
        correct: true
      - value: Automatic generation of all application code.
        correct: false
      - value: Elimination of the need for Composer.
        correct: false
      - value: Enforcement of a single, rigid application structure.
        correct: false
    help: Symfony's components are decoupled and can be used independently in any
      PHP project, promoting reusability and flexibility.
  - question: What is the primary function of the Symfony Kernel?
    answers:
      - value: To handle the entire request lifecycle, from receiving a request to
          sending a response.
        correct: true
      - value: To manage database connections.
        correct: false
      - value: To render Twig templates.
        correct: false
      - value: To define application routes.
        correct: false
    help: The Kernel is the heart of a Symfony application, orchestrating the entire
      request handling process.
  - question: Which of the following is a valid way to define environment-specific
      configuration in Symfony 7?
    answers:
      - value: Using `when@prod:` blocks in YAML configuration files.
        correct: true
      - value: Creating separate `config_prod.yaml` and `config_dev.yaml` files.
        correct: false
      - value: Using PHP `if` statements directly in `services.yaml`.
        correct: false
      - value: Defining environment variables directly in the web server configuration.
        correct: true
    help: Symfony supports `when@env` blocks in configuration files (YAML, XML, PHP)
      for environment-specific settings. Environment variables are also a
      primary way to manage environment-specific configuration.
  - question: What is the purpose of the `vendor/` directory in a Symfony 7 project?
    answers:
      - value: It contains all third-party libraries and Symfony components installed
          via Composer.
        correct: true
      - value: It stores application logs and cache files.
        correct: false
      - value: It holds the application's public web assets.
        correct: false
      - value: It is where your custom application code resides.
        correct: false
    help: The `vendor/` directory is managed by Composer and contains all project
      dependencies, including Symfony's own components.
  - question: Which of the following is a PSR that Symfony components adhere to for
      logging?
    answers:
      - value: PSR-3 (Logger Interface)
        correct: true
      - value: PSR-1 (Basic Coding Standard)
        correct: false
      - value: PSR-6 (Caching Interface)
        correct: false
      - value: PSR-14 (Event Dispatcher)
        correct: false
    help: Symfony's logging system is built on top of the PSR-3 Logger Interface,
      allowing for interoperability with various logging libraries.
  - question: What is the significance of the `public/index.php` file in a Symfony 7
      application?
    answers:
      - value: It is the front controller that bootstraps the Symfony application and
          handles all incoming requests.
        correct: true
      - value: It contains the main routing configuration for the application.
        correct: false
      - value: It is where all application services are defined.
        correct: false
      - value: It is used only for running console commands.
        correct: false
    help: The `public/index.php` file is the single entry point for all web requests
      in a Symfony application, responsible for loading the autoloader and the
      Kernel.
  - question: According to Symfony's release management, how long is a Standard
      Release (SR) branch typically maintained with bug fixes?
    answers:
      - value: 8 months
        correct: true
      - value: 3 years
        correct: false
      - value: 1 year
        correct: false
      - value: 2 years
        correct: false
    help: Standard Releases (SR) receive bug fixes for 8 months and security fixes
      for 14 months. Long Term Support (LTS) releases have longer maintenance
      periods.
  - question: Which of the following is a common naming convention for controllers
      in Symfony 7?
    answers:
      - value: Ending the class name with `Controller` (e.g., `ProductController`).
        correct: true
      - value: Starting the class name with `Ctrl`.
        correct: false
      - value: Using `_controller` in the route definition.
        correct: false
      - value: All lowercase with underscores.
        correct: false
    help: The convention is to suffix controller class names with `Controller` for
      clarity and consistency.
  - question: What is the primary benefit of using Symfony Flex's 'recipes'?
    answers:
      - value: They automate the installation and configuration of packages, reducing
          manual setup.
        correct: true
      - value: They provide a visual interface for managing project dependencies.
        correct: false
      - value: They replace Composer for package management.
        correct: false
      - value: They generate all the necessary application logic automatically.
        correct: false
    help: Recipes are sets of automated instructions that Flex executes to integrate
      packages into a Symfony application, handling file creation,
      configuration, and more.
  - question: Which directory is typically used for storing application-specific
      configuration files in Symfony 7?
    answers:
      - value: "`config/`"
        correct: true
      - value: "`var/`"
        correct: false
      - value: "`src/`"
        correct: false
      - value: "`public/`"
        correct: false
    help: The `config/` directory contains all the application's configuration
      files, including services, routes, and packages.
  - question: In the context of Symfony's Event Dispatcher, what is the difference
      between an 'event' and a 'listener'?
    answers:
      - value: An event is an object that describes something that happened, while a
          listener is a PHP callable that reacts to a dispatched event.
        correct: true
      - value: An event is a method in a service, while a listener is a configuration
          entry.
        correct: false
      - value: An event is a database trigger, while a listener is a cron job.
        correct: false
      - value: There is no difference; the terms are interchangeable.
        correct: false
    help: Events are objects containing data about an occurrence, and listeners are
      functions or methods that execute when a specific event is dispatched.
  - question: Which of the following is a benefit of adhering to PSRs (PHP Standard
      Recommendations) in a Symfony application?
    answers:
      - value: Improved interoperability with other PHP libraries and frameworks.
        correct: true
      - value: Guaranteed performance improvements.
        correct: false
      - value: Automatic code generation.
        correct: false
      - value: Reduced memory consumption.
        correct: false
    help: PSRs define common interfaces and coding standards, fostering
      interoperability and making it easier to integrate different PHP
      components.
  - question: What is the purpose of the `var/` directory in a Symfony 7 project?
    answers:
      - value: To store temporary application files, such as cache, logs, and sessions.
        correct: true
      - value: To host public web assets like CSS and JavaScript.
        correct: false
      - value: To contain all source code for the application.
        correct: false
      - value: To define Composer dependencies.
        correct: false
    help: The `var/` directory is used for volatile data generated by the
      application during runtime, such as cache, logs, and sessions.
  - question: Which Symfony component provides tools for manipulating object
      properties and arrays through property paths (e.g.,
      `user.address.street`)?
    answers:
      - value: PropertyAccess
        correct: true
      - value: Serializer
        correct: false
      - value: Form
        correct: false
      - value: Validator
        correct: false
    help: The PropertyAccess component allows you to read from and write to
      properties of objects or elements of arrays using a simple string
      notation.
  - question: |-
      Consider the following code snippet using `PropertyAccessor`:

      ```php
      use Symfony\Component\PropertyAccess\PropertyAccess;

      class Person
      {
          public string $name;
      }

      $person = new Person();

      $propertyAccessor = PropertyAccess::createPropertyAccessorBuilder()
          ->disableExceptionOnInvalidPropertyPath()
          ->getPropertyAccessor();

      $value = $propertyAccessor->getValue($person, 'birthday');
      ```

      What will be the value of `$value` in this scenario?
    answers:
      - value: "`null`"
        correct: true
      - value: A `NoSuchPropertyException` will be thrown.
        correct: false
      - value: An empty string `''`.
        correct: false
      - value: The default value of the `birthday` property.
        correct: false
    help: The `disableExceptionOnInvalidPropertyPath()` method configures the
      `PropertyAccessor` to return `null` instead of throwing an exception when
      a property path does not exist.
  - question: What is the primary purpose of the `#[AsCommand]` attribute in a
      Symfony 7 console command?
    answers:
      - value: To define the command's name, description, and other options directly in
          the class.
        correct: true
      - value: To mark the command as a service for autowiring.
        correct: false
      - value: To specify the input arguments and options for the command.
        correct: false
      - value: To link the command to a specific routing path.
        correct: false
    help: The `#[AsCommand]` attribute, introduced in Symfony 6.2, simplifies
      command configuration by allowing metadata to be defined directly on the
      command class.
  - question: Which of the following best describes Symfony's approach to backward
      compatibility for major releases (e.g., Symfony 6 to Symfony 7)?
    answers:
      - value: Major releases may introduce backward incompatible changes, but migration
          paths and deprecation notices are provided.
        correct: true
      - value: Major releases are always fully backward compatible.
        correct: false
      - value: All deprecated features are immediately removed without warning.
        correct: false
      - value: Users are expected to rewrite their applications for each new major
          release.
        correct: false
    help: Major releases are allowed to introduce backward incompatible changes, but
      Symfony provides clear upgrade paths and deprecation warnings in previous
      minor versions to facilitate migration.
  - question: What is the role of the `src/Kernel.php` file in a standard Symfony 7
      application?
    answers:
      - value: It is the main application kernel, responsible for loading bundles,
          configuring the container, and defining routes.
        correct: true
      - value: It contains the main database connection settings.
        correct: false
      - value: It is a placeholder for custom user-defined services.
        correct: false
      - value: It defines the application's security firewall rules.
        correct: false
    help: The `Kernel.php` file is the central configuration point for a Symfony
      application, extending `BaseKernel` and implementing `MicroKernelTrait`.
  - question: Which of the following is an example of a Symfony 'Bridge'?
    answers:
      - value: TwigBridge (integrating Twig templating engine)
        correct: true
      - value: HttpFoundation (core HTTP abstraction)
        correct: false
      - value: Console (command-line tools)
        correct: false
      - value: DependencyInjection (service container)
        correct: false
    help: TwigBridge provides the necessary integration between the Twig templating
      engine and Symfony's framework.
  - question: What is the default behavior of Symfony's autowiring when a service
      has multiple constructor arguments of the same type?
    answers:
      - value: It will throw an error, requiring explicit configuration.
        correct: true
      - value: It will inject the first available service of that type.
        correct: false
      - value: It will inject an array of all services of that type.
        correct: false
      - value: It will attempt to guess the correct service based on variable names.
        correct: false
    help: Autowiring works best when each argument has a unique type. For multiple
      arguments of the same type, you need to explicitly configure them using
      aliases or `#[Autowire]` attributes.
  - question: Which of the following best describes the 'Framework Interoperability'
      aspect of Symfony?
    answers:
      - value: Symfony components can be used independently or integrated into other PHP
          frameworks.
        correct: true
      - value: Symfony applications can run on any operating system without
          modification.
        correct: false
      - value: Symfony provides built-in tools to convert code from other frameworks.
        correct: false
      - value: Symfony enforces a strict coding standard that is incompatible with other
          frameworks.
        correct: false
    help: Symfony's components are designed to be decoupled and reusable, allowing
      developers to pick and choose which parts they want to use, even outside a
      full Symfony application.
  - question: When defining a custom Twig filter in Symfony 7, what attribute can
      you use to automatically register it as a Twig extension?
    answers:
      - value: "`#[AsTwigFilter]`"
        correct: true
      - value: "`#[TwigFilter]`"
        correct: false
      - value: "`#[TwigExtension]`"
        correct: false
      - value: "`#[Filter]`"
        correct: false
    help: The `#[AsTwigFilter]` attribute, along with `#[AsTwigFunction]` and
      `#[AsTwigTest]`, simplifies the registration of custom Twig elements
      through autoconfiguration.
  - question: What is the purpose of the `composer.json` file in a Symfony 7 project?
    answers:
      - value: To declare the project's dependencies and metadata for Composer.
        correct: true
      - value: To store environment variables.
        correct: false
      - value: To define application routes.
        correct: false
      - value: To configure the web server.
        correct: false
    help: The `composer.json` file is the manifest for a Composer project, listing
      its dependencies, scripts, and other metadata.
  - question: Which of the following is a key responsibility of a `Middleware` in
      the Symfony Messenger component?
    answers:
      - value: Accessing the message and its envelope during dispatch.
        correct: true
      - value: Serializing and sending messages to a message broker.
        correct: false
      - value: Retrieving and deserializing messages from a receiver.
        correct: false
      - value: Implementing the core business logic for a message.
        correct: false
    help: Middleware in Messenger can inspect, modify, or even stop the dispatching
      of a message, allowing for cross-cutting concerns like logging,
      validation, or transactions.
  - question: What does the `#[Route]` attribute primarily define for a controller
      method in Symfony 7?
    answers:
      - value: The URL path, HTTP methods, and name for a specific route.
        correct: true
      - value: The services to be injected into the method.
        correct: false
      - value: The template file to be rendered by the method.
        correct: false
      - value: The security roles required to access the method.
        correct: false
    help: The `#[Route]` attribute is used to configure routing directly on
      controller methods, specifying the path, allowed HTTP methods, and a
      unique route name.
  - question: What is the purpose of the `PropertyInfo` component in Symfony 7?
    answers:
      - value: To extract metadata about class properties, such as types, descriptions,
          and accessors.
        correct: true
      - value: To validate data against a set of rules.
        correct: false
      - value: To convert objects to arrays and vice versa.
        correct: false
      - value: To manage database schema migrations.
        correct: false
    help: The PropertyInfo component provides a way to retrieve information about
      class properties, which is useful for other components like Serializer or
      Form.
  - question: When using the `PropertyInfo` component, which extractor would you
      typically use to get property type information from PHPDoc annotations?
    answers:
      - value: "`PhpDocExtractor`"
        correct: true
      - value: "`ReflectionExtractor`"
        correct: false
      - value: "`ConstructorExtractor`"
        correct: false
      - value: "`SerializerExtractor`"
        correct: false
    help: The `PhpDocExtractor` parses PHPDoc blocks to extract type and description
      information from properties and methods.
  - question: Which of the following is a valid way to define a prototyped array of
      scalar values in Symfony's configuration definition?
    answers:
      - value: "`->scalarPrototype()->end()`"
        correct: true
      - value: "`->arrayPrototype()->scalarNode()->end()`"
        correct: false
      - value: "`->prototype('scalar')->end()`"
        correct: false
      - value: "`->scalarNode()->prototype()->end()`"
        correct: false
    help: The `scalarPrototype()` method is used within an `arrayNode` to define
      that its children will be scalar values, allowing for a list of simple
      values.
  - question: What is the primary purpose of the `bin/console` executable in a
      Symfony 7 application?
    answers:
      - value: To execute command-line tasks, such as clearing the cache, generating
          entities, or running migrations.
        correct: true
      - value: To start the built-in web server for development.
        correct: false
      - value: To install new Composer packages.
        correct: false
      - value: To compile Twig templates.
        correct: false
    help: The `bin/console` script is the entry point for all Symfony console
      commands, providing a powerful interface for managing your application.
  - question: In a multi-application Symfony 7 setup using multiple kernels, what is
      a common approach for organizing application-specific configuration files?
    answers:
      - value: Placing them in subdirectories under `apps/` (e.g.,
          `apps/admin/config/`).
        correct: true
      - value: Storing all configuration in a single `config/` directory with complex
          `if` statements.
        correct: false
      - value: Using separate `.env` files for each application in the project root.
        correct: false
      - value: Hardcoding configuration directly into each kernel class.
        correct: false
    help: For multi-application setups, it's common to organize each application's
      specific configuration (bundles, routes, services) within its own
      dedicated directory, often under an `apps/` folder.
  - question: What is the purpose of the `HandleTrait` in the Symfony Messenger
      component?
    answers:
      - value: To allow synchronous handling of messages and retrieving their results
          directly.
        correct: true
      - value: To define a message handler for asynchronous processing.
        correct: false
      - value: To serialize messages before sending them over a transport.
        correct: false
      - value: To configure message routing to specific transports.
        correct: false
    help: The `HandleTrait` provides a convenient way to dispatch messages
      synchronously and immediately get their return value, often used for query
      buses in CQRS.
  - question: Which of the following is a common naming convention for Twig template
      files in Symfony 7?
    answers:
      - value: Using `snake_case` with a `.html.twig` extension (e.g.,
          `product_list.html.twig`).
        correct: true
      - value: Using `PascalCase` with a `.twig` extension.
        correct: false
      - value: Using `camelCase` with a `.php` extension.
        correct: false
      - value: All uppercase with no extension.
        correct: false
    help: The standard convention for Twig templates is `snake_case` for filenames
      and the `.html.twig` extension (or other format extensions like
      `.json.twig`).
  - question: What is the primary benefit of using Symfony's Dependency Injection
      Container?
    answers:
      - value: It manages the instantiation and wiring of services, promoting loose
          coupling and testability.
        correct: true
      - value: It automatically generates all application code.
        correct: false
      - value: It replaces the need for an autoloader.
        correct: false
      - value: It provides a graphical interface for application management.
        correct: false
    help: The Dependency Injection Container (DIC) is a central part of Symfony's
      architecture, responsible for creating and managing objects (services) and
      injecting their dependencies.
  - question: Which of the following is a core principle of Symfony's architecture
      regarding code organization?
    answers:
      - value: Separation of concerns, where different parts of the application handle
          distinct responsibilities.
        correct: true
      - value: Monolithic design, where all code resides in a single file.
        correct: false
      - value: Tight coupling between all components.
        correct: false
      - value: Reliance on global variables for data sharing.
        correct: false
    help: Symfony strongly advocates for separation of concerns, leading to a
      modular and maintainable codebase where each component has a specific
      responsibility.
  - question: What is the purpose of the `APP_SECRET` environment variable in a
      Symfony 7 application?
    answers:
      - value: It is a unique, random string used for security purposes, such as signing
          cookies and CSRF tokens.
        correct: true
      - value: It defines the database password.
        correct: false
      - value: It specifies the API key for external services.
        correct: false
      - value: It determines the application's environment.
        correct: false
    help: The `APP_SECRET` is a crucial security parameter used by Symfony for
      various cryptographic operations.
  - question: When configuring assets in Symfony 7, what is the effect of setting
      the `strict_mode` option to `true`?
    answers:
      - value: It asserts that all requested assets are present in the manifest file,
          helping detect typos or missing assets.
        correct: true
      - value: It enables strict type checking for asset paths.
        correct: false
      - value: It forces all asset URLs to use HTTPS.
        correct: false
      - value: It disables asset caching in the browser.
        correct: false
    help: The `strict_mode` option for assets helps in development by throwing an
      error if an asset requested via `asset()` is not found in the configured
      manifest.
  - question: Which of the following is a key aspect of Symfony's release management
      and roadmap schedule?
    answers:
      - value: Regular, predictable release cycles with clear maintenance periods for
          each version.
        correct: true
      - value: Releases are made on an ad-hoc basis without a fixed schedule.
        correct: false
      - value: Only Long Term Support (LTS) versions are released.
        correct: false
      - value: New major versions are released every month.
        correct: false
    help: Symfony follows a predictable release schedule with new minor versions
      every six months and LTS versions every two years, each with defined
      support periods.
  - question: What is an 'invokable controller' in Symfony 7?
    answers:
      - value: A controller class that implements the `__invoke()` magic method to
          handle requests.
        correct: true
      - value: A controller that can be called directly from the command line.
        correct: false
      - value: A controller that automatically renders a template without explicit
          action methods.
        correct: false
      - value: A controller that only handles GET requests.
        correct: false
    help: Invokable controllers are single-action controllers where the `__invoke()`
      method is executed when the route matches the class.
  - question: When working with Symfony's `PropertyAccess` component, how would you
      access the `firstName` of the first child in a `Person` object where
      `children` is an array of `Person` objects?
    answers:
      - value: "`$propertyAccessor->getValue($person, 'children[0].firstName');`"
        correct: true
      - value: "`$person->children[0]->firstName;`"
        correct: false
      - value: "`$propertyAccessor->getValue($person, 'children.0.firstName');`"
        correct: false
      - value: "`$propertyAccessor->getValue($person, 'children[firstName][0]');`"
        correct: false
    help: The `PropertyAccessor` uses dot notation for object properties and bracket
      notation for array keys, allowing for complex nested paths.
  - question: Which of the following is NOT a standard directory in a new Symfony 7
      project created with Symfony Flex?
    answers:
      - value: "`views/`"
        correct: true
      - value: "`src/`"
        correct: false
      - value: "`public/`"
        correct: false
      - value: "`bin/`"
        correct: false
    help: While templates are often in a `templates/` directory, `views/` is not a
      standard top-level directory created by Symfony Flex. `src/`, `public/`,
      and `bin/` are standard.
  - question: What is the primary role of the `EventSubscriberInterface` in Symfony 7?
    answers:
      - value: To define a class that listens to multiple events and registers itself
          with the Event Dispatcher.
        correct: true
      - value: To dispatch new events to the Event Dispatcher.
        correct: false
      - value: To define the structure of an event object.
        correct: false
      - value: To configure event listeners in `services.yaml`.
        correct: false
    help: Classes implementing `EventSubscriberInterface` can declare which events
      they listen to and which methods should be called for each event,
      simplifying event registration.
  - question: What is the purpose of the `autoload_runtime.php` file in a Symfony 7
      application?
    answers:
      - value: It is used by the Symfony Runtime component to bootstrap the application,
          especially for micro-applications or custom entry points.
        correct: true
      - value: It defines the autoloader for all Composer packages.
        correct: false
      - value: It contains runtime configuration for the PHP interpreter.
        correct: false
      - value: It is a deprecated file that should not be used.
        correct: false
    help: The `autoload_runtime.php` file is part of the Symfony Runtime component,
      providing a flexible way to bootstrap applications without relying on a
      specific global state.
  - question: Which of the following describes a 'Bundle' in Symfony 7?
    answers:
      - value: A structured set of files (PHP classes, configuration, templates) that
          implements a feature and can be reused across applications.
        correct: true
      - value: A single PHP class that handles all application logic.
        correct: false
      - value: A database migration script.
        correct: false
      - value: A JavaScript library for frontend development.
        correct: false
    help: Bundles are the fundamental building blocks of a Symfony application,
      encapsulating features and allowing for modularity and reusability.
  - question: What is the recommended approach for handling sensitive data (e.g.,
      API keys, database credentials) in Symfony 7?
    answers:
      - value: Using environment variables (e.g., in `.env` files) that are not
          committed to version control.
        correct: true
      - value: Hardcoding them directly in `services.yaml`.
        correct: false
      - value: Storing them in a public Git repository.
        correct: false
      - value: Encrypting them within the application code.
        correct: false
    help: Environment variables are the standard and secure way to manage sensitive
      and environment-specific configuration in Symfony.
  - question: Which Symfony component is responsible for providing a unified way to
      access and manipulate configuration values from various sources (YAML,
      XML, PHP)?
    answers:
      - value: Config
        correct: true
      - value: Yaml
        correct: false
      - value: DependencyInjection
        correct: false
      - value: FrameworkBundle
        correct: false
    help: The Config component provides tools for defining and processing
      configuration, including schema validation and merging from different
      formats.
  - question: What is the purpose of the `composer.lock` file in a Symfony 7 project?
    answers:
      - value: To record the exact versions of all installed dependencies, ensuring
          reproducible builds.
        correct: true
      - value: To prevent Composer from installing any new packages.
        correct: false
      - value: To store cached Composer data.
        correct: false
      - value: To define custom Composer commands.
        correct: false
    help: The `composer.lock` file locks the exact versions of all direct and
      indirect dependencies, ensuring that `composer install` always produces
      the same dependency tree.
  - question: Which of the following is a correct naming convention for a service ID
      in Symfony 7 when using autowiring?
    answers:
      - value: The fully qualified class name (FQCN) of the service.
        correct: true
      - value: A kebab-case string (e.g., `my-service`).
        correct: false
      - value: A snake_case string (e.g., `my_service`).
        correct: false
      - value: Any arbitrary string.
        correct: false
    help: When autowiring is enabled, Symfony automatically registers services using
      their FQCN as the service ID, simplifying configuration.
  - question: What is the role of the `public/` directory in a Symfony 7 application?
    answers:
      - value: It is the web root directory, containing publicly accessible files like
          `index.php`, CSS, JavaScript, and images.
        correct: true
      - value: It stores all application source code.
        correct: false
      - value: It holds private configuration files.
        correct: false
      - value: It is used for Composer dependencies.
        correct: false
    help: The `public/` directory is the only part of your application that should
      be directly accessible by the web server.
  - question: Which of the following is a key characteristic of Symfony's approach
      to backward compatibility?
    answers:
      - value: Features are deprecated in one minor release and removed in the next
          major release.
        correct: true
      - value: Features are removed without prior deprecation notices.
        correct: false
      - value: All features are guaranteed to be backward compatible indefinitely.
        correct: false
      - value: Backward compatibility only applies to patch releases.
        correct: false
    help: "Symfony follows a clear deprecation policy: features are marked as
      deprecated, providing a grace period for developers to adapt before they
      are removed in a subsequent major version."
  - question: What is the primary benefit of using PHP attributes for routing and
      other configurations in Symfony 7?
    answers:
      - value: It keeps related configuration directly with the code it configures,
          improving readability and maintainability.
        correct: true
      - value: It eliminates the need for any configuration files.
        correct: false
      - value: It automatically generates all necessary controller code.
        correct: false
      - value: It significantly reduces application startup time.
        correct: false
    help: PHP attributes (introduced in PHP 8 and widely adopted by Symfony) allow
      for declarative configuration directly within PHP code, co-locating
      configuration with its usage.
  - question: What is the purpose of the `framework.router.strict_requirements`
      configuration option in Symfony 7?
    answers:
      - value: To enforce strict requirements for route parameters, typically set to
          `null` in production for performance.
        correct: true
      - value: To enable strict type checking for all route parameters.
        correct: false
      - value: To disable all route parameter validation.
        correct: false
      - value: To ensure that all routes have explicit requirements defined.
        correct: false
    help: When `strict_requirements` is enabled (e.g., in development), Symfony
      checks if route parameters match their requirements. Setting it to `null`
      (or `false`) in production can slightly improve performance by skipping
      these checks.
  - question: Which of the following is a common naming convention for a repository
      class in a Symfony 7 application using Doctrine?
    answers:
      - value: Ending the class name with `Repository` (e.g., `ProductRepository`).
        correct: true
      - value: Starting the class name with `Repo`.
        correct: false
      - value: Using `_repo` in the service definition.
        correct: false
      - value: All uppercase with no suffix.
        correct: false
    help: The convention for Doctrine repositories is to suffix the class name with
      `Repository`.
  - question: What is the main advantage of using Symfony's `PropertyAccessor` over
      direct property access (e.g., `$object->property`)?
    answers:
      - value: It provides a unified way to access properties regardless of their
          visibility (public, private via getters/setters, magic methods) and
          supports nested paths.
        correct: true
      - value: It is significantly faster than direct property access.
        correct: false
      - value: It automatically validates property values.
        correct: false
      - value: It eliminates the need for property type declarations.
        correct: false
    help: The `PropertyAccessor` abstracts away the complexities of property access,
      handling public properties, private properties with getters/setters,
      `__call`, `__get`, and nested structures.
  - question: Which of the following is a standard PSR that Symfony components
      adhere to for autoloading classes?
    answers:
      - value: PSR-4 (Autoloader)
        correct: true
      - value: PSR-1 (Basic Coding Standard)
        correct: false
      - value: PSR-2 (Coding Style Guide)
        correct: false
      - value: PSR-17 (HTTP Factories)
        correct: false
    help: Symfony uses Composer's autoloader, which is based on PSR-4, for
      autoloading its components and your application's classes.
  - question: What is the purpose of an 'Envelope' in the Symfony Messenger component?
    answers:
      - value: It wraps a message and allows adding 'stamps' (metadata) for processing
          by middleware or transports.
        correct: true
      - value: It defines the transport mechanism for a message.
        correct: false
      - value: It is the core message object itself.
        correct: false
      - value: It handles the serialization and deserialization of messages.
        correct: false
    help: The `Envelope` is a Messenger-specific concept that allows attaching
      additional information (stamps) to a message without modifying the message
      object itself.
  - question: Which of the following is a key benefit of Symfony's Event Dispatcher
      component for application architecture?
    answers:
      - value: It promotes loose coupling between different parts of the application.
        correct: true
      - value: It reduces the total number of lines of code in the application.
        correct: false
      - value: It eliminates the need for dependency injection.
        correct: false
      - value: It guarantees that all code will be executed synchronously.
        correct: false
    help: The Event Dispatcher allows components to interact without direct
      knowledge of each other, leading to more modular and maintainable code.
  - question: What is the primary purpose of the `PropertyInfoExtractor` in Symfony 7?
    answers:
      - value: To aggregate information from multiple property info extractors (e.g.,
          Reflection, PHPDoc) into a single source.
        correct: true
      - value: To extract data from a database.
        correct: false
      - value: To convert property names to different cases.
        correct: false
      - value: To generate getters and setters for properties.
        correct: false
    help: The `PropertyInfoExtractor` acts as a facade, delegating to various
      specialized extractors to gather comprehensive property metadata.
  - question: Which of the following is a common naming convention for a form type
      class in Symfony 7?
    answers:
      - value: Ending the class name with `Type` (e.g., `ProductType`).
        correct: true
      - value: Starting the class name with `Form`.
        correct: false
      - value: Using `_form` in the service definition.
        correct: false
      - value: All lowercase with no suffix.
        correct: false
    help: The convention for Symfony form types is to suffix the class name with
      `Type`.
  - question: What is the purpose of the `getBuiltInType()` method on a
      `Symfony\Component\PropertyInfo\Type` object?
    answers:
      - value: It returns the fundamental PHP data type (e.g., 'string', 'int',
          'object').
        correct: true
      - value: It returns the fully qualified class name for object types.
        correct: false
      - value: It indicates if the property is nullable.
        correct: false
      - value: It returns the default value of the property.
        correct: false
    help: The `getBuiltInType()` method provides the basic PHP type of a property,
      such as `string`, `int`, `bool`, `array`, or `object`.
  - question: Which of the following is a key principle of Symfony's approach to web
      development?
    answers:
      - value: Convention over configuration, while still allowing explicit
          configuration.
        correct: true
      - value: Configuration over convention, requiring explicit setup for everything.
        correct: false
      - value: No configuration at all, relying solely on magic.
        correct: false
      - value: Using only XML for all configuration.
        correct: false
    help: Symfony balances convention over configuration, providing sensible
      defaults and autoconfiguration while still allowing developers to
      explicitly configure behavior when needed.
  - question: What is the primary function of the `HttpKernel` component in Symfony 7?
    answers:
      - value: It provides the core request-response flow and event system for web
          applications.
        correct: true
      - value: It handles database interactions and ORM mapping.
        correct: false
      - value: It provides a command-line interface for application management.
        correct: false
      - value: It manages user authentication and authorization.
        correct: false
    help: The HttpKernel component is the foundation for Symfony's web framework,
      defining the request handling process and integrating with the
      EventDispatcher.
