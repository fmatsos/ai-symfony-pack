category: Symfony Architecture

questions:
  -
    question: >
      What is the primary purpose of Symfony Flex in a Symfony application?
    answers:
      -
        value: >
          To provide a graphical user interface for managing the application.
        correct: false
      -
        value: >
          To simplify the installation and management of Symfony bundles and dependencies.
        correct: true
      -
        value: >
          To replace Composer as the primary package manager.
        correct: false
      -
        value: >
          To generate database migrations automatically.
        correct: false
    help: |
      Symfony Flex is a Composer plugin that simplifies the installation and management of Symfony bundles and other dependencies by automating common tasks through "recipes".
      https://symfony.com/doc/current/setup/flex.html

  -
    question: >
      How does Symfony Flex manage the installation and configuration of bundles and dependencies?
    answers:
      -
        value: >
          By manually editing configuration files after each Composer install.
        correct: false
      -
        value: >
          Through interactive prompts that guide the user for every package.
        correct: false
      -
        value: >
          By applying "recipes" that automate common configuration tasks.
        correct: true
      -
        value: >
          It only downloads packages; configuration is a separate manual step.
        correct: false
    help: |
      Symfony Flex uses recipes to automate the configuration of packages. When you install a package, Flex checks if there's a recipe for it and applies the necessary changes to your project.
      https://symfony.com/doc/current/setup/flex.html#what-is-a-recipe

  -
    question: >
      What is a "recipe" in the context of Symfony Flex?
    answers:
      -
        value: >
          A set of instructions for cooking a meal within a Symfony application.
        correct: false
      -
        value: >
          A small PHP script that runs custom logic during application boot.
        correct: false
      -
        value: >
          A set of automated instructions for integrating a package into a Symfony application, including file generation and configuration.
        correct: true
      -
        value: >
          A predefined set of routes for common web pages.
        correct: false
    help: |
      A Flex recipe is a set of automated instructions (e.g., creating config files, adding environment variables) that integrates a package into your Symfony application.
      https://symfony.com/doc/current/setup/flex.html#what-is-a-recipe

  -
    question: >
      Which command is used to add a new package and its associated Flex recipe to a Symfony application?
    answers:
      -
        value: >
          `symfony add <package-name>`
        correct: false
      -
        value: >
          `composer install <package-name>`
        correct: false
      -
        value: >
          `composer require <package-name>`
        correct: true
      -
        value: >
          `php bin/console flex:install <package-name>`
        correct: false
    help: |
      The standard Composer `require` command is used. Symfony Flex, being a Composer plugin, automatically detects and applies relevant recipes during this process.
      https://symfony.com/doc/current/setup/flex.html#installing-new-packages

  -
    question: >
      Under which open-source license is the Symfony Framework and its components primarily distributed?
    answers:
      -
        value: >
          GNU General Public License (GPL)
        correct: false
      -
        value: >
          MIT License
        correct: true
      -
        value: >
          Apache License 2.0
        correct: false
      -
        value: >
          Mozilla Public License (MPL)
        correct: false
    help: |
      Symfony is released under the MIT license, which is a permissive free software license.
      https://symfony.com/doc/current/contributing/code/license.html

  -
    question: >
      What is the fundamental characteristic of a Symfony Component?
    answers:
      -
        value: >
          It must always be used within a full Symfony Framework application.
        correct: false
      -
        value: >
          It is a standalone, decoupled PHP library that can be used independently of the full framework.
        correct: true
      -
        value: >
          It is a monolithic piece of code that handles all aspects of an application.
        correct: false
      -
        value: >
          It is a visual UI element for web applications.
        correct: false
    help: |
      Symfony Components are decoupled, reusable PHP libraries that solve common web development problems. They can be used independently or as part of the full Symfony Framework.
      https://symfony.com/components

  -
    question: >
      Which Symfony component is responsible for handling HTTP requests and generating responses, forming the core of the framework's request-response cycle?
    answers:
      -
        value: >
          `Symfony\\Component\\Console`
        correct: false
      -
        value: >
          `Symfony\\Component\\Routing`
        correct: false
      -
        value: >
          `Symfony\\Component\\HttpFoundation`
        correct: true
      -
        value: >
          `Symfony\\Component\\Form`
        correct: false
    help: |
      The HttpFoundation component defines an object-oriented layer for the HTTP specification, providing `Request` and `Response` classes.
      https://symfony.com/doc/current/components/http_foundation.html

  -
    question: >
      Which Symfony component provides tools for accessing and manipulating properties of objects and arrays using property paths (e.g., `user.address.street`)?
    answers:
      -
        value: >
          `Symfony\\Component\\Serializer`
        correct: false
      -
        value: >
          `Symfony\\Component\\PropertyAccess`
        correct: true
      -
        value: >
          `Symfony\\Component\\Validator`
        correct: false
      -
        value: >
          `Symfony\\Component\\ExpressionLanguage`
        correct: false
    help: |
      The PropertyAccess component provides a way to read and write from/to an object or array using a simple string notation.
      https://symfony.com/doc/current/components/property_access.html

  -
    question: >
      Which Symfony component is used for defining and validating application configurations, often used with bundles?
    answers:
      -
        value: >
          `Symfony\\Component\\Dotenv`
        correct: false
      -
        value: >
          `Symfony\\Component\\Yaml`
        correct: false
      -
        value: >
          `Symfony\\Component\\Config`
        correct: true
      -
        value: >
          `Symfony\\Component\\DependencyInjection`
        correct: false
    help: |
      The Config component provides utilities for loading and validating configuration files, especially useful for bundles defining their own configuration.
      https://symfony.com/doc/current/components/config/definition.html

  -
    question: >
      What is the main purpose of the Symfony Messenger component?
    answers:
      -
        value: >
          To send email notifications.
        correct: false
      -
        value: >
          To handle asynchronous messages and commands, allowing for decoupled and scalable applications.
        correct: true
      -
        value: >
          To manage real-time chat functionalities.
        correct: false
      -
        value: >
          To translate application messages into different languages.
        correct: false
    help: |
      The Messenger component helps applications send and receive messages (commands and events) to/from other applications or message queues.
      https://symfony.com/doc/current/components/messenger.html

  -
    question: >
      Which component allows you to extract metadata about class properties, such as their types, descriptions, and whether they are readable or writable?
    answers:
      -
        value: >
          `Symfony\\Component\\Serializer`
        correct: false
      -
        value: >
          `Symfony\\Component\\PropertyInfo`
        correct: true
      -
        value: >
          `Symfony\\Component\\Reflection`
        correct: false
      -
        value: >
          `Symfony\\Component\\Validator`
        correct: false
    help: |
      The PropertyInfo component provides an abstraction to extract information about the properties of a PHP class.
      https://symfony.com/doc/current/components/property_info.html

  -
    question: >
      What is the role of a Symfony Bridge?
    answers:
      -
        value: >
          To provide a visual connection between different parts of the application.
        correct: false
      -
        value: >
          To integrate third-party libraries with the Symfony Framework, adapting their interfaces to Symfony's conventions.
        correct: true
      -
        value: >
          To create a direct database connection without using an ORM.
        correct: false
      -
        value: >
          To convert Symfony code into a different programming language.
        correct: false
    help: |
      Bridges are components that integrate popular third-party libraries (like Monolog, Twig, Doctrine) with the Symfony Framework, making them work seamlessly within the Symfony ecosystem.
      https://symfony.com/doc/current/components/index.html (Conceptual understanding, not a direct link to "bridges" section, but implied by component integration)

  -
    question: >
      Which Symfony Bridge integrates the Monolog library for logging within a Symfony application?
    answers:
      -
        value: >
          `MonologBundle`
        correct: false
      -
        value: >
          `Symfony\\Bridge\\Monolog`
        correct: true
      -
        value: >
          `LoggerBridge`
        correct: false
      -
        value: >
          `FrameworkBundle`
        correct: false
    help: |
      The `Symfony\\Bridge\\Monolog` component provides the integration between Monolog and Symfony.
      https://symfony.com/doc/current/logging.html

  -
    question: >
      In a standard Symfony application, where are the application's source code files (e.g., controllers, services, entities) typically located?
    answers:
      -
        value: >
          `app/`
        correct: false
      -
        value: >
          `src/`
        correct: true
      -
        value: >
          `bin/`
        correct: false
      -
        value: >
          `var/`
        correct: false
    help: |
      The `src/` directory is where all your application's PHP code lives.
      https://symfony.com/doc/current/setup/directory_structure.html#the-src-directory

  -
    question: >
      What is the purpose of the `public/` directory in a Symfony application?
    answers:
      -
        value: >
          To store all configuration files.
        correct: false
      -
        value: >
          To contain all PHP source code.
        correct: false
      -
        value: >
          To serve as the web server's document root, containing the front controller (`index.php`) and public assets.
        correct: true
      -
        value: >
          To store cached data and logs.
        correct: false
    help: |
      The `public/` directory is the document root for your web server. It contains the front controller (`index.php`) and all your public assets (images, stylesheets, JavaScript files, etc.).
      https://symfony.com/doc/current/setup/directory_structure.html#the-public-directory

  -
    question: >
      What is an "invokable controller" in Symfony?
    answers:
      -
        value: >
          A controller that can only be called from the command line.
        correct: false
      -
        value: >
          A controller class that implements the `__invoke()` magic method to handle requests.
        correct: true
      -
        value: >
          A controller that automatically invokes all its public methods.
        correct: false
      -
        value: >
          A controller that is automatically invoked by the Event Dispatcher.
        correct: false
    help: |
      An invokable controller is a PHP class that has a `__invoke()` method. This method is executed when the controller is matched by a route.
      https://symfony.com/doc/current/controller/service.html#invokable-controllers

  -
    question: |
      Given the following service definition, how would you correctly inject the `Psr\Log\LoggerInterface` service into the `GreetingGenerator`?

      ```php
      // src/GreetingGenerator.php
      namespace App;

      use Psr\Log\LoggerInterface;

      class GreetingGenerator
      {
          public function __construct(
              private /* ??? */ $logger,
          ) {
          }

          public function getRandomGreeting(): string
          {
              // ...
              $this->logger->info('Using the greeting: '.$greeting);
              return $greeting;
          }
      }
      ```
    answers:
      -
        value: >
          `LoggerInterface`
        correct: true
      -
        value: >
          `#[Autowire(service: 'monolog.logger')]`
        correct: false
      -
        value: >
          `#[Target('logger')]`
        correct: false
      -
        value: >
          `Psr\\Log\\LoggerInterface`
        correct: true
    help: |
      Symfony's autowiring automatically injects services based on type hints. Type-hinting `Psr\\Log\\LoggerInterface` is the correct way to get the default logger.
      https://symfony.com/doc/current/logging.html#autowiring-logger-channels

  -
    question: >
      Given a multi-application Symfony setup, where would you typically find the application-specific configuration files for an 'admin' app, following Symfony's recommended structure?
    answers:
      -
        value: >
          `config/admin/`
        correct: false
      -
        value: >
          `apps/admin/config/`
        correct: true
      -
        value: >
          `src/admin/config/`
        correct: false
      -
        value: >
          `var/admin/config/`
        correct: false
    help: |
      For multi-application setups, Symfony recommends placing application-specific configurations and source code under an `apps/` directory, with each app having its own `config/` and `src/` subdirectories.
      https://symfony.com/doc/current/configuration/multiple_kernels.html#directory-layout

  -
    question: >
      What is the role of `public/index.php` in a Symfony application?
    answers:
      -
        value: >
          It is the main configuration file for the entire application.
        correct: false
      -
        value: >
          It serves as the front controller, bootstrapping the application and handling all incoming HTTP requests.
        correct: true
      -
        value: >
          It contains all the application's business logic.
        correct: false
      -
        value: >
          It is a static HTML file displayed to users.
        correct: false
    help: |
      `public/index.php` is the front controller. All requests are routed through this file, which is responsible for bootstrapping the Symfony application and handling the request.
      https://symfony.com/doc/current/introduction/from_flat_php_to_symfony.html#the-front-controller

  -
    question: >
      Which Kernel event is dispatched first in the Symfony request lifecycle, allowing you to modify the Request object or return a Response early?
    answers:
      -
        value: >
          `KernelEvents::CONTROLLER`
        correct: false
      -
        value: >
          `KernelEvents::RESPONSE`
        correct: false
      -
        value: >
          `KernelEvents::REQUEST`
        correct: true
      -
        value: >
          `KernelEvents::VIEW`
        correct: false
    help: |
      The `KernelEvents::REQUEST` event is dispatched at the very beginning of the request handling process. Listeners can modify the Request object or set a Response to bypass further processing.
      https://symfony.com/doc/current/reference/events.html#kernel-events

  -
    question: >
      How does Symfony determine which controller to execute for a given request?
    answers:
      -
        value: >
          By searching for a PHP file with the same name as the URL path.
        correct: false
      -
        value: >
          By using the Router component to match the incoming URL to a defined route, which specifies the controller.
        correct: true
      -
        value: >
          By asking the user to manually select a controller.
        correct: false
      -
        value: >
          By executing all public methods in every controller until one returns a response.
        correct: false
    help: |
      The Router component is responsible for matching the incoming request URL to a defined route, which then maps to a specific controller and action.
      https://symfony.com/doc/current/routing.html

  -
    question: >
      When an unhandled exception occurs in a Symfony application, which Kernel event is dispatched to allow for custom error handling and response generation?
    answers:
      -
        value: >
          `KernelEvents::TERMINATE`
        correct: false
      -
        value: >
          `KernelEvents::EXCEPTION`
        correct: true
      -
        value: >
          `KernelEvents::FINISH_REQUEST`
        correct: false
      -
        value: >
          `KernelEvents::ERROR` (deprecated)
        correct: false
    help: |
      The `KernelEvents::EXCEPTION` event is dispatched when an exception is thrown during the request handling. Listeners can modify the exception or set a response.
      https://symfony.com/doc/current/reference/events.html#kernel-events

  -
    question: >
      What is the primary function of the Symfony Event Dispatcher component?
    answers:
      -
        value: >
          To manage database transactions.
        correct: false
      -
        value: >
          To provide a central hub for dispatching events and allowing listeners to react to them, promoting decoupled code.
        correct: true
      -
        value: >
          To handle user authentication and authorization.
        correct: false
      -
        value: >
          To send HTTP requests to external APIs.
        correct: false
    help: |
      The EventDispatcher component provides tools to implement the "Observer" design pattern, allowing components to communicate with each other by dispatching and listening to events.
      https://symfony.com/doc/current/components/event_dispatcher.html

  -
    question: >
      To listen to a Symfony event, which of the following approaches are valid?
    answers:
      -
        value: >
          Implementing `EventSubscriberInterface` and registering the subscriber as a service.
        correct: true
      -
        value: >
          Defining a service and tagging it with `kernel.event_listener` or using the `#[AsEventListener]` attribute.
        correct: true
      -
        value: >
          Manually calling `EventDispatcher::addListener()` in `public/index.php`.
        correct: false
      -
        value: >
          Extending `AbstractEvent` in your listener class.
        correct: false
    help: |
      Event listeners can be registered by tagging them with `kernel.event_listener` or using the `#[AsEventListener]` attribute. Event subscribers implement `EventSubscriberInterface` and define which events they listen to.
      https://symfony.com/doc/current/event_dispatcher.html#registering-listeners-and-subscribers

  -
    question: >
      Which Kernel event is dispatched after the controller has been executed but before the Response is sent, allowing you to modify the Response object?
    answers:
      -
        value: >
          `KernelEvents::REQUEST`
        correct: false
      -
        value: >
          `KernelEvents::CONTROLLER`
        correct: false
      -
        value: >
          `KernelEvents::RESPONSE`
        correct: true
      -
        value: >
          `KernelEvents::TERMINATE`
        correct: false
    help: |
      The `KernelEvents::RESPONSE` event is dispatched after the controller has returned a `Response` object. Listeners can modify this response before it is sent to the client.
      https://symfony.com/doc/current/reference/events.html#kernel-events

  -
    question: >
      What is the recommended approach for managing dependencies between services in Symfony?
    answers:
      -
        value: >
          Using global variables to share instances.
        correct: false
      -
        value: >
          Manually instantiating services within other services.
        correct: false
      -
        value: >
          Relying on the Dependency Injection Container and autowiring/service configuration.
        correct: true
      -
        value: >
          Using static methods to access dependencies.
        correct: false
    help: |
      Symfony strongly advocates for Dependency Injection, where services declare their dependencies via constructor arguments or setter methods, and the container provides them. Autowiring simplifies this process.
      https://symfony.com/doc/current/service_container.html#dependency-injection

  -
    question: >
      What is "autowiring" in Symfony's Dependency Injection Container?
    answers:
      -
        value: >
          A feature that automatically generates PHP code for your services.
        correct: false
      -
        value: >
          A mechanism that automatically injects service dependencies based on type hints in constructors or methods.
        correct: true
      -
        value: >
          A tool for automatically generating database schemas.
        correct: false
      -
        value: >
          A way to automatically expose all private services as public.
        correct: false
    help: |
      Autowiring is a feature that automatically reads the type hints on your service's constructor (or other methods) and passes the correct services.
      https://symfony.com/doc/current/service_container/autowiring.html

  -
    question: >
      According to Symfony best practices, what should be the primary responsibility of a controller?
    answers:
      -
        value: >
          To contain all business logic and database interactions.
        correct: false
      -
        value: >
          To act as a thin orchestrator, fetching data from services, processing forms, and rendering views.
        correct: true
      -
        value: >
          To manage user sessions and authentication.
        correct: false
      -
        value: >
          To handle all routing definitions.
        correct: false
    help: |
      Controllers should be thin: they should orchestrate the flow of data, delegate business logic to services, and prepare data for the view.
      https://symfony.com/doc/current/best_practices.html#controllers

  -
    question: >
      How can you configure environment-specific settings in a Symfony application?
    answers:
      -
        value: >
          By creating separate `config_dev.yaml`, `config_prod.yaml` files.
        correct: false
      -
        value: >
          By using `when@env` blocks in configuration files (e.g., `when@prod:` in YAML).
        correct: true
      -
        value: >
          By setting environment variables in the `.env` file.
        correct: true
      -
        value: >
          By defining constants in `src/Kernel.php`.
        correct: false
    help: |
      Symfony supports environment-specific configuration through `when@env` blocks in config files and by loading environment variables from the `.env` file.
      https://symfony.com/doc/current/configuration/environments.html

  -
    question: >
      What is the typical release cycle for a Symfony Long Term Support (LTS) version?
    answers:
      -
        value: >
          Every 6 months.
        correct: false
      -
        value: >
          Every 12 months.
        correct: false
      -
        value: >
          Every 2 years.
        correct: true
      -
        value: >
          There is no fixed schedule for LTS versions.
        correct: false
    help: |
      Symfony LTS versions are released every two years and are maintained for a longer period (typically 3 years for bug fixes and 5 years for security fixes).
      https://symfony.com/releases

  -
    question: >
      What does Symfony's Backward Compatibility Promise guarantee?
    answers:
      -
        value: >
          That no code changes will ever be required when upgrading between major versions.
        correct: false
      -
        value: >
          That public APIs (classes, methods, services, configuration) will remain stable within a major version and for LTS versions.
        correct: true
      -
        value: >
          That all internal implementation details will never change.
        correct: false
      -
        value: >
          That all deprecated features will be removed immediately in the next minor release.
        correct: false
    help: |
      Symfony's Backward Compatibility Promise ensures that public APIs remain stable within a major version, allowing for easier upgrades. It defines what changes are considered breaking and what are not.
      https://symfony.com/doc/current/contributing/code/bc.html

  -
    question: >
      Which of the following changes would typically NOT break Symfony's Backward Compatibility Promise?
    answers:
      -
        value: >
          Changing the signature of a public method on a stable class.
        correct: false
      -
        value: >
          Adding a new optional argument to the end of a public method.
        correct: true
      -
        value: >
          Renaming a public service ID.
        correct: false
      -
        value: >
          Removing a public configuration option.
        correct: false
    help: |
      Adding new optional arguments to the end of public methods is generally considered backward compatible. Other options listed are typically breaking changes.
      https://symfony.com/doc/current/contributing/code/bc.html#what-cannot-be-broken

  -
    question: >
      What is the purpose of deprecating features in Symfony?
    answers:
      -
        value: >
          To immediately remove old features without warning.
        correct: false
      -
        value: >
          To signal that a feature will be removed or changed in a future major version, providing a transition period for developers.
        correct: true
      -
        value: >
          To mark features as unstable and not ready for production use.
        correct: false
      -
        value: >
          To reduce the overall size of the framework.
        correct: false
    help: |
      Deprecations are used to signal that a feature is planned for removal or significant change in a future major version, giving developers time to adapt their code.
      https://symfony.com/doc/current/contributing/code/deprecations.html

  -
    question: >
      How can you identify deprecation notices in your Symfony application during development?
    answers:
      -
        value: >
          By checking the `composer.json` file for deprecated packages.
        correct: false
      -
        value: >
          By monitoring the web server's access logs.
        correct: false
      -
        value: >
          By enabling the debug mode (`APP_ENV=dev`) and checking the Symfony Profiler or console output.
        correct: true
      -
        value: >
          Deprecations are only visible in production environments.
        correct: false
    help: |
      In development mode, Symfony displays deprecation notices in the web debug toolbar (Profiler) and in the console output.
      https://symfony.com/doc/current/contributing/code/deprecations.html#how-to-deal-with-deprecations

  -
    question: >
      When is it generally considered appropriate to override a core Symfony service or behavior?
    answers:
      -
        value: >
          Whenever you need to change any default behavior, regardless of impact.
        correct: false
      -
        value: >
          Only when there is no other way to achieve the desired functionality using configuration or extending existing classes.
        correct: true
      -
        value: >
          To completely rewrite a component from scratch.
        correct: false
      -
        value: >
          As a first resort for any customization.
        correct: false
    help: |
      Overriding core framework behavior should be a last resort. Symfony provides many extension points (configuration, events, decorators) to customize behavior without direct overriding.
      https://symfony.com/doc/current/cookbook/bundles/override.html (General principle of framework overloading)

  -
    question: >
      What is the main goal of PSRs (PHP Standard Recommendations)?
    answers:
      -
        value: >
          To dictate specific implementation details for all PHP applications.
        correct: false
      -
        value: >
          To promote interoperability and consistency across PHP components and frameworks.
        correct: true
      -
        value: >
          To replace Composer as the standard for package management.
        correct: false
      -
        value: >
          To provide a new programming language for web development.
        correct: false
    help: |
      PSRs are recommendations from the PHP Framework Interoperability Group (PHP-FIG) that aim to standardize common functionalities, promoting interoperability between different PHP components and frameworks.
      https://www.php-fig.org/psr/

  -
    question: >
      Which PSR defines common interfaces for logging, allowing different logging libraries to be swapped without changing application code?
    answers:
      -
        value: >
          PSR-1 (Basic Coding Standard)
        correct: false
      -
        value: >
          PSR-7 (HTTP Message Interfaces)
        correct: false
      -
        value: >
          PSR-3 (Logger Interface)
        correct: true
      -
        value: >
          PSR-11 (Container Interface)
        correct: false
    help: |
      PSR-3 defines a common interface for logging libraries, ensuring interoperability. Symfony's Monolog Bridge implements this.
      https://www.php-fig.org/psr/psr-3/

  -
    question: >
      Which PSR defines a standard for HTTP message interfaces, including `Request` and `Response` objects?
    answers:
      -
        value: >
          PSR-1 (Basic Coding Standard)
        correct: false
      -
        value: >
          PSR-7 (HTTP Message Interfaces)
        correct: true
      -
        value: >
          PSR-14 (Event Dispatcher)
        correct: false
      -
        value: >
          PSR-18 (HTTP Client)
        correct: false
    help: |
      PSR-7 provides interfaces for representing HTTP messages, including requests and responses, promoting interoperability in HTTP-related components.
      https://www.php-fig.org/psr/psr-7/

  -
    question: >
      Why is Symfony's adherence to PSRs beneficial for developers?
    answers:
      -
        value: >
          It forces developers to use only Symfony-specific libraries.
        correct: false
      -
        value: >
          It ensures that Symfony applications can only run on specific web servers.
        correct: false
      -
        value: >
          It promotes code reusability and allows developers to easily swap out components or integrate third-party libraries that also adhere to PSRs.
        correct: true
      -
        value: >
          It guarantees faster application performance.
        correct: false
    help: |
      Adherence to PSRs allows Symfony to be interoperable with other PHP libraries and frameworks, promoting code reusability and flexibility.
      https://symfony.com/doc/current/contributing/code/standards.html (Implied by adherence to standards)

  -
    question: >
      What is the recommended naming convention for Symfony controller classes?
    answers:
      -
        value: >
          `MyController.php`
        correct: false
      -
        value: >
          `My_Controller.php`
        correct: false
      -
        value: >
          `MyController.php` (e.g., `DefaultController`, `ProductController`) ending with `Controller`.
        correct: true
      -
        value: >
          `MyAction.php`
        correct: false
    help: |
      By convention, controller classes should end with `Controller` (e.g., `DefaultController`, `ProductController`).
      https://symfony.com/doc/current/best_practices.html#controllers

  -
    question: >
      How should Symfony services typically be named or identified in configuration?
    answers:
      -
        value: >
          Using snake_case (e.g., `my_service`).
        correct: false
      -
        value: >
          Using PascalCase (e.g., `MyService`).
        correct: false
      -
        value: >
          Using fully qualified class names (FQCNs) or short aliases, leveraging autowiring for most cases.
        correct: true
      -
        value: >
          Using random UUIDs.
        correct: false
    help: |
      Symfony encourages using FQCNs as service IDs, especially with autowiring, or short, descriptive aliases when necessary.
      https://symfony.com/doc/current/service_container/autowiring.html#autowiring-alias-for-an-interface

  -
    question: >
      After installing a new bundle via Symfony Flex, what file is typically updated to register the bundle with the kernel?
    answers:
      -
        value: >
          `config/services.yaml`
        correct: false
      -
        value: >
          `config/bundles.php`
        correct: true
      -
        value: >
          `composer.json`
        correct: false
      -
        value: >
          `public/index.php`
        correct: false
    help: |
      Symfony Flex automatically adds new bundles to `config/bundles.php`, which is used by the kernel to register all active bundles.
      https://symfony.com/doc/current/bundles.html#registering-a-bundle

  -
    question: |
      Given a `PropertyAccessor` instance, how would you configure it to return `null` instead of throwing a `NoSuchPropertyException` when attempting to access a non-existent property path?

      ```php
      use Symfony\Component\PropertyAccess\PropertyAccess;
      use Symfony\Component\PropertyAccess\PropertyAccessor;

      $propertyAccessor = PropertyAccess::createPropertyAccessor();

      // How to modify $propertyAccessor to return null for non-existent paths?
      ```
    answers:
      -
        value: >
          You must re-create the accessor using `PropertyAccess::createPropertyAccessorBuilder()->disableExceptionOnInvalidPropertyPath()->getPropertyAccessor()`.
        correct: true
      -
        value: >
          Call `$propertyAccessor->setOption('throw_exception_on_invalid_path', false);`.
        correct: false
      -
        value: >
          Implement a custom exception handler for `NoSuchPropertyException`.
        correct: false
      -
        value: >
          This behavior cannot be changed; an exception is always thrown.
        correct: false
    help: |
      To change this behavior, you need to use the `PropertyAccessorBuilder` and call `disableExceptionOnInvalidPropertyPath()` before creating the accessor.
      https://symfony.com/doc/current/components/property_access.html#disabling-exceptions-for-non-existing-properties

  -
    question: >
      Which method of `Symfony\\Component\\PropertyInfo\\PropertyInfoExtractor` would you use to get an array of all property names for a given class?
    answers:
      -
        value: >
          `getTypes(string $class, string $property)`
        correct: false
      -
        value: >
          `getProperties(string $class)`
        correct: true
      -
        value: >
          `getShortDescription(string $class, string $property)`
        correct: false
      -
        value: >
          `isReadable(string $class, string $property)`
        correct: false
    help: |
      The `getProperties()` method, part of `PropertyListExtractorInterface`, is used to list all properties of a given class.
      https://symfony.com/doc/current/components/property_info.html#propertyinfoextractor-extractable-information

  -
    question: >
      In the Symfony Messenger component, what is an "Envelope Stamp"?
    answers:
      -
        value: >
          A unique identifier for each message.
        correct: false
      -
        value: >
          A piece of information attached to a message's "Envelope" to provide metadata or instructions for middleware or transports.
        correct: true
      -
        value: >
          A visual indicator that a message has been processed.
        correct: false
      -
        value: >
          A small executable script embedded within the message.
        correct: false
    help: |
      Envelope Stamps are pieces of information attached to your message's envelope, providing metadata or instructions for middleware or transport layers.
      https://symfony.com/doc/current/components/messenger.html#envelope-stamps

  -
    question: >
      Which trait is commonly used in Symfony to create a micro-kernel, allowing for a more streamlined application structure, especially for APIs or console applications?
    answers:
      -
        value: >
          `Symfony\\Bundle\\FrameworkBundle\\Kernel\\MicroKernelTrait`
        correct: true
      -
        value: >
          `Symfony\\Component\\HttpKernel\\KernelTrait`
        correct: false
      -
        value: >
          `Symfony\\Component\\Console\\ApplicationTrait`
        correct: false
      -
        value: >
          `Symfony\\Component\\Routing\\RouterTrait`
        correct: false
    help: |
      The `MicroKernelTrait` is used to build small, optimized Symfony applications (micro-kernels) by providing default implementations for essential kernel methods.
      https://symfony.com/doc/current/configuration/micro_kernel_trait.html

  -
    question: |
      Consider the following `config/packages/framework.php` snippet. What is its effect on asset URLs generated by Symfony?

      ```php
      // config/packages/framework.php
      use Symfony\Config\FrameworkConfig;

      return static function (FrameworkConfig $framework): void {
          $framework->assets()
              ->basePath('/images');
      };
      ```
    answers:
      -
        value: >
          It makes all assets load from a CDN.
        correct: false
      -
        value: >
          It prepends `/images/` to all asset URLs generated by the `asset()` Twig function or PHP equivalent.
        correct: true
      -
        value: >
          It only affects images, not other asset types like CSS or JavaScript.
        correct: false
      -
        value: >
          It renames all asset files to include `/images/` in their filename.
        correct: false
    help: |
      The `base_path` option in the assets configuration prepends the specified path to all asset URLs generated by Symfony's asset helper.
      https://symfony.com/doc/current/reference/configuration/framework.html#assets-base-path

  -
    question: >
      Which Kernel event is dispatched immediately after the `ControllerEvent` and allows you to modify the arguments passed to the controller method before it is executed?
    answers:
      -
        value: >
          `KernelEvents::REQUEST`
        correct: false
      -
        value: >
          `KernelEvents::VIEW`
        correct: false
      -
        value: >
          `KernelEvents::CONTROLLER_ARGUMENTS`
        correct: true
      -
        value: >
          `KernelEvents::RESPONSE`
        correct: false
    help: |
      The `KernelEvents::CONTROLLER_ARGUMENTS` event is dispatched after the controller has been determined but before its arguments are resolved and the controller is executed. Listeners can modify these arguments.
      https://symfony.com/doc/current/reference/events.html#kernel-events

  -
    question: >
      What is the recommended way to handle deprecations in your project's dependencies?
    answers:
      -
        value: >
          Ignore them, as they don't affect application behavior.
        correct: false
      -
        value: >
          Immediately downgrade the dependency to a version without deprecations.
        correct: false
      -
        value: >
          Address them proactively by updating your code to use the new recommended APIs or patterns before the deprecated features are removed in a future major version.
        correct: true
      -
        value: >
          Disable deprecation notices in production to hide them.
        correct: false
    help: |
      It's best practice to address deprecations as they appear, updating your code to use the new APIs, to ensure a smoother upgrade path to future major versions.
      https://symfony.com/doc/current/contributing/code/deprecations.html#how-to-deal-with-deprecations

  -
    question: >
      What is the purpose of the `var/` directory in a Symfony application?
    answers:
      -
        value: >
          To store all application source code.
        correct: false
      -
        value: >
          To hold generated files, such as cache, logs, and temporary files.
        correct: true
      -
        value: >
          To define environment variables.
        correct: false
      -
        value: >
          To store public web assets.
        correct: false
    help: |
      The `var/` directory contains generated files, including the cache, logs, and temporary files.
      https://symfony.com/doc/current/setup/directory_structure.html#the-var-directory

  -
    question: >
      Which of the following is a core principle of Symfony's code organization?
    answers:
      -
        value: >
          Monolithic architecture where all code resides in a single file.
        correct: false
      -
        value: >
          Separation of Concerns, promoting modularity and reusability through components and bundles.
        correct: true
      -
        value: >
          Tight coupling between all parts of the application.
        correct: false
      -
        value: >
          Prioritizing convention over configuration at all costs.
        correct: false
    help: |
      Symfony promotes separation of concerns by organizing code into independent components and bundles, leading to a modular and reusable architecture.
      https://symfony.com/doc/current/quick_tour/the_architecture.html

  -
    question: >
      Which of the following is a benefit of using Symfony's Dependency Injection Container?
    answers:
      -
        value: >
          It makes your code tightly coupled to the framework.
        correct: false
      -
        value: >
          It reduces the need for unit testing.
        correct: false
      -
        value: >
          It promotes loose coupling, testability, and reusability of services.
        correct: true
      -
        value: >
          It automatically generates user interfaces.
        correct: false
    help: |
      The Dependency Injection Container helps manage service dependencies, leading to more modular, testable, and reusable code.
      https://symfony.com/doc/current/service_container.html

  -
    question: >
      What is the purpose of the `config/` directory in a Symfony application?
    answers:
      -
        value: >
          To store all public assets.
        correct: false
      -
        value: >
          To contain all PHP source code.
        correct: false
      -
        value: >
          To hold all application configuration files (e.g., services, routes, packages).
        correct: true
      -
        value: >
          To store cached data.
        correct: false
    help: |
      The `config/` directory contains all the application's configuration files.
      https://symfony.com/doc/current/setup/directory_structure.html#the-config-directory

  -
    question: >
      Which of the following describes a key aspect of Symfony's release management regarding major versions?
    answers:
      -
        value: >
          Major versions are released annually with no backward compatibility.
        correct: false
      -
        value: >
          Major versions are released every two years, with a focus on backward compatibility within the major version.
        correct: true
      -
        value: >
          Major versions are released only when critical security vulnerabilities are found.
        correct: false
      -
        value: >
          Symfony does not have major versions; it uses continuous delivery.
        correct: false
    help: |
      Symfony releases a new major version every two years, with a strong commitment to backward compatibility within that major version.
      https://symfony.com/releases

  -
    question: >
      What is the primary benefit of Symfony's `MicroKernelTrait` for application development?
    answers:
      -
        value: >
          It allows for the creation of full-stack web applications with all bundles enabled by default.
        correct: false
      -
        value: >
          It simplifies the creation of small, fast, and optimized applications (e.g., APIs, console commands) by providing a minimal kernel setup.
        correct: true
      -
        value: >
          It enables real-time communication via WebSockets.
        correct: false
      -
        value: >
          It replaces the need for Composer in small projects.
        correct: false
    help: |
      The `MicroKernelTrait` helps in building lightweight Symfony applications by providing a minimal kernel implementation suitable for microservices or console apps.
      https://symfony.com/doc/current/configuration/micro_kernel_trait.html

  -
    question: >
      Which of the following PSRs is related to the HTTP Client component in Symfony?
    answers:
      -
        value: >
          PSR-1 (Basic Coding Standard)
        correct: false
      -
        value: >
          PSR-18 (HTTP Client)
        correct: true
      -
        value: >
          PSR-6 (Caching)
        correct: false
      -
        value: >
          PSR-17 (HTTP Factories)
        correct: true
    help: |
      Symfony's HTTP Client component implements PSR-18 (HTTP Client) and utilizes PSR-17 (HTTP Factories) for creating HTTP messages.
      https://symfony.com/doc/current/components/http_client.html#psr-18-and-psr-17

  -
    question: >
      What is the purpose of the `#[AsCommand]` attribute in a Symfony console command?
    answers:
      -
        value: >
          To define the command's name and description.
        correct: true
      -
        value: >
          To inject services into the command.
        correct: false
      -
        value: >
          To execute the command automatically.
        correct: false
      -
        value: >
          To link the command to a specific controller.
        correct: false
    help: |
      The `#[AsCommand]` attribute is used to configure the command's name, description, and other options directly in the class.
      https://symfony.com/doc/current/console.html#configuring-the-command

  -
    question: >
      Which of the following is a common naming convention for configuration files within the `config/packages/` directory?
    answers:
      -
        value: >
          `services.xml`
        correct: false
      -
        value: >
          `framework.yaml`
        correct: true
      -
        value: >
          `routes.php`
        correct: false
      -
        value: >
          `parameters.ini`
        correct: false
    help: |
      Configuration files for bundles are typically named after the bundle, e.g., `framework.yaml` for FrameworkBundle, `doctrine.yaml` for DoctrineBundle.
      https://symfony.com/doc/current/setup/directory_structure.html#the-config-directory

  -
    question: >
      How does Symfony handle the loading of environment variables (e.g., `APP_ENV`, `DATABASE_URL`)?
    answers:
      -
        value: >
          They are hardcoded directly into the `Kernel.php` file.
        correct: false
      -
        value: >
          They are loaded from the `.env` file by the Dotenv component.
        correct: true
      -
        value: >
          They are retrieved directly from the operating system's environment.
        correct: true
      -
        value: >
          They are fetched from a remote API at runtime.
        correct: false
    help: |
      Symfony uses the Dotenv component to load environment variables from the `.env` file. These variables can also be set directly in the server's environment.
      https://symfony.com/doc/current/configuration/env_var_processors.html

  -
    question: >
      What is the primary purpose of the `composer.lock` file in a Symfony project?
    answers:
      -
        value: >
          To prevent any new packages from being installed.
        correct: false
      -
        value: >
          To lock the exact versions of all installed dependencies, ensuring reproducible builds.
        correct: true
      -
        value: >
          To store database credentials.
        correct: false
      -
        value: >
          To define the application's routing.
        correct: false
    help: |
      The `composer.lock` file records the exact versions of all installed dependencies, ensuring that anyone installing the project gets the identical set of packages.
      https://symfony.com/doc/current/setup/flex.html#composer-lock

  -
    question: >
      Which of the following best describes the concept of "Framework Interoperability" in Symfony?
    answers:
      -
        value: >
          The ability to run Symfony applications on any operating system.
        correct: false
      -
        value: >
          The design principle that allows Symfony components to be used independently or with other frameworks, often facilitated by PSRs.
        correct: true
      -
        value: >
          The process of converting a Symfony application to another framework.
        correct: false
      -
        value: >
          The feature that allows multiple Symfony applications to share the same codebase.
        correct: false
    help: |
      Framework interoperability refers to the ability of Symfony components to be used outside the full framework, and for Symfony itself to integrate well with other PHP libraries and standards (like PSRs).
      https://symfony.com/components (Implied by the nature of components and PSR adherence)

  -
    question: >
      What is the primary benefit of keeping controllers "thin" and delegating business logic to services?
    answers:
      -
        value: >
          It makes controllers easier to read and understand.
        correct: true
      -
        value: >
          It improves the testability and reusability of business logic.
        correct: true
      -
        value: >
          It reduces the number of files in the `src/` directory.
        correct: false
      -
        value: >
          It eliminates the need for a database.
        correct: false
    help: |
      Thin controllers improve code organization, readability, and make business logic easier to test and reuse independently of the controller.
      https://symfony.com/doc/current/best_practices.html#controllers

  -
    question: >
      What is the purpose of the `#[AsTwigFilter]` attribute in Symfony?
    answers:
      -
        value: >
          To define a new Twig function.
        correct: false
      -
        value: >
          To register a PHP method as a Twig filter, making it available in Twig templates.
        correct: true
      -
        value: >
          To mark a Twig template as deprecated.
        correct: false
      -
        value: >
          To automatically escape output in Twig templates.
        correct: false
    help: |
      The `#[AsTwigFilter]` attribute allows you to easily register a PHP method as a Twig filter, leveraging autoconfiguration.
      https://symfony.com/doc/current/templating/twig_extension.html#registering-as-a-service

  -
    question: >
      Which of the following is a valid way to define a prototyped array of scalar values in Symfony's Config component definition?
    answers:
      -
        value: |
          ```php
          $node->scalarPrototype()->end();
          ```
        correct: true
      -
        value: |
          ```php
          $node->arrayNode('items')->scalarNode()->end();
          ```
        correct: false
      -
        value: |
          ```php
          $node->prototype('scalar')->end();
          ```
        correct: false
      -
        value: |
          ```php
          $node->variableNode()->end();
          ```
        correct: false
    help: |
      The `scalarPrototype()` method is used to define a prototyped array where each element is a scalar value.
      https://symfony.com/doc/current/components/config/definition.html#prototyped-array-nodes

  -
    question: >
      What is the significance of the `APP_ENV` environment variable in a Symfony application?
    answers:
      -
        value: >
          It defines the application's secret key.
        correct: false
      -
        value: >
          It determines the current environment (e.g., `dev`, `prod`, `test`), influencing configuration loading and debugging behavior.
        correct: true
      -
        value: >
          It specifies the database connection string.
        correct: false
      -
        value: >
          It sets the default language for the application.
        correct: false
    help: |
      `APP_ENV` is a crucial environment variable that dictates the application's environment, affecting how configuration is loaded, debugging tools are enabled, and performance is optimized.
      https://symfony.com/doc/current/configuration/environments.html

  -
    question: >
      What is the purpose of the `HandleTrait` in the Symfony Messenger component?
    answers:
      -
        value: >
          To automatically dispatch messages to all available handlers.
        correct: false
      -
        value: >
          To allow synchronous handling of messages, typically queries, and retrieve their results directly.
        correct: true
      -
        value: >
          To define custom message handlers.
        correct: false
      -
        value: >
          To serialize and deserialize messages for transport.
        correct: false
    help: |
      The `HandleTrait` provides a convenient `handle()` method for synchronously dispatching messages (especially queries) and retrieving their results, useful in CQRS architectures.
      https://symfony.com/doc/current/messenger.html#synchronous-queries

  -
    question: >
      Which of the following is a common naming convention for Symfony bundles?
    answers:
      -
        value: >
          `MyBundle` (e.g., `FrameworkBundle`, `DoctrineBundle`).
        correct: true
      -
        value: >
          `my_bundle`
        correct: false
      -
        value: >
          `BundleMy`
        correct: false
      -
        value: >
          `MyBundle.php`
        correct: false
    help: |
      Symfony bundles typically follow a PascalCase naming convention and end with `Bundle`.
      https://symfony.com/doc/current/bundles.html#bundle-naming-conventions

  -
    question: >
      What is the primary role of the `ContainerConfigurator` in a Symfony PHP configuration file (e.g., `config/services.php`)?
    answers:
      -
        value: >
          To define routes for the application.
        correct: false
      -
        value: >
          To configure services, parameters, and import other configuration files into the Dependency Injection Container.
        correct: true
      -
        value: >
          To manage database connections.
        correct: false
      -
        value: >
          To render Twig templates.
        correct: false
    help: |
      The `ContainerConfigurator` object provides methods to define services, parameters, and import other configuration files when using PHP for service configuration.
      https://symfony.com/doc/current/service_container/configuration.html#configuring-services-in-php

  -
    question: >
      When configuring the `property_accessor` service in Symfony, what does the `throw_exception_on_invalid_index` option control?
    answers:
      -
        value: >
          Whether an exception is thrown when a property path is invalid.
        correct: false
      -
        value: >
          Whether an exception is thrown when attempting to access an invalid index of an array.
        correct: true
      -
        value: >
          Whether an exception is thrown when a method does not exist.
        correct: false
      -
        value: >
          Whether to disable all exceptions from the `PropertyAccessor`.
        correct: false
    help: |
      The `throw_exception_on_invalid_index` option specifically controls whether `PropertyAccessor` throws an exception when an array index is invalid.
      https://symfony.com/doc/current/reference/configuration/framework.html#throw-exception-on-invalid-index

  -
    question: >
      Which of the following is a valid way to define a multi-command console application using Symfony's Runtime component?
    answers:
      -
        value: |
          ```php
          // public/index.php
          return static function (): int { /* ... */ };
          ```
        correct: false
      -
        value: |
          ```php
          // public/index.php
          use Symfony\Component\Console\Application;
          return static function (array $context): Application { /* ... */ };
          ```
        correct: true
      -
        value: |
          ```php
          // public/index.php
          return new Symfony\Component\HttpKernel\Kernel();
          ```
        correct: false
      -
        value: |
          ```php
          // public/index.php
          return static function (): string { /* ... */ };
          ```
        correct: false
    help: |
      For multi-command console applications, the runtime closure should return an instance of `Symfony\\Component\\Console\\Application`.
      https://symfony.com/doc/current/components/runtime.html#defining-a-multi-command-console-application

  -
    question: >
      What is the primary role of the `ReflectionExtractor` in the Symfony PropertyInfo component?
    answers:
      -
        value: >
          To extract property information by parsing PHPDoc comments.
        correct: false
      -
        value: >
          To extract property information using PHP's built-in Reflection API.
        correct: true
      -
        value: >
          To extract property information from database schemas.
        correct: false
      -
        value: >
          To extract property information from external API documentation.
        correct: false
    help: |
      The `ReflectionExtractor` uses PHP's Reflection API to get property information like types, readability, and writability.
      https://symfony.com/doc/current/components/property_info.html#using-reflectionextractor

  -
    question: >
      What is the purpose of the `ConstructorExtractor` in the Symfony PropertyInfo component, introduced in Symfony 7.3?
    answers:
      -
        value: >
          To extract property information from private class properties only.
        correct: false
      -
        value: >
          To extract property information by analyzing constructor arguments, especially for promoted properties.
        correct: true
      -
        value: >
          To generate constructor methods automatically.
        correct: false
      -
        value: >
          To validate constructor arguments at runtime.
        correct: false
    help: |
      The `ConstructorExtractor` (introduced in Symfony 7.3) extracts property information by analyzing constructor arguments, which is particularly useful with PHP 8's constructor property promotion.
      https://symfony.com/doc/current/components/property_info.html#constructor-extractor

  -
    question: >
      Which of the following is a key responsibility of a `Middleware` in the Symfony Messenger component?
    answers:
      -
        value: >
          To directly send messages to a message broker.
        correct: false
      -
        value: >
          To retrieve and deserialize messages from a message queue.
        correct: false
      -
        value: >
          To access the message and its envelope during dispatch, handle cross-cutting concerns, and call the next middleware in the chain.
        correct: true
      -
        value: >
          To execute the business logic associated with a message.
        correct: false
    help: |
      Middleware in Messenger can access the message and its envelope, handle cross-cutting concerns (like logging, validation), and decide whether to pass the message to the next middleware or stop the chain.
      https://symfony.com/doc/current/components/messenger.html#middleware

  -
    question: >
      What is the primary function of the `KernelEvents::TERMINATE` event?
    answers:
      -
        value: >
          To stop the application immediately without sending a response.
        correct: false
      -
        value: >
          To perform cleanup tasks after the response has been sent to the client.
        correct: true
      -
        value: >
          To handle fatal errors and exceptions.
        correct: false
      -
        value: >
          To initialize the Dependency Injection Container.
        correct: false
    help: |
      The `KernelEvents::TERMINATE` event is dispatched after the response has been sent to the client, allowing for long-running tasks or cleanup that don't need to block the user.
      https://symfony.com/doc/current/reference/events.html#kernel-events

  -
    question: >
      Which of the following is a common naming convention for PHP files containing service definitions in Symfony?
    answers:
      -
        value: >
          `services.xml`
        correct: false
      -
        value: >
          `services.yaml`
        correct: true
      -
        value: >
          `services.php`
        correct: true
      -
        value: >
          `services.txt`
        correct: false
    help: |
      Symfony supports YAML, XML, and PHP for service definitions. Common filenames are `services.yaml`, `services.xml`, or `services.php`.
      https://symfony.com/doc/current/service_container/configuration.html

  -
    question: >
      What is the purpose of the `#[Route]` attribute in a Symfony controller method?
    answers:
      -
        value: >
          To define a service for the controller.
        correct: false
      -
        value: >
          To specify the URL path, HTTP methods, and other routing options for a controller action.
        correct: true
      -
        value: >
          To inject dependencies into the method.
        correct: false
      -
        value: >
          To mark the method as deprecated.
        correct: false
    help: |
      The `#[Route]` attribute is used to configure routing directly on controller methods, specifying the URL path, HTTP methods, and other options.
      https://symfony.com/doc/current/routing.html#routing-attributes

  -
    question: >
      What does the `getBuiltInType()` method of `Symfony\\Component\\PropertyInfo\\Type` return?
    answers:
      -
        value: >
          The fully qualified class name of the property.
        correct: false
      -
        value: >
          Whether the property is nullable.
        correct: false
      -
        value: >
          The built-in PHP data type (e.g., 'string', 'int', 'array', 'object').
        correct: true
      -
        value: >
          The default value of the property.
        correct: false
    help: |
      The `getBuiltInType()` method returns the fundamental PHP data type of the property, such as 'string', 'int', 'array', or 'object'.
      https://symfony.com/doc/current/components/property_info.html#type-object

  -
    question: >
      Which of the following statements about Symfony's Backward Compatibility Promise is TRUE?
    answers:
      -
        value: >
          It applies to all internal classes and methods, even if not publicly exposed.
        correct: false
      -
        value: >
          It guarantees that minor version upgrades will never require any code changes.
        correct: false
      -
        value: >
          It primarily applies to public APIs (classes, methods, configuration, service IDs) and ensures stability within a major version.
        correct: true
      -
        value: >
          It means that old Symfony versions will always be compatible with the latest PHP versions.
        correct: false
    help: |
      The B.C. promise focuses on public APIs. While minor versions aim for compatibility, changes might require small adjustments.
      https://symfony.com/doc/current/contributing/code/bc.html

  -
    question: >
      What is the purpose of the `#[AsEventListener]` attribute in Symfony?
    answers:
      -
        value: >
          To mark a class as a service.
        correct: false
      -
        value: >
          To automatically register a class method as an event listener for a specific event.
        correct: true
      -
        value: >
          To define an event.
        correct: false
      -
        value: >
          To dispatch an event.
        correct: false
    help: |
      The `#[AsEventListener]` attribute allows for autoconfiguration of event listeners, making it easy to register methods to respond to specific events.
      https://symfony.com/doc/current/event_dispatcher.html#registering-listeners-and-subscribers

  -
    question: >
      What is the primary role of the `Psr\\Log\\LoggerInterface` in Symfony?
    answers:
      -
        value: >
          To handle database queries.
        correct: false
      -
        value: >
          To provide a standardized interface for logging messages, allowing different logging implementations to be used interchangeably.
        correct: true
      -
        value: >
          To manage user authentication.
        correct: false
      -
        value: >
          To send HTTP requests.
        correct: false
    help: |
      `Psr\\Log\\LoggerInterface` is a PSR-3 interface that defines a common way to log messages, promoting interoperability with various logging libraries.
      https://symfony.com/doc/current/logging.html#autowiring-logger-channels

  -
    question: >
      Which of the following is NOT a standard directory in a typical Symfony application structure?
    answers:
      -
        value: >
          `src/`
        correct: false
      -
        value: >
          `public/`
        correct: false
      -
        value: >
          `app/` (in modern Symfony Flex applications)
        correct: true
      -
        value: >
          `var/`
        correct: false
    help: |
      In modern Symfony Flex applications, the `app/` directory has been replaced by `config/`, `src/`, and other top-level directories.
      https://symfony.com/doc/current/setup/directory_structure.html

  -
    question: >
      What is the main advantage of using PHP attributes (e.g., `#[Route]`, `#[AsCommand]`) for configuration in Symfony 7?
    answers:
      -
        value: >
          They are faster to parse than YAML or XML files.
        correct: false
      -
        value: >
          They allow configuration to be defined directly alongside the code it configures, improving discoverability and reducing context switching.
        correct: true
      -
        value: >
          They completely eliminate the need for the Dependency Injection Container.
        correct: false
      -
        value: >
          They are only supported on Windows servers.
        correct: false
    help: |
      PHP attributes allow for configuration to be colocated with the code, making it more intuitive and easier to manage.
      https://symfony.com/doc/current/routing.html#routing-attributes

  -
    question: >
      What is the primary purpose of the `when@prod` block in Symfony configuration files?
    answers:
      -
        value: >
          To define configuration that applies only when the `APP_ENV` is set to `dev`.
        correct: false
      -
        value: >
          To define configuration that applies only when the `APP_ENV` is set to `prod`.
        correct: true
      -
        value: >
          To define configuration that applies to all environments.
        correct: false
      -
        value: >
          To define configuration that is deprecated.
        correct: false
    help: |
      `when@env` blocks (e.g., `when@prod`) allow you to specify configuration that is loaded only for a particular environment.
      https://symfony.com/doc/current/configuration/environments.html#environment-specific-configuration

  -
    question: >
      Which of the following is a common naming convention for controller action methods in Symfony?
    answers:
      -
        value: >
          `indexAction()` (e.g., `indexAction()`, `showAction()`).
        correct: true
      -
        value: >
          `_index()`
        correct: false
      -
        value: >
          `handleRequest()`
        correct: false
      -
        value: >
          `doSomething()`
        correct: false
    help: |
      By convention, controller action methods often end with `Action` (e.g., `indexAction`, `showAction`), though this is not strictly enforced with attributes.
      https://symfony.com/doc/current/best_practices.html#controllers

  -
    question: >
      What is the main reason for Symfony's strong emphasis on PSR compliance?
    answers:
      -
        value: >
          To make Symfony the only viable PHP framework.
        correct: false
      -
        value: >
          To ensure that Symfony applications are always faster than others.
        correct: false
      -
        value: >
          To foster a healthy ecosystem of interoperable PHP components and reduce vendor lock-in.
        correct: true
      -
        value: >
          To force developers to write more complex code.
        correct: false
    help: |
      PSR compliance promotes interoperability, allowing developers to mix and match components from different vendors and reducing reliance on a single framework.
      https://www.php-fig.org/psr/ (General philosophy of PSRs)

  -
    question: >
      What is the purpose of the `getTypes()` method in `Symfony\\Component\\PropertyInfo\\PropertyInfoExtractor`?
    answers:
      -
        value: >
          To retrieve the short description of a property.
        correct: false
      -
        value: >
          To get an array of `Symfony\\Component\\PropertyInfo\\Type` objects describing the types of a specific property.
        correct: true
      -
        value: >
          To list all properties of a class.
        correct: false
      -
        value: >
          To check if a property is readable.
        correct: false
    help: |
      The `getTypes()` method returns an array of `Type` objects, providing detailed information about a property's type, including built-in type, nullability, and collection details.
      https://symfony.com/doc/current/components/property_info.html#propertyinfoextractor-extractable-information

  -
    question: >
      Which of the following is a key benefit of Symfony's component-based architecture?
    answers:
      -
        value: >
          It forces developers to use all components in every project.
        correct: false
      -
        value: >
          It allows developers to use only the necessary parts of the framework, reducing overhead for smaller projects.
        correct: true
      -
        value: >
          It makes the framework more difficult to learn.
        correct: false
      -
        value: >
          It eliminates the need for Composer.
        correct: false
    help: |
      The component-based architecture allows developers to pick and choose only the components they need, leading to lighter and more focused applications.
      https://symfony.com/components

  -
    question: >
      What is the purpose of the `#[AsEventListener]` attribute in a Symfony application?
    answers:
      -
        value: >
          To define a new route.
        correct: false
      -
        value: >
          To automatically register a method as an event listener for a given event, simplifying event configuration.
        correct: true
      -
        value: >
          To mark a service as public.
        correct: false
      -
        value: >
          To define a console command.
        correct: false
    help: |
      The `#[AsEventListener]` attribute is used for autoconfiguration of event listeners, making it easier to define which methods should react to specific events.
      https://symfony.com/doc/current/event_dispatcher.html#registering-listeners-and-subscribers

  -
    question: >
      What is the primary role of the `PhpDocExtractor` in the Symfony PropertyInfo component?
    answers:
      -
        value: >
          To extract property information by parsing PHP code directly.
        correct: false
      -
        value: >
          To extract property information by analyzing PHPDoc annotations (e.g., `@var`, `@param`).
        correct: true
      -
        value: >
          To extract property information from database comments.
        correct: false
      -
        value: >
          To extract property information from YAML configuration.
        correct: false
    help: |
      The `PhpDocExtractor` extracts property information, such as types and descriptions, by parsing PHPDoc annotations in class and method comments.
      https://symfony.com/doc/current/components/property_info.html#using-phpdocextractor

  -
    question: >
      Which of the following is a key aspect of Symfony's approach to backward compatibility regarding deprecations?
    answers:
      -
        value: >
          Deprecated features are immediately removed in the next minor version.
        correct: false
      -
        value: >
          Deprecated features are kept indefinitely to ensure maximum compatibility.
        correct: false
      -
        value: >
          Deprecated features are marked as such and typically removed only in the next major version, providing a clear upgrade path.
        correct: true
      -
        value: >
          Deprecations are only announced in the documentation, not in the code.
        correct: false
    help: |
      Symfony uses deprecations to signal upcoming removals or changes. Deprecated features are typically removed only in the next major version, giving developers ample time to adapt.
      https://symfony.com/doc/current/contributing/code/deprecations.html

  -
    question: >
      What is the primary purpose of the `ContainerConfigurator` object when defining services in PHP?
    answers:
      -
        value: >
          To define routes.
        correct: false
      -
        value: >
          To configure the Dependency Injection Container, including services, parameters, and imports.
        correct: true
      -
        value: >
          To manage database connections.
        correct: false
      -
        value: >
          To handle HTTP requests.
        correct: false
    help: |
      The `ContainerConfigurator` is the main object used in PHP configuration files to define and configure services within the Dependency Injection Container.
      https://symfony.com/doc/current/service_container/configuration.html#configuring-services-in-php

  -
    question: >
      What is the purpose of the `strict_mode` option in Symfony's asset configuration?
    answers:
      -
        value: >
          To disable asset versioning.
        correct: false
      -
        value: >
          To assert that all requested assets are present in the manifest file, helping detect typos or missing assets.
        correct: true
      -
        value: >
          To force all assets to be loaded from a CDN.
        correct: false
      -
        value: >
          To minify all asset files automatically.
        correct: false
    help: |
      When `strict_mode` is enabled, the asset component will throw an exception if a requested asset is not found in the manifest file, which is useful for catching errors.
      https://symfony.com/doc/current/reference/configuration/framework.html#assets-strict-mode

  -
    question: >
      Which of the following is a valid way to define a prototyped array node with children in Symfony's Config component definition?
    answers:
      -
        value: |
          ```php
          $rootNode
              ->children()
                  ->arrayNode('connections')
                      ->arrayPrototype()
                          ->children()
                              ->scalarNode('driver')->end()
                          ->end()
                      ->end()
                  ->end()
              ->end();
          ```
        correct: true
      -
        value: |
          ```php
          $rootNode
              ->arrayNode('connections')
                  ->children()
                      ->scalarNode('driver')->end()
                  ->end()
              ->end();
          ```
        correct: false
      -
        value: |
          ```php
          $rootNode
              ->arrayPrototype('connections')
                  ->children()
                      ->scalarNode('driver')->end()
                  ->end()
              ->end();
          ```
        correct: false
      -
        value: |
          ```php
          $rootNode
              ->children()
                  ->arrayNode('connections')
                      ->scalarNode('driver')->end()
                  ->end()
              ->end();
          ```
        correct: false
    help: |
      The `arrayPrototype()` method is used to define a node that can appear multiple times, and its `children()` define the structure of each instance.
      https://symfony.com/doc/current/components/config/definition.html#prototyped-array-nodes

  -
    question: >
      What is the purpose of the `version_format` option in Symfony's asset configuration?
    answers:
      -
        value: >
          To specify the file format of asset files (e.g., `png`, `jpg`).
        correct: false
      -
        value: >
          To define a `sprintf` pattern for constructing asset paths, incorporating a version string for cache busting.
        correct: true
      -
        value: >
          To set the minimum required PHP version for assets.
        correct: false
      -
        value: >
          To automatically generate new asset versions.
        correct: false
    help: |
      The `version_format` option allows you to define a pattern (using `sprintf` syntax) for how the asset version is appended to the asset path, useful for cache busting.
      https://symfony.com/doc/current/reference/configuration/framework.html#assets-version-format

  -
    question: >
      Which of the following is a key characteristic of Symfony's "official best practices"?
    answers:
      -
        value: >
          They are strict rules that must be followed without exception.
        correct: false
      -
        value: >
          They are guidelines and recommendations to promote maintainable, scalable, and high-quality applications.
        correct: true
      -
        value: >
          They are only applicable to very large enterprise applications.
        correct: false
      -
        value: >
          They are automatically enforced by the framework and cannot be deviated from.
        correct: false
    help: |
      Symfony's best practices are recommendations aimed at helping developers build better applications, but they are not rigid rules.
      https://symfony.com/doc/current/best_practices.html

  -
    question: >
      What is the main benefit of using a `manifest.json` file for asset versioning in Symfony?
    answers:
      -
        value: >
          It allows for dynamic asset loading based on user preferences.
        correct: false
      -
        value: >
          It maps original asset names to their versioned (e.g., hashed) filenames, enabling efficient cache busting.
        correct: true
      -
        value: >
          It stores all asset content directly within the file.
        correct: false
      -
        value: >
          It is a replacement for Composer for managing frontend dependencies.
        correct: false
    help: |
      A `manifest.json` file (often generated by build tools like Webpack Encore) contains a mapping of original asset filenames to their versioned counterparts, which Symfony uses for cache busting.
      https://symfony.com/doc/current/frontend/encore/versioning.html

  -
    question: >
      Which of the following is a valid way to define a callable application using Symfony's Runtime component?
    answers:
      -
        value: |
          ```php
          // public/index.php
          return static function (): int {
              echo 'Hello World';
              return 0;
          };
          ```
        correct: true
      -
        value: |
          ```php
          // public/index.php
          return new App\Kernel('dev', true);
          ```
        correct: false
      -
        value: |
          ```php
          // public/index.php
          return static function (): string {
              return 'Hello World';
          };
          ```
        correct: false
      -
        value: |
          ```php
          // public/index.php
          return true;
          ```
        correct: false
    help: |
      The Runtime component allows the `public/index.php` file to return a callable that represents the application, which can then be executed.
      https://symfony.com/doc/current/components/runtime.html#defining-a-callable-application

  -
    question: >
      What is the purpose of the `getShortDescription()` method in `Symfony\\Component\\PropertyInfo\\PropertyInfoExtractor`?
    answers:
      -
        value: >
          To retrieve a brief description of a property, typically from its PHPDoc.
        correct: true
      -
        value: >
          To get the full, detailed description of a property.
        correct: false
      -
        value: >
          To get the property's type.
        correct: false
      -
        value: >
          To check if a property is writable.
        correct: false
    help: |
      The `getShortDescription()` method is used to extract a concise description of a property, often found in its PHPDoc annotation.
      https://symfony.com/doc/current/components/property_info.html#propertyinfoextractor-extractable-information

  -
    question: >
      Which of the following describes Symfony's approach to "Framework Overloading"?
    answers:
      -
        value: >
          It is the recommended way to customize any part of the framework.
        correct: false
      -
        value: >
          It refers to replacing core Symfony classes or services with custom implementations, typically as a last resort.
        correct: true
      -
        value: >
          It is a feature that allows Symfony to run on multiple web servers simultaneously.
        correct: false
      -
        value: >
          It means that Symfony automatically loads all possible bundles.
        correct: false
    help: |
      Framework overloading involves replacing or decorating core Symfony services or classes, and it's generally considered a last resort for customization.
      https://symfony.com/doc/current/cookbook/bundles/override.html (General concept of overriding)

  -
    question: >
      What is the main reason for Symfony's adherence to PHP Standard Recommendations (PSRs)?
    answers:
      -
        value: >
          To make Symfony the fastest PHP framework.
        correct: false
      -
        value: >
          To ensure code quality and consistency across the framework's components.
        correct: true
      -
        value: >
          To limit the use of third-party libraries.
        correct: false
      -
        value: >
          To force developers to use a specific IDE.
        correct: false
    help: |
      PSRs provide common standards that promote code quality, consistency, and interoperability within the PHP ecosystem.
      https://www.php-fig.org/psr/ (General benefits of PSRs)

  -
    question: >
      Which of the following is a benefit of Symfony Flex's recipe system?
    answers:
      -
        value: >
          It allows for manual configuration of every new package.
        correct: false
      -
        value: >
          It automates common setup tasks, reducing boilerplate and ensuring consistent project structure.
        correct: true
      -
        value: >
          It replaces the need for version control systems.
        correct: false
      -
        value: >
          It only works for Symfony-specific packages.
        correct: false
    help: |
      Flex recipes automate the integration of packages, saving time and ensuring consistency in project setup.
      https://symfony.com/doc/current/setup/flex.html#what-is-a-recipe

  -
    question: >
      What is the purpose of the `isInitializable()` method in `Symfony\\Component\\PropertyInfo\\PropertyInitializableExtractorInterface`?
    answers:
      -
        value: >
          To check if a property has a default value.
        correct: false
      -
        value: >
          To determine if a property can be initialized via the constructor or a setter.
        correct: true
      -
        value: >
          To check if a property is private.
        correct: false
      -
        value: >
          To get the initial value of a property.
        correct: false
    help: |
      The `isInitializable()` method indicates whether a property can be set during object construction or via a setter method.
      https://symfony.com/doc/current/components/property_info.html#propertyinfo-component-interfaces

  -
    question: >
      Which of the following is a key aspect of Symfony's "Backward Compatibility Promise"?
    answers:
      -
        value: >
          It applies only to minor versions, not major versions.
        correct: false
      -
        value: >
          It ensures that applications built with older Symfony versions will always run on the latest PHP versions without any changes.
        correct: false
      -
        value: >
          It guarantees that public APIs will remain stable within a major version, facilitating upgrades.
        correct: true
      -
        value: >
          It means that no new features will be added to existing major versions.
        correct: false
    help: |
      The B.C. promise is a commitment to stability of public APIs within a major version, which simplifies the upgrade process for developers.
      https://symfony.com/doc/current/contributing/code/bc.html

  -
    question: >
      What is the primary role of the `RouterInterface` in Symfony?
    answers:
      -
        value: >
          To handle database connections.
        correct: false
      -
        value: >
          To generate URLs for named routes and match incoming URLs to defined routes.
        correct: true
      -
        value: >
          To manage user sessions.
        correct: false
      -
        value: >
          To send emails.
        correct: false
    help: |
      The `RouterInterface` defines the contract for routing, including matching URLs to routes and generating URLs from route names.
      https://symfony.com/doc/current/components/routing.html

  -
    question: >
      Which of the following best describes the "Code Organization" principles in Symfony?
    answers:
      -
        value: >
          All code should be placed in a single `app.php` file.
        correct: false
      -
        value: >
          Code should be organized into logical directories like `src/`, `config/`, `public/`, promoting separation of concerns.
        correct: true
      -
        value: >
          Code organization is left entirely to the developer's discretion without any recommendations.
        correct: false
      -
        value: >
          Only controllers should be placed in the `src/` directory.
        correct: false
    help: |
      Symfony provides a clear directory structure and encourages organizing code logically to promote maintainability and scalability.
      https://symfony.com/doc/current/setup/directory_structure.html

  -
    question: >
      What is the purpose of the `#[AsCommand]` attribute in a Symfony console command?
    answers:
      -
        value: >
          To define the command's name and description.
        correct: true
      -
        value: >
          To inject services into the command.
        correct: false
      -
        value: >
          To execute the command automatically.
        correct: false
      -
        value: >
          To link the command to a specific controller.
        correct: false
    help: |
      The `#[AsCommand]` attribute is used to configure the command's name, description, and other options directly in the class.
      https://symfony.com/doc/current/console.html#configuring-the-command