category: Symfony Architecture

questions:
  -
    question: >
      What is the primary purpose of Symfony Flex in a Symfony 7 application?
    answers:
      - { value: 'To manage database migrations.', correct: false }
      - { value: 'To simplify and automate the installation and management of Symfony packages and their dependencies.', correct: true }
      - { value: 'To provide a graphical user interface for Symfony applications.', correct: false }
      - { value: 'To replace Composer as the primary dependency manager.', correct: false }
    help: |
      Symfony Flex is a Composer plugin that simplifies the installation and management of Symfony packages by automating common tasks like recipe execution and configuration.
      https://symfony.com/doc/current/setup/flex.html

  -
    question: >
      Which of the following best describes a Symfony Component?
    answers:
      - { value: 'A full-stack framework for web development.', correct: false }
      - { value: 'A standalone PHP library that provides a specific feature and can be used independently of the full Symfony framework.', correct: true }
      - { value: 'A database abstraction layer for Symfony applications.', correct: false }
      - { value: 'A tool for managing front-end assets.', correct: false }
    help: |
      Symfony Components are reusable PHP libraries that solve common web development problems. They are decoupled and can be used in any PHP project, not just Symfony applications.
      https://symfony.com/doc/current/components/index.html

  -
    question: |
      In a modern Symfony 7 application, what is the recommended approach for organizing your application's code, replacing the traditional "bundle" concept for application-specific code?
    answers:
      - { value: 'Using a single large bundle for the entire application.', correct: false }
      - { value: 'Organizing code directly under the `src/` directory using PHP namespaces (e.g., `App\\`).', correct: true }
      - { value: 'Creating multiple small bundles for each feature.', correct: false }
      - { value: 'Storing all code in the `var/` directory.', correct: false }
    help: |
      For application-specific code, the recommended approach in modern Symfony applications is to organize code directly under the `src/` directory using standard PHP namespaces, typically `App\\`. Bundles are still used for reusable third-party code.
      https://symfony.com/doc/current/best_practices.html#code-organization

  -
    question: >
      What is the purpose of the `public/index.php` file in a Symfony 7 application?
    answers:
      - { value: 'It serves as the main entry point for all web requests.', correct: true }
      - { value: 'It contains all the application''s routing definitions.', correct: false }
      - { value: 'It stores environment variables for the application.', correct: false }
      - { value: 'It is responsible for database connection.', correct: false }
    help: |
      The `public/index.php` file is the front controller. All web requests are routed through this file, which then bootstraps the Symfony application and handles the request.
      https://symfony.com/doc/current/introduction/symfony_architecture.html#the-front-controller

  -
    question: >
      Which Symfony component is responsible for handling and dispatching events throughout the application lifecycle?
    answers:
      - { value: 'The HttpKernel Component.', correct: false }
      - { value: 'The EventDispatcher Component.', correct: true }
      - { value: 'The Routing Component.', correct: false }
      - { value: 'The DependencyInjection Component.', correct: false }
    help: |
      The EventDispatcher Component provides tools to implement the Observer design pattern, allowing different parts of your application to communicate by dispatching and listening for events.
      https://symfony.com/doc/current/components/event_dispatcher.html

  -
    question: >
      When an unhandled exception occurs in a Symfony 7 application during a web request, which component is primarily responsible for converting it into an appropriate HTTP response?
    answers:
      - { value: 'The Console Component.', correct: false }
      - { value: 'The HttpKernel Component (specifically, its exception handling mechanism).', correct: true }
      - { value: 'The Security Component.', correct: false }
      - { value: 'The Form Component.', correct: false }
    help: |
      The HttpKernel component catches exceptions thrown during the request handling process and converts them into appropriate HTTP responses, often by rendering an error page.
      https://symfony.com/doc/current/controller/error_pages.html

  -
    question: >
      What does Symfony's Backward Compatibility Promise (BCP) primarily guarantee for minor releases (e.g., from 7.0 to 7.1)?
    answers:
      - { value: 'That no public API will be changed or removed.', correct: false }
      - { value: 'That no new features will be introduced.', correct: false }
      - { value: 'That applications will continue to work without requiring code changes, unless explicitly marked as deprecated.', correct: true }
      - { value: 'That all dependencies will remain the same.', correct: false }
    help: |
      The Backward Compatibility Promise ensures that minor releases of Symfony (e.g., 7.0 to 7.1) will not introduce breaking changes to public APIs unless those APIs were explicitly deprecated in a previous minor release.
      https://symfony.com/doc/current/contributing/code/bc.html

  -
    question: >
      When a feature or method is deprecated in Symfony 7, what is the recommended best practice for developers to follow?
    answers:
      - { value: 'Immediately remove all usage of the deprecated feature.', correct: false }
      - { value: 'Ignore the deprecation warnings until a major version upgrade.', correct: false }
      - { value: 'Update their code to use the new recommended approach as soon as feasible, typically before the next major version.', correct: true }
      - { value: 'Downgrade to an older Symfony version that does not have the deprecation.', correct: false }
    help: |
      Deprecations are a warning system. Developers should update their code to use the new, non-deprecated approach to ensure compatibility with future major Symfony versions.
      https://symfony.com/doc/current/contributing/code/bc.html#deprecations

  -
    question: >
      Symfony adheres to several PHP Standard Recommendations (PSRs). Which PSR defines the common interfaces for HTTP messages (requests and responses)?
    answers:
      - { value: 'PSR-3 (Logger Interface)', correct: false }
      - { value: 'PSR-7 (HTTP Message Interfaces)', correct: true }
      - { value: 'PSR-4 (Autoloading Standard)', correct: false }
      - { value: 'PSR-11 (Container Interface)', correct: false }
    help: |
      Symfony's HttpFoundation component provides an object-oriented layer for the HTTP specification, implementing interfaces defined by PSR-7 for HTTP messages.
      https://www.php-fig.org/psr/psr-7/

  -
    question: >
      According to Symfony's naming conventions, what is the typical suffix for a class that acts as a service and is designed to perform a specific action or task?
    answers:
      - { value: '`Controller`', correct: false }
      - { value: '`Repository`', correct: false }
      - { value: '`Manager` or `Handler` or `Processor`', correct: true }
      - { value: '`Bundle`', correct: false }
    help: |
      While not strictly enforced, common Symfony best practices suggest suffixes like `Manager`, `Handler`, `Processor`, or `Service` for classes that encapsulate business logic or specific operations.
      https://symfony.com/doc/current/best_practices.html#naming-conventions