category: Miscellaneous

questions:
  -
    question: >
      Which Symfony component is primarily responsible for defining and processing configuration schemas for bundles and applications?
    answers:
      - { value: "Symfony\\Component\\Config", correct: true }
      - { value: "Symfony\\Component\\DependencyInjection", correct: false }
      - { value: "Symfony\\Component\\HttpKernel", correct: false }
      - { value: "Symfony\\Component\\Yaml", correct: false }
    help: |
      The Config component provides tools to define and validate configuration schemas, ensuring that configuration files adhere to a predefined structure.
      https://symfony.com/doc/current/components/config/definition.html

  -
    question: |
      Given the following `AbstractBundle` implementation, which method is used to define the bundle's configuration tree?

      ```php
      namespace Acme\SocialBundle;

      use Symfony\Component\Config\Definition\Configurator\DefinitionConfigurator;
      use Symfony\Component\HttpKernel\Bundle\AbstractBundle;

      class AcmeSocialBundle extends AbstractBundle
      {
          public function configure(DefinitionConfigurator $definition): void
          {
              // ... configuration definition
          }

          public function loadExtension(array $config, ContainerConfigurator $container, ContainerBuilder $builder): void
          {
              // ... load extension
          }
      }
      ```
    answers:
      - { value: "`configure()`", correct: true }
      - { value: "`loadExtension()`", correct: false }
      - { value: "`build()`", correct: false }
      - { value: "`getConfigTreeBuilder()`", correct: false }
    help: |
      In Symfony 7, bundles extending `AbstractBundle` define their configuration schema within the `configure()` method, which receives a `DefinitionConfigurator` object.
      https://symfony.com/doc/current/bundles/configuration.html#define-and-load-custom-bundle-configuration

  -
    question: >
      Which console command can you use to display the actual configuration values used by your Symfony application for a specific bundle, including resolved environment variables?
    answers:
      - { value: "`php bin/console debug:config framework`", correct: true }
      - { value: "`php bin/console config:dump-reference framework`", correct: false }
      - { value: "`php bin/console debug:container --parameters`", correct: false }
      - { value: "`php bin/console config:show framework`", correct: false }
    help: |
      The `debug:config` command displays the actual configuration values used by your application, while `config:dump-reference` shows the default values.
      https://symfony.com/doc/current/reference/configuration/framework.html#display-symfony-frameworkbundle-configuration

  -
    question: >
      Which of the following `arrayNode` options in Symfony's Config component allows extra configuration keys to be specified under an array without throwing an exception?
    answers:
      - { value: "`ignoreExtraKeys()`", correct: true }
      - { value: "`allowExtraKeys()`", correct: false }
      - { value: "`normalizeKeys(false)`", correct: false }
      - { value: "`useAttributeAsKey()`", correct: false }
    help: |
      The `ignoreExtraKeys()` method on an `ArrayNodeDefinition` allows the configuration to contain keys not explicitly defined in the schema without causing an error.
      https://symfony.com/doc/current/components/config/definition.html#arraynode-configuration-options-reference

  -
    question: >
      What is the purpose of the `#[WithHttpStatus]` attribute in Symfony's error handling?
    answers:
      - { value: "To automatically map an HTTP status code and response headers to a custom exception.", correct: true }
      - { value: "To log the exception with a specific HTTP status code.", correct: false }
      - { value: "To define a custom error page for the exception.", correct: false }
      - { value: "To prevent the exception from being logged.", correct: false }
    help: |
      The `#[WithHttpStatus]` attribute allows you to define the HTTP status code and optional headers that should be returned when a custom exception is thrown.
      https://symfony.com/doc/current/reference/configuration/framework.html#map-http-status-and-headers-with-withhttpstatus-attribute

  -
    question: |
      When handling exceptions in a Symfony console command, which event should you listen to for custom error handling or exception modification?
    answers:
      - { value: "`ConsoleEvents::ERROR`", correct: true }
      - { value: "`KernelEvents::EXCEPTION`", correct: false }
      - { value: "`ConsoleEvents::TERMINATE`", correct: false }
      - { value: "`ConsoleEvents::COMMAND`", correct: false }
    help: |
      The `ConsoleEvents::ERROR` event is dispatched whenever an exception occurs during the execution of a console command, allowing listeners to intervene.
      https://symfony.com/doc/current/components/console/events.html#handle-exceptions-with-consoleevents-error-listener

  -
    question: >
      Which method of the `Symfony\\Component\\Process\\Process` class will throw a `ProcessFailedException` if the command exits with a non-zero status code?
    answers:
      - { value: "`mustRun()`", correct: true }
      - { value: "`run()`", correct: false }
      - { value: "`isSuccessful()`", correct: false }
      - { value: "`getOutput()`", correct: false }
    help: |
      The `mustRun()` method is similar to `run()` but enforces successful execution by throwing an exception on failure.
      https://symfony.com/doc/current/components/process.html#execute-command-and-enforce-success-with-mustrun-in-symfony-process

  -
    question: |
      When handling file uploads in a Symfony controller, which exception class is the base for all file upload errors?
    answers:
      - { value: "Symfony\\Component\\HttpFoundation\\File\\Exception\\FileException", correct: true }
      - { value: "Symfony\\Component\\Filesystem\\Exception\\IOException", correct: false }
      - { value: "Symfony\\Component\\HttpKernel\\Exception\\HttpException", correct: false }
      - { value: "Symfony\\Component\\HttpFoundation\\File\\Exception\\UploadException", correct: false }
    help: |
      All specific file upload exceptions in Symfony extend `Symfony\\Component\\HttpFoundation\\File\\Exception\\FileException`.
      https://symfony.com/doc/current/controller/upload_file.html#symfony-file-upload-exception-classes

  -
    question: >
      Which console command is used to list all available services that can be automatically wired into Symfony classes?
    answers:
      - { value: "`php bin/console debug:autowiring`", correct: true }
      - { value: "`php bin/console debug:container`", correct: false }
      - { value: "`php bin/console debug:router`", correct: false }
      - { value: "`php bin/console debug:service`", correct: false }
    help: |
      The `debug:autowiring` command displays a list of all services that Symfony's autowiring can inject.
      https://symfony.com/doc/current/service_container/debug.html#debug-symfony-autowiring-services

  -
    question: >
      Which Twig filter is used to generate an excerpt of a code file around a specified line number, useful for debugging?
    answers:
      - { value: "`file_excerpt`", correct: true }
      - { value: "`code_excerpt`", correct: false }
      - { value: "`dump`", correct: false }
      - { value: "`source_code`", correct: false }
    help: |
      The `file_excerpt` Twig filter generates a snippet of a file's content around a given line, often used in error pages or debugging tools.
      https://symfony.com/doc/current/reference/twig_reference.html#generate-code-file-excerpt-twig

  -
    question: >
      What is the purpose of the `symfony/debug-pack` Composer package?
    answers:
      - { value: "To install common debugging tools and bundles for Symfony applications, including the WebProfiler.", correct: true }
      - { value: "To enable Xdebug for PHP applications.", correct: false }
      - { value: "To provide a standalone debugging console.", correct: false }
      - { value: "To optimize application performance in debug mode.", correct: false }
    help: |
      The `symfony/debug-pack` installs a collection of development-time tools, including the WebProfilerBundle, for enhanced debugging.
      https://symfony.com/doc/current/mercure.html#install-symfony-debug-pack-for-mercure-debugging

  -
    question: >
      Which command clears and warms up the Symfony cache specifically for the production environment?
    answers:
      - { value: "`APP_ENV=prod APP_DEBUG=0 php bin/console cache:clear`", correct: true }
      - { value: "`php bin/console cache:clear --env=prod`", correct: false }
      - { value: "`php bin/console cache:warmup --env=prod`", correct: false }
      - { value: "`php bin/console cache:clear --no-debug`", correct: false }
    help: |
      To clear and warm up the cache for production, you must explicitly set `APP_ENV=prod` and `APP_DEBUG=0` before running the `cache:clear` command.
      https://symfony.com/doc/current/deployment.html#clear-symfony-production-cache

  -
    question: >
      What is the recommended Composer command to install all required dependencies for a production Symfony environment, excluding development packages and optimizing the autoloader?
    answers:
      - { value: "`composer install --no-dev --optimize-autoloader`", correct: true }
      - { value: "`composer update --no-dev --optimize-autoloader`", correct: false }
      - { value: "`composer install --prod --classmap-authoritative`", correct: false }
      - { value: "`composer dump-autoload --optimize --no-dev`", correct: false }
    help: |
      The `--no-dev` flag excludes development dependencies, and `--optimize-autoloader` builds an optimized class map for faster autoloading in production.
      https://symfony.com/doc/current/deployment.html#install-production-composer-dependencies

  -
    question: >
      Which `composer.json` setting is used to specify a custom path for the `.env` file within your Symfony application?
    answers:
      - { value: "`extra.runtime.dotenv_path`", correct: true }
      - { value: "`config.dotenv_path`", correct: false }
      - { value: "`extra.dotenv_file`", correct: false }
      - { value: "`runtime.env_file`", correct: false }
    help: |
      The `dotenv_path` option under `extra.runtime` in `composer.json` allows you to define a non-default location for your `.env` file.
      https://symfony.com/doc/current/configuration.html#configure-custom-dotenv-path-in-composer-json

  -
    question: >
      What is the purpose of the `container.hot_path` tag in Symfony's Dependency Injection Component?
    answers:
      - { value: "To identify services that are always needed for application bootstrapping, causing their dependencies to be inlined for performance.", correct: true }
      - { value: "To mark services that should be loaded lazily to improve startup time.", correct: false }
      - { value: "To define services that can be accessed from any part of the application without explicit injection.", correct: false }
      - { value: "To prevent services from being removed during container compilation.", correct: false }
    help: |
      The `container.hot_path` tag is applied to critical bootstrapping services to optimize performance by inlining their dependencies and bypassing the autoloader.
      https://symfony.com/doc/current/reference/dic_tags.html#api-documentation-for-container-hot-path-tag

  -
    question: >
      Which of the following commands generates an optimized `.env.local.php` file for the production environment?
    answers:
      - { value: "`composer dump-env prod`", correct: true }
      - { value: "`php bin/console dotenv:dump prod`", correct: false }
      - { value: "`composer install --optimize-env`", correct: false }
      - { value: "`php bin/console cache:warmup --env=prod --dotenv`", correct: false }
    help: |
      The `composer dump-env prod` command creates an optimized `.env.local.php` file, which is faster to load than parsing the `.env` file at runtime.
      https://symfony.com/doc/current/deployment.html#generate-optimized-symfony-environment-file

  -
    question: >
      Which Symfony Cache component class is used to store cached data in the filesystem?
    answers:
      - { value: "Symfony\\Component\\Cache\\Adapter\\FilesystemAdapter", correct: true }
      - { value: "Symfony\\Component\\Cache\\Adapter\\RedisAdapter", correct: false }
      - { value: "Symfony\\Component\\Cache\\Adapter\\ApcuAdapter", correct: false }
      - { value: "Symfony\\Component\\Cache\\Adapter\\PdoAdapter", correct: false }
    help: |
      `FilesystemAdapter` is the cache adapter that stores cache items as files on the local filesystem.
      https://symfony.com/doc/current/components/cache.html#instantiate-symfony-filesystem-cache-adapter

  -
    question: >
      What is the primary purpose of the `beta` parameter in `CacheInterface::get()`?
    answers:
      - { value: "To enable probabilistic early expiration to prevent cache stampedes.", correct: true }
      - { value: "To define the cache item's lifetime in seconds.", correct: false }
      - { value: "To set a custom cache key prefix.", correct: false }
      - { value: "To specify the cache pool to use.", correct: false }
    help: |
      The `beta` parameter (a float between 0 and 1.0) is used to implement probabilistic early expiration, which helps prevent cache stampedes by recomputing values slightly before their full expiration.
      https://symfony.com/doc/current/components/cache.html#configure-probabilistic-early-expiration-for-cache-stampede-prevention-in-php

  -
    question: >
      Which console command clears all cache items across every configured cache pool in a Symfony application?
    answers:
      - { value: "`php bin/console cache:pool:clear --all`", correct: true }
      - { value: "`php bin/console cache:clear`", correct: false }
      - { value: "`php bin/console cache:pool:clear cache.app_clearer`", correct: false }
      - { value: "`php bin/console cache:pool:clear cache.global_clearer`", correct: false }
    help: |
      The `--all` option with `cache:pool:clear` command clears all cache pools.
      https://symfony.com/doc/current/cache.html#clear-all-cache-pools-in-symfony

  -
    question: >
      Which interface must a cache pool implement to support tag-based invalidation?
    answers:
      - { value: "Symfony\\Contracts\\Cache\\TagAwareCacheInterface", correct: true }
      - { value: "Psr\\Cache\\CacheItemPoolInterface", correct: false }
      - { value: "Symfony\\Contracts\\Cache\\CacheInterface", correct: false }
      - { value: "Symfony\\Component\\Cache\\PruneableInterface", correct: false }
    help: |
      The `TagAwareCacheInterface` provides methods for associating tags with cache items and invalidating items by tags.
      https://symfony.com/doc/current/components/cache/cache_invalidation.html#symfony-cache-component-interfaces-and-methods-api

  -
    question: >
      Which of the following is a core responsibility of a "Middleware" in Symfony Messenger?
    answers:
      - { value: "To access the message and its envelope during dispatch.", correct: true }
      - { value: "To serialize and send messages to a message broker.", correct: false }
      - { value: "To retrieve, deserialize, and forward messages to handlers.", correct: false }
      - { value: "To handle messages using the business logic applicable to the messages.", correct: false }
    help: |
      Middleware components in Symfony Messenger can inspect and modify the message envelope as it passes through the bus, handling cross-cutting concerns.
      https://symfony.com/doc/current/components/messenger.html#symfony-messenger-component-core-concepts

  -
    question: |
      Which attribute is used to automatically register a Symfony Messenger message handler class?
    answers:
      - { value: "`#[AsMessageHandler]`", correct: true }
      - { value: "`#[MessageHandler]`", correct: false }
      - { value: "`#[MessageSubscriber]`", correct: false }
      - { value: "`#[AsService]`", correct: false }
    help: |
      The `#[AsMessageHandler]` attribute is used to auto-register a class as a message handler in Symfony Messenger.
      https://symfony.com/doc/current/messenger.html#create-a-message-handler-smsnotificationhandler

  -
    question: >
      Which Symfony Messenger console command allows you to view all messages currently in a specified failure transport?
    answers:
      - { value: "`php bin/console messenger:failed:show --transport=failure_transport`", correct: true }
      - { value: "`php bin/console messenger:failed:list --transport=failure_transport`", correct: false }
      - { value: "`php bin/console messenger:consume --failed --transport=failure_transport`", correct: false }
      - { value: "`php bin/console debug:messenger --failed-messages`", correct: false }
    help: |
      The `messenger:failed:show` command is used to inspect messages in a failure transport.
      https://symfony.com/doc/current/messenger.html#manage-failed-symfony-messenger-messages-via-cli

  -
    question: >
      What is the recommended approach to pass only the primary key (ID) of a Doctrine entity in a Symfony Messenger message, instead of the full object?
    answers:
      - { value: "Create a message class that holds only the entity's ID, and then re-fetch the entity in the handler.", correct: true }
      - { value: "Serialize the full entity object directly into the message payload.", correct: false }
      - { value: "Use a custom normalizer to convert the entity to its ID during serialization.", correct: false }
      - { value: "Inject the EntityManager into the message class to lazy-load the entity.", correct: false }
    help: |
      Passing only the entity ID and re-fetching in the handler avoids serialization issues and ensures the handler works with a fresh, up-to-date entity object.
      https://symfony.com/doc/current/messenger.html#pass-doctrine-entity-id-in-symfony-messenger-message

  -
    question: >
      Which Symfony Mime component class is used as a high-level API for composing email messages with chainable methods for recipients, subject, and content?
    answers:
      - { value: "Symfony\\Component\\Mime\\Email", correct: true }
      - { value: "Symfony\\Component\\Mime\\Message", correct: false }
      - { value: "Symfony\\Component\\Mime\\RawMessage", correct: false }
      - { value: "Symfony\\Component\\Mime\\Part\\TextPart", correct: false }
    help: |
      The `Email` class provides a fluent interface for building common email messages.
      https://symfony.com/doc/current/components/mime.html#compose-email-with-symfony-mime-high-level-api

  -
    question: >
      When embedding an image in an HTML email using Symfony Mime, which part type should be used for the image itself to allow referencing it via `cid:`?
    answers:
      - { value: "DataPart", correct: true }
      - { value: "RelatedPart", correct: false }
      - { value: "MixedPart", correct: false }
      - { value: "AlternativePart", correct: false }
    help: |
      `DataPart` is used for embedding files (like images) that can be referenced by a Content-ID (`cid:`). `RelatedPart` is used to group related parts, such as an HTML body and its embedded images.
      https://symfony.com/doc/current/components/mime.html#embed-images-and-attach-files-to-symfony-mime-email

  -
    question: >
      Which Twig extension is commonly used with Symfony Mime to automatically inline CSS styles into HTML email templates?
    answers:
      - { value: "twig/cssinliner-extra", correct: true }
      - { value: "twig/html-inliner", correct: false }
      - { value: "twig/style-converter", correct: false }
      - { value: "twig/email-formatter", correct: false }
    help: |
      The `twig/cssinliner-extra` package provides the `CssInlinerExtension` for Twig, which inlines CSS into HTML, crucial for consistent email rendering.
      https://symfony.com/doc/current/components/mime.html#enable-css-inliner-extension-in-twig

  -
    question: >
      Which Symfony component is used to guess the MIME type of a file based on its content, not just its extension?
    answers:
      - { value: "Symfony\\Component\\Mime\\MimeTypes", correct: true }
      - { value: "Symfony\\Component\\HttpFoundation\\File\\MimeType\\MimeTypeGuesser", correct: false }
      - { value: "Symfony\\Component\\Filesystem\\Filesystem", correct: false }
      - { value: "Symfony\\Component\\HttpFoundation\\File\\File", correct: false }
    help: |
      The `MimeTypes` class provides methods to guess MIME types from file paths, typically using the `fileinfo` PHP extension for content inspection.
      https://symfony.com/doc/current/components/mime.html#guess-file-mime-type-with-symfony-mimetypes

  -
    question: >
      Which Symfony component is specifically designed for finding files and directories based on various criteria like name, size, date, and content?
    answers:
      - { value: "Symfony\\Component\\Finder", correct: true }
      - { value: "Symfony\\Component\\Filesystem", correct: false }
      - { value: "Symfony\\Component\\Process", correct: false }
      - { value: "Symfony\\Component\\Config", correct: false }
    help: |
      The Finder component provides a fluent interface for searching files and directories.
      https://symfony.com/doc/current/components/finder.html#basic-usage-of-symfony-finder-to-locate-files

  -
    question: >
      Which method of the Symfony Finder component allows you to specify multiple directories to search within?
    answers:
      - { value: "`in()` (can be chained or take an array)", correct: true }
      - { value: "`directories()`", correct: false }
      - { value: "`from()`", correct: false }
      - { value: "`addDirectory()`", correct: false }
    help: |
      The `in()` method accepts either a single directory path or an array of paths. Multiple calls to `in()` are also cumulative.
      https://symfony.com/doc/current/components/finder.html#specify-multiple-search-locations-with-symfony-finder

  -
    question: >
      To exclude files from a Symfony Finder search based on `.gitignore` rules, which method should you use?
    answers:
      - { value: "`ignoreVCSIgnored(true)`", correct: true }
      - { value: "`ignoreVCS(true)`", correct: false }
      - { value: "`excludeGitignore()`", correct: false }
      - { value: "`filter('.gitignore')`", correct: false }
    help: |
      The `ignoreVCSIgnored()` method excludes files and directories that match patterns found in `.gitignore` files within the search path.
      https://symfony.com/doc/current/components/finder.html#exclude-files-based-on-gitignore-rules

  -
    question: >
      Which method of the Symfony Finder component is used to limit the directory traversal depth?
    answers:
      - { value: "`depth()`", correct: true }
      - { value: "`maxDepth()`", correct: false }
      - { value: "`limitDepth()`", correct: false }
      - { value: "`traverseDepth()`", correct: false }
    help: |
      The `depth()` method allows you to specify an exact depth, a maximum depth, or a depth range for the search.
      https://symfony.com/doc/current/components/finder.html#restrict-symfony-finder-traversal-depth

  -
    question: >
      What is the primary purpose of the `Symfony\\Component\\Lock\\LockFactory`?
    answers:
      - { value: "To create and manage lock instances based on a configured store.", correct: true }
      - { value: "To acquire and release locks directly without a store.", correct: false }
      - { value: "To define the lock's Time To Live (TTL).", correct: false }
      - { value: "To persist lock information to a database.", correct: false }
    help: |
      The `LockFactory` is the entry point for creating lock objects, and it requires a `Store` implementation to manage the actual locking mechanism.
      https://symfony.com/doc/current/components/lock.html#initialize-symfony-lockfactory

  -
    question: >
      Which method of a `Lock` object should you use to extend its lifetime during a long-running task?
    answers:
      - { value: "`refresh()`", correct: true }
      - { value: "`extend()`", correct: false }
      - { value: "`renew()`", correct: false }
      - { value: "`updateTtl()`", correct: false }
    help: |
      The `refresh()` method resets the lock's Time To Live (TTL) to its original value or a custom value, preventing it from expiring prematurely.
      https://symfony.com/doc/current/components/lock.html#refresh-an-expiring-lock-for-long-running-tasks-in-symfony

  -
    question: >
      Which `Lock` store implementation uses the local filesystem and does not support expiration, but automatically releases locks when the PHP process ends?
    answers:
      - { value: "FlockStore", correct: true }
      - { value: "RedisStore", correct: false }
      - { value: "PdoStore", correct: false }
      - { value: "MemcachedStore", correct: false }
    help: |
      `FlockStore` uses PHP's native `flock()` function for file-based locking, which is local and does not have explicit expiration.
      https://symfony.com/doc/current/components/lock.html#initialize-symfony-flockstore-for-file-system-locks

  -
    question: >
      When using `LockableTrait` in a Symfony console command, which method should you call to prevent multiple instances of the command from running simultaneously?
    answers:
      - { value: "`lock()`", correct: true }
      - { value: "`acquireLock()`", correct: false }
      - { value: "`isLocked()`", correct: false }
      - { value: "`preventConcurrent()`", correct: false }
    help: |
      The `lock()` method provided by `LockableTrait` attempts to acquire a lock, preventing other instances of the command from running.
      https://symfony.com/doc/current/console/lockable_trait.html#preventing-concurrent-command-execution-with-lockabletrait

  -
    question: >
      Which Symfony component provides tools for collecting and presenting rich profiling information about HTTP requests and console commands?
    answers:
      - { value: "WebProfilerBundle", correct: true }
      - { value: "DebugBundle", correct: false }
      - { value: "MonologBundle", correct: false }
      - { value: "TwigBundle", correct: false }
    help: |
      The WebProfilerBundle integrates the Symfony Profiler into your web application, providing detailed insights into requests.
      https://symfony.com/doc/current/profiler.html

  -
    question: >
      Which HTTP header typically contains a link to the Symfony Profiler for a specific request?
    answers:
      - { value: "`X-Debug-Token-Link`", correct: true }
      - { value: "`X-Profiler-Url`", correct: false }
      - { value: "`Location`", correct: false }
      - { value: "`X-Symfony-Debug`", correct: false }
    help: |
      The `X-Debug-Token-Link` header provides a direct URL to the Symfony Profiler for the current request's token.
      https://symfony.com/doc/current/contributing/code/stack_trace.html#retrieving-symfony-profiler-link-from-api-response-headers

  -
    question: >
      Which console command can you use to inspect the configuration values for the WebProfilerBundle, including default and actual settings?
    answers:
      - { value: "`php bin/console debug:config web_profiler`", correct: true }
      - { value: "`php bin/console config:dump-reference web_profiler`", correct: true }
      - { value: "`php bin/console debug:profiler`", correct: false }
      - { value: "`php bin/console profiler:show-config`", correct: false }
    help: |
      `debug:config` shows the actual configuration, while `config:dump-reference` shows the default configuration for a bundle.
      https://symfony.com/doc/current/reference/configuration/web_profiler.html#inspect-symfony-webprofilerbundle-configuration

  -
    question: >
      What is the purpose of the `only_exceptions` option in the Symfony Profiler configuration?
    answers:
      - { value: "To collect profiling data only for requests that result in an exception.", correct: true }
      - { value: "To display only exception-related data in the Web Debug Toolbar.", correct: false }
      - { value: "To prevent the profiler from collecting data for successful requests.", correct: false }
      - { value: "To enable profiling only in the 'dev' environment.", correct: false }
    help: |
      The `only_exceptions` option (e.g., `profiler: { only_exceptions: true }`) configures the profiler to collect data only when an exception occurs.
      https://symfony.com/doc/current/reference/configuration/framework.html#configure-symfony-framework-settings-in-multiple-formats

  -
    question: >
      Which class in the Symfony Intl component is used to retrieve names for all available locales or a specific locale?
    answers:
      - { value: "Symfony\\Component\\Intl\\Locales", correct: true }
      - { value: "Symfony\\Component\\Intl\\Languages", correct: false }
      - { value: "Symfony\\Component\\Intl\\Countries", correct: false }
      - { value: "Symfony\\Component\\Intl\\Timezones", correct: false }
    help: |
      The `Locales` class provides static methods to get locale names and check their existence.
      https://symfony.com/doc/current/components/intl.html#access-locale-names-and-information

  -
    question: >
      Which of the following is the correct way to specify fallback locales for translations in Symfony?
    answers:
      - { value: "Configure `framework.translator.fallbacks` in `config/packages/translation.yaml`.", correct: true }
      - { value: "Set `default_locale` to an array of locales.", correct: false }
      - { value: "Define `translator.fallback_locales` in `services.yaml`.", correct: false }
      - { value: "Use the `TranslatorInterface::setFallbackLocales()` method.", correct: false }
    help: |
      The `fallbacks` option under `framework.translator` allows you to define a list of locales to try if a translation is not found for the current locale.
      https://symfony.com/doc/current/translation.html#configure-fallback-translation-locales-in-symfony

  -
    question: >
      What is the purpose of the `_locale` routing parameter in Symfony?
    answers:
      - { value: "It automatically sets the request locale based on the URL.", correct: true }
      - { value: "It defines the default locale for the entire application.", correct: false }
      - { value: "It is used to translate route names.", correct: false }
      - { value: "It forces a specific locale for all generated URLs.", correct: false }
    help: |
      When `_locale` is included in a route pattern, Symfony automatically sets the request's locale to the value matched by this parameter.
      https://symfony.com/doc/current/translation.html#configure-locale-parameter-in-symfony-routes

  -
    question: >
      Which class in the Symfony Intl component is used to retrieve timezone IDs associated with a given country code?
    answers:
      - { value: "Symfony\\Component\\Intl\\Timezones", correct: true }
      - { value: "Symfony\\Component\\Intl\\Locales", correct: false }
      - { value: "Symfony\\Component\\Intl\\Countries", correct: false }
      - { value: "Symfony\\Component\\Intl\\Dates", correct: false }
    help: |
      The `Timezones` class provides static methods to get timezone information, including timezones for a specific country code.
      https://symfony.com/doc/current/components/intl.html#retrieve-timezone-names-by-locale-php

  -
    question: >
      What is the purpose of the `Symfony\\Component\\Runtime` component?
    answers:
      - { value: "To decouple the application from the global state and allow different ways to run PHP applications (e.g., web, console, serverless).", correct: true }
      - { value: "To provide a new dependency injection container for Symfony applications.", correct: false }
      - { value: "To manage environment variables and secrets.", correct: false }
      - { value: "To optimize the autoloading process for production environments.", correct: false }
    help: |
      The Runtime component provides a thin layer that bootstraps the application, allowing it to run in various environments (e.g., traditional web servers, CLI, serverless functions) without modifying the core application code.
      https://symfony.com/doc/current/components/runtime.html#install-symfony-runtime-component-via-composer

  -
    question: |
      Which of the following is a valid return type for the callable in `public/index.php` when using the Symfony Runtime component for a web application?
    answers:
      - { value: "An instance of `Symfony\\Component\\HttpKernel\\Kernel`", correct: true }
      - { value: "An instance of `Symfony\\Component\\HttpFoundation\\Response`", correct: true }
      - { value: "An instance of `Symfony\\Component\\Console\\Application`", correct: false }
      - { value: "`void` (for simple scripts with side effects)", correct: true }
      - { value: "An instance of `Symfony\\Component\\Routing\\Router`", correct: false }
    help: |
      The Symfony Runtime can handle various return types from the application callable, including `Kernel` for full-stack apps, `Response` for simple HTTP responses, and `void` for scripts with side effects. `Console\\Application` is for CLI apps.
      https://symfony.com/doc/current/components/runtime.html#symfony-runtime-supported-interfaces-and-arguments

  -
    question: >
      Which environment variable can be used to configure runtime options for a Symfony application, such as the `project_dir`?
    answers:
      - { value: "`APP_RUNTIME_OPTIONS`", correct: true }
      - { value: "`SYMFONY_RUNTIME_CONFIG`", correct: false }
      - { value: "`RUNTIME_ENV_VARS`", correct: false }
      - { value: "`APP_OPTIONS`", correct: false }
    help: |
      The `APP_RUNTIME_OPTIONS` environment variable, typically set in a bootstrap file, allows passing an array of options to the Symfony Runtime.
      https://symfony.com/doc/current/components/runtime.html#configure-runtime-options-via-environment-variable-php

  -
    question: >
      What does the `kernel.runtime_mode.worker` parameter indicate in a Symfony application?
    answers:
      - { value: "Whether the application is running in a worker or long-running environment, often requiring specific web server support.", correct: true }
      - { value: "Whether the application is running as a background process.", correct: false }
      - { value: "Whether the application is processing messages from a message queue.", correct: false }
      - { value: "Whether the application is in debug mode for worker processes.", correct: false }
    help: |
      The `kernel.runtime_mode.worker` parameter is a boolean that indicates if the application is operating in a long-running worker mode, which has implications for server configuration.
      https://symfony.com/doc/current/reference/configuration/kernel.html#kernel-runtime-mode-worker

  -
    question: >
      Which component provides a `Clock` service that allows for time-sensitive operations to be tested deterministically?
    answers:
      - { value: "Symfony\\Component\\Clock", correct: true }
      - { value: "Symfony\\Component\\Stopwatch", correct: false }
      - { value: "Symfony\\Component\\Time", correct: false }
      - { value: "Symfony\\Component\\DateTime", correct: false }
    help: |
      The Clock component provides a `Clock` service that can be frozen or fast-forwarded for testing purposes, ensuring consistent time-based behavior.
      https://symfony.com/doc/current/components/clock.html

  -
    question: |
      Which exception is thrown by the Symfony Clock component if an invalid timezone string is provided to `withTimeZone()`?
    answers:
      - { value: "DateInvalidTimeZoneException", correct: true }
      - { value: "InvalidArgumentException", correct: false }
      - { value: "DateTimeException", correct: false }
      - { value: "TimeZoneNotFoundException", correct: false }
    help: |
      The `DateInvalidTimeZoneException` is thrown when an invalid timezone string is used with the Clock component.
      https://symfony.com/doc/current/components/clock.html#handle-dateinvalidtimezoneexception-in-symfony-clock-component

  -
    question: >
      What is the purpose of the `#[AsCommand]` attribute in a Symfony console command?
    answers:
      - { value: "To define the command's name and description.", correct: true }
      - { value: "To inject services into the command.", correct: false }
      - { value: "To execute the command automatically.", correct: false }
      - { value: "To link the command to a specific controller.", correct: false }
    help: |
      The `#[AsCommand]` attribute is used to configure the command's name, description, and other options directly in the class.
      https://symfony.com/doc/current/console.html#configuring-the-command

  -
    question: >
      Which of the following is a valid way to define a PHP constant as a parameter value in `config/services.yaml`?
    answers:
      - { value: "`!php/const GLOBAL_CONSTANT`", correct: true }
      - { value: "`%const(GLOBAL_CONSTANT)%`", correct: false }
      - { value: "`constant: GLOBAL_CONSTANT`", correct: false }
      - { value: "`php_constant: GLOBAL_CONSTANT`", correct: false }
    help: |
      The `!php/const` YAML tag allows you to use PHP constants directly as parameter values.
      https://symfony.com/doc/current/configuration.html#defining-configuration-parameters

  -
    question: >
      What is the correct way to access a configuration parameter named `app.admin_email` from within a Symfony controller that extends `AbstractController`?
    answers:
      - { value: "`$this->getParameter('app.admin_email')`", correct: true }
      - { value: "`$this->container->get('parameter_bag')->get('app.admin_email')`", correct: false }
      - { value: "`$this->get('app.admin_email')`", correct: false }
      - { value: "`$this->params->get('app.admin_email')`", correct: false }
    help: |
      `AbstractController` provides a convenient `getParameter()` helper method to access parameters from the service container.
      https://symfony.com/doc/current/configuration.html#access-configuration-parameters-in-abstractcontroller

  -
    question: >
      Which command displays all configuration parameters available in your Symfony application, including those defined by yourself and by bundles/packages?
    answers:
      - { value: "`php bin/console debug:container --parameters`", correct: true }
      - { value: "`php bin/console config:list`", correct: false }
      - { value: "`php bin/console debug:parameters`", correct: false }
      - { value: "`php bin/console config:show --all`", correct: false }
    help: |
      The `debug:container --parameters` command lists all registered parameters in the dependency injection container.
      https://symfony.com/doc/current/configuration.html#list-all-configuration-parameters

  -
    question: >
      When configuring custom exception handling in Symfony, what is important regarding the order of exception configurations in YAML?
    answers:
      - { value: "More specific exception configurations should be listed before more general ones.", correct: true }
      - { value: "The order of exception configurations does not matter.", correct: false }
      - { value: "Alphabetical order of exception classes is recommended.", correct: false }
      - { value: "Only the last configured exception handler will be used.", correct: false }
    help: |
      Symfony processes exception configurations in the order they are defined. If a more general exception (e.g., `Exception`) is defined before a specific one (e.g., `RuntimeException`), the general one will catch the specific exception first.
      https://symfony.com/doc/current/reference/configuration/framework.html#understand-exception-configuration-order-in-symfony

  -
    question: >
      What is the default behavior of the Symfony kernel regarding `Throwable` exceptions thrown by the application?
    answers:
      - { value: "It catches all `Throwable` exceptions and converts them into appropriate HTTP responses.", correct: true }
      - { value: "It re-throws all `Throwable` exceptions, requiring manual handling in the front controller.", correct: false }
      - { value: "It logs all `Throwable` exceptions but does not convert them to HTTP responses.", correct: false }
      - { value: "It only catches `HttpExceptionInterface` exceptions by default.", correct: false }
    help: |
      By default, the Symfony kernel's `handle_all_throwables` option is set to `true`, ensuring all thrown exceptions are gracefully converted into HTTP responses.
      https://symfony.com/doc/current/reference/configuration/framework.html#symfony-global-throwable-handling-configuration

  -
    question: >
      Which directory structure is recommended for placing custom Twig error templates in a Symfony application?
    answers:
      - { value: "`templates/bundles/TwigBundle/Exception/`", correct: true }
      - { value: "`templates/errors/`", correct: false }
      - { value: "`templates/exceptions/`", correct: false }
      - { value: "`src/Error/templates/`", correct: false }
    help: |
      Symfony's `TwigErrorRenderer` looks for custom error templates in `templates/bundles/TwigBundle/Exception/` (e.g., `error404.html.twig`, `error.html.twig`).
      https://symfony.com/doc/current/controller/error_pages.html#standard-directory-structure-for-custom-twig-error-templates

  -
    question: >
      When debugging Symfony translations, what does an empty 'State' column indicate when running `php bin/console debug:translation`?
    answers:
      - { value: "The message is translated and actively used.", correct: true }
      - { value: "The message is missing a translation.", correct: false }
      - { value: "The message is unused in any template.", correct: false }
      - { value: "The message has a fallback translation.", correct: false }
    help: |
      An empty 'State' column means the translation is present and used. 'missing' indicates a missing translation, and 'unused' indicates an unused translation.
      https://symfony.com/doc/current/translation.html#debug-translations-used-messages

  -
    question: >
      Which command should you use to list all registered events and their associated listeners in a Symfony application's event dispatcher?
    answers:
      - { value: "`php bin/console debug:event-dispatcher`", correct: true }
      - { value: "`php bin/console debug:events`", correct: false }
      - { value: "`php bin/console event-dispatcher:list`", correct: false }
      - { value: "`php bin/console container:events`", correct: false }
    help: |
      The `debug:event-dispatcher` command provides a comprehensive list of all events and their listeners.
      https://symfony.com/doc/current/event_dispatcher.html#debug-all-symfony-event-listeners

  -
    question: >
      Which Twig function or tag is used to dump variable contents to the Web Debug Toolbar for debugging purposes?
    answers:
      - { value: "`{% dump variable %}`", correct: true }
      - { value: "`{{ dump(variable) }}`", correct: true }
      - { value: "`{% debug variable %}`", correct: false }
      - { value: "`{{ var_dump(variable) }}`", correct: false }
    help: |
      The `{% dump %}` tag sends content to the Web Debug Toolbar, while `{{ dump() }}` dumps directly into the page content.
      https://symfony.com/doc/current/templates.html#use-twig-dump-tag-and-function

  -
    question: >
      What is the purpose of `opcache.validate_timestamps=0` in `php.ini` for a production Symfony application?
    answers:
      - { value: "To disable timestamp validation for OPcache, improving performance by not rechecking file changes on every request.", correct: true }
      - { value: "To enable OPcache for faster script execution.", correct: false }
      - { value: "To force OPcache to recompile all PHP files on every request.", correct: false }
      - { value: "To prevent OPcache from caching files with old timestamps.", correct: false }
    help: |
      Setting `opcache.validate_timestamps=0` in production prevents PHP from checking file modification times, which reduces overhead. However, it requires manual OPcache clearing after deployments.
      https://symfony.com/doc/current/performance.html#disable-opcache-timestamps-validation-in-production

  -
    question: >
      Which `composer.json` property should be set to `'symfony-bundle'` for a bundle to be automatically activated by Symfony Flex upon installation?
    answers:
      - { value: "`type`", correct: true }
      - { value: "`extra.symfony.type`", correct: false }
      - { value: "`bundle_type`", correct: false }
      - { value: "`symfony.bundle`", correct: false }
    help: |
      Setting the `type` property in `composer.json` to `symfony-bundle` allows Symfony Flex to automatically register the bundle.
      https://symfony.com/doc/current/bundles/best_practices.html#define-symfony-bundle-type-in-composer-json

  -
    question: >
      What is the purpose of `composer dump-env prod`?
    answers:
      - { value: "To generate an optimized `.env.local.php` file for the production environment.", correct: true }
      - { value: "To clear the cache for the production environment.", correct: false }
      - { value: "To install production dependencies without dev dependencies.", correct: false }
      - { value: "To dump all environment variables to the console.", correct: false }
    help: |
      `composer dump-env prod` creates a static PHP file that contains all resolved environment variables, which is faster than parsing `.env` files on every request.
      https://symfony.com/doc/current/deployment.html#generate-optimized-symfony-environment-file

  -
    question: >
      Which of the following is the correct way to configure a global asset version string (e.g., `v2`) for cache busting in Symfony?
    answers:
      - { value: "Set `framework.assets.version` in `config/packages/framework.yaml`.", correct: true }
      - { value: "Set `assets.global_version` in `config/services.yaml`.", correct: false }
      - { value: "Use `AssetVersionStrategyInterface` directly in Twig.", correct: false }
      - { value: "Configure `webpack_encore.version` in `config/packages/webpack_encore.yaml`.", correct: false }
    help: |
      The `framework.assets.version` option applies a version string as a query parameter to all asset URLs, forcing browsers to re-fetch them after deployment.
      https://symfony.com/doc/current/reference/configuration/framework.html#configure-global-asset-versioning-for-cache-busting-in-symfony

  -
    question: >
      Which of the following is NOT a default normalizer configured with the Symfony Serializer service?
    answers:
      - { value: "Symfony\\Component\\Serializer\\Normalizer\\JsonSerializableNormalizer", correct: false }
      - { value: "Symfony\\Component\\Serializer\\Normalizer\\ProblemNormalizer", correct: false }
      - { value: "Symfony\\Component\\Serializer\\Normalizer\\GetSetMethodNormalizer", correct: false }
      - { value: "Symfony\\Component\\Serializer\\Normalizer\\ArrayNormalizer", correct: true }
    help: |
      `ArrayDenormalizer` is a default denormalizer, but `ArrayNormalizer` is not listed as a default normalizer. The common default normalizers include `ObjectNormalizer`, `DateTimeNormalizer`, `JsonSerializableNormalizer`, `ProblemNormalizer`, etc.
      https://symfony.com/doc/current/serializer.html#symfony-serializer-default-normalizers

  -
    question: >
      Which context option should be used with Symfony's Serializer to skip properties with `null` values during serialization?
    answers:
      - { value: "`AbstractObjectNormalizer::SKIP_NULL_VALUES`", correct: true }
      - { value: "`AbstractNormalizer::IGNORE_NULL`", correct: false }
      - { value: "`ObjectNormalizer::EXCLUDE_NULL`", correct: false }
      - { value: "`Serializer::SKIP_EMPTY`", correct: false }
    help: |
      Setting `AbstractObjectNormalizer::SKIP_NULL_VALUES` to `true` in the serialization context will exclude properties with `null` values from the serialized output.
      https://symfony.com/doc/current/serializer.html#serialize-object-skipping-null-values-php

  -
    question: >
      What is the purpose of the `#[Ignore]` attribute in Symfony's Serializer component?
    answers:
      - { value: "To prevent a property or method from being serialized or deserialized.", correct: true }
      - { value: "To mark a property as optional during deserialization.", correct: false }
      - { value: "To exclude a property from specific serialization groups.", correct: false }
      - { value: "To make a property read-only during deserialization.", correct: false }
    help: |
      The `#[Ignore]` attribute (or equivalent YAML/XML configuration) ensures that a property or method is completely excluded from the serialization and deserialization process.
      https://symfony.com/doc/current/serializer.html#exclude-properties-from-serialization-using-ignore-attribute

  -
    question: >
      Which of the following is the correct way to apply serialization groups when serializing an object using `SerializerInterface`?
    answers:
      - { value: "`$serializer->serialize($object, 'json', ['groups' => 'my-group']);`", correct: true }
      - { value: "`$serializer->serialize($object, 'json', ['serialization_groups' => ['my-group']]);`", correct: false }
      - { value: "`$serializer->serialize($object, 'json', ['context' => ['groups' => 'my-group']]);`", correct: false }
      - { value: "`$serializer->serialize($object, 'json', 'my-group');`", correct: false }
    help: |
      Serialization groups are passed as a context option with the key `'groups'`.
      https://symfony.com/doc/current/serializer.html#serialize-object-with-serialization-groups-in-php

  -
    question: >
      Which of the following is NOT a valid DSN for configuring the Symfony Lock component?
    answers:
      - { value: "`flock:///path/to/file`", correct: false }
      - { value: "`memcached://m1.docker`", correct: false }
      - { value: "`redis://r1.docker`", correct: false }
      - { value: "`http://localhost/lock`", correct: true }
      - { value: "`sqlite:///%kernel.project_dir%/var/lock.db`", correct: false }
    help: |
      The Lock component supports various DSNs for different stores (filesystem, in-memory, database, distributed caches), but not HTTP-based DSNs directly.
      https://symfony.com/doc/current/lock.html#configure-symfony-lock-component-with-various-dsns

  -
    question: >
      Which Symfony component provides a `get_debug_type()` function that should be used instead of `::class` for including class names in exception messages for better debugging?
    answers:
      - { value: "Symfony\\Component\\VarDumper", correct: true }
      - { value: "Symfony\\Component\\ErrorHandler", correct: false }
      - { value: "Symfony\\Component\\Debug", correct: false }
      - { value: "Symfony\\Component\\Util", correct: false }
    help: |
      `get_debug_type()` is a function provided by the VarDumper component (part of DebugBundle) that returns the type of a variable, including the class name for objects, in a way that is robust for debugging.
      https://symfony.com/doc/current/contributing/code/standards.html#use-get-debug-type-for-class-names-in-exceptions

  -
    question: >
      What is the purpose of `Symfony\\Component\\Process\\ExecutableFinder`?
    answers:
      - { value: "To locate the absolute path of an executable on the system.", correct: true }
      - { value: "To find all running processes on the system.", correct: false }
      - { value: "To execute a command and return its output.", correct: false }
      - { value: "To manage process signals and termination.", correct: false }
    help: |
      `ExecutableFinder` helps in finding the full path to an executable file, which is useful when you need to run external commands.
      https://symfony.com/doc/current/components/process.html#find-executable-path-with-executablefinder

  -
    question: >
      Which of the following is the correct way to configure a custom serializer for a specific Messenger transport in Symfony?
    answers:
      - { value: "Set the `serializer` option under the transport's configuration, pointing to a service ID.", correct: true }
      - { value: "Implement `MessageSerializerInterface` and tag it with `messenger.serializer`.", correct: false }
      - { value: "Define a `serializer_service` parameter for the transport.", correct: false }
      - { value: "Override the default `messenger.default_serializer` service.", correct: false }
    help: |
      The `serializer` option within a transport's configuration allows you to specify a custom serializer service for that transport.
      https://symfony.com/doc/current/messenger.html#configure-symfony-messenger-transport-with-custom-serializer

  -
    question: >
      Which `Symfony\\Component\\Messenger\\Stamp` is used to delay the handling of an asynchronous message?
    answers:
      - { value: "DelayStamp", correct: true }
      - { value: "ScheduleStamp", correct: false }
      - { value: "TimeLimitStamp", correct: false }
      - { value: "DeferStamp", correct: false }
    help: |
      `DelayStamp` allows you to specify a delay (in milliseconds) before a message is processed by its handler.
      https://symfony.com/doc/current/components/messenger.html#add-stamps-to-symfony-messenger-messages-for-custom-behavior

  -
    question: >
      Which console command displays the number of queued messages across all configured Symfony Messenger transports?
    answers:
      - { value: "`php bin/console messenger:stats`", correct: true }
      - { value: "`php bin/console messenger:queue:count`", correct: false }
      - { value: "`php bin/console debug:messenger --stats`", correct: false }
      - { value: "`php bin/console messenger:list --queued`", correct: false }
    help: |
      The `messenger:stats` command provides an overview of message counts in all transports.
      https://symfony.com/doc/current/messenger.html#check-queued-messages-for-all-symfony-messenger-transports

  -
    question: >
      Which of the following describes the `Symfony\\Component\\Mime\\DraftEmail` class?
    answers:
      - { value: "A special instance of `Email` for building and making emails available for download as .eml files with an X-Unsent header.", correct: true }
      - { value: "An email that is sent to a draft folder on the mail server.", correct: false }
      - { value: "An email that is still being composed and cannot be sent yet.", correct: false }
      - { value: "A class for creating email templates.", correct: false }
    help: |
      `DraftEmail` extends `Email` and is specifically designed for creating `.eml` files that can be opened as draft emails in email clients.
      https://symfony.com/doc/current/mailer.rst#symfony-mailer-and-mime-component-api-reference

  -
    question: >
      Which of the following is a valid way to attach a file to an email using Symfony Mailer?
    answers:
      - { value: "`$email->addPart(new DataPart(new File('/path/to/file.pdf')))`", correct: true }
      - { value: "`$email->attach('/path/to/file.pdf')`", correct: false }
      - { value: "`$email->addAttachment('/path/to/file.pdf')`", correct: false }
      - { value: "`$email->attachFile('/path/to/file.pdf')`", correct: false }
    help: |
      The `addPart()` method with a `DataPart` (which can wrap a `File` object) is the correct way to attach files.
      https://symfony.com/doc/current/mailer.rst#attach-files-to-emails-in-symfony-mailer

  -
    question: >
      What is the purpose of `HtmlToTextConverterInterface` in Symfony Mime?
    answers:
      - { value: "To automatically create the plain text part of an email from its HTML content when not explicitly defined.", correct: true }
      - { value: "To convert HTML email templates into plain text for display in web browsers.", correct: false }
      - { value: "To sanitize HTML content for security purposes.", correct: false }
      - { value: "To extract text from HTML documents for search indexing.", correct: false }
    help: |
      When you only provide an HTML body for an email, Symfony can use an implementation of `HtmlToTextConverterInterface` to generate a plain text alternative.
      https://symfony.com/doc/current/reference/configuration/twig.rst#symfony-mime-htmltotextconverterinterface-reference

  -
    question: >
      What is the purpose of the `Symfony\\Component\\String\\Inflector\\EnglishInflector` class?
    answers:
      - { value: "To convert English words between singular and plural forms.", correct: true }
      - { value: "To normalize English strings for URL slugs.", correct: false }
      - { value: "To translate English text to other languages.", correct: false }
      - { value: "To detect the language of a given English text.", correct: false }
    help: |
      The `EnglishInflector` class provides methods for singularizing and pluralizing English words.
      https://symfony.com/doc/current/string.html#symfony-component-string-inflector-inflectorinterface-and-implementations-api

  -
    question: >
      Which class in the Symfony Intl component is used to retrieve country names based on ISO 3166-1 alpha-2 and alpha-3 codes?
    answers:
      - { value: "Symfony\\Component\\Intl\\Countries", correct: true }
      - { value: "Symfony\\Component\\Intl\\Locales", correct: false }
      - { value: "Symfony\\Component\\Intl\\Languages", correct: false }
      - { value: "Symfony\\Component\\Intl\\Regions", correct: false }
    help: |
      The `Countries` class provides static methods to get country names and check their existence using various ISO codes.
      https://symfony.com/doc/current/components/intl.html#retrieve-country-names-and-codes-with-symfony-component-intl-countries

  -
    question: >
      What is "pseudolocalization" in Symfony's translation component?
    answers:
      - { value: "A debugging technique that replaces characters with accented versions and wraps strings to simulate translation and identify UI issues.", correct: true }
      - { value: "A process of automatically translating text using machine learning.", correct: false }
      - { value: "A method for generating translation files from source code.", correct: false }
      - { value: "A way to define multiple fallback locales for a single translation.", correct: false }
    help: |
      Pseudolocalization is a development tool that modifies strings to mimic translation, helping developers identify issues like truncated text, hardcoded strings, or incorrect character encoding.
      https://symfony.com/doc/current/translation.html#enable-pseudolocalization-in-symfony-translator-configuration

  -
    question: >
      Which interface must a service implement to be automatically provided with the current application locale by Symfony?
    answers:
      - { value: "Symfony\\Contracts\\Translation\\LocaleAwareInterface", correct: true }
      - { value: "Symfony\\Component\\Translation\\TranslatorInterface", correct: false }
      - { value: "Symfony\\Component\\HttpKernel\\LocaleAwareInterface", correct: false }
      - { value: "Symfony\\Component\\EventDispatcher\\EventSubscriberInterface", correct: false }
    help: |
      Services implementing `LocaleAwareInterface` will have their `setLocale()` method called by Symfony when the locale changes.
      https://symfony.com/doc/current/reference/dic_tags.html#api-symfony-contracts-translation-localeawareinterface

  -
    question: >
      What is the purpose of the `kernel.runtime_mode.cli` parameter?
    answers:
      - { value: "Indicates whether the application is running in a CLI (Command Line Interface) environment.", correct: true }
      - { value: "Defines the default command to execute when running in CLI mode.", correct: false }
      - { value: "Controls whether CLI commands are logged to the console.", correct: false }
      - { value: "Determines if the application should exit after a CLI command completes.", correct: false }
    help: |
      `kernel.runtime_mode.cli` is a boolean parameter that is true if the application is running in a command-line environment.
      https://symfony.com/doc/current/reference/configuration/kernel.html#kernel-runtime-mode-cli

  -
    question: >
      Which of the following is a valid way to define a single console command application using the Symfony Runtime component?
    answers:
      - { value: "Return a `Symfony\\Component\\Console\\Command\\Command` instance from the runtime closure.", correct: true }
      - { value: "Return a `Symfony\\Component\\Console\\Application` instance with a single command.", correct: false }
      - { value: "Return a `Symfony\\Component\\Console\\Command\\SingleCommand` instance.", correct: false }
      - { value: "Return a `Symfony\\Component\\Console\\Input\\InputInterface` and `OutputInterface`.", correct: false }
    help: |
      For a single command, you can return a `Command` instance directly from the runtime closure.
      https://symfony.com/doc/current/components/runtime.html#define-a-single-console-command-application-with-runtime

  -
    question: >
      What is the purpose of `kernel.container_build_time` parameter?
    answers:
      - { value: "To allow for strict reproducible builds by providing a fixed build timestamp for the compiled service container.", correct: true }
      - { value: "To measure the time it takes to build the service container during development.", correct: false }
      - { value: "To define the expiration time for the compiled service container cache.", correct: false }
      - { value: "To track the last modification time of the service container configuration files.", correct: false }
    help: |
      The `kernel.container_build_time` parameter stores a timestamp, which can be fixed to ensure that the compiled container is identical across different build environments for reproducible builds.
      https://symfony.com/doc/current/reference/configuration/kernel.html#apidoc-kernel-container-build-time-parameter-definition

  -
    question: >
      Which of the following is the correct way to define a synthetic service in `config/services.yaml`?
    answers:
      - { value: "Define the service ID and set `synthetic: true` without specifying a class.", correct: true }
      - { value: "Define the service ID and set `class: null` and `synthetic: true`.", correct: false }
      - { value: "Define the service ID and set `factory: synthetic`.", correct: false }
      - { value: "Define the service ID and set `public: false` and `synthetic: true`.", correct: false }
    help: |
      Synthetic services are marked with `synthetic: true` and do not have a `class` defined, as their instance is set at runtime.
      https://symfony.com/doc/current/service_container/synthetic_services.html#define-symfony-synthetic-service-configuration

  -
    question: >
      What is the purpose of the `max_duration` option in Symfony's HTTP client configuration?
    answers:
      - { value: "The maximum execution time, in seconds, that the request and the response are allowed to take.", correct: true }
      - { value: "The maximum time, in milliseconds, to wait between retries.", correct: false }
      - { value: "The maximum number of redirects allowed for a request.", correct: false }
      - { value: "The maximum time, in seconds, for the connection to be established.", correct: false }
    help: |
      `max_duration` sets a hard limit on the total time a request-response cycle can take.
      https://symfony.com/doc/current/reference/configuration/framework.rst#set-maximum-execution-duration-for-http-requests

  -
    question: >
      Which Symfony component provides the `Stopwatch` service for profiling code execution and measuring durations and memory usage?
    answers:
      - { value: "Symfony\\Component\\Stopwatch", correct: true }
      - { value: "Symfony\\Component\\Profiler", correct: false }
      - { value: "Symfony\\Component\\Performance", correct: false }
      - { value: "Symfony\\Component\\Debug", correct: false }
    help: |
      The Stopwatch component allows you to measure the execution time and memory usage of arbitrary code blocks, and these measurements appear in the Symfony profiler.
      https://symfony.com/doc/current/performance.html#profile-code-execution-with-symfony-stopwatch

  -
    question: >
      What is the purpose of the `lap()` method on a `Stopwatch` event?
    answers:
      - { value: "To measure partial durations within a single ongoing event.", correct: true }
      - { value: "To stop the current event and record its total duration.", correct: false }
      - { value: "To start a new nested event within an existing one.", correct: false }
      - { value: "To reset the stopwatch and clear all recorded events.", correct: false }
    help: |
      The `lap()` method allows you to record intermediate periods within a single, continuous stopwatch event.
      https://symfony.com/doc/current/performance.html#measure-code-periods-with-stopwatch-lap-method

  -
    question: >
      Which of the following is true about the `Symfony\\Component\\Lock\\Store\\RedisStore`?
    answers:
      - { value: "It stores locks in memory, meaning locks are not persisted and can be lost on Redis service restart.", correct: true }
      - { value: "It supports blocking operations, allowing processes to wait for a lock.", correct: false }
      - { value: "It automatically creates the necessary database table for locks.", correct: false }
      - { value: "It relies on synchronized clocks across server nodes for purging old locks.", correct: false }
    help: |
      `RedisStore` is an in-memory store, so locks are not persistent across Redis restarts. It does not support blocking operations by itself.
      https://symfony.com/doc/current/components/lock.html#redisstore-in-memory-behavior-and-persistence-risks

  -
    question: >
      What is the purpose of `Symfony\\Component\\ErrorHandler\\Exception\\FlattenException` in Symfony's error handling?
    answers:
      - { value: "It is a normalized representation of a `Throwable` instance, used for consistent error handling and serialization.", correct: true }
      - { value: "It is the base class for all HTTP-related exceptions in Symfony.", correct: false }
      - { value: "It provides a way to re-throw an exception with a custom message.", correct: false }
      - { value: "It is used to log exceptions to a file.", correct: false }
    help: |
      `FlattenException` is a simplified, serializable representation of any `Throwable`, making it easier to pass exception details between different parts of the error handling system.
      https://symfony.com/doc/current/components/http_kernel.html#symfony-httpkernel-errorlistener-behavior

  -
    question: >
      Which console command can you use to debug the metadata of a specific class for Symfony's Serializer component?
    answers:
      - { value: "`php bin/console debug:serializer 'App\\Entity\\Book'`", correct: true }
      - { value: "`php bin/console debug:entity 'App\\Entity\\Book' --serializer`", correct: false }
      - { value: "`php bin/console serializer:debug 'App\\Entity\\Book'`", correct: false }
      - { value: "`php bin/console debug:metadata 'App\\Entity\\Book' --serializer`", correct: false }
    help: |
      The `debug:serializer` command displays detailed serialization metadata for a given class, including groups, max depth, and serialized names.
      https://symfony.com/doc/current/serializer.html#debug-symfony-serializer-metadata-for-a-specific-class

  -
    question: >
      What is the purpose of `AbstractObjectNormalizer::ENABLE_MAX_DEPTH` in the serializer context?
    answers:
      - { value: "To activate the maximum depth serialization feature, ensuring `MaxDepth` attributes are respected.", correct: true }
      - { value: "To set the default maximum depth for all serialized objects.", correct: false }
      - { value: "To disable serialization for objects exceeding a certain depth.", correct: false }
      - { value: "To enable recursive serialization of nested objects.", correct: false }
    help: |
      Even if `#[MaxDepth]` attributes are defined, they will only be enforced if `AbstractObjectNormalizer::ENABLE_MAX_DEPTH` is set to `true` in the serialization context.
      https://symfony.com/doc/current/serializer.html#enable-max-depth-normalization-in-symfony-serializer-context

  -
    question: >
      Which of the following describes the `Symfony\\Component\\Serializer\\Normalizer\\BackedEnumNormalizer`?
    answers:
      - { value: "Converts between `BackedEnum` enums and their string or integer backing values.", correct: true }
      - { value: "Normalizes any PHP enum to its name.", correct: false }
      - { value: "Serializes enums as an array of their cases.", correct: false }
      - { value: "Handles only string-backed enums.", correct: false }
    help: |
      The `BackedEnumNormalizer` is specifically designed to normalize and denormalize PHP 8.1+ `BackedEnum` instances to and from their scalar backing values.
      https://symfony.com/doc/current/serializer.html#api-symfony-component-serializer-normalizer-backedenumnormalizer

  -
    question: >
      Which `composer.json` setting is used to specify a custom `autoload_runtime.php` template file for the Symfony Runtime component?
    answers:
      - { value: "`extra.runtime.autoload_template`", correct: true }
      - { value: "`runtime.template_file`", correct: false }
      - { value: "`extra.runtime_autoload`", correct: false }
      - { value: "`autoload.runtime_template`", correct: false }
    help: |
      The `autoload_template` option under `extra.runtime` allows you to point to a custom template for generating `autoload_runtime.php`.
      https://symfony.com/doc/current/components/runtime.html#configure-custom-runtime-template-in-composer

  -
    question: >
      Which Symfony component provides the `LocaleSwitcher` service for programmatically managing the application's locale?
    answers:
      - { value: "Symfony\\Component\\Translation", correct: true }
      - { value: "Symfony\\Component\\HttpFoundation", correct: false }
      - { value: "Symfony\\Component\\Intl", correct: false }
      - { value: "Symfony\\Component\\HttpKernel", correct: false }
    help: |
      The `LocaleSwitcher` service, part of the Translation component, allows you to get, set, reset, and run code with a specific locale.
      https://symfony.com/doc/current/translation.html#manage-application-locale-with-symfony-localeswitcher

  -
    question: >
      Which of the following is a valid way to define localized routes in Symfony, where the path changes based on the locale?
    answers:
      - { value: "Using an array of `locale => path` mappings in the `path` attribute or method.", correct: true }
      - { value: "Defining separate routes for each locale with unique names.", correct: false }
      - { value: "Using a `_locale` placeholder in the path and a `locale_map` option.", correct: false }
      - { value: "Implementing a custom route loader that translates paths.", correct: false }
    help: |
      Symfony allows defining localized routes by providing an associative array where keys are locales and values are the paths for those locales.
      https://symfony.com/doc/current/routing.html#define-localized-routes-in-symfony

  -
    question: >
      Which Symfony component provides the `EmojiTransliterator` class for converting emojis to text representations and vice-versa?
    answers:
      - { value: "Symfony\\Component\\Emoji", correct: true }
      - { value: "Symfony\\Component\\String", correct: false }
      - { value: "Symfony\\Component\\Intl", correct: false }
      - { value: "Symfony\\Component\\Translation", correct: false }
    help: |
      The Emoji component provides tools for transliterating emojis into human-readable text or short codes.
      https://symfony.com/doc/current/emoji.html#transliterate-emojis-to-text-in-different-languages

  -
    question: >
      Which of the following is a valid way to configure the `framework.assets.json_manifest_path` for a specific asset package in Symfony?
    answers:
      - { value: "Set `json_manifest_path` under `framework.assets.packages.<package_name>`.", correct: true }
      - { value: "Set `manifest_path` under `framework.assets.packages.<package_name>`.", correct: false }
      - { value: "Define a separate `AssetPackage` service with its own manifest path.", correct: false }
      - { value: "It can only be configured globally, not per package.", correct: false }
    help: |
      The `json_manifest_path` can be configured globally or overridden for individual asset packages.
      https://symfony.com/doc/current/reference/configuration/framework.html#configure-symfony-asset-manifest-paths

  -
    question: >
      Which of the following is a core concept in Symfony Messenger that wraps messages, allowing the addition of useful information through "envelope stamps"?
    answers:
      - { value: "Envelope", correct: true }
      - { value: "MessageBag", correct: false }
      - { value: "MessageWrapper", correct: false }
      - { value: "StampBag", correct: false }
    help: |
      The `Envelope` is a Messenger-specific concept that wraps messages and allows attaching `Stamps` (metadata).
      https://symfony.com/doc/current/components/messenger.html#symfony-messenger-component-core-concepts

  -
    question: >
      Which Symfony component provides the `HtmlToTextConverterInterface` for automatically creating the text part of an email from its HTML content?
    answers:
      - { value: "Symfony\\Component\\Mime", correct: true }
      - { value: "Symfony\\Component\\Mailer", correct: false }
      - { value: "Symfony\\Component\\HtmlToText", correct: false }
      - { value: "Twig\\Extra\\CssInliner", correct: false }
    help: |
      The `HtmlToTextConverterInterface` is part of the Mime component and is used by Mailer to generate plain text email bodies from HTML.
      https://symfony.com/doc/current/reference/configuration/twig.rst#symfony-mime-htmltotextconverterinterface-reference

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\PdoStore`?
    answers:
      - { value: "It saves locks in an SQL database and relies on the ACID properties of the SQL engine.", correct: true }
      - { value: "It supports blocking operations, allowing processes to wait for a lock.", correct: false }
      - { value: "It does not require a database table for lock storage.", correct: false }
      - { value: "It is an in-memory store and does not persist locks.", correct: false }
    help: |
      `PdoStore` uses a relational database to store locks and relies on the database's ACID properties for consistency. It does not support blocking operations.
      https://symfony.com/doc/current/components/lock.html#pdostore-acid-properties-and-cluster-considerations

  -
    question: >
      Which of the following is NOT a valid option for `Symfony\\Component\\Serializer\\Normalizer\\PropertyNormalizer::NORMALIZE_VISIBILITY`?
    answers:
      - { value: "NORMALIZE_STATIC", correct: true }
      - { value: "NORMALIZE_PUBLIC", correct: false }
      - { value: "NORMALIZE_PROTECTED", correct: false }
      - { value: "NORMALIZE_PRIVATE", correct: false }
    help: |
      `PropertyNormalizer` allows normalizing public, protected, and private properties based on visibility flags, but not static properties.
      https://symfony.com/doc/current/serializer.html#serialize-properties-with-specific-visibility-using-propertynormalizer

  -
    question: >
      Which of the following is the correct way to configure a custom error controller in `config/packages/framework.php`?
    answers:
      - { value: "`$framework->errorController('App\\Controller\\ErrorController::show');`", correct: true }
      - { value: "`$framework->error_controller('App\\Controller\\ErrorController::show');`", correct: false }
      - { value: "`$framework->setErrorController('App\\Controller\\ErrorController::show');`", correct: false }
      - { value: "`$framework->exceptions()->controller('App\\Controller\\ErrorController::show');`", correct: false }
    help: |
      The `errorController()` method on the `FrameworkConfig` object is used to set the custom error controller.
      https://symfony.com/doc/current/controller/error_pages.html#configure-symfony-error-controller-via-php-config

  -
    question: >
      Which console command can be used to debug a specific environment variable in Symfony?
    answers:
      - { value: "`php bin/console debug:dotenv foo`", correct: true }
      - { value: "`php bin/console debug:env foo`", correct: false }
      - { value: "`php bin/console dotenv:show foo`", correct: false }
      - { value: "`php bin/console env:get foo`", correct: false }
    help: |
      The `debug:dotenv` command allows you to inspect the value of a specific environment variable.
      https://symfony.com/doc/current/configuration.html#debug-a-specific-environment-variable

  -
    question: >
      Which of the following is the recommended way to define reusable configuration parameters in Symfony?
    answers:
      - { value: "Using the `parameters` section in `config/services.yaml` with an `app.` prefix.", correct: true }
      - { value: "Defining PHP constants in a global `constants.php` file.", correct: false }
      - { value: "Storing values directly in the `.env` file.", correct: false }
      - { value: "Using a custom `Parameters` service to store and retrieve values.", correct: false }
    help: |
      The `parameters` section in `services.yaml` is the standard way to define application-wide parameters, with `app.` prefixing recommended for custom parameters.
      https://symfony.com/doc/current/configuration.html#defining-configuration-parameters

  -
    question: >
      What is the purpose of `Symfony\\Component\\Config\\ConfigCache`?
    answers:
      - { value: "To manage cached files based on the freshness of their associated resources.", correct: true }
      - { value: "To store application configuration in a database.", correct: false }
      - { value: "To provide a mechanism for encrypting configuration files.", correct: false }
      - { value: "To automatically generate configuration files from annotations.", correct: false }
    help: |
      `ConfigCache` is used to create and manage cached files (like the compiled service container) that are only regenerated when their source resources change.
      https://symfony.com/doc/current/components/config/caching.html#basic-usage-of-symfony-configcache-for-resource-based-caching

  -
    question: >
      When configuring a cache chain with multiple adapters, how should the adapters be ordered?
    answers:
      - { value: "From fastest to slowest.", correct: true }
      - { value: "From slowest to fastest.", correct: false }
      - { value: "Alphabetically by adapter name.", correct: false }
      - { value: "The order does not matter.", correct: false }
    help: |
      For optimal performance, adapters in a cache chain should be ordered from the fastest (e.g., in-memory) to the slowest (e.g., database).
      https://symfony.com/doc/current/cache.html#configure-symfony-cache-chain-with-multiple-adapters

  -
    question: >
      Which of the following is a valid way to retrieve a cached value from a Symfony cache pool using `CacheInterface`?
    answers:
      - { value: "`$cache->get('my_key', function (ItemInterface $item) { /* compute value */ return $value; });`", correct: true }
      - { value: "`$cache->fetch('my_key', function () { /* compute value */ return $value; });`", correct: false }
      - { value: "`$cache->getItem('my_key')->get();`", correct: false }
      - { value: "`$cache->retrieve('my_key', function () { /* compute value */ return $value; });`", correct: false }
    help: |
      The `get()` method of `CacheInterface` is the recommended way to retrieve a value, executing a callable only on a cache miss.
      https://symfony.com/doc/current/components/cache.html#create-cache-item-with-symfony-cache-contracts

  -
    question: >
      What is the purpose of `Symfony\\Component\\Messenger\\Stamp\\SerializerStamp`?
    answers:
      - { value: "To configure the serialization groups used by the transport.", correct: true }
      - { value: "To mark a message as already serialized.", correct: false }
      - { value: "To specify a custom serializer service for a message.", correct: false }
      - { value: "To indicate that a message should not be serialized.", correct: false }
    help: |
      `SerializerStamp` allows you to pass serialization context (like groups) to the transport layer for specific messages.
      https://symfony.com/doc/current/components/messenger.html#symfony-messenger-built-in-envelope-stamps-reference

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\PostgreSqlStore`?
    answers:
      - { value: "It relies on PostgreSQL Advisory Locks and locks are automatically released at the end of the session.", correct: true }
      - { value: "It requires a dedicated database table for lock management.", correct: false }
      - { value: "It supports expiring locks with a configurable TTL.", correct: false }
      - { value: "It is an in-memory store and does not persist locks.", correct: false }
    help: |
      `PostgreSqlStore` uses PostgreSQL's advisory locks, which are session-based and automatically released when the session ends.
      https://symfony.com/doc/current/components/lock.html#postgresqlstore-advisory-locks-and-session-management

  -
    question: >
      Which of the following console commands is used to start the Symfony local web server?
    answers:
      - { value: "`symfony server:start`", correct: true }
      - { value: "`php bin/console server:run`", correct: false }
      - { value: "`php -S localhost:8000 -t public/`", correct: false }
      - { value: "`symfony web:run`", correct: false }
    help: |
      The `symfony server:start` command (provided by the Symfony CLI) is the recommended way to start the local development server.
      https://symfony.com/doc/current/setup/symfony_cli.html#start-symfony-local-development-server

  -
    question: >
      Which of the following is the correct way to access the current locale from the `Request` object in a Symfony controller?
    answers:
      - { value: "`$request->getLocale()`", correct: true }
      - { value: "`$request->get('_locale')`", correct: false }
      - { value: "`$request->attributes->get('_locale')`", correct: false }
      - { value: "`$request->getPreferredLanguage()`", correct: false }
    help: |
      The `getLocale()` method of the `Request` object returns the locale currently set for the request.
      https://symfony.com/doc/current/translation.html#retrieve-user-locale-from-symfony-request

  -
    question: >
      What is the purpose of `Symfony\\Component\\String\\Slugger\\AsciiSlugger::withEmoji()`?
    answers:
      - { value: "To enable emoji transliteration when slugifying strings.", correct: true }
      - { value: "To convert emoji short codes to actual emojis.", correct: false }
      - { value: "To remove all emojis from a string during slugification.", correct: false }
      - { value: "To detect emojis in a string.", correct: false }
    help: |
      The `withEmoji()` method returns a new `AsciiSlugger` instance configured to transliterate emojis into their textual representations.
      https://symfony.com/doc/current/string.html#configure-emoji-transliteration-source-for-symfony-slugger

  -
    question: >
      Which of the following is NOT a valid configuration option for `Symfony\\Component\\Lock\\Store\\MemcachedStore`?
    answers:
      - { value: "`blocking`", correct: true }
      - { value: "`ttl`", correct: false }
      - { value: "`serializer`", correct: false }
      - { value: "`prefix_key`", correct: false }
    help: |
      `MemcachedStore` does not support blocking operations. It requires a TTL and supports serializer and key prefixing.
      https://symfony.com/doc/current/components/lock.html#symfony-lock-component-available-stores-api

  -
    question: >
      Which of the following `Symfony\\Component\\Messenger\\Stamp` is used to mark a message as handled by a specific handler and allows accessing the handler's returned value?
    answers:
      - { value: "HandledStamp", correct: true }
      - { value: "ReceivedStamp", correct: false }
      - { value: "SentStamp", correct: false }
      - { value: "WorkerMessageHandledEvent", correct: false }
    help: |
      The `HandledStamp` is added to the envelope after a message has been successfully processed by a handler, containing the handler's return value.
      https://symfony.com/doc/current/components/messenger.html#symfony-messenger-built-in-envelope-stamps-reference

  -
    question: >
      Which of the following is the correct way to configure `framework.assets.version_strategy` to use a custom version strategy service?
    answers:
      - { value: "Set its value to the service ID of your custom version strategy.", correct: true }
      - { value: "Set its value to the FQCN of your custom version strategy class.", correct: false }
      - { value: "Register your custom strategy with the `asset.version_strategy` tag.", correct: false }
      - { value: "It can only be set to a built-in strategy name.", correct: false }
    help: |
      The `version_strategy` option expects the service ID of a class that implements `VersionStrategyInterface`.
      https://symfony.com/doc/current/deployment/best_practices.html#configure-asset-version-strategy

  -
    question: >
      Which of the following is a valid way to define a message handler that processes multiple different message types in Symfony Messenger?
    answers:
      - { value: "Use `#[AsMessageHandler]` on separate public methods within the same handler class, each type-hinting a different message.", correct: true }
      - { value: "Create a separate handler class for each message type.", correct: false }
      - { value: "Use a single `__invoke()` method with a `mixed` type-hint and `instanceof` checks.", correct: false }
      - { value: "Define multiple `handles` options in a single `#[AsMessageHandler]` attribute.", correct: false }
    help: |
      A single handler class can handle multiple messages by having separate public methods, each annotated with `#[AsMessageHandler]` and type-hinted for the specific message it handles.
      https://symfony.com/doc/current/messenger.html#handle-multiple-messages-in-a-single-symfony-messenger-handler

  -
    question: >
      Which of the following describes `Symfony\\Component\\Serializer\\Normalizer\\DateTimeNormalizer`?
    answers:
      - { value: "Converts `DateTimeInterface` objects into strings, integers, or floats, with options for format and timezone.", correct: true }
      - { value: "Normalizes `DateTime` objects to a Unix timestamp only.", correct: false }
      - { value: "Converts date strings into `DateTime` objects during denormalization.", correct: false }
      - { value: "Automatically detects and normalizes any date-like string.", correct: false }
    help: |
      `DateTimeNormalizer` is responsible for converting `DateTimeInterface` objects to various scalar representations (string, int, float) during serialization.
      https://symfony.com/doc/current/serializer.html#api-symfony-component-serializer-normalizer-datetimenormalizer

  -
    question: >
      Which of the following is NOT a valid way to configure the default serializer context in Symfony?
    answers:
      - { value: "Using `framework.serializer.default_context` in `config/packages/serializer.yaml`.", correct: false }
      - { value: "Passing a context array directly to the `Serializer` constructor in standalone PHP.", correct: false }
      - { value: "Setting `framework.serializer.global_context` in `config/services.yaml`.", correct: true }
      - { value: "Using `defaultContext()` method on `FrameworkConfig` in PHP config.", correct: false }
    help: |
      The correct configuration key for the default serializer context is `default_context`, not `global_context`.
      https://symfony.com/doc/current/serializer.html#configure-default-serializer-context-in-symfony

  -
    question: >
      Which Symfony component provides the `TreeHelper` and `TreeNode` classes for building and rendering hierarchical structures in console output?
    answers:
      - { value: "Symfony\\Component\\Console", correct: true }
      - { value: "Symfony\\Component\\Tree", correct: false }
      - { value: "Symfony\\Component\\Hierarchy", correct: false }
      - { value: "Symfony\\Component\\Debug", correct: false }
    help: |
      The Console component includes helpers like `TreeHelper` for visually representing hierarchical data in CLI applications.
      https://symfony.com/doc/current/components/console/helpers/tree.html#build-console-tree-programmatically-with-treenode

  -
    question: >
      What is the purpose of `Symfony\\Component\\PropertyInfo\\Extractor\\ConstructorExtractor`?
    answers:
      - { value: "Extracts property information by analyzing constructor arguments.", correct: true }
      - { value: "Extracts property information from PHP DocBlocks.", correct: false }
      - { value: "Extracts property information using PHP Reflection.", correct: false }
      - { value: "Extracts property information from database schema.", correct: false }
    help: |
      `ConstructorExtractor` specifically focuses on deriving property information from a class's constructor arguments.
      https://symfony.com/doc/current/components/property_info.html#constructorextractor-component-overview

  -
    question: >
      Which of the following is the correct way to enable the `property_info.with_constructor_extractor` option in Symfony?
    answers:
      - { value: "Set `framework.property_info.with_constructor_extractor: true` in configuration.", correct: true }
      - { value: "Register `ConstructorExtractor` as a service with a specific tag.", correct: false }
      - { value: "It is enabled by default in Symfony 7.3.", correct: false }
      - { value: "Call `PropertyInfoExtractor::enableConstructorExtractor()`.", correct: false }
    help: |
      The `with_constructor_extractor` option under `framework.property_info` explicitly enables the `ConstructorExtractor`.
      https://symfony.com/doc/current/reference/configuration/framework.rst#configure-propertyinfo-enable-constructor-extractor

  -
    question: >
      Which of the following is a valid option for `Symfony\\Component\\Cache\\Adapter\\MemcachedAdapter` to specify the hashing algorithm used for item keys?
    answers:
      - { value: "`hash`", correct: true }
      - { value: "`algorithm`", correct: false }
      - { value: "`key_hash`", correct: false }
      - { value: "`hashing_method`", correct: false }
    help: |
      The `hash` option allows specifying the hashing algorithm (e.g., 'md5', 'crc') for Memcached keys.
      https://symfony.com/doc/current/components/cache/adapters/memcached_adapter.rst#specify-hashing-algorithm-for-item-keys

  -
    question: >
      What is the purpose of `Symfony\\Component\\Messenger\\Message\\RedispatchMessage`?
    answers:
      - { value: "To re-dispatch a message to the message bus, typically after partial processing or a retry.", correct: true }
      - { value: "To send a message to a different transport than its original destination.", correct: false }
      - { value: "To mark a message for immediate processing.", correct: false }
      - { value: "To prevent a message from being processed by its original handler.", correct: false }
    help: |
      `RedispatchMessage` is a special message that, when dispatched, causes the original message it wraps to be re-dispatched to the bus.
      https://symfony.com/doc/current/messenger.html#process-sms-notification-and-conditionally-redispatch-in-symfony-messenger

  -
    question: >
      Which of the following is the correct way to configure a rate limiter to use a specific lock factory service in Symfony?
    answers:
      - { value: "Set `lock_factory` under the limiter's configuration to the service ID of the lock factory.", correct: true }
      - { value: "Set `lock_service` under the limiter's configuration.", correct: false }
      - { value: "Tag the lock factory service with `rate_limiter.lock_factory`.", correct: false }
      - { value: "Inject the lock factory directly into the rate limiter service definition.", correct: false }
    help: |
      The `lock_factory` option within a rate limiter's configuration allows you to specify which lock factory service it should use.
      https://symfony.com/doc/current/rate_limiter.html#configure-rate-limiter-lock-factory-in-symfony

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\CombinedStore`?
    answers:
      - { value: "It does not make the lock mechanism more reliable; it is only as reliable as its least reliable managed store.", correct: true }
      - { value: "It enhances reliability by distributing locks across multiple backends, ensuring high availability.", correct: false }
      - { value: "It automatically handles failover between its managed stores.", correct: false }
      - { value: "It requires all managed stores to successfully acquire the lock for the overall lock to be considered acquired.", correct: false }
    help: |
      `CombinedStore` allows using multiple backends but does not inherently improve reliability; its reliability is limited by the weakest link. The strategy (e.g., `UnanimousStrategy`, `ConsensusStrategy`) determines how multiple stores contribute to the overall lock acquisition.
      https://symfony.com/doc/current/components/lock.html#combinedstore-reliability-and-configuration-requirements

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.dsn` in `config/packages/framework.yaml`?
    answers:
      - { value: "`dsn: '%env(MAILER_DSN)%'`", correct: true }
      - { value: "`mailer_dsn: '%env(MAILER_DSN)%'`", correct: false }
      - { value: "`dsn: env('MAILER_DSN')`", correct: false }
      - { value: "`transport: '%env(MAILER_DSN)%'`", correct: false }
    help: |
      The `dsn` option under `framework.mailer` is used to configure the Mailer DSN, typically referencing an environment variable.
      https://symfony.com/doc/current/mailer.html#configure-mailer-dsn-in-symfony-framework-configuration

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Mime\\RawMessage`?
    answers:
      - { value: "It is used to recreate an email message from its serialized form.", correct: true }
      - { value: "It represents an email message before any headers or parts are added.", correct: false }
      - { value: "It is a low-level representation of an email's raw MIME content.", correct: true }
      - { value: "It is used for sending emails without any Mime component processing.", correct: false }
    help: |
      `RawMessage` is used to represent an email as a raw string (e.g., after serialization) and can be used to reconstitute an email for sending.
      https://symfony.com/doc/current/components/mime.html#recreate-symfony-email-from-serialized-data

  -
    question: >
      Which Symfony component provides the `HtmlToTextConverterInterface` for automatically creating the text part of an email from its HTML content?
    answers:
      - { value: "Symfony\\Component\\Mime", correct: true }
      - { value: "Symfony\\Component\\Mailer", correct: false }
      - { value: "Symfony\\Component\\HtmlToText", correct: false }
      - { value: "Twig\\Extra\\CssInliner", correct: false }
    help: |
      The `HtmlToTextConverterInterface` is part of the Mime component and is used by Mailer to generate plain text email bodies from HTML.
      https://symfony.com/doc/current/reference/configuration/twig.rst#symfony-mime-htmltotextconverterinterface-reference

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.envelope.sender` in `config/packages/mailer.yaml`?
    answers:
      - { value: "`sender: 'fabien@example.com'`", correct: true }
      - { value: "`from: 'fabien@example.com'`", correct: false }
      - { value: "`envelope_sender: 'fabien@example.com'`", correct: false }
      - { value: "`default_sender: 'fabien@example.com'`", correct: false }
    help: |
      The `sender` option under `framework.mailer.envelope` sets the global sender for all emails.
      https://symfony.com/doc/current/mailer.rst#configure-global-email-settings-in-symfony-mailer

  -
    question: >
      Which of the following is a valid way to configure the `framework.assets.version_strategy` to use a custom version strategy service?
    answers:
      - { value: "Set its value to the service ID of your custom version strategy.", correct: true }
      - { value: "Set its value to the FQCN of your custom version strategy class.", correct: false }
      - { value: "Register your custom strategy with the `asset.version_strategy` tag.", correct: false }
      - { value: "It can only be set to a built-in strategy name.", correct: false }
    help: |
      The `version_strategy` option expects the service ID of a class that implements `VersionStrategyInterface`.
      https://symfony.com/doc/current/deployment/best_practices.html#configure-asset-version-strategy

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\RedisStore`?
    answers:
      - { value: "It stores locks in memory, meaning locks are not persisted and can be lost on Redis service restart.", correct: true }
      - { value: "It supports blocking operations, allowing processes to wait for a lock.", correct: false }
      - { value: "It automatically creates the necessary database table for locks.", correct: false }
      - { value: "It relies on synchronized clocks across server nodes for purging old locks.", correct: false }
    help: |
      `RedisStore` is an in-memory store, so locks are not persistent across Redis restarts. It does not support blocking operations by itself.
      https://symfony.com/doc/current/components/lock.html#redisstore-in-memory-behavior-and-persistence-risks

  -
    question: >
      Which of the following is the correct way to configure a rate limiter to use a specific lock factory service in Symfony?
    answers:
      - { value: "Set `lock_factory` under the limiter's configuration to the service ID of the lock factory.", correct: true }
      - { value: "Set `lock_service` under the limiter's configuration.", correct: false }
      - { value: "Tag the lock factory service with `rate_limiter.lock_factory`.", correct: false }
      - { value: "Inject the lock factory directly into the rate limiter service definition.", correct: false }
    help: |
      The `lock_factory` option within a rate limiter's configuration allows you to specify which lock factory service it should use.
      https://symfony.com/doc/current/rate_limiter.html#configure-rate-limiter-lock-factory-in-symfony

  -
    question: >
      Which of the following is NOT a valid DSN for configuring the Symfony Lock component?
    answers:
      - { value: "`flock:///path/to/file`", correct: false }
      - { value: "`memcached://m1.docker`", correct: false }
      - { value: "`redis://r1.docker`", correct: false }
      - { value: "`http://localhost/lock`", correct: true }
      - { value: "`sqlite:///%kernel.project_dir%/var/lock.db`", correct: false }
    help: |
      The Lock component supports various DSNs for different stores (filesystem, in-memory, database, distributed caches), but not HTTP-based DSNs directly.
      https://symfony.com/doc/current/lock.html#configure-symfony-lock-component-with-various-dsns

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\CombinedStore`?
    answers:
      - { value: "It does not make the lock mechanism more reliable; it is only as reliable as its least reliable managed store.", correct: true }
      - { value: "It enhances reliability by distributing locks across multiple backends, ensuring high availability.", correct: false }
      - { value: "It automatically handles failover between its managed stores.", correct: false }
      - { value: "It requires all managed stores to successfully acquire the lock for the overall lock to be considered acquired.", correct: false }
    help: |
      `CombinedStore` allows using multiple backends but does not inherently improve reliability; its reliability is limited by the weakest link. The strategy (e.g., `UnanimousStrategy`, `ConsensusStrategy`) determines how multiple stores contribute to the overall lock acquisition.
      https://symfony.com/doc/current/components/lock.html#combinedstore-reliability-and-configuration-requirements

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.dsn` in `config/packages/framework.yaml`?
    answers:
      - { value: "`dsn: '%env(MAILER_DSN)%'`", correct: true }
      - { value: "`mailer_dsn: '%env(MAILER_DSN)%'`", correct: false }
      - { value: "`dsn: env('MAILER_DSN')`", correct: false }
      - { value: "`transport: '%env(MAILER_DSN)%'`", correct: false }
    help: |
      The `dsn` option under `framework.mailer` is used to configure the Mailer DSN, typically referencing an environment variable.
      https://symfony.com/doc/current/mailer.html#configure-mailer-dsn-in-symfony-framework-configuration

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Mime\\RawMessage`?
    answers:
      - { value: "It is used to recreate an email message from its serialized form.", correct: true }
      - { value: "It represents an email message before any headers or parts are added.", correct: false }
      - { value: "It is a low-level representation of an email's raw MIME content.", correct: true }
      - { value: "It is used for sending emails without any Mime component processing.", correct: false }
    help: |
      `RawMessage` is used to represent an email as a raw string (e.g., after serialization) and can be used to reconstitute an email for sending.
      https://symfony.com/doc/current/components/mime.html#recreate-symfony-email-from-serialized-data

  -
    question: >
      Which Symfony component provides the `HtmlToTextConverterInterface` for automatically creating the text part of an email from its HTML content?
    answers:
      - { value: "Symfony\\Component\\Mime", correct: true }
      - { value: "Symfony\\Component\\Mailer", correct: false }
      - { value: "Symfony\\Component\\HtmlToText", correct: false }
      - { value: "Twig\\Extra\\CssInliner", correct: false }
    help: |
      The `HtmlToTextConverterInterface` is part of the Mime component and is used by Mailer to generate plain text email bodies from HTML.
      https://symfony.com/doc/current/reference/configuration/twig.rst#symfony-mime-htmltotextconverterinterface-reference

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.envelope.sender` in `config/packages/mailer.yaml`?
    answers:
      - { value: "`sender: 'fabien@example.com'`", correct: true }
      - { value: "`from: 'fabien@example.com'`", correct: false }
      - { value: "`envelope_sender: 'fabien@example.com'`", correct: false }
      - { value: "`default_sender: 'fabien@example.com'`", correct: false }
    help: |
      The `sender` option under `framework.mailer.envelope` sets the global sender for all emails.
      https://symfony.com/doc/current/mailer.rst#configure-global-email-settings-in-symfony-mailer

  -
    question: >
      Which of the following is a valid way to configure the `framework.assets.version_strategy` to use a custom version strategy service?
    answers:
      - { value: "Set its value to the service ID of your custom version strategy.", correct: true }
      - { value: "Set its value to the FQCN of your custom version strategy class.", correct: false }
      - { value: "Register your custom strategy with the `asset.version_strategy` tag.", correct: false }
      - { value: "It can only be set to a built-in strategy name.", correct: false }
    help: |
      The `version_strategy` option expects the service ID of a class that implements `VersionStrategyInterface`.
      https://symfony.com/doc/current/deployment/best_practices.html#configure-asset-version-strategy

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\RedisStore`?
    answers:
      - { value: "It stores locks in memory, meaning locks are not persisted and can be lost on Redis service restart.", correct: true }
      - { value: "It supports blocking operations, allowing processes to wait for a lock.", correct: false }
      - { value: "It automatically creates the necessary database table for locks.", correct: false }
      - { value: "It relies on synchronized clocks across server nodes for purging old locks.", correct: false }
    help: |
      `RedisStore` is an in-memory store, so locks are not persistent across Redis restarts. It does not support blocking operations by itself.
      https://symfony.com/doc/current/components/lock.html#redisstore-in-memory-behavior-and-persistence-risks

  -
    question: >
      Which of the following is the correct way to configure a rate limiter to use a specific lock factory service in Symfony?
    answers:
      - { value: "Set `lock_factory` under the limiter's configuration to the service ID of the lock factory.", correct: true }
      - { value: "Set `lock_service` under the limiter's configuration.", correct: false }
      - { value: "Tag the lock factory service with `rate_limiter.lock_factory`.", correct: false }
      - { value: "Inject the lock factory directly into the rate limiter service definition.", correct: false }
    help: |
      The `lock_factory` option within a rate limiter's configuration allows you to specify which lock factory service it should use.
      https://symfony.com/doc/current/rate_limiter.html#configure-rate-limiter-lock-factory-in-symfony

  -
    question: >
      Which of the following is NOT a valid DSN for configuring the Symfony Lock component?
    answers:
      - { value: "`flock:///path/to/file`", correct: false }
      - { value: "`memcached://m1.docker`", correct: false }
      - { value: "`redis://r1.docker`", correct: false }
      - { value: "`http://localhost/lock`", correct: true }
      - { value: "`sqlite:///%kernel.project_dir%/var/lock.db`", correct: false }
    help: |
      The Lock component supports various DSNs for different stores (filesystem, in-memory, database, distributed caches), but not HTTP-based DSNs directly.
      https://symfony.com/doc/current/lock.html#configure-symfony-lock-component-with-various-dsns

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\CombinedStore`?
    answers:
      - { value: "It does not make the lock mechanism more reliable; it is only as reliable as its least reliable managed store.", correct: true }
      - { value: "It enhances reliability by distributing locks across multiple backends, ensuring high availability.", correct: false }
      - { value: "It automatically handles failover between its managed stores.", correct: false }
      - { value: "It requires all managed stores to successfully acquire the lock for the overall lock to be considered acquired.", correct: false }
    help: |
      `CombinedStore` allows using multiple backends but does not inherently improve reliability; its reliability is limited by the weakest link. The strategy (e.g., `UnanimousStrategy`, `ConsensusStrategy`) determines how multiple stores contribute to the overall lock acquisition.
      https://symfony.com/doc/current/components/lock.html#combinedstore-reliability-and-configuration-requirements

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.dsn` in `config/packages/framework.yaml`?
    answers:
      - { value: "`dsn: '%env(MAILER_DSN)%'`", correct: true }
      - { value: "`mailer_dsn: '%env(MAILER_DSN)%'`", correct: false }
      - { value: "`dsn: env('MAILER_DSN')`", correct: false }
      - { value: "`transport: '%env(MAILER_DSN)%'`", correct: false }
    help: |
      The `dsn` option under `framework.mailer` is used to configure the Mailer DSN, typically referencing an environment variable.
      https://symfony.com/doc/current/mailer.html#configure-mailer-dsn-in-symfony-framework-configuration

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Mime\\RawMessage`?
    answers:
      - { value: "It is used to recreate an email message from its serialized form.", correct: true }
      - { value: "It represents an email message before any headers or parts are added.", correct: false }
      - { value: "It is a low-level representation of an email's raw MIME content.", correct: true }
      - { value: "It is used for sending emails without any Mime component processing.", correct: false }
    help: |
      `RawMessage` is used to represent an email as a raw string (e.g., after serialization) and can be used to reconstitute an email for sending.
      https://symfony.com/doc/current/components/mime.html#recreate-symfony-email-from-serialized-data

  -
    question: >
      Which Symfony component provides the `HtmlToTextConverterInterface` for automatically creating the text part of an email from its HTML content?
    answers:
      - { value: "Symfony\\Component\\Mime", correct: true }
      - { value: "Symfony\\Component\\Mailer", correct: false }
      - { value: "Symfony\\Component\\HtmlToText", correct: false }
      - { value: "Twig\\Extra\\CssInliner", correct: false }
    help: |
      The `HtmlToTextConverterInterface` is part of the Mime component and is used by Mailer to generate plain text email bodies from HTML.
      https://symfony.com/doc/current/reference/configuration/twig.rst#symfony-mime-htmltotextconverterinterface-reference

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.envelope.sender` in `config/packages/mailer.yaml`?
    answers:
      - { value: "`sender: 'fabien@example.com'`", correct: true }
      - { value: "`from: 'fabien@example.com'`", correct: false }
      - { value: "`envelope_sender: 'fabien@example.com'`", correct: false }
      - { value: "`default_sender: 'fabien@example.com'`", correct: false }
    help: |
      The `sender` option under `framework.mailer.envelope` sets the global sender for all emails.
      https://symfony.com/doc/current/mailer.rst#configure-global-email-settings-in-symfony-mailer

  -
    question: >
      Which of the following is a valid way to configure the `framework.assets.version_strategy` to use a custom version strategy service?
    answers:
      - { value: "Set its value to the service ID of your custom version strategy.", correct: true }
      - { value: "Set its value to the FQCN of your custom version strategy class.", correct: false }
      - { value: "Register your custom strategy with the `asset.version_strategy` tag.", correct: false }
      - { value: "It can only be set to a built-in strategy name.", correct: false }
    help: |
      The `version_strategy` option expects the service ID of a class that implements `VersionStrategyInterface`.
      https://symfony.com/doc/current/deployment/best_practices.html#configure-asset-version-strategy

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\RedisStore`?
    answers:
      - { value: "It stores locks in memory, meaning locks are not persisted and can be lost on Redis service restart.", correct: true }
      - { value: "It supports blocking operations, allowing processes to wait for a lock.", correct: false }
      - { value: "It automatically creates the necessary database table for locks.", correct: false }
      - { value: "It relies on synchronized clocks across server nodes for purging old locks.", correct: false }
    help: |
      `RedisStore` is an in-memory store, so locks are not persistent across Redis restarts. It does not support blocking operations by itself.
      https://symfony.com/doc/current/components/lock.html#redisstore-in-memory-behavior-and-persistence-risks

  -
    question: >
      Which of the following is the correct way to configure a rate limiter to use a specific lock factory service in Symfony?
    answers:
      - { value: "Set `lock_factory` under the limiter's configuration to the service ID of the lock factory.", correct: true }
      - { value: "Set `lock_service` under the limiter's configuration.", correct: false }
      - { value: "Tag the lock factory service with `rate_limiter.lock_factory`.", correct: false }
      - { value: "Inject the lock factory directly into the rate limiter service definition.", correct: false }
    help: |
      The `lock_factory` option within a rate limiter's configuration allows you to specify which lock factory service it should use.
      https://symfony.com/doc/current/rate_limiter.html#configure-rate-limiter-lock-factory-in-symfony

  -
    question: >
      Which of the following is NOT a valid DSN for configuring the Symfony Lock component?
    answers:
      - { value: "`flock:///path/to/file`", correct: false }
      - { value: "`memcached://m1.docker`", correct: false }
      - { value: "`redis://r1.docker`", correct: false }
      - { value: "`http://localhost/lock`", correct: true }
      - { value: "`sqlite:///%kernel.project_dir%/var/lock.db`", correct: false }
    help: |
      The Lock component supports various DSNs for different stores (filesystem, in-memory, database, distributed caches), but not HTTP-based DSNs directly.
      https://symfony.com/doc/current/lock.html#configure-symfony-lock-component-with-various-dsns

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\CombinedStore`?
    answers:
      - { value: "It does not make the lock mechanism more reliable; it is only as reliable as its least reliable managed store.", correct: true }
      - { value: "It enhances reliability by distributing locks across multiple backends, ensuring high availability.", correct: false }
      - { value: "It automatically handles failover between its managed stores.", correct: false }
      - { value: "It requires all managed stores to successfully acquire the lock for the overall lock to be considered acquired.", correct: false }
    help: |
      `CombinedStore` allows using multiple backends but does not inherently improve reliability; its reliability is limited by the weakest link. The strategy (e.g., `UnanimousStrategy`, `ConsensusStrategy`) determines how multiple stores contribute to the overall lock acquisition.
      https://symfony.com/doc/current/components/lock.html#combinedstore-reliability-and-configuration-requirements

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.dsn` in `config/packages/framework.yaml`?
    answers:
      - { value: "`dsn: '%env(MAILER_DSN)%'`", correct: true }
      - { value: "`mailer_dsn: '%env(MAILER_DSN)%'`", correct: false }
      - { value: "`dsn: env('MAILER_DSN')`", correct: false }
      - { value: "`transport: '%env(MAILER_DSN)%'`", correct: false }
    help: |
      The `dsn` option under `framework.mailer` is used to configure the Mailer DSN, typically referencing an environment variable.
      https://symfony.com/doc/current/mailer.html#configure-mailer-dsn-in-symfony-framework-configuration

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Mime\\RawMessage`?
    answers:
      - { value: "It is used to recreate an email message from its serialized form.", correct: true }
      - { value: "It represents an email message before any headers or parts are added.", correct: false }
      - { value: "It is a low-level representation of an email's raw MIME content.", correct: true }
      - { value: "It is used for sending emails without any Mime component processing.", correct: false }
    help: |
      `RawMessage` is used to represent an email as a raw string (e.g., after serialization) and can be used to reconstitute an email for sending.
      https://symfony.com/doc/current/components/mime.html#recreate-symfony-email-from-serialized-data

  -
    question: >
      Which Symfony component provides the `HtmlToTextConverterInterface` for automatically creating the text part of an email from its HTML content?
    answers:
      - { value: "Symfony\\Component\\Mime", correct: true }
      - { value: "Symfony\\Component\\Mailer", correct: false }
      - { value: "Symfony\\Component\\HtmlToText", correct: false }
      - { value: "Twig\\Extra\\CssInliner", correct: false }
    help: |
      The `HtmlToTextConverterInterface` is part of the Mime component and is used by Mailer to generate plain text email bodies from HTML.
      https://symfony.com/doc/current/reference/configuration/twig.rst#symfony-mime-htmltotextconverterinterface-reference

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.envelope.sender` in `config/packages/mailer.yaml`?
    answers:
      - { value: "`sender: 'fabien@example.com'`", correct: true }
      - { value: "`from: 'fabien@example.com'`", correct: false }
      - { value: "`envelope_sender: 'fabien@example.com'`", correct: false }
      - { value: "`default_sender: 'fabien@example.com'`", correct: false }
    help: |
      The `sender` option under `framework.mailer.envelope` sets the global sender for all emails.
      https://symfony.com/doc/current/mailer.rst#configure-global-email-settings-in-symfony-mailer

  -
    question: >
      Which of the following is a valid way to configure the `framework.assets.version_strategy` to use a custom version strategy service?
    answers:
      - { value: "Set its value to the service ID of your custom version strategy.", correct: true }
      - { value: "Set its value to the FQCN of your custom version strategy class.", correct: false }
      - { value: "Register your custom strategy with the `asset.version_strategy` tag.", correct: false }
      - { value: "It can only be set to a built-in strategy name.", correct: false }
    help: |
      The `version_strategy` option expects the service ID of a class that implements `VersionStrategyInterface`.
      https://symfony.com/doc/current/deployment/best_practices.html#configure-asset-version-strategy

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\RedisStore`?
    answers:
      - { value: "It stores locks in memory, meaning locks are not persisted and can be lost on Redis service restart.", correct: true }
      - { value: "It supports blocking operations, allowing processes to wait for a lock.", correct: false }
      - { value: "It automatically creates the necessary database table for locks.", correct: false }
      - { value: "It relies on synchronized clocks across server nodes for purging old locks.", correct: false }
    help: |
      `RedisStore` is an in-memory store, so locks are not persistent across Redis restarts. It does not support blocking operations by itself.
      https://symfony.com/doc/current/components/lock.html#redisstore-in-memory-behavior-and-persistence-risks

  -
    question: >
      Which of the following is the correct way to configure a rate limiter to use a specific lock factory service in Symfony?
    answers:
      - { value: "Set `lock_factory` under the limiter's configuration to the service ID of the lock factory.", correct: true }
      - { value: "Set `lock_service` under the limiter's configuration.", correct: false }
      - { value: "Tag the lock factory service with `rate_limiter.lock_factory`.", correct: false }
      - { value: "Inject the lock factory directly into the rate limiter service definition.", correct: false }
    help: |
      The `lock_factory` option within a rate limiter's configuration allows you to specify which lock factory service it should use.
      https://symfony.com/doc/current/rate_limiter.html#configure-rate-limiter-lock-factory-in-symfony

  -
    question: >
      Which of the following is NOT a valid DSN for configuring the Symfony Lock component?
    answers:
      - { value: "`flock:///path/to/file`", correct: false }
      - { value: "`memcached://m1.docker`", correct: false }
      - { value: "`redis://r1.docker`", correct: false }
      - { value: "`http://localhost/lock`", correct: true }
      - { value: "`sqlite:///%kernel.project_dir%/var/lock.db`", correct: false }
    help: |
      The Lock component supports various DSNs for different stores (filesystem, in-memory, database, distributed caches), but not HTTP-based DSNs directly.
      https://symfony.com/doc/current/lock.html#configure-symfony-lock-component-with-various-dsns

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\CombinedStore`?
    answers:
      - { value: "It does not make the lock mechanism more reliable; it is only as reliable as its least reliable managed store.", correct: true }
      - { value: "It enhances reliability by distributing locks across multiple backends, ensuring high availability.", correct: false }
      - { value: "It automatically handles failover between its managed stores.", correct: false }
      - { value: "It requires all managed stores to successfully acquire the lock for the overall lock to be considered acquired.", correct: false }
    help: |
      `CombinedStore` allows using multiple backends but does not inherently improve reliability; its reliability is limited by the weakest link. The strategy (e.g., `UnanimousStrategy`, `ConsensusStrategy`) determines how multiple stores contribute to the overall lock acquisition.
      https://symfony.com/doc/current/components/lock.html#combinedstore-reliability-and-configuration-requirements

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.dsn` in `config/packages/framework.yaml`?
    answers:
      - { value: "`dsn: '%env(MAILER_DSN)%'`", correct: true }
      - { value: "`mailer_dsn: '%env(MAILER_DSN)%'`", correct: false }
      - { value: "`dsn: env('MAILER_DSN')`", correct: false }
      - { value: "`transport: '%env(MAILER_DSN)%'`", correct: false }
    help: |
      The `dsn` option under `framework.mailer` is used to configure the Mailer DSN, typically referencing an environment variable.
      https://symfony.com/doc/current/mailer.html#configure-mailer-dsn-in-symfony-framework-configuration

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Mime\\RawMessage`?
    answers:
      - { value: "It is used to recreate an email message from its serialized form.", correct: true }
      - { value: "It represents an email message before any headers or parts are added.", correct: false }
      - { value: "It is a low-level representation of an email's raw MIME content.", correct: true }
      - { value: "It is used for sending emails without any Mime component processing.", correct: false }
    help: |
      `RawMessage` is used to represent an email as a raw string (e.g., after serialization) and can be used to reconstitute an email for sending.
      https://symfony.com/doc/current/components/mime.html#recreate-symfony-email-from-serialized-data

  -
    question: >
      Which Symfony component provides the `HtmlToTextConverterInterface` for automatically creating the text part of an email from its HTML content?
    answers:
      - { value: "Symfony\\Component\\Mime", correct: true }
      - { value: "Symfony\\Component\\Mailer", correct: false }
      - { value: "Symfony\\Component\\HtmlToText", correct: false }
      - { value: "Twig\\Extra\\CssInliner", correct: false }
    help: |
      The `HtmlToTextConverterInterface` is part of the Mime component and is used by Mailer to generate plain text email bodies from HTML.
      https://symfony.com/doc/current/reference/configuration/twig.rst#symfony-mime-htmltotextconverterinterface-reference

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.envelope.sender` in `config/packages/mailer.yaml`?
    answers:
      - { value: "`sender: 'fabien@example.com'`", correct: true }
      - { value: "`from: 'fabien@example.com'`", correct: false }
      - { value: "`envelope_sender: 'fabien@example.com'`", correct: false }
      - { value: "`default_sender: 'fabien@example.com'`", correct: false }
    help: |
      The `sender` option under `framework.mailer.envelope` sets the global sender for all emails.
      https://symfony.com/doc/current/mailer.rst#configure-global-email-settings-in-symfony-mailer

  -
    question: >
      Which of the following is a valid way to configure the `framework.assets.version_strategy` to use a custom version strategy service?
    answers:
      - { value: "Set its value to the service ID of your custom version strategy.", correct: true }
      - { value: "Set its value to the FQCN of your custom version strategy class.", correct: false }
      - { value: "Register your custom strategy with the `asset.version_strategy` tag.", correct: false }
      - { value: "It can only be set to a built-in strategy name.", correct: false }
    help: |
      The `version_strategy` option expects the service ID of a class that implements `VersionStrategyInterface`.
      https://symfony.com/doc/current/deployment/best_practices.html#configure-asset-version-strategy

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\RedisStore`?
    answers:
      - { value: "It stores locks in memory, meaning locks are not persisted and can be lost on Redis service restart.", correct: true }
      - { value: "It supports blocking operations, allowing processes to wait for a lock.", correct: false }
      - { value: "It automatically creates the necessary database table for locks.", correct: false }
      - { value: "It relies on synchronized clocks across server nodes for purging old locks.", correct: false }
    help: |
      `RedisStore` is an in-memory store, so locks are not persistent across Redis restarts. It does not support blocking operations by itself.
      https://symfony.com/doc/current/components/lock.html#redisstore-in-memory-behavior-and-persistence-risks

  -
    question: >
      Which of the following is the correct way to configure a rate limiter to use a specific lock factory service in Symfony?
    answers:
      - { value: "Set `lock_factory` under the limiter's configuration to the service ID of the lock factory.", correct: true }
      - { value: "Set `lock_service` under the limiter's configuration.", correct: false }
      - { value: "Tag the lock factory service with `rate_limiter.lock_factory`.", correct: false }
      - { value: "Inject the lock factory directly into the rate limiter service definition.", correct: false }
    help: |
      The `lock_factory` option within a rate limiter's configuration allows you to specify which lock factory service it should use.
      https://symfony.com/doc/current/rate_limiter.html#configure-rate-limiter-lock-factory-in-symfony

  -
    question: >
      Which of the following is NOT a valid DSN for configuring the Symfony Lock component?
    answers:
      - { value: "`flock:///path/to/file`", correct: false }
      - { value: "`memcached://m1.docker`", correct: false }
      - { value: "`redis://r1.docker`", correct: false }
      - { value: "`http://localhost/lock`", correct: true }
      - { value: "`sqlite:///%kernel.project_dir%/var/lock.db`", correct: false }
    help: |
      The Lock component supports various DSNs for different stores (filesystem, in-memory, database, distributed caches), but not HTTP-based DSNs directly.
      https://symfony.com/doc/current/lock.html#configure-symfony-lock-component-with-various-dsns

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\CombinedStore`?
    answers:
      - { value: "It does not make the lock mechanism more reliable; it is only as reliable as its least reliable managed store.", correct: true }
      - { value: "It enhances reliability by distributing locks across multiple backends, ensuring high availability.", correct: false }
      - { value: "It automatically handles failover between its managed stores.", correct: false }
      - { value: "It requires all managed stores to successfully acquire the lock for the overall lock to be considered acquired.", correct: false }
    help: |
      `CombinedStore` allows using multiple backends but does not inherently improve reliability; its reliability is limited by the weakest link. The strategy (e.g., `UnanimousStrategy`, `ConsensusStrategy`) determines how multiple stores contribute to the overall lock acquisition.
      https://symfony.com/doc/current/components/lock.html#combinedstore-reliability-and-configuration-requirements

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.dsn` in `config/packages/framework.yaml`?
    answers:
      - { value: "`dsn: '%env(MAILER_DSN)%'`", correct: true }
      - { value: "`mailer_dsn: '%env(MAILER_DSN)%'`", correct: false }
      - { value: "`dsn: env('MAILER_DSN')`", correct: false }
      - { value: "`transport: '%env(MAILER_DSN)%'`", correct: false }
    help: |
      The `dsn` option under `framework.mailer` is used to configure the Mailer DSN, typically referencing an environment variable.
      https://symfony.com/doc/current/mailer.html#configure-mailer-dsn-in-symfony-framework-configuration

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Mime\\RawMessage`?
    answers:
      - { value: "It is used to recreate an email message from its serialized form.", correct: true }
      - { value: "It represents an email message before any headers or parts are added.", correct: false }
      - { value: "It is a low-level representation of an email's raw MIME content.", correct: true }
      - { value: "It is used for sending emails without any Mime component processing.", correct: false }
    help: |
      `RawMessage` is used to represent an email as a raw string (e.g., after serialization) and can be used to reconstitute an email for sending.
      https://symfony.com/doc/current/components/mime.html#recreate-symfony-email-from-serialized-data

  -
    question: >
      Which Symfony component provides the `HtmlToTextConverterInterface` for automatically creating the text part of an email from its HTML content?
    answers:
      - { value: "Symfony\\Component\\Mime", correct: true }
      - { value: "Symfony\\Component\\Mailer", correct: false }
      - { value: "Symfony\\Component\\HtmlToText", correct: false }
      - { value: "Twig\\Extra\\CssInliner", correct: false }
    help: |
      The `HtmlToTextConverterInterface` is part of the Mime component and is used by Mailer to generate plain text email bodies from HTML.
      https://symfony.com/doc/current/reference/configuration/twig.rst#symfony-mime-htmltotextconverterinterface-reference

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.envelope.sender` in `config/packages/mailer.yaml`?
    answers:
      - { value: "`sender: 'fabien@example.com'`", correct: true }
      - { value: "`from: 'fabien@example.com'`", correct: false }
      - { value: "`envelope_sender: 'fabien@example.com'`", correct: false }
      - { value: "`default_sender: 'fabien@example.com'`", correct: false }
    help: |
      The `sender` option under `framework.mailer.envelope` sets the global sender for all emails.
      https://symfony.com/doc/current/mailer.rst#configure-global-email-settings-in-symfony-mailer

  -
    question: >
      Which of the following is a valid way to configure the `framework.assets.version_strategy` to use a custom version strategy service?
    answers:
      - { value: "Set its value to the service ID of your custom version strategy.", correct: true }
      - { value: "Set its value to the FQCN of your custom version strategy class.", correct: false }
      - { value: "Register your custom strategy with the `asset.version_strategy` tag.", correct: false }
      - { value: "It can only be set to a built-in strategy name.", correct: false }
    help: |
      The `version_strategy` option expects the service ID of a class that implements `VersionStrategyInterface`.
      https://symfony.com/doc/current/deployment/best_practices.html#configure-asset-version-strategy

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\RedisStore`?
    answers:
      - { value: "It stores locks in memory, meaning locks are not persisted and can be lost on Redis service restart.", correct: true }
      - { value: "It supports blocking operations, allowing processes to wait for a lock.", correct: false }
      - { value: "It automatically creates the necessary database table for locks.", correct: false }
      - { value: "It relies on synchronized clocks across server nodes for purging old locks.", correct: false }
    help: |
      `RedisStore` is an in-memory store, so locks are not persistent across Redis restarts. It does not support blocking operations by itself.
      https://symfony.com/doc/current/components/lock.html#redisstore-in-memory-behavior-and-persistence-risks

  -
    question: >
      Which of the following is the correct way to configure a rate limiter to use a specific lock factory service in Symfony?
    answers:
      - { value: "Set `lock_factory` under the limiter's configuration to the service ID of the lock factory.", correct: true }
      - { value: "Set `lock_service` under the limiter's configuration.", correct: false }
      - { value: "Tag the lock factory service with `rate_limiter.lock_factory`.", correct: false }
      - { value: "Inject the lock factory directly into the rate limiter service definition.", correct: false }
    help: |
      The `lock_factory` option within a rate limiter's configuration allows you to specify which lock factory service it should use.
      https://symfony.com/doc/current/rate_limiter.html#configure-rate-limiter-lock-factory-in-symfony

  -
    question: >
      Which of the following is NOT a valid DSN for configuring the Symfony Lock component?
    answers:
      - { value: "`flock:///path/to/file`", correct: false }
      - { value: "`memcached://m1.docker`", correct: false }
      - { value: "`redis://r1.docker`", correct: false }
      - { value: "`http://localhost/lock`", correct: true }
      - { value: "`sqlite:///%kernel.project_dir%/var/lock.db`", correct: false }
    help: |
      The Lock component supports various DSNs for different stores (filesystem, in-memory, database, distributed caches), but not HTTP-based DSNs directly.
      https://symfony.com/doc/current/lock.html#configure-symfony-lock-component-with-various-dsns

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\CombinedStore`?
    answers:
      - { value: "It does not make the lock mechanism more reliable; it is only as reliable as its least reliable managed store.", correct: true }
      - { value: "It enhances reliability by distributing locks across multiple backends, ensuring high availability.", correct: false }
      - { value: "It automatically handles failover between its managed stores.", correct: false }
      - { value: "It requires all managed stores to successfully acquire the lock for the overall lock to be considered acquired.", correct: false }
    help: |
      `CombinedStore` allows using multiple backends but does not inherently improve reliability; its reliability is limited by the weakest link. The strategy (e.g., `UnanimousStrategy`, `ConsensusStrategy`) determines how multiple stores contribute to the overall lock acquisition.
      https://symfony.com/doc/current/components/lock.html#combinedstore-reliability-and-configuration-requirements

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.dsn` in `config/packages/framework.yaml`?
    answers:
      - { value: "`dsn: '%env(MAILER_DSN)%'`", correct: true }
      - { value: "`mailer_dsn: '%env(MAILER_DSN)%'`", correct: false }
      - { value: "`dsn: env('MAILER_DSN')`", correct: false }
      - { value: "`transport: '%env(MAILER_DSN)%'`", correct: false }
    help: |
      The `dsn` option under `framework.mailer` is used to configure the Mailer DSN, typically referencing an environment variable.
      https://symfony.com/doc/current/mailer.html#configure-mailer-dsn-in-symfony-framework-configuration

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Mime\\RawMessage`?
    answers:
      - { value: "It is used to recreate an email message from its serialized form.", correct: true }
      - { value: "It represents an email message before any headers or parts are added.", correct: false }
      - { value: "It is a low-level representation of an email's raw MIME content.", correct: true }
      - { value: "It is used for sending emails without any Mime component processing.", correct: false }
    help: |
      `RawMessage` is used to represent an email as a raw string (e.g., after serialization) and can be used to reconstitute an email for sending.
      https://symfony.com/doc/current/components/mime.html#recreate-symfony-email-from-serialized-data

  -
    question: >
      Which Symfony component provides the `HtmlToTextConverterInterface` for automatically creating the text part of an email from its HTML content?
    answers:
      - { value: "Symfony\\Component\\Mime", correct: true }
      - { value: "Symfony\\Component\\Mailer", correct: false }
      - { value: "Symfony\\Component\\HtmlToText", correct: false }
      - { value: "Twig\\Extra\\CssInliner", correct: false }
    help: |
      The `HtmlToTextConverterInterface` is part of the Mime component and is used by Mailer to generate plain text email bodies from HTML.
      https://symfony.com/doc/current/reference/configuration/twig.rst#symfony-mime-htmltotextconverterinterface-reference

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.envelope.sender` in `config/packages/mailer.yaml`?
    answers:
      - { value: "`sender: 'fabien@example.com'`", correct: true }
      - { value: "`from: 'fabien@example.com'`", correct: false }
      - { value: "`envelope_sender: 'fabien@example.com'`", correct: false }
      - { value: "`default_sender: 'fabien@example.com'`", correct: false }
    help: |
      The `sender` option under `framework.mailer.envelope` sets the global sender for all emails.
      https://symfony.com/doc/current/mailer.rst#configure-global-email-settings-in-symfony-mailer

  -
    question: >
      Which of the following is a valid way to configure the `framework.assets.version_strategy` to use a custom version strategy service?
    answers:
      - { value: "Set its value to the service ID of your custom version strategy.", correct: true }
      - { value: "Set its value to the FQCN of your custom version strategy class.", correct: false }
      - { value: "Register your custom strategy with the `asset.version_strategy` tag.", correct: false }
      - { value: "It can only be set to a built-in strategy name.", correct: false }
    help: |
      The `version_strategy` option expects the service ID of a class that implements `VersionStrategyInterface`.
      https://symfony.com/doc/current/deployment/best_practices.html#configure-asset-version-strategy

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\RedisStore`?
    answers:
      - { value: "It stores locks in memory, meaning locks are not persisted and can be lost on Redis service restart.", correct: true }
      - { value: "It supports blocking operations, allowing processes to wait for a lock.", correct: false }
      - { value: "It automatically creates the necessary database table for locks.", correct: false }
      - { value: "It relies on synchronized clocks across server nodes for purging old locks.", correct: false }
    help: |
      `RedisStore` is an in-memory store, so locks are not persistent across Redis restarts. It does not support blocking operations by itself.
      https://symfony.com/doc/current/components/lock.html#redisstore-in-memory-behavior-and-persistence-risks

  -
    question: >
      Which of the following is the correct way to configure a rate limiter to use a specific lock factory service in Symfony?
    answers:
      - { value: "Set `lock_factory` under the limiter's configuration to the service ID of the lock factory.", correct: true }
      - { value: "Set `lock_service` under the limiter's configuration.", correct: false }
      - { value: "Tag the lock factory service with `rate_limiter.lock_factory`.", correct: false }
      - { value: "Inject the lock factory directly into the rate limiter service definition.", correct: false }
    help: |
      The `lock_factory` option within a rate limiter's configuration allows you to specify which lock factory service it should use.
      https://symfony.com/doc/current/rate_limiter.html#configure-rate-limiter-lock-factory-in-symfony

  -
    question: >
      Which of the following is NOT a valid DSN for configuring the Symfony Lock component?
    answers:
      - { value: "`flock:///path/to/file`", correct: false }
      - { value: "`memcached://m1.docker`", correct: false }
      - { value: "`redis://r1.docker`", correct: false }
      - { value: "`http://localhost/lock`", correct: true }
      - { value: "`sqlite:///%kernel.project_dir%/var/lock.db`", correct: false }
    help: |
      The Lock component supports various DSNs for different stores (filesystem, in-memory, database, distributed caches), but not HTTP-based DSNs directly.
      https://symfony.com/doc/current/lock.html#configure-symfony-lock-component-with-various-dsns

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\CombinedStore`?
    answers:
      - { value: "It does not make the lock mechanism more reliable; it is only as reliable as its least reliable managed store.", correct: true }
      - { value: "It enhances reliability by distributing locks across multiple backends, ensuring high availability.", correct: false }
      - { value: "It automatically handles failover between its managed stores.", correct: false }
      - { value: "It requires all managed stores to successfully acquire the lock for the overall lock to be considered acquired.", correct: false }
    help: |
      `CombinedStore` allows using multiple backends but does not inherently improve reliability; its reliability is limited by the weakest link. The strategy (e.g., `UnanimousStrategy`, `ConsensusStrategy`) determines how multiple stores contribute to the overall lock acquisition.
      https://symfony.com/doc/current/components/lock.html#combinedstore-reliability-and-configuration-requirements

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.dsn` in `config/packages/framework.yaml`?
    answers:
      - { value: "`dsn: '%env(MAILER_DSN)%'`", correct: true }
      - { value: "`mailer_dsn: '%env(MAILER_DSN)%'`", correct: false }
      - { value: "`dsn: env('MAILER_DSN')`", correct: false }
      - { value: "`transport: '%env(MAILER_DSN)%'`", correct: false }
    help: |
      The `dsn` option under `framework.mailer` is used to configure the Mailer DSN, typically referencing an environment variable.
      https://symfony.com/doc/current/mailer.html#configure-mailer-dsn-in-symfony-framework-configuration

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Mime\\RawMessage`?
    answers:
      - { value: "It is used to recreate an email message from its serialized form.", correct: true }
      - { value: "It represents an email message before any headers or parts are added.", correct: false }
      - { value: "It is a low-level representation of an email's raw MIME content.", correct: true }
      - { value: "It is used for sending emails without any Mime component processing.", correct: false }
    help: |
      `RawMessage` is used to represent an email as a raw string (e.g., after serialization) and can be used to reconstitute an email for sending.
      https://symfony.com/doc/current/components/mime.html#recreate-symfony-email-from-serialized-data

  -
    question: >
      Which Symfony component provides the `HtmlToTextConverterInterface` for automatically creating the text part of an email from its HTML content?
    answers:
      - { value: "Symfony\\Component\\Mime", correct: true }
      - { value: "Symfony\\Component\\Mailer", correct: false }
      - { value: "Symfony\\Component\\HtmlToText", correct: false }
      - { value: "Twig\\Extra\\CssInliner", correct: false }
    help: |
      The `HtmlToTextConverterInterface` is part of the Mime component and is used by Mailer to generate plain text email bodies from HTML.
      https://symfony.com/doc/current/reference/configuration/twig.rst#symfony-mime-htmltotextconverterinterface-reference

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.envelope.sender` in `config/packages/mailer.yaml`?
    answers:
      - { value: "`sender: 'fabien@example.com'`", correct: true }
      - { value: "`from: 'fabien@example.com'`", correct: false }
      - { value: "`envelope_sender: 'fabien@example.com'`", correct: false }
      - { value: "`default_sender: 'fabien@example.com'`", correct: false }
    help: |
      The `sender` option under `framework.mailer.envelope` sets the global sender for all emails.
      https://symfony.com/doc/current/mailer.rst#configure-global-email-settings-in-symfony-mailer

  -
    question: >
      Which of the following is a valid way to configure the `framework.assets.version_strategy` to use a custom version strategy service?
    answers:
      - { value: "Set its value to the service ID of your custom version strategy.", correct: true }
      - { value: "Set its value to the FQCN of your custom version strategy class.", correct: false }
      - { value: "Register your custom strategy with the `asset.version_strategy` tag.", correct: false }
      - { value: "It can only be set to a built-in strategy name.", correct: false }
    help: |
      The `version_strategy` option expects the service ID of a class that implements `VersionStrategyInterface`.
      https://symfony.com/doc/current/deployment/best_practices.html#configure-asset-version-strategy

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\RedisStore`?
    answers:
      - { value: "It stores locks in memory, meaning locks are not persisted and can be lost on Redis service restart.", correct: true }
      - { value: "It supports blocking operations, allowing processes to wait for a lock.", correct: false }
      - { value: "It automatically creates the necessary database table for locks.", correct: false }
      - { value: "It relies on synchronized clocks across server nodes for purging old locks.", correct: false }
    help: |
      `RedisStore` is an in-memory store, so locks are not persistent across Redis restarts. It does not support blocking operations by itself.
      https://symfony.com/doc/current/components/lock.html#redisstore-in-memory-behavior-and-persistence-risks

  -
    question: >
      Which of the following is the correct way to configure a rate limiter to use a specific lock factory service in Symfony?
    answers:
      - { value: "Set `lock_factory` under the limiter's configuration to the service ID of the lock factory.", correct: true }
      - { value: "Set `lock_service` under the limiter's configuration.", correct: false }
      - { value: "Tag the lock factory service with `rate_limiter.lock_factory`.", correct: false }
      - { value: "Inject the lock factory directly into the rate limiter service definition.", correct: false }
    help: |
      The `lock_factory` option within a rate limiter's configuration allows you to specify which lock factory service it should use.
      https://symfony.com/doc/current/rate_limiter.html#configure-rate-limiter-lock-factory-in-symfony

  -
    question: >
      Which of the following is NOT a valid DSN for configuring the Symfony Lock component?
    answers:
      - { value: "`flock:///path/to/file`", correct: false }
      - { value: "`memcached://m1.docker`", correct: false }
      - { value: "`redis://r1.docker`", correct: false }
      - { value: "`http://localhost/lock`", correct: true }
      - { value: "`sqlite:///%kernel.project_dir%/var/lock.db`", correct: false }
    help: |
      The Lock component supports various DSNs for different stores (filesystem, in-memory, database, distributed caches), but not HTTP-based DSNs directly.
      https://symfony.com/doc/current/lock.html#configure-symfony-lock-component-with-various-dsns

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\CombinedStore`?
    answers:
      - { value: "It does not make the lock mechanism more reliable; it is only as reliable as its least reliable managed store.", correct: true }
      - { value: "It enhances reliability by distributing locks across multiple backends, ensuring high availability.", correct: false }
      - { value: "It automatically handles failover between its managed stores.", correct: false }
      - { value: "It requires all managed stores to successfully acquire the lock for the overall lock to be considered acquired.", correct: false }
    help: |
      `CombinedStore` allows using multiple backends but does not inherently improve reliability; its reliability is limited by the weakest link. The strategy (e.g., `UnanimousStrategy`, `ConsensusStrategy`) determines how multiple stores contribute to the overall lock acquisition.
      https://symfony.com/doc/current/components/lock.html#combinedstore-reliability-and-configuration-requirements

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.dsn` in `config/packages/framework.yaml`?
    answers:
      - { value: "`dsn: '%env(MAILER_DSN)%'`", correct: true }
      - { value: "`mailer_dsn: '%env(MAILER_DSN)%'`", correct: false }
      - { value: "`dsn: env('MAILER_DSN')`", correct: false }
      - { value: "`transport: '%env(MAILER_DSN)%'`", correct: false }
    help: |
      The `dsn` option under `framework.mailer` is used to configure the Mailer DSN, typically referencing an environment variable.
      https://symfony.com/doc/current/mailer.html#configure-mailer-dsn-in-symfony-framework-configuration

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Mime\\RawMessage`?
    answers:
      - { value: "It is used to recreate an email message from its serialized form.", correct: true }
      - { value: "It represents an email message before any headers or parts are added.", correct: false }
      - { value: "It is a low-level representation of an email's raw MIME content.", correct: true }
      - { value: "It is used for sending emails without any Mime component processing.", correct: false }
    help: |
      `RawMessage` is used to represent an email as a raw string (e.g., after serialization) and can be used to reconstitute an email for sending.
      https://symfony.com/doc/current/components/mime.html#recreate-symfony-email-from-serialized-data

  -
    question: >
      Which Symfony component provides the `HtmlToTextConverterInterface` for automatically creating the text part of an email from its HTML content?
    answers:
      - { value: "Symfony\\Component\\Mime", correct: true }
      - { value: "Symfony\\Component\\Mailer", correct: false }
      - { value: "Symfony\\Component\\HtmlToText", correct: false }
      - { value: "Twig\\Extra\\CssInliner", correct: false }
    help: |
      The `HtmlToTextConverterInterface` is part of the Mime component and is used by Mailer to generate plain text email bodies from HTML.
      https://symfony.com/doc/current/reference/configuration/twig.rst#symfony-mime-htmltotextconverterinterface-reference

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.envelope.sender` in `config/packages/mailer.yaml`?
    answers:
      - { value: "`sender: 'fabien@example.com'`", correct: true }
      - { value: "`from: 'fabien@example.com'`", correct: false }
      - { value: "`envelope_sender: 'fabien@example.com'`", correct: false }
      - { value: "`default_sender: 'fabien@example.com'`", correct: false }
    help: |
      The `sender` option under `framework.mailer.envelope` sets the global sender for all emails.
      https://symfony.com/doc/current/mailer.rst#configure-global-email-settings-in-symfony-mailer

  -
    question: >
      Which of the following is a valid way to configure the `framework.assets.version_strategy` to use a custom version strategy service?
    answers:
      - { value: "Set its value to the service ID of your custom version strategy.", correct: true }
      - { value: "Set its value to the FQCN of your custom version strategy class.", correct: false }
      - { value: "Register your custom strategy with the `asset.version_strategy` tag.", correct: false }
      - { value: "It can only be set to a built-in strategy name.", correct: false }
    help: |
      The `version_strategy` option expects the service ID of a class that implements `VersionStrategyInterface`.
      https://symfony.com/doc/current/deployment/best_practices.html#configure-asset-version-strategy

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\RedisStore`?
    answers:
      - { value: "It stores locks in memory, meaning locks are not persisted and can be lost on Redis service restart.", correct: true }
      - { value: "It supports blocking operations, allowing processes to wait for a lock.", correct: false }
      - { value: "It automatically creates the necessary database table for locks.", correct: false }
      - { value: "It relies on synchronized clocks across server nodes for purging old locks.", correct: false }
    help: |
      `RedisStore` is an in-memory store, so locks are not persistent across Redis restarts. It does not support blocking operations by itself.
      https://symfony.com/doc/current/components/lock.html#redisstore-in-memory-behavior-and-persistence-risks

  -
    question: >
      Which of the following is the correct way to configure a rate limiter to use a specific lock factory service in Symfony?
    answers:
      - { value: "Set `lock_factory` under the limiter's configuration to the service ID of the lock factory.", correct: true }
      - { value: "Set `lock_service` under the limiter's configuration.", correct: false }
      - { value: "Tag the lock factory service with `rate_limiter.lock_factory`.", correct: false }
      - { value: "Inject the lock factory directly into the rate limiter service definition.", correct: false }
    help: |
      The `lock_factory` option within a rate limiter's configuration allows you to specify which lock factory service it should use.
      https://symfony.com/doc/current/rate_limiter.html#configure-rate-limiter-lock-factory-in-symfony

  -
    question: >
      Which of the following is NOT a valid DSN for configuring the Symfony Lock component?
    answers:
      - { value: "`flock:///path/to/file`", correct: false }
      - { value: "`memcached://m1.docker`", correct: false }
      - { value: "`redis://r1.docker`", correct: false }
      - { value: "`http://localhost/lock`", correct: true }
      - { value: "`sqlite:///%kernel.project_dir%/var/lock.db`", correct: false }
    help: |
      The Lock component supports various DSNs for different stores (filesystem, in-memory, database, distributed caches), but not HTTP-based DSNs directly.
      https://symfony.com/doc/current/lock.html#configure-symfony-lock-component-with-various-dsns

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\CombinedStore`?
    answers:
      - { value: "It does not make the lock mechanism more reliable; it is only as reliable as its least reliable managed store.", correct: true }
      - { value: "It enhances reliability by distributing locks across multiple backends, ensuring high availability.", correct: false }
      - { value: "It automatically handles failover between its managed stores.", correct: false }
      - { value: "It requires all managed stores to successfully acquire the lock for the overall lock to be considered acquired.", correct: false }
    help: |
      `CombinedStore` allows using multiple backends but does not inherently improve reliability; its reliability is limited by the weakest link. The strategy (e.g., `UnanimousStrategy`, `ConsensusStrategy`) determines how multiple stores contribute to the overall lock acquisition.
      https://symfony.com/doc/current/components/lock.html#combinedstore-reliability-and-configuration-requirements

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.dsn` in `config/packages/framework.yaml`?
    answers:
      - { value: "`dsn: '%env(MAILER_DSN)%'`", correct: true }
      - { value: "`mailer_dsn: '%env(MAILER_DSN)%'`", correct: false }
      - { value: "`dsn: env('MAILER_DSN')`", correct: false }
      - { value: "`transport: '%env(MAILER_DSN)%'`", correct: false }
    help: |
      The `dsn` option under `framework.mailer` is used to configure the Mailer DSN, typically referencing an environment variable.
      https://symfony.com/doc/current/mailer.html#configure-mailer-dsn-in-symfony-framework-configuration

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Mime\\RawMessage`?
    answers:
      - { value: "It is used to recreate an email message from its serialized form.", correct: true }
      - { value: "It represents an email message before any headers or parts are added.", correct: false }
      - { value: "It is a low-level representation of an email's raw MIME content.", correct: true }
      - { value: "It is used for sending emails without any Mime component processing.", correct: false }
    help: |
      `RawMessage` is used to represent an email as a raw string (e.g., after serialization) and can be used to reconstitute an email for sending.
      https://symfony.com/doc/current/components/mime.html#recreate-symfony-email-from-serialized-data

  -
    question: >
      Which Symfony component provides the `HtmlToTextConverterInterface` for automatically creating the text part of an email from its HTML content?
    answers:
      - { value: "Symfony\\Component\\Mime", correct: true }
      - { value: "Symfony\\Component\\Mailer", correct: false }
      - { value: "Symfony\\Component\\HtmlToText", correct: false }
      - { value: "Twig\\Extra\\CssInliner", correct: false }
    help: |
      The `HtmlToTextConverterInterface` is part of the Mime component and is used by Mailer to generate plain text email bodies from HTML.
      https://symfony.com/doc/current/reference/configuration/twig.rst#symfony-mime-htmltotextconverterinterface-reference

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.envelope.sender` in `config/packages/mailer.yaml`?
    answers:
      - { value: "`sender: 'fabien@example.com'`", correct: true }
      - { value: "`from: 'fabien@example.com'`", correct: false }
      - { value: "`envelope_sender: 'fabien@example.com'`", correct: false }
      - { value: "`default_sender: 'fabien@example.com'`", correct: false }
    help: |
      The `sender` option under `framework.mailer.envelope` sets the global sender for all emails.
      https://symfony.com/doc/current/mailer.rst#configure-global-email-settings-in-symfony-mailer

  -
    question: >
      Which of the following is a valid way to configure the `framework.assets.version_strategy` to use a custom version strategy service?
    answers:
      - { value: "Set its value to the service ID of your custom version strategy.", correct: true }
      - { value: "Set its value to the FQCN of your custom version strategy class.", correct: false }
      - { value: "Register your custom strategy with the `asset.version_strategy` tag.", correct: false }
      - { value: "It can only be set to a built-in strategy name.", correct: false }
    help: |
      The `version_strategy` option expects the service ID of a class that implements `VersionStrategyInterface`.
      https://symfony.com/doc/current/deployment/best_practices.html#configure-asset-version-strategy

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\RedisStore`?
    answers:
      - { value: "It stores locks in memory, meaning locks are not persisted and can be lost on Redis service restart.", correct: true }
      - { value: "It supports blocking operations, allowing processes to wait for a lock.", correct: false }
      - { value: "It automatically creates the necessary database table for locks.", correct: false }
      - { value: "It relies on synchronized clocks across server nodes for purging old locks.", correct: false }
    help: |
      `RedisStore` is an in-memory store, so locks are not persistent across Redis restarts. It does not support blocking operations by itself.
      https://symfony.com/doc/current/components/lock.html#redisstore-in-memory-behavior-and-persistence-risks

  -
    question: >
      Which of the following is the correct way to configure a rate limiter to use a specific lock factory service in Symfony?
    answers:
      - { value: "Set `lock_factory` under the limiter's configuration to the service ID of the lock factory.", correct: true }
      - { value: "Set `lock_service` under the limiter's configuration.", correct: false }
      - { value: "Tag the lock factory service with `rate_limiter.lock_factory`.", correct: false }
      - { value: "Inject the lock factory directly into the rate limiter service definition.", correct: false }
    help: |
      The `lock_factory` option within a rate limiter's configuration allows you to specify which lock factory service it should use.
      https://symfony.com/doc/current/rate_limiter.html#configure-rate-limiter-lock-factory-in-symfony

  -
    question: >
      Which of the following is NOT a valid DSN for configuring the Symfony Lock component?
    answers:
      - { value: "`flock:///path/to/file`", correct: false }
      - { value: "`memcached://m1.docker`", correct: false }
      - { value: "`redis://r1.docker`", correct: false }
      - { value: "`http://localhost/lock`", correct: true }
      - { value: "`sqlite:///%kernel.project_dir%/var/lock.db`", correct: false }
    help: |
      The Lock component supports various DSNs for different stores (filesystem, in-memory, database, distributed caches), but not HTTP-based DSNs directly.
      https://symfony.com/doc/current/lock.html#configure-symfony-lock-component-with-various-dsns

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\CombinedStore`?
    answers:
      - { value: "It does not make the lock mechanism more reliable; it is only as reliable as its least reliable managed store.", correct: true }
      - { value: "It enhances reliability by distributing locks across multiple backends, ensuring high availability.", correct: false }
      - { value: "It automatically handles failover between its managed stores.", correct: false }
      - { value: "It requires all managed stores to successfully acquire the lock for the overall lock to be considered acquired.", correct: false }
    help: |
      `CombinedStore` allows using multiple backends but does not inherently improve reliability; its reliability is limited by the weakest link. The strategy (e.g., `UnanimousStrategy`, `ConsensusStrategy`) determines how multiple stores contribute to the overall lock acquisition.
      https://symfony.com/doc/current/components/lock.html#combinedstore-reliability-and-configuration-requirements

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.dsn` in `config/packages/framework.yaml`?
    answers:
      - { value: "`dsn: '%env(MAILER_DSN)%'`", correct: true }
      - { value: "`mailer_dsn: '%env(MAILER_DSN)%'`", correct: false }
      - { value: "`dsn: env('MAILER_DSN')`", correct: false }
      - { value: "`transport: '%env(MAILER_DSN)%'`", correct: false }
    help: |
      The `dsn` option under `framework.mailer` is used to configure the Mailer DSN, typically referencing an environment variable.
      https://symfony.com/doc/current/mailer.html#configure-mailer-dsn-in-symfony-framework-configuration

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Mime\\RawMessage`?
    answers:
      - { value: "It is used to recreate an email message from its serialized form.", correct: true }
      - { value: "It represents an email message before any headers or parts are added.", correct: false }
      - { value: "It is a low-level representation of an email's raw MIME content.", correct: true }
      - { value: "It is used for sending emails without any Mime component processing.", correct: false }
    help: |
      `RawMessage` is used to represent an email as a raw string (e.g., after serialization) and can be used to reconstitute an email for sending.
      https://symfony.com/doc/current/components/mime.html#recreate-symfony-email-from-serialized-data

  -
    question: >
      Which Symfony component provides the `HtmlToTextConverterInterface` for automatically creating the text part of an email from its HTML content?
    answers:
      - { value: "Symfony\\Component\\Mime", correct: true }
      - { value: "Symfony\\Component\\Mailer", correct: false }
      - { value: "Symfony\\Component\\HtmlToText", correct: false }
      - { value: "Twig\\Extra\\CssInliner", correct: false }
    help: |
      The `HtmlToTextConverterInterface` is part of the Mime component and is used by Mailer to generate plain text email bodies from HTML.
      https://symfony.com/doc/current/reference/configuration/twig.rst#symfony-mime-htmltotextconverterinterface-reference

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.envelope.sender` in `config/packages/mailer.yaml`?
    answers:
      - { value: "`sender: 'fabien@example.com'`", correct: true }
      - { value: "`from: 'fabien@example.com'`", correct: false }
      - { value: "`envelope_sender: 'fabien@example.com'`", correct: false }
      - { value: "`default_sender: 'fabien@example.com'`", correct: false }
    help: |
      The `sender` option under `framework.mailer.envelope` sets the global sender for all emails.
      https://symfony.com/doc/current/mailer.rst#configure-global-email-settings-in-symfony-mailer

  -
    question: >
      Which of the following is a valid way to configure the `framework.assets.version_strategy` to use a custom version strategy service?
    answers:
      - { value: "Set its value to the service ID of your custom version strategy.", correct: true }
      - { value: "Set its value to the FQCN of your custom version strategy class.", correct: false }
      - { value: "Register your custom strategy with the `asset.version_strategy` tag.", correct: false }
      - { value: "It can only be set to a built-in strategy name.", correct: false }
    help: |
      The `version_strategy` option expects the service ID of a class that implements `VersionStrategyInterface`.
      https://symfony.com/doc/current/deployment/best_practices.html#configure-asset-version-strategy

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\RedisStore`?
    answers:
      - { value: "It stores locks in memory, meaning locks are not persisted and can be lost on Redis service restart.", correct: true }
      - { value: "It supports blocking operations, allowing processes to wait for a lock.", correct: false }
      - { value: "It automatically creates the necessary database table for locks.", correct: false }
      - { value: "It relies on synchronized clocks across server nodes for purging old locks.", correct: false }
    help: |
      `RedisStore` is an in-memory store, so locks are not persistent across Redis restarts. It does not support blocking operations by itself.
      https://symfony.com/doc/current/components/lock.html#redisstore-in-memory-behavior-and-persistence-risks

  -
    question: >
      Which of the following is the correct way to configure a rate limiter to use a specific lock factory service in Symfony?
    answers:
      - { value: "Set `lock_factory` under the limiter's configuration to the service ID of the lock factory.", correct: true }
      - { value: "Set `lock_service` under the limiter's configuration.", correct: false }
      - { value: "Tag the lock factory service with `rate_limiter.lock_factory`.", correct: false }
      - { value: "Inject the lock factory directly into the rate limiter service definition.", correct: false }
    help: |
      The `lock_factory` option within a rate limiter's configuration allows you to specify which lock factory service it should use.
      https://symfony.com/doc/current/rate_limiter.html#configure-rate-limiter-lock-factory-in-symfony

  -
    question: >
      Which of the following is NOT a valid DSN for configuring the Symfony Lock component?
    answers:
      - { value: "`flock:///path/to/file`", correct: false }
      - { value: "`memcached://m1.docker`", correct: false }
      - { value: "`redis://r1.docker`", correct: false }
      - { value: "`http://localhost/lock`", correct: true }
      - { value: "`sqlite:///%kernel.project_dir%/var/lock.db`", correct: false }
    help: |
      The Lock component supports various DSNs for different stores (filesystem, in-memory, database, distributed caches), but not HTTP-based DSNs directly.
      https://symfony.com/doc/current/lock.html#configure-symfony-lock-component-with-various-dsns

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\CombinedStore`?
    answers:
      - { value: "It does not make the lock mechanism more reliable; it is only as reliable as its least reliable managed store.", correct: true }
      - { value: "It enhances reliability by distributing locks across multiple backends, ensuring high availability.", correct: false }
      - { value: "It automatically handles failover between its managed stores.", correct: false }
      - { value: "It requires all managed stores to successfully acquire the lock for the overall lock to be considered acquired.", correct: false }
    help: |
      `CombinedStore` allows using multiple backends but does not inherently improve reliability; its reliability is limited by the weakest link. The strategy (e.g., `UnanimousStrategy`, `ConsensusStrategy`) determines how multiple stores contribute to the overall lock acquisition.
      https://symfony.com/doc/current/components/lock.html#combinedstore-reliability-and-configuration-requirements

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.dsn` in `config/packages/framework.yaml`?
    answers:
      - { value: "`dsn: '%env(MAILER_DSN)%'`", correct: true }
      - { value: "`mailer_dsn: '%env(MAILER_DSN)%'`", correct: false }
      - { value: "`dsn: env('MAILER_DSN')`", correct: false }
      - { value: "`transport: '%env(MAILER_DSN)%'`", correct: false }
    help: |
      The `dsn` option under `framework.mailer` is used to configure the Mailer DSN, typically referencing an environment variable.
      https://symfony.com/doc/current/mailer.html#configure-mailer-dsn-in-symfony-framework-configuration

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Mime\\RawMessage`?
    answers:
      - { value: "It is used to recreate an email message from its serialized form.", correct: true }
      - { value: "It represents an email message before any headers or parts are added.", correct: false }
      - { value: "It is a low-level representation of an email's raw MIME content.", correct: true }
      - { value: "It is used for sending emails without any Mime component processing.", correct: false }
    help: |
      `RawMessage` is used to represent an email as a raw string (e.g., after serialization) and can be used to reconstitute an email for sending.
      https://symfony.com/doc/current/components/mime.html#recreate-symfony-email-from-serialized-data

  -
    question: >
      Which Symfony component provides the `HtmlToTextConverterInterface` for automatically creating the text part of an email from its HTML content?
    answers:
      - { value: "Symfony\\Component\\Mime", correct: true }
      - { value: "Symfony\\Component\\Mailer", correct: false }
      - { value: "Symfony\\Component\\HtmlToText", correct: false }
      - { value: "Twig\\Extra\\CssInliner", correct: false }
    help: |
      The `HtmlToTextConverterInterface` is part of the Mime component and is used by Mailer to generate plain text email bodies from HTML.
      https://symfony.com/doc/current/reference/configuration/twig.rst#symfony-mime-htmltotextconverterinterface-reference

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.envelope.sender` in `config/packages/mailer.yaml`?
    answers:
      - { value: "`sender: 'fabien@example.com'`", correct: true }
      - { value: "`from: 'fabien@example.com'`", correct: false }
      - { value: "`envelope_sender: 'fabien@example.com'`", correct: false }
      - { value: "`default_sender: 'fabien@example.com'`", correct: false }
    help: |
      The `sender` option under `framework.mailer.envelope` sets the global sender for all emails.
      https://symfony.com/doc/current/mailer.rst#configure-global-email-settings-in-symfony-mailer

  -
    question: >
      Which of the following is a valid way to configure the `framework.assets.version_strategy` to use a custom version strategy service?
    answers:
      - { value: "Set its value to the service ID of your custom version strategy.", correct: true }
      - { value: "Set its value to the FQCN of your custom version strategy class.", correct: false }
      - { value: "Register your custom strategy with the `asset.version_strategy` tag.", correct: false }
      - { value: "It can only be set to a built-in strategy name.", correct: false }
    help: |
      The `version_strategy` option expects the service ID of a class that implements `VersionStrategyInterface`.
      https://symfony.com/doc/current/deployment/best_practices.html#configure-asset-version-strategy

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\RedisStore`?
    answers:
      - { value: "It stores locks in memory, meaning locks are not persisted and can be lost on Redis service restart.", correct: true }
      - { value: "It supports blocking operations, allowing processes to wait for a lock.", correct: false }
      - { value: "It automatically creates the necessary database table for locks.", correct: false }
      - { value: "It relies on synchronized clocks across server nodes for purging old locks.", correct: false }
    help: |
      `RedisStore` is an in-memory store, so locks are not persistent across Redis restarts. It does not support blocking operations by itself.
      https://symfony.com/doc/current/components/lock.html#redisstore-in-memory-behavior-and-persistence-risks

  -
    question: >
      Which of the following is the correct way to configure a rate limiter to use a specific lock factory service in Symfony?
    answers:
      - { value: "Set `lock_factory` under the limiter's configuration to the service ID of the lock factory.", correct: true }
      - { value: "Set `lock_service` under the limiter's configuration.", correct: false }
      - { value: "Tag the lock factory service with `rate_limiter.lock_factory`.", correct: false }
      - { value: "Inject the lock factory directly into the rate limiter service definition.", correct: false }
    help: |
      The `lock_factory` option within a rate limiter's configuration allows you to specify which lock factory service it should use.
      https://symfony.com/doc/current/rate_limiter.html#configure-rate-limiter-lock-factory-in-symfony

  -
    question: >
      Which of the following is NOT a valid DSN for configuring the Symfony Lock component?
    answers:
      - { value: "`flock:///path/to/file`", correct: false }
      - { value: "`memcached://m1.docker`", correct: false }
      - { value: "`redis://r1.docker`", correct: false }
      - { value: "`http://localhost/lock`", correct: true }
      - { value: "`sqlite:///%kernel.project_dir%/var/lock.db`", correct: false }
    help: |
      The Lock component supports various DSNs for different stores (filesystem, in-memory, database, distributed caches), but not HTTP-based DSNs directly.
      https://symfony.com/doc/current/lock.html#configure-symfony-lock-component-with-various-dsns

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\CombinedStore`?
    answers:
      - { value: "It does not make the lock mechanism more reliable; it is only as reliable as its least reliable managed store.", correct: true }
      - { value: "It enhances reliability by distributing locks across multiple backends, ensuring high availability.", correct: false }
      - { value: "It automatically handles failover between its managed stores.", correct: false }
      - { value: "It requires all managed stores to successfully acquire the lock for the overall lock to be considered acquired.", correct: false }
    help: |
      `CombinedStore` allows using multiple backends but does not inherently improve reliability; its reliability is limited by the weakest link. The strategy (e.g., `UnanimousStrategy`, `ConsensusStrategy`) determines how multiple stores contribute to the overall lock acquisition.
      https://symfony.com/doc/current/components/lock.html#combinedstore-reliability-and-configuration-requirements

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.dsn` in `config/packages/framework.yaml`?
    answers:
      - { value: "`dsn: '%env(MAILER_DSN)%'`", correct: true }
      - { value: "`mailer_dsn: '%env(MAILER_DSN)%'`", correct: false }
      - { value: "`dsn: env('MAILER_DSN')`", correct: false }
      - { value: "`transport: '%env(MAILER_DSN)%'`", correct: false }
    help: |
      The `dsn` option under `framework.mailer` is used to configure the Mailer DSN, typically referencing an environment variable.
      https://symfony.com/doc/current/mailer.html#configure-mailer-dsn-in-symfony-framework-configuration

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Mime\\RawMessage`?
    answers:
      - { value: "It is used to recreate an email message from its serialized form.", correct: true }
      - { value: "It represents an email message before any headers or parts are added.", correct: false }
      - { value: "It is a low-level representation of an email's raw MIME content.", correct: true }
      - { value: "It is used for sending emails without any Mime component processing.", correct: false }
    help: |
      `RawMessage` is used to represent an email as a raw string (e.g., after serialization) and can be used to reconstitute an email for sending.
      https://symfony.com/doc/current/components/mime.html#recreate-symfony-email-from-serialized-data

  -
    question: >
      Which Symfony component provides the `HtmlToTextConverterInterface` for automatically creating the text part of an email from its HTML content?
    answers:
      - { value: "Symfony\\Component\\Mime", correct: true }
      - { value: "Symfony\\Component\\Mailer", correct: false }
      - { value: "Symfony\\Component\\HtmlToText", correct: false }
      - { value: "Twig\\Extra\\CssInliner", correct: false }
    help: |
      The `HtmlToTextConverterInterface` is part of the Mime component and is used by Mailer to generate plain text email bodies from HTML.
      https://symfony.com/doc/current/reference/configuration/twig.rst#symfony-mime-htmltotextconverterinterface-reference

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.envelope.sender` in `config/packages/mailer.yaml`?
    answers:
      - { value: "`sender: 'fabien@example.com'`", correct: true }
      - { value: "`from: 'fabien@example.com'`", correct: false }
      - { value: "`envelope_sender: 'fabien@example.com'`", correct: false }
      - { value: "`default_sender: 'fabien@example.com'`", correct: false }
    help: |
      The `sender` option under `framework.mailer.envelope` sets the global sender for all emails.
      https://symfony.com/doc/current/mailer.rst#configure-global-email-settings-in-symfony-mailer

  -
    question: >
      Which of the following is a valid way to configure the `framework.assets.version_strategy` to use a custom version strategy service?
    answers:
      - { value: "Set its value to the service ID of your custom version strategy.", correct: true }
      - { value: "Set its value to the FQCN of your custom version strategy class.", correct: false }
      - { value: "Register your custom strategy with the `asset.version_strategy` tag.", correct: false }
      - { value: "It can only be set to a built-in strategy name.", correct: false }
    help: |
      The `version_strategy` option expects the service ID of a class that implements `VersionStrategyInterface`.
      https://symfony.com/doc/current/deployment/best_practices.html#configure-asset-version-strategy

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\RedisStore`?
    answers:
      - { value: "It stores locks in memory, meaning locks are not persisted and can be lost on Redis service restart.", correct: true }
      - { value: "It supports blocking operations, allowing processes to wait for a lock.", correct: false }
      - { value: "It automatically creates the necessary database table for locks.", correct: false }
      - { value: "It relies on synchronized clocks across server nodes for purging old locks.", correct: false }
    help: |
      `RedisStore` is an in-memory store, so locks are not persistent across Redis restarts. It does not support blocking operations by itself.
      https://symfony.com/doc/current/components/lock.html#redisstore-in-memory-behavior-and-persistence-risks

  -
    question: >
      Which of the following is the correct way to configure a rate limiter to use a specific lock factory service in Symfony?
    answers:
      - { value: "Set `lock_factory` under the limiter's configuration to the service ID of the lock factory.", correct: true }
      - { value: "Set `lock_service` under the limiter's configuration.", correct: false }
      - { value: "Tag the lock factory service with `rate_limiter.lock_factory`.", correct: false }
      - { value: "Inject the lock factory directly into the rate limiter service definition.", correct: false }
    help: |
      The `lock_factory` option within a rate limiter's configuration allows you to specify which lock factory service it should use.
      https://symfony.com/doc/current/rate_limiter.html#configure-rate-limiter-lock-factory-in-symfony

  -
    question: >
      Which of the following is NOT a valid DSN for configuring the Symfony Lock component?
    answers:
      - { value: "`flock:///path/to/file`", correct: false }
      - { value: "`memcached://m1.docker`", correct: false }
      - { value: "`redis://r1.docker`", correct: false }
      - { value: "`http://localhost/lock`", correct: true }
      - { value: "`sqlite:///%kernel.project_dir%/var/lock.db`", correct: false }
    help: |
      The Lock component supports various DSNs for different stores (filesystem, in-memory, database, distributed caches), but not HTTP-based DSNs directly.
      https://symfony.com/doc/current/lock.html#configure-symfony-lock-component-with-various-dsns

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\CombinedStore`?
    answers:
      - { value: "It does not make the lock mechanism more reliable; it is only as reliable as its least reliable managed store.", correct: true }
      - { value: "It enhances reliability by distributing locks across multiple backends, ensuring high availability.", correct: false }
      - { value: "It automatically handles failover between its managed stores.", correct: false }
      - { value: "It requires all managed stores to successfully acquire the lock for the overall lock to be considered acquired.", correct: false }
    help: |
      `CombinedStore` allows using multiple backends but does not inherently improve reliability; its reliability is limited by the weakest link. The strategy (e.g., `UnanimousStrategy`, `ConsensusStrategy`) determines how multiple stores contribute to the overall lock acquisition.
      https://symfony.com/doc/current/components/lock.html#combinedstore-reliability-and-configuration-requirements

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.dsn` in `config/packages/framework.yaml`?
    answers:
      - { value: "`dsn: '%env(MAILER_DSN)%'`", correct: true }
      - { value: "`mailer_dsn: '%env(MAILER_DSN)%'`", correct: false }
      - { value: "`dsn: env('MAILER_DSN')`", correct: false }
      - { value: "`transport: '%env(MAILER_DSN)%'`", correct: false }
    help: |
      The `dsn` option under `framework.mailer` is used to configure the Mailer DSN, typically referencing an environment variable.
      https://symfony.com/doc/current/mailer.html#configure-mailer-dsn-in-symfony-framework-configuration

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Mime\\RawMessage`?
    answers:
      - { value: "It is used to recreate an email message from its serialized form.", correct: true }
      - { value: "It represents an email message before any headers or parts are added.", correct: false }
      - { value: "It is a low-level representation of an email's raw MIME content.", correct: true }
      - { value: "It is used for sending emails without any Mime component processing.", correct: false }
    help: |
      `RawMessage` is used to represent an email as a raw string (e.g., after serialization) and can be used to reconstitute an email for sending.
      https://symfony.com/doc/current/components/mime.html#recreate-symfony-email-from-serialized-data

  -
    question: >
      Which Symfony component provides the `HtmlToTextConverterInterface` for automatically creating the text part of an email from its HTML content?
    answers:
      - { value: "Symfony\\Component\\Mime", correct: true }
      - { value: "Symfony\\Component\\Mailer", correct: false }
      - { value: "Symfony\\Component\\HtmlToText", correct: false }
      - { value: "Twig\\Extra\\CssInliner", correct: false }
    help: |
      The `HtmlToTextConverterInterface` is part of the Mime component and is used by Mailer to generate plain text email bodies from HTML.
      https://symfony.com/doc/current/reference/configuration/twig.rst#symfony-mime-htmltotextconverterinterface-reference

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.envelope.sender` in `config/packages/mailer.yaml`?
    answers:
      - { value: "`sender: 'fabien@example.com'`", correct: true }
      - { value: "`from: 'fabien@example.com'`", correct: false }
      - { value: "`envelope_sender: 'fabien@example.com'`", correct: false }
      - { value: "`default_sender: 'fabien@example.com'`", correct: false }
    help: |
      The `sender` option under `framework.mailer.envelope` sets the global sender for all emails.
      https://symfony.com/doc/current/mailer.rst#configure-global-email-settings-in-symfony-mailer

  -
    question: >
      Which of the following is a valid way to configure the `framework.assets.version_strategy` to use a custom version strategy service?
    answers:
      - { value: "Set its value to the service ID of your custom version strategy.", correct: true }
      - { value: "Set its value to the FQCN of your custom version strategy class.", correct: false }
      - { value: "Register your custom strategy with the `asset.version_strategy` tag.", correct: false }
      - { value: "It can only be set to a built-in strategy name.", correct: false }
    help: |
      The `version_strategy` option expects the service ID of a class that implements `VersionStrategyInterface`.
      https://symfony.com/doc/current/deployment/best_practices.html#configure-asset-version-strategy

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\RedisStore`?
    answers:
      - { value: "It stores locks in memory, meaning locks are not persisted and can be lost on Redis service restart.", correct: true }
      - { value: "It supports blocking operations, allowing processes to wait for a lock.", correct: false }
      - { value: "It automatically creates the necessary database table for locks.", correct: false }
      - { value: "It relies on synchronized clocks across server nodes for purging old locks.", correct: false }
    help: |
      `RedisStore` is an in-memory store, so locks are not persistent across Redis restarts. It does not support blocking operations by itself.
      https://symfony.com/doc/current/components/lock.html#redisstore-in-memory-behavior-and-persistence-risks

  -
    question: >
      Which of the following is the correct way to configure a rate limiter to use a specific lock factory service in Symfony?
    answers:
      - { value: "Set `lock_factory` under the limiter's configuration to the service ID of the lock factory.", correct: true }
      - { value: "Set `lock_service` under the limiter's configuration.", correct: false }
      - { value: "Tag the lock factory service with `rate_limiter.lock_factory`.", correct: false }
      - { value: "Inject the lock factory directly into the rate limiter service definition.", correct: false }
    help: |
      The `lock_factory` option within a rate limiter's configuration allows you to specify which lock factory service it should use.
      https://symfony.com/doc/current/rate_limiter.html#configure-rate-limiter-lock-factory-in-symfony

  -
    question: >
      Which of the following is NOT a valid DSN for configuring the Symfony Lock component?
    answers:
      - { value: "`flock:///path/to/file`", correct: false }
      - { value: "`memcached://m1.docker`", correct: false }
      - { value: "`redis://r1.docker`", correct: false }
      - { value: "`http://localhost/lock`", correct: true }
      - { value: "`sqlite:///%kernel.project_dir%/var/lock.db`", correct: false }
    help: |
      The Lock component supports various DSNs for different stores (filesystem, in-memory, database, distributed caches), but not HTTP-based DSNs directly.
      https://symfony.com/doc/current/lock.html#configure-symfony-lock-component-with-various-dsns

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\CombinedStore`?
    answers:
      - { value: "It does not make the lock mechanism more reliable; it is only as reliable as its least reliable managed store.", correct: true }
      - { value: "It enhances reliability by distributing locks across multiple backends, ensuring high availability.", correct: false }
      - { value: "It automatically handles failover between its managed stores.", correct: false }
      - { value: "It requires all managed stores to successfully acquire the lock for the overall lock to be considered acquired.", correct: false }
    help: |
      `CombinedStore` allows using multiple backends but does not inherently improve reliability; its reliability is limited by the weakest link. The strategy (e.g., `UnanimousStrategy`, `ConsensusStrategy`) determines how multiple stores contribute to the overall lock acquisition.
      https://symfony.com/doc/current/components/lock.html#combinedstore-reliability-and-configuration-requirements

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.dsn` in `config/packages/framework.yaml`?
    answers:
      - { value: "`dsn: '%env(MAILER_DSN)%'`", correct: true }
      - { value: "`mailer_dsn: '%env(MAILER_DSN)%'`", correct: false }
      - { value: "`dsn: env('MAILER_DSN')`", correct: false }
      - { value: "`transport: '%env(MAILER_DSN)%'`", correct: false }
    help: |
      The `dsn` option under `framework.mailer` is used to configure the Mailer DSN, typically referencing an environment variable.
      https://symfony.com/doc/current/mailer.html#configure-mailer-dsn-in-symfony-framework-configuration

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Mime\\RawMessage`?
    answers:
      - { value: "It is used to recreate an email message from its serialized form.", correct: true }
      - { value: "It represents an email message before any headers or parts are added.", correct: false }
      - { value: "It is a low-level representation of an email's raw MIME content.", correct: true }
      - { value: "It is used for sending emails without any Mime component processing.", correct: false }
    help: |
      `RawMessage` is used to represent an email as a raw string (e.g., after serialization) and can be used to reconstitute an email for sending.
      https://symfony.com/doc/current/components/mime.html#recreate-symfony-email-from-serialized-data

  -
    question: >
      Which Symfony component provides the `HtmlToTextConverterInterface` for automatically creating the text part of an email from its HTML content?
    answers:
      - { value: "Symfony\\Component\\Mime", correct: true }
      - { value: "Symfony\\Component\\Mailer", correct: false }
      - { value: "Symfony\\Component\\HtmlToText", correct: false }
      - { value: "Twig\\Extra\\CssInliner", correct: false }
    help: |
      The `HtmlToTextConverterInterface` is part of the Mime component and is used by Mailer to generate plain text email bodies from HTML.
      https://symfony.com/doc/current/reference/configuration/twig.rst#symfony-mime-htmltotextconverterinterface-reference

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.envelope.sender` in `config/packages/mailer.yaml`?
    answers:
      - { value: "`sender: 'fabien@example.com'`", correct: true }
      - { value: "`from: 'fabien@example.com'`", correct: false }
      - { value: "`envelope_sender: 'fabien@example.com'`", correct: false }
      - { value: "`default_sender: 'fabien@example.com'`", correct: false }
    help: |
      The `sender` option under `framework.mailer.envelope` sets the global sender for all emails.
      https://symfony.com/doc/current/mailer.rst#configure-global-email-settings-in-symfony-mailer

  -
    question: >
      Which of the following is a valid way to configure the `framework.assets.version_strategy` to use a custom version strategy service?
    answers:
      - { value: "Set its value to the service ID of your custom version strategy.", correct: true }
      - { value: "Set its value to the FQCN of your custom version strategy class.", correct: false }
      - { value: "Register your custom strategy with the `asset.version_strategy` tag.", correct: false }
      - { value: "It can only be set to a built-in strategy name.", correct: false }
    help: |
      The `version_strategy` option expects the service ID of a class that implements `VersionStrategyInterface`.
      https://symfony.com/doc/current/deployment/best_practices.html#configure-asset-version-strategy

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\RedisStore`?
    answers:
      - { value: "It stores locks in memory, meaning locks are not persisted and can be lost on Redis service restart.", correct: true }
      - { value: "It supports blocking operations, allowing processes to wait for a lock.", correct: false }
      - { value: "It automatically creates the necessary database table for locks.", correct: false }
      - { value: "It relies on synchronized clocks across server nodes for purging old locks.", correct: false }
    help: |
      `RedisStore` is an in-memory store, so locks are not persistent across Redis restarts. It does not support blocking operations by itself.
      https://symfony.com/doc/current/components/lock.html#redisstore-in-memory-behavior-and-persistence-risks

  -
    question: >
      Which of the following is the correct way to configure a rate limiter to use a specific lock factory service in Symfony?
    answers:
      - { value: "Set `lock_factory` under the limiter's configuration to the service ID of the lock factory.", correct: true }
      - { value: "Set `lock_service` under the limiter's configuration.", correct: false }
      - { value: "Tag the lock factory service with `rate_limiter.lock_factory`.", correct: false }
      - { value: "Inject the lock factory directly into the rate limiter service definition.", correct: false }
    help: |
      The `lock_factory` option within a rate limiter's configuration allows you to specify which lock factory service it should use.
      https://symfony.com/doc/current/rate_limiter.html#configure-rate-limiter-lock-factory-in-symfony

  -
    question: >
      Which of the following is NOT a valid DSN for configuring the Symfony Lock component?
    answers:
      - { value: "`flock:///path/to/file`", correct: false }
      - { value: "`memcached://m1.docker`", correct: false }
      - { value: "`redis://r1.docker`", correct: false }
      - { value: "`http://localhost/lock`", correct: true }
      - { value: "`sqlite:///%kernel.project_dir%/var/lock.db`", correct: false }
    help: |
      The Lock component supports various DSNs for different stores (filesystem, in-memory, database, distributed caches), but not HTTP-based DSNs directly.
      https://symfony.com/doc/current/lock.html#configure-symfony-lock-component-with-various-dsns

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\CombinedStore`?
    answers:
      - { value: "It does not make the lock mechanism more reliable; it is only as reliable as its least reliable managed store.", correct: true }
      - { value: "It enhances reliability by distributing locks across multiple backends, ensuring high availability.", correct: false }
      - { value: "It automatically handles failover between its managed stores.", correct: false }
      - { value: "It requires all managed stores to successfully acquire the lock for the overall lock to be considered acquired.", correct: false }
    help: |
      `CombinedStore` allows using multiple backends but does not inherently improve reliability; its reliability is limited by the weakest link. The strategy (e.g., `UnanimousStrategy`, `ConsensusStrategy`) determines how multiple stores contribute to the overall lock acquisition.
      https://symfony.com/doc/current/components/lock.html#combinedstore-reliability-and-configuration-requirements

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.dsn` in `config/packages/framework.yaml`?
    answers:
      - { value: "`dsn: '%env(MAILER_DSN)%'`", correct: true }
      - { value: "`mailer_dsn: '%env(MAILER_DSN)%'`", correct: false }
      - { value: "`dsn: env('MAILER_DSN')`", correct: false }
      - { value: "`transport: '%env(MAILER_DSN)%'`", correct: false }
    help: |
      The `dsn` option under `framework.mailer` is used to configure the Mailer DSN, typically referencing an environment variable.
      https://symfony.com/doc/current/mailer.html#configure-mailer-dsn-in-symfony-framework-configuration

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Mime\\RawMessage`?
    answers:
      - { value: "It is used to recreate an email message from its serialized form.", correct: true }
      - { value: "It represents an email message before any headers or parts are added.", correct: false }
      - { value: "It is a low-level representation of an email's raw MIME content.", correct: true }
      - { value: "It is used for sending emails without any Mime component processing.", correct: false }
    help: |
      `RawMessage` is used to represent an email as a raw string (e.g., after serialization) and can be used to reconstitute an email for sending.
      https://symfony.com/doc/current/components/mime.html#recreate-symfony-email-from-serialized-data

  -
    question: >
      Which Symfony component provides the `HtmlToTextConverterInterface` for automatically creating the text part of an email from its HTML content?
    answers:
      - { value: "Symfony\\Component\\Mime", correct: true }
      - { value: "Symfony\\Component\\Mailer", correct: false }
      - { value: "Symfony\\Component\\HtmlToText", correct: false }
      - { value: "Twig\\Extra\\CssInliner", correct: false }
    help: |
      The `HtmlToTextConverterInterface` is part of the Mime component and is used by Mailer to generate plain text email bodies from HTML.
      https://symfony.com/doc/current/reference/configuration/twig.rst#symfony-mime-htmltotextconverterinterface-reference

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.envelope.sender` in `config/packages/mailer.yaml`?
    answers:
      - { value: "`sender: 'fabien@example.com'`", correct: true }
      - { value: "`from: 'fabien@example.com'`", correct: false }
      - { value: "`envelope_sender: 'fabien@example.com'`", correct: false }
      - { value: "`default_sender: 'fabien@example.com'`", correct: false }
    help: |
      The `sender` option under `framework.mailer.envelope` sets the global sender for all emails.
      https://symfony.com/doc/current/mailer.rst#configure-global-email-settings-in-symfony-mailer

  -
    question: >
      Which of the following is a valid way to configure the `framework.assets.version_strategy` to use a custom version strategy service?
    answers:
      - { value: "Set its value to the service ID of your custom version strategy.", correct: true }
      - { value: "Set its value to the FQCN of your custom version strategy class.", correct: false }
      - { value: "Register your custom strategy with the `asset.version_strategy` tag.", correct: false }
      - { value: "It can only be set to a built-in strategy name.", correct: false }
    help: |
      The `version_strategy` option expects the service ID of a class that implements `VersionStrategyInterface`.
      https://symfony.com/doc/current/deployment/best_practices.html#configure-asset-version-strategy

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\RedisStore`?
    answers:
      - { value: "It stores locks in memory, meaning locks are not persisted and can be lost on Redis service restart.", correct: true }
      - { value: "It supports blocking operations, allowing processes to wait for a lock.", correct: false }
      - { value: "It automatically creates the necessary database table for locks.", correct: false }
      - { value: "It relies on synchronized clocks across server nodes for purging old locks.", correct: false }
    help: |
      `RedisStore` is an in-memory store, so locks are not persistent across Redis restarts. It does not support blocking operations by itself.
      https://symfony.com/doc/current/components/lock.html#redisstore-in-memory-behavior-and-persistence-risks

  -
    question: >
      Which of the following is the correct way to configure a rate limiter to use a specific lock factory service in Symfony?
    answers:
      - { value: "Set `lock_factory` under the limiter's configuration to the service ID of the lock factory.", correct: true }
      - { value: "Set `lock_service` under the limiter's configuration.", correct: false }
      - { value: "Tag the lock factory service with `rate_limiter.lock_factory`.", correct: false }
      - { value: "Inject the lock factory directly into the rate limiter service definition.", correct: false }
    help: |
      The `lock_factory` option within a rate limiter's configuration allows you to specify which lock factory service it should use.
      https://symfony.com/doc/current/rate_limiter.html#configure-rate-limiter-lock-factory-in-symfony

  -
    question: >
      Which of the following is NOT a valid DSN for configuring the Symfony Lock component?
    answers:
      - { value: "`flock:///path/to/file`", correct: false }
      - { value: "`memcached://m1.docker`", correct: false }
      - { value: "`redis://r1.docker`", correct: false }
      - { value: "`http://localhost/lock`", correct: true }
      - { value: "`sqlite:///%kernel.project_dir%/var/lock.db`", correct: false }
    help: |
      The Lock component supports various DSNs for different stores (filesystem, in-memory, database, distributed caches), but not HTTP-based DSNs directly.
      https://symfony.com/doc/current/lock.html#configure-symfony-lock-component-with-various-dsns

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\CombinedStore`?
    answers:
      - { value: "It does not make the lock mechanism more reliable; it is only as reliable as its least reliable managed store.", correct: true }
      - { value: "It enhances reliability by distributing locks across multiple backends, ensuring high availability.", correct: false }
      - { value: "It automatically handles failover between its managed stores.", correct: false }
      - { value: "It requires all managed stores to successfully acquire the lock for the overall lock to be considered acquired.", correct: false }
    help: |
      `CombinedStore` allows using multiple backends but does not inherently improve reliability; its reliability is limited by the weakest link. The strategy (e.g., `UnanimousStrategy`, `ConsensusStrategy`) determines how multiple stores contribute to the overall lock acquisition.
      https://symfony.com/doc/current/components/lock.html#combinedstore-reliability-and-configuration-requirements

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.dsn` in `config/packages/framework.yaml`?
    answers:
      - { value: "`dsn: '%env(MAILER_DSN)%'`", correct: true }
      - { value: "`mailer_dsn: '%env(MAILER_DSN)%'`", correct: false }
      - { value: "`dsn: env('MAILER_DSN')`", correct: false }
      - { value: "`transport: '%env(MAILER_DSN)%'`", correct: false }
    help: |
      The `dsn` option under `framework.mailer` is used to configure the Mailer DSN, typically referencing an environment variable.
      https://symfony.com/doc/current/mailer.html#configure-mailer-dsn-in-symfony-framework-configuration

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Mime\\RawMessage`?
    answers:
      - { value: "It is used to recreate an email message from its serialized form.", correct: true }
      - { value: "It represents an email message before any headers or parts are added.", correct: false }
      - { value: "It is a low-level representation of an email's raw MIME content.", correct: true }
      - { value: "It is used for sending emails without any Mime component processing.", correct: false }
    help: |
      `RawMessage` is used to represent an email as a raw string (e.g., after serialization) and can be used to reconstitute an email for sending.
      https://symfony.com/doc/current/components/mime.html#recreate-symfony-email-from-serialized-data

  -
    question: >
      Which Symfony component provides the `HtmlToTextConverterInterface` for automatically creating the text part of an email from its HTML content?
    answers:
      - { value: "Symfony\\Component\\Mime", correct: true }
      - { value: "Symfony\\Component\\Mailer", correct: false }
      - { value: "Symfony\\Component\\HtmlToText", correct: false }
      - { value: "Twig\\Extra\\CssInliner", correct: false }
    help: |
      The `HtmlToTextConverterInterface` is part of the Mime component and is used by Mailer to generate plain text email bodies from HTML.
      https://symfony.com/doc/current/reference/configuration/twig.rst#symfony-mime-htmltotextconverterinterface-reference

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.envelope.sender` in `config/packages/mailer.yaml`?
    answers:
      - { value: "`sender: 'fabien@example.com'`", correct: true }
      - { value: "`from: 'fabien@example.com'`", correct: false }
      - { value: "`envelope_sender: 'fabien@example.com'`", correct: false }
      - { value: "`default_sender: 'fabien@example.com'`", correct: false }
    help: |
      The `sender` option under `framework.mailer.envelope` sets the global sender for all emails.
      https://symfony.com/doc/current/mailer.rst#configure-global-email-settings-in-symfony-mailer

  -
    question: >
      Which of the following is a valid way to configure the `framework.assets.version_strategy` to use a custom version strategy service?
    answers:
      - { value: "Set its value to the service ID of your custom version strategy.", correct: true }
      - { value: "Set its value to the FQCN of your custom version strategy class.", correct: false }
      - { value: "Register your custom strategy with the `asset.version_strategy` tag.", correct: false }
      - { value: "It can only be set to a built-in strategy name.", correct: false }
    help: |
      The `version_strategy` option expects the service ID of a class that implements `VersionStrategyInterface`.
      https://symfony.com/doc/current/deployment/best_practices.html#configure-asset-version-strategy

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\RedisStore`?
    answers:
      - { value: "It stores locks in memory, meaning locks are not persisted and can be lost on Redis service restart.", correct: true }
      - { value: "It supports blocking operations, allowing processes to wait for a lock.", correct: false }
      - { value: "It automatically creates the necessary database table for locks.", correct: false }
      - { value: "It relies on synchronized clocks across server nodes for purging old locks.", correct: false }
    help: |
      `RedisStore` is an in-memory store, so locks are not persistent across Redis restarts. It does not support blocking operations by itself.
      https://symfony.com/doc/current/components/lock.html#redisstore-in-memory-behavior-and-persistence-risks

  -
    question: >
      Which of the following is the correct way to configure a rate limiter to use a specific lock factory service in Symfony?
    answers:
      - { value: "Set `lock_factory` under the limiter's configuration to the service ID of the lock factory.", correct: true }
      - { value: "Set `lock_service` under the limiter's configuration.", correct: false }
      - { value: "Tag the lock factory service with `rate_limiter.lock_factory`.", correct: false }
      - { value: "Inject the lock factory directly into the rate limiter service definition.", correct: false }
    help: |
      The `lock_factory` option within a rate limiter's configuration allows you to specify which lock factory service it should use.
      https://symfony.com/doc/current/rate_limiter.html#configure-rate-limiter-lock-factory-in-symfony

  -
    question: >
      Which of the following is NOT a valid DSN for configuring the Symfony Lock component?
    answers:
      - { value: "`flock:///path/to/file`", correct: false }
      - { value: "`memcached://m1.docker`", correct: false }
      - { value: "`redis://r1.docker`", correct: false }
      - { value: "`http://localhost/lock`", correct: true }
      - { value: "`sqlite:///%kernel.project_dir%/var/lock.db`", correct: false }
    help: |
      The Lock component supports various DSNs for different stores (filesystem, in-memory, database, distributed caches), but not HTTP-based DSNs directly.
      https://symfony.com/doc/current/lock.html#configure-symfony-lock-component-with-various-dsns

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\CombinedStore`?
    answers:
      - { value: "It does not make the lock mechanism more reliable; it is only as reliable as its least reliable managed store.", correct: true }
      - { value: "It enhances reliability by distributing locks across multiple backends, ensuring high availability.", correct: false }
      - { value: "It automatically handles failover between its managed stores.", correct: false }
      - { value: "It requires all managed stores to successfully acquire the lock for the overall lock to be considered acquired.", correct: false }
    help: |
      `CombinedStore` allows using multiple backends but does not inherently improve reliability; its reliability is limited by the weakest link. The strategy (e.g., `UnanimousStrategy`, `ConsensusStrategy`) determines how multiple stores contribute to the overall lock acquisition.
      https://symfony.com/doc/current/components/lock.html#combinedstore-reliability-and-configuration-requirements

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.dsn` in `config/packages/framework.yaml`?
    answers:
      - { value: "`dsn: '%env(MAILER_DSN)%'`", correct: true }
      - { value: "`mailer_dsn: '%env(MAILER_DSN)%'`", correct: false }
      - { value: "`dsn: env('MAILER_DSN')`", correct: false }
      - { value: "`transport: '%env(MAILER_DSN)%'`", correct: false }
    help: |
      The `dsn` option under `framework.mailer` is used to configure the Mailer DSN, typically referencing an environment variable.
      https://symfony.com/doc/current/mailer.html#configure-mailer-dsn-in-symfony-framework-configuration

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Mime\\RawMessage`?
    answers:
      - { value: "It is used to recreate an email message from its serialized form.", correct: true }
      - { value: "It represents an email message before any headers or parts are added.", correct: false }
      - { value: "It is a low-level representation of an email's raw MIME content.", correct: true }
      - { value: "It is used for sending emails without any Mime component processing.", correct: false }
    help: |
      `RawMessage` is used to represent an email as a raw string (e.g., after serialization) and can be used to reconstitute an email for sending.
      https://symfony.com/doc/current/components/mime.html#recreate-symfony-email-from-serialized-data

  -
    question: >
      Which Symfony component provides the `HtmlToTextConverterInterface` for automatically creating the text part of an email from its HTML content?
    answers:
      - { value: "Symfony\\Component\\Mime", correct: true }
      - { value: "Symfony\\Component\\Mailer", correct: false }
      - { value: "Symfony\\Component\\HtmlToText", correct: false }
      - { value: "Twig\\Extra\\CssInliner", correct: false }
    help: |
      The `HtmlToTextConverterInterface` is part of the Mime component and is used by Mailer to generate plain text email bodies from HTML.
      https://symfony.com/doc/current/reference/configuration/twig.rst#symfony-mime-htmltotextconverterinterface-reference

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.envelope.sender` in `config/packages/mailer.yaml`?
    answers:
      - { value: "`sender: 'fabien@example.com'`", correct: true }
      - { value: "`from: 'fabien@example.com'`", correct: false }
      - { value: "`envelope_sender: 'fabien@example.com'`", correct: false }
      - { value: "`default_sender: 'fabien@example.com'`", correct: false }
    help: |
      The `sender` option under `framework.mailer.envelope` sets the global sender for all emails.
      https://symfony.com/doc/current/mailer.rst#configure-global-email-settings-in-symfony-mailer

  -
    question: >
      Which of the following is a valid way to configure the `framework.assets.version_strategy` to use a custom version strategy service?
    answers:
      - { value: "Set its value to the service ID of your custom version strategy.", correct: true }
      - { value: "Set its value to the FQCN of your custom version strategy class.", correct: false }
      - { value: "Register your custom strategy with the `asset.version_strategy` tag.", correct: false }
      - { value: "It can only be set to a built-in strategy name.", correct: false }
    help: |
      The `version_strategy` option expects the service ID of a class that implements `VersionStrategyInterface`.
      https://symfony.com/doc/current/deployment/best_practices.html#configure-asset-version-strategy

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\RedisStore`?
    answers:
      - { value: "It stores locks in memory, meaning locks are not persisted and can be lost on Redis service restart.", correct: true }
      - { value: "It supports blocking operations, allowing processes to wait for a lock.", correct: false }
      - { value: "It automatically creates the necessary database table for locks.", correct: false }
      - { value: "It relies on synchronized clocks across server nodes for purging old locks.", correct: false }
    help: |
      `RedisStore` is an in-memory store, so locks are not persistent across Redis restarts. It does not support blocking operations by itself.
      https://symfony.com/doc/current/components/lock.html#redisstore-in-memory-behavior-and-persistence-risks

  -
    question: >
      Which of the following is the correct way to configure a rate limiter to use a specific lock factory service in Symfony?
    answers:
      - { value: "Set `lock_factory` under the limiter's configuration to the service ID of the lock factory.", correct: true }
      - { value: "Set `lock_service` under the limiter's configuration.", correct: false }
      - { value: "Tag the lock factory service with `rate_limiter.lock_factory`.", correct: false }
      - { value: "Inject the lock factory directly into the rate limiter service definition.", correct: false }
    help: |
      The `lock_factory` option within a rate limiter's configuration allows you to specify which lock factory service it should use.
      https://symfony.com/doc/current/rate_limiter.html#configure-rate-limiter-lock-factory-in-symfony

  -
    question: >
      Which of the following is NOT a valid DSN for configuring the Symfony Lock component?
    answers:
      - { value: "`flock:///path/to/file`", correct: false }
      - { value: "`memcached://m1.docker`", correct: false }
      - { value: "`redis://r1.docker`", correct: false }
      - { value: "`http://localhost/lock`", correct: true }
      - { value: "`sqlite:///%kernel.project_dir%/var/lock.db`", correct: false }
    help: |
      The Lock component supports various DSNs for different stores (filesystem, in-memory, database, distributed caches), but not HTTP-based DSNs directly.
      https://symfony.com/doc/current/lock.html#configure-symfony-lock-component-with-various-dsns

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\CombinedStore`?
    answers:
      - { value: "It does not make the lock mechanism more reliable; it is only as reliable as its least reliable managed store.", correct: true }
      - { value: "It enhances reliability by distributing locks across multiple backends, ensuring high availability.", correct: false }
      - { value: "It automatically handles failover between its managed stores.", correct: false }
      - { value: "It requires all managed stores to successfully acquire the lock for the overall lock to be considered acquired.", correct: false }
    help: |
      `CombinedStore` allows using multiple backends but does not inherently improve reliability; its reliability is limited by the weakest link. The strategy (e.g., `UnanimousStrategy`, `ConsensusStrategy`) determines how multiple stores contribute to the overall lock acquisition.
      https://symfony.com/doc/current/components/lock.html#combinedstore-reliability-and-configuration-requirements

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.dsn` in `config/packages/framework.yaml`?
    answers:
      - { value: "`dsn: '%env(MAILER_DSN)%'`", correct: true }
      - { value: "`mailer_dsn: '%env(MAILER_DSN)%'`", correct: false }
      - { value: "`dsn: env('MAILER_DSN')`", correct: false }
      - { value: "`transport: '%env(MAILER_DSN)%'`", correct: false }
    help: |
      The `dsn` option under `framework.mailer` is used to configure the Mailer DSN, typically referencing an environment variable.
      https://symfony.com/doc/current/mailer.html#configure-mailer-dsn-in-symfony-framework-configuration

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Mime\\RawMessage`?
    answers:
      - { value: "It is used to recreate an email message from its serialized form.", correct: true }
      - { value: "It represents an email message before any headers or parts are added.", correct: false }
      - { value: "It is a low-level representation of an email's raw MIME content.", correct: true }
      - { value: "It is used for sending emails without any Mime component processing.", correct: false }
    help: |
      `RawMessage` is used to represent an email as a raw string (e.g., after serialization) and can be used to reconstitute an email for sending.
      https://symfony.com/doc/current/components/mime.html#recreate-symfony-email-from-serialized-data

  -
    question: >
      Which Symfony component provides the `HtmlToTextConverterInterface` for automatically creating the text part of an email from its HTML content?
    answers:
      - { value: "Symfony\\Component\\Mime", correct: true }
      - { value: "Symfony\\Component\\Mailer", correct: false }
      - { value: "Symfony\\Component\\HtmlToText", correct: false }
      - { value: "Twig\\Extra\\CssInliner", correct: false }
    help: |
      The `HtmlToTextConverterInterface` is part of the Mime component and is used by Mailer to generate plain text email bodies from HTML.
      https://symfony.com/doc/current/reference/configuration/twig.rst#symfony-mime-htmltotextconverterinterface-reference

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.envelope.sender` in `config/packages/mailer.yaml`?
    answers:
      - { value: "`sender: 'fabien@example.com'`", correct: true }
      - { value: "`from: 'fabien@example.com'`", correct: false }
      - { value: "`envelope_sender: 'fabien@example.com'`", correct: false }
      - { value: "`default_sender: 'fabien@example.com'`", correct: false }
    help: |
      The `sender` option under `framework.mailer.envelope` sets the global sender for all emails.
      https://symfony.com/doc/current/mailer.rst#configure-global-email-settings-in-symfony-mailer

  -
    question: >
      Which of the following is a valid way to configure the `framework.assets.version_strategy` to use a custom version strategy service?
    answers:
      - { value: "Set its value to the service ID of your custom version strategy.", correct: true }
      - { value: "Set its value to the FQCN of your custom version strategy class.", correct: false }
      - { value: "Register your custom strategy with the `asset.version_strategy` tag.", correct: false }
      - { value: "It can only be set to a built-in strategy name.", correct: false }
    help: |
      The `version_strategy` option expects the service ID of a class that implements `VersionStrategyInterface`.
      https://symfony.com/doc/current/deployment/best_practices.html#configure-asset-version-strategy

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\RedisStore`?
    answers:
      - { value: "It stores locks in memory, meaning locks are not persisted and can be lost on Redis service restart.", correct: true }
      - { value: "It supports blocking operations, allowing processes to wait for a lock.", correct: false }
      - { value: "It automatically creates the necessary database table for locks.", correct: false }
      - { value: "It relies on synchronized clocks across server nodes for purging old locks.", correct: false }
    help: |
      `RedisStore` is an in-memory store, so locks are not persistent across Redis restarts. It does not support blocking operations by itself.
      https://symfony.com/doc/current/components/lock.html#redisstore-in-memory-behavior-and-persistence-risks

  -
    question: >
      Which of the following is the correct way to configure a rate limiter to use a specific lock factory service in Symfony?
    answers:
      - { value: "Set `lock_factory` under the limiter's configuration to the service ID of the lock factory.", correct: true }
      - { value: "Set `lock_service` under the limiter's configuration.", correct: false }
      - { value: "Tag the lock factory service with `rate_limiter.lock_factory`.", correct: false }
      - { value: "Inject the lock factory directly into the rate limiter service definition.", correct: false }
    help: |
      The `lock_factory` option within a rate limiter's configuration allows you to specify which lock factory service it should use.
      https://symfony.com/doc/current/rate_limiter.html#configure-rate-limiter-lock-factory-in-symfony

  -
    question: >
      Which of the following is NOT a valid DSN for configuring the Symfony Lock component?
    answers:
      - { value: "`flock:///path/to/file`", correct: false }
      - { value: "`memcached://m1.docker`", correct: false }
      - { value: "`redis://r1.docker`", correct: false }
      - { value: "`http://localhost/lock`", correct: true }
      - { value: "`sqlite:///%kernel.project_dir%/var/lock.db`", correct: false }
    help: |
      The Lock component supports various DSNs for different stores (filesystem, in-memory, database, distributed caches), but not HTTP-based DSNs directly.
      https://symfony.com/doc/current/lock.html#configure-symfony-lock-component-with-various-dsns

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\CombinedStore`?
    answers:
      - { value: "It does not make the lock mechanism more reliable; it is only as reliable as its least reliable managed store.", correct: true }
      - { value: "It enhances reliability by distributing locks across multiple backends, ensuring high availability.", correct: false }
      - { value: "It automatically handles failover between its managed stores.", correct: false }
      - { value: "It requires all managed stores to successfully acquire the lock for the overall lock to be considered acquired.", correct: false }
    help: |
      `CombinedStore` allows using multiple backends but does not inherently improve reliability; its reliability is limited by the weakest link. The strategy (e.g., `UnanimousStrategy`, `ConsensusStrategy`) determines how multiple stores contribute to the overall lock acquisition.
      https://symfony.com/doc/current/components/lock.html#combinedstore-reliability-and-configuration-requirements

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.dsn` in `config/packages/framework.yaml`?
    answers:
      - { value: "`dsn: '%env(MAILER_DSN)%'`", correct: true }
      - { value: "`mailer_dsn: '%env(MAILER_DSN)%'`", correct: false }
      - { value: "`dsn: env('MAILER_DSN')`", correct: false }
      - { value: "`transport: '%env(MAILER_DSN)%'`", correct: false }
    help: |
      The `dsn` option under `framework.mailer` is used to configure the Mailer DSN, typically referencing an environment variable.
      https://symfony.com/doc/current/mailer.html#configure-mailer-dsn-in-symfony-framework-configuration

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Mime\\RawMessage`?
    answers:
      - { value: "It is used to recreate an email message from its serialized form.", correct: true }
      - { value: "It represents an email message before any headers or parts are added.", correct: false }
      - { value: "It is a low-level representation of an email's raw MIME content.", correct: true }
      - { value: "It is used for sending emails without any Mime component processing.", correct: false }
    help: |
      `RawMessage` is used to represent an email as a raw string (e.g., after serialization) and can be used to reconstitute an email for sending.
      https://symfony.com/doc/current/components/mime.html#recreate-symfony-email-from-serialized-data

  -
    question: >
      Which Symfony component provides the `HtmlToTextConverterInterface` for automatically creating the text part of an email from its HTML content?
    answers:
      - { value: "Symfony\\Component\\Mime", correct: true }
      - { value: "Symfony\\Component\\Mailer", correct: false }
      - { value: "Symfony\\Component\\HtmlToText", correct: false }
      - { value: "Twig\\Extra\\CssInliner", correct: false }
    help: |
      The `HtmlToTextConverterInterface` is part of the Mime component and is used by Mailer to generate plain text email bodies from HTML.
      https://symfony.com/doc/current/reference/configuration/twig.rst#symfony-mime-htmltotextconverterinterface-reference

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.envelope.sender` in `config/packages/mailer.yaml`?
    answers:
      - { value: "`sender: 'fabien@example.com'`", correct: true }
      - { value: "`from: 'fabien@example.com'`", correct: false }
      - { value: "`envelope_sender: 'fabien@example.com'`", correct: false }
      - { value: "`default_sender: 'fabien@example.com'`", correct: false }
    help: |
      The `sender` option under `framework.mailer.envelope` sets the global sender for all emails.
      https://symfony.com/doc/current/mailer.rst#configure-global-email-settings-in-symfony-mailer

  -
    question: >
      Which of the following is a valid way to configure the `framework.assets.version_strategy` to use a custom version strategy service?
    answers:
      - { value: "Set its value to the service ID of your custom version strategy.", correct: true }
      - { value: "Set its value to the FQCN of your custom version strategy class.", correct: false }
      - { value: "Register your custom strategy with the `asset.version_strategy` tag.", correct: false }
      - { value: "It can only be set to a built-in strategy name.", correct: false }
    help: |
      The `version_strategy` option expects the service ID of a class that implements `VersionStrategyInterface`.
      https://symfony.com/doc/current/deployment/best_practices.html#configure-asset-version-strategy

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\RedisStore`?
    answers:
      - { value: "It stores locks in memory, meaning locks are not persisted and can be lost on Redis service restart.", correct: true }
      - { value: "It supports blocking operations, allowing processes to wait for a lock.", correct: false }
      - { value: "It automatically creates the necessary database table for locks.", correct: false }
      - { value: "It relies on synchronized clocks across server nodes for purging old locks.", correct: false }
    help: |
      `RedisStore` is an in-memory store, so locks are not persistent across Redis restarts. It does not support blocking operations by itself.
      https://symfony.com/doc/current/components/lock.html#redisstore-in-memory-behavior-and-persistence-risks

  -
    question: >
      Which of the following is the correct way to configure a rate limiter to use a specific lock factory service in Symfony?
    answers:
      - { value: "Set `lock_factory` under the limiter's configuration to the service ID of the lock factory.", correct: true }
      - { value: "Set `lock_service` under the limiter's configuration.", correct: false }
      - { value: "Tag the lock factory service with `rate_limiter.lock_factory`.", correct: false }
      - { value: "Inject the lock factory directly into the rate limiter service definition.", correct: false }
    help: |
      The `lock_factory` option within a rate limiter's configuration allows you to specify which lock factory service it should use.
      https://symfony.com/doc/current/rate_limiter.html#configure-rate-limiter-lock-factory-in-symfony

  -
    question: >
      Which of the following is NOT a valid DSN for configuring the Symfony Lock component?
    answers:
      - { value: "`flock:///path/to/file`", correct: false }
      - { value: "`memcached://m1.docker`", correct: false }
      - { value: "`redis://r1.docker`", correct: false }
      - { value: "`http://localhost/lock`", correct: true }
      - { value: "`sqlite:///%kernel.project_dir%/var/lock.db`", correct: false }
    help: |
      The Lock component supports various DSNs for different stores (filesystem, in-memory, database, distributed caches), but not HTTP-based DSNs directly.
      https://symfony.com/doc/current/lock.html#configure-symfony-lock-component-with-various-dsns

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\CombinedStore`?
    answers:
      - { value: "It does not make the lock mechanism more reliable; it is only as reliable as its least reliable managed store.", correct: true }
      - { value: "It enhances reliability by distributing locks across multiple backends, ensuring high availability.", correct: false }
      - { value: "It automatically handles failover between its managed stores.", correct: false }
      - { value: "It requires all managed stores to successfully acquire the lock for the overall lock to be considered acquired.", correct: false }
    help: |
      `CombinedStore` allows using multiple backends but does not inherently improve reliability; its reliability is limited by the weakest link. The strategy (e.g., `UnanimousStrategy`, `ConsensusStrategy`) determines how multiple stores contribute to the overall lock acquisition.
      https://symfony.com/doc/current/components/lock.html#combinedstore-reliability-and-configuration-requirements

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.dsn` in `config/packages/framework.yaml`?
    answers:
      - { value: "`dsn: '%env(MAILER_DSN)%'`", correct: true }
      - { value: "`mailer_dsn: '%env(MAILER_DSN)%'`", correct: false }
      - { value: "`dsn: env('MAILER_DSN')`", correct: false }
      - { value: "`transport: '%env(MAILER_DSN)%'`", correct: false }
    help: |
      The `dsn` option under `framework.mailer` is used to configure the Mailer DSN, typically referencing an environment variable.
      https://symfony.com/doc/current/mailer.html#configure-mailer-dsn-in-symfony-framework-configuration

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Mime\\RawMessage`?
    answers:
      - { value: "It is used to recreate an email message from its serialized form.", correct: true }
      - { value: "It represents an email message before any headers or parts are added.", correct: false }
      - { value: "It is a low-level representation of an email's raw MIME content.", correct: true }
      - { value: "It is used for sending emails without any Mime component processing.", correct: false }
    help: |
      `RawMessage` is used to represent an email as a raw string (e.g., after serialization) and can be used to reconstitute an email for sending.
      https://symfony.com/doc/current/components/mime.html#recreate-symfony-email-from-serialized-data

  -
    question: >
      Which Symfony component provides the `HtmlToTextConverterInterface` for automatically creating the text part of an email from its HTML content?
    answers:
      - { value: "Symfony\\Component\\Mime", correct: true }
      - { value: "Symfony\\Component\\Mailer", correct: false }
      - { value: "Symfony\\Component\\HtmlToText", correct: false }
      - { value: "Twig\\Extra\\CssInliner", correct: false }
    help: |
      The `HtmlToTextConverterInterface` is part of the Mime component and is used by Mailer to generate plain text email bodies from HTML.
      https://symfony.com/doc/current/reference/configuration/twig.rst#symfony-mime-htmltotextconverterinterface-reference

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.envelope.sender` in `config/packages/mailer.yaml`?
    answers:
      - { value: "`sender: 'fabien@example.com'`", correct: true }
      - { value: "`from: 'fabien@example.com'`", correct: false }
      - { value: "`envelope_sender: 'fabien@example.com'`", correct: false }
      - { value: "`default_sender: 'fabien@example.com'`", correct: false }
    help: |
      The `sender` option under `framework.mailer.envelope` sets the global sender for all emails.
      https://symfony.com/doc/current/mailer.rst#configure-global-email-settings-in-symfony-mailer

  -
    question: >
      Which of the following is a valid way to configure the `framework.assets.version_strategy` to use a custom version strategy service?
    answers:
      - { value: "Set its value to the service ID of your custom version strategy.", correct: true }
      - { value: "Set its value to the FQCN of your custom version strategy class.", correct: false }
      - { value: "Register your custom strategy with the `asset.version_strategy` tag.", correct: false }
      - { value: "It can only be set to a built-in strategy name.", correct: false }
    help: |
      The `version_strategy` option expects the service ID of a class that implements `VersionStrategyInterface`.
      https://symfony.com/doc/current/deployment/best_practices.html#configure-asset-version-strategy

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\RedisStore`?
    answers:
      - { value: "It stores locks in memory, meaning locks are not persisted and can be lost on Redis service restart.", correct: true }
      - { value: "It supports blocking operations, allowing processes to wait for a lock.", correct: false }
      - { value: "It automatically creates the necessary database table for locks.", correct: false }
      - { value: "It relies on synchronized clocks across server nodes for purging old locks.", correct: false }
    help: |
      `RedisStore` is an in-memory store, so locks are not persistent across Redis restarts. It does not support blocking operations by itself.
      https://symfony.com/doc/current/components/lock.html#redisstore-in-memory-behavior-and-persistence-risks

  -
    question: >
      Which of the following is the correct way to configure a rate limiter to use a specific lock factory service in Symfony?
    answers:
      - { value: "Set `lock_factory` under the limiter's configuration to the service ID of the lock factory.", correct: true }
      - { value: "Set `lock_service` under the limiter's configuration.", correct: false }
      - { value: "Tag the lock factory service with `rate_limiter.lock_factory`.", correct: false }
      - { value: "Inject the lock factory directly into the rate limiter service definition.", correct: false }
    help: |
      The `lock_factory` option within a rate limiter's configuration allows you to specify which lock factory service it should use.
      https://symfony.com/doc/current/rate_limiter.html#configure-rate-limiter-lock-factory-in-symfony

  -
    question: >
      Which of the following is NOT a valid DSN for configuring the Symfony Lock component?
    answers:
      - { value: "`flock:///path/to/file`", correct: false }
      - { value: "`memcached://m1.docker`", correct: false }
      - { value: "`redis://r1.docker`", correct: false }
      - { value: "`http://localhost/lock`", correct: true }
      - { value: "`sqlite:///%kernel.project_dir%/var/lock.db`", correct: false }
    help: |
      The Lock component supports various DSNs for different stores (filesystem, in-memory, database, distributed caches), but not HTTP-based DSNs directly.
      https://symfony.com/doc/current/lock.html#configure-symfony-lock-component-with-various-dsns

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\CombinedStore`?
    answers:
      - { value: "It does not make the lock mechanism more reliable; it is only as reliable as its least reliable managed store.", correct: true }
      - { value: "It enhances reliability by distributing locks across multiple backends, ensuring high availability.", correct: false }
      - { value: "It automatically handles failover between its managed stores.", correct: false }
      - { value: "It requires all managed stores to successfully acquire the lock for the overall lock to be considered acquired.", correct: false }
    help: |
      `CombinedStore` allows using multiple backends but does not inherently improve reliability; its reliability is limited by the weakest link. The strategy (e.g., `UnanimousStrategy`, `ConsensusStrategy`) determines how multiple stores contribute to the overall lock acquisition.
      https://symfony.com/doc/current/components/lock.html#combinedstore-reliability-and-configuration-requirements

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.dsn` in `config/packages/framework.yaml`?
    answers:
      - { value: "`dsn: '%env(MAILER_DSN)%'`", correct: true }
      - { value: "`mailer_dsn: '%env(MAILER_DSN)%'`", correct: false }
      - { value: "`dsn: env('MAILER_DSN')`", correct: false }
      - { value: "`transport: '%env(MAILER_DSN)%'`", correct: false }
    help: |
      The `dsn` option under `framework.mailer` is used to configure the Mailer DSN, typically referencing an environment variable.
      https://symfony.com/doc/current/mailer.html#configure-mailer-dsn-in-symfony-framework-configuration

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Mime\\RawMessage`?
    answers:
      - { value: "It is used to recreate an email message from its serialized form.", correct: true }
      - { value: "It represents an email message before any headers or parts are added.", correct: false }
      - { value: "It is a low-level representation of an email's raw MIME content.", correct: true }
      - { value: "It is used for sending emails without any Mime component processing.", correct: false }
    help: |
      `RawMessage` is used to represent an email as a raw string (e.g., after serialization) and can be used to reconstitute an email for sending.
      https://symfony.com/doc/current/components/mime.html#recreate-symfony-email-from-serialized-data

  -
    question: >
      Which Symfony component provides the `HtmlToTextConverterInterface` for automatically creating the text part of an email from its HTML content?
    answers:
      - { value: "Symfony\\Component\\Mime", correct: true }
      - { value: "Symfony\\Component\\Mailer", correct: false }
      - { value: "Symfony\\Component\\HtmlToText", correct: false }
      - { value: "Twig\\Extra\\CssInliner", correct: false }
    help: |
      The `HtmlToTextConverterInterface` is part of the Mime component and is used by Mailer to generate plain text email bodies from HTML.
      https://symfony.com/doc/current/reference/configuration/twig.rst#symfony-mime-htmltotextconverterinterface-reference

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.envelope.sender` in `config/packages/mailer.yaml`?
    answers:
      - { value: "`sender: 'fabien@example.com'`", correct: true }
      - { value: "`from: 'fabien@example.com'`", correct: false }
      - { value: "`envelope_sender: 'fabien@example.com'`", correct: false }
      - { value: "`default_sender: 'fabien@example.com'`", correct: false }
    help: |
      The `sender` option under `framework.mailer.envelope` sets the global sender for all emails.
      https://symfony.com/doc/current/mailer.rst#configure-global-email-settings-in-symfony-mailer

  -
    question: >
      Which of the following is a valid way to configure the `framework.assets.version_strategy` to use a custom version strategy service?
    answers:
      - { value: "Set its value to the service ID of your custom version strategy.", correct: true }
      - { value: "Set its value to the FQCN of your custom version strategy class.", correct: false }
      - { value: "Register your custom strategy with the `asset.version_strategy` tag.", correct: false }
      - { value: "It can only be set to a built-in strategy name.", correct: false }
    help: |
      The `version_strategy` option expects the service ID of a class that implements `VersionStrategyInterface`.
      https://symfony.com/doc/current/deployment/best_practices.html#configure-asset-version-strategy

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\RedisStore`?
    answers:
      - { value: "It stores locks in memory, meaning locks are not persisted and can be lost on Redis service restart.", correct: true }
      - { value: "It supports blocking operations, allowing processes to wait for a lock.", correct: false }
      - { value: "It automatically creates the necessary database table for locks.", correct: false }
      - { value: "It relies on synchronized clocks across server nodes for purging old locks.", correct: false }
    help: |
      `RedisStore` is an in-memory store, so locks are not persistent across Redis restarts. It does not support blocking operations by itself.
      https://symfony.com/doc/current/components/lock.html#redisstore-in-memory-behavior-and-persistence-risks

  -
    question: >
      Which of the following is the correct way to configure a rate limiter to use a specific lock factory service in Symfony?
    answers:
      - { value: "Set `lock_factory` under the limiter's configuration to the service ID of the lock factory.", correct: true }
      - { value: "Set `lock_service` under the limiter's configuration.", correct: false }
      - { value: "Tag the lock factory service with `rate_limiter.lock_factory`.", correct: false }
      - { value: "Inject the lock factory directly into the rate limiter service definition.", correct: false }
    help: |
      The `lock_factory` option within a rate limiter's configuration allows you to specify which lock factory service it should use.
      https://symfony.com/doc/current/rate_limiter.html#configure-rate-limiter-lock-factory-in-symfony

  -
    question: >
      Which of the following is NOT a valid DSN for configuring the Symfony Lock component?
    answers:
      - { value: "`flock:///path/to/file`", correct: false }
      - { value: "`memcached://m1.docker`", correct: false }
      - { value: "`redis://r1.docker`", correct: false }
      - { value: "`http://localhost/lock`", correct: true }
      - { value: "`sqlite:///%kernel.project_dir%/var/lock.db`", correct: false }
    help: |
      The Lock component supports various DSNs for different stores (filesystem, in-memory, database, distributed caches), but not HTTP-based DSNs directly.
      https://symfony.com/doc/current/lock.html#configure-symfony-lock-component-with-various-dsns

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Lock\\Store\\CombinedStore`?
    answers:
      - { value: "It does not make the lock mechanism more reliable; it is only as reliable as its least reliable managed store.", correct: true }
      - { value: "It enhances reliability by distributing locks across multiple backends, ensuring high availability.", correct: false }
      - { value: "It automatically handles failover between its managed stores.", correct: false }
      - { value: "It requires all managed stores to successfully acquire the lock for the overall lock to be considered acquired.", correct: false }
    help: |
      `CombinedStore` allows using multiple backends but does not inherently improve reliability; its reliability is limited by the weakest link. The strategy (e.g., `UnanimousStrategy`, `ConsensusStrategy`) determines how multiple stores contribute to the overall lock acquisition.
      https://symfony.com/doc/current/components/lock.html#combinedstore-reliability-and-configuration-requirements

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.dsn` in `config/packages/framework.yaml`?
    answers:
      - { value: "`dsn: '%env(MAILER_DSN)%'`", correct: true }
      - { value: "`mailer_dsn: '%env(MAILER_DSN)%'`", correct: false }
      - { value: "`dsn: env('MAILER_DSN')`", correct: false }
      - { value: "`transport: '%env(MAILER_DSN)%'`", correct: false }
    help: |
      The `dsn` option under `framework.mailer` is used to configure the Mailer DSN, typically referencing an environment variable.
      https://symfony.com/doc/current/mailer.html#configure-mailer-dsn-in-symfony-framework-configuration

  -
    question: >
      Which of the following is true about `Symfony\\Component\\Mime\\RawMessage`?
    answers:
      - { value: "It is used to recreate an email message from its serialized form.", correct: true }
      - { value: "It represents an email message before any headers or parts are added.", correct: false }
      - { value: "It is a low-level representation of an email's raw MIME content.", correct: true }
      - { value: "It is used for sending emails without any Mime component processing.", correct: false }
    help: |
      `RawMessage` is used to represent an email as a raw string (e.g., after serialization) and can be used to reconstitute an email for sending.
      https://symfony.com/doc/current/components/mime.html#recreate-symfony-email-from-serialized-data

  -
    question: >
      Which Symfony component provides the `HtmlToTextConverterInterface` for automatically creating the text part of an email from its HTML content?
    answers:
      - { value: "Symfony\\Component\\Mime", correct: true }
      - { value: "Symfony\\Component\\Mailer", correct: false }
      - { value: "Symfony\\Component\\HtmlToText", correct: false }
      - { value: "Twig\\Extra\\CssInliner", correct: false }
    help: |
      The `HtmlToTextConverterInterface` is part of the Mime component and is used by Mailer to generate plain text email bodies from HTML.
      https://symfony.com/doc/current/reference/configuration/twig.rst#symfony-mime-htmltotextconverterinterface-reference

  -
    question: >
      Which of the following is the correct way to configure the `framework.mailer.envelope.sender` in `config/packages/mailer.yaml`?
    answers:
      - { value: "`sender: 'fabien@example.com'`", correct: true }
      - { value: