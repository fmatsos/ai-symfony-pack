category: Miscellaneous

questions:
  -
    question: >
      Which of the following is the correct order of precedence for Symfony configuration files, from lowest to highest?
    answers:
      - { value: '`config/packages/*.yaml`, `config/services.yaml`, `config/routes.yaml`', correct: false }
      - { value: '`config/packages/*.yaml`, `config/packages/{env}/*.yaml`, `config/services.yaml`', correct: true }
      - { value: '`config/services.yaml`, `config/packages/*.yaml`, `config/packages/{env}/*.yaml`', correct: false }
      - { value: '`config/routes.yaml`, `config/services.yaml`, `config/packages/*.yaml`', correct: false }
    help: |
      Symfony loads configuration files in a specific order, with environment-specific files overriding general ones.
      https://symfony.com/doc/current/configuration.html#configuration-environments

  -
    question: |
      How can you access an environment variable named `DATABASE_URL` within a Symfony service definition in `config/services.yaml`?

      ```yaml
      # config/services.yaml
      services:
          App\Service\DatabaseConnector:
              arguments:
                  $dsn: '%env(DATABASE_URL)%'
      ```
    answers:
      - { value: '`%env(DATABASE_URL)%`', correct: true }
      - { value: '`%env.DATABASE_URL%`', correct: false }
      - { value: '`$_ENV[''DATABASE_URL'']`', correct: false }
      - { value: '`%parameter(DATABASE_URL)%`', correct: false }
    help: |
      Symfony's configuration allows accessing environment variables using the `%env(...)%` syntax.
      https://symfony.com/doc/current/configuration.html#environment-variables-in-service-definitions

  -
    question: >
      What is the primary purpose of the Symfony DotEnv component?
    answers:
      - { value: 'To manage database migrations.', correct: false }
      - { value: 'To load environment variables from a `.env` file into `$_ENV` and `$_SERVER`.', correct: true }
      - { value: 'To compile Twig templates.', correct: false }
      - { value: 'To handle HTTP requests and responses.', correct: false }
    help: |
      The DotEnv component simplifies the management of environment variables by loading them from a `.env` file.
      https://symfony.com/doc/current/components/dotenv.html

  -
    question: |
      Which of the following ExpressionLanguage expressions would correctly check if the current user has the `ROLE_ADMIN` role within a Symfony configuration or security rule?
    answers:
      - { value: '`is_granted(''ROLE_ADMIN'')`', correct: true }
      - { value: '`user.hasRole(''ROLE_ADMIN'')`', correct: false }
      - { value: '`security.isGranted(''ROLE_ADMIN'')`', correct: false }
      - { value: '`has_role(''ROLE_ADMIN'')`', correct: false }
    help: |
      The `is_granted()` function is the correct way to check for roles using Symfony's ExpressionLanguage.
      https://symfony.com/doc/current/components/expression_language.html#security-expressions

  -
    question: >
      How can you customize the error pages (e.g., 404, 500) in a Symfony application?
    answers:
      - { value: 'By creating Twig templates named `error404.html.twig` and `error500.html.twig` in the `templates/bundles/TwigBundle/Exception/` directory.', correct: true }
      - { value: 'By configuring routes for each error code in `config/routes.yaml`.', correct: false }
      - { value: 'By overriding the `Kernel::handleException()` method.', correct: false }
      - { value: 'By defining custom error controllers in `config/services.yaml`.', correct: false }
    help: |
      Symfony allows customizing error pages by placing Twig templates in a specific directory structure within your `templates` folder.
      https://symfony.com/doc/current/controller/error_pages.html

  -
    question: >
      What is the primary effect of setting `APP_DEBUG=0` in your `.env` file for a production Symfony application?
    answers:
      - { value: 'It enables verbose logging for all services.', correct: false }
      - { value: 'It disables the Web Profiler and hides detailed error messages from end-users.', correct: true }
      - { value: 'It forces all cache to be regenerated on every request.', correct: false }
      - { value: 'It switches the application to maintenance mode.', correct: false }
    help: |
      Setting `APP_DEBUG` to `0` is crucial for production environments as it disables debugging tools and prevents sensitive error information from being exposed.
      https://symfony.com/doc/current/configuration/environments.html#the-app-env-and-app-debug-variables

  -
    question: |
      Consider the following controller action. Which of the following is the correct way to catch a specific `NotFoundHttpException` and render a custom response?

      ```php
      namespace App\Controller;

      use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
      use Symfony\Component\HttpFoundation\Response;
      use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
      use Symfony\Component\Routing\Annotation\Route;

      class ProductController extends AbstractController
      {
          #[Route('/product/{id}', name: 'app_product_show')]
          public function show(int $id): Response
          {
              if ($id === 0) {
                  // How to handle this specific case?
              }
              return new Response('Product ' . $id);
          }
      }
      ```
    answers:
      - { value: 'Throw a `NotFoundHttpException` directly: `throw new NotFoundHttpException(''Product not found.'');`', correct: true }
      - { value: 'Use a `try-catch` block around the `if` statement.', correct: false }
      - { value: 'Return `$this->render(''error/404.html.twig'');` directly.', correct: false }
      - { value: 'Use the `#[Catch]` attribute above the method.', correct: false }
    help: |
      For HTTP exceptions like `NotFoundHttpException`, throwing the exception is the standard Symfony way. The kernel's exception listener will then handle rendering the appropriate error page.
      https://symfony.com/doc/current/controller/error_pages.html#handling-404-errors

  -
    question: >
      What is the primary difference between `dump()` and `dd()` functions provided by Symfony's VarDumper component?
    answers:
      - { value: '`dump()` outputs data and continues script execution, while `dd()` outputs data and then terminates script execution.', correct: true }
      - { value: '`dump()` is for production, `dd()` is for development.', correct: false }
      - { value: '`dump()` only works with arrays, `dd()` works with objects.', correct: false }
      - { value: '`dd()` is a deprecated alias for `dump()`.', correct: false }
    help: |
      `dump()` is used for inspecting variables without stopping execution, whereas `dd()` (dump and die) is useful for quickly debugging and stopping the script.
      https://symfony.com/doc/current/components/var_dumper.html#dump-and-die-dd

  -
    question: >
      Which Symfony command is most useful for inspecting the registered services in your application's dependency injection container?
    answers:
      - { value: '`bin/console debug:container`', correct: true }
      - { value: '`bin/console cache:clear`', correct: false }
      - { value: '`bin/console config:dump`', correct: false }
      - { value: '`bin/console router:debug`', correct: false }
    help: |
      The `debug:container` command provides a comprehensive list of all public and private services, their aliases, and their definitions.
      https://symfony.com/doc/current/console/usage.html#debugging-commands

  -
    question: >
      When debugging a Symfony application, where would you typically find detailed information about HTTP requests, responses, and performance metrics?
    answers:
      - { value: 'In the `var/log/dev.log` file.', correct: false }
      - { value: 'In the browser''s developer console network tab.', correct: false }
      - { value: 'In the Symfony Web Profiler, accessible via the Web Debug Toolbar.', correct: true }
      - { value: 'In the PHP error log.', correct: false }
    help: |
      The Symfony Web Profiler is an invaluable tool for debugging, providing a wealth of information about each request.
      https://symfony.com/doc/current/profiler.html

  -
    question: >
      Which Composer command is recommended for deploying a Symfony application to a production server?
    answers:
      - { value: '`composer update`', correct: false }
      - { value: '`composer install --no-dev --optimize-autoloader`', correct: true }
      - { value: '`composer require --no-dev`', correct: false }
      - { value: '`composer dump-autoload`', correct: false }
    help: |
      `composer install --no-dev --optimize-autoloader` ensures that development dependencies are not installed and the autoloader is optimized for performance.
      https://symfony.com/doc/current/deployment.html#install-your-dependencies

  -
    question: >
      Before deploying a Symfony application to production, which environment variable should typically be set to `prod`?
    answers:
      - { value: '`APP_ENV`', correct: true }
      - { value: '`SYMFONY_ENV`', correct: false }
      - { value: '`ENV`', correct: false }
      - { value: '`DEBUG_ENV`', correct: false }
    help: |
      The `APP_ENV` environment variable determines the current environment (e.g., `dev`, `prod`, `test`), influencing configuration and behavior.
      https://symfony.com/doc/current/configuration/environments.html#the-app-env-and-app-debug-variables

  -
    question: >
      What is the primary benefit of running `bin/console cache:clear --env=prod` during deployment?
    answers:
      - { value: 'It removes all log files to free up disk space.', correct: false }
      - { value: 'It clears and warms up the production cache, ensuring the latest code and configuration are used.', correct: true }
      - { value: 'It deletes all user sessions.', correct: false }
      - { value: 'It rebuilds the database schema.', correct: false }
    help: |
      Clearing and warming up the cache is a critical step in deployment to ensure that the application runs with the latest compiled assets and configuration.
      https://symfony.com/doc/current/deployment.html#clear-and-warm-up-the-cache

  -
    question: >
      Which of the following cache adapters is generally recommended for production environments in Symfony due to its performance characteristics for storing PHP objects?
    answers:
      - { value: 'FilesystemAdapter', correct: false }
      - { value: 'ApcuAdapter', correct: true }
      - { value: 'ArrayAdapter', correct: false }
      - { value: 'Psr6Adapter', correct: false }
    help: |
      APCu (Alternative PHP Cache) is a highly performant in-memory cache for PHP data and is often recommended for production.
      https://symfony.com/doc/current/components/cache/adapters.html#apcu-cache

  -
    question: |
      You want to cache the result of a computationally expensive operation. Given a `CacheInterface` service injected as `$cache`, how would you store and retrieve data with a specific lifetime?

      ```php
      use Psr\Cache\CacheItemPoolInterface;

      class MyService
      {
          public function __construct(private CacheItemPoolInterface $cache) {}

          public function getExpensiveData(): array
          {
              $item = $this->cache->getItem('my_expensive_data');
              if (!$item->isHit()) {
                  $data = $this->computeExpensiveData(); // Imagine this is slow
                  $item->set($data);
                  $item->expiresAfter(3600); // Cache for 1 hour
                  $this->cache->save($item);
              }
              return $item->get();
          }

          private function computeExpensiveData(): array
          {
              // ... actual computation ...
              return ['foo' => 'bar'];
          }
      }
      ```
    answers:
      - { value: 'The code snippet correctly demonstrates storing and retrieving data with a lifetime.', correct: true }
      - { value: 'The `expiresAfter()` method should be called before `set()`.', correct: false }
      - { value: 'You must use `CacheItemPoolInterface` for `getItem()` and `CacheItemInterface` for `set()` and `expiresAfter()`.', correct: false }
      - { value: 'The `save()` method is not necessary; `set()` automatically persists the item.', correct: false }
    help: |
      The example correctly uses `getItem()`, `isHit()`, `set()`, `expiresAfter()`, and `save()` to manage cached items.
      https://symfony.com/doc/current/components/cache/cache_items.html

  -
    question: >
      Which of the following is a valid strategy for cache invalidation in Symfony?
    answers:
      - { value: 'Manually deleting cache files via FTP.', correct: false }
      - { value: 'Using cache tags to invalidate groups of related items.', correct: true }
      - { value: 'Restarting the web server after every cache update.', correct: false }
      - { value: 'Setting an extremely short cache lifetime for all items.', correct: false }
    help: |
      Cache tags provide a powerful mechanism to invalidate multiple related cache items efficiently.
      https://symfony.com/doc/current/components/cache/cache_tags.html

  -
    question: >
      What is the purpose of the `Symfony\Component\Process\Process` component?
    answers:
      - { value: 'To manage background jobs and queues.', correct: false }
      - { value: 'To execute external commands and programs from PHP.', correct: true }
      - { value: 'To handle file uploads securely.', correct: false }
      - { value: 'To interact with databases.', correct: false }
    help: |
      The Process component allows you to run shell commands and external processes, providing control over input, output, and error streams.
      https://symfony.com/doc/current/components/process.html

  -
    question: |
      Given the following code, how would you capture the standard output of the `ls -la` command?

      ```php
      use Symfony\Component\Process\Process;

      $process = new Process(['ls', '-la']);
      $process->run();

      if ($process->isSuccessful()) {
          $output = /* ??? */;
          echo $output;
      }
      ```
    answers:
      - { value: '`$process->getOutput()`', correct: true }
      - { value: '`$process->getStdout()`', correct: false }
      - { value: '`$process->getIncrementalOutput()`', correct: false }
      - { value: '`$process->getResults()`', correct: false }
    help: |
      The `getOutput()` method returns the standard output of the process after it has finished running.
      https://symfony.com/doc/current/components/process.html#getting-the-output

  -
    question: >
      Which method of the `Process` class allows you to execute a command asynchronously, without blocking the PHP script's execution?
    answers:
      - { value: '`run()`', correct: false }
      - { value: '`start()`', correct: true }
      - { value: '`execute()`', correct: false }
      - { value: '`wait()`', correct: false }
    help: |
      The `start()` method initiates the process and returns immediately, allowing your PHP script to continue execution while the process runs in the background.
      https://symfony.com/doc/current/components/process.html#running-processes-asynchronously

  -
    question: >
      What is the primary role of the Symfony Serializer component?
    answers:
      - { value: 'To convert PHP objects into various formats (e.g., JSON, XML) and vice-versa.', correct: true }
      - { value: 'To handle data validation for forms.', correct: false }
      - { value: 'To manage database connections and queries.', correct: false }
      - { value: 'To encrypt and decrypt data.', correct: false }
    help: |
      The Serializer component provides a flexible way to serialize and deserialize PHP objects into different formats.
      https://symfony.com/doc/current/components/serializer.html

  -
    question: |
      You have a `User` object with sensitive `password` and `roles` properties. How can you prevent these properties from being serialized when exposing user data via an API, while still serializing other properties like `id` and `email`?
    answers:
      - { value: 'Use serialization groups with the `#[Groups]` attribute on the properties.', correct: true }
      - { value: 'Mark the properties as `private` or `protected`.', correct: false }
      - { value: 'Implement the `JsonSerializable` interface and manually exclude them.', correct: false }
      - { value: 'Configure a custom normalizer for each sensitive property.', correct: false }
    help: |
      Serialization groups allow you to define different sets of properties to be serialized based on the context.
      https://symfony.com/doc/current/components/serializer.html#using-serialization-groups

  -
    question: >
      In the context of the Serializer component, what is the difference between a "Normalizer" and an "Encoder"?
    answers:
      - { value: 'A Normalizer converts objects to arrays and vice-versa, while an Encoder converts arrays to a specific format (e.g., JSON, XML) and vice-versa.', correct: true }
      - { value: 'A Normalizer handles data validation, while an Encoder handles data encryption.', correct: false }
      - { value: 'A Normalizer is for database operations, while an Encoder is for API responses.', correct: false }
      - { value: 'They are interchangeable terms for the same functionality.', correct: false }
    help: |
      Normalizers handle the object-to-array (and array-to-object) conversion, while Encoders handle the array-to-format (and format-to-array) conversion.
      https://symfony.com/doc/current/components/serializer.html#normalizers-and-encoders

  -
    question: >
      How does the Symfony Serializer component typically handle circular references (e.g., an object referencing itself or another object that references the first)?
    answers:
      - { value: 'It throws a `CircularReferenceException` by default, but this can be configured to ignore or limit depth.', correct: true }
      - { value: 'It automatically detects and skips the problematic reference without configuration.', correct: false }
      - { value: 'It creates an infinite loop, leading to a memory exhaustion error.', correct: false }
      - { value: 'It requires manual detection and breaking of the reference in your entities.', correct: false }
    help: |
      By default, the Serializer throws an exception for circular references to prevent infinite loops, but you can configure it to handle them gracefully.
      https://symfony.com/doc/current/components/serializer.html#handling-circular-references

  -
    question: >
      What is the primary purpose of the Symfony Messenger component?
    answers:
      - { value: 'To send real-time notifications to users.', correct: false }
      - { value: 'To send and receive messages (commands and events) to/from applications and queues.', correct: true }
      - { value: 'To manage user authentication and authorization.', correct: false }
      - { value: 'To handle HTTP requests and responses efficiently.', correct: false }
    help: |
      The Messenger component provides a robust solution for sending and processing messages asynchronously or synchronously.
      https://symfony.com/doc/current/components/messenger.html

  -
    question: |
      You want to create a new message and its handler in Symfony Messenger. Which of the following is the correct approach?
    answers:
      - { value: 'Define a PHP class for the message (e.g., `SendEmailMessage`) and a separate handler class (e.g., `SendEmailHandler`) that implements `MessageHandlerInterface` or uses the `#[AsMessageHandler]` attribute.', correct: true }
      - { value: 'Create a new service in `services.yaml` with a `messenger.message_handler` tag.', correct: false }
      - { value: 'Extend `AbstractMessage` for the message and `AbstractHandler` for the handler.', correct: false }
      - { value: 'Messages are automatically generated by Symfony; you only need to create handlers.', correct: false }
    help: |
      Messages are plain PHP objects, and handlers are services that process these messages. The `#[AsMessageHandler]` attribute is the modern way to register handlers.
      https://symfony.com/doc/current/messenger.html#creating-a-message-and-handler

  -
    question: >
      Which of the following is NOT a valid transport type for Symfony Messenger?
    answers:
      - { value: '`sync`', correct: false }
      - { value: '`amqp`', correct: false }
      - { value: '`database`', correct: false }
      - { value: '`http`', correct: true }
      - { value: '`redis`', correct: false }
    help: |
      Symfony Messenger supports various transports like `sync`, `amqp`, `redis`, `doctrine` (for database), but not a direct `http` transport for message queuing.
      https://symfony.com/doc/current/messenger.html#transports

  -
    question: >
      How does Symfony Messenger handle failed messages by default when using an asynchronous transport?
    answers:
      - { value: 'It immediately discards the message.', correct: false }
      - { value: 'It retries the message a configurable number of times before moving it to a "failure" or "dead-letter" queue.', correct: true }
      - { value: 'It stops the worker process.', correct: false }
      - { value: 'It sends an email notification to the administrator.', correct: false }
    help: |
      The Messenger component includes a retry mechanism that attempts to re-process failed messages, eventually moving them to a dedicated failure transport if retries are exhausted.
      https://symfony.com/doc/current/messenger.html#retrying-failed-messages

  -
    question: >
      What is the role of "middleware" in Symfony Messenger?
    answers:
      - { value: 'To define the routing of messages to handlers.', correct: false }
      - { value: 'To intercept and process messages before or after they are handled, allowing for cross-cutting concerns like logging or doctrine transaction management.', correct: true }
      - { value: 'To serialize and deserialize messages.', correct: false }
      - { value: 'To configure the message transports.', correct: false }
    help: |
      Middleware provides a powerful way to add custom logic to the message handling pipeline, such as logging, validation, or database transactions.
      https://symfony.com/doc/current/messenger.html#middleware

  -
    question: |
      To send an email using Symfony Mailer, which service should you inject into your controller or service?
    answers:
      - { value: '`MailerInterface`', correct: true }
      - { value: '`Swift_Mailer`', correct: false }
      - { value: '`EmailSender`', correct: false }
      - { value: '`MailService`', correct: false }
    help: |
      The `MailerInterface` is the primary interface for sending emails with the Symfony Mailer component.
      https://symfony.com/doc/current/mailer.html#sending-emails

  -
    question: |
      You want to attach a file from your application's `public/uploads/report.pdf` directory to an email. Which `Email` method should you use?
    answers:
      - { value: '`attachFromPath(''public/uploads/report.pdf'')`', correct: true }
      - { value: '`addAttachment(''public/uploads/report.pdf'')`', correct: false }
      - { value: '`attachFile(''public/uploads/report.pdf'')`', correct: false }
      - { value: '`addFile(''public/uploads/report.pdf'')`', correct: false }
    help: |
      The `attachFromPath()` method is used to attach a file from a given path.
      https://symfony.com/doc/current/mailer.html#attaching-files

  -
    question: |
      How can you render the content of an email using a Twig template in Symfony Mailer?
    answers:
      - { value: 'Use the `htmlTemplate()` method on the `Email` object, providing the template path and context.', correct: true }
      - { value: 'Call `$this->renderView()` in your controller and pass the result to `html()`.', correct: false }
      - { value: 'Twig templates are not supported for email content; you must use plain HTML strings.', correct: false }
      - { value: 'Configure the template in `config/packages/mailer.yaml`.', correct: false }
    help: |
      The `htmlTemplate()` method allows you to specify a Twig template for the email's HTML content, passing variables as context.
      https://symfony.com/doc/current/mailer.html#rendering-email-content-with-twig

  -
    question: >
      What is the primary function of the `Symfony\Component\Filesystem\Filesystem` component?
    answers:
      - { value: 'To manage database files.', correct: false }
      - { value: 'To provide utility methods for common filesystem operations like copying, moving, and deleting files/directories.', correct: true }
      - { value: 'To handle file uploads from web forms.', correct: false }
      - { value: 'To compress and decompress archives.', correct: false }
    help: |
      The Filesystem component offers a convenient and robust API for interacting with the filesystem.
      https://symfony.com/doc/current/components/filesystem.html

  -
    question: |
      You need to find all `.log` files within the `var/log` directory and its subdirectories. Which `Finder` component method is most appropriate for this task?
    answers:
      - { value: '`$finder->files()->in(''var/log'')->name(''*.log'')`', correct: true }
      - { value: '`$finder->directories()->in(''var/log'')->name(''*.log'')`', correct: false }
      - { value: '`$finder->in(''var/log'')->contains(''*.log'')`', correct: false }
      - { value: '`$finder->files()->in(''var/log'')->filter(fn($file) => str_ends_with($file->getFilename(), ''.log''))`', correct: false }
    help: |
      The `files()` method filters for files, `in()` specifies the directory, and `name()` filters by filename pattern.
      https://symfony.com/doc/current/components/finder.html#basic-usage

  -
    question: >
      Which of the following `Filesystem` methods would you use to create a directory named `my_new_dir` and all its parent directories if they don't exist?
    answers:
      - { value: '`$filesystem->mkdir(''my_new_dir'', 0777, true)`', correct: true }
      - { value: '`$filesystem->createDirectory(''my_new_dir'')`', correct: false }
      - { value: '`$filesystem->makeDir(''my_new_dir'', true)`', correct: false }
      - { value: '`$filesystem->ensureDirectoryExists(''my_new_dir'')`', correct: false }
    help: |
      The `mkdir()` method with the third argument set to `true` (or `recursive`) will create parent directories if they don't exist.
      https://symfony.com/doc/current/components/filesystem.html#mkdir

  -
    question: >
      What is the primary purpose of the Symfony Lock component?
    answers:
      - { value: 'To manage database transactions.', correct: false }
      - { value: 'To prevent race conditions when multiple processes or requests try to access or modify a shared resource simultaneously.', correct: true }
      - { value: 'To encrypt and decrypt sensitive data.', correct: false }
      - { value: 'To control access to files on the filesystem.', correct: false }
    help: |
      The Lock component provides a mechanism for acquiring and releasing locks to ensure that critical sections of code are executed by only one process at a time.
      https://symfony.com/doc/current/components/lock.html

  -
    question: |
      You need to ensure that a specific console command can only run one instance at a time. How would you achieve this using the Lock component?
    answers:
      - { value: 'Inject `LockFactory` and use `LockFactory::createLock()` to acquire a lock before execution, then release it.', correct: true }
      - { value: 'Use a `flock()` call directly in the command.', correct: false }
      - { value: 'Configure a unique process ID for the command in `services.yaml`.', correct: false }
      - { value: 'The Lock component is not suitable for console commands.', correct: false }
    help: |
      The `LockFactory` is used to create `Lock` objects, which can then be acquired and released to manage concurrent access.
      https://symfony.com/doc/current/components/lock.html#using-the-lock-component

  -
    question: >
      Which of the following is NOT a supported store for the Symfony Lock component?
    answers:
      - { value: 'FlockStore', correct: false }
      - { value: 'RedisStore', correct: false }
      - { value: 'MemcachedStore', correct: false }
      - { value: 'DatabaseStore (using Doctrine DBAL)', correct: false }
      - { value: 'SessionStore', correct: true }
    help: |
      The Lock component supports various stores like Flock, Redis, Memcached, and Doctrine DBAL, but not a SessionStore.
      https://symfony.com/doc/current/components/lock.html#stores

  -
    question: >
      What is the primary purpose of the Symfony Web Profiler?
    answers:
      - { value: 'To generate API documentation.', correct: false }
      - { value: 'To collect and display detailed information about each HTTP request during development.', correct: true }
      - { value: 'To manage user authentication and authorization.', correct: false }
      - { value: 'To optimize database queries.', correct: false }
    help: |
      The Web Profiler is a powerful debugging and development tool that provides insights into various aspects of a Symfony request.
      https://symfony.com/doc/current/profiler.html

  -
    question: >
      How do you typically enable the Web Debug Toolbar and Web Profiler in a Symfony application?
    answers:
      - { value: 'They are enabled by default in the `dev` environment and disabled in `prod`.', correct: true }
      - { value: 'By manually adding a `<script>` tag to your Twig templates.', correct: false }
      - { value: 'By setting `profiler.enabled: true` in `config/services.yaml`.', correct: false }
      - { value: 'By running `bin/console profiler:enable`.', correct: false }
    help: |
      The Web Profiler and Web Debug Toolbar are automatically enabled in the `dev` environment via the `framework.profiler` configuration.
      https://symfony.com/doc/current/profiler.html#enabling-the-profiler

  -
    question: >
      Which of the following information is typically NOT displayed by default in the Symfony Web Debug Toolbar?
    answers:
      - { value: 'Current route and controller.', correct: false }
      - { value: 'Number of database queries.', correct: false }
      - { value: 'Execution time.', correct: false }
      - { value: 'Client-side JavaScript errors.', correct: true }
      - { value: 'Memory usage.', correct: false }
    help: |
      The Web Debug Toolbar focuses on server-side Symfony application data. Client-side JavaScript errors are typically found in the browser's developer console.
      https://symfony.com/doc/current/profiler.html#the-web-debug-toolbar

  -
    question: >
      What is the purpose of a "Data Collector" in the Symfony Web Profiler?
    answers:
      - { value: 'To collect data from user input forms.', correct: false }
      - { value: 'To gather specific data points (e.g., mailer events, Twig data, logger messages) during a request for display in the Web Profiler.', correct: true }
      - { value: 'To store data in the database.', correct: false }
      - { value: 'To encrypt data before it''s sent to the browser.', correct: false }
    help: |
      Data Collectors are services that implement `DataCollectorInterface` and are responsible for collecting and presenting specific data in the Web Profiler.
      https://symfony.com/doc/current/profiler/data_collectors.html

  -
    question: >
      To translate a string in a Twig template, which function should you use?
    answers:
      - { value: '`trans(''Hello World'')`', correct: true }
      - { value: '`_(''Hello World'')`', correct: false }
      - { value: '`translate(''Hello World'')`', correct: false }
      - { value: '`i18n(''Hello World'')`', correct: false }
    help: |
      The `trans` filter or function is used for translating strings in Twig templates.
      https://symfony.com/doc/current/translation.html#translating-in-twig-templates

  -
    question: >
      What is a "translation domain" in Symfony, and why is it useful?
    answers:
      - { value: 'It''s the language code (e.g., `en`, `fr`) for the translation.', correct: false }
      - { value: 'It''s a logical grouping of translation messages, allowing you to organize translations and load only necessary ones.', correct: true }
      - { value: 'It defines the database table where translations are stored.', correct: false }
      - { value: 'It specifies the external translation service to use.', correct: false }
    help: |
      Translation domains help organize messages into logical groups, improving maintainability and performance by loading only relevant translations.
      https://symfony.com/doc/current/translation.html#translation-domains

  -
    question: |
      You need to translate a message that changes based on a count (e.g., "1 apple", "2 apples"). Which translation feature should you use?
    answers:
      - { value: 'Pluralization.', correct: true }
      - { value: 'Contextual translation.', correct: false }
      - { value: 'Message formatting.', correct: false }
      - { value: 'Domain switching.', correct: false }
    help: |
      Symfony's translation component supports pluralization rules to handle messages that vary based on a count.
      https://symfony.com/doc/current/translation/pluralization.html

  -
    question: >
      The Symfony Intl component provides tools for which of the following?
    answers:
      - { value: 'Internationalized number, date, and currency formatting.', correct: true }
      - { value: 'Interacting with international payment gateways.', correct: false }
      - { value: 'Managing international shipping logistics.', correct: false }
      - { value: 'Translating strings into different languages.', correct: false }
    help: |
      The Intl component leverages PHP's Intl extension to provide locale-aware formatting for numbers, dates, currencies, and more.
      https://symfony.com/doc/current/components/intl.html

  -
    question: >
      What is the primary goal of the Symfony Runtime component?
    answers:
      - { value: 'To provide a standardized way to boot Symfony applications in different PHP environments (e.g., Apache, Nginx, RoadRunner, CLI) without modifying `public/index.php`.', correct: true }
      - { value: 'To manage runtime dependencies of your application.', correct: false }
      - { value: 'To compile PHP code into bytecode for faster execution.', correct: false }
      - { value: 'To monitor application performance in real-time.', correct: false }
    help: |
      The Runtime component abstracts the application bootstrap process, making it easier to run Symfony applications in various SAPI environments.
      https://symfony.com/doc/current/components/runtime.html

  -
    question: |
      Consider a typical Symfony `public/index.php` file. How does the Runtime component simplify this entry point?
    answers:
      - { value: 'It replaces the entire file with a single `require` statement to `vendor/autoload.php`.', correct: false }
      - { value: 'It allows the file to be very minimal, often just a `require_once` to `vendor/autoload_runtime.php` and a call to `App\Kernel::create()`.', correct: true }
      - { value: 'It removes the need for a `public/index.php` file entirely.', correct: false }
      - { value: 'It automatically detects the environment and loads the correct kernel.', correct: false }
    help: |
      The Runtime component reduces the boilerplate in `index.php` by handling the environment setup and kernel instantiation.
      https://symfony.com/doc/current/components/runtime.html#usage

  -
    question: >
      What is the main benefit of using the Symfony Clock component?
    answers:
      - { value: 'To synchronize the application''s time with an external NTP server.', correct: false }
      - { value: 'To provide a consistent and testable way to get the current time, making time-dependent code easier to test.', correct: true }
      - { value: 'To measure the execution time of specific code blocks.', correct: false }
      - { value: 'To schedule cron jobs within the application.', correct: false }
    help: |
      The Clock component provides a `ClockInterface` that can be injected, allowing you to control the "current time" during testing.
      https://symfony.com/doc/current/components/clock.html

  -
    question: |
      You have a service that depends on the current time. How would you inject the `ClockInterface` to make your service easily testable with different time values?

      ```php
      namespace App\Service;

      use Symfony\Component\Clock\ClockInterface;

      class TimeSensitiveService
      {
          public function __construct(
              private ClockInterface $clock
          ) {}

          public function isAfternoon(): bool
          {
              return $this->clock->now()->format('H') >= 12;
          }
      }
      ```
    answers:
      - { value: 'The service correctly injects `ClockInterface` via constructor.', correct: true }
      - { value: 'You should inject `\DateTimeImmutable` instead of `ClockInterface`.', correct: false }
      - { value: 'The `ClockInterface` is not autowirable; you must define it manually.', correct: false }
      - { value: 'You should use `new \DateTimeImmutable()` directly in the method.', correct: false }
    help: |
      Autowiring `ClockInterface` is the recommended way to get a clock instance, which can be easily mocked or replaced in tests.
      https://symfony.com/doc/current/components/clock.html#usage

  -
    question: >
      When writing unit tests for time-dependent logic, how does the Symfony Clock component facilitate testing?
    answers:
      - { value: 'It automatically fast-forwards time during test execution.', correct: false }
      - { value: 'It allows you to "freeze" the current time or set it to a specific point, ensuring consistent test results regardless of when the test is run.', correct: true }
      - { value: 'It provides a `sleep()` function that is faster than PHP''s built-in one.', correct: false }
      - { value: 'It automatically mocks all `DateTime` objects.', correct: false }
    help: |
      The Clock component's `TestClock` implementation allows precise control over the perceived current time during tests.
      https://symfony.com/doc/current/components/clock.html#testing

  -
    question: >
      Which of the following is considered a best practice for managing sensitive credentials (e.g., database passwords, API keys) in a Symfony application?
    answers:
      - { value: 'Hardcoding them directly in `config/services.yaml`.', correct: false }
      - { value: 'Storing them in version control (Git) in plain text.', correct: false }
      - { value: 'Using environment variables, potentially managed by `.env` files or a secrets management service.', correct: true }
      - { value: 'Encrypting them and storing the decryption key in the repository.', correct: false }
    help: |
      Environment variables are the recommended way to handle sensitive information, keeping it out of version control.
      https://symfony.com/doc/current/configuration/secrets.html

  -
    question: >
      When configuring a Symfony application, what is the purpose of the `parameters` section in `config/services.yaml`?
    answers:
      - { value: 'To define global variables accessible anywhere in the application.', correct: false }
      - { value: 'To define simple scalar values or arrays that can be injected into services or used in other configuration files.', correct: true }
      - { value: 'To list all available services in the container.', correct: false }
      - { value: 'To configure database connection details.', correct: false }
    help: |
      Parameters are used to store simple configuration values that can be reused across your service definitions and other configuration files.
      https://symfony.com/doc/current/service_container/parameters.html

  -
    question: >
      Which command would you use to clear the Symfony cache for the `test` environment?
    answers:
      - { value: '`bin/console cache:clear --env=test`', correct: true }
      - { value: '`bin/console cache:clear test`', correct: false }
      - { value: '`bin/console clear-cache test`', correct: false }
      - { value: '`bin/console cache:clear --environment=test`', correct: false }
    help: |
      The `--env` option specifies the environment for which the cache should be cleared.
      https://symfony.com/doc/current/console.html#clearing-the-cache

  -
    question: >
      What is the primary benefit of using `#[AsCommand]` attribute over defining commands in `services.yaml` or overriding `static $defaultName`?
    answers:
      - { value: 'It allows for easier dependency injection into the command.', correct: false }
      - { value: 'It makes the command definition more discoverable and self-contained within the command class itself.', correct: true }
      - { value: 'It provides better performance for command execution.', correct: false }
      - { value: 'It enables automatic command registration without requiring `make:command`.', correct: false }
    help: |
      The `#[AsCommand]` attribute, introduced in Symfony 5.3, simplifies command configuration by allowing it directly on the class.
      https://symfony.com/doc/current/console.html#configuring-the-command

  -
    question: >
      When debugging a Symfony application, what does the `X-Debug-Token` header in an HTTP response indicate?
    answers:
      - { value: 'It''s a security token to prevent CSRF attacks.', correct: false }
      - { value: 'It''s a unique identifier for the current request, used to access its profile in the Web Profiler.', correct: true }
      - { value: 'It indicates that the request was successful.', correct: false }
      - { value: 'It''s a token for API authentication.', correct: false }
    help: |
      The `X-Debug-Token` is crucial for debugging, allowing you to directly access the profiler page for a specific request.
      https://symfony.com/doc/current/profiler.html#accessing-the-profiler

  -
    question: >
      Which component would you use to programmatically interact with the user's terminal, for example, to ask questions or display progress bars in a console command?
    answers:
      - { value: '`Symfony\Component\Console\Style\SymfonyStyle`', correct: true }
      - { value: '`Symfony\Component\Process\Process`', correct: false }
      - { value: '`Symfony\Component\HttpFoundation\Request`', correct: false }
      - { value: '`Symfony\Component\Filesystem\Filesystem`', correct: false }
    help: |
      `SymfonyStyle` provides a set of helper methods for styling and interacting with the console output.
      https://symfony.com/doc/current/components/console/helpers/questionhelper.html#symfony-style

  -
    question: >
      When deploying a Symfony application, why is it important to ensure that `var/cache` and `var/log` directories are writable by the web server user?
    answers:
      - { value: 'Because the web server needs to store static assets in these directories.', correct: false }
      - { value: 'Because Symfony writes cache files and log entries to these directories, and without write permissions, the application will fail.', correct: true }
      - { value: 'Because these directories contain sensitive user data that needs to be accessed by the web server.', correct: false }
      - { value: 'Because they are used for database connections.', correct: false }
    help: |
      Proper file permissions for `var/cache` and `var/log` are essential for Symfony to function correctly in a production environment.
      https://symfony.com/doc/current/setup/file_permissions.html

  -
    question: >
      Which of the following is a common reason for a `500 Internal Server Error` in a Symfony application during development?
    answers:
      - { value: 'A syntax error in a PHP file, an unhandled exception, or incorrect service configuration.', correct: true }
      - { value: 'The user entered an invalid URL.', correct: false }
      - { value: 'The database server is offline.', correct: true }
      - { value: 'The web server is not running.', correct: false }
    help: |
      500 errors typically indicate a server-side problem, often related to application code errors, unhandled exceptions, or infrastructure issues like database connectivity.
      https://symfony.com/doc/current/controller/error_pages.html

  -
    question: >
      What is the purpose of the `#[Cache]` attribute in Symfony?
    answers:
      - { value: 'To automatically cache the output of a controller action or a method.', correct: true }
      - { value: 'To define a cache pool for a service.', correct: false }
      - { value: 'To clear the application cache.', correct: false }
      - { value: 'To mark a service as cacheable.', correct: false }
    help: |
      The `#[Cache]` attribute (from `Symfony\Component\HttpKernel\Attribute\Cache`) allows you to define HTTP caching headers directly on controllers or methods.
      https://symfony.com/doc/current/http_cache.html#http-cache-in-controllers

  -
    question: >
      When using the Serializer component, what is the purpose of a "context" array during serialization or deserialization?
    answers:
      - { value: 'To define the output format (e.g., JSON, XML).', correct: false }
      - { value: 'To pass additional options or parameters to normalizers and encoders, influencing how data is processed.', correct: true }
      - { value: 'To specify the input data source.', correct: false }
      - { value: 'To define the serialization groups.', correct: false }
    help: |
      The context array allows for dynamic behavior during serialization/deserialization, enabling custom logic based on the provided options.
      https://symfony.com/doc/current/components/serializer.html#context

  -
    question: >
      What is the main advantage of using asynchronous message processing with Symfony Messenger?
    answers:
      - { value: 'It makes the application run faster by executing all tasks in parallel.', correct: false }
      - { value: 'It improves user experience by offloading long-running tasks from the request-response cycle, allowing the web server to respond quickly.', correct: true }
      - { value: 'It eliminates the need for a database.', correct: false }
      - { value: 'It simplifies debugging of complex operations.', correct: false }
    help: |
      Asynchronous processing is key for scalability and responsiveness, as it prevents slow operations from blocking user requests.
      https://symfony.com/doc/current/messenger.html#asynchronous-processing

  -
    question: >
      Which of the following is a key feature provided by the Symfony Mime component?
    answers:
      - { value: 'Parsing and creating MIME messages (e.g., emails) with attachments and various content types.', correct: true }
      - { value: 'Handling HTTP request headers.', correct: false }
      - { value: 'Generating unique identifiers for files.', correct: false }
      - { value: 'Compressing files into ZIP archives.', correct: false }
    help: |
      The Mime component provides a powerful API for working with MIME messages, which is fundamental for email creation.
      https://symfony.com/doc/current/components/mime.html

  -
    question: >
      What is the primary use case for the `Symfony\Component\Finder\Finder` component?
    answers:
      - { value: 'To search for text within files.', correct: false }
      - { value: 'To find files and directories based on various criteria (name, path, size, content) in a filesystem.', correct: true }
      - { value: 'To locate specific lines of code in PHP files.', correct: false }
      - { value: 'To find and replace strings in a database.', correct: false }
    help: |
      The Finder component provides an intuitive API for iterating over files and directories with powerful filtering capabilities.
      https://symfony.com/doc/current/components/finder.html

  -
    question: >
      When should you consider using the Symfony Lock component?
    answers:
      - { value: 'When you need to prevent multiple concurrent executions of a console command.', correct: true }
      - { value: 'When you need to protect a shared resource (e.g., a file, a database record) from simultaneous modifications by different processes.', correct: true }
      - { value: 'When you want to secure user sessions.', correct: false }
      - { value: 'When you are building a real-time chat application.', correct: false }
    help: |
      The Lock component is designed for concurrency control, ensuring that critical operations are performed exclusively.
      https://symfony.com/doc/current/components/lock.html#when-to-use-the-lock-component

  -
    question: >
      What is the purpose of the `#[DataCollector]` attribute in Symfony?
    answers:
      - { value: 'To mark a class as a service that collects data for the Web Profiler.', correct: true }
      - { value: 'To define a data source for a form.', correct: false }
      - { value: 'To automatically populate an entity with data.', correct: false }
      - { value: 'To enable data encryption for a specific service.', correct: false }
    help: |
      The `#[DataCollector]` attribute (from `Symfony\Component\HttpKernel\Attribute\DataCollector`) simplifies the registration of custom data collectors for the Web Profiler.
      https://symfony.com/doc/current/profiler/data_collectors.html#registering-a-data-collector

  -
    question: >
      Which of the following is a correct way to define a translation message with a placeholder in Symfony?
    answers:
      - { value: '`Hello %name%!`', correct: true }
      - { value: '`Hello {name}!`', correct: false }
      - { value: '`Hello $name!`', correct: false }
      - { value: '`Hello {{ name }}!`', correct: false }
    help: |
      Placeholders are defined using `%placeholder_name%` in translation messages.
      https://symfony.com/doc/current/translation.html#message-placeholders

  -
    question: >
      What is the primary advantage of using `DateTimeImmutable` objects over `DateTime` objects in Symfony applications?
    answers:
      - { value: '`DateTimeImmutable` objects are faster to create.', correct: false }
      - { value: '`DateTimeImmutable` objects are mutable, allowing for easier modification.', correct: false }
      - { value: '`DateTimeImmutable` objects are immutable, meaning their state cannot be changed after creation, which helps prevent unintended side effects and makes code more predictable.', correct: true }
      - { value: '`DateTimeImmutable` objects are automatically serialized by Symfony.', correct: false }
    help: |
      Immutability is a key principle for robust and predictable code, especially when dealing with objects like dates and times.
      https://www.php.net/manual/en/class.datetimeimmutable.php

  -
    question: >
      When deploying a Symfony application, what is the purpose of running `composer dump-autoload --optimize --no-dev --classmap`?
    answers:
      - { value: 'To regenerate the Composer autoloader for production, optimizing it for performance by creating a classmap.', correct: true }
      - { value: 'To install all project dependencies, including development ones.', correct: false }
      - { value: 'To clear the Symfony cache.', correct: false }
      - { value: 'To update all Composer packages to their latest versions.', correct: false }
    help: |
      This command optimizes the autoloader for production, reducing file lookups and improving performance.
      https://symfony.com/doc/current/deployment.html#install-your-dependencies

  -
    question: >
      Which Symfony component provides a standardized way to configure and access secrets (e.g., API keys, database credentials) securely?
    answers:
      - { value: 'The `Secrets` component.', correct: true }
      - { value: 'The `Security` component.', correct: false }
      - { value: 'The `DotEnv` component.', correct: false }
      - { value: 'The `Vault` component.', correct: false }
    help: |
      The Secrets component provides a secure way to manage sensitive configuration values, often encrypted.
      https://symfony.com/doc/current/configuration/secrets.html

  -
    question: >
      What is the recommended way to handle application-level exceptions that should result in a specific HTTP response (e.g., a 403 Forbidden) in Symfony?
    answers:
      - { value: 'Throwing a specific HTTP exception (e.g., `AccessDeniedHttpException`, `NotFoundHttpException`).', correct: true }
      - { value: 'Using a `try-catch` block around the entire controller action.', correct: false }
      - { value: 'Returning a `Response` object with the appropriate status code directly.', correct: false }
      - { value: 'Configuring an event listener for `kernel.exception` that checks the exception type.', correct: true }
    help: |
      Throwing HTTP exceptions is the idiomatic Symfony way, allowing the ExceptionListener to handle the response. Custom listeners on `kernel.exception` provide more granular control.
      https://symfony.com/doc/current/controller/error_pages.html#handling-404-errors
      https://symfony.com/doc/current/event_dispatcher/before_after_filters.html#the-kernel-exception-event

  -
    question: >
      When debugging a Symfony application, if you see a blank page or a generic "Whoops! Something went wrong." error, what is the first step you should take?
    answers:
      - { value: 'Check the web server logs (e.g., Apache error log, Nginx error log).', correct: true }
      - { value: 'Clear the Symfony cache.', correct: false }
      - { value: 'Restart the PHP-FPM service.', correct: false }
      - { value: 'Reinstall all Composer dependencies.', correct: false }
    help: |
      Blank pages or generic errors often indicate a fatal PHP error or an unhandled exception before Symfony's error handler can kick in. The web server error logs are the first place to look.
      https://symfony.com/doc/current/setup/file_permissions.html#troubleshooting-permissions

  -
    question: >
      Which of the following cache types is primarily used by Symfony internally for compiled service containers and Twig templates in a production environment?
    answers:
      - { value: 'HTTP Cache (reverse proxy)', correct: false }
      - { value: 'Application Cache (e.g., APCu, Redis)', correct: true }
      - { value: 'Doctrine Cache', correct: false }
      - { value: 'Browser Cache', correct: false }
    help: |
      The application cache stores compiled PHP code, container definitions, and other internal Symfony artifacts for performance.
      https://symfony.com/doc/current/components/cache.html

  -
    question: >
      What is the recommended way to configure multiple mailer transports (e.g., one for transactional emails, one for marketing emails) in Symfony Mailer?
    answers:
      - { value: 'Define multiple mailer configurations under the `framework.mailer.mailers` key in `config/packages/mailer.yaml`.', correct: true }
      - { value: 'Create separate `MailerInterface` services for each transport.', correct: false }
      - { value: 'Use a single mailer and dynamically change the transport during runtime.', correct: false }
      - { value: 'It''s not possible to configure multiple mailers in Symfony.', correct: false }
    help: |
      Symfony Mailer allows defining multiple named mailers, each with its own transport configuration.
      https://symfony.com/doc/current/mailer.html#multiple-mailers

  -
    question: >
      When using the `Symfony\Component\Filesystem\Filesystem` component, what is the purpose of the `dumpFile()` method?
    answers:
      - { value: 'To read the content of a file into a string.', correct: false }
      - { value: 'To write content to a file, creating the file and its parent directories if they don''t exist.', correct: true }
      - { value: 'To create a temporary file.', correct: false }
      - { value: 'To copy the content of one file to another.', correct: false }
    help: |
      `dumpFile()` is a convenient method for writing content to a file, ensuring the directory structure exists.
      https://symfony.com/doc/current/components/filesystem.html#dumpfile

  -
    question: >
      What is the main difference between `Lock::acquire()` and `Lock::acquire(false)` (non-blocking acquire)?
    answers:
      - { value: '`Lock::acquire()` blocks execution until the lock is obtained or a timeout occurs, while `Lock::acquire(false)` attempts to acquire the lock immediately and returns `true` or `false` without blocking.', correct: true }
      - { value: '`Lock::acquire()` is for shared locks, `Lock::acquire(false)` is for exclusive locks.', correct: false }
      - { value: '`Lock::acquire(false)` is deprecated.', correct: false }
      - { value: 'There is no difference; the argument is ignored.', correct: false }
    help: |
      The non-blocking acquire is useful when you want to try to get a lock without waiting indefinitely.
      https://symfony.com/doc/current/components/lock.html#acquiring-a-lock

  -
    question: >
      Which of the following is a valid way to enable or disable the Web Debug Toolbar programmatically in a Symfony application?
    answers:
      - { value: 'By setting the `kernel.debug` parameter in the container.', correct: false }
      - { value: 'By modifying the `framework.profiler.enabled` configuration in `config/packages/dev/profiler.yaml`.', correct: true }
      - { value: 'By calling `$profiler->disable()` in a controller.', correct: false }
      - { value: 'It cannot be enabled or disabled programmatically.', correct: false }
    help: |
      The profiler's enablement is controlled by configuration, typically environment-specific.
      https://symfony.com/doc/current/profiler.html#enabling-the-profiler

  -
    question: >
      When configuring internationalization in Symfony, where would you typically store your translation files (e.g., `messages.en.yaml`, `messages.fr.yaml`)?
    answers:
      - { value: '`translations/` directory at the root of your project.', correct: true }
      - { value: '`config/translations/` directory.', correct: false }
      - { value: '`src/Translations/` directory.', correct: false }
      - { value: '`public/assets/translations/` directory.', correct: false }
    help: |
      The `translations/` directory is the default location for translation files in Symfony.
      https://symfony.com/doc/current/translation.html#translation-resource-locations

  -
    question: >
      What is the purpose of the `IntlDateFormatter` class (from PHP's Intl extension, often used with Symfony's Intl component)?
    answers:
      - { value: 'To format dates and times according to specific locales and patterns.', correct: true }
      - { value: 'To perform date calculations (e.g., add days, subtract months).', correct: false }
      - { value: 'To validate date strings.', correct: false }
      - { value: 'To convert dates between different timezones.', correct: false }
    help: |
      `IntlDateFormatter` provides powerful, locale-aware date and time formatting capabilities.
      https://www.php.net/manual/en/class.intldateformatter.php

  -
    question: >
      Which Symfony component is responsible for providing a consistent API for dealing with time, regardless of the underlying PHP version or environment?
    answers:
      - { value: '`Clock` component.', correct: true }
      - { value: '`DateTime` component.', correct: false }
      - { value: '`Time` component.', correct: false }
      - { value: '`Date` component.', correct: false }
    help: |
      The Clock component provides an abstraction layer over PHP's date/time functions, making time-dependent code more robust and testable.
      https://symfony.com/doc/current/components/clock.html

  -
    question: >
      What is the primary role of the `ExpressionLanguage` component in Symfony?
    answers:
      - { value: 'To parse and evaluate simple expressions (e.g., in configuration, security rules, or routing conditions).', correct: true }
      - { value: 'To define regular expressions for validation.', correct: false }
      - { value: 'To create complex mathematical formulas.', correct: false }
      - { value: 'To generate dynamic SQL queries.', correct: false }
    help: |
      The ExpressionLanguage component provides a powerful way to define and evaluate expressions, often used for flexible configuration.
      https://symfony.com/doc/current/components/expression_language.html

  -
    question: >
      Which of the following is a best practice for managing environment variables in production Symfony applications, especially when deploying to cloud platforms?
    answers:
      - { value: 'Relying solely on `.env` files committed to version control.', correct: false }
      - { value: 'Using the cloud provider''s native environment variable management features (e.g., Kubernetes secrets, AWS Systems Manager Parameter Store).', correct: true }
      - { value: 'Hardcoding them directly in `public/index.php`.', correct: false }
      - { value: 'Storing them in a publicly accessible JSON file.', correct: false }
    help: |
      Cloud platforms offer secure and robust ways to manage environment variables and secrets, which should be preferred over `.env` files in production.
      https://symfony.com/doc/current/configuration/secrets.html#cloud-environments

  -
    question: >
      When debugging a Symfony application, if you encounter a `ClassNotFoundException`, what is the most likely cause?
    answers:
      - { value: 'A missing `use` statement, an incorrect namespace, or the class file is not correctly loaded by the autoloader.', correct: true }
      - { value: 'A database connection error.', correct: false }
      - { value: 'An invalid route definition.', correct: false }
      - { value: 'A Twig template syntax error.', correct: false }
    help: |
      `ClassNotFoundException` indicates that PHP cannot locate the definition of a class, usually due to autoloading issues or typos.
      https://symfony.com/doc/current/components/debug.html

  -
    question: >
      What is the primary benefit of using `#[AsMessageHandler]` attribute for Messenger handlers?
    answers:
      - { value: 'It automatically registers the class as a message handler without requiring explicit service definition in `services.yaml`.', correct: true }
      - { value: 'It enables asynchronous processing for the handler.', correct: false }
      - { value: 'It provides built-in error handling for the handler.', correct: false }
      - { value: 'It allows the handler to be used as a controller.', correct: false }
    help: |
      The `#[AsMessageHandler]` attribute simplifies handler registration, leveraging autoconfiguration.
      https://symfony.com/doc/current/messenger.html#creating-a-message-and-handler

  -
    question: >
      Which of the following describes the purpose of the `MessageBusInterface` in Symfony Messenger?
    answers:
      - { value: 'To define the structure of a message.', correct: false }
      - { value: 'To dispatch messages to be handled by one or more message handlers.', correct: true }
      - { value: 'To configure the message transports.', correct: false }
      - { value: 'To log messages to a file.', correct: false }
    help: |
      The `MessageBusInterface` is the central component for sending messages through the Messenger system.
      https://symfony.com/doc/current/messenger.html#dispatching-messages

  -
    question: >
      When internationalizing a Symfony application, what is the purpose of the `locale` parameter in a route definition?
    answers:
      - { value: 'To specify the default language for the entire application.', correct: false }
      - { value: 'To allow the URL to contain the locale (e.g., `/en/about`, `/fr/about`), making the locale part of the routing.', correct: true }
      - { value: 'To define a fallback locale if the requested one is not available.', correct: false }
      - { value: 'To automatically translate the route path.', correct: false }
    help: |
      The `_locale` route parameter (or `locale` if configured) allows embedding the locale directly in the URL, which is a common strategy for internationalization.
      https://symfony.com/doc/current/routing/localized_routes.html

  -
    question: >
      What is the primary role of the `Symfony\Component\Mime\Address` class?
    answers:
      - { value: 'To represent an email address with an optional name, used in Mailer and Mime components.', correct: true }
      - { value: 'To define a physical address for shipping.', correct: false }
      - { value: 'To store IP addresses.', correct: false }
      - { value: 'To validate email address formats.', correct: false }
    help: |
      The `Address` class provides a structured way to handle email addresses, including the recipient's name.
      https://symfony.com/doc/current/components/mime.html#creating-an-email

  -
    question: >
      Which of the following is a valid way to get a `Filesystem` service instance in a Symfony controller or service?
    answers:
      - { value: 'Inject `Filesystem` via constructor or method argument type-hinting.', correct: true }
      - { value: 'Instantiate it directly with `new Filesystem()`.', correct: false }
      - { value: 'Call `$this->get(''filesystem'')` in a controller.', correct: false }
      - { value: 'It''s a static class and doesn''t require instantiation.', correct: false }
    help: |
      The `Filesystem` component is registered as a service and can be autowired.
      https://symfony.com/doc/current/components/filesystem.html#usage

  -
    question: >
      What is the purpose of the `#[Cache('expires=tomorrow')]` attribute on a controller method?
    answers:
      - { value: 'It sets the HTTP `Expires` header to tomorrow''s date, instructing clients and proxies to cache the response until then.', correct: true }
      - { value: 'It stores the method''s return value in Symfony''s internal cache for one day.', correct: false }
      - { value: 'It invalidates the cache for this route every day.', correct: false }
      - { value: 'It marks the method as deprecated and to be removed tomorrow.', correct: false }
    help: |
      The `#[Cache]` attribute allows you to control HTTP caching directly from your controllers.
      https://symfony.com/doc/current/http_cache.html#http-cache-in-controllers

  -
    question: >
      When debugging a Symfony application, what is the primary benefit of using `var/log/dev.log`?
    answers:
      - { value: 'It contains all database queries executed during a request.', correct: false }
      - { value: 'It provides a detailed log of application events, errors, and debugging information specific to the development environment.', correct: true }
      - { value: 'It stores user session data.', correct: false }
      - { value: 'It is a temporary file that is cleared after each request.', correct: false }
    help: |
      The `dev.log` file is configured to capture extensive logging information during development, which is invaluable for debugging.
      https://symfony.com/doc/current/logging.html#logging-to-files

  -
    question: >
      What is the main difference between `Filesystem::exists()` and `Finder::hasResults()`?
    answers:
      - { value: '`Filesystem::exists()` checks if a single file or directory exists, while `Finder::hasResults()` checks if the Finder object found any files or directories matching its criteria.', correct: true }
      - { value: '`Filesystem::exists()` is for local files, `Finder::hasResults()` is for remote files.', correct: false }
      - { value: 'They are synonyms and can be used interchangeably.', correct: false }
      - { value: '`Filesystem::exists()` checks for files only, `Finder::hasResults()` checks for directories only.', correct: false }
    help: |
      `Filesystem` operates on individual paths, while `Finder` is designed for searching collections of files/directories.
      https://symfony.com/doc/current/components/filesystem.html#exists
      https://symfony.com/doc/current/components/finder.html#iterating-on-results

  -
    question: >
      Which of the following is a best practice for managing configuration differences between development and production environments in Symfony?
    answers:
      - { value: 'Using environment-specific configuration files (e.g., `config/packages/dev/*.yaml`, `config/packages/prod/*.yaml`).', correct: true }
      - { value: 'Manually changing configuration values before each deployment.', correct: false }
      - { value: 'Storing all configuration in a single file and commenting out production-specific settings in development.', correct: false }
      - { value: 'Using separate Git branches for each environment''s configuration.', correct: false }
    help: |
      Symfony's environment-based configuration loading is designed to handle differences between environments cleanly.
      https://symfony.com/doc/current/configuration/environments.html

  -
    question: >
      What is the primary role of the `symfony/runtime` component?
    answers:
      - { value: 'To provide a low-level abstraction for bootstrapping PHP applications in different SAPI environments.', correct: true }
      - { value: 'To manage application dependencies at runtime.', correct: false }
      - { value: 'To execute long-running background processes.', correct: false }
      - { value: 'To handle real-time communication with web sockets.', correct: false }
    help: |
      The Runtime component aims to make PHP applications more portable across various execution environments.
      https://symfony.com/doc/current/components/runtime.html

  -
    question: >
      When using the Symfony Mailer component, what is the purpose of the `Envelope` class?
    answers:
      - { value: 'To define the email''s subject and body.', correct: false }
      - { value: 'To specify the sender and recipient addresses that are actually used for the SMTP transaction, which might differ from the `From` and `To` headers visible to the user.', correct: true }
      - { value: 'To attach files to the email.', correct: false }
      - { value: 'To encrypt the email content.', correct: false }
    help: |
      The `Envelope` allows separating the visible email addresses from the actual addresses used for delivery, which is useful for bounce management or mailing lists.
      https://symfony.com/doc/current/mailer.html#the-envelope

  -
    question: >
      Which of the following is a common use case for the `Symfony\Component\Process\Process` component in a Symfony application?
    answers:
      - { value: 'Running a `composer install` command during deployment.', correct: true }
      - { value: 'Executing a `git pull` command to update the application code.', correct: true }
      - { value: 'Generating a PDF report using an external command-line tool (e.g., wkhtmltopdf).', correct: true }
      - { value: 'Sending an HTTP request to an external API.', correct: false }
    help: |
      The Process component is ideal for interacting with external shell commands and programs.
      https://symfony.com/doc/current/components/process.html#running-processes

  -
    question: >
      What is the primary purpose of the `#[Ignore]` attribute in the Symfony Serializer component?
    answers:
      - { value: 'To mark a property or method to be ignored during serialization and deserialization.', correct: true }
      - { value: 'To prevent a class from being autowired as a service.', correct: false }
      - { value: 'To exclude a file from Composer''s autoloader.', correct: false }
      - { value: 'To disable logging for a specific method.', correct: false }
    help: |
      The `#[Ignore]` attribute provides a simple way to exclude properties or methods from the serialization/deserialization process.
      https://symfony.com/doc/current/components/serializer.html#ignoring-properties

  -
    question: >
      Which of the following is a key feature of the Symfony Messenger component regarding message handling?
    answers:
      - { value: 'It enforces synchronous processing of all messages.', correct: false }
      - { value: 'It allows for retries and error handling of failed messages.', correct: true }
      - { value: 'It automatically scales worker processes based on message volume.', correct: false }
      - { value: 'It provides a built-in UI for managing message queues.', correct: false }
    help: |
      The retry mechanism and failure transports are crucial for building resilient message-driven applications.
      https://symfony.com/doc/current/messenger.html#retrying-failed-messages

  -
    question: >
      When using the Symfony Filesystem component, what is the difference between `copy()` and `mirror()`?
    answers:
      - { value: '`copy()` copies a single file, while `mirror()` copies an entire directory recursively, ensuring the destination mirrors the source.', correct: true }
      - { value: '`copy()` is for local files, `mirror()` is for remote files.', correct: false }
      - { value: '`copy()` moves the file, `mirror()` duplicates it.', correct: false }
      - { value: 'They are identical in functionality.', correct: false }
    help: |
      `mirror()` is useful for synchronizing directories, ensuring the target directory exactly matches the source.
      https://symfony.com/doc/current/components/filesystem.html#mirror

  -
    question: >
      What is the primary benefit of using `ClockInterface` instead of `new \DateTimeImmutable()` directly in your services?
    answers:
      - { value: 'It makes your code more performant by reducing object creation overhead.', correct: false }
      - { value: 'It allows you to easily control and manipulate time during testing, making time-dependent logic deterministic.', correct: true }
      - { value: 'It automatically handles timezone conversions.', correct: false }
      - { value: 'It provides a more secure way to get the current time.', correct: false }
    help: |
      Injecting `ClockInterface` is a best practice for testability, as it allows you to substitute the real clock with a test clock.
      https://symfony.com/doc/current/components/clock.html#testing

  -
    question: >
      Which of the following is a common deployment best practice for Symfony applications to ensure minimal downtime during updates?
    answers:
      - { value: 'Performing updates directly on the production server without any staging.', correct: false }
      - { value: 'Using blue/green deployments or rolling updates with a load balancer.', correct: true }
      - { value: 'Taking the application offline for several hours during updates.', correct: false }
      - { value: 'Manually copying files via FTP.', correct: false }
    help: |
      Modern deployment strategies like blue/green or rolling updates minimize downtime and risk.
      https://symfony.com/doc/current/deployment.html#zero-downtime-deployment

  -
    question: >
      What is the main advantage of using the `#[Cache('public', 'max-age=3600')]` attribute on a controller method?
    answers:
      - { value: 'It instructs the browser to cache the response for 3600 seconds, and allows shared caches (proxies) to cache it.', correct: true }
      - { value: 'It caches the method''s return value in the database for one hour.', correct: false }
      - { value: 'It makes the method accessible only to public users for 3600 seconds.', correct: false }
      - { value: 'It clears the cache every 3600 seconds.', correct: false }
    help: |
      The `public` directive allows shared caches, and `max-age` sets the cache lifetime.
      https://symfony.com/doc/current/http_cache.html#http-cache-in-controllers

  -
    question: >
      When dealing with multiple languages in a Symfony application, what is the purpose of the `Intl` component?
    answers:
      - { value: 'To provide locale-aware formatting for numbers, dates, currencies, and other data types.', correct: true }
      - { value: 'To manage the translation of strings.', correct: false }
      - { value: 'To detect the user''s preferred language from their browser settings.', correct: false }
      - { value: 'To handle character encoding conversions.', correct: false }
    help: |
      The `Intl` component focuses on formatting and parsing locale-specific data, complementing the Translation component.
      https://symfony.com/doc/current/components/intl.html

  -
    question: >
      Which of the following is a valid way to create a `Process` object to run a command in Symfony?
    answers:
      - { value: '`new Process([''php'', ''bin/console'', ''app:my-command''])`', correct: true }
      - { value: '`Process::runCommand(''php bin/console app:my-command'')`', correct: false }
      - { value: '`$this->get(''process_factory'')->create(''php bin/console app:my-command'')`', correct: false }
      - { value: '`Process::create([''php'', ''bin/console'', ''app:my-command''])`', correct: false }
    help: |
      The `Process` class constructor takes an array of command parts or a single command string.
      https://symfony.com/doc/current/components/process.html#usage

  -
    question: >
      What is the primary purpose of the `#[Groups]` attribute in the Symfony Serializer component?
    answers:
      - { value: 'To define which properties of an object should be included or excluded during serialization/deserialization based on a context.', correct: true }
      - { value: 'To group related services in the dependency injection container.', correct: false }
      - { value: 'To define security roles for accessing specific data.', correct: false }
      - { value: 'To organize translation messages into domains.', correct: false }
    help: |
      Serialization groups are fundamental for controlling data exposure in APIs or other serialization contexts.
      https://symfony.com/doc/current/components/serializer.html#using-serialization-groups

  -
    question: >
      Which of the following is a key advantage of using the Symfony Messenger component for sending emails?
    answers:
      - { value: 'It allows sending emails synchronously, ensuring immediate delivery.', correct: false }
      - { value: 'It enables asynchronous email sending, preventing slow email operations from blocking the user''s request.', correct: true }
      - { value: 'It provides a built-in email template engine.', correct: false }
      - { value: 'It automatically handles email bounces and spam reports.', correct: false }
    help: |
      By dispatching email messages to Messenger, the actual sending can be offloaded to a background worker, improving responsiveness.
      https://symfony.com/doc/current/mailer.html#sending-emails-asynchronously

  -
    question: >
      What is the purpose of the `Symfony\Component\Finder\SplFileInfo` object returned by the Finder component when iterating over results?
    answers:
      - { value: 'It''s a standard PHP object that provides methods to access file properties like name, path, size, and modification time.', correct: true }
      - { value: 'It''s a Symfony-specific object that only contains the file path.', correct: false }
      - { value: 'It''s a database record representing the file.', correct: false }
      - { value: 'It''s a temporary object that must be converted to a string before use.', correct: false }
    help: |
      The Finder component leverages PHP's `SplFileInfo` for rich file information.
      https://symfony.com/doc/current/components/finder.html#iterating-on-results

  -
    question: >
      When using the Symfony Lock component, what happens if `Lock::acquire()` is called and the lock is already held by another process?
    answers:
      - { value: 'The call will block (wait) until the lock is released or a timeout occurs.', correct: true }
      - { value: 'It will immediately throw a `LockAcquireException`.', correct: false }
      - { value: 'It will silently fail and return `false`.', correct: false }
      - { value: 'It will attempt to steal the lock from the other process.', correct: false }
    help: |
      The default behavior of `acquire()` is blocking, ensuring exclusive access.
      https://symfony.com/doc/current/components/lock.html#acquiring-a-lock

  -
    question: >
      Which of the following is a primary benefit of the Symfony Web Debug Toolbar?
    answers:
      - { value: 'It provides a quick overview of key request information (e.g., status code, memory usage, execution time) directly in the browser.', correct: true }
      - { value: 'It allows real-time editing of Twig templates.', correct: false }
      - { value: 'It serves as a full-featured IDE within the browser.', correct: false }
      - { value: 'It automatically fixes common coding errors.', correct: false }
    help: |
      The Web Debug Toolbar offers immediate feedback on request details without navigating to the full profiler.
      https://symfony.com/doc/current/profiler.html#the-web-debug-toolbar

  -
    question: >
      What is the purpose of the `trans_default_domain` configuration in Symfony?
    answers:
      - { value: 'To set the default locale for all translations.', correct: false }
      - { value: 'To define the default translation domain to be used when no explicit domain is specified for a message.', correct: true }
      - { value: 'To enable or disable translation for a specific domain.', correct: false }
      - { value: 'To specify the default translation file format.', correct: false }
    help: |
      `trans_default_domain` simplifies translation by avoiding the need to specify the domain for common messages.
      https://symfony.com/doc/current/translation.html#translation-domains

  -
    question: >
      What is the main reason for using the `ClockInterface` in a Symfony application, especially for new code?
    answers:
      - { value: 'To ensure all date and time operations are performed in UTC.', correct: false }
      - { value: 'To decouple your code from the system clock, making it more testable and predictable.', correct: true }
      - { value: 'To automatically handle daylight saving time adjustments.', correct: false }
      - { value: 'To provide a faster way to get the current timestamp.', correct: false }
    help: |
      The `ClockInterface` promotes dependency inversion, allowing for easy substitution of the clock implementation.
      https://symfony.com/doc/current/components/clock.html#usage

  -
    question: >
      Which of the following is a best practice for handling errors in console commands in Symfony?
    answers:
      - { value: 'Catching specific exceptions and returning a non-zero exit code to indicate failure.', correct: true }
      - { value: 'Using `die()` or `exit()` to terminate the command on error.', correct: false }
      - { value: 'Logging all errors to `var/log/prod.log` and always returning `0`.', correct: false }
      - { value: 'Relying solely on PHP''s default error handling.', correct: false }
    help: |
      Returning a non-zero exit code is standard practice for console commands to signal success or failure to the shell or automation scripts.
      https://symfony.com/doc/current/console.html#handling-errors

  -
    question: >
      What is the purpose of the `symfony/dotenv` component?
    answers:
      - { value: 'To manage environment variables from `.env` files.', correct: true }
      - { value: 'To encrypt sensitive data in `.env` files.', correct: false }
      - { value: 'To parse `.env` files for configuration, making environment variables available to the application.', correct: true }
      - { value: 'To validate the format of `.env` files.', correct: false }
    help: |
      The DotEnv component loads environment variables, making application configuration flexible.
      https://symfony.com/doc/current/components/dotenv.html

  -
    question: >
      When deploying a Symfony application, why is it crucial to run `composer install --no-dev`?
    answers:
      - { value: 'To ensure that only production dependencies are installed, reducing the application''s footprint and potential security risks.', correct: true }
      - { value: 'To prevent any Composer packages from being installed.', correct: false }
      - { value: 'To force Composer to update all packages to their latest versions.', correct: false }
      - { value: 'To remove all cached Composer files.', correct: false }
    help: |
      Excluding development dependencies is a standard practice for production deployments.
      https://symfony.com/doc/current/deployment.html#install-your-dependencies