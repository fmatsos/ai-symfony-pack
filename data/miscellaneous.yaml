category: Miscellaneous

questions:
  -
    question: >
      Which console command displays all configuration parameters available in a Symfony application?
    answers:
      - { value: "php bin/console debug:container --parameters", correct: true }
      - { value: "php bin/console config:dump-parameters", correct: false }
      - { value: "php bin/console debug:config --all", correct: false }
      - { value: "php bin/console container:parameters", correct: false }
    help: |
      The `debug:container --parameters` command lists all defined parameters in the service container.
      https://symfony.com/doc/current/configuration.html#listing-all-configuration-parameters

  -
    question: |
      Given the following `AcmeSocialBundle` configuration, which method is responsible for defining the configuration schema?

      ```php
      // src/AcmeSocialBundle.php
      namespace Acme\SocialBundle;

      use Symfony\Component\Config\Definition\Configurator\DefinitionConfigurator;
      use Symfony\Component\DependencyInjection\ContainerBuilder;
      use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;
      use Symfony\Component\HttpKernel\Bundle\AbstractBundle;

      class AcmeSocialBundle extends AbstractBundle
      {
          public function configure(DefinitionConfigurator $definition): void
          {
              $definition->rootNode()
                  ->children()
                      ->arrayNode('twitter')
                          ->children()
                              ->integerNode('client_id')->end()
                              ->scalarNode('client_secret')->end()
                          ->end() // twitter
                      ->end()
                  ->end()
              ;
          }

          public function loadExtension(array $config, ContainerConfigurator $container, ContainerBuilder $builder): void
          {
              // ...
          }
      }
      ```
    answers:
      - { value: "`configure(DefinitionConfigurator $definition)`", correct: true }
      - { value: "`loadExtension(array $config, ContainerConfigurator $container, ContainerBuilder $builder)`", correct: false }
      - { value: "`build(ContainerBuilder $builder)`", correct: false }
      - { value: "`getContainerExtension()`", correct: false }
    help: |
      In `AbstractBundle`, the `configure()` method is used to define the configuration tree for the bundle.
      https://symfony.com/doc/current/bundles/configuration.html#define-and-load-custom-bundle-configuration

  -
    question: >
      Which of the following `ArrayNodeDefinition` methods ensures that an array node must contain at least one element?
    answers:
      - { value: "`requiresAtLeastOneElement()`", correct: true }
      - { value: "`atLeastOneElement()`", correct: false }
      - { value: "`minElements(1)`", correct: false }
      - { value: "`notEmpty()`", correct: false }
    help: |
      The `requiresAtLeastOneElement()` method, when used with `isRequired()`, enforces that an array node must have at least one element.
      https://symfony.com/doc/current/components/config/definition.html#arraynode-configuration-options-reference

  -
    question: >
      How can you prevent Symfony's configuration component from normalizing keys with dashes to underscores for a specific array node?
    answers:
      - { value: "Call `normalizeKeys(false)` on the `ArrayNodeDefinition`.", correct: true }
      - { value: "Set `key_normalization: false` in the YAML configuration.", correct: false }
      - { value: "Use `disableKeyNormalization()` on the `ArrayNodeDefinition`.", correct: false }
      - { value: "Define the node as a `variableNode`.", correct: false }
    help: |
      The `normalizeKeys(false)` method on an `ArrayNodeDefinition` prevents the default normalization of keys (dashes to underscores).
      https://symfony.com/doc/current/components/config/definition.html#arraynode-configuration-options-reference

  -
    question: >
      Which of the following is the recommended prefix for custom application parameters in `config/services.yaml` to differentiate them from Symfony's internal parameters?
    answers:
      - { value: "`app.`", correct: true }
      - { value: "`my_app.`", correct: false }
      - { value: "`custom.`", correct: false }
      - { value: "No specific prefix is recommended.", correct: false }
    help: |
      The `app.` prefix is recommended for custom parameters to clearly distinguish them from Symfony's built-in parameters.
      https://symfony.com/doc/current/configuration.html#defining-configuration-parameters

  -
    question: >
      How can you define a PHP constant as a parameter value in `config/services.yaml`?
    answers:
      - { value: "Using the `!php/const` tag.", correct: true }
      - { value: "Using the `constant()` function.", correct: false }
      - { value: "Using the `::` operator directly.", correct: false }
      - { value: "This is not possible in YAML.", correct: false }
    help: |
      The `!php/const` tag allows you to use PHP constants, including class constants, as parameter values in YAML configuration.
      https://symfony.com/doc/current/configuration.html#defining-configuration-parameters

  -
    question: >
      What is the purpose of the `info()` method when defining a configuration node in Symfony?
    answers:
      - { value: "To add descriptive information that appears as a comment when dumping the configuration reference.", correct: true }
      - { value: "To provide a default value for the configuration option.", correct: false }
      - { value: "To define the data type of the configuration option.", correct: false }
      - { value: "To mark the configuration option as required.", correct: false }
    help: |
      The `info()` method adds a description to a configuration option, which is then displayed as a comment when using `config:dump-reference`.
      https://symfony.com/doc/current/components/config/definition.html#adding-inline-documentation-to-configuration-options

  -
    question: >
      Which of the following commands would you use to display the *actual* configuration values used by your Symfony application for the `framework` bundle?
    answers:
      - { value: "php bin/console debug:config framework", correct: true }
      - { value: "php bin/console config:dump-reference framework", correct: false }
      - { value: "php bin/console config:show framework", correct: false }
      - { value: "php bin/console framework:config", correct: false }
    help: |
      The `debug:config` command shows the merged and processed configuration values currently active in your application.
      https://symfony.com/doc/current/reference/configuration/framework.html#displaying-the-frameworkbundle-configuration

  -
    question: >
      In a Symfony bundle, what is the primary benefit of extending `ConfigurableExtension` instead of `Extension` for configuration processing?
    answers:
      - { value: "It automatically handles the merging and processing of configuration, simplifying the `loadInternal` method.", correct: true }
      - { value: "It provides direct access to the service container without needing `ContainerBuilder`.", correct: false }
      - { value: "It allows defining configuration directly in PHP attributes.", correct: false }
      - { value: "It enables hot-reloading of configuration changes without clearing the cache.", correct: false }
    help: |
      `ConfigurableExtension` simplifies configuration processing by handling the boilerplate of merging and validating configurations, allowing you to focus on the `loadInternal` method.
      https://symfony.com/doc/current/bundles/configuration.html#simplifying-configuration-processing-with-configurableextension

  -
    question: >
      When accessing a configuration parameter within a Symfony controller that extends `AbstractController`, which helper method should be used?
    answers:
      - { value: "`$this->getParameter('parameter_name')`", correct: true }
      - { value: "`$this->container->get('parameter_name')`", correct: false }
      - { value: "`$this->get('parameter_name')`", correct: false }
      - { value: "`$this->config['parameter_name']`", correct: false }
    help: |
      The `getParameter()` method is a convenient helper in `AbstractController` to retrieve service container parameters.
      https://symfony.com/doc/current/configuration.html#accessing-configuration-parameters-in-a-controller

  -
    question: >
      What is the default directory structure for Symfony's configuration files within the `config/` folder?
    answers:
      - { value: "config/, config/packages/, bundles.php, routes.yaml, services.yaml", correct: true }
      - { value: "config/, config/bundles/, routes.yaml, services.yaml", correct: false }
      - { value: "config/, packages/, bundles.php, routes.yaml, services.yaml", correct: false }
      - { value: "config/, src/Config/, bundles.php, routes.yaml, services.yaml", correct: false }
    help: |
      The standard Symfony configuration directory includes `packages/` for environment-specific configs, and core files like `bundles.php`, `routes.yaml`, and `services.yaml` directly under `config/`.
      https://symfony.com/doc/current/configuration.html#default-directory-structure

  -
    question: >
      When defining exception handling in Symfony, why is the order of configuration important, particularly for `RuntimeException` and `Exception`?
    answers:
      - { value: "More general exceptions (like `Exception`) configured before specific ones (like `RuntimeException`) will override them due to inheritance.", correct: true }
      - { value: "Specific exceptions must always be defined before general ones to be effective.", correct: false }
      - { value: "The order only affects logging, not the status code.", correct: false }
      - { value: "Symfony automatically reorders exception configurations based on their inheritance hierarchy.", correct: false }
    help: |
      Symfony processes exception configurations in the order they are defined. If a more general exception is configured first, it will catch its child exceptions before the specific configuration can be applied.
      https://symfony.com/doc/current/reference/configuration/framework.html#understanding-the-configuration-order

  -
    question: >
      Which of the following is the correct way to configure the application secret in `config/framework.yaml`?
    answers:
      - { value: "secret: S0ME_SECRET", correct: true }
      - { value: "app_secret: S0ME_SECRET", correct: false }
      - { value: "kernel.secret: S0ME_SECRET", correct: false }
      - { value: "security.secret: S0ME_SECRET", correct: false }
    help: |
      The `secret` key directly under `framework:` is used to configure the application secret.
      https://symfony.com/doc/current/configuration/micro_kernel_trait.html#framework-configuration

  -
    question: >
      What is the purpose of the `when@prod` block in a Symfony YAML configuration file?
    answers:
      - { value: "To apply specific configuration settings only when the `APP_ENV` environment variable is set to `prod`.", correct: true }
      - { value: "To define configurations that are loaded only in production environments, regardless of `APP_ENV`.", correct: false }
      - { value: "To specify configuration parameters that are available only during asset compilation for production.", correct: false }
      - { value: "To mark a configuration section as deprecated for production use.", correct: false }
    help: |
      The `when@env` syntax allows defining configuration that is only applied when the `APP_ENV` matches the specified environment.
      https://symfony.com/doc/current/quick_tour/the_architecture.html#environment-specific-configuration

  -
    question: >
      When configuring a Symfony service with a configurator, what happens if the `method` option is omitted, as shown below?

      ```yaml
      # config/services.yaml
      services:
          App\Mail\NewsletterManager:
              configurator: '@App\Mail\EmailConfigurator'
      ```
    answers:
      - { value: "The `__invoke()` method of the `EmailConfigurator` service will be called.", correct: true }
      - { value: "Symfony will look for a method named `configure` by default.", correct: false }
      - { value: "An error will be thrown because the method is missing.", correct: false }
      - { value: "The configurator will be ignored.", correct: false }
    help: |
      If the `method` option is omitted for a service configurator, Symfony assumes the configurator service is invokable and calls its `__invoke()` method.
      https://symfony.com/doc/current/service_container/configurators.html#defining-an-invokable-configurator

  -
    question: >
      Which environment variable is typically used in a `.env` file to define the DSN for Symfony Mailer?
    answers:
      - { value: "`MAILER_DSN`", correct: true }
      - { value: "`SYMFONY_MAILER_DSN`", correct: false }
      - { value: "`APP_MAILER_DSN`", correct: false }
      - { value: "`EMAIL_DSN`", correct: false }
    help: |
      The `MAILER_DSN` environment variable is the standard way to configure the Mailer DSN.
      https://symfony.com/doc/current/mailer.html#configuring-the-mailer-dsn

  -
    question: >
      What is the purpose of the `local_dotenv_file` option in the `framework.secrets` configuration?
    answers:
      - { value: "It specifies the path to a local `.env` file that must contain the vault decryption key.", correct: true }
      - { value: "It defines a local file for storing application logs.", correct: false }
      - { value: "It sets the default location for temporary files during development.", correct: false }
      - { value: "It indicates a file containing environment variables specific to a local testing setup.", correct: false }
    help: |
      The `local_dotenv_file` option points to the `.env` file that contains the decryption key for Symfony secrets.
      https://symfony.com/doc/current/reference/configuration/framework.html#local-dotenv-file

  -
    question: >
      How can you override an existing system environment variable with a value from a `.env` file using the `Dotenv` component in PHP?
    answers:
      - { value: "Call `loadEnv()` with `overrideExistingVars: true`.", correct: true }
      - { value: "Call `bootEnv()` with `overrideExistingVars: true`.", correct: true }
      - { value: "The `.env` file always overrides system variables by default.", correct: false }
      - { value: "Use `Dotenv::override()` method.", correct: false }
    help: |
      Both `loadEnv()` and `bootEnv()` methods of the `Dotenv` component accept an `overrideExistingVars` parameter to control whether existing environment variables are overridden.
      https://symfony.com/doc/current/configuration.html#overriding-existing-environment-variables

  -
    question: >
      Which Composer configuration option allows you to specify a custom path for the `.env` file?
    answers:
      - { value: "`extra.runtime.dotenv_path`", correct: true }
      - { value: "`config.dotenv_path`", correct: false }
      - { value: "`autoload.dotenv_path`", correct: false }
      - { value: "`scripts.dotenv_path`", correct: false }
    help: |
      The `dotenv_path` option within the `extra.runtime` section of `composer.json` allows setting a custom path for the `.env` file.
      https://symfony.com/doc/current/configuration.html#configuring-a-custom-dotenv-path

  -
    question: >
      What is the purpose of the `dotenv:dump` console command?
    answers:
      - { value: "To parse all `.env` files and dump their final values to `.env.local.php` for production optimization.", correct: true }
      - { value: "To display the current environment variables loaded by the application.", correct: false }
      - { value: "To generate a new `.env` file with default values.", correct: false }
      - { value: "To clear the environment variable cache.", correct: false }
    help: |
      The `dotenv:dump` command is used to pre-process and dump environment variables into a PHP file (`.env.local.php`) for faster loading in production, especially when Composer is not available.
      https://symfony.com/doc/current/configuration.html#dumping-environment-variables-for-production

  -
    question: >
      How can you embed shell commands within `.env` variable definitions in Symfony?
    answers:
      - { value: "By enclosing the command in `$()`.", correct: true }
      - { value: "By enclosing the command in `{{ }}`.", correct: false }
      - { value: "By using the `exec()` function.", correct: false }
      - { value: "Shell commands cannot be embedded directly in `.env` files.", correct: false }
    help: |
      The `$()` syntax allows embedding shell commands, whose output will be used as the variable's value. This feature might not be supported on Windows.
      https://symfony.com/doc/current/configuration.html#embedding-commands-in-env-values

  -
    question: >
      Which environment variable processor should you use to convert a string environment variable like "true" or "false" into a boolean value in Symfony configuration?
    answers:
      - { value: "`env(bool:VAR_NAME)`", correct: true }
      - { value: "`env(boolean:VAR_NAME)`", correct: false }
      - { value: "`env(as_bool:VAR_NAME)`", correct: false }
      - { value: "`env(convert_bool:VAR_NAME)`", correct: false }
    help: |
      The `bool:` processor casts the environment variable's string value to a boolean.
      https://symfony.com/doc/current/configuration/env_var_processors.html#casting-to-boolean

  -
    question: >
      You have an environment variable `APP_DEBUG` and you want to set a parameter `safe_for_production` to its inverted boolean value. Which environment variable processor would you use?
    answers:
      - { value: "`env(not:APP_DEBUG)`", correct: true }
      - { value: "`env(invert:APP_DEBUG)`", correct: false }
      - { value: "`env(negate:APP_DEBUG)`", correct: false }
      - { value: "`env(!:APP_DEBUG)`", correct: false }
    help: |
      The `not:` processor inverts the boolean value of an environment variable.
      https://symfony.com/doc/current/configuration/env_var_processors.html#inverting-boolean-values

  -
    question: >
      Which environment variable processor is used to parse a comma-separated string from an environment variable into an array?
    answers:
      - { value: "`env(csv:VAR_NAME)`", correct: true }
      - { value: "`env(array:VAR_NAME)`", correct: false }
      - { value: "`env(split:VAR_NAME)`", correct: false }
      - { value: "`env(list:VAR_NAME)`", correct: false }
    help: |
      The `csv:` processor decodes a comma-separated string into a PHP array.
      https://symfony.com/doc/current/configuration/env_var_processors.html#decoding-csv-encoded-environment-variables

  -
    question: >
      How can you access a specific key from a JSON-encoded environment variable using an environment variable processor?
    answers:
      - { value: "`%env(key:KEY_NAME:json:VAR_NAME)%`", correct: true }
      - { value: "`%env(json_key:KEY_NAME:VAR_NAME)%`", correct: false }
      - { value: "`%env(get:KEY_NAME:from_json:VAR_NAME)%`", correct: false }
      - { value: "`%env(VAR_NAME.KEY_NAME)%`", correct: false }
    help: |
      The `key:` processor allows extracting a specific key from a structured environment variable, often combined with `json:` or `file:`.
      https://symfony.com/doc/current/configuration/env_var_processors.html#extracting-a-key-from-an-environment-variable

  -
    question: >
      Which environment variable processor is used to cast an environment variable's string value into a PHP `BackedEnum` instance?
    answers:
      - { value: "`env(enum:FQCN:VAR_NAME)`", correct: true }
      - { value: "`env(cast_enum:FQCN:VAR_NAME)`", correct: false }
      - { value: "`env(to_enum:FQCN:VAR_NAME)`", correct: false }
      - { value: "`env(enum_value:FQCN:VAR_NAME)`", correct: false }
    help: |
      The `enum:` processor automatically converts an environment variable's string value into a corresponding enum instance, given its FQCN.
      https://symfony.com/doc/current/configuration/env_var_processors.html#casting-to-an-enum

  -
    question: >
      What is the purpose of the `env(urlencode:VAR_NAME)` processor introduced in Symfony 7.1?
    answers:
      - { value: "To URL-encode the content of an environment variable, useful for DSNs with special characters.", correct: true }
      - { value: "To decode a URL-encoded environment variable.", correct: false }
      - { value: "To extract URL components from an environment variable.", correct: false }
      - { value: "To validate if an environment variable contains a valid URL.", correct: false }
    help: |
      The `urlencode:` processor ensures that environment variable values are properly URL-encoded, which is crucial for DSNs that might contain characters incompatible with standard URL syntax.
      https://symfony.com/doc/current/configuration/env_var_processors.html#url-encoding-an-environment-variable

  -
    question: >
      Which of the following is a valid way to define a default value for an environment variable if it's not set, using shell-like syntax in a `.env` file?
    answers:
      - { value: "`VAR_NAME=${DEFAULT_VALUE:-fallback}`", correct: true }
      - { value: "`VAR_NAME=default:fallback`", correct: false }
      - { value: "`VAR_NAME ?? 'fallback'`", correct: false }
      - { value: "`VAR_NAME || 'fallback'`", correct: false }
    help: |
      The `${VAR_NAME:-default_value}` syntax provides a fallback value if `VAR_NAME` is unset or empty.
      https://symfony.com/doc/current/configuration.html#defining-default-values-for-environment-variables

  -
    question: >
      What happens if you set an environment variable to an empty value (e.g., `APP_ENV=`) in a `.env.prod` file when a custom environment variable loader is configured?
    answers:
      - { value: "It will trigger the custom environment variable loader to provide the value.", correct: true }
      - { value: "The variable will be unset, and no value will be used.", correct: false }
      - { value: "Symfony will throw an error indicating an empty environment variable.", correct: false }
      - { value: "It will revert to the value defined in `.env` or system environment.", correct: false }
    help: |
      Setting an environment variable to an empty value in a specific environment's `.env` file (e.g., `.env.prod`) can be used to signal that a custom loader should provide the value, rather than falling back to other `.env` files.
      https://symfony.com/doc/current/configuration.html#configuring-your-env-for-custom-loaders

  -
    question: >
      Which console command can you use to inspect how Symfony processes and resolves environment variables, including listing scanned `.env` files and their priorities?
    answers:
      - { value: "php bin/console debug:dotenv", correct: true }
      - { value: "php bin/console dotenv:info", correct: false }
      - { value: "php bin/console env:debug", correct: false }
      - { value: "php bin/console config:env", correct: false }
    help: |
      The `debug:dotenv` command provides a comprehensive overview of the Dotenv component's behavior, including file scanning order and final variable values.
      https://symfony.com/doc/current/configuration.html#debugging-dotenv-variables-and-files

  -
    question: >
      Which of the following is a valid way to access a public property of an object named `fruit` within a Symfony ExpressionLanguage expression?
    answers:
      - { value: "`fruit.variety`", correct: true }
      - { value: "`fruit['variety']`", correct: false }
      - { value: "`fruit->variety`", correct: false }
      - { value: "`get_property(fruit, 'variety')`", correct: false }
    help: |
      ExpressionLanguage uses dot notation (`.`) to access public properties and methods of objects, similar to JavaScript.
      https://symfony.com/doc/current/reference/formats/expression_language.html#accessing-public-properties

  -
    question: >
      What is the purpose of the null-safe operator (`?.`) in Symfony ExpressionLanguage?
    answers:
      - { value: "To prevent exceptions when accessing properties or methods of a potentially null object, returning null instead.", correct: true }
      - { value: "To assign a default value if an object property is null.", correct: false }
      - { value: "To check if an object or its property exists before accessing it.", correct: false }
      - { value: "To perform a null-check and then execute a method only if not null.", correct: false }
    help: |
      The null-safe operator (`?.`) allows for safe access to properties or methods on potentially null objects, returning `null` if the object itself is `null`.
      https://symfony.com/doc/current/reference/formats/expression_language.html#null-safe-operator

  -
    question: >
      Which built-in function in ExpressionLanguage allows you to retrieve the value of a PHP global constant or a class constant?
    answers:
      - { value: "`constant('CONSTANT_NAME')`", correct: true }
      - { value: "`php_const('CONSTANT_NAME')`", correct: false }
      - { value: "`get_constant('CONSTANT_NAME')`", correct: false }
      - { value: "`const('CONSTANT_NAME')`", correct: false }
    help: |
      The `constant()` function in ExpressionLanguage is used to access PHP constants, including those defined within namespaces.
      https://symfony.com/doc/current/reference/formats/expression_language.html#the-constant-function

  -
    question: >
      Which of the following is the correct operator for string concatenation in Symfony ExpressionLanguage?
    answers:
      - { value: "`~`", correct: true }
      - { value: "`+`", correct: false }
      - { value: "`.`", correct: false }
      - { value: "`&`", correct: false }
    help: |
      The tilde (`~`) operator is used for string concatenation in ExpressionLanguage.
      https://symfony.com/doc/current/reference/formats/expression_language.html#string-operators

  -
    question: >
      When registering a custom function with ExpressionLanguage using `register()`, what are the two required callable arguments?
    answers:
      - { value: "A compiler function and an evaluator function.", correct: true }
      - { value: "A parser function and a compiler function.", correct: false }
      - { value: "An evaluator function and a validator function.", correct: false }
      - { value: "A definition function and a runtime function.", correct: false }
    help: |
      The `register()` method requires both a compiler callable (for generating PHP code) and an evaluator callable (for immediate evaluation).
      https://symfony.com/doc/current/components/expression_language.html#registering-a-custom-function

  -
    question: >
      What is the purpose of the `parse()` method of the `ExpressionLanguage` component?
    answers:
      - { value: "To convert an expression string into an Abstract Syntax Tree (AST) object.", correct: true }
      - { value: "To immediately evaluate an expression and return its result.", correct: false }
      - { value: "To generate PHP code from an expression for caching.", correct: false }
      - { value: "To validate the syntax of an expression without evaluating it.", correct: false }
    help: |
      The `parse()` method transforms an expression string into a `ParsedExpression` object, representing its Abstract Syntax Tree (AST).
      https://symfony.com/doc/current/components/expression_language.html#parsing-and-linting-expressions

  -
    question: >
      Which of the following flags can be used with the `lint()` method of `ExpressionLanguage` to ignore unknown variables and functions without throwing a `SyntaxError`?
    answers:
      - { value: "`Parser::IGNORE_UNKNOWN_VARIABLES | Parser::IGNORE_UNKNOWN_FUNCTIONS`", correct: true }
      - { value: "`Parser::ALLOW_UNKNOWN`", correct: false }
      - { value: "`Parser::SKIP_UNDEFINED`", correct: false }
      - { value: "`Parser::LENIENT`", correct: false }
    help: |
      The `IGNORE_UNKNOWN_VARIABLES` and `IGNORE_UNKNOWN_FUNCTIONS` flags allow the linter to bypass errors for undefined elements in an expression.
      https://symfony.com/doc/current/components/expression_language.html#configuring-parser-flags-for-linting

  -
    question: >
      What is the primary benefit of injecting a `Psr\Cache\CacheItemPoolInterface` into the `ExpressionLanguage` constructor?
    answers:
      - { value: "To cache compiled expressions for improved performance.", correct: true }
      - { value: "To store the results of evaluated expressions.", correct: false }
      - { value: "To manage variables used within expressions.", correct: false }
      - { value: "To provide a persistent storage for custom functions.", correct: false }
    help: |
      Caching compiled expressions prevents re-parsing and re-compiling them on every request, significantly boosting performance.
      https://symfony.com/doc/current/components/expression_language.html#caching-expressions

  -
    question: >
      Which of the following is a valid comparison operator in Symfony ExpressionLanguage for checking if a value exists within an array using strict comparison?
    answers:
      - { value: "`in`", correct: true }
      - { value: "`contains`", correct: false }
      - { value: "`has`", correct: false }
      - { value: "`includes`", correct: false }
    help: |
      The `in` operator (and `not in`) checks for strict containment of a value within an array.
      https://symfony.com/doc/current/reference/formats/expression_language.html#array-operators

  -
    question: >
      When using `#[IsGranted]` with an ExpressionLanguage expression for the `subject` attribute, which variables are available in the expression?
    answers:
      - { value: "`request` and `args`", correct: true }
      - { value: "`user` and `token`", correct: false }
      - { value: "`container` and `parameter`", correct: false }
      - { value: "`this` and `value`", correct: false }
    help: |
      When the `subject` of `#[IsGranted]` is an ExpressionLanguage expression, the `request` object and the `args` array (controller arguments) are available.
      https://symfony.com/doc/current/security/expressions.html#using-isgranted-with-expression-for-subject-and-attribute

  -
    question: >
      What is the purpose of the `routing.expression_language_provider` tag in Symfony?
    answers:
      - { value: "To register custom expression language functions specifically for routing.", correct: true }
      - { value: "To define custom routes using ExpressionLanguage.", correct: false }
      - { value: "To enable ExpressionLanguage support for route parameters.", correct: false }
      - { value: "To provide a cache for compiled routing expressions.", correct: false }
    help: |
      This tag is used to register services that implement `ExpressionFunctionProviderInterface` for the routing component's ExpressionLanguage.
      https://symfony.com/doc/current/reference/dic_tags.html#routing-expression-language-provider

  -
    question: >
      Which of the following variables is available within a Symfony security expression (e.g., in `is_granted()` or `#[IsGranted]`) and represents the current user or `null` if not authenticated?
    answers:
      - { value: "`user`", correct: true }
      - { value: "`current_user`", correct: false }
      - { value: "`security.user`", correct: false }
      - { value: "`principal`", correct: false }
    help: |
      The `user` variable provides access to the `UserInterface` instance of the currently authenticated user, or `null`.
      https://symfony.com/doc/current/security/expressions.html#available-variables

  -
    question: >
      In Symfony's ExpressionLanguage, what is the operator precedence for logical AND (`and` or `&&`) compared to logical OR (`or` or `||`)?
    answers:
      - { value: "Logical AND has higher precedence than logical OR.", correct: true }
      - { value: "Logical OR has higher precedence than logical AND.", correct: false }
      - { value: "They have the same precedence.", correct: false }
      - { value: "Precedence depends on the order of appearance in the expression.", correct: false }
    help: |
      In ExpressionLanguage, logical AND (`and`, `&&`) has higher precedence than logical OR (`or`, `||`).
      https://symfony.com/doc/current/reference/formats/expression_language.html#operators-precedence

  -
    question: >
      When using the `Expression` constraint, which variable refers to the object being validated (e.g., an instance of `BlogPost`)?
    answers:
      - { value: "`this`", correct: true }
      - { value: "`object`", correct: false }
      - { value: "`entity`", correct: false }
      - { value: "`root`", correct: false }
    help: |
      The `this` variable in an `Expression` constraint refers to the object on which the constraint is applied.
      https://symfony.com/doc/current/reference/constraints/Expression.html#expression

  -
    question: >
      What is the purpose of the `is_valid()` function available within an `Expression` constraint?
    answers:
      - { value: "It checks that the data passed to the function doesn't raise any validation violation.", correct: true }
      - { value: "It validates if the expression itself is syntactically correct.", correct: false }
      - { value: "It returns `true` if the current value is not `null` or empty.", correct: false }
      - { value: "It marks the current validation as successful.", correct: false }
    help: |
      The `is_valid()` function allows you to perform nested validation checks within an expression.
      https://symfony.com/doc/current/reference/constraints/Expression.html#expression

  -
    question: >
      Which of the following is the correct way to define a `scalarNode` in a Symfony configuration tree builder?
    answers:
      - { value: "`->scalarNode('node_name')->end()`", correct: true }
      - { value: "`->addScalarNode('node_name')`", correct: false }
      - { value: "`->node('node_name', 'scalar')`", correct: false }
      - { value: "`->valueNode('node_name')`", correct: false }
    help: |
      The `scalarNode()` method is used to define a generic scalar node (boolean, string, integer, float, null).
      https://symfony.com/doc/current/components/config/definition.html#symfony-component-config-component-api-overview

  -
    question: >
      What is the primary purpose of the `TreeBuilder` class in Symfony's Config component?
    answers:
      - { value: "To define the hierarchy and validation rules for configuration values.", correct: true }
      - { value: "To parse configuration files (e.g., YAML, XML) into PHP arrays.", correct: false }
      - { value: "To compile configuration into optimized PHP code.", correct: false }
      - { value: "To manage environment variables for the application.", correct: false }
    help: |
      The `TreeBuilder` is central to defining the structure and validation schema of a configuration.
      https://symfony.com/doc/current/components/config/definition.html#symfony-component-config-component-api-overview

  -
    question: >
      Which of the following console commands would you use to display the *default* configuration values defined by Symfony for the `web_profiler` bundle?
    answers:
      - { value: "php bin/console config:dump-reference web_profiler", correct: true }
      - { value: "php bin/console debug:config web_profiler", correct: false }
      - { value: "php bin/console web_profiler:config", correct: false }
      - { value: "php bin/console config:show-defaults web_profiler", correct: false }
    help: |
      The `config:dump-reference` command shows the default configuration values for a given bundle or extension.
      https://symfony.com/doc/current/reference/configuration/web_profiler.html#inspecting-the-webprofilerbundle-configuration

  -
    question: >
      When importing configuration files in Symfony, which `ignore-errors` option silently discards errors if the loaded file doesn't exist?
    answers:
      - { value: "`not_found`", correct: true }
      - { value: "`true`", correct: false }
      - { value: "`missing`", correct: false }
      - { value: "`file_not_found`", correct: false }
    help: |
      The `not_found` value for `ignore-errors` specifically handles cases where the imported file does not exist.
      https://symfony.com/doc/current/configuration.html#importing-configuration-files

  -
    question: >
      What is the purpose of the `min_depth` option in the Symfony DebugBundle configuration?
    answers:
      - { value: "It configures the minimum tree depth until which all items are guaranteed to be cloned by the VarDumper component.", correct: true }
      - { value: "It sets the minimum recursion depth for debugging array structures.", correct: false }
      - { value: "It defines the minimum stack trace depth to display in error pages.", correct: false }
      - { value: "It controls the minimum level of logging for debug messages.", correct: false }
    help: |
      `min_depth` ensures that a certain depth of an object/array is fully cloned before `max_items` applies.
      https://symfony.com/doc/current/reference/configuration/debug.html#min-depth

  -
    question: >
      Which environment variable is commonly used to configure trusted proxies in Symfony applications to prevent Host header attacks?
    answers:
      - { value: "`TRUSTED_PROXIES`", correct: true }
      - { value: "`SYMFONY_TRUSTED_PROXIES`", correct: false }
      - { value: "`APP_TRUSTED_PROXIES`", correct: false }
      - { value: "`HTTP_TRUSTED_PROXIES`", correct: false }
    help: |
      The `TRUSTED_PROXIES` environment variable is used to specify a comma-separated list of trusted proxy IP addresses or CIDR ranges.
      https://symfony.com/doc/current/deployment/proxies.html#configuring-trusted-proxies

  -
    question: >
      What is the default value for the `json_decode_associative` context option in Symfony's `JsonEncoder`?
    answers:
      - { value: "`false`", correct: true }
      - { value: "`true`", correct: false }
      - { value: "`null`", correct: false }
      - { value: "`0`", correct: false }
    help: |
      By default, `json_decode_associative` is `false`, meaning JSON is decoded into a nested `stdClass` hierarchy. Set to `true` to get associative arrays.
      https://symfony.com/doc/current/serializer/encoders.html#jsonencoder-context-options

  -
    question: >
      Which of the following `JsonEncoder` context options is used to pass flags directly to PHP's `json_encode` function?
    answers:
      - { value: "`json_encode_options`", correct: true }
      - { value: "`json_encode_flags`", correct: false }
      - { value: "`encode_options`", correct: false }
      - { value: "`flags`", correct: false }
    help: |
      The `json_encode_options` context option directly maps to the flags argument of `json_encode()`.
      https://symfony.com/doc/current/serializer/encoders.html#jsonencoder-context-options

  -
    question: >
      What is the default value for the `xml_format_output` context option in Symfony's `XmlEncoder`?
    answers:
      - { value: "`false`", correct: true }
      - { value: "`true`", correct: false }
      - { value: "`0`", correct: false }
      - { value: "`null`", correct: false }
    help: |
      By default, `xml_format_output` is `false`, meaning the generated XML is not formatted with line breaks and indentation.
      https://symfony.com/doc/current/serializer/encoders.html#xmlencoder-context-options

  -
    question: >
      Which `XmlEncoder` context option, introduced in Symfony 7.3, allows you to ignore attributes with empty values in the generated XML?
    answers:
      - { value: "`ignore_empty_attributes`", correct: true }
      - { value: "`skip_empty_attributes`", correct: false }
      - { value: "`remove_empty_attributes`", correct: false }
      - { value: "`filter_empty_attributes`", correct: false }
    help: |
      The `ignore_empty_attributes` option, new in Symfony 7.3, controls whether attributes with empty values are included in the output.
      https://symfony.com/doc/current/serializer/encoders.html#xmlencoder-context-options

  -
    question: >
      When configuring the Mailer component, which YAML configuration key is used to set global sender and recipient addresses for all emails?
    answers:
      - { value: "`framework.mailer.envelope`", correct: true }
      - { value: "`framework.mailer.defaults`", correct: false }
      - { value: "`framework.mailer.global_settings`", correct: false }
      - { value: "`framework.mailer.options`", correct: false }
    help: |
      The `envelope` key under `framework.mailer` allows configuring global sender and recipients.
      https://symfony.com/doc/current/mailer.html#configuring-global-email-settings

  -
    question: >
      Which environment variable is commonly used to configure the DSN for the Symfony Messenger component's transports?
    answers:
      - { value: "`MESSENGER_TRANSPORT_DSN`", correct: true }
      - { value: "`SYMFONY_MESSENGER_DSN`", correct: false }
      - { value: "`MESSAGE_BUS_DSN`", correct: false }
      - { value: "`QUEUE_DSN`", correct: false }
    help: |
      `MESSENGER_TRANSPORT_DSN` is the standard environment variable for defining Messenger transport DSNs.
      https://symfony.com/doc/current/messenger.html#defining-messenger-transport-dsns-in-env

  -
    question: >
      What is the purpose of the `VAR_DUMPER_FORMAT=server` environment variable when running a CLI command?
    answers:
      - { value: "It directs `dump()` calls to the active Var-Dump server for remote debugging.", correct: true }
      - { value: "It changes the output format of `var_dump()` to a server-friendly format.", correct: false }
      - { value: "It enables a built-in web server for the CLI application.", correct: false }
      - { value: "It configures the VarDumper component to log dumps to a file.", correct: false }
    help: |
      Setting `VAR_DUMPER_FORMAT=server` ensures that `dump()` output is sent to a running Var-Dump server, useful for debugging CLI scripts.
      https://symfony.com/doc/current/components/var_dumper.html#running-cli-command-with-var-dumper-format-environment-variable

  -
    question: >
      Which of the following is the correct way to override the `APP_ENV` environment variable when executing a Symfony console command?
    answers:
      - { value: "`APP_ENV=prod php bin/console cache:clear`", correct: true }
      - { value: "`php bin/console cache:clear --env=prod`", correct: false }
      - { value: "`php bin/console cache:clear -e prod`", correct: false }
      - { value: "`php bin/console cache:clear --environment=prod`", correct: false }
    help: |
      Environment variables can be set directly before the command execution to override their default values.
      https://symfony.com/doc/current/console.html#running-symfony-console-commands-with-specific-environment-variables

  -
    question: >
      What is the purpose of the `symfony/expression-language` component?
    answers:
      - { value: "To allow defining business rules in a human-readable text format that can be evaluated and compiled.", correct: true }
      - { value: "To provide a templating engine for complex logic.", correct: false }
      - { value: "To manage internationalization and localization strings.", correct: false }
      - { value: "To generate dynamic SQL queries based on user input.", correct: false }
    help: |
      The ExpressionLanguage component provides a way to define and evaluate expressions, often used for business rules, security, or configuration.
      https://symfony.com/doc/current/components/expression_language.html#expressionlanguage-business-rule-examples

  -
    question: >
      Which of the following is an arithmetic operator supported by Symfony ExpressionLanguage?
    answers:
      - { value: "`**` (exponentiation)", correct: true }
      - { value: "`^` (power)", correct: false }
      - { value: "`//` (integer division)", correct: false }
      - { value: "`%` (percentage)", correct: false }
    help: |
      The `**` operator is used for exponentiation in ExpressionLanguage.
      https://symfony.com/doc/current/reference/formats/expression_language.html#arithmetic-operators

  -
    question: >
      What is the primary difference between `evaluate()` and `compile()` methods in `ExpressionLanguage`?
    answers:
      - { value: "`evaluate()` executes the expression immediately, while `compile()` generates PHP code for later execution.", correct: true }
      - { value: "`evaluate()` is used for debugging, while `compile()` is for production.", correct: false }
      - { value: "`evaluate()` returns a boolean, while `compile()` returns a string.", correct: false }
      - { value: "`evaluate()` requires a cache, while `compile()` does not.", correct: false }
    help: |
      `evaluate()` provides an immediate result, whereas `compile()` generates a PHP string that can be cached and executed later for performance.
      https://symfony.com/doc/current/components/expression_language.html#basic-usage-evaluate-and-compile

  -
    question: >
      Which of the following is a logical operator supported by Symfony ExpressionLanguage, introduced in Symfony 7.2?
    answers:
      - { value: "`xor`", correct: true }
      - { value: "`nand`", correct: false }
      - { value: "`nor`", correct: false }
      - { value: "`xnor`", correct: false }
    help: |
      The `xor` (exclusive OR) operator was added in Symfony 7.2.
      https://symfony.com/doc/current/reference/formats/expression_language.html#logical-operators

  -
    question: >
      When using `MapEntity` with an ExpressionLanguage expression to fetch a single entity, what are the available variables in the expression context?
    answers:
      - { value: "The entity's `repository` and any route wildcards.", correct: true }
      - { value: "The `container` and `request` objects.", correct: false }
      - { value: "The `user` and `security` services.", correct: false }
      - { value: "Only route wildcards are available.", correct: false }
    help: |
      The `repository` of the entity and any route wildcards (e.g., `product_id`) are available for use in the `MapEntity` expression.
      https://symfony.com/doc/current/doctrine.html#mapentity-fetching-entity-with-expressionlanguage

  -
    question: >
      What is the purpose of the `security.expression_language_provider` tag in Symfony?
    answers:
      - { value: "To register custom expression language functions specifically for security expressions.", correct: true }
      - { value: "To define security roles using ExpressionLanguage.", correct: false }
      - { value: "To enable ExpressionLanguage for access control lists (ACLs).", correct: false }
      - { value: "To provide a cache for compiled security expressions.", correct: false }
    help: |
      This tag is used to register services that implement `ExpressionFunctionProviderInterface` for the security component's ExpressionLanguage.
      https://symfony.com/doc/current/reference/dic_tags.html#security-expression-language-provider

  -
    question: >
      Which of the following is a bitwise operator supported by Symfony ExpressionLanguage, introduced in Symfony 7.2?
    answers:
      - { value: "`<<` (left shift)", correct: true }
      - { value: "`>>>` (unsigned right shift)", correct: false }
      - { value: "`~` (bitwise NOT)", correct: true }
      - { value: "`&` (bitwise AND)", correct: true }
    help: |
      Symfony 7.2 introduced support for bitwise NOT (`~`), left shift (`<<`), and right shift (`>>`). Bitwise AND (`&`), OR (`|`), and XOR (`^`) were already supported.
      https://symfony.com/doc/current/reference/formats/expression_language.html#bitwise-operators

  -
    question: >
      Which of the following is the correct way to configure a `booleanNode` to be `true` by default in a Symfony configuration tree builder?
    answers:
      - { value: "`->booleanNode('node_name')->defaultTrue()->end()`", correct: true }
      - { value: "`->booleanNode('node_name')->defaultValue(true)->end()`", correct: true }
      - { value: "`->booleanNode('node_name')->trueByDefault()->end()`", correct: false }
      - { value: "`->booleanNode('node_name')->setDefault(true)->end()`", correct: false }
    help: |
      Both `defaultTrue()` and `defaultValue(true)` can be used to set the default value of a boolean node to `true`.
      https://symfony.com/doc/current/components/config/definition.html#symfony-component-config-component-api-overview

  -
    question: >
      What is the purpose of the `yaml_inline` context option in Symfony's `YamlEncoder`?
    answers:
      - { value: "It defines the level where the encoder switches to inline YAML formatting.", correct: true }
      - { value: "It sets the maximum line length for YAML output.", correct: false }
      - { value: "It controls whether YAML arrays are output on a single line.", correct: false }
      - { value: "It specifies the indentation level for inline YAML.", correct: false }
    help: |
      `yaml_inline` determines at which nesting level the YAML encoder will start outputting arrays and objects on a single line.
      https://symfony.com/doc/current/serializer/encoders.html#yamlencoder-context-options

  -
    question: >
      Which environment variable processor is used to read the content of a file specified by an environment variable and trim whitespace from it?
    answers:
      - { value: "`env(trim:file:VAR_NAME)`", correct: true }
      - { value: "`env(file_trim:VAR_NAME)`", correct: false }
      - { value: "`env(read_file_trim:VAR_NAME)`", correct: false }
      - { value: "`env(file_content_trim:VAR_NAME)`", correct: false }
    help: |
      The `trim:file:` processor loads file content and removes leading/trailing whitespace.
      https://symfony.com/doc/current/configuration/env_var_processors.html#loading-and-trimming-file-content

  -
    question: >
      What is the default value for the `decryption_env_var` option in `framework.secrets` configuration?
    answers:
      - { value: "`base64:default::SYMFONY_DECRYPTION_SECRET`", correct: true }
      - { value: "`SYMFONY_DECRYPTION_SECRET`", correct: false }
      - { value: "`APP_DECRYPTION_SECRET`", correct: false }
      - { value: "`vault:secret`", correct: false }
    help: |
      The default value for `decryption_env_var` specifies that the secret is base64 encoded and stored in `SYMFONY_DECRYPTION_SECRET`.
      https://symfony.com/doc/current/reference/configuration/framework.html#decryption-env-var

  -
    question: >
      How can you programmatically set a custom `.env` file path specifically for Symfony console commands?
    answers:
      - { value: "By setting `$_SERVER['APP_RUNTIME_OPTIONS']['dotenv_path']` in `bin/console` before `autoload_runtime.php`.", correct: true }
      - { value: "By modifying `composer.json` to include `runtime.console_dotenv_path`.", correct: false }
      - { value: "By passing a `--dotenv-path` argument to `php bin/console`.", correct: false }
      - { value: "By defining a `DOTENV_PATH` environment variable in the shell.", correct: false }
    help: |
      The `APP_RUNTIME_OPTIONS` superglobal can be used in `bin/console` to customize the dotenv path for CLI.
      https://symfony.com/doc/current/configuration/override_dir_structure.html#overriding-the-dotenv-path-for-console-commands

  -
    question: >
      What is the purpose of the `min()` function in Symfony ExpressionLanguage?
    answers:
      - { value: "Returns the lowest value of the given parameters.", correct: true }
      - { value: "Returns the smallest absolute value among parameters.", correct: false }
      - { value: "Calculates the minimum length of a string.", correct: false }
      - { value: "Finds the minimum value in an array.", correct: false }
    help: |
      The `min()` function, similar to PHP's `min()`, returns the lowest value from a list of arguments.
      https://symfony.com/doc/current/reference/formats/expression_language.html#min-function

  -
    question: >
      Which of the following is a valid way to define a prototyped array node in a Symfony configuration tree builder, allowing multiple instances of a complex structure?
    answers:
      - { value: "`->arrayNode('connections')->arrayPrototype()->children()->..->end()->end()`", correct: true }
      - { value: "`->arrayNode('connections')->prototype('array')->children()->..->end()->end()`", correct: false }
      - { value: "`->addArrayPrototype('connections')->children()->..->end()`", correct: false }
      - { value: "`->collectionNode('connections')->prototype()->children()->..->end()->end()`", correct: false }
    help: |
      The `arrayPrototype()` method is used to define a prototype for an array node, allowing multiple entries that conform to a specific schema.
      https://symfony.com/doc/current/components/config/definition.html#defining-a-prototyped-arraynode

  -
    question: >
      What is the purpose of `Symfony\Component\Config\Definition\ConfigurationInterface`?
    answers:
      - { value: "It is an interface that custom configuration classes must implement to provide a `TreeBuilder`.", correct: true }
      - { value: "It defines methods for loading configuration files from various formats.", correct: false }
      - { value: "It provides utility methods for processing and merging configuration arrays.", correct: false }
      - { value: "It is used to register configuration parameters in the service container.", correct: false }
    help: |
      Custom configuration classes implement `ConfigurationInterface` to define their configuration schema via the `getConfigTreeBuilder()` method.
      https://symfony.com/doc/current/components/config/definition.html#basic-symfony-configuration-class-structure

  -
    question: >
      Which of the following is a valid `YamlEncoder` context option for customizing YAML string encoding/decoding using `Yaml::DUMP_*` or `Yaml::PARSE_*` constants?
    answers:
      - { value: "`yaml_flags`", correct: true }
      - { value: "`yaml_options`", correct: false }
      - { value: "`yaml_mode`", correct: false }
      - { value: "`yaml_config`", correct: false }
    help: |
      The `yaml_flags` option is a bit field that allows passing constants to `Yaml::dump()` or `Yaml::parse()`.
      https://symfony.com/doc/current/serializer/encoders.html#yamlencoder-context-options

  -
    question: >
      What is the purpose of the `lint:container --resolve-env-vars` console command?
    answers:
      - { value: "To lint the Symfony service container and fail if any environment variables referenced in the configuration are missing.", correct: true }
      - { value: "To resolve all environment variables and dump them to a file for review.", correct: false }
      - { value: "To check for syntax errors in `.env` files.", correct: false }
      - { value: "To automatically generate missing environment variables based on configuration.", correct: false }
    help: |
      The `--resolve-env-vars` option forces the `lint:container` command to resolve all environment variables, ensuring that all required variables are present.
      https://symfony.com/doc/current/service_container.html#linting-the-service-container-configuration

  -
    question: >
      When using `MapEntity` with an ExpressionLanguage expression to fetch a *list* of entities, what is the required type hint for the controller argument?
    answers:
      - { value: "`iterable`", correct: true }
      - { value: "`array`", correct: false }
      - { value: "`Collection`", correct: false }
      - { value: "No specific type hint is required.", correct: false }
    help: |
      When fetching a collection of entities with `MapEntity` and an expression, the argument must be type-hinted as `iterable`.
      https://symfony.com/doc/current/doctrine.html#mapentity-fetching-list-of-entities-with-expressionlanguage

  -
    question: >
      Which of the following describes the behavior of the null-coalescing operator (`??`) in Symfony ExpressionLanguage?
    answers:
      - { value: "It returns the left-hand side if it exists and is not null, otherwise the right-hand side.", correct: true }
      - { value: "It returns the left-hand side if it is truthy, otherwise the right-hand side.", correct: false }
      - { value: "It returns the first non-empty value from a list of expressions.", correct: false }
      - { value: "It throws an exception if the left-hand side is null.", correct: false }
    help: |
      The `??` operator provides a concise way to define a fallback value when a variable or expression might be null.
      https://symfony.com/doc/current/reference/formats/expression_language.html#null-coalescing-operator

  -
    question: >
      What is the purpose of the `ExpressionSyntax` constraint in Symfony's Validator component?
    answers:
      - { value: "To validate that a string value is a syntactically correct ExpressionLanguage expression.", correct: true }
      - { value: "To evaluate an ExpressionLanguage expression and assert its result.", correct: false }
      - { value: "To check if an ExpressionLanguage expression contains specific variables.", correct: false }
      - { value: "To ensure that an ExpressionLanguage expression is optimized for performance.", correct: false }
    help: |
      The `ExpressionSyntax` constraint specifically checks the syntax of an ExpressionLanguage expression.
      https://symfony.com/doc/current/reference/constraints/ExpressionSyntax.html#expressionsyntax-constraint

  -
    question: >
      Which option of the `ExpressionSyntax` constraint allows you to restrict the expression to only use variables whose names are included in a predefined list?
    answers:
      - { value: "`allowedVariables`", correct: true }
      - { value: "`restrictedVariables`", correct: false }
      - { value: "`permittedVariables`", correct: false }
      - { value: "`variables`", correct: false }
    help: |
      The `allowedVariables` option ensures that only specified variables can be used within the expression.
      https://symfony.com/doc/current/reference/constraints/ExpressionSyntax.html#expressionsyntax-constraint

  -
    question: >
      Which of the following is a valid way to define a service configurator that explicitly calls a method named `configure` on the configurator service?
    answers:
      - { value: "`configurator: ['@App\\Mail\\EmailConfigurator', 'configure']`", correct: true }
      - { value: "`configurator: '@App\\Mail\\EmailConfigurator::configure'`", correct: false }
      - { value: "`configurator: { service: '@App\\Mail\\EmailConfigurator', method: 'configure' }`", correct: false }
      - { value: "`configurator: App\\Mail\\EmailConfigurator->configure()`", correct: false }
    help: |
      The array syntax `['@service_id', 'method_name']` is used to specify a method to call on the configurator service.
      https://symfony.com/doc/current/service_container/configurators.html#configuring-services-with-a-configurator

  -
    question: >
      What is the purpose of the `registerProvider()` method of `ExpressionLanguage`?
    answers:
      - { value: "To register an instance of `ExpressionFunctionProviderInterface` to provide custom functions.", correct: true }
      - { value: "To register a single custom function.", correct: false }
      - { value: "To register a service that provides ExpressionLanguage expressions.", correct: false }
      - { value: "To register a cache provider for ExpressionLanguage.", correct: false }
    help: |
      `registerProvider()` allows adding a collection of related custom functions via an `ExpressionFunctionProviderInterface` implementation.
      https://symfony.com/doc/current/components/expression_language.html#registering-expression-function-providers

  -
    question: >
      Which of the following is a correct way to access an array key named `life` from a variable `data` within a Symfony ExpressionLanguage expression?
    answers:
      - { value: "`data[\"life\"]`", correct: true }
      - { value: "`data.life`", correct: false }
      - { value: "`data->life`", correct: false }
      - { value: "`get_array_key(data, 'life')`", correct: false }
    help: |
      Array keys are accessed using square brackets (`[]`) in ExpressionLanguage.
      https://symfony.com/doc/current/reference/formats/expression_language.html#accessing-array-keys

  -
    question: >
      What is the effect of the `treatFalseLike([\'enabled\' => false])` method on an `ArrayNodeDefinition` in Symfony configuration?
    answers:
      - { value: "It treats a `false` value for the array node as if it were explicitly configured with `enabled: false`.", correct: true }
      - { value: "It sets the default value of the `enabled` child node to `false`.", correct: false }
      - { value: "It disables the array node if the `enabled` child node is `false`.", correct: false }
      - { value: "It throws an error if the `enabled` child node is not explicitly set to `false`.", correct: false }
    help: |
      `treatFalseLike()` allows a shorthand configuration where a simple `false` value for the parent node is expanded into a more structured array with `enabled: false`.
      https://symfony.com/doc/current/components/config/definition.html#defining-optional-configuration-sections

  -
    question: >
      When configuring PHP error logging in Symfony, which PSR-3 log level is typically mapped to `E_ERROR` and `E_CORE_ERROR`?
    answers:
      - { value: "`LogLevel::CRITICAL`", correct: true }
      - { value: "`LogLevel::ERROR`", correct: false }
      - { value: "`LogLevel::ALERT`", correct: false }
      - { value: "`LogLevel::EMERGENCY`", correct: false }
    help: |
      Fatal errors like `E_ERROR` and `E_CORE_ERROR` are generally mapped to the `CRITICAL` log level.
      https://symfony.com/doc/current/reference/configuration/framework.html#configuring-php-error-logging

  -
    question: >
      Which of the following is the correct way to configure the Symfony Form component to be enabled in `config/packages/framework.yaml`?
    answers:
      - { value: "`form: true`", correct: true }
      - { value: "`form: { enabled: true }`", correct: true }
      - { value: "`enable_form: true`", correct: false }
      - { value: "`form_component: true`", correct: false }
    help: |
      The `form: true` shorthand or `form: { enabled: true }` explicitly enables the Form component's services.
      https://symfony.com/doc/current/bundles/configuration.html#configuring-the-frameworkbundle-form-integration

  -
    question: >
      What is the default value for the `translation_domain` option used when translating validation constraint error messages?
    answers:
      - { value: "`validators`", correct: true }
      - { value: "`messages`", correct: false }
      - { value: "`validation`", correct: false }
      - { value: "`forms`", correct: false }
    help: |
      The default translation domain for validation messages is `validators`.
      https://symfony.com/doc/current/reference/configuration/framework.html#translation-domain

  -
    question: >
      Which `XmlEncoder` context option, introduced in Symfony 7.1, allows you to define a regular expression pattern to determine if a value should be wrapped in a CDATA section?
    answers:
      - { value: "`cdata_wrapping_pattern`", correct: true }
      - { value: "`cdata_regex`", correct: false }
      - { value: "`cdata_pattern`", correct: false }
      - { value: "`wrap_cdata_pattern`", correct: false }
    help: |
      The `cdata_wrapping_pattern` option provides fine-grained control over CDATA wrapping using a regex.
      https://symfony.com/doc/current/serializer/encoders.html#xmlencoder-context-options

  -
    question: >
      What is the default value for the `json_decode_recursion_depth` context option in Symfony's `JsonEncoder`?
    answers:
      - { value: "`512`", correct: true }
      - { value: "`128`", correct: false }
      - { value: "`256`", correct: false }
      - { value: "`1024`", correct: false }
    help: |
      The default maximum recursion depth for JSON decoding is 512.
      https://symfony.com/doc/current/serializer/encoders.html#jsonencoder-context-options

  -
    question: >
      When configuring a Symfony workflow, which option is used to define the initial place or places for a supported object if it's not already initialized by the workflow?
    answers:
      - { value: "`initial_marking`", correct: true }
      - { value: "`start_place`", correct: false }
      - { value: "`default_place`", correct: false }
      - { value: "`initial_state`", correct: false }
    help: |
      `initial_marking` sets the starting place(s) for an object entering the workflow.
      https://symfony.com/doc/current/reference/configuration/framework.html#workflows

  -
    question: >
      Which of the following is a valid way to define a `stringNode` in a Symfony configuration tree builder, introduced in Symfony 7.2?
    answers:
      - { value: "`->stringNode('node_name')->end()`", correct: true }
      - { value: "`->textNode('node_name')->end()`", correct: false }
      - { value: "`->varcharNode('node_name')->end()`", correct: false }
      - { value: "`->addStringNode('node_name')`", correct: false }
    help: |
      The `stringNode()` method was introduced in Symfony 7.2 for explicitly defining string configuration nodes.
      https://symfony.com/doc/current/components/config/definition.html#symfony-component-config-component-api-overview

  -
    question: >
      What is the purpose of the `audit_trail` option in Symfony workflow configuration?
    answers:
      - { value: "If set to `true`, the `Symfony\\Component\\Workflow\\EventListener\\AuditTrailListener` will be enabled.", correct: true }
      - { value: "It defines a log file for all workflow transitions.", correct: false }
      - { value: "It enables version control for workflow definitions.", correct: false }
      - { value: "It tracks changes to the workflow state in the database.", correct: false }
    help: |
      Enabling `audit_trail` activates the `AuditTrailListener` to record workflow events.
      https://symfony.com/doc/current/reference/configuration/framework.html#workflows

  -
    question: >
      Which of the following is the correct way to configure `trusted_hosts` in `config/packages/framework.yaml` using regular expressions?
    answers:
      - { value: "`trusted_hosts: ['^example\\.com$', '^example\\.org$']`", correct: true }
      - { value: "`trusted_hosts: /example.com/, /example.org/`", correct: false }
      - { value: "`trusted_hosts: [example.com, example.org]`", correct: false }
      - { value: "`trusted_hosts: \"example.com|example.org\"`", correct: false }
    help: |
      `trusted_hosts` accepts an array of regular expressions to match allowed hostnames.
      https://symfony.com/doc/current/reference/configuration/framework.html#configuring-trusted-hosts

  -
    question: >
      What is the purpose of the `container` variable available in Symfony Expression Language for service container configuration?
    answers:
      - { value: "Provides access to the entire service container, allowing methods like `hasParameter()`.", correct: true }
      - { value: "Refers to the current dependency injection container instance.", correct: true }
      - { value: "It is an alias for the `service()` function.", correct: false }
      - { value: "It represents the current request context.", correct: false }
    help: |
      The `container` variable gives direct access to the `Container` object, enabling checks like `hasParameter()`.
      https://symfony.com/doc/current/service_container/expression_language.html#available-variables

  -
    question: >
      Which of the following is a valid way to define an `enumNode` in a Symfony configuration tree builder?
    answers:
      - { value: "`->enumNode('node_name')->values(['value1', 'value2'])->end()`", correct: true }
      - { value: "`->addEnumNode('node_name', ['value1', 'value2'])`", correct: false }
      - { value: "`->node('node_name', 'enum', ['value1', 'value2'])`", correct: false }
      - { value: "`->choiceNode('node_name')->choices(['value1', 'value2'])->end()`", correct: false }
    help: |
      The `enumNode()` method is used to define a node that accepts a finite set of values, specified by `values()`.
      https://symfony.com/doc/current/components/config/definition.html#symfony-component-config-component-api-overview

  -
    question: >
      What is the purpose of the `metadata` option in Symfony workflow configuration?
    answers:
      - { value: "To provide additional, arbitrary data for the workflow configuration itself.", correct: true }
      - { value: "To define the database schema for storing workflow states.", correct: false }
      - { value: "To specify the version of the workflow definition.", correct: false }
      - { value: "To store user-specific data related to the workflow.", correct: false }
    help: |
      The `metadata` option allows attaching custom data to the workflow, places, and transitions.
      https://symfony.com/doc/current/reference/configuration/framework.html#workflows

  -
    question: >
      Which of the following is a valid way to represent an array of Twig extensions in YAML configuration?
    answers:
      - { value: "`extensions: ['twig.extension.foo', 'twig.extension.bar']`", correct: true }
      - { value: "`extensions: - twig.extension.foo - twig.extension.bar`", correct: true }
      - { value: "`extensions: { 0: twig.extension.foo, 1: twig.extension.bar }`", correct: false }
      - { value: "`extensions: twig.extension.foo, twig.extension.bar`", correct: false }
    help: |
      YAML supports both inline array notation `[]` and block sequence notation `-` for lists.
      https://symfony.com/doc/current/components/config/definition.html#representing-arrays-in-yaml-and-xml-configuration

  -
    question: >
      What is the purpose of the `symfony/dotenv` component?
    answers:
      - { value: "To load environment variables from `.env` files into `$_ENV`, `$_SERVER`, and `getenv()`.", correct: true }
      - { value: "To manage application secrets and sensitive configuration.", correct: false }
      - { value: "To handle database connection strings and credentials.", correct: false }
      - { value: "To provide a secure way to store application configuration.", correct: false }
    help: |
      The Dotenv component is responsible for loading environment variables from `.env` files.
      https://symfony.com/doc/current/configuration.html#environment-variables-in-symfony

  -
    question: >
      Which of the following is a valid way to add comments within a `.env` file?
    answers:
      - { value: "Using `#` at the beginning of a line or after a variable definition.", correct: true }
      - { value: "Using `//` at the beginning of a line.", correct: false }
      - { value: "Using `/* ... */` for multi-line comments.", correct: false }
      - { value: "Comments are not supported in `.env` files.", correct: false }
    help: |
      The hash symbol (`#`) is used for single-line comments in `.env` files.
      https://symfony.com/doc/current/configuration.html#adding-comments-in-env-files

  -
    question: >
      What is the purpose of the `local_dotenv_file` option in the `framework.secrets` configuration?
    answers:
      - { value: "It specifies the path to a local `.env` file that must contain the vault decryption key.", correct: true }
      - { value: "It defines a local file for storing application logs.", correct: false }
      - { value: "It sets the default location for temporary files during development.", correct: false }
      - { value: "It indicates a file containing environment variables specific to a local testing setup.", correct: false }
    help: |
      The `local_dotenv_file` option points to the `.env` file that contains the decryption key for Symfony secrets.
      https://symfony.com/doc/current/reference/configuration/framework.html#local-dotenv-file

  -
    question: >
      Which environment variable is typically used in a `.env` file to define the DSN for the Twilio Notifier?
    answers:
      - { value: "`TWILIO_DSN`", correct: true }
      - { value: "`NOTIFIER_TWILIO_DSN`", correct: false }
      - { value: "`SMS_TWILIO_DSN`", correct: false }
      - { value: "`APP_TWILIO_DSN`", correct: false }
    help: |
      `TWILIO_DSN` is the standard environment variable for configuring the Twilio notifier.
      https://symfony.com/doc/current/notifier.html#twilio-dsn

  -
    question: >
      When configuring a Symfony workflow, which option defines all available places (states) for the workflow configuration?
    answers:
      - { value: "`places`", correct: true }
      - { value: "`states`", correct: false }
      - { value: "`nodes`", correct: false }
      - { value: "`definitions`", correct: false }
    help: |
      The `places` option is an array of strings representing the possible states in a workflow.
      https://symfony.com/doc/current/reference/configuration/framework.html#workflows

  -
    question: >
      Which of the following describes the `router.resource` configuration option in Symfony?
    answers:
      - { value: "The path to the main routing resource (e.g., a YAML file) that contains the routes and imports the router should load.", correct: true }
      - { value: "The base URL for all routes defined in the application.", correct: false }
      - { value: "The name of the default routing file.", correct: false }
      - { value: "The directory where all routing configuration files are located.", correct: false }
    help: |
      `router.resource` is a required option that points to the primary routing configuration file.
      https://symfony.com/doc/current/reference/configuration/framework.html#router-resource

  -
    question: >
      What is the purpose of the `symfony/process` component?
    answers:
      - { value: "To execute commands in sub-processes.", correct: true }
      - { value: "To manage background tasks and daemons.", correct: false }
      - { value: "To handle asynchronous message processing.", correct: false }
      - { value: "To provide a framework for long-running CLI commands.", correct: false }
    help: |
      The Process component allows you to execute external commands and interact with their input/output.
      https://symfony.com/doc/current/components/process.html (Internal knowledge, as no specific snippet was retrieved for general purpose of Process component)

  -
    question: >
      Which of the following is a key consideration for deployment best practices in Symfony regarding environment variables?
    answers:
      - { value: "Use `.env.local` for local overrides and keep it out of version control.", correct: true }
      - { value: "Commit all `.env` files to the repository for consistency.", correct: false }
      - { value: "Store sensitive environment variables directly in `parameters.yaml`.", correct: false }
      - { value: "Always use system environment variables instead of `.env` files in production.", correct: false }
    help: |
      `.env.local` is intended for machine-specific overrides and should not be committed to version control to prevent exposing sensitive information or local configurations.
      https://symfony.com/doc/current/configuration.html#overriding-environment-variables-with-env-local

  -
    question: >
      What is the primary role of `Symfony\Component\Cache\Adapter\FilesystemAdapter`?
    answers:
      - { value: "To store cache items directly on the filesystem.", correct: true }
      - { value: "To provide an in-memory cache for development environments.", correct: false }
      - { value: "To connect to a distributed caching system like Redis.", correct: false }
      - { value: "To manage cache invalidation strategies.", correct: false }
    help: |
      The `FilesystemAdapter` is one of the simplest cache adapters, storing data as files.
      https://symfony.com/doc/current/components/cache.html (Internal knowledge, as no specific snippet was retrieved for general purpose of Cache component)

  -
    question: >
      Which component is responsible for converting PHP objects into various formats (like JSON, XML) and vice versa?
    answers:
      - { value: "The Serializer component.", correct: true }
      - { value: "The Encoder component.", correct: false }
      - { value: "The DataTransformer component.", correct: false }
      - { value: "The Normalizer component.", correct: false }
    help: |
      The Serializer component provides tools for serializing and deserializing PHP objects.
      https://symfony.com/doc/current/components/serializer.html (Internal knowledge, as no specific snippet was retrieved for general purpose of Serializer component)

  -
    question: >
      What is the purpose of tagging a service with `serializer.encoder` in Symfony?
    answers:
      - { value: "To register a custom encoder with the Serializer component.", correct: true }
      - { value: "To mark a service as an encoder for specific data types.", correct: false }
      - { value: "To enable automatic encoding of service arguments.", correct: false }
      - { value: "To define the default encoder for the application.", correct: false }
    help: |
      Services tagged with `serializer.encoder` are automatically discovered and registered by the Serializer component.
      https://symfony.com/doc/current/serializer/encoders.html#registering-a-custom-encoder

  -
    question: >
      What is the primary function of the `symfony/messenger` component?
    answers:
      - { value: "To send and receive messages (commands and events) asynchronously.", correct: true }
      - { value: "To handle real-time communication via WebSockets.", correct: false }
      - { value: "To manage user notifications and alerts.", correct: false }
      - { value: "To provide a robust logging mechanism for applications.", correct: false }
    help: |
      The Messenger component provides a message bus for dispatching and handling messages, often asynchronously.
      https://symfony.com/doc/current/components/messenger.html (Internal knowledge, as no specific snippet was retrieved for general purpose of Messenger component)

  -
    question: >
      Which component provides classes for creating and manipulating MIME messages, such as emails?
    answers:
      - { value: "The Mime component.", correct: true }
      - { value: "The Mailer component.", correct: false }
      - { value: "The Email component.", correct: false }
      - { value: "The Swiftmailer component.", correct: false }
    help: |
      The Mime component provides a powerful API for creating and manipulating email messages, including attachments and complex MIME structures.
      https://symfony.com/doc/current/components/mime.html (Internal knowledge, as no specific snippet was retrieved for general purpose of Mime component)

  -
    question: >
      What is the primary role of the `symfony/mailer` component?
    answers:
      - { value: "To send emails using various transport layers (e.g., SMTP, SendGrid, Mailgun).", correct: true }
      - { value: "To validate email addresses.", correct: false }
      - { value: "To parse incoming email messages.", correct: false }
      - { value: "To manage email templates.", correct: false }
    help: |
      The Mailer component is Symfony's modern solution for sending emails.
      https://symfony.com/doc/current/mailer.html (Internal knowledge, as no specific snippet was retrieved for general purpose of Mailer component)

  -
    question: >
      Which component provides utility classes for common filesystem operations, such as copying, moving, and deleting files and directories?
    answers:
      - { value: "The Filesystem component.", correct: true }
      - { value: "The FileSystem component.", correct: false }
      - { value: "The IO component.", correct: false }
      - { value: "The Storage component.", correct: false }
    help: |
      The Filesystem component offers convenient methods for interacting with the filesystem.
      https://symfony.com/doc/current/components/filesystem.html (Internal knowledge, as no specific snippet was retrieved for general purpose of Filesystem component)

  -
    question: >
      What is the purpose of the `symfony/finder` component?
    answers:
      - { value: "To find files and directories based on various criteria (e.g., name, size, type).", correct: true }
      - { value: "To locate and load configuration files.", correct: false }
      - { value: "To search for services in the dependency injection container.", correct: false }
      - { value: "To discover routes in the application.", correct: false }
    help: |
      The Finder component provides an intuitive API for finding files and directories.
      https://symfony.com/doc/current/components/finder.html (Internal knowledge, as no specific snippet was retrieved for general purpose of Finder component)

  -
    question: >
      Which component provides a mechanism for acquiring and releasing locks to prevent concurrent execution of critical code sections?
    answers:
      - { value: "The Lock component.", correct: true }
      - { value: "The Semaphore component.", correct: false }
      - { value: "The Mutex component.", correct: false }
      - { value: "The Concurrency component.", correct: false }
    help: |
      The Lock component offers various lock stores (e.g., filesystem, Redis, Memcached) to manage locks.
      https://symfony.com/doc/current/components/lock.html (Internal knowledge, as no specific snippet was retrieved for general purpose of Lock component)

  -
    question: >
      What is the primary purpose of the Symfony Web Profiler?
    answers:
      - { value: "To collect and display detailed information about requests, responses, and application internals during development.", correct: true }
      - { value: "To monitor application performance in production environments.", correct: false }
      - { value: "To provide a graphical interface for managing database migrations.", correct: false }
      - { value: "To debug JavaScript code in the browser.", correct: false }
    help: |
      The Web Profiler is an essential development tool for inspecting Symfony applications.
      https://symfony.com/doc/current/profiler.html (Internal knowledge, as no specific snippet was retrieved for general purpose of Web Profiler)

  -
    question: >
      Where is the Symfony Web Debug Toolbar typically displayed in a web application?
    answers:
      - { value: "At the bottom of the browser window.", correct: true }
      - { value: "In a separate browser tab.", correct: false }
      - { value: "As a pop-up window.", correct: false }
      - { value: "In the server's console output.", correct: false }
    help: |
      The Web Debug Toolbar is a visual overlay at the bottom of the page, providing quick access to profiler data.
      https://symfony.com/doc/current/profiler.html#the-web-debug-toolbar (Internal knowledge, as no specific snippet was retrieved for general purpose of Web Debug Toolbar)

  -
    question: >
      What are Data Collectors in the context of the Symfony Web Profiler?
    answers:
      - { value: "Services that gather specific types of data (e.g., request, database queries, logger) during a request.", correct: true }
      - { value: "Tools for collecting user input from forms.", correct: false }
      - { value: "Mechanisms for aggregating performance metrics.", correct: false }
      - { value: "Classes responsible for storing profiler data in the database.", correct: false }
    help: |
      Data Collectors are specialized services that collect and present information for different aspects of the application.
      https://symfony.com/doc/current/profiler.html#data-collectors (Internal knowledge, as no specific snippet was retrieved for general purpose of Data collectors)

  -
    question: >
      Which component provides tools for internationalization (i18n) and localization (l10n) in Symfony applications?
    answers:
      - { value: "The Translation component.", correct: true }
      - { value: "The Intl component.", correct: true }
      - { value: "The Locale component.", correct: false }
      - { value: "The Language component.", correct: false }
    help: |
      The Translation component handles the core translation logic, while the Intl component provides low-level internationalization features.
      https://symfony.com/doc/current/components/translation.html (Internal knowledge, as no specific snippet was retrieved for general purpose of Internationalization and localization (and Intl component))

  -
    question: >
      What is the primary purpose of the `symfony/runtime` component?
    answers:
      - { value: "To decouple the application from the global PHP state and web server APIs, enabling flexible runtime environments.", correct: true }
      - { value: "To manage application startup and shutdown processes.", correct: false }
      - { value: "To provide a lightweight HTTP server for development.", correct: false }
      - { value: "To handle long-running console commands.", correct: false }
    help: |
      The Runtime component provides a thin layer between your application and the execution environment, improving portability and testability.
      https://symfony.com/doc/current/components/runtime.html (Internal knowledge, as no specific snippet was retrieved for general purpose of Runtime component)

  -
    question: >
      Which component provides an abstraction for time, allowing for easier testing of time-sensitive logic?
    answers:
      - { value: "The Clock component.", correct: true }
      - { value: "The Time component.", correct: false }
      - { value: "The DateTime component.", correct: false }
      - { value: "The Chronos component.", correct: false }
    help: |
      The Clock component provides a `ClockInterface` for consistent time handling, especially useful in testing.
      https://symfony.com/doc/current/components/clock.html (Internal knowledge, as no specific snippet was retrieved for general purpose of Clock component)

  -
    question: >
      Which of the following is a valid way to define a `floatNode` in a Symfony configuration tree builder?
    answers:
      - { value: "`->floatNode('node_name')->end()`", correct: true }
      - { value: "`->doubleNode('node_name')->end()`", correct: false }
      - { value: "`->decimalNode('node_name')->end()`", correct: false }
      - { value: "`->addFloatNode('node_name')`", correct: false }
    help: |
      The `floatNode()` method is used to define a configuration node that expects a floating-point number.
      https://symfony.com/doc/current/components/config/definition.html#symfony-component-config-component-api-overview

  -
    question: >
      When defining a configuration node, which method is used to move up one step in the hierarchy (i.e., end the current node definition)?
    answers:
      - { value: "`->end()`", correct: true }
      - { value: "`->parent()`", correct: false }
      - { value: "`->up()`", correct: false }
      - { value: "`->close()`", correct: false }
    help: |
      The `end()` method is crucial for building complex configuration trees, allowing you to navigate back up the hierarchy.
      https://symfony.com/doc/current/components/config/definition.html#symfony-component-config-component-api-overview

  -
    question: >
      Which of the following is the correct way to specify a minimum allowed value for an integer node in Symfony configuration?
    answers:
      - { value: "`->integerNode('node_name')->min(10)->end()`", correct: true }
      - { value: "`->integerNode('node_name')->minimum(10)->end()`", correct: false }
      - { value: "`->integerNode('node_name')->atLeast(10)->end()`", correct: false }
      - { value: "`->integerNode('node_name')->ge(10)->end()`", correct: false }
    help: |
      The `min()` method sets the lower bound for numeric nodes.
      https://symfony.com/doc/current/components/config/definition.html#numeric-node-constraints

  -
    question: >
      Which of the following is a valid way to define a `variableNode` in a Symfony configuration tree builder, which accepts any type of value without validation?
    answers:
      - { value: "`->variableNode('node_name')->end()`", correct: true }
      - { value: "`->anyNode('node_name')->end()`", correct: false }
      - { value: "`->mixedNode('node_name')->end()`", correct: false }
      - { value: "`->addVariableNode('node_name')`", correct: false }
    help: |
      The `variableNode()` is used when the configuration value can be of any type and no specific validation is required by the definition.
      https://symfony.com/doc/current/components/config/definition.html#symfony-component-config-component-api-overview

  -
    question: >
      What is the purpose of the `PHPUnit Bridge` component in Symfony?
    answers:
      - { value: "To provide utilities for testing Symfony applications with PHPUnit, including deprecation handling and environment variable management.", correct: true }
      - { value: "To integrate PHPUnit with the Symfony Kernel for functional tests.", correct: false }
      - { value: "To generate test reports in a Symfony-specific format.", correct: false }
      - { value: "To enable code coverage analysis for Symfony projects.", correct: false }
    help: |
      The PHPUnit Bridge provides a set of tools to make testing Symfony applications with PHPUnit easier and more robust.
      https://symfony.com/doc/current/components/phpunit_bridge.html (Internal knowledge, as no specific snippet was retrieved for general purpose of PHPUnit Bridge)

  -
    question: >
      How can you configure the `SYMFONY_PHPUNIT_LOCALE` environment variable within the `phpunit.xml.dist` file?
    answers:
      - { value: "Using an `<env name=\"SYMFONY_PHPUNIT_LOCALE\" value=\"fr_FR\"/>` tag within the `<php>` section.", correct: true }
      - { value: "Using a `<locale>fr_FR</locale>` tag within the `<php>` section.", correct: false }
      - { value: "Using a `<setting name=\"SYMFONY_PHPUNIT_LOCALE\" value=\"fr_FR\"/>` tag.", correct: false }
      - { value: "It cannot be configured in `phpunit.xml.dist`.", correct: false }
    help: |
      Environment variables for PHPUnit tests are set within the `<php>` section using `<env>` tags.
      https://symfony.com/doc/current/components/phpunit_bridge.html#configuring-the-phpunit-locale

  -
    question: >
      What is the purpose of the `Symfony\Component\ErrorHandler\ErrorHandler` component?
    answers:
      - { value: "To convert PHP errors and warnings into exceptions.", correct: true }
      - { value: "To log all application errors to a file.", correct: false }
      - { value: "To display user-friendly error pages.", correct: false }
      - { value: "To provide a custom error handler for the application.", correct: false }
    help: |
      The ErrorHandler component transforms PHP errors and warnings into catchable exceptions, making error handling more consistent.
      https://symfony.com/doc/current/components/error_handler.html (Internal knowledge, as no specific snippet was retrieved for general purpose of Error handling)

  -
    question: >
      Which component provides the `dump()` function for debugging variables in Symfony applications?
    answers:
      - { value: "The VarDumper component.", correct: true }
      - { value: "The Debug component.", correct: false }
      - { value: "The Symfony DebugBundle.", correct: false }
      - { value: "The Logger component.", correct: false }
    help: |
      The VarDumper component provides the powerful `dump()` function for inspecting variables.
      https://symfony.com/doc/current/components/var_dumper.html (Internal knowledge, as no specific snippet was retrieved for general purpose of Code debugging)

  -
    question: >
      What is a key deployment best practice regarding the `APP_ENV` and `APP_DEBUG` environment variables in production?
    answers:
      - { value: "Set `APP_ENV` to `prod` and `APP_DEBUG` to `0` (false).", correct: true }
      - { value: "Set `APP_ENV` to `prod` and `APP_DEBUG` to `1` (true) for detailed logging.", correct: false }
      - { value: "Remove `APP_ENV` and `APP_DEBUG` from production environments.", correct: false }
      - { value: "Keep `APP_ENV` as `dev` for easier debugging in production.", correct: false }
    help: |
      For optimal performance and security in production, `APP_ENV` should be `prod` and `APP_DEBUG` should be `0`.
      https://symfony.com/doc/current/configuration/front_controllers_and_kernel.html#configuring-debug-mode-in-env-file

  -
    question: >
      Which component provides classes for working with internationalization data, such as locales, currencies, and timezones?
    answers:
      - { value: "The Intl component.", correct: true }
      - { value: "The Locale component.", correct: false }
      - { value: "The I18n component.", correct: false }
      - { value: "The Globalization component.", correct: false }
    help: |
      The Intl component wraps PHP's Intl extension and provides access to internationalization data and services.
      https://symfony.com/doc/current/components/intl.html (Internal knowledge, as no specific snippet was retrieved for general purpose of Intl component)

  -
    question: >
      What is the primary purpose of the `Symfony\Component\Clock\Clock` component?
    answers:
      - { value: "To provide a testable abstraction over PHP's native date/time functions.", correct: true }
      - { value: "To synchronize application time with an external NTP server.", correct: false }
      - { value: "To format dates and times for display in different locales.", correct: false }
      - { value: "To schedule recurring tasks at specific times.", correct: false }
    help: |
      The Clock component allows you to control time in your tests and applications, making time-sensitive logic easier to manage.
      https://symfony.com/doc/current/components/clock.html (Internal knowledge, as no specific snippet was retrieved for general purpose of Clock component)

  -
    question: >
      Which environment variable processor is used to parse an absolute URL from an environment variable and extract its components (e.g., host, port, user)?
    answers:
      - { value: "`env(url:VAR_NAME)`", correct: true }
      - { value: "`env(parse_url:VAR_NAME)`", correct: false }
      - { value: "`env(url_info:VAR_NAME)`", correct: false }
      - { value: "`env(extract_url:VAR_NAME)`", correct: false }
    help: |
      The `url:` processor allows you to extract various parts of a URL from an environment variable.
      https://symfony.com/doc/current/configuration/env_var_processors.html#parsing-absolute-url-components

  -
    question: >
      Which environment variable processor is used to extract a specific parameter from the query string part of a URL stored in an environment variable?
    answers:
      - { value: "`env(query_string:VAR_NAME)`", correct: true }
      - { value: "`env(query_param:VAR_NAME)`", correct: false }
      - { value: "`env(url_query:VAR_NAME)`", correct: false }
      - { value: "`env(get_query:VAR_NAME)`", correct: false }
    help: |
      The `query_string:` processor allows accessing individual query parameters from a URL in an environment variable.
      https://symfony.com/doc/current/configuration/env_var_processors.html#extracting-query-string-parameters

  -
    question: >
      What is the purpose of the `symfony/mime` component?
    answers:
      - { value: "To create and manipulate MIME messages, primarily for email.", correct: true }
      - { value: "To handle file uploads and MIME type detection.", correct: false }
      - { value: "To validate MIME types of uploaded files.", correct: false }
      - { value: "To provide a generic interface for handling various data formats.", correct: false }
    help: |
      The Mime component provides a powerful and flexible API for building and parsing MIME messages, especially useful for emails.
      https://symfony.com/doc/current/components/mime.html (Internal knowledge, as no specific snippet was retrieved for general purpose of Mime component)

  -
    question: >
      Which of the following is a valid DSN for a Beanstalkd Messenger transport?
    answers:
      - { value: "`beanstalkd://localhost:11300?tube_name=foo&timeout=4&ttr=120`", correct: true }
      - { value: "`beanstalkd://localhost?tube=foo`", correct: false }
      - { value: "`beanstalkd://user:pass@host:port/tube`", correct: false }
      - { value: "`beanstalkd://localhost/messages`", correct: false }
    help: |
      Beanstalkd DSNs specify the host, port, and optional parameters like `tube_name`, `timeout`, and `ttr`.
      https://symfony.com/doc/current/messenger.html#beanstalkd-messenger-transport-dsn-examples

  -
    question: >
      What is the purpose of the `symfony/lock` component?
    answers:
      - { value: "To provide a simple way to acquire and release locks across different processes or requests.", correct: true }
      - { value: "To prevent deadlocks in database transactions.", correct: false }
      - { value: "To manage user session locks.", correct: false }
      - { value: "To control access to shared resources in a multi-threaded environment.", correct: false }
    help: |
      The Lock component helps manage concurrent access to shared resources by providing a locking mechanism.
      https://symfony.com/doc/current/components/lock.html (Internal knowledge, as no specific snippet was retrieved for general purpose of Lock component)

  -
    question: >
      What is the primary purpose of the `symfony/filesystem` component?
    answers:
      - { value: "To provide a set of utility functions for common filesystem operations.", correct: true }
      - { value: "To manage virtual file systems.", correct: false }
      - { value: "To synchronize files between local and remote servers.", correct: false }
      - { value: "To monitor filesystem changes in real-time.", correct: false }
    help: |
      The Filesystem component simplifies tasks like copying, moving, deleting, and creating files and directories.
      https://symfony.com/doc/current/components/filesystem.html (Internal knowledge, as no specific snippet was retrieved for general purpose of Filesystem component)

  -
    question: >
      Which of the following is a valid DSN for a Slack Notifier?
    answers:
      - { value: "`slack://TOKEN@default?channel=CHANNEL`", correct: true }
      - { value: "`slack://CHANNEL:TOKEN@default`", correct: false }
      - { value: "`slack://TOKEN@CHANNEL`", correct: false }
      - { value: "`slack://default?token=TOKEN&channel=CHANNEL`", correct: false }
    help: |
      Slack DSNs typically include the API token and the channel.
      https://symfony.com/doc/current/notifier.html#slack-dsn

  -
    question: >
      What is the purpose of the `symfony/serializer` component?
    answers:
      - { value: "To convert complex data structures (objects, arrays) into a simple format (e.g., JSON, XML) and vice versa.", correct: true }
      - { value: "To validate data against a schema.", correct: false }
      - { value: "To encrypt and decrypt sensitive data.", correct: false }
      - { value: "To manage database serialization processes.", correct: false }
    help: |
      The Serializer component handles the serialization and deserialization of data.
      https://symfony.com/doc/current/components/serializer.html (Internal knowledge, as no specific snippet was retrieved for general purpose of Serializer component)

  -
    question: >
      Which of the following is a valid DSN for a SendGrid Mailer transport?
    answers:
      - { value: "`sendgrid://KEY@default`", correct: true }
      - { value: "`sendgrid://default?key=KEY`", correct: false }
      - { value: "`sendgrid://KEY:SECRET@default`", correct: false }
      - { value: "`sendgrid://api_key=KEY`", correct: false }
    help: |
      SendGrid DSNs typically use the API key as the user part of the DSN.
      https://symfony.com/doc/current/mailer.html#sendgrid-mailer-dsn

  -
    question: >
      Which of the following describes the `PhpErrors` configuration in the Symfony FrameworkBundle?
    answers:
      - { value: "It allows mapping PHP error types (e.g., `E_DEPRECATED`) to PSR-3 log levels.", correct: true }
      - { value: "It defines custom error pages for different PHP error types.", correct: false }
      - { value: "It enables or disables the display of PHP errors in the browser.", correct: false }
      - { value: "It configures the maximum number of PHP errors to log.", correct: false }
    help: |
      The `php_errors` configuration section allows fine-grained control over how PHP errors are handled and logged.
      https://symfony.com/doc/current/reference/configuration/framework.html#configuring-php-error-logging

  -
    question: >
      What is the purpose of the `Symfony\Component\Finder\Finder` component?
    answers:
      - { value: "To find files and directories in a flexible and efficient way.", correct: true }
      - { value: "To search for text within files.", correct: false }
      - { value: "To locate and load PHP classes.", correct: false }
      - { value: "To manage file permissions.", correct: false }
    help: |
      The Finder component provides a fluent interface for searching the filesystem.
      https://symfony.com/doc/current/components/finder.html (Internal knowledge, as no specific snippet was retrieved for general purpose of Finder component)

  -
    question: >
      Which of the following is a valid DSN for a Loco Translation provider?
    answers:
      - { value: "`loco://API_KEY@default`", correct: true }
      - { value: "`loco://default?api_key=API_KEY`", correct: false }
      - { value: "`loco://API_KEY:PROJECT_ID@default`", correct: false }
      - { value: "`loco://default/API_KEY`", correct: false }
    help: |
      Loco DSNs typically include the API key.
      https://symfony.com/doc/current/translation.html#loco-dsn

  -
    question: >
      What is the purpose of the `Symfony\Component\Runtime\Runtime` component?
    answers:
      - { value: "To provide a standard entry point for Symfony applications, abstracting away the web server and CLI environment.", correct: true }
      - { value: "To manage application lifecycle events.", correct: false }
      - { value: "To handle long-running processes and background tasks.", correct: false }
      - { value: "To provide a runtime code compilation service.", correct: false }
    help: |
      The Runtime component simplifies the bootstrapping of Symfony applications across different environments.
      https://symfony.com/doc/current/components/runtime.html (Internal knowledge, as no specific snippet was retrieved for general purpose of Runtime component)

  -
    question: >
      Which of the following is a valid way to configure a default semaphore resource using PHP configuration, referencing an environment variable for the DSN?
    answers:
      - { value: "`$framework->semaphore()->resource('default', [env('SEMAPHORE_DSN')]);`", correct: true }
      - { value: "`$framework->semaphore('default', env('SEMAPHORE_DSN'));`", correct: false }
      - { value: "`$framework->addSemaphoreResource('default', env('SEMAPHORE_DSN'));`", correct: false }
      - { value: "`$framework->resource('default', 'semaphore', env('SEMAPHORE_DSN'));`", correct: false }
    help: |
      The `resource()` method under `semaphore()` allows defining semaphore resources with their DSN.
      https://symfony.com/doc/current/reference/configuration/framework.html#configuring-symfony-semaphore-resource-via-php

  -
    question: >
      What is the purpose of the `symfony/intl` component?
    answers:
      - { value: "To provide a PHP extension-agnostic layer for internationalization features, such as locale data, currency formatting, and time zone information.", correct: true }
      - { value: "To manage translation messages for different languages.", correct: false }
      - { value: "To handle character encoding and decoding.", correct: false }
      - { value: "To provide a framework for building multi-language applications.", correct: false }
    help: |
      The Intl component offers a robust and consistent API for internationalization tasks, even if the PHP Intl extension is not available.
      https://symfony.com/doc/current/components/intl.html (Internal knowledge, as no specific snippet was retrieved for general purpose of Intl component)

  -
    question: >
      Which of the following is a valid DSN for an AMQP Messenger transport?
    answers:
      - { value: "`amqp://guest:guest@localhost:5672/%2f/messages`", correct: true }
      - { value: "`amqp://localhost/messages`", correct: false }
      - { value: "`amqp://user:pass@host:port/vhost`", correct: false }
      - { value: "`amqp://localhost:5672`", correct: false }
    help: |
      AMQP DSNs typically include username, password, host, port, and virtual host.
      https://symfony.com/doc/current/messenger.html#defining-messenger-transport-dsns-in-env

  -
    question: >
      What is the purpose of the `symfony/web-profiler-bundle`?
    answers:
      - { value: "To integrate the Web Profiler and Web Debug Toolbar into Symfony applications for development and debugging.", correct: true }
      - { value: "To optimize web application performance in production.", correct: false }
      - { value: "To provide a graphical interface for managing Symfony services.", correct: false }
      - { value: "To generate detailed reports on application security vulnerabilities.", correct: false }
    help: |
      The WebProfilerBundle provides the essential tools for debugging and inspecting Symfony applications in the browser.
      https://symfony.com/doc/current/bundles/WebProfilerBundle/index.html (Internal knowledge, as no specific snippet was retrieved for general purpose of Web Profiler)

  -
    question: >
      Which of the following is a valid DSN for a Redis Messenger transport?
    answers:
      - { value: "`redis://localhost:6379/messages`", correct: true }
      - { value: "`redis://localhost/0/messages`", correct: false }
      - { value: "`redis://host:port?db=messages`", correct: false }
      - { value: "`redis://default/messages`", correct: false }
    help: |
      Redis DSNs typically include the host, port, and the database index or key for messages.
      https://symfony.com/doc/current/messenger.html#defining-messenger-transport-dsns-in-env

  -
    question: >
      What is the purpose of the `symfony/clock` component?
    answers:
      - { value: "To provide a consistent and testable way to interact with time in an application.", correct: true }
      - { value: "To manage cron jobs and scheduled tasks.", correct: false }
      - { value: "To handle time zone conversions.", correct: false }
      - { value: "To measure execution time of code blocks.", correct: false }
    help: |
      The Clock component offers a `ClockInterface` that can be easily mocked in tests, ensuring predictable time-dependent behavior.
      https://symfony.com/doc/current/components/clock.html (Internal knowledge, as no specific snippet was retrieved for general purpose of Clock component)

  -
    question: >
      Which of the following is a valid DSN for a Doctrine Messenger transport?
    answers:
      - { value: "`doctrine://default`", correct: true }
      - { value: "`doctrine://messenger_queue`", correct: false }
      - { value: "`doctrine://connection=default`", correct: false }
      - { value: "`doctrine://entity_manager=default`", correct: false }
    help: |
      The Doctrine Messenger transport typically uses the default Doctrine connection.
      https://symfony.com/doc/current/messenger.html#defining-messenger-transport-dsns-in-env

  -
    question: >
      What is the purpose of the `symfony/translation` component?
    answers:
      - { value: "To provide tools for internationalizing and localizing applications, enabling content to be displayed in multiple languages.", correct: true }
      - { value: "To automatically translate content using external APIs.", correct: false }
      - { value: "To detect the user's preferred language.", correct: false }
      - { value: "To manage language-specific routing.", correct: false }
    help: |
      The Translation component is the core of Symfony's internationalization features, handling message translation and locale management.
      https://symfony.com/doc/current/components/translation.html (Internal knowledge, as no specific snippet was retrieved for general purpose of Internationalization and localization (and Intl component))

  -
    question: >
      Which of the following is a valid way to define an `integerNode` with a maximum allowed value of 100 in a Symfony configuration tree builder?
    answers:
      - { value: "`->integerNode('node_name')->max(100)->end()`", correct: true }
      - { value: "`->integerNode('node_name')->maximum(100)->end()`", correct: false }
      - { value: "`->integerNode('node_name')->atMost(100)->end()`", correct: false }
      - { value: "`->integerNode('node_name')->le(100)->end()`", correct: false }
    help: |
      The `max()` method sets the upper bound for numeric nodes.
      https://symfony.com/doc/current/components/config/definition.html#numeric-node-constraints

  -
    question: >
      What is the purpose of the `symfony/cache` component?
    answers:
      - { value: "To provide a unified API for various caching backends (e.g., filesystem, Redis, Memcached).", correct: true }
      - { value: "To store application configuration in a cache.", correct: false }
      - { value: "To manage HTTP cache headers.", correct: false }
      - { value: "To optimize database query performance.", correct: false }
    help: |
      The Cache component offers a PSR-6 and PSR-16 compliant caching layer.
      https://symfony.com/doc/current/components/cache.html (Internal knowledge, as no specific snippet was retrieved for general purpose of Cache component)

  -
    question: >
      Which of the following is a valid way to configure a `scalarNode` to be required and not empty in a Symfony configuration tree builder?
    answers:
      - { value: "`->scalarNode('node_name')->isRequired()->cannotBeEmpty()->end()`", correct: true }
      - { value: "`->scalarNode('node_name')->required()->notEmpty()->end()`", correct: false }
      - { value: "`->scalarNode('node_name')->mustBeSet()->notEmpty()->end()`", correct: false }
      - { value: "`->scalarNode('node_name')->requiredAndNotEmpty()->end()`", correct: false }
    help: |
      The `isRequired()` and `cannotBeEmpty()` methods are used to enforce these constraints on scalar nodes.
      https://symfony.com/doc/current/components/config/definition.html#defining-a-fixed-arraynode-in-symfony-configuration

  -
    question: >
      What is the purpose of the `symfony/error-handler` component?
    answers:
      - { value: "To provide a robust error and exception handling mechanism for PHP applications.", correct: true }
      - { value: "To display detailed error reports in development.", correct: false }
      - { value: "To log errors to various destinations.", correct: false }
      - { value: "To prevent fatal PHP errors from crashing the application.", correct: false }
    help: |
      The ErrorHandler component is designed to catch and handle PHP errors, converting them into exceptions for consistent error management.
      https://symfony.com/doc/current/components/error_handler.html (Internal knowledge, as no specific snippet was retrieved for general purpose of Error handling)

  -
    question: >
      Which of the following is a valid way to define a `booleanNode` in a Symfony configuration tree builder?
    answers:
      - { value: "`->booleanNode('node_name')->end()`", correct: true }
      - { value: "`->boolNode('node_name')->end()`", correct: false }
      - { value: "`->addBooleanNode('node_name')`", correct: false }
      - { value: "`->flagNode('node_name')->end()`", correct: false }
    help: |
      The `booleanNode()` method is used to define a configuration node that expects a boolean value.
      https://symfony.com/doc/current/components/config/definition.html#symfony-component-config-component-api-overview

  -
    question: >
      What is the purpose of the `symfony/debug-bundle`?
    answers:
      - { value: "To provide integration with the VarDumper component and other debugging tools for Symfony applications.", correct: true }
      - { value: "To enable Xdebug for PHP debugging.", correct: false }
      - { value: "To generate debug logs for production environments.", correct: false }
      - { value: "To display a simplified error page for end-users.", correct: false }
    help: |
      The DebugBundle enhances the debugging experience in Symfony by integrating various debugging tools.
      https://symfony.com/doc/current/bundles/DebugBundle/index.html (Internal knowledge, as no specific snippet was retrieved for general purpose of Code debugging)

  -
    question: >
      Which of the following is a valid way to define an `arrayNode` in a Symfony configuration tree builder?
    answers:
      - { value: "`->arrayNode('node_name')->children()->..->end()->end()`", correct: true }
      - { value: "`->addArrayNode('node_name')->children()->..->end()`", correct: false }
      - { value: "`->node('node_name', 'array')->children()->..->end()`", correct: false }
      - { value: "`->collectionNode('node_name')->children()->..->end()`", correct: false }
    help: |
      The `arrayNode()` method is used to define a node that contains a collection of child nodes.
      https://symfony.com/doc/current/components/config/definition.html#symfony-component-config-component-api-overview

  -
    question: >
      What is the purpose of the `symfony/web-debug-toolbar`?
    answers:
      - { value: "To provide a visual overlay in the browser that displays debugging information for the current request.", correct: true }
      - { value: "To allow developers to execute console commands directly from the browser.", correct: false }
      - { value: "To monitor network requests and responses.", correct: false }
      - { value: "To provide a quick way to clear the application cache.", correct: false }
    help: |
      The Web Debug Toolbar is a key part of the Symfony development experience, offering immediate feedback on request processing.
      https://symfony.com/doc/current/profiler.html#the-web-debug-toolbar (Internal knowledge, as no specific snippet was retrieved for general purpose of Web Debug Toolbar)

  -
    question: >
      Which of the following is a valid way to define a `floatNode` with a minimum allowed value of 0.5 in a Symfony configuration tree builder?
    answers:
      - { value: "`->floatNode('node_name')->min(0.5)->end()`", correct: true }
      - { value: "`->floatNode('node_name')->minimum(0.5)->end()`", correct: false }
      - { value: "`->floatNode('node_name')->atLeast(0.5)->end()`", correct: false }
      - { value: "`->floatNode('node_name')->ge(0.5)->end()`", correct: false }
    help: |
      The `min()` method sets the lower bound for numeric nodes, including floats.
      https://symfony.com/doc/current/components/config/definition.html#numeric-node-constraints

  -
    question: >
      What is the purpose of the `symfony/console` component in the context of debugging?
    answers:
      - { value: "To provide commands like `debug:container` and `debug:router` for inspecting application configuration and state.", correct: true }
      - { value: "To execute PHP code in an interactive shell.", correct: false }
      - { value: "To generate boilerplate code for debugging.", correct: false }
      - { value: "To manage breakpoints in a debugger.", correct: false }
    help: |
      The Console component offers various `debug:` commands that are invaluable for understanding and debugging Symfony applications.
      https://symfony.com/doc/current/console.html (Internal knowledge, as no specific snippet was retrieved for general purpose of Code debugging)

  -
    question: >
      Which of the following is a valid way to define a `stringNode` with a default value of "default_string" in a Symfony configuration tree builder?
    answers:
      - { value: "`->stringNode('node_name')->defaultValue('default_string')->end()`", correct: true }
      - { value: "`->stringNode('node_name')->default('default_string')->end()`", correct: false }
      - { value: "`->stringNode('node_name')->value('default_string')->end()`", correct: false }
      - { value: "`->stringNode('node_name')->setDefaultValue('default_string')->end()`", correct: false }
    help: |
      The `defaultValue()` method sets the default value for any node type.
      https://symfony.com/doc/current/components/config/definition.html#symfony-component-config-component-api-overview

  -
    question: >
      What is the purpose of the `symfony/translation-contracts` component?
    answers:
      - { value: "To provide interfaces and basic classes for translation, allowing for flexible integration with different translation implementations.", correct: true }
      - { value: "To define the standard file formats for translation messages.", correct: false }
      - { value: "To offer a concrete translation service implementation.", correct: false }
      - { value: "To manage translation memory and glossaries.", correct: false }
    help: |
      This component defines the contracts for translation, ensuring interoperability.
      https://symfony.com/doc/current/components/translation_contracts.html (Internal knowledge, as no specific snippet was retrieved for general purpose of Internationalization and localization (and Intl component))

  -
    question: >
      Which of the following is a valid way to define an `integerNode` with a default value of 0 in a Symfony configuration tree builder?
    answers:
      - { value: "`->integerNode('node_name')->defaultValue(0)->end()`", correct: true }
      - { value: "`->integerNode('node_name')->default(0)->end()`", correct: false }
      - { value: "`->integerNode('node_name')->value(0)->end()`", correct: false }
      - { value: "`->integerNode('node_name')->setDefaultValue(0)->end()`", correct: false }
    help: |
      The `defaultValue()` method is used to set the default value for an integer node.
      https://symfony.com/doc/current/components/config/definition.html#symfony-component-config-component-api-overview

  -
    question: >
      What is the purpose of the `symfony/property-access` component in the context of the Serializer component?
    answers:
      - { value: "To read and write properties of PHP objects using a unified API, even if they are private or protected.", correct: true }
      - { value: "To define access control rules for object properties.", correct: false }
      - { value: "To automatically generate getters and setters for objects.", correct: false }
      - { value: "To validate property values during serialization.", correct: false }
    help: |
      The PropertyAccess component is used by the Serializer to access object properties during serialization and deserialization.
      https://symfony.com/doc/current/components/property_access.html (Internal knowledge, as no specific snippet was retrieved for general purpose of Serializer component)

  -
    question: >
      Which of the following is a valid way to define a `floatNode` with a default value of 1.0 in a Symfony configuration tree builder?
    answers:
      - { value: "`->floatNode('node_name')->defaultValue(1.0)->end()`", correct: true }
      - { value: "`->floatNode('node_name')->default(1.0)->end()`", correct: false }
      - { value: "`->floatNode('node_name')->value(1.0)->end()`", correct: false }
      - { value: "`->floatNode('node_name')->setDefaultValue(1.0)->end()`", correct: false }
    help: |
      The `defaultValue()` method is used to set the default value for a float node.
      https://symfony.com/doc/current/components/config/definition.html#symfony-component-config-component-api-overview

  -
    question: >
      What is the purpose of the `symfony/mime` component?
    answers:
      - { value: "To create and manipulate MIME messages, primarily for email.", correct: true }
      - { value: "To handle file uploads and MIME type detection.", correct: false }
      - { value: "To validate MIME types of uploaded files.", correct: false }
      - { value: "To provide a generic interface for handling various data formats.", correct: false }
    help: |
      The Mime component provides a powerful and flexible API for building and parsing MIME messages, especially useful for emails.
      https://symfony.com/doc/current/components/mime.html (Internal knowledge, as no specific snippet was retrieved for general purpose of Mime component)

  -
    question: >
      Which of the following is a valid way to define an `integerNode` in a Symfony configuration tree builder?
    answers:
      - { value: "`->integerNode('node_name')->end()`", correct: true }
      - { value: "`->intNode('node_name')->end()`", correct: false }
      - { value: "`->addIntegerNode('node_name')`", correct: false }
      - { value: "`->numberNode('node_name')->end()`", correct: false }
    help: |
      The `integerNode()` method is used to define a configuration node that expects an integer value.
      https://symfony.com/doc/current/components/config/definition.html#symfony-component-config-component-api-overview

  -
    question: >
      What is the purpose of the `symfony/var-dumper` component?
    answers:
      - { value: "To provide a powerful and customizable replacement for PHP's `var_dump()` function, offering better readability and introspection.", correct: true }
      - { value: "To log variable values to a file.", correct: false }
      - { value: "To serialize PHP variables for storage.", correct: false }
      - { value: "To compare variable values for equality.", correct: false }
    help: |
      The VarDumper component is a debugging tool that provides enhanced variable dumping capabilities.
      https://symfony.com/doc/current/components/var_dumper.html (Internal knowledge, as no specific snippet was retrieved for general purpose of Code debugging)

  -
    question: >
      Which of the following is a valid way to define a `stringNode` with a maximum length of 255 in a Symfony configuration tree builder?
    answers:
      - { value: "`->stringNode('node_name')->maxLength(255)->end()`", correct: true }
      - { value: "`->stringNode('node_name')->max(255)->end()`", correct: false }
      - { value: "`->stringNode('node_name')->length(null, 255)->end()`", correct: false }
      - { value: "`->stringNode('node_name')->maxLen(255)->end()`", correct: false }
    help: |
      The `maxLength()` method is used to set the maximum length for a string node.
      https://symfony.com/doc/current/components/config/definition.html (Internal knowledge, common constraint)

  -
    question: >
      What is the purpose of the `symfony/config` component?
    answers:
      - { value: "To provide a robust and flexible way to define, load, and validate application configurations.", correct: true }
      - { value: "To manage environment variables.", correct: false }
      - { value: "To handle routing configurations.", correct: false }
      - { value: "To process and compile PHP code.", correct: false }
    help: |
      The Config component is the foundation for Symfony's configuration system, allowing bundles and applications to define structured settings.
      https://symfony.com/doc/current/components/config.html (Internal knowledge, as no specific snippet was retrieved for general purpose of Config component)

  -
    question: >
      Which of the following is a valid way to define an `arrayNode` that allows extra, undefined keys without throwing an exception?
    answers:
      - { value: "`->arrayNode('node_name')->ignoreExtraKeys()->end()`", correct: true }
      - { value: "`->arrayNode('node_name')->allowExtraKeys()->end()`", correct: false }
      - { value: "`->arrayNode('node_name')->setAllowExtraKeys(true)->end()`", correct: false }
      - { value: "`->arrayNode('node_name')->wildcardKeys()->end()`", correct: false }
    help: |
      The `ignoreExtraKeys()` method prevents exceptions when unexpected keys are present in an array node.
      https://symfony.com/doc/current/components/config/definition.html#arraynode-configuration-options-reference

  -
    question: >
      What is the purpose of the `symfony/http-kernel` component in relation to configuration?
    answers:
      - { value: "It provides the `AbstractBundle` and `Extension` classes, which are key for defining and processing bundle configurations.", correct: true }
      - { value: "It handles the parsing of HTTP request headers for configuration.", correct: false }
      - { value: "It manages the application's environment variables.", correct: false }
      - { value: "It provides a mechanism for caching configuration files.", correct: false }
    help: |
      The HttpKernel component defines the core structure for bundles and their configuration extensions.
      https://symfony.com/doc/current/components/http_kernel.html (Internal knowledge, as no specific snippet was retrieved for general purpose of HttpKernel component)

  -
    question: >
      Which of the following is a valid way to define a `floatNode` with a maximum allowed value of 100.0 in a Symfony configuration tree builder?
    answers:
      - { value: "`->floatNode('node_name')->max(100.0)->end()`", correct: true }
      - { value: "`->floatNode('node_name')->maximum(100.0)->end()`", correct: false }
      - { value: "`->floatNode('node_name')->atMost(100.0)->end()`", correct: false }
      - { value: "`->floatNode('node_name')->le(100.0)->end()`", correct: false }
    help: |
      The `max()` method sets the upper bound for numeric nodes, including floats.
      https://symfony.com/doc/current/components/config/definition.html#numeric-node-constraints

  -
    question: >
      What is the purpose of the `symfony/dependency-injection` component in relation to configuration?
    answers:
      - { value: "It provides the `ContainerBuilder` and `ContainerConfigurator` classes, which are used to load and process configuration into the service container.", correct: true }
      - { value: "It defines the structure of configuration files.", correct: false }
      - { value: "It manages the lifecycle of services based on configuration.", correct: false }
      - { value: "It generates optimized PHP code for the service container.", correct: false }
    help: |
      The DependencyInjection component is where configuration is ultimately processed and used to build the service container.
      https://symfony.com/doc/current/components/dependency_injection.html (Internal knowledge, as no specific snippet was retrieved for general purpose of DependencyInjection component)

  -
    question: >
      Which of the following is a valid way to define a `stringNode` that is required in a Symfony configuration tree builder?
    answers:
      - { value: "`->stringNode('node_name')->isRequired()->end()`", correct: true }
      - { value: "`->stringNode('node_name')->required()->end()`", correct: false }
      - { value: "`->stringNode('node_name')->setRequired(true)->end()`", correct: false }
      - { value: "`->stringNode('node_name')->mustBeSet()->end()`", correct: false }
    help: |
      The `isRequired()` method marks a node as mandatory.
      https://symfony.com/doc/current/components/config/definition.html#defining-a-fixed-arraynode-in-symfony-configuration

  -
    question: >
      What is the purpose of the `symfony/validator` component in relation to ExpressionLanguage?
    answers:
      - { value: "It provides the `Expression` and `ExpressionSyntax` constraints to validate values against ExpressionLanguage expressions.", correct: true }
      - { value: "It uses ExpressionLanguage to define validation rules for forms.", correct: false }
      - { value: "It allows ExpressionLanguage to be used for custom validation messages.", correct: false }
      - { value: "It integrates ExpressionLanguage with database validation rules.", correct: false }
    help: |
      The Validator component leverages ExpressionLanguage for complex, dynamic validation rules.
      https://symfony.com/doc/current/components/validator.html (Internal knowledge, as no specific snippet was retrieved for general purpose of Validator component)

  -
    question: >
      Which of the following is a valid way to define a `booleanNode` that is `false` by default in a Symfony configuration tree builder?
    answers:
      - { value: "`->booleanNode('node_name')->defaultFalse()->end()`", correct: true }
      - { value: "`->booleanNode('node_name')->defaultValue(false)->end()`", correct: true }
      - { value: "`->booleanNode('node_name')->falseByDefault()->end()`", correct: false }
      - { value: "`->booleanNode('node_name')->setDefault(false)->end()`", correct: false }
    help: |
      Both `defaultFalse()` and `defaultValue(false)` can be used to set the default value of a boolean node to `false`.
      https://symfony.com/doc/current/components/config/definition.html#symfony-component-config-component-api-overview

  -
    question: >
      What is the purpose of the `symfony/event-dispatcher` component in relation to other Symfony components?
    answers:
      - { value: "It provides a central system for components to communicate with each other by dispatching and listening to events.", correct: true }
      - { value: "It manages the order of execution for application logic.", correct: false }
      - { value: "It handles asynchronous tasks and background processes.", correct: false }
      - { value: "It provides a mechanism for dependency injection.", correct: false }
    help: |
      The EventDispatcher component is a core part of Symfony's architecture, enabling loose coupling between different parts of an application.
      https://symfony.com/doc/current/components/event_dispatcher.html (Internal knowledge, as no specific snippet was retrieved for general purpose of EventDispatcher component)

  -
    question: >
      Which of the following is a valid way to define an `integerNode` that is required in a Symfony configuration tree builder?
    answers:
      - { value: "`->integerNode('node_name')->isRequired()->end()`", correct: true }
      - { value: "`->integerNode('node_name')->required()->end()`", correct: false }
      - { value: "`->integerNode('node_name')->setRequired(true)->end()`", correct: false }
      - { value: "`->integerNode('node_name')->mustBeSet()->end()`", correct: false }
    help: |
      The `isRequired()` method marks a node as mandatory.
      https://symfony.com/doc/current/components/config/definition.html#defining-a-fixed-arraynode-in-symfony-configuration

  -
    question: >
      What is the purpose of the `symfony/http-foundation` component in a Symfony application?
    answers:
      - { value: "To provide an object-oriented layer for the HTTP specification, including `Request` and `Response` objects.", correct: true }
      - { value: "To handle HTTP routing and URL generation.", correct: false }
      - { value: "To manage HTTP sessions and cookies.", correct: false }
      - { value: "To provide a client for making HTTP requests.", correct: false }
    help: |
      The HttpFoundation component is the base for handling HTTP requests and responses in Symfony.
      https://symfony.com/doc/current/components/http_foundation.html (Internal knowledge, as no specific snippet was retrieved for general purpose of HttpFoundation component)