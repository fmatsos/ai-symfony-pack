category: Miscellaneous
questions:
  - question: Which of the following console commands can be used to list all
      registered cache warmers in a Symfony application?
    answers:
      - value: "`php bin/console debug:container --tag=kernel.cache_warmer`"
        correct: true
      - value: "`php bin/console cache:warmer:list`"
        correct: false
      - value: "`php bin/console debug:cache --warmers`"
        correct: false
      - value: "`php bin/console container:debug --tag=cache_warmer`"
        correct: false
    help: >-
      The `debug:container` command with the `--tag` option is used to list
      services associated with a specific tag. Cache warmers are tagged with
      `kernel.cache_warmer`.

      https://symfony.com/doc/current/reference/dic_tags.html#_snippet_12
  - question: In Symfony's Dependency Injection, how can you configure a service
      method call to be ignored if its required service dependency is not found
      in the container?
    answers:
      - value: By using `@?service_id` in YAML configuration.
        correct: true
      - value: By using `->ignoreOnInvalid()` with `service()` in PHP configuration.
        correct: true
      - value: By setting `on-invalid="ignore"` for the argument in XML configuration.
        correct: true
      - value: By type-hinting the dependency as nullable (`?ServiceDependency`).
        correct: false
    help: |-
      Symfony provides mechanisms to handle optional service dependencies. For method calls, you can use `@?service_id` in YAML, `ignoreOnInvalid()` in PHP, or `on-invalid="ignore"` in XML to make the call ignored if the dependency is missing.
      https://symfony.com/doc/current/service_container/optional_dependencies.html#_snippet_1
  - question: Which of the following `Symfony\Component\String\UnicodeString`
      methods can be used for case-insensitive comparisons by returning a string
      that ignores case differences?
    answers:
      - value: "`folded()`"
        correct: true
      - value: "`lower()`"
        correct: false
      - value: "`ignoreCase()`"
        correct: false
      - value: "`normalize()`"
        correct: false
    help: >-
      The `folded()` method returns a string that can be used for
      case-insensitive comparisons, handling complexities of different languages
      where simple `lower()` or `upper()` might not be sufficient for true
      case-insensitivity.

      https://symfony.com/doc/current/components/string.html#_snippet_10
  - question: When using the Symfony Serializer component, which context option
      should be set to `true` to prevent properties with `null` values from
      being included in the normalized output?
    answers:
      - value: "`AbstractObjectNormalizer::SKIP_NULL_VALUES`"
        correct: true
      - value: "`AbstractNormalizer::SKIP_NULL_VALUES`"
        correct: false
      - value: "`ObjectNormalizer::IGNORE_NULL`"
        correct: false
      - value: "`Serializer::CONTEXT_SKIP_NULL`"
        correct: false
    help: >-
      The `AbstractObjectNormalizer::SKIP_NULL_VALUES` context option, when set
      to `true`, instructs the `ObjectNormalizer` to exclude properties whose
      values are `null` from the normalized array.

      https://symfony.com/doc/current/components/serializer.html#_snippet_46
  - question: >-
      Consider the following Symfony console command definition:


      ```php

      use Symfony\Component\Console\Input\InputOption;


      $this
          ->addOption(
              'yell',
              null,
              InputOption::VALUE_OPTIONAL,
              'Should I yell while greeting?'
          );
      ```


      If the user runs `php bin/console app:greet --yell`, what will be the
      value of `$input->getOption('yell')`?
    answers:
      - value: An empty string (`''`).
        correct: true
      - value: "`true`"
        correct: false
      - value: "`null`"
        correct: false
      - value: "`false`"
        correct: false
    help: >-
      When `InputOption::VALUE_OPTIONAL` is used, if the option is present but
      no value is provided (e.g., `--yell` instead of `--yell=loud`), the value
      will be an empty string (`''`). If the option is not present at all, the
      value would be `null`.

      https://symfony.com/doc/current/console/input.html#_snippet_12
  - question: Which of the following Symfony `FormEvents` constants provides access
      to the *request data* during the form processing lifecycle?
    answers:
      - value: "`FormEvents::PRE_SUBMIT`"
        correct: true
      - value: "`FormEvents::POST_SUBMIT`"
        correct: false
      - value: "`FormEvents::PRE_SET_DATA`"
        correct: false
      - value: "`FormEvents::SUBMIT`"
        correct: false
    help: >-
      The `FormEvents::PRE_SUBMIT` event is dispatched before the form's data is
      submitted and mapped. At this stage, listeners have access to the raw
      request data.

      https://symfony.com/doc/current/form/events.html#_snippet_6
  - question: When debugging Symfony services, which console command and option
      would you use to find all services that are tagged with
      `kernel.event_listener`?
    answers:
      - value: "`php bin/console debug:container --tag=kernel.event_listener`"
        correct: true
      - value: "`php bin/console debug:event-listeners`"
        correct: false
      - value: "`php bin/console container:list --tag=kernel.event_listener`"
        correct: false
      - value: "`php bin/console services:tagged kernel.event_listener`"
        correct: false
    help: >-
      The `debug:container` command with the `--tag` option allows you to
      inspect services that have a specific tag, which is useful for
      understanding how different components are integrated.

      https://symfony.com/doc/current/service_container/debug.html#_snippet_2
  - question: You want to validate that a `DateTimeInterface` property
      `deliveryDate` in your `Order` entity is at least 'today'. Which of the
      following Symfony Validator constraints and configurations would achieve
      this?
    answers:
      - value: "PHP Attribute: `#[Assert\\GreaterThanOrEqual('today')]`"
        correct: true
      - value: "YAML: `GreaterThanOrEqual: today`"
        correct: true
      - value: 'XML: `<constraint name="GreaterThanOrEqual">today</constraint>`'
        correct: true
      - value: "PHP Attribute: `#[Assert\\LessThan('today')]`"
        correct: false
    help: |-
      The `GreaterThanOrEqual` constraint can be used with date strings like 'today' to validate `DateTime` objects. It ensures the value is greater than or equal to the specified date.
      https://symfony.com/doc/current/reference/constraints/GreaterThanOrEqual.html#_snippet_2
  - question: Which of the following methods of
      `Symfony\Component\Console\Style\SymfonyStyle` is used to display a
      prominently highlighted admonition message, similar to an error message,
      in the console output?
    answers:
      - value: "`caution()`"
        correct: true
      - value: "`note()`"
        correct: false
      - value: "`warning()`"
        correct: false
      - value: "`error()`"
        correct: false
    help: >-
      The `caution()` method displays a message with prominent highlighting,
      similar to an error, to draw significant attention. The `note()` method
      provides a less prominent highlight.

      https://symfony.com/doc/current/console/style.html#_snippet_5
  - question: When working with Symfony's `Finder` component, which method would you
      use to exclude files that contain a specific string pattern?
    answers:
      - value: "`notContains()`"
        correct: true
      - value: "`excludeContent()`"
        correct: false
      - value: "`withoutContent()`"
        correct: false
      - value: "`filterContent()`"
        correct: false
    help: >-
      The `notContains()` method allows you to filter out files based on whether
      their content matches a given string pattern.

      https://symfony.com/doc/current/components/finder.html#_snippet_11
  - question: What is the purpose of the `kernel.cache_warmer` service tag in Symfony?
    answers:
      - value: To initialize any cache that will be needed by the application and
          prevent the first user from a significant "cache hit".
        correct: true
      - value: To clear the application's cache during deployment.
        correct: false
      - value: To mark a service as eligible for caching its output.
        correct: false
      - value: To register a service that monitors cache usage.
        correct: false
    help: >-
      Services tagged with `kernel.cache_warmer` are executed during the cache
      warming process to pre-populate caches, improving performance for the
      first user request.

      https://symfony.com/doc/current/reference/dic_tags.html#_snippet_13
  - question: Which of the following
      `Symfony\Component\HttpKernel\Event\KernelEvent` methods can be used by an
      event listener to determine if the current request is the main request (as
      opposed to a sub-request)?
    answers:
      - value: "`isMainRequest()`"
        correct: true
      - value: "`getRequestType()` and check against
          `HttpKernelInterface::MAIN_REQUEST`"
        correct: true
      - value: "`isMasterRequest()`"
        correct: false
      - value: "`isSubRequest()` and negate the result"
        correct: false
    help: >-
      The `isMainRequest()` method on `KernelEvent` directly checks if the event
      is for the main request. Alternatively, `getRequestType()` returns
      `HttpKernelInterface::MAIN_REQUEST` or `HttpKernelInterface::SUB_REQUEST`.

      https://symfony.com/doc/current/components/http_kernel.html#_snippet_16
  - question: You need to ensure that a numeric property `age` is greater than 18.
      Which of the following Symfony Validator configurations correctly applies
      the `GreaterThan` constraint?
    answers:
      - value: "PHP Attribute: `#[Assert\\GreaterThan(18)]`"
        correct: true
      - value: "YAML: `age: - GreaterThan: 18`"
        correct: true
      - value: 'XML: `<constraint name="GreaterThan"><option
          name="value">18</option></constraint>`'
        correct: true
      - value: "PHP Metadata: `$metadata->addPropertyConstraint('age', new
          Assert\\GreaterThan(value: 18));`"
        correct: true
      - value: "PHP Attribute: `#[Assert\\GreaterThanOrEqual(19)]`"
        correct: false
    help: |-
      The `GreaterThan` constraint validates that a value is strictly greater than the specified comparison value. It can be configured using PHP attributes, YAML, XML, or PHP metadata.
      https://symfony.com/doc/current/reference/constraints/GreaterThan.html#_snippet_1
  - question: When handling exceptions in Symfony, which event is dispatched when an
      exception is thrown at any point inside `HttpKernel::handle()`?
    answers:
      - value: "`kernel.exception`"
        correct: true
      - value: "`kernel.error`"
        correct: false
      - value: "`kernel.terminate`"
        correct: false
      - value: "`kernel.response`"
        correct: false
    help: >-
      The `kernel.exception` event is specifically dispatched when an exception
      occurs during the request handling process, allowing listeners to create
      an appropriate `Response`.

      https://symfony.com/doc/current/components/http_kernel.html#_snippet_11
  - question: Which of the following `Symfony\Component\Process\Process` methods
      should be used to run a command and immediately throw an exception if the
      process returns a non-zero exit code?
    answers:
      - value: "`mustRun()`"
        correct: true
      - value: "`run()`"
        correct: false
      - value: "`start()`"
        correct: false
      - value: "`execute()`"
        correct: false
    help: >-
      The `mustRun()` method is designed for scenarios where a non-zero exit
      code indicates a critical failure, and an exception should be thrown to
      halt execution.

      https://symfony.com/doc/current/components/process.html#_snippet_12
  - question: You are creating a custom Twig extension. Which method must you
      implement in your extension class to register new filters?
    answers:
      - value: "`getFilters()`"
        correct: true
      - value: "`registerFilters()`"
        correct: false
      - value: "`addFilters()`"
        correct: false
      - value: "`getTwigFilters()`"
        correct: false
    help: >-
      Custom Twig extensions that provide filters must implement the
      `getFilters()` method, which should return an array of `TwigFilter`
      objects.

      https://symfony.com/doc/current/templates.html#_snippet_54
  - question: Which of the following options for the
      `Symfony\Component\Validator\Constraints\Issn` constraint, when set to
      `true`, strictly requires the ISSN value to include a hyphen?
    answers:
      - value: "`requireHyphen`"
        correct: true
      - value: "`caseSensitive`"
        correct: false
      - value: "`strictFormat`"
        correct: false
      - value: "`withHyphen`"
        correct: false
    help: >-
      The `requireHyphen` option controls whether the ISSN must contain a
      hyphen. By default, it allows non-hyphenated values.

      https://symfony.com/doc/current/reference/constraints/Issn.html#_snippet_1
  - question: When using Symfony's `Finder` component, which method allows you to
      sort results by their last modified time?
    answers:
      - value: "`sortByModifiedTime()`"
        correct: true
      - value: "`sortByAccessedTime()`"
        correct: false
      - value: "`sortByChangedTime()`"
        correct: false
      - value: "`sortByDate()`"
        correct: false
    help: >-
      The `sortByModifiedTime()` method sorts the `Finder` results based on the
      last modification time of the files or directories.

      https://symfony.com/doc/current/components/finder.html#_snippet_19
  - question: In Symfony's Monolog configuration, how would you include only
      channels 'foo' and 'bar' for a specific handler in YAML?
    answers:
      - value: "`channels: [foo, bar]`"
        correct: true
      - value: "`channels: only [foo, bar]`"
        correct: false
      - value: "`channels: !foo, !bar`"
        correct: false
      - value: "`channels: all except [!foo, !bar]`"
        correct: false
    help: >-
      To include only specific channels for a Monolog handler, you provide an
      array of channel names under the `channels` key.

      https://symfony.com/doc/current/logging/channels_handlers.html#_snippet_1
  - question: Which of the following
      `Symfony\Component\HttpKernel\Controller\ArgumentResolver` classes is
      responsible for injecting the object representing the current logged-in
      user, requiring type-hinting with `UserInterface` or your custom `User`
      class?
    answers:
      - value: "`UserValueResolver`"
        correct: true
      - value: "`SecurityTokenValueResolver`"
        correct: false
      - value: "`EntityValueResolver`"
        correct: false
      - value: "`VariadicValueResolver`"
        correct: false
    help: >-
      The `UserValueResolver` is a built-in argument resolver that automatically
      injects the currently authenticated user object into controller arguments,
      provided it's type-hinted correctly.

      https://symfony.com/doc/current/controller/value_resolver.html#_snippet_5
  - question: What is the purpose of the `form_rest(form)` Twig function?
    answers:
      - value: To render all form fields that have not yet been explicitly rendered.
        correct: true
      - value: To render only the hidden fields of a form.
        correct: false
      - value: To render the remaining errors of a form.
        correct: false
      - value: To reset the form to its initial state.
        correct: false
    help: >-
      The `form_rest()` function is a convenience helper that ensures all form
      fields, especially hidden ones or those accidentally missed, are rendered.

      https://symfony.com/doc/current/form/form_customization.html#_snippet_11
  - question: You are debugging an issue with event listeners and their execution
      order. Which console command would you use to inspect the event listeners
      registered for the `kernel.exception` event and their priorities?
    answers:
      - value: "`php bin/console debug:event-dispatcher kernel.exception`"
        correct: true
      - value: "`php bin/console debug:listeners kernel.exception`"
        correct: false
      - value: "`php bin/console event:list kernel.exception`"
        correct: false
      - value: "`php bin/console container:debug --event=kernel.exception`"
        correct: false
    help: >-
      The `debug:event-dispatcher` command allows you to inspect all listeners
      and subscribers for a given event, including their priorities, which is
      crucial for debugging event flow.

      https://symfony.com/doc/current/reference/events.html#_snippet_12
  - question: When defining a custom value resolver in Symfony, which service tag
      must be applied for Symfony to discover and use it for argument resolution
      in controllers?
    answers:
      - value: "`controller.argument_value_resolver`"
        correct: true
      - value: "`argument_resolver`"
        correct: false
      - value: "`controller.resolver`"
        correct: false
      - value: "`value_resolver`"
        correct: false
    help: >-
      The `controller.argument_value_resolver` tag is essential for registering
      custom value resolvers with Symfony's dependency injection container,
      making them available for controller argument injection.

      https://symfony.com/doc/current/controller/value_resolver.html#_snippet_9
  - question: Which of the following
      `Symfony\Component\Validator\Constraints\Collection` options, when set to
      `false`, will result in a validation error if the underlying collection
      contains elements not defined in the `fields` option?
    answers:
      - value: "`allowExtraFields`"
        correct: true
      - value: "`allowMissingFields`"
        correct: false
      - value: "`ignoreUndefined`"
        correct: false
      - value: "`strict`"
        correct: false
    help: |-
      The `allowExtraFields` option controls whether the collection validator should allow fields that are not explicitly defined in the `fields` option. Setting it to `false` enforces a strict schema.
      https://symfony.com/doc/current/reference/constraints/Collection.html#_snippet_6
  - question: How can you specify a custom priority for a tagged service in Symfony,
      ensuring it is injected earlier in a collection than services with default
      priority?
    answers:
      - value: By setting the `priority` attribute to a positive integer (e.g., `20`) in
          the service tag definition.
        correct: true
      - value: By setting the `priority` attribute to a negative integer (e.g., `-10`)
          in the service tag definition.
        correct: false
      - value: By implementing a `getPriority()` method in the service class.
        correct: false
      - value: By defining the service earlier in the configuration file.
        correct: false
    help: >-
      Higher `priority` values for service tags mean the service will be
      processed or injected earlier. The default priority is 0.

      https://symfony.com/doc/current/service_container/tags.html#_snippet_26
  - question: Which of the following
      `Symfony\Component\Console\Helper\FormatterHelper` methods is used to
      truncate a message to a specified length, optionally from the end of the
      string using a negative length, and allows customizing the suffix?
    answers:
      - value: "`truncate()`"
        correct: true
      - value: "`shorten()`"
        correct: false
      - value: "`limit()`"
        correct: false
      - value: "`cut()`"
        correct: false
    help: |-
      The `truncate()` method provides flexible string truncation capabilities, including specifying the length, direction of truncation, and the suffix to append.
      https://symfony.com/doc/current/components/console/helpers/formatterhelper.html#_snippet_3
  - question: In Symfony's Serializer component, when deserializing XML data, how
      can you configure the serializer to throw an `ExtraAttributesException` if
      the input data contains attributes not mapped to the target object?
    answers:
      - value: Set `AbstractNormalizer::ALLOW_EXTRA_ATTRIBUTES` to `false` in the
          deserialization context.
        correct: true
      - value: Set `AbstractNormalizer::IGNORE_UNMAPPED_ATTRIBUTES` to `false` in the
          deserialization context.
        correct: false
      - value: Configure the `ObjectNormalizer` with `setAllowExtraAttributes(false)`.
        correct: false
      - value: Enable strict mode on the `XmlEncoder`.
        correct: false
    help: >-
      By setting `AbstractNormalizer::ALLOW_EXTRA_ATTRIBUTES` to `false` in the
      context, the serializer will enforce strict mapping and throw an exception
      for any unmapped attributes in the input data.

      https://symfony.com/doc/current/components/serializer.html#_snippet_6
  - question: Which of the following
      `Symfony\Component\DependencyInjection\ContainerBuilder` methods allows an
      extension to prepend configuration to other extensions, ensuring it's
      merged before their `load` methods are called?
    answers:
      - value: "`prependExtensionConfig(string $name, array $config)`"
        correct: true
      - value: "`addExtensionConfig(string $name, array $config)`"
        correct: false
      - value: "`setExtensionConfig(string $name, array $config)`"
        correct: false
      - value: "`mergeExtensionConfig(string $name, array $config)`"
        correct: false
    help: >-
      The `prependExtensionConfig()` method, typically used within a
      `PrependExtensionInterface` implementation, allows an extension to inject
      configuration that will be merged with existing configurations of other
      bundles.

      https://symfony.com/doc/current/bundles/prepend_extension.html#_snippet_3
  - question: You want to use the `Symfony\Component\String` component and create a
      `UnicodeString` object. Which shortcut function can you use for this
      purpose?
    answers:
      - value: "`u()`"
        correct: true
      - value: "`s()`"
        correct: false
      - value: "`b()`"
        correct: false
      - value: "`str()`"
        correct: false
    help: >-
      The `u()` function is a convenient shortcut to create a `UnicodeString`
      object. The `s()` function creates either a `ByteString` or
      `UnicodeString` based on content, and `b()` creates a `ByteString`.

      https://symfony.com/doc/current/components/string.html#_snippet_4
  - question: Which of the following Monolog processors, built into Symfony's
      MonologBridge, adds information about the current console command to log
      records?
    answers:
      - value: "`ConsoleCommandProcessor`"
        correct: true
      - value: "`WebProcessor`"
        correct: false
      - value: "`RouteProcessor`"
        correct: false
      - value: "`DebugProcessor`"
        correct: false
    help: >-
      The `ConsoleCommandProcessor` is specifically designed to enrich log
      records with details about the currently executing console command.

      https://symfony.com/doc/current/logging/processors.html#_snippet_6
  - question: To customize the error message for the
      `Symfony\Component\Validator\Constraints\LessThanOrEqual` constraint,
      which option should you configure?
    answers:
      - value: "`message`"
        correct: true
      - value: "`errorMessage`"
        correct: false
      - value: "`invalidMessage`"
        correct: false
      - value: "`text`"
        correct: false
    help: |-
      Most Symfony validator constraints, including `LessThanOrEqual`, use the `message` option to allow customization of the validation error message.
      https://symfony.com/doc/current/reference/constraints/LessThanOrEqual.html#_snippet_4
  - question: Which of the following HTTP methods is typically used by APIs for
      modifying existing resources on the server?
    answers:
      - value: PUT
        correct: true
      - value: PATCH
        correct: true
      - value: GET
        correct: false
      - value: POST
        correct: false
      - value: DELETE
        correct: false
    help: |-
      Both PUT and PATCH methods are used for updating resources. PUT typically replaces the entire resource, while PATCH applies partial modifications.
      https://symfony.com/doc/current/introduction/http_fundamentals.html#_snippet_1
  - question: When defining a custom translation loader service in Symfony, which
      service tag is required, and what is the purpose of its mandatory `alias`
      option?
    answers:
      - value: "Tag: `translation.loader`, Alias purpose: Defines a custom format for
          translation files (e.g., `bin`)."
        correct: true
      - value: "Tag: `translator.loader`, Alias purpose: Specifies the locale for the
          loader."
        correct: false
      - value: "Tag: `translation.resource_loader`, Alias purpose: Provides a unique
          identifier for the loader service."
        correct: false
      - value: "Tag: `translator.resource`, Alias purpose: Links the loader to a
          specific translation domain."
        correct: false
    help: >-
      The `translation.loader` tag with a required `alias` option allows you to
      register custom loaders for specific translation file formats (e.g.,
      `.bin` files).

      https://symfony.com/doc/current/reference/dic_tags.html#_snippet_28
  - question: In Symfony's `SessionMetadataBag`, which method would you use to
      retrieve the Unix timestamp when the session was last accessed?
    answers:
      - value: "`getLastUsed()`"
        correct: true
      - value: "`getAccessed()`"
        correct: false
      - value: "`getUpdatedAt()`"
        correct: false
      - value: "`getTimestamp()`"
        correct: false
    help: >-
      The `getLastUsed()` method of `SessionMetadataBag` provides the timestamp
      of the last session activity.

      https://symfony.com/doc/current/session.html#_snippet_18
  - question: You want to implement a custom scheduler trigger that skips tasks on
      holidays. Which interface must your custom trigger class implement?
    answers:
      - value: "`Symfony\\Component\\Scheduler\\Trigger\\TriggerInterface`"
        correct: true
      - value: "`Symfony\\Component\\Scheduler\\Trigger\\SchedulerTriggerInterface`"
        correct: false
      - value: "`Symfony\\Component\\Scheduler\\Trigger\\CustomTriggerInterface`"
        correct: false
      - value: "`Symfony\\Component\\Scheduler\\Trigger\\RunnableTriggerInterface`"
        correct: false
    help: >-
      To create a custom scheduler trigger, your class must implement
      `TriggerInterface` and define the logic for determining the next run date.

      https://symfony.com/doc/current/scheduler.html#_snippet_11
  - question: Which Twig filter transforms a string into a human-readable format
      (e.g., replacing underscores with spaces, capitalizing) and is useful for
      displaying PHP properties?
    answers:
      - value: "`humanize`"
        correct: true
      - value: "`format_text`"
        correct: false
      - value: "`beautify`"
        correct: false
      - value: "`prettify`"
        correct: false
    help: >-
      The `humanize` filter is specifically designed to convert strings, often
      from variable names, into a more readable format for display to users.

      https://symfony.com/doc/current/reference/twig_reference.html#_snippet_18
  - question: When defining a command-line argument in Symfony Console, which
      constant is used to mark the argument as optional?
    answers:
      - value: "`InputArgument::OPTIONAL`"
        correct: true
      - value: "`InputArgument::REQUIRED`"
        correct: false
      - value: "`InputArgument::IS_OPTIONAL`"
        correct: false
      - value: "`InputArgument::VALUE_OPTIONAL`"
        correct: false
    help: |-
      The `InputArgument::OPTIONAL` constant is used when defining a command-line argument to indicate that it is not mandatory for the command to run.
      https://symfony.com/doc/current/components/console/console_arguments.html#_snippet_1
  - question: You are using the Symfony Serializer to denormalize data and want to
      collect all type mismatch exceptions instead of stopping on the first one.
      Which context option should you use?
    answers:
      - value: "`DenormalizerInterface::COLLECT_DENORMALIZATION_ERRORS`"
        correct: true
      - value: "`AbstractNormalizer::ALLOW_PARTIAL_DENORMALIZATION`"
        correct: false
      - value: "`Serializer::CONTINUE_ON_ERROR`"
        correct: false
      - value: "`ObjectNormalizer::COLLECT_ERRORS`"
        correct: false
    help: >-
      Setting `DenormalizerInterface::COLLECT_DENORMALIZATION_ERRORS` to `true`
      allows the serializer to gather all denormalization errors into a
      `PartialDenormalizationException`.

      https://symfony.com/doc/current/components/serializer.html#_snippet_49
  - question: Which of the following
      `Symfony\Component\Validator\Constraints\NoSuspiciousCharacters`
      restriction levels requires the string's characters to be in the ASCII
      range?
    answers:
      - value: "`NoSuspiciousCharacters::RESTRICTION_LEVEL_ASCII`"
        correct: true
      - value: "`NoSuspiciousCharacters::RESTRICTION_LEVEL_SINGLE_SCRIPT`"
        correct: false
      - value: "`NoSuspiciousCharacters::RESTRICTION_LEVEL_MINIMAL`"
        correct: false
      - value: "`NoSuspiciousCharacters::RESTRICTION_LEVEL_HIGH`"
        correct: false
    help: |-
      The `RESTRICTION_LEVEL_ASCII` constant enforces that all characters in the validated string must fall within the ASCII character set.
      https://symfony.com/doc/current/reference/constraints/NoSuspiciousCharacters.html#_snippet_2
  - question: You are documenting a deprecation in Symfony's `UPGRADE.md` for a
      minor version. Which format should you use to specify the deprecated class
      and its replacement?
    answers:
      - value: "`* Deprecate the `Deprecated` class, use `Replacement` instead`"
        correct: true
      - value: "`* `Deprecated` class is deprecated, replace with `Replacement``"
        correct: false
      - value: "`* Removed `Deprecated` class, use `Replacement` instead`"
        correct: false
      - value: "`* `Deprecated` is now soft-deprecated, use `Replacement``"
        correct: false
    help: |-
      For minor version deprecations in `UPGRADE.md`, the standard format is to state 'Deprecate the `Deprecated` class, use `Replacement` instead'.
      https://symfony.com/doc/current/contributing/code/conventions.html#_snippet_8
  - question: Which of the following Symfony `AbstractController` helper methods is
      used to create and return a `JsonResponse` object from given data?
    answers:
      - value: "`json(mixed $data, int $status = 200, array $headers = [], array
          $context = [])`"
        correct: true
      - value: "`jsonResponse(mixed $data, int $status = 200, array $headers = [], array
          $context = [])`"
        correct: false
      - value: "`createJsonResponse(mixed $data, int $status = 200)`"
        correct: false
      - value: "`responseJson(mixed $data)`"
        correct: false
    help: >-
      The `json()` method is a convenient shortcut in `AbstractController` to
      create a `JsonResponse` from PHP data, handling JSON encoding and setting
      appropriate headers.

      https://symfony.com/doc/current/controller.html#_snippet_34
  - question: In Symfony's `Finder` component, how would you filter files to include
      only those modified after 'yesterday'?
    answers:
      - value: "`$finder->date('since yesterday');`"
        correct: true
      - value: "`$finder->date('> yesterday');`"
        correct: false
      - value: "`$finder->modifiedAfter('yesterday');`"
        correct: false
      - value: "`$finder->whereDate('modified', '>', 'yesterday');`"
        correct: false
    help: >-
      The `date()` method in `Finder` supports various relative date formats and
      comparison operators to filter files by their modification time.

      https://symfony.com/doc/current/components/finder.html#_snippet_15
  - question: When defining a service in Symfony, how can you configure an argument
      to be set to `null` if the referenced service does not exist in the
      container?
    answers:
      - value: 'In XML: `<argument type="service" id="logger" on-invalid="null"/>`'
        correct: true
      - value: "In PHP: `service('logger')->nullOnInvalid()`"
        correct: true
      - value: "In YAML: `arguments: ['@?logger']`"
        correct: false
      - value: By type-hinting the argument as nullable (`?LoggerInterface`).
        correct: false
    help: |-
      The `on-invalid="null"` attribute in XML and `nullOnInvalid()` in PHP configuration explicitly tell the container to inject `null` if the service is not found.
      https://symfony.com/doc/current/service_container/optional_dependencies.html#_snippet_0
  - question: Which of the following cron-like aliases is NOT a valid alias for
      recurring messages in the Symfony Scheduler component?
    answers:
      - value: "`#monthly`"
        correct: false
      - value: "`#yearly`"
        correct: false
      - value: "`#annually@midnight`"
        correct: false
      - value: "`#midnight`"
        correct: false
    help: >-
      The provided documentation snippet lists `#annually@midnight`, `#yearly`,
      `#yearly@midnight`, and `#midnight` as valid aliases. `#monthly` is not
      listed.

      https://symfony.com/doc/current/scheduler.html#_snippet_8
  - question: In Symfony's Serializer component, how can you customize the
      serialization of a specific object property (e.g., a `DateTime` object)
      into a desired format (e.g., ISO 8601 string)?
    answers:
      - value: By providing a callback function for the property under
          `AbstractNormalizer::CALLBACKS` in the serialization context.
        correct: true
      - value: By implementing a custom normalizer for the `DateTime` class.
        correct: false
      - value: "By adding a `#[Serializer\\Context(format: 'iso8601')]` attribute to the
          property."
        correct: false
      - value: By configuring the `DateTimeNormalizer` service.
        correct: false
    help: >-
      The `AbstractNormalizer::CALLBACKS` context option allows you to define
      custom callback functions that will be invoked to normalize specific
      properties, providing fine-grained control over their serialized
      representation.

      https://symfony.com/doc/current/components/serializer.html#_snippet_25
  - question: Which of the following `Symfony\Component\Validator\Constraints\Time`
      constraint options determines whether the time should include seconds in
      its validation pattern?
    answers:
      - value: "`withSeconds`"
        correct: true
      - value: "`allowSeconds`"
        correct: false
      - value: "`strictSeconds`"
        correct: false
      - value: "`secondsRequired`"
        correct: false
    help: >-
      The `withSeconds` option, when set to `true` (default), expects a
      `HH:MM:SS` format, and when `false`, it expects `HH:MM`.

      https://symfony.com/doc/current/reference/constraints/Time.html#_snippet_1
  - question: When configuring Monolog in Symfony, how can you prevent specific HTTP
      status codes (e.g., 403, 404) from being logged by a `fingers_crossed`
      handler?
    answers:
      - value: Use the `excluded_http_codes` option in the handler configuration.
        correct: true
      - value: Use the `ignore_http_codes` option in the handler configuration.
        correct: false
      - value: Set a `min_level` for the handler that is higher than the level of these
          errors.
        correct: false
      - value: Implement a custom Monolog processor to filter these codes.
        correct: false
    help: |-
      The `excluded_http_codes` option allows you to specify an array of HTTP status codes that the `fingers_crossed` handler should not log.
      https://symfony.com/doc/current/logging/monolog_exclude_http_codes.html#_snippet_0
  - question: Which of the following Twig filters generates an `<abbr>` element with
      the short name of a PHP class, showing the Fully Qualified Class Name
      (FQCN) in a tooltip?
    answers:
      - value: "`abbr_class`"
        correct: true
      - value: "`php_class`"
        correct: false
      - value: "`class_abbr`"
        correct: false
      - value: "`fqcn_abbr`"
        correct: false
    help: >-
      The `abbr_class` filter is useful for displaying PHP class names in a
      user-friendly way, providing the full class name on hover.

      https://symfony.com/doc/current/reference/twig_reference.html#_snippet_18
  - question: In Symfony's ExpressionLanguage component, which of the following is a
      valid example of a business rule that checks if a user belongs to
      'good_customers' or 'collaborator' groups?
    answers:
      - value: "`user.getGroup() in ['good_customers', 'collaborator']`"
        correct: true
      - value: "`user.group == 'good_customers' or user.group == 'collaborator'`"
        correct: false
      - value: "`user.hasGroup('good_customers') or user.hasGroup('collaborator')`"
        correct: false
      - value: "`in_array(user.getGroup(), ['good_customers', 'collaborator'])`"
        correct: false
    help: |-
      The `in` operator is used in ExpressionLanguage to check if a value exists within a given array, providing a concise way to define such conditions.
      https://symfony.com/doc/current/components/expression_language.html#_snippet_1
  - question: Which of the following `Symfony\Component\Console\Helper\Helper`
      methods is used to format a number of bytes into a human-readable memory
      string (e.g., GiB, MiB, KiB, B)?
    answers:
      - value: "`formatMemory(bytes: int)`"
        correct: true
      - value: "`convertBytes(bytes: int)`"
        correct: false
      - value: "`humanReadableBytes(bytes: int)`"
        correct: false
      - value: "`formatBytes(bytes: int)`"
        correct: false
    help: |-
      The `formatMemory()` method provides a convenient way to display memory sizes in a user-friendly format in console applications.
      https://symfony.com/doc/current/components/console/helpers/formatterhelper.html#_snippet_5
  - question: When using the `Symfony\Component\String\UnicodeString` component,
      which method would you use to extract the part of the string *after* the
      first occurrence of a 'needle' string, optionally including the 'needle'
      itself?
    answers:
      - value: "`after(string $needle, bool $includeNeedle = false)`"
        correct: true
      - value: "`substringAfter(string $needle, bool $includeNeedle = false)`"
        correct: false
      - value: "`extractAfter(string $needle, bool $includeNeedle = false)`"
        correct: false
      - value: "`post(string $needle, bool $includeNeedle = false)`"
        correct: false
    help: >-
      The `after()` method is specifically designed to return the substring that
      follows the first occurrence of a given needle, with an option to include
      the needle.

      https://symfony.com/doc/current/components/string.html#_snippet_14
  - question: You need to clear all configured cache pools in your Symfony
      application using a console command. Which of the following commands
      achieves this?
    answers:
      - value: "`php bin/console cache:pool:clear --all`"
        correct: true
      - value: "`php bin/console cache:clear --all`"
        correct: false
      - value: "`php bin/console cache:pool:clear *`"
        correct: false
      - value: "`php bin/console cache:clear-all`"
        correct: false
    help: >-
      The `cache:pool:clear` command with the `--all` option is used to clear
      all cache pools defined in the application's configuration.

      https://symfony.com/doc/current/cache.html#_snippet_15
  - question: Which of the following
      `Symfony\Component\Validator\Constraints\NegativeOrZero` constraint
      options allows you to customize the error message displayed when
      validation fails?
    answers:
      - value: "`message`"
        correct: true
      - value: "`errorMessage`"
        correct: false
      - value: "`invalidMessage`"
        correct: false
      - value: "`text`"
        correct: false
    help: |-
      The `message` option is standard across Symfony validator constraints for customizing the validation error message.
      https://symfony.com/doc/current/reference/constraints/NegativeOrZero.html#_snippet_1
  - question: When using `fixXmlConfig()` in a Symfony configuration definition, how
      do you handle irregular plural forms (e.g., 'child' to 'children')?
    answers:
      - value: "Provide the singular and then the irregular plural as a second argument:
          `fixXmlConfig('child', 'children')`"
        correct: true
      - value: Symfony automatically handles common irregular plurals, no special
          configuration needed.
        correct: false
      - value: Define a custom pluralization rule in the configuration.
        correct: false
      - value: Use `fixXmlConfig('children')` and ensure the singular is inferred.
        correct: false
    help: |-
      For irregular plurals, `fixXmlConfig()` accepts a second argument to explicitly define the correct plural form, ensuring proper XML to array conversion.
      https://symfony.com/doc/current/components/config/definition.html#_snippet_25
  - question: In Symfony's ICU MessageFormat, which function is used to handle
      ordinal pluralization (e.g., 1st, 2nd, 3rd, 4th)?
    answers:
      - value: "`selectordinal`"
        correct: true
      - value: "`ordinal`"
        correct: true
      - value: "`pluralordinal`"
        correct: false
      - value: "`cardinal`"
        correct: false
    help: |-
      Both `selectordinal` (for detailed rules) and `ordinal` (for simpler formatting) are used for ordinal pluralization in ICU MessageFormat.
      https://symfony.com/doc/current/reference/formats/message_format.html#_snippet_11
  - question: Which of the following `Symfony\Component\Validator\Constraints\Image`
      constraint options, when set to `true`, validates image contents for
      corruption using PHP's `imagecreatefromstring` function?
    answers:
      - value: "`detectCorrupted`"
        correct: true
      - value: "`validateContents`"
        correct: false
      - value: "`checkIntegrity`"
        correct: false
      - value: "`verifyImage`"
        correct: false
    help: |-
      The `detectCorrupted` option enables a check for image corruption, requiring the PHP GD extension.
      https://symfony.com/doc/current/reference/constraints/Image.html#_snippet_6
  - question: When defining a Monolog processor using the `#[AsMonologProcessor]`
      attribute, which attribute parameter allows you to specify the logging
      channel the processor should be pushed to?
    answers:
      - value: "`channel`"
        correct: true
      - value: "`handler`"
        correct: false
      - value: "`channels`"
        correct: false
      - value: "`forChannel`"
        correct: false
    help: >-
      The `channel` parameter of the `#[AsMonologProcessor]` attribute allows
      you to target a specific logging channel for the processor.

      https://symfony.com/doc/current/logging/processors.html#_snippet_5
  - question: You want to exclude a specific service, `App\Handler\Three`, from
      being injected by a tagged iterator in Symfony. Which of the following
      configurations correctly achieves this?
    answers:
      - value: "PHP Attribute: `#[TaggedIterator('app.handler', exclude:
          ['App\\Handler\\Three'])]`"
        correct: true
      - value: "YAML: `!tagged_iterator { tag: app.handler, exclude:
          ['App\\Handler\\Three'] }`"
        correct: true
      - value: "XML: `<exclude>App\\Handler\\Three</exclude>` within the
          `tagged_iterator` argument."
        correct: true
      - value: "PHP Configurator: `tagged_iterator('app.handler', exclude:
          [App\\Handler\\Three::class])`"
        correct: true
    help: >-
      The `exclude` option within the `TaggedIterator` attribute or its
      corresponding configuration allows you to specify services that should be
      explicitly excluded from the injected collection.

      https://symfony.com/doc/current/service_container/tags.html#_snippet_23
  - question: Which of the following
      `Symfony\Component\Validator\Constraints\NotIdenticalTo` constraint
      options allows you to customize the error message displayed when
      validation fails, and includes parameters like `{{ compared_value }}` and
      `{{ compared_value_type }}`?
    answers:
      - value: "`message`"
        correct: true
      - value: "`errorMessage`"
        correct: false
      - value: "`invalidMessage`"
        correct: false
      - value: "`text`"
        correct: false
    help: |-
      The `message` option is used to customize the error message for the `NotIdenticalTo` constraint, providing dynamic parameters for context.
      https://symfony.com/doc/current/reference/constraints/NotIdenticalTo.html#_snippet_1
  - question: In Symfony's `EventDispatcher` component, when no additional data
      needs to be passed to event listeners, which base class should you use for
      the event object?
    answers:
      - value: "`Symfony\\Contracts\\EventDispatcher\\Event`"
        correct: true
      - value: "`Symfony\\Component\\EventDispatcher\\GenericEvent`"
        correct: false
      - value: "`Psr\\EventDispatcher\\EventInterface`"
        correct: false
      - value: "`Symfony\\Component\\EventDispatcher\\Event`"
        correct: false
    help: |-
      For simple events without custom data, the `Symfony\Contracts\EventDispatcher\Event` class is the appropriate choice.
      https://symfony.com/doc/current/components/event_dispatcher.html#_snippet_9
  - question: Which of the following `Symfony\Component\Console\Style\SymfonyStyle`
      methods is used to display a simple, highlighted admonition message (less
      prominent than a caution)?
    answers:
      - value: "`note()`"
        correct: true
      - value: "`info()`"
        correct: false
      - value: "`comment()`"
        correct: false
      - value: "`message()`"
        correct: false
    help: >-
      The `note()` method provides a way to display important but not critical
      information in the console, with a distinct visual style.

      https://symfony.com/doc/current/console/style.html#_snippet_5
  - question: When defining a service in Symfony, how can you configure a tagged
      iterator to use a custom method (e.g., `getPriority()`) on the service
      itself to determine its priority, instead of the default
      `getDefaultPriority()`?
    answers:
      - value: "Using `defaultPriorityMethod: 'getPriority'` in the `TaggedIterator`
          attribute or configuration."
        correct: true
      - value: By implementing
          `Symfony\Component\DependencyInjection\Attribute\PrioritizedTaggedIterator`.
        correct: false
      - value: "By setting `priority_method: 'getPriority'` in the service tag."
        correct: false
      - value: It's not possible to use a custom method for priority; only
          `getDefaultPriority()` is supported.
        correct: false
    help: >-
      The `defaultPriorityMethod` option allows you to specify a custom method
      on the tagged service class that will be called to determine its priority
      within the collection.

      https://symfony.com/doc/current/service_container/tags.html#_snippet_28
  - question: Which of the following `Symfony\Component\Process\Process` methods
      allows you to start a process asynchronously and returns immediately,
      without waiting for the process to terminate?
    answers:
      - value: "`start()`"
        correct: true
      - value: "`run()`"
        correct: false
      - value: "`execute()`"
        correct: false
      - value: "`fork()`"
        correct: false
    help: >-
      The `start()` method initiates the process in the background, allowing
      your PHP script to continue execution without blocking.

      https://symfony.com/doc/current/components/process.html#_snippet_12
  - question: You are preparing for a Symfony minor version upgrade. Which section
      in your `composer.json` file needs to be updated to align the framework's
      internal version requirement with the new minor version?
    answers:
      - value: The `require` key within the `extra.symfony` block.
        correct: true
      - value: The main `require` section for `symfony/symfony`.
        correct: false
      - value: The `config.platform.symfony` key.
        correct: false
      - value: The `minimum-stability` setting.
        correct: false
    help: >-
      During a minor Symfony upgrade, the `require` key inside the
      `extra.symfony` block of `composer.json` must be updated to reflect the
      new minor version (e.g., from `6.3.*` to `6.4.*`).

      https://symfony.com/doc/current/setup/upgrade_minor.html#_snippet_1
  - question: Which of the following `Symfony\Component\Validator\Constraints\Date`
      constraint options allows you to customize the error message displayed if
      the underlying data is not a valid date?
    answers:
      - value: "`message`"
        correct: true
      - value: "`errorMessage`"
        correct: false
      - value: "`invalidDateMessage`"
        correct: false
      - value: "`dateMessage`"
        correct: false
    help: >-
      The `message` option is the standard way to customize the validation error
      message for the `Date` constraint.

      https://symfony.com/doc/current/reference/constraints/Date.html#_snippet_1
  - question: When using `Symfony\Component\EventDispatcher\GenericEvent`, how can
      you filter or modify data passed within the event (e.g., converting a
      string argument to lowercase)?
    answers:
      - value: Access the argument directly as an array element on the `$event` object
          (e.g., `$event['data'] = strtolower($event['data']);`).
        correct: true
      - value: Call `setArgument()` on the `$event` object after retrieving and
          modifying the argument.
        correct: false
      - value: The `GenericEvent` is read-only; you must dispatch a new event with
          modified data.
        correct: false
      - value: Implement a custom `DataTransformerInterface` for the event.
        correct: false
    help: |-
      The `GenericEvent` allows direct access and modification of its arguments as if it were an array, making it convenient for data manipulation within listeners.
      https://symfony.com/doc/current/components/event_dispatcher/generic_event.html#_snippet_3
  - question: You need to validate that a `dateOfBirth` property ensures a person is
      at least 18 years old. Which of the following Symfony Validator
      configurations correctly applies the `LessThan` constraint to achieve
      this?
    answers:
      - value: "PHP Attribute: `#[Assert\\LessThan('-18 years')]`"
        correct: true
      - value: "YAML: `dateOfBirth: - LessThan: -18 years`"
        correct: true
      - value: 'XML: `<constraint name="LessThan">-18 years</constraint>`'
        correct: true
      - value: "PHP Metadata: `$metadata->addPropertyConstraint('dateOfBirth', new
          Assert\\LessThan('-18 years'));`"
        correct: true
      - value: "PHP Attribute: `#[Assert\\GreaterThanOrEqual('+18 years')]`"
        correct: false
    help: |-
      The `LessThan` constraint with a relative date string like `'-18 years'` can be used to validate that a date is earlier than 18 years ago, effectively ensuring a minimum age.
      https://symfony.com/doc/current/reference/constraints/LessThan.html#_snippet_3
  - question: Which of the following `Symfony\Component\Validator\Constraints\Isbn`
      constraint options is used to customize the error message displayed if the
      `type` is `null` and the value fails both ISBN-10 and ISBN-13 checks?
    answers:
      - value: "`bothIsbnMessage`"
        correct: true
      - value: "`message`"
        correct: false
      - value: "`invalidIsbnMessage`"
        correct: false
      - value: "`defaultMessage`"
        correct: false
    help: >-
      The `bothIsbnMessage` option specifically targets the error message when a
      value is neither a valid ISBN-10 nor a valid ISBN-13.

      https://symfony.com/doc/current/reference/constraints/Isbn.html#_snippet_1
  - question: When working with Symfony's `Finder` component, which method allows
      you to sort results by their file extension?
    answers:
      - value: "`sortByExtension()`"
        correct: true
      - value: "`sortByType()`"
        correct: false
      - value: "`sortByName()`"
        correct: false
      - value: "`sortBySuffix()`"
        correct: false
    help: >-
      The `sortByExtension()` method sorts the `Finder` results alphabetically
      based on the file extension.

      https://symfony.com/doc/current/components/finder.html#_snippet_19
  - question: Which of the following `Symfony\Component\Process\Process` methods
      should be used to retrieve all collected standard output from a process
      after it has finished executing?
    answers:
      - value: "`getOutput()`"
        correct: true
      - value: "`getStdout()`"
        correct: false
      - value: "`readOutput()`"
        correct: false
      - value: "`getProcessOutput()`"
        correct: false
    help: >-
      The `getOutput()` method returns the entire standard output stream of the
      process as a string.

      https://symfony.com/doc/current/components/process.html#_snippet_12
  - question: In Symfony's `EventDispatcher` component, how can you extend Symfony's
      event alias mapping for custom events (e.g., mapping
      `App\Event\MyCustomEvent::class` to `my_custom_event`)?
    answers:
      - value: By adding `AddEventAliasesPass` to your `Kernel.php`'s `build()` method.
        correct: true
      - value: By defining aliases in `services.yaml` under a `events.aliases` section.
        correct: false
      - value: By tagging your custom event class with `event.alias`.
        correct: false
      - value: By implementing `EventAliasInterface` in your custom event.
        correct: false
    help: >-
      The `AddEventAliasesPass` compiler pass allows you to register custom
      event aliases, enabling you to refer to your events by a simpler string
      name.

      https://symfony.com/doc/current/event_dispatcher.html#_snippet_10
  - question: Which of the following
      `Symfony\Component\Validator\Constraints\Negative` constraint options
      allows you to customize the error message displayed when the value is not
      less than zero?
    answers:
      - value: "`message`"
        correct: true
      - value: "`errorMessage`"
        correct: false
      - value: "`invalidMessage`"
        correct: false
      - value: "`text`"
        correct: false
    help: |-
      The `message` option is the standard way to customize the validation error message for the `Negative` constraint.
      https://symfony.com/doc/current/reference/constraints/Negative.html#_snippet_1
  - question: In Symfony's `ServiceSubscriberInterface`, how do you declare a
      service as optional within the `getSubscribedServices()` method to prevent
      errors if it's not found in the container?
    answers:
      - value: Prepend its type with a `?` (e.g., `'?'.LoggerInterface::class`).
        correct: true
      - value: Wrap the service ID in `optional()` (e.g.,
          `optional(LoggerInterface::class)`).
        correct: false
      - value: "Add an `optional: true` flag to the service definition."
        correct: false
      - value: Return `null` for the service if it's not available.
        correct: false
    help: |-
      By prepending the service type with a `?`, you signal to the service locator that the service is optional, and its absence should not cause an error.
      https://symfony.com/doc/current/service_container/service_subscribers_locators.html#_snippet_6
  - question: Which of the following `Symfony\Component\String\UnicodeString`
      methods would you use to change all graphemes/code points to 'title case'
      (e.g., 'foo bar' to 'Foo Bar')?
    answers:
      - value: "`title(allWords: true)`"
        correct: true
      - value: "`title()`"
        correct: false
      - value: "`capitalize()`"
        correct: false
      - value: "`toTitleCase()`"
        correct: false
    help: >-
      The `title()` method, especially with `allWords: true`, converts each
      word's first letter to uppercase and the rest to lowercase, achieving
      title case.

      https://symfony.com/doc/current/components/string.html#_snippet_10
  - question: When configuring a Monolog processor, how can you register it to apply
      only to a specific handler (e.g., 'main') using service tags in Symfony?
    answers:
      - value: "Add a `monolog.processor` tag with a `handler` option (e.g., `{ name:
          monolog.processor, handler: main }`)."
        correct: true
      - value: Add a `monolog.processor` tag with a `channel` option set to the
          handler's channel.
        correct: false
      - value: Define the processor as a child service of the specific handler.
        correct: false
      - value: Implement `Monolog\Handler\HandlerAwareInterface` in your processor.
        correct: false
    help: >-
      The `handler` option within the `monolog.processor` tag allows you to
      associate a processor with a particular Monolog handler.

      https://symfony.com/doc/current/logging/processors.html#_snippet_7
  - question: Which of the following `Symfony\Component\Process\Process` methods is
      used to create a new process instance from a shell command line string,
      rather than an array of command parts?
    answers:
      - value: "`fromShellCommandline(string $command, ...)`"
        correct: true
      - value: "`createFromShell(string $command, ...)`"
        correct: false
      - value: "`newShellProcess(string $command, ...)`"
        correct: false
      - value: "`__construct(string $command, ...)`"
        correct: false
    help: >-
      The `fromShellCommandline()` static method is specifically designed for
      creating a `Process` object from a single shell command string.

      https://symfony.com/doc/current/components/process.html#_snippet_12
  - question: What is the purpose of the `WebDebugToolbarListener` in Symfony?
    answers:
      - value: It injects JavaScript into the page to display the web debug toolbar in
          the `dev` environment.
        correct: true
      - value: It collects debugging information from the application for the profiler.
        correct: false
      - value: It handles exceptions and displays them in the web debug toolbar.
        correct: false
      - value: It provides a mechanism to enable or disable the web debug toolbar.
        correct: false
    help: >-
      The `WebDebugToolbarListener` is responsible for integrating the Web Debug
      Toolbar into the rendered HTML, making debugging information accessible in
      the browser.

      https://symfony.com/doc/current/components/http_kernel.html#_snippet_11
  - question: In Symfony's ICU MessageFormat, when combining `select` and `plural`
      functions, what is the purpose of the `offset` option within the `plural`
      function?
    answers:
      - value: To adjust the count used for pluralization, so that `offset:1` means '1
          other person' for a count of 2.
        correct: true
      - value: To define the starting index for the plural categories.
        correct: false
      - value: To specify a fallback message if no plural rule matches.
        correct: false
      - value: To shift the displayed number by a certain value.
        correct: false
    help: |-
      The `offset` option in the `plural` function modifies the number used for pluralization, allowing you to create messages like 'X other people' instead of 'X people'.
      https://symfony.com/doc/current/reference/formats/message_format.html#_snippet_8
  - question: Which of the following `Symfony\Component\String\UnicodeString`
      methods would you use to find the *last* occurrence of a substring within
      a string?
    answers:
      - value: "`indexOfLast()`"
        correct: true
      - value: "`lastIndexOf()`"
        correct: false
      - value: "`findLast()`"
        correct: false
      - value: "`positionLast()`"
        correct: false
    help: >-
      The `indexOfLast()` method returns the position of the last occurrence of
      a substring, or `null` if not found.

      https://symfony.com/doc/current/components/string.html#_snippet_20
  - question: When registering a custom Twig extension as a service in Symfony,
      which service tag is required?
    answers:
      - value: "`twig.extension`"
        correct: true
      - value: "`twig.service`"
        correct: false
      - value: "`app.twig_extension`"
        correct: false
      - value: "`framework.twig_extension`"
        correct: false
    help: >-
      The `twig.extension` tag is used to inform Symfony's dependency injection
      container that a service is a Twig extension and should be registered with
      the Twig environment.

      https://symfony.com/doc/current/reference/dic_tags.html#_snippet_36
  - question: Which of the following
      `Symfony\Component\Validator\Constraints\NotEqualTo` constraint options
      allows you to customize the error message displayed when the value is
      equal to the comparison value?
    answers:
      - value: "`message`"
        correct: true
      - value: "`errorMessage`"
        correct: false
      - value: "`notEqualMessage`"
        correct: false
      - value: "`text`"
        correct: false
    help: |-
      The `message` option is standard across Symfony validator constraints for customizing the validation error message.
      https://symfony.com/doc/current/reference/constraints/NotEqualTo.html#_snippet_1
  - question: You need to retrieve the value of a configuration parameter (e.g.,
      `kernel.bundles`) within a Symfony controller. Which `AbstractController`
      helper method should you use?
    answers:
      - value: "`getParameter(string $name)`"
        correct: true
      - value: "`getContainer()->getParameter(string $name)`"
        correct: false
      - value: "`getParam(string $name)`"
        correct: false
      - value: "`container->getParameter(string $name)`"
        correct: false
    help: >-
      The `getParameter()` method is a convenient shortcut provided by
      `AbstractController` to access parameters from the service container.

      https://symfony.com/doc/current/controller.html#_snippet_34
  - question: When documenting a deprecation in the `UPGRADE.md` file for the *next
      major version*, which format should be used to indicate the removal of a
      class and its replacement?
    answers:
      - value: "`* Remove the `Deprecated` class, use `Replacement` instead`"
        correct: true
      - value: "`* Deprecate the `Deprecated` class, use `Replacement` instead`"
        correct: false
      - value: "`* The `Deprecated` class will be removed, use `Replacement``"
        correct: false
      - value: "`* `Deprecated` is no longer supported, use `Replacement``"
        correct: false
    help: |-
      For removals in the next major version, `UPGRADE.md` specifies 'Remove the `Deprecated` class, use `Replacement` instead'.
      https://symfony.com/doc/current/contributing/code/conventions.html#_snippet_9
  - question: Which of the following `Symfony\Component\Process\Process` methods
      allows you to check if an asynchronously started process is still active?
    answers:
      - value: "`isRunning(): bool`"
        correct: true
      - value: "`isStarted(): bool`"
        correct: false
      - value: "`isActive(): bool`"
        correct: false
      - value: "`getStatus(): int`"
        correct: false
    help: >-
      The `isRunning()` method returns `true` if the process is currently
      executing, and `false` otherwise.

      https://symfony.com/doc/current/components/process.html#_snippet_12
  - question: In Symfony's `Finder` component, how would you sort files by their size?
    answers:
      - value: "`sortBySize()`"
        correct: true
      - value: "`sortByLength()`"
        correct: false
      - value: "`sortByBytes()`"
        correct: false
      - value: "`sortBySizeAsc()`"
        correct: false
    help: >-
      The `sortBySize()` method sorts the `Finder` results based on the size of
      the files.

      https://symfony.com/doc/current/components/finder.html#_snippet_19
  - question: Which of the following
      `Symfony\Component\Validator\Constraints\LessThan` constraint options
      allows you to customize the error message displayed if the value is not
      less than the comparison value?
    answers:
      - value: "`message`"
        correct: true
      - value: "`errorMessage`"
        correct: false
      - value: "`invalidMessage`"
        correct: false
      - value: "`text`"
        correct: false
    help: |-
      The `message` option is standard across Symfony validator constraints for customizing the validation error message.
      https://symfony.com/doc/current/reference/constraints/LessThan.html#_snippet_4
  - question: What is the purpose of the
      `Symfony\Component\Security\Http\Firewall\ContextListener` in Symfony?
    answers:
      - value: It serializes the current user's information into the session for
          persistence across requests.
        correct: true
      - value: It authenticates the user based on the security context.
        correct: false
      - value: It manages the security token for the current request.
        correct: false
      - value: It loads user details from a user provider.
        correct: false
    help: >-
      The `ContextListener` is a `kernel.response` listener that ensures the
      security context (user information) is persisted in the session between
      requests.

      https://symfony.com/doc/current/components/http_kernel.html#_snippet_11
  - question: Which of the following `Symfony\Component\Process\Process` methods is
      used to block execution until an asynchronously started process
      terminates, and can optionally receive a callback for real-time output?
    answers:
      - value: "`wait(?callable $callback = null): int`"
        correct: true
      - value: "`finish(?callable $callback = null): int`"
        correct: false
      - value: "`block(?callable $callback = null): int`"
        correct: false
      - value: "`join(?callable $callback = null): int`"
        correct: false
    help: >-
      The `wait()` method is used to pause the current script's execution until
      the background process completes, and it can also process output in
      real-time via a callback.

      https://symfony.com/doc/current/components/process.html#_snippet_12
  - question: In Symfony's `ServiceSubscriberInterface`, how can you subscribe to a
      service using a custom string key instead of its Fully Qualified Class
      Name (FQCN)?
    answers:
      - value: By returning an associative array where the key is the custom string and
          the value is the FQCN (e.g., `'logger' => LoggerInterface::class`).
        correct: true
      - value: "By using the `#[ServiceSubscriber(key: 'logger')]` attribute."
        correct: false
      - value: By defining an alias for the service in `services.yaml`.
        correct: false
      - value: This is not supported; only FQCNs can be used as keys.
        correct: false
    help: |-
      You can define a custom key for a subscribed service by providing an associative array in `getSubscribedServices()`, mapping your desired key to the service's FQCN.
      https://symfony.com/doc/current/service_container/service_subscribers_locators.html#_snippet_4
  - question: Which of the following
      `Symfony\Component\Validator\Constraints\GreaterThanOrEqual` constraint
      options allows you to customize the error message displayed if the
      validation fails, and includes parameters like `{{ compared_value }}` and
      `{{ compared_value_type }}`?
    answers:
      - value: "`message`"
        correct: true
      - value: "`errorMessage`"
        correct: false
      - value: "`invalidMessage`"
        correct: false
      - value: "`text`"
        correct: false
    help: |-
      The `message` option is standard across Symfony validator constraints for customizing the validation error message.
      https://symfony.com/doc/current/reference/constraints/GreaterThanOrEqual.html#_snippet_6
  - question: When using `Symfony\Component\String\UnicodeString`, which method
      would you use to find the *first* occurrence of a substring within a
      string, with support for an optional offset?
    answers:
      - value: "`indexOf(string $needle, int $offset = 0)`"
        correct: true
      - value: "`find(string $needle, int $offset = 0)`"
        correct: false
      - value: "`position(string $needle, int $offset = 0)`"
        correct: false
      - value: "`firstOccurrence(string $needle, int $offset = 0)`"
        correct: false
    help: >-
      The `indexOf()` method returns the position of the first occurrence of a
      substring, or `null` if not found. It supports a starting offset.

      https://symfony.com/doc/current/components/string.html#_snippet_19
  - question: Which of the following
      `Symfony\Component\Validator\Constraints\GreaterThan` constraint options
      allows you to customize the error message displayed if the value is not
      greater than the comparison value?
    answers:
      - value: "`message`"
        correct: true
      - value: "`errorMessage`"
        correct: false
      - value: "`invalidMessage`"
        correct: false
      - value: "`text`"
        correct: false
    help: |-
      The `message` option is standard across Symfony validator constraints for customizing the validation error message.
      https://symfony.com/doc/current/reference/constraints/GreaterThan.html#_snippet_5
  - question: In Symfony's `Collection` constraint, what is the purpose of the
      `exclude` option within the `Cascade` constraint?
    answers:
      - value: To exclude one or more properties from the cascade validation.
        correct: true
      - value: To specify properties that should always be validated, even if not
          explicitly defined.
        correct: false
      - value: To define properties that should be ignored during the initial validation
          pass.
        correct: false
      - value: To prevent validation of nested collections.
        correct: false
    help: |-
      The `exclude` option in the `Cascade` constraint allows you to selectively prevent certain properties from being validated when the cascade validation is triggered.
      https://symfony.com/doc/current/reference/constraints/Cascade.html#_snippet_1
  - question: Which of the following
      `Symfony\Component\HttpKernel\Controller\ArgumentResolver` classes is
      responsible for automatically querying for a Doctrine entity based on
      route parameters and passing it as an argument to the controller?
    answers:
      - value: "`EntityValueResolver`"
        correct: true
      - value: "`DoctrineEntityResolver`"
        correct: false
      - value: "`ORMValueResolver`"
        correct: false
      - value: "`ModelValueResolver`"
        correct: false
    help: >-
      The `EntityValueResolver` (provided by `DoctrineBridge`) simplifies
      fetching database records by automatically resolving entities from route
      parameters.

      https://symfony.com/doc/current/controller/value_resolver.html#_snippet_5
