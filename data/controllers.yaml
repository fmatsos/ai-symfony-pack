category: Controllers
questions:
  - question: What is the primary purpose of extending
      `Symfony\Bundle\FrameworkBundle\Controller\AbstractController` for your
      Symfony controllers?
    answers:
      - value: To gain access to a suite of helper methods for common controller tasks.
        correct: true
      - value: It is a mandatory requirement for all Symfony 7 controllers.
        correct: false
      - value: To automatically register the controller as a public service.
        correct: false
      - value: To enable automatic routing configuration via annotations.
        correct: false
    help: |-
      The `AbstractController` provides convenient helper methods like `render()`, `generateUrl()`, `redirectToRoute()`, and `json()`, simplifying common controller tasks. It is not mandatory to extend it, but it's a common practice for convenience.
      https://symfony.com/doc/current/controller.html#extending-the-base-controller-class
  - question: Which PHP attribute is commonly used to map a URL path to a controller
      method in Symfony 7?
    answers:
      - value: "`#[Route]`"
        correct: true
      - value: "`#[Path]`"
        correct: false
      - value: "`#[Url]`"
        correct: false
      - value: "`#[MapRoute]`"
        correct: false
    help: >-
      The `Symfony\Component\Routing\Attribute\Route` attribute is the standard
      way to define routes directly on controller methods in Symfony 7.

      https://symfony.com/doc/current/controller.html#routing
  - question: Which Symfony class is typically returned by a controller method to
      represent the HTTP response?
    answers:
      - value: "`Symfony\\Component\\HttpFoundation\\Response`"
        correct: true
      - value: "`Symfony\\Component\\HttpFoundation\\Request`"
        correct: false
      - value: "`Symfony\\Component\\HttpKernel\\Kernel`"
        correct: false
      - value: "`Psr\\Http\\Message\\ResponseInterface`"
        correct: false
    help: >-
      A Symfony controller's primary responsibility is to read from a `Request`
      object and create/return a `Response` object.

      https://symfony.com/doc/current/controller.html#the-response
  - question: You need to generate a URL for a route named `app_product_show` with a
      parameter `id` set to `123`. Which `AbstractController` helper method
      should you use?
    answers:
      - value: "`$this->generateUrl('app_product_show', ['id' => 123])`"
        correct: true
      - value: "`$this->getUrl('app_product_show', ['id' => 123])`"
        correct: false
      - value: "`$this->route('app_product_show', ['id' => 123])`"
        correct: false
      - value: "`$this->path('app_product_show', ['id' => 123])`"
        correct: false
    help: >-
      The `generateUrl()` method of `AbstractController` creates a URL for a
      given route name and parameters.

      https://symfony.com/doc/current/controller.html#generating-urls
  - question: To redirect a user to the route `app_homepage` with an HTTP status
      code of 301 (Moved Permanently), which `AbstractController` helper method
      is most appropriate?
    answers:
      - value: "`$this->redirectToRoute('app_homepage', [], 301)`"
        correct: true
      - value: "`$this->redirect('app_homepage', 301)`"
        correct: false
      - value: "`$this->forward('app_homepage', [], 301)`"
        correct: false
      - value: "`new RedirectResponse($this->generateUrl('app_homepage'), 301)`"
        correct: true
    help: >-
      The `redirectToRoute()` method is a convenient shortcut to create a
      `RedirectResponse` to a specific route. You can specify the HTTP status
      code as the third argument. Alternatively, you can manually create a
      `RedirectResponse` with the generated URL.

      https://symfony.com/doc/current/controller.html#redirecting
  - question: How can you access the `Symfony\Component\HttpFoundation\Request`
      object within a controller method in Symfony 7, assuming autowiring is
      enabled?
    answers:
      - value: By type-hinting `Request $request` as an argument in the controller
          method.
        correct: true
      - value: By calling `$this->getRequest()` if extending `AbstractController`.
        correct: false
      - value: By accessing the global `$_REQUEST` superglobal.
        correct: false
      - value: By calling `Request::createFromGlobals()` inside the method.
        correct: false
    help: >-
      Symfony's argument value resolvers, including `RequestValueResolver`,
      automatically inject the `Request` object when you type-hint it in your
      controller method signature.

      https://symfony.com/doc/current/controller.html#accessing-the-request
  - question: Given a URL `/products?page=5&limit=10`, how would you retrieve the
      `page` query parameter with a default value of `1` inside a controller
      method?
    answers:
      - value: "`$request->query->get('page', 1)`"
        correct: true
      - value: "`$request->get('page', 1)`"
        correct: false
      - value: "`$request->attributes->get('page', 1)`"
        correct: false
      - value: "`$_GET['page'] ?? 1`"
        correct: false
    help: >-
      The `Request` object's `query` property (an instance of `ParameterBag`) is
      used to access query parameters. The `get()` method allows specifying a
      default value.

      https://symfony.com/doc/current/controller.html#accessing-the-request
  - question: Which of the following is the recommended way to generate a 404 Not
      Found HTTP response from a Symfony controller when a resource is not
      found?
    answers:
      - value: Throwing a `NotFoundHttpException`.
        correct: true
      - value: Calling `$this->createNotFoundException()` if extending
          `AbstractController`.
        correct: true
      - value: Returning `new Response('Not Found', 404)`.
        correct: false
      - value: Calling `$this->error(404)`.
        correct: false
    help: >-
      Symfony provides `NotFoundHttpException` for 404 errors.
      `AbstractController` offers a convenient shortcut method,
      `createNotFoundException()`, which internally throws this exception.

      https://symfony.com/doc/current/controller.html#generating-404-pages
  - question: You want to make an internal sub-request to
      `App\Controller\ReportController::generateReport` from your current
      controller, passing `userId` and `format` as arguments. Which
      `AbstractController` method should you use?
    answers:
      - value: "`$this->forward('App\\Controller\\ReportController::generateReport',
          ['userId' => $id, 'format' => 'pdf'])`"
        correct: true
      - value: "`$this->redirectToRoute('report_generate', ['userId' => $id, 'format' =>
          'pdf'])`"
        correct: false
      - value: "`$this->render('report/generate.html.twig', ['userId' => $id, 'format'
          => 'pdf'])`"
        correct: false
      - value: "`$this->call('App\\Controller\\ReportController::generateReport',
          ['userId' => $id, 'format' => 'pdf'])`"
        correct: false
    help: >-
      The `forward()` method allows you to make an internal sub-request to
      another controller action. It returns the `Response` object from the
      forwarded controller.

      https://symfony.com/doc/current/controller/forwarding.html
  - question: How can you inject a service, such as `Psr\Log\LoggerInterface`, into
      a Symfony controller method using autowiring?
    answers:
      - value: By type-hinting the service interface or class as a method argument.
        correct: true
      - value: By manually fetching it from the container using
          `$this->container->get('logger')`.
        correct: false
      - value: "By defining it in `services.yaml` with `arguments: ['@logger']`."
        correct: false
      - value: By using the `#[Inject]` attribute on the method argument.
        correct: false
    help: |-
      Symfony's autowiring automatically injects services into controller action methods when you type-hint the required service's class or interface.
      https://symfony.com/doc/current/controller.html#injecting-services-into-controllers
  - question: You need to inject a specific logger service named
      `monolog.logger.security` into your controller. How would you achieve this
      using PHP attributes?
    answers:
      - value: |-
          ```php
          #[Autowire(service: 'monolog.logger.security')]
          LoggerInterface $securityLogger
          ```
        correct: true
      - value: |-
          ```php
          #[Inject('monolog.logger.security')]
          LoggerInterface $securityLogger
          ```
        correct: false
      - value: |-
          ```php
          #[Service('monolog.logger.security')]
          LoggerInterface $securityLogger
          ```
        correct: false
      - value: |-
          ```php
          #[Target('monolog.logger.security')]
          LoggerInterface $securityLogger
          ```
        correct: false
    help: |-
      The `#[Autowire]` attribute allows for more granular control over dependency injection, including injecting specific named services.
      https://symfony.com/doc/current/controller.html#injecting-specific-services-or-parameters
  - question: "Consider a route `#[Route('/product/{id}')]` and a controller method
      `public function show(Product $product): Response`. What Symfony component
      automatically resolves the `Product` object from the `id` route
      parameter?"
    answers:
      - value: The `EntityValueResolver`.
        correct: true
      - value: The `RequestAttributeValueResolver`.
        correct: false
      - value: The `ServiceValueResolver`.
        correct: false
      - value: The `ParamConverter` (deprecated in Symfony 7 for this use case).
        correct: false
    help: |-
      The `EntityValueResolver` (part of the `ArgumentResolver` component) automatically queries a Doctrine entity based on a route parameter and injects the object.
      https://symfony.com/doc/current/controller/value_resolver.html#entityvalueresolver
  - question: To automatically map an incoming JSON request payload to a `UserDto`
      object in a controller method, which PHP attribute should you use?
    answers:
      - value: "`#[MapRequestPayload]`"
        correct: true
      - value: "`#[MapJson]`"
        correct: false
      - value: "`#[BindPayload]`"
        correct: false
      - value: "`#[RequestBody]`"
        correct: false
    help: >-
      The `#[MapRequestPayload]` attribute automatically maps the request
      payload (e.g., JSON, XML, form data) into a type-hinted object.

      https://symfony.com/doc/current/controller.html#mapping-request-payloads
  - question: You want to map the entire URL query string to a `SearchQueryDto`
      object. Which PHP attribute facilitates this in a controller method?
    answers:
      - value: "`#[MapQueryString]`"
        correct: true
      - value: "`#[MapRequestPayload]`"
        correct: false
      - value: "`#[MapQuery]`"
        correct: false
      - value: "`#[Query]`"
        correct: false
    help: |-
      The `#[MapQueryString]` attribute maps the entire query string into a single DTO object, simplifying parameter handling.
      https://symfony.com/doc/current/controller.html#mapping-the-entire-query-string-to-a-dto
  - question: How would you map a specific query parameter `firstName` from the URL
      to a `string` argument in your controller method?
    answers:
      - value: |-
          ```php
          #[MapQueryParameter]
          string $firstName
          ```
        correct: true
      - value: |-
          ```php
          #[QueryParameter('firstName')]
          string $firstName
          ```
        correct: false
      - value: |-
          ```php
          #[RequestParameter('firstName')]
          string $firstName
          ```
        correct: false
      - value: |-
          ```php
          string $firstName = $request->query->get('firstName')
          ```
        correct: false
    help: |-
      The `#[MapQueryParameter]` attribute automatically maps individual query parameters from the URL query string to controller action arguments.
      https://symfony.com/doc/current/controller.html#mapping-individual-query-parameters
  - question: What is an 'invokable controller' in Symfony, and how is its main
      method typically named?
    answers:
      - value: A controller class that defines a `__invoke()` method, allowing the class
          instance itself to be called as a function.
        correct: true
      - value: A controller that can be called via a console command.
        correct: false
      - value: A controller that uses the `#[Invoke]` attribute.
        correct: false
      - value: A controller that returns an invokable object.
        correct: false
    help: |-
      An invokable controller is a class that implements the `__invoke()` magic method. This allows the class name itself to be used as the controller reference in routing, making it suitable for single-action controllers.
      https://symfony.com/doc/current/controller/service.html#invokable-controllers
  - question: By default, how does Symfony register controller classes as services
      to enable autowiring and dependency injection?
    answers:
      - value: By automatically tagging them with `controller.service_arguments` when
          they are located in the `src/Controller/` directory.
        correct: true
      - value: By requiring them to extend `AbstractController`.
        correct: false
      - value: By explicitly defining them as services in `config/services.yaml`.
        correct: false
      - value: By using the `#[AsController]` attribute on the class.
        correct: true
    help: |-
      Symfony automatically registers classes in `src/Controller/` as services and applies the `controller.service_arguments` tag, enabling autowiring. The `#[AsController]` attribute explicitly applies this tag.
      https://symfony.com/doc/current/controller/service.html#controllers-as-services
  - question: How do you add a 'success' flash message with the content 'Item saved
      successfully!' from within a Symfony controller?
    answers:
      - value: "`$this->addFlash('success', 'Item saved successfully!')`"
        correct: true
      - value: "`$session->getFlashBag()->add('success', 'Item saved successfully!')`"
        correct: true
      - value: "`$this->get('session')->getFlashBag()->add('success', 'Item saved
          successfully!')`"
        correct: false
      - value: "`$this->flash('success', 'Item saved successfully!')`"
        correct: false
    help: >-
      If extending `AbstractController`, use the `addFlash()` helper. Otherwise,
      inject the `SessionInterface` and use its `getFlashBag()->add()` method.

      https://symfony.com/doc/current/controller.html#flash-messages
  - question: Where are flash messages stored, and how are they typically retrieved
      in a Twig template?
    answers:
      - value: They are stored in the user's session and retrieved in Twig using
          `app.flashes`.
        correct: true
      - value: They are stored in cookies and retrieved in Twig using
          `app.request.cookies.flashes`.
        correct: false
      - value: They are stored in the database and retrieved via a custom service.
        correct: false
      - value: They are stored in the request attributes and retrieved in Twig using
          `app.request.attributes.flashes`.
        correct: false
    help: >-
      Flash messages are temporary session messages. They are added to the
      session and automatically cleared after being retrieved, typically in a
      Twig template via the `app.flashes` global variable.

      https://symfony.com/doc/current/controller.html#flash-messages
  - question: To return a JSON response from a controller, which
      `AbstractController` helper method is provided?
    answers:
      - value: "`$this->json($data, $status, $headers, $context)`"
        correct: true
      - value: "`$this->renderJson($data)`"
        correct: false
      - value: "`new JsonResponse($data)`"
        correct: true
      - value: "`$this->responseJson($data)`"
        correct: false
    help: >-
      The `json()` method of `AbstractController` is a convenient way to create
      and return a `JsonResponse` object. You can also instantiate
      `JsonResponse` directly.

      https://symfony.com/doc/current/controller.html#returning-json-response
  - question: You need to serve a file located at `/path/to/document.pdf` as a
      download. Which `AbstractController` helper method is suitable for this?
    answers:
      - value: "`$this->file('/path/to/document.pdf', 'report.pdf', 'attachment')`"
        correct: true
      - value: "`$this->download('/path/to/document.pdf')`"
        correct: false
      - value: "`$this->stream('/path/to/document.pdf')`"
        correct: false
      - value: "`new BinaryFileResponse('/path/to/document.pdf')`"
        correct: true
    help: >-
      The `file()` method of `AbstractController` creates and returns a
      `BinaryFileResponse` for serving files. You can specify the filename and
      disposition. Directly instantiating `BinaryFileResponse` is also an
      option.

      https://symfony.com/doc/current/controller.html#serving-files
  - question: How can you access a configuration parameter, such as
      `kernel.project_dir`, from within a Symfony controller?
    answers:
      - value: Using `$this->getParameter('kernel.project_dir')` if extending
          `AbstractController`.
        correct: true
      - value: By injecting `ParameterBagInterface $parameterBag` and using
          `$parameterBag->get('kernel.project_dir')`.
        correct: true
      - value: By accessing `$_ENV['KERNEL_PROJECT_DIR']`.
        correct: false
      - value: By calling `Kernel::getProjectDir()`.
        correct: false
    help: |-
      The `getParameter()` method is a helper provided by `AbstractController`. You can also inject the `ParameterBagInterface` service to access parameters.
      https://symfony.com/doc/current/controller.html#accessing-configuration-parameters
  - question: Which Twig function allows you to embed the output of another Symfony
      controller directly into a template?
    answers:
      - value: "`render()`"
        correct: true
      - value: "`include()`"
        correct: false
      - value: "`embed()`"
        correct: false
      - value: "`controller_embed()`"
        correct: false
    help: >-
      The `render()` Twig function is used to make an internal request to a URI
      or controller and return its output, allowing for embedding controllers.

      https://symfony.com/doc/current/templates.html#embedding-controllers
  - question: What is the purpose of the `framework.fragments.path` configuration
      option in Symfony?
    answers:
      - value: It defines the special URL path used by Symfony to serve template
          fragments when controllers are embedded using the `controller()` Twig
          function.
        correct: true
      - value: It specifies the default path for Twig templates.
        correct: false
      - value: It configures the location for cached template fragments.
        correct: false
      - value: It enables ESI (Edge Side Includes) for controller embedding.
        correct: false
    help: >-
      The `framework.fragments.path` configuration option sets the internal URL
      path for Symfony to handle sub-requests generated by `controller()` in
      Twig, without requiring a public route for the embedded controller.

      https://symfony.com/doc/current/templates.html#embedding-controllers
  - question: Which Symfony event is dispatched after the controller has been
      determined but *before* it is executed, allowing for its modification?
    answers:
      - value: "`kernel.controller`"
        correct: true
      - value: "`kernel.request`"
        correct: false
      - value: "`kernel.response`"
        correct: false
      - value: "`kernel.view`"
        correct: false
    help: >-
      The `kernel.controller` event is dispatched by `HttpKernel::handle()`
      immediately after the controller callable has been determined, allowing
      listeners to inspect or modify it.

      https://symfony.com/doc/current/reference/events.html#kernel-controller
  - question: Which Symfony event is dispatched just before a controller is called,
      allowing modification of the arguments passed to it?
    answers:
      - value: "`kernel.controller_arguments`"
        correct: true
      - value: "`kernel.controller`"
        correct: false
      - value: "`kernel.request`"
        correct: false
      - value: "`kernel.view`"
        correct: false
    help: |-
      The `kernel.controller_arguments` event is dispatched just before the controller is executed, providing an opportunity to modify the arguments that will be passed to it.
      https://symfony.com/doc/current/reference/events.html#kernel-controller-arguments
  - question: If a controller returns a value that is *not* a `Response` object,
      which Symfony event is dispatched to allow transformation of this value
      into a `Response`?
    answers:
      - value: "`kernel.view`"
        correct: true
      - value: "`kernel.response`"
        correct: false
      - value: "`kernel.finish_request`"
        correct: false
      - value: "`kernel.terminate`"
        correct: false
    help: >-
      The `kernel.view` event is dispatched only if the controller does not
      return a `Response` object, allowing listeners to transform the return
      value into a `Response`.

      https://symfony.com/doc/current/reference/events.html#kernel-view
  - question: To apply a security check, such as requiring `ROLE_ADMIN`, to *all*
      actions within an `AdminController` class, where would you place the
      `#[IsGranted]` attribute?
    answers:
      - value: On the `AdminController` class definition.
        correct: true
      - value: On the constructor of the `AdminController`.
        correct: false
      - value: In `config/security.yaml` under `access_control`.
        correct: true
      - value: Within each method of the `AdminController`.
        correct: false
    help: |-
      The `#[IsGranted]` attribute can be applied to an entire controller class to enforce access control for all its methods. Alternatively, `access_control` rules in `security.yaml` can achieve the same.
      https://symfony.com/doc/current/security.html#securing-controllers-and-templates
  - question: How can you use the `#[IsGranted]` attribute to apply a more complex
      security expression, such as requiring either `ROLE_ADMIN` or
      `ROLE_MANAGER`?
    answers:
      - value: >-
          ```php

          #[IsGranted(new Expression('is_granted("ROLE_ADMIN") or
          is_granted("ROLE_MANAGER")'))]

          ```
        correct: true
      - value: |-
          ```php
          #[IsGranted(['ROLE_ADMIN', 'ROLE_MANAGER'])]
          ```
        correct: false
      - value: |-
          ```php
          #[IsGranted('ROLE_ADMIN || ROLE_MANAGER')]
          ```
        correct: false
      - value: |-
          ```php
          #[IsGranted(roles: ['ROLE_ADMIN', 'ROLE_MANAGER'])]
          ```
        correct: false
    help: |-
      The `#[IsGranted]` attribute accepts a Symfony Expression Language `Expression` object for complex authorization rules.
      https://symfony.com/doc/current/security/expressions.html#using-expressions-in-isgranted
  - question: Which `AbstractController` method can be used to programmatically
      enforce access control within a controller action, throwing an
      `AccessDeniedException` if the condition is not met?
    answers:
      - value: "`$this->denyAccessUnlessGranted('ROLE_ADMIN')`"
        correct: true
      - value: "`$this->isGranted('ROLE_ADMIN')`"
        correct: false
      - value: "`$this->checkAccess('ROLE_ADMIN')`"
        correct: false
      - value: "`$this->throwAccessDeniedUnlessGranted('ROLE_ADMIN')`"
        correct: false
    help: |-
      The `denyAccessUnlessGranted()` method is a convenient helper in `AbstractController` to enforce security rules programmatically. It throws an `AccessDeniedException` if the user does not have the required access.
      https://symfony.com/doc/current/security.html#checking-access-inside-a-controller
  - question: Which `AbstractController` method allows you to send HTTP 103 Early
      Hints to the client for preloading resources?
    answers:
      - value: "`$this->sendEarlyHints($links)`"
        correct: true
      - value: "`$this->preloadResources($links)`"
        correct: false
      - value: "`$this->addLinkHeader($links)`"
        correct: false
      - value: "`$this->earlyHints($links)`"
        correct: false
    help: >-
      The `sendEarlyHints()` method in `AbstractController` allows you to send
      HTTP 103 Early Hints, which can improve perceived performance by allowing
      browsers to prefetch resources. This feature requires SAPI support (e.g.,
      FrankenPHP).

      https://symfony.com/doc/current/controller.html#sending-early-hints
  - question: When creating a custom argument value resolver, what Symfony service
      tag must be applied to its service definition for Symfony to discover and
      use it?
    answers:
      - value: "`controller.argument_value_resolver`"
        correct: true
      - value: "`argument_resolver`"
        correct: false
      - value: "`kernel.argument_resolver`"
        correct: false
      - value: "`controller.resolver`"
        correct: false
    help: |-
      Custom argument value resolvers must be tagged with `controller.argument_value_resolver` in your service configuration to be recognized by Symfony's argument resolution system.
      https://symfony.com/doc/current/controller/value_resolver.html#registering-the-value-resolver
  - question: To explicitly target a specific argument resolver for a controller
      argument, for example, `SessionValueResolver::class` for a nullable
      `SessionInterface $session` argument, which PHP attribute would you use?
    answers:
      - value: |-
          ```php
          #[ValueResolver(SessionValueResolver::class)]
          SessionInterface $session = null
          ```
        correct: true
      - value: |-
          ```php
          #[TargetResolver(SessionValueResolver::class)]
          SessionInterface $session = null
          ```
        correct: false
      - value: |-
          ```php
          #[ResolveWith(SessionValueResolver::class)]
          SessionInterface $session = null
          ```
        correct: false
      - value: |-
          ```php
          #[ArgumentResolver(SessionValueResolver::class)]
          SessionInterface $session = null
          ```
        correct: false
    help: |-
      The `#[ValueResolver]` attribute allows you to explicitly specify which argument resolver should be used for a particular controller argument, overriding the default resolution order.
      https://symfony.com/doc/current/controller/value_resolver.html#targeting-a-specific-argument-resolver
  - question: Which built-in argument resolver in Symfony automatically converts a
      request attribute into a `DateTimeInterface` object?
    answers:
      - value: "`DateTimeValueResolver`"
        correct: true
      - value: "`DateValueResolver`"
        correct: false
      - value: "`RequestAttributeValueResolver`"
        correct: false
      - value: "`ObjectValueResolver`"
        correct: false
    help: |-
      The `DateTimeValueResolver` attempts to find a request attribute matching the argument name and injects a `DateTimeInterface` object if type-hinted correctly.
      https://symfony.com/doc/current/controller/value_resolver.html#built-in-argument-resolvers
  - question: Which built-in argument resolver is responsible for injecting services
      from the dependency injection container into controller arguments based on
      type hints?
    answers:
      - value: "`ServiceValueResolver`"
        correct: true
      - value: "`AutowireValueResolver`"
        correct: false
      - value: "`DependencyValueResolver`"
        correct: false
      - value: "`ContainerValueResolver`"
        correct: false
    help: |-
      The `ServiceValueResolver` injects services from the dependency injection container if the argument is type-hinted with a valid service class or interface.
      https://symfony.com/doc/current/controller/value_resolver.html#built-in-argument-resolvers
  - question: Which built-in argument resolver injects the current
      `Symfony\Component\HttpFoundation\Request` object into a controller
      argument type-hinted with `Request`?
    answers:
      - value: "`RequestValueResolver`"
        correct: true
      - value: "`HttpRequestValueResolver`"
        correct: false
      - value: "`GlobalRequestValueResolver`"
        correct: false
      - value: "`RequestObjectValueResolver`"
        correct: false
    help: |-
      The `RequestValueResolver` injects the current `Symfony\Component\HttpFoundation\Request` object if the controller argument is type-hinted with `Request` or a class extending `Request`.
      https://symfony.com/doc/current/controller/value_resolver.html#built-in-argument-resolvers
  - question: If a controller argument has a default value (e.g., `int $page = 1`)
      and no other resolver provides a value, which built-in argument resolver
      sets this default?
    answers:
      - value: "`DefaultValueResolver`"
        correct: true
      - value: "`OptionalValueResolver`"
        correct: false
      - value: "`FallbackValueResolver`"
        correct: false
      - value: "`ArgumentDefaultValueResolver`"
        correct: false
    help: |-
      The `DefaultValueResolver` sets the default value of the argument if a default is present in the method signature and the argument is optional (not provided by other resolvers).
      https://symfony.com/doc/current/controller/value_resolver.html#built-in-argument-resolvers
  - question: What is the typical naming convention for controller classes in a
      Symfony application?
    answers:
      - value: Classes typically end with `Controller` (e.g., `ProductController`).
        correct: true
      - value: Classes typically end with `Action` (e.g., `ProductAction`).
        correct: false
      - value: Classes are named after the entity they manage (e.g., `Product`).
        correct: false
      - value: Classes are named after the route (e.g., `AppLuckyNumber`).
        correct: false
    help: >-
      Symfony encourages naming controller classes with the `Controller` suffix
      (e.g., `LuckyController`, `ProductController`) and placing them in the
      `src/Controller/` directory.

      https://symfony.com/doc/current/controller.html#basic-controller
  - question: In a Symfony application, what is the primary role of the
      `public/index.php` file?
    answers:
      - value: It acts as the front controller, handling all incoming HTTP requests.
        correct: true
      - value: It defines all the application's routes.
        correct: false
      - value: It contains the main application logic and business rules.
        correct: false
      - value: It is responsible for rendering all Twig templates.
        correct: false
    help: |-
      The `public/index.php` file is the front controller. All requests are routed through this single entry point, which then bootstraps the Symfony application and dispatches the request to the appropriate controller.
      https://symfony.com/doc/current/configuration/front_controllers_and_kernel.html
  - question: When handling a form submission in a Symfony controller, what is the
      correct sequence of actions after creating the form instance?
    answers:
      - value: Handle the request, check if the form is submitted, then check if it's
          valid.
        correct: true
      - value: Check if the form is submitted, then handle the request, then check
          validity.
        correct: false
      - value: Check if the form is valid, then handle the request, then check
          submission.
        correct: false
      - value: Handle the request, then check if it's valid, then check if it's
          submitted.
        correct: false
    help: >-
      The typical flow for form handling in a controller is: create form, call
      `handleRequest($request)`, then check `isSubmitted()` and `isValid()`.

      https://symfony.com/doc/current/forms.html#handling-form-submissions
  - question: After processing a form in a controller, how do you typically pass the
      form object to a Twig template for rendering?
    answers:
      - value: "By passing the form's view object to the `render()` method: `return
          $this->render('template.html.twig', ['form' => $form->createView()])`"
        correct: true
      - value: "By passing the form instance directly: `return
          $this->render('template.html.twig', ['form' => $form])`"
        correct: false
      - value: By making the form globally available in Twig.
        correct: false
      - value: By calling `$form->render()` and passing the HTML string.
        correct: false
    help: >-
      You pass the form's view object (obtained via `$form->createView()`) to
      the template. Twig's form rendering functions then use this view object.

      https://symfony.com/doc/current/forms.html#rendering-the-form
  - question: To map a request payload containing a nested array of DTOs (e.g.,
      `UserDto[]` within an `EmployeesDto`), what additional PHP packages are
      required for `MapRequestPayload` to work correctly?
    answers:
      - value: "`phpstan/phpdoc-parser` and `phpdocumentor/type-resolver`"
        correct: true
      - value: "`symfony/serializer` and `symfony/property-access`"
        correct: false
      - value: "`doctrine/annotations` and `doctrine/collections`"
        correct: false
      - value: No additional packages are required; it works out-of-the-box.
        correct: false
    help: >-
      For mapping nested DTO arrays, `MapRequestPayload` relies on
      `phpstan/phpdoc-parser` and `phpdocumentor/type-resolver` to correctly
      parse PHP DocBlocks for type information.

      https://symfony.com/doc/current/controller.html#mapping-nested-dto-arrays
  - question: How can you execute a Symfony console command (e.g., `debug:twig`)
      programmatically from within a controller?
    answers:
      - value: By creating an `Application` instance, setting `setAutoExit(false)`,
          creating an `ArrayInput`, and running the command with a
          `BufferedOutput`.
        correct: true
      - value: By calling `$this->runCommand('debug:twig')`.
        correct: false
      - value: By injecting the `CommandBusInterface` and dispatching a command message.
        correct: false
      - value: By using `exec('php bin/console debug:twig')`.
        correct: false
    help: >-
      To run a console command programmatically, you need to instantiate
      `Symfony\Bundle\FrameworkBundle\Console\Application`, configure it not to
      exit, and provide `ArrayInput` and `BufferedOutput` objects.

      https://symfony.com/doc/current/console/command_in_controller.html
  - question: You want to create a `Response` object with a 200 OK status code and
      custom content type `text/css`. How would you achieve this?
    answers:
      - value: |-
          ```php
          $response = new Response('<style> ... </style>');
          $response->headers->set('Content-Type', 'text/css');
          ```
        correct: true
      - value: >-
          ```php

          $response = new Response('<style> ... </style>', 200, ['Content-Type'
          => 'text/css']);

          ```
        correct: true
      - value: |-
          ```php
          $response = $this->renderCss('<style> ... </style>');
          ```
        correct: false
      - value: |-
          ```php
          $response = new Response();
          $response->setContent('<style> ... </style>');
          $response->setStatusCode(Response::HTTP_OK);
          $response->setContentType('text/css');
          ```
        correct: false
    help: >-
      You can set headers on a `Response` object using its `headers` property,
      which is a `HeaderBag` instance. You can also pass headers directly in the
      constructor.

      https://symfony.com/doc/current/controller.html#creating-a-response
  - question: Which of the following is a valid way to set a `Cache-Control` header
      on a `Response` object in Symfony?
    answers:
      - value: "`$response->headers->set('Cache-Control', 'max-age=3600, public');`"
        correct: true
      - value: "`$response->setCacheControl('max-age=3600, public');`"
        correct: false
      - value: "`$response->cache('max-age=3600, public');`"
        correct: false
      - value: "`$response->withCacheControl('max-age=3600, public');`"
        correct: false
    help: |-
      HTTP headers, including `Cache-Control`, are managed via the `Response` object's `headers` property, which is a `HeaderBag`.
      https://symfony.com/doc/current/components/http_foundation.html#response-headers
  - question: How can a cookie be set on the `Response` object in a Symfony controller?
    answers:
      - value: >-
          ```php

          use Symfony\Component\HttpFoundation\Cookie;

          $response->headers->setCookie(new Cookie('my_cookie', 'cookie_value',
          time() + 3600));

          ```
        correct: true
      - value: |-
          ```php
          $response->setCookie('my_cookie', 'cookie_value');
          ```
        correct: false
      - value: |-
          ```php
          $response->addHeader('Set-Cookie', 'my_cookie=cookie_value');
          ```
        correct: false
      - value: |-
          ```php
          setcookie('my_cookie', 'cookie_value');
          ```
        correct: false
    help: >-
      The `Response` object's `headers` property provides the `setCookie()`
      method, which accepts a `Cookie` object. This is the recommended way to
      manage cookies.

      https://symfony.com/doc/current/components/http_foundation.html#cookies
  - question: How can a cookie value be retrieved from the `Request` object in a
      Symfony controller?
    answers:
      - value: "`$request->cookies->get('cookie_name')`"
        correct: true
      - value: "`$request->getCookie('cookie_name')`"
        correct: false
      - value: "`$_COOKIE['cookie_name']`"
        correct: false
      - value: "`$request->headers->get('Cookie')['cookie_name']`"
        correct: false
    help: >-
      The `Request` object's `cookies` property (an instance of `ParameterBag`)
      is used to access cookie values.

      https://symfony.com/doc/current/components/http_foundation.html#cookies
  - question: How do you access the session object within a Symfony controller,
      assuming you extend `AbstractController`?
    answers:
      - value: "`$this->get('session')`"
        correct: false
      - value: "`$this->session`"
        correct: false
      - value: By type-hinting `SessionInterface $session` as a method argument.
        correct: true
      - value: "`$this->container->get('session')`"
        correct: false
    help: >-
      The recommended way to access the session is by type-hinting
      `SessionInterface` in your controller method, allowing Symfony's
      autowiring to inject it.

      https://symfony.com/doc/current/components/http_foundation.html#sessions
  - question: To store a value `user_id` with data `123` in the session from a
      Symfony controller, which method would you use?
    answers:
      - value: "`$session->set('user_id', 123)`"
        correct: true
      - value: "`$session->add('user_id', 123)`"
        correct: false
      - value: "`$session->store('user_id', 123)`"
        correct: false
      - value: "`$session->attributes->set('user_id', 123)`"
        correct: false
    help: >-
      The `SessionInterface` provides `set()` and `get()` methods to store and
      retrieve data from the session.

      https://symfony.com/doc/current/components/http_foundation.html#sessions
  - question: How do you access uploaded files from the `Request` object in a
      Symfony controller?
    answers:
      - value: "`$request->files->get('form_field_name')`"
        correct: true
      - value: "`$request->getUploadedFile('form_field_name')`"
        correct: false
      - value: "`$_FILES['form_field_name']`"
        correct: false
      - value: "`$request->query->get('form_field_name')`"
        correct: false
    help: |-
      Uploaded files are accessible via the `files` property of the `Request` object, which is an instance of `FileBag`.
      https://symfony.com/doc/current/components/http_foundation.html#uploaded-files
  - question: Which built-in argument resolver is responsible for resolving a backed
      enum case from a route path parameter?
    answers:
      - value: "`BackedEnumValueResolver`"
        correct: true
      - value: "`EnumValueResolver`"
        correct: false
      - value: "`ScalarValueResolver`"
        correct: false
      - value: "`MapEnum`"
        correct: false
    help: |-
      The `BackedEnumValueResolver` attempts to resolve a backed enum case from a route path parameter that matches the name of the argument, leading to a 404 if the value is invalid.
      https://symfony.com/doc/current/controller/value_resolver.html#built-in-argument-resolvers
  - question: Which of the following is a valid way to define an invokable
      controller in Symfony 7 for the route `/hello/{name}`?
    answers:
      - value: |-
          ```php
          #[Route('/hello/{name}', name: 'hello')]
          class HelloController
          {
              public function __invoke(string $name = 'World'): Response
              {
                  // ...
              }
          }
          ```
        correct: true
      - value: |-
          ```php
          #[Route('/hello/{name}', name: 'hello')]
          class HelloController implements InvokableControllerInterface
          {
              public function invoke(string $name = 'World'): Response
              {
                  // ...
              }
          }
          ```
        correct: false
      - value: |-
          ```php
          #[Route('/hello/{name}', name: 'hello', controller: '__invoke')]
          class HelloController
          {
              public function __invoke(string $name = 'World'): Response
              {
                  // ...
              }
          }
          ```
        correct: false
    help: |-
      An invokable controller defines a `__invoke()` method. When routing to such a class, Symfony automatically calls this method.
      https://symfony.com/doc/current/controller/service.html#invokable-controllers
  - question: What is the primary benefit of using `#[MapRequestPayload]` or
      `#[MapQueryString]` over manually accessing request parameters?
    answers:
      - value: They automatically deserialize and validate request data into structured
          PHP objects (DTOs).
        correct: true
      - value: They improve routing performance by pre-parsing request data.
        correct: false
      - value: They eliminate the need for the `Request` object in controllers.
        correct: false
      - value: They provide built-in caching for request parameters.
        correct: false
    help: >-
      These attributes streamline data handling by automatically mapping request
      data to DTOs, including deserialization and validation, leading to cleaner
      and more robust controller code.

      https://symfony.com/doc/current/controller.html#mapping-request-payloads
  - question: When defining a custom error controller in Symfony, which
      configuration option in `framework.yaml` (or equivalent XML/PHP) is used?
    answers:
      - value: "`error_controller`"
        correct: true
      - value: "`exception_controller`"
        correct: false
      - value: "`404_controller`"
        correct: false
      - value: "`app_error_handler`"
        correct: false
    help: |-
      The `error_controller` option in the `framework` configuration specifies the controller that handles exceptions thrown anywhere in your application.
      https://symfony.com/doc/current/reference/configuration/framework.html#error-controller
  - question: Which of the following is true regarding the
      `ControllerResolverInterface` in Symfony's HttpKernel component?
    answers:
      - value: It is responsible for determining the executable controller callable from
          a `Request` object.
        correct: true
      - value: It is responsible for resolving the arguments to be passed to the
          controller.
        correct: false
      - value: It instantiates the controller class with its constructor arguments.
        correct: false
      - value: It is typically implemented by the `HttpKernel` class directly.
        correct: false
    help: |-
      The `ControllerResolverInterface` defines the contract for finding the controller callable. Its implementation (`ControllerResolver`) looks for the `_controller` attribute in the request.
      https://symfony.com/doc/current/components/http_kernel.html#controller-resolution
  - question: Which of the following is true regarding the
      `ArgumentResolverInterface` in Symfony's HttpKernel component?
    answers:
      - value: It determines and returns an array of arguments to pass to the given
          controller callable.
        correct: true
      - value: It uses PHP reflection to identify the names and types of expected
          arguments.
        correct: true
      - value: It is responsible for finding the controller callable itself.
        correct: false
      - value: It only resolves arguments that are explicitly defined as route
          parameters.
        correct: false
    help: |-
      The `ArgumentResolverInterface` (and its implementation `ArgumentResolver`) uses reflection to inspect controller method signatures and resolve the necessary arguments from the `Request` object or other sources.
      https://symfony.com/doc/current/components/http_kernel.html#argument-resolution
  - question: When embedding a controller in Twig using `render(controller(...))`,
      what is a key difference compared to `render(path(...))` or
      `render(url(...))`?
    answers:
      - value: "`render(controller(...))` does not require the embedded controller to
          have a public route."
        correct: true
      - value: "`render(controller(...))` always makes an asynchronous request."
        correct: false
      - value: "`render(controller(...))` is only for ESI fragments."
        correct: false
      - value: "`render(controller(...))` bypasses Symfony's security system."
        correct: false
    help: >-
      The `controller()` Twig function allows you to embed content from a
      controller that does not necessarily have a publicly accessible route, as
      it makes an internal sub-request.

      https://symfony.com/doc/current/templates.html#embedding-controllers
  - question: "You have a controller method that expects a `BookingId` value object
      as an argument: `public function index(BookingId $id): Response`. What is
      required for Symfony to correctly inject an instance of `BookingId`?"
    answers:
      - value: A custom argument value resolver for `BookingId` must be registered as a
          service.
        correct: true
      - value: The `BookingId` class must implement `__toString()`.
        correct: false
      - value: The `BookingId` class must extend
          `Symfony\Component\HttpFoundation\ParameterBag`.
        correct: false
      - value: Symfony automatically converts scalar route parameters to value objects.
        correct: false
    help: |-
      For custom value objects, you need to create and register a custom argument value resolver that knows how to create an instance of your value object from the request data.
      https://symfony.com/doc/current/controller/value_resolver.html#creating-a-custom-value-resolver
  - question: Which of the following is a valid way to define a controller in Symfony 7?
    answers:
      - value: A PHP class with a public method annotated with `#[Route]`.
        correct: true
      - value: A PHP class with a public `__invoke()` method annotated with `#[Route]`.
        correct: true
      - value: A PHP function defined in a separate file and referenced in routing.
        correct: false
      - value: A Closure (anonymous function) directly in the routing configuration.
        correct: true
    help: >-
      Symfony controllers can be class methods, invokable classes, or even
      Closures defined directly in routing. Class methods with `#[Route]`
      attributes are the most common.

      https://symfony.com/doc/current/controller.html#basic-controller
  - question: What is the purpose of the `#[AsController]` attribute in Symfony 7?
    answers:
      - value: It automatically applies the `controller.service_arguments` tag to the
          controller class, enabling dependency injection.
        correct: true
      - value: It marks a class as a controller, but requires manual service definition.
        correct: false
      - value: It makes the controller class invokable.
        correct: false
      - value: It defines the default route for the controller.
        correct: false
    help: |-
      The `#[AsController]` attribute is a convenient way to ensure a controller class is properly registered as a service and can benefit from autowiring, even if it doesn't extend `AbstractController`.
      https://symfony.com/doc/current/controller/service.html#using-the-ascontroller-attribute
  - question: Which of the following is NOT a built-in argument value resolver in
      Symfony's HttpKernel component?
    answers:
      - value: "`FormValueResolver`"
        correct: true
      - value: "`RequestPayloadValueResolver`"
        correct: false
      - value: "`SessionValueResolver`"
        correct: false
      - value: "`UidValueResolver`"
        correct: false
    help: |-
      Symfony provides resolvers for `Request`, `Session`, `DateTime`, `Entity`, `Service`, `RequestPayload`, `QueryString`, `QueryParameter`, `BackedEnum`, and `Uid`. There isn't a dedicated `FormValueResolver` as form handling is typically done via `$this->createForm()`.
      https://symfony.com/doc/current/controller/value_resolver.html#built-in-argument-resolvers
  - question: When using `#[MapRequestPayload]` or `#[MapQueryString]`, how does
      Symfony handle validation errors if the DTO is invalid?
    answers:
      - value: It throws a `ValidationException` which results in a 422 Unprocessable
          Entity HTTP response by default.
        correct: true
      - value: It automatically redirects to an error page.
        correct: false
      - value: It logs the error and proceeds with a `null` DTO.
        correct: false
      - value: It returns a 500 Internal Server Error.
        correct: false
    help: >-
      When validation fails for DTOs mapped with `#[MapRequestPayload]` or
      `#[MapQueryString]`, Symfony throws a `ValidationException`, which by
      default is caught and translated into a 422 Unprocessable Entity response.

      https://symfony.com/doc/current/controller.html#validation
  - question: What is the purpose of the `#[MapDateTime]` attribute in Symfony 7?
    answers:
      - value: To restrict the input format for `DateTimeInterface` arguments in
          controllers.
        correct: true
      - value: To automatically convert a string to a `DateTimeImmutable` object.
        correct: false
      - value: To define the default timezone for `DateTime` objects.
        correct: false
      - value: To map a date string from the request body to a `DateTime` object.
        correct: false
    help: |-
      The `#[MapDateTime]` attribute can be used with `DateTimeInterface` type-hinted arguments to restrict the accepted input format for date/time strings.
      https://symfony.com/doc/current/controller/value_resolver.html#datetimevalueresolver
  - question: >-
      Consider the following controller method:

      ```php

      public function show(Product $product): Response

      {
          // ...
      }

      ```

      If no product with the given ID is found in the database, what will
      Symfony's `EntityValueResolver` typically do by default?
    answers:
      - value: It will automatically throw a `NotFoundHttpException`, resulting in a 404
          response.
        correct: true
      - value: It will pass `null` to the `$product` argument.
        correct: false
      - value: It will throw a `RuntimeException`.
        correct: false
      - value: It will redirect to the homepage.
        correct: false
    help: |-
      By default, if the `EntityValueResolver` cannot find an entity matching the route parameter, it throws a `NotFoundHttpException`, which Symfony's error handler converts into a 404 Not Found response.
      https://symfony.com/doc/current/controller/value_resolver.html#entityvalueresolver
  - question: Which of the following describes a key benefit of using the
      `AbstractController::forward()` method for internal sub-requests?
    answers:
      - value: It allows reusing controller logic without performing an HTTP redirect.
        correct: true
      - value: It sends a new HTTP request to the server, simulating a browser
          navigation.
        correct: false
      - value: It is primarily used for asynchronous operations.
        correct: false
      - value: It bypasses Symfony's routing and security layers.
        correct: false
    help: >-
      The `forward()` method makes an internal sub-request, meaning it calls
      another controller method directly within the application's PHP process,
      without a full HTTP roundtrip. This is useful for reusing logic or
      embedding content.

      https://symfony.com/doc/current/controller/forwarding.html
  - question: When defining an `access_control` rule in Symfony's security
      configuration, which option allows restricting access based on the
      client's IP address?
    answers:
      - value: "`ips`"
        correct: true
      - value: "`hosts`"
        correct: false
      - value: "`ip_addresses`"
        correct: false
      - value: "`client_ip`"
        correct: false
    help: |-
      The `ips` option in `access_control` allows you to restrict access to a URL pattern only to requests originating from specified IP addresses or subnets.
      https://symfony.com/doc/current/security/access_control.html#restricting-access-by-ip-address
  - question: Which of the following methods are available on the
      `AbstractController` for rendering Twig templates?
    answers:
      - value: "`$this->render('template.html.twig', $parameters)`"
        correct: true
      - value: "`$this->renderBlock('template.html.twig', 'block_name', $parameters)`"
        correct: false
      - value: "`$this->renderView('template.html.twig', $parameters)`"
        correct: false
      - value: "`$this->display('template.html.twig', $parameters)`"
        correct: false
    help: >-
      The `render()` method is the primary way to render Twig templates from an
      `AbstractController`. It returns a `Response` object containing the
      rendered HTML.

      https://symfony.com/doc/current/controller.html#rendering-templates
  - question: What is the main advantage of defining controllers as services in Symfony?
    answers:
      - value: It enables dependency injection of services directly into controller
          constructors or methods.
        correct: true
      - value: It makes controllers globally accessible via a simple function call.
        correct: false
      - value: It allows controllers to be cached more effectively.
        correct: false
      - value: It automatically generates CRUD operations for the controller.
        correct: false
    help: >-
      Defining controllers as services (which is the default behavior in modern
      Symfony applications) allows Symfony's Dependency Injection Container to
      manage their creation and inject required services, promoting testability
      and modularity.

      https://symfony.com/doc/current/controller/service.html
  - question: Which of the following is a valid way to redirect to an external URL
      (e.g., `https://example.com`) from a Symfony controller?
    answers:
      - value: "`$this->redirect('https://example.com')`"
        correct: true
      - value: "`$this->redirectToUrl('https://example.com')`"
        correct: false
      - value: "`new RedirectResponse('https://example.com')`"
        correct: true
      - value: "`header('Location: https://example.com'); exit();`"
        correct: false
    help: >-
      The `redirect()` method of `AbstractController` creates a
      `RedirectResponse` to an arbitrary URL. You can also instantiate
      `RedirectResponse` directly.

      https://symfony.com/doc/current/controller.html#redirecting
  - question: What is the purpose of the `#[Template]` attribute (from
      `Symfony\Bridge\Twig\Attribute\Template`) when used on a controller
      method?
    answers:
      - value: It automatically renders a specified Twig template using the array
          returned by the controller method as parameters.
        correct: true
      - value: It defines the default template for all actions within the controller.
        correct: false
      - value: It injects the Twig environment into the controller method.
        correct: false
      - value: It marks the controller method as a Twig function.
        correct: false
    help: >-
      The `#[Template]` attribute allows a controller method to return an array
      of parameters instead of a `Response` object. Symfony then automatically
      renders the specified Twig template with these parameters.

      https://symfony.com/doc/current/templates.html#the-template-attribute
  - question: Which of the following is the correct way to inject the Twig
      environment service (`Twig\Environment`) into a Symfony controller's
      constructor without extending `AbstractController`?
    answers:
      - value: |-
          ```php
          use Twig\Environment;
          class MyController
          {
              public function __construct(private Environment $twig) {}
          }
          ```
        correct: true
      - value: |-
          ```php
          class MyController
          {
              public function __construct(Environment $twig)
              {
                  $this->twig = $twig;
              }
          }
          ```
        correct: true
      - value: |-
          ```php
          class MyController extends AbstractController
          {
              public function __construct(Environment $twig) {}
          }
          ```
        correct: false
      - value: |-
          ```php
          class MyController
          {
              public function index()
              {
                  $twig = $this->container->get('twig');
              }
          }
          ```
        correct: false
    help: |-
      Symfony's autowiring allows you to inject services directly into a controller's constructor by type-hinting the service's interface or class, regardless of whether it extends `AbstractController`.
      https://symfony.com/doc/current/controller/service.html#injecting-services-into-controllers
  - question: What is the purpose of `Symfony\Component\WebLink\Link` objects when
      used with `sendEarlyHints()`?
    answers:
      - value: They represent resources that the browser should preload, preconnect, or
          prefetch.
        correct: true
      - value: They define internal links within the Symfony application.
        correct: false
      - value: They specify external JavaScript and CSS files to be loaded.
        correct: false
      - value: They are used for generating sitemaps.
        correct: false
    help: >-
      `Link` objects are used to construct HTTP Link headers, which can signal
      to the browser to perform actions like preloading resources, improving
      page load performance.

      https://symfony.com/doc/current/controller.html#sending-early-hints
  - question: Which of the following is a valid way to define a route for a
      controller method `index` within `App\Controller\HelloController` using
      YAML configuration?
    answers:
      - value: |-
          ```yaml
          # config/routes.yaml
          hello:
              path:       /hello
              controller: App\Controller\HelloController::index
          ```
        correct: true
      - value: |-
          ```yaml
          # config/routes.yaml
          hello:
              path:       /hello
              _controller: App\Controller\HelloController::index
          ```
        correct: false
      - value: |-
          ```yaml
          # config/routes.yaml
          hello:
              route: /hello
              action: App\Controller\HelloController::index
          ```
        correct: false
    help: |-
      In YAML routing, the `controller` key is used to specify the controller callable using the `FQCN::methodName` syntax.
      https://symfony.com/doc/current/controller/service.html#routing-to-service-controllers
  - question: What is the typical directory structure for controllers in a standard
      Symfony application?
    answers:
      - value: "`src/Controller/`"
        correct: true
      - value: "`app/Controller/`"
        correct: false
      - value: "`var/Controller/`"
        correct: false
      - value: "`bin/Controller/`"
        correct: false
    help: >-
      Symfony applications typically organize controller classes within the
      `src/Controller/` directory.

      https://symfony.com/doc/current/controller.html#basic-controller
  - question: Which command-line tool is commonly used to generate a new, empty
      controller class in Symfony?
    answers:
      - value: "`php bin/console make:controller`"
        correct: true
      - value: "`php bin/console generate:controller`"
        correct: false
      - value: "`php bin/console new:controller`"
        correct: false
      - value: "`php bin/console create:controller`"
        correct: false
    help: >-
      The Symfony Maker bundle provides the `make:controller` command to quickly
      scaffold new controller classes.

      https://symfony.com/doc/current/controller.html#creating-a-new-controller
  - question: What is the purpose of the `#[IsGranted]` attribute's `message` option?
    answers:
      - value: To provide a custom message that will be displayed to the user if access
          is denied.
        correct: true
      - value: To log a message when access is granted.
        correct: false
      - value: To define the success message after an action.
        correct: false
      - value: To specify the translation key for the access denied message.
        correct: false
    help: |-
      The `message` option in the `#[IsGranted]` attribute allows you to define a custom message that will be shown to the user when access is denied, providing more context than a generic error.
      https://symfony.com/doc/current/security.html#securing-controllers-and-templates
  - question: Which of the following is the correct way to inject a `LockFactory`
      service named `invoice_lock_factory` into a controller method using
      autowiring and attributes?
    answers:
      - value: |-
          ```php
          #[Autowire(service: 'invoice_lock_factory')]
          LockFactory $invoiceLockFactory
          ```
        correct: true
      - value: |-
          ```php
          #[Inject('invoice_lock_factory')]
          LockFactory $invoiceLockFactory
          ```
        correct: false
      - value: |-
          ```php
          LockFactory $invoiceLockFactory = $this->get('invoice_lock_factory')
          ```
        correct: false
      - value: >-
          ```php

          LockFactory $invoiceLockFactory

          ``` (assuming `invoice_lock_factory` is the default service ID for
          `LockFactory`)
        correct: false
    help: |-
      The `#[Autowire(service: 'service_id')]` attribute is used to inject a specific named service when the default autowiring by type hint is not sufficient or ambiguous.
      https://symfony.com/doc/current/controller.html#injecting-specific-services-or-parameters
  - question: What is the purpose of the
      `Symfony\Component\HttpKernel\Event\ControllerEvent` object passed to
      `kernel.controller` listeners?
    answers:
      - value: It provides access to the current `Request` object and the resolved
          controller callable.
        correct: true
      - value: It contains the `Response` object that will be sent to the client.
        correct: false
      - value: It holds the arguments that will be passed to the controller.
        correct: false
      - value: It allows modifying the route parameters before controller execution.
        correct: false
    help: |-
      The `ControllerEvent` object provides methods like `getRequest()` and `getController()` (and `setController()`) to inspect and modify the request and the controller before execution.
      https://symfony.com/doc/current/components/http_kernel.html#the-kernel-controller-event
  - question: Which of the following describes the
      `Symfony\Component\HttpKernel\Event\ControllerArgumentsEvent` object?
    answers:
      - value: It provides access to the `Request` object and the arguments that will be
          passed to the controller.
        correct: true
      - value: It allows modifying the arguments before the controller is executed.
        correct: true
      - value: It is dispatched before the controller itself is resolved.
        correct: false
      - value: It contains the return value of the controller.
        correct: false
    help: |-
      The `ControllerArgumentsEvent` provides access to the `Request` and the resolved arguments, allowing listeners to modify them before the controller is called.
      https://symfony.com/doc/current/reference/events.html#kernel-controller-arguments
  - question: What is the purpose of the
      `Symfony\Component\HttpKernel\Event\ViewEvent` object?
    answers:
      - value: It allows listeners to transform a non-`Response` return value from a
          controller into a `Response` object.
        correct: true
      - value: It is dispatched when a Twig template is rendered.
        correct: false
      - value: It provides access to the view layer configuration.
        correct: false
      - value: It is dispatched after the `Response` has been created but before it's
          sent.
        correct: false
    help: >-
      The `ViewEvent` is dispatched only if the controller does not return a
      `Response` object, giving listeners a chance to convert the controller's
      return value into a proper HTTP `Response`.

      https://symfony.com/doc/current/reference/events.html#kernel-view
  - question: When using `#[MapQueryString]` with a DTO, how can you ensure a valid
      DTO object is always available, even if the query string is empty?
    answers:
      - value: "By providing a default DTO instance to the controller argument:
          `#[MapQueryString] UserDto $userDto = new UserDto()`"
        correct: true
      - value: By making the DTO properties nullable.
        correct: false
      - value: By checking `if ($userDto === null)` inside the controller.
        correct: false
      - value: By configuring a default value in `services.yaml`.
        correct: false
    help: |-
      You can provide a default DTO instance directly in the controller method signature. This ensures that even if the query string is empty, a valid DTO object is always injected.
      https://symfony.com/doc/current/controller.html#providing-a-default-dto-for-an-empty-query-string
  - question: Which of the following is a valid way to define a route for an
      invokable controller `App\Controller\MyInvokableController` in PHP
      routing?
    answers:
      - value: >-
          ```php

          $routes->add('my_route',
          '/my-path')->controller(App\Controller\MyInvokableController::class);

          ```
        correct: true
      - value: |-
          ```php
          $routes->add('my_route', '/my-path')->controller('App\\Controller\\MyInvokableController::__invoke');
          ```
        correct: false
      - value: >-
          ```php

          $routes->add('my_route',
          '/my-path')->controller([App\Controller\MyInvokableController::class,
          '__invoke']);

          ```
        correct: false
    help: |-
      For invokable controllers, you can simply provide the FQCN of the controller class as the controller reference in PHP routing. Symfony will automatically call the `__invoke()` method.
      https://symfony.com/doc/current/controller/service.html#routing-to-invokable-controllers
  - question: What is the primary role of the `RouterListener` in the Symfony
      HttpKernel request flow?
    answers:
      - value: It matches the incoming request to a route and sets the `_controller` and
          other route parameters as request attributes.
        correct: true
      - value: It resolves the controller callable from the request attributes.
        correct: false
      - value: It dispatches the `kernel.request` event.
        correct: false
      - value: It generates URLs for routes.
        correct: false
    help: |-
      The `RouterListener` is an event subscriber that listens to the `kernel.request` event. Its main job is to match the incoming URL to a defined route and populate the request attributes with route information, including the `_controller`.
      https://symfony.com/doc/current/components/http_kernel.html#the-request-flow
  - question: Which of the following is true about `HttpException` in Symfony?
    answers:
      - value: Exceptions extending `HttpException` will result in an HTTP response with
          the exception's status code.
        correct: true
      - value: Any exception thrown in a controller will result in a 500 Internal Server
          Error.
        correct: false
      - value: "`NotFoundHttpException` is a specific type of `HttpException` for 404
          errors."
        correct: true
      - value: They are automatically caught and displayed as a generic error page.
        correct: false
    help: >-
      Symfony's exception listener catches exceptions. If an exception extends
      `HttpException` (e.g., `NotFoundHttpException`), Symfony will use the
      status code defined by that exception. Otherwise, it defaults to a 500
      Internal Server Error.

      https://symfony.com/doc/current/controller.html#exceptions
  - question: You want to add an HTTP Link header for preloading a CSS file
      (`/app.css`) from your controller. Which `AbstractController` helper
      method can you use?
    answers:
      - value: "`$this->addLink($request, (new Link('preload',
          '/app.css'))->withAttribute('as', 'style'))`"
        correct: true
      - value: "`$this->addHeader('Link', '<app.css>; rel=preload; as=style')`"
        correct: false
      - value: "`$this->preload('/app.css', 'style')`"
        correct: false
      - value: "`$this->link('/app.css', 'preload', 'style')`"
        correct: false
    help: >-
      The `addLink()` method provided by `AbstractController` is a convenient
      way to add HTTP Link headers to the response, which are used for resource
      hints like preloading.

      https://symfony.com/doc/current/web_link.html#adding-link-headers
  - question: What is the purpose of the `#[ValueResolver]` attribute in Symfony 7?
    answers:
      - value: To explicitly target a specific argument resolver for a controller method
          argument.
        correct: true
      - value: To define a custom validation rule for an argument.
        correct: false
      - value: To mark an argument as optional.
        correct: false
      - value: To automatically convert an argument to a specific data type.
        correct: false
    help: |-
      The `#[ValueResolver]` attribute allows developers to control which argument resolver is used for a specific controller argument, improving performance and ensuring correct resolution, especially with nullable arguments or multiple potential resolvers.
      https://symfony.com/doc/current/controller/value_resolver.html#targeting-a-specific-argument-resolver
  - question: Which of the following best describes the 'Front Controller' pattern
      as implemented in Symfony?
    answers:
      - value: A single entry point (`public/index.php`) that handles all incoming
          requests and dispatches them to the appropriate controller.
        correct: true
      - value: Each web page having its own dedicated PHP file.
        correct: false
      - value: A design pattern where all business logic is placed directly in the
          controller.
        correct: false
      - value: A system where controllers directly include HTML templates.
        correct: false
    help: >-
      The Front Controller pattern centralizes request handling, routing, and
      bootstrapping through a single script, typically `public/index.php` in
      Symfony.

      https://symfony.com/doc/current/create_framework/front_controller.html
  - question: Which of the following is true about the
      `Symfony\Component\HttpKernel\Kernel` class?
    answers:
      - value: It is the core of a Symfony application, responsible for setting up
          bundles and the service container.
        correct: true
      - value: It implements `HttpKernelInterface` and typically uses
          `MicroKernelTrait`.
        correct: true
      - value: It directly handles HTTP requests and sends responses.
        correct: false
      - value: It is responsible for defining all application routes.
        correct: false
    help: |-
      The `Kernel` class is central to Symfony's architecture, managing the application's lifecycle, bundles, and service container. It implements `HttpKernelInterface` and often uses `MicroKernelTrait` for configuration.
      https://symfony.com/doc/current/configuration/front_controllers_and_kernel.html#the-kernel
  - question: What is the purpose of the `#[Autowire('%kernel.project_dir%')]`
      attribute on a controller method argument?
    answers:
      - value: To inject the value of the `kernel.project_dir` parameter into the
          argument.
        correct: true
      - value: To define a new service named `kernel.project_dir`.
        correct: false
      - value: To specify that the argument should be autowired as a service.
        correct: false
      - value: To make the controller method accessible from anywhere in the project
          directory.
        correct: false
    help: |-
      The `#[Autowire]` attribute can be used to inject specific parameter values into controller method arguments, using the `%parameter_name%` syntax.
      https://symfony.com/doc/current/controller.html#injecting-specific-services-or-parameters
  - question: When generating CRUD operations for a Doctrine entity using
      `make:crud`, what types of files are typically created?
    answers:
      - value: A controller, a form type, and Twig templates.
        correct: true
      - value: A controller and a service for data handling.
        correct: false
      - value: Only a controller with basic actions.
        correct: false
      - value: An entity, a repository, and a controller.
        correct: false
    help: >-
      The `make:crud` command generates a comprehensive set of files for
      managing an entity, including the controller, its associated form type,
      and various Twig templates for listing, showing, creating, and editing
      records.

      https://symfony.com/doc/current/controller.html#generating-crud
  - question: Which of the following is a valid way to inject the
      `SerializerInterface` service into a Symfony controller method?
    answers:
      - value: |-
          ```php
          use Symfony\Component\Serializer\SerializerInterface;
          public function index(SerializerInterface $serializer): Response
          {
              // ...
          }
          ```
        correct: true
      - value: |-
          ```php
          public function index(): Response
          {
              $serializer = $this->get('serializer');
              // ...
          }
          ```
        correct: false
      - value: |-
          ```php
          #[Inject('serializer')]
          SerializerInterface $serializer
          ```
        correct: false
    help: >-
      Symfony's autowiring allows you to inject services by type-hinting their
      interface or class directly into controller method arguments.

      https://symfony.com/doc/current/serializer.html#injecting-the-serializer
  - question: What is the purpose of the `#[AsCommand]` attribute in a Symfony
      console command?
    answers:
      - value: To define the command's name and description.
        correct: true
      - value: To inject services into the command.
        correct: false
      - value: To execute the command automatically.
        correct: false
      - value: To link the command to a specific controller.
        correct: false
    help: >-
      The `#[AsCommand]` attribute is used to configure the command's name,
      description, and other options directly in the class.

      https://symfony.com/doc/current/console.html#configuring-the-command
  - question: Which built-in argument resolver is responsible for injecting the
      configured session class implementing `SessionInterface`?
    answers:
      - value: "`SessionValueResolver`"
        correct: true
      - value: "`RequestStackSessionResolver`"
        correct: false
      - value: "`HttpSessionResolver`"
        correct: false
      - value: "`DefaultSessionResolver`"
        correct: false
    help: |-
      The `SessionValueResolver` injects the configured session class implementing `SessionInterface` if type-hinted with `SessionInterface` or a class implementing it.
      https://symfony.com/doc/current/controller/value_resolver.html#built-in-argument-resolvers
  - question: What is the primary benefit of the `EntityValueResolver` in Symfony
      controllers?
    answers:
      - value: It automatically queries and injects Doctrine entities based on route
          parameters, reducing boilerplate code.
        correct: true
      - value: It allows controllers to directly interact with the database without a
          repository.
        correct: false
      - value: It provides a caching mechanism for entities.
        correct: false
      - value: It automatically validates entity data before persistence.
        correct: false
    help: |-
      The `EntityValueResolver` simplifies controller logic by automatically fetching and injecting Doctrine entities into controller methods based on route parameters (e.g., an ID), and automatically throwing a 404 if the entity is not found.
      https://symfony.com/doc/current/controller/value_resolver.html#entityvalueresolver
