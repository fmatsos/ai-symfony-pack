category: Controllers
questions:
  - question: What is the recommended naming convention for a Symfony controller
      class that handles blog-related actions?
    answers:
      - value: BlogController
        correct: true
      - value: BlogActions
        correct: false
      - value: ControllerBlog
        correct: false
      - value: Blog
        correct: false
    help: Symfony recommends suffixing controller classes with 'Controller' (e.g.,
      BlogController, DefaultController) for clarity and consistency.
  - question: Which of the following is the primary benefit of extending
      `Symfony\Bundle\FrameworkBundle\Controller\AbstractController` in your
      Symfony controllers?
    answers:
      - value: It automatically makes the controller a service.
        correct: false
      - value: It provides convenient helper methods for common tasks like rendering
          templates and generating URLs.
        correct: true
      - value: It enforces strict type-hinting for all controller arguments.
        correct: false
      - value: It enables automatic routing for all public methods.
        correct: false
    help: The AbstractController class provides shortcuts to common services and
      methods, simplifying controller development.
  - question: How can you access the `Request` object in a Symfony controller method
      to retrieve query parameters?
    answers:
      - value: By type-hinting `Symfony\Component\HttpFoundation\Request` as an
          argument.
        correct: true
      - value: By calling `$this->getRequest()` if extending `AbstractController`.
        correct: false
      - value: By accessing the global `$_REQUEST` superglobal.
        correct: false
      - value: By injecting `RequestStack` and then calling `getCurrentRequest()`.
        correct: true
    help: Symfony's argument resolver automatically injects the Request object when
      type-hinted. You can also get it from the RequestStack service.
  - question: What type of object *must* a Symfony controller method return?
    answers:
      - value: A `Symfony\Component\HttpFoundation\Response` object.
        correct: true
      - value: A string containing HTML content.
        correct: false
      - value: An array of data to be serialized.
        correct: false
      - value: A `Symfony\Component\HttpFoundation\Request` object.
        correct: false
    help: Every Symfony controller must return an instance of
      Symfony\Component\HttpFoundation\Response, which represents the HTTP
      response.
  - question: Which `AbstractController` helper method is used to render a Twig
      template and return a `Response`?
    answers:
      - value: "`$this->render('template.html.twig', [...])`"
        correct: true
      - value: "`$this->display('template.html.twig', [...])`"
        correct: false
      - value: "`$this->show('template.html.twig', [...])`"
        correct: false
      - value: "`$this->twig->render('template.html.twig', [...])`"
        correct: false
    help: The `render()` method is a shortcut provided by `AbstractController` to
      render a Twig template and wrap its output in a Response object.
  - question: How do you add a flash message named 'success' with the content 'Item
      saved!' in a Symfony controller?
    answers:
      - value: "`$this->addFlash('success', 'Item saved!');`"
        correct: true
      - value: "`$this->get('session')->getFlashBag()->add('success', 'Item saved!');`"
        correct: false
      - value: "`$this->session->flash('success', 'Item saved!');`"
        correct: false
      - value: "`$this->get('flash_bag')->add('success', 'Item saved!');`"
        correct: false
    help: The `addFlash()` method is a convenient shortcut in `AbstractController`
      for adding flash messages to the session's flash bag.
  - question: Which `AbstractController` helper method is used to redirect the user
      to a specific route by its name?
    answers:
      - value: "`$this->redirectToRoute('app_homepage', ['param' => 'value'])`"
        correct: true
      - value: "`$this->redirect('/path/to/route')`"
        correct: false
      - value: "`$this->forward('App\\\\Controller\\\\SomeController::someAction')`"
        correct: false
      - value: "`$this->generateUrl('app_homepage')` and then return `new
          RedirectResponse(...)`"
        correct: false
    help: The `redirectToRoute()` method generates a URL for a given route and
      returns a `RedirectResponse`.
  - question: You need to trigger a 404 Not Found HTTP response in your Symfony
      controller when a resource is not found. Which is the most idiomatic way
      to do this?
    answers:
      - value: Throw `$this->createNotFoundException('Resource not found');`
        correct: true
      - value: Return `new Response('Not Found', 404);`
        correct: false
      - value: Throw `new
          Symfony\Component\HttpKernel\Exception\NotFoundHttpException();`
        correct: true
      - value: Call `$this->render('404.html.twig');`
        correct: false
    help: Throwing a `NotFoundHttpException` (or using the
      `createNotFoundException()` shortcut) is the standard way to signal a 404
      error in Symfony, allowing the error handling system to take over.
  - question: What is the purpose of the `forward()` method in `AbstractController`?
    answers:
      - value: To make an internal sub-request to another controller action.
        correct: true
      - value: To redirect the client's browser to a different URL.
        correct: false
      - value: To include an external HTML fragment from another server.
        correct: false
      - value: To execute a Twig function within the current controller.
        correct: false
    help: The `forward()` method performs an internal sub-request, executing another
      controller action without initiating a new HTTP request from the client.
  - question: >-
      Consider the following controller method signature:


      ```php

      use Symfony\Component\HttpFoundation\Request;

      use Symfony\Component\HttpFoundation\Response;


      class MyController extends AbstractController

      {
          public function show(Request $request, int $id): Response
          {
              // ...
          }
      }

      ```


      If the route is `/posts/{id}`, how does Symfony's `ArgumentResolver`
      provide the `$id` value?
    answers:
      - value: It automatically extracts the `id` attribute from the `Request` object's
          attributes.
        correct: true
      - value: It looks for a query parameter named `id`.
        correct: false
      - value: It requires the `$id` to be explicitly passed via `$_GET['id']`.
        correct: false
      - value: It fetches the `id` from the session.
        correct: false
    help: The `ArgumentResolver` automatically resolves arguments based on
      type-hints and available request attributes (like route parameters).
  - question: Which PHP attribute is commonly used to define a route directly on a
      controller method in Symfony 7?
    answers:
      - value: "`#[Route('/path', name: 'route_name')]`"
        correct: true
      - value: "`#[Path('/path', name: 'route_name')]`"
        correct: false
      - value: "`#[Url('/path', name: 'route_name')]`"
        correct: false
      - value: "`#[Mapping('/path', name: 'route_name')]`"
        correct: false
    help: The `#[Route]` attribute from `Symfony\Component\Routing\Attribute` is the
      standard way to define routes directly on controller methods.
  - question: What is the purpose of the `#[AsController]` attribute introduced in
      Symfony?
    answers:
      - value: It automatically registers the controller as a service and applies the
          `controller.service_arguments` tag.
        correct: true
      - value: It marks the controller as an entry point for console commands.
        correct: false
      - value: It enables automatic routing for all public methods within the class.
        correct: false
      - value: It ensures the controller methods are executed asynchronously.
        correct: false
    help: The `#[AsController]` attribute simplifies controller registration as
      services, especially for controllers not extending `AbstractController`,
      by automatically applying the necessary tag.
  - question: How can you make a controller class invokable in Symfony, allowing it
      to be mapped directly to a route without specifying a method name?
    answers:
      - value: By defining a public `__invoke()` method in the class.
        correct: true
      - value: By extending
          `Symfony\Component\HttpKernel\Controller\InvokableController`.
        correct: false
      - value: By adding the `#[Invokable]` attribute to the class.
        correct: false
      - value: By naming the class `IndexController`.
        correct: false
    help: An invokable controller is a class that defines a `__invoke()` method.
      When routed, Symfony calls this method directly.
  - question: Which `AbstractController` helper method allows you to generate a URL
      for a given route name and an array of parameters?
    answers:
      - value: "`$this->generateUrl('app_product_show', ['slug' => 'my-product'])`"
        correct: true
      - value: "`$this->path('app_product_show', ['slug' => 'my-product'])`"
        correct: false
      - value: "`$this->getUrl('app_product_show', ['slug' => 'my-product'])`"
        correct: false
      - value: "`$this->router->generate('app_product_show', ['slug' => 'my-product'])`"
        correct: false
    help: The `generateUrl()` method is a shortcut for the router service's
      `generate()` method, used to create URLs.
  - question: When handling a file upload in a Symfony controller, what type of
      object represents the uploaded file after it's retrieved from the request?
    answers:
      - value: "`Symfony\\Component\\HttpFoundation\\File\\UploadedFile`"
        correct: true
      - value: "`SplFileInfo`"
        correct: false
      - value: "`File`"
        correct: false
      - value: "`Symfony\\Component\\HttpFoundation\\File\\File`"
        correct: false
    help: Uploaded files are represented by `UploadedFile` objects, which extend
      `File` and provide methods for moving the file.
  - question: You want to send HTTP 103 Early Hints from your Symfony controller to
      preload resources. Which `AbstractController` method should you use?
    answers:
      - value: "`$this->sendEarlyHints([...])`"
        correct: true
      - value: "`$this->preloadResources([...])`"
        correct: false
      - value: "`$this->addLinkHeaders([...])`"
        correct: false
      - value: "`$this->earlyHints([...])`"
        correct: false
    help: The `sendEarlyHints()` method allows you to send HTTP 103 Early Hints, but
      it requires SAPI support (e.g., FrankenPHP).
  - question: Which of the following describes the role of
      `Symfony\Component\HttpKernel\Controller\ControllerResolverInterface`?
    answers:
      - value: It determines and returns a PHP callable (the controller) based on the
          provided Request object.
        correct: true
      - value: It resolves the arguments to be passed to the controller.
        correct: false
      - value: It handles the routing of the incoming request to the correct controller.
        correct: false
      - value: It is responsible for rendering the final HTML response.
        correct: false
    help: The `ControllerResolverInterface` defines the contract for finding the
      executable controller callable from a Request.
  - question: When embedding a controller into a Twig template using
      `render(controller(...))`, what special URL path is typically configured
      in `framework.yaml` for fragments?
    answers:
      - value: "`/_fragment`"
        correct: true
      - value: "`/_embed`"
        correct: false
      - value: "`/_internal`"
        correct: false
      - value: "`/_subrequest`"
        correct: false
    help: The `fragments.path` configuration (e.g., `/_fragment`) is used by Symfony
      to serve embedded controller fragments.
  - question: How can you retrieve a specific configuration parameter, e.g.,
      `app.my_setting`, within an `AbstractController`?
    answers:
      - value: "`$this->getParameter('app.my_setting')`"
        correct: true
      - value: "`$this->container->getParameter('app.my_setting')`"
        correct: false
      - value: "`$this->get('parameter_bag')->get('app.my_setting')`"
        correct: false
      - value: "`$this->params->get('app.my_setting')`"
        correct: false
    help: The `getParameter()` method is a helper provided by `AbstractController`
      to access parameters from the container's parameter bag.
  - question: What is the default HTTP status code returned by
      `AbstractController::redirect()` and
      `AbstractController::redirectToRoute()` if not explicitly specified?
    answers:
      - value: 302 Found
        correct: true
      - value: 200 OK
        correct: false
      - value: 301 Moved Permanently
        correct: false
      - value: 307 Temporary Redirect
        correct: false
    help: By default, both redirect helper methods issue a 302 Found status,
      indicating a temporary redirect.
  - question: Which event is dispatched *after* the controller has been determined
      but *before* it is executed, allowing for its modification?
    answers:
      - value: "`kernel.controller`"
        correct: true
      - value: "`kernel.request`"
        correct: false
      - value: "`kernel.response`"
        correct: false
      - value: "`kernel.view`"
        correct: false
    help: The `kernel.controller` event allows listeners to inspect or even replace
      the controller callable before it's executed.
  - question: You want to return a file download from your controller. Which
      `AbstractController` helper method should you use?
    answers:
      - value: "`$this->file('/path/to/file.pdf', 'document.pdf', 'attachment')`"
        correct: true
      - value: "`$this->download('/path/to/file.pdf')`"
        correct: false
      - value: "`$this->stream('/path/to/file.pdf')`"
        correct: false
      - value: "`new BinaryFileResponse('/path/to/file.pdf')`"
        correct: false
    help: The `file()` method creates and returns a `BinaryFileResponse` for serving
      files, with options for filename and disposition.
  - question: How can you retrieve data from the session within a Symfony
      controller, assuming you have access to the `Request` object?
    answers:
      - value: "`$request->getSession()->get('my_key')`"
        correct: true
      - value: "`$this->session->get('my_key')`"
        correct: false
      - value: "`$_SESSION['my_key']`"
        correct: false
      - value: "`$request->attributes->get('session')->get('my_key')`"
        correct: false
    help: The `Request` object provides access to the current session via its
      `getSession()` method.
  - question: What is the primary difference between `redirect()` and `forward()` in
      a Symfony controller?
    answers:
      - value: "`redirect()` sends an HTTP redirect to the client, while `forward()`
          makes an internal sub-request."
        correct: true
      - value: "`redirect()` is for internal routes, `forward()` is for external URLs."
        correct: false
      - value: "`redirect()` passes request attributes, `forward()` does not."
        correct: false
      - value: "`redirect()` always returns a 200 OK, `forward()` always returns a 302
          Found."
        correct: false
    help: A redirect involves a new HTTP request from the client, whereas a forward
      is an internal server-side operation.
  - question: Which of the following is a valid way to define a controller using an
      anonymous function in Symfony's routing configuration?
    answers:
      - value: |-
          ```php
          $routes->add('hello', new Routing\Route('/hello', [
              '_controller' => function (Request $request): Response {
                  return new Response('Hello!');
              },
          ]));
          ```
        correct: true
      - value: |-
          ```php
          $routes->add('hello', new Routing\Route('/hello', [
              '_controller' => 'anonymous_function',
          ]));
          ```
        correct: false
      - value: >-
          ```php

          $routes->add('hello', new Routing\Route('/hello', [
              '_controller' => 'function() { return new Response(\'Hello!\'); }',
          ]));

          ```
        correct: false
    help: Anonymous functions (Closures) can be directly assigned as the
      `_controller` in route definitions.
  - question: How can you retrieve all flash messages of a specific type, e.g.,
      'notice', in a Twig template?
    answers:
      - value: "`{% for message in app.flashes('notice') %}`"
        correct: true
      - value: "`{% for message in app.session.flashbag.get('notice') %}`"
        correct: false
      - value: "`{% for message in flashes.notice %}`"
        correct: false
      - value: "`{% for message in app.session.getFlashes('notice') %}`"
        correct: false
    help: The `app.flashes()` Twig global function is used to retrieve flash
      messages by type.
  - question: What is the primary purpose of
      `Symfony\Component\HttpKernel\Controller\ArgumentResolverInterface`?
    answers:
      - value: To determine the arguments to pass to the controller callable.
        correct: true
      - value: To resolve the controller from the request.
        correct: false
      - value: To validate the incoming request parameters.
        correct: false
      - value: To convert controller return values into a `Response` object.
        correct: false
    help: The `ArgumentResolverInterface` is responsible for introspecting the
      controller's signature and providing the necessary arguments.
  - question: When defining a route in Symfony, what does the `_controller`
      attribute specify?
    answers:
      - value: The PHP callable (function, method, or service) that will handle the
          request.
        correct: true
      - value: The Twig template to be rendered by the controller.
        correct: false
      - value: The HTTP method (GET, POST, etc.) allowed for the route.
        correct: false
      - value: The unique name of the route.
        correct: false
    help: The `_controller` attribute is a special route default that tells Symfony
      which callable to execute when the route matches.
  - question: Which of the following describes a valid way to configure a Symfony
      route to use a class-based controller and its method?
    answers:
      - value: |-
          ```php
          $routes->add('my_route', new Routing\Route('/my-path', [
              '_controller' => 'App\\Controller\\MyController::myAction',
          ]));
          ```
        correct: true
      - value: |-
          ```php
          $routes->add('my_route', new Routing\Route('/my-path', [
              '_controller' => 'my_controller_service:myAction',
          ]));
          ```
        correct: true
      - value: |-
          ```php
          $routes->add('my_route', new Routing\Route('/my-path', [
              '_controller' => 'myAction',
          ]));
          ```
        correct: false
      - value: |-
          ```php
          $routes->add('my_route', new Routing\Route('/my-path', [
              '_controller' => 'MyController@myAction',
          ]));
          ```
        correct: false
    help: Controllers can be referenced using their FQCN::method or
      service_id::method syntax in routing configurations.
  - question: When using `forward()` to an internal controller, how are arguments
      typically passed to the target controller method?
    answers:
      - value: As an associative array where keys match the target method's parameter
          names.
        correct: true
      - value: As a string of query parameters appended to the controller name.
        correct: false
      - value: Through the session, which the target controller then retrieves.
        correct: false
      - value: They are automatically inherited from the original request.
        correct: false
    help: Arguments for forwarded requests are passed as an associative array, and
      the argument resolver matches them by name to the target controller's
      parameters.
  - question: Which of the following is the correct way to set an HTTP cookie named
      'my_cookie' with value 'test' on a `Response` object in a Symfony
      controller?
    answers:
      - value: |-
          ```php
          use Symfony\Component\HttpFoundation\Cookie;
          use Symfony\Component\HttpFoundation\Response;

          $response = new Response();
          $response->headers->setCookie(Cookie::create('my_cookie', 'test'));
          return $response;
          ```
        correct: true
      - value: |-
          ```php
          $response = new Response();
          $response->setCookie('my_cookie', 'test');
          return $response;
          ```
        correct: false
      - value: |-
          ```php
          setcookie('my_cookie', 'test');
          return new Response();
          ```
        correct: false
    help: Cookies are managed via the `ResponseHeaderBag` accessible through
      `$response->headers`, using `setCookie()` with a `Cookie` object.
  - question: How can you retrieve the value of a POST parameter named `username`
      from the `Request` object in a Symfony controller?
    answers:
      - value: "`$request->request->get('username')`"
        correct: true
      - value: "`$request->query->get('username')`"
        correct: false
      - value: "`$request->attributes->get('username')`"
        correct: false
      - value: "`$_POST['username']`"
        correct: false
    help: POST parameters are accessed via the `request` property of the `Request`
      object.
  - question: What is `Symfony\Component\HttpFoundation\JsonResponse` primarily used
      for in a Symfony controller?
    answers:
      - value: To return data encoded as JSON with the appropriate `Content-Type`
          header.
        correct: true
      - value: To handle incoming JSON requests.
        correct: false
      - value: To redirect to a JSON API endpoint.
        correct: false
      - value: To validate JSON schema.
        correct: false
    help: The `JsonResponse` class is a specialized `Response` that automatically
      sets the `Content-Type` header to `application/json` and encodes the
      provided data.
  - question: Which of the following is a valid way to inject the
      `SerializerInterface` into a Symfony controller that *does not* extend
      `AbstractController`?
    answers:
      - value: >-
          ```php

          use Symfony\Component\Serializer\SerializerInterface;


          class MyController

          {
              public function __construct(private SerializerInterface $serializer) {}
              // ...
          }

          ```
        correct: true
      - value: |-
          ```php
          class MyController
          {
              public function myAction(SerializerInterface $serializer) {}
              // ...
          }
          ```
        correct: true
      - value: |-
          ```php
          class MyController
          {
              public function myAction()
              {
                  $serializer = $this->container->get('serializer');
              }
              // ...
          }
          ```
        correct: false
    help: Symfony's autowiring allows injecting services into constructor arguments
      or method arguments (if the controller is a service and tagged with
      `controller.service_arguments` or uses `#[AsController]`).
  - question: What is the role of `#[MapRequestPayload]` attribute in a Symfony
      controller method?
    answers:
      - value: It automatically maps the request body (JSON, XML, form data) to a PHP
          object (DTO).
        correct: true
      - value: It maps query parameters to controller arguments.
        correct: false
      - value: It serializes the controller's return value to the response payload.
        correct: false
      - value: It validates the request headers against a predefined schema.
        correct: false
    help: The `#[MapRequestPayload]` attribute simplifies handling request bodies by
      automatically deserializing them into a specified DTO.
  - question: When defining a controller method, what is the recommended naming
      convention for an action that displays a list of resources?
    answers:
      - value: "`list()` or `index()`"
        correct: true
      - value: "`display()`"
        correct: false
      - value: "`getAll()`"
        correct: false
      - value: "`showAll()`"
        correct: false
    help: Common conventions include `index()` for the main listing page and
      `list()` for a list of items.
  - question: Which of the following is a valid way to set an HTTP header on a
      `Response` object in a Symfony controller?
    answers:
      - value: |-
          ```php
          $response = new Response();
          $response->headers->set('Cache-Control', 'no-cache');
          return $response;
          ```
        correct: true
      - value: |-
          ```php
          $response = new Response();
          $response->setHeader('Cache-Control', 'no-cache');
          return $response;
          ```
        correct: false
      - value: |-
          ```php
          $response = new Response();
          $response->addHeader('Cache-Control', 'no-cache');
          return $response;
          ```
        correct: false
    help: HTTP headers are managed via the `ResponseHeaderBag` object, accessible
      through the `headers` property of a `Response`.
  - question: What is the purpose of `Request::createFromGlobals()`?
    answers:
      - value: To create a `Request` object populated from PHP's global variables
          (`$_GET`, `$_POST`, `$_SERVER`, `$_FILES`, `$_COOKIE`).
        correct: true
      - value: To create an empty `Request` object.
        correct: false
      - value: To retrieve the current `Request` object from the service container.
        correct: false
      - value: To simulate a request for testing purposes.
        correct: false
    help: "`createFromGlobals()` is a static factory method used to build a
      `Request` object from the current global PHP state."
  - question: When is the `kernel.controller_arguments` event dispatched in
      Symfony's request lifecycle?
    answers:
      - value: Just before the controller is called, after its arguments have been
          resolved.
        correct: true
      - value: Before the controller is resolved.
        correct: false
      - value: After the controller has returned a response.
        correct: false
      - value: When a route is matched.
        correct: false
    help: The `kernel.controller_arguments` event allows listeners to inspect or
      modify the arguments that will be passed to the controller.
  - question: Which of the following is a valid way to retrieve a cookie named
      'user_pref' from the `Request` object?
    answers:
      - value: "`$request->cookies->get('user_pref')`"
        correct: true
      - value: "`$request->getCookie('user_pref')`"
        correct: false
      - value: "`$request->headers->get('Cookie')['user_pref']`"
        correct: false
      - value: "`$_COOKIE['user_pref']`"
        correct: false
    help: Cookies sent by the client are accessible via the `cookies` property of
      the `Request` object.
  - question: You want to return a JSON response from your controller. Which
      `AbstractController` helper method is the most convenient to use?
    answers:
      - value: "`$this->json(['key' => 'value'], 200, ['header' => 'value'])`"
        correct: true
      - value: "`$this->response(['key' => 'value'], 'json')`"
        correct: false
      - value: "`$this->renderJson(['key' => 'value'])`"
        correct: false
      - value: "`new JsonResponse(['key' => 'value'])`"
        correct: false
    help: The `json()` method is a shortcut in `AbstractController` to create and
      return a `JsonResponse`.
  - question: What is the primary purpose of the `ControllerResolver` and
      `ArgumentResolver` components in Symfony's HttpKernel?
    answers:
      - value: To determine which PHP callable should handle a request and to prepare
          its arguments.
        correct: true
      - value: To manage the application's routing configuration.
        correct: false
      - value: To handle HTTP caching and ETag generation.
        correct: false
      - value: To serialize and deserialize data for API responses.
        correct: false
    help: The `ControllerResolver` finds the controller, and the `ArgumentResolver`
      prepares the arguments needed to call that controller.
  - question: Which of the following is true regarding the `_controller` attribute
      when defining routes in Symfony?
    answers:
      - value: It can be a string representing a service ID and method (e.g.,
          `App\Controller\MyController::myAction`).
        correct: true
      - value: It can be an anonymous function (Closure).
        correct: true
      - value: It must always be a method of a class extending `AbstractController`.
        correct: false
      - value: It can be an array containing an object instance and a method name.
        correct: true
    help: Symfony is flexible with `_controller` definitions, supporting various
      callable types including strings, Closures, and object-method arrays.
  - question: If you need to perform a permanent redirect (301 Moved Permanently) to
      an external URL from your controller, what would be the correct approach
      using `AbstractController`?
    answers:
      - value: "`$this->redirect('https://example.com/new-path', 301);`"
        correct: true
      - value: "`$this->redirectToRoute('external_route', [], 301);`"
        correct: false
      - value: "`return new RedirectResponse('https://example.com/new-path', 301);`"
        correct: true
      - value: "`$this->redirectPermanent('https://example.com/new-path');`"
        correct: false
    help: The `redirect()` helper method accepts an optional status code. Directly
      instantiating `RedirectResponse` also allows setting the status.
  - question: What is the purpose of the
      `Symfony\Component\HttpKernel\Event\ControllerEvent` object passed to
      `kernel.controller` listeners?
    answers:
      - value: It provides access to the current `Request` object and the resolved
          controller callable.
        correct: true
      - value: It contains the final `Response` object before it is sent.
        correct: false
      - value: It holds all registered services in the container.
        correct: false
      - value: It allows modifying the route parameters.
        correct: false
    help: The `ControllerEvent` object gives listeners the ability to inspect or
      change the controller and the request before execution.
  - question: When handling a form submission in a Symfony controller, after calling
      `$form->handleRequest($request);`, what method is typically used to check
      if the form was submitted and is valid?
    answers:
      - value: "`$form->isSubmitted() && $form->isValid()`"
        correct: true
      - value: "`$form->hasBeenSubmitted() && $form->validate()`"
        correct: false
      - value: "`$form->isHandled() && $form->getErrors()->count() === 0`"
        correct: false
      - value: "`$form->isPosted() && $form->isValidated()`"
        correct: false
    help: The `isSubmitted()` and `isValid()` methods are standard for checking form
      state after handling the request.
  - question: Which command is used to generate a new, empty controller class using
      the Symfony Maker bundle?
    answers:
      - value: "`php bin/console make:controller MyNewController`"
        correct: true
      - value: "`php bin/console generate:controller MyNewController`"
        correct: false
      - value: "`php bin/console create:controller MyNewController`"
        correct: false
      - value: "`symfony new:controller MyNewController`"
        correct: false
    help: The `make:controller` command is part of the MakerBundle and streamlines
      the creation of new controllers.
  - question: What is the primary purpose of the
      `Symfony\Component\HttpFoundation\Session\SessionInterface` in a Symfony
      controller?
    answers:
      - value: To store and retrieve user-specific data across multiple requests.
        correct: true
      - value: To manage database connections.
        correct: false
      - value: To handle user authentication and authorization.
        correct: false
      - value: To log application events.
        correct: false
    help: The session is used to persist data for a specific user across different
      requests.
  - question: When embedding a controller in Twig using `render()`, what is the
      benefit of using `controller()` function over `path()` or `url()`?
    answers:
      - value: It allows embedding controllers that are not exposed via a public URL.
        correct: true
      - value: It performs an asynchronous request to the embedded controller.
        correct: false
      - value: It is more performant as it avoids routing lookup.
        correct: false
      - value: It enables direct service injection into the embedded controller.
        correct: false
    help: The `controller()` Twig function allows you to directly specify the
      controller callable, useful for internal fragments not meant for direct
      public access.
  - question: Which of the following is a valid way to retrieve a query parameter
      named `page` from the `Request` object, with a default value of `1` if not
      present?
    answers:
      - value: "`$request->query->get('page', 1)`"
        correct: true
      - value: "`$request->get('page', 1)`"
        correct: false
      - value: "`$request->query->getOrDefault('page', 1)`"
        correct: false
      - value: "`$request->attributes->get('page') ?? 1`"
        correct: false
    help: The `get()` method on `ParameterBag` (accessed via `$request->query` for
      query parameters) accepts a default value as its second argument.
  - question: What is the recommended naming convention for a controller method that
      displays a single resource by its ID or slug?
    answers:
      - value: "`show()`"
        correct: true
      - value: "`view()`"
        correct: false
      - value: "`getOne()`"
        correct: false
      - value: "`detail()`"
        correct: false
    help: The `show()` method is a widely accepted convention for displaying a
      single resource.
  - question: When manually configuring services for controllers without autowiring,
      what tag is typically applied to controller services to enable argument
      injection?
    answers:
      - value: "`controller.service_arguments`"
        correct: true
      - value: "`controller.arguments`"
        correct: false
      - value: "`kernel.controller`"
        correct: false
      - value: "`container.service_subscriber`"
        correct: false
    help: The `controller.service_arguments` tag is crucial for enabling Symfony's
      argument resolver to inject services into controller method parameters.
  - question: Which of the following is a valid way to retrieve a specific uploaded
      file named `document` from the `Request` object in a Symfony controller?
    answers:
      - value: "`$request->files->get('document')`"
        correct: true
      - value: "`$request->getUploadedFile('document')`"
        correct: false
      - value: "`$request->request->get('document')`"
        correct: false
      - value: "`$_FILES['document']`"
        correct: false
    help: Uploaded files are accessed via the `files` property of the `Request`
      object, which is an instance of `FileBag`.
  - question: What is the purpose of the `_route` attribute in the `Request`
      object's attributes, typically set by the `RouterListener`?
    answers:
      - value: It stores the name of the matched route.
        correct: true
      - value: It contains the full URL path of the request.
        correct: false
      - value: It specifies the HTTP method of the request.
        correct: false
      - value: It holds the controller callable.
        correct: false
    help: The `_route` attribute is a special request attribute that holds the name
      of the route that matched the incoming URL.
  - question: When should you prefer using `forward()` over a client-side redirect
      (e.g., `redirectToRoute()`)?
    answers:
      - value: When you want to reuse controller logic internally without a new HTTP
          request.
        correct: true
      - value: When you need to change the URL in the user's browser.
        correct: false
      - value: When the target action is on a different domain.
        correct: false
      - value: When you want to clear all session data before the next request.
        correct: false
    help: "`forward()` is ideal for internal componentization and avoiding
      unnecessary client-server roundtrips."
  - question: Which of the following is NOT a common way to define a controller in
      Symfony?
    answers:
      - value: A JavaScript function in the `assets/js` directory.
        correct: true
      - value: A PHP class method.
        correct: true
      - value: A PHP anonymous function (Closure).
        correct: false
      - value: A PHP class with an `__invoke()` method.
        correct: false
    help: Symfony controllers are PHP callables. JavaScript functions are typically
      for frontend interactions (e.g., Stimulus controllers), not backend
      request handling.
  - question: What is the purpose of the
      `Symfony\Component\HttpKernel\Event\ControllerArgumentsEvent` object
      passed to `kernel.controller_arguments` listeners?
    answers:
      - value: It provides access to the resolved controller and its arguments, allowing
          modification.
        correct: true
      - value: It contains the raw request data before argument resolution.
        correct: false
      - value: It is used to add new arguments to the controller's signature.
        correct: false
      - value: It allows skipping controller execution.
        correct: false
    help: The `ControllerArgumentsEvent` allows listeners to inspect and modify the
      arguments that will be passed to the controller method.
  - question: How can you store a value, e.g., `user_id = 123`, in the user's
      session from a Symfony controller?
    answers:
      - value: |-
          ```php
          $session = $request->getSession();
          $session->set('user_id', 123);
          ```
        correct: true
      - value: |-
          ```php
          $this->get('session')->set('user_id', 123);
          ```
        correct: false
      - value: |-
          ```php
          $_SESSION['user_id'] = 123;
          ```
        correct: false
      - value: |-
          ```php
          $request->attributes->set('session.user_id', 123);
          ```
        correct: false
    help: The `SessionInterface` (obtained from the Request or by injecting
      `SessionInterface` directly) provides the `set()` method for storing data.
  - question: What is the recommended approach for handling a custom value object,
      like `BookingId`, as a controller argument in Symfony?
    answers:
      - value: Type-hint the argument with the custom value object and create a custom
          argument value resolver.
        correct: true
      - value: Pass the raw ID as a string and manually create the value object inside
          the controller.
        correct: false
      - value: Use a service locator to fetch the value object based on the ID.
        correct: false
      - value: Define a custom route loader to convert the ID to the value object.
        correct: false
    help: Custom argument value resolvers allow Symfony to automatically convert
      request data into custom value objects for controller arguments.
  - question: Which of the following describes the purpose of the
      `Symfony\Component\HttpFoundation\Response` class?
    answers:
      - value: It encapsulates the HTTP response, including content, headers, and status
          code.
        correct: true
      - value: It represents the incoming HTTP request from the client.
        correct: false
      - value: It manages the application's routing logic.
        correct: false
      - value: It provides an interface for interacting with the database.
        correct: false
    help: The `Response` object is the representation of the HTTP response that your
      application sends back to the client.
  - question: What is the purpose of the `enabled` option for Symfony UX Stimulus
      controllers in `package.json`?
    answers:
      - value: Whether the controller should be enabled by default.
        correct: true
      - value: Whether the controller's JavaScript file should be minified.
        correct: false
      - value: Whether the controller can be overridden by other bundles.
        correct: false
      - value: Whether the controller requires a specific PHP version.
        correct: false
    help: The `enabled` option controls the default activation status of a Stimulus
      controller.
  - question: How can you set the HTTP status code of a `Response` object in a
      Symfony controller?
    answers:
      - value: "`$response->setStatusCode(403);`"
        correct: true
      - value: "`$response->status(403);`"
        correct: false
      - value: "`$response->headers->set('Status', '403 Forbidden');`"
        correct: false
      - value: "`$response->withStatus(403);`"
        correct: false
    help: The `setStatusCode()` method on the `Response` object is used to set the
      HTTP status code.
  - question: What is the role of a 'front controller' in a Symfony application's
      architecture?
    answers:
      - value: It is a single entry point that handles all incoming requests and
          dispatches them to the appropriate controllers.
        correct: true
      - value: It is a JavaScript controller that manages frontend interactions.
        correct: false
      - value: It is a database controller responsible for data persistence.
        correct: false
      - value: It is a security component that authenticates users.
        correct: false
    help: The front controller (e.g., `public/index.php`) centralizes request
      handling, routing, and bootstrapping the application.
  - question: Which of the following is a valid way to define a route for an
      invokable controller class `App\Controller\HelloController` in
      `config/routes.yaml`?
    answers:
      - value: |-
          ```yaml
          hello:
              path:       /hello/{name}
              controller: App\\Controller\\HelloController
          ```
        correct: true
      - value: |-
          ```yaml
          hello:
              path:       /hello/{name}
              controller: App\\Controller\\HelloController::__invoke
          ```
        correct: false
      - value: |-
          ```yaml
          hello:
              path:       /hello/{name}
              controller: App\\Controller\\HelloController.invoke
          ```
        correct: false
    help: For invokable controllers, you can directly reference the class FQCN as
      the controller.
  - question: What is the purpose of the `fetch` option for Symfony UX Stimulus
      controllers in `package.json`?
    answers:
      - value: It defines how the controller and its dependencies are included when the
          page loads (e.g., 'eager', 'lazy').
        correct: true
      - value: It specifies the API endpoint from which the controller fetches data.
        correct: false
      - value: It controls the HTTP method used for fetching controller assets.
        correct: false
      - value: It determines the caching strategy for the controller's JavaScript file.
        correct: false
    help: The `fetch` option dictates the loading strategy for Stimulus controllers,
      impacting performance.
  - question: How can you configure a Stimulus controller for lazy loading in its
      JavaScript file?
    answers:
      - value: "By adding `/* stimulusFetch: 'lazy' */` comment above the controller
          class definition."
        correct: true
      - value: By setting a `data-lazy-load` attribute on the HTML element.
        correct: false
      - value: By extending a `LazyController` base class.
        correct: false
      - value: "By configuring it in `controllers.json` with a `lazy: true` option."
        correct: false
    help: "The `/* stimulusFetch: 'lazy' */` comment is a special directive
      recognized by Symfony UX for lazy loading Stimulus controllers."
  - question: Which of the following is true about the
      `Symfony\Component\HttpFoundation\RedirectResponse` class?
    answers:
      - value: It is a specialized `Response` object for HTTP redirects.
        correct: true
      - value: It automatically sets the status code to 200 OK.
        correct: false
      - value: It can only redirect to internal routes.
        correct: false
      - value: It is used for internal forwarding between controllers.
        correct: false
    help: The `RedirectResponse` class is specifically designed to send HTTP
      redirect headers to the client.
  - question: What is the purpose of the `autoimport` option for Symfony UX Stimulus
      controllers?
    answers:
      - value: A list of files to be automatically imported alongside the controller,
          useful for CSS or other assets.
        correct: true
      - value: It enables automatic dependency injection for the Stimulus controller.
        correct: false
      - value: It automatically generates `stimulus_controller` attributes in Twig.
        correct: false
      - value: It configures automatic compilation of JavaScript assets.
        correct: false
    help: The `autoimport` option allows you to specify additional files (like CSS
      frameworks) that should be imported when the Stimulus controller is
      loaded.
  - question: When defining an action for creating a new resource, what is the
      recommended naming convention for the controller method?
    answers:
      - value: "`create()` or `new()`"
        correct: true
      - value: "`add()`"
        correct: false
      - value: "`insert()`"
        correct: false
      - value: "`build()`"
        correct: false
    help: Common conventions include `new()` for displaying the creation form and
      `create()` for handling the form submission.
  - question: Which of the following is a valid way to access a route parameter
      named `slug` when it's not directly type-hinted in the controller method
      signature?
    answers:
      - value: "`$request->attributes->get('slug')`"
        correct: true
      - value: "`$request->query->get('slug')`"
        correct: false
      - value: "`$request->request->get('slug')`"
        correct: false
      - value: "`$request->get('slug')`"
        correct: false
    help: Route parameters are stored in the `attributes` property of the `Request`
      object.
  - question: What is the primary purpose of the
      `Symfony\Component\Routing\Attribute\Route` attribute?
    answers:
      - value: To map a URL path to a controller method.
        correct: true
      - value: To define a service in the dependency injection container.
        correct: false
      - value: To specify security access control rules for a controller.
        correct: false
      - value: To configure caching for a specific route.
        correct: false
    help: The `#[Route]` attribute is the modern way to define routing directly
      within controller classes.
  - question: When configuring a custom error controller in Symfony, which section
      of the framework configuration is typically used?
    answers:
      - value: "`framework.error_controller`"
        correct: true
      - value: "`framework.exception_controller`"
        correct: false
      - value: "`framework.handler.error`"
        correct: false
      - value: "`framework.controller.error`"
        correct: false
    help: The `error_controller` option under the `framework` configuration allows
      specifying a custom controller for handling errors.
  - question: What is the main advantage of using class-based controllers over
      procedural functions as controllers in Symfony?
    answers:
      - value: Better code organization, reusability, and easier dependency injection.
        correct: true
      - value: Faster execution speed.
        correct: false
      - value: Automatic routing without explicit configuration.
        correct: false
      - value: Reduced memory consumption.
        correct: false
    help: Class-based controllers align with object-oriented principles, making
      applications more maintainable and testable.
  - question: Which `AbstractController` helper method is used to create a
      `JsonResponse` from an array or object?
    answers:
      - value: "`$this->json(['data' => 'value'])`"
        correct: true
      - value: "`$this->toJson(['data' => 'value'])`"
        correct: false
      - value: "`$this->createJsonResponse(['data' => 'value'])`"
        correct: false
      - value: "`$this->response(['data' => 'value'], 200, [], 'json')`"
        correct: false
    help: The `json()` method handles the JSON encoding and setting the correct
      content type.
  - question: What is the recommended naming convention for a controller method that
      handles updating an existing resource?
    answers:
      - value: "`edit()` or `update()`"
        correct: true
      - value: "`modify()`"
        correct: false
      - value: "`change()`"
        correct: false
      - value: "`save()`"
        correct: false
    help: Common conventions include `edit()` for displaying the edit form and
      `update()` for handling the form submission.
  - question: When is it generally appropriate to use `AbstractController` instead
      of a plain PHP class as a controller?
    answers:
      - value: When you need quick access to common services like the Twig renderer,
          router, or session without manual injection.
        correct: true
      - value: When you are building a micro-service or an API-only application.
        correct: false
      - value: When you want to avoid dependency injection entirely.
        correct: false
      - value: When your controller has no dependencies.
        correct: false
    help: "`AbstractController` provides convenience methods, making it suitable for
      typical web applications. For more control or smaller applications, a
      plain service controller might be preferred."
  - question: Which of the following is a valid way to retrieve all values for a
      flash message type, e.g., 'warning', from the session in a controller (not
      Twig)?
    answers:
      - value: "`$this->get('session')->getFlashBag()->get('warning')`"
        correct: true
      - value: "`$this->getFlash('warning')`"
        correct: false
      - value: "`$this->container->get('flash_bag')->get('warning')`"
        correct: false
      - value: "`$request->getSession()->getFlashBag()->get('warning')`"
        correct: true
    help: Flash messages are stored in the session's flash bag, which can be
      accessed via the session service.
  - question: What is the purpose of the `main` option for Symfony UX Stimulus
      controllers in `package.json`?
    answers:
      - value: Path to the controller file, relative to the assets directory.
        correct: true
      - value: The main JavaScript entry point for the entire application.
        correct: false
      - value: The name of the Stimulus application instance.
        correct: false
      - value: The primary CSS file associated with the controller.
        correct: false
    help: The `main` option specifies the location of the Stimulus controller's
      JavaScript file.
  - question: When a Symfony controller method receives an argument type-hinted with
      `int`, where does the `ArgumentResolver` primarily look for the value?
    answers:
      - value: In the request attributes (e.g., route parameters).
        correct: true
      - value: In the query parameters.
        correct: true
      - value: In the POST request body.
        correct: true
      - value: In the session.
        correct: false
    help: The `ArgumentResolver` is flexible and can resolve scalar type-hinted
      arguments from various locations in the request, including route
      attributes, query parameters, and request body parameters.
  - question: What is the recommended naming convention for a controller method that
      handles deleting a resource?
    answers:
      - value: "`delete()` or `remove()`"
        correct: true
      - value: "`destroy()`"
        correct: false
      - value: "`erase()`"
        correct: false
      - value: "`clear()`"
        correct: false
    help: Common conventions include `delete()` or `remove()` for handling resource
      deletion.
  - question: What is the purpose of the
      `Symfony\Component\HttpFoundation\RequestStack` service in Symfony?
    answers:
      - value: To provide access to the current master request and any sub-requests.
        correct: true
      - value: To manage the application's routing context.
        correct: false
      - value: To store and retrieve session data.
        correct: false
      - value: To handle HTTP caching.
        correct: false
    help: The `RequestStack` allows you to retrieve the current request, which is
      especially useful when dealing with sub-requests (e.g., from `forward()`
      calls).
