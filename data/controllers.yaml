category: Controllers

questions:
  -
    question: >
      Which of the following is the standard naming convention for a controller class in Symfony?
    answers:
      -
        value: >
          `MyController`
        correct: false
      -
        value: >
          `MyControllerController`
        correct: false
      -
        value: >
          `App\Controller\MyController`
        correct: true
      -
        value: >
          `MyBundle\Controller\MyController`
        correct: false
    help: |
      Symfony controllers are typically located in the `src/Controller/` directory and follow the `App\Controller\` namespace. The class name usually ends with `Controller`.
      https://symfony.com/doc/current/controller.html#controller-naming-conventions

  -
    question: >
      What is the primary benefit of extending `Symfony\Bundle\FrameworkBundle\Controller\AbstractController` in your Symfony controllers?
    answers:
      -
        value: >
          It automatically registers the controller as a service.
        correct: false
      -
        value: >
          It provides convenient helper methods for common controller tasks like rendering templates, generating URLs, and handling redirects.
        correct: true
      -
        value: >
          It enables automatic dependency injection for all controller arguments without any configuration.
        correct: false
      -
        value: >
          It makes the controller invokable by default.
        correct: false
    help: |
      `AbstractController` is an optional base class that provides shortcuts to common Symfony services and helper methods, making controller development more convenient.
      https://symfony.com/doc/current/controller.html#the-base-abstractcontroller-class

  -
    question: |
      Given a controller extending `AbstractController`, which method should you use to render a Twig template and return a `Response` object?
    answers:
      -
        value: >
          `$this->renderTemplate('template.html.twig', []);`
        correct: false
      -
        value: >
          `$this->display('template.html.twig', []);`
        correct: false
      -
        value: >
          `$this->render('template.html.twig', []);`
        correct: true
      -
        value: >
          `$this->get('twig')->render('template.html.twig', []);`
        correct: false
    help: |
      The `render()` method is a helper provided by `AbstractController` to easily render Twig templates and wrap the output in a `Response` object.
      https://symfony.com/doc/current/controller.html#rendering-templates

  -
    question: >
      How can you access query parameters (e.g., `?page=5`) from the `Request` object in a Symfony controller action?
    answers:
      -
        value: >
          `$request->query->get('page');`
        correct: true
      -
        value: >
          `$request->attributes->get('page');`
        correct: false
      -
        value: >
          `$request->request->get('page');`
        correct: false
      -
        value: >
          `$request->get('page');`
        correct: false
    help: |
      Query parameters are accessed via the `query` public property of the `Request` object, which is an instance of `ParameterBag`.
      https://symfony.com/doc/current/controller.html#accessing-the-request

  -
    question: >
      What is the required return type for any Symfony controller action method?
    answers:
      -
        value: >
          `void`
        correct: false
      -
        value: >
          `string`
        correct: false
      -
        value: >
          `Symfony\Component\HttpFoundation\Response`
        correct: true
      -
        value: >
          `array`
        correct: false
    help: |
      Every controller in Symfony must return a `Symfony\Component\HttpFoundation\Response` object, which represents the HTTP response to be sent back to the client.
      https://symfony.com/doc/current/controller.html#the-response

  -
    question: >
      Which of the following methods is used to add a flash message in a controller that extends `AbstractController`?
    answers:
      -
        value: >
          `$this->getSession()->getFlashBag()->add('type', 'message');`
        correct: false
      -
        value: >
          `$this->addFlash('type', 'message');`
        correct: true
      -
        value: >
          `$this->get('session')->addFlash('type', 'message');`
        correct: false
      -
        value: >
          `$this->flash('type', 'message');`
        correct: false
    help: |
      The `addFlash()` method is a convenient helper provided by `AbstractController` to add flash messages to the session.
      https://symfony.com/doc/current/controller.html#flash-messages

  -
    question: |
      How would you redirect a user to a named route `app_homepage` with a 302 (Found) status code from a controller extending `AbstractController`?
    answers:
      -
        value: >
          `return $this->redirect($this->generateUrl('app_homepage'));`
        correct: false
      -
        value: >
          `return $this->redirectToRoute('app_homepage');`
        correct: true
      -
        value: >
          `return $this->redirect('/homepage', 302);`
        correct: false
      -
        value: >
          `return new RedirectResponse($this->generateUrl('app_homepage'));`
        correct: true
    help: |
      The `redirectToRoute()` helper method is the recommended way to redirect to a named route. Alternatively, you can create a `RedirectResponse` directly using the generated URL. Both default to a 302 status.
      https://symfony.com/doc/current/controller.html#redirecting

  -
    question: >
      What is the purpose of the `forward()` method available in `AbstractController`?
    answers:
      -
        value: >
          To perform an HTTP redirect to another URL.
        correct: false
      -
        value: >
          To make an internal sub-request to another controller action and return its `Response`.
        correct: true
      -
        value: >
          To send the current request to a different server.
        correct: false
      -
        value: >
          To include a Twig template from another bundle.
        correct: false
    help: |
      The `forward()` method allows you to make an internal sub-request to another controller. This is useful for reusing controller logic or embedding content from other controllers.
      https://symfony.com/doc/current/controller/forwarding.html

  -
    question: >
      Which exception should you throw in a Symfony controller to generate a 404 "Not Found" HTTP response?
    answers:
      -
        value: >
          `\RuntimeException`
        correct: false
      -
        value: >
          `\Symfony\Component\HttpKernel\Exception\NotFoundHttpException`
        correct: true
      -
        value: >
          `\InvalidArgumentException`
        correct: false
      -
        value: >
          `\Symfony\Component\HttpFoundation\Exception\NotFoundException`
        correct: false
    help: |
      Throwing a `NotFoundHttpException` is the standard way to signal that a resource was not found, which Symfony's exception listener will convert into a 404 HTTP response. `AbstractController` provides a helper for this.
      https://symfony.com/doc/current/controller.html#generating-404-pages

  -
    question: |
      Consider the following controller action:

      ```php
      use Symfony\Component\HttpFoundation\Request;
      use Symfony\Component\HttpFoundation\Response;
      use Symfony\Component\Routing\Attribute\Route;

      class MyController
      {
          #[Route('/upload', methods: ['POST'])]
          public function upload(Request $request): Response
          {
              // How to get the uploaded file named 'my_file'?
              $file = /* ??? */;
              // ...
              return new Response('File uploaded!');
          }
      }
      ```

      Which line correctly retrieves an uploaded file named `my_file` from the `Request` object?
    answers:
      -
        value: >
          `$file = $request->files->get('my_file');`
        correct: true
      -
        value: >
          `$file = $request->request->get('my_file');`
        correct: false
      -
        value: >
          `$file = $request->query->get('my_file');`
        correct: false
      -
        value: >
          `$file = $request->get('my_file');`
        correct: false
    help: |
      Uploaded files are stored in the `files` public property of the `Request` object, which is an instance of `FileBag`.
      https://symfony.com/doc/current/controller.html#uploading-files

  -
    question: >
      What is an "invokable controller" in Symfony?
    answers:
      -
        value: >
          A controller that can be called directly from the command line.
        correct: false
      -
        value: >
          A controller class that implements the `__invoke()` magic method to handle requests.
        correct: true
      -
        value: >
          A controller that automatically handles all HTTP methods (GET, POST, etc.).
        correct: false
      -
        value: >
          A controller that can be executed without defining a route.
        correct: false
    help: |
      An invokable controller is a PHP class that defines the `__invoke()` method. When routed to, Symfony will call this method to handle the request. This pattern is often used for single-action controllers.
      https://symfony.com/doc/current/controller/service.html#invokable-controllers

  -
    question: >
      What is the primary role of Symfony's `ArgumentResolver`?
    answers:
      -
        value: >
          To resolve the controller callable from the request.
        correct: false
      -
        value: >
          To determine the values for controller method arguments based on the `Request` and route attributes.
        correct: true
      -
        value: >
          To convert the `Response` object into an HTTP response string.
        correct: false
      -
        value: >
          To validate input data before it reaches the controller.
        correct: false
    help: |
      The `ArgumentResolver` is responsible for figuring out what values to pass to each argument of your controller method. It uses information from the `Request` object (attributes, query, request body, etc.) and type hints.
      https://symfony.com/doc/current/components/http_kernel.html#controller-argument-resolution

  -
    question: |
      Which of the following attributes is used to automatically map an uploaded file to a controller argument