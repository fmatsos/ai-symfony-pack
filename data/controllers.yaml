category: Controllers

questions:
  -
    question: >
      Which of the following is the recommended naming convention for a Symfony controller class?
    answers:
      - { value: "UserController", correct: true }
      - { value: "user_controller", correct: false }
      - { value: "UserCtrl", correct: false }
      - { value: "controllerUser", correct: false }
    help: |
      Symfony recommends using PascalCase for controller class names, typically ending with "Controller".
      https://symfony.com/doc/current/controller.html#controller-naming-conventions

  -
    question: |
      Given the following controller, which method name adheres to Symfony's common naming conventions for a controller action?

      ```php
      namespace App\Controller;

      class ProductController
      {
          public function /* ??? */(): Response
          {
              // ...
          }
      }
      ```
    answers:
      - { value: "index()", correct: true }
      - { value: "listProducts()", correct: true }
      - { value: "show_product()", correct: false }
      - { value: "getProduct", correct: false }
    help: |
      Controller action methods commonly use names like `index`, `list`, `show`, `create`, `edit`, `delete`, etc., often followed by "Action" in older conventions, but now simply the action name is preferred.
      https://symfony.com/doc/current/controller.html#controller-naming-conventions

  -
    question: >
      What is an "invokable controller" in Symfony?
    answers:
      - { value: "A controller class that implements the `__invoke()` method to handle requests.", correct: true }
      - { value: "A controller that is automatically invoked by the kernel without a route.", correct: false }
      - { value: "A controller method that can be called directly from Twig.", correct: false }
      - { value: "A controller that uses a service locator to resolve dependencies.", correct: false }
    help: |
      An invokable controller is a PHP class that has a `__invoke()` method. When routed to, Symfony calls this method directly to handle the request.
      https://symfony.com/doc/current/controller/service.html#invokable-controllers

  -
    question: >
      Which PHP attribute is used to register a controller as a service and define its route in Symfony 7?
    answers:
      - { value: "`#[AsController]`", correct: true }
      - { value: "`#[Route]`", correct: true }
      - { value: "`#[Service]`", correct: false }
      - { value: "`#[Controller]`", correct: false }
    help: |
      The `#[AsController]` attribute registers a class as a controller service, and `#[Route]` defines the route for a method or an invokable controller.
      https://symfony.com/doc/current/controller/service.html#registering-controllers-as-services

  -
    question: >
      What is the primary benefit of extending `Symfony\Bundle\FrameworkBundle\Controller\AbstractController`?
    answers:
      - { value: "It automatically makes the controller a service.", correct: false }
      - { value: "It provides convenient helper methods for common controller tasks.", correct: true }
      - { value: "It enforces strict naming conventions for controller actions.", correct: false }
      - { value: "It makes the controller compatible with Doctrine ORM.", correct: false }
    help: |
      `AbstractController` provides shortcuts for common tasks like rendering templates, generating URLs, redirecting, and accessing services.
      https://symfony.com/doc/current/controller.html#the-base-abstractcontroller-class

  -
    question: |
      Which of the following methods, available in `AbstractController`, is used to render a Twig template and return a `Response`?
    answers:
      - { value: "`render('template.html.twig', ['data' => $value])`", correct: true }
      - { value: "`display('template.html.twig')`", correct: false }
      - { value: "`renderView('template.html.twig')`", correct: false }
      - { value: "`twig->render('template.html.twig')`", correct: false }
    help: |
      The `render()` method is a shortcut provided by `AbstractController` to render a Twig template and create a `Response` object.
      https://symfony.com/doc/current/controller.html#rendering-templates

  -
    question: >
      How can you access a service, such as `Psr\Log\LoggerInterface`, directly in a controller action method without manually configuring it in `services.yaml`?
    answers:
      - { value: "By type-hinting the service interface in the method signature.", correct: true }
      - { value: "By calling `$this->get('logger')`.", correct: false }
      - { value: "By using the `#[Inject]` attribute.", correct: false }
      - { value: "Services cannot be injected directly into action methods.", correct: false }
    help: |
      Symfony's autowiring mechanism automatically injects services into controller action arguments when type-hinted, provided the controller is registered as a service.
      https://symfony.com/doc/current/controller.html#autowiring-action-arguments

  -
    question: |
      Which method of `AbstractController` should you use to generate a URL for a named route?
    answers:
      - { value: "`generateUrl('app_home', ['param' => 'value'])`", correct: true }
      - { value: "`url('app_home')`", correct: false }
      - { value: "`path('app_home')`", correct: false }
      - { value: "`router->generate('app_home')`", correct: false }
    help: |
      The `generateUrl()` method is a shortcut in `AbstractController` to generate a URL based on a route name and parameters.
      https://symfony.com/doc/current/controller.html#generating-urls

  -
    question: >
      What is the purpose of the `Symfony\Component\HttpFoundation\Request` object in a controller?
    answers:
      - { value: "To represent the incoming HTTP request and provide access to its data.", correct: true }
      - { value: "To send the HTTP response back to the client.", correct: false }
      - { value: "To manage the application's session data.", correct: false }
      - { value: "To handle database interactions.", correct: false }
    help: |
      The `Request` object encapsulates all information about the current HTTP request, including headers, query parameters, request body, and uploaded files.
      https://symfony.com/doc/current/controller.html#the-request-object

  -
    question: |
      How do you retrieve a query parameter named `page` from the `Request` object in a controller, with a default value of `1` if it's not present?
    answers:
      - { value: "`$request->query->get('page', 1)`", correct: true }
      - { value: "`$request->get('page', 1)`", correct: false }
      - { value: "`$request->query['page'] ?? 1`", correct: false }
      - { value: "`$request->attributes->get('page', 1)`", correct: false }
    help: |
      Query parameters are accessed via the `query` public property of the `Request` object, which is an instance of `ParameterBag`.
      https://symfony.com/doc/current/controller.html#accessing-the-request

  -
    question: >
      Which of the following is the correct way to get a value from the request body (e.g., from a POST request with `application/x-www-form-urlencoded` data)?
    answers:
      - { value: "`$request->request->get('fieldName')`", correct: true }
      - { value: "`$request->query->get('fieldName')`", correct: false }
      - { value: "`$request->getContent()`", correct: false }
      - { value: "`$request->body->get('fieldName')`", correct: false }
    help: |
      For POST data from forms, use `$request->request`. For raw body content (like JSON), use `$request->getContent()`.
      https://symfony.com/doc/current/controller.html#accessing-the-request

  -
    question: >
      What is the purpose of `Symfony\Component\HttpFoundation\Response`?
    answers:
      - { value: "To encapsulate the HTTP response that will be sent back to the client.", correct: true }
      - { value: "To handle routing logic within the application.", correct: false }
      - { value: "To store temporary user data.", correct: false }
      - { value: "To process incoming HTTP requests.", correct: false }
    help: |
      Every controller in Symfony must return an instance of `Symfony\Component\HttpFoundation\Response` or one of its subclasses.
      https://symfony.com/doc/current/controller.html#the-response-object

  -
    question: |
      How do you set the HTTP status code of a `Response` object to `201 Created`?
    answers:
      - { value: "`$response->setStatusCode(Response::HTTP_CREATED)`", correct: true }
      - { value: "`$response->setStatusCode(201)`", correct: true }
      - { value: "`$response->status(201)`", correct: false }
      - { value: "`$response->set('status', 201)`", correct: false }
    help: |
      The `setStatusCode()` method is used to set the HTTP status code. You can use integer values or constants from `Response`.
      https://symfony.com/doc/current/components/http_foundation.html#response-status-codes

  -
    question: >
      Which `Response` subclass is typically used to return JSON data from a controller?
    answers:
      - { value: "`Symfony\Component\HttpFoundation\JsonResponse`", correct: true }
      - { value: "`Symfony\Component\HttpFoundation\HtmlResponse`", correct: false }
      - { value: "`Symfony\Component\HttpFoundation\XmlResponse`", correct: false }
      - { value: "`Symfony\Component\HttpFoundation\TextResponse`", correct: false }
    help: |
      `JsonResponse` is a specialized `Response` class that automatically sets the `Content-Type` header to `application/json` and encodes the provided data.
      https://symfony.com/doc/current/components/http_foundation.html#json-response

  -
    question: |
      You want to send a file download from your controller. Which `Response` subclass is most appropriate for this task?
    answers:
      - { value: "`BinaryFileResponse`", correct: true }
      - { value: "`FileResponse`", correct: false }
      - { value: "`StreamedResponse`", correct: false }
      - { value: "`AttachmentResponse`", correct: false }
    help: |
      `BinaryFileResponse` is designed for serving files directly, handling headers like `Content-Disposition` for downloads.
      https://symfony.com/doc/current/components/http_foundation.html#serving-files

  -
    question: |
      How do you set a cookie named `my_cookie` with the value `my_value` and a lifetime of 1 hour from a Symfony controller?
    answers:
      - { value: "`$response->headers->setCookie(new Cookie('my_cookie', 'my_value', new \DateTime('+1 hour')))`", correct: true }
      - { value: "`$response->withCookie('my_cookie', 'my_value', 3600)`", correct: false }
      - { value: "`$request->cookies->set('my_cookie', 'my_value', 3600)`", correct: false }
      - { value: "`$this->setCookie('my_cookie', 'my_value', 3600)`", correct: false }
    help: |
      Cookies are set on the `Response` object's `headers` property using the `setCookie()` method, which expects a `Cookie` object.
      https://symfony.com/doc/current/components/http_foundation.html#setting-cookies

  -
    question: >
      How can you retrieve the value of a cookie named `user_preference` from the `Request` object?
    answers:
      - { value: "`$request->cookies->get('user_preference')`", correct: true }
      - { value: "`$request->getCookie('user_preference')`", correct: false }
      - { value: "`$request->headers->get('Cookie')['user_preference']`", correct: false }
      - { value: "`$request->query->get('user_preference')`", correct: false }
    help: |
      Cookies sent by the client are available via the `cookies` public property of the `Request` object.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-cookies

  -
    question: >
      Which of the following is true regarding cookie security in Symfony?
    answers:
      - { value: "The `secure` attribute ensures the cookie is only sent over HTTPS.", correct: true }
      - { value: "The `httponly` attribute prevents JavaScript from accessing the cookie.", correct: true }
      - { value: "Cookies are encrypted by default when sent from Symfony.", correct: false }
      - { value: "The `samesite` attribute protects against XSS attacks.", correct: false }
    help: |
      The `secure` and `httponly` attributes are crucial for cookie security. `samesite` protects against CSRF, not XSS.
      https://symfony.com/doc/current/components/http_foundation.html#cookie-security

  -
    question: >
      How do you access the session object within a controller that extends `AbstractController`?
    answers:
      - { value: "`$this->requestStack->getSession()`", correct: true }
      - { value: "`$this->session`", correct: false }
      - { value: "`$request->getSession()`", correct: true }
      - { value: "`$this->get('session')`", correct: false }
    help: |
      You can get the session from the `Request` object (`$request->getSession()`) or inject `RequestStack` and then get the session (`$requestStack->getSession()`).
      https://symfony.com/doc/current/controller.html#accessing-the-session

  -
    question: |
      How do you store a value, `user_id`, in the session?
    answers:
      - { value: "`$session->set('user_id', 123)`", correct: true }
      - { value: "`$session->add('user_id', 123)`", correct: false }
      - { value: "`$session['user_id'] = 123`", correct: false }
      - { value: "`$session->store('user_id', 123)`", correct: false }
    help: |
      The `Session` object provides a `set()` method to store attributes.
      https://symfony.com/doc/current/components/http_foundation.html#session-attributes

  -
    question: >
      Which method is used to remove a specific attribute from the session?
    answers:
      - { value: "`$session->remove('attribute_name')`", correct: true }
      - { value: "`$session->delete('attribute_name')`", correct: false }
      - { value: "`$session->unset('attribute_name')`", correct: false }
      - { value: "`$session->clear('attribute_name')`", correct: false }
    help: |
      The `remove()` method is used to delete a specific attribute from the session.
      https://symfony.com/doc/current/components/http_foundation.html#session-attributes

  -
    question: >
      What happens to the session data when a user closes their browser if no specific session lifetime is configured?
    answers:
      - { value: "The session cookie is typically deleted, and the session data becomes inaccessible.", correct: true }
      - { value: "The session data persists indefinitely on the server.", correct: false }
      - { value: "Symfony automatically transfers the session to local storage.", correct: false }
      - { value: "A new session is created immediately upon reopening the browser.", correct: false }
    help: |
      By default, session cookies are "session cookies" (no `Expires` or `Max-Age`), meaning they expire when the browser is closed. The session data might remain on the server for a while, but without the cookie, it's unreachable.
      https://symfony.com/doc/current/components/http_foundation.html#session-lifetime

  -
    question: >
      What are "flash messages" primarily used for in Symfony controllers?
    answers:
      - { value: "To display one-time notifications to the user after a redirect.", correct: true }
      - { value: "To store persistent user preferences across multiple requests.", correct: false }
      - { value: "To send real-time notifications via WebSockets.", correct: false }
      - { value: "To log errors and debugging information.", correct: false }
    help: |
      Flash messages are special session attributes that are only available for the next request and are then automatically removed.
      https://symfony.com/doc/current/controller.html#flash-messages

  -
    question: |
      How do you add a flash message of type `success` with the content "Item saved successfully!" in a controller extending `AbstractController`?
    answers:
      - { value: "`$this->addFlash('success', 'Item saved successfully!')`", correct: true }
      - { value: "`$this->get('session')->getFlashBag()->add('success', 'Item saved successfully!')`", correct: true }
      - { value: "`$this->flash('success', 'Item saved successfully!')`", correct: false }
      - { value: "`$session->setFlash('success', 'Item saved successfully!')`", correct: false }
    help: |
      The `addFlash()` method is a shortcut provided by `AbstractController`. Alternatively, you can directly access the session's flash bag.
      https://symfony.com/doc/current/controller.html#flash-messages

  -
    question: >
      How do you retrieve all flash messages of a specific type, e.g., `error`, in a Twig template after a redirect?
    answers:
      - { value: "`{% for message in app.flashes('error') %}`", correct: true }
      - { value: "`{% for message in app.session.flashbag.get('error') %}`", correct: true }
      - { value: "`{% for message in app.flash('error') %}`", correct: false }
      - { value: "`{% for message in flashes.error %}`", correct: false }
    help: |
      Flash messages are accessible in Twig via `app.flashes()` or directly from the session's flash bag.
      https://symfony.com/doc/current/controller.html#flash-messages

  -
    question: >
      Which of the following methods in `AbstractController` is used to redirect to an arbitrary URL?
    answers:
      - { value: "`redirect(url: '/some/path')`", correct: true }
      - { value: "`redirectToUrl(url: '/some/path')`", correct: false }
      - { value: "`forward(controller: 'App\\\\Controller\\\\SomeController')`", correct: false }
      - { value: "`route('/some/path')`", correct: false }
    help: |
      The `redirect()` method creates a `RedirectResponse` to a given URL.
      https://symfony.com/doc/current/controller.html#http-redirects

  -
    question: |
      You need to redirect a user to a specific named route, `app_product_show`, with a `productId` parameter. Which method should you use?
    answers:
      - { value: "`$this->redirectToRoute('app_product_show', ['productId' => $id])`", correct: true }
      - { value: "`$this->redirect($this->generateUrl('app_product_show', ['productId' => $id]))`", correct: true }
      - { value: "`$this->forward('app_product_show', ['productId' => $id])`", correct: false }
      - { value: "`$this->redirectRoute('app_product_show', ['productId' => $id])`", correct: false }
    help: |
      `redirectToRoute()` is a convenient shortcut for redirecting to a named route. You can also achieve this by generating the URL first and then redirecting.
      https://symfony.com/doc/current/controller.html#http-redirects

  -
    question: >
      What is the default HTTP status code for a redirect performed by `redirectToRoute()` or `redirect()`?
    answers:
      - { value: "302 Found", correct: true }
      - { value: "301 Moved Permanently", correct: false }
      - { value: "303 See Other", correct: false }
      - { value: "307 Temporary Redirect", correct: false }
    help: |
      The default status code for redirects in Symfony is `302 Found`, indicating a temporary redirect.
      https://symfony.com/doc/current/controller.html#http-redirects

  -
    question: >
      When would you typically use a `301 Moved Permanently` redirect instead of the default `302 Found`?
    answers:
      - { value: "When the resource has permanently moved to a new URL, for SEO purposes.", correct: true }
      - { value: "When you want to temporarily redirect the user after a form submission.", correct: false }
      - { value: "When the redirect should not be cached by the browser.", correct: false }
      - { value: "When redirecting to an external website.", correct: false }
    help: |
      `301 Moved Permanently` indicates that the original URL should no longer be used and helps search engines update their indexes.
      https://symfony.com/doc/current/controller.html#http-redirects

  -
    question: >
      What is the primary difference between an HTTP redirect (using `redirectToRoute` or `redirect`) and an internal redirect (using `forward()`)?
    answers:
      - { value: "HTTP redirects send a new HTTP response to the client, while internal redirects process a sub-request internally without a new client-side roundtrip.", correct: true }
      - { value: "HTTP redirects are faster than internal redirects.", correct: false }
      - { value: "Internal redirects can only be used within the same controller.", correct: false }
      - { value: "HTTP redirects pass request attributes, while internal redirects do not.", correct: false }
    help: |
      `forward()` is used for "internal redirects" or "sub-requests," where Symfony handles another controller internally without the browser knowing.
      https://symfony.com/doc/current/controller/forwarding.html

  -
    question: |
      Given the following controller, how would you internally forward the request to `App\Controller\OtherController::fancy` with `name` and `color` arguments?

      ```php
      namespace App\Controller;

      use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
      use Symfony\Component\HttpFoundation\Response;

      class MyController extends AbstractController
      {
          public function index(string $name): Response
          {
              // ???
          }
      }
      ```
    answers:
      - { value: "`return $this->forward('App\\\\Controller\\\\OtherController::fancy', ['name' => $name, 'color' => 'green']);`", correct: true }
      - { value: "`return $this->redirect('App\\\\Controller\\\\OtherController::fancy', ['name' => $name, 'color' => 'green']);`", correct: false }
      - { value: "`return $this->renderController('App\\\\Controller\\\\OtherController::fancy', ['name' => $name, 'color' => 'green']);`", correct: false }
      - { value: "`return $this->call('App\\\\Controller\\\\OtherController::fancy', ['name' => $name, 'color' => 'green']);`", correct: false }
    help: |
      The `forward()` method of `AbstractController` is used to make an internal sub-request to another controller.
      https://symfony.com/doc/current/controller/forwarding.html

  -
    question: >
      What is the return type of the `forward()` method?
    answers:
      - { value: "`Symfony\Component\HttpFoundation\Response`", correct: true }
      - { value: "`Symfony\Component\HttpFoundation\RedirectResponse`", correct: false }
      - { value: "`void`", correct: false }
      - { value: "`null`", correct: false }
    help: |
      The `forward()` method returns the `Response` object generated by the forwarded controller.
      https://symfony.com/doc/current/controller/forwarding.html

  -
    question: >
      Which of the following is the correct way to generate a 404 Not Found page in a Symfony controller extending `AbstractController`?
    answers:
      - { value: "`throw $this->createNotFoundException('The resource was not found!');`", correct: true }
      - { value: "`return new Response('Not Found', 404);`", correct: true }
      - { value: "`$this->render('bundles/TwigBundle/Exception/error404.html.twig');`", correct: false }
      - { value: "`return $this->notFound();`", correct: false }
    help: |
      Throwing a `NotFoundHttpException` (created via `createNotFoundException()`) is the standard way to trigger a 404 response, which Symfony's exception listener will then render. You can also manually create a `Response` with a 404 status.
      https://symfony.com/doc/current/controller.html#creating-a-404-page

  -
    question: >
      When should you throw a `NotFoundHttpException` in a controller?
    answers:
      - { value: "When a requested resource (e.g., a database entity) does not exist.", correct: true }
      - { value: "When a user is not authenticated.", correct: false }
      - { value: "When a form submission fails validation.", correct: false }
      - { value: "When there is an internal server error.", correct: false }
    help: |
      `NotFoundHttpException` is specifically for cases where the requested resource cannot be found.
      https://symfony.com/doc/current/controller.html#creating-a-404-page

  -
    question: |
      Which PHP attribute allows you to automatically map an uploaded file from the request to an `UploadedFile` object in a controller argument?
    answers:
      - { value: "`#[MapUploadedFile]`", correct: true }
      - { value: "`#[FileUpload]`", correct: false }
      - { value: "`#[RequestFile]`", correct: false }
      - { value: "`#[File]`", correct: false }
    help: |
      The `#[MapUploadedFile]` attribute, part of argument value resolvers, simplifies handling file uploads by injecting an `UploadedFile` object directly.
      https://symfony.com/doc/current/controller.html#uploaded-files

  -
    question: |
      Given the following controller action, how would you correctly receive an uploaded file named `picture`?

      ```php
      namespace App\Controller;

      use Symfony\Component\HttpFoundation\File\UploadedFile;
      use Symfony\Component\HttpFoundation\Response;
      use Symfony\Component\HttpKernel\Attribute\MapUploadedFile;
      use Symfony\Component\Routing\Attribute\Route;

      class UserController
      {
          #[Route('/user/upload', methods: ['POST'])]
          public function upload(/* ??? */ $picture): Response
          {
              // ...
          }
      }
      ```
    answers:
      - { value: "`#[MapUploadedFile] UploadedFile $picture`", correct: true }
      - { value: "`UploadedFile $picture`", correct: false }
      - { value: "`Request $request, string $picture`", correct: false }
      - { value: "`#[MapUploadedFile(name: 'picture')] UploadedFile $file`", correct: false }
    help: |
      The `#[MapUploadedFile]` attribute is used with a type-hinted `UploadedFile` argument, and Symfony automatically matches it by argument name.
      https://symfony.com/doc/current/controller.html#uploaded-files

  -
    question: >
      What is the purpose of the `render()` Twig function when embedding controllers in a template?
    answers:
      - { value: "To execute a controller action and embed its output directly into the current template.", correct: true }
      - { value: "To include another Twig template file.", correct: false }
      - { value: "To generate a URL for a controller action.", correct: false }
      - { value: "To pass variables from the main controller to a sub-template.", correct: false }
    help: |
      The `render()` Twig function, often used with `controller()` or `path()`, allows you to embed the output of another controller into your current template.
      https://symfony.com/doc/current/templates.html#embedding-controllers

  -
    question: |
      Which Twig function is used to create a `ControllerReference` that can then be passed to `render()` to embed a controller?
    answers:
      - { value: "`controller('App\\\\Controller\\\\BlogController::recentArticles', {max: 3})`", correct: true }
      - { value: "`path('latest_articles', {max: 3})`", correct: true }
      - { value: "`embed_controller('App\\\\Controller\\\\BlogController::recentArticles')`", correct: false }
      - { value: "`include_controller('App\\\\Controller\\\\BlogController::recentArticles')`", correct: false }
    help: |
      You can use `controller()` to specify the controller directly or `path()`/`url()` if the controller is associated with a route. Both generate a `ControllerReference`.
      https://symfony.com/doc/current/templates.html#embedding-controllers

  -
    question: >
      What is the primary role of Symfony's Argument Value Resolvers?
    answers:
      - { value: "To determine the values for controller method arguments based on the `Request` and other sources.", correct: true }
      - { value: "To resolve service dependencies for controllers.", correct: false }
      - { value: "To convert route parameters into specific PHP types.", correct: true }
      - { value: "To validate incoming request data.", correct: false }
    help: |
      Argument Value Resolvers are responsible for populating controller method arguments, converting request data or route parameters into the correct PHP types or objects.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html

  -
    question: |
      Given the route `/products/{id}`, and a controller method `public function show(int $id)`, how does Symfony's `ArgumentResolver` provide the `$id` value?
    answers:
      - { value: "It matches the argument name `$id` with the `id` attribute from the route.", correct: true }
      - { value: "It automatically casts the URL segment to an integer based on the type-hint.", correct: true }
      - { value: "It relies on a custom value resolver for integer conversion.", correct: false }
      - { value: "It retrieves `$id` from the query string.", correct: false }
    help: |
      The `ArgumentResolver` automatically maps route parameters to controller arguments by name and performs scalar type conversions.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html

  -
    question: >
      Which of the following types can be automatically injected into a controller method argument by Symfony's default argument resolvers?
    answers:
      - { value: "`Symfony\Component\HttpFoundation\Request`", correct: true }
      - { value: "Scalar types (`int`, `string`, `float`, `bool`)", correct: true }
      - { value: "Entities (e.g., `App\Entity\Product`) if Doctrine is configured for ParamConverter.", correct: true }
      - { value: "Custom classes without a dedicated value resolver.", correct: false }
    help: |
      Symfony provides built-in resolvers for `Request`, scalar types, and with the SensioFrameworkExtraBundle (or Symfony 6+ built-in ParamConverter), entities.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html

  -
    question: >
      What is the purpose of implementing `Symfony\Component\HttpKernel\Controller\ValueResolverInterface`?
    answers:
      - { value: "To create a custom argument value resolver for injecting specific objects into controller arguments.", correct: true }
      - { value: "To define a new type of controller.", correct: false }
      - { value: "To handle request dispatching before the controller is called.", correct: false }
      - { value: "To manage service definitions in the dependency injection container.", correct: false }
    help: |
      Implementing `ValueResolverInterface` allows you to define your own logic for how certain types of arguments are resolved and injected into controller methods.
      https://symfony.com/doc/current/controller/value_resolver.html

  -
    question: |
      Consider the following controller action:

      ```php
      public function show(Request $request, int $id): Response
      {
          // ...
      }
      ```
      Which of the following statements is true regarding the order of arguments?
    answers:
      - { value: "The order of `$request` and `$id` does not matter; Symfony's `ArgumentResolver` will correctly inject them.", correct: true }
      - { value: "The `Request` object must always be the first argument.", correct: false }
      - { value: "The `$id` parameter must always come before the `Request` object.", correct: false }
      - { value: "This signature will cause an error because of mixed argument types.", correct: false }
    help: |
      Symfony's `ArgumentResolver` is smart enough to match arguments by type-hint and name, so the order of arguments typically doesn't matter.
      https://symfony.com/doc/current/create_framework/http_kernel_controller_resolver.html#controller-method-arguments

  -
    question: >
      Which of the following is NOT a responsibility of a Symfony controller?
    answers:
      - { value: "Directly manipulating the database (e.g., executing raw SQL queries).", correct: true }
      - { value: "Handling incoming HTTP requests.", correct: false }
      - { value: "Returning a `Response` object.", correct: false }
      - { value: "Orchestrating interactions between services and the view layer.", correct: false }
    help: |
      Controllers should delegate complex business logic and data persistence to services (e.g., repositories, managers) to maintain a clean separation of concerns.
      https://symfony.com/doc/current/best_practices.html#controllers

  -
    question: >
      What is the purpose of the `kernel.controller` event in Symfony's HttpKernel?
    answers:
      - { value: "It is dispatched after the controller callable has been determined but before its execution.", correct: true }
      - { value: "It is dispatched before routing to determine the controller.", correct: false }
      - { value: "It is dispatched after the controller has returned a `Response`.", correct: false }
      - { value: "It is used to handle exceptions thrown by the controller.", correct: false }
    help: |
      The `kernel.controller` event allows listeners to inspect or even change the controller before it is executed.
      https://symfony.com/doc/current/components/http_kernel.html#the-kernel-controller-event

  -
    question: |
      You want to access a configuration parameter, e.g., `app.uploads_directory`, within your controller. How can you do this if your controller extends `AbstractController`?
    answers:
      - { value: "`$this->getParameter('app.uploads_directory')`", correct: true }
      - { value: "`$this->container->getParameter('app.uploads_directory')`", correct: false }
      - { value: "`$this->params->get('app.uploads_directory')`", correct: false }
      - { value: "`$this->get('parameter_bag')->get('app.uploads_directory')`", correct: true }
    help: |
      `AbstractController` provides a `getParameter()` shortcut. You can also inject the `ParameterBagInterface` or access it via the container if it's available.
      https://symfony.com/doc/current/controller.html#accessing-configuration-parameters

  -
    question: >
      Which command is typically used to generate a new empty controller class and its corresponding Twig template in Symfony?
    answers:
      - { value: "`php bin/console make:controller MyNewController`", correct: true }
      - { value: "`php bin/console generate:controller MyNewController`", correct: false }
      - { value: "`php bin/console create:controller MyNewController`", correct: false }
      - { value: "`php bin/console new:controller MyNewController`", correct: false }
    help: |
      The `make:controller` command from the Symfony Maker bundle is the standard way to scaffold new controllers.
      https://symfony.com/doc/current/controller.html#generating-a-controller

  -
    question: >
      When creating a controller for an API that will return JSON, which flag should you use with `make:controller` to prevent generating a Twig template?
    answers:
      - { value: "`--no-template`", correct: true }
      - { value: "`--json`", correct: false }
      - { value: "`--api`", correct: false }
      - { value: "`--skip-template`", correct: false }
    help: |
      The `--no-template` flag tells the Maker bundle not to create a Twig template file for the new controller.
      https://symfony.com/doc/current/security.html#_snippet_26

  -
    question: >
      What is the primary purpose of the `HttpKernel` component in Symfony?
    answers:
      - { value: "To handle the entire lifecycle of an HTTP request, from receiving it to sending a response.", correct: true }
      - { value: "To manage database connections.", correct: false }
      - { value: "To provide a templating engine for views.", correct: false }
      - { value: "To define routes for the application.", correct: false }
    help: |
      The `HttpKernel` component is the core of Symfony, responsible for dispatching requests to controllers and managing the response.
      https://symfony.com/doc/current/components/http_kernel.html

  -
    question: >
      Which interface defines the contract for controller resolvers in Symfony's HttpKernel?
    answers:
      - { value: "`Symfony\Component\HttpKernel\Controller\ControllerResolverInterface`", correct: true }
      - { value: "`Symfony\Component\Routing\Matcher\UrlMatcherInterface`", correct: false }
      - { value: "`Symfony\Component\EventDispatcher\EventSubscriberInterface`", correct: false }
      - { value: "`Symfony\Component\HttpFoundation\RequestStack`", correct: false }
    help: |
      `ControllerResolverInterface` specifies the `getController()` method, which is used to determine the callable controller for a given request.
      https://symfony.com/doc/current/components/http_kernel.html#controller-resolution

  -
    question: >
      What happens if a controller method argument is type-hinted with a class that is not a service and for which no argument value resolver exists?
    answers:
      - { value: "Symfony will throw an `ArgumentResolverException` or similar error.", correct: true }
      - { value: "The argument will be `null`.", correct: false }
      - { value: "Symfony will attempt to instantiate the class with no arguments.", correct: false }
      - { value: "The request will be forwarded to a default error controller.", correct: false }
    help: |
      If Symfony cannot resolve an argument's value using its built-in resolvers or a custom one, it will result in an error.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#creating-a-custom-argument-value-resolver

  -
    question: >
      Which of the following best describes the role of a "front controller" in a Symfony application?
    answers:
      - { value: "A single entry point for all web requests, responsible for bootstrapping the application and dispatching requests.", correct: true }
      - { value: "A controller that handles only the homepage of the application.", correct: false }
      - { value: "A controller that serves static assets like CSS and JavaScript.", correct: false }
      - { value: "A class that manages user authentication.", correct: false }
    help: |
      The front controller (usually `public/index.php`) is the central script that handles all incoming requests in a Symfony application.
      https://symfony.com/doc/current/create_framework/front_controller.html

  -
    question: >
      What is the purpose of the `RequestStack` service in Symfony?
    answers:
      - { value: "To manage a stack of `Request` objects, especially useful in sub-requests or when dealing with multiple requests in a single process.", correct: true }
      - { value: "To store and retrieve session data.", correct: false }
      - { value: "To handle HTTP caching for responses.", correct: false }
      - { value: "To provide access to environment variables.", correct: false }
    help: |
      `RequestStack` allows you to access the current master request and any sub-requests, which is crucial for features like `forward()`.
      https://symfony.com/doc/current/components/http_foundation.html#request-stack

  -
    question: >
      When using `#[AsController]` on a controller class, what does it signify to the Symfony service container?
    answers:
      - { value: "That the class should be registered as a service and tagged with `controller.service_arguments`.", correct: true }
      - { value: "That the class should be autowired automatically.", correct: false }
      - { value: "That the class methods are automatically exposed as routes.", correct: false }
      - { value: "That the class is a special type of service for handling HTTP requests.", correct: false }
    help: |
      The `#[AsController]` attribute is a convenient way to mark a class as a controller, ensuring it's properly configured as a service and enabling argument autowiring.
      https://symfony.com/doc/current/controller/service.html#registering-controllers-as-services

  -
    question: >
      You are building a form in your controller. Which method of `AbstractController` is used to create a form builder for a specific form type?
    answers:
      - { value: "`$this->createForm(MyFormType::class, $data)`", correct: true }
      - { value: "`$this->formFactory->create(MyFormType::class, $data)`", correct: false }
      - { value: "`$this->buildForm(MyFormType::class, $data)`", correct: false }
      - { value: "`$this->getForm(MyFormType::class, $data)`", correct: false }
    help: |
      The `createForm()` method is a shortcut in `AbstractController` to create and return a `Form` instance.
      https://symfony.com/doc/current/forms.html#building-the-form

  -
    question: >
      After a form submission, which method of the `Form` object is typically called in a controller to handle the request data?
    answers:
      - { value: "`$form->handleRequest($request)`", correct: true }
      - { value: "`$form->submit($request)`", correct: false }
      - { value: "`$form->bind($request)`", correct: false }
      - { value: "`$form->process($request)`", correct: false }
    help: |
      The `handleRequest()` method inspects the `Request` object and updates the form's data based on the submitted values.
      https://symfony.com/doc/current/forms.html#handling-form-submissions

  -
    question: >
      What is the purpose of the `isSubmitted()` and `isValid()` methods on a `Form` object in a controller?
    answers:
      - { value: "`isSubmitted()` checks if the form has been submitted, and `isValid()` checks if the submitted data passes validation rules.", correct: true }
      - { value: "`isSubmitted()` checks if the form is rendered, and `isValid()` checks if all fields are filled.", correct: false }
      - { value: "Both methods check if the form data is valid.", correct: false }
      - { value: "`isSubmitted()` checks if the request method is POST, and `isValid()` checks CSRF token.", correct: false }
    help: |
      These methods are crucial for processing form submissions: `isSubmitted()` confirms data was sent, and `isValid()` checks against validation constraints.
      https://symfony.com/doc/current/forms.html#handling-form-submissions

  -
    question: >
      Which of the following best describes the principle of "thin controllers" in Symfony?
    answers:
      - { value: "Controllers should contain minimal logic and delegate complex tasks to services.", correct: true }
      - { value: "Controllers should only return HTML responses.", correct: false }
      - { value: "Controllers should not extend `AbstractController`.", correct: false }
      - { value: "Controllers should only have one action method.", correct: false }
    help: |
      "Thin controllers, fat models/services" is a common architectural pattern promoting separation of concerns.
      https://symfony.com/doc/current/best_practices.html#controllers

  -
    question: >
      When a controller method has a parameter like `#[MapQueryParameter] string $search`, what does this attribute do?
    answers:
      - { value: "It automatically injects the value of the `search` query parameter into the `$search` argument.", correct: true }
      - { value: "It makes the `$search` argument optional.", correct: false }
      - { value: "It validates that the `search` query parameter is a string.", correct: false }
      - { value: "It maps a route parameter named `search`.", correct: false }
    help: |
      `#[MapQueryParameter]` is an argument value resolver that specifically targets query parameters.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#query-parameters

  -
    question: >
      Which of the following is a valid way to define a controller in Symfony 7 using PHP attributes?
    answers:
      - { value: |
          ```php
          #[Route('/blog', name: 'blog_list')]
          class BlogController extends AbstractController
          {
              public function list(): Response { /* ... */ }
          }
          ```, correct: true }
      - { value: |
          ```php
          class BlogController extends AbstractController
          {
              #[Route('/blog', name: 'blog_list')]
              public function list(): Response { /* ... */ }
          }
          ```, correct: true }
      - { value: |
          ```php
          #[Controller(path: '/blog', name: 'blog_list')]
          class BlogController { /* ... */ }
          ```, correct: false }
      - { value: |
          ```php
          class BlogController
          {
              public #[Route('/blog')] function list(): Response { /* ... */ }
          }
          ```, correct: false }
    help: |
      The `#[Route]` attribute can be placed on the class for an invokable controller or on individual methods for action methods.
      https://symfony.com/doc/current/controller.html#defining-a-controller

  -
    question: >
      What is the purpose of the `#[MapRequestPayload]` attribute?
    answers:
      - { value: "To automatically deserialize the request body (e.g., JSON, XML) into a PHP object or DTO.", correct: true }
      - { value: "To map individual fields from the request body to controller arguments.", correct: false }
      - { value: "To validate the entire request payload.", correct: false }
      - { value: "To encrypt the request payload before processing.", correct: false }
    help: |
      `#[MapRequestPayload]` simplifies handling structured request bodies by automatically converting them into PHP objects.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#mapping-request-payloads

  -
    question: >
      Which component is responsible for transforming a `_controller` string (e.g., `App\Controller\MyController::index`) into a PHP callable?
    answers:
      - { value: "`ControllerResolver`", correct: true }
      - { value: "`UrlMatcher`", correct: false }
      - { value: "`ArgumentResolver`", correct: false }
      - { value: "`Router`", correct: false }
    help: |
      The `ControllerResolver` is part of the HttpKernel and is responsible for determining the actual PHP callable from the route's `_controller` attribute.
      https://symfony.com/doc/current/components/http_kernel.html#controller-resolution

  -
    question: >
      What is the primary benefit of using invokable controllers (`__invoke()` method)?
    answers:
      - { value: "They are ideal for simple, single-action controllers, promoting the Action-Domain-Responder (ADR) pattern.", correct: true }
      - { value: "They are faster than traditional controllers.", correct: false }
      - { value: "They do not require routing configuration.", correct: false }
      - { value: "They automatically handle form submissions.", correct: false }
    help: |
      Invokable controllers are often preferred for their simplicity when a controller has only one logical action.
      https://symfony.com/doc/current/controller/service.html#invokable-controllers

  -
    question: >
      How can you access the `Request` object in a controller method if you are NOT extending `AbstractController`?
    answers:
      - { value: "By type-hinting `Symfony\Component\HttpFoundation\Request` as an argument.", correct: true }
      - { value: "By injecting the `request_stack` service and calling `getCurrentRequest()`.", correct: true }
      - { value: "By using the global `$_REQUEST` superglobal.", correct: false }
      - { value: "It's not possible without extending `AbstractController`.", correct: false }
    help: |
      Symfony's argument resolvers will inject the `Request` object if type-hinted. Alternatively, you can inject the `RequestStack` service.
      https://symfony.com/doc/current/controller.html#accessing-the-request

  -
    question: >
      Which of the following is true about the `Response` object returned by a controller?
    answers:
      - { value: "It must be an instance of `Symfony\Component\HttpFoundation\Response` or one of its subclasses.", correct: true }
      - { value: "It is automatically sent to the client by the controller.", correct: false }
      - { value: "It can only contain HTML content.", correct: false }
      - { value: "It is always cached by default.", correct: false }
    help: |
      The `Response` object encapsulates the full HTTP response, and the kernel is responsible for sending it.
      https://symfony.com/doc/current/controller.html#the-response-object

  -
    question: >
      What is the purpose of the `#[MapEntity]` attribute (provided by `SensioFrameworkExtraBundle` or built-in in newer Symfony versions) when used in a controller argument?
    answers:
      - { value: "To automatically convert a route parameter into a Doctrine entity object.", correct: true }
      - { value: "To map request parameters to entity properties.", correct: false }
      - { value: "To validate entity data before persistence.", correct: false }
      - { value: "To create a new entity instance.", correct: false }
    help: |
      `#[MapEntity]` (or ParamConverter functionality) simplifies fetching entities from the database based on route parameters.
      https://symfony.com/doc/current/bundles/SensioFrameworkExtraBundle/annotations/converters.html (Note: While `SensioFrameworkExtraBundle` is mentioned, the core functionality for entity mapping is now often built-in or handled by specific resolvers in newer Symfony versions, aligning with the prompt's focus on Symfony 7.)

  -
    question: >
      When should you use `#[MapQueryParameter]` versus directly accessing `$request->query->get()`?
    answers:
      - { value: "`#[MapQueryParameter]` is cleaner for simple, direct mapping of query parameters to arguments, while `$request->query->get()` offers more flexibility for complex logic or when the parameter name doesn't match the argument name.", correct: true }
      - { value: "`#[MapQueryParameter]` is for GET requests, and `$request->query->get()` is for POST requests.", correct: false }
      - { value: "There is no functional difference; it's purely a matter of preference.", correct: false }
      - { value: "`#[MapQueryParameter]` is deprecated in Symfony 7.", correct: false }
    help: |
      Argument attributes like `#[MapQueryParameter]` simplify common scenarios, but direct `Request` object access provides full control.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#query-parameters

  -
    question: >
      Which of the following is a valid way to define a route for an invokable controller in `config/routes.yaml`?
    answers:
      - { value: |
          ```yaml
          # config/routes.yaml
          hello:
              path:       /hello/{name}
              controller: App\Controller\HelloController
          ```, correct: true }
      - { value: |
          ```yaml
          # config/routes.yaml
          hello:
              path:       /hello/{name}
              _controller: App\Controller\HelloController::__invoke
          ```, correct: false }
      - { value: |
          ```yaml
          # config/routes.yaml
          hello:
              path:       /hello/{name}
              action: App\Controller\HelloController
          ```, correct: false }
      - { value: |
          ```yaml
          # config/routes.yaml
          hello:
              path:       /hello/{name}
              service: App\Controller\HelloController
          ```, correct: false }
    help: |
      For invokable controllers, you specify the class name directly as the `controller`.
      https://symfony.com/doc/current/controller/service.html#invokable-controllers

  -
    question: >
      What is the purpose of the `kernel.request` event in Symfony's HttpKernel?
    answers:
      - { value: "It is dispatched at the very beginning of the request handling process, allowing listeners to return a `Response` early.", correct: true }
      - { value: "It is dispatched after the controller has been executed.", correct: false }
      - { value: "It is used to modify the request parameters before routing.", correct: false }
      - { value: "It handles security authentication.", correct: false }
    help: |
      The `kernel.request` event is the first event in the request lifecycle, allowing for early responses (e.g., for security, caching).
      https://symfony.com/doc/current/components/http_kernel.html#the-kernel-request-event

  -
    question: >
      Which of the following is generally considered a bad practice for controllers in Symfony?
    answers:
      - { value: "Performing complex business logic directly within the controller action.", correct: true }
      - { value: "Returning a `JsonResponse` for API endpoints.", correct: false }
      - { value: "Injecting services into controller methods.", correct: false }
      - { value: "Using `redirectToRoute()` after a successful form submission.", correct: false }
    help: |
      Controllers should be thin; business logic belongs in services.
      https://symfony.com/doc/current/best_practices.html#controllers

  -
    question: >
      How can you retrieve the value of a header, e.g., `User-Agent`, from the `Request` object?
    answers:
      - { value: "`$request->headers->get('User-Agent')`", correct: true }
      - { value: "`$request->getHeader('User-Agent')`", correct: false }
      - { value: "`$request->attributes->get('User-Agent')`", correct: false }
      - { value: "`$request->server->get('HTTP_USER_AGENT')`", correct: false }
    help: |
      Headers are accessed via the `headers` public property of the `Request` object, which is an instance of `HeaderBag`.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-headers

  -
    question: >
      What is the purpose of the `#[MapDateTime]` attribute?
    answers:
      - { value: "To automatically convert a string from a route or query parameter into a `DateTimeInterface` object.", correct: true }
      - { value: "To format a `DateTime` object for display in a template.", correct: false }
      - { value: "To validate that a parameter is a valid date.", correct: false }
      - { value: "To set the default timezone for date handling.", correct: false }
    help: |
      `#[MapDateTime]` is an argument value resolver that simplifies working with date and time values in controller arguments.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#date-time-objects

  -
    question: >
      Which of the following is a valid method signature for a controller action that receives a route parameter `slug` and an optional query parameter `page` (defaulting to 1)?
    answers:
      - { value: "`public function show(string $slug, #[MapQueryParameter] int $page = 1): Response`", correct: true }
      - { value: "`public function show(string $slug, int $page = 1, Request $request): Response`", correct: false }
      - { value: "`public function show(string $slug, int $page = 1): Response`", correct: false }
      - { value: "`public function show(string $slug, int $page): Response`", correct: false }
    help: |
      `#[MapQueryParameter]` is used for query parameters, while route parameters are automatically mapped by name. Default values can be set directly in the signature.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html

  -
    question: >
      What happens if you try to access a session attribute that does not exist using `$session->get('non_existent_key')`?
    answers:
      - { value: "It returns `null` by default.", correct: true }
      - { value: "It throws an `InvalidArgumentException`.", correct: false }
      - { value: "It returns an empty string.", correct: false }
      - { value: "It creates the key with a `null` value.", correct: false }
    help: |
      The `get()` method of `Session` (and `ParameterBag`) returns `null` if the key is not found, unless a default value is provided.
      https://symfony.com/doc/current/components/http_foundation.html#session-attributes

  -
    question: >
      How would you clear all flash messages from the session?
    answers:
      - { value: "`$session->getFlashBag()->all()`", correct: true }
      - { value: "`$session->getFlashBag()->clear()`", correct: true }
      - { value: "`$session->clearFlashes()`", correct: false }
      - { value: "`$this->clearFlashes()`", correct: false }
    help: |
      Calling `all()` on the flash bag retrieves and clears all messages. `clear()` explicitly clears them without returning.
      https://symfony.com/doc/current/controller.html#flash-messages

  -
    question: >
      Which method of `AbstractController` can be used to render a template and pass an existing `Response` object to it for modification?
    answers:
      - { value: "`$this->render('template.html.twig', [], $response)`", correct: true }
      - { value: "`$this->renderAndModify('template.html.twig', $response)`", correct: false }
      - { value: "`$this->renderWithResponse('template.html.twig', $response)`", correct: false }
      - { value: "`$this->renderTemplate('template.html.twig', response: $response)`", correct: true }
    help: |
      The `render()` method allows you to pass an existing `Response` object as the third argument (or named argument `response:`) to modify it instead of creating a new one.
      https://symfony.com/doc/current/controller.html#rendering-templates

  -
    question: >
      What is the significance of the `#[AsCommand]` attribute for console commands, and how does it relate to controllers?
    answers:
      - { value: "It's used to define console commands, similar to how `#[Route]` defines web routes for controllers, allowing commands to be discovered and configured.", correct: true }
      - { value: "It allows console commands to be executed directly from a web controller.", correct: false }
      - { value: "It signifies that a console command can be used as an invokable controller.", correct: false }
      - { value: "It automatically registers a console command as a service in the container.", correct: true }
    help: |
      `#[AsCommand]` is the modern way to configure console commands, making them discoverable and autoconfigured as services, similar to how attributes work for web controllers.
      https://symfony.com/doc/current/console.html#configuring-the-command

  -
    question: >
      Which of the following `Response` types is suitable for sending a large file without loading its entire content into memory?
    answers:
      - { value: "`StreamedResponse`", correct: true }
      - { value: "`BinaryFileResponse`", correct: true }
      - { value: "`FileResponse`", correct: false }
      - { value: "`JsonResponse`", correct: false }
    help: |
      `StreamedResponse` allows you to stream content chunk by chunk, and `BinaryFileResponse` is optimized for sending files directly from the filesystem, both avoiding full memory load.
      https://symfony.com/doc/current/components/http_foundation.html#streaming-a-response

  -
    question: >
      What is the purpose of the `#[MapUploadedFile]` attribute's `fileName` option?
    answers:
      - { value: "To specify the expected name of the uploaded file field in the request.", correct: true }
      - { value: "To define the target filename on the server after upload.", correct: false }
      - { value: "To set a default filename if no file is uploaded.", correct: false }
      - { value: "To validate the uploaded file's original name.", correct: false }
    help: |
      The `fileName` option allows you to explicitly specify which uploaded file field to map if the argument name doesn't match the field name.
      https://symfony.com/doc/current/controller.html#uploaded-files

  -
    question: >
      Which of the following is a valid way to retrieve an attribute from the `Request` object's attributes bag (e.g., a route parameter or a custom attribute set by a listener)?
    answers:
      - { value: "`$request->attributes->get('attribute_name')`", correct: true }
      - { value: "`$request->get('attribute_name')`", correct: false }
      - { value: "`$request->query->get('attribute_name')`", correct: false }
      - { value: "`$request->request->get('attribute_name')`", correct: false }
    help: |
      The `attributes` property of the `Request` object holds values like route parameters and other data added during the request lifecycle.
      https://symfony.com/doc/current/components/http_foundation.html#request-attributes

  -
    question: >
      What is the main advantage of using `#[AsController]` over manually tagging controllers with `controller.service_arguments` in `services.yaml`?
    answers:
      - { value: "It's more concise and keeps controller configuration closer to the code.", correct: true }
      - { value: "It makes controllers faster to load.", correct: false }
      - { value: "It's the only way to enable autowiring for controller arguments.", correct: false }
      - { value: "It prevents controllers from being instantiated as services.", correct: false }
    help: |
      Attributes provide a modern, declarative way to configure controllers, reducing the need for separate YAML configuration.
      https://symfony.com/doc/current/controller/service.html#registering-controllers-as-services

  -
    question: >
      When a controller method argument is type-hinted with a class that is a service (e.g., `LoggerInterface`), how does Symfony inject it?
    answers:
      - { value: "Symfony's autowiring mechanism automatically fetches the service from the container and injects it.", correct: true }
      - { value: "You must manually configure the service as an argument in `services.yaml`.", correct: false }
      - { value: "The controller must extend `AbstractController` for service injection to work.", correct: false }
      - { value: "It's only possible if the service is public.", correct: false }
    help: |
      Autowiring is a key feature that simplifies dependency injection by matching type-hints to services.
      https://symfony.com/doc/current/service_container/autowiring.html

  -
    question: >
      Which of the following is true about the `Request` object's immutability?
    answers:
      - { value: "The `Request` object is immutable; methods that modify it (e.g., `withAttribute()`) return a new instance.", correct: true }
      - { value: "The `Request` object is mutable; its properties can be directly changed.", correct: false }
      - { value: "Only the `query` and `request` properties are mutable.", correct: false }
      - { value: "Immutability only applies to `Response` objects, not `Request`.", correct: false }
    help: |
      The `Request` object is designed to be immutable, ensuring that its state remains consistent throughout the request lifecycle.
      https://symfony.com/doc/current/components/http_foundation.html#immutability

  -
    question: >
      What is the purpose of the `#[MapQueryString]` attribute?
    answers:
      - { value: "To automatically deserialize the entire query string into a PHP object or DTO.", correct: true }
      - { value: "To map individual query parameters to scalar arguments.", correct: false }
      - { value: "To validate the query string format.", correct: false }
      - { value: "To encrypt the query string.", correct: false }
    help: |
      `#[MapQueryString]` allows you to map the entire query string into a DTO, useful for complex query structures.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#query-string-objects

  -
    question: >
      Which of the following is the correct way to get the base URL of the application from the `Request` object?
    answers:
      - { value: "`$request->getBaseUrl()`", correct: true }
      - { value: "`$request->getUriForPath('/')`", correct: false }
      - { value: "`$request->getHost()`", correct: false }
      - { value: "`$request->getSchemeAndHttpHost()`", correct: false }
    help: |
      `getBaseUrl()` returns the base URL path (e.g., `/app.php` or empty string if rewritten). For full host, use `getSchemeAndHttpHost()`.
      https://symfony.com/doc/current/components/http_foundation.html#request-information

  -
    question: >
      What is the primary difference between `redirectToRoute()` and `redirect()` in `AbstractController`?
    answers:
      - { value: "`redirectToRoute()` generates a URL from a named route, while `redirect()` redirects to a literal URL string.", correct: true }
      - { value: "`redirectToRoute()` performs an internal redirect, while `redirect()` performs an external HTTP redirect.", correct: false }
      - { value: "`redirectToRoute()` is for GET requests, and `redirect()` is for POST requests.", correct: false }
      - { value: "There is no functional difference; they are aliases.", correct: false }
    help: |
      They both perform HTTP redirects, but `redirectToRoute()` abstracts away URL generation.
      https://symfony.com/doc/current/controller.html#http-redirects

  -
    question: >
      Which `Response` header is typically set to indicate that the content is a file download and suggest a filename?
    answers:
      - { value: "`Content-Disposition`", correct: true }
      - { value: "`Content-Type`", correct: false }
      - { value: "`Content-Transfer-Encoding`", correct: false }
      - { value: "`X-Download-Options`", correct: false }
    help: |
      The `Content-Disposition` header, often with `attachment; filename="..."`, is used to prompt a file download.
      https://symfony.com/doc/current/components/http_foundation.html#serving-files

  -
    question: >
      What is the purpose of the `#[MapRequestPayload]` attribute's `validationContext` option?
    answers:
      - { value: "To specify validation groups to apply when deserializing the payload.", correct: true }
      - { value: "To define the context for the deserialization process.", correct: false }
      - { value: "To set the error message for validation failures.", correct: false }
      - { value: "To specify the serializer context.", correct: false }
    help: |
      `validationContext` allows you to control which validation groups are used when the payload is validated after deserialization.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#validation-groups

  -
    question: >
      Which of the following is a key characteristic of a "built-in internal controller" in Symfony?
    answers:
      - { value: "They are controllers provided by Symfony bundles (e.g., TwigBundle's `render` function) that handle sub-requests internally.", correct: true }
      - { value: "They are controllers that are automatically generated by the Maker bundle.", correct: false }
      - { value: "They are controllers that do not require routing configuration.", correct: false }
      - { value: "They are controllers that only return JSON responses.", correct: false }
    help: |
      Examples include the `render()` Twig function which internally calls a controller to embed content, and the `forward()` method.
      https://symfony.com/doc/current/templates.html#embedding-controllers

  -
    question: >
      What is the purpose of the `Request::isXmlHttpRequest()` method?
    answers:
      - { value: "To check if the request was made via AJAX (XMLHttpRequest).", correct: true }
      - { value: "To validate if the request content type is XML.", correct: false }
      - { value: "To determine if the request is secure (HTTPS).", correct: false }
      - { value: "To check if the request method is XML-RPC.", correct: false }
    help: |
      This method is a convenient way to detect AJAX requests, often used to return different responses (e.g., JSON vs. HTML).
      https://symfony.com/doc/current/components/http_foundation.html#checking-request-properties

  -
    question: >
      How can you retrieve all session attributes as an array?
    answers:
      - { value: "`$session->all()`", correct: true }
      - { value: "`$session->toArray()`", correct: false }
      - { value: "`$session->getAttributes()`", correct: false }
      - { value: "`$session->getData()`", correct: false }
    help: |
      The `all()` method of the `Session` object returns all stored attributes.
      https://symfony.com/doc/current/components/http_foundation.html#session-attributes

  -
    question: >
      What is the primary reason for using `#[MapQueryString]` or `#[MapRequestPayload]` instead of manually parsing `Request` data?
    answers:
      - { value: "To automatically deserialize data into typed PHP objects, improving code readability, maintainability, and enabling automatic validation.", correct: true }
      - { value: "To improve application performance by reducing parsing overhead.", correct: false }
      - { value: "To automatically encrypt and decrypt request data.", correct: false }
      - { value: "To bypass Symfony's routing system for specific requests.", correct: false }
    help: |
      These attributes streamline data binding and validation for structured request data.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#mapping-request-payloads

  -
    question: >
      Which of the following is NOT a standard HTTP method that can be handled by a controller action?
    answers:
      - { value: "EXECUTE", correct: true }
      - { value: "GET", correct: false }
      - { value: "POST", correct: false }
      - { value: "PUT", correct: false }
      - { value: "DELETE", correct: false }
    help: |
      HTTP methods include GET, POST, PUT, DELETE, PATCH, HEAD, OPTIONS, CONNECT, TRACE. EXECUTE is not a standard HTTP method.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      When using `forward()` for an internal redirect, how are the arguments passed to the target controller?
    answers:
      - { value: "As an associative array passed as the second argument to `forward()`, which populates the target controller's arguments.", correct: true }
      - { value: "As query parameters in the URL of the forwarded request.", correct: false }
      - { value: "As session attributes that the target controller retrieves.", correct: false }
      - { value: "They are automatically inherited from the original request.", correct: false }
    help: |
      Arguments for `forward()` are explicitly passed as an array and are then resolved by the target controller's argument resolvers.
      https://symfony.com/doc/current/controller/forwarding.html#passing-variables-to-the-controller

  -
    question: >
      What is the purpose of the `Response::sendEarlyHints()` method?
    answers:
      - { value: "To send a `103 Early Hints` HTTP response, allowing the browser to pre-load resources while the server prepares the full response.", correct: true }
      - { value: "To send a `200 OK` response with minimal content for faster initial page load.", correct: false }
      - { value: "To send a redirect response with a `307` status code.", correct: false }
      - { value: "To send a `404 Not Found` response immediately.", correct: false }
    help: |
      `sendEarlyHints()` is used for performance optimization, sending hints to the browser before the full response is ready.
      https://symfony.com/doc/current/controller.html#sending-early-hints

  -
    question: >
      Which of the following best describes the principle of "separation of concerns" as applied to Symfony controllers?
    answers:
      - { value: "Controllers should focus solely on handling HTTP requests and delegating business logic to separate services.", correct: true }
      - { value: "Controllers should be responsible for both business logic and database interactions.", correct: false }
      - { value: "Controllers should only contain routing definitions.", correct: false }
      - { value: "Controllers should be tightly coupled with the view layer.", correct: false }
    help: |
      Separation of concerns dictates that each part of the application (controller, service, repository, etc.) has a single, well-defined responsibility.
      https://symfony.com/doc/current/best_practices.html#controllers

  -
    question: >
      How can you force a session to be saved immediately in a controller, even if the request hasn't finished?
    answers:
      - { value: "`$session->save()`", correct: true }
      - { value: "`$session->commit()`", correct: false }
      - { value: "`$session->writeClose()`", correct: false }
      - { value: "`$session->flush()`", correct: false }
    help: |
      The `save()` method forces the session to be written to its storage.
      https://symfony.com/doc/current/components/http_foundation.html#saving-the-session

  -
    question: >
      Which of the following is true regarding controller method arguments and type-hinting in Symfony 7?
    answers:
      - { value: "Type-hinting scalar types (e.g., `int`, `string`) for route parameters automatically converts the values.", correct: true }
      - { value: "Type-hinting `Request` automatically injects the current request object.", correct: true }
      - { value: "Custom classes can be type-hinted and automatically injected if a corresponding argument value resolver is configured.", correct: true }
      - { value: "All arguments must be type-hinted for autowiring to work.", correct: false }
    help: |
      Symfony's argument resolvers leverage type-hinting for automatic value injection and conversion.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html

  -
    question: >
      What is the purpose of the `#[MapEntity]` attribute's `expr` option?
    answers:
      - { value: "To define a custom expression for fetching the entity, allowing more complex queries than just by ID or slug.", correct: true }
      - { value: "To specify the entity repository method to use.", correct: false }
      - { value: "To define the entity class name.", correct: false }
      - { value: "To validate the entity before it's injected.", correct: false }
    help: |
      The `expr` option allows you to write a custom expression (using the ExpressionLanguage component) to fetch the entity.
      https://symfony.com/doc/current/bundles/SensioFrameworkExtraBundle/annotations/converters.html#expression-language

  -
    question: >
      When might you need to manually register a controller as a service and configure its dependencies, rather than relying on autoconfiguration and autowiring?
    answers:
      - { value: "When autoconfiguration is explicitly disabled for controllers in `services.yaml`.", correct: true }
      - { value: "When the controller has no dependencies.", correct: false }
      - { value: "When using an invokable controller.", correct: false }
      - { value: "When the controller is located outside the `src/Controller` directory.", correct: false }
    help: |
      While autoconfiguration and autowiring are the default and recommended, manual configuration is possible if these features are disabled.
      https://symfony.com/doc/current/controller/service.html#registering-controllers-as-services

  -
    question: >
      What is the primary benefit of using `#[MapQueryParameter]` over `$request->query->get()` when dealing with optional query parameters that have default values?
    answers:
      - { value: "It allows defining the default value directly in the method signature, making the code more concise and readable.", correct: true }
      - { value: "It provides better performance for retrieving query parameters.", correct: false }
      - { value: "It automatically validates the type of the query parameter.", correct: false }
      - { value: "It makes the query parameter mandatory.", correct: false }
    help: |
      The ability to set default values directly in the method signature is a significant advantage for `#[MapQueryParameter]`.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#query-parameters

  -
    question: >
      Which of the following is true about the `Response` object's `setPrivate()` and `setPublic()` methods?
    answers:
      - { value: "They control whether the response can be cached by shared (public) or private caches.", correct: true }
      - { value: "They set the visibility of the response content to the user.", correct: false }
      - { value: "They determine if the response should be logged.", correct: false }
      - { value: "They are used for setting cookie security attributes.", correct: false }
    help: |
      These methods influence HTTP caching headers (`Cache-Control: public` or `private`).
      https://symfony.com/doc/current/components/http_foundation.html#cache-control

  -
    question: >
      What is the purpose of the `Request::getPathInfo()` method?
    answers:
      - { value: "To get the path to the current script relative to the document root, excluding the query string.", correct: true }
      - { value: "To get the full URL of the current request.", correct: false }
      - { value: "To get the query string part of the URL.", correct: false }
      - { value: "To get the filename of the executed script.", correct: false }
    help: |
      `getPathInfo()` returns the "path info" part of the URL, which is the part after the front controller script.
      https://symfony.com/doc/current/components/http_foundation.html#request-information

  -
    question: >
      When should you use `Response::setCache()` in a controller?
    answers:
      - { value: "To configure HTTP caching headers for the response, such as `max-age` and `public`/`private`.", correct: true }
      - { value: "To store the response in the application's internal cache.", correct: false }
      - { value: "To clear the browser's cache for the current page.", correct: false }
      - { value: "To set a cookie for caching purposes.", correct: false }
    help: |
      `setCache()` provides a convenient way to set various HTTP caching directives on the `Response` object.
      https://symfony.com/doc/current/components/http_foundation.html#http-cache-headers

  -
    question: >
      Which of the following is the correct way to invalidate the current user's session in a controller?
    answers:
      - { value: "`$session->invalidate()`", correct: true }
      - { value: "`$session->destroy()`", correct: false }
      - { value: "`$session->clear()`", correct: false }
      - { value: "`$session->reset()`", correct: false }
    help: |
      The `invalidate()` method generates a new session ID and clears all session attributes.
      https://symfony.com/doc/current/components/http_foundation.html#session-invalidation

  -
    question: >
      What is the primary role of the `kernel.view` event in Symfony's HttpKernel?
    answers:
      - { value: "It is dispatched when a controller returns something other than a `Response` object, allowing listeners to convert it into a `Response`.", correct: true }
      - { value: "It is dispatched before rendering a Twig template.", correct: false }
      - { value: "It is used for rendering error pages.", correct: false }
      - { value: "It handles the conversion of request data into view models.", correct: false }
    help: |
      The `kernel.view` event is crucial for flexible response handling, enabling controllers to return data (e.g., an entity) that a listener then converts into a full `Response`.
      https://symfony.com/doc/current/components/http_kernel.html#the-kernel-view-event

  -
    question: >
      Which of the following is a valid way to get the current request method (e.g., GET, POST) from the `Request` object?
    answers:
      - { value: "`$request->getMethod()`", correct: true }
      - { value: "`$request->getHttpMethod()`", correct: false }
      - { value: "`$request->method`", correct: false }
      - { value: "`$request->server->get('REQUEST_METHOD')`", correct: true }
    help: |
      `getMethod()` is the direct way. The `$_SERVER` superglobal (accessed via `$request->server`) also contains `REQUEST_METHOD`.
      https://symfony.com/doc/current/components/http_foundation.html#request-information

  -
    question: >
      What is the purpose of the `#[MapForm]` attribute?
    answers:
      - { value: "To automatically handle form submission and validation, mapping form data to a DTO or entity.", correct: true }
      - { value: "To render a form in a Twig template.", correct: false }
      - { value: "To create a new form instance.", correct: false }
      - { value: "To define the fields of a form.", correct: false }
    help: |
      `#[MapForm]` simplifies form handling in controllers by integrating submission, validation, and data mapping.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#mapping-forms

  -
    question: >
      Which of the following is true about the `Response` object's `prepare()` method?
    answers:
      - { value: "It normalizes the response headers and content, ensuring compliance with HTTP specifications.", correct: true }
      - { value: "It sends the response headers to the client.", correct: false }
      - { value: "It converts the response into a string.", correct: false }
      - { value: "It prepares the response for caching.", correct: false }
    help: |
      The `prepare()` method ensures the response is valid and ready to be sent, adjusting headers like `Content-Length`.
      https://symfony.com/doc/current/components/http_foundation.html#preparing-the-response

  -
    question: >
      What is the purpose of the `Request::getUri()` method?
    answers:
      - { value: "To get the full URI of the current request, including scheme, host, path, and query string.", correct: true }
      - { value: "To get only the path part of the URI.", correct: false }
      - { value: "To get the URI without the query string.", correct: false }
      - { value: "To get the URI relative to the web root.", correct: false }
    help: |
      `getUri()` provides the complete URI of the current request.
      https://symfony.com/doc/current/components/http_foundation.html#request-information

  -
    question: >
      What is the primary benefit of using `#[MapQueryString]` or `#[MapRequestPayload]` for API controllers?
    answers:
      - { value: "It allows for automatic deserialization of request data into typed DTOs, simplifying data access and validation for API endpoints.", correct: true }
      - { value: "It automatically generates API documentation.", correct: false }
      - { value: "It enforces specific HTTP methods for API requests.", correct: false }
      - { value: "It adds security layers to API endpoints.", correct: false }
    help: |
      These attributes are particularly useful for building robust and type-safe API endpoints.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#mapping-request-payloads

  -
    question: >
      Which of the following is true about the `Response::send()` method?
    answers:
      - { value: "It sends the HTTP headers and content of the response to the client.", correct: true }
      - { value: "It only sends the headers, not the content.", correct: false }
      - { value: "It saves the response to a file.", correct: false }
      - { value: "It prepares the response for sending but does not send it.", correct: false }
    help: |
      The `send()` method is the final step in the response lifecycle, outputting the response to the browser.
      https://symfony.com/doc/current/components/http_foundation.html#sending-the-response

  -
    question: >
      What is the purpose of the `Request::getPreferredLanguage()` method?
    answers:
      - { value: "To determine the user's preferred language based on the `Accept-Language` header.", correct: true }
      - { value: "To set the application's default language.", correct: false }
      - { value: "To get the language of the current route.", correct: false }
      - { value: "To translate text within the controller.", correct: false }
    help: |
      This method helps in implementing internationalization (i18n) by identifying the client's language preference.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-headers

  -
    question: >
      Which of the following describes the correct order of events in the Symfony HttpKernel when handling a request?
    answers:
      - { value: "Request -> Routing -> Controller Resolution -> Argument Resolution -> Controller Execution -> Response", correct: true }
      - { value: "Routing -> Request -> Controller Execution -> Response", correct: false }
      - { value: "Controller Resolution -> Request -> Routing -> Response", correct: false }
      - { value: "Request -> Controller Execution -> Routing -> Response", correct: false }
    help: |
      This sequence outlines the core steps of the HttpKernel's request handling process.
      https://symfony.com/doc/current/components/http_kernel.html#the-symfony-request-flow

  -
    question: >
      What is the purpose of the `Request::isMethodSafe()` method?
    answers:
      - { value: "To check if the HTTP method is 'safe' (e.g., GET, HEAD, OPTIONS, TRACE), meaning it doesn't modify server state.", correct: true }
      - { value: "To check if the request is secure (HTTPS).", correct: false }
      - { value: "To check if the request method is allowed by the route.", correct: false }
      - { value: "To validate the request parameters.", correct: false }
    help: |
      "Safe" methods are idempotent and do not cause side effects on the server.
      https://symfony.com/doc/current/components/http_foundation.html#checking-request-properties

  -
    question: >
      Which of the following is a valid way to get the client's IP address from the `Request` object?
    answers:
      - { value: "`$request->getClientIp()`", correct: true }
      - { value: "`$request->getIp()`", correct: false }
      - { value: "`$request->server->get('REMOTE_ADDR')`", correct: true }
      - { value: "`$request->getClientAddress()`", correct: false }
    help: |
      `getClientIp()` is the recommended method as it handles proxies. `REMOTE_ADDR` is the direct server variable.
      https://symfony.com/doc/current/components/http_foundation.html#request-information

  -
    question: >
      What is the purpose of the `Response::setExpires()` method?
    answers:
      - { value: "To set the `Expires` HTTP header, indicating when the response should be considered stale by caches.", correct: true }
      - { value: "To set the session expiration time.", correct: false }
      - { value: "To set a cookie expiration date.", correct: false }
      - { value: "To define the maximum age for a cached response.", correct: false }
    help: |
      The `Expires` header is a legacy caching header, superseded by `Cache-Control: max-age`.
      https://symfony.com/doc/current/components/http_foundation.html#http-cache-headers

  -
    question: >
      When using `#[MapRequestPayload]`, what happens if the incoming request body is not valid JSON (or the expected format)?
    answers:
      - { value: "Symfony will throw a `NotEncodableValueException` or similar deserialization error.", correct: true }
      - { value: "The argument will be `null`.", correct: false }
      - { value: "The controller will receive an empty object.", correct: false }
      - { value: "Symfony will attempt to guess the format.", correct: false }
    help: |
      The deserialization process will fail if the input format is incorrect, leading to an exception.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#mapping-request-payloads

  -
    question: >
      Which of the following is true about the `Request::isSecure()` method?
    answers:
      - { value: "It checks if the request was made over HTTPS.", correct: true }
      - { value: "It checks if the request has a valid CSRF token.", correct: false }
      - { value: "It checks if the user is authenticated.", correct: false }
      - { value: "It checks if the request body is encrypted.", correct: false }
    help: |
      `isSecure()` determines if the request was made using a secure protocol (HTTPS).
      https://symfony.com/doc/current/components/http_foundation.html#checking-request-properties

  -
    question: >
      What is the purpose of the `Response::setLastModified()` method?
    answers:
      - { value: "To set the `Last-Modified` HTTP header, indicating when the resource was last changed, for caching purposes.", correct: true }
      - { value: "To set the date of the last user session activity.", correct: false }
      - { value: "To update the modification time of a file on the server.", correct: false }
      - { value: "To log the last time a response was sent.", correct: false }
    help: |
      The `Last-Modified` header is a key part of HTTP caching, allowing browsers to use conditional requests.
      https://symfony.com/doc/current/components/http_foundation.html#http-cache-headers

  -
    question: >
      Which of the following is a valid way to get the current host from the `Request` object?
    answers:
      - { value: "`$request->getHost()`", correct: true }
      - { value: "`$request->getHttpHost()`", correct: true }
      - { value: "`$request->server->get('HTTP_HOST')`", correct: true }
      - { value: "`$request->getUriHost()`", correct: false }
    help: |
      Multiple methods can retrieve the host, including `getHost()`, `getHttpHost()`, and directly from the `$_SERVER` superglobal.
      https://symfony.com/doc/current/components/http_foundation.html#request-information

  -
    question: >
      What is the purpose of the `Response::setVary()` method?
    answers:
      - { value: "To set the `Vary` HTTP header, indicating which request headers influence the response, for proper caching.", correct: true }
      - { value: "To vary the response content based on user preferences.", correct: false }
      - { value: "To introduce randomness into the response for A/B testing.", correct: false }
      - { value: "To set different response headers for different clients.", correct: false }
    help: |
      The `Vary` header tells caches that the response content might differ based on the values of specified request headers.
      https://symfony.com/doc/current/components/http_foundation.html#http-cache-headers

  -
    question: >
      Which of the following is true about the `Response::setPublic()` method?
    answers:
      - { value: "It sets the `Cache-Control` header to `public`, allowing shared caches (proxies) to store the response.", correct: true }
      - { value: "It makes the response content visible to all users.", correct: false }
      - { value: "It disables all caching for the response.", correct: false }
      - { value: "It's used for setting public API keys.", correct: false }
    help: |
      `setPublic()` explicitly marks a response as cacheable by public caches.
      https://symfony.com/doc/current/components/http_foundation.html#http-cache-headers

  -
    question: >
      What is the purpose of the `Request::getLocale()` method?
    answers:
      - { value: "To get the locale (language and region) associated with the current request.", correct: true }
      - { value: "To set the application's default locale.", correct: false }
      - { value: "To get the user's preferred currency.", correct: false }
      - { value: "To translate messages in the controller.", correct: false }
    help: |
      The locale is often determined by routing, session, or browser preferences and is crucial for internationalization.
      https://symfony.com/doc/current/components/http_foundation.html#request-information

  -
    question: >
      Which of the following `Response` methods is used to prevent a response from being cached?
    answers:
      - { value: "`$response->setNoCache()`", correct: true }
      - { value: "`$response->setPrivate()`", correct: true }
      - { value: "`$response->setExpires(new \DateTime('-1 day'))`", correct: true }
      - { value: "`$response->disableCache()`", correct: false }
    help: |
      `setNoCache()` adds `Cache-Control: no-cache, no-store, must-revalidate`. `setPrivate()` makes it private. Setting `Expires` to a past date also prevents caching.
      https://symfony.com/doc/current/components/http_foundation.html#http-cache-headers

  -
    question: >
      What is the purpose of the `Request::isMethod()` method?
    answers:
      - { value: "To check if the request's HTTP method matches a given method (e.g., `isMethod('POST')`).", correct: true }
      - { value: "To set the request method.", correct: false }
      - { value: "To validate if the method is allowed for the route.", correct: false }
      - { value: "To get a list of all allowed methods.", correct: false }
    help: |
      `isMethod()` provides a convenient way to check the request's HTTP verb.
      https://symfony.com/doc/current/components/http_foundation.html#checking-request-properties

  -
    question: >
      Which of the following is true about the `Response::setEtag()` method?
    answers:
      - { value: "It sets the `ETag` HTTP header, a unique identifier for the resource's content, used for conditional requests and caching.", correct: true }
      - { value: "It encrypts the response content.", correct: false }
      - { value: "It sets a timestamp for the response.", correct: false }
      - { value: "It is used for generating unique session IDs.", correct: false }
    help: |
      ETags are strong validators for caching, allowing browsers to ask "give me this resource only if it has changed."
      https://symfony.com/doc/current/components/http_foundation.html#http-cache-headers

  -
    question: >
      What is the purpose of the `Request::getScheme()` method?
    answers:
      - { value: "To get the scheme of the request URL (e.g., 'http' or 'https').", correct: true }
      - { value: "To get the security scheme used for authentication.", correct: false }
      - { value: "To get the URL path.", correct: false }
      - { value: "To get the host name.", correct: false }
    help: |
      `getScheme()` returns the protocol used for the request.
      https://symfony.com/doc/current/components/http_foundation.html#request-information

  -
    question: >
      Which of the following is a valid way to get the current URL path (without host or query string) from the `Request` object?
    answers:
      - { value: "`$request->getPathInfo()`", correct: true }
      - { value: "`$request->getUriForPath('/')`", correct: false }
      - { value: "`$request->getRequestUri()`", correct: false }
      - { value: "`$request->getRoutePath()`", correct: false }
    help: |
      `getPathInfo()` returns the part of the URL that Symfony uses for routing.
      https://symfony.com/doc/current/components/http_foundation.html#request-information

  -
    question: >
      What is the purpose of the `Response::setTtl()` method?
    answers:
      - { value: "To set the `max-age` directive in the `Cache-Control` header, defining how long the response can be cached in seconds.", correct: true }
      - { value: "To set the Time To Live for a network packet.", correct: false }
      - { value: "To define the session lifetime.", correct: false }
      - { value: "To set the expiration for a cookie.", correct: false }
    help: |
      `setTtl()` is a convenient way to control the `max-age` for caching.
      https://symfony.com/doc/current/components/http_foundation.html#http-cache-headers

  -
    question: >
      Which of the following is true about the `Request::isSecure()` method when behind a proxy?
    answers:
      - { value: "It relies on trusted proxies being configured to correctly determine if the original request was HTTPS.", correct: true }
      - { value: "It always returns `false` if the direct connection to the server is HTTP.", correct: false }
      - { value: "It automatically detects the original protocol without configuration.", correct: false }
      - { value: "It only works if the proxy adds a `X-Forwarded-Proto` header.", correct: false }
    help: |
      Correctly configuring trusted proxies is essential for `isSecure()` and other methods to work accurately behind a reverse proxy.
      https://symfony.com/doc/current/http_cache/reverse_proxy.html#trusted-proxies

  -
    question: >
      What is the purpose of the `Response::setSharedMaxAge()` method?
    answers:
      - { value: "To set the `s-maxage` directive in the `Cache-Control` header, defining how long a shared cache (e.g., CDN) can cache the response.", correct: true }
      - { value: "To set the maximum age for a private cache.", correct: false }
      - { value: "To define the session timeout for shared users.", correct: false }
      - { value: "To set the maximum number of times a response can be shared.", correct: false }
    help: |
      `s-maxage` is specifically for shared caches, allowing them to cache for a different duration than private caches.
      https://symfony.com/doc/current/components/http_foundation.html#http-cache-headers

  -
    question: >
      Which of the following is a valid way to get the query string from the `Request` object?
    answers:
      - { value: "`$request->getQueryString()`", correct: true }
      - { value: "`$request->server->get('QUERY_STRING')`", correct: true }
      - { value: "`$request->query->all()`", correct: false }
      - { value: "`$request->get('query')`", correct: false }
    help: |
      `getQueryString()` returns the raw query string. You can also access it from `$_SERVER['QUERY_STRING']`.
      https://symfony.com/doc/current/components/http_foundation.html#request-information

  -
    question: >
      What is the purpose of the `Response::setVary()` method with the `Accept-Encoding` header?
    answers:
      - { value: "To indicate that the response content may vary based on the client's `Accept-Encoding` header (e.g., gzip vs. no gzip), important for caching.", correct: true }
      - { value: "To compress the response content.", correct: false }
      - { value: "To specify the encoding of the response body.", correct: false }
      - { value: "To indicate that the response can be cached only if the encoding matches.", correct: false }
    help: |
      `Vary: Accept-Encoding` is crucial for caches to store different versions of a resource based on compression.
      https://symfony.com/doc/current/components/http_foundation.html#http-cache-headers

  -
    question: >
      Which of the following is true about the `Response::setPrivate()` method?
    answers:
      - { value: "It sets the `Cache-Control` header to `private`, indicating that the response should only be cached by the user's browser, not by shared proxies.", correct: true }
      - { value: "It makes the response content accessible only to authenticated users.", correct: false }
      - { value: "It encrypts the response content for privacy.", correct: false }
      - { value: "It prevents the response from being cached at all.", correct: false }
    help: |
      `setPrivate()` is used for responses containing user-specific data that should not be stored in shared caches.
      https://symfony.com/doc/current/components/http_foundation.html#http-cache-headers

  -
    question: >
      What is the purpose of the `Request::getSchemeAndHttpHost()` method?
    answers:
      - { value: "To get the scheme (http/https) and the HTTP host (domain name) of the current request.", correct: true }
      - { value: "To get the full URL including the path.", correct: false }
      - { value: "To get only the host name.", correct: false }
      - { value: "To get the port number.", correct: false }
    help: |
      This method is useful for constructing absolute URLs.
      https://symfony.com/doc/current/components/http_foundation.html#request-information