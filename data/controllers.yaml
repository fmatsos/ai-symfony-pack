category: Controllers
questions:
  - question: What is the recommended naming convention for a Symfony controller class?
    answers:
      - value: MyController.php
        correct: true
      - value: MyAction.php
        correct: false
      - value: MyHandler.php
        correct: false
      - value: MyService.php
        correct: false
    help: Symfony recommends naming controller classes with the suffix `Controller`,
      e.g., `LuckyController`.
  - question: Which of the following is a valid way to define a controller method in
      Symfony 7, assuming the class is properly routed with a `#[Route]`
      attribute?
    answers:
      - value: "public function indexAction(): Response"
        correct: true
      - value: "public function index(): Response"
        correct: true
      - value: "public function doSomething(): void"
        correct: false
      - value: "private function handleRequest(): Response"
        correct: false
    help: While `indexAction` is a common convention, Symfony 7 primarily uses
      `#[Route]` attributes, making any public method a potential action. The
      method must return a `Response` object.
  - question: How can you define an 'invokable' controller in Symfony 7?
    answers:
      - value: By implementing the `__invoke()` method in the controller class.
        correct: true
      - value: By extending `AbstractController` and implementing `handle()`.
        correct: false
      - value: By adding `#[Invokable]` attribute to the class.
        correct: false
      - value: By defining a static `run()` method.
        correct: false
    help: |-
      An invokable controller is a PHP class that defines the `__invoke()` magic method, which Symfony will call when the controller is matched by a route.
      https://symfony.com/doc/current/controller/service.html#invokable-controllers
  - question: What is the primary benefit of extending
      `Symfony\Bundle\FrameworkBundle\Controller\AbstractController` for your
      controllers?
    answers:
      - value: It automatically registers the controller as a service.
        correct: false
      - value: It provides convenient helper methods for common tasks like rendering
          templates and redirects.
        correct: true
      - value: It enforces strict naming conventions for controller actions.
        correct: false
      - value: It makes the controller automatically accessible via any URL.
        correct: false
    help: |-
      `AbstractController` provides helper methods like `render()`, `redirectToRoute()`, `addFlash()`, `createNotFoundException()`, etc., simplifying common controller tasks.
      https://symfony.com/doc/current/controller.html#the-base-abstractcontroller-class
  - question: Which of the following methods are available when a controller extends
      `AbstractController`?
    answers:
      - value: "`render()`"
        correct: true
      - value: "`redirectToRoute()`"
        correct: true
      - value: "`addFlash()`"
        correct: true
      - value: "`createForm()`"
        correct: true
      - value: "`getParameter()`"
        correct: true
    help: |-
      `AbstractController` provides a wide range of helper methods for common tasks, including rendering Twig templates, redirecting, managing flash messages, creating forms, and accessing container parameters.
      https://symfony.com/doc/current/controller.html#the-base-abstractcontroller-class
  - question: Consider a scenario where you want to create a controller that does
      not extend `AbstractController` but still benefits from dependency
      injection. How can you achieve this in Symfony 7?
    answers:
      - value: By manually injecting all required services into the controller's
          constructor.
        correct: false
      - value: By adding the `#[AsController]` attribute to the controller class.
        correct: true
      - value: By configuring the controller as a service with the
          `controller.service_arguments` tag in `services.yaml`.
        correct: true
      - value: By using the `#[Inject]` attribute on controller methods.
        correct: false
    help: |-
      The `#[AsController]` attribute automatically registers the controller as a service, enabling autowiring. Alternatively, you can manually tag the controller with `controller.service_arguments` in `services.yaml`.
      https://symfony.com/doc/current/controller/service.html#registering-controllers-as-services
  - question: How do you access the `Request` object in a Symfony 7 controller
      action to retrieve query parameters?
    answers:
      - value: By calling `$this->getRequest()`.
        correct: false
      - value: By type-hinting `Symfony\Component\HttpFoundation\Request $request` in
          the method signature.
        correct: true
      - value: By accessing the global `$_GET` superglobal.
        correct: false
      - value: By using `$this->container->get('request')`.
        correct: false
    help: >-
      Symfony's Argument Value Resolver automatically injects the `Request`
      object when type-hinted in the controller method signature.

      https://symfony.com/doc/current/controller.html#the-request-object
  - question: Given a URL `/products?page=2&limit=10`, how would you retrieve the
      `page` parameter in a Symfony 7 controller?
    answers:
      - value: "`$request->query->get('page')`"
        correct: true
      - value: "`$request->request->get('page')`"
        correct: false
      - value: "`$request->attributes->get('page')`"
        correct: false
      - value: "`$request->get('page')`"
        correct: false
    help: >-
      Query parameters (from the URL query string) are accessed via the `query`
      property of the `Request` object.

      https://symfony.com/doc/current/controller.html#accessing-the-request
  - question: Which `Request` object property would you use to access data sent in
      the request body of a POST request (e.g., from a form submission)?
    answers:
      - value: "`query`"
        correct: false
      - value: "`request`"
        correct: true
      - value: "`attributes`"
        correct: false
      - value: "`server`"
        correct: false
    help: Data from the request body (e.g., POST parameters) is accessed via the
      `request` property of the `Request` object.
  - question: You have a route defined as `#[Route('/blog/{slug}')]`. How can you
      directly access the `slug` value in your controller method?
    answers:
      - value: "`$request->attributes->get('slug')`"
        correct: true
      - value: By type-hinting `string $slug` in the method signature.
        correct: true
      - value: "`$request->query->get('slug')`"
        correct: false
      - value: "`$this->get('slug')`"
        correct: false
    help: |-
      Route parameters are available in the `attributes` bag of the `Request` object. More conveniently, Symfony's Argument Value Resolver can inject them directly into the method if type-hinted by name.
      https://symfony.com/doc/current/create_framework/http_kernel_controller_resolver.html#controller-method-arguments
  - question: Every Symfony controller action must return an instance of which class?
    answers:
      - value: "`Symfony\\Component\\HttpFoundation\\Response`"
        correct: true
      - value: "`Symfony\\Component\\HttpFoundation\\Request`"
        correct: false
      - value: "`Symfony\\Component\\HttpFoundation\\JsonResponse`"
        correct: false
      - value: "`Psr\\Http\\Message\\ResponseInterface`"
        correct: false
    help: >-
      All Symfony controller actions are expected to return a `Response` object,
      or one of its subclasses like `JsonResponse`, `RedirectResponse`, etc.

      https://symfony.com/doc/current/controller.html#returning-a-response
  - question: How do you set the HTTP status code of a `Response` object in Symfony?
    answers:
      - value: "`$response->setStatusCode(200);`"
        correct: true
      - value: "`$response->status = 200;`"
        correct: false
      - value: "`$response->headers->set('Status-Code', 200);`"
        correct: false
      - value: "`Response::setGlobalStatusCode(200);`"
        correct: false
    help: The `setStatusCode()` method of the `Response` object is used to
      explicitly set the HTTP status code.
  - question: You want to return a JSON response from your controller. What is the
      most appropriate class to use?
    answers:
      - value: "`new Response('{\"key\": \"value\"}', 200, ['Content-Type' =>
          'application/json'])`"
        correct: false
      - value: "`new JsonResponse(['key' => 'value'])`"
        correct: true
      - value: "`new Response(json_encode(['key' => 'value']))`"
        correct: false
      - value: "`new XmlResponse('<data><key>value</key></data>')`"
        correct: false
    help: "`JsonResponse` is a convenient subclass of `Response` specifically
      designed for returning JSON data, automatically setting the `Content-Type`
      header."
  - question: What is the purpose of the `sendEarlyHints()` method available in
      `AbstractController`?
    answers:
      - value: To send a 103 Early Hints HTTP response, allowing the browser to preload
          resources.
        correct: true
      - value: To send a 200 OK response immediately without waiting for the full
          response.
        correct: false
      - value: To send a 302 redirect response before the main content.
        correct: false
      - value: To send debugging information to the browser console.
        correct: false
    help: >-
      The `sendEarlyHints()` method creates and sends a 103 Early Hints HTTP
      response, which can be used to inform the browser about resources that
      will likely be needed for the full response.

      https://symfony.com/doc/current/controller.html#sending-early-hints
  - question: How can you set a new cookie in a Symfony 7 controller?
    answers:
      - value: "`$response->headers->setCookie(new Cookie('my_cookie', 'value'));`"
        correct: true
      - value: "`$request->cookies->set('my_cookie', 'value');`"
        correct: false
      - value: "`$this->setCookie('my_cookie', 'value');`"
        correct: false
      - value: "`Cookie::set('my_cookie', 'value');`"
        correct: false
    help: Cookies are set on the `Response` object's `headers` property using
      `setCookie()` with a `Cookie` object.
  - question: To retrieve a cookie named `user_preference` from the incoming request
      in a Symfony 7 controller, which method would you use?
    answers:
      - value: "`$request->cookies->get('user_preference')`"
        correct: true
      - value: "`$request->headers->get('Cookie')`"
        correct: false
      - value: "`$request->query->get('user_preference')`"
        correct: false
      - value: "`$this->getCookie('user_preference')`"
        correct: false
    help: Cookies from the incoming request are accessed via the `cookies` property
      of the `Request` object.
  - question: How do you access the session in a Symfony 7 controller?
    answers:
      - value: "`$this->getSession()`"
        correct: false
      - value: "`$request->getSession()`"
        correct: true
      - value: "`$this->container->get('session')`"
        correct: false
      - value: "`Session::getInstance()`"
        correct: false
    help: The `Request` object provides access to the current session via its
      `getSession()` method.
  - question: To store a value `user_id` with a value of `123` in the session, which
      code snippet is correct?
    answers:
      - value: "`$session->set('user_id', 123);`"
        correct: true
      - value: "`$session->attributes->set('user_id', 123);`"
        correct: false
      - value: "`$session->add('user_id', 123);`"
        correct: false
      - value: "`$session['user_id'] = 123;`"
        correct: false
    help: The `set()` method of the session object is used to store values.
  - question: Which of the following is true about Symfony sessions?
    answers:
      - value: Sessions are automatically started when `Request::getSession()` is
          called.
        correct: true
      - value: Session data is stored in cookies by default.
        correct: false
      - value: Session IDs are always regenerated on every request.
        correct: false
      - value: Symfony uses PHP's built-in session handler by default.
        correct: false
    help: Symfony's session component manages session lifecycle, and the session is
      typically started implicitly when accessed.
  - question: How do you add a flash message named `success` with the content 'Item
      saved!' in a Symfony 7 controller that extends `AbstractController`?
    answers:
      - value: "`$this->addFlash('success', 'Item saved!');`"
        correct: true
      - value: "`$session->getFlashBag()->add('success', 'Item saved!');`"
        correct: false
      - value: "`$this->get('session')->getFlashBag()->add('success', 'Item saved!');`"
        correct: false
      - value: "`$this->flash('success', 'Item saved!');`"
        correct: false
    help: The `addFlash()` helper method is available in `AbstractController` for
      convenience. It internally uses the session's flash bag.
  - question: Where are flash messages typically retrieved and displayed in a
      Symfony application?
    answers:
      - value: In the controller, before rendering the template.
        correct: false
      - value: In the Twig template, using the `app.flashes` global variable.
        correct: true
      - value: In a custom event listener.
        correct: false
      - value: In the JavaScript frontend.
        correct: false
    help: Flash messages are designed to be displayed once after a redirect, and
      Twig's `app.flashes` global provides easy access to them.
  - question: You want to redirect the user to the route named `app_homepage` after
      a successful form submission. Which method should you use in
      `AbstractController`?
    answers:
      - value: "`$this->redirectToRoute('app_homepage');`"
        correct: true
      - value: "`$this->redirect('/homepage');`"
        correct: false
      - value: "`$this->forward('App\\Controller\\HomeController::index');`"
        correct: false
      - value: "`new RedirectResponse($this->generateUrl('app_homepage'));`"
        correct: true
    help: >-
      `redirectToRoute()` is a convenient helper method. You can also manually
      create a `RedirectResponse` using `generateUrl()`.

      https://symfony.com/doc/current/controller.html#redirecting
  - question: What is the default HTTP status code used by `redirectToRoute()` and
      `redirect()` helper methods in Symfony?
    answers:
      - value: 302 Found
        correct: true
      - value: 301 Moved Permanently
        correct: false
      - value: 303 See Other
        correct: false
      - value: 200 OK
        correct: false
    help: >-
      The default status code for redirects is 302, indicating a temporary
      redirect.

      https://symfony.com/doc/current/controller.html#redirecting
  - question: Which HTTP status code should you use for a permanent redirect?
    answers:
      - value: 301 Moved Permanently
        correct: true
      - value: 302 Found
        correct: false
      - value: 307 Temporary Redirect
        correct: false
      - value: 308 Permanent Redirect
        correct: true
    help: Both 301 and 308 indicate permanent redirects. 308 is newer and explicitly
      preserves the HTTP method.
  - question: What is the main difference between `redirectToRoute()` and
      `forward()` in Symfony controllers?
    answers:
      - value: "`redirectToRoute()` performs an HTTP redirect, while `forward()`
          performs an internal sub-request."
        correct: true
      - value: "`redirectToRoute()` can only be used with named routes, while
          `forward()` can use any URL."
        correct: false
      - value: "`redirectToRoute()` is faster than `forward()`."
        correct: false
      - value: "`forward()` sends a new HTTP request to the browser."
        correct: false
    help: >-
      `redirectToRoute()` sends an HTTP redirect header to the client, causing a
      new request. `forward()` processes another controller internally without a
      client-side redirect.

      https://symfony.com/doc/current/controller/forwarding.html
  - question: When using `forward()` to another controller, how do you pass
      arguments to the target controller's method?
    answers:
      - value: As the second argument, an array of key-value pairs.
        correct: true
      - value: As query parameters in the target controller's URL.
        correct: false
      - value: They are automatically inherited from the original request.
        correct: false
      - value: You cannot pass arguments directly; they must be retrieved from the
          session.
        correct: false
    help: |-
      The `forward()` method accepts an array of arguments as its second parameter, which are then passed to the target controller's method.
      https://symfony.com/doc/current/controller/forwarding.html#passing-arguments-to-the-forwarded-controller
  - question: How do you typically generate a 404 Not Found page in a Symfony 7
      controller when a resource is not found?
    answers:
      - value: Throw a `Symfony\Component\HttpKernel\Exception\NotFoundHttpException`.
        correct: true
      - value: Return `new Response('Not Found', 404);`.
        correct: false
      - value: Call `$this->render('404.html.twig');`.
        correct: false
      - value: Use `$this->createNotFoundException('Resource not found.');` and let
          Symfony handle the exception.
        correct: true
    help: |-
      `createNotFoundException()` is a helper method in `AbstractController` that creates and throws a `NotFoundHttpException`, which Symfony's exception listener catches and converts into a 404 response.
      https://symfony.com/doc/current/controller.html#managing-404-pages-or-other-error-pages
  - question: Which of the following is the correct way to throw a 404 exception in
      a Symfony 7 controller that extends `AbstractController`?
    answers:
      - value: "`throw $this->createNotFoundException('The product does not exist');`"
        correct: true
      - value: "`throw new NotFoundHttpException('The product does not exist');`"
        correct: true
      - value: "`return new Response('', 404);`"
        correct: false
      - value: "`return $this->json(['error' => 'Not Found'], 404);`"
        correct: false
    help: |-
      Both options correctly trigger a 404 response. `createNotFoundException()` is a convenience method provided by `AbstractController`.
      https://symfony.com/doc/current/controller.html#managing-404-pages-or-other-error-pages
  - question: To handle a file upload in a Symfony 7 controller, which class
      represents the uploaded file in the controller method argument?
    answers:
      - value: "`Symfony\\Component\\HttpFoundation\\File\\File`"
        correct: false
      - value: "`Symfony\\Component\\HttpFoundation\\File\\UploadedFile`"
        correct: true
      - value: "`SplFileInfo`"
        correct: false
      - value: "`PHP\\File`"
        correct: false
    help: Symfony wraps uploaded files in `UploadedFile` objects, which provide
      methods for moving, validating, and accessing file information.
  - question: You have an HTML form with `<input type="file"
      name="profile_picture">`. How can you access this uploaded file in your
      Symfony 7 controller action using the `Request` object?
    answers:
      - value: "`$request->files->get('profile_picture')`"
        correct: true
      - value: "`$request->request->get('profile_picture')`"
        correct: false
      - value: "`$request->query->get('profile_picture')`"
        correct: false
      - value: "`$request->get('profile_picture')`"
        correct: false
    help: Uploaded files are accessed via the `files` property of the `Request`
      object.
  - question: What is the purpose of the `#[MapUploadedFile]` attribute in a Symfony
      7 controller?
    answers:
      - value: It automatically moves the uploaded file to a permanent location.
        correct: false
      - value: It automatically maps an uploaded file from the request to an
          `UploadedFile` object in the controller argument.
        correct: true
      - value: It validates the uploaded file's MIME type.
        correct: false
      - value: It encrypts the uploaded file before processing.
        correct: false
    help: >-
      `#[MapUploadedFile]` is an argument value resolver attribute that
      simplifies injecting `UploadedFile` objects directly into controller
      arguments based on the input name.

      https://symfony.com/doc/current/controller.html#mapping-uploaded-files
  - question: How can you embed the output of another Symfony controller directly
      into a Twig template?
    answers:
      - value: "`{{ render(path('my_sub_controller_route')) }}`"
        correct: true
      - value: "`{{ include('my_sub_controller_template.html.twig') }}`"
        correct: false
      - value: "`{{ embed('my_sub_controller_action') }}`"
        correct: false
      - value: "`{{ render(controller('App\\\\Controller\\\\MySubController::action'))
          }}`"
        correct: true
    help: >-
      The `render()` Twig function can execute a sub-request to a controller,
      either by route name (`path()`) or by directly referencing the controller
      callable (`controller()`).

      https://symfony.com/doc/current/templates.html#embedding-controllers
  - question: "When using `{{
      render(controller('App\\\\Controller\\\\BlogController::recentArticles',
      {max: 3})) }}` in Twig, what is the `max` parameter?"
    answers:
      - value: A query parameter passed to the sub-request.
        correct: false
      - value: An attribute passed to the sub-request's controller method.
        correct: true
      - value: A Twig variable available in the main template.
        correct: false
      - value: A global Symfony parameter.
        correct: false
    help: >-
      The second argument to the `controller()` Twig function is an array of
      attributes that are passed as arguments to the target controller method.

      https://symfony.com/doc/current/templates.html#embedding-controllers
  - question: What is the primary role of Symfony's Argument Value Resolvers?
    answers:
      - value: To convert controller return values into `Response` objects.
        correct: false
      - value: To determine the values for controller method arguments based on the
          `Request` and other sources.
        correct: true
      - value: To resolve service IDs to service instances.
        correct: false
      - value: To handle routing and match URLs to controllers.
        correct: false
    help: |-
      Argument Value Resolvers are responsible for populating controller method arguments with appropriate values from the `Request` object, route parameters, services, or custom logic.
      https://symfony.com/doc/current/components/http_kernel.html#controller-argument-resolution
  - question: "Given the route `#[Route('/product/{id}')]` and a controller method
      `public function show(int $id): Response`, how does Symfony automatically
      inject the `$id` value?"
    answers:
      - value: It looks for a query parameter named `id`.
        correct: false
      - value: It matches the argument name `$id` with the route parameter `{id}`.
        correct: true
      - value: It retrieves `id` from the request body.
        correct: false
      - value: It requires manual configuration in `services.yaml`.
        correct: false
    help: |-
      Symfony's Argument Value Resolver automatically maps route parameters to controller method arguments with matching names and compatible type hints.
      https://symfony.com/doc/current/create_framework/http_kernel_controller_resolver.html#controller-method-arguments
  - question: "If a controller method has the signature `public function
      index(Request $request, int $year): Response`, what is true about the
      order of arguments?"
    answers:
      - value: The `Request` object must always be the first argument.
        correct: false
      - value: The order of arguments does not matter, as they are resolved by type and
          name.
        correct: true
      - value: The `int $year` argument must come before `Request $request`.
        correct: false
      - value: Only one argument can be resolved automatically per method.
        correct: false
    help: |-
      Symfony's Argument Value Resolver is flexible and can resolve arguments regardless of their order, matching them by type hint and name.
      https://symfony.com/doc/current/create_framework/http_kernel_controller_resolver.html#controller-method-arguments
  - question: You want to automatically inject a service, `App\Service\MyService`,
      into a controller method. Assuming the controller is registered as a
      service, how can you achieve this?
    answers:
      - value: By type-hinting `MyService $myService` in the method signature.
        correct: true
      - value: By calling `$this->get('my_service')`.
        correct: false
      - value: "By using `#[Autowire(service: 'my_service')]` attribute."
        correct: false
      - value: By passing it as a route default.
        correct: false
    help: |-
      With autowiring enabled (which is default for controllers in Symfony 7), type-hinting the service interface or class in the method signature is sufficient for injection.
      https://symfony.com/doc/current/controller.html#autowiring-action-arguments
  - question: Which interface must a custom argument value resolver implement in Symfony?
    answers:
      - value: "`Symfony\\Component\\HttpKernel\\Controller\\ControllerResolverInterfac\
          e`"
        correct: false
      - value: "`Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolverInterface`"
        correct: false
      - value: "`Symfony\\Component\\HttpKernel\\Controller\\ValueResolverInterface`"
        correct: true
      - value: "`Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\Argument\
          ValueResolverInterface`"
        correct: false
    help: Custom argument value resolvers must implement
      `Symfony\Component\HttpKernel\Controller\ValueResolverInterface`.
  - question: What is the primary responsibility of a Symfony controller?
    answers:
      - value: To handle HTTP requests and return HTTP responses.
        correct: true
      - value: To manage database interactions.
        correct: false
      - value: To render HTML templates.
        correct: false
      - value: To define application routes.
        correct: false
    help: A controller's core responsibility is to take an incoming HTTP request,
      process it, and return an HTTP response.
  - question: Which Symfony component is responsible for determining which
      controller to execute based on the incoming `Request`?
    answers:
      - value: "`Routing`"
        correct: false
      - value: "`HttpKernel`"
        correct: true
      - value: "`HttpFoundation`"
        correct: false
      - value: "`DependencyInjection`"
        correct: false
    help: The `HttpKernel` component is the core of Symfony, and it uses the
      `ControllerResolver` (part of `HttpKernel`) to find the correct
      controller.
  - question: In Symfony, what is the purpose of the `kernel.controller` event?
    answers:
      - value: It is dispatched before the controller is resolved.
        correct: false
      - value: It is dispatched after the controller callable has been determined but
          before its execution.
        correct: true
      - value: It is dispatched after the controller has executed and returned a
          response.
        correct: false
      - value: It is dispatched when a controller throws an exception.
        correct: false
    help: |-
      The `kernel.controller` event allows listeners to inspect or even change the controller callable before it is executed.
      https://symfony.com/doc/current/components/http_kernel.html#the-kernel-controller-event
  - question: |-
      Consider the following code snippet:
      ```php
      namespace App\Controller;

      use Symfony\Component\HttpFoundation\Response;
      use Symfony\Component\Routing\Attribute\Route;

      class MyController
      {
          #[Route('/hello/{name}', name: 'app_hello')]
          public function greet(string $name = 'World'): Response
          {
              return new Response(sprintf('Hello %s!', $name));
          }
      }
      ```
      If you access `/hello`, what will be the content of the response?
    answers:
      - value: '"Hello World!"'
        correct: true
      - value: '"Hello !"'
        correct: false
      - value: A 404 Not Found error.
        correct: false
      - value: An empty response.
        correct: false
    help: The `$name` argument has a default value of 'World', so if the `{name}`
      parameter is not provided in the URL, it defaults to 'World'.
  - question: What is the purpose of the `#[AsController]` attribute in Symfony 7?
    answers:
      - value: It marks a class as a service that can be autowired.
        correct: false
      - value: It automatically registers the class as a controller service, enabling
          autowiring for its dependencies.
        correct: true
      - value: It defines the default route for the controller.
        correct: false
      - value: It makes the controller invokable.
        correct: false
    help: |-
      `#[AsController]` is a convenient attribute introduced to automatically register a controller class as a service, making it eligible for autowiring without explicit `services.yaml` configuration.
      https://symfony.com/doc/current/controller/service.html#registering-controllers-as-services
  - question: Which of the following is NOT a valid way to define a route for a
      controller in Symfony 7?
    answers:
      - value: PHP Attributes (`#[Route]`)
        correct: false
      - value: YAML configuration (`config/routes.yaml`)
        correct: false
      - value: XML configuration (`config/routes.xml`)
        correct: false
      - value: JSON configuration (`config/routes.json`)
        correct: true
      - value: PHP configuration (`config/routes.php`)
        correct: false
    help: >-
      Symfony supports PHP attributes, YAML, XML, and PHP files for route
      definition, but not JSON for routes.

      https://symfony.com/doc/current/controller.html#defining-a-controller
  - question: How can you access a custom parameter defined in `services.yaml`
      (e.g., `app.uploads_directory`) from a controller that extends
      `AbstractController`?
    answers:
      - value: "`$this->getParameter('app.uploads_directory')`"
        correct: true
      - value: "`$this->container->getParameter('app.uploads_directory')`"
        correct: false
      - value: "`$this->get('parameter_bag')->get('app.uploads_directory')`"
        correct: false
      - value: "`$_ENV['APP_UPLOADS_DIRECTORY']`"
        correct: false
    help: >-
      `AbstractController` provides a convenient `getParameter()` method to
      access parameters from the service container.

      https://symfony.com/doc/current/controller.html#accessing-services
  - question: When handling a form submission in a Symfony controller, what is the
      purpose of `$form->handleRequest($request)`?
    answers:
      - value: It renders the form in the Twig template.
        correct: false
      - value: It validates the submitted form data.
        correct: false
      - value: It inspects the `Request` object and populates the form with submitted
          data.
        correct: true
      - value: It saves the form data to the database.
        correct: false
    help: "`handleRequest()` is crucial for form processing; it reads the submitted
      data from the `Request` and binds it to the form."
  - question: After calling `$form->handleRequest($request)`, how do you check if
      the form was submitted and is valid?
    answers:
      - value: "`$form->isSubmitted() && $form->isValid()`"
        correct: true
      - value: "`$form->hasErrors()`"
        correct: false
      - value: "`$form->isSubmittedAndValid()`"
        correct: false
      - value: "`$form->getData()`"
        correct: false
    help: You typically check both `isSubmitted()` to ensure the form was actually
      sent and `isValid()` to ensure all data passes validation rules.
  - question: When building a micro-application with `MicroKernelTrait`, how can you
      define a controller directly within the Kernel class?
    answers:
      - value: By implementing a public method with a `#[Route]` attribute.
        correct: true
      - value: By defining a static method `handleRequest()`.
        correct: false
      - value: By injecting the `ControllerResolver` into the Kernel.
        correct: false
      - value: It's not possible; controllers must be separate classes.
        correct: false
    help: |-
      `MicroKernelTrait` allows defining controller methods directly within the Kernel class using `#[Route]` attributes, simplifying small applications.
      https://symfony.com/doc/current/configuration/micro_kernel_trait.html#defining-controllers
  - question: At which point in the Symfony request lifecycle is the `Response`
      object typically created and returned by a controller?
    answers:
      - value: During the `kernel.request` event.
        correct: false
      - value: After the `kernel.controller` event and argument resolution.
        correct: true
      - value: Before the `kernel.response` event.
        correct: true
      - value: Both B and C.
        correct: false
    help: The controller is executed after `kernel.controller` and argument
      resolution, and it returns the `Response` object, which is then processed
      by `kernel.response` listeners.
  - question: "You want to inject an object of class `App\\Entity\\Product` directly
      into your controller method based on a route parameter `id`, e.g.,
      `#[Route('/product/{id}')] public function show(Product $product):
      Response`. What Symfony feature enables this?"
    answers:
      - value: ParamConverter (from SensioFrameworkExtraBundle, or built-in in newer
          Symfony versions).
        correct: true
      - value: Custom Argument Value Resolver.
        correct: true
      - value: Autowiring.
        correct: false
      - value: Dependency Injection.
        correct: false
    help: This is primarily handled by the `ParamConverter` component (which is now
      built-in and uses argument value resolvers). You can also implement a
      custom argument value resolver for this.
  - question: Which of the following is the correct way to render a Twig template
      named `lucky/number.html.twig` and pass a variable `number` to it from an
      `AbstractController`?
    answers:
      - value: "`return $this->render('lucky/number.html.twig', ['number' =>
          $number]);`"
        correct: true
      - value: "`return $this->renderTemplate('lucky/number.html.twig', {number:
          $number});`"
        correct: false
      - value: "`return new
          Response($this->get('twig')->render('lucky/number.html.twig',
          ['number' => $number]));`"
        correct: false
      - value: "`return $this->render('lucky/number.html.twig')->with('number',
          $number);`"
        correct: false
    help: >-
      The `render()` method in `AbstractController` is the standard way to
      render Twig templates and pass data to them.

      https://symfony.com/doc/current/controller.html#rendering-templates
  - question: What is the purpose of the
      `ControllerResolverInterface::getController()` method?
    answers:
      - value: To execute the resolved controller.
        correct: false
      - value: To determine and return a PHP callable (the controller) based on the
          request's information.
        correct: true
      - value: To resolve arguments for the controller method.
        correct: false
      - value: To handle exceptions thrown by controllers.
        correct: false
    help: |-
      The `getController()` method is responsible for finding the appropriate controller callable for a given `Request`.
      https://symfony.com/doc/current/components/http_kernel.html#controller-resolution
  - question: "When defining a route using PHP attributes, what is the purpose of
      the `name` option in `#[Route('/path', name: 'my_route_name')]`?"
    answers:
      - value: It defines the URL path for the route.
        correct: false
      - value: It provides a unique identifier for the route, used for URL generation
          and debugging.
        correct: true
      - value: It specifies the HTTP method allowed for the route.
        correct: false
      - value: It sets the default controller for the route.
        correct: false
    help: The `name` option provides a unique identifier for the route, which is
      crucial for generating URLs (e.g., with `url()` or `path()` in Twig, or
      `generateUrl()` in controllers).
  - question: Which of the following HTTP methods can be specified in a `#[Route]`
      attribute for a controller action?
    answers:
      - value: GET
        correct: true
      - value: POST
        correct: true
      - value: PUT
        correct: true
      - value: DELETE
        correct: true
      - value: HEAD
        correct: true
    help: The `methods` option in the `#[Route]` attribute allows you to restrict
      the route to specific HTTP methods.
  - question: What happens if a controller method does not return a `Response` object?
    answers:
      - value: Symfony will automatically convert the return value into a `Response`.
        correct: false
      - value: A `LogicException` will be thrown, indicating that the controller must
          return a `Response`.
        correct: true
      - value: The application will crash with a fatal error.
        correct: false
      - value: Symfony will return an empty 200 OK response.
        correct: false
    help: Symfony's `HttpKernel` expects a `Response` object from the controller. If
      it doesn't receive one, it will throw a `LogicException`.
  - question: You need to access the current user's locale in a Symfony 7
      controller. How can you typically do this?
    answers:
      - value: "`$request->getLocale()`"
        correct: true
      - value: "`$this->getUser()->getLocale()`"
        correct: false
      - value: "`$session->get('_locale')`"
        correct: false
      - value: "`$this->getParameter('kernel.default_locale')`"
        correct: false
    help: The `Request` object holds information about the current request,
      including the determined locale via `getLocale()`.
  - question: What is the purpose of the `#[MapQueryParameter]` attribute (or
      similar `Map*` attributes) in Symfony 7 controllers?
    answers:
      - value: To automatically convert query string parameters into specific PHP types
          or objects.
        correct: true
      - value: To define default values for query parameters if they are not present.
        correct: false
      - value: To validate the format of query parameters.
        correct: false
      - value: To map query parameters to environment variables.
        correct: false
    help: Attributes like `#[MapQueryParameter]`, `#[MapRequestPayload]`, etc., are
      argument value resolvers that simplify mapping request data to controller
      method arguments, often with type conversion or object hydration.
  - question: You want to ensure that a controller action is only accessible via
      AJAX requests. Which `Request` method can help you check this?
    answers:
      - value: "`$request->isXmlHttpRequest()`"
        correct: true
      - value: "`$request->isAjax()`"
        correct: false
      - value: "`$request->isMethod('AJAX')`"
        correct: false
      - value: "`$request->headers->has('X-Requested-With')`"
        correct: false
    help: The `isXmlHttpRequest()` method (which checks the `X-Requested-With`
      header) is the standard way to determine if a request is an AJAX request
      in Symfony.
  - question: What is the primary reason for using `AbstractController`'s `json()`
      helper method instead of manually creating a `JsonResponse`?
    answers:
      - value: It automatically handles serialization of complex objects to JSON.
        correct: true
      - value: It is more performant than `new JsonResponse()`.
        correct: false
      - value: It provides built-in caching for JSON responses.
        correct: false
      - value: It encrypts the JSON data before sending.
        correct: false
    help: The `json()` helper method (available when the `serializer` component is
      installed) automatically serializes PHP arrays or objects into JSON,
      simplifying API responses.
  - question: Which of the following is a valid way to get a service from the
      container in a Symfony 7 controller that extends `AbstractController`
      (though generally discouraged in favor of autowiring)?
    answers:
      - value: "`$this->get('service_id')`"
        correct: false
      - value: "`$this->container->get('service_id')`"
        correct: true
      - value: "`$this->getService('service_id')`"
        correct: false
      - value: "`$this->container->service('service_id')`"
        correct: false
    help: While autowiring is preferred, if direct container access is needed,
      `AbstractController` provides access to the container via
      `$this->container`, from which you can call `get()`.
  - question: What is the purpose of the `#[MapRequestPayload]` attribute in a
      Symfony 7 controller?
    answers:
      - value: To map request headers to an object.
        correct: false
      - value: To automatically deserialize the request body (e.g., JSON, XML) into a
          PHP object.
        correct: true
      - value: To map form data to an entity.
        correct: false
      - value: To validate the entire request payload.
        correct: false
    help: "`#[MapRequestPayload]` is an argument value resolver attribute that
      automatically deserializes the request body (e.g., JSON or XML) into a PHP
      object, often used for API endpoints."
  - question: When should you prefer using `redirectToRoute()` over `redirect()` in
      a Symfony controller?
    answers:
      - value: When redirecting to an external URL.
        correct: false
      - value: When you want to redirect to a specific named route within your
          application.
        correct: true
      - value: When you need to specify a custom HTTP status code.
        correct: false
      - value: When the target URL contains query parameters.
        correct: false
    help: "`redirectToRoute()` is preferred for internal redirects because it uses
      the route name, making your code more robust to URL changes. `redirect()`
      is for arbitrary URLs."
  - question: What is the purpose of the `#[Cache]` attribute that can be applied to
      controller methods in Symfony?
    answers:
      - value: To enable client-side JavaScript caching.
        correct: false
      - value: To configure HTTP caching headers for the response generated by the
          controller.
        correct: true
      - value: To cache the controller service instance.
        correct: false
      - value: To clear the Symfony cache when the method is called.
        correct: false
    help: The `#[Cache]` attribute is used to configure HTTP caching directives
      (like `max-age`, `public`, `private`, `s-maxage`, `vary`) for the response
      generated by a controller action.
  - question: Which of the following best describes the role of the `HttpKernel`
      component in relation to controllers?
    answers:
      - value: It provides the base class for all controllers.
        correct: false
      - value: It is the core component that dispatches requests to controllers and
          handles the response lifecycle.
        correct: true
      - value: It is responsible for rendering Twig templates.
        correct: false
      - value: It manages database connections for controllers.
        correct: false
    help: The `HttpKernel` is the central component that orchestrates the entire
      request-response lifecycle, including finding and executing the correct
      controller.
  - question: When creating a custom argument value resolver, which method of the
      `ValueResolverInterface` is responsible for determining if the resolver
      can support a given argument?
    answers:
      - value: "`resolve()`"
        correct: false
      - value: "`supports()`"
        correct: true
      - value: "`handle()`"
        correct: false
      - value: "`canResolve()`"
        correct: false
    help: The `supports()` method of `ValueResolverInterface` is called to check if
      the resolver can provide a value for a specific controller argument.
  - question: You want to force a download of a file from your controller. Which
      `Response` subclass is most suitable for this purpose?
    answers:
      - value: "`JsonResponse`"
        correct: false
      - value: "`StreamedResponse`"
        correct: false
      - value: "`BinaryFileResponse`"
        correct: true
      - value: "`RedirectResponse`"
        correct: false
    help: "`BinaryFileResponse` is specifically designed for serving files and can
      automatically handle setting appropriate headers for downloads."
  - question: What is the purpose of the `RequestStack` service in Symfony?
    answers:
      - value: To store multiple `Request` objects when sub-requests are made (e.g.,
          with `forward()`).
        correct: true
      - value: To manage the application's routing configuration.
        correct: false
      - value: To provide access to the current `Response` object.
        correct: false
      - value: To handle session management.
        correct: false
    help: The `RequestStack` service manages a stack of `Request` objects, which is
      useful when dealing with sub-requests (like those made by `forward()` or
      Twig's `render()` function).
  - question: Which of the following is a valid way to define a controller as an
      invokable class in `config/routes.yaml`?
    answers:
      - value: |-
          ```yaml
          my_invokable_route:
              path: /my-invokable
              controller: App\\Controller\\MyInvokableController
          ```
        correct: true
      - value: |-
          ```yaml
          my_invokable_route:
              path: /my-invokable
              controller: App\\Controller\\MyInvokableController::__invoke
          ```
        correct: false
      - value: |-
          ```yaml
          my_invokable_route:
              path: /my-invokable
              controller: [App\\Controller\\MyInvokableController, '__invoke']
          ```
        correct: false
      - value: |-
          ```yaml
          my_invokable_route:
              path: /my-invokable
              controller: App\\Controller\\MyInvokableController::index
          ```
        correct: false
    help: |-
      For invokable controllers, you simply reference the class name directly in the `controller` option of the route definition.
      https://symfony.com/doc/current/controller/service.html#invokable-controllers
  - question: What is the purpose of the `#[MapEntity]` attribute (from Doctrine
      integration) when used in a controller method argument?
    answers:
      - value: It automatically persists the entity to the database.
        correct: false
      - value: It automatically fetches an entity from the database based on a route
          parameter and injects it.
        correct: true
      - value: It maps request data to an entity's properties.
        correct: false
      - value: It validates the entity's data before processing.
        correct: false
    help: The `#[MapEntity]` attribute (part of the Doctrine integration, but
      leveraging argument value resolvers) automatically queries the database
      for an entity based on a route parameter (e.g., `id` or `slug`) and
      injects the loaded entity object into the controller method.
  - question: Which of the following is true about the `Request` object in Symfony?
    answers:
      - value: It is immutable, meaning its state cannot be changed after creation.
        correct: false
      - value: It represents the HTTP request and contains all request-related
          information.
        correct: true
      - value: It is created once per application lifetime.
        correct: false
      - value: It is a global singleton accessible via `Request::getInstance()`.
        correct: false
    help: The `Request` object is a representation of the HTTP request,
      encapsulating all information like headers, query parameters, request
      body, etc. It is created for each incoming request.
  - question: What is the primary benefit of using autowiring for injecting services
      into controller actions?
    answers:
      - value: It reduces the need for explicit service configuration in
          `services.yaml`.
        correct: true
      - value: It makes controllers faster to execute.
        correct: false
      - value: It prevents circular dependencies between services.
        correct: false
      - value: It makes controllers independent of the Symfony framework.
        correct: false
    help: Autowiring simplifies dependency injection by automatically resolving and
      injecting services based on type hints, reducing boilerplate
      configuration.
  - question: When a controller action returns a `Response` object, what happens
      next in the Symfony lifecycle?
    answers:
      - value: The `kernel.finish_request` event is dispatched.
        correct: false
      - value: The `kernel.response` event is dispatched, allowing listeners to modify
          the response.
        correct: true
      - value: The response is immediately sent to the client.
        correct: false
      - value: The `kernel.terminate` event is dispatched.
        correct: false
    help: After the controller returns a `Response`, the `kernel.response` event is
      dispatched, giving other parts of the application a chance to modify the
      response before it's sent.
  - question: You want to create a controller that handles a simple API endpoint and
      returns JSON data. Which method from `AbstractController` is most
      convenient for this?
    answers:
      - value: "`render()`"
        correct: false
      - value: "`json()`"
        correct: true
      - value: "`file()`"
        correct: false
      - value: "`stream()`"
        correct: false
    help: The `json()` helper method in `AbstractController` is designed for
      returning JSON responses, automatically handling serialization and setting
      the correct content type.
  - question: What is the purpose of the `Request::getPathInfo()` method?
    answers:
      - value: To get the full URL of the current request.
        correct: false
      - value: To get the path part of the URL, relative to the front controller.
        correct: true
      - value: To get the query string of the URL.
        correct: false
      - value: To get the base URL of the application.
        correct: false
    help: "`getPathInfo()` returns the path information from the URL, excluding the
      host, scheme, and query string, and relative to the front controller
      (e.g., `/blog/my-post` for `http://example.com/app.php/blog/my-post`)."
  - question: Which of the following `Response` methods is used to send HTTP headers
      to the client?
    answers:
      - value: "`sendHeaders()`"
        correct: true
      - value: "`sendContent()`"
        correct: false
      - value: "`send()`"
        correct: true
      - value: "`prepare()`"
        correct: false
    help: The `sendHeaders()` method explicitly sends the HTTP headers. The `send()`
      method is a convenience method that calls `sendHeaders()` and
      `sendContent()`.
  - question: What is the primary purpose of the `kernel.terminate` event in the
      Symfony lifecycle?
    answers:
      - value: To perform cleanup tasks after the response has been sent to the client.
        correct: true
      - value: To generate the final HTTP response.
        correct: false
      - value: To handle exceptions that occurred during request processing.
        correct: false
      - value: To log all requests and responses.
        correct: false
    help: The `kernel.terminate` event is dispatched after the response has been
      sent to the client, allowing for long-running tasks or cleanup that don't
      need to block the user's browser.
  - question: When defining a controller method, what is the best practice for
      handling optional route parameters that should have a default value if not
      provided in the URL?
    answers:
      - value: "Define a default value directly in the method signature, e.g., `public
          function show(int $id = 1): Response`."
        correct: true
      - value: Check `$request->attributes->has('id')` and set a default if not present.
        correct: false
      - value: "Define the default in the `#[Route]` attribute, e.g.,
          `#[Route('/path/{id}', defaults: ['id' => 1])]`."
        correct: true
      - value: Use a ternary operator inside the method to assign a default.
        correct: false
    help: Symfony allows defining default values for route parameters both in the
      `#[Route]` attribute's `defaults` option and directly in the controller
      method signature.
  - question: If you need to access the `RouterInterface` service within a
      controller that does not extend `AbstractController`, how would you
      typically inject it?
    answers:
      - value: "Via constructor injection: `public function __construct(RouterInterface
          $router)`."
        correct: true
      - value: "Via method injection: `public function index(RouterInterface $router)`."
        correct: true
      - value: By calling `ServiceLocator::get(RouterInterface::class)`.
        correct: false
      - value: By accessing `$this->get('router')`.
        correct: false
    help: For controllers registered as services (e.g., with `#[AsController]`),
      services can be injected via constructor or method arguments using
      type-hinting.
