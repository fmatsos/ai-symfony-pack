category: Controllers
questions:
  - question: Which of the following is the recommended naming convention for a
      Symfony controller class?
    answers:
      - value: MyController.php
        correct: false
      - value: MyController.php (e.g., `App\Controller\MyController`)
        correct: true
      - value: my_controller.php
        correct: false
      - value: ControllerMy.php
        correct: false
    help: Symfony recommends controller classes to be suffixed with 'Controller' and
      placed in the `src/Controller/` namespace, e.g.,
      `App\Controller\MyController`.
  - question: What is the primary benefit of extending
      `Symfony\Bundle\FrameworkBundle\Controller\AbstractController` in your
      Symfony controllers?
    answers:
      - value: It automatically registers the controller as a service.
        correct: false
      - value: It provides convenient helper methods for common controller tasks like
          rendering templates, generating URLs, and handling redirects.
        correct: true
      - value: It enforces strict type-hinting for all action arguments.
        correct: false
      - value: It enables automatic routing for all public methods.
        correct: false
    help: The `AbstractController` provides access to various helper methods,
      simplifying common controller tasks. While controllers are often
      registered as services, this is typically handled by autoconfiguration and
      the `controller.service_arguments` tag, not directly by extending
      `AbstractController`.
  - question: How do you correctly access the `Request` object within a Symfony
      controller action method to retrieve query parameters?
    answers:
      - value: "public function index(Request $request): Response { $page =
          $request->query->get('page'); }"
        correct: true
      - value: "public function index(): Response { $request =
          $this->get('request_stack')->getCurrentRequest(); $page =
          $request->query->get('page'); }"
        correct: false
      - value: "public function index($request): Response { $page =
          $request->query->get('page'); }"
        correct: false
      - value: "public function index(): Response { $page = $_GET['page']; }"
        correct: false
    help: The `Request` object is automatically injected into controller action
      methods when type-hinted with `Symfony\Component\HttpFoundation\Request`.
      You can then access query parameters via
      `$request->query->get('paramName')`.
  - question: Which class must a Symfony controller action method return?
    answers:
      - value: "`Symfony\\Component\\HttpFoundation\\Request`"
        correct: false
      - value: "`Symfony\\Component\\HttpFoundation\\Response`"
        correct: true
      - value: "`Symfony\\Component\\HttpFoundation\\JsonResponse`"
        correct: false
      - value: "`Symfony\\Component\\HttpFoundation\\RedirectResponse`"
        correct: false
    help: A Symfony controller action method must always return an instance of
      `Symfony\Component\HttpFoundation\Response` or one of its subclasses
      (e.g., `JsonResponse`, `RedirectResponse`).
  - question: >-
      Consider the following code snippet:


      ```php

      // src/Controller/MyController.php

      namespace App\Controller;


      use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;

      use Symfony\Component\HttpFoundation\Response;

      use Symfony\Component\Routing\Attribute\Route;


      class MyController extends AbstractController

      {
          #[Route('/set-cookie', name: 'app_set_cookie')]
          public function setCookie(): Response
          {
              $response = new Response('Cookie set!');
              // ???
              return $response;
          }
      }

      ```


      How would you correctly set a cookie named 'my_cookie' with the value
      'test_value' in the response?
    answers:
      - value: $response->headers->setCookie(new Cookie('my_cookie', 'test_value'));
        correct: true
      - value: $response->setCookie('my_cookie', 'test_value');
        correct: false
      - value: $response->cookies->set('my_cookie', 'test_value');
        correct: false
      - value: $response->addCookie('my_cookie', 'test_value');
        correct: false
    help: To set a cookie on a `Response` object, you use
      `$response->headers->setCookie(new Cookie(...))`. Remember to `use
      Symfony\Component\HttpFoundation\Cookie;`.
  - question: Which method of `AbstractController` is used to add a flash message?
    answers:
      - value: "`addFlash(string $type, string $message)`"
        correct: true
      - value: "`setFlash(string $type, string $message)`"
        correct: false
      - value: "`flash(string $type, string $message)`"
        correct: false
      - value: "`getFlashBag()->add(string $type, string $message)`"
        correct: false
    help: The `AbstractController` provides the `addFlash()` helper method to add
      flash messages to the session. These messages are typically displayed on
      the next request.
  - question: You need to redirect a user to a specific named route in Symfony.
      Which `AbstractController` helper method should you use?
    answers:
      - value: "`redirect('https://example.com/some/path')`"
        correct: false
      - value: "`redirectToRoute('app_homepage', ['param' => 'value'])`"
        correct: true
      - value: "`forward('App\\Controller\\OtherController::index')`"
        correct: false
      - value: "`$this->get('router')->generate('app_homepage')`"
        correct: false
    help: The `redirectToRoute()` method is specifically designed to generate a URL
      for a given named route and return a `RedirectResponse`.
  - question: What is the primary purpose of the `forward()` method in
      `AbstractController`?
    answers:
      - value: To perform an HTTP redirect to another URL.
        correct: false
      - value: To make an internal sub-request to another controller and return its
          `Response`.
        correct: true
      - value: To send the user's browser to a different route without changing the URL.
        correct: false
      - value: To execute a service method and return its result.
        correct: false
    help: The `forward()` method allows you to make an internal sub-request to
      another controller. This is useful for reusing controller logic or
      embedding content from other controllers within a single response.
  - question: How can you generate a 404 Not Found page from a Symfony controller?
    answers:
      - value: Return `new Response('Not Found', 404);`
        correct: false
      - value: Throw a `Symfony\Component\HttpKernel\Exception\NotFoundHttpException`.
        correct: true
      - value: Call `$this->render('404.html.twig');`
        correct: false
      - value: Use `$this->error(404);`
        correct: false
    help: The recommended way to trigger a 404 Not Found response is to throw a
      `NotFoundHttpException`. Symfony's exception listener will catch this and
      render the appropriate error page.
  - question: Which attribute is used to automatically map an uploaded file from the
      request to an `UploadedFile` object in a Symfony controller argument?
    answers:
      - value: "`#[MapFile]`"
        correct: false
      - value: "`#[MapRequestFile]`"
        correct: false
      - value: "`#[MapUploadedFile]`"
        correct: true
      - value: "`#[FileArgument]`"
        correct: false
    help: The `#[MapUploadedFile]` attribute (from
      `Symfony\Component\HttpKernel\Attribute\MapUploadedFile`) is used to
      automatically resolve an uploaded file to an `UploadedFile` object.
  - question: You want to embed the output of a Symfony controller into a Twig
      template. Which Twig function allows you to do this by referencing a
      route?
    answers:
      - value: "`include()`"
        correct: false
      - value: "`embed_controller()`"
        correct: false
      - value: "`render(path('my_route'))`"
        correct: true
      - value: "`call_controller('my_route')`"
        correct: false
    help: The `render()` Twig function, combined with `path()` or `url()`, allows
      you to embed the output of a controller associated with a route.
  - question: How does Symfony's `ArgumentResolver` primarily determine the values
      for controller method arguments?
    answers:
      - value: By matching argument names to keys in the `Request` object's attributes
          bag.
        correct: true
      - value: By matching argument names to values in the `$_POST` superglobal.
        correct: false
      - value: By inspecting the method's docblock for parameter descriptions.
        correct: false
      - value: By looking up services in the container that match the argument name.
        correct: false
    help: The `ArgumentResolver` first attempts to match argument names to keys
      found in the `Request` object's attributes bag (which includes route
      parameters).
  - question: Which of the following is NOT a valid way to define a controller in
      Symfony 7?
    answers:
      - value: A class method with a `#[Route]` attribute.
        correct: false
      - value: A class implementing `__invoke()` with a `#[Route]` attribute.
        correct: false
      - value: A standalone PHP function defined in a global namespace.
        correct: true
      - value: A service class with a method referenced in `routes.yaml`.
        correct: false
    help: While Symfony can resolve standalone functions in a very basic framework
      setup, the standard and recommended way in a full Symfony application is
      to use class methods (including invokable classes) with routing attributes
      or configuration.
  - question: What is the purpose of the `#[AsController]` attribute in Symfony 7?
    answers:
      - value: To mark a class as a service that can be autowired into other services.
        correct: false
      - value: To explicitly register a controller class as a service, enabling
          dependency injection into its methods without extending
          `AbstractController`.
        correct: true
      - value: To define a default route for all methods within the controller.
        correct: false
      - value: To prevent the controller from being autowired.
        correct: false
    help: The `#[AsController]` attribute (from
      `Symfony\Component\HttpKernel\Attribute\AsController`) explicitly
      registers a controller as a service, making it eligible for autowiring of
      dependencies into its action methods.
  - question: When defining a controller method, what happens if you type-hint an
      argument with `Symfony\Component\HttpFoundation\Request`?
    answers:
      - value: The `Request` object is automatically injected by the `ArgumentResolver`.
        correct: true
      - value: Symfony will throw an error because the `Request` object cannot be
          directly injected.
        correct: false
      - value: You must manually retrieve the `Request` object from the service
          container.
        correct: false
      - value: The method will only be accessible via POST requests.
        correct: false
    help: The `ArgumentResolver` automatically injects the current `Request` object
      when an argument is type-hinted with
      `Symfony\Component\HttpFoundation\Request`.
  - question: Which HTTP status code is commonly used for a temporary redirect in
      Symfony?
    answers:
      - value: 200 OK
        correct: false
      - value: 301 Moved Permanently
        correct: false
      - value: 302 Found
        correct: true
      - value: 404 Not Found
        correct: false
    help: The `302 Found` status code is used for temporary redirects. The
      `redirectToRoute()` and `redirect()` helper methods default to `302`.
  - question: What is the correct way to retrieve a value from the session in a
      Symfony controller?
    answers:
      - value: $session = $request->getSession(); $value = $session->get('key');
        correct: true
      - value: $value = $_SESSION['key'];
        correct: false
      - value: $value = $this->session->get('key');
        correct: false
      - value: $value = $this->get('session')->get('key');
        correct: false
    help: You can access the session via the `Request` object's `getSession()`
      method. The session object implements
      `Symfony\Component\HttpFoundation\Session\SessionInterface`.
  - question: "When using `#[Route('/lucky/number/{max}')]` and a controller method
      `public function number(int $max): Response`, how does Symfony get the
      value for `$max`?"
    answers:
      - value: It's automatically resolved from the URL path by the `ArgumentResolver`.
        correct: true
      - value: It's retrieved from the `$_GET` superglobal.
        correct: false
      - value: It's injected as a service from the dependency injection container.
        correct: false
      - value: It's a fixed value defined in the `#[Route]` attribute.
        correct: false
    help: The `ArgumentResolver` automatically resolves route parameters (like
      `{max}`) and injects them into the controller method arguments, provided
      they are correctly type-hinted.
  - question: Which of the following is a valid way to render a Twig template from a
      Symfony controller extending `AbstractController`?
    answers:
      - value: return $this->render('template.html.twig', ['data' => $value]);
        correct: true
      - value: return $this->get('twig')->render('template.html.twig', ['data' =>
          $value]);
        correct: false
      - value: return new Response($this->renderView('template.html.twig', ['data' =>
          $value]));
        correct: false
      - value: return $this->display('template.html.twig', ['data' => $value]);
        correct: false
    help: The `render()` method is a helper provided by `AbstractController` to
      render a Twig template and return a `Response` object.
  - question: What is the purpose of the `kernel.controller` event in Symfony's
      HttpKernel?
    answers:
      - value: It is dispatched after the controller has executed and returned a
          response.
        correct: false
      - value: It is dispatched before the controller callable has been determined.
        correct: false
      - value: It is dispatched after the controller callable has been determined but
          before its execution, allowing listeners to modify or replace the
          controller.
        correct: true
      - value: It is dispatched when a controller throws an exception.
        correct: false
    help: The `kernel.controller` event is dispatched by `HttpKernel::handle()`
      after the controller callable has been determined but before its
      execution. This allows for dynamic modification of the controller.
  - question: When should you consider using an 'invokable' controller (a class with
      an `__invoke()` method) in Symfony?
    answers:
      - value: When the controller needs to handle multiple distinct actions.
        correct: false
      - value: When the controller is very simple and only handles a single action for a
          specific route.
        correct: true
      - value: When you want to prevent dependency injection into the controller.
        correct: false
      - value: When you need to extend multiple base controller classes.
        correct: false
    help: Invokable controllers are suitable for simple controllers that handle a
      single action, often used in ADR (Action-Domain-Responder) architectures
      for clarity and conciseness.
  - question: Which of the following describes the correct behavior of
      `ControllerResolverInterface::getController(Request $request)`?
    answers:
      - value: It executes the controller and returns the `Response` object.
        correct: false
      - value: It determines and returns a PHP callable (the controller) based on the
          request's information.
        correct: true
      - value: It resolves all arguments for the controller method.
        correct: false
      - value: It generates a URL for the given controller.
        correct: false
    help: The `getController()` method of `ControllerResolverInterface` is
      responsible for finding and returning the actual PHP callable (function,
      method, or invokable object) that will act as the controller for the given
      request.
  - question: You have a controller method that expects an integer `id` from the
      route. If the `id` parameter is optional and should default to `1` if not
      provided, how would you define the method signature?
    answers:
      - value: "public function show(int $id = 1): Response"
        correct: true
      - value: "public function show(int $id ?? 1): Response"
        correct: false
      - value: "public function show(int $id = null): Response"
        correct: false
      - value: "public function show(int $id = (int)1): Response"
        correct: false
    help: PHP's default parameter values work seamlessly with Symfony's
      ArgumentResolver to provide a fallback value if a route parameter is not
      present.
  - question: What is the primary role of the `public/index.php` file in a standard
      Symfony application?
    answers:
      - value: It contains all the application's business logic.
        correct: false
      - value: It serves as the front controller, handling all incoming HTTP requests
          and dispatching them through the kernel.
        correct: true
      - value: It defines all the application's routes.
        correct: false
      - value: It is only used during development, not in production.
        correct: false
    help: The `public/index.php` file is the front controller. It bootstraps the
      Symfony application, creates the `Request` and `Kernel` objects, handles
      the request, and sends the response.
  - question: When accessing the session in a Symfony controller, what is the best
      practice to ensure the session is started and available?
    answers:
      - value: Call `session_start()` at the beginning of the controller method.
        correct: false
      - value: The session is automatically started by Symfony's `SessionListener` when
          you retrieve it via `$request->getSession()`.
        correct: true
      - value: Inject `SessionInterface` into the controller's constructor.
        correct: true
      - value: Check `if (isset($_SESSION))` before using it.
        correct: false
    help: Symfony's `SessionListener` automatically handles starting the session.
      When you retrieve the session object (e.g., via `$request->getSession()`
      or by injecting `SessionInterface`), it will be ready to use.
  - question: Which of the following is a valid way to retrieve a specific service,
      like `Psr\Log\LoggerInterface`, in a Symfony controller action method
      using autowiring?
    answers:
      - value: "public function index(LoggerInterface $logger): Response {
          $logger->info('...'); }"
        correct: true
      - value: "public function index(): Response { $logger =
          $this->container->get('logger'); $logger->info('...'); }"
        correct: false
      - value: "public function index(): Response { $logger = new Logger();
          $logger->info('...'); }"
        correct: false
      - value: "public function index(string $logger): Response { $logger->info('...');
          }"
        correct: false
    help: Symfony's autowiring allows you to simply type-hint the service interface
      (or class) in your controller action method, and the container will
      automatically inject the correct instance.
  - question: What is the difference between `redirectToRoute()` and `redirect()`
      helper methods in `AbstractController`?
    answers:
      - value: "`redirectToRoute()` generates a URL from a named route, while
          `redirect()` redirects to an arbitrary URL."
        correct: true
      - value: "`redirectToRoute()` performs an internal sub-request, while `redirect()`
          sends an HTTP redirect."
        correct: false
      - value: "`redirectToRoute()` is for GET requests, `redirect()` is for POST
          requests."
        correct: false
      - value: There is no functional difference; they are aliases for the same method.
        correct: false
    help: "`redirectToRoute()` is convenient for redirecting within your application
      using route names, whereas `redirect()` is used for redirecting to any
      external or internal URL."
  - question: "When defining a controller method like `public function index(Request
      $request, int $year): Response`, does the order of `$request` and `$year`
      arguments matter for argument resolution?"
    answers:
      - value: Yes, `Request` must always come first.
        correct: false
      - value: Yes, route parameters must always come first.
        correct: false
      - value: No, the `ArgumentResolver` matches arguments by name and type-hint, so
          the order does not matter.
        correct: true
      - value: Only if custom argument resolvers are involved.
        correct: false
    help: The `ArgumentResolver` is smart enough to match arguments based on their
      name and type-hint, regardless of their order in the method signature.
  - question: How can you access application configuration parameters (e.g.,
      `kernel.project_dir`) within a Symfony controller extending
      `AbstractController`?
    answers:
      - value: Use `$this->getParameter('parameter_name');`
        correct: true
      - value: Access them directly via `$_ENV['parameter_name'];`
        correct: false
      - value: Inject `ParameterBagInterface` and use its `get()` method.
        correct: true
      - value: They are not accessible from controllers for security reasons.
        correct: false
    help: The `AbstractController` provides a `getParameter()` helper method.
      Alternatively, you can inject
      `Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface`
      and use its `get()` method.
  - question: Which HTTP status code indicates a permanent redirect?
    answers:
      - value: 301 Moved Permanently
        correct: true
      - value: 302 Found
        correct: false
      - value: 303 See Other
        correct: false
      - value: 307 Temporary Redirect
        correct: false
    help: The `301 Moved Permanently` status code informs clients that the resource
      has permanently moved to a new URL, and they should update their links.
  - question: What is the purpose of the `#[Route]` attribute in a Symfony controller?
    answers:
      - value: To define the controller's service ID.
        correct: false
      - value: To map a URL path to a specific controller method.
        correct: true
      - value: To automatically inject services into the controller.
        correct: false
      - value: To specify the HTTP client to be used by the controller.
        correct: false
    help: The `#[Route]` attribute is used to define routes directly on controller
      methods, specifying the URL path, name, and allowed HTTP methods.
  - question: When handling a form submission in a Symfony controller, what method
      is typically called on the form object to process the request data?
    answers:
      - value: "`$form->submit($request);`"
        correct: false
      - value: "`$form->handleRequest($request);`"
        correct: true
      - value: "`$form->process($request);`"
        correct: false
      - value: "`$form->bind($request);`"
        correct: false
    help: The `handleRequest()` method is used to read the request data and populate
      the form fields with the submitted values.
  - question: Which of the following is a correct way to create a `JsonResponse` in
      a Symfony controller?
    answers:
      - value: return new Response(json_encode(['message' => 'Hello']), 200,
          ['Content-Type' => 'application/json']);
        correct: false
      - value: return $this->json(['message' => 'Hello']);
        correct: true
      - value: return new JsonResponse(['message' => 'Hello']);
        correct: true
      - value: return $this->response(['message' => 'Hello'], 'json');
        correct: false
    help: You can use the `json()` helper method from `AbstractController` or
      directly instantiate `Symfony\Component\HttpFoundation\JsonResponse`.
  - question: What happens if a controller method argument is type-hinted but no
      corresponding value can be found in the request attributes or through a
      value resolver?
    answers:
      - value: The argument will be `null`.
        correct: false
      - value: Symfony will throw a `RuntimeException` or similar exception indicating
          an unresolvable argument.
        correct: true
      - value: The controller will skip execution.
        correct: false
      - value: It will attempt to autowire a service with that name.
        correct: false
    help: If an argument is type-hinted and required, but no value can be resolved,
      Symfony's `ArgumentResolver` will throw an exception.
  - question: What is the primary difference between an HTTP redirect and an
      internal redirect (forwarding) in Symfony?
    answers:
      - value: An HTTP redirect sends a new HTTP response to the client, while an
          internal redirect processes another controller internally without a
          new HTTP request.
        correct: true
      - value: An HTTP redirect is faster than an internal redirect.
        correct: false
      - value: An HTTP redirect changes the URL in the browser, while an internal
          redirect does not.
        correct: true
      - value: Internal redirects are only possible with `AbstractController`, while
          HTTP redirects are not.
        correct: false
    help: HTTP redirects involve a round-trip to the client and change the browser's
      URL. Internal redirects (`forward()`) are handled entirely server-side and
      do not change the URL or involve a new client request.
  - question: Which of the following is NOT a standard way to retrieve data from the
      `Request` object in a Symfony controller?
    answers:
      - value: "`$request->query->get('param')` for GET parameters."
        correct: false
      - value: "`$request->request->get('param')` for POST parameters."
        correct: false
      - value: "`$request->headers->get('User-Agent')` for HTTP headers."
        correct: false
      - value: "`$request->data->get('param')` for JSON request bodies."
        correct: true
    help: For JSON request bodies, you would typically access
      `$request->getContent()` and then decode the JSON, or use a custom
      argument resolver or a request listener to deserialize it.
  - question: When should you avoid extending `AbstractController` for your Symfony
      controllers?
    answers:
      - value: When you need to use the `#[Route]` attribute.
        correct: false
      - value: When you want to manually inject all dependencies via the constructor or
          `#[AsController]` attribute, and prefer not to use the helper methods.
        correct: true
      - value: When your controller is very complex and has many dependencies.
        correct: false
      - value: When you are building a RESTful API.
        correct: false
    help: Extending `AbstractController` is optional. If you prefer to explicitly
      inject all services and don't need the convenience helper methods, or if
      you are building a micro-framework, you might choose not to extend it.
  - question: Which Twig function allows you to embed the output of a controller by
      directly referencing its service ID or fully qualified class name and
      method?
    answers:
      - value: "`render(path('my_route'))`"
        correct: false
      - value: "`render(controller('App\\\\Controller\\\\BlogController::recentArticles\
          '))`"
        correct: true
      - value: "`include('template.html.twig')`"
        correct: false
      - value: "`embed('App\\\\Controller\\\\BlogController::recentArticles')`"
        correct: false
    help: The `controller()` Twig function, used with `render()`, allows you to
      directly specify the controller callable (e.g.,
      `App\Controller\BlogController::recentArticles`) to execute and embed its
      output.
  - question: What is the purpose of the `ControllerEvent::setController(callable
      $controller)` method?
    answers:
      - value: To define the controller for a new route.
        correct: false
      - value: To change the controller callable that will be executed during the
          `kernel.controller` event.
        correct: true
      - value: To set the default controller for the entire application.
        correct: false
      - value: To register a new service as a controller.
        correct: false
    help: During the `kernel.controller` event, you can use `setController()` to
      dynamically change which controller will handle the current request.
  - question: Which of the following is a correct way to set a flash message type
      'success' with the message 'Item saved successfully!'?
    answers:
      - value: $this->addFlash('success', 'Item saved successfully!');
        correct: true
      - value: $this->get('session')->getFlashBag()->add('success', 'Item saved
          successfully!');
        correct: true
      - value: $this->flash('success', 'Item saved successfully!');
        correct: false
      - value: $_SESSION['_sf_flash']['success'][] = 'Item saved successfully!';
        correct: false
    help: Both `AbstractController::addFlash()` and direct access to the session's
      flash bag are valid ways to set flash messages.
  - question: When a controller method argument is type-hinted with a class (e.g.,
      `BookingId $id`), and it's not a standard Symfony type, what mechanism is
      used to resolve its value?
    answers:
      - value: Symfony attempts to find a service with that class name.
        correct: false
      - value: A custom argument value resolver must be configured to provide the
          instance.
        correct: true
      - value: The argument will always be `null`.
        correct: false
      - value: It automatically deserializes JSON from the request body into that
          object.
        correct: false
    help: For custom objects or complex types that are not directly resolvable from
      request attributes or standard services, you need to implement and
      register a custom argument value resolver.
  - question: What is the purpose of the `ControllerResolver` in Symfony's HttpKernel?
    answers:
      - value: To resolve the correct Twig template to render.
        correct: false
      - value: To determine which PHP callable (controller) should handle the current
          `Request`.
        correct: true
      - value: To resolve service dependencies for controllers.
        correct: false
      - value: To resolve route parameters into specific data types.
        correct: false
    help: The `ControllerResolver` (implementing `ControllerResolverInterface`) is
      responsible for taking the `Request` object and determining the
      appropriate controller callable to execute.
  - question: How can you retrieve a cookie value from the `Request` object in a
      Symfony controller?
    answers:
      - value: $request->cookies->get('cookie_name');
        correct: true
      - value: $request->getCookie('cookie_name');
        correct: false
      - value: $_COOKIE['cookie_name'];
        correct: false
      - value: $request->headers->get('Cookie')['cookie_name'];
        correct: false
    help: The `Request` object provides access to cookies via its `cookies`
      property, which is a `ParameterBag`.
  - question: What is the recommended way to generate a new Symfony controller using
      the command line?
    answers:
      - value: "`php bin/console create:controller MyController`"
        correct: false
      - value: "`php bin/console make:controller MyController`"
        correct: true
      - value: "`symfony new:controller MyController`"
        correct: false
      - value: "`composer require controller MyController`"
        correct: false
    help: The `make:controller` command from the Symfony Maker bundle is the
      standard way to generate new controller classes.
  - question: Which of the following is true about the `Response` object in Symfony?
    answers:
      - value: It is immutable and cannot be modified after creation.
        correct: false
      - value: It encapsulates HTTP headers, content, and status code.
        correct: true
      - value: It is automatically sent to the client by the controller.
        correct: false
      - value: It can only contain HTML content.
        correct: false
    help: The `Response` object is a mutable object that holds all the information
      needed to send an HTTP response back to the client. The kernel is
      responsible for sending it.
  - question: When using `#[MapUploadedFile]` for a controller argument, what is the
      expected type-hint for the argument?
    answers:
      - value: "`string`"
        correct: false
      - value: "`array`"
        correct: false
      - value: "`Symfony\\Component\\HttpFoundation\\File\\UploadedFile`"
        correct: true
      - value: "`Psr\\Http\\Message\\UploadedFileInterface`"
        correct: false
    help: The `#[MapUploadedFile]` attribute resolves the uploaded file into an
      instance of `Symfony\Component\HttpFoundation\File\UploadedFile`.
  - question: What is the primary benefit of using `#[AsController]` over manually
      tagging controllers with `controller.service_arguments` in
      `services.yaml`?
    answers:
      - value: It allows controllers to extend multiple base classes.
        correct: false
      - value: It provides a more concise and attribute-driven way to register
          controllers as services, improving readability and discoverability.
        correct: true
      - value: It prevents controllers from being autowired.
        correct: false
      - value: It's required for all controllers in Symfony 7.
        correct: false
    help: "`#[AsController]` simplifies controller service registration by using PHP
      attributes, which is generally preferred for modern Symfony applications."
  - question: You want to render a Twig template and pass an existing `Response`
      object to modify its headers or status code. How would you do this using
      `AbstractController`'s `render()` method?
    answers:
      - value: return $this->render('template.html.twig', [], $response);
        correct: true
      - value: return $this->render('template.html.twig')->setResponse($response);
        correct: false
      - value: return $this->render('template.html.twig', ['response' => $response]);
        correct: false
      - value: return $this->renderWithResponse('template.html.twig', $response);
        correct: false
    help: The `render()` method accepts an optional third argument, which is an
      existing `Response` object to be modified and returned.
  - question: What is the purpose of the `sendEarlyHints()` method in
      `AbstractController`?
    answers:
      - value: To send a `200 OK` response immediately.
        correct: false
      - value: To send `103 Early Hints` headers immediately to the client, allowing the
          browser to pre-load resources.
        correct: true
      - value: To send a `302 Redirect` response before the main content.
        correct: false
      - value: To send a `404 Not Found` response early in the request cycle.
        correct: false
    help: The `sendEarlyHints()` method creates and sends a `103 Early Hints` HTTP
      response, which can improve perceived performance by allowing browsers to
      start fetching resources sooner.
  - question: Which of the following best describes the 'controller' in the context
      of Symfony's MVC pattern?
    answers:
      - value: It is responsible for storing and retrieving data from the database.
        correct: false
      - value: It is a class method that accepts requests and returns a `Response`
          object, acting as the bridge between the model and the view.
        correct: true
      - value: It is a Twig template responsible for rendering HTML.
        correct: false
      - value: It is a service that handles background tasks.
        correct: false
    help: In Symfony, a controller is typically a PHP class method (or an invokable
      class) that processes an incoming request and prepares a response.
  - question: "If you define a route with a parameter like `/products/{slug}` and
      your controller method is `public function show(string $slug): Response`,
      how does Symfony ensure the `$slug` argument is populated?"
    answers:
      - value: It relies on the `$_GET` superglobal.
        correct: false
      - value: The `RouterListener` extracts the `slug` from the URL and adds it to the
          `Request` attributes, which the `ArgumentResolver` then uses.
        correct: true
      - value: You must manually call `$request->attributes->get('slug')`.
        correct: false
      - value: Symfony automatically performs a database lookup for the slug.
        correct: false
    help: The routing component matches the URL, extracts parameters, and stores
      them in the `Request` object's attributes. The `ArgumentResolver` then
      injects these attributes into the controller method arguments.
  - question: What is the primary reason for placing the `public/index.php` file in
      a dedicated `public` directory?
    answers:
      - value: To make all application files publicly accessible.
        correct: false
      - value: To enhance security by ensuring that only the front controller and public
          assets are directly accessible via the web server.
        correct: true
      - value: To improve performance by caching the controller files.
        correct: false
      - value: It's a legacy requirement from older PHP versions.
        correct: false
    help: The `public` directory (or `web` in older Symfony versions) is the web
      root, designed to expose only the necessary files (front controller,
      assets) to the public, keeping application logic and configuration secure.
  - question: Which of the following is true regarding flash messages in Symfony?
    answers:
      - value: They persist across multiple requests until explicitly cleared.
        correct: false
      - value: They are stored in cookies.
        correct: false
      - value: They are stored in the session and are automatically cleared after being
          retrieved (typically on the next request).
        correct: true
      - value: They are only visible on the same page where they were set.
        correct: false
    help: Flash messages are a special type of session attribute that are designed
      to be displayed once and then automatically removed from the session.
  - question: You need to create a `Response` object with a specific HTTP status
      code, e.g., 201 Created. How would you do this?
    answers:
      - value: return new Response('Content', 201);
        correct: true
      - value: return $this->response('Content')->setStatusCode(201);
        correct: false
      - value: return $this->createResponse('Content', 201);
        correct: false
      - value: return new Response('Content')->withStatus(201);
        correct: false
    help: The `Response` constructor accepts the content as the first argument and
      the status code as the second.
  - question: What is the purpose of the `controller.service_arguments` tag in
      `services.yaml` for controllers?
    answers:
      - value: It marks the controller as a private service.
        correct: false
      - value: It enables autowiring of services into controller action arguments, even
          if the controller doesn't extend `AbstractController`.
        correct: true
      - value: It defines the default arguments for all controller methods.
        correct: false
      - value: It prevents the controller from being optimized by the service container.
        correct: false
    help: The `controller.service_arguments` tag is crucial for enabling Symfony's
      argument value resolvers and autowiring for controller action methods.
  - question: Which of the following is an example of a 'built-in internal
      controller' that Symfony uses?
    answers:
      - value: The `_wdt` controller for the Web Debug Toolbar.
        correct: true
      - value: Any controller defined by a third-party bundle.
        correct: false
      - value: A controller that handles database migrations.
        correct: false
      - value: A controller that sends emails.
        correct: false
    help: Symfony includes several internal controllers for features like the Web
      Debug Toolbar (`_wdt`) or error pages, which are not typically defined by
      the application developer.
  - question: When defining a route using PHP attributes, where should the
      `#[Route]` attribute be placed?
    answers:
      - value: On the controller class definition.
        correct: true
      - value: On the controller method (action) definition.
        correct: true
      - value: Inside the controller method body.
        correct: false
      - value: In the `composer.json` file.
        correct: false
    help: The `#[Route]` attribute can be placed on either the controller class (for
      a prefix or default route) or directly on the action method to define its
      specific route.
  - question: What is the primary responsibility of an
      `ArgumentValueResolverInterface` implementation?
    answers:
      - value: To resolve a controller callable from a request.
        correct: false
      - value: To convert a controller method argument into a specific object or value
          based on the request.
        correct: true
      - value: To validate the arguments passed to a controller.
        correct: false
      - value: To handle exceptions thrown by controller arguments.
        correct: false
    help: Argument value resolvers are responsible for providing the actual value
      for a controller method argument, often converting raw request data or
      route parameters into more complex objects.
  - question: "If you have a controller method `public function index(Request
      $request, string $name = 'World'): Response` and the route is
      `/hello/{name?}`, what will be the value of `$name` if the URL is
      `/hello`?"
    answers:
      - value: "`null`"
        correct: false
      - value: "`'World'`"
        correct: true
      - value: An empty string `''`
        correct: false
      - value: An exception will be thrown.
        correct: false
    help: When a route parameter is optional (e.g., `{name?}`) and not provided in
      the URL, the PHP default value for the corresponding controller argument
      will be used.
  - question: What is the purpose of the `RequestStack` service in Symfony?
    answers:
      - value: To manage multiple HTTP requests simultaneously.
        correct: false
      - value: To provide access to the current master request and any sub-requests.
        correct: true
      - value: To store all incoming request headers.
        correct: false
      - value: To handle request validation.
        correct: false
    help: The `RequestStack` service allows you to access the current `Request`
      object, especially useful when dealing with sub-requests (e.g., from
      `forward()`).
  - question: Which of the following is the most secure and recommended project
      directory structure for a Symfony application?
    answers:
      - value: All PHP files in the root directory, including the front controller.
        correct: false
      - value: A `public/` directory containing only the front controller (`index.php`)
          and public assets, with application logic outside this directory.
        correct: true
      - value: A `src/` directory containing all files, including `index.php`.
        correct: false
      - value: Using a single `.htaccess` file to restrict access to all files except
          `index.php`.
        correct: false
    help: The standard Symfony directory structure with a dedicated `public/` (or
      `web/`) directory for the front controller and public assets is a
      fundamental security best practice.
  - question: When creating a custom form type in Symfony, how do you typically
      integrate it with a controller?
    answers:
      - value: By instantiating the form type directly and calling `handleRequest()`.
        correct: false
      - value: By using `$this->createForm(MyFormType::class, $data);` in an
          `AbstractController` method.
        correct: true
      - value: By defining the form in `services.yaml` and autowiring it.
        correct: false
      - value: By extending `Symfony\Component\Form\AbstractType` in the controller.
        correct: false
    help: The `createForm()` helper method from `AbstractController` is the standard
      way to create a form instance from a dedicated form type class.
  - question: What is the primary purpose of the `HttpKernel` component in Symfony?
    answers:
      - value: To manage database connections.
        correct: false
      - value: To convert a `Request` into a `Response` by dispatching events and
          executing the controller.
        correct: true
      - value: To handle routing and URL generation.
        correct: false
      - value: To render Twig templates.
        correct: false
    help: The `HttpKernel` is the core of Symfony, responsible for the entire
      request-response lifecycle, including event dispatching, controller
      resolution, and response creation.
  - question: If you want to log information from within a Symfony controller, which
      service should you type-hint in your controller method?
    answers:
      - value: "`Logger`"
        correct: false
      - value: "`Psr\\Log\\LoggerInterface`"
        correct: true
      - value: "`Monolog\\Logger`"
        correct: false
      - value: "`LogService`"
        correct: false
    help: Symfony's logging integration uses the PSR-3 `LoggerInterface`.
      Type-hinting this interface allows autowiring of the default logger.
  - question: Consider a scenario where you have multiple controllers that share
      some common logic. What is the most Symfony-idiomatic way to reuse this
      logic?
    answers:
      - value: Create a base controller class that all other controllers extend.
        correct: false
      - value: Extract the common logic into a separate service and inject it into the
          controllers.
        correct: true
      - value: Use global functions for the common logic.
        correct: false
      - value: Duplicate the code in each controller.
        correct: false
    help: Extracting reusable logic into services and injecting them into
      controllers promotes separation of concerns, testability, and adherence to
      the Dependency Inversion Principle.
  - question: What is the purpose of the `#[MapQueryParameter]` attribute (or
      similar `Map*` attributes) for controller arguments?
    answers:
      - value: To map a query parameter directly to a controller argument, potentially
          with type conversion or validation.
        correct: true
      - value: To map a route parameter to a controller argument.
        correct: false
      - value: To automatically inject a service based on a query parameter.
        correct: false
      - value: To map an uploaded file to a controller argument.
        correct: false
    help: Symfony 6.2+ introduced `Map*` attributes (like `MapQueryParameter`,
      `MapRequestPayload`, `MapUploadedFile`) to simplify the mapping of request
      data directly to controller arguments, often with built-in type conversion
      and validation.
  - question: If you need to perform a redirect to an external URL (e.g.,
      `https://www.google.com`), which `AbstractController` helper method should
      you use?
    answers:
      - value: "`redirectToRoute('external_url')`"
        correct: false
      - value: "`redirect('https://www.google.com')`"
        correct: true
      - value: "`forward('external_controller')`"
        correct: false
      - value: "`$this->redirectExternal('https://www.google.com')`"
        correct: false
    help: The `redirect()` method is used for arbitrary URLs, including external
      ones.
  - question: What is the role of the `Request` object's `attributes` property in
      controller argument resolution?
    answers:
      - value: It stores all HTTP headers from the request.
        correct: false
      - value: It holds the route parameters and other data added by listeners (like
          `_controller`), which are then used by the `ArgumentResolver`.
        correct: true
      - value: It contains the raw request body.
        correct: false
      - value: It stores session data.
        correct: false
    help: The `attributes` property of the `Request` object is a `ParameterBag` that
      stores data derived from the routing process, such as route parameters,
      and other internal data like the `_controller` callable.
  - question: When is the `kernel.request` event dispatched in the Symfony
      HttpKernel lifecycle?
    answers:
      - value: After the controller has been executed.
        correct: false
      - value: After the `Response` has been sent to the client.
        correct: false
      - value: At the very beginning of the request handling process, allowing listeners
          to return a `Response` early or modify the `Request`.
        correct: true
      - value: Only when an exception occurs.
        correct: false
    help: The `kernel.request` event is the first event dispatched by the
      `HttpKernel`, making it a suitable place for early processing, such as
      authentication, routing, or returning a cached response.
  - question: Which PHP version is the minimum requirement for Symfony 7.0?
    answers:
      - value: PHP 7.4
        correct: false
      - value: PHP 8.0
        correct: false
      - value: PHP 8.1
        correct: false
      - value: PHP 8.2
        correct: true
    help: Symfony 7.0 requires PHP 8.2 or higher.
  - question: What is the primary purpose of the `MicroKernelTrait` in Symfony?
    answers:
      - value: To enable full-stack application development with all Symfony bundles.
        correct: false
      - value: To simplify the creation of small, self-contained Symfony applications or
          microservices by providing a minimal kernel setup.
        correct: true
      - value: To automatically generate controllers and routes.
        correct: false
      - value: To integrate with external microservices.
        correct: false
    help: The `MicroKernelTrait` provides a streamlined way to create a Symfony
      kernel for smaller applications, often used for APIs or single-purpose
      services, by reducing boilerplate.
  - question: When is it appropriate to use `#[AsController]` instead of extending
      `AbstractController`?
    answers:
      - value: When you need access to the `render()` and `redirectToRoute()` helper
          methods.
        correct: false
      - value: When you want to explicitly define your controller as a service and
          inject dependencies directly via constructor or action method
          arguments, without relying on `AbstractController`'s helpers.
        correct: true
      - value: When your controller does not require any services.
        correct: false
      - value: When building a console command.
        correct: false
    help: "`#[AsController]` is ideal for controllers where you prefer explicit
      dependency injection and don't need the convenience methods of
      `AbstractController`, or when building a more 'pure' service-based
      architecture."
  - question: What is the correct way to retrieve a specific request header, such as
      'User-Agent', in a Symfony controller?
    answers:
      - value: $request->headers->get('User-Agent');
        correct: true
      - value: $request->getHeader('User-Agent');
        correct: false
      - value: $_SERVER['HTTP_USER_AGENT'];
        correct: false
      - value: $request->attributes->get('User-Agent');
        correct: false
    help: The `Request` object's `headers` property provides a `HeaderBag` instance,
      which has a `get()` method to retrieve header values.
  - question: Which of the following is a valid way to define a route for an
      invokable controller in `routes.yaml`?
    answers:
      - value: |-
          my_route:
              path: /my-path
              controller: App\Controller\MyInvokableController::index
        correct: false
      - value: |-
          my_route:
              path: /my-path
              controller: App\Controller\MyInvokableController
        correct: true
      - value: |-
          my_route:
              path: /my-path
              controller: App\Controller\MyInvokableController::__invoke
        correct: false
      - value: |-
          my_route:
              path: /my-path
              controller: App\Controller\MyInvokableController->invoke()
        correct: false
    help: For invokable controllers, you simply reference the class name in the
      `controller` option, as the `__invoke()` method is implicitly called.
  - question: What is the primary difference between `Request::query` and
      `Request::request` in Symfony?
    answers:
      - value: "`Request::query` holds GET parameters, while `Request::request` holds
          POST parameters."
        correct: true
      - value: "`Request::query` holds route parameters, while `Request::request` holds
          GET parameters."
        correct: false
      - value: "`Request::query` is for URL-encoded data, while `Request::request` is
          for JSON data."
        correct: false
      - value: There is no difference; they are aliases.
        correct: false
    help: "`Request::query` (a `ParameterBag`) provides access to query string
      parameters (GET), while `Request::request` (also a `ParameterBag`)
      provides access to request body parameters (POST)."
  - question: What is the purpose of the `kernel.response` event in Symfony's HttpKernel?
    answers:
      - value: It is dispatched before the controller is executed.
        correct: false
      - value: It is dispatched after the controller has returned a `Response` object,
          allowing listeners to modify the response before it is sent.
        correct: true
      - value: It is dispatched when a new `Response` object is created.
        correct: false
      - value: It is dispatched when a response is received from an external API.
        correct: false
    help: The `kernel.response` event is a crucial point in the lifecycle for
      modifying the `Response` object, such as adding headers, compressing
      content, or setting cookies, before it's sent to the client.
  - question: Which of the following is a valid way to define a route for a
      controller using YAML configuration?
    answers:
      - value: |-
          my_route:
              path: /my-path
              controller: App\Controller\MyController::index
        correct: true
      - value: |-
          my_route:
              route: /my-path
              action: App\Controller\MyController::index
        correct: false
      - value: |-
          my_route:
              url: /my-path
              handler: App\Controller\MyController::index
        correct: false
      - value: |-
          my_route:
              pattern: /my-path
              method: App\Controller\MyController::index
        correct: false
    help: In YAML routing, `path` defines the URL pattern and `controller` specifies
      the controller callable (FQCN::method).
  - question: What is the main advantage of using argument value resolvers in
      Symfony controllers?
    answers:
      - value: They reduce the need for type-hinting in controller methods.
        correct: false
      - value: They allow for cleaner controller code by abstracting away the logic for
          retrieving and converting request data into specific objects or
          values.
        correct: true
      - value: They automatically validate all incoming request data.
        correct: false
      - value: They replace the need for the `Request` object in controllers.
        correct: false
    help: Argument value resolvers streamline controller logic by handling the
      complex task of transforming raw request data (like route parameters,
      query parameters, or request bodies) into the specific objects or scalar
      values that controller methods expect.
  - question: If you need to redirect a user to a different page after a successful
      form submission, what HTTP status code should typically be used for the
      redirect?
    answers:
      - value: 200 OK
        correct: false
      - value: 201 Created
        correct: false
      - value: 302 Found (or 303 See Other)
        correct: true
      - value: 400 Bad Request
        correct: false
    help: The Post/Redirect/Get (PRG) pattern is a common web development design
      pattern that prevents duplicate form submissions and ensures a clean user
      experience. It typically uses a 302 or 303 redirect after a successful
      POST.
  - question: Which of the following is a valid way to generate a URL for a named
      route within a Symfony controller extending `AbstractController`?
    answers:
      - value: $this->generateUrl('app_homepage');
        correct: true
      - value: $this->get('router')->generate('app_homepage');
        correct: true
      - value: $this->url('app_homepage');
        correct: false
      - value: $this->route('app_homepage');
        correct: false
    help: Both the `generateUrl()` helper method from `AbstractController` and
      direct access to the `router` service are valid ways to generate URLs.
  - question: What is the primary function of a 'front controller' in a web
      application architecture?
    answers:
      - value: To serve static assets like CSS and JavaScript.
        correct: false
      - value: To act as a single entry point for all web requests, centralizing request
          handling and dispatching.
        correct: true
      - value: To manage database connections and queries.
        correct: false
      - value: To render HTML templates.
        correct: false
    help: A front controller is a design pattern where a single controller handles
      all requests for a website or web application. This centralizes common
      functionality like routing, security, and bootstrapping.
  - question: "When a controller method is defined as `public function index(int
      $year = 2012): Response`, and the route is `/leap-year/{year?}`, what
      happens if the URL is `/leap-year/2024`?"
    answers:
      - value: "`$year` will be `2012`."
        correct: false
      - value: "`$year` will be `2024`."
        correct: true
      - value: An error will occur because a default value is provided.
        correct: false
      - value: The route will not match.
        correct: false
    help: If a value is provided in the URL for an optional route parameter, that
      value will override the default value defined in the controller method
      signature.
  - question: Which of the following describes a common use case for `forward()` in
      a Symfony controller?
    answers:
      - value: Displaying a login form on every page.
        correct: false
      - value: Embedding a dynamically generated sidebar or widget (e.g., 'latest
          articles') from another controller into a main page's template.
        correct: true
      - value: Sending an email notification.
        correct: false
      - value: Performing a database transaction.
        correct: false
    help: "`forward()` is often used to include content from other controllers,
      effectively creating 'sub-requests' that generate a portion of the overall
      response. This is common for reusable components like sidebars."
  - question: What is the purpose of the `#[MapEntity]` attribute (from
      `Symfony\Bridge\Doctrine\Attribute\MapEntity`)?
    answers:
      - value: To automatically convert a route parameter into a Doctrine entity object.
        correct: true
      - value: To map a form field to a database entity.
        correct: false
      - value: To map an uploaded file to an entity property.
        correct: false
      - value: To define a new database entity.
        correct: false
    help: While not directly in the provided 'Controllers' docs, `#[MapEntity]` is a
      very common argument value resolver used with controllers to automatically
      fetch a Doctrine entity based on a route parameter, simplifying controller
      code.
  - question: When dealing with cookies in Symfony, what is the recommended way to
      add a new cookie to the response?
    answers:
      - value: Use `setcookie()` PHP function directly.
        correct: false
      - value: Create a `Cookie` object and add it to the `Response` object's headers
          via `$response->headers->setCookie($cookie);`.
        correct: true
      - value: Call `$this->addCookie('name', 'value');` in `AbstractController`.
        correct: false
      - value: Modify the `$_COOKIE` superglobal.
        correct: false
    help: The `Response` object provides a clean, object-oriented way to manage HTTP
      headers, including setting cookies, through its `headers` property.
  - question: Which of the following is true about the `Request` object in Symfony?
    answers:
      - value: It is a global variable that can be accessed anywhere.
        correct: false
      - value: It is an object-oriented representation of the HTTP request, providing
          access to headers, parameters, and content.
        correct: true
      - value: It is only available in controller constructors.
        correct: false
      - value: It is automatically persisted across multiple user sessions.
        correct: false
    help: The `Request` object (an instance of
      `Symfony\Component\HttpFoundation\Request`) encapsulates all information
      about the current HTTP request in an object-oriented manner, replacing
      direct access to superglobals like `$_GET`, `$_POST`, `$_SERVER`.
