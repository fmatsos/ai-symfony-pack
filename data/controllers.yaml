category: Controllers

questions:
  -
    question: >
      Which of the following is the standard naming convention for a controller class in Symfony?
    answers:
      - { value: "CamelCase ending with 'Controller', e.g., `ProductController`.", correct: true }
      - { value: "snake_case ending with '_controller', e.g., `product_controller`.", correct: false }
      - { value: "kebab-case ending with '-controller', e.g., `product-controller`.", correct: false }
      - { value: "Any valid PHP class name, as long as it's registered.", correct: false }
    help: |
      Symfony recommends naming controller classes with CamelCase and appending "Controller" to the name.
      https://symfony.com/doc/current/controller.html#controller-naming-conventions

  -
    question: |
      Consider the following Symfony controller method:

      ```php
      namespace App\Controller;

      use Symfony\Component\HttpFoundation\Response;
      use Symfony\Component\Routing\Attribute\Route;

      class ArticleController
      {
          #[Route('/articles/{slug}', name: 'app_article_show')]
          public function show(string $slug): Response
          {
              // ...
          }
      }
      ```

      What is the conventional name for the `show` method in a Symfony controller?
    answers:
      - { value: "An 'action' suffix, e.g., `showAction`.", correct: false }
      - { value: "Any valid PHP method name, as long as it's public.", correct: true }
      - { value: "A prefix matching the route name, e.g., `appArticleShow`.", correct: false }
      - { value: "It must be `index` if it's the primary action for the route.", correct: false }
    help: |
      While older Symfony versions used an `Action` suffix, it's no longer required or recommended. Any public method can serve as a controller action.
      https://symfony.com/doc/current/controller.html#controller-naming-conventions

  -
    question: >
      What is an "invokable controller" in Symfony?
    answers:
      - { value: "A controller that can be called directly from the command line.", correct: false }
      - { value: "A controller class that implements the `__invoke()` magic method to handle requests.", correct: true }
      - { value: "A controller that is automatically invoked by an event listener.", correct: false }
      - { value: "A controller whose methods are all static.", correct: false }
    help: |
      An invokable controller is a class that defines the `__invoke()` method, allowing the class instance itself to be called as a function. This is useful for single-action controllers.
      https://symfony.com/doc/current/controller/service.html#invokable-controllers

  -
    question: >
      Which attribute automatically registers a controller as a service in Symfony 6.2+?
    answers:
      - { value: "`#[Service]`", correct: false }
      - { value: "`#[AsController]`", correct: true }
      - { value: "`#[Injectable]`", correct: false }
      - { value: "`#[ControllerService]`", correct: false }
    help: |
      The `#[AsController]` attribute, introduced in Symfony 6.2, automatically registers a controller as a service, making it eligible for autowiring.
      https://symfony.com/doc/current/controller/service.html#registering-controllers-as-services

  -
    question: >
      What is the primary benefit of extending `Symfony\Bundle\FrameworkBundle\Controller\AbstractController` for your controllers?
    answers:
      - { value: "It automatically makes all controller methods public.", correct: false }
      - { value: "It provides convenient helper methods for common controller tasks like rendering templates, generating URLs, and handling redirects.", correct: true }
      - { value: "It enables automatic routing for all public methods in the controller.", correct: false }
      - { value: "It makes the controller a singleton service by default.", correct: false }
    help: |
      `AbstractController` is an optional base class that provides shortcuts to commonly used services and methods, simplifying controller code.
      https://symfony.com/doc/current/controller.html#base-controller-class

  -
    question: |
      Which `AbstractController` method should you use to render a Twig template and return a `Response` object?
    answers:
      - { value: "`renderTemplate('template.html.twig', [])`", correct: false }
      - { value: "`display('template.html.twig', [])`", correct: false }
      - { value: "`render('template.html.twig', ['data' => $value])`", correct: true }
      - { value: "`twig->render('template.html.twig', [])`", correct: false }
    help: |
      The `render()` method is the standard way to render a Twig template from within a Symfony controller that extends `AbstractController`.
      https://symfony.com/doc/current/controller.html#rendering-templates

  -
    question: >
      How can you generate a URL for a named route from within a controller extending `AbstractController`?
    answers:
      - { value: "`$this->getUrl('app_product_show', ['id' => 1])`", correct: false }
      - { value: "`$this->generateRoute('app_product_show', ['id' => 1])`", correct: false }
      - { value: "`$this->generateUrl('app_product_show', ['id' => 1])`", correct: true }
      - { value: "`$this->router->generate('app_product_show', ['id' => 1])`", correct: false }
    help: |
      The `generateUrl()` helper method, available in `AbstractController`, is used to generate a URL for a given route name and parameters.
      https://symfony.com/doc/current/controller.html#generating-urls

  -
    question: >
      Which `AbstractController` method is used to redirect the user to another named route?
    answers:
      - { value: "`$this->redirect('app_homepage')`", correct: false }
      - { value: "`$this->redirectToRoute('app_homepage')`", correct: true }
      - { value: "`$this->forwardToRoute('app_homepage')`", correct: false }
      - { value: "`$this->routeRedirect('app_homepage')`", correct: false }
    help: |
      `redirectToRoute()` is a convenient helper method to create a `RedirectResponse` to a specific named route.
      https://symfony.com/doc/current/controller.html#redirecting

  -
    question: >
      When should you use `$this->redirect('/some/path')` instead of `$this->redirectToRoute('some_route')`?
    answers:
      - { value: "When you want to redirect to an external URL or a path not managed by Symfony's router.", correct: true }
      - { value: "When you need to perform an internal sub-request.", correct: false }
      - { value: "When the target route has no parameters.", correct: false }
      - { value: "When you want to force a 301 Permanent Redirect.", correct: false }
    help: |
      `redirect()` is used for arbitrary URLs (internal or external), while `redirectToRoute()` is for named Symfony routes.
      https://symfony.com/doc/current/controller.html#redirecting

  -
    question: >
      How do you access query parameters (e.g., `?page=2`) from the `Request` object in a Symfony controller?
    answers:
      - { value: "`$request->get('page')`", correct: false }
      - { value: "`$request->query->get('page')`", correct: true }
      - { value: "`$request->attributes->get('page')`", correct: false }
      - { value: "`$request->request->get('page')`", correct: false }
    help: |
      Query parameters are accessed via the `query` property of the `Request` object, which is an instance of `ParameterBag`.
      https://symfony.com/doc/current/controller.html#accessing-the-request

  -
    question: |
      Given the following controller method:

      ```php
      use Symfony\Component\HttpFoundation\Request;
      use Symfony\Component\HttpFoundation\Response;
      use Symfony\Component\Routing\Attribute\Route;

      class MyController
      {
          #[Route('/api/data', methods: ['POST'])]
          public function saveData(Request $request): Response
          {
              $data = $request->getContent();
              // ...
              return new Response('Data received');
          }
      }
      ```

      What does `$request->getContent()` typically return for a `POST` request with `Content-Type: application/json`?
    answers:
      - { value: "An array of decoded JSON data.", correct: false }
      - { value: "A string containing the raw request body (e.g., JSON string).", correct: true }
      - { value: "An empty string, as JSON data is handled by `$request->request`.", correct: false }
      - { value: "A `StreamInterface` object for reading the body.", correct: false }
    help: |
      `$request->getContent()` returns the raw request body as a string. For JSON data, you would typically decode it using `json_decode()`.
      https://symfony.com/doc/current/controller.html#accessing-the-request

  -
    question: >
      How can you access HTTP headers sent with the request in a Symfony controller?
    answers:
      - { value: "`$request->headers->get('User-Agent')`", correct: true }
      - { value: "`$request->getHeaders()['User-Agent']`", correct: false }
      - { value: "`$request->server->get('HTTP_USER_AGENT')`", correct: false }
      - { value: "`$request->attributes->get('User-Agent')`", correct: false }
    help: |
      HTTP headers are available through the `headers` property of the `Request` object.
      https://symfony.com/doc/current/controller.html#accessing-the-request

  -
    question: >
      Which of the following is the correct way to type-hint the `Request` object in a controller action method for autowiring?
    answers:
      - { value: "`public function index(Request $request)`", correct: true }
      - { value: "`public function index(Symfony\Component\HttpFoundation\Request $request)`", correct: true }
      - { value: "`public function index(HttpRequest $request)`", correct: false }
      - { value: "`public function index($request)`", correct: false }
    help: |
      The `Request` object from `Symfony\Component\HttpFoundation` can be type-hinted directly in the controller method signature, and Symfony's argument resolver will inject it.
      https://symfony.com/doc/current/controller.html#accessing-the-request

  -
    question: >
      What is the primary class that all Symfony controllers must return an instance of, or one of its subclasses?
    answers:
      - { value: "`Symfony\Component\HttpFoundation\Request`", correct: false }
      - { value: "`Symfony\Component\HttpFoundation\Response`", correct: true }
      - { value: "`Symfony\Component\HttpKernel\Kernel`", correct: false }
      - { value: "`Symfony\Component\Routing\Route`", correct: false }
    help: |
      A controller's sole purpose is to return a `Response` object, which represents the HTTP response that will be sent back to the client.
      https://symfony.com/doc/current/controller.html#returning-a-response

  -
    question: |
      How do you set the HTTP status code of a `Response` object in Symfony?
    answers:
      - { value: "`$response->setStatusCode(200)`", correct: true }
      - { value: "`$response->status = 200`", correct: false }
      - { value: "`$response->headers->set('Status', '200 OK')`", correct: false }
      - { value: "`$response->code(200)`", correct: false }
    help: |
      The `setStatusCode()` method of the `Response` object is used to set the HTTP status code.
      https://symfony.com/doc/current/components/http_foundation.html#response-status-code

  -
    question: >
      Which `Response` subclass is specifically designed for returning JSON data?
    answers:
      - { value: "`HtmlResponse`", correct: false }
      - { value: "`XmlResponse`", correct: false }
      - { value: "`JsonResponse`", correct: true }
      - { value: "`ApiSuccessResponse`", correct: false }
    help: |
      `JsonResponse` automatically sets the `Content-Type` header to `application/json` and encodes the provided data into JSON format.
      https://symfony.com/doc/current/components/http_foundation.html#json-response

  -
    question: >
      To force a file download from a controller, which `Response` subclass is most appropriate?
    answers:
      - { value: "`FileResponse`", correct: false }
      - { value: "`StreamedResponse`", correct: false }
      - { value: "`BinaryFileResponse`", correct: true }
      - { value: "`DownloadResponse`", correct: false }
    help: |
      `BinaryFileResponse` is optimized for serving static files and can handle `Content-Disposition` headers for downloads.
      https://symfony.com/doc/current/components/http_foundation.html#serving-files

  -
    question: |
      You want to send a cookie from your controller. Which method of the `Response` object's headers should you use?
    answers:
      - { value: "`$response->headers->setCookie(new Cookie('name', 'value'))`", correct: true }
      - { value: "`$response->setCookie('name', 'value')`", correct: false }
      - { value: "`$response->cookies->add('name', 'value')`", correct: false }
      - { value: "`$response->addHeader('Set-Cookie', 'name=value')`", correct: false }
    help: |
      The `setCookie()` method on the `Response` object's `headers` property is used to add a `Cookie` object to the response.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-cookies

  -
    question: >
      How do you retrieve a cookie named 'my_cookie' from the `Request` object in a controller?
    answers:
      - { value: "`$request->getCookie('my_cookie')`", correct: false }
      - { value: "`$request->cookies->get('my_cookie')`", correct: true }
      - { value: "`$request->headers->get('Cookie')['my_cookie']`", correct: false }
      - { value: "`$request->query->get('my_cookie')`", correct: false }
    help: |
      Cookies sent with the request are accessed via the `cookies` property of the `Request` object.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-cookies

  -
    question: >
      To expire a cookie named 'session_id' immediately, what is the most straightforward approach?
    answers:
      - { value: "Set its value to null.", correct: false }
      - { value: "Set its expiration time to a past date.", correct: true }
      - { value: "Call `$response->headers->removeCookie('session_id')`.", correct: false }
      - { value: "Set its `max_age` to 0.", correct: false }
    help: |
      To expire a cookie, you typically set its expiration time to a date in the past when creating a new `Cookie` object.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-cookies (Implicitly covered by setting expiration)

  -
    question: >
      How do you access the session from within a controller that extends `AbstractController`?
    answers:
      - { value: "`$this->getSession()`", correct: false }
      - { value: "`$this->get('session')`", correct: false }
      - { value: "`$request->getSession()` or by type-hinting `SessionInterface`.", correct: true }
      - { value: "`$this->container->get('session')`", correct: false }
    help: |
      You can get the session from the `Request` object using `$request->getSession()` or by type-hinting `SessionInterface` in your controller method.
      https://symfony.com/doc/current/controller.html#accessing-the-session

  -
    question: >
      To store a value 'username' with 'john_doe' in the session, which method should you use?
    answers:
      - { value: "`$session->set('username', 'john_doe')`", correct: true }
      - { value: "`$session->add('username', 'john_doe')`", correct: false }
      - { value: "`$session->attributes->set('username', 'john_doe')`", correct: false }
      - { value: "`$session['username'] = 'john_doe'`", correct: false }
    help: |
      The `set()` method of the `SessionInterface` is used to store attributes in the session.
      https://symfony.com/doc/current/components/http_foundation.html#session-attributes

  -
    question: >
      Which method is used to remove a specific attribute (e.g., 'cart_id') from the session?
    answers:
      - { value: "`$session->delete('cart_id')`", correct: false }
      - { value: "`$session->remove('cart_id')`", correct: true }
      - { value: "`$session->unset('cart_id')`", correct: false }
      - { value: "`$session->clear('cart_id')`", correct: false }
    help: |
      The `remove()` method of the `SessionInterface` is used to delete a specific attribute from the session.
      https://symfony.com/doc/current/components/http_foundation.html#session-attributes

  -
    question: >
      What is the purpose of invalidating a session in Symfony?
    answers:
      - { value: "To clear all flash messages.", correct: false }
      - { value: "To delete all session data and regenerate the session ID, typically for security reasons like logout.", correct: true }
      - { value: "To temporarily suspend session handling for the current request.", correct: false }
      - { value: "To prevent the session from being saved to storage.", correct: false }
    help: |
      Invalidating a session (e.g., using `$session->invalidate()`) destroys all session data and generates a new session ID, commonly used during logout.
      https://symfony.com/doc/current/components/http_foundation.html#session-invalidation

  -
    question: >
      How do you add a "success" flash message with the text "Item added successfully!" from a controller extending `AbstractController`?
    answers:
      - { value: "`$this->get('session')->getFlashBag()->add('success', 'Item added successfully!')`", correct: false }
      - { value: "`$this->addFlash('success', 'Item added successfully!')`", correct: true }
      - { value: "`$this->session->flash('success', 'Item added successfully!')`", correct: false }
      - { value: "`$this->flash('success', 'Item added successfully!')`", correct: false }
    help: |
      The `addFlash()` helper method is the recommended way to add flash messages.
      https://symfony.com/doc/current/controller.html#flash-messages

  -
    question: >
      In a Twig template, how would you retrieve all flash messages of type 'warning'?
    answers:
      - { value: "`app.session.flashbag.get('warning')`", correct: true }
      - { value: "`app.flashes('warning')`", correct: true }
      - { value: "`app.session.getFlashes('warning')`", correct: false }
      - { value: "`flash_messages('warning')`", correct: false }
    help: |
      Both `app.session.flashbag.get('warning')` and `app.flashes('warning')` are valid ways to retrieve flash messages in Twig.
      https://symfony.com/doc/current/controller.html#flash-messages

  -
    question: >
      What is the default HTTP status code for a redirect generated by `redirectToRoute()` or `redirect()`?
    answers:
      - { value: "200 OK", correct: false }
      - { value: "301 Moved Permanently", correct: false }
      - { value: "302 Found", correct: true }
      - { value: "303 See Other", correct: false }
    help: |
      The default status code for redirects in Symfony is 302 Found, indicating a temporary redirect.
      https://symfony.com/doc/current/controller.html#redirecting

  -
    question: >
      To perform a 301 Permanent Redirect to a named route, how would you modify the `redirectToRoute()` call?
    answers:
      - { value: "`$this->redirectToRoute('app_old_page', [], 301)`", correct: true }
      - { value: "`$this->redirectToRoute('app_old_page', ['status' => 301])`", correct: false }
      - { value: "`$this->redirectPermanentlyToRoute('app_old_page')`", correct: false }
      - { value: "`$this->redirectToRoute('app_old_page')->setStatusCode(301)`", correct: false }
    help: |
      The `redirectToRoute()` method accepts an optional third argument for the HTTP status code.
      https://symfony.com/doc/current/controller.html#redirecting

  -
    question: >
      What is the primary difference between an HTTP redirect and an internal redirect (forwarding) in Symfony?
    answers:
      - { value: "HTTP redirect sends a new HTTP request to the browser; internal redirect handles the request internally without a browser roundtrip.", correct: true }
      - { value: "HTTP redirect is faster; internal redirect is slower.", correct: false }
      - { value: "HTTP redirect is for external URLs; internal redirect is for internal routes only.", correct: false }
      - { value: "HTTP redirect changes the URL in the browser; internal redirect does not.", correct: true }
    help: |
      An HTTP redirect sends a 3xx response to the client, causing the browser to make a new request. Internal forwarding handles the request within the application without a client-side redirect, preserving the original URL.
      https://symfony.com/doc/current/controller/forwarding.html

  -
    question: |
      When would you typically use the `forward()` method in a Symfony controller?
    answers:
      - { value: "To send the user to a different website.", correct: false }
      - { value: "To include content from another controller action into the current response without an HTTP redirect.", correct: true }
      - { value: "To process a form submission and then redirect to a success page.", correct: false }
      - { value: "To handle an AJAX request asynchronously.", correct: false }
    help: |
      The `forward()` method is used to make an internal sub-request to another controller, allowing you to reuse controller logic and embed content.
      https://symfony.com/doc/current/controller/forwarding.html

  -
    question: >
      Which `AbstractController` method should you use to throw a `NotFoundHttpException` (resulting in a 404 Not Found response)?
    answers:
      - { value: "`$this->throw404()`", correct: false }
      - { value: "`$this->createNotFoundException('Resource not found.')`", correct: true }
      - { value: "`$this->notFound('Resource not found.')`", correct: false }
      - { value: "`throw new NotFoundException('Resource not found.')`", correct: false }
    help: |
      The `createNotFoundException()` helper method creates and throws a `NotFoundHttpException`, which Symfony's exception listener converts into a 404 response.
      https://symfony.com/doc/current/controller.html#creating-a-404-page

  -
    question: >
      After throwing a `NotFoundHttpException`, what does Symfony typically do to render the 404 page?
    answers:
      - { value: "It automatically redirects to a predefined '/404' route.", correct: false }
      - { value: "It renders a default 404 template or a custom one defined in `templates/bundles/TwigBundle/Exception/error404.html.twig`.", correct: true }
      - { value: "It returns an empty response with a 404 status code.", correct: false }
      - { value: "It logs the error and continues processing the request.", correct: false }
    help: |
      Symfony's exception handling mechanism catches the `NotFoundHttpException` and renders an appropriate error template, often `error404.html.twig`.
      https://symfony.com/doc/current/controller.html#creating-a-404-page

  -
    question: >
      Which class represents an uploaded file in Symfony's `Request` object?
    answers:
      - { value: "`File`", correct: false }
      - { value: "`UploadedFile`", correct: true }
      - { value: "`HttpRequestFile`", correct: false }
      - { value: "`FormFile`", correct: false }
    help: |
      `Symfony\Component\HttpFoundation\File\UploadedFile` is the class used to represent files uploaded via HTTP.
      https://symfony.com/doc/current/controller.html#uploading-files

  -
    question: |
      Given the following controller action:

      ```php
      use Symfony\Component\HttpFoundation\File\UploadedFile;
      use Symfony\Component\HttpFoundation\Response;
      use Symfony\Component\HttpKernel\Attribute\MapUploadedFile;
      use Symfony\Component\Routing\Attribute\Route;

      class ProfileController extends AbstractController
      {
          #[Route('/profile/avatar', methods: ['POST'])]
          public function uploadAvatar(
              #[MapUploadedFile('avatar_file')] UploadedFile $file
          ): Response {
              // ... process $file
              return new Response('Avatar uploaded.');
          }
      }
      ```

      What is the purpose of `#[MapUploadedFile('avatar_file')]`?
    answers:
      - { value: "It validates that the uploaded file is an image.", correct: false }
      - { value: "It automatically maps the uploaded file with the form field name 'avatar_file' to the `$file` argument.", correct: true }
      - { value: "It moves the uploaded file to a temporary directory.", correct: false }
      - { value: "It specifies the maximum allowed file size for the upload.", correct: false }
    help: |
      The `#[MapUploadedFile]` attribute is an argument value resolver that automatically injects an `UploadedFile` object into the controller argument, mapping it from the request's uploaded files based on the specified name.
      https://symfony.com/doc/current/controller.html#uploading-files

  -
    question: >
      After an `UploadedFile` is received in a controller, what method is commonly used to permanently store it?
    answers:
      - { value: "`$uploadedFile->save('/path/to/directory')`", correct: false }
      - { value: "`$uploadedFile->moveTo('/path/to/directory/filename.ext')`", correct: true }
      - { value: "`$uploadedFile->store('/path/to/directory')`", correct: false }
      - { value: "`$uploadedFile->persist('/path/to/directory')`", correct: false }
    help: |
      The `moveTo()` method of the `UploadedFile` object is used to move the uploaded file from its temporary location to a permanent destination.
      https://symfony.com/doc/current/controller.html#uploading-files

  -
    question: |
      In a Twig template, you want to embed the output of a Symfony controller action. Which Twig function allows you to do this by referencing a route?
    answers:
      - { value: "`{{ include(path('app_sidebar_widget')) }}`", correct: false }
      - { value: "`{{ render(path('app_sidebar_widget')) }}`", correct: true }
      - { value: "`{{ embed(route('app_sidebar_widget')) }}`", correct: false }
      - { value: "`{{ controller('app_sidebar_widget') }}`", correct: false }
    help: |
      The `render()` Twig function, combined with `path()`, allows you to embed the output of a controller action associated with a route.
      https://symfony.com/doc/current/templates.html#embedding-controllers

  -
    question: |
      Which Twig function allows you to embed the output of a Symfony controller by directly referencing its service ID or class::method?
    answers:
      - { value: "`{{ render(controller('App\\Controller\\WidgetController::latestItems', {limit: 5})) }}`", correct: true }
      - { value: "`{{ include_controller('App\\Controller\\WidgetController::latestItems') }}`", correct: false }
      - { value: "`{{ call_controller('App\\Controller\\WidgetController::latestItems') }}`", correct: false }
      - { value: "`{{ embed_service('App\\Controller\\WidgetController::latestItems') }}`", correct: false }
    help: |
      The `controller()` Twig function is used to create a `ControllerReference` which can then be rendered by the `render()` function, allowing direct embedding of controller output.
      https://symfony.com/doc/current/templates.html#embedding-controllers

  -
    question: >
      What is the primary role of Symfony's Argument Value Resolvers?
    answers:
      - { value: "To convert controller return values into `Response` objects.", correct: false }
      - { value: "To automatically determine and inject the correct values for controller method arguments.", correct: true }
      - { value: "To validate incoming request data against defined constraints.", correct: false }
      - { value: "To map URL parameters to route names.", correct: false }
    help: |
      Argument value resolvers are responsible for populating the arguments of a controller method based on the `Request` object and other available services.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html

  -
    question: |
      Consider the following controller method:

      ```php
      use Symfony\Component\Routing\Attribute\Route;
      use Symfony\Component\HttpFoundation\Response;

      class ProductController
      {
          #[Route('/products/{id<\d+>}', name: 'app_product_show')]
          public function show(int $id): Response
          {
              // ...
          }
      }
      ```

      How does Symfony automatically inject the `$id` value into the `show` method?
    answers:
      - { value: "It uses reflection to guess the value based on the type-hint.", correct: false }
      - { value: "The `ArgumentResolver` matches the argument name `$id` with the route parameter `{id}`.", correct: true }
      - { value: "It's a special case for integer parameters.", correct: false }
      - { value: "The `Request` object's `query` bag is checked for an 'id' parameter.", correct: false }
    help: |
      Symfony's `ArgumentResolver` automatically resolves route parameters by matching the argument name in the controller method to the parameter name in the route definition.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#built-in-argument-value-resolvers

  -
    question: >
      Which attribute can be used to automatically map a query parameter (e.g., `?limit=10`) to a controller argument?
    answers:
      - { value: "`#[MapQuery]`", correct: false }
      - { value: "`#[MapQueryParameter]`", correct: true }
      - { value: "`#[QueryParam]`", correct: false }
      - { value: "`#[RequestQuery]`", correct: false }
    help: |
      The `#[MapQueryParameter]` attribute allows you to directly map a query string parameter to a controller argument.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#mapping-query-parameters

  -
    question: >
      To automatically convert a route parameter (e.g., `{post}`) into a `Post` entity object, which attribute would you use?
    answers:
      - { value: "`#[MapObject]`", correct: false }
      - { value: "`#[MapEntity]`", correct: true }
      - { value: "`#[ConvertEntity]`", correct: false }
      - { value: "`#[Entity]`", correct: false }
    help: |
      The `#[MapEntity]` attribute (from DoctrineBridge) is a powerful argument value resolver that automatically fetches an entity from the database based on a route parameter.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#mapping-entities

  -
    question: >
      When creating a custom argument value resolver, which interface must it implement?
    answers:
      - { value: "`ArgumentResolverInterface`", correct: false }
      - { value: "`ValueResolverInterface`", correct: true }
      - { value: "`ControllerArgumentInterface`", correct: false }
      - { value: "`RequestArgumentResolverInterface`", correct: false }
    help: |
      Custom argument value resolvers must implement `Symfony\Component\HttpKernel\Controller\ValueResolverInterface`.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#creating-a-custom-argument-value-resolver

  -
    question: >
      What is the purpose of the `supports()` method in a custom argument value resolver?
    answers:
      - { value: "To determine if the resolver should be executed for the current request.", correct: false }
      - { value: "To check if the controller argument's type is supported by the resolver.", correct: true }
      - { value: "To validate the incoming request data.", correct: false }
      - { value: "To define the priority of the resolver.", correct: false }
    help: |
      The `supports()` method determines if the resolver can provide a value for a given controller argument.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#creating-a-custom-argument-value-resolver

  -
    question: >
      Which of the following is NOT a built-in argument value resolver in Symfony?
    answers:
      - { value: "Request object resolver", correct: false }
      - { value: "Route parameter resolver", correct: false }
      - { value: "Service resolver (for autowired services)", correct: false }
      - { value: "Database connection resolver", correct: true }
    help: |
      Symfony provides resolvers for common types like `Request`, route parameters, and autowired services. Database connections are typically injected as services, not directly resolved as arguments.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#built-in-argument-value-resolvers

  -
    question: >
      How can you access a service (e.g., `LoggerInterface`) directly in a controller action method without manually fetching it from the container, assuming autowiring is enabled?
    answers:
      - { value: "By type-hinting the service interface or class in the method signature.", correct: true }
      - { value: "By using `$this->get('logger')`.", correct: false }
      - { value: "By defining it in `services.yaml` as an argument to the controller.", correct: false }
      - { value: "By calling `#[Inject('logger')]` above the method.", correct: false }
    help: |
      With autowiring enabled, Symfony automatically injects services into controller method arguments if they are type-hinted.
      https://symfony.com/doc/current/controller.html#autowiring-action-arguments

  -
    question: >
      What is the purpose of the `kernel.controller` event in Symfony?
    answers:
      - { value: "It is dispatched after the controller has returned a `Response`.", correct: false }
      - { value: "It is dispatched before the controller is executed, allowing listeners to modify the controller or its arguments.", correct: true }
      - { value: "It is dispatched when a controller throws an exception.", correct: false }
      - { value: "It is dispatched after routing, but before the controller is resolved.", correct: false }
    help: |
      The `kernel.controller` event is dispatched after the controller callable has been determined but before its execution, providing an opportunity to interact with or change the controller.
      https://symfony.com/doc/current/components/http_kernel.html#kernel-controller-event

  -
    question: >
      Which method of the `ControllerEvent` object can be used by an event listener to change the controller that will be executed?
    answers:
      - { value: "`$event->setController(callable $controller)`", correct: true }
      - { value: "`$event->replaceController(callable $controller)`", correct: false }
      - { value: "`$event->changeCallable(callable $controller)`", correct: false }
      - { value: "`$event->overrideController(callable $controller)`", correct: false }
    help: |
      The `setController()` method on the `ControllerEvent` allows an event listener to replace the current controller callable.
      https://symfony.com/doc/current/reference/events.html#kernel-controller

  -
    question: >
      When defining a controller in `routes.yaml`, what is the correct syntax for referencing a class-based controller method?
    answers:
      - { value: "`controller: App\\Controller\\MyController::myAction`", correct: true }
      - { value: "`controller: App_Controller_MyController.myAction`", correct: false }
      - { value: "`controller: myAction from App\\Controller\\MyController`", correct: false }
      - { value: "`controller: App:MyController:myAction`", correct: false }
    help: |
      The standard syntax for referencing a controller method in routing configuration is `FQCN::methodName`.
      https://symfony.com/doc/current/controller.html#controller-string-format

  -
    question: >
      What is the purpose of the `#[MapRequestPayload]` attribute?
    answers:
      - { value: "To map query parameters to a DTO.", correct: false }
      - { value: "To map uploaded files to a DTO.", correct: false }
      - { value: "To automatically deserialize the request body (e.g., JSON, XML) into an object and validate it.", correct: true }
      - { value: "To map form data from `$_POST` to a DTO.", correct: false }
    help: |
      `#[MapRequestPayload]` is an argument value resolver that deserializes the request body into a DTO (Data Transfer Object) and can also trigger validation.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#mapping-request-payloads

  -
    question: |
      Which of the following is a valid way to define a route for an invokable controller in `routes.yaml`?
    answers:
      - { value: "`controller: App\\Controller\\MyInvokableController`", correct: true }
      - { value: "`controller: App\\Controller\\MyInvokableController::__invoke`", correct: false }
      - { value: "`controller: App\\Controller\\MyInvokableController::handle`", correct: false }
      - { value: "`controller: App\\Controller\\MyInvokableController.invoke`", correct: false }
    help: |
      For invokable controllers, you simply reference the class name as the controller. Symfony automatically calls the `__invoke()` method.
      https://symfony.com/doc/current/controller/service.html#invokable-controllers

  -
    question: >
      When handling a file upload, where is the `UploadedFile` object initially stored on the server?
    answers:
      - { value: "In the web root directory.", correct: false }
      - { value: "In a temporary directory configured by PHP.", correct: true }
      - { value: "In the `var/uploads` directory of the Symfony project.", correct: false }
      - { value: "Directly in the database.", correct: false }
    help: |
      Uploaded files are first stored in a temporary directory on the server, as managed by PHP's upload process. You must explicitly move them to a permanent location.
      https://symfony.com/doc/current/controller.html#uploading-files

  -
    question: >
      Which of the following is a common practice for organizing controller files in a Symfony application?
    answers:
      - { value: "All controllers in a single `src/Controller/` directory.", correct: true }
      - { value: "Controllers grouped by feature or domain, e.g., `src/Controller/Product/` and `src/Controller/User/`.", correct: true }
      - { value: "Controllers placed directly in the `public/` directory.", correct: false }
      - { value: "Controllers named after HTTP methods, e.g., `GetProductController.php`.", correct: false }
    help: |
      Symfony encourages organizing controllers logically, either all in `src/Controller/` or further subdivided by feature.
      https://symfony.com/doc/current/controller.html#controller-naming-conventions (Implied by common project structure)

  -
    question: >
      What is the purpose of the `RequestStack` service in Symfony?
    answers:
      - { value: "To manage a stack of all incoming HTTP requests.", correct: false }
      - { value: "To provide access to the current `Request` object in services that don't have it injected directly.", correct: true }
      - { value: "To store previous `Response` objects.", correct: false }
      - { value: "To handle multiple concurrent requests.", correct: false }
    help: |
      The `RequestStack` service provides a way to access the current `Request` object, especially useful in services that are not directly part of the request-response cycle.
      https://symfony.com/doc/current/components/http_foundation.html#request-stack

  -
    question: >
      When should you use `StreamedResponse`?
    answers:
      - { value: "When returning a small HTML string.", correct: false }
      - { value: "When you need to send a large amount of data (e.g., a large file or generated content) to the client without loading it all into memory at once.", correct: true }
      - { value: "When sending JSON data.", correct: false }
      - { value: "When performing an HTTP redirect.", correct: false }
    help: |
      `StreamedResponse` allows you to stream content to the client, which is efficient for large responses as it avoids buffering the entire content in memory.
      https://symfony.com/doc/current/components/http_foundation.html#streaming-a-response

  -
    question: >
      How can you retrieve a configuration parameter (e.g., `app.admin_email`) from within a controller extending `AbstractController`?
    answers:
      - { value: "`$this->getParameter('app.admin_email')`", correct: true }
      - { value: "`$this->container->get('parameter_bag')->get('app.admin_email')`", correct: false }
      - { value: "`$this->config->get('app.admin_email')`", correct: false }
      - { value: "`$this->get('kernel')->getContainer()->getParameter('app.admin_email')`", correct: false }
    help: |
      The `getParameter()` helper method in `AbstractController` provides direct access to application parameters.
      https://symfony.com/doc/current/controller.html#accessing-configuration-parameters

  -
    question: >
      What is the purpose of the `#[Cache]` attribute on a controller method?
    answers:
      - { value: "To enable server-side caching for the response.", correct: false }
      - { value: "To configure HTTP caching headers (e.g., `Cache-Control`, `ETag`) for the response.", correct: true }
      - { value: "To store the controller's output in the session.", correct: false }
      - { value: "To mark the controller as cacheable by a CDN.", correct: false }
    help: |
      The `#[Cache]` attribute allows you to configure HTTP caching directives directly on your controller actions.
      https://symfony.com/doc/current/http_cache/attributes.html

  -
    question: >
      Which of the following is true about controller arguments that are not explicitly defined in the route (e.g., services, `Request` object)?
    answers:
      - { value: "They must always be manually injected via the constructor.", correct: false }
      - { value: "Symfony's Argument Value Resolvers attempt to autowire or resolve them based on type-hints.", correct: true }
      - { value: "They are only available if the controller extends `AbstractController`.", correct: false }
      - { value: "They are always null by default.", correct: false }
    help: |
      Symfony's argument value resolvers automatically provide values for controller arguments, including services and the `Request` object, based on type-hints.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html

  -
    question: >
      What happens if a controller method argument is type-hinted with a class that is not a service and cannot be resolved by any argument resolver?
    answers:
      - { value: "Symfony will attempt to create a new instance of the class without arguments.", correct: false }
      - { value: "A `RuntimeException` or `ArgumentResolverException` will be thrown.", correct: true }
      - { value: "The argument will be `null`.", correct: false }
      - { value: "The request will be automatically redirected to a 404 page.", correct: false }
    help: |
      If an argument cannot be resolved, Symfony will throw an exception, indicating that it doesn't know how to provide a value for that argument.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html (Implicitly covered by how resolvers work)

  -
    question: >
      Which method of the `Request` object would you use to get data from a submitted HTML form with `Content-Type: application/x-www-form-urlencoded` or `multipart/form-data`?
    answers:
      - { value: "`$request->query->get('field_name')`", correct: false }
      - { value: "`$request->request->get('field_name')`", correct: true }
      - { value: "`$request->attributes->get('field_name')`", correct: false }
      - { value: "`$request->getContent()`", correct: false }
    help: |
      Form data submitted via POST (with `application/x-www-form-urlencoded` or `multipart/form-data`) is accessed via the `request` property of the `Request` object.
      https://symfony.com/doc/current/controller.html#accessing-the-request

  -
    question: >
      What is the main advantage of using `#[AsController]` over manually tagging controllers as services in `services.yaml`?
    answers:
      - { value: "It makes the controller a singleton by default.", correct: false }
      - { value: "It simplifies configuration and makes controllers automatically discoverable for autowiring.", correct: true }
      - { value: "It improves performance by compiling controllers into bytecode.", correct: false }
      - { value: "It allows controllers to be used as Twig functions.", correct: false }
    help: |
      `#[AsController]` streamlines the process of registering controllers as services, reducing boilerplate configuration.
      https://symfony.com/doc/current/controller/service.html#registering-controllers-as-services

  -
    question: >
      When a controller method has an optional argument with a default value (e.g., `int $page = 1`), how does Symfony's argument resolver handle it if the corresponding route parameter or query parameter is missing?
    answers:
      - { value: "It throws an exception because the parameter is missing.", correct: false }
      - { value: "It injects `null` into the argument.", correct: false }
      - { value: "It uses the default value provided in the method signature.", correct: true }
      - { value: "It redirects to a 404 page.", correct: false }
    help: |
      If an optional argument with a default value is not provided by a route parameter or query parameter, the argument resolver will use the default value defined in the method signature.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#default-values-for-arguments

  -
    question: >
      Which of the following is a valid way to define a controller in `routes.php` using the PHP configurator?
    answers:
      - { value: "`$routes->add('my_route', '/path')->controller('App\\Controller\\MyController::index');`", correct: false }
      - { value: "`$routes->add('my_route', '/path')->controller([MyController::class, 'index']);`", correct: true }
      - { value: "`$routes->add('my_route', '/path')->action('App\\Controller\\MyController::index');`", correct: false }
      - { value: "`$routes->add('my_route', '/path')->handler('App\\Controller\\MyController::index');`", correct: false }
    help: |
      When using the PHP configurator for routes, the controller is typically specified as an array `[ControllerClass::class, 'methodName']`.
      https://symfony.com/doc/current/routing.html#php-routes

  -
    question: >
      What is the purpose of the `Request::getPreferredLanguage()` method?
    answers:
      - { value: "To get the default language configured in `framework.yaml`.", correct: false }
      - { value: "To retrieve the language preferred by the client, based on the `Accept-Language` header.", correct: true }
      - { value: "To set the locale for the current request.", correct: false }
      - { value: "To get the language of the current route.", correct: false }
    help: |
      `getPreferredLanguage()` inspects the `Accept-Language` HTTP header to determine the client's preferred language.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: >
      When creating a `Response` object, what is the default `Content-Type` header if not explicitly set?
    answers:
      - { value: "`text/plain`", correct: false }
      - { value: "`application/json`", correct: false }
      - { value: "`text/html`", correct: true }
      - { value: "No `Content-Type` header is set by default.", correct: false }
    help: |
      By default, a `Response` object assumes HTML content, setting the `Content-Type` to `text/html`.
      https://symfony.com/doc/current/components/http_foundation.html#response-headers

  -
    question: >
      Which of the following is the most secure way to handle user input from the `Request` object in a controller before using it in a database query or displaying it?
    answers:
      - { value: "Directly use `$request->query->get('param')`.", correct: false }
      - { value: "Cast the input to the expected type (e.g., `(int) $request->query->get('id')`).", correct: false }
      - { value: "Validate and sanitize the input using Symfony's Validator component or custom logic.", correct: true }
      - { value: "Assume all input is safe if it comes from a trusted source.", correct: false }
    help: |
      All user input should be validated and sanitized to prevent security vulnerabilities like SQL injection or XSS. Symfony's Validator component is the recommended tool.
      https://symfony.com/doc/current/validation.html

  -
    question: >
      What is the purpose of the `#[MapQueryString]` attribute?
    answers:
      - { value: "To map a single query parameter to a controller argument.", correct: false }
      - { value: "To map the entire query string to a string argument.", correct: false }
      - { value: "To automatically deserialize the entire query string into an object and validate it.", correct: true }
      - { value: "To map query parameters to an array.", correct: false }
    help: |
      `#[MapQueryString]` is an argument value resolver that deserializes the entire query string into a DTO.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#mapping-query-strings

  -
    question: >
      Which of the following best describes the role of a "front controller" in a Symfony application?
    answers:
      - { value: "It's the first controller executed for every request, responsible for bootstrapping the application and dispatching to the appropriate action.", correct: true }
      - { value: "It's a special type of controller used only for AJAX requests.", correct: false }
      - { value: "It's a controller that handles all static file requests.", correct: false }
      - { value: "It's a controller that serves as an entry point for the API.", correct: false }
    help: |
      The front controller (e.g., `public/index.php`) is the single entry point for all web requests, responsible for initializing the Symfony Kernel and handling the request-response lifecycle.
      https://symfony.com/doc/current/create_framework/front_controller.html

  -
    question: >
      What is the primary benefit of using `#[MapEntity]` over manually fetching an entity from the repository in a controller?
    answers:
      - { value: "It makes the code more verbose but explicit.", correct: false }
      - { value: "It automatically handles 404 errors if the entity is not found and simplifies controller logic.", correct: true }
      - { value: "It bypasses the database and fetches entities from cache only.", correct: false }
      - { value: "It allows mapping multiple entities to a single argument.", correct: false }
    help: |
      `#[MapEntity]` simplifies entity retrieval and automatically throws a 404 exception if the entity cannot be found, reducing boilerplate code.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#mapping-entities

  -
    question: >
      Which of the following is true regarding the order of arguments in a Symfony controller method?
    answers:
      - { value: "The `Request` object must always be the first argument.", correct: false }
      - { value: "Route parameters must always come before services.", correct: false }
      - { value: "The order of arguments does not matter, as Symfony's Argument Resolver matches them by name and type-hint.", correct: true }
      - { value: "Arguments must be ordered alphabetically.", correct: false }
    help: |
      Symfony's argument resolver is flexible and can match arguments regardless of their order, as long as they are correctly named or type-hinted.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html

  -
    question: >
      What is the purpose of the `Request::isXmlHttpRequest()` method?
    answers:
      - { value: "To check if the request was sent using the XML-RPC protocol.", correct: false }
      - { value: "To determine if the request is an AJAX request (i.e., sent with the `X-Requested-With: XMLHttpRequest` header).", correct: true }
      - { value: "To validate that the request body contains valid XML.", correct: false }
      - { value: "To check if the request originated from an external domain.", correct: false }
    help: |
      `isXmlHttpRequest()` is a convenient method to check if a request is an AJAX request, based on the `X-Requested-With` header.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: >
      Which of the following is the correct way to set a custom HTTP header (e.g., `X-Custom-Header: Value`) on a `Response` object?
    answers:
      - { value: "`$response->setHeader('X-Custom-Header', 'Value')`", correct: false }
      - { value: "`$response->headers->set('X-Custom-Header', 'Value')`", correct: true }
      - { value: "`$response->addHeader('X-Custom-Header: Value')`", correct: false }
      - { value: "`$response->set('X-Custom-Header', 'Value')`", correct: false }
    help: |
      HTTP headers are managed through the `headers` property of the `Response` object.
      https://symfony.com/doc/current/components/http_foundation.html#response-headers

  -
    question: >
      When should you consider creating a custom argument value resolver?
    answers:
      - { value: "When you need to perform complex logic to convert a request parameter into a specific object for your controller.", correct: true }
      - { value: "When you want to replace Symfony's default argument resolution for all arguments.", correct: false }
      - { value: "When you need to validate form submissions.", correct: false }
      - { value: "When you want to log all incoming request arguments.", correct: false }
    help: |
      Custom argument value resolvers are useful for encapsulating complex argument resolution logic, making controllers cleaner and more focused on business logic.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#creating-a-custom-argument-value-resolver

  -
    question: >
      What is the purpose of the `Request::getPathInfo()` method?
    answers:
      - { value: "To get the full URL including the scheme and host.", correct: false }
      - { value: "To get the path part of the URL, relative to the front controller (e.g., `/products/123`).", correct: true }
      - { value: "To get the query string parameters.", correct: false }
      - { value: "To get the base URL of the application.", correct: false }
    help: |
      `getPathInfo()` returns the path of the request, relative to the front controller, without the query string.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: >
      Which of the following is a valid way to define a controller using PHP attributes?
    answers:
      - { value: |
          ```php
          class MyController
          {
              #[Route('/path', name: 'my_route')]
              public function index(): Response {}
          }
          ```, correct: true }
      - { value: |
          ```php
          #[Controller('/path', name: 'my_route')]
          class MyController
          {
              public function index(): Response {}
          }
          ```, correct: false }
      - { value: |
          ```php
          class MyController
          {
              /**
               * @Route("/path", name="my_route")
               */
              public function index(): Response {}
          }
          ```, correct: false }
      - { value: |
          ```php
          #[Route(path: '/path', name: 'my_route')]
          class MyController
          {
              public function index(): Response {}
          }
          ```, correct: false }
    help: |
      The `#[Route]` attribute is placed directly above the controller method to define its associated route.
      https://symfony.com/doc/current/controller.html#routing-php-attributes

  -
    question: >
      What is the recommended way to handle form submissions in a Symfony controller?
    answers:
      - { value: "Manually access `$_POST` and `$_FILES` global variables.", correct: false }
      - { value: "Use Symfony's Form component to create, handle, and validate forms.", correct: true }
      - { value: "Use `Request::request->all()` to get all POST data and process it.", correct: false }
      - { value: "Send form data directly to a service for processing.", correct: false }
    help: |
      The Symfony Form component provides a robust and secure way to handle form submissions, including data mapping, validation, and rendering.
      https://symfony.com/doc/current/forms.html

  -
    question: >
      Which method of the `Request` object can be used to check if the request method is `POST`?
    answers:
      - { value: "`$request->isPost()`", correct: false }
      - { value: "`$request->getMethod() === 'POST'`", correct: true }
      - { value: "`$request->method() === 'POST'`", correct: false }
      - { value: "`$request->isMethod('POST')`", correct: true }
    help: |
      Both `$request->getMethod() === 'POST'` and `$request->isMethod('POST')` are valid ways to check the request method. `isMethod()` is a convenient helper.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: >
      What is the purpose of the `Request::getLocale()` method?
    answers:
      - { value: "To get the user's preferred language from their browser settings.", correct: false }
      - { value: "To retrieve the locale currently active for the request, often determined by routing or session.", correct: true }
      - { value: "To set the locale for the current request.", correct: false }
      - { value: "To get the default locale of the application.", correct: false }
    help: |
      `getLocale()` returns the locale that is currently being used for the request, which can be derived from the URL, session, or browser settings.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: >
      When building a RESTful API, which `Response` subclass is typically used for successful responses that return data?
    answers:
      - { value: "`Response` with `text/html` content.", correct: false }
      - { value: "`JsonResponse`", correct: true }
      - { value: "`RedirectResponse`", correct: false }
      - { value: "`EmptyResponse`", correct: false }
    help: |
      `JsonResponse` is the standard for returning structured data (like JSON) in RESTful APIs.
      https://symfony.com/doc/current/components/http_foundation.html#json-response

  -
    question: >
      What is the primary responsibility of the `HttpKernel` component in Symfony?
    answers:
      - { value: "To manage database connections.", correct: false }
      - { value: "To handle the entire request-response lifecycle, from receiving a request to sending a response.", correct: true }
      - { value: "To render Twig templates.", correct: false }
      - { value: "To manage user authentication and authorization.", correct: false }
    help: |
      The `HttpKernel` is the core component that orchestrates the request-response flow, including routing, controller execution, and event dispatching.
      https://symfony.com/doc/current/components/http_kernel.html

  -
    question: >
      Which of the following is true about the `Request` object in Symfony?
    answers:
      - { value: "It is a global variable that can be accessed anywhere.", correct: false }
      - { value: "It is an immutable object, meaning its state cannot be changed after creation.", correct: false }
      - { value: "It encapsulates all information about the current HTTP request.", correct: true }
      - { value: "It is automatically persisted across multiple requests for the same user.", correct: false }
    help: |
      The `Request` object is a powerful object that holds all information about the current HTTP request. It is mutable.
      https://symfony.com/doc/current/components/http_foundation.html#the-request-object

  -
    question: >
      What is the purpose of the `Response::sendHeaders()` method?
    answers:
      - { value: "To send the HTTP status line and headers to the client.", correct: true }
      - { value: "To send the response body to the client.", correct: false }
      - { value: "To prepare the headers for sending, but not actually send them.", correct: false }
      - { value: "To clear all previously set headers.", correct: false }
    help: |
      The `sendHeaders()` method is responsible for sending the HTTP status line and all response headers to the client.
      https://symfony.com/doc/current/components/http_foundation.html#sending-the-response

  -
    question: >
      Which of the following is true about the `Response::sendContent()` method?
    answers:
      - { value: "It sends the HTTP headers before the content.", correct: false }
      - { value: "It sends the response body to the client.", correct: true }
      - { value: "It only works for `text/html` content.", correct: false }
      - { value: "It automatically compresses the content.", correct: false }
    help: |
      The `sendContent()` method sends the content (body) of the response to the client.
      https://symfony.com/doc/current/components/http_foundation.html#sending-the-response

  -
    question: >
      What is the primary benefit of using `#[MapRequestPayload]` for API endpoints?
    answers:
      - { value: "It eliminates the need for any validation.", correct: false }
      - { value: "It simplifies handling complex request bodies by automatically deserializing and validating them into structured DTOs.", correct: true }
      - { value: "It automatically converts all request parameters to strings.", correct: false }
      - { value: "It only works for `GET` requests.", correct: false }
    help: |
      `#[MapRequestPayload]` significantly streamlines API development by handling the boilerplate of deserialization and validation for request bodies.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#mapping-request-payloads

  -
    question: >
      How can you obtain the base URL of the current request (e.g., `http://example.com`) from the `Request` object?
    answers:
      - { value: "`$request->getBaseUrl()`", correct: false }
      - { value: "`$request->getUriForPath('/')`", correct: false }
      - { value: "`$request->getSchemeAndHttpHost()`", correct: true }
      - { value: "`$request->getHost()`", correct: false }
    help: |
      `getSchemeAndHttpHost()` returns the scheme (http/https) and the host of the current request.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: >
      What is the purpose of the `Request::isSecure()` method?
    answers:
      - { value: "To check if the user is authenticated.", correct: false }
      - { value: "To determine if the request was made over HTTPS.", correct: true }
      - { value: "To verify the integrity of the request data.", correct: false }
      - { value: "To check if the request originated from a trusted IP address.", correct: false }
    help: |
      `isSecure()` checks if the request was made using a secure protocol (HTTPS).
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: >
      Which of the following is true about the `Response::setPrivate()` and `Response::setPublic()` methods?
    answers:
      - { value: "They control whether the response content is encrypted.", correct: false }
      - { value: "They determine if the response can be cached by shared (public) or private caches.", correct: true }
      - { value: "They set the visibility of the response in the browser's developer tools.", correct: false }
      - { value: "They are used for setting session cookie security flags.", correct: false }
    help: |
      These methods control the `Cache-Control` header's `private` and `public` directives, influencing how proxies and browsers cache the response.
      https://symfony.com/doc/current/components/http_foundation.html#cache-control

  -
    question: >
      What is the purpose of the `Response::setExpires()` method?
    answers:
      - { value: "To set the expiration date of a session.", correct: false }
      - { value: "To set the `Expires` HTTP header, indicating when the response should be considered stale.", correct: true }
      - { value: "To expire all cookies associated with the response.", correct: false }
      - { value: "To set a timeout for the client to receive the response.", correct: false }
    help: |
      `setExpires()` sets the `Expires` HTTP header, which is used for HTTP caching to indicate the date/time after which the response is considered stale.
      https://symfony.com/doc/current/components/http_foundation.html#cache-control

  -
    question: >
      When is the `kernel.response` event dispatched in Symfony?
    answers:
      - { value: "Before the controller is executed.", correct: false }
      - { value: "After the controller has returned a `Response` object, but before it is sent to the client.", correct: true }
      - { value: "When an exception occurs during request processing.", correct: false }
      - { value: "After the response has been sent to the client.", correct: false }
    help: |
      The `kernel.response` event allows listeners to modify the `Response` object before it is sent to the client.
      https://symfony.com/doc/current/components/http_kernel.html#kernel-response-event

  -
    question: >
      Which of the following is a common use case for a `kernel.response` event listener?
    answers:
      - { value: "To perform user authentication.", correct: false }
      - { value: "To add or modify HTTP headers (e.g., CORS headers, security headers) on the response.", correct: true }
      - { value: "To resolve controller arguments.", correct: false }
      - { value: "To render a Twig template.", correct: false }
    help: |
      `kernel.response` listeners are ideal for manipulating the final `Response` object, such as adding headers, compressing content, or logging.
      https://symfony.com/doc/current/components/http_kernel.html#kernel-response-event

  -
    question: >
      What is the purpose of the `Request::getClientIp()` method?
    answers:
      - { value: "To get the IP address of the server.", correct: false }
      - { value: "To retrieve the IP address of the client making the request, considering proxies.", correct: true }
      - { value: "To get the IP address of the database server.", correct: false }
      - { value: "To check if the client's IP is whitelisted.", correct: false }
    help: |
      `getClientIp()` attempts to determine the client's IP address, taking into account `X-Forwarded-For` and other proxy headers if configured.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: >
      Which of the following is the correct way to get the `User-Agent` header from the `Request` object?
    answers:
      - { value: "`$request->headers->get('User-Agent')`", correct: true }
      - { value: "`$request->getUserAgent()`", correct: false }
      - { value: "`$request->server->get('HTTP_USER_AGENT')`", correct: false }
      - { value: "`$request->getHeader('User-Agent')`", correct: false }
    help: |
      Headers are accessed via the `headers` property of the `Request` object.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: >
      What is the main advantage of using `#[MapQueryParameter]` over manually getting query parameters from `$request->query->get()`?
    answers:
      - { value: "It's faster.", correct: false }
      - { value: "It allows for type-hinting, default values, and automatic validation for query parameters, leading to cleaner controller code.", correct: true }
      - { value: "It automatically encrypts the query parameters.", correct: false }
      - { value: "It works only for `GET` requests.", correct: false }
    help: |
      `#[MapQueryParameter]` provides a declarative way to handle query parameters, integrating them seamlessly with argument resolution and validation.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#mapping-query-parameters

  -
    question: >
      What is the purpose of the `Response::setLastModified()` method?
    answers:
      - { value: "To set the date when the response was last sent.", correct: false }
      - { value: "To set the `Last-Modified` HTTP header, indicating the last modification date of the resource.", correct: true }
      - { value: "To set the date when the controller was last modified.", correct: false }
      - { value: "To set the expiry date for the response.", correct: false }
    help: |
      `setLastModified()` sets the `Last-Modified` HTTP header, which is crucial for HTTP caching mechanisms like conditional GET requests.
      https://symfony.com/doc/current/components/http_foundation.html#cache-control

  -
    question: >
      Which of the following is true about the `Response::setEtag()` method?
    answers:
      - { value: "It sets a unique identifier for the response content, used for conditional requests.", correct: true }
      - { value: "It encrypts the response body.", correct: false }
      - { value: "It sets the expiration time for the response.", correct: false }
      - { value: "It is used only for `JsonResponse` objects.", correct: false }
    help: |
      `setEtag()` sets the `ETag` HTTP header, a unique identifier for a specific version of a resource, used for efficient caching.
      https://symfony.com/doc/current/components/http_foundation.html#cache-control

  -
    question: >
      What is the purpose of the `Response::setVary()` method?
    answers:
      - { value: "To specify which request headers should be considered when caching the response.", correct: true }
      - { value: "To vary the response content based on the client's browser.", correct: false }
      - { value: "To set the HTTP version of the response.", correct: false }
      - { value: "To indicate that the response content will vary randomly.", correct: false }
    help: |
      `setVary()` sets the `Vary` HTTP header, informing caches that the response content varies depending on the specified request headers.
      https://symfony.com/doc/current/components/http_foundation.html#cache-control

  -
    question: >
      When handling a `PUT` or `PATCH` request with a JSON body, which `Request` property is typically used to access the raw content?
    answers:
      - { value: "`$request->request`", correct: false }
      - { value: "`$request->query`", correct: false }
      - { value: "`$request->getContent()`", correct: true }
      - { value: "`$request->attributes`", correct: false }
    help: |
      For `PUT` or `PATCH` requests, especially with JSON or XML bodies, the raw content is accessed via `getContent()`.
      https://symfony.com/doc/current/controller.html#accessing-the-request

  -
    question: >
      Which of the following is the correct way to check if a session has been started for the current request?
    answers:
      - { value: "`$request->hasSession()`", correct: true }
      - { value: "`$request->getSession()->isStarted()`", correct: true }
      - { value: "`$request->sessionExists()`", correct: false }
      - { value: "`$request->getSession() !== null`", correct: false }
    help: |
      Both `hasSession()` on the `Request` object and `isStarted()` on the `SessionInterface` object are valid ways to check if a session is active.
      https://symfony.com/doc/current/components/http_foundation.html#session-management

  -
    question: >
      What is the purpose of the `Request::getUri()` method?
    answers:
      - { value: "To get the path part of the URL only.", correct: false }
      - { value: "To get the full URI of the current request, including scheme, host, path, and query string.", correct: true }
      - { value: "To get the URI of the previous request.", correct: false }
      - { value: "To get the URI of the current route.", correct: false }
    help: |
      `getUri()` returns the complete URI of the current request.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: >
      Which of the following is true about the `Response::setCache()` method?
    answers:
      - { value: "It directly sets the HTTP `Cache-Control` header.", correct: true }
      - { value: "It configures server-side caching for the response.", correct: false }
      - { value: "It only works for responses that are not private.", correct: false }
      - { value: "It is used to clear the cache for the current response.", correct: false }
    help: |
      `setCache()` is a convenient method to configure various HTTP caching directives (like `public`, `max-age`, `s-maxage`) on the `Cache-Control` header.
      https://symfony.com/doc/current/components/http_foundation.html#cache-control

  -
    question: >
      What is the purpose of the `Request::getUser()` method?
    answers:
      - { value: "To get the username from the session.", correct: false }
      - { value: "To retrieve the current authenticated user object (if any) from the security context.", correct: true }
      - { value: "To get the user's IP address.", correct: false }
      - { value: "To get the user's browser information.", correct: false }
    help: |
      `getUser()` (when the Security component is enabled) provides access to the currently authenticated user object.
      https://symfony.com/doc/current/security.html#accessing-the-user-object

  -
    question: >
      When should you use `Response::setPublic()`?
    answers:
      - { value: "When the response content is sensitive and should not be cached by shared caches.", correct: false }
      - { value: "When the response can be cached by any cache (shared or private).", correct: true }
      - { value: "When the response should only be cached by the client's browser.", correct: false }
      - { value: "When you want to disable all caching for the response.", correct: false }
    help: |
      `setPublic()` sets the `Cache-Control: public` directive, allowing the response to be cached by shared caches (e.g., proxies, CDNs).
      https://symfony.com/doc/current/components/http_foundation.html#cache-control

  -
    question: >
      What is the purpose of the `Response::setPrivate()` method?
    answers:
      - { value: "To indicate that the response should only be cached by a private cache (e.g., the user's browser).", correct: true }
      - { value: "To make the response content encrypted.", correct: false }
      - { value: "To prevent the response from being logged.", correct: false }
      - { value: "To make the response accessible only to authenticated users.", correct: false }
    help: |
      `setPrivate()` sets the `Cache-Control: private` directive, indicating that the response should only be cached by a private cache.
      https://symfony.com/doc/current/components/http_foundation.html#cache-control

  -
    question: >
      Which of the following is true about the `Response::setMaxAge()` method?
    answers:
      - { value: "It sets the `max-age` directive in the `Cache-Control` header, indicating how long the response can be cached.", correct: true }
      - { value: "It sets the maximum time a user's session can be active.", correct: false }
      - { value: "It defines the maximum size of the response body.", correct: false }
      - { value: "It sets the expiration date of a cookie.", correct: false }
    help: |
      `setMaxAge()` sets the `max-age` directive, controlling the maximum amount of time a response can be cached by a client or shared cache.
      https://symfony.com/doc/current/components/http_foundation.html#cache-control

  -
    question: >
      What is the purpose of the `Response::setSharedMaxAge()` method?
    answers:
      - { value: "To set the `s-maxage` directive in the `Cache-Control` header, indicating how long shared caches can store the response.", correct: true }
      - { value: "To set the maximum age for private caches only.", correct: false }
      - { value: "To set the maximum number of times a response can be shared.", correct: false }
      - { value: "To set the maximum age for session data.", correct: false }
    help: |
      `setSharedMaxAge()` sets the `s-maxage` directive, specifically for shared caches.
      https://symfony.com/doc/current/components/http_foundation.html#cache-control

  -
    question: >
      Which of the following is generally considered a good practice for controller methods?
    answers:
      - { value: "To contain all business logic directly within the controller method.", correct: false }
      - { value: "To be thin, delegating complex business logic to services.", correct: true }
      - { value: "To directly interact with the database using raw SQL queries.", correct: false }
      - { value: "To handle all view rendering logic.", correct: false }
    help: |
      Controllers should be "thin" and primarily responsible for handling the request, calling appropriate services for business logic, and returning a response.
      https://symfony.com/doc/current/best_practices.html#controllers

  -
    question: >
      What is the purpose of the `Request::getScheme()` method?
    answers:
      - { value: "To get the HTTP method (e.g., GET, POST).", correct: false }
      - { value: "To get the URL scheme (e.g., `http` or `https`).", correct: true }
      - { value: "To get the scheme of the current route.", correct: false }
      - { value: "To get the security scheme used for authentication.", correct: false }
    help: |
      `getScheme()` returns the scheme of the URL (e.g., 'http', 'https').
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: >
      Which of the following is the correct way to get the host (e.g., `example.com`) from the `Request` object?
    answers:
      - { value: "`$request->getHost()`", correct: true }
      - { value: "`$request->getHttpHost()`", correct: true }
      - { value: "`$request->server->get('SERVER_NAME')`", correct: false }
      - { value: "`$request->getUri()->getHost()`", correct: false }
    help: |
      Both `getHost()` and `getHttpHost()` return the host name from the request.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: >
      What is the purpose of the `Request::getBasePath()` method?
    answers:
      - { value: "To get the path to the web root directory.", correct: false }
      - { value: "To get the path from the web root to the front controller (e.g., `/app.php`).", correct: true }
      - { value: "To get the base URL of the application.", correct: false }
      - { value: "To get the path to the current controller.", correct: false }
    help: |
      `getBasePath()` returns the path from the web root to the front controller script.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: >
      Which of the following is true about the `Request::getUriForPath()` method?
    answers:
      - { value: "It generates a full URI for a given path, relative to the current host and scheme.", correct: true }
      - { value: "It returns the path part of the current URI.", correct: false }
      - { value: "It generates a URI for a named route.", correct: false }
      - { value: "It returns the URI of the current request.", correct: false }
    help: |
      `getUriForPath()` is useful for generating absolute URLs for paths within your application.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: >
      What is the purpose of the `Request::getRealMethod()` method?
    answers:
      - { value: "To get the HTTP method as sent by the client, even if it's overridden by `_method`.", correct: true }
      - { value: "To get the actual method of the controller being executed.", correct: false }
      - { value: "To get the method used for the current route.", correct: false }
      - { value: "To get the method that was used to create the request object.", correct: false }
    help: |
      `getRealMethod()` returns the actual HTTP method from the request, ignoring any `_method` overrides used for form submissions.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: >
      Which of the following is true about the `Request::isSecure()` method?
    answers:
      - { value: "It checks if the request is authenticated.", correct: false }
      - { value: "It checks if the request was made over HTTPS.", correct: true }
      - { value: "It checks if the request body is encrypted.", correct: false }
      - { value: "It checks if the request comes from a trusted network.", correct: false }
    help: |
      `isSecure()` determines if the request was sent over a secure connection (HTTPS).
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: >
      What is the purpose of the `Request::getPreferredFormat()` method?
    answers:
      - { value: "To get the format (e.g., html, json) preferred by the client based on the `Accept` header.", correct: true }
      - { value: "To get the format of the current route.", correct: false }
      - { value: "To set the response format.", correct: false }
      - { value: "To get the default format of the application.", correct: false }
    help: |
      `getPreferredFormat()` helps in content negotiation by returning the format preferred by the client from the `Accept` header.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: >
      Which of the following is true about `Response::setProtocolVersion()`?
    answers:
      - { value: "It sets the HTTP protocol version (e.g., '1.0', '1.1', '2.0') for the response.", correct: true }
      - { value: "It sets the version of the Symfony framework used.", correct: false }
      - { value: "It sets the version of the application's API.", correct: false }
      - { value: "It is used to downgrade the protocol for older clients.", correct: false }
    help: |
      `setProtocolVersion()` allows you to explicitly set the HTTP protocol version for the response.
      https://symfony.com/doc/current/components/http_foundation.html#response-status-code

  -
    question: >
      What is the purpose of the `Response::prepare()` method?
    answers:
      - { value: "To send the response to the client.", correct: false }
      - { value: "To prepare the response for sending by ensuring valid headers and content, especially for caching.", correct: true }
      - { value: "To encode the response content.", correct: false }
      - { value: "To validate the response against a schema.", correct: false }
    help: |
      `prepare()` is called by the Kernel before sending the response to ensure it's compliant with HTTP specifications, especially regarding caching headers.
      https://symfony.com/doc/current/components/http_foundation.html#sending-the-response

  -
    question: >
      Which of the following is true about `Response::isCacheable()`?
    answers:
      - { value: "It checks if the response is currently stored in the HTTP cache.", correct: false }
      - { value: "It determines if the response can be cached according to its `Cache-Control` and `Expires` headers.", correct: true }
      - { value: "It checks if the response is eligible for server-side caching.", correct: false }
      - { value: "It checks if the response is small enough to be cached.", correct: false }
    help: |
      `isCacheable()` evaluates the response's headers to determine if it's eligible for HTTP caching.
      https://symfony.com/doc/current/components/http_foundation.html#cache-control

  -
    question: >
      What is the purpose of the `Response::isFresh()` method?
    answers:
      - { value: "It checks if the response content has been recently updated.", correct: false }
      - { value: "It determines if the response is still fresh (not stale) according to its caching headers and the request's conditional headers.", correct: true }
      - { value: "It checks if the response is new and has not been sent before.", correct: false }
      - { value: "It checks if the response is not empty.", correct: false }
    help: |
      `isFresh()` is used in conjunction with conditional GET requests to determine if a cached response is still valid.
      https://symfony.com/doc/current/components/http_foundation.html#cache-control

  -
    question: >
      Which of the following is true about `Response::isNotModified()`?
    answers:
      - { value: "It checks if the request body has not been modified.", correct: false }
      - { value: "It determines if the response should be a 304 Not Modified response based on conditional request headers.", correct: true }
      - { value: "It checks if the controller logic has not modified the response.", correct: false }
      - { value: "It checks if the database record has not been modified.", correct: false }
    help: |
      `isNotModified()` helps in generating 304 Not Modified responses, indicating that the client's cached version is still valid.
      https://symfony.com/doc/current/components/http_foundation.html#cache-control

  -
    question: >
      What is the purpose of the `Response::setPublic()` method?
    answers:
      - { value: "To mark the response as cacheable by shared caches.", correct: true }
      - { value: "To make the response content publicly accessible.", correct: false }
      - { value: "To set the response status code to 200 OK.", correct: false }
      - { value: "To enable public access to the controller.", correct: false }
    help: |
      `setPublic()` sets the `Cache-Control: public` directive, allowing intermediate caches to store the response.
      https://symfony.com/doc/current/components/http_foundation.html#cache-control

  -
    question: >
      Which of the following is true about `Response::setPrivate()`?
    answers:
      - { value: "It marks the response as cacheable only by private caches (e.g., client browser).", correct: true }
      - { value: "It makes the response content private and encrypted.", correct: false }
      - { value: "It sets the response status code to 401 Unauthorized.", correct: false }
      - { value: "It restricts access to the controller method.", correct: false }
    help: |
      `setPrivate()` sets the `Cache-Control: private` directive, restricting caching to private caches.
      https://symfony.com/doc/current/components/http_foundation.html#cache-control

  -
    question: >
      What is the primary role of the `#[MapQueryString]` attribute?
    answers:
      - { value: "To map a single query parameter to a controller argument.", correct: false }
      - { value: "To deserialize the entire query string into a DTO object, often used for filtering or pagination parameters.", correct: true }
      - { value: "To map the query string to an array of key-value pairs.", correct: false }
      - { value: "To validate the format of the query string.", correct: false }
    help: |
      `#[MapQueryString]` is an argument value resolver that deserializes the full query string into a typed object, useful for complex query parameters.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#mapping-query-strings

  -
    question: >
      Which of the following is true about the `Response::setPublic()` and `Response::setPrivate()` methods?
    answers:
      - { value: "They control whether the response content is encrypted.", correct: false }
      - { value: "They determine if the response can be cached by shared (public) or private caches.", correct: true }
      - { value: "They set the visibility of the response in the browser's developer tools.", correct: false }
      - { value: "They are used for setting session cookie security flags.", correct: false }
    help: |
      These methods control the `Cache-Control` header's `public` and `private` directives, influencing how proxies and browsers cache the response.
      https://symfony.com/doc/current/components/http_foundation.html#cache-control