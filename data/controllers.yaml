category: Controllers

questions:
  -
    question: >
      Which of the following is the recommended naming convention for a controller class in Symfony 7?
    answers:
      - { value: '`ProductController`', correct: true }
      - { value: '`Product_Controller`', correct: false }
      - { value: '`productController`', correct: false }
      - { value: '`ProductCtrl`', correct: false }
    help: |
      Symfony recommends using a `Controller` suffix for controller classes, following PSR-4 autoloading standards.
      https://symfony.com/doc/current/controller.html#controller-naming-conventions

  -
    question: >
      What is the primary benefit of extending `Symfony\Bundle\FrameworkBundle\Controller\AbstractController` for your controllers?
    answers:
      - { value: 'It automatically makes the controller a service.', correct: false }
      - { value: 'It provides convenient helper methods for common tasks like rendering templates, generating URLs, and managing sessions.', correct: true }
      - { value: 'It enforces specific routing configurations.', correct: false }
      - { value: 'It enables automatic dependency injection for all services.', correct: false }
      - { value: 'It allows direct access to the global `$_GET` and `$_POST` arrays.', correct: false }
    help: |
      `AbstractController` provides shortcuts to commonly used services and methods, simplifying controller code.
      https://symfony.com/doc/current/controller.html#the-base-abstractcontroller-class

  -
    question: |
      Given the following controller action, how would you correctly retrieve the `page` query parameter from the URL, defaulting to `1` if not present?

      ```php
      // src/Controller/BlogController.php
      namespace App\Controller;

      use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
      use Symfony\Component\HttpFoundation\Request;
      use Symfony\Component\HttpFoundation\Response;
      use Symfony\Component\Routing\Attribute\Route;

      class BlogController extends AbstractController
      {
          #[Route('/blog', name: 'app_blog')]
          public function index(Request $request): Response
          {
              // ???
              return new Response('...');
          }
      }
      ```
    answers:
      - { value: '`$page = $request->query->get(''page'', 1);`', correct: true }
      - { value: '`$page = $request->attributes->get(''page'', 1);`', correct: false }
      - { value: '`$page = $request->request->get(''page'', 1);`', correct: false }
      - { value: '`$page = $request->get(''page'', 1);`', correct: false }
    help: |
      Query parameters are accessed via the `query` property of the `Request` object. The `get()` method allows specifying a default value.
      https://symfony.com/doc/current/controller.html#accessing-the-request

  -
    question: >
      Which Symfony component class is primarily responsible for representing an HTTP response that a controller must return?
    answers:
      - { value: '`Symfony\Component\HttpFoundation\Request`', correct: false }
      - { value: '`Symfony\Component\HttpFoundation\Response`', correct: true }
      - { value: '`Symfony\Component\HttpKernel\Kernel`', correct: false }
      - { value: '`Symfony\Component\Routing\Route`', correct: false }
    help: |
      Every controller in Symfony must return an instance of `Symfony\Component\HttpFoundation\Response` or one of its subclasses.
      https://symfony.com/doc/current/controller.html#the-response

  -
    question: |
      You want to store a user's preference in the session. Which of the following is the correct way to access the session in a controller extending `AbstractController`?
    answers:
      - { value: '`$this->get(''session'')`', correct: false }
      - { value: '`$this->session`', correct: false }
      - { value: '`$request->getSession()`', correct: true }
      - { value: '`$this->container->get(''session'')`', correct: false }
    help: |
      The session can be accessed via the `getSession()` method of the `Request` object.
      https://symfony.com/doc/current/controller/sessions.html#accessing-the-session

  -
    question: |
      How do you add a "success" flash message named 'notice' with the content "Item saved!" in a Symfony controller?
    answers:
      - { value: '`$this->addFlash(''notice'', ''Item saved!'');`', correct: true }
      - { value: '`$this->get(''session'')
          ->getFlashBag()
          ->add(''notice'', ''Item saved!'');`', correct: false }
      - { value: '`$this->flash->add(''notice'', ''Item saved!'');`', correct: false }
      - { value: '`$this->getFlashBag()->add(''notice'', ''Item saved!'');`', correct: false }
    help: |
      The `addFlash()` method is a convenient shortcut provided by `AbstractController` to add flash messages.
      https://symfony.com/doc/current/controller/sessions.html#flash-messages

  -
    question: |
      Which method should you use in `AbstractController` to redirect the user to a named route called `app_homepage`?
    answers:
      - { value: '`$this->redirect($this->generateUrl(''app_homepage''));`', correct: false }
      - { value: '`$this->redirectToRoute(''app_homepage'');`', correct: true }
      - { value: '`$this->forward(''app_homepage'');`', correct: false }
      - { value: '`new RedirectResponse($this->generateUrl(''app_homepage''));`', correct: false }
    help: |
      The `redirectToRoute()` method is a helper that generates a URL for a given route and returns a `RedirectResponse`.
      https://symfony.com/doc/current/controller.html#redirecting

  -
    question: |
      When would you typically use the `forward()` method in a Symfony controller?
    answers:
      - { value: 'To redirect the user''s browser to a different URL.', correct: false }
      - { value: 'To make an internal sub-request to another controller action and embed its response.', correct: true }
      - { value: 'To send an email to a user after a successful action.', correct: false }
      - { value: 'To include a Twig template directly without a controller.', correct: false }
    help: |
      The `forward()` method is used for internal redirects (sub-requests) within the application, allowing one controller to call another.
      https://symfony.com/doc/current/controller/forwarding.html

  -
    question: |
      How can you generate a 404 Not Found page in a Symfony controller?
    answers:
      - { value: 'Return `new Response('''', 404);`', correct: false }
      - { value: 'Throw `new \Exception(''Page not found'', 404);`', correct: false }
      - { value: 'Throw `$this->createNotFoundException(''The page does not exist'');`', correct: true }
      - { value: 'Call `$this->render404();`', correct: false }
    help: |
      The `createNotFoundException()` method, provided by `AbstractController`, is the standard way to trigger a 404 response.
      https://symfony.com/doc/current/controller.html#generating-404-pages

  -
    question: |
      Consider the following controller action:

      ```php
      // src/Controller/ProductController.php
      namespace App\Controller;

      use Symfony\Component\HttpFoundation\Response;
      use Symfony\Component\Routing\Attribute\Route;

      class ProductController
      {
          #[Route('/product/{id}')]
          public function show(int $id): Response
          {
              // ...
          }
      }
      ```

      How does Symfony automatically inject the `id` value into the `$id` argument?
    answers:
      - { value: 'By checking the `$_GET` superglobal for a key named `id`.', correct: false }
      - { value: 'The `ArgumentResolver` matches the route parameter name (`id`) with the argument name (`$id`) and its type hint.', correct: true }
      - { value: 'It requires a specific service definition for the `id` parameter.', correct: false }
      - { value: 'It's a feature of PHP 8.2, not Symfony.', correct: false }
    help: |
      Symfony's `ArgumentResolver` automatically resolves controller arguments by matching route parameters, query parameters, request body data, or services based on argument names and type hints.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html

  -
    question: |
      You need to handle a file upload in your controller. Which attribute can automatically map an uploaded file from the request to an `UploadedFile` object in a controller argument?

      ```php
      // src/Controller/UserController.php
      namespace App\Controller;

      use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
      use Symfony\Component\HttpFoundation\File\UploadedFile;
      use Symfony\Component\HttpFoundation\Response;
      use Symfony\Component\HttpKernel\Attribute\MapUploadedFile;
      use Symfony\Component\Routing\Attribute\Route;

      class UserController extends AbstractController
      {
          #[Route('/user/picture', methods: ['POST'])]
          public function changePicture(
              // ??? UploadedFile $picture
          ): Response {
              // ...
          }
      }
      ```
    answers:
      - { value: '`#[MapFile]`', correct: false }
      - { value: '`#[FileArgument]`', correct: false }
      - { value: '`#[MapUploadedFile]`', correct: true }
      - { value: '`#[Upload]`', correct: false }
    help: |
      The `#[MapUploadedFile]` attribute is used to automatically inject an `UploadedFile` object into a controller argument, simplifying file upload handling.
      https://symfony.com/doc/current/controller/upload_file.html

  -
    question: |
      How would you set a cookie named `my_cookie` with the value `some_value` and a lifetime of 1 hour in a Symfony controller?
    answers:
      - { value: '`$response->headers->setCookie(new Cookie(''my_cookie'', ''some_value'', time() + 3600));`', correct: true }
      - { value: '`$request->cookies->set(''my_cookie'', ''some_value'', time() + 3600);`', correct: false }
      - { value: '`$this->setCookie(''my_cookie'', ''some_value'', 3600);`', correct: false }
      - { value: '`setcookie(''my_cookie'', ''some_value'', time() + 3600);`', correct: false }
    help: |
      Cookies are set on the `Response` object's `headers` property using the `setCookie()` method, which takes a `Cookie` object.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: |
      Which of the following is the correct way to retrieve the `User-Agent` header from the current request in a Symfony controller?
    answers:
      - { value: '`$request->headers->get(''User-Agent'');`', correct: true }
      - { value: '`$request->getHeaders(''User-Agent'');`', correct: false }
      - { value: '`$request->server->get(''HTTP_USER_AGENT'');`', correct: false }
      - { value: '`$_SERVER[''HTTP_USER_AGENT''];`', correct: false }
    help: |
      Request headers are accessed via the `headers` property of the `Request` object using the `get()` method.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: |
      What is an "invokable controller" in Symfony?
    answers:
      - { value: 'A controller that can be called directly from the command line.', correct: false }
      - { value: 'A controller class that implements the `__invoke()` magic method to handle requests.', correct: true }
      - { value: 'A controller that automatically renders a Twig template without an explicit `render()` call.', correct: false }
      - { value: 'A controller that can only be accessed via AJAX requests.', correct: false }
    help: |
      An invokable controller is a class where the `__invoke()` method acts as the controller action, allowing the class itself to be treated as a callable.
      https://symfony.com/doc/current/controller/service.html#invokable-controllers

  -
    question: |
      Which of the following is the recommended way to register controllers as services in Symfony 7, especially when using PHP attributes for routing?
    answers:
      - { value: 'Manually define each controller as a service in `services.yaml` with `public: true`.', correct: false }
      - { value: 'By default, controllers in `src/Controller/` are automatically registered as services if autowiring and autoconfigure are enabled.', correct: true }
      - { value: 'Extend `Symfony\Component\DependencyInjection\ContainerAwareInterface` in your controller.', correct: false }
      - { value: 'Add the `#[Service]` attribute to each controller class.', correct: false }
    help: |
      With autowiring and autoconfigure enabled (which is the default for `src/Controller/` in `config/services.yaml`), controllers are automatically registered as services, allowing for dependency injection.
      https://symfony.com/doc/current/controller/service.html

  -
    question: |
      Which of the following best describes the `kernel.controller` event in Symfony?
    answers:
      - { value: 'It is dispatched before the controller is resolved.', correct: false }
      - { value: 'It is dispatched after the controller callable has been determined but before its execution.', correct: true }
      - { value: 'It is dispatched after the controller has returned a `Response` object.', correct: false }
      - { value: 'It is used to modify the HTTP request before it reaches the controller.', correct: false }
    help: |
      The `kernel.controller` event is dispatched by `HttpKernel::handle()` after the controller callable has been determined but before its execution. Listeners can initialize systems, retrieve controller attributes, or even change the controller itself.
      https://symfony.com/doc/current/components/http_kernel.html#the-kernel-controller-event

  -
    question: |
      You want to access a custom configuration parameter, `app.items_per_page`, defined in `config/services.yaml` from your controller. How would you do this if your controller extends `AbstractController`?
    answers:
      - { value: '`$this->container->getParameter(''app.items_per_page'');`', correct: false }
      - { value: '`$this->getParameter(''app.items_per_page'');`', correct: true }
      - { value: '`$this->get(''parameter_bag'')
          ->get(''app.items_per_page'');`', correct: false }
      - { value: '`$this->params->get(''app.items_per_page'');`', correct: false }
    help: |
      The `getParameter()` method is a convenient helper provided by `AbstractController` to access container parameters.
      https://symfony.com/doc/current/controller.html#accessing-configuration-parameters

  -
    question: |
      What is the purpose of the `#[AsController]` attribute in Symfony 7?
    answers:
      - { value: 'It marks a class as a service that can be autowired.', correct: false }
      - { value: 'It explicitly registers a class as a controller, making it discoverable for routing and enabling service injection into its methods.', correct: true }
      - { value: 'It defines the default route for all methods within the controller.', correct: false }
      - { value: 'It's used for console commands, not HTTP controllers.', correct: false }
    help: |
      The `#[AsController]` attribute explicitly marks a class as a controller, ensuring it's registered as a service and enabling dependency injection into its action methods. While often implicit for classes in `src/Controller/`, it's good practice for clarity or when controllers are located elsewhere.
      https://symfony.com/doc/current/controller/service.html#controllers-as-services

  -
    question: |
      Which of the following is NOT a valid way to define a controller in Symfony 7?
    answers:
      - { value: 'A class method with a `#[Route]` attribute.', correct: false }
      - { value: 'A class implementing the `__invoke()` method.', correct: false }
      - { value: 'A standalone PHP function.', correct: true }
      - { value: 'A service defined with the `controller.service_arguments` tag.', correct: false }
    help: |
      While older Symfony versions or custom frameworks might use standalone functions, modern Symfony 7 controllers are typically class methods (often with `#[Route]` attributes) or invokable classes.
      https://symfony.com/doc/current/controller.html#defining-a-controller

  -
    question: |
      You want to render a Twig template named `product/show.html.twig` and pass a `product` variable to it from your controller. Which method should you use?
    answers:
      - { value: '`$this->render(''product/show.html.twig'', [''product'' => $product]);`', correct: true }
      - { value: '`$this->display(''product/show.html.twig'', [''product'' => $product]);`', correct: false }
      - { value: '`$this->twig->render(''product/show.html.twig'', [''product'' => $product]);`', correct: false }
      - { value: '`new Response($this->renderView(''product/show.html.twig'', [''product'' => $product]));`', correct: false }
    help: |
      The `render()` method, provided by `AbstractController`, is the standard way to render a Twig template and return a `Response` object.
      https://symfony.com/doc/current/controller.html#rendering-templates

  -
    question: |
      What is the purpose of `ArgumentValueResolverInterface` in Symfony?
    answers:
      - { value: 'To resolve the correct controller callable from a request.', correct: false }
      - { value: 'To determine the values for controller method arguments based on the request and type hints.', correct: true }
      - { value: 'To convert a controller''s return value into a `Response` object.', correct: false }
      - { value: 'To manage the lifecycle of services injected into controllers.', correct: false }
    help: |
      `ArgumentValueResolverInterface` defines the contract for custom argument value resolvers, which are responsible for providing values for controller method arguments.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#creating-a-custom-argument-value-resolver

  -
    question: |
      Which of the following is a valid way to embed the output of another controller (`App\Controller\BlogController::recentArticles`) into a Twig template, passing a `max` parameter?
    answers:
      - { value: '`{{ include(controller(''App\\\\Controller\\\\BlogController::recentArticles'', {max: 3})) }}`', correct: false }
      - { value: '`{{ render(controller(''App\\\\Controller\\\\BlogController::recentArticles'', {max: 3})) }}`', correct: true }
      - { value: '`{{ render(path(''app_blog_recent_articles'', {max: 3})) }}`', correct: true }
      - { value: '`{{ embed(''App\\\\Controller\\\\BlogController::recentArticles'', {max: 3}) }}`', correct: false }
    help: |
      The `render()` Twig function can be used with `controller()` to embed the output of another controller. If the controller is associated with a route, `path()` or `url()` can also be used.
      https://symfony.com/doc/current/templates.html#embedding-controllers

  -
    question: |
      When a controller method has both a `Request` object argument and a route parameter argument (e.g., `public function index(Request $request, int $id)`), what is true about their order?
    answers:
      - { value: 'The `Request` object must always come first.', correct: false }
      - { value: 'The route parameter must always come first.', correct: false }
      - { value: 'The order of these arguments does not matter; Symfony''s `ArgumentResolver` handles it.', correct: true }
      - { value: 'Only one of them can be present in a single method signature.', correct: false }
    help: |
      Symfony's `ArgumentResolver` is smart enough to match arguments by name and type, so the order of `Request` objects and route parameters in the method signature does not affect their resolution.
      https://symfony.com/doc/current/create_framework/http_kernel_controller_resolver.html#controller-method-arguments

  -
    question: |
      What is the primary role of the `ControllerResolverInterface` in Symfony's HttpKernel component?
    answers:
      - { value: 'To convert the raw HTTP request into a `Request` object.', correct: false }
      - { value: 'To determine and return the PHP callable (controller) responsible for handling a given `Request`.', correct: true }
      - { value: 'To execute the controller and handle its return value.', correct: false }
      - { value: 'To manage the routing process and match URLs to controllers.', correct: false }
    help: |
      The `ControllerResolverInterface` defines how Symfony finds the appropriate controller callable for a given request.
      https://symfony.com/doc/current/components/http_kernel.html#controller-resolution

  -
    question: |
      Which of the following is a valid way to define a route for a controller action using PHP attributes in Symfony 7?
    answers:
      - { value: '`#[Route(path: ''/products'', name: ''app_products'')]`', correct: true }
      - { value: '`@Route(''/products'', name=''app_products'')`', correct: false }
      - { value: '`#[Path(''/products''), Name(''app_products'')]`', correct: false }
      - { value: '`#[Route(''/products''), name: ''app_products'']`', correct: false }
    help: |
      The `#[Route]` attribute is used to define routes directly on controller methods or invokable classes.
      https://symfony.com/doc/current/routing.html#defining-routes-as-attributes

  -
    question: |
      You need to send an HTTP status code of `201 Created` along with a response. How would you achieve this in a Symfony controller?
    answers:
      - { value: '`return new Response(''Resource created'', 201);`', correct: true }
      - { value: '`$response->setStatusCode(201); return $response;`', correct: true }
      - { value: '`return $this->json([''message'' => ''Created''], 201);`', correct: true }
      - { value: '`return new Response(''Resource created''); $response->setStatusCode(201);`', correct: false }
    help: |
      The HTTP status code can be set in the `Response` constructor or via the `setStatusCode()` method. For JSON responses, the status code can be passed as the second argument to `json()`.
      https://symfony.com/doc/current/components/http_foundation.html#response-status-codes

  -
    question: |
      Which of the following describes a key responsibility of a "front controller" in a Symfony application?
    answers:
      - { value: 'To directly handle all business logic and database interactions.', correct: false }
      - { value: 'To serve static assets like CSS and JavaScript files.', correct: false }
      - { value: 'To bootstrap the application, handle incoming requests, dispatch them to the appropriate controller, and send the response.', correct: true }
      - { value: 'To manage user authentication and authorization for all requests.', correct: false }
    help: |
      The front controller (typically `public/index.php`) is the single entry point for all web requests, responsible for initiating the Symfony application lifecycle.
      https://symfony.com/doc/current/create_framework/front_controller.html

  -
    question: |
      You want to prevent a controller from being automatically registered as a service. How can you achieve this?
    answers:
      - { value: 'Move the controller class outside the `src/Controller/` directory.', correct: true }
      - { value: 'Add `#[AsService(false)]` attribute to the controller class.', correct: false }
      - { value: 'Set `autoconfigure: false` for the `App\\Controller\\` namespace in `config/services.yaml`.', correct: true }
      - { value: 'Make the controller class `abstract`.', correct: false }
    help: |
      Controllers in `src/Controller/` are autoconfigured as services by default. To prevent this, you can move them or disable autoconfigure for that namespace.
      https://symfony.com/doc/current/controller/service.html#controllers-as-services

  -
    question: |
      Which of the following is NOT a built-in argument value resolver in Symfony?
    answers:
      - { value: '`RequestValueResolver` (for `Request` objects)', correct: false }
      - { value: '`ServiceValueResolver` (for autowired services)', correct: false }
      - { value: '`EntityValueResolver` (for Doctrine entities)', correct: false }
      - { value: '`FormValueResolver` (for `Form` objects)', correct: true }
    help: |
      Symfony provides several built-in argument value resolvers, including `RequestValueResolver`, `ServiceValueResolver`, and `EntityValueResolver`. There is no built-in `FormValueResolver` that automatically injects `Form` objects.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#built-in-argument-value-resolvers

  -
    question: |
      Consider a controller method: `public function show(string $slug)`. If the route is `/blog/{slug}`, how does Symfony populate the `$slug` argument?
    answers:
      - { value: 'It looks for a query parameter named `slug`.', correct: false }
      - { value: 'It looks for a request attribute named `slug` (which is populated by the router).', correct: true }
      - { value: 'It looks for a POST parameter named `slug`.', correct: false }
      - { value: 'It requires manual retrieval using `$request->attributes->get(''slug'')`.', correct: false }
    help: |
      Symfony's `ArgumentResolver` automatically matches route parameters to controller method arguments by name. The router populates the request attributes with matched route parameters.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html

  -
    question: |
      You want to return a JSON response from your controller. Which method from `AbstractController` is the most convenient way to do this?
    answers:
      - { value: '`return new JsonResponse([''data'' => $data]);`', correct: false }
      - { value: '`return $this->json([''data'' => $data]);`', correct: true }
      - { value: '`return $this->serialize([''data'' => $data]);`', correct: false }
      - { value: '`return $this->renderJson([''data'' => $data]);`', correct: false }
    help: |
      The `json()` method is a shortcut in `AbstractController` that creates and returns a `JsonResponse` object.
      https://symfony.com/doc/current/controller.html#returning-json-response

  -
    question: |
      What is the purpose of the `#[MapRequestPayload]` attribute in Symfony 7?
    answers:
      - { value: 'To map query parameters to a DTO.', correct: false }
      - { value: 'To automatically deserialize the request body (e.g., JSON or XML) into a PHP object or DTO.', correct: true }
      - { value: 'To map uploaded files to a specific object.', correct: false }
      - { value: 'To map form data from a `POST` request to an array.', correct: false }
    help: |
      The `#[MapRequestPayload]` attribute simplifies handling request bodies by automatically deserializing them into a specified PHP object or DTO.
      https://symfony.com/doc/current/controller/request_payload.html

  -
    question: |
      Which of the following best describes how Symfony handles the return value of a controller action?
    answers:
      - { value: 'It must always return a string, which is then sent as the response body.', correct: false }
      - { value: 'It must always return an array, which Symfony then converts to JSON.', correct: false }
      - { value: 'It must always return an instance of `Symfony\Component\HttpFoundation\Response` or one of its subclasses.', correct: true }
      - { value: 'It can return any PHP type, and Symfony will automatically cast it to a string.', correct: false }
    help: |
      A controller's primary responsibility is to return a `Response` object, which encapsulates the HTTP response (status code, headers, content).
      https://symfony.com/doc/current/controller.html#the-response

  -
    question: |
      You want to retrieve all flash messages of a specific type, e.g., 'success'. How would you do this in a controller?
    answers:
      - { value: '`$this->getFlashBag()->get(''success'');`', correct: false }
      - { value: '`$this->session->getFlashBag()->get(''success'');`', correct: true }
      - { value: '`$this->get(''session'')
          ->getFlashBag()
          ->all();`', correct: false }
      - { value: '`$this->getFlashes(''success'');`', correct: false }
    help: |
      Flash messages are managed by the `FlashBag` which is accessible via the session.
      https://symfony.com/doc/current/controller/sessions.html#retrieving-flash-messages

  -
    question: |
      What is the purpose of the `#[MapQueryParameter]` attribute in Symfony 7?
    answers:
      - { value: 'To map a single query parameter to a controller argument, with optional validation.', correct: true }
      - { value: 'To map all query parameters into a single array argument.', correct: false }
      - { value: 'To map a query parameter to a service.', correct: false }
      - { value: 'To map a query parameter to a route attribute.', correct: false }
    help: |
      The `#[MapQueryParameter]` attribute allows you to directly map a specific query parameter to a controller argument, providing type conversion and basic validation.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#mapqueryparameter

  -
    question: |
      Which method is used to retrieve a specific cookie value from the current request?
    answers:
      - { value: '`$request->cookies->get(''cookie_name'');`', correct: true }
      - { value: '`$request->getCookie(''cookie_name'');`', correct: false }
      - { value: '`$_COOKIE[''cookie_name''];`', correct: false }
      - { value: '`$request->headers->get(''Cookie'');`', correct: false }
    help: |
      The `cookies` property of the `Request` object provides access to request cookies, and the `get()` method retrieves their values.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: |
      When defining a controller method, what is the significance of type-hinting an argument with `Symfony\Component\HttpFoundation\Request`?
    answers:
      - { value: 'It makes the controller a service.', correct: false }
      - { value: 'It allows Symfony''s `ArgumentResolver` to automatically inject the current `Request` object into that argument.', correct: true }
      - { value: 'It makes the argument optional.', correct: false }
      - { value: 'It forces the request method to be `GET`.', correct: false }
    help: |
      Type-hinting with `Request` is the standard way to get the current request object injected into your controller action.
      https://symfony.com/doc/current/controller.html#accessing-the-request

  -
    question: |
      What is the primary difference between `redirectToRoute()` and `redirect()` in `AbstractController`?
    answers:
      - { value: '`redirectToRoute()` performs an internal redirect, while `redirect()` performs an external redirect.', correct: false }
      - { value: '`redirectToRoute()` redirects to a named Symfony route, while `redirect()` redirects to an arbitrary URL.', correct: true }
      - { value: '`redirectToRoute()` sends a 301 redirect, while `redirect()` sends a 302 redirect.', correct: false }
      - { value: '`redirectToRoute()` is for GET requests, `redirect()` is for POST requests.', correct: false }
    help: |
      `redirectToRoute()` is for Symfony-specific named routes, while `redirect()` is for any arbitrary URL.
      https://symfony.com/doc/current/controller.html#redirecting

  -
    question: |
      Which of the following is the correct way to retrieve data sent in a `POST` request body (e.g., from a form submission) in a Symfony controller?
    answers:
      - { value: '`$request->query->get(''field_name'');`', correct: false }
      - { value: '`$request->request->get(''field_name'');`', correct: true }
      - { value: '`$request->attributes->get(''field_name'');`', correct: false }
      - { value: '`$_POST[''field_name''];`', correct: false }
    help: |
      Data from POST requests (form submissions) is accessed via the `request` property of the `Request` object.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: |
      When should you consider creating a custom argument value resolver?
    answers:
      - { value: 'When you need to inject a service into your controller.', correct: false }
      - { value: 'When you want to automatically convert a request value (e.g., a string ID) into a complex object (e.g., a DTO or an entity) for a controller argument.', correct: true }
      - { value: 'When you need to handle file uploads.', correct: false }
      - { value: 'When you want to change the default behavior of the `Request` object.', correct: false }
    help: |
      Custom argument value resolvers are useful for complex argument resolution logic, such as converting raw request data into domain-specific objects.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#creating-a-custom-argument-value-resolver

  -
    question: |
      What is the recommended directory for Symfony controller classes?
    answers:
      - { value: '`src/Controller/`', correct: true }
      - { value: '`app/Controllers/`', correct: false }
      - { value: '`var/controllers/`', correct: false }
      - { value: '`bin/controllers/`', correct: false }
    help: |
      The `src/Controller/` directory is the standard and recommended location for controller classes in a Symfony application.
      https://symfony.com/doc/current/controller.html#controller-naming-conventions

  -
    question: |
      Which of the following is true about the `Response` object in Symfony?
    answers:
      - { value: 'It is immutable once created.', correct: false }
      - { value: 'It encapsulates the HTTP status code, headers, and content.', correct: true }
      - { value: 'It is automatically sent to the client by the controller.', correct: false }
      - { value: 'It can only contain HTML content.', correct: false }
    help: |
      The `Response` object is mutable and contains all parts of the HTTP response. It is sent by the `Kernel`, not directly by the controller.
      https://symfony.com/doc/current/components/http_foundation.html#response-object

  -
    question: |
      You want to set a custom HTTP header, e.g., `X-My-Header: Value`, on your response. How would you do this?
    answers:
      - { value: '`$response->headers->set(''X-My-Header'', ''Value'');`', correct: true }
      - { value: '`$response->setHeader(''X-My-Header'', ''Value'');`', correct: false }
      - { value: '`$response->addHeader(''X-My-Header'', ''Value'');`', correct: false }
      - { value: '`$response->headers[''X-My-Header''] = ''Value'';`', correct: false }
    help: |
      Response headers are managed via the `headers` property of the `Response` object using the `set()` method.
      https://symfony.com/doc/current/components/http_foundation.html#response-headers

  -
    question: |
      What is the purpose of the `#[MapQueryString]` attribute (available with `symfony/serializer` and `symfony/validator`)?
    answers:
      - { value: 'To map the entire query string into a DTO, with deserialization and validation.', correct: true }
      - { value: 'To map a single query parameter to a string.', correct: false }
      - { value: 'To map the request body to a DTO.', correct: false }
      - { value: 'To map URL path parameters to a DTO.', correct: false }
    help: |
      `#[MapQueryString]` is a powerful attribute that allows mapping the entire query string into a DTO, leveraging the Serializer and Validator components.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#mapquerystring

  -
    question: |
      Which of the following is true regarding the `Request` object in Symfony?
    answers:
      - { value: 'It is a global variable that can be accessed anywhere in the application.', correct: false }
      - { value: 'It is an object-oriented representation of the HTTP request.', correct: true }
      - { value: 'It is immutable and cannot be modified after creation.', correct: false }
      - { value: 'It only contains data from GET requests.', correct: false }
    help: |
      The `Request` object is a mutable, object-oriented wrapper around the raw HTTP request, providing access to all request data (query, post, headers, files, etc.).
      https://symfony.com/doc/current/components/http_foundation.html#request-object

  -
    question: |
      You want to clear all flash messages of all types from the session. How can you achieve this?
    answers:
      - { value: '`$this->session->getFlashBag()->clear();`', correct: true }
      - { value: '`$this->clearFlashes();`', correct: false }
      - { value: '`$this->session->clear();`', correct: false }
      - { value: '`$this->getFlashBag()->clearAll();`', correct: false }
    help: |
      The `clear()` method on the `FlashBag` removes all flash messages.
      https://symfony.com/doc/current/controller/sessions.html#retrieving-flash-messages

  -
    question: |
      What is the purpose of the `#[MapRequestPayload]` attribute when used with a DTO class in a controller argument?
    answers:
      - { value: 'It automatically validates the DTO against its constraints.', correct: true }
      - { value: 'It automatically deserializes the request body into an instance of the DTO.', correct: true }
      - { value: 'It automatically hydrates the DTO with query parameters.', correct: false }
      - { value: 'It automatically generates a form for the DTO.', correct: false }
    help: |
      `#[MapRequestPayload]` deserializes the request body into the DTO and automatically triggers validation if the Symfony Validator component is enabled.
      https://symfony.com/doc/current/controller/request_payload.html

  -
    question: |
      Which of the following is a common use case for a "built-in internal controller" like `_profiler` or `_wdt`?
    answers:
      - { value: 'Handling user authentication and authorization.', correct: false }
      - { value: 'Rendering the Symfony Web Debug Toolbar or the Profiler interface.', correct: true }
      - { value: 'Processing form submissions and saving data to the database.', correct: false }
      - { value: 'Serving static assets from the `public/` directory.', correct: false }
    help: |
      Internal controllers like `_profiler` and `_wdt` are used by Symfony's internal mechanisms, such as the Web Debug Toolbar and the Profiler, to display debugging and performance information.
      https://symfony.com/doc/current/reference/configuration/framework.html#profiler

  -
    question: |
      You want to get all flash messages, regardless of their type, as an associative array. How would you do this?
    answers:
      - { value: '`$this->session->getFlashBag()->all();`', correct: true }
      - { value: '`$this->getAllFlashes();`', correct: false }
      - { value: '`$this->get(''session'')
          ->getFlashBag()
          ->getMessages();`', correct: false }
      - { value: '`$this->getFlashBag()->peekAll();`', correct: false }
    help: |
      The `all()` method on the `FlashBag` retrieves and clears all flash messages.
      https://symfony.com/doc/current/controller/sessions.html#retrieving-flash-messages

  -
    question: |
      What happens if a controller method argument is type-hinted with a class that is not a service and cannot be resolved by any argument value resolver?
    answers:
      - { value: 'Symfony will throw a `ServiceNotFoundException`.', correct: false }
      - { value: 'Symfony will attempt to instantiate the class with no arguments.', correct: false }
      - { value: 'Symfony will throw a `RuntimeException` indicating it cannot resolve the argument.', correct: true }
      - { value: 'The argument will be `null`.', correct: false }
    help: |
      If an argument cannot be resolved by any registered argument value resolver, Symfony will throw a `RuntimeException` (or a more specific exception depending on the context), as it doesn't know how to provide a value for that argument.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html

  -
    question: |
      Which of the following is the correct way to check if a session has been started in a Symfony controller?
    answers:
      - { value: '`$request->hasSession();`', correct: true }
      - { value: '`$this->session->isStarted();`', correct: false }
      - { value: '`$request->getSession()->isStarted();`', correct: true }
      - { value: '`isset($_SESSION);`', correct: false }
    help: |
      You can check if a session exists on the request using `hasSession()` or if the session object itself is started using `isStarted()`.
      https://symfony.com/doc/current/controller/sessions.html

  -
    question: |
      When handling file uploads, what is the type of object that Symfony's `#[MapUploadedFile]` attribute injects into your controller argument?
    answers:
      - { value: '`SplFileInfo`', correct: false }
      - { value: '`Symfony\Component\HttpFoundation\File\File`', correct: false }
      - { value: '`Symfony\Component\HttpFoundation\File\UploadedFile`', correct: true }
      - { value: '`Psr\Http\Message\UploadedFileInterface`', correct: false }
    help: |
      The `#[MapUploadedFile]` attribute specifically injects an instance of `Symfony\Component\HttpFoundation\File\UploadedFile`.
      https://symfony.com/doc/current/controller/upload_file.html

  -
    question: |
      You want to make a controller method accessible only via `POST` requests. How would you configure its route using PHP attributes?
    answers:
      - { value: '`#[Route(''/submit'', methods: [''POST''])]`', correct: true }
      - { value: '`#[Route(''/submit'', method: ''POST'')]`', correct: false }
      - { value: '`#[Route(''/submit'', requirements: [''_method'' => ''POST''])]`', correct: false }
      - { value: '`#[PostRoute(''/submit'')]`', correct: false }
    help: |
      The `methods` option in the `#[Route]` attribute allows specifying allowed HTTP methods for a route.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: |
      What is the main advantage of using `#[AsController]` on a controller class?
    answers:
      - { value: 'It allows the controller to be used as a console command.', correct: false }
      - { value: 'It explicitly declares the class as a controller, making it a service and enabling autowiring for its action methods.', correct: true }
      - { value: 'It automatically generates a Twig template for the controller.', correct: false }
      - { value: 'It makes the controller accessible via a direct URL without defining a route.', correct: false }
    help: |
      `#[AsController]` ensures the controller is treated as a service, which is crucial for features like autowiring dependencies into its action methods.
      https://symfony.com/doc/current/controller/service.html#controllers-as-services

  -
    question: |
      Which of the following is a valid way to retrieve a specific cookie named `user_id` from the `Request` object?
    answers:
      - { value: '`$request->cookies->get(''user_id'');`', correct: true }
      - { value: '`$request->getCookie(''user_id'');`', correct: false }
      - { value: '`$request->headers->get(''Cookie'')[''user_id''];`', correct: false }
      - { value: '`$_COOKIE[''user_id''];`', correct: false }
    help: |
      The `cookies` property of the `Request` object provides access to the request cookies via a `ParameterBag` instance.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: |
      You want to redirect to a route named `app_product_show` and pass an `id` parameter. Which code snippet is correct?
    answers:
      - { value: '`return $this->redirectToRoute(''app_product_show'', [''id'' => $productId]);`', correct: true }
      - { value: '`return $this->redirect($this->generateUrl(''app_product_show'', [''id'' => $productId]));`', correct: false }
      - { value: '`return $this->forward(''app_product_show'', [''id'' => $productId]);`', correct: false }
      - { value: '`return new RedirectResponse(''app_product_show'', [''id'' => $productId]);`', correct: false }
    help: |
      `redirectToRoute()` is the preferred helper for redirecting to named routes with parameters.
      https://symfony.com/doc/current/controller.html#redirecting

  -
    question: |
      What is the default HTTP status code for a redirect performed by `redirectToRoute()` or `redirect()`?
    answers:
      - { value: '`200 OK`', correct: false }
      - { value: '`301 Moved Permanently`', correct: false }
      - { value: '`302 Found`', correct: true }
      - { value: '`303 See Other`', correct: false }
    help: |
      The default status code for redirects in Symfony is `302 Found`, indicating a temporary redirect.
      https://symfony.com/doc/current/controller.html#redirecting

  -
    question: |
      Which of the following is the correct way to retrieve a specific flash message type (e.g., 'error') and remove it from the session?
    answers:
      - { value: '`$this->session->getFlashBag()->get(''error'');`', correct: true }
      - { value: '`$this->getFlashBag()->peek(''error'');`', correct: false }
      - { value: '`$this->session->getFlashBag()->all()[''error''];`', correct: false }
      - { value: '`$this->get(''session'')
          ->getFlashBag()
          ->fetch(''error'');`', correct: false }
    help: |
      The `get()` method on the `FlashBag` retrieves and removes messages of a specific type.
      https://symfony.com/doc/current/controller/sessions.html#retrieving-flash-messages

  -
    question: |
      You have a controller method that expects a `DateTimeImmutable` object from a route parameter named `date`. How can Symfony automatically convert the string date from the URL into this object?
    answers:
      - { value: 'By using a custom `DateTimeImmutableValueResolver`.', correct: true }
      - { value: 'Symfony automatically converts all string parameters to objects if type-hinted.', correct: false }
      - { value: 'This requires manual conversion within the controller method.', correct: false }
      - { value: 'By configuring a specific format in the routing definition.', correct: false }
    help: |
      Symfony has a built-in argument value resolver that can convert string representations of dates into `DateTime` or `DateTimeImmutable` objects when type-hinted.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#datetime-objects

  -
    question: |
      What is the primary purpose of the `terminate()` method on the `Kernel` in `public/index.php`?
    answers:
      - { value: 'To send the HTTP response to the client.', correct: false }
      - { value: 'To perform cleanup tasks after the response has been sent, such as flushing the logger or sending emails.', correct: true }
      - { value: 'To stop the execution of the PHP script immediately.', correct: false }
      - { value: 'To handle exceptions that occurred during request processing.', correct: false }
    help: |
      The `terminate()` method is called after the response has been sent to the client, allowing for post-response tasks without delaying the user.
      https://symfony.com/doc/current/components/http_kernel.html#the-kernel-terminate-event

  -
    question: |
      You want to retrieve a specific query parameter, `category`, but if it's not present, you want to use `null`. Which code snippet is correct?
    answers:
      - { value: '`$category = $request->query->get(''category'');`', correct: true }
      - { value: '`$category = $request->query->get(''category'', null);`', correct: true }
      - { value: '`$category = $request->get(''category'');`', correct: false }
      - { value: '`$category = $request->query[''category'] ?? null;`', correct: false }
    help: |
      The `get()` method of `ParameterBag` (used by `query`, `request`, `attributes`) returns `null` by default if the key is not found, or you can explicitly provide `null` as the default value.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: |
      Which of the following describes the `RequestStack` service in Symfony?
    answers:
      - { value: 'It stores all incoming HTTP requests in a database.', correct: false }
      - { value: 'It provides access to the current master request and any sub-requests.', correct: true }
      - { value: 'It is a deprecated service in Symfony 7.', correct: false }
      - { value: 'It is used exclusively for handling AJAX requests.', correct: false }
    help: |
      The `RequestStack` service allows you to access the current request, especially useful when dealing with sub-requests (e.g., from `forward()`).
      https://symfony.com/doc/current/components/http_kernel.html#request-stack

  -
    question: |
      What is the purpose of the `#[MapEntity]` attribute (from `SensioFrameworkExtraBundle` or `symfony/doctrine-bridge` in newer versions) when used in a controller argument?
    answers:
      - { value: 'To automatically convert a route parameter into a Doctrine entity by fetching it from the database.', correct: true }
      - { value: 'To map request payload data to an entity.', correct: false }
      - { value: 'To automatically create a new entity instance.', correct: false }
      - { value: 'To validate an entity before persisting it.', correct: false }
    help: |
      `#[MapEntity]` (or `ParamConverter` functionality) simplifies fetching Doctrine entities directly into controller arguments based on route parameters.
      https://symfony.com/doc/current/bundles/SensioFrameworkExtraBundle/annotations/converters.html (Note: While `SensioFrameworkExtraBundle` is often mentioned, the core functionality for `#[MapEntity]` is now in `symfony/doctrine-bridge` for Symfony 6+).

  -
    question: |
      You want to retrieve a flash message and ensure it is not removed from the session after retrieval. Which method would you use?
    answers:
      - { value: '`$this->session->getFlashBag()->peek(''notice'');`', correct: true }
      - { value: '`$this->session->getFlashBag()->get(''notice'');`', correct: false }
      - { value: '`$this->peekFlash(''notice'');`', correct: false }
      - { value: '`$this->session->getFlashBag()->keep(''notice'');`', correct: false }
    help: |
      The `peek()` method retrieves a flash message without removing it from the session.
      https://symfony.com/doc/current/controller/sessions.html#retrieving-flash-messages

  -
    question: |
      Which of the following is true about the `Response` object's `send()` method?
    answers:
      - { value: 'It is typically called directly within a controller action.', correct: false }
      - { value: 'It sends the HTTP headers and content to the client.', correct: true }
      - { value: 'It automatically terminates the PHP script after execution.', correct: false }
      - { value: 'It is only used for `JsonResponse` objects.', correct: false }
    help: |
      The `send()` method is usually called by the `Kernel` after the controller has returned the `Response` object, not directly by the controller itself.
      https://symfony.com/doc/current/components/http_foundation.html#sending-the-response

  -
    question: |
      What is the primary purpose of the `#[MapDateTime]` attribute in Symfony 7?
    answers:
      - { value: 'To map a string from a route or query parameter to a `DateTime` or `DateTimeImmutable` object.', correct: true }
      - { value: 'To format a `DateTime` object for display in a template.', correct: false }
      - { value: 'To validate if a string is a valid date format.', correct: false }
      - { value: 'To convert a timestamp to a `DateTime` object.', correct: false }
    help: |
      The `#[MapDateTime]` attribute simplifies the conversion of date/time strings from request attributes or query parameters into `DateTime` or `DateTimeImmutable` objects.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#mapdatetime

  -
    question: |
      When is the `kernel.response` event dispatched in Symfony?
    answers:
      - { value: 'Before the controller is executed.', correct: false }
      - { value: 'After the controller has returned a `Response` object, but before it is sent to the client.', correct: true }
      - { value: 'After the response has been sent to the client.', correct: false }
      - { value: 'When an exception occurs during request handling.', correct: false }
    help: |
      The `kernel.response` event allows listeners to modify the `Response` object before it is sent to the client.
      https://symfony.com/doc/current/components/http_kernel.html#the-kernel-response-event

  -
    question: |
      Which of the following is a valid way to retrieve the client's IP address from the `Request` object?
    answers:
      - { value: '`$request->getClientIp();`', correct: true }
      - { value: '`$request->getIp();`', correct: false }
      - { value: '`$_SERVER[''REMOTE_ADDR''];`', correct: false }
      - { value: '`$request->server->get(''REMOTE_ADDR'');`', correct: true }
    help: |
      The `getClientIp()` method on the `Request` object is the recommended way to get the client IP, as it handles proxies correctly. You can also access it directly from the `server` parameter bag.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: |
      What is the main purpose of the `#[MapForm]` attribute in Symfony 7?
    answers:
      - { value: 'To automatically handle form submission and validation by mapping form data to a DTO or entity.', correct: true }
      - { value: 'To create a new form instance in the controller.', correct: false }
      - { value: 'To render a form in a Twig template.', correct: false }
      - { value: 'To map query parameters to a form.', correct: false }
    help: |
      The `#[MapForm]` attribute simplifies form handling in controllers by automatically creating, handling, and validating forms based on request data and mapping them to a specified object.
      https://symfony.com/doc/current/controller/map_form.html

  -
    question: |
      You want to retrieve a value from the session and remove it immediately after retrieval. Which method should you use?
    answers:
      - { value: '`$session->get(''key'');`', correct: false }
      - { value: '`$session->remove(''key'');`', correct: false }
      - { value: '`$session->getAndRemove(''key'');`', correct: true }
      - { value: '`$session->pop(''key'');`', correct: false }
    help: |
      The `getAndRemove()` method retrieves a session attribute and then removes it from the session.
      https://symfony.com/doc/current/components/http_foundation.html#session-attributes

  -
    question: |
      Which of the following is typically responsible for creating the `Request` object from global PHP variables (`$_GET`, `$_POST`, `$_SERVER`, etc.)?
    answers:
      - { value: 'The `ControllerResolver`.', correct: false }
      - { value: 'The `Kernel`.', correct: false }
      - { value: 'The `Request::createFromGlobals()` static method, usually called in the front controller.', correct: true }
      - { value: 'The `Router`.', correct: false }
    help: |
      The `Request::createFromGlobals()` static method is used in the front controller (`public/index.php`) to create the `Request` object from the raw PHP global variables.
      https://symfony.com/doc/current/components/http_foundation.html#creating-a-request

  -
    question: |
      What is the purpose of the `#[MapRequestPayload]` attribute when used with a `#[MapQueryParameter]` attribute on the same controller argument?
    answers:
      - { value: 'This combination is not allowed and will throw an error.', correct: false }
      - { value: 'Only `#[MapRequestPayload]` will be effective; `#[MapQueryParameter]` will be ignored.', correct: false }
      - { value: '`#[MapRequestPayload]` handles the request body, while `#[MapQueryParameter]` handles a specific query parameter for the same DTO.', correct: true }
      - { value: 'It means the DTO can be populated from either the request payload or a query parameter.', correct: false }
    help: |
      These attributes serve different purposes and can be used together on different arguments or even on the same DTO if the DTO itself is designed to receive data from both sources. `#[MapRequestPayload]` is for the request body, `#[MapQueryParameter]` is for a single query parameter.
      https://symfony.com/doc/current/controller/request_payload.html
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#mapqueryparameter

  -
    question: |
      You want to retrieve a session attribute named `user_id` but keep it in the session after retrieval. Which method should you use?
    answers:
      - { value: '`$session->get(''user_id'');`', correct: true }
      - { value: '`$session->peek(''user_id'');`', correct: false }
      - { value: '`$session->getAndRemove(''user_id'');`', correct: false }
      - { value: '`$session->has(''user_id'');`', correct: false }
    help: |
      The `get()` method retrieves a session attribute without removing it.
      https://symfony.com/doc/current/components/http_foundation.html#session-attributes

  -
    question: |
      Which of the following is true about the `Session` object in Symfony?
    answers:
      - { value: 'It is automatically started on every request.', correct: false }
      - { value: 'It stores data in the `$_SESSION` superglobal.', correct: true }
      - { value: 'It is primarily used for long-term data storage across multiple user visits.', correct: false }
      - { value: 'It is stateless and does not persist data between requests.', correct: false }
    help: |
      The session is started implicitly when accessed (e.g., by calling `getSession()` on the request or using `addFlash()`). It uses `$_SESSION` internally.
      https://symfony.com/doc/current/controller/sessions.html

  -
    question: |
      What is the purpose of the `#[MapUploadedFile]` attribute when the uploaded file is optional?
    answers:
      - { value: 'You must always provide a default `null` value for the argument.', correct: true }
      - { value: 'The attribute automatically makes the argument optional.', correct: false }
      - { value: 'You need to wrap the `UploadedFile` in an `Optional` type.', correct: false }
      - { value: 'The controller method will not be called if the file is missing.', correct: false }
    help: |
      If an uploaded file mapped by `#[MapUploadedFile]` is optional, the controller argument must be nullable (e.g., `UploadedFile $picture = null`).
      https://symfony.com/doc/current/controller/upload_file.html#optional-uploaded-files

  -
    question: |
      When using `forward()` to an internal controller, what happens to the original request's query parameters and attributes?
    answers:
      - { value: 'They are automatically passed to the forwarded controller.', correct: true }
      - { value: 'They are completely lost and must be manually re-added.', correct: false }
      - { value: 'Only query parameters are passed, not attributes.', correct: false }
      - { value: 'Only attributes are passed, not query parameters.', correct: false }
    help: |
      When you `forward()`, Symfony creates a new sub-request. The original request's query parameters and attributes are typically carried over to the sub-request. You can also pass additional arguments.
      https://symfony.com/doc/current/controller/forwarding.html

  -
    question: |
      Which of the following is the correct way to check if a flash message of a specific type (e.g., 'warning') exists in the session?
    answers:
      - { value: '`$this->session->getFlashBag()->has(''warning'');`', correct: true }
      - { value: '`$this->hasFlash(''warning'');`', correct: false }
      - { value: '`$this->session->getFlashBag()->get(''warning'') !== null;`', correct: false }
      - { value: '`isset($this->session->getFlashBag()[''warning'']);`', correct: false }
    help: |
      The `has()` method on the `FlashBag` checks for the existence of flash messages of a given type.
      https://symfony.com/doc/current/controller/sessions.html#retrieving-flash-messages

  -
    question: |
      What is the purpose of the `#[MapRequestPayload]` attribute when the request body contains invalid data (e.g., malformed JSON or invalid types for DTO properties)?
    answers:
      - { value: 'It will automatically correct the invalid data.', correct: false }
      - { value: 'It will throw a `ValidationException` if the `symfony/validator` component is installed and validation rules are defined.', correct: true }
      - { value: 'It will silently ignore the invalid data.', correct: false }
      - { value: 'It will return a `500 Internal Server Error` without specific details.', correct: false }
    help: |
      When `symfony/validator` is installed and validation constraints are defined on the DTO, `#[MapRequestPayload]` will automatically validate the deserialized data and throw a `ValidationException` on failure.
      https://symfony.com/doc/current/controller/request_payload.html#validation

  -
    question: |
      You want to access the `User` object representing the currently logged-in user in your controller. Which of the following is the recommended way to do this if your controller extends `AbstractController`?
    answers:
      - { value: '`$this->getUser();`', correct: true }
      - { value: '`$this->get(''security.token_storage'')
          ->getToken()
          ->getUser();`', correct: false }
      - { value: '`$this->security->getUser();`', correct: false }
      - { value: '`$this->container->get(''security.token_storage'')
          ->getToken()
          ->getUser();`', correct: false }
    help: |
      The `getUser()` method is a convenient helper provided by `AbstractController` to access the currently authenticated user.
      https://symfony.com/doc/current/security.html#accessing-the-user

  -
    question: |
      What is the primary difference between a `301 Moved Permanently` and a `302 Found` redirect?
    answers:
      - { value: '`301` is for temporary redirects, `302` is for permanent.', correct: false }
      - { value: '`301` indicates the resource has permanently moved, while `302` indicates a temporary redirection.', correct: true }
      - { value: '`301` is used for internal redirects, `302` for external.', correct: false }
      - { value: '`301` is for GET requests, `302` is for POST requests.', correct: false }
    help: |
      `301` is a permanent redirect, signaling that the old URL should no longer be used. `302` is a temporary redirect, implying the resource might return to its original URL.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/301
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/302

  -
    question: |
      Which of the following is the correct way to retrieve all headers from the `Request` object?
    answers:
      - { value: '`$request->headers->all();`', correct: true }
      - { value: '`$request->getHeaders();`', correct: false }
      - { value: '`$request->headers->toArray();`', correct: false }
      - { value: '`$request->allHeaders();`', correct: false }
    help: |
      The `all()` method on the `headers` property (which is a `HeaderBag`) returns all headers as an associative array.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: |
      What is the primary purpose of the `#[MapRequestPayload]` attribute when the request body is empty or missing?
    answers:
      - { value: 'It will create an empty instance of the DTO.', correct: false }
      - { value: 'It will throw an exception if the DTO is not nullable.', correct: true }
      - { value: 'It will return `null` for the DTO argument.', correct: false }
      - { value: 'It will attempt to populate the DTO from query parameters instead.', correct: false }
    help: |
      If the request payload is missing or empty and the DTO argument is not nullable, `#[MapRequestPayload]` will throw an exception because it cannot create the required object.
      https://symfony.com/doc/current/controller/request_payload.html

  -
    question: |
      You want to access the current session ID. How can you do this?
    answers:
      - { value: '`$request->getSession()->getId();`', correct: true }
      - { value: '`$this->session->getId();`', correct: false }
      - { value: '`session_id();`', correct: false }
      - { value: '`$request->getSessionId();`', correct: false }
    help: |
      The `getId()` method on the `Session` object retrieves the current session ID.
      https://symfony.com/doc/current/controller/sessions.html#accessing-the-session

  -
    question: |
      Which of the following is a valid way to define a default value for a route parameter in a controller method signature?
    answers:
      - { value: '`public function show(int $id = 1): Response`', correct: true }
      - { value: '`public function show(int $id = null): Response`', correct: true }
      - { value: '`public function show(int $id): Response { $id ??= 1; }`', correct: false }
      - { value: '`#[Route('/item/{id}', defaults: ['id' => 1])]`', correct: true }
    help: |
      Default values for route parameters can be defined directly in the method signature or in the route definition using the `defaults` option.
      https://symfony.com/doc/current/routing.html#default-values

  -
    question: |
      What is the main advantage of using `#[MapQueryParameter]` over manually retrieving query parameters with `$request->query->get()`?
    answers:
      - { value: 'It automatically handles type conversion and basic validation.', correct: true }
      - { value: 'It makes the query parameter optional by default.', correct: false }
      - { value: 'It allows retrieving multiple query parameters at once.', correct: false }
      - { value: 'It is faster for retrieving parameters.', correct: false }
    help: |
      `#[MapQueryParameter]` provides a more declarative and robust way to handle query parameters, including automatic type conversion and validation.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#mapqueryparameter

  -
    question: |
      You want to get the base URL of the current request (e.g., `http://example.com`). How can you achieve this using the `Request` object?
    answers:
      - { value: '`$request->getUriForPath('/');`', correct: false }
      - { value: '`$request->getSchemeAndHttpHost();`', correct: true }
      - { value: '`$request->getBaseUrl();`', correct: false }
      - { value: '`$request->getHttpHost();`', correct: false }
    help: |
      The `getSchemeAndHttpHost()` method returns the scheme (http/https) and the host, forming the base URL.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: |
      What is the purpose of the `#[MapRequestPayload]` attribute when the controller argument is type-hinted with an interface?
    answers:
      - { value: 'It will automatically find a concrete implementation of the interface to deserialize into.', correct: false }
      - { value: 'It will throw an error, as `#[MapRequestPayload]` requires a concrete class.', correct: true }
      - { value: 'It will attempt to deserialize into a generic `stdClass` object.', correct: false }
      - { value: 'It will only work if the interface has a default implementation configured in the service container.', correct: false }
    help: |
      `#[MapRequestPayload]` needs a concrete class to deserialize the payload into. It cannot directly deserialize into an interface.
      https://symfony.com/doc/current/controller/request_payload.html

  -
    question: |
      Which of the following is the correct way to invalidate the current session in a Symfony controller?
    answers:
      - { value: '`$request->getSession()->invalidate();`', correct: true }
      - { value: '`$this->session->destroy();`', correct: false }
      - { value: '`session_destroy();`', correct: false }
      - { value: '`$request->invalidateSession();`', correct: false }
    help: |
      The `invalidate()` method on the `Session` object invalidates the current session and regenerates the session ID.
      https://symfony.com/doc/current/controller/sessions.html#invalidating-a-session

  -
    question: |
      What is the primary role of the `ArgumentResolver` in Symfony's HttpKernel?
    answers:
      - { value: 'To resolve the controller callable from the request.', correct: false }
      - { value: 'To determine the values for controller method arguments based on the request and registered value resolvers.', correct: true }
      - { value: 'To convert the controller''s return value into a `Response` object.', correct: false }
      - { value: 'To manage the routing process and match URLs to controllers.', correct: false }
    help: |
      The `ArgumentResolver` is responsible for populating the arguments of a controller method.
      https://symfony.com/doc/current/components/http_kernel.html#controller-argument-resolution

  -
    question: |
      You want to retrieve the current URL path (e.g., `/blog/my-post`). How can you achieve this using the `Request` object?
    answers:
      - { value: '`$request->getPathInfo();`', correct: true }
      - { value: '`$request->getUri();`', correct: false }
      - { value: '`$request->getRoute();`', correct: false }
      - { value: '`$request->getUriForPath();`', correct: false }
    help: |
      The `getPathInfo()` method returns the path info of the request (the part of the URL after the script name).
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: |
      Which of the following is true about the `#[MapUploadedFile]` attribute when multiple files are uploaded under the same field name (e.g., `files[]`)?
    answers:
      - { value: 'It will inject an array of `UploadedFile` objects.', correct: true }
      - { value: 'It will only inject the first uploaded file.', correct: false }
      - { value: 'It will throw an error, as it only supports single file uploads.', correct: false }
      - { value: 'It requires a custom argument value resolver to handle arrays of files.', correct: false }
    help: |
      `#[MapUploadedFile]` can handle multiple files for the same field name by injecting an array of `UploadedFile` objects if the argument is type-hinted as an array.
      https://symfony.com/doc/current/controller/upload_file.html#multiple-uploaded-files

  -
    question: |
      What is the purpose of the `#[MapRequestPayload]` attribute when used with the `validation_groups` option?
    answers:
      - { value: 'To specify which validation groups should be applied when deserializing the payload.', correct: true }
      - { value: 'To define new validation groups for the DTO.', correct: false }
      - { value: 'To disable validation for specific fields in the payload.', correct: false }
      - { value: 'To map the payload to different DTOs based on validation groups.', correct: false }
    help: |
      The `validation_groups` option allows you to specify which validation groups the deserialized DTO should be validated against.
      https://symfony.com/doc/current/controller/request_payload.html#validation-groups

  -
    question: |
      You want to retrieve a specific route parameter named `slug` from the `Request` object's attributes. Which code snippet is correct?
    answers:
      - { value: '`$request->attributes->get(''slug'');`', correct: true }
      - { value: '`$request->query->get(''slug'');`', correct: false }
      - { value: '`$request->get(''slug'');`', correct: false }
      - { value: '`$request->route->get(''slug'');`', correct: false }
    help: |
      Route parameters are stored in the `attributes` property of the `Request` object.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: |
      Which of the following is a valid way to set a cookie that expires at the end of the browser session?
    answers:
      - { value: '`$response->headers->setCookie(new Cookie(''name'', ''value'', 0));`', correct: true }
      - { value: '`$response->headers->setCookie(new Cookie(''name'', ''value'', null));`', correct: true }
      - { value: '`$response->headers->setCookie(new Cookie(''name'', ''value''));`', correct: true }
      - { value: '`$response->headers->setCookie(new Cookie(''name'', ''value'', time() + 0));`', correct: false }
    help: |
      Setting the expiration time to `0` or `null` (which is the default for `Cookie` if not provided) makes the cookie a session cookie, expiring when the browser closes.
      https://symfony.com/doc/current/components/http_foundation.html#cookies

  -
    question: |
      What is the purpose of the `#[MapRequestPayload]` attribute when the DTO contains nested objects?
    answers:
      - { value: 'It automatically deserializes nested JSON objects into corresponding nested DTOs.', correct: true }
      - { value: 'It only supports flat DTO structures.', correct: false }
      - { value: 'Nested objects must be manually deserialized after the main DTO.', correct: false }
      - { value: 'It requires a custom normalizer for each nested object.', correct: false }
    help: |
      `#[MapRequestPayload]` leverages the Symfony Serializer component, which can handle complex nested object structures during deserialization.
      https://symfony.com/doc/current/controller/request_payload.html

  -
    question: |
      You want to retrieve the name of the route that matched the current request. How can you do this?
    answers:
      - { value: '`$request->attributes->get(''_route'');`', correct: true }
      - { value: '`$request->getRouteName();`', correct: false }
      - { value: '`$request->get(''route'');`', correct: false }
      - { value: '`$this->getRoute();`', correct: false }
    help: |
      The router stores the matched route name in the `_route` attribute of the `Request` object.
      https://symfony.com/doc/current/routing.html#accessing-route-parameters-and-attributes

  -
    question: |
      What is the primary difference between `Request::createFromGlobals()` and `Request::create()`?
    answers:
      - { value: '`createFromGlobals()` creates a request from PHP globals, while `create()` creates a request from arbitrary data.', correct: true }
      - { value: '`createFromGlobals()` is for GET requests, `create()` is for POST requests.', correct: false }
      - { value: '`createFromGlobals()` is for production, `create()` is for testing.', correct: false }
      - { value: '`createFromGlobals()` is deprecated in Symfony 7.', correct: false }
    help: |
      `createFromGlobals()` is used to build a `Request` object from the actual HTTP request. `create()` is for programmatic creation of requests, often used in tests.
      https://symfony.com/doc/current/components/http_foundation.html#creating-a-request

  -
    question: |
      Which of the following is true about the `AbstractController`'s `render()` method?
    answers:
      - { value: 'It directly outputs the template content to the browser.', correct: false }
      - { value: 'It returns a `Response` object containing the rendered template content.', correct: true }
      - { value: 'It requires the `TwigBundle` to be explicitly enabled.', correct: false }
      - { value: 'It can only render HTML templates.', correct: false }
    help: |
      The `render()` method renders a Twig template and wraps the output in a `Response` object. It requires Twig to be installed and configured.
      https://symfony.com/doc/current/controller.html#rendering-templates

  -
    question: |
      What is the purpose of the `#[MapRequestPayload]` attribute when the request body is not JSON or XML (e.g., plain text)?
    answers:
      - { value: 'It will attempt to deserialize it as a string.', correct: false }
      - { value: 'It will throw an error, as it only supports structured data formats.', correct: true }
      - { value: 'It will automatically detect the content type and deserialize accordingly.', correct: false }
      - { value: 'It will fallback to populating the DTO from query parameters.', correct: false }
    help: |
      `#[MapRequestPayload]` relies on the Serializer component's encoders, which typically support formats like JSON and XML. For plain text or other unstructured data, it will likely fail unless a custom encoder is configured.
      https://symfony.com/doc/current/controller/request_payload.html

  -
    question: |
      You want to retrieve the current request method (e.g., `GET`, `POST`). How can you do this using the `Request` object?
    answers:
      - { value: '`$request->getMethod();`', correct: true }
      - { value: '`$request->getHttpMethod();`', correct: false }
      - { value: '`$_SERVER[''REQUEST_METHOD''];`', correct: false }
      - { value: '`$request->method();`', correct: false }
    help: |
      The `getMethod()` method returns the HTTP method of the request.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: |
      Which of the following is true about the `Session` object's `start()` method?
    answers:
      - { value: 'It must be called manually in every controller action that uses the session.', correct: false }
      - { value: 'It is automatically called by Symfony when session data is accessed or modified.', correct: true }
      - { value: 'It is used to explicitly save session data to storage.', correct: false }
      - { value: 'It is a deprecated method in Symfony 7.', correct: false }
    help: |
      Symfony's session management automatically starts the session when it's needed, so explicit calls to `start()` are rarely necessary.
      https://symfony.com/doc/current/controller/sessions.html#accessing-the-session

  -
    question: |
      What is the purpose of the `#[MapRequestPayload]` attribute when the DTO has a constructor with arguments that are not part of the request payload?
    answers:
      - { value: 'These arguments must be manually provided by a custom argument value resolver.', correct: false }
      - { value: 'The constructor arguments will be automatically autowired by Symfony''s dependency injection container.', correct: true }
      - { value: 'The DTO cannot have a constructor with arguments when used with `#[MapRequestPayload]`.', correct: false }
      - { value: 'The arguments will be populated from query parameters by default.', correct: false }
    help: |
      `#[MapRequestPayload]` integrates with Symfony's autowiring. If the DTO's constructor arguments are services, they will be automatically injected.
      https://symfony.com/doc/current/controller/request_payload.html#dto-constructor-arguments

  -
    question: |
      You want to get the full URL of the current request, including query parameters. How can you achieve this using the `Request` object?
    answers:
      - { value: '`$request->getUri();`', correct: true }
      - { value: '`$request->getUriForPath();`', correct: false }
      - { value: '`$request->getSchemeAndHttpHost() . $request->getRequestUri();`', correct: true }
      - { value: '`$request->getAbsoluteUrl();`', correct: false }
    help: |
      The `getUri()` method returns the full URI. You can also construct it manually using `getSchemeAndHttpHost()` and `getRequestUri()`.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: |
      What is the primary purpose of the `#[MapQueryParameter]` attribute when the query parameter is optional?
    answers:
      - { value: 'The controller argument must be nullable (e.g., `string $param = null`).', correct: true }
      - { value: 'The attribute automatically makes the argument optional.', correct: false }
      - { value: 'The controller method will not be called if the parameter is missing.', correct: false }
      - { value: 'It requires a custom argument value resolver to handle optional parameters.', correct: false }
    help: |
      If a query parameter mapped by `#[MapQueryParameter]` is optional, the controller argument must be nullable or have a default value.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#mapqueryparameter

  -
    question: |
      Which of the following is the correct way to retrieve a specific header value (e.g., `Content-Type`) from the `Request` object, with a default value if not present?
    answers:
      - { value: '`$request->headers->get(''Content-Type'', ''text/html'');`', correct: true }
      - { value: '`$request->getHeaders(''Content-Type'', ''text/html'');`', correct: false }
      - { value: '`$request->headers[''Content-Type''] ?? ''text/html'';`', correct: false }
      - { value: '`$request->header(''Content-Type'', ''text/html'');`', correct: false }
    help: |
      The `get()` method of `HeaderBag` allows specifying a default value if the header is not found.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: |
      What is the purpose of the `#[MapRequestPayload]` attribute when the DTO contains properties that are themselves complex objects (e.g., an `Address` DTO within a `User` DTO)?
    answers:
      - { value: 'It automatically deserializes nested JSON objects into corresponding nested DTOs.', correct: true }
      - { value: 'Nested objects must be manually instantiated and populated.', correct: false }
      - { value: 'It only supports flat DTO structures without nested objects.', correct: false }
      - { value: 'Each nested object requires its own `#[MapRequestPayload]` attribute.', correct: false }
    help: |
      `#[MapRequestPayload]` leverages the Serializer component's capabilities to handle complex nested object structures during deserialization.
      https://symfony.com/doc/current/controller/request_payload.html

  -
    question: |
      You want to retrieve the client's preferred languages from the `Request` object. How can you do this?
    answers:
      - { value: '`$request->getLanguages();`', correct: true }
      - { value: '`$request->headers->getAcceptLanguage();`', correct: false }
      - { value: '`$request->getPreferredLanguage();`', correct: false }
      - { value: '`$request->getLocale();`', correct: false }
    help: |
      The `getLanguages()` method returns an ordered list of languages preferred by the client.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: |
      What is the purpose of the `#[MapQueryParameter]` attribute when the controller argument is type-hinted with an array (e.g., `array $tags`)?
    answers:
      - { value: 'It will automatically collect multiple query parameters with the same name into an array.', correct: true }
      - { value: 'It will only map the first occurrence of the query parameter.', correct: false }
      - { value: 'It requires the query parameter to be sent as a JSON array string.', correct: false }
      - { value: 'This usage is not supported by `#[MapQueryParameter]`.', correct: false }
    help: |
      `#[MapQueryParameter]` can automatically collect multiple values for a parameter into an array if the argument is type-hinted as an array.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#mapqueryparameter

  -
    question: |
      Which of the following is the correct way to check if a session attribute named `is_logged_in` exists?
    answers:
      - { value: '`$request->getSession()->has(''is_logged_in'');`', correct: true }
      - { value: '`$this->session->exists(''is_logged_in'');`', correct: false }
      - { value: '`isset($_SESSION[''is_logged_in'']);`', correct: false }
      - { value: '`$request->hasAttribute(''is_logged_in'');`', correct: false }
    help: |
      The `has()` method on the `Session` object checks for the existence of a session attribute.
      https://symfony.com/doc/current/components/http_foundation.html#session-attributes

  -
    question: |
      What is the purpose of the `#[MapRequestPayload]` attribute when the request body contains a nested array of objects?
    answers:
      - { value: 'It automatically deserializes the array of JSON objects into an array of DTOs.', correct: true }
      - { value: 'It will only deserialize the first object in the array.', correct: false }
      - { value: 'This structure is not supported by `#[MapRequestPayload]`.', correct: false }
      - { value: 'It requires a custom normalizer for the array.', correct: false }
    help: |
      `#[MapRequestPayload]` can handle arrays of complex objects by deserializing them into an array of the specified DTO type.
      https://symfony.com/doc/current/controller/request_payload.html

  -
    question: |
      You want to retrieve the current host name (e.g., `example.com`) from the `Request` object. How can you do this?
    answers:
      - { value: '`$request->getHost();`', correct: true }
      - { value: '`$request->getHttpHost();`', correct: true }
      - { value: '`$_SERVER[''HTTP_HOST''];`', correct: false }
      - { value: '`$request->getUriHost();`', correct: false }
    help: |
      Both `getHost()` and `getHttpHost()` can be used to retrieve the host name. `getHttpHost()` also includes the port if it's non-standard.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: |
      What is the primary purpose of the `#[MapQueryParameter]` attribute when the controller argument is type-hinted with a DTO?
    answers:
      - { value: 'To automatically populate the DTO''s properties from query parameters with matching names.', correct: true }
      - { value: 'To map the entire query string into a single DTO property.', correct: false }
      - { value: 'To validate the DTO against query parameter constraints.', correct: false }
      - { value: 'To convert the DTO into a query string.', correct: false }
    help: |
      `#[MapQueryParameter]` can automatically populate a DTO's properties from query parameters, simplifying argument resolution for multiple parameters.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#mapqueryparameter

  -
    question: |
      Which of the following is the correct way to remove a specific session attribute named `cart_id`?
    answers:
      - { value: '`$request->getSession()->remove(''cart_id'');`', correct: true }
      - { value: '`$this->session->delete(''cart_id'');`', correct: false }
      - { value: '`unset($_SESSION[''cart_id'']);`', correct: false }
      - { value: '`$request->removeAttribute(''cart_id'');`', correct: false }
    help: |
      The `remove()` method on the `Session` object removes a specific session attribute.
      https://symfony.com/doc/current/components/http_foundation.html#session-attributes

  -
    question: |
      What is the purpose of the `#[MapRequestPayload]` attribute when the request body contains data for a DTO, but some DTO properties are missing from the payload?
    answers:
      - { value: 'Missing properties will be set to `null` or their default value if defined in the DTO.', correct: true }
      - { value: 'It will throw an error if any required properties are missing.', correct: false }
      - { value: 'It will attempt to populate missing properties from query parameters.', correct: false }
      - { value: 'The DTO will only be partially populated, and missing properties will remain uninitialized.', correct: false }
    help: |
      The deserialization process will set missing properties to `null` or their default values as defined in the DTO. Validation rules would then determine if `null` is acceptable for required fields.
      https://symfony.com/doc/current/controller/request_payload.html

  -
    question: |
      You want to retrieve the current request scheme (e.g., `http` or `https`). How can you do this using the `Request` object?
    answers:
      - { value: '`$request->getScheme();`', correct: true }
      - { value: '`$request->getProtocol();`', correct: false }
      - { value: '`$_SERVER[''HTTPS''] ? ''https'' : ''http'';`', correct: false }
      - { value: '`$request->isSecure() ? ''https'' : ''http'';`', correct: true }
    help: |
      The `getScheme()` method returns the scheme. `isSecure()` can also be used to determine if it's `https`.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: |
      What is the primary purpose of the `#[MapQueryParameter]` attribute when the query parameter is a complex type (e.g., an enum or a custom object)?
    answers:
      - { value: 'It requires a custom argument value resolver to handle the conversion.', correct: true }
      - { value: 'It automatically converts the string to the complex type if a `__toString()` method exists.', correct: false }
      - { value: 'It will throw an error, as it only supports scalar types.', correct: false }
      - { value: 'It will attempt to deserialize the string as JSON into the complex type.', correct: false }
    help: |
      For complex types that are not automatically handled (like enums or custom DTOs), a custom argument value resolver is needed to perform the conversion from the query parameter string.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#creating-a-custom-argument-value-resolver

  -
    question: |
      Which of the following is the correct way to add a new session attribute named `user_role` with the value `admin`?
    answers:
      - { value: '`$request->getSession()->set(''user_role'', ''admin'');`', correct: true }
      - { value: '`$this->session->add(''user_role'', ''admin'');`', correct: false }
      - { value: '`$_SESSION[''user_role''] = ''admin'';`', correct: false }
      - { value: '`$request->setAttribute(''user_role'', ''admin'');`', correct: false }
    help: |
      The `set()` method on the `Session` object is used to add or update session attributes.
      https://symfony.com/doc/current/components/http_foundation.html#session-attributes

  -
    question: |
      What is the purpose of the `#[MapRequestPayload]` attribute when the DTO contains a property type-hinted with `array`?
    answers:
      - { value: 'It will deserialize a JSON array from the payload into the array property.', correct: true }
      - { value: 'It will only deserialize a single value into the array.', correct: false }
      - { value: 'It requires a custom normalizer for array properties.', correct: false }
      - { value: 'This usage is not supported by `#[MapRequestPayload]`.', correct: false }
    help: |
      `#[MapRequestPayload]` can deserialize JSON arrays into PHP array properties within the DTO.
      https://symfony.com/doc/current/controller/request_payload.html

  -
    question: |
      You want to retrieve the current request's URI scheme and host (e.g., `https://www.example.com`). How can you do this?
    answers:
      - { value: '`$request->getSchemeAndHttpHost();`', correct: true }
      - { value: '`$request->getUriHost();`', correct: false }
      - { value: '`$request->getBaseUrl();`', correct: false }
      - { value: '`$request->getHttpHost();`', correct: false }
    help: |
      The `getSchemeAndHttpHost()` method provides the scheme and host of the current request.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: |
      What is the primary purpose of the `#[MapQueryParameter]` attribute when the query parameter is repeated (e.g., `tags[]=php&tags[]=symfony`)?
    answers:
      - { value: 'It will automatically collect all values into an array if the argument is type-hinted as `array`.', correct: true }
      - { value: 'It will only map the first value of the repeated parameter.', correct: false }
      - { value: 'It requires a custom argument value resolver to handle repeated parameters.', correct: false }
      - { value: 'This usage is not supported by `#[MapQueryParameter]`.', correct: false }
    help: |
      `#[MapQueryParameter]` can automatically handle repeated query parameters by injecting them as an array if the controller argument is type-hinted as such.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#mapqueryparameter

  -
    question: |
      Which of the following is the correct way to check if a cookie named `remember_me` exists in the current request?
    answers:
      - { value: '`$request->cookies->has(''remember_me'');`', correct: true }
      - { value: '`$request->hasCookie(''remember_me'');`', correct: false }
      - { value: '`isset($_COOKIE[''remember_me'']);`', correct: false }
      - { value: '`$request->cookies[''remember_me''] !== null;`', correct: false }
    help: |
      The `has()` method on the `cookies` property (a `ParameterBag`) checks for the existence of a cookie.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data