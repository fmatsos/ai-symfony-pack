category: Controllers

questions:
  -
    question: >
      Which of the following is the recommended naming convention for a controller class in Symfony 7?
    answers:
      - { value: "CamelCase ending with 'Controller', e.g., `ProductController`.", correct: true }
      - { value: "Snake_case ending with '_controller', e.g., `product_controller`.", correct: false }
      - { value: "Any valid PHP class name, as long as it's mapped in routing.", correct: false }
      - { value: "Kebab-case, e.g., `product-controller`.", correct: false }
    help: |
      Symfony's best practices suggest naming controller classes with CamelCase and appending 'Controller' to them.
      https://symfony.com/doc/current/controller.html#controller-naming-conventions

  -
    question: |
      Consider the following Symfony controller:

      ```php
      namespace App\Controller;

      use Symfony\Component\HttpFoundation\Response;
      use Symfony\Component\Routing\Attribute\Route;

      class ArticleController
      {
          #[Route('/articles/{slug}', name: 'article_show')]
          public function show(string $slug): Response
          {
              return new Response('Showing article: ' . $slug);
          }
      }
      ```

      Which of the following statements about this controller is TRUE?
    answers:
      - { value: "It must extend `AbstractController` to be a valid Symfony controller.", correct: false }
      - { value: "The `#[Route]` attribute automatically registers this class as a service.", correct: false }
      - { value: "The `show` method is an action method and returns a `Response` object.", correct: true }
      - { value: "The `$slug` argument is automatically resolved from the request path.", correct: true }
    help: |
      A Symfony controller is any PHP callable that returns a `Response` object. While extending `AbstractController` is common, it's not strictly required. Route parameters are automatically injected into action method arguments if their names match.
      https://symfony.com/doc/current/controller.html#creating-a-controller
      https://symfony.com/doc/current/controller/argument_value_resolver.html

  -
    question: >
      What is the primary benefit of making a controller "invokable" by implementing the `__invoke()` method?
    answers:
      - { value: "It allows the controller to be called directly without specifying a method name in the route.", correct: true }
      - { value: "It automatically makes the controller a service without explicit configuration.", correct: false }
      - { value: "It enables automatic dependency injection for all controller arguments.", correct: false }
      - { value: "It forces the controller to return a `JsonResponse`.", correct: false }
    help: |
      An invokable controller uses the `__invoke()` magic method, allowing it to be referenced directly in routing without a specific method name. This is often used for single-action controllers.
      https://symfony.com/doc/current/controller/service.html#invokable-controllers

  -
    question: >
      Which attribute can be used on a controller class to automatically register it as a service, allowing for autowiring in its constructor or action methods?
    answers:
      - { value: "`#[Service]`", correct: false }
      - { value: "`#[AsController]`", correct: true }
      - { value: "`#[Autowire]`", correct: false }
      - { value: "`#[Injectable]`", correct: false }
    help: |
      The `#[AsController]` attribute, introduced in Symfony 6.2, automatically registers a controller class as a service, making it eligible for autowiring.
      https://symfony.com/doc/current/controller/service.html#controller-as-a-service

  -
    question: >
      What is the main purpose of extending `Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController`?
    answers:
      - { value: "It makes the controller automatically public in the service container.", correct: false }
      - { value: "It provides convenient helper methods for common controller tasks like rendering templates, generating URLs, and handling redirects.", correct: true }
      - { value: "It's a mandatory requirement for all Symfony controllers.", correct: false }
      - { value: "It automatically handles form submissions and validation.", correct: false }
    help: |
      `AbstractController` is an optional base class that provides shortcuts to commonly used services and helper methods, simplifying controller code.
      https://symfony.com/doc/current/controller.html#the-base-abstractcontroller-class

  -
    question: |
      You are in a Symfony controller method and want to render a Twig template named `product/detail.html.twig` and pass a `$product` variable to it. Which method from `AbstractController` should you use?
    answers:
      - { value: "`$this->render('product/detail.html.twig', ['product' => $product]);`", correct: true }
      - { value: "`$this->display('product/detail.html.twig', ['product' => $product]);`", correct: false }
      - { value: "`$this->get('twig')->render('product/detail.html.twig', ['product' => $product]);`", correct: false }
      - { value: "`$this->forward('twig', ['template' => 'product/detail.html.twig', 'product' => $product]);`", correct: false }
    help: |
      The `render()` method is the standard way to render Twig templates from an `AbstractController` instance.
      https://symfony.com/doc/current/controller.html#rendering-templates

  -
    question: >
      Which of the following methods is used in `AbstractController` to generate a `RedirectResponse` to a specific named route?
    answers:
      - { value: "`$this->redirect('/some/path');`", correct: false }
      - { value: "`$this->redirectToRoute('app_homepage', ['param' => 'value']);`", correct: true }
      - { value: "`$this->forward('app_homepage');`", correct: false }
      - { value: "`$this->redirectRoute('app_homepage');`", correct: false }
    help: |
      `redirectToRoute()` is a helper method in `AbstractController` that generates a URL for a given route and returns a `RedirectResponse`.
      https://symfony.com/doc/current/controller.html#redirecting

  -
    question: >
      You need to retrieve a configuration parameter named `app.items_per_page` within your Symfony controller. Which `AbstractController` method allows you to do this?
    answers:
      - { value: "`$this->get('parameter_bag')->get('app.items_per_page');`", correct: false }
      - { value: "`$this->getParameter('app.items_per_page');`", correct: true }
      - { value: "`$this->container->getParameter('app.items_per_page');`", correct: false }
      - { value: "`$this->params->get('app.items_per_page');`", correct: false }
    help: |
      The `getParameter()` helper method in `AbstractController` provides a convenient way to access parameters from the service container.
      https://symfony.com/doc/current/controller.html#accessing-configuration-parameters

  -
    question: |
      How can you access the `Symfony\\Component\\HttpFoundation\\Request` object in a Symfony controller action method using autowiring?
    answers:
      - { value: "By calling `$this->getRequest();` if extending `AbstractController`.", correct: false }
      - { value: "By type-hinting the `Request` object as an argument in the action method.", correct: true }
      - { value: "By injecting the `request_stack` service and calling `getCurrentRequest()`.", correct: false }
      - { value: "The `Request` object is globally available and doesn't need to be injected.", correct: false }
    help: |
      Symfony's argument value resolvers automatically inject the `Request` object if it's type-hinted in the controller action method.
      https://symfony.com/doc/current/controller.html#accessing-the-request

  -
    question: |
      Given a `Request` object named `$request` in your controller, how would you retrieve a query parameter named `page` with a default value of `1` if it's not present?
    answers:
      - { value: "`$request->query->get('page', 1);`", correct: true }
      - { value: "`$request->get('page', 1);`", correct: false }
      - { value: "`$request->attributes->get('page', 1);`", correct: false }
      - { value: "`$request->query['page'] ?? 1;`", correct: false }
    help: |
      Query parameters are accessed via the `query` public property of the `Request` object, which is a `ParameterBag`. The `get()` method allows specifying a default value.
      https://symfony.com/doc/current/controller.html#accessing-the-request

  -
    question: >
      Which of the following `Request` object properties would you use to access data sent via a POST request (e.g., from a form submission)?
    answers:
      - { value: "`$request->query`", correct: false }
      - { value: "`$request->request`", correct: true }
      - { value: "`$request->attributes`", correct: false }
      - { value: "`$request->server`", correct: false }
    help: |
      The `request` public property of the `Request` object (a `ParameterBag`) holds parameters from the request body, typically for POST requests.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: >
      What is the correct way to retrieve an HTTP header value (e.g., `User-Agent`) from a `Request` object in a Symfony controller?
    answers:
      - { value: "`$request->headers->get('User-Agent');`", correct: true }
      - { value: "`$request->getHeader('User-Agent');`", correct: false }
      - { value: "`$request->server->get('HTTP_USER_AGENT');`", correct: false }
      - { value: "`$request->attributes->get('User-Agent');`", correct: false }
    help: |
      HTTP headers are accessed via the `headers` public property of the `Request` object, which is a `HeaderBag`.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: >
      Every Symfony controller action method must return an instance of which class or one of its subclasses?
    answers:
      - { value: "`Symfony\\Component\\HttpFoundation\\Request`", correct: false }
      - { value: "`Symfony\\Component\\HttpFoundation\\Response`", correct: true }
      - { value: "`Symfony\\Component\\HttpKernel\\Kernel`", correct: false }
      - { value: "`Symfony\\Component\\Routing\\Route`", correct: false }
    help: |
      A Symfony controller's primary responsibility is to return a `Response` object.
      https://symfony.com/doc/current/controller.html#returning-a-response

  -
    question: |
      You want to return a simple "Hello World!" text response with a 200 OK status code. Which of the following is the most straightforward way to do this in a controller?
    answers:
      - { value: "`return new Response('Hello World!');`", correct: true }
      - { value: "`return $this->renderString('Hello World!');`", correct: false }
      - { value: "`echo 'Hello World!'; return null;`", correct: false }
      - { value: "`return new TextResponse('Hello World!');`", correct: false }
    help: |
      The `Response` class constructor allows setting the content. The default status code is 200 OK.
      https://symfony.com/doc/current/components/http_foundation.html#response-creation

  -
    question: |
      How can you set a custom HTTP status code (e.g., 201 Created) for a `Response` object in Symfony?
    answers:
      - { value: "`$response->setStatusCode(201);`", correct: true }
      - { value: "`$response->status = 201;`", correct: false }
      - { value: "`$response->setHttpCode(201);`", correct: false }
      - { value: "The status code can only be set during `Response` object instantiation.", correct: false }
    help: |
      The `setStatusCode()` method of the `Response` object allows you to change its HTTP status code.
      https://symfony.com/doc/current/components/http_foundation.html#setting-the-status-code

  -
    question: >
      Which `Response` subclass is specifically designed for returning JSON data?
    answers:
      - { value: "`HtmlResponse`", correct: false }
      - { value: "`XmlResponse`", correct: false }
      - { value: "`JsonResponse`", correct: true }
      - { value: "`TextResponse`", correct: false }
    help: |
      `JsonResponse` is a specialized `Response` subclass that automatically sets the `Content-Type` header to `application/json` and encodes the provided data into JSON.
      https://symfony.com/doc/current/components/http_foundation.html#json-response

  -
    question: >
      What is the purpose of the `sendEarlyHints()` method available in `AbstractController`?
    answers:
      - { value: "To send a 302 redirect response before the main content.", correct: false }
      - { value: "To send a 103 Early Hints HTTP response, allowing the browser to preload resources.", correct: true }
      - { value: "To send a 404 Not Found response immediately.", correct: false }
      - { value: "To send a JavaScript snippet to the browser for early processing.", correct: false }
    help: |
      The `sendEarlyHints()` method creates and sends a 103 Early Hints response, which can be used by browsers to preload resources, improving perceived performance.
      https://symfony.com/doc/current/controller.html#early-hints

  -
    question: |
      How can you set a cookie named `my_cookie` with a value of `test_value` that expires in one hour from a Symfony controller?
    answers:
      - { value: |
          ```php
          use Symfony\Component\HttpFoundation\Cookie;
          use Symfony\Component\HttpFoundation\Response;

          $response = new Response();
          $response->headers->setCookie(new Cookie('my_cookie', 'test_value', time() + 3600));
          return $response;
          ```
        , correct: true }
      - { value: "`$this->setCookie('my_cookie', 'test_value', 3600);`", correct: false }
      - { value: "`$request->cookies->set('my_cookie', 'test_value', 3600);`", correct: false }
      - { value: "`setcookie('my_cookie', 'test_value', time() + 3600); return new Response();`", correct: false }
    help: |
      Cookies are managed via the `headers` property of the `Response` object, using the `setCookie()` method with a `Cookie` object.
      https://symfony.com/doc/current/components/http_foundation.html#cookies

  -
    question: >
      To retrieve a cookie named `user_preference` from the current request in a Symfony controller, which of the following is correct?
    answers:
      - { value: "`$request->cookies->get('user_preference');`", correct: true }
      - { value: "`$request->getCookie('user_preference');`", correct: false }
      - { value: "`$_COOKIE['user_preference'];`", correct: false }
      - { value: "`$request->headers->get('Cookie')['user_preference'];`", correct: false }
    help: |
      Cookies sent by the client are available via the `cookies` public property of the `Request` object.
      https://symfony.com/doc/current/components/http_foundation.html#cookies

  -
    question: >
      Which of the following is the correct way to invalidate or delete a cookie named `session_id` in Symfony?
    answers:
      - { value: "`$response->headers->clearCookie('session_id');`", correct: true }
      - { value: "`$response->headers->setCookie(new Cookie('session_id', '', 1));`", correct: true }
      - { value: "`$response->deleteCookie('session_id');`", correct: false }
      - { value: "`$request->cookies->remove('session_id');`", correct: false }
    help: |
      Cookies are deleted by setting their expiration date in the past or by using `clearCookie()`.
      https://symfony.com/doc/current/components/http_foundation.html#cookies

  -
    question: >
      How do you access the session object within a Symfony controller action method?
    answers:
      - { value: "By calling `$this->getSession();` if extending `AbstractController`.", correct: false }
      - { value: "By type-hinting `SessionInterface` as an argument in the action method.", correct: true }
      - { value: "By accessing `$_SESSION` directly.", correct: false }
      - { value: "By injecting the `request_stack` service and then getting the session from the current request.", correct: false }
    help: |
      The `SessionInterface` can be type-hinted in controller action arguments for autowiring.
      https://symfony.com/doc/current/controller.html#accessing-the-session

  -
    question: |
      You want to store a user's preference for their favorite color in the session. Which of the following is the correct way to do this using the `SessionInterface`?
    answers:
      - { value: "`$session->set('favorite_color', 'blue');`", correct: true }
      - { value: "`$session->attributes->set('favorite_color', 'blue');`", correct: false }
      - { value: "`$session['favorite_color'] = 'blue';`", correct: false }
      - { value: "`$session->store('favorite_color', 'blue');`", correct: false }
    help: |
      The `set()` method of the `SessionInterface` is used to store data in the session.
      https://symfony.com/doc/current/components/http_foundation/sessions.html#session-attributes

  -
    question: >
      How can you retrieve a value named `last_visited_page` from the session, providing a default value of `/` if it doesn't exist?
    answers:
      - { value: "`$session->get('last_visited_page', '/');`", correct: true }
      - { value: "`$session->fetch('last_visited_page', '/');`", correct: false }
      - { value: "`$session->attributes->get('last_visited_page', '/');`", correct: false }
      - { value: "`$session->getOrDefault('last_visited_page', '/');`", correct: false }
    help: |
      The `get()` method of the `SessionInterface` allows retrieving data with an optional default value.
      https://symfony.com/doc/current/components/http_foundation/sessions.html#session-attributes

  -
    question: >
      What is a "flash message" in Symfony?
    answers:
      - { value: "A message that appears briefly on the screen and then fades away using JavaScript.", correct: false }
      - { value: "A message stored in the session that is intended to be displayed only for the *next* request and then automatically cleared.", correct: true }
      - { value: "A message that is permanently stored in the database for user notifications.", correct: false }
      - { value: "A message that is sent directly to the browser's console for debugging.", correct: false }
    help: |
      Flash messages are special session attributes that are only available for the next request. They are commonly used for "success" or "error" notifications after a form submission or redirect.
      https://symfony.com/doc/current/controller.html#flash-messages

  -
    question: |
      You want to add a success flash message after a user successfully updates their profile. Which `AbstractController` method should you use?
    answers:
      - { value: "`$this->addFlash('success', 'Profile updated successfully!');`", correct: true }
      - { value: "`$this->get('session')->getFlashBag()->add('success', 'Profile updated successfully!');`", correct: false }
      - { value: "`$this->setFlash('success', 'Profile updated successfully!');`", correct: false }
      - { value: "`$this->session->flash('success', 'Profile updated successfully!');`", correct: false }
    help: |
      The `addFlash()` helper method in `AbstractController` is the simplest way to add flash messages.
      https://symfony.com/doc/current/controller.html#flash-messages

  -
    question: |
      How do you retrieve all flash messages of a specific type (e.g., 'error') in a Twig template?
    answers:
      - { value: "`{% for message in app.flashes('error') %}`", correct: true }
      - { value: "`{% for message in app.session.flashbag.get('error') %}`", correct: false }
      - { value: "`{% for message in app.request.flash('error') %}`", correct: false }
      - { value: "`{% for message in flashes('error') %}`", correct: false }
    help: |
      Flash messages are accessible in Twig via the `app.flashes()` function.
      https://symfony.com/doc/current/controller.html#flash-messages

  -
    question: >
      Which HTTP status code is typically used for a temporary redirect (e.g., after a successful POST request to prevent double submission)?
    answers:
      - { value: "200 OK", correct: false }
      - { value: "301 Moved Permanently", correct: false }
      - { value: "302 Found (or 302 Redirect)", correct: true }
      - { value: "404 Not Found", correct: false }
    help: |
      The 302 Found (or 302 Redirect) status code indicates a temporary redirect, commonly used in the Post/Redirect/Get pattern.
      https://symfony.com/doc/current/controller.html#redirecting

  -
    question: |
      You need to redirect the user to an external URL, `https://example.com/external-page`. Which `AbstractController` method should you use?
    answers:
      - { value: "`$this->redirectToRoute('https://example.com/external-page');`", correct: false }
      - { value: "`$this->redirect('https://example.com/external-page');`", correct: true }
      - { value: "`return new RedirectResponse('https://example.com/external-page');`", correct: true }
      - { value: "`$this->forward('https://example.com/external-page');`", correct: false }
    help: |
      The `redirect()` method creates a `RedirectResponse` to an arbitrary URL. You can also instantiate `RedirectResponse` directly.
      https://symfony.com/doc/current/controller.html#redirecting

  -
    question: |
      What is the difference between `$this->redirect()` and `$this->redirectToRoute()` in `AbstractController`?
    answers:
      - { value: "`redirect()` performs an internal sub-request, while `redirectToRoute()` sends an HTTP redirect.", correct: false }
      - { value: "`redirect()` is for external URLs, while `redirectToRoute()` is for named Symfony routes.", correct: true }
      - { value: "`redirect()` always uses a 301 status, while `redirectToRoute()` always uses a 302 status.", correct: false }
      - { value: "There is no functional difference; they are aliases for the same method.", correct: false }
    help: |
      `redirect()` takes a URL string, while `redirectToRoute()` takes a route name and parameters.
      https://symfony.com/doc/current/controller.html#redirecting

  -
    question: >
      What does the `forward()` method in `AbstractController` do?
    answers:
      - { value: "It sends an HTTP redirect to another controller action.", correct: false }
      - { value: "It creates an internal sub-request to another controller action and returns its `Response`.", correct: true }
      - { value: "It dispatches an event to trigger another controller asynchronously.", correct: false }
      - { value: "It reloads the current page with new query parameters.", correct: false }
    help: |
      The `forward()` method performs an internal sub-request, calling another controller action directly within the current request lifecycle.
      https://symfony.com/doc/current/controller/forwarding.html

  -
    question: |
      When should you use `forward()` instead of `redirectToRoute()` or `redirect()`?
    answers:
      - { value: "When you want to send the user's browser to a different URL.", correct: false }
      - { value: "When you want to reuse controller logic by making an internal call without a browser redirect.", correct: true }
      - { value: "When you need to pass sensitive data directly in the URL.", correct: false }
      - { value: "When you are handling an AJAX request and need to return a JSON response.", correct: false }
    help: |
      `forward()` is for internal sub-requests, useful for embedding content from other controllers or reusing logic. Redirects are for browser-level navigation.
      https://symfony.com/doc/current/controller/forwarding.html

  -
    question: |
      You have a Twig template and want to embed the output of a controller named `App\\Controller\\WidgetController::latestPosts` with a `limit` of 5. Which Twig function should you use?
    answers:
      - { value: "`{{ include('App\\\\Controller\\\\WidgetController::latestPosts', {limit: 5}) }}`", correct: false }
      - { value: "`{{ render(controller('App\\\\Controller\\\\WidgetController::latestPosts', {limit: 5})) }}`", correct: true }
      - { value: "`{{ embed('App\\\\Controller\\\\WidgetController::latestPosts', {limit: 5}) }}`", correct: false }
      - { value: "`{{ render(path('widget_latest_posts', {limit: 5})) }}`", correct: true }
    help: |
      The `render()` Twig function combined with `controller()` or `path()` is used to embed the output of a controller.
      https://symfony.com/doc/current/templates.html#embedding-controllers

  -
    question: >
      Which of the following methods from `AbstractController` should you use to generate a 404 Not Found page?
    answers:
      - { value: "`$this->render('bundles/TwigBundle/views/Exception/error404.html.twig');`", correct: false }
      - { value: "`throw new NotFoundHttpException('Page not found.');`", correct: true }
      - { value: "`$this->createNotFoundException('Page not found.');`", correct: true }
      - { value: "`return new Response('Not Found', 404);`", correct: true }
    help: |
      Throwing a `NotFoundHttpException` (or using the `createNotFoundException()` helper) is the standard way to trigger a 404 error page. Returning a `Response` with a 404 status code is also valid.
      https://symfony.com/doc/current/controller.html#generating-404-pages

  -
    question: >
      When a `NotFoundHttpException` is thrown in a Symfony controller, what typically handles rendering the actual 404 error page?
    answers:
      - { value: "The controller itself, which must catch the exception.", correct: false }
      - { value: "Symfony's exception listener, which catches the exception and renders a suitable error template.", correct: true }
      - { value: "The web server (e.g., Apache or Nginx) directly.", correct: false }
      - { value: "A JavaScript error handler on the client-side.", correct: false }
    help: |
      Symfony's exception handling mechanism, typically via the `ExceptionListener`, catches exceptions like `NotFoundHttpException` and renders the appropriate error page.
      https://symfony.com/doc/current/controller/exceptions.html

  -
    question: |
      You are building an API endpoint that accepts file uploads. Which class represents an uploaded file in Symfony's `Request` object?
    answers:
      - { value: "`Symfony\\Component\\HttpFoundation\\File\\File`", correct: false }
      - { value: "`Symfony\\Component\\HttpFoundation\\File\\UploadedFile`", correct: true }
      - { value: "`SplFileInfo`", correct: false }
      - { value: "`Psr\\Http\\Message\\UploadedFileInterface`", correct: false }
    help: |
      `UploadedFile` is the specific class used by Symfony to represent files uploaded via HTTP.
      https://symfony.com/doc/current/controller/upload_files.html

  -
    question: |
      Consider the following controller action for handling a file upload:

      ```php
      namespace App\Controller;

      use Symfony\Component\HttpFoundation\File\UploadedFile;
      use Symfony\Component\HttpFoundation\Response;
      use Symfony\Component\Routing\Attribute\Route;
      use Symfony\Component\HttpKernel\Attribute\MapUploadedFile;

      class UploadController
      {
          #[Route('/upload/avatar', methods: ['POST'])]
          public function uploadAvatar(
              #[MapUploadedFile] UploadedFile $avatar
          ): Response {
              // ...
              return new Response('File uploaded!');
          }
      }
      ```

      What does the `#[MapUploadedFile]` attribute do in this context?
    answers:
      - { value: "It automatically moves the uploaded file to a permanent directory.", correct: false }
      - { value: "It validates the uploaded file's size and MIME type.", correct: false }
      - { value: "It automatically maps the uploaded file from the request to the `$avatar` argument.", correct: true }
      - { value: "It encrypts the uploaded file before processing.", correct: false }
    help: |
      The `#[MapUploadedFile]` attribute is an argument value resolver that automatically injects an `UploadedFile` object into the controller argument, provided the argument name matches the file input name.
      https://symfony.com/doc/current/controller/upload_files.html#mapping-uploaded-files-to-controller-arguments

  -
    question: >
      After an `UploadedFile` object is received in a controller, what is the recommended method to move it to a permanent storage location?
    answers:
      - { value: "`$uploadedFile->move('/path/to/storage', 'new_filename.jpg');`", correct: true }
      - { value: "`$uploadedFile->save('/path/to/storage', 'new_filename.jpg');`", correct: false }
      - { value: "`copy($uploadedFile->getPathname(), '/path/to/storage/new_filename.jpg');`", correct: false }
      - { value: "`$uploadedFile->persist('/path/to/storage', 'new_filename.jpg');`", correct: false }
    help: |
      The `move()` method of the `UploadedFile` object is used to safely move the uploaded file from its temporary location to a permanent one.
      https://symfony.com/doc/current/controller/upload_files.html#moving-an-uploaded-file

  -
    question: >
      Which of the following is NOT a built-in argument value resolver in Symfony?
    answers:
      - { value: "Resolving route parameters (e.g., `int $id`).", correct: false }
      - { value: "Resolving the `Request` object (e.g., `Request $request`).", correct: false }
      - { value: "Resolving services (e.g., `LoggerInterface $logger`).", correct: false }
      - { value: "Resolving custom objects from a database query without explicit configuration.", correct: false }
      - { value: "Resolving the `SessionInterface`.", correct: false }
      - { value: "Resolving `#[MapEntity]` for Doctrine entities.", correct: false }
      - { value: "Resolving `#[MapRequestPayload]` for request body content.", correct: false }
      - { value: "Resolving `#[MapQueryParameter]` for query string parameters.", correct: false }
    help: |
      Symfony has many built-in argument value resolvers. While `#[MapEntity]` exists, it's specific to Doctrine and not a generic "custom object from database query without explicit configuration". The question asks what is NOT a built-in resolver. All others listed are examples of built-in resolution. The `#[MapEntity]` is a specific resolver for Doctrine entities, but the wording "custom objects from a database query without explicit configuration" is too broad and implies a generic resolver for *any* custom object from *any* database query, which is not built-in without specific configuration (like `#[MapEntity]` for Doctrine).
      https://symfony.com/doc/current/controller/argument_value_resolver.html

  -
    question: |
      Consider the following controller action:

      ```php
      namespace App\Controller;

      use Symfony\Component\HttpFoundation\Response;
      use Symfony\Component\Routing\Attribute\Route;

      class ProductController
      {
          #[Route('/product/{id}', name: 'product_show')]
          public function show(int $id): Response
          {
              // ...
              return new Response('Product ID: ' . $id);
          }
      }
      ```

      How is the `$id` argument automatically populated by Symfony?
    answers:
      - { value: "Symfony uses reflection to guess the value from the request body.", correct: false }
      - { value: "The `ArgumentResolver` matches the argument name `$id` with a route parameter of the same name.", correct: true }
      - { value: "The `Request` object's `query` bag is checked for an `id` parameter.", correct: false }
      - { value: "It's a magic variable automatically available in all controller actions.", correct: false }
    help: |
      Symfony's `ArgumentResolver` automatically injects route parameters into controller arguments if their names match.
      https://symfony.com/doc/current/controller/argument_value_resolver.html

  -
    question: |
      You have a custom service `App\\Service\\MailerService` that you want to inject into your controller action. Assuming autowiring is enabled, how would you correctly inject it?
    answers:
      - { value: |
          ```php
          use App\Service\MailerService;
          // ...
          public function sendEmail(MailerService $mailer): Response
          {
              // ...
          }
          ```
        , correct: true }
      - { value: |
          ```php
          // ...
          public function sendEmail(): Response
          {
              $mailer = $this->get('App\\Service\\MailerService');
              // ...
          }
          ```
        , correct: false }
      - { value: |
          ```php
          // ...
          public function sendEmail(#[Inject('mailer_service')] $mailer): Response
          {
              // ...
          }
          ```
        , correct: false }
      - { value: |
          ```php
          // ...
          public function sendEmail(MailerService $mailer = null): Response
          {
              // ...
          }
          ```
        , correct: false }
    help: |
      With autowiring enabled, type-hinting the service class or interface in the controller method argument is sufficient for Symfony to inject it.
      https://symfony.com/doc/current/controller.html#autowiring-services-in-controllers

  -
    question: >
      What is the purpose of a custom argument value resolver in Symfony?
    answers:
      - { value: "To replace Symfony's default argument resolution logic entirely.", correct: false }
      - { value: "To provide values for controller arguments that cannot be resolved by built-in resolvers (e.g., custom value objects).", correct: true }
      - { value: "To validate all incoming request parameters before they reach the controller.", correct: false }
      - { value: "To convert all controller arguments into JSON format.", correct: false }
    help: |
      Custom argument value resolvers allow you to define how specific types of arguments are populated in controller methods, extending Symfony's default resolution capabilities.
      https://symfony.com/doc/current/controller/value_resolver.html

  -
    question: >
      Which interface must a custom argument value resolver implement?
    answers:
      - { value: "`Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolverInterface`", correct: false }
      - { value: "`Symfony\\Component\\HttpKernel\\Controller\\ValueResolverInterface`", correct: true }
      - { value: "`Symfony\\Component\\HttpFoundation\\RequestResolverInterface`", correct: false }
      - { value: "`Symfony\\Component\\DependencyInjection\\ContainerAwareInterface`", correct: false }
    help: |
      Custom argument value resolvers must implement `ValueResolverInterface`.
      https://symfony.com/doc/current/controller/value_resolver.html

  -
    question: |
      Which method of the `ValueResolverInterface` is responsible for determining if the resolver can provide a value for a given argument?
    answers:
      - { value: "`resolve()`", correct: false }
      - { value: "`supports()`", correct: true }
      - { value: "`canResolve()`", correct: false }
      - { value: "`getValue()`", correct: false }
    help: |
      The `supports()` method determines if the resolver is applicable to the current argument.
      https://symfony.com/doc/current/controller/value_resolver.html#creating-a-custom-argument-value-resolver

  -
    question: |
      Which method of the `ValueResolverInterface` is responsible for actually providing the value for the argument?
    answers:
      - { value: "`resolve()`", correct: true }
      - { value: "`supports()`", correct: false }
      - { value: "`getValue()`", correct: false }
      - { value: "`provide()`", correct: false }
    help: |
      The `resolve()` method returns an iterable of values that can be injected into the controller argument.
      https://symfony.com/doc/current/controller/value_resolver.html#creating-a-custom-argument-value-resolver

  -
    question: >
      What is the purpose of the `#[MapQueryParameter]` attribute?
    answers:
      - { value: "To map a query string parameter directly to a controller argument, with optional type conversion and default values.", correct: true }
      - { value: "To map a route parameter to a controller argument.", correct: false }
      - { value: "To map a request body parameter to a controller argument.", correct: false }
      - { value: "To map an uploaded file to a controller argument.", correct: false }
    help: |
      `#[MapQueryParameter]` is an argument attribute that allows mapping a specific query string parameter to a controller argument.
      https://symfony.com/doc/current/controller/argument_attributes.html#mapqueryparameter

  -
    question: |
      Consider the following controller action:

      ```php
      use Symfony\Component\HttpFoundation\Response;
      use Symfony\Component\Routing\Attribute\Route;
      use Symfony\Component\HttpKernel\Attribute\MapQueryParameter;

      class SearchController
      {
          #[Route('/search', name: 'app_search')]
          public function search(
              #[MapQueryParameter('q')] string $query,
              #[MapQueryParameter(name: 'page', default: 1)] int $page
          ): Response {
              // ...
              return new Response("Searching for '{$query}' on page {$page}");
          }
      }
      ```

      If a request is made to `/search?q=symfony`, what will be the value of `$page`?
    answers:
      - { value: "`null`", correct: false }
      - { value: "`0`", correct: false }
      - { value: "`1`", correct: true }
      - { value: "An exception will be thrown because `page` is missing.", correct: false }
    help: |
      The `default` option in `#[MapQueryParameter]` provides a fallback value if the parameter is not present in the query string.
      https://symfony.com/doc/current/controller/argument_attributes.html#mapqueryparameter

  -
    question: >
      Which attribute is used to automatically deserialize the request body (e.g., JSON or XML) into a PHP object or array in a controller argument?
    answers:
      - { value: "`#[MapRequestPayload]`", correct: true }
      - { value: "`#[MapBody]`", correct: false }
      - { value: "`#[Deserialize]`", correct: false }
      - { value: "`#[RequestBody]`", correct: false }
    help: |
      `#[MapRequestPayload]` is used to automatically deserialize the request's content into a PHP object or array.
      https://symfony.com/doc/current/controller/argument_attributes.html#maprequestpayload

  -
    question: >
      What is the primary responsibility of the `HttpKernel` component in Symfony regarding controllers?
    answers:
      - { value: "To render Twig templates returned by controllers.", correct: false }
      - { value: "To resolve the controller callable from the request and execute it.", correct: true }
      - { value: "To manage the database connection for controllers.", correct: false }
      - { value: "To handle all HTTP redirects and responses directly.", correct: false }
    help: |
      The `HttpKernel` component is responsible for handling a request and returning a response, which includes resolving and executing the controller.
      https://symfony.com/doc/current/components/http_kernel.html#the-httpkernel-component

  -
    question: >
      Which event is dispatched by `HttpKernel` *after* the controller callable has been determined but *before* its execution, allowing listeners to modify the controller or its attributes?
    answers:
      - { value: "`kernel.request`", correct: false }
      - { value: "`kernel.response`", correct: false }
      - { value: "`kernel.controller`", correct: true }
      - { value: "`kernel.view`", correct: false }
    help: |
      The `kernel.controller` event is dispatched at this stage, providing an opportunity to interact with or change the controller.
      https://symfony.com/doc/current/reference/events.html#kernel-controller

  -
    question: >
      What is the purpose of the `ControllerResolverInterface` in Symfony?
    answers:
      - { value: "To determine which Twig template a controller should render.", correct: false }
      - { value: "To resolve a PHP callable (the controller) from a `Request` object.", correct: true }
      - { value: "To resolve all arguments for a controller method.", correct: false }
      - { value: "To resolve service dependencies for a controller's constructor.", correct: false }
    help: |
      `ControllerResolverInterface` defines the contract for resolving the controller callable from the request.
      https://symfony.com/doc/current/components/http_kernel.html#controller-resolution

  -
    question: >
      Which of the following is a valid way to define a controller in Symfony 7 using PHP attributes?
    answers:
      - { value: |
          ```php
          // src/Controller/MyController.php
          class MyController
          {
              #[Route('/my-path')]
              public function index(): Response { /* ... */ }
          }
          ```
        , correct: true }
      - { value: |
          ```php
          // src/Controller/MyController.php
          class MyController
          {
              /** @Route("/my-path") */
              public function index(): Response { /* ... */ }
          }
          ```
        , correct: false }
      - { value: |
          ```php
          // src/Controller/MyController.php
          class MyController
          {
              public function index('/my-path'): Response { /* ... */ }
          }
          ```
        , correct: false }
      - { value: |
          ```php
          // src/Controller/MyController.php
          #[Route('/my-path')]
          class MyController
          {
              public function index(): Response { /* ... */ }
          }
          ```
        , correct: true }
    help: |
      The `#[Route]` attribute can be applied to both the class and method level to define routes.
      https://symfony.com/doc/current/controller.html#defining-a-controller

  -
    question: >
      When defining a route using PHP attributes, what is the purpose of the `name` option in `#[Route(path: '/blog', name: 'app_blog_index')]`?
    answers:
      - { value: "It's a descriptive label for debugging purposes only.", correct: false }
      - { value: "It's used to generate URLs for that specific route using the router.", correct: true }
      - { value: "It defines the controller method that will handle the route.", correct: false }
      - { value: "It's a unique identifier for the route within the application's database.", correct: false }
    help: |
      The `name` option provides a unique identifier for the route, allowing it to be referenced for URL generation (e.g., with `url()` or `path()` in Twig, or `generateUrl()` in controllers).
      https://symfony.com/doc/current/routing.html#route-names

  -
    question: >
      Which of the following is a valid way to specify that a controller action should only respond to GET requests using PHP attributes?
    answers:
      - { value: "`#[Route('/path', methods: ['GET'])]`", correct: true }
      - { value: "`#[Route('/path', method: 'GET')]`", correct: false }
      - { value: "`#[Route('/path', httpMethods: ['GET'])]`", correct: false }
      - { value: "`#[Route('/path', requirements: ['_method' => 'GET'])]`", correct: false }
    help: |
      The `methods` option in the `#[Route]` attribute accepts an array of HTTP methods.
      https://symfony.com/doc/current/routing.html#http-method-requirements

  -
    question: >
      What happens if a controller action method does not return a `Response` object?
    answers:
      - { value: "Symfony will automatically render a default template.", correct: false }
      - { value: "A `LogicException` will be thrown, as a controller must always return a `Response`.", correct: true }
      - { value: "The request will hang indefinitely.", correct: false }
      - { value: "Symfony will attempt to convert the return value to a string and use it as the response content.", correct: false }
    help: |
      Symfony's `HttpKernel` expects a `Response` object from the controller. If it doesn't receive one, it will throw a `LogicException`.
      https://symfony.com/doc/current/controller.html#returning-a-response

  -
    question: >
      Which of the following is the correct way to get the current session ID in a Symfony controller?
    answers:
      - { value: "`$session->getId();`", correct: true }
      - { value: "`$session->getSessionId();`", correct: false }
      - { value: "`$session->get('id');`", correct: false }
      - { value: "`$request->getSession()->getId();`", correct: true }
    help: |
      The `getId()` method of the `SessionInterface` (or the session object obtained from the request) returns the current session ID.
      https://symfony.com/doc/current/components/http_foundation/sessions.html#retrieving-session-id

  -
    question: >
      What is the purpose of the `RequestStack` service in Symfony?
    answers:
      - { value: "To store all incoming HTTP requests in a database.", correct: false }
      - { value: "To provide access to the current master request and any sub-requests.", correct: true }
      - { value: "To manage the lifecycle of HTTP responses.", correct: false }
      - { value: "To resolve controller arguments from the request.", correct: false }
    help: |
      The `RequestStack` service allows you to access the current `Request` object, including distinguishing between master requests and sub-requests (e.g., from `forward()`).
      https://symfony.com/doc/current/components/http_foundation/requests.html#request-stack

  -
    question: |
      You are developing a controller that needs to interact with the `router` service. Assuming autowiring, how can you inject the `UrlGeneratorInterface` into your controller action?
    answers:
      - { value: |
          ```php
          use Symfony\Component\Routing\Generator\UrlGeneratorInterface;
          // ...
          public function generateUrl(UrlGeneratorInterface $router): Response
          {
              // ...
          }
          ```
        , correct: true }
      - { value: |
          ```php
          // ...
          public function generateUrl(): Response
          {
              $router = $this->container->get('router');
              // ...
          }
          ```
        , correct: false }
      - { value: |
          ```php
          // ...
          public function generateUrl(Router $router): Response
          {
              // ...
          }
          ```
        , correct: false }
      - { value: |
          ```php
          // ...
          public function generateUrl(#[Autowire('@router')] $router): Response
          {
              // ...
          }
          ```
        , correct: false }
    help: |
      Type-hinting interfaces like `UrlGeneratorInterface` is the standard way to autowire services into controller actions.
      https://symfony.com/doc/current/service_container.html#autowiring-arguments

  -
    question: >
      Which of the following is a valid way to define a controller in `config/routes.yaml` for an invokable class `App\\Controller\\HomepageController`?
    answers:
      - { value: |
          ```yaml
          homepage:
              path: /
              controller: App\Controller\HomepageController
          ```
        , correct: true }
      - { value: |
          ```yaml
          homepage:
              path: /
              controller: App\Controller\HomepageController::__invoke
          ```
        , correct: false }
      - { value: |
          ```yaml
          homepage:
              path: /
              controller: App\Controller\HomepageController::index
          ```
        , correct: false }
      - { value: |
          ```yaml
          homepage:
              path: /
              controller: App\Controller\HomepageController::class
          ```
        , correct: false }
    help: |
      For invokable controllers, you simply reference the class name in the `controller` option.
      https://symfony.com/doc/current/controller/service.html#invokable-controllers

  -
    question: >
      What is the purpose of the `#[MapEntity]` attribute (from DoctrineBridge) when used in a controller argument?
    answers:
      - { value: "To automatically convert a route parameter into a Doctrine entity object.", correct: true }
      - { value: "To map a request body to a Doctrine entity.", correct: false }
      - { value: "To validate the existence of a Doctrine entity in the database.", correct: false }
      - { value: "To automatically persist a Doctrine entity to the database.", correct: false }
    help: |
      `#[MapEntity]` is a powerful argument attribute that automatically fetches a Doctrine entity based on a route parameter.
      https://symfony.com/doc/current/bundles/DoctrineBundle/entities.html#automatically-fetch-entities-from-the-route-parameters

  -
    question: |
      Consider the following controller action:

      ```php
      namespace App\Controller;

      use App\Entity\Post;
      use Symfony\Component\HttpFoundation\Response;
      use Symfony\Component\Routing\Attribute\Route;
      use Symfony\Bridge\Doctrine\Attribute\MapEntity;

      class BlogController
      {
          #[Route('/blog/{slug}', name: 'blog_show')]
          public function show(#[MapEntity(expr: 'repository.findOneBy({"slug": slug})')] Post $post): Response
          {
              // ...
              return new Response('Post title: ' . $post->getTitle());
          }
      }
      ```

      What will happen if no `Post` entity is found for the given `slug`?
    answers:
      - { value: "A `null` value will be injected into `$post`.", correct: false }
      - { value: "A `NotFoundHttpException` will be thrown automatically.", correct: true }
      - { value: "An empty `Post` object will be created and injected.", correct: false }
      - { value: "A `LogicException` will be thrown.", correct: false }
    help: |
      By default, if `#[MapEntity]` cannot find the entity, it throws a `NotFoundHttpException`.
      https://symfony.com/doc/current/bundles/DoctrineBundle/entities.html#404-if-the-entity-is-not-found

  -
    question: >
      Which of the following is the correct way to access the `Request` object's attributes (e.g., route parameters or values set by listeners) in a controller?
    answers:
      - { value: "`$request->attributes->get('param_name');`", correct: true }
      - { value: "`$request->query->get('param_name');`", correct: false }
      - { value: "`$request->request->get('param_name');`", correct: false }
      - { value: "`$request->get('param_name');`", correct: false }
    help: |
      The `attributes` property of the `Request` object (a `ParameterBag`) stores route parameters and other attributes set during the request lifecycle.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: >
      What is the primary role of the `make:controller` command from the Symfony Maker Bundle?
    answers:
      - { value: "To generate a fully functional CRUD controller with all actions.", correct: false }
      - { value: "To generate a new, empty controller class and optionally its corresponding Twig template.", correct: true }
      - { value: "To automatically register all existing controller classes as services.", correct: false }
      - { value: "To create a new route definition for an existing controller.", correct: false }
    help: |
      `make:controller` is a convenient command to quickly scaffold new controller files.
      https://symfony.com/doc/current/controller.html#creating-a-controller

  -
    question: >
      When a controller method is defined with an argument like `public function show(int $id)`, what happens if the corresponding route parameter `id` is not an integer?
    answers:
      - { value: "Symfony will automatically cast the value to an integer.", correct: false }
      - { value: "A `TypeError` will be thrown by PHP.", correct: true }
      - { value: "The argument will be `null`.", correct: false }
      - { value: "Symfony will attempt to find a custom argument value resolver for `int`.", correct: false }
    help: |
      PHP's strict type checking will cause a `TypeError` if the value cannot be coerced to the specified type.
      https://symfony.com/doc/current/controller/argument_value_resolver.html#type-hinting

  -
    question: >
      Which of the following is true about the `Response` object in Symfony?
    answers:
      - { value: "It is immutable; once created, its content or headers cannot be changed.", correct: false }
      - { value: "It represents the HTTP response that will be sent back to the client.", correct: true }
      - { value: "It automatically handles caching headers based on controller logic.", correct: false }
      - { value: "It's primarily used for internal redirects within the application.", correct: false }
    help: |
      The `Response` object encapsulates all parts of an HTTP response. It is mutable.
      https://symfony.com/doc/current/components/http_foundation.html#response-creation

  -
    question: >
      When should you use a `StreamedResponse`?
    answers:
      - { value: "When you need to send a very small amount of data quickly.", correct: false }
      - { value: "When you need to send large files or generate responses piece by piece, without loading the entire content into memory.", correct: true }
      - { value: "When you want to force the browser to download a file instead of displaying it.", correct: false }
      - { value: "When you are returning a JSON API response.", correct: false }
    help: |
      `StreamedResponse` is ideal for large responses or when content is generated progressively, as it sends data in chunks.
      https://symfony.com/doc/current/components/http_foundation/responses.html#streaming-a-response

  -
    question: >
      What is the purpose of the `kernel.view` event in Symfony's request flow?
    answers:
      - { value: "It's dispatched before the controller is executed.", correct: false }
      - { value: "It's dispatched if the controller returns something other than a `Response` object, allowing listeners to convert it into a `Response`.", correct: true }
      - { value: "It's dispatched after the `Response` is sent to the client.", correct: false }
      - { value: "It's used for rendering Twig templates only.", correct: false }
    help: |
      The `kernel.view` event allows converting non-`Response` return values from controllers into `Response` objects (e.g., converting an array into a `JsonResponse`).
      https://symfony.com/doc/current/reference/events.html#kernel-view

  -
    question: >
      Which of the following is true about the order of arguments in a Symfony controller action method?
    answers:
      - { value: "The `Request` object must always be the first argument.", correct: false }
      - { value: "Route parameters must always come before services.", correct: false }
      - { value: "The order of arguments does not matter, as Symfony's argument resolvers match by name and type.", correct: true }
      - { value: "Arguments must be ordered alphabetically.", correct: false }
    help: |
      Symfony's argument resolvers are flexible and can match arguments regardless of their order, based on type hints and names.
      https://symfony.com/doc/current/controller/argument_value_resolver.html#argument-order

  -
    question: >
      When using `#[MapRequestPayload]`, what happens if the incoming request body is not valid JSON (assuming JSON is expected)?
    answers:
      - { value: "The argument will be `null`.", correct: false }
      - { value: "A `BadRequestHttpException` will be thrown automatically.", correct: true }
      - { value: "Symfony will attempt to parse it as XML instead.", correct: false }
      - { value: "The controller will receive an empty object or array.", correct: false }
    help: |
      `#[MapRequestPayload]` performs validation and throws a `BadRequestHttpException` if the payload cannot be deserialized according to the expected format.
      https://symfony.com/doc/current/controller/argument_attributes.html#validation

  -
    question: >
      What is the purpose of the `#[MapQueryString]` attribute?
    answers:
      - { value: "To map the entire query string into a DTO (Data Transfer Object) or array.", correct: true }
      - { value: "To map a single query parameter to a controller argument.", correct: false }
      - { value: "To map the query string to route parameters.", correct: false }
      - { value: "To map the query string to a database query.", correct: false }
    help: |
      `#[MapQueryString]` is used to map the entire query string into a specific DTO or array, often for complex filtering or search criteria.
      https://symfony.com/doc/current/controller/argument_attributes.html#mapquerystring

  -
    question: >
      Which of the following is the correct way to check if a session has been started in a Symfony controller?
    answers:
      - { value: "`$session->isStarted();`", correct: true }
      - { value: "`$session->isActive();`", correct: false }
      - { value: "`$session->hasId();`", correct: false }
      - { value: "`$session->status() === SessionInterface::SESSION_ACTIVE;`", correct: true }
    help: |
      The `isStarted()` method or checking the session status against `SessionInterface::SESSION_ACTIVE` can be used to determine if a session has been started.
      https://symfony.com/doc/current/components/http_foundation/sessions.html#session-status

  -
    question: >
      What is the default HTTP status code for a `RedirectResponse` created by `$this->redirect()` or `$this->redirectToRoute()`?
    answers:
      - { value: "301 Moved Permanently", correct: false }
      - { value: "302 Found", correct: true }
      - { value: "303 See Other", correct: false }
      - { value: "307 Temporary Redirect", correct: false }
    help: |
      The default status code for redirects is 302 Found.
      https://symfony.com/doc/current/controller.html#redirecting

  -
    question: >
      Which of the following best describes the "front controller" pattern as implemented in Symfony?
    answers:
      - { value: "Each URL path maps directly to a separate PHP file that handles the request.", correct: false }
      - { value: "All incoming requests are routed through a single entry point (e.g., `public/index.php`) which then dispatches to the appropriate controller.", correct: true }
      - { value: "A JavaScript file that handles all client-side routing and API calls.", correct: false }
      - { value: "A database table that stores all application routes and their corresponding actions.", correct: false }
    help: |
      The front controller pattern centralizes request handling through a single script, which is `public/index.php` in Symfony.
      https://symfony.com/doc/current/create_framework/front_controller.html

  -
    question: >
      What is the primary benefit of using `#[AsController]` over manually defining controllers as services in `services.yaml`?
    answers:
      - { value: "It allows for faster application startup times.", correct: false }
      - { value: "It simplifies configuration by automatically registering controllers as services, especially with autowiring.", correct: true }
      - { value: "It prevents controllers from being accessible via public URLs.", correct: false }
      - { value: "It enables lazy loading of all controller dependencies.", correct: false }
    help: |
      `#[AsController]` streamlines the process of making controllers services, reducing boilerplate configuration.
      https://symfony.com/doc/current/controller/service.html#controller-as-a-service

  -
    question: >
      Which of the following is a valid way to retrieve the `kernel.project_dir` parameter in an `AbstractController`?
    answers:
      - { value: "`$this->getParameter('kernel.project_dir');`", correct: true }
      - { value: "`$this->container->getParameter('kernel.project_dir');`", correct: false }
      - { value: "`$this->get('kernel')->getProjectDir();`", correct: false }
      - { value: "`$_ENV['APP_PROJECT_DIR'];`", correct: false }
    help: |
      The `getParameter()` helper method is the recommended way to access parameters from `AbstractController`.
      https://symfony.com/doc/current/controller.html#accessing-configuration-parameters

  -
    question: >
      What is the purpose of the `#[MapRequestPayload]` attribute's `validation_groups` option?
    answers:
      - { value: "To specify which groups of validation constraints should be applied during deserialization.", correct: true }
      - { value: "To define the HTTP methods for which the payload should be validated.", correct: false }
      - { value: "To group multiple payload attributes together for easier mapping.", correct: false }
      - { value: "To specify which users are allowed to send this type of payload.", correct: false }
    help: |
      The `validation_groups` option allows you to apply specific validation groups when deserializing the request payload.
      https://symfony.com/doc/current/controller/argument_attributes.html#validation-groups

  -
    question: >
      You want to create a `Response` object with a custom HTTP header `X-Custom-Header` set to `MyValue`. How can you achieve this?
    answers:
      - { value: |
          ```php
          $response = new Response();
          $response->headers->set('X-Custom-Header', 'MyValue');
          return $response;
          ```
        , correct: true }
      - { value: |
          ```php
          $response = new Response();
          $response->addHeader('X-Custom-Header', 'MyValue');
          return $response;
          ```
        , correct: false }
      - { value: |
          ```php
          $response = new Response(['X-Custom-Header' => 'MyValue']);
          return $response;
          ```
        , correct: false }
      - { value: |
          ```php
          $response = new Response();
          $response->headers['X-Custom-Header'] = 'MyValue';
          return $response;
          ```
        , correct: true }
    help: |
      HTTP headers are managed via the `headers` property (a `HeaderBag`) of the `Response` object, using the `set()` method or array access.
      https://symfony.com/doc/current/components/http_foundation.html#setting-headers

  -
    question: >
      Which of the following is NOT a valid way to pass data from a controller to a Twig template?
    answers:
      - { value: "As an array in the second argument of the `render()` method.", correct: false }
      - { value: "By setting public properties on the controller class that Twig can directly access.", correct: true }
      - { value: "By adding variables to the `Request` attributes and accessing them via `app.request.attributes` in Twig.", correct: false }
      - { value: "By using a custom Twig global variable injected via service configuration.", correct: false }
    help: |
      While you can pass data via the `render()` method, request attributes, or Twig globals, directly accessing public properties of the controller from Twig is not a standard or recommended practice for passing data.
      https://symfony.com/doc/current/controller.html#rendering-templates

  -
    question: >
      What is the purpose of the `#[MapUploadedFile]` attribute's `fileName` option?
    answers:
      - { value: "To define the desired filename when the file is moved.", correct: false }
      - { value: "To specify the name of the file input field in the HTML form.", correct: true }
      - { value: "To set a default filename if the uploaded file has no name.", correct: false }
      - { value: "To specify the maximum allowed filename length.", correct: false }
    help: |
      The `fileName` option (or simply the argument name) specifies which file from the request should be mapped.
      https://symfony.com/doc/current/controller/upload_files.html#mapping-uploaded-files-to-controller-arguments

  -
    question: >
      When developing a RESTful API, which `Response` subclass is most commonly used to return structured data (e.g., for success or error messages)?
    answers:
      - { value: "`BinaryFileResponse`", correct: false }
      - { value: "`StreamedResponse`", correct: false }
      - { value: "`JsonResponse`", correct: true }
      - { value: "`RedirectResponse`", correct: false }
    help: |
      `JsonResponse` is specifically designed for returning JSON data, which is the standard format for most RESTful APIs.
      https://symfony.com/doc/current/components/http_foundation.html#json-response

  -
    question: >
      What is the main difference between `Request::createFromGlobals()` and injecting the `Request` object into a controller action?
    answers:
      - { value: "`createFromGlobals()` is for console commands, while injection is for web requests.", correct: false }
      - { value: "`createFromGlobals()` manually creates a `Request` object from global PHP variables, while injection relies on Symfony's `HttpKernel` and `ArgumentResolver` to provide the current request.", correct: true }
      - { value: "`createFromGlobals()` is deprecated in Symfony 7.", correct: false }
      - { value: "There is no difference; they achieve the same thing.", correct: false }
    help: |
      `createFromGlobals()` is a static factory method, typically used in the front controller. In controllers, the `Request` object is usually injected by the framework.
      https://symfony.com/doc/current/components/http_foundation.html#request-creation

  -
    question: >
      Which of the following is true about the `AbstractController`'s `json()` method?
    answers:
      - { value: "It returns a `Response` object with `Content-Type: text/html`.", correct: false }
      - { value: "It automatically serializes PHP arrays/objects to JSON and sets the `Content-Type` header to `application/json`.", correct: true }
      - { value: "It requires the `serializer` component to be explicitly configured.", correct: false }
      - { value: "It's only available if the `FrameworkBundle` is not installed.", correct: false }
    help: |
      The `json()` helper method (available when `AbstractController` is extended) is a shortcut for creating a `JsonResponse`.
      https://symfony.com/doc/current/controller.html#returning-json-response

  -
    question: >
      What is the purpose of the `#[MapQueryParameter(filter: 'trim')]` option?
    answers:
      - { value: "To remove leading/trailing whitespace from the query parameter value before injection.", correct: true }
      - { value: "To apply a custom filter function to the query parameter.", correct: false }
      - { value: "To filter out the query parameter if its value is empty.", correct: false }
      - { value: "To trim the query parameter name itself.", correct: false }
    help: |
      The `filter` option allows applying a PHP function to the parameter value before it's injected.
      https://symfony.com/doc/current/controller/argument_attributes.html#filtering-query-parameters

  -
    question: >
      Which of the following is the correct way to retrieve all flash messages, regardless of type, and then clear them from the session?
    answers:
      - { value: "`$this->get('session')->getFlashBag()->all();`", correct: true }
      - { value: "`$this->getFlashes();`", correct: false }
      - { value: "`$this->get('session')->getFlashBag()->get('any');`", correct: false }
      - { value: "`$this->getAllFlashes();`", correct: false }
    help: |
      The `all()` method of the `FlashBag` retrieves all messages and clears them.
      https://symfony.com/doc/current/components/http_foundation/sessions.html#flash-messages

  -
    question: >
      What is the purpose of the `#[MapRequestPayload(validation_groups: ['Default', 'api_create'])]` attribute?
    answers:
      - { value: "To apply validation rules from both the 'Default' and 'api_create' groups to the deserialized payload.", correct: true }
      - { value: "To only validate the payload if the request belongs to the 'Default' or 'api_create' group.", correct: false }
      - { value: "To define which fields of the payload belong to which validation group.", correct: false }
      - { value: "To specify the default validation group for the payload.", correct: false }
    help: |
      The `validation_groups` option allows specifying an array of validation groups to apply.
      https://symfony.com/doc/current/controller/argument_attributes.html#validation-groups

  -
    question: >
      Which of the following is true about the `#[MapQueryParameter]` attribute when applied to a non-nullable argument (e.g., `string $name`)?
    answers:
      - { value: "If the parameter is missing, the argument will be `null`.", correct: false }
      - { value: "If the parameter is missing, a `BadRequestHttpException` will be thrown.", correct: true }
      - { value: "If the parameter is missing, Symfony will attempt to find a default value.", correct: false }
      - { value: "The argument will automatically be an empty string if the parameter is missing.", correct: false }
    help: |
      If a non-nullable argument mapped by `#[MapQueryParameter]` is missing, a `BadRequestHttpException` is thrown. To make it optional, make the argument nullable or provide a default value.
      https://symfony.com/doc/current/controller/argument_attributes.html#making-parameters-optional

  -
    question: >
      What is the primary difference between `#[MapQueryParameter]` and manually accessing `$request->query->get()`?
    answers:
      - { value: "`#[MapQueryParameter]` is faster than manual access.", correct: false }
      - { value: "`#[MapQueryParameter]` automatically handles type conversion, default values, and validation, leading to cleaner controller code.", correct: true }
      - { value: "Manual access allows for more advanced filtering options.", correct: false }
      - { value: "`#[MapQueryParameter]` can only be used with GET requests.", correct: false }
    help: |
      `#[MapQueryParameter]` simplifies argument resolution by handling common tasks like type conversion and defaults, reducing boilerplate in controllers.
      https://symfony.com/doc/current/controller/argument_attributes.html#mapqueryparameter

  -
    question: >
      When handling a file upload, what does the `isValid()` method of the `UploadedFile` object indicate?
    answers:
      - { value: "Whether the file's content is valid (e.g., a valid image format).", correct: false }
      - { value: "Whether the file was uploaded successfully via HTTP POST and no upload errors occurred.", correct: true }
      - { value: "Whether the file has been moved to its final destination.", correct: false }
      - { value: "Whether the file's size is within the allowed limits.", correct: false }
    help: |
      `isValid()` checks if the file was uploaded without errors and is a legitimate upload.
      https://symfony.com/doc/current/controller/upload_files.html#moving-an-uploaded-file

  -
    question: >
      What is the purpose of the `#[MapRequestPayload(acceptFormat: 'json')]` option?
    answers:
      - { value: "To specify that the request body must be in JSON format for deserialization.", correct: true }
      - { value: "To specify the desired output format for the response.", correct: false }
      - { value: "To accept any format but prioritize JSON.", correct: false }
      - { value: "To convert the incoming JSON into a different format.", correct: false }
    help: |
      The `acceptFormat` option allows you to explicitly define the expected format of the request payload.
      https://symfony.com/doc/current/controller/argument_attributes.html#accepting-a-specific-format

  -
    question: >
      Which of the following is a valid way to define a route in `config/routes.php` for a controller action `App\\Controller\\ProductController::list`?
    answers:
      - { value: |
          ```php
          use App\Controller\ProductController;
          use Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator;

          return function (RoutingConfigurator $routes): void {
              $routes->add('product_list', '/products')
                  ->controller([ProductController::class, 'list']);
          };
          ```
        , correct: true }
      - { value: |
          ```php
          use App\Controller\ProductController;
          // ...
          $routes->add('product_list', '/products', ProductController::class . '::list');
          ```
        , correct: false }
      - { value: |
          ```php
          // ...
          $routes->add('product_list', '/products', 'App\\Controller\\ProductController::list');
          ```
        , correct: false }
      - { value: |
          ```php
          use App\Controller\ProductController;
          // ...
          $routes->add('product_list', '/products')
              ->controller(ProductController::list);
          ```
        , correct: false }
    help: |
      When using PHP for routing configuration, the `controller()` method expects a callable, typically an array `[ClassName::class, 'methodName']`.
      https://symfony.com/doc/current/routing.html#php-routes

  -
    question: >
      What is the purpose of the `#[MapQueryParameter(name: 'id', type: 'App\\Entity\\User')]` option?
    answers:
      - { value: "To automatically fetch a `User` entity from the database based on the `id` query parameter.", correct: false }
      - { value: "To cast the `id` query parameter to the `App\\Entity\\User` type.", correct: false }
      - { value: "This is an incorrect usage; `type` is not used for entity mapping in `#[MapQueryParameter]`.", correct: true }
      - { value: "To validate that the `id` query parameter corresponds to a valid `User` entity.", correct: false }
    help: |
      `#[MapQueryParameter]` is for basic type conversion of scalar values. For entity mapping, `#[MapEntity]` is used.
      https://symfony.com/doc/current/controller/argument_attributes.html#mapqueryparameter

  -
    question: >
      Which of the following is a valid way to retrieve the `session` service from the service container in a controller that does NOT extend `AbstractController`?
    answers:
      - { value: "By type-hinting `SessionInterface $session` in the constructor or action method.", correct: true }
      - { value: "By calling `Container::get('session');`.", correct: false }
      - { value: "By accessing `$_SESSION` directly.", correct: false }
      - { value: "By calling `Request::getSession();`.", correct: false }
    help: |
      Autowiring by type-hinting is the recommended way to inject services, even without `AbstractController`.
      https://symfony.com/doc/current/service_container.html#autowiring-arguments

  -
    question: >
      What is the purpose of the `#[MapRequestPayload(resolver: 'my_custom_resolver')]` option?
    answers:
      - { value: "To specify a custom argument value resolver to handle the payload deserialization.", correct: true }
      - { value: "To define a custom serialization format for the payload.", correct: false }
      - { value: "To resolve a service that will process the payload after deserialization.", correct: false }
      - { value: "This option does not exist for `#[MapRequestPayload]`.", correct: false }
    help: |
      The `resolver` option allows you to specify a custom argument value resolver to handle the mapping process for the payload.
      https://symfony.com/doc/current/controller/argument_attributes.html#custom-resolver

  -
    question: >
      Which of the following is true about the `Request` object's `getPathInfo()` method?
    answers:
      - { value: "It returns the full URL including the scheme and host.", correct: false }
      - { value: "It returns the path of the request relative to the front controller, without the query string.", correct: true }
      - { value: "It returns the query string parameters as a string.", correct: false }
      - { value: "It returns the base URL of the application.", correct: false }
    help: |
      `getPathInfo()` returns the path part of the URL, excluding the host, scheme, and query string.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data

  -
    question: >
      What is the purpose of the `#[MapQueryParameter(name: 'search', type: 'string[]')]` option?
    answers:
      - { value: "To map a single query parameter named 'search' to an array of strings.", correct: true }
      - { value: "To map multiple query parameters starting with 'search' to an array.", correct: false }
      - { value: "To validate that the 'search' parameter is an array.", correct: false }
      - { value: "This syntax is invalid for `#[MapQueryParameter]`.", correct: false }
    help: |
      The `type` option can be used to specify an array of a certain type, allowing a single query parameter to be mapped to an array.
      https://symfony.com/doc/current/controller/argument_attributes.html#mapping-to-arrays

  -
    question: >
      Which of the following is the correct way to retrieve a specific header (e.g., `Content-Type`) from the `Response` object before sending it?
    answers:
      - { value: "`$response->headers->get('Content-Type');`", correct: true }
      - { value: "`$response->getHeader('Content-Type');`", correct: false }
      - { value: "`$response->headers['Content-Type'];`", correct: true }
      - { value: "`$response->getHeaders()['Content-Type'];`", correct: false }
    help: |
      Headers are accessed via the `headers` property (a `HeaderBag`) of the `Response` object.
      https://symfony.com/doc/current/components/http_foundation.html#setting-headers

  -
    question: >
      What is the purpose of the `#[MapRequestPayload(validationFailedStatusCode: 422)]` option?
    answers:
      - { value: "To specify a custom HTTP status code to return if validation of the payload fails.", correct: true }
      - { value: "To set the status code for a successful payload processing.", correct: false }
      - { value: "To define the status code for an invalid request format.", correct: false }
      - { value: "This option is used for successful validation only.", correct: false }
    help: |
      The `validationFailedStatusCode` option allows customizing the HTTP status code returned when payload validation fails.
      https://symfony.com/doc/current/controller/argument_attributes.html#customizing-the-validation-error-response

  -
    question: >
      Which of the following is true about the `Request` object's `isXmlHttpRequest()` method?
    answers:
      - { value: "It checks if the request's `Content-Type` header is `application/xml`.", correct: false }
      - { value: "It determines if the request was made via AJAX (e.g., by checking the `X-Requested-With` header).", correct: true }
      - { value: "It verifies if the request body contains valid XML.", correct: false }
      - { value: "It's a deprecated method in Symfony 7.", correct: false }
    help: |
      `isXmlHttpRequest()` is a convenience method to check if the request is an AJAX request, typically by looking for the `X-Requested-With: XMLHttpRequest` header.
      https://symfony.com/doc/current/components/http_foundation.html#determining-request-format

  -
    question: >
      What is the purpose of the `#[MapQueryParameter(name: 'sort', enum: 'App\\Enum\\SortOrder')]` option?
    answers:
      - { value: "To map the 'sort' query parameter to an enum case, throwing an error if the value is not a valid enum case.", correct: true }
      - { value: "To sort the query parameters alphabetically.", correct: false }
      - { value: "To define a default sort order if the parameter is missing.", correct: false }
      - { value: "This syntax is used for database sorting.", correct: false }
    help: |
      The `enum` option allows mapping a query parameter directly to a PHP 8.1+ enum, ensuring type safety.
      https://symfony.com/doc/current/controller/argument_attributes.html#mapping-to-enums

  -
    question: >
      When using `#[MapUploadedFile]`, what happens if the specified file input field is not present in the request?
    answers:
      - { value: "A `null` value will be injected into the `UploadedFile` argument.", correct: false }
      - { value: "A `BadRequestHttpException` will be thrown.", correct: true }
      - { value: "An empty `UploadedFile` object will be created.", correct: false }
      - { value: "The controller method will not be called.", correct: false }
    help: |
      If the file input field is missing, `#[MapUploadedFile]` will throw a `BadRequestHttpException` unless the argument is nullable.
      https://symfony.com/doc/current/controller/upload_files.html#making-uploaded-files-optional

  -
    question: >
      Which of the following is the correct way to start a session manually in a Symfony controller if it hasn't been started automatically?
    answers:
      - { value: "`$session->start();`", correct: true }
      - { value: "`$session->open();`", correct: false }
      - { value: "`$session->init();`", correct: false }
      - { value: "Sessions are always started automatically by Symfony.", correct: false }
    help: |
      The `start()` method of the `SessionInterface` can be used to explicitly start the session.
      https://symfony.com/doc/current/components/http_foundation/sessions.html#starting-the-session

  -
    question: >
      What is the purpose of the `#[MapRequestPayload(validation: false)]` option?
    answers:
      - { value: "To disable automatic validation of the deserialized payload.", correct: true }
      - { value: "To disable deserialization of the payload.", correct: false }
      - { value: "To prevent the payload from being mapped to the argument.", correct: false }
      - { value: "To only validate the payload if a specific validation group is provided.", correct: false }
    help: |
      Setting `validation` to `false` explicitly disables the automatic validation step for the mapped payload.
      https://symfony.com/doc/current/controller/argument_attributes.html#disabling-validation

  -
    question: >
      Which of the following is true about the `Request` object's `getClientIp()` method?
    answers:
      - { value: "It always returns the direct IP address of the client, even behind proxies.", correct: false }
      - { value: "It attempts to determine the client's IP address, considering proxy headers like `X-Forwarded-For`.", correct: true }
      - { value: "It returns the IP address of the Symfony server.", correct: false }
      - { value: "It's used to set the client's IP address.", correct: false }
    help: |
      `getClientIp()` tries to get the most reliable client IP address, accounting for trusted proxies.
      https://symfony.com/doc/current/components/http_foundation.html#client-ip-address

  -
    question: >
      What is the purpose of the `#[MapQueryParameter(name: 'ids', type: 'int[]')]` option?
    answers:
      - { value: "To map a single query parameter named 'ids' (e.g., `ids=1,2,3`) into an array of integers.", correct: true }
      - { value: "To map multiple query parameters named 'ids[]' (e.g., `ids[]=1&ids[]=2`) into an array of integers.", correct: true }
      - { value: "To validate that the 'ids' parameter contains only integers.", correct: false }
      - { value: "To sort the 'ids' array after mapping.", correct: false }
    help: |
      The `type: 'int[]'` can handle both comma-separated values in a single parameter and multiple parameters with `[]` syntax.
      https://symfony.com/doc/current/controller/argument_attributes.html#mapping-to-arrays

  -
    question: >
      Which of the following is true about the `Request` object's `getLocale()` method?
    answers:
      - { value: "It returns the default locale configured in `framework.yaml`.", correct: false }
      - { value: "It returns the locale determined for the current request, often from routing or session.", correct: true }
      - { value: "It sets the locale for the current request.", correct: false }
      - { value: "It returns the browser's preferred language.", correct: false }
    help: |
      `getLocale()` returns the locale that has been set for the current request, which can be influenced by routing, session, or browser preferences.
      https://symfony.com/doc/current/components/http_foundation.html#request-locale

  -
    question: >
      What is the purpose of the `#[MapRequestPayload(validationContext: ['groups' => ['Default', 'api_update']])]` option?
    answers:
      - { value: "To pass a custom validation context to the validator, including specific validation groups.", correct: true }
      - { value: "To define the context in which the payload was received (e.g., 'web' or 'api').", correct: false }
      - { value: "To specify the context for error messages.", correct: false }
      - { value: "This option is deprecated in Symfony 7.", correct: false }
    help: |
      The `validationContext` option allows passing an array of options to the validator, including `groups`.
      https://symfony.com/doc/current/controller/argument_attributes.html#validation-context

  -
    question: >
      Which of the following is the correct way to add a `Cache-Control` header with a value of `no-cache` to a `Response` object?
    answers:
      - { value: "`$response->headers->set('Cache-Control', 'no-cache');`", correct: true }
      - { value: "`$response->setCache('no-cache');`", correct: false }
      - { value: "`$response->withHeader('Cache-Control', 'no-cache');`", correct: false }
      - { value: "`$response->headers->add('Cache-Control', 'no-cache');`", correct: false }
    help: |
      The `set()` method of the `HeaderBag` is used to set or overwrite a header.
      https://symfony.com/doc/current/components/http_foundation.html#setting-headers

  -
    question: >
      What is the purpose of the `#[MapQueryParameter(name: 'date', format: 'Y-m-d')]` option?
    answers:
      - { value: "To parse a date string from the query parameter into a `DateTimeInterface` object using the specified format.", correct: true }
      - { value: "To format the output of a `DateTime` object before it's used in the query.", correct: false }
      - { value: "To validate that the date parameter matches the 'Y-m-d' format.", correct: false }
      - { value: "To specify the date format for logging purposes.", correct: false }
    help: |
      The `format` option allows specifying a date format for parsing date strings into `DateTimeInterface` objects.
      https://symfony.com/doc/current/controller/argument_attributes.html#mapping-to-date-time-objects

  -
    question: >
      Which of the following is true about the `Request` object's `isMethodSafe()` method?
    answers:
      - { value: "It checks if the HTTP method is GET, HEAD, or OPTIONS.", correct: true }
      - { value: "It verifies that the request does not contain any malicious input.", correct: false }
      - { value: "It indicates if the request can be safely cached.", correct: false }
      - { value: "It checks if the request was sent over HTTPS.", correct: false }
    help: |
      `isMethodSafe()` returns true for HTTP methods that are considered "safe" (i.e., idempotent and not causing side effects).
      https://symfony.com/doc/current/components/http_foundation.html#determining-request-method

  -
    question: >
      What is the purpose of the `#[MapRequestPayload(validationConstraint: new Assert\\Length(['min' => 5]))]` option?
    answers:
      - { value: "To apply a specific validation constraint directly to the deserialized payload.", correct: true }
      - { value: "To define a global validation constraint for all payloads.", correct: false }
      - { value: "To validate the length of the request body before deserialization.", correct: false }
      - { value: "This option is used for custom error messages.", correct: false }
    help: |
      The `validationConstraint` option allows applying a single validation constraint directly to the mapped payload.
      https://symfony.com/doc/current/controller/argument_attributes.html#applying-a-single-constraint

  -
    question: >
      Which of the following is true about the `Response` object's `setPublic()` method?
    answers:
      - { value: "It makes the response accessible from any domain via CORS.", correct: false }
      - { value: "It marks the response as cacheable by shared caches (e.g., proxies).", correct: true }
      - { value: "It sets the response status code to 200 OK.", correct: false }
      - { value: "It makes the response content visible to all users.", correct: false }
    help: |
      `setPublic()` sets the `Cache-Control` header to `public`, indicating that the response can be cached by any cache.
      https://symfony.com/doc/current/components/http_foundation/responses.html#cache-control-headers

  -
    question: >
      What is the purpose of the `#[MapQueryParameter(name: 'status', enum: 'App\\Enum\\OrderStatus', nullable: true)]` option?
    answers:
      - { value: "To map the 'status' query parameter to an `OrderStatus` enum case, allowing it to be `null` if the parameter is missing or invalid.", correct: true }
      - { value: "To make the `OrderStatus` enum itself nullable.", correct: false }
      - { value: "To specify that the 'status' parameter is optional and defaults to the first enum case.", correct: false }
      - { value: "This option is used for database nullable columns.", correct: false }
    help: |
      The `nullable: true` option allows the argument to be `null` if the query parameter is not present or cannot be mapped.
      https://symfony.com/doc/current/controller/argument_attributes.html#making-parameters-optional

  -
    question: >
      Which of the following is true about the `Response` object's `setPrivate()` method?
    answers:
      - { value: "It makes the response accessible only to authenticated users.", correct: false }
      - { value: "It marks the response as cacheable only by private caches (e.g., the user's browser).", correct: true }
      - { value: "It prevents the response from being logged.", correct: false }
      - { value: "It sets the response status code to 401 Unauthorized.", correct: false }
    help: |
      `setPrivate()` sets the `Cache-Control` header to `private`, indicating that the response should not be cached by shared caches.
      https://symfony.com/doc/current/components/http_foundation/responses.html#cache-control-headers

  -
    question: >
      What is the purpose of the `#[MapRequestPayload(validationFailedHandler: 'App\\Service\\MyValidationErrorHandler')]` option?
    answers:
      - { value: "To specify a custom service that will handle validation errors for the payload.", correct: true }
      - { value: "To define a global error handler for all request payloads.", correct: false }
      - { value: "To log validation failures to a specific service.", correct: false }
      - { value: "This option is used to define the validation rules themselves.", correct: false }
    help: |
      The `validationFailedHandler` option allows you to provide a custom callable or service to handle validation failures.
      https://symfony.com/doc/current/controller/argument_attributes.html#custom-error-handler

  -
    question: >
      Which of the following is true about the `Request` object's `isSecure()` method?
    answers:
      - { value: "It checks if the request was made over HTTPS.", correct: true }
      - { value: "It verifies if the request contains a valid CSRF token.", correct: false }
      - { value: "It indicates if the request came from a trusted source.", correct: false }
      - { value: "It checks if the user is authenticated.", correct: false }
    help: |
      `isSecure()` returns true if the request was made over HTTPS.
      https://symfony.com/doc/current/components/http_foundation.html#determining-request-format

  -
    question: >
      What is the purpose of the `#[MapQueryParameter(name: 'price', transform: 'floatval')]` option?
    answers:
      - { value: "To apply a PHP function (`floatval`) to the query parameter value before injecting it.", correct: true }
      - { value: "To cast the 'price' parameter to a float type.", correct: false }
      - { value: "To validate that the 'price' parameter is a valid float.", correct: false }
      - { value: "This option is used for currency conversion.", correct: false }
    help: |
      The `transform` option allows applying a callable function to the parameter value.
      https://symfony.com/doc/current/controller/argument_attributes.html#transforming-values

  -
    question: >
      Which of the following is true about the `Response` object's `setExpires()` method?
    answers:
      - { value: "It sets the `Expires` HTTP header, specifying a date/time after which the response is considered stale.", correct: true }
      - { value: "It sets the maximum age for the response in seconds.", correct: false }
      - { value: "It defines the duration for which the response should be cached by the browser.", correct: false }
      - { value: "It's used to invalidate a cached response.", correct: false }
    help: |
      `setExpires()` sets the `Expires` header, which is a date/time after which the response should no longer be considered fresh.
      https://symfony.com/doc/current/components/http_foundation/responses.html#cache-control-headers

  -
    question: >
      What is the purpose of the `#[MapRequestPayload(serializationContext: ['groups' => ['read']])]` option?
    answers:
      - { value: "To pass a custom serialization context to the serializer when deserializing the payload, often for specific serialization groups.", correct: true }
      - { value: "To define the serialization format for the response.", correct: false }
      - { value: "To specify which fields should be serialized in the request.", correct: false }
      - { value: "This option is used for logging serialization errors.", correct: false }
    help: |
      The `serializationContext` option allows passing context to the serializer, such as serialization groups, when deserializing the payload.
      https://symfony.com/doc/current/controller/argument_attributes.html#serialization-context

  -
    question: >
      Which of the following is true about the `Request` object's `getPreferredLanguage()` method?
    answers:
      - { value: "It returns the language set by the application's default locale.", correct: false }
      - { value: "It returns the language preferred by the client's browser based on the `Accept-Language` header.", correct: true }
      - { value: "It sets the preferred language for the current request.", correct: false }
      - { value: "It returns the language used in the request URL.", correct: false }
    help: |
      `getPreferredLanguage()` inspects the `Accept-Language` header to determine the client's preferred language.
      https://symfony.com/doc/current/components/http_foundation.html#request-locale

  -
    question: >
      What is the purpose of the `#[MapQueryParameter(name: 'ids', delimiter: '|')]` option?
    answers:
      - { value: "To specify a custom delimiter (e.g., `|`) for splitting a single query parameter string into an array.", correct: true }
      - { value: "To define the delimiter for joining array elements into a query string.", correct: false }
      - { value: "To separate multiple query parameters with a pipe.", correct: false }
      - { value: "This option is used for URL encoding.", correct: false }
    help: |
      The `delimiter` option allows you to specify a character used to split a single string parameter into an array.
      https://symfony.com/doc/current/controller/argument_attributes.html#mapping-to-arrays

  -
    question: >
      Which of the following is true about the `Response` object's `setLastModified()` method?
    answers:
      - { value: "It sets the `Last-Modified` HTTP header, indicating when the resource was last changed.", correct: true }
      - { value: "It sets the date when the response was generated.", correct: false }
      - { value: "It's used for client-side caching only.", correct: false }
      - { value: "It requires an `ETag` header to be present.", correct: false }
    help: |
      `setLastModified()` sets the `Last-Modified` header, which is used for conditional requests and caching.
      https://symfony.com/doc/current/components/http_foundation/responses.html#cache-control-headers