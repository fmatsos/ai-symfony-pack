category: Controllers
questions:
  -
    question: 'Which of the following is the recommended naming convention for a Symfony controller class?'
    answers:
      - { value: 'MyController', correct: false }
      - { value: 'MyControllerController', correct: false }
      - { value: 'App\Controller\MyController', correct: true }
      - { value: 'my_controller', correct: false }
    help: |
      'Symfony controllers are typically PHP classes located in the `src/Controller/` directory and follow standard PHP class naming conventions with a `Controller` suffix. The full namespace is `App\Controller`.
      https://symfony.com/doc/current/controller.html#controller-naming-conventions'
  -
    question: 'What is the recommended naming convention for an action method within a Symfony controller?'
    answers:
      - { value: 'indexAction()', correct: false }
      - { value: 'index()', correct: true }
      - { value: 'doIndex()', correct: false }
      - { value: 'handleIndex()', correct: false }
    help: |
      'Action methods in Symfony controllers are typically named after the action they perform, without an `Action` suffix, e.g., `index()`, `show()`, `new()`.
      https://symfony.com/doc/current/controller.html#controller-naming-conventions'
  -
    question: 'What is the primary purpose of extending `Symfony\Bundle\FrameworkBundle\Controller\AbstractController` in your Symfony controllers?'
    answers:
      - { value: 'It automatically registers the controller as a service.', correct: false }
      - { value: 'It provides convenient helper methods for common controller tasks.', correct: true }
      - { value: 'It enforces a specific directory structure for your controllers.', correct: false }
      - { value: 'It makes the controller invokable by default.', correct: false }
    help: |
      'The `AbstractController` provides shortcuts to common Symfony services and methods like `render()`, `redirectToRoute()`, `json()`, `addFlash()`, etc., simplifying controller code.
      https://symfony.com/doc/current/controller.html#the-base-abstractcontroller-class'
  -
    question: 'Which of the following methods, available in `AbstractController`, is used to render a Twig template and return a `Response` object?'
    answers:
      - { value: '$this->renderView()', correct: false }
      - { value: '$this->display()', correct: false }
      - { value: '$this->render()', correct: true }
      - { value: '$this->template()', correct: false }
    help: |
      'The `render()` method is used to render a Twig template and wrap its output in a `Response` object.
      https://symfony.com/doc/current/controller.html#rendering-templates'
  -
    question: 'How can you access the `Request` object within a Symfony controller action method?'
    answers:
      - { value: 'By calling `$this->getRequest()` if extending `AbstractController`.', correct: false }
      - { value: 'By type-hinting `Symfony\Component\HttpFoundation\Request` as an argument to the action method.', correct: true }
      - { value: 'By accessing the global `$_REQUEST` superglobal.', correct: false }
      - { value: 'By using `$this->container->get("request")`.', correct: false }
    help: |
      'The `Request` object is automatically injected into controller action methods if type-hinted with `Symfony\Component\HttpFoundation\Request`.
      https://symfony.com/doc/current/controller.html#accessing-the-request'
  -
    question: 'Consider the following route definition:
```php
#[Route("/products/{id}", name: "app_product_show")]
public function show(int $id): Response
{
    // ...
}
```
How does Symfony inject the `$id` parameter into the `show` method?'
    answers:
      - { value: 'It automatically retrieves it from the `$_GET` superglobal.', correct: false }
      - { value: 'It uses an argument value resolver to match the route parameter `id` with the method argument `$id`.', correct: true }
      - { value: 'It requires manual retrieval using `$request->query->get("id")`.', correct: false }
      - { value: 'It only works if the controller extends `AbstractController`.', correct: false }
    help: |
      'Symfony\'s argument value resolvers automatically inject route parameters into controller method arguments if their names match.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#built-in-argument-value-resolvers'
  -
    question: 'Which of the following is the correct way to create a simple HTTP `Response` with content "Hello World!" and a 200 OK status code in a Symfony controller?'
    answers:
      - { value: 'return new Response("Hello World!", 200);', correct: true }
      - { value: 'return $this->renderText("Hello World!");', correct: false }
      - { value: 'return new HttpResponse("Hello World!");', correct: false }
      - { value: 'echo "Hello World!"; return null;', correct: false }
    help: |
      'The `Symfony\Component\HttpFoundation\Response` class is used to create HTTP responses. The constructor accepts content and status code.
      https://symfony.com/doc/current/controller.html#returning-a-response'
  -
    question: 'Which HTTP status code is typically used for a temporary redirect (e.g., after a successful form submission to prevent resubmission on refresh)?'
    answers:
      - { value: '200 OK', correct: false }
      - { value: '301 Moved Permanently', correct: false }
      - { value: '302 Found', correct: true }
      - { value: '404 Not Found', correct: false }
    help: |
      'The 302 Found status code indicates a temporary redirect. Symfony\'s `redirectToRoute()` and `redirect()` methods use 302 by default.
      https://symfony.com/doc/current/controller.html#redirecting'
  -
    question: 'You want to redirect a user to a specific route named `app_homepage` with a `name` parameter. Which `AbstractController` helper method should you use?'
    answers:
      - { value: '$this->redirect("/homepage?name=John")', correct: false }
      - { value: '$this->redirectToRoute("app_homepage", ["name" => "John"])', correct: true }
      - { value: '$this->forward("app_homepage", ["name" => "John"])', correct: false }
      - { value: '$this->redirectRoute("app_homepage", ["name" => "John"])', correct: false }
    help: |
      'The `redirectToRoute()` method generates a URL for a given route and returns a `RedirectResponse`.
      https://symfony.com/doc/current/controller.html#redirecting'
  -
    question: 'What is the purpose of the `forward()` method in `AbstractController`?'
    answers:
      - { value: 'To redirect the client to another URL.', correct: false }
      - { value: 'To make an internal sub-request to another controller and return its `Response`.', correct: true }
      - { value: 'To send data to a different server.', correct: false }
      - { value: 'To execute a Twig template directly without a controller.', correct: false }
    help: |
      'The `forward()` method performs an internal sub-request, calling another controller action internally and returning its `Response` object. This is not an HTTP redirect.
      https://symfony.com/doc/current/controller/forwarding.html'
  -
    question: 'When should you use `forward()` instead of a client-side redirect (e.g., `redirectToRoute()`)?'
    answers:
      - { value: 'When you want the browser URL to change.', correct: false }
      - { value: 'When you need to perform an action in another controller and include its output in the current response, without a browser redirect.', correct: true }
      - { value: 'When the target controller is on a different domain.', correct: false }
      - { value: 'When you want to send a 301 Moved Permanently response.', correct: false }
    help: |
      '`forward()` is for internal sub-requests, where the client is unaware of the internal dispatch. Redirects (`redirectToRoute()`) send an HTTP redirect response to the client, causing the browser to make a new request to the new URL.
      https://symfony.com/doc/current/controller/forwarding.html'
  -
    question: 'How can you retrieve data from the query string (e.g., `?page=2&limit=10`) within a Symfony controller action method?'
    answers:
      - { value: '$request->query->get("page")', correct: true }
      - { value: '$request->request->get("page")', correct: false }
      - { value: '$request->attributes->get("page")', correct: false }
      - { value: '$_GET["page"]', correct: false }
    help: |
      'The `query` property of the `Request` object provides access to GET parameters.
      https://symfony.com/doc/current/controller.html#accessing-the-request'
  -
    question: 'To handle a form submission with `POST` data, which `Request` property should you use to access the submitted data?'
    answers:
      - { value: '$request->query', correct: false }
      - { value: '$request->request', correct: true }
      - { value: '$request->attributes', correct: false }
      - { value: '$request->cookies', correct: false }
    help: |
      'The `request` property of the `Request` object provides access to POST parameters.
      https://symfony.com/doc/current/controller.html#accessing-the-request'
  -
    question: 'Which of the following is the correct way to throw a 404 Not Found exception from a Symfony controller if a resource is not found?'
    answers:
      - { value: 'throw new \Exception("Not Found", 404);', correct: false }
      - { value: '$this->createNotFoundException("Resource not found.");', correct: true }
      - { value: 'return new Response("Not Found", 404);', correct: false }
      - { value: 'throw new NotFoundHttpException("Resource not found.");', correct: true }
    help: |
      'Both `AbstractController::createNotFoundException()` and directly throwing `NotFoundHttpException` are valid ways to trigger a 404 response. The `createNotFoundException` helper is a shortcut.
      https://symfony.com/doc/current/controller.html#generating-404-pages'
  -
    question: 'How do you add a flash message named "success" with the content "Item saved successfully!" in a Symfony controller?'
    answers:
      - { value: '$this->get("session")->getFlashBag()->add("success", "Item saved successfully!");', correct: false }
      - { value: '$this->addFlash("success", "Item saved successfully!");', correct: true }
      - { value: '$session->flash("success", "Item saved successfully!");', correct: false }
      - { value: '$this->getFlashBag()->add("success", "Item saved successfully!");', correct: false }
    help: |
      'The `addFlash()` method is a convenient helper in `AbstractController` to add flash messages to the session.
      https://symfony.com/doc/current/controller.html#flash-messages'
  -
    question: 'How do you retrieve all flash messages for a specific type, e.g., "success", in a Twig template after they have been set in a controller?'
    answers:
      - { value: '{{ app.session.flashbag.get("success") }}', correct: false }
      - { value: '{{ app.flashes("success") }}', correct: true }
      - { value: '{{ app.session.get("success_flash") }}', correct: false }
      - { value: '{{ app.request.flash("success") }}', correct: false }
    help: |
      'In Twig, `app.flashes("type")` is used to retrieve and clear flash messages of a given type.
      https://symfony.com/doc/current/controller.html#flash-messages'
  -
    question: 'Which class represents an uploaded file in Symfony and is typically injected into controller methods for file uploads?'
    answers:
      - { value: '`\SplFileInfo`', correct: false }
      - { value: '`Symfony\Component\HttpFoundation\File\File`', correct: false }
      - { value: '`Symfony\Component\HttpFoundation\File\UploadedFile`', correct: true }
      - { value: '`\PHP_FILE`', correct: false }
    help: |
      'The `UploadedFile` class is specifically designed to handle files uploaded via HTTP requests.
      https://symfony.com/doc/current/controller.html#uploading-files'
  -
    question: 'Consider a file upload form with an input field named `my_file`. How can you automatically inject the uploaded file into your controller method using an attribute?'
    answers:
      - { value: '`public function upload(\UploadedFile $my_file)`', correct: false }
      - { value: '`public function upload(#[MapFile] UploadedFile $my_file)`', correct: false }
      - { value: '`public function upload(#[MapUploadedFile] UploadedFile $my_file)`', correct: true }
      - { value: '`public function upload(File $my_file)`', correct: false }
    help: |
      'The `#[MapUploadedFile]` attribute is used to automatically map an uploaded file from the request to an `UploadedFile` object in a controller argument.
      https://symfony.com/doc/current/controller.html#uploading-files'
  -
    question: 'Which of the following is true about how Symfony handles controller arguments by default?'
    answers:
      - { value: 'All arguments must be explicitly retrieved from the `Request` object.', correct: false }
      - { value: 'Symfony uses argument value resolvers to automatically inject values based on type-hints and argument names.', correct: true }
      - { value: 'Only services can be injected into controller arguments.', correct: false }
      - { value: 'Arguments are always passed in the order they appear in the route definition.', correct: false }
    help: |
      'Symfony\'s `ArgumentResolver` uses a collection of `ValueResolverInterface` implementations to determine and inject values for controller arguments.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html'
  -
    question: 'You have a custom service `App\Service\Mailer` that you want to use in your controller. How can you inject it into your controller action method using autowiring?'
    answers:
      - { value: '`public function sendEmail(Mailer $mailer)`', correct: true }
      - { value: '`public function sendEmail(App\Service\Mailer $mailer)`', correct: true }
      - { value: '`public function sendEmail($mailer)` and then `$mailer = $this->container->get(Mailer::class);`', correct: false }
      - { value: '`public function sendEmail(): Response { $mailer = new Mailer(); ... }`', correct: false }
    help: |
      'Symfony\'s autowiring feature allows you to inject services into controller methods by type-hinting the service class or interface. Both `Mailer` (if unique) or the FQCN `App\Service\Mailer` are valid type-hints.
      https://symfony.com/doc/current/controller/service.html#autowiring-action-arguments'
  -
    question: 'Which of the following methods can be used to set a cookie on the `Response` object in a Symfony controller?'
    answers:
      - { value: '`$response->headers->setCookie(new Cookie("name", "value"));`', correct: true }
      - { value: '`$response->setCookie("name", "value");`', correct: false }
      - { value: '`setcookie("name", "value");`', correct: false }
      - { value: '`$response->addHeader("Set-Cookie", "name=value");`', correct: false }
    help: |
      'Cookies are managed via the `headers` property of the `Response` object, using the `setCookie()` method with a `Cookie` object.
      https://symfony.com/doc/current/controller.html#working-with-cookies'
  -
    question: 'How can you retrieve a cookie named `my_cookie` from the `Request` object in a Symfony controller?'
    answers:
      - { value: '`$request->cookies->get("my_cookie")`', correct: true }
      - { value: '`$request->getCookie("my_cookie")`', correct: false }
      - { value: '`$_COOKIE["my_cookie"]`', correct: false }
      - { value: '`$request->headers->get("Cookie")`', correct: false }
    help: |
      'The `cookies` property of the `Request` object provides access to request cookies.
      https://symfony.com/doc/current/controller.html#working-with-cookies'
  -
    question: 'To start or access the session in a Symfony controller, which service or method should you typically use?'
    answers:
      - { value: '`$_SESSION` superglobal directly.', correct: false }
      - { value: '`$request->getSession()`', correct: true }
      - { value: '`$this->get("session")` if extending `AbstractController`.', correct: true }
      - { value: '`new Session()`', correct: false }
    help: |
      'The session can be accessed via `$request->getSession()` or by injecting the `session` service (e.g., `SessionInterface $session`) or using `$this->get("session")` in `AbstractController`.
      https://symfony.com/doc/current/controller.html#using-the-session'
  -
    question: 'Which of the following is a valid way to create a `JsonResponse` in a Symfony controller?'
    answers:
      - { value: '`return new Response(json_encode(["key" => "value"]), 200, ["Content-Type" => "application/json"]);`', correct: true }
      - { value: '`return $this->json(["key" => "value"]);`', correct: true }
      - { value: '`return new JsonResponse(["key" => "value"]);`', correct: true }
      - { value: '`return $this->response(["key" => "value"], "json");`', correct: false }
    help: |
      'All three options are valid. `JsonResponse` is a subclass of `Response` for JSON data, and `AbstractController::json()` is a convenient shortcut.
      https://symfony.com/doc/current/controller.html#returning-json-response'
  -
    question: 'What is the primary benefit of using `#[AsController]` attribute on a controller class in Symfony 7?'
    answers:
      - { value: 'It automatically makes all public methods in the class callable as actions.', correct: false }
      - { value: 'It automatically registers the controller as a service in the dependency injection container.', correct: true }
      - { value: 'It enables automatic routing for all methods within the controller.', correct: false }
      - { value: 'It forces the controller to extend `AbstractController`.', correct: false }
    help: |
      'The `#[AsController]` attribute (or the `controller.service_arguments` tag in services.yaml) marks a controller as a service, allowing for autowiring and dependency injection.
      https://symfony.com/doc/current/controller/service.html#controllers-as-services'
  -
    question: 'Which of the following is NOT a built-in argument value resolver in Symfony?'
    answers:
      - { value: 'Request (for `Symfony\Component\HttpFoundation\Request`)', correct: false }
      - { value: 'Entity (for Doctrine entities)', correct: false }
      - { value: 'Session (for `Symfony\Component\HttpFoundation\Session\SessionInterface`)', correct: false }
      - { value: 'DatabaseConnection (for `Doctrine\DBAL\Connection`)', correct: true }
    help: |
      'Symfony has built-in resolvers for `Request`, entities (`#[MapEntity]`), services (via autowiring), and others like `#[MapQueryParameter]`, `#[MapRequestPayload]`, `#[MapUploadedFile]`. While you can inject `Connection`, there isn\'t a specific "DatabaseConnection" resolver that automatically maps it from a route parameter like entities.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html'
  -
    question: 'You want to display a different error page for 403 Forbidden errors. How can you configure Symfony to use a specific controller for this?'
    answers:
      - { value: 'By creating a `templates/bundles/TwigBundle/Exception/error403.html.twig` template.', correct: true }
      - { value: 'By defining a route `_403` that points to your custom controller.', correct: false }
      - { value: 'By overriding the `kernel.exception` event listener.', correct: true }
      - { value: 'By setting `framework.error_controller` in `config/packages/framework.yaml`.', correct: false }
    help: |
      'Symfony\'s error handling mechanism allows you to customize error pages by creating specific Twig templates (e.g., `error403.html.twig`) or by listening to the `kernel.exception` event.
      https://symfony.com/doc/current/controller/error_pages.html'
  -
    question: 'What is the purpose of the `#[Route]` attribute in a Symfony controller?'
    answers:
      - { value: 'To define the URL path and name for a controller action.', correct: true }
      - { value: 'To specify the HTTP methods allowed for a controller action.', correct: true }
      - { value: 'To automatically register the controller as a service.', correct: false }
      - { value: 'To define the template to be rendered by the action.', correct: false }
    help: |
      'The `#[Route]` attribute is used to configure routing for a controller method, including its path, name, and allowed HTTP methods.
      https://symfony.com/doc/current/routing.html#defining-routes-as-attributes'
  -
    question: 'Which of the following HTTP methods are commonly used for retrieving data and are considered "safe" and "idempotent"?'
    answers:
      - { value: 'GET', correct: true }
      - { value: 'POST', correct: false }
      - { value: 'PUT', correct: false }
      - { value: 'HEAD', correct: true }
      - { value: 'DELETE', correct: false }
    help: |
      'GET and HEAD methods are safe (do not change server state) and idempotent (multiple identical requests have the same effect as a single one).
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods'
  -
    question: 'When returning a `Response` from a controller, what happens if you do not explicitly set the `Content-Type` header?'
    answers:
      - { value: 'Symfony will automatically detect the content type based on the response content.', correct: false }
      - { value: 'The `Content-Type` header will default to `text/html`.', correct: true }
      - { value: 'The browser will not be able to render the content correctly.', correct: false }
      - { value: 'An error will be thrown.', correct: false }
    help: |
      'If not explicitly set, the `Content-Type` header for a `Response` object defaults to `text/html`.
      https://symfony.com/doc/current/components/http_foundation.html#response-content-type'
  -
    question: 'What is an "invokable controller" in Symfony?'
    answers:
      - { value: 'A controller that can be called directly from the command line.', correct: false }
      - { value: 'A controller class that implements the `__invoke()` magic method to handle requests.', correct: true }
      - { value: 'A controller that only handles `GET` requests.', correct: false }
      - { value: 'A controller that is automatically loaded without explicit configuration.', correct: false }
    help: |
      'An invokable controller is a class where the `__invoke()` method serves as the action method, allowing the class itself to be the controller callable.
      https://symfony.com/doc/current/controller/service.html#invokable-controllers'
  -
    question: 'You want to embed the output of another controller (`App\Controller\BlogController::recentArticles`) directly into a Twig template. Which Twig function should you use?'
    answers:
      - { value: '`{{ include("App\\\\Controller\\\\BlogController::recentArticles") }}`', correct: false }
      - { value: '`{{ render(controller("App\\\\Controller\\\\BlogController::recentArticles", {max: 3})) }}`', correct: true }
      - { value: '`{{ embed("App\\\\Controller\\\\BlogController::recentArticles") }}`', correct: false }
      - { value: '`{{ call("App\\\\Controller\\\\BlogController::recentArticles") }}`', correct: false }
    help: |
      'The `render()` Twig function, combined with the `controller()` function, allows you to embed the output of another controller into a template.
      https://symfony.com/doc/current/templates.html#embedding-controllers'
  -
    question: 'Which of the following is a valid way to retrieve a configuration parameter (e.g., `app.my_param`) within an `AbstractController`?'
    answers:
      - { value: '`$this->getParameter("app.my_param")`', correct: true }
      - { value: '`$this->container->getParameter("app.my_param")`', correct: true }
      - { value: '`$this->params->get("app.my_param")`', correct: false }
      - { value: '`$this->get("parameter_bag")->get("app.my_param")`', correct: false }
    help: |
      'Both `$this->getParameter()` (a shortcut in `AbstractController`) and `$this->container->getParameter()` (accessing the container directly) are valid ways to retrieve parameters.
      https://symfony.com/doc/current/controller.html#accessing-configuration-parameters'
  -
    question: 'What is the role of `ControllerResolverInterface` in Symfony\'s HttpKernel?'
    answers:
      - { value: 'To determine which template to render for a given request.', correct: false }
      - { value: 'To resolve the appropriate PHP callable (controller) for a given `Request` object.', correct: true }
      - { value: 'To handle HTTP caching for controller responses.', correct: false }
      - { value: 'To convert controller return values into `Response` objects.', correct: false }
    help: |
      'The `ControllerResolverInterface` defines the contract for resolving the controller callable from a `Request`.
      https://symfony.com/doc/current/components/http_kernel.html#controller-resolution'
  -
    question: 'When using PHP attributes for routing, how can you restrict a route to only accept `POST` and `PUT` requests?'
    answers:
      - { value: '`#[Route("/api/data", methods: ["POST", "PUT"])]`', correct: true }
      - { value: '`#[Route("/api/data", method: "POST|PUT")]`', correct: false }
      - { value: '`#[Route("/api/data", allow: ["POST", "PUT"])]`', correct: false }
      - { value: '`#[Route("/api/data")]` and then check `$request->isMethod()` inside the controller.', correct: false }
    help: |
      'The `methods` option in the `#[Route]` attribute accepts an array of allowed HTTP methods.
      https://symfony.com/doc/current/routing.html#methods'
  -
    question: 'Which of the following is a valid way to set a custom HTTP header (e.g., `X-Custom-Header: MyValue`) on a `Response` object?'
    answers:
      - { value: '`$response->headers->set("X-Custom-Header", "MyValue");`', correct: true }
      - { value: '`$response->setHeader("X-Custom-Header", "MyValue");`', correct: false }
      - { value: '`$response->addHeader("X-Custom-Header", "MyValue");`', correct: false }
      - { value: '`$response->set("X-Custom-Header", "MyValue");`', correct: false }
    help: |
      'The `headers` property of the `Response` object provides methods to manage HTTP headers, including `set()`.
      https://symfony.com/doc/current/components/http_foundation.html#response-headers'
  -
    question: 'What happens if a controller action method does not return a `Symfony\Component\HttpFoundation\Response` object?'
    answers:
      - { value: 'Symfony will automatically convert the return value into a `Response`.', correct: false }
      - { value: 'A `LogicException` will be thrown, indicating the controller must return a `Response`.', correct: true }
      - { value: 'The application will crash with a fatal error.', correct: false }
      - { value: 'The content will be echoed to the browser, but no headers will be sent.', correct: false }
    help: |
      'All Symfony controller actions must return an instance of `Symfony\Component\HttpFoundation\Response`. If not, a `LogicException` is thrown.
      https://symfony.com/doc/current/controller.html#returning-a-response'
  -
    question: 'You need to create a controller that returns a file for download. Which `AbstractController` helper method is most suitable?'
    answers:
      - { value: '`$this->file("/path/to/my_file.pdf")`', correct: true }
      - { value: '`$this->download("/path/to/my_file.pdf")`', correct: false }
      - { value: '`$this->stream("/path/to/my_file.pdf")`', correct: false }
      - { value: '`new BinaryFileResponse("/path/to/my_file.pdf")`', correct: true }
    help: |
      'Both `$this->file()` (a shortcut in `AbstractController`) and directly instantiating `BinaryFileResponse` are used for serving files.
      https://symfony.com/doc/current/controller.html#serving-files'
  -
    question: 'Which of the following is NOT a valid way to define a controller in Symfony?'
    answers:
      - { value: 'A PHP function.', correct: false }
      - { value: 'A class method (e.g., `App\Controller\MyController::index`).', correct: false }
      - { value: 'An anonymous function (Closure).', correct: false }
      - { value: 'A static class property.', correct: true }
    help: |
      'Symfony controllers must be PHP callables: functions, class methods, or Closures. A static class property is not a callable.
      https://symfony.com/doc/current/controller.html#how-controllers-work'
  -
    question: 'What is the primary benefit of using argument value resolvers in Symfony controllers?'
    answers:
      - { value: 'They simplify the process of retrieving data from the `Request` object and converting it to the correct type.', correct: true }
      - { value: 'They allow controllers to be defined as services without extending `AbstractController`.', correct: false }
      - { value: 'They automatically validate all incoming request data against predefined rules.', correct: false }
      - { value: 'They replace the need for routing configurations.', correct: false }
    help: |
      'Argument value resolvers automate the process of populating controller method arguments from the `Request` object, reducing boilerplate code.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html'
  -
    question: 'Which event is dispatched by `HttpKernel` after the controller callable has been determined but before its execution, allowing listeners to modify the controller?'
    answers:
      - { value: '`kernel.request`', correct: false }
      - { value: '`kernel.controller`', correct: true }
      - { value: '`kernel.view`', correct: false }
      - { value: '`kernel.response`', correct: false }
    help: |
      'The `kernel.controller` event is dispatched after the controller has been resolved, providing an opportunity to interact with or even change the controller.
      https://symfony.com/doc/current/components/http_kernel.html#the-kernel-controller-event'
  -
    question: 'When generating a URL to a route named `app_product_edit` with a parameter `id = 123`, which method from `AbstractController` should you use?'
    answers:
      - { value: '`$this->generateUrl("app_product_edit", ["id" => 123])`', correct: true }
      - { value: '`$this->url("app_product_edit", ["id" => 123])`', correct: false }
      - { value: '`$this->path("app_product_edit", ["id" => 123])`', correct: false }
      - { value: '`$this->router->generate("app_product_edit", ["id" => 123])`', correct: true }
    help: |
      'Both `$this->generateUrl()` (a shortcut in `AbstractController`) and `$this->router->generate()` (accessing the router service) are valid for generating URLs.
      https://symfony.com/doc/current/routing.html#generating-urls'
  -
    question: 'You want to ensure a controller action is only accessible via AJAX requests. How can you check for this within the controller?'
    answers:
      - { value: '`if ($request->isXmlHttpRequest())`', correct: true }
      - { value: '`if ($request->isAjax())`', correct: false }
      - { value: '`if ($request->headers->get("X-Requested-With") === "XMLHttpRequest")`', correct: true }
      - { value: '`if ($request->isMethod("AJAX"))`', correct: false }
    help: |
      'The `Request` object provides `isXmlHttpRequest()` (a shortcut) and you can also manually check the `X-Requested-With` header.
      https://symfony.com/doc/current/components/http_foundation.html#checking-the-request-method'
  -
    question: 'What is the purpose of the `RequestStack` service in Symfony?'
    answers:
      - { value: 'To manage a stack of `Request` objects, especially useful for sub-requests.', correct: true }
      - { value: 'To store all incoming HTTP requests for logging purposes.', correct: false }
      - { value: 'To provide a global access point for the current `Request` object.', correct: false }
      - { value: 'To handle multiple concurrent requests in a multi-threaded environment.', correct: false }
    help: |
      'The `RequestStack` manages the current request and any sub-requests, allowing you to access the master request or the current request in a nested context.
      https://symfony.com/doc/current/components/http_kernel.html#request-stack'
  -
    question: 'You need to send an "Early Hints" (103) response from your controller. Which `AbstractController` method should you use?'
    answers:
      - { value: '`$this->sendEarlyHints()`', correct: true }
      - { value: '`$this->earlyHints()`', correct: false }
      - { value: '`$this->response(null, 103)`', correct: false }
      - { value: '`$this->sendHeaders(103)`', correct: false }
    help: |
      'The `sendEarlyHints()` method in `AbstractController` creates and sends a 103 Early Hints response.
      https://symfony.com/doc/current/controller.html#sending-early-hints'
  -
    question: 'When defining a controller as a service (e.g., using `#[AsController]`), what is the primary advantage regarding dependencies?'
    answers:
      - { value: 'Dependencies are automatically created as new instances for each request.', correct: false }
      - { value: 'Dependencies can be easily injected into the controller''s constructor or action methods via autowiring.', correct: true }
      - { value: 'The controller no longer needs access to the `Request` object.', correct: false }
      - { value: 'It makes the controller stateless by default.', correct: false }
    help: |
      'Controllers defined as services benefit from Symfony\'s dependency injection container, allowing for easy injection of services through constructor arguments or action method arguments (autowiring).
      https://symfony.com/doc/current/controller/service.html'
  -
    question: 'Which of the following is true about session management in Symfony controllers?'
    answers:
      - { value: 'The session is automatically started on every request.', correct: false }
      - { value: 'You must explicitly call `$session->start()` before using it.', correct: false }
      - { value: 'Accessing the session via `$request->getSession()` or injecting `SessionInterface` will automatically start it if not already started.', correct: true }
      - { value: 'Session data is stored in cookies by default.', correct: false }
    help: |
      'Symfony\'s session component manages session lifecycle. Accessing the session object will trigger its start if it hasn\'t been started yet. Session IDs are stored in cookies, but the data itself is typically stored on the server.
      https://symfony.com/doc/current/components/http_foundation/sessions.html'
  -
    question: 'You want to retrieve a specific header from the `Request` object, for example, `User-Agent`. How would you do this?'
    answers:
      - { value: '`$request->headers->get("User-Agent")`', correct: true }
      - { value: '`$request->getHeader("User-Agent")`', correct: false }
      - { value: '`$_SERVER["HTTP_USER_AGENT"]`', correct: false }
      - { value: '`$request->attributes->get("User-Agent")`', correct: false }
    help: |
      'The `headers` property of the `Request` object provides access to request headers.
      https://symfony.com/doc/current/components/http_foundation.html#accessing-request-data'
  -
    question: 'What is the purpose of the `#[MapQueryParameter]` attribute in a controller action method?'
    answers:
      - { value: 'To map a query string parameter to a controller argument, with optional type conversion and default values.', correct: true }
      - { value: 'To map a route parameter to a controller argument.', correct: false }
      - { value: 'To map a request body parameter to a controller argument.', correct: false }
      - { value: 'To map a header value to a controller argument.', correct: false }
    help: |
      'The `#[MapQueryParameter]` attribute is an argument value resolver that specifically maps query string parameters to controller arguments.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#mapqueryparameter'
  -
    question: 'You have a controller method that accepts an optional `page` parameter from the route, defaulting to 1 if not provided. How would you define this in the method signature?'
    answers:
      - { value: '`public function list(int $page = 1): Response`', correct: true }
      - { value: '`public function list(Request $request, int $page = 1): Response`', correct: true }
      - { value: '`public function list($page = 1): Response`', correct: false }
      - { value: '`public function list(int $page): Response { $page = $page ?? 1; ... }`', correct: false }
    help: |
      'Symfony\'s argument resolver supports default values for optional route parameters directly in the method signature. The `Request` object can also be present.
      https://symfony.com/doc/current/controller.html#getting-information-from-the-request'
  -
    question: 'Which of the following is the correct way to delete a cookie named `my_cookie`?'
    answers:
      - { value: '`$response->headers->clearCookie("my_cookie");`', correct: true }
      - { value: '`$response->headers->setCookie(new Cookie("my_cookie", null, time() - 3600));`', correct: true }
      - { value: '`$response->deleteCookie("my_cookie");`', correct: false }
      - { value: '`setcookie("my_cookie", "", time() - 3600);`', correct: false }
    help: |
      'Cookies can be deleted by clearing them using `clearCookie()` or by setting their expiration time to a past value.
      https://symfony.com/doc/current/controller.html#working-with-cookies'
  -
    question: 'What is the primary difference between `redirectToRoute()` and `redirect()` in `AbstractController`?'
    answers:
      - { value: '`redirectToRoute()` is for internal redirects, `redirect()` is for external redirects.', correct: false }
      - { value: '`redirectToRoute()` uses a named route, `redirect()` uses a direct URL.', correct: true }
      - { value: '`redirectToRoute()` always uses a 301 status, `redirect()` always uses a 302 status.', correct: false }
      - { value: '`redirectToRoute()` is for GET requests, `redirect()` is for POST requests.', correct: false }
    help: |
      '`redirectToRoute()` generates a URL based on a Symfony route name, while `redirect()` takes a raw URL string. Both perform client-side HTTP redirects.
      https://symfony.com/doc/current/controller.html#redirecting'
  -
    question: 'When should you consider creating a custom argument value resolver?'
    answers:
      - { value: 'When you need to perform complex logic to convert a request parameter into a specific object for your controller.', correct: true }
      - { value: 'When you want to inject a service that is already available in the container.', correct: false }
      - { value: 'When you want to replace the default `Request` object with a custom one.', correct: false }
      - { value: 'When you need to validate form submissions.', correct: false }
    help: |
      'Custom argument value resolvers are useful for complex conversions or fetching objects from external sources based on request data, making controller actions cleaner.
      https://symfony.com/doc/current/controller/value_resolver.html'
  -
    question: 'Which `make` command is typically used to generate a new empty controller class and its corresponding Twig template in Symfony?'
    answers:
      - { value: '`php bin/console make:controller`', correct: true }
      - { value: '`php bin/console generate:controller`', correct: false }
      - { value: '`php bin/console new:controller`', correct: false }
      - { value: '`php bin/console create:controller`', correct: false }
    help: |
      'The `make:controller` command from the MakerBundle is the standard way to generate new controllers.
      https://symfony.com/doc/current/controller.html#creating-a-controller'
  -
    question: 'What is the purpose of the `#[MapRequestPayload]` attribute?'
    answers:
      - { value: 'To map query parameters to an object.', correct: false }
      - { value: 'To map the request body (JSON, XML, form data) into a PHP object, often used with DTOs.', correct: true }
      - { value: 'To map uploaded files to an array of `UploadedFile` objects.', correct: false }
      - { value: 'To map route attributes to an object.', correct: false }
    help: |
      'The `#[MapRequestPayload]` attribute is an argument value resolver that deserializes the request body into a PHP object, simplifying API controller logic.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#maprequestpayload'
  -
    question: 'You want to handle a specific HTTP method (e.g., `DELETE`) for a route. How can you specify this in the `#[Route]` attribute?'
    answers:
      - { value: '`#[Route("/items/{id}", methods: ["DELETE"])]`', correct: true }
      - { value: '`#[Route("/items/{id}", method: "DELETE")]`', correct: false }
      - { value: '`#[Route("/items/{id}", httpMethod: "DELETE")]`', correct: false }
      - { value: '`#[Route("/items/{id}", allowMethods: ["DELETE"])]`', correct: false }
    help: |
      'The `methods` option in the `#[Route]` attribute accepts an array of HTTP methods.
      https://symfony.com/doc/current/routing.html#methods'
  -
    question: 'Which of the following is a valid way to access the current session ID in a Symfony controller?'
    answers:
      - { value: '`$request->getSession()->getId()`', correct: true }
      - { value: '`$this->get("session")->getSessionId()`', correct: false }
      - { value: '`session_id()`', correct: false }
      - { value: '`$request->cookies->get("PHPSESSID")`', correct: false }
    help: |
      'The `SessionInterface` (obtained via `$request->getSession()` or service injection) has an `getId()` method.
      https://symfony.com/doc/current/components/http_foundation/sessions.html#session-id'
  -
    question: 'What is the purpose of the `#[MapEntity]` attribute?'
    answers:
      - { value: 'To automatically convert a route parameter into a Doctrine entity object.', correct: true }
      - { value: 'To map a request parameter to a form field.', correct: false }
      - { value: 'To define a relationship between two entities.', correct: false }
      - { value: 'To automatically persist an entity to the database.', correct: false }
    help: |
      'The `#[MapEntity]` attribute is an argument value resolver that automatically fetches a Doctrine entity based on a route parameter and injects it into the controller method.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#mapentity'
  -
    question: 'You want to return a `Response` with a 204 No Content status code. How can you achieve this?'
    answers:
      - { value: '`return new Response("", 204);`', correct: true }
      - { value: '`return $this->noContent();`', correct: false }
      - { value: '`return new Response(null, 204);`', correct: true }
      - { value: '`return new EmptyResponse(204);`', correct: false }
    help: |
      'A `Response` object with an empty content and a 204 status code is the correct way to send a "No Content" response.
      https://symfony.com/doc/current/components/http_foundation.html#http-status-codes'
  -
    question: 'Which of the following describes a "front controller" pattern in web applications, as implemented by Symfony?'
    answers:
      - { value: 'Each URL maps directly to a separate PHP file.', correct: false }
      - { value: 'All requests are routed through a single entry point (e.g., `public/index.php`).', correct: true }
      - { value: 'It handles only static file serving.', correct: false }
      - { value: 'It is responsible for rendering Twig templates only.', correct: false }
    help: |
      'The front controller pattern centralizes all incoming requests through a single script, which then dispatches them to the appropriate controller.
      https://symfony.com/doc/current/create_framework/front_controller.html'
  -
    question: 'What is the purpose of the `kernel.terminate` event in the Symfony request lifecycle?'
    answers:
      - { value: 'It is dispatched before the controller is executed.', correct: false }
      - { value: 'It allows for cleanup tasks or sending emails after the response has been sent to the client.', correct: true }
      - { value: 'It is used to convert the controller return value into a `Response`.', correct: false }
      - { value: 'It handles exceptions thrown during the request.', correct: false }
    help: |
      'The `kernel.terminate` event is dispatched after the response has been sent to the client, allowing for long-running tasks that don\'t block the user.
      https://symfony.com/doc/current/components/http_kernel.html#the-kernel-terminate-event'
  -
    question: 'You want to retrieve all flash messages, regardless of their type. Which method should you use on the `FlashBag` object?'
    answers:
      - { value: '`$session->getFlashBag()->all()`', correct: true }
      - { value: '`$session->getFlashBag()->peekAll()`', correct: true }
      - { value: '`$session->getFlashBag()->getMessages()`', correct: false }
      - { value: '`$session->getFlashBag()->getAll()`', correct: false }
    help: |
      '`all()` retrieves and clears all flash messages. `peekAll()` retrieves them without clearing.
      https://symfony.com/doc/current/components/http_foundation/sessions.html#flash-messages'
  -
    question: 'Which of the following is a security best practice related to controllers and public directories?'
    answers:
      - { value: 'Place all PHP files, including controllers, directly in the web root (`public/`).', correct: false }
      - { value: 'Ensure only the front controller (`index.php`) is directly accessible in the web root, with other application files outside.', correct: true }
      - { value: 'Use `.htaccess` to block access to all files except controllers.', correct: false }
      - { value: 'Store sensitive configuration files in the `public/` directory.', correct: false }
    help: |
      'A key security practice is to keep all application logic and configuration files outside the web-accessible directory, with only the front controller exposed.
      https://symfony.com/doc/current/create_framework/front_controller.html#project-directory-structure'
  -
    question: 'What is the primary difference between `#[MapQueryParameter]` and `#[MapEntity]`?'
    answers:
      - { value: '`#[MapQueryParameter]` maps from the query string, `#[MapEntity]` maps from route parameters to an entity.', correct: true }
      - { value: '`#[MapQueryParameter]` is for scalar types, `#[MapEntity]` is for objects.', correct: false }
      - { value: '`#[MapQueryParameter]` requires a database connection, `#[MapEntity]` does not.', correct: false }
      - { value: '`#[MapQueryParameter]` is for GET requests, `#[MapEntity]` is for POST requests.', correct: false }
    help: |
      'Both are argument value resolvers, but `#[MapQueryParameter]` targets query string values, while `#[MapEntity]` specifically resolves route parameters to Doctrine entities.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html'
  -
    question: 'When creating a `Response` object, how can you set its HTTP status code?'
    answers:
      - { value: 'Via the second argument of the `Response` constructor.', correct: true }
      - { value: 'Using the `$response->setStatusCode(<code>)` method.', correct: true }
      - { value: 'By setting a `status` header.', correct: false }
      - { value: 'It is automatically determined by Symfony.', correct: false }
    help: |
      'The status code can be set in the `Response` constructor or using the `setStatusCode()` method.
      https://symfony.com/doc/current/components/http_foundation.html#setting-the-status-code'
  -
    question: 'Which of the following is a common use case for `StreamedResponse`?'
    answers:
      - { value: 'Serving large files without loading them entirely into memory.', correct: true }
      - { value: 'Returning simple JSON data from an API.', correct: false }
      - { value: 'Redirecting the user to another page.', correct: false }
      - { value: 'Rendering a Twig template.', correct: false }
    help: |
      '`StreamedResponse` is designed for sending large files or generating responses on the fly, without buffering the entire content in memory.
      https://symfony.com/doc/current/components/http_foundation.html#streaming-a-response'
  -
    question: 'What is the purpose of the `#[MapUploadedFile]` attribute?'
    answers:
      - { value: 'To automatically map an uploaded file from the request to an `UploadedFile` object in a controller argument.', correct: true }
      - { value: 'To validate the size and type of an uploaded file.', correct: false }
      - { value: 'To move an uploaded file to a permanent storage location.', correct: false }
      - { value: 'To generate a URL for an uploaded file.', correct: false }
    help: |
      'The `#[MapUploadedFile]` attribute simplifies handling file uploads by automatically resolving the uploaded file into an `UploadedFile` object.
      https://symfony.com/doc/current/controller.html#uploading-files'
  -
    question: 'Which of the following methods allows you to access the `ContainerInterface` (service container) directly from an `AbstractController`?'
    answers:
      - { value: '`$this->container`', correct: true }
      - { value: '`$this->getContainer()`', correct: false }
      - { value: '`$this->get("service_container")`', correct: false }
      - { value: '`$this->serviceContainer`', correct: false }
    help: |
      'When extending `AbstractController`, the `ContainerInterface` is available via the `$this->container` property.
      https://symfony.com/doc/current/controller.html#accessing-the-service-container'
  -
    question: 'What is the default HTTP status code for a redirect performed by `redirectToRoute()` or `redirect()` in Symfony?'
    answers:
      - { value: '301 Moved Permanently', correct: false }
      - { value: '302 Found', correct: true }
      - { value: '303 See Other', correct: false }
      - { value: '307 Temporary Redirect', correct: false }
    help: |
      'By default, Symfony\'s redirect helpers use the 302 Found status code for temporary redirects.
      https://symfony.com/doc/current/controller.html#redirecting'
  -
    question: 'When should you use `#[AsController]` attribute on a controller class instead of just defining routes with `#[Route]` on methods?'
    answers:
      - { value: 'When the controller needs to be explicitly registered as a service for dependency injection in its constructor or when not extending `AbstractController`.', correct: true }
      - { value: 'When the controller has no action methods and only serves as a container for services.', correct: false }
      - { value: 'When you want to prevent autowiring for the controller.', correct: false }
      - { value: '`#[AsController]` is deprecated in Symfony 7.', correct: false }
    help: |
      '`#[AsController]` marks the class itself as a service, which is necessary if you need to inject services into the controller\'s constructor or if you\'re not extending `AbstractController` (which implicitly registers itself as a service if autoconfigure is enabled).
      https://symfony.com/doc/current/controller/service.html#controllers-as-services'
  -
    question: 'What is the recommended approach for handling multiple file uploads in a single form using `#[MapUploadedFile]`?'
    answers:
      - { value: 'Define multiple `#[MapUploadedFile]` attributes for each file input.', correct: true }
      - { value: 'Type-hint an array of `UploadedFile` objects for a single input name (e.g., `#[MapUploadedFile] array $files`).', correct: true }
      - { value: 'Loop through `$_FILES` manually in the controller.', correct: false }
      - { value: 'Use a dedicated form type for file collections.', correct: false }
    help: |
      'You can use multiple `#[MapUploadedFile]` attributes or type-hint an array of `UploadedFile` for inputs with `[]` in their name.
      https://symfony.com/doc/current/controller.html#uploading-multiple-files'
  -
    question: 'Which of the following is true about the `Request` object in Symfony?'
    answers:
      - { value: 'It is a global singleton that can be accessed anywhere using `Request::getInstance()`.', correct: false }
      - { value: 'It is an immutable object, and any modifications create a new instance.', correct: false }
      - { value: 'It encapsulates all HTTP request information (headers, query, post, files, cookies).', correct: true }
      - { value: 'It is only available if the controller extends `AbstractController`.', correct: false }
    help: |
      'The `Request` object is a powerful abstraction that holds all incoming request data. It is mutable.
      https://symfony.com/doc/current/components/http_foundation.html#request'
  -
    question: 'What is the primary reason for using `#[MapRequestPayload]` instead of manually decoding `json_decode($request->getContent())`?'
    answers:
      - { value: '`#[MapRequestPayload]` automatically handles content type negotiation (JSON, XML, form data).', correct: true }
      - { value: 'It automatically validates the payload against constraints defined in the DTO.', correct: true }
      - { value: 'It is more performant than manual decoding.', correct: false }
      - { value: 'It prevents XSS attacks automatically.', correct: false }
    help: |
      'The `#[MapRequestPayload]` attribute simplifies API development by automatically deserializing the request body and validating it against DTOs or other PHP objects.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#maprequestpayload'
  -
    question: 'You want to set a session variable named `user_id` to `123`. How would you do this?'
    answers:
      - { value: '`$request->getSession()->set("user_id", 123);`', correct: true }
      - { value: '`$this->get("session")->set("user_id", 123);`', correct: true }
      - { value: '`$_SESSION["user_id"] = 123;`', correct: false }
      - { value: '`$session->set("user_id", 123);` (assuming `$session` is injected `SessionInterface`)', correct: true }
    help: |
      'The `set()` method on the `SessionInterface` (or the session object obtained from `Request`) is used to store data in the session.
      https://symfony.com/doc/current/components/http_foundation/sessions.html#storing-retrieving-data'
  -
    question: 'Which of the following is a valid way to retrieve a session variable named `username`?'
    answers:
      - { value: '`$request->getSession()->get("username")`', correct: true }
      - { value: '`$this->get("session")->get("username")`', correct: true }
      - { value: '`$_SESSION["username"]`', correct: false }
      - { value: '`$session->get("username")` (assuming `$session` is injected `SessionInterface`)', correct: true }
    help: |
      'The `get()` method on the `SessionInterface` (or the session object obtained from `Request`) is used to retrieve data from the session.
      https://symfony.com/doc/current/components/http_foundation/sessions.html#storing-retrieving-data'
  -
    question: 'What is the purpose of the `kernel.view` event?'
    answers:
      - { value: 'It is dispatched when a controller returns something other than a `Response` object, allowing conversion to a `Response`.', correct: true }
      - { value: 'It is dispatched after the `Response` object has been created, allowing modification before sending.', correct: false }
      - { value: 'It is used to render Twig templates.', correct: false }
      - { value: 'It handles errors during controller execution.', correct: false }
    help: |
      'The `kernel.view` event allows you to convert non-`Response` return values from controllers into `Response` objects, often used for templating or API responses.
      https://symfony.com/doc/current/components/http_kernel.html#the-kernel-view-event'
  -
    question: 'You want to create a controller that handles a `HEAD` request. What is the primary difference in the `Response` compared to a `GET` request?'
    answers:
      - { value: 'The `Response` body should be empty, but headers should be identical to a `GET` request.', correct: true }
      - { value: 'The `Response` should contain a summary of the resource in the body.', correct: false }
      - { value: 'The `Response` status code must be 204 No Content.', correct: false }
      - { value: '`HEAD` requests are not supported by Symfony controllers.', correct: false }
    help: |
      'A `HEAD` request should return the same headers as a `GET` request, but with an empty response body.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/HEAD'
  -
    question: 'Which of the following is the correct way to make a controller method accessible only via `GET` requests using PHP attributes?'
    answers:
      - { value: '`#[Route("/my-path", methods: ["GET"])]`', correct: true }
      - { value: '`#[Route("/my-path", method: "GET")]`', correct: false }
      - { value: '`#[Route("/my-path", httpMethod: "GET")]`', correct: false }
      - { value: '`#[Route("/my-path")]` and then check `$request->isMethod("GET")` inside the method.', correct: false }
    help: |
      'The `methods` option in the `#[Route]` attribute takes an array of allowed HTTP methods.
      https://symfony.com/doc/current/routing.html#methods'
  -
    question: 'What is the purpose of the `#[MapQueryString]` attribute?'
    answers:
      - { value: 'To map the entire query string into a PHP object.', correct: true }
      - { value: 'To map a single query parameter to a scalar type.', correct: false }
      - { value: 'To map the request body as a query string.', correct: false }
      - { value: 'To map form data from a GET request.', correct: false }
    help: |
      'The `#[MapQueryString]` attribute is an argument value resolver that maps the entire query string into a PHP object, often a DTO.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#mapquerystring'
  -
    question: 'You want to create a custom argument value resolver for a complex object `MyCustomObject`. Which interface must your resolver implement?'
    answers:
      - { value: '`Symfony\Component\HttpKernel\Controller\ArgumentValueResolverInterface`', correct: true }
      - { value: '`Symfony\Component\HttpFoundation\RequestResolverInterface`', correct: false }
      - { value: '`Symfony\Component\DependencyInjection\ContainerAwareInterface`', correct: false }
      - { value: '`Symfony\Component\HttpKernel\Controller\ControllerResolverInterface`', correct: false }
    help: |
      'Custom argument value resolvers must implement `ArgumentValueResolverInterface`.
      https://symfony.com/doc/current/controller/value_resolver.html#creating-a-custom-value-resolver'
  -
    question: 'Which of the following is true about the order of arguments in a controller method signature?'
    answers:
      - { value: 'The `Request` object must always be the first argument.', correct: false }
      - { value: 'The order of arguments does not matter, as Symfony\'s argument resolver matches by name and type-hint.', correct: true }
      - { value: 'Route parameters must always come before services.', correct: false }
      - { value: 'Only a single argument is allowed per controller method.', correct: false }
    help: |
      'Symfony\'s argument resolver is smart enough to match arguments by name and type-hint, so their order in the method signature is flexible.
      https://symfony.com/doc/current/create_framework/http_kernel_controller_resolver.html#controller-method-arguments'
  -
    question: 'You want to prevent a controller action from being cached by HTTP clients. Which HTTP header should you set on the `Response`?'
    answers:
      - { value: '`Cache-Control: no-cache, no-store, must-revalidate`', correct: true }
      - { value: '`Expires: 0`', correct: true }
      - { value: '`Pragma: no-cache`', correct: true }
      - { value: '`Cache: private`', correct: false }
    help: |
      'These headers are commonly used together to prevent caching by various caching mechanisms.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control'
  -
    question: 'What is the purpose of the `#[MapUploadedFile]` attribute when dealing with multiple file inputs with the same name (e.g., `files[]`)?'
    answers:
      - { value: 'It maps each uploaded file to a separate argument.', correct: false }
      - { value: 'It maps all uploaded files for that input name into an array of `UploadedFile` objects.', correct: true }
      - { value: 'It only processes the first uploaded file.', correct: false }
      - { value: 'It requires manual iteration over `$_FILES` to access all files.', correct: false }
    help: |
      'When an input name ends with `[]`, `#[MapUploadedFile]` will resolve it to an array of `UploadedFile` objects.
      https://symfony.com/doc/current/controller.html#uploading-multiple-files'
  -
    question: 'Which of the following is a key responsibility of a Symfony controller?'
    answers:
      - { value: 'To handle HTTP requests and return a `Response` object.', correct: true }
      - { value: 'To manage database interactions and persistence.', correct: false }
      - { value: 'To render HTML templates directly to the browser.', correct: false }
      - { value: 'To define the application\'s security policies.', correct: false }
    help: |
      'The core responsibility of a controller is to take the request and return a response.
      https://symfony.com/doc/current/controller.html#how-controllers-work'
  -
    question: 'You want to generate a URL to an asset (e.g., an image in `public/images/logo.png`). Which helper method from `AbstractController` or service should you use?'
    answers:
      - { value: '`$this->asset("/images/logo.png")`', correct: true }
      - { value: '`$this->generateUrl("/images/logo.png")`', correct: false }
      - { value: '`$this->path("/images/logo.png")`', correct: false }
      - { value: '`$this->get("assets.packages")->getUrl("/images/logo.png")`', correct: true }
    help: |
      'The `asset()` helper in `AbstractController` (or the `assets.packages` service) is used to generate URLs for assets.
      https://symfony.com/doc/current/frontend/assets.html#referencing-assets-in-templates'
  -
    question: 'What is the correct way to set a `max-age` for a cookie to expire in one hour?'
    answers:
      - { value: '`new Cookie("name", "value", time() + 3600);`', correct: true }
      - { value: '`new Cookie("name", "value", null, null, null, false, false, Cookie::SAMESITE_LAX, 3600);`', correct: true }
      - { value: '`new Cookie("name", "value", "+1 hour");`', correct: false }
      - { value: '`$response->headers->setCookie(new Cookie("name", "value", ["max-age" => 3600]));`', correct: false }
    help: |
      'The third argument of the `Cookie` constructor is the expiration timestamp. `max-age` can also be passed as the 9th argument (Symfony 5.1+).
      https://symfony.com/doc/current/components/http_foundation/cookies.html#creating-a-cookie'
  -
    question: 'Which of the following is true about the `Request::attributes` property?'
    answers:
      - { value: 'It contains query string parameters.', correct: false }
      - { value: 'It contains route parameters and other data set by listeners (e.g., `_controller`).', correct: true }
      - { value: 'It contains POST data.', correct: false }
      - { value: 'It is used to store session data.', correct: false }
    help: |
      'The `attributes` property stores data that is "internal" to the request, such as route parameters and the `_controller` callable.
      https://symfony.com/doc/current/components/http_foundation.html#request-attributes'
  -
    question: 'What is the purpose of the `#[MapQueryParameter]` attribute when used with an array type-hint (e.g., `#[MapQueryParameter] array $ids`)?'
    answers:
      - { value: 'It maps a single query parameter named `ids` to an array.', correct: false }
      - { value: 'It maps multiple query parameters with names like `ids[]` to an array of values.', correct: true }
      - { value: 'It maps all query parameters into a single array.', correct: false }
      - { value: 'It maps a comma-separated string of IDs into an array.', correct: false }
    help: |
      'When the argument is an array and the query parameter name ends with `[]`, `#[MapQueryParameter]` will collect all values into an array.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#mapqueryparameter'
  -
    question: 'You need to create a controller that returns an empty `Response` with a 200 OK status code. Which is the most concise way?'
    answers:
      - { value: '`return new Response();`', correct: true }
      - { value: '`return $this->emptyResponse();`', correct: false }
      - { value: '`return new Response("", 200);`', correct: true }
      - { value: '`return $this->json(null, 200);`', correct: false }
    help: |
      'A `Response` object instantiated without arguments defaults to empty content and 200 OK. Explicitly setting content to empty string and status to 200 is also valid.
      https://symfony.com/doc/current/components/http_foundation.html#response-content'
  -
    question: 'What is the primary benefit of using `#[MapEntity]` over manually fetching an entity from the repository (e.g., `$repository->find($id)`)?'
    answers:
      - { value: 'It automatically handles 404 errors if the entity is not found.', correct: true }
      - { value: 'It performs complex queries with joins automatically.', correct: false }
      - { value: 'It caches the entity for subsequent requests.', correct: false }
      - { value: 'It allows injecting multiple entities from a single route parameter.', correct: false }
    help: |
      '`#[MapEntity]` simplifies entity fetching and automatically throws a 404 if the entity cannot be found, reducing boilerplate code.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#mapentity'
  -
    question: 'Which of the following describes the purpose of the `HttpKernel` component in Symfony?'
    answers:
      - { value: 'It handles the entire request-response lifecycle, from receiving a request to sending a response.', correct: true }
      - { value: 'It is responsible only for routing incoming requests.', correct: false }
      - { value: 'It provides a set of helper methods for controllers.', correct: false }
      - { value: 'It manages the dependency injection container.', correct: false }
    help: |
      'The `HttpKernel` component is the core of Symfony\'s request-response handling, orchestrating various components to generate a response.
      https://symfony.com/doc/current/components/http_kernel.html'
  -
    question: 'You want to redirect to an external URL, e.g., `https://example.com`. Which `AbstractController` method should you use?'
    answers:
      - { value: '`$this->redirect("https://example.com")`', correct: true }
      - { value: '`$this->redirectToUrl("https://example.com")`', correct: false }
      - { value: '`$this->forward("https://example.com")`', correct: false }
      - { value: '`$this->externalRedirect("https://example.com")`', correct: false }
    help: |
      'The `redirect()` method is used for redirecting to arbitrary URLs, including external ones.
      https://symfony.com/doc/current/controller.html#redirecting'
  -
    question: 'What is the main difference between `SessionInterface::getFlashBag()->get()` and `SessionInterface::getFlashBag()->peek()`?'
    answers:
      - { value: '`get()` retrieves and removes the flash messages, `peek()` retrieves them without removing them.', correct: true }
      - { value: '`get()` retrieves all flash messages, `peek()` retrieves only the first one.', correct: false }
      - { value: '`get()` is for success messages, `peek()` is for error messages.', correct: false }
      - { value: 'There is no difference, they are aliases.', correct: false }
    help: |
      'The `get()` method consumes the flash messages, while `peek()` allows you to inspect them without removing them from the session.
      https://symfony.com/doc/current/components/http_foundation/sessions.html#flash-messages'
  -
    question: 'Which HTTP status code indicates that a resource has been permanently moved to a new URL?'
    answers:
      - { value: '301 Moved Permanently', correct: true }
      - { value: '302 Found', correct: false }
      - { value: '307 Temporary Redirect', correct: false }
      - { value: '308 Permanent Redirect', correct: true }
    help: |
      'Both 301 and 308 indicate permanent redirects. 301 changes the method from POST to GET, while 308 preserves the method.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/301
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/308'
  -
    question: 'What is the purpose of the `#[MapQueryString]` attribute when the argument is a DTO (Data Transfer Object)?'
    answers:
      - { value: 'It automatically populates the DTO properties from query string parameters.', correct: true }
      - { value: 'It converts the DTO into a query string.', correct: false }
      - { value: 'It validates the DTO against database constraints.', correct: false }
      - { value: 'It only works for scalar properties in the DTO.', correct: false }
    help: |
      '`#[MapQueryString]` is an argument value resolver that automatically populates a DTO\'s properties from the query string parameters.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#mapquerystring'
  -
    question: 'When should you use `#[MapRequestPayload]` over `#[MapQueryParameter]` or `#[MapQueryString]`?'
    answers:
      - { value: 'When the data is sent in the request body (e.g., JSON for an API, form-urlencoded for POST).', correct: true }
      - { value: 'When the data is sent as URL query parameters.', correct: false }
      - { value: 'When dealing with file uploads only.', correct: false }
      - { value: 'When you need to map data from route attributes.', correct: false }
    help: |
      '`#[MapRequestPayload]` is specifically designed for deserializing data from the request body, whereas `#[MapQueryParameter]` and `#[MapQueryString]` are for query parameters.
      https://symfony.com/doc/current/controller/argument_value_resolvers.html#maprequestpayload'
  -
    question: 'What is the main advantage of using `AbstractController` helper methods (e.g., `render`, `redirectToRoute`) over directly instantiating `Response` objects or services?'
    answers:
      - { value: 'They provide a more concise and readable syntax for common tasks.', correct: true }
      - { value: 'They are more performant than direct service calls.', correct: false }
      - { value: 'They automatically handle security concerns like CSRF protection.', correct: false }
      - { value: 'They are required for all Symfony controllers to function correctly.', correct: false }
    help: |
      'Helper methods in `AbstractController` are syntactic sugar that simplify common controller actions, making the code cleaner and easier to maintain.
      https://symfony.com/doc/current/controller.html#the-base-abstractcontroller-class'
  -
    question: 'Which of the following is true about the `Request` object\'s mutability?'
    answers:
      - { value: 'The `Request` object is immutable; any modification returns a new instance.', correct: false }
      - { value: 'The `Request` object is mutable; you can modify its properties directly.', correct: true }
      - { value: 'Only the `attributes` property is mutable, others are immutable.', correct: false }
      - { value: 'Mutability depends on the PHP version.', correct: false }
    help: |
      'The `Request` object is mutable, allowing its properties (like attributes) to be modified during the request lifecycle.
      https://symfony.com/doc/current/components/http_foundation.html#request'
  -
    question: 'You want to return a `Response` with a specific `Content-Disposition` header to force a file download with a custom filename. How can you achieve this?'
    answers:
      - { value: '`$response->headers->set("Content-Disposition", "attachment; filename=\"report.pdf\"");`', correct: true }
      - { value: '`$response->setContentDisposition("attachment", "report.pdf");` (if using `BinaryFileResponse`)', correct: true }
      - { value: '`$response->download("report.pdf");`', correct: false }
      - { value: '`$response->addHeader("Content-Disposition", "attachment; filename=report.pdf");`', correct: false }
    help: |
      'The `Content-Disposition` header is used for this purpose. `BinaryFileResponse` also provides a convenient `setContentDisposition()` method.
      https://symfony.com/doc/current/components/http_foundation.html#serving-files'
  -
    question: 'What is the purpose of the `kernel.response` event?'
    answers:
      - { value: 'It is dispatched after the controller has returned a `Response` object, allowing modification before sending to the client.', correct: true }
      - { value: 'It is dispatched before the controller is executed.', correct: false }
      - { value: 'It handles exceptions thrown during the request.', correct: false }
      - { value: 'It is used to convert the controller return value into a `Response`.', correct: false }
    help: |
      'The `kernel.response` event is the last chance to modify the `Response` object before it is sent to the client.
      https://symfony.com/doc/current/components/http_kernel.html#the-kernel-response-event'