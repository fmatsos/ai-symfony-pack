category: Controllers

questions:
  -
    question: >
      Which of the following is the recommended naming convention for a Symfony controller class?
    answers:
      -
        value: >
          `MyController.php`
        correct: false
      -
        value: >
          `MyBundleController.php`
        correct: false
      -
        value: >
          `MyController.php` (e.g., `src/Controller/MyController.php`)
        correct: true
      -
        value: >
          `ControllerMy.php`
        correct: false
    help: |
      Symfony controllers typically follow the `*Controller.php` naming convention and are placed in the `src/Controller/` directory.
      https://symfony.com/doc/current/controller.html#controller-basics

  -
    question: |
      Consider the following Symfony controller method:

      ```php
      namespace App\Controller;

      use Symfony\Component\HttpFoundation\Response;
      use Symfony\Component\Routing\Attribute\Route;

      class ProductController
      {
          #[Route('/products', name: 'app_products')]
          public function listProducts(): Response
          {
              return new Response('Product List');
          }
      }
      ```

      Which of the following is true regarding the `listProducts` method?
    answers:
      -
        value: >
          It must return an instance of `Symfony\Component\HttpFoundation\Response`.
        correct: true
      -
        value: >
          It must be named `listProductsAction`.
        correct: false
      -
        value: >
          It automatically renders a Twig template named `templates/product/listProducts.html.twig`.
        correct: false
      -
        value: >
          It requires extending `AbstractController` to function correctly.
        correct: false
    help: |
      A Symfony controller method must return a `Response` object. While `AbstractController` provides helper methods, it's not strictly required. The action method name does not need the `Action` suffix in modern Symfony.
      https://symfony.com/doc/current/controller.html#returning-a-response

  -
    question: >
      What is the primary benefit of extending `Symfony\Bundle\FrameworkBundle\Controller\AbstractController` for your controllers?
    answers:
      -
        value: >
          It automatically registers the controller as a service.
        correct: false
      -
        value: >
          It provides convenient helper methods for common controller tasks like rendering templates, generating URLs, and handling redirects.
        correct: true
      -
        value: >
          It enforces strict type-hinting for all controller arguments.
        correct: false
      -
        value: >
          It enables automatic dependency injection for all services in the container.
        correct: false
    help: |
      `AbstractController` is an optional base class that provides shortcuts and helper methods, making common controller tasks easier.
      https://symfony.com/doc/current/controller.html#extending-the-base-controller-class

  -
    question: |
      Given a controller extending `AbstractController`, which method would you use to render a Twig template?
    answers:
      -
        value: >
          `$this->renderTemplate('template.html.twig', $data);`
        correct: false
      -
        value: >
          `$this->render('template.html.twig', ['data' => $data]);`
        correct: true
      -
        value: >
          `$this->display('template.html.twig', $data);`
        correct: false
      -
        value: >
          `$this->get('twig')->render('template.html.twig', $data);`
        correct: false
    help: |
      The `render()` method is provided by `AbstractController` to render Twig templates and return a `Response` object.
      https://symfony.com/doc/current/controller.html#rendering-templates

  -
    question: |
      How can you access the `Request` object in a Symfony controller action method?
    answers:
      -
        value: >
          By calling `$this->getRequest();` if extending `AbstractController`.
        correct: false
      -
        value: >
          By type-hinting `Symfony\Component\HttpFoundation\Request` as an argument in the action method.
        correct: true
      -
        value: >
          By using the global `$_REQUEST` superglobal.
        correct: false
      -
        value: >
          By injecting the `request_stack` service and calling `getCurrentRequest()`.
        correct: false
    help: |
      The recommended way to access the `Request` object in a controller is by type-hinting `Symfony\Component\HttpFoundation\Request` in the action method's arguments. Symfony's argument resolver will automatically inject it.
      https://symfony.com/doc/current/controller.html#accessing-the-request

  -
    question: |
      You need to retrieve a query parameter named `page` from the URL, with a default value of `1` if it's not present. Which code snippet correctly does this within a controller action?
    answers:
      -
        value: >
          `$page = $request->query->get('page', 1);`
        correct: true
      -
        value: >
          `$page = $request->get('page') ?: 1;`
        correct: false
      -
        value: >
          `$page = $_GET['page'] ?? 1;`
        correct: false
      -
        value: >
          `$page = $request->attributes->get('page', 1);`
        correct: false
    help: |
      The `query` property of the `Request` object provides access to GET parameters, and its `get()` method allows specifying a default value.
      https://symfony.com/doc/current/controller.html#accessing-the-request

  -
    question: >
      Which of the following classes must a Symfony controller action return?
    answers:
      -
        value: >
          `Symfony\Component\HttpFoundation\JsonResponse`
        correct: false
      -
        value: >
          `Symfony\Component\HttpFoundation\Response`
        correct: true
      -
        value: >
          `Psr\Http\Message\ResponseInterface`
        correct: false
      -
        value: >
          `Symfony\Component\HttpFoundation\Request`
        correct: false
    help: |
      Every Symfony controller must return an instance of `Symfony\Component\HttpFoundation\Response` or one of its subclasses.
      https://symfony.com/doc/current/controller.html#returning-a-response

  -
    question: |
      You want to return a JSON response from your controller. Which is the most appropriate way to do this in Symfony 7?
    answers:
      -
        value: >
          `return new Response(json_encode($data), 200, ['Content-Type' => 'application/json']);`
        correct: false
      -
        value: >
          `return $this->json($data);`
        correct: true
      -
        value: >
          `return new JsonResponse($data);`
        correct: true
      -
        value: >
          `return $this->renderJson($data);`
        correct: false
    help: |
      Both `JsonResponse` and the `json()` helper method (from `AbstractController`) are correct ways to return a JSON response. The `json()` helper is often preferred for brevity.
      https://symfony.com/doc/current/controller.html#json-response

  -
    question: |
      How can you set a cookie in a Symfony controller?
    answers:
      -
        value: >
          By calling `$request->cookies->set('name', 'value');`
        correct: false
      -
        value: >
          By creating a `Cookie` object and adding it to the `Response` headers before returning the response.
        correct: true
      -
        value: >
          By using PHP's native `setcookie()` function directly.
        correct: false
      -
        value: >
          Cookies are automatically managed by the session, no manual setting is needed.
        correct: false
    help: |
      Cookies are set on the `Response` object. You create a `Cookie` object and add it to `Response::headers->setCookie()`.
      https://symfony.com/doc/current/components/http_foundation/cookies.html#setting-a-cookie

  -
    question: |
      You want to retrieve a cookie named `user_preference` from the incoming request. Which code snippet is correct?
    answers:
      -
        value: >
          `$preference = $request->cookies->get('user_preference');`
        correct: true
      -
        value: >
          `$preference = $request->getCookie('user_preference');`
        correct: false
      -
        value: >
          `$preference = $_COOKIE['user_preference'];`
        correct: false
      -
        value: >
          `$preference = $request->headers->get('Cookie')['user_preference'];`
        correct: false
    help: |
      The `cookies` property of the `Request` object is a `ParameterBag` that allows access to request cookies.
      https://symfony.com/doc/current/components/http_foundation/cookies.html#retrieving-cookies

  -
    question: |
      Which of the following is the correct way to access the session in a Symfony controller when extending `AbstractController`?
    answers:
      -
        value: >
          `$session = $this->get('session');`
        correct: false
      -
        value: >
          `$session = $request->getSession();`
        correct: true
      -
        value: >
          `$session = $_SESSION;`
        correct: false
      -
        value: >
          `$session = $this->session;`
        correct: false
    help: |
      The session can be accessed via the `Request` object's `getSession()` method.
      https://symfony.com/doc/current/components/http_foundation/sessions.html#accessing-the-session

  -
    question: |
      To store a value in the user's session, which method should you use on the `SessionInterface` object?
    answers:
      -
        value: >
          `$session->set('key', 'value');`
        correct: true
      -
        value: >
          `$session->add('key', 'value');`
        correct: false
      -
        value: >
          `$session->put('key', 'value');`
        correct: false
      -
        value: >
          `$session->store('key', 'value');`
        correct: false
    help: |
      The `set()` method is used to store data in the session.
      https://symfony.com/doc/current/components/http_foundation/sessions.html#storing-retrieving-data

  -
    question: |
      You want to display a one-time success message to the user after a form submission and redirect. Which `AbstractController` helper method is designed for this?
    answers:
      -
        value: >
          `$this->addMessage('success', 'Item saved!');`
        correct: false
      -
        value: >
          `$this->addFlash('success', 'Item saved!');`
        correct: true
      -
        value: >
          `$this->getSession()->getFlashBag()->add('success', 'Item saved!');`
        correct: true
      -
        value: >
          `$this->setFlash('success', 'Item saved!');`
        correct: false
    help: |
      Both `addFlash()` helper method and direct access to `getSession()->getFlashBag()->add()` are correct for adding flash messages.
      https://symfony.com/doc/current/controller.html#flash-messages

  -
    question: |
      After a successful operation, you want to redirect the user to a route named `app_homepage`. Which `AbstractController` method should you use?
    answers:
      -
        value: >
          `return $this->redirect('/homepage');`
        correct: false
      -
        value: >
          `return $this->redirectToRoute('app_homepage');`
        correct: true
      -
        value: >
          `return new RedirectResponse($this->generateUrl('app_homepage'));`
        correct: true
      -
        value: >
          `return $this->forwardToRoute('app_homepage');`
        correct: false
    help: |
      `redirectToRoute()` is the convenient helper method for redirecting to a named route. Creating a `RedirectResponse` with a generated URL is also correct.
      https://symfony.com/doc/current/controller.html#redirecting

  -
    question: >
      What is the default HTTP status code used by `redirectToRoute()` if not explicitly specified?
    answers:
      -
        value: >
          301 (Moved Permanently)
        correct: false
      -
        value: >
          302 (Found)
        correct: true
      -
        value: >
          303 (See Other)
        correct: false
      -
        value: >
          200 (OK)
        correct: false
    help: |
      The default status code for `redirectToRoute()` is 302 (Found).
      https://symfony.com/doc/current/controller.html#redirecting

  -
    question: |
      You need to perform an "internal redirect" to another controller action within the same application without the client's browser being aware of the redirection. Which `AbstractController` method facilitates this?
    answers:
      -
        value: >
          `$this->redirect('/internal/path');`
        correct: false
      -
        value: >
          `$this->forward('App\\Controller\\AnotherController::someAction', ['param' => 'value']);`
        correct: true
      -
        value: >
          `$this->redirectToRoute('internal_route');`
        correct: false
      -
        value: >
          `$this->render('another_controller_template.html.twig');`
        correct: false
    help: |
      The `forward()` method creates an internal sub-request to another controller, returning its `Response` directly.
      https://symfony.com/doc/current/controller/forwarding.html

  -
    question: >
      What is a key difference between `redirectToRoute()` and `forward()`?
    answers:
      -
        value: >
          `redirectToRoute()` sends an HTTP redirect to the client, while `forward()` performs an internal sub-request on the server.
        correct: true
      -
        value: >
          `redirectToRoute()` can only redirect to external URLs, while `forward()` is for internal routes.
        correct: false
      -
        value: >
          `forward()` always results in a 301 redirect, while `redirectToRoute()` defaults to 302.
        correct: false
      -
        value: >
          `forward()` is deprecated in Symfony 7, while `redirectToRoute()` is the preferred method for all redirects.
        correct: false
    help: |
      `redirectToRoute()` sends a `Location` header to the client, causing a new HTTP request. `forward()` processes another controller internally, without a client-side redirect.
      https://symfony.com/doc/current/controller/forwarding.html

  -
    question: |
      To generate a 404 Not Found page in Symfony, which method from `AbstractController` should you use?
    answers:
      -
        value: >
          `return new Response('Not Found', 404);`
        correct: false
      -
        value: >
          `throw new \Exception('Page not found', 404);`
        correct: false
      -
        value: >
          `throw $this->createNotFoundException('The page does not exist');`
        correct: true
      -
        value: >
          `return $this->notFound();`
        correct: false
    help: |
      The `createNotFoundException()` helper method throws a `NotFoundHttpException`, which Symfony's exception listener will catch and render an appropriate 404 page.
      https://symfony.com/doc/current/controller.html#generating-404-pages

  -
    question: |
      Which class represents an uploaded file in Symfony and is typically used as a type-hint for file uploads in controller actions?
    answers:
      -
        value: >
          `SplFileInfo`
        correct: false
      -
        value: >
          `Symfony\Component\HttpFoundation\File\File`
        correct: false
      -
        value: >
          `Symfony\Component\HttpFoundation\File\UploadedFile`
        correct: true
      -
        value: >
          `PHP\File\Upload`
        correct: false
    help: |
      `Symfony\Component\HttpFoundation\File\UploadedFile` is the class that encapsulates uploaded file information.
      https://symfony.com/doc/current/controller.html#uploading-files

  -
    question: |
      Given the following controller action for handling a file upload:

      ```php
      namespace App\Controller;

      use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
      use Symfony\Component\HttpFoundation\File\UploadedFile;
      use Symfony\Component\HttpFoundation\Response;
      use Symfony\Component\HttpKernel\Attribute\MapUploadedFile;
      use Symfony\Component\Routing\Attribute\Route;

      class UserController extends AbstractController
      {
          #[Route('/user/picture', methods: ['POST'])]
          public function changePicture(
              #[MapUploadedFile] UploadedFile $picture,
          ): Response {
              // ...
          }
      }
      ```

      What does the `#[MapUploadedFile]` attribute do?
    answers:
      -
        value: >
          It automatically moves the uploaded file to a predefined directory.
        correct: false
      -
        value: >
          It validates the uploaded file's type and size.
        correct: false
      -
        value: >
          It automatically resolves the `UploadedFile` object from the request based on the argument name (`picture`).
        correct: true
      -
        value: >
          It encrypts the uploaded file before processing.
        correct: false
    help: |
      The `#[MapUploadedFile]` attribute is an argument value resolver that automatically injects the `UploadedFile` object corresponding to the request's uploaded file field named `picture`.
      https://symfony.com/doc/current/controller.html#uploading-files

  -
    question: |
      Which Twig function allows you to embed the output of another Symfony controller directly into a template?
    answers:
      -
        value: >
          `{{ include('controller_template.html.twig') }}`
        correct: false
      -
        value: >
          `{{ render(path('another_controller_route')) }}`
        correct: true
      -
        value: >
          `{{ embed_controller('App\\Controller\\MyController::action') }}`
        correct: false
      -
        value: >
          `{{ render(controller('App\\Controller\\MyController::action')) }}`
        correct: true
    help: |
      The `render()` Twig function, combined with `path()` or `controller()`, allows embedding the output of another controller. `controller()` is used when you don't want to expose the controller via a public URL.
      https://symfony.com/doc/current/templates.html#embedding-controllers

  -
    question: >
      What is the purpose of Symfony's Argument Value Resolvers?
    answers:
      -
        value: >
          To determine which controller method should handle a given request.
        correct: false
      -
        value: >
          To automatically inject values into controller method arguments based on request attributes, services, or other sources.
        correct: true
      -
        value: >
          To convert HTTP request data into a specific format (e.g., JSON to array).
        correct: false
      -
        value: >
          To validate the arguments passed to a controller method.
        correct: false
    help: |
      Argument Value Resolvers are responsible for providing the correct values for controller method arguments.
      https://symfony.com/doc/current/components/http_kernel.html#controller-argument-resolution

  -
    question: |
      Consider a route definition like `/products/{id}`. If your controller action is `public function show(int $id): Response`, how does Symfony automatically provide the `$id` value?
    answers:
      -
        value: >
          It uses a global variable `$_ROUTE_PARAMS['id']`.
        correct: false
      -
        value: >
          The `Request` object's `attributes` bag contains the `id` parameter, which the Argument Resolver injects.
        correct: true
      -
        value: >
          It's automatically retrieved from the request's query string.
        correct: false
      -
        value: >
          You must manually call `$request->attributes->get('id');`
        correct: false
    help: |
      Symfony's Argument Resolver automatically maps route parameters (stored in the Request's attributes) to controller method arguments if their names match.
      https://symfony.com/doc/current/components/http_kernel.html#controller-argument-resolution

  -
    question: >
      Which attribute can you use to automatically inject a service into a controller action method by type-hinting its interface?
    answers:
      -
        value: >
          `#[Inject]`
        correct: false
      -
        value: >
          `#[Autowire]`
        correct: false
      -
        value: >
          No attribute is needed; type-hinting is sufficient if the service is configured for autowiring.
        correct: true
      -
        value: >
          `#[Service]`
        correct: false
    help: |
      If autowiring is enabled (which it is by default in Symfony applications), simply type-hinting the service's class or interface in the controller method's arguments is enough for Symfony to inject it.
      https://symfony.com/doc/current/controller.html#autowiring-arguments

  -
    question: |
      What is an "invokable controller" in Symfony?
    answers:
      -
        value: >
          A controller that can be called directly from the command line.
        correct: false
      -
        value: >
          A controller class that implements the `__invoke()` magic method to handle requests.
        correct: true
      -
        value: >
          A controller that can only be invoked via an internal forward.
        correct: false
      -
        value: >
          A controller that uses a single static method for all actions.
        correct: false
    help: |
      An invokable controller is a class where the `__invoke()` method acts as the main action, allowing the class itself to be the callable for a route.
      https://symfony.com/doc/current/controller/service.html#invokable-controllers

  -
    question: |
      Which of the following is a valid way to define a route for an invokable controller `App\Controller\HelloController` in `config/routes.yaml`?
    answers:
      -
        value: |
          ```yaml
          hello:
              path: /hello
              controller: App\Controller\HelloController::__invoke
          ```
        correct: false
      -
        value: |
          ```yaml
          hello:
              path: /hello
              controller: App\Controller\HelloController
          ```
        correct: true
      -
        value: |
          ```yaml
          hello:
              path: /hello
              controller: App\Controller\HelloController::index
          ```
        correct: false
      -
        value: |
          ```yaml
          hello:
              path: /hello
              _controller: App\Controller\HelloController
          ```
        correct: true
    help: |
      For invokable controllers, you can directly reference the class name as the controller. Symfony's resolver will automatically call the `__invoke()` method.
      https://symfony.com/doc/current/controller/service.html#invokable-controllers

  -
    question: |
      When should you use `#[AsController]` on a controller class?
    answers:
      -
        value: >
          It's required for all controllers in Symfony 7.
        correct: false
      -
        value: >
          It explicitly marks a controller as a service, enabling autowiring for its constructor and action arguments, even if it doesn't extend `AbstractController`.
        correct: true
      -
        value: >
          It's used to define the base route for all actions within that controller.
        correct: false
      -
        value: >
          It makes the controller accessible via the command line.
        correct: false
    help: |
      The `#[AsController]` attribute is used to explicitly register a controller as a service, which is useful when you don't extend `AbstractController` but still want service injection.
      https://symfony.com/doc/current/controller/service.html#controllers-as-services

  -
    question: |
      Which of the following is a common practice for organizing controller files in a Symfony application?
    answers:
      -
        value: >
          Placing all controllers directly in the `src/` directory.
        correct: false
      -
        value: >
          Creating a `Controller` subdirectory inside `src/` (e.g., `src/Controller/`).
        correct: true
      -
        value: >
          Storing controllers in the `var/cache/` directory.
        correct: false
      -
        value: >
          Distributing controllers across different bundles, each in their own `Controller/` subdirectory.
        correct: true
    help: |
      The standard practice is to place controllers in `src/Controller/`. In larger applications, they might be organized within bundles, each having its own `Controller/` directory.
      https://symfony.com/doc/current/controller.html#controller-basics

  -
    question: |
      What is the purpose of the `kernel.controller` event in Symfony?
    answers:
      -
        value: >
          It's dispatched after the controller has returned a response.
        correct: false
      -
        value: >
          It's dispatched before the controller is executed, allowing listeners to modify the controller callable or its attributes.
        correct: true
      -
        value: >
          It's used to register new controllers with the HttpKernel.
        correct: false
      -
        value: >
          It's triggered when a controller throws an exception.
        correct: false
    help: |
      The `kernel.controller` event is dispatched after the controller callable has been determined but before its execution, enabling modifications to the controller or its attributes.
      https://symfony.com/doc/current/components/http_kernel.html#kernel-controller-event

  -
    question: |
      You need to retrieve a configuration parameter named `app.upload_directory` within your controller. Which `AbstractController` method should you use?
    answers:
      -
        value: >
          `$this->container->getParameter('app.upload_directory');`
        correct: false
      -
        value: >
          `$this->getParameter('app.upload_directory');`
        correct: true
      -
        value: >
          `$this->getParam('app.upload_directory');`
        correct: false
      -
        value: >
          `$this->config->get('app.upload_directory');`
        correct: false
    help: |
      The `getParameter()` method is a helper provided by `AbstractController` to access parameters from the service container.
      https://symfony.com/doc/current/controller.html#accessing-configuration-parameters

  -
    question: |
      Which of the following is NOT a valid way to define a controller in Symfony 7?
    answers:
      -
        value: >
          A PHP class with a public method.
        correct: false
      -
        value: >
          A PHP function (callable).
        correct: false
      -
        value: >
          A Twig template file.
        correct: true
      -
        value: >
          A class implementing the `__invoke()` method.
        correct: false
    help: |
      A controller must be a PHP callable (function, method on an object, or Closure). A Twig template is a view, not a controller.
      https://symfony.com/doc/current/controller.html#controller-basics

  -
    question: |
      You want to force a download of a file from your controller. Which `AbstractController` helper method is suitable for this?
    answers:
      -
        value: >
          `$this->download('/path/to/file.pdf');`
        correct: false
      -
        value: >
          `$this->file('/path/to/file.pdf');`
        correct: true
      -
        value: >
          `$this->stream('/path/to/file.pdf');`
        correct: false
      -
        value: >
          `$this->send('/path/to/file.pdf');`
        correct: false
    help: |
      The `file()` helper method from `AbstractController` returns a `BinaryFileResponse` which can be configured for downloads.
      https://symfony.com/doc/current/controller.html#serving-files

  -
    question: |
      What is the primary role of the `ControllerResolverInterface` in Symfony's HttpKernel?
    answers:
      -
        value: >
          To resolve the arguments for a given controller.
        correct: false
      -
        value: >
          To determine the PHP callable (controller) that should handle the current `Request`.
        correct: true
      -
        value: >
          To convert the `Response` object into an HTTP response string.
        correct: false
      -
        value: >
          To manage the lifecycle of services injected into controllers.
        correct: false
    help: |
      `ControllerResolverInterface` is responsible for finding and returning the correct PHP callable (controller) based on the request.
      https://symfony.com/doc/current/components/http_kernel.html#controller-resolution

  -
    question: |
      Which of the following is NOT a core component of the `Request` object that a controller frequently interacts with?
    answers:
      -
        value: >
          `query` (for GET parameters)
        correct: false
      -
        value: >
          `request` (for POST parameters)
        correct: false
      -
        value: >
          `headers` (for HTTP headers)
        correct: false
      -
        value: >
          `database` (for direct database access)
        correct: true
    help: |
      The `Request` object provides access to HTTP-related data. It does not provide direct database access.
      https://symfony.com/doc/current/controller.html#accessing-the-request

  -
    question: |
      You want to return an empty `Response` with a 204 No Content status code. Which is the most concise way to do this in a Symfony controller?
    answers:
      -
        value: >
          `return new Response('', 204);`
        correct: true
      -
        value: >
          `return $this->noContent();`
        correct: false
      -
        value: >
          `return $this->json(null, 204);`
        correct: false
      -
        value: >
          `return new EmptyResponse(204);`
        correct: false
    help: |
      A `Response` object can be instantiated with an empty string content and the desired status code.
      https://symfony.com/doc/current/controller.html#returning-a-response

  -
    question: |
      When defining a route using PHP attributes, which attribute is used to specify the URL path?
    answers:
      -
        value: >
          `#[Path('/my-path')]`
        correct: false
      -
        value: >
          `#[Url('/my-path')]`
        correct: false
      -
        value: >
          `#[Route('/my-path')]`
        correct: true
      -
        value: >
          `#[Map('/my-path')]`
        correct: false
    help: |
      The `#[Route]` attribute is used to define routes, and its first argument is the path.
      https://symfony.com/doc/current/routing.html#route-attributes

  -
    question: |
      What happens if a controller action method does not return a `Response` object?
    answers:
      -
        value: >
          Symfony will automatically render a default template.
        correct: false
      -
        value: >
          A `LogicException` will be thrown, indicating that the controller must return a `Response`.
        correct: true
      -
        value: >
          The application will crash silently.
        correct: false
      -
        value: >
          The request will be forwarded to a fallback controller.
        correct: false
    help: |
      The HttpKernel expects a `Response` object back from the controller. If it doesn't receive one, it will throw an exception.
      https://symfony.com/doc/current/controller.html#returning-a-response

  -
    question: |
      Which of the following is the correct way to get all flash messages of a specific type (e.g., 'success') in a Twig template?
    answers:
      -
        value: >
          `{{ app.session.flashbag.get('success') }}`
        correct: false
      -
        value: >
          `{{ app.flashes('success') }}`
        correct: true
      -
        value: >
          `{{ app.session.getFlashes('success') }}`
        correct: false
      -
        value: >
          `{{ app.request.session.getFlash('success') }}`
        correct: false
    help: |
      The `app.flashes()` Twig global function is the recommended way to retrieve flash messages in templates.
      https://symfony.com/doc/current/controller.html#flash-messages

  -
    question: |
      You have a controller method that accepts an `int $id` argument, and the route is `/items/{id}`. If the URL is `/items/abc`, what will happen?
    answers:
      -
        value: >
          Symfony will automatically convert `abc` to `0` for the `$id` argument.
        correct: false
      -
        value: >
          A `TypeMismatchException` will be thrown by the Argument Resolver.
        correct: false
      -
        value: >
          A `404 Not Found` error will occur because the route parameter `id` cannot be converted to an integer.
        correct: true
      -
        value: >
          The controller method will not be called, and the request will proceed to the next matching route.
        correct: false
    help: |
      If a route parameter with a type-hint cannot be cast to the specified type, Symfony's routing and argument resolution will fail, typically resulting in a 404 error.
      https://symfony.com/doc/current/routing.html#route-parameters

  -
    question: |
      Which of the following HTTP status codes indicates a permanent redirect?
    answers:
      -
        value: >
          302 (Found)
        correct: false
      -
        value: >
          307 (Temporary Redirect)
        correct: false
      -
        value: >
          301 (Moved Permanently)
        correct: true
      -
        value: >
          303 (See Other)
        correct: false
    help: |
      HTTP status code 301 signifies that the requested resource has been permanently moved to a new URL.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/301

  -
    question: |
      When using `AbstractController`, how can you generate a URL for a named route (e.g., `app_product_show`) with parameters (e.g., `id: 123`)?
    answers:
      -
        value: >
          `$this->getRouter()->generate('app_product_show', ['id' => 123]);`
        correct: false
      -
        value: >
          `$this->generateUrl('app_product_show', ['id' => 123]);`
        correct: true
      -
        value: >
          `$this->url('app_product_show', ['id' => 123]);`
        correct: false
      -
        value: >
          `$this->createUrl('app_product_show', ['id' => 123]);`
        correct: false
    help: |
      The `generateUrl()` method is a helper provided by `AbstractController` for generating URLs from named routes.
      https://symfony.com/doc/current/controller.html#generating-urls

  -
    question: |
      You want to pass data from your controller to a Twig template. Which is the correct way to do this using the `render()` method?
    answers:
      -
        value: >
          `return $this->render('template.html.twig', $dataArray);`
        correct: false
      -
        value: >
          `return $this->render('template.html.twig', ['key' => $value]);`
        correct: true
      -
        value: >
          `return $this->render('template.html.twig')->with('key', $value);`
        correct: false
      -
        value: >
          `return $this->render('template.html.twig', compact('key'));`
        correct: false
    help: |
      The second argument to `render()` is an associative array where keys become variable names in the Twig template.
      https://symfony.com/doc/current/controller.html#rendering-templates

  -
    question: |
      Which attribute is used to automatically map request payload (e.g., JSON body) to a DTO object in a controller action?
    answers:
      -
        value: >
          `#[MapRequest]`
        correct: false
      -
        value: >
          `#[MapPayload]`
        correct: false
      -
        value: >
          `#[MapRequestPayload]`
        correct: true
      -
        value: >
          `#[RequestBody]`
        correct: false
    help: |
      The `#[MapRequestPayload]` attribute (available in Symfony 6.2+) automatically deserializes the request body into a DTO.
      https://symfony.com/doc/current/controller/request_payload.html

  -
    question: |
      Consider the following controller method:

      ```php
      namespace App\Controller;

      use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
      use Symfony\Component\HttpFoundation\Response;
      use Symfony\Component\Routing\Attribute\Route;

      class ArticleController extends AbstractController
      {
          #[Route('/article/{slug}', name: 'app_article_show')]
          public function show(string $slug): Response
          {
              // ...
          }
      }
      ```

      If a request comes in for `/article/my-first-post`, how does Symfony provide the value for `$slug`?
    answers:
      -
        value: >
          It's retrieved from the `$_GET` superglobal.
        correct: false
      -
        value: >
          The `ArgumentResolver` extracts it from the route parameters in the `Request` attributes and injects it.
        correct: true
      -
        value: >
          It's a service automatically autowired by Symfony.
        correct: false
      -
        value: >
          It's a session variable.
        correct: false
    help: |
      Route parameters are stored in the `Request` object's attributes, and the Argument Resolver automatically injects them into controller method arguments that match the parameter name.
      https://symfony.com/doc/current/components/http_kernel.html#controller-argument-resolution

  -
    question: |
      What is the primary purpose of a "front controller" in a web application framework like Symfony?
    answers:
      -
        value: >
          To serve static assets like CSS and JavaScript.
        correct: false
      -
        value: >
          To handle all incoming requests through a single entry point, centralizing request processing.
        correct: true
      -
        value: >
          To manage database connections and queries.
        correct: false
      -
        value: >
          To render HTML templates.
        correct: false
    help: |
      A front controller is a design pattern where all requests are handled by a single script, which then dispatches them to the appropriate controller and action.
      https://symfony.com/doc/current/create_framework/front_controller.html

  -
    question: |
      Which of the following is true about controller naming conventions in Symfony 7?
    answers:
      -
        value: >
          Controller class names must end with `Controller`.
        correct: true
      -
        value: >
          Action method names must end with `Action`.
        correct: false
      -
        value: >
          Controller files must be named `index.php`.
        correct: false
      -
        value: >
          Controller class names must be prefixed with `App`.
        correct: false
    help: |
      While `*Controller` suffix is a strong convention, action methods no longer strictly require the `Action` suffix in modern Symfony.
      https://symfony.com/doc/current/controller.html#controller-basics

  -
    question: |
      You need to send a `103 Early Hints` response from your controller. Which `AbstractController` method can help you achieve this?
    answers:
      -
        value: >
          `$this->earlyHints();`
        correct: false
      -
        value: >
          `$this->sendEarlyHints();`
        correct: true
      -
        value: >
          `$this->response(null, 103);`
        correct: false
      -
        value: >
          `$this->prepareEarlyHints();`
        correct: false
    help: |
      The `sendEarlyHints()` method creates a `103 Early Hints` Response object and sends its headers immediately.
      https://symfony.com/doc/current/controller.html#early-hints

  -
    question: |
      If you have a custom object `BookingId` that you want to inject into a controller method based on a route parameter, what mechanism in Symfony allows this?
    answers:
      -
        value: >
          Service autowiring.
        correct: false
      -
        value: >
          A custom Argument Value Resolver.
        correct: true
      -
        value: >
          A custom Route Loader.
        correct: false
      -
        value: >
          The `#[MapEntity]` attribute.
        correct: false
    help: |
      Custom Argument Value Resolvers (implementing `ValueResolverInterface`) allow you to define how custom objects are instantiated and injected into controller arguments. `#[MapEntity]` is a specific resolver for Doctrine entities.
      https://symfony.com/doc/current/controller/value_resolver.html

  -
    question: |
      What is the purpose of the `#[MapQueryParameter]` attribute?
    answers:
      -
        value: >
          To map a route parameter to a controller argument.
        correct: false
      -
        value: >
          To automatically map a query string parameter to a controller argument, optionally with type conversion and validation.
        correct: true
      -
        value: >
          To map a POST request body parameter to a controller argument.
        correct: false
      -
        value: >
          To map a header value to a controller argument.
        correct: false
    help: |
      `#[MapQueryParameter]` is an argument value resolver that simplifies getting and converting query string parameters.
      https://symfony.com/doc/current/controller/map_query_parameter.html

  -
    question: |
      When handling a form submission in a controller, after calling `$form->handleRequest($request);`, which method should you typically call to check if the form was submitted and is valid?
    answers:
      -
        value: >
          `$form->isSubmitted() && $form->isValid();`
        correct: true
      -
        value: >
          `$form->hasErrors();`
        correct: false
      -
        value: >
          `$form->isPosted() && $form->isValidated();`
        correct: false
      -
        value: >
          `$form->process();`
        correct: false
    help: |
      The `isSubmitted()` and `isValid()` methods are used in conjunction to check the form's state after handling the request.
      https://symfony.com/doc/current/forms.html#handling-form-submissions

  -
    question: |
      Which of the following is a valid way to define a controller method that can accept both a `Request` object and a route parameter `id`?
    answers:
      -
        value: |
          ```php
          public function myAction(Request $request, int $id): Response
          { /* ... */ }
          ```
        correct: true
      -
        value: |
          ```php
          public function myAction(int $id, Request $request): Response
          { /* ... */ }
          ```
        correct: true
      -
        value: |
          ```php
          public function myAction($request, $id): Response
          { /* ... */ }
          ```
        correct: false
      -
        value: |
          ```php
          public function myAction(Request $request, $id): Response
          { /* ... */ }
          ```
        correct: false
    help: |
      The order of arguments for the `Request` object and route parameters does not matter, as Symfony's Argument Resolver matches by type-hint or name. However, all arguments should be type-hinted for proper resolution.
      https://symfony.com/doc/current/components/http_kernel.html#controller-argument-resolution

  -
    question: |
      What is the purpose of the `#[MapEntity]` attribute in a controller action?
    answers:
      -
        value: >
          To automatically persist an entity to the database.
        correct: false
      -
        value: >
          To map a route parameter directly to a Doctrine entity object, fetching it from the database.
        correct: true
      -
        value: >
          To validate the properties of an entity before it's used.
        correct: false
      -
        value: >
          To convert an entity object into a JSON response.
        correct: false
    help: |
      `#[MapEntity]` is an argument value resolver that automatically fetches a Doctrine entity based on a route parameter.
      https://symfony.com/doc/current/bundles/SensioFrameworkExtraBundle/annotations/converters.html#doctrine-converter (Note: While `SensioFrameworkExtraBundle` is often used for this, Symfony 6.2+ includes `#[MapEntity]` directly in the core.)

  -
    question: |
      Which of the following is the correct way to register controllers as services in `config/services.yaml` to allow autowiring of their action arguments?
    answers:
      -
        value: |
          ```yaml
          App\Controller\:
              resource: '../src/Controller/'
              tags: ['controller.service_arguments']
          ```
        correct: true
      -
        value: |
          ```yaml
          services:
              _defaults:
                  autowire: true
                  autoconfigure: true
          App\Controller\:
              resource: '../src/Controller/'
          ```
        correct: true
      -
        value: |
          ```yaml
          controllers:
              App\Controller\: ~
          ```
        correct: false
      -
        value: |
          ```yaml
          App\Controller\:
              resource: '../src/Controller/'
              public: true
          ```
        correct: false
    help: |
      By default, `_defaults` with `autowire: true` and `autoconfigure: true` will handle this. Explicitly tagging with `controller.service_arguments` also works, especially if autoconfigure is off.
      https://symfony.com/doc/current/controller/service.html#controllers-as-services

  -
    question: |
      What is the main advantage of using `#[Route]` attributes over YAML or XML for route definition in Symfony 7?
    answers:
      -
        value: >
          They offer better performance.
        correct: false
      -
        value: >
          They keep route definitions co-located with the controller logic, improving readability and maintainability.
        correct: true
      -
        value: >
          They are automatically generated by the framework.
        correct: false
      -
        value: >
          They allow for more complex routing logic that is not possible with other formats.
        correct: false
    help: |
      Co-location of route definition and controller logic is a key benefit of using attributes.
      https://symfony.com/doc/current/routing.html#route-attributes

  -
    question: |
      When creating a new controller using `php bin/console make:controller MyNewController`, what does the MakerBundle typically generate?
    answers:
      -
        value: >
          A controller class `src/Controller/MyNewController.php` and an associated Twig template `templates/my_new/index.html.twig`.
        correct: true
      -
        value: >
          Only a controller class, without any template.
        correct: false
      -
        value: >
          A controller class and a service definition in `config/services.yaml`.
        correct: false
      -
        value: >
          A controller class and a new route entry in `config/routes.yaml`.
        correct: true
    help: |
      `make:controller` typically generates both the controller class and a basic Twig template, along with a route definition.
      https://symfony.com/doc/current/controller.html#generating-a-controller

  -
    question: |
      Which of the following is the correct way to get the base URL of the current request within a controller?
    answers:
      -
        value: >
          `$request->getUri();`
        correct: false
      -
        value: >
          `$request->getUriForPath('/');`
        correct: false
      -
        value: >
          `$request->getSchemeAndHttpHost();`
        correct: true
      -
        value: >
          `$request->getBaseUrl();`
        correct: true
    help: |
      `getSchemeAndHttpHost()` returns the scheme and HTTP host (e.g., `https://example.com`). `getBaseUrl()` returns the base URL of the request (e.g., `/app.php`).
      https://symfony.com/doc/current/components/http_foundation/requests.html#accessing-request-data

  -
    question: |
      You need to create a `Response` object that streams content (e.g., a large file or real-time data). Which `Response` subclass is most appropriate?
    answers:
      -
        value: >
          `JsonResponse`
        correct: false
      -
        value: >
          `RedirectResponse`
        correct: false
      -
        value: >
          `StreamedResponse`
        correct: true
      -
        value: >
          `BinaryFileResponse`
        correct: false
    help: |
      `StreamedResponse` allows you to stream content to the browser, useful for large files or long-running processes.
      https://symfony.com/doc/current/components/http_foundation/responses.html#streaming-responses

  -
    question: |
      What is the primary purpose of the `RequestStack` service in Symfony?
    answers:
      -
        value: >
          To manage a stack of `Response` objects.
        correct: false
      -
        value: >
          To provide access to the current `Request` object and potentially previous requests in a sub-request context.
        correct: true
      -
        value: >
          To store session data across multiple requests.
        correct: false
      -
        value: >
          To handle HTTP caching for requests.
        correct: false
    help: |
      `RequestStack` manages the lifecycle of `Request` objects, especially in the context of sub-requests (e.g., `forward()` calls).
      https://symfony.com/doc/current/components/http_kernel.html#request-stack

  -
    question: |
      Which HTTP method is typically used for submitting forms that create new resources on the server?
    answers:
      -
        value: >
          GET
        correct: false
      -
        value: >
          PUT
        correct: false
      -
        value: >
          POST
        correct: true
      -
        value: >
          DELETE
        correct: false
    help: |
      POST is the standard method for submitting data to be processed and typically resulting in a change on the server (e.g., creating a new resource).
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST

  -
    question: |
      You want to retrieve a header value from the incoming request, for example, the `User-Agent` header. How would you do this?
    answers:
      -
        value: >
          `$request->headers->get('User-Agent');`
        correct: true
      -
        value: >
          `$request->getHeader('User-Agent');`
        correct: false
      -
        value: >
          `$_SERVER['HTTP_USER_AGENT'];`
        correct: false
      -
        value: >
          `$request->get('User-Agent');`
        correct: false
    help: |
      The `headers` property of the `Request` object is a `HeaderBag` that allows access to request headers.
      https://symfony.com/doc/current/components/http_foundation/requests.html#accessing-request-data

  -
    question: |
      What is the recommended way to handle a `PUT` request containing JSON data in a Symfony controller?
    answers:
      -
        value: >
          Access `$_PUT` superglobal.
        correct: false
      -
        value: >
          Use `$request->request->all()` and then `json_decode()`.
        correct: false
      -
        value: >
          Use `$request->getContent()` and then `json_decode()`.
        correct: true
      -
        value: >
          Use `#[MapRequestPayload]` attribute on a DTO.
        correct: true
    help: |
      For non-form POST/PUT requests (like JSON APIs), the content is in the request body, accessed via `getContent()`. `#[MapRequestPayload]` is the modern, more convenient way.
      https://symfony.com/doc/current/controller/request_payload.html

  -
    question: |
      Which of the following is a valid method signature for a controller action that receives an optional route parameter `page` with a default value?
    answers:
      -
        value: |
          ```php
          public function list(int $page = 1): Response
          { /* ... */ }
          ```
        correct: true
      -
        value: |
          ```php
          public function list(Request $request, int $page = 1): Response
          { /* ... */ }
          ```
        correct: true
      -
        value: |
          ```php
          public function list($page = 1): Response
          { /* ... */ }
          ```
        correct: false
      -
        value: |
          ```php
          public function list(int $page = null): Response
          { /* ... */ }
          ```
        correct: false
    help: |
      Symfony's Argument Resolver supports default values for route parameters directly in the method signature. Type-hinting is crucial.
      https://symfony.com/doc/current/components/http_kernel.html#controller-argument-resolution

  -
    question: |
      When should you consider creating a custom Argument Value Resolver?
    answers:
      -
        value: >
          When you need to perform complex validation on controller arguments.
        correct: false
      -
        value: >
          When you want to automatically convert a request parameter into a custom object or value that isn't handled by built-in resolvers.
        correct: true
      -
        value: >
          When you want to inject a service into your controller.
        correct: false
      -
        value: >
          When you need to modify the `Response` object before it's sent.
        correct: false
    help: |
      Custom Argument Value Resolvers are ideal for handling complex argument resolution logic, such as creating custom value objects from request data.
      https://symfony.com/doc/current/controller/value_resolver.html

  -
    question: |
      What is the purpose of the `Request::isXmlHttpRequest()` method?
    answers:
      -
        value: >
          To check if the request body is XML.
        correct: false
      -
        value: >
          To determine if the request was made via AJAX (e.g., by checking the `X-Requested-With` header).
        correct: true
      -
        value: >
          To validate if the request originated from a trusted domain.
        correct: false
      -
        value: >
          To check if the request is using the `XMLHttpRequest` object.
        correct: false
    help: |
      `isXmlHttpRequest()` is a convenience method to check if the request is an AJAX request, typically by looking for the `X-Requested-With: XMLHttpRequest` header.
      https://symfony.com/doc/current/components/http_foundation/requests.html#checking-request-methods

  -
    question: |
      Which of the following is true about the `Response` object in Symfony?
    answers:
      -
        value: >
          It is immutable once created.
        correct: false
      -
        value: >
          It encapsulates all the information needed to send an HTTP response back to the client.
        correct: true
      -
        value: >
          It automatically handles caching headers.
        correct: false
      -
        value: >
          It can only contain HTML content.
        correct: false
    help: |
      The `Response` object is mutable and contains the content, status code, and headers for the HTTP response.
      https://symfony.com/doc/current/components/http_foundation/responses.html

  -
    question: |
      You want to set a custom HTTP header, e.g., `X-Custom-Header: MyValue`, in your response. How can you do this?
    answers:
      -
        value: >
          `$response->headers->set('X-Custom-Header', 'MyValue');`
        correct: true
      -
        value: >
          `$response->setHeader('X-Custom-Header', 'MyValue');`
        correct: false
      -
        value: >
          `$response->addHeader('X-Custom-Header', 'MyValue');`
        correct: false
      -
        value: >
          `$response->setHeaders(['X-Custom-Header' => 'MyValue']);`
        correct: true
    help: |
      The `headers` property of the `Response` object is a `HeaderBag` that allows setting response headers.
      https://symfony.com/doc/current/components/http_foundation/responses.html#setting-headers

  -
    question: |
      What is the purpose of the `#[MapQueryString]` attribute?
    answers:
      -
        value: >
          To map the entire query string to a single string argument.
        correct: false
      -
        value: >
          To automatically map all query string parameters to a DTO object.
        correct: true
      -
        value: >
          To map a specific query parameter to a controller argument.
        correct: false
      -
        value: >
          To map query parameters to an array.
        correct: false
    help: |
      `#[MapQueryString]` maps the entire query string into a DTO, allowing for structured access to multiple query parameters.
      https://symfony.com/doc/current/controller/map_query_string.html

  -
    question: |
      Which of the following is a valid way to define a route for a controller using PHP configuration in `config/routes.php`?
    answers:
      -
        value: |
          ```php
          use App\Controller\MyController;
          use Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator;

          return function (RoutingConfigurator $routes): void {
              $routes->add('my_route', '/my-path')
                  ->controller([MyController::class, 'index'])
              ;
          };
          ```
        correct: true
      -
        value: |
          ```php
          $collection->add('my_route', new Route('/my-path', [
              '_controller' => 'App\Controller\MyController::index',
          ]));
          ```
        correct: true
      -
        value: |
          ```php
          $routes->add('my_route', '/my-path', 'App\Controller\MyController::index');
          ```
        correct: false
      -
        value: |
          ```php
          return [
              'my_route' => [
                  'path' => '/my-path',
                  'controller' => 'App\Controller\MyController::index',
              ],
          ];
          ```
        correct: false
    help: |
      Symfony supports PHP configuration for routes, either using the `RoutingConfigurator` or directly building `Route` objects.
      https://symfony.com/doc/current/routing.html#defining-routes-in-php

  -
    question: |
      What is the purpose of the `#[Cache]` attribute on a controller method?
    answers:
      -
        value: >
          To store the method's return value in the application cache.
        correct: false
      -
        value: >
          To configure HTTP caching headers (e.g., `Cache-Control`, `ETag`) for the response generated by the controller.
        correct: true
      -
        value: >
          To mark the controller method as cacheable by Symfony's internal caching mechanism.
        correct: false
      -
        value: >
          To enable OPCache for the controller class.
        correct: false
    help: |
      The `#[Cache]` attribute is used to configure HTTP caching for a controller's response.
      https://symfony.com/doc/current/http_cache.html#http-cache-in-symfony

  -
    question: |
      Which of the following is a valid way to retrieve a service (e.g., `MailerInterface`) in a controller that extends `AbstractController` without explicitly type-hinting it in the action method?
    answers:
      -
        value: >
          `$mailer = $this->get('mailer');`
        correct: false
      -
        value: >
          `$mailer = $this->container->get('mailer.mailer');`
        correct: false
      -
        value: >
          `$mailer = $this->container->get(MailerInterface::class);`
        correct: true
      -
        value: >
          `$mailer = $this->getMailer();`
        correct: false
    help: |
      While type-hinting is preferred, you can access the service container via `$this->container` and use its `get()` method with the service ID or class name. Note that `AbstractController` itself doesn't directly expose a `get()` for arbitrary services, but the container is accessible.
      https://symfony.com/doc/current/service_container.html#fetching-services-from-the-container

  -
    question: |
      What is the significance of the `_controller` attribute in a Symfony route definition?
    answers:
      -
        value: >
          It defines the default template to render for the route.
        correct: false
      -
        value: >
          It specifies the PHP callable (controller class and method, or invokable class) that should handle the request for that route.
        correct: true
      -
        value: >
          It's a placeholder for route parameters.
        correct: false
      -
        value: >
          It indicates whether the route requires authentication.
        correct: false
    help: |
      The `_controller` attribute is a special route attribute used by the `ControllerResolver` to identify which controller to execute.
      https://symfony.com/doc/current/routing.html#controller-string-format

  -
    question: |
      You want to create a `Response` object that serves a file directly from the filesystem, optimizing for large files. Which `Response` subclass is best suited for this?
    answers:
      -
        value: >
          `Response`
        correct: false
      -
        value: >
          `StreamedResponse`
        correct: false
      -
        value: >
          `BinaryFileResponse`
        correct: true
      -
        value: >
          `FileResponse`
        correct: false
    help: |
      `BinaryFileResponse` is optimized for serving static files directly, leveraging HTTP features like `Range` requests.
      https://symfony.com/doc/current/components/http_foundation/responses.html#serving-files

  -
    question: |
      When using `#[MapUploadedFile]`, what happens if the uploaded file field specified by the argument name is not present in the request?
    answers:
      -
        value: >
          The argument will be `null`.
        correct: false
      -
        value: >
          A `NotFoundHttpException` will be thrown.
        correct: false
      -
        value: >
          A `MissingValueException` will be thrown by the argument resolver.
        correct: true
      -
        value: >
          The application will continue, but the file won't be processed.
        correct: false
    help: |
      If the file is missing and the argument is not nullable, a `MissingValueException` will be thrown. You can make the argument nullable (`#[MapUploadedFile] ?UploadedFile $picture`) to handle optional uploads.
      https://symfony.com/doc/current/controller.html#mapuploadedfile

  -
    question: |
      Which of the following is a valid way to define a route for a controller using XML configuration?
    answers:
      -
        value: |
          ```xml
          <route id="hello" path="/hello" controller="App\Controller\HelloController::index"/>
          ```
        correct: true
      -
        value: |
          ```xml
          <route id="hello" path="/hello">
              <controller>App\Controller\HelloController::index</controller>
          </route>
          ```
        correct: false
      -
        value: |
          ```xml
          <route id="hello" path="/hello" _controller="App\Controller\HelloController::index"/>
          ```
        correct: false
      -
        value: |
          ```xml
          <route name="hello" uri="/hello" action="App\Controller\HelloController::index"/>
          ```
        correct: false
    help: |
      XML routing uses the `controller` attribute or a `default` element with `_controller` key.
      https://symfony.com/doc/current/routing.html#defining-routes-in-xml

  -
    question: |
      What is the primary role of the `HttpKernel` component in Symfony?
    answers:
      -
        value: >
          To manage the dependency injection container.
        correct: false
      -
        value: >
          To handle the entire HTTP request-response lifecycle, from receiving a request to sending a response.
        correct: true
      -
        value: >
          To provide a templating engine.
        correct: false
      -
        value: >
          To manage database interactions.
        correct: false
    help: |
      The `HttpKernel` is the core component that orchestrates the entire request handling process.
      https://symfony.com/doc/current/components/http_kernel.html

  -
    question: |
      If you need to access the current environment (e.g., `dev`, `prod`) within your controller, how can you do this when extending `AbstractController`?
    answers:
      -
        value: >
          `$this->getEnvironment();`
        correct: false
      -
        value: >
          `$this->getParameter('kernel.environment');`
        correct: true
      -
        value: >
          `$_ENV['APP_ENV'];`
        correct: false
      -
        value: >
          `$this->container->get('kernel')->getEnvironment();`
        correct: true
    help: |
      The environment is available as a kernel parameter (`kernel.environment`) or directly from the kernel service.
      https://symfony.com/doc/current/controller.html#accessing-configuration-parameters

  -
    question: |
      Which of the following is true about the `Request` object's `attributes` property?
    answers:
      -
        value: >
          It contains all GET and POST parameters.
        correct: false
      -
        value: >
          It stores data that is specific to the matched route, such as route parameters and the `_controller`.
        correct: true
      -
        value: >
          It holds all HTTP headers.
        correct: false
      -
        value: >
          It is used to store session data.
        correct: false
    help: |
      The `attributes` property is a `ParameterBag` that holds data determined during the routing process, including route parameters and special `_` attributes.
      https://symfony.com/doc/current/components/http_foundation/requests.html#request-attributes

  -
    question: |
      What is the purpose of the `#[MapRequestPayload]` attribute when used with a DTO that has validation constraints?
    answers:
      -
        value: >
          It automatically persists the DTO to the database if validation passes.
        correct: false
      -
        value: >
          It automatically validates the DTO against its constraints and throws a `ValidationException` if validation fails.
        correct: true
      -
        value: >
          It converts the DTO into a JSON response.
        correct: false
      -
        value: >
          It's only used for mapping query parameters, not request bodies.
        correct: false
    help: |
      `#[MapRequestPayload]` integrates with the Validator component, automatically validating the DTO and throwing an exception on failure.
      https://symfony.com/doc/current/controller/request_payload.html#validating-the-payload

  -
    question: |
      You want to retrieve the client's IP address from the `Request` object. Which method should you use?
    answers:
      -
        value: >
          `$request->getClientIp();`
        correct: true
      -
        value: >
          `$request->getIp();`
        correct: false
      -
        value: >
          `$_SERVER['REMOTE_ADDR'];`
        correct: false
      -
        value: >
          `$request->getRemoteAddress();`
        correct: false
    help: |
      The `getClientIp()` method provides the client's IP address, taking into account proxy headers if configured.
      https://symfony.com/doc/current/components/http_foundation/requests.html#getting-the-client-s-ip-address

  -
    question: |
      Which of the following is NOT a standard HTTP method that a controller action might handle?
    answers:
      -
        value: >
          GET
        correct: false
      -
        value: >
          POST
        correct: false
      -
        value: >
          FETCH
        correct: true
      -
        value: >
          DELETE
        correct: false
    help: |
      `FETCH` is a JavaScript API, not an HTTP method. Standard HTTP methods include GET, POST, PUT, DELETE, PATCH, HEAD, OPTIONS.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods

  -
    question: |
      What is the primary reason for making controllers "services" in Symfony?
    answers:
      -
        value: >
          To make them accessible from the command line.
        correct: false
      -
        value: >
          To enable dependency injection into their constructors and action methods, promoting reusability and testability.
        correct: true
      -
        value: >
          To automatically generate routes for them.
        correct: false
      -
        value: >
          To make them globally available without needing to be imported.
        correct: false
    help: |
      Registering controllers as services allows Symfony's Dependency Injection Container to manage their dependencies and inject them automatically.
      https://symfony.com/doc/current/controller/service.html

  -
    question: |
      You want to redirect to a specific URL that is not a named route. Which `AbstractController` method should you use?
    answers:
      -
        value: >
          `return $this->redirectToUrl('https://example.com');`
        correct: false
      -
        value: >
          `return $this->redirect('https://example.com');`
        correct: true
      -
        value: >
          `return new Response('', 302, ['Location' => 'https://example.com']);`
        correct: true
      -
        value: >
          `return $this->forwardToUrl('https://example.com');`
        correct: false
    help: |
      The `redirect()` helper method allows redirection to an arbitrary URL. Directly creating a `RedirectResponse` is also valid.
      https://symfony.com/doc/current/controller.html#redirecting

  -
    question: |
      What is the purpose of the `#[MapQueryParameter]` attribute when used with a nullable type-hint (e.g., `#[MapQueryParameter] ?int $page`)?
    answers:
      -
        value: >
          It makes the query parameter mandatory.
        correct: false
      -
        value: >
          If the query parameter is missing, the argument will be `null` instead of throwing an exception.
        correct: true
      -
        value: >
          It automatically sets a default value of `0` if the parameter is missing.
        correct: false
      -
        value: >
          It allows the parameter to be either an integer or a string.
        correct: false
    help: |
      Making the argument nullable with `#[MapQueryParameter]` means that if the parameter is not present in the query string, `null` will be injected instead of an exception being thrown.
      https://symfony.com/doc/current/controller/map_query_parameter.html

  -
    question: |
      Which of the following is the correct way to retrieve all flash messages, regardless of type, in a Twig template?
    answers:
      -
        value: >
          `{{ app.session.getFlashes() }}`
        correct: false
      -
        value: >
          `{{ app.flashes() }}`
        correct: true
      -
        value: >
          `{{ app.session.flashbag.all() }}`
        correct: false
      -
        value: >
          `{{ app.request.session.getFlashBag()->all() }}`
        correct: false
    help: |
      Calling `app.flashes()` without arguments retrieves all flash messages.
      https://symfony.com/doc/current/controller.html#flash-messages

  -
    question: |
      You have a controller action that needs to access a service, `App\Service\MyService`. Which is the most common and recommended way to inject this service?
    answers:
      -
        value: |
          ```php
          public function myAction(): Response
          {
              $myService = $this->container->get(MyService::class);
              // ...
          }
          ```
        correct: false
      -
        value: |
          ```php
          public function myAction(MyService $myService): Response
          {
              // ...
          }
          ```
        correct: true
      -
        value: |
          ```php
          public function __construct(private MyService $myService)
          { /* ... */ }

          public function myAction(): Response
          {
              // ... $this->myService ...
          }
          ```
        correct: true
      -
        value: |
          ```php
          public function myAction(): Response
          {
              $myService = new MyService();
              // ...
          }
          ```
        correct: false
    help: |
      Autowiring by type-hinting in either the constructor or the action method is the recommended practice for injecting services into controllers.
      https://symfony.com/doc/current/controller.html#autowiring-arguments

  -
    question: |
      What is the purpose of the `#[MapRequestPayload]` attribute when the request content type is not JSON (e.g., `application/xml`)?
    answers:
      -
        value: >
          It will automatically convert the XML to JSON before mapping.
        correct: false
      -
        value: >
          It will throw an exception because it only supports JSON by default.
        correct: true
      -
        value: >
          It will attempt to deserialize the XML into the DTO if a suitable deserializer is configured.
        correct: true
      -
        value: >
          It will ignore the request body and map only query parameters.
        correct: false
    help: |
      By default, `#[MapRequestPayload]` expects JSON. However, if the Serializer component is configured with other encoders (like XML), it can handle other formats. If no suitable deserializer is found, it will throw an exception.
      https://symfony.com/doc/current/controller/request_payload.html#supported-formats

  -
    question: |
      Which of the following is the most secure way to get a user-provided value from the request (e.g., from a form field) in a Symfony controller?
    answers:
      -
        value: >
          Directly accessing `$_POST['field_name']`.
        correct: false
      -
        value: >
          Using `$request->request->get('field_name');`
        correct: true
      -
        value: >
          Using `$request->get('field_name');`
        correct: true
      -
        value: >
          Using `$request->query->get('field_name');`
        correct: false
    help: |
      `$request->request->get()` is for POST data. `$request->get()` checks both GET and POST. Both are safer than direct superglobal access as they provide default value handling and are part of the `Request` object.
      https://symfony.com/doc/current/components/http_foundation/requests.html#accessing-request-data

  -
    question: |
      You are building an API endpoint and want to return a 201 Created status code with an empty body. Which is the most appropriate way to do this?
    answers:
      -
        value: >
          `return new Response('', 201);`
        correct: true
      -
        value: >
          `return $this->json(null, 201);`
        correct: true
      -
        value: >
          `return $this->created();`
        correct: false
      -
        value: >
          `return new JsonResponse([], 201);`
        correct: true
    help: |
      All three options correctly return a 201 status code. `new Response('', 201)` is the most basic. `json(null, 201)` or `JsonResponse([], 201)` are suitable for API contexts where a JSON response is expected even if empty.
      https://symfony.com/doc/current/controller.html#json-response

  -
    question: |
      What is the purpose of the `Request::getPathInfo()` method?
    answers:
      -
        value: >
          To get the full URL including the query string.
        correct: false
      -
        value: >
          To get the path relative to the front controller, without the query string.
        correct: true
      -
        value: >
          To get the base URL of the application.
        correct: false
      -
        value: >
          To get the name of the current route.
        correct: false
    help: |
      `getPathInfo()` returns the path part of the URL, relative to the front controller, and excludes the query string.
      https://symfony.com/doc/current/components/http_foundation/requests.html#accessing-request-data

  -
    question: |
      Which of the following is true regarding the `AbstractController` and its methods?
    answers:
      -
        value: >
          All methods provided by `AbstractController` are also available as global functions.
        correct: false
      -
        value: >
          Extending `AbstractController` is mandatory for all Symfony controllers.
        correct: false
      -
        value: >
          `AbstractController` provides shortcuts to common services like `router`, `twig`, and `session`.
        correct: true
      -
        value: >
          Methods like `render()` automatically commit the response to the browser.
        correct: false
    help: |
      `AbstractController` provides convenient access to commonly used services. It is not mandatory, and its methods return a `Response` object which then needs to be sent.
      https://symfony.com/doc/current/controller.html#extending-the-base-controller-class

  -
    question: |
      What is the difference between `Request::getUri()` and `Request::getUriAndQuery()`?
    answers:
      -
        value: >
          `getUri()` returns the URI without the scheme, while `getUriAndQuery()` includes it.
        correct: false
      -
        value: >
          `getUri()` returns the full URI including scheme, host, and path, while `getUriAndQuery()` additionally includes the query string.
        correct: true
      -
        value: >
          `getUri()` is deprecated, `getUriAndQuery()` is the modern equivalent.
        correct: false
      -
        value: >
          `getUri()` is for internal redirects, `getUriAndQuery()` is for external redirects.
        correct: false
    help: |
      `getUri()` returns the URI up to the path. `getUriAndQuery()` includes the query string.
      https://symfony.com/doc/current/components/http_foundation/requests.html#accessing-request-data

  -
    question: |
      You want to retrieve a specific cookie named `user_id` from the `Request` object. If the cookie is not set, you want a default value of `0`.
    answers:
      -
        value: >
          `$userId = $request->cookies->get('user_id', 0);`
        correct: true
      -
        value: >
          `$userId = $request->getCookie('user_id') ?? 0;`
        correct: false
      -
        value: >
          `$userId = $_COOKIE['user_id'] ?: 0;`
        correct: false
      -
        value: >
          `$userId = $request->cookies->find('user_id') ?: 0;`
        correct: false
    help: |
      The `get()` method of `ParameterBag` (which `Request::cookies` is) allows specifying a default value.
      https://symfony.com/doc/current/components/http_foundation/cookies.html#retrieving-cookies

  -
    question: |
      Which of the following is the correct way to invalidate the user's session in a Symfony controller?
    answers:
      -
        value: >
          `$request->getSession()->clear();`
        correct: false
      -
        value: >
          `$request->getSession()->invalidate();`
        correct: true
      -
        value: >
          `$request->getSession()->destroy();`
        correct: false
      -
        value: >
          `session_destroy();`
        correct: false
    help: |
      The `invalidate()` method of the `SessionInterface` invalidates the current session and regenerates the session ID.
      https://symfony.com/doc/current/components/http_foundation/sessions.html#invalidating-a-session

  -
    question: |
      What is the main advantage of using `#[AsController]` over manually tagging controllers as services in `services.yaml`?
    answers:
      -
        value: >
          It allows for more complex service definitions.
        correct: false
      -
        value: >
          It keeps the service configuration co-located with the controller class, improving discoverability and reducing YAML configuration.
        correct: true
      -
        value: >
          It's required for lazy-loading controllers.
        correct: false
      -
        value: >
          It prevents controllers from being autowired.
        correct: false
    help: |
      `#[AsController]` is a modern approach that simplifies controller service definition by using attributes directly on the class.
      https://symfony.com/doc/current/controller/service.html#controllers-as-services

  -
    question: |
      You need to get the current route name within a controller. How can you access it from the `Request` object?
    answers:
      -
        value: >
          `$request->getRouteName();`
        correct: false
      -
        value: >
          `$request->attributes->get('_route');`
        correct: true
      -
        value: >
          `$request->getPathInfo();`
        correct: false
      -
        value: >
          `$this->get('router')->getContext()->getRouteName();`
        correct: false
    help: |
      The `_route` attribute in the `Request` object's attributes bag stores the name of the matched route.
      https://symfony.com/doc/current/routing.html#route-parameters

  -
    question: |
      Which of the following is true about `BinaryFileResponse`?
    answers:
      -
        value: >
          It is primarily used for streaming real-time data.
        correct: false
      -
        value: >
          It automatically handles HTTP headers like `Content-Disposition` for file downloads.
        correct: true
      -
        value: >
          It requires the entire file to be loaded into memory before sending.
        correct: false
      -
        value: >
          It can only serve image files.
        correct: false
    help: |
      `BinaryFileResponse` is designed for efficient file serving and can automatically set appropriate headers for downloads.
      https://symfony.com/doc/current/components/http_foundation/responses.html#serving-files

  -
    question: |
      What is the primary difference between `#[MapQueryParameter]` and `#[MapQueryString]`?
    answers:
      -
        value: >
          `#[MapQueryParameter]` maps a single query parameter, while `#[MapQueryString]` maps the entire query string to a DTO.
        correct: true
      -
        value: >
          `#[MapQueryParameter]` is for GET requests, `#[MapQueryString]` is for POST requests.
        correct: false
      -
        value: >
          `#[MapQueryParameter]` requires a type-hint, `#[MapQueryString]` does not.
        correct: false
      -
        value: >
          `#[MapQueryString]` is deprecated in Symfony 7.
        correct: false
    help: |
      `#[MapQueryParameter]` targets individual parameters, while `#[MapQueryString]` is for mapping the whole query string into a structured object.
      https://symfony.com/doc/current/controller/map_query_parameter.html
      https://symfony.com/doc/current/controller/map_query_string.html

  -
    question: |
      When would you use a `StreamedResponse` instead of a regular `Response`?
    answers:
      -
        value: >
          When the response content is very small and can be generated quickly.
        correct: false
      -
        value: >
          When you need to send a response immediately without waiting for all content to be generated (e.g., for long-running tasks or real-time updates).
        correct: true
      -
        value: >
          When the response needs to be cached by the client.
        correct: false
      -
        value: >
          When you are returning a JSON API response.
        correct: false
    help: |
      `StreamedResponse` is used when you want to send parts of the response to the client as they become available, rather than waiting for the entire response to be built.
      https://symfony.com/doc/current/components/http_foundation/responses.html#streaming-responses

  -
    question: |
      Which of the following is a valid way to define a route for a controller using YAML configuration?
    answers:
      -
        value: |
          ```yaml
          my_route:
              path: /my-path
              controller: App\Controller\MyController::index
          ```
        correct: true
      -
        value: |
          ```yaml
          routes:
              my_route:
                  path: /my-path
                  controller: App\Controller\MyController::index
          ```
        correct: false
      -
        value: |
          ```yaml
          my_route:
              path: /my-path
              _controller: App\Controller\MyController::index
          ```
        correct: true
      -
        value: |
          ```yaml
          my_route:
              url: /my-path
              action: App\Controller\MyController::index
          ```
        correct: false
    help: |
      YAML routing uses `path` and `controller` (or `_controller`) keys.
      https://symfony.com/doc/current/routing.html#defining-routes-in-yaml

  -
    question: |
      What is the purpose of the `#[MapRequestPayload]` attribute when applied to a controller method argument?
    answers:
      -
        value: >
          It maps query parameters from the URL to the argument.
        correct: false
      -
        value: >
          It automatically deserializes the request body (e.g., JSON, XML) into the type-hinted DTO or object.
        correct: true
      -
        value: >
          It maps uploaded files to the argument.
        correct: false
      -
        value: >
          It validates the request headers.
        correct: false
    help: |
      `#[MapRequestPayload]` is an argument value resolver that handles deserialization of the request body into a PHP object.
      https://symfony.com/doc/current/controller/request_payload.html

  -
    question: |
      You want to access the `User` object representing the currently logged-in user within your controller. Assuming security is configured, how would you typically do this when extending `AbstractController`?
    answers:
      -
        value: >
          `$user = $this->getUser();`
        correct: true
      -
        value: >
          `$user = $this->get('security.token_storage')->getToken()->getUser();`
        correct: true
      -
        value: >
          `$user = $this->security->getUser();`
        correct: false
      -
        value: >
          `$user = $this->container->get('security.user_provider')->getUser();`
        correct: false
    help: |
      The `getUser()` helper method from `AbstractController` is the most convenient way. Direct access to the token storage is also correct.
      https://symfony.com/doc/current/security.html#accessing-the-user-object

  -
    question: |
      Which of the following is true about the `Request` object and its immutability?
    answers:
      -
        value: >
          The `Request` object is always immutable in Symfony.
        correct: false
      -
        value: >
          The `Request` object is mutable, allowing controllers to modify its attributes.
        correct: true
      -
        value: >
          Only the `query` and `request` properties of the `Request` object are mutable.
        correct: false
      -
        value: >
          The `Request` object becomes immutable after it leaves the controller.
        correct: false
    help: |
      The `Request` object is mutable, and its attributes can be modified by listeners or controllers.
      https://symfony.com/doc/current/components/http_foundation/requests.html#request-attributes

  -
    question: |
      What is the purpose of the `#[MapQueryParameter]` attribute when used with a default value (e.g., `#[MapQueryParameter(name: 'page', default: 1)] int $page`)?
    answers:
      -
        value: >
          It makes the query parameter mandatory.
        correct: false
      -
        value: >
          It provides a fallback value if the query parameter is not present in the URL.
        correct: true
      -
        value: >
          It automatically converts the parameter to a string.
        correct: false
      -
        value: >
          It only works for string parameters.
        correct: false
    help: |
      The `default` option in `#[MapQueryParameter]` provides a value if the parameter is missing from the query string.
      https://symfony.com/doc/current/controller/map_query_parameter.html

  -
    question: >
      What is the recommended way to handle form submissions in Symfony controllers?
    answers:
      -
        value: >
          Manually access `$_POST` and validate data.
        correct: false
      -
        value: >
          Use the `Form` component: create a form, handle the request, and check if it's submitted and valid.
        correct: true
      -
        value: >
          Inject the `FormFactory` service and call `createFormBuilder()`.
        correct: true
      -
        value: >
          Use a custom argument resolver for each form field.
        correct: false
    help: |
      The Symfony Form component provides a robust way to handle forms, including creation, submission, and validation.
      https://symfony.com/doc/current/forms.html```yaml
category: Controllers

questions:
  -
    question: >
      Which of the following is the recommended naming convention for a Symfony controller class?
    answers:
      -
        value: >
          `MyController.php`
        correct: false
      -
        value: >
          `MyBundleController.php`
        correct: false
      -
        value: >
          `MyController.php` (e.g., `src/Controller/MyController.php`)
        correct: true
      -
        value: >
          `ControllerMy.php`
        correct: false
    help: |
      Symfony controllers typically follow the `*Controller.php` naming convention and are placed in the `src/Controller/` directory.
      https://symfony.com/doc/current/controller.html#controller-basics

  -
    question: |
      Consider the following Symfony controller method:

      ```php
      namespace App\Controller;

      use Symfony\Component\HttpFoundation\Response;
      use Symfony\Component\Routing\Attribute\Route;

      class ProductController
      {
          #[Route('/products', name: 'app_products')]
          public function listProducts(): Response
          {
              return new Response('Product List');
          }
      }
      ```

      Which of the following is true regarding the `listProducts` method?
    answers:
      -
        value: >
          It must return an instance of `Symfony\Component\HttpFoundation\Response`.
        correct: true
      -
        value: >
          It must be named `listProductsAction`.
        correct: false
      -
        value: >
          It automatically renders a Twig template named `templates/product/listProducts.html.twig`.
        correct: false
      -
        value: >
          It requires extending `AbstractController` to function correctly.
        correct: false
    help: |
      A Symfony controller method must return a `Response` object. While `AbstractController` provides helper methods, it's not strictly required. The action method name does not need the `Action` suffix in modern Symfony.
      https://symfony.com/doc/current/controller.html#returning-a-response

  -
    question: >
      What is the primary benefit of extending `Symfony\Bundle\FrameworkBundle\Controller\AbstractController` for your controllers?
    answers:
      -
        value: >
          It automatically registers the controller as a service.
        correct: false
      -
        value: >
          It provides convenient helper methods for common controller tasks like rendering templates, generating URLs, and handling redirects.
        correct: true
      -
        value: >
          It enforces strict type-hinting for all controller arguments.
        correct: false
      -
        value: >
          It enables automatic dependency injection for all services in the container.
        correct: false
    help: |
      `AbstractController` is an optional base class that provides shortcuts and helper methods, making common controller tasks easier.
      https://symfony.com/doc/current/controller.html#extending-the-base-controller-class

  -
    question: |
      Given a controller extending `AbstractController`, which method would you use to render a Twig template?
    answers:
      -
        value: >
          `$this->renderTemplate('template.html.twig', $data);`
        correct: false
      -
        value: >
          `$this->render('template.html.twig', ['data' => $data]);`
        correct: true
      -
        value: >
          `$this->display('template.html.twig', $data);`
        correct: false
      -
        value: >
          `$this->get('twig')->render('template.html.twig', $data);`
        correct: false
    help: |
      The `render()` method is provided by `AbstractController` to render Twig templates and return a `Response` object.
      https://symfony.com/doc/current/controller.html#rendering-templates

  -
    question: |
      How can you access the `Request` object in a Symfony controller action method?
    answers:
      -
        value: >
          By calling `$this->getRequest();` if extending `AbstractController`.
        correct: false
      -
        value: >
          By type-hinting `Symfony\Component\HttpFoundation\Request` as an argument in the action method.
        correct: true
      -
        value: >
          By using the global `$_REQUEST` superglobal.
        correct: false
      -
        value: >
          By injecting the `request_stack` service and calling `getCurrentRequest()`.
        correct: false
    help: |
      The recommended way to access the `Request` object in a controller is by type-hinting `Symfony\Component\HttpFoundation\Request` in the action method's arguments. Symfony's argument resolver will automatically inject it.
      https://symfony.com/doc/current/controller.html#accessing-the-request

  -
    question: |
      You need to retrieve a query parameter named `page` from the URL, with a default value of `1` if it's not present. Which code snippet correctly does this within a controller action?
    answers:
      -
        value: >
          `$page = $request->query->get('page', 1);`
        correct: true
      -
        value: >
          `$page = $request->get('page') ?: 1;`
        correct: false
      -
        value: >
          `$page = $_GET['page'] ?? 1;`
        correct: false
      -
        value: >
          `$page = $request->attributes->get('page', 1);`
        correct: false
    help: |
      The `query` property of the `Request` object provides access to GET parameters, and its `get()` method allows specifying a default value.
      https://symfony.com/doc/current/controller.html#accessing-the-request

  -
    question: >
      Which of the following classes must a Symfony controller action return?
    answers:
      -
        value: >
          `Symfony\Component\HttpFoundation\JsonResponse`
        correct: false
      -
        value: >
          `Symfony\Component\HttpFoundation\Response`
        correct: true
      -
        value: >
          `Psr\Http\Message\ResponseInterface`
        correct: false
      -
        value: >
          `Symfony\Component\HttpFoundation\Request`
        correct: false
    help: |
      Every Symfony controller must return an instance of `Symfony\Component\HttpFoundation\Response` or one of its subclasses.
      https://symfony.com/doc/current/controller.html#returning-a-response

  -
    question: |
      You want to return a JSON response from your controller. Which is the most appropriate way to do this in Symfony 7?
    answers:
      -
        value: >
          `return new Response(json_encode($data), 200, ['Content-Type' => 'application/json']);`
        correct: false
      -
        value: >
          `return $this->json($data);`
        correct: true
      -
        value: >
          `return new JsonResponse($data);`
        correct: true
      -
        value: >
          `return $this->renderJson($data);`
        correct: false
    help: |
      Both `JsonResponse` and the `json()` helper method (from `AbstractController`) are correct ways to return a JSON response. The `json()` helper is often preferred for brevity.
      https://symfony.com/doc/current/controller.html#json-response

  -
    question: |
      How can you set a cookie in a Symfony controller?
    answers:
      -
        value: >
          By calling `$request->cookies->set('name', 'value');`
        correct: false
      -
        value: >
          By creating a `Cookie` object and adding it to the `Response` headers before returning the response.
        correct: true
      -
        value: >
          By using PHP's native `setcookie()` function directly.
        correct: false
      -
        value: >
          Cookies are automatically managed by the session, no manual setting is needed.
        correct: false
    help: |
      Cookies are set on the `Response` object. You create a `Cookie` object and add it to `Response::headers->setCookie()`.
      https://symfony.com/doc/current/components/http_foundation/cookies.html#setting-a-cookie

  -
    question: |
      You want to retrieve a cookie named `user_preference` from the incoming request. Which code snippet is correct?
    answers:
      -
        value: >
          `$preference = $request->cookies->get('user_preference');`
        correct: true
      -
        value: >
          `$preference = $request->getCookie('user_preference');`
        correct: false
      -
        value: >
          `$preference = $_COOKIE['user_preference'];`
        correct: false
      -
        value: >
          `$preference = $request->headers->get('Cookie')['user_preference'];`
        correct: false
    help: |
      The `cookies` property of the `Request` object is a `ParameterBag` that allows access to request cookies.
      https://symfony.com/doc/current/components/http_foundation/cookies.html#retrieving-cookies

  -
    question: |
      Which of the following is the correct way to access the session in a Symfony controller when extending `AbstractController`?
    answers:
      -
        value: >
          `$session = $this->get('session');`
        correct: false
      -
        value: >
          `$session = $request->getSession();`
        correct: true
      -
        value: >
          `$session = $_SESSION;`
        correct: false
      -
        value: >
          `$session = $this->session;`
        correct: false
    help: |
      The session can be accessed via the `Request` object's `getSession()` method.
      https://symfony.com/doc/current/components/http_foundation/sessions.html#accessing-the-session

  -
    question: |
      To store a value in the user's session, which method should you use on the `SessionInterface` object?
    answers:
      -
        value: >
          `$session->set('key', 'value');`
        correct: true
      -
        value: >
          `$session->add('key', 'value');`
        correct: false
      -
        value: >
          `$session->put('key', 'value');`
        correct: false
      -
        value: >
          `$session->store('key', 'value');`
        correct: false
    help: |
      The `set()` method is used to store data in the session.
      https://symfony.com/doc/current/components/http_foundation/sessions.html#storing-retrieving-data

  -
    question: |
      You want to display a one-time success message to the user after a form submission and redirect. Which `AbstractController` helper method is designed for this?
    answers:
      -
        value: >
          `$this->addMessage('success', 'Item saved!');`
        correct: false
      -
        value: >
          `$this->addFlash('success', 'Item saved!');`
        correct: true
      -
        value: >
          `$this->getSession()->getFlashBag()->add('success', 'Item saved!');`
        correct: true
      -
        value: >
          `$this->setFlash('success', 'Item saved!');`
        correct: false
    help: |
      Both `addFlash()` helper method and direct access to `getSession()->getFlashBag()->add()` are correct for adding flash messages.
      https://symfony.com/doc/current/controller.html#flash-messages

  -
    question: |
      After a successful operation, you want to redirect the user to a route named `app_homepage`. Which `AbstractController` method should you use?
    answers:
      -
        value: >
          `return $this->redirect('/homepage');`
        correct: false
      -
        value: >
          `return $this->redirectToRoute('app_homepage');`
        correct: true
      -
        value: >
          `return new RedirectResponse($this->generateUrl('app_homepage'));`
        correct: true
      -
        value: >
          `return $this->forwardToRoute('app_homepage');`
        correct: false
    help: |
      `redirectToRoute()` is the convenient helper method for redirecting to a named route. Creating a `RedirectResponse` with a generated URL is also correct.
      https://symfony.com/doc/current/controller.html#redirecting

  -
    question: >
      What is the default HTTP status code used by `redirectToRoute()` if not explicitly specified?
    answers:
      -
        value: >
          301 (Moved Permanently)
        correct: false
      -
        value: >
          302 (Found)
        correct: true
      -
        value: >
          303 (See Other)
        correct: false
      -
        value: >
          200 (OK)
        correct: false
    help: |
      The default status code for `redirectToRoute()` is 302 (Found).
      https://symfony.com/doc/current/controller.html#redirecting

  -
    question: |
      You need to perform an "internal redirect" to another controller action within the same application without the client's browser being aware of the redirection. Which `AbstractController` method facilitates this?
    answers:
      -
        value: >
          `$this->redirect('/internal/path');`
        correct: false
      -
        value: >
          `$this->forward('App\\Controller\\AnotherController::someAction', ['param' => 'value']);`
        correct: true
      -
        value: >
          `$this->redirectToRoute('internal_route');`
        correct: false
      -
        value: >
          `$this->render('another_controller_template.html.twig');`
        correct: false
    help: |
      The `forward()` method creates an internal sub-request to another controller, returning its `Response` directly.
      https://symfony.com/doc/current/controller/forwarding.html

  -
    question: >
      What is a key difference between `redirectToRoute()` and `forward()`?
    answers:
      -
        value: >
          `redirectToRoute()` sends an HTTP redirect to the client, while `forward()` performs an internal sub-request on the server.
        correct: true
      -
        value: >
          `redirectToRoute()` can only redirect to external URLs, while `forward()` is for internal routes.
        correct: false
      -
        value: >
          `forward()` always results in a 301 redirect, while `redirectToRoute()` defaults to 302.
        correct: false
      -
        value: >
          `forward()` is deprecated in Symfony 7, while `redirectToRoute()` is the preferred method for all redirects.
        correct: false
    help: |
      `redirectToRoute()` sends a `Location` header to the client, causing a new HTTP request. `forward()` processes another controller internally, without a client-side redirect.
      https://symfony.com/doc/current/controller/forwarding.html

  -
    question: |
      To generate a 404 Not Found page in Symfony, which method from `AbstractController` should you use?
    answers:
      -
        value: >
          `return new Response('Not Found', 404);`
        correct: false
      -
        value: >
          `throw new \Exception('Page not found', 404);`
        correct: false
      -
        value: >
          `throw $this->createNotFoundException('The page does not exist');`
        correct: true
      -
        value: >
          `return $this->notFound();`
        correct: false
    help: |
      The `createNotFoundException()` helper method throws a `NotFoundHttpException`, which Symfony's exception listener will catch and render an appropriate 404 page.
      https://symfony.com/doc/current/controller.html#generating-404-pages

  -
    question: |
      Which class represents an uploaded file in Symfony and is typically used as a type-hint for file uploads in controller actions?
    answers:
      -
        value: >
          `SplFileInfo`
        correct: false
      -
        value: >
          `Symfony\Component\HttpFoundation\File\File`
        correct: false
      -
        value: >
          `Symfony\Component\HttpFoundation\File\UploadedFile`
        correct: true
      -
        value: >
          `PHP\File\Upload`
        correct: false
    help: |
      `Symfony\Component\HttpFoundation\File\UploadedFile` is the class that encapsulates uploaded file information.
      https://symfony.com/doc/current/controller.html#uploading-files

  -
    question: |
      Given the following controller action for handling a file upload:

      ```php
      namespace App\Controller;

      use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
      use Symfony\Component\HttpFoundation\File\UploadedFile;
      use Symfony\Component\HttpFoundation\Response;
      use Symfony\Component\HttpKernel\Attribute\MapUploadedFile;
      use Symfony\Component\Routing\Attribute\Route;

      class UserController extends AbstractController
      {
          #[Route('/user/picture', methods: ['POST'])]
          public function changePicture(
              #[MapUploadedFile] UploadedFile $picture,
          ): Response {
              // ...
          }
      }
      ```

      What does the `#[MapUploadedFile]` attribute do?
    answers:
      -
        value: >
          It automatically moves the uploaded file to a predefined directory.
        correct: false
      -
        value: >
          It validates the uploaded file's type and size.
        correct: false
      -
        value: >
          It automatically resolves the `UploadedFile` object from the request based on the argument name (`picture`).
        correct: true
      -
        value: >
          It encrypts the uploaded file before processing.
        correct: false
    help: |
      The `#[MapUploadedFile]` attribute is an argument value resolver that automatically injects the `UploadedFile` object corresponding to the request's uploaded file field named `picture`.
      https://symfony.com/doc/current/controller.html#uploading-files

  -
    question: |
      Which Twig function allows you to embed the output of another Symfony controller directly into a template?
    answers:
      -
        value: >
          `{{ include('controller_template.html.twig') }}`
        correct: false
      -
        value: >
          `{{ render(path('another_controller_route')) }}`
        correct: true
      -
        value: >
          `{{ embed_controller('App\\Controller\\MyController::action') }}`
        correct: false
      -
        value: >
          `{{ render(controller('App\\Controller\\MyController::action')) }}`
        correct: true
    help: |
      The `render()` Twig function, combined with `path()` or `controller()`, allows embedding the output of another controller. `controller()` is used when you don't want to expose the controller via a public URL.
      https://symfony.com/doc/current/templates.html#embedding-controllers

  -
    question: >
      What is the purpose of Symfony's Argument Value Resolvers?
    answers:
      -
        value: >
          To determine which controller method should handle a given request.
        correct: false
      -
        value: >
          To automatically inject values into controller method arguments based on request attributes, services, or other sources.
        correct: true
      -
        value: >
          To convert HTTP request data into a specific format (e.g., JSON to array).
        correct: false
      -
        value: >
          To validate the arguments passed to a controller method.
        correct: false
    help: |
      Argument Value Resolvers are responsible for providing the correct values for controller method arguments.
      https://symfony.com/doc/current/components/http_kernel.html#controller-argument-resolution

  -
    question: |
      Consider a route definition like `/products/{id}`. If your controller action is `public function show(int $id): Response`, how does Symfony automatically provide the `$id` value?
    answers:
      -
        value: >
          It uses a global variable `$_ROUTE_PARAMS['id']`.
        correct: false
      -
        value: >
          The `Request` object's `attributes` bag contains the `id` parameter, which the Argument Resolver injects.
        correct: true
      -
        value: >
          It's automatically retrieved from the request's query string.
        correct: false
      -
        value: >
          You must manually call `$request->attributes->get('id');`
        correct: false
    help: |
      Symfony's Argument Resolver automatically maps route parameters (stored in the Request's attributes) to controller method arguments if their names match.
      https://symfony.com/doc/current/components/http_kernel.html#controller-argument-resolution

  -
    question: >
      Which attribute can you use to automatically inject a service into a controller action method by type-hinting its interface?
    answers:
      -
        value: >
          `#[Inject]`
        correct: false
      -
        value: >
          `#[Autowire]`
        correct: false
      -
        value: >
          No attribute is needed; type-hinting is sufficient if the service is configured for autowiring.
        correct: true
      -
        value: >
          `#[Service]`
        correct: false
    help: |
      If autowiring is enabled (which it is by default in Symfony applications), simply type-hinting the service's class or interface in the controller method's arguments is enough for Symfony to inject it.
      https://symfony.com/doc/current/controller.html#autowiring-arguments

  -
    question: |
      What is an "invokable controller" in Symfony?
    answers:
      -
        value: >
          A controller that can be called directly from the command line.
        correct: false
      -
        value: >
          A controller class that implements the `__invoke()` magic method to handle requests.
        correct: true
      -
        value: >
          A controller that can only be invoked via an internal forward.
        correct: false
      -
        value: >
          A controller that uses a single static method for all actions.
        correct: false
    help: |
      An invokable controller is a class where the `__invoke()` method acts as the main action, allowing the class itself to be the callable for a route.
      https://symfony.com/doc/current/controller/service.html#invokable-controllers

  -
    question: |
      Which of the following is a valid way to define a route for an invokable controller `App\Controller\HelloController` in `config/routes.yaml`?
    answers:
      -
        value: |
          ```yaml
          hello:
              path: /hello
              controller: App\Controller\HelloController::__invoke
          ```
        correct: false
      -
        value: |
          ```yaml
          hello:
              path: /hello
              controller: App\Controller\HelloController
          ```
        correct: true
      -
        value: |
          ```yaml
          hello:
              path: /hello
              controller: App\Controller\HelloController::index
          ```
        correct: false
      -
        value: |
          ```yaml
          hello:
              path: /hello
              _controller: App\Controller\HelloController
          ```
        correct: true
    help: |
      For invokable controllers, you can directly reference the class name as the controller. Symfony's resolver will automatically call the `__invoke()` method.
      https://symfony.com/doc/current/controller/service.html#invokable-controllers

  -
    question: |
      When should you use `#[AsController]` on a controller class?
    answers:
      -
        value: >
          It's required for all controllers in Symfony 7.
        correct: false
      -
        value: >
          It explicitly marks a controller as a service, enabling autowiring for its constructor and action arguments, even if it doesn't extend `AbstractController`.
        correct: true
      -
        value: >
          It's used to define the base route for all actions within that controller.
        correct: false
      -
        value: >
          It makes the controller accessible via the command line.
        correct: false
    help: |
      The `#[AsController]` attribute is used to explicitly register a controller as a service, which is useful when you don't extend `AbstractController` but still want service injection.
      https://symfony.com/doc/current/controller/service.html#controllers-as-services

  -
    question: |
      Which of the following is a common practice for organizing controller files in a Symfony application?
    answers:
      -
        value: >
          Placing all controllers directly in the `src/` directory.
        correct: false
      -
        value: >
          Creating a `Controller` subdirectory inside `src/` (e.g., `src/Controller/`).
        correct: true
      -
        value: >
          Storing controllers in the `var/cache/` directory.
        correct: false
      -
        value: >
          Distributing controllers across different bundles, each in their own `Controller/` subdirectory.
        correct: true
    help: |
      The standard practice is to place controllers in `src/Controller/`. In larger applications, they might be organized within bundles, each having its own `Controller/` directory.
      https://symfony.com/doc/current/controller.html#controller-basics

  -
    question: |
      What is the purpose of the `kernel.controller` event in Symfony?
    answers:
      -
        value: >
          It's dispatched after the controller has returned a response.
        correct: false
      -
        value: >
          It's dispatched before the controller is executed, allowing listeners to modify the controller callable or its attributes.
        correct: true
      -
        value: >
          It's used to register new controllers with the HttpKernel.
        correct: false
      -
        value: >
          It's triggered when a controller throws an exception.
        correct: false
    help: |
      The `kernel.controller` event is dispatched after the controller callable has been determined but before its execution, enabling modifications to the controller or its attributes.
      https://symfony.com/doc/current/components/http_kernel.html#kernel-controller-event

  -
    question: |
      You need to retrieve a configuration parameter named `app.upload_directory` within your controller. Which `AbstractController` method should you use?
    answers:
      -
        value: >
          `$this->container->getParameter('app.upload_directory');`
        correct: false
      -
        value: >
          `$this->getParameter('app.upload_directory');`
        correct: true
      -
        value: >
          `$this->getParam('app.upload_directory');`
        correct: false
      -
        value: >
          `$this->config->get('app.upload_directory');`
        correct: false
    help: |
      The `getParameter()` method is a helper provided by `AbstractController` to access parameters from the service container.
      https://symfony.com/doc/current/controller.html#accessing-configuration-parameters

  -
    question: |
      Which of the following is NOT a valid way to define a controller in Symfony 7?
    answers:
      -
        value: >
          A PHP class with a public method.
        correct: false
      -
        value: >
          A PHP function (callable).
        correct: false
      -
        value: >
          A Twig template file.
        correct: true
      -
        value: >
          A class implementing the `__invoke()` method.
        correct: false
    help: |
      A controller must be a PHP callable (function, method on an object, or Closure). A Twig template is a view, not a controller.
      https://symfony.com/doc/current/controller.html#controller-basics

  -
    question: |
      You want to force a download of a file from your controller. Which `AbstractController` helper method is suitable for this?
    answers:
      -
        value: >
          `$this->download('/path/to/file.pdf');`
        correct: false
      -
        value: >
          `$this->file('/path/to/file.pdf');`
        correct: true
      -
        value: >
          `$this->stream('/path/to/file.pdf');`
        correct: false
      -
        value: >
          `$this->send('/path/to/file.pdf');`
        correct: false
    help: |
      The `file()` helper method from `AbstractController` returns a `BinaryFileResponse` which can be configured for downloads.
      https://symfony.com/doc/current/controller.html#serving-files

  -
    question: |
      What is the primary role of the `ControllerResolverInterface` in Symfony's HttpKernel?
    answers:
      -
        value: >
          To resolve the arguments for a given controller.
        correct: false
      -
        value: >
          To determine the PHP callable (controller) that should handle the current `Request`.
        correct: true
      -
        value: >
          To convert the `Response` object into an HTTP response string.
        correct: false
      -
        value: >
          To manage the lifecycle of services injected into controllers.
        correct: false
    help: |
      `ControllerResolverInterface` is responsible for finding and returning the correct PHP callable (controller) based on the request.
      https://symfony.com/doc/current/components/http_kernel.html#controller-resolution

  -
    question: |
      Which of the following is NOT a core component of the `Request` object that a controller frequently interacts with?
    answers:
      -
        value: >
          `query` (for GET parameters)
        correct: false
      -
        value: >
          `request` (for POST parameters)
        correct: false
      -
        value: >
          `headers` (for HTTP headers)
        correct: false
      -
        value: >
          `database` (for direct database access)
        correct: true
    help: |
      The `Request` object provides access to HTTP-related data. It does not provide direct database access.
      https://symfony.com/doc/current/controller.html#accessing-the-request

  -
    question: |
      You want to return an empty `Response` with a 204 No Content status code. Which is the most concise way to do this in a Symfony controller?
    answers:
      -
        value: >
          `return new Response('', 204);`
        correct: true
      -
        value: >
          `return $this->noContent();`
        correct: false
      -
        value: >
          `return $this->json(null, 204);`
        correct: false
      -
        value: >
          `return new EmptyResponse(204);`
        correct: false
    help: |
      A `Response` object can be instantiated with an empty string content and the desired status code.
      https://symfony.com/doc/current/controller.html#returning-a-response

  -
    question: |
      When defining a route using PHP attributes, which attribute is used to specify the URL path?
    answers:
      -
        value: >
          `#[Path('/my-path')]`
        correct: false
      -
        value: >
          `#[Url('/my-path')]`
        correct: false
      -
        value: >
          `#[Route('/my-path')]`
        correct: true
      -
        value: >
          `#[Map('/my-path')]`
        correct: false
    help: |
      The `#[Route]` attribute is used to define routes, and its first argument is the path.
      https://symfony.com/doc/current/routing.html#route-attributes

  -
    question: |
      What happens if a controller action method does not return a `Response` object?
    answers:
      -
        value: >
          Symfony will automatically render a default template.
        correct: false
      -
        value: >
          A `LogicException` will be thrown, indicating that the controller must return a `Response`.
        correct: true
      -
        value: >
          The application will crash silently.
        correct: false
      -
        value: >
          The request will be forwarded to a fallback controller.
        correct: false
    help: |
      The HttpKernel expects a `Response` object back from the controller. If it doesn't receive one, it will throw an exception.
      https://symfony.com/doc/current/controller.html#returning-a-response

  -
    question: |
      Which of the following is the correct way to get all flash messages of a specific type (e.g., 'success') in a Twig template?
    answers:
      -
        value: >
          `{{ app.session.flashbag.get('success') }}`
        correct: false
      -
        value: >
          `{{ app.flashes('success') }}`
        correct: true
      -
        value: >
          `{{ app.session.getFlashes('success') }}`
        correct: false
      -
        value: >
          `{{ app.request.session.getFlash('success') }}`
        correct: false
    help: |
      The `app.flashes()` Twig global function is the recommended way to retrieve flash messages in templates.
      https://symfony.com/doc/current/controller.html#flash-messages

  -
    question: |
      You have a controller method that accepts an `int $id` argument, and the route is `/items/{id}`. If the URL is `/items/abc`, what will happen?
    answers:
      -
        value: >
          Symfony will automatically convert `abc` to `0` for the `$id` argument.
        correct: false
      -
        value: >
          A `TypeMismatchException` will be thrown by the Argument Resolver.
        correct: false
      -
        value: >
          A `404 Not Found` error will occur because the route parameter `id` cannot be converted to an integer.
        correct: true
      -
        value: >
          The controller method will not be called, and the request will proceed to the next matching route.
        correct: false
    help: |
      If a route parameter with a type-hint cannot be cast to the specified type, Symfony's routing and argument resolution will fail, typically resulting in a 404 error.
      https://symfony.com/doc/current/routing.html#route-parameters

  -
    question: |
      Which of the following HTTP status codes indicates a permanent redirect?
    answers:
      -
        value: >
          302 (Found)
        correct: false
      -
        value: >
          307 (Temporary Redirect)
        correct: false
      -
        value: >
          301 (Moved Permanently)
        correct: true
      -
        value: >
          303 (See Other)
        correct: false
    help: |
      HTTP status code 301 signifies that the requested resource has been permanently moved to a new URL.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/301

  -
    question: |
      When using `AbstractController`, how can you generate a URL for a named route (e.g., `app_product_show`) with parameters (e.g., `id: 123`)?
    answers:
      -
        value: >
          `$this->getRouter()->generate('app_product_show', ['id' => 123]);`
        correct: false
      -
        value: >
          `$this->generateUrl('app_product_show', ['id' => 123]);`
        correct: true
      -
        value: >
          `$this->url('app_product_show', ['id' => 123]);`
        correct: false
      -
        value: >
          `$this->createUrl('app_product_show', ['id' => 123]);`
        correct: false
    help: |
      The `generateUrl()` method is a helper provided by `AbstractController` for generating URLs from named routes.
      https://symfony.com/doc/current/controller.html#generating-urls

  -
    question: |
      You want to pass data from your controller to a Twig template. Which is the correct way to do this using the `render()` method?
    answers:
      -
        value: >
          `return $this->render('template.html.twig', $dataArray);`
        correct: false
      -
        value: >
          `return $this->render('template.html.twig', ['key' => $value]);`
        correct: true
      -
        value: >
          `return $this->render('template.html.twig')->with('key', $value);`
        correct: false
      -
        value: >
          `return $this->render('template.html.twig', compact('key'));`
        correct: false
    help: |
      The second argument to `render()` is an associative array where keys become variable names in the Twig template.
      https://symfony.com/doc/current/controller.html#rendering-templates

  -
    question: |
      Which attribute is used to automatically map request payload (e.g., JSON body) to a DTO object in a controller action?
    answers:
      -
        value: >
          `#[MapRequest]`
        correct: false
      -
        value: >
          `#[MapPayload]`
        correct: false
      -
        value: >
          `#[MapRequestPayload]`
        correct: true
      -
        value: >
          `#[RequestBody]`
        correct: false
    help: |
      The `#[MapRequestPayload]` attribute (available in Symfony 6.2+) automatically deserializes the request body into a DTO.
      https://symfony.com/doc/current/controller/request_payload.html

  -
    question: |
      Consider the following controller method:

      ```php
      namespace App\Controller;

      use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
      use Symfony\Component\HttpFoundation\Response;
      use Symfony\Component\Routing\Attribute\Route;

      class ArticleController extends AbstractController
      {
          #[Route('/article/{slug}', name: 'app_article_show')]
          public function show(string $slug): Response
          {
              // ...
          }
      }
      ```

      If a request comes in for `/article/my-first-post`, how does Symfony provide the value for `$slug`?
    answers:
      -
        value: >
          It's retrieved from the `$_GET` superglobal.
        correct: false
      -
        value: >
          The `ArgumentResolver` extracts it from the route parameters in the `Request` attributes and injects it.
        correct: true
      -
        value: >
          It's a service automatically autowired by Symfony.
        correct: false
      -
        value: >
          It's a session variable.
        correct: false
    help: |
      Route parameters are stored in the `Request` object's attributes, and the Argument Resolver automatically injects them into controller method arguments that match the parameter name.
      https://symfony.com/doc/current/components/http_kernel.html#controller-argument-resolution

  -
    question: |
      What is the primary purpose of a "front controller" in a web application framework like Symfony?
    answers:
      -
        value: >
          To serve static assets like CSS and JavaScript.
        correct: false
      -
        value: >
          To handle all incoming requests through a single entry point, centralizing request processing.
        correct: true
      -
        value: >
          To manage database connections and queries.
        correct: false
      -
        value: >
          To render HTML templates.
        correct: false
    help: |
      A front controller is a design pattern where all requests are handled by a single script, which then dispatches them to the appropriate controller and action.
      https://symfony.com/doc/current/create_framework/front_controller.html

  -
    question: |
      Which of the following is true about controller naming conventions in Symfony 7?
    answers:
      -
        value: >
          Controller class names must end with `Controller`.
        correct: true
      -
        value: >
          Action method names must end with `Action`.
        correct: false
      -
        value: >
          Controller files must be named `index.php`.
        correct: false
      -
        value: >
          Controller class names must be prefixed with `App`.
        correct: false
    help: |
      While `*Controller` suffix is a strong convention, action methods no longer strictly require the `Action` suffix in modern Symfony.
      https://symfony.com/doc/current/controller.html#controller-basics

  -
    question: |
      You need to send a `103 Early Hints` response from your controller. Which `AbstractController` method can help you achieve this?
    answers:
      -
        value: >
          `$this->earlyHints();`
        correct: false
      -
        value: >
          `$this->sendEarlyHints();`
        correct: true
      -
        value: >
          `$this->response(null, 103);`
        correct: false
      -
        value: >
          `$this->prepareEarlyHints();`
        correct: false
    help: |
      The `sendEarlyHints()` method creates a `103 Early Hints` Response object and sends its headers immediately.
      https://symfony.com/doc/current/controller.html#early-hints

  -
    question: |
      If you have a custom object `BookingId` that you want to inject into a controller method based on a route parameter, what mechanism in Symfony allows this?
    answers:
      -
        value: >
          Service autowiring.
        correct: false
      -
        value: >
          A custom Argument Value Resolver.
        correct: true
      -
        value: >
          A custom Route Loader.
        correct: false
      -
        value: >
          The `#[MapEntity]` attribute.
        correct: false
    help: |
      Custom Argument Value Resolvers (implementing `ValueResolverInterface`) allow you to define how custom objects are instantiated and injected into controller arguments. `#[MapEntity]` is a specific resolver for Doctrine entities.
      https://symfony.com/doc/current/controller/value_resolver.html

  -
    question: |
      What is the purpose of the `#[MapQueryParameter]` attribute?
    answers:
      -
        value: >
          To map a route parameter to a controller argument.
        correct: false
      -
        value: >
          To automatically map a query string parameter to a controller argument, optionally with type conversion and validation.
        correct: true
      -
        value: >
          To map a POST request body parameter to a controller argument.
        correct: false
      -
        value: >
          To map a header value to a controller argument.
        correct: false
    help: |
      `#[MapQueryParameter]` is an argument value resolver that simplifies getting and converting query string parameters.
      https://symfony.com/doc/current/controller/map_query_parameter.html

  -
    question: |
      When handling a form submission in a controller, after calling `$form->handleRequest($request);`, which method should you typically call to check if the form was submitted and is valid?
    answers:
      -
        value: >
          `$form->isSubmitted() && $form->isValid();`
        correct: true
      -
        value: >
          `$form->hasErrors();`
        correct: false
      -
        value: >
          `$form->isPosted() && $form->isValidated();`
        correct: false
      -
        value: >
          `$form->process();`
        correct: false
    help: |
      The `isSubmitted()` and `isValid()` methods are used in conjunction to check the form's state after handling the request.
      https://symfony.com/doc/current/forms.html#handling-form-submissions

  -
    question: |
      Which of the following is a valid method signature for a controller action that receives both a `Request` object and a route parameter `id`?
    answers:
      -
        value: |
          ```php
          public function myAction(Request $request, int $id): Response
          { /* ... */ }
          ```
        correct: true
      -
        value: |
          ```php
          public function myAction(int $id, Request $request): Response
          { /* ... */ }
          ```
        correct: true
      -
        value: |
          ```php
          public function myAction($request, $id): Response
          { /* ... */ }
          ```
        correct: false
      -
        value: |
          ```php
          public function myAction(Request $request, $id): Response
          { /* ... */ }
          ```
        correct: false
    help: |
      The order of arguments for the `Request` object and route parameters does not matter, as Symfony's Argument Resolver matches by type-hint or name. However, all arguments should be type-hinted for proper resolution.
      https://symfony.com/doc/current/components/http_kernel.html#controller-argument-resolution

  -
    question: |
      What is the purpose of the `#[MapEntity]` attribute in a controller action?
    answers:
      -
        value: >
          To automatically persist an entity to the database.
        correct: false
      -
        value: >
          To map a route parameter directly to a Doctrine entity object, fetching it from the database.
        correct: true
      -
        value: >
          To validate the properties of an entity before it's used.
        correct: false
      -
        value: >
          To convert an entity object into a JSON response.
        correct: false
    help: |
      `#[MapEntity]` is an argument value resolver that automatically fetches a Doctrine entity based on a route parameter.
      https://symfony.com/doc/current/bundles/SensioFrameworkExtraBundle/annotations/converters.html#doctrine-converter (Note: While `SensioFrameworkExtraBundle` is often used for this, Symfony 6.2+ includes `#[MapEntity]` directly in the core.)

  -
    question: |
      Which of the following is the correct way to register controllers as services in `config/services.yaml` to allow autowiring of their action arguments?
    answers:
      -
        value: |
          ```yaml
          App\Controller\:
              resource: '../src/Controller/'
              tags: ['controller.service_arguments']
          ```
        correct: true
      -
        value: |
          ```yaml
          services:
              _defaults:
                  autowire: true
                  autoconfigure: true
          App\Controller\:
              resource: '../src/Controller/'
          ```
        correct: true
      -
        value: >
          ```yaml
          controllers:
              App\Controller\: ~
          ```
        correct: false
      -
        value: |
          ```yaml
          App\Controller\:
              resource: '../src/Controller/'
              public: true
          ```
        correct: false
    help: |
      By default, `_defaults` with `autowire: true` and `autoconfigure: true` will handle this. Explicitly tagging with `controller.service_arguments` also works, especially if autoconfigure is off.
      https://symfony.com/doc/current/controller/service.html#controllers-as-services

  -
    question: |
      What is the main advantage of using `#[Route]` attributes over YAML or XML for route definition in Symfony 7?
    answers:
      -
        value: >
          They offer better performance.
        correct: false
      -
        value: >
          They keep route definitions co-located with the controller logic, improving readability and maintainability.
        correct: true
      -
        value: >
          They are automatically generated by the framework.
        correct: false
      -
        value: >
          They allow for more complex routing logic that is not possible with other formats.
        correct: false
    help: |
      Co-location of route definition and controller logic is a key benefit of using attributes.
      https://symfony.com/doc/current/routing.html#route-attributes

  -
    question: |
      When creating a new controller using `php bin/console make:controller MyNewController`, what does the MakerBundle typically generate?
    answers:
      -
        value: >
          A controller class `src/Controller/MyNewController.php` and an associated Twig template `templates/my_new/index.html.twig`.
        correct: true
      -
        value: >
          Only a controller class, without any template.
        correct: false
      -
        value: >
          A controller class and a service definition in `config/services.yaml`.
        correct: false
      -
        value: >
          A controller class and a new route entry in `config/routes.yaml`.
        correct: true
    help: |
      `make:controller` typically generates both the controller class and a basic Twig template, along with a route definition.
      https://symfony.com/doc/current/controller.html#generating-a-controller

  -
    question: |
      Which of the following is the correct way to get the base URL of the current request within a controller?
    answers:
      -
        value: >
          `$request->getUri();`
        correct: false
      -
        value: >
          `$request->getUriForPath('/');`
        correct: false
      -
        value: >
          `$request->getSchemeAndHttpHost();`
        correct: true
      -
        value: >
          `$request->getBaseUrl();`
        correct: true
    help: |
      `getSchemeAndHttpHost()` returns the scheme and HTTP host (e.g., `https://example.com`). `getBaseUrl()` returns the base URL of the request (e.g., `/app.php`).
      https://symfony.com/doc/current/components/http_foundation/requests.html#accessing-request-data

  -
    question: |
      You need to create a `Response` object that streams content (e.g., a large file or real-time data). Which `Response` subclass is most appropriate?
    answers:
      -
        value: >
          `JsonResponse`
        correct: false
      -
        value: >
          `RedirectResponse`
        correct: false
      -
        value: >
          `StreamedResponse`
        correct: true
      -
        value: >
          `BinaryFileResponse`
        correct: false
    help: |
      `StreamedResponse` allows you to stream content to the browser, useful for large files or long-running processes.
      https://symfony.com/doc/current/components/http_foundation/responses.html#streaming-responses

  -
    question: |
      What is the primary purpose of the `RequestStack` service in Symfony?
    answers:
      -
        value: >
          To manage a stack of `Response` objects.
        correct: false
      -
        value: >
          To provide access to the current `Request` object and potentially previous requests in a sub-request context.
        correct: true
      -
        value: >
          To store session data across multiple requests.
        correct: false
      -
        value: >
          To handle HTTP caching for requests.
        correct: false
    help: |
      `RequestStack` manages the lifecycle of `Request` objects, especially in the context of sub-requests (e.g., `forward()` calls).
      https://symfony.com/doc/current/components/http_kernel.html#request-stack

  -
    question: |
      Which HTTP method is typically used for submitting forms that create new resources on the server?
    answers:
      -
        value: >
          GET
        correct: false
      -
        value: >
          PUT
        correct: false
      -
        value: >
          POST
        correct: true
      -
        value: >
          DELETE
        correct: false
    help: |
      POST is the standard method for submitting data to be processed and typically resulting in a change on the server (e.g., creating a new resource).
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST

  -
    question: |
      You want to retrieve a header value from the incoming request, for example, the `User-Agent` header. How would you do this?
    answers:
      -
        value: >
          `$request->headers->get('User-Agent');`
        correct: true
      -
        value: >
          `$request->getHeader('User-Agent');`
        correct: false
      -
        value: >
          `$_SERVER['HTTP_USER_AGENT'];`
        correct: false
      -
        value: >
          `$request->get('User-Agent');`
        correct: false
    help: |
      The `headers` property of the `Request` object is a `HeaderBag` that allows access to request headers.
      https://symfony.com/doc/current/components/http_foundation/requests.html#accessing-request-data

  -
    question: |
      What is the recommended way to handle a `PUT` request containing JSON data in a Symfony controller?
    answers:
      -
        value: >
          Access `$_PUT` superglobal.
        correct: false
      -
        value: >
          Use `$request->request->all()` and then `json_decode()`.
        correct: false
      -
        value: >
          Use `$request->getContent()` and then `json_decode()`.
        correct: true
      -
        value: >
          Use `#[MapRequestPayload]` attribute on a DTO.
        correct: true
    help: |
      For non-form POST/PUT requests (like JSON APIs), the content is in the request body, accessed via `getContent()`. `#[MapRequestPayload]` is the modern, more convenient way.
      https://symfony.com/doc/current/controller/request_payload.html

  -
    question: |
      Which of the following is a valid method signature for a controller action that receives an optional route parameter `page` with a default value?
    answers:
      -
        value: |
          ```php
          public function list(int $page = 1): Response
          { /* ... */ }
          ```
        correct: true
      -
        value: |
          ```php
          public function list(Request $request, int $page = 1): Response
          { /* ... */ }
          ```
        correct: true
      -
        value: |
          ```php
          public function list($page = 1): Response
          { /* ... */ }
          ```
        correct: false
      -
        value: |
          ```php
          public function list(int $page = null): Response
          { /* ... */ }
          ```
        correct: false
    help: |
      Symfony's Argument Resolver supports default values for route parameters directly in the method signature. Type-hinting is crucial.
      https://symfony.com/doc/current/components/http_kernel.html#controller-argument-resolution

  -
    question: |
      When should you consider creating a custom Argument Value Resolver?
    answers:
      -
        value: >
          When you need to perform complex validation on controller arguments.
        correct: false
      -
        value: >
          When you want to automatically convert a request parameter into a custom object or value that isn't handled by built-in resolvers.
        correct: true
      -
        value: >
          When you want to inject a service into your controller.
        correct: false
      -
        value: >
          When you need to modify the `Response` object before it's sent.
        correct: false
    help: |
      Custom Argument Value Resolvers are ideal for handling complex argument resolution logic, such as creating custom value objects from request data.
      https://symfony.com/doc/current/controller/value_resolver.html

  -
    question: |
      What is the purpose of the `Request::isXmlHttpRequest()` method?
    answers:
      -
        value: >
          To check if the request body is XML.
        correct: false
      -
        value: >
          To determine if the request was made via AJAX (e.g., by checking the `X-Requested-With` header).
        correct: true
      -
        value: >
          To validate if the request originated from a trusted domain.
        correct: false
      -
        value: >
          To check if the request is using the `XMLHttpRequest` object.
        correct: false
    help: |
      `isXmlHttpRequest()` is a convenience method to check if the request is an AJAX request, typically by looking for the `X-Requested-With: XMLHttpRequest` header.
      https://symfony.com/doc/current/components/http_foundation/requests.html#checking-request-methods

  -
    question: |
      Which of the following is true about the `Response` object in Symfony?
    answers:
      -
        value: >
          It is immutable once created.
        correct: false
      -
        value: >
          It encapsulates all the information needed to send an HTTP response back to the client.
        correct: true
      -
        value: >
          It automatically handles caching headers.
        correct: false
      -
        value: >
          It can only contain HTML content.
        correct: false
    help: |
      The `Response` object is mutable and contains the content, status code, and headers for the HTTP response.
      https://symfony.com/doc/current/components/http_foundation/responses.html

  -
    question: |
      You want to set a custom HTTP header, e.g., `X-Custom-Header: MyValue`, in your response. How can you do this?
    answers:
      -
        value: >
          `$response->headers->set('X-Custom-Header', 'MyValue');`
        correct: true
      -
        value: >
          `$response->setHeader('X-Custom-Header', 'MyValue');`
        correct: false
      -
        value: >
          `$response->addHeader('X-Custom-Header', 'MyValue');`
        correct: false
      -
        value: >
          `$response->setHeaders(['X-Custom-Header' => 'MyValue']);`
        correct: true
    help: |
      The `headers` property of the `Response` object is a `HeaderBag` that allows setting response headers.
      https://symfony.com/doc/current/components/http_foundation/responses.html#setting-headers

  -
    question: |
      What is the purpose of the `#[MapQueryString]` attribute?
    answers:
      -
        value: >
          To map the entire query string to a single string argument.
        correct: false
      -
        value: >
          To automatically map all query string parameters to a DTO object.
        correct: true
      -
        value: >
          To map a specific query parameter to a controller argument.
        correct: false
      -
        value: >
          To map query parameters to an array.
        correct: false
    help: |
      `#[MapQueryString]` maps the entire query string into a DTO, allowing for structured access to multiple query parameters.
      https://symfony.com/doc/current/controller/map_query_string.html

  -
    question: |
      Which of the following is a valid way to define a route for a controller using PHP configuration in `config/routes.php`?
    answers:
      -
        value: |
          ```php
          use App\Controller\MyController;
          use Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator;

          return function (RoutingConfigurator $routes): void {
              $routes->add('my_route', '/my-path')
                  ->controller([MyController::class, 'index'])
              ;
          };
          ```
        correct: true
      -
        value: |
          ```php
          $collection->add('my_route', new Route('/my-path', [
              '_controller' => 'App\Controller\MyController::index',
          ]));
          ```
        correct: true
      -
        value: |
          ```php
          $routes->add('my_route', '/my-path', 'App\Controller\MyController::index');
          ```
        correct: false
      -
        value: |
          ```php
          return [
              'my_route' => [
                  'path' => '/my-path',
                  'controller' => 'App\Controller\MyController::index',
              ],
          ];
          ```
        correct: false
    help: |
      Symfony supports PHP configuration for routes, either using the `RoutingConfigurator` or directly building `Route` objects.
      https://symfony.com/doc/current/routing.html#defining-routes-in-php

  -
    question: |
      What is the purpose of the `#[Cache]` attribute on a controller method?
    answers:
      -
        value: >
          To store the method's return value in the application cache.
        correct: false
      -
        value: >
          To configure HTTP caching headers (e.g., `Cache-Control`, `ETag`) for the response generated by the controller.
        correct: true
      -
        value: >
          To mark the controller method as cacheable by Symfony's internal caching mechanism.
        correct: false
      -
        value: >
          To enable OPCache for the controller class.
        correct: false
    help: |
      The `#[Cache]` attribute is used to configure HTTP caching for a controller's response.
      https://symfony.com/doc/current/http_cache.html#http-cache-in-symfony

  -
    question: |
      Which of the following is a valid way to retrieve a service (e.g., `MailerInterface`) in a controller that extends `AbstractController` without explicitly type-hinting it in the action method?
    answers:
      -
        value: >
          `$mailer = $this->get('mailer');`
        correct: false
      -
        value: >
          `$mailer = $this->container->get('mailer.mailer');`
        correct: false
      -
        value: >
          `$mailer = $this->container->get(MailerInterface::class);`
        correct: true
      -
        value: >
          `$mailer = $this->getMailer();`
        correct: false
    help: |
      While type-hinting is preferred, you can access the service container via `$this->container` and use its `get()` method with the service ID or class name. Note that `AbstractController` itself doesn't directly expose a `get()` for arbitrary services, but the container is accessible.
      https://symfony.com/doc/current/service_container.html#fetching-services-from-the-container

  -
    question: |
      What is the significance of the `_controller` attribute in a Symfony route definition?
    answers:
      -
        value: >
          It defines the default template to render for the route.
        correct: false
      -
        value: >
          It specifies the PHP callable (controller class and method, or invokable class) that should handle the request for that route.
        correct: true
      -
        value: >
          It's a placeholder for route parameters.
        correct: false
      -
        value: >
          It indicates whether the route requires authentication.
        correct: false
    help: |
      The `_controller` attribute is a special route attribute used by the `ControllerResolver` to identify which controller to execute.
      https://symfony.com/doc/current/routing.html#controller-string-format

  -
    question: |
      You want to create a `Response` object that serves a file directly from the filesystem, optimizing for large files. Which `Response` subclass is best suited for this?
    answers:
      -
        value: >
          `Response`
        correct: false
      -
        value: >
          `StreamedResponse`
        correct: false
      -
        value: >
          `BinaryFileResponse`
        correct: true
      -
        value: >
          `FileResponse`
        correct: false
    help: |
      `BinaryFileResponse` is optimized for serving static files directly, leveraging HTTP features like `Range` requests.
      https://symfony.com/doc/current/components/http_foundation/responses.html#serving-files

  -
    question: |
      When using `#[MapUploadedFile]`, what happens if the uploaded file field specified by the argument name is not present in the request?
    answers:
      -
        value: >
          The argument will be `null`.
        correct: false
      -
        value: >
          A `NotFoundHttpException` will be thrown.
        correct: false
      -
        value: >
          A `MissingValueException` will be thrown by the argument resolver.
        correct: true
      -
        value: >
          The application will continue, but the file won't be processed.
        correct: false
    help: |
      If the file is missing and the argument is not nullable, a `MissingValueException` will be thrown. You can make the argument nullable (`#[MapUploadedFile] ?UploadedFile $picture`) to handle optional uploads.
      https://symfony.com/doc/current/controller.html#mapuploadedfile

  -
    question: |
      Which of the following is a valid way to define a route for a controller using XML configuration?
    answers:
      -
        value: |
          ```xml
          <route id="hello" path="/hello" controller="App\Controller\HelloController::index"/>
          ```
        correct: true
      -
        value: |
          ```xml
          <route id="hello" path="/hello">
              <controller>App\Controller\HelloController::index</controller>
          </route>
          ```
        correct: false
      -
        value: |
          ```xml
          <route id="hello" path="/hello" _controller="App\Controller\HelloController::index"/>
          ```
        correct: false
      -
        value: |
          ```xml
          <route name="hello" uri="/hello" action="App\Controller\HelloController::index"/>
          ```
        correct: false
    help: |
      XML routing uses the `controller` attribute or a `default` element with `_controller` key.
      https://symfony.com/doc/current/routing.html#defining-routes-in-xml

  -
    question: |
      What is the primary role of the `HttpKernel` component in Symfony?
    answers:
      -
        value: >
          To manage the dependency injection container.
        correct: false
      -
        value: >
          To handle the entire HTTP request-response lifecycle, from receiving a request to sending a response.
        correct: true
      -
        value: >
          To provide a templating engine.
        correct: false
      -
        value: >
          To manage database interactions.
        correct: false
    help: |
      The `HttpKernel` is the core component that orchestrates the entire request handling process.
      https://symfony.com/doc/current/components/http_kernel.html

  -
    question: |
      If you need to access the current environment (e.g., `dev`, `prod`) within your controller, how can you do this when extending `AbstractController`?
    answers:
      -
        value: >
          `$this->getEnvironment();`
        correct: false
      -
        value: >
          `$this->getParameter('kernel.environment');`
        correct: true
      -
        value: >
          `$_ENV['APP_ENV'];`
        correct: false
      -
        value: >
          `$this->container->get('kernel')->getEnvironment();`
        correct: true
    help: |
      The environment is available as a kernel parameter (`kernel.environment`) or directly from the kernel service.
      https://symfony.com/doc/current/controller.html#accessing-configuration-parameters

  -
    question: |
      Which of the following is true about the `Request` object's `attributes` property?
    answers:
      -
        value: >
          It contains all GET and POST parameters.
        correct: false
      -
        value: >
          It stores data that is specific to the matched route, such as route parameters and the `_controller`.
        correct: true
      -
        value: >
          It holds all HTTP headers.
        correct: false
      -
        value: >
          It is used to store session data.
        correct: false
    help: |
      The `attributes` property is a `ParameterBag` that holds data determined during the routing process, including route parameters and special `_` attributes.
      https://symfony.com/doc/current/components/http_foundation/requests.html#request-attributes

  -
    question: |
      What is the purpose of the `#[MapRequestPayload]` attribute when used with a DTO that has validation constraints?
    answers:
      -
        value: >
          It automatically persists the DTO to the database if validation passes.
        correct: false
      -
        value: >
          It automatically validates the DTO against its constraints and throws a `ValidationException` if validation fails.
        correct: true
      -
        value: >
          It converts the DTO into a JSON response.
        correct: false
      -
        value: >
          It's only used for mapping query parameters, not request bodies.
        correct: false
    help: |
      `#[MapRequestPayload]` integrates with the Validator component, automatically validating the DTO and throwing an exception on failure.
      https://symfony.com/doc/current/controller/request_payload.html#validating-the-payload

  -
    question: |
      You want to retrieve the client's IP address from the `Request` object. Which method should you use?
    answers:
      -
        value: >
          `$request->getClientIp();`
        correct: true
      -
        value: >
          `$request->getIp();`
        correct: false
      -
        value: >
          `$_SERVER['REMOTE_ADDR'];`
        correct: false
      -
        value: >
          `$request->getRemoteAddress();`
        correct: false
    help: |
      The `getClientIp()` method provides the client's IP address, taking into account proxy headers if configured.
      https://symfony.com/doc/current/components/http_foundation/requests.html#getting-the-client-s-ip-address

  -
    question: |
      Which of the following is NOT a standard HTTP method that a controller action might handle?
    answers:
      -
        value: >
          GET
        correct: false
      -
        value: >
          POST
        correct: false
      -
        value: >
          FETCH
        correct: true
      -
        value: >
          DELETE
        correct: false
    help: |
      `FETCH` is a JavaScript API, not an HTTP method. Standard HTTP methods include GET, POST, PUT, DELETE, PATCH, HEAD, OPTIONS.
      https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods

  -
    question: |
      What is the primary reason for making controllers "services" in Symfony?
    answers:
      -
        value: >
          To make them accessible from the command line.
        correct: false
      -
        value: >
          To enable dependency injection into their constructors and action methods, promoting reusability and testability.
        correct: true
      -
        value: >
          To automatically generate routes for them.
        correct: false
      -
        value: >
          To make them globally available without needing to be imported.
        correct: false
    help: |
      Registering controllers as services allows Symfony's Dependency Injection Container to manage their dependencies and inject them automatically.
      https://symfony.com/doc/current/controller/service.html

  -
    question: |
      You want to redirect to a specific URL that is not a named route. Which `AbstractController` method should you use?
    answers:
      -
        value: >
          `return $this->redirectToUrl('https://example.com');`
        correct: false
      -
        value: >
          `return $this->redirect('https://example.com');`
        correct: true
      -
        value: >
          `return new Response('', 302, ['Location' => 'https://example.com']);`
        correct: true
      -
        value: >
          `return $this->forwardToUrl('https://example.com');`
        correct: false
    help: |
      The `redirect()` helper method allows redirection to an arbitrary URL. Directly creating a `RedirectResponse` is also valid.
      https://symfony.com/doc/current/controller.html#redirecting

  -
    question: |
      What is the purpose of the `#[MapQueryParameter]` attribute when used with a nullable type-hint (e.g., `#[MapQueryParameter] ?int $page`)?
    answers:
      -
        value: >
          It makes the query parameter mandatory.
        correct: false
      -
        value: >
          If the query parameter is missing, the argument will be `null` instead of throwing an exception.
        correct: true
      -
        value: >
          It automatically sets a default value of `0` if the parameter is missing.
        correct: false
      -
        value: >
          It allows the parameter to be either an integer or a string.
        correct: false
    help: |
      Making the argument nullable with `#[MapQueryParameter]` means that if the parameter is not present in the query string, `null` will be injected instead of an exception being thrown.
      https://symfony.com/doc/current/controller/map_query_parameter.html

  -
    question: |
      Which of the following is the correct way to retrieve all flash messages, regardless of type, in a Twig template?
    answers:
      -
        value: >
          `{{ app.session.getFlashes() }}`
        correct: false
      -
        value: >
          `{{ app.flashes() }}`
        correct: true
      -
        value: >
          `{{ app.session.flashbag.all() }}`
        correct: false
      -
        value: >
          `{{ app.request.session.getFlashBag()->all() }}`
        correct: false
    help: |
      Calling `app.flashes()` without arguments retrieves all flash messages.
      https://symfony.com/doc/current/controller.html#flash-messages

  -
    question: |
      You have a controller action that needs to access a service, `App\Service\MyService`. Which is the most common and recommended way to inject this service?
    answers:
      -
        value: |
          ```php
          public function myAction(): Response
          {
              $myService = $this->container->get(MyService::class);
              // ...
          }
          ```
        correct: false
      -
        value: |
          ```php
          public function myAction(MyService $myService): Response
          {
              // ...
          }
          ```
        correct: true
      -
        value: |
          ```php
          public function __construct(private MyService $myService)
          { /* ... */ }

          public function myAction(): Response
          {
              // ... $this->myService ...
          }
          ```
        correct: true
      -
        value: |
          ```php
          public function myAction(): Response
          {
              $myService = new MyService();
              // ...
          }
          ```
        correct: false
    help: |
      Autowiring by type-hinting in either the constructor or the action method is the recommended practice for injecting services into controllers.
      https://symfony.com/doc/current/controller.html#autowiring-arguments

  -
    question: |
      What is the purpose of the `#[MapRequestPayload]` attribute when the request content type is not JSON (e.g., `application/xml`)?
    answers:
      -
        value: >
          It will automatically convert the XML to JSON before mapping.
        correct: false
      -
        value: >
          It will throw an exception because it only supports JSON by default.
        correct: true
      -
        value: >
          It will attempt to deserialize the XML into the DTO if a suitable deserializer is configured.
        correct: true
      -
        value: >
          It will ignore the request body and map only query parameters.
        correct: false
    help: |
      By default, `#[MapRequestPayload]` expects JSON. However, if the Serializer component is configured with other encoders (like XML), it can handle other formats. If no suitable deserializer is found, it will throw an exception.
      https://symfony.com/doc/current/controller/request_payload.html#supported-formats

  -
    question: |
      Which of the following is the most secure way to get a user-provided value from the request (e.g., from a form field) in a Symfony controller?
    answers:
      -
        value: >
          Directly accessing `$_POST['field_name']`.
        correct: false
      -
        value: >
          Using `$request->request->get('field_name');`
        correct: true
      -
        value: >
          Using `$request->get('field_name');`
        correct: true
      -
        value: >
          Using `$request->query->get('field_name');`
        correct: false
    help: |
      `$request->request->get()` is for POST data. `$request->get()` checks both GET and POST. Both are safer than direct superglobal access as they provide default value handling and are part of the `Request` object.
      https://symfony.com/doc/current/components/http_foundation/requests.html#accessing-request-data

  -
    question: |
      You are building an API endpoint and want to return a 201 Created status code with an empty body. Which is the most appropriate way to do this?
    answers:
      -
        value: >
          `return new Response('', 201);`
        correct: true
      -
        value: >
          `return $this->json(null, 201);`
        correct: true
      -
        value: >
          `return new JsonResponse([], 201);`
        correct: true
      -
        value: >
          `return $this->created();`
        correct: false
    help: |
      All three options correctly return a 201 status code. `new Response('', 201)` is the most basic. `json(null, 201)` or `JsonResponse([], 201)` are suitable for API contexts where a JSON response is expected even if empty.
      https://symfony.com/doc/current/controller.html#json-response

  -
    question: |
      What is the purpose of the `Request::getPathInfo()` method?
    answers:
      -
        value: >
          To get the full URL including the query string.
        correct: false
      -
        value: >
          To get the path relative to the front controller, without the query string.
        correct: true
      -
        value: >
          To get the base URL of the application.
        correct: false
      -
        value: >
          To get the name of the current route.
        correct: false
    help: |
      `getPathInfo()` returns the path part of the URL, relative to the front controller, and excludes the query string.
      https://symfony.com/doc/current/components/http_foundation/requests.html#accessing-request-data

  -
    question: |
      Which of the following is true about the `AbstractController` and its methods?
    answers:
      -
        value: >
          All methods provided by `AbstractController` are also available as global functions.
        correct: false
      -
        value: >
          Extending `AbstractController` is mandatory for all Symfony controllers.
        correct: false
      -
        value: >
          `AbstractController` provides shortcuts to common services like `router`, `twig`, and `session`.
        correct: true
      -
        value: >
          Methods like `render()` automatically commit the response to the browser.
        correct: false
    help: |
      `AbstractController` provides convenient access to commonly used services. It is not mandatory, and its methods return a `Response` object which then needs to be sent.
      https://symfony.com/doc/current/controller.html#extending-the-base-controller-class

  -
    question: |
      What is the difference between `Request::getUri()` and `Request::getUriAndQuery()`?
    answers:
      -
        value: >
          `getUri()` returns the URI without the scheme, while `getUriAndQuery()` includes it.
        correct: false
      -
        value: >
          `getUri()` returns the full URI including scheme, host, and path, while `getUriAndQuery()` additionally includes the query string.
        correct: true
      -
        value: >
          `getUri()` is deprecated, `getUriAndQuery()` is the modern equivalent.
        correct: false
      -
        value: >
          `getUri()` is for internal redirects, `getUriAndQuery()` is for external redirects.
        correct: false
    help: |
      `getUri()` returns the URI up to the path. `getUriAndQuery()` includes the query string.
      https://symfony.com/doc/current/components/http_foundation/requests.html#accessing-request-data

  -
    question: |
      You want to retrieve a specific cookie named `user_id` from the `Request` object. If the cookie is not set, you want a default value of `0`.
    answers:
      -
        value: >
          `$userId = $request->cookies->get('user_id', 0);`
        correct: true
      -
        value: >
          `$userId = $request->getCookie('user_id') ?? 0;`
        correct: false
      -
        value: >
          `$userId = $_COOKIE['user_id'] ?: 0;`
        correct: false
      -
        value: >
          `$userId = $request->cookies->find('user_id') ?: 0;`
        correct: false
    help: |
      The `get()` method of `ParameterBag` (which `Request::cookies` is) allows specifying a default value.
      https://symfony.com/doc/current/components/http_foundation/cookies.html#retrieving-cookies

  -
    question: |
      Which of the following is the correct way to invalidate the user's session in a Symfony controller?
    answers:
      -
        value: >
          `$request->getSession()->clear();`
        correct: false
      -
        value: >
          `$request->getSession()->invalidate();`
        correct: true
      -
        value: >
          `$request->getSession()->destroy();`
        correct: false
      -
        value: >
          `session_destroy();`
        correct: false
    help: |
      The `invalidate()` method of the `SessionInterface` invalidates the current session and regenerates the session ID.
      https://symfony.com/doc/current/components/http_foundation/sessions.html#invalidating-a-session

  -
    question: |
      What is the main advantage of using `#[AsController]` over manually tagging controllers as services in `services.yaml`?
    answers:
      -
        value: >
          It allows for more complex service definitions.
        correct: false
      -
        value: >
          It keeps the service configuration co-located with the controller class, improving discoverability and reducing YAML configuration.
        correct: true
      -
        value: >
          It's required for lazy-loading controllers.
        correct: false
      -
        value: >
          It prevents controllers from being autowired.
        correct: false
    help: |
      `#[AsController]` is a modern approach that simplifies controller service definition by using attributes directly on the class.
      https://symfony.com/doc/current/controller/service.html#controllers-as-services

  -
    question: |
      You need to get the current route name within a controller. How can you access it from the `Request` object?
    answers:
      -
        value: >
          `$request->getRouteName();`
        correct: false
      -
        value: >
          `$request->attributes->get('_route');`
        correct: true
      -
        value: >
          `$request->getPathInfo();`
        correct: false
      -
        value: >
          `$this->get('router')->getContext()->getRouteName();`
        correct: false
    help: |
      The `_route` attribute in the `Request` object's attributes bag stores the name of the matched route.
      https://symfony.com/doc/current/routing.html#route-parameters

  -
    question: |
      Which of the following is true about `BinaryFileResponse`?
    answers:
      -
        value: >
          It is primarily used for streaming real-time data.
        correct: false
      -
        value: >
          It automatically handles HTTP headers like `Content-Disposition` for file downloads.
        correct: true
      -
        value: >
          It requires the entire file to be loaded into memory before sending.
        correct: false
      -
        value: >
          It can only serve image files.
        correct: false
    help: |
      `BinaryFileResponse` is designed for efficient file serving and can automatically set appropriate headers for downloads.
      https://symfony.com/doc/current/components/http_foundation/responses.html#serving-files

  -
    question: |
      What is the primary difference between `#[MapQueryParameter]` and `#[MapQueryString]`?
    answers:
      -
        value: >
          `#[MapQueryParameter]` maps a single query parameter, while `#[MapQueryString]` maps the entire query string to a DTO.
        correct: true
      -
        value: >
          `#[MapQueryParameter]` is for GET requests, `#[MapQueryString]` is for POST requests.
        correct: false
      -
        value: >
          `#[MapQueryParameter]` requires a type-hint, `#[MapQueryString]` does not.
        correct: false
      -
        value: >
          `#[MapQueryString]` is deprecated in Symfony 7.
        correct: false
    help: |
      `#[MapQueryParameter]` targets individual parameters, while `#[MapQueryString]` is for mapping the whole query string into a structured object.
      https://symfony.com/doc/current/controller/map_query_parameter.html
      https://symfony.com/doc/current/controller/map_query_string.html

  -
    question: |
      When would you use a `StreamedResponse` instead of a regular `Response`?
    answers:
      -
        value: >
          When the response content is very small and can be generated quickly.
        correct: false
      -
        value: >
          When you need to send a response immediately without waiting for all content to be generated (e.g., for long-running tasks or real-time updates).
        correct: true
      -
        value: >
          When the response needs to be cached by the client.
        correct: false
      -
        value: >
          When you are returning a JSON API response.
        correct: false
    help: |
      `StreamedResponse` is used when you want to send parts of the response to the client as they become available, rather than waiting for the entire response to be built.
      https://symfony.com/doc/current/components/http_foundation/responses.html#streaming-responses

  -
    question: |
      Which of the following is a valid way to define a route for a controller using YAML configuration?
    answers:
      -
        value: |
          ```yaml
          my_route:
              path: /my-path
              controller: App\Controller\MyController::index
          ```
        correct: true
      -
        value: |
          ```yaml
          routes:
              my_route:
                  path: /my-path
                  controller: App\Controller\MyController::index
          ```
        correct: false
      -
        value: |
          ```yaml
          my_route:
              path: /my-path
              _controller: App\Controller\MyController::index
          ```
        correct: true
      -
        value: |
          ```yaml
          my_route:
              url: /my-path
              action: App\Controller\MyController::index
          ```
        correct: false
    help: |
      YAML routing uses `path` and `controller` (or `_controller`) keys.
      https://symfony.com/doc/current/routing.html#defining-routes-in-yaml

  -
    question: |
      What is the purpose of the `#[MapRequestPayload]` attribute when applied to a controller method argument?
    answers:
      -
        value: >
          It maps query parameters from the URL to the argument.
        correct: false
      -
        value: >
          It automatically deserializes the request body (e.g., JSON, XML) into the type-hinted DTO or object.
        correct: true
      -
        value: >
          It maps uploaded files to the argument.
        correct: false
      -
        value: >
          It validates the request headers.
        correct: false
    help: |
      `#[MapRequestPayload]` is an argument value resolver that handles deserialization of the request body into a PHP object.
      https://symfony.com/doc/current/controller/request_payload.html

  -
    question: |
      You want to access the `User` object representing the currently logged-in user within your controller. Assuming security is configured, how would you typically do this when extending `AbstractController`?
    answers:
      -
        value: >
          `$user = $this->getUser();`
        correct: true
      -
        value: >
          `$user = $this->get('security.token_storage')->getToken()->getUser();`
        correct: true
      -
        value: >
          `$user = $this->security->getUser();`
        correct: false
      -
        value: >
          `$user = $this->container->get('security.user_provider')->getUser();`
        correct: false
    help: |
      The `getUser()` helper method from `AbstractController` is the most convenient way. Direct access to the token storage is also correct.
      https://symfony.com/doc/current/security.html#accessing-the-user-object

  -
    question: |
      Which of the following is true about the `Request` object and its immutability?
    answers:
      -
        value: >
          The `Request` object is always immutable in Symfony.
        correct: false
      -
        value: >
          The `Request` object is mutable, allowing controllers to modify its attributes.
        correct: true
      -
        value: >
          Only the `query` and `request` properties of the `Request` object are mutable.
        correct: false
      -
        value: >
          The `Request` object becomes immutable after it leaves the controller.
        correct: false
    help: |
      The `Request` object is mutable, and its attributes can be modified by listeners or controllers.
      https://symfony.com/doc/current/components/http_foundation/requests.html#request-attributes

  -
    question: |
      What is the purpose of the `#[MapQueryParameter]` attribute when used with a default value (e.g., `#[MapQueryParameter(name: 'page', default: 1)] int $page`)?
    answers:
      -
        value: >
          It makes the query parameter mandatory.
        correct: false
      -
        value: >
          It provides a fallback value if the query parameter is not present in the URL.
        correct: true
      -
        value: >
          It automatically converts the parameter to a string.
        correct: false
      -
        value: >
          It only works for string parameters.
        correct: false
    help: |
      The `default` option in `#[MapQueryParameter]` provides a value if the parameter is missing from the query string.
      https://symfony.com/doc/current/controller/map_query_parameter.html

  -
    question: >
      What is the recommended way to handle form submissions in Symfony controllers?
    answers:
      -
        value: >
          Manually access `$_POST` and validate data.
        correct: false
      -
        value: >
          Use the `Form` component: create a form, handle the request, and check if it's submitted and valid.
        correct: true
      -
        value: >
          Inject the `FormFactory` service and call `createFormBuilder()`.
        correct: true
      -
        value: >
          Use a custom argument resolver for each form field.
        correct: false
    help: |
      The Symfony Form component provides a robust way to handle forms, including creation, submission, and validation.
      https://symfony.com/doc/current/forms.html#handling-form-submissions