category: Data Validation

questions:
  -
    question: >
      How do you typically obtain the validator service in a Symfony controller for PHP object validation?
    answers:
      -
        value: >
          By type-hinting `Symfony\Component\Validator\Validator\ValidatorInterface` in the controller method or constructor.
        correct: true
      -
        value: >
          By calling `Validation::createValidator()` directly in the controller.
        correct: false
      -
        value: >
          By using `#[Autowire(service: 'validator')]` on a private property.
        correct: false
      -
        value: >
          By accessing it from the container via `$this->container->get('validator')`.
        correct: false
    help: |
      Symfony's autowiring mechanism automatically injects the `ValidatorInterface` when type-hinted, which is the recommended way to get the validator service in a controller.
      https://symfony.com/doc/current/validation.html#the-validator-service

  -
    question: >
      Which built-in Symfony validation constraint ensures that a string property is not empty and does not consist solely of whitespace?
    answers:
      -
        value: >
          `#[Assert\NotNull]`
        correct: false
      -
        value: >
          `#[Assert\NotBlank]`
        correct: true
      -
        value: >
          `#[Assert\NotEmpty]`
        correct: false
      -
        value: >
          `#[Assert\Required]`
        correct: false
    help: |
      The `NotBlank` constraint specifically checks for non-empty strings after trimming whitespace, making it suitable for required text fields.
      https://symfony.com/doc/current/reference/constraints/NotBlank.html

  -
    question: >
      How would you define a property to have a minimum length of 5 characters using PHP attributes in a Symfony entity?
    answers:
      -
        value: >
          `#[Assert\Length(min: 5)]`
        correct: true
      -
        value: >
          `#[Assert\MinLength(5)]`
        correct: false
      -
        value: >
          `#[Assert\Length(minimum: 5)]`
        correct: false
      -
        value: >
          `#[Assert\Size(min: 5)]`
        correct: false
    help: |
      The `Length` constraint uses the `min` option to specify the minimum required length for a value.
      https://symfony.com/doc/current/reference/constraints/Length.html#min

  -
    question: >
      Consider the following PHP code snippet. How would you correctly validate the `$email` string as a standalone scalar value using the Symfony Validator component?
      ```php
      use Symfony\Component\Validator\Validator\ValidatorInterface;
      use Symfony\Component\Validator\Constraints as Assert;

      // ...
      public function processEmail(string $email, ValidatorInterface $validator): void
      {
          // ???
      }
      ```
    answers:
      -
        value: >
          `$errors = $validator->validate($email, new Assert\Email());`
        correct: true
      -
        value: >
          `$errors = $validator->validateEmail($email);`
        correct: false
      -
        value: >
          `$errors = Validation::validateEmail($email);`
        correct: false
      -
        value: >
          `$errors = $validator->validate($email, 'email');`
        correct: false
    help: |
      To validate a scalar value, you pass the value itself and an instance of the desired constraint to the `validate()` method of the validator service.
      https://symfony.com/doc/current/validation/raw_values.html

  -
    question: >
      What is the return type of the `validate()` method of `Symfony\Component\Validator\Validator\ValidatorInterface`?
    answers:
      -
        value: >
          `Symfony\Component\Validator\ConstraintViolationListInterface`
        correct: true
      -
        value: >
          `array`
        correct: false
      -
        value: >
          `bool`
        correct: false
      -
        value: >
          `Symfony\Component\Validator\ConstraintViolation[]`
        correct: false
    help: |
      The `validate()` method returns a `ConstraintViolationListInterface` object, which is a collection of `ConstraintViolation` objects.
      https://symfony.com/doc/current/validation.html#basic-usage

  -
    question: >
      By default, which validation group is applied when calling `$validator->validate($object);` without explicitly specifying any groups?
    answers:
      -
        value: >
          `Default`
        correct: true
      -
        value: >
          `All`
        correct: false
      -
        value: >
          `None`
        correct: false
      -
        value: >
          `Primary`
        correct: false
    help: |
      If no validation groups are specified in the `validate()` method call, Symfony's validator applies only the constraints that belong to the `Default` group.
      https://symfony.com/doc/current/validation/groups.html#validation-groups

  -
    question: >
      Given a `User` object with constraints in the `registration` validation group, how would you validate only these specific constraints using the `ValidatorInterface`?
    answers:
      -
        value: >
          `$errors = $validator->validate($user, null, ['registration']);`
        correct: true
      -
        value: >
          `$errors = $validator->validate($user, 'registration');`
        correct: false
      -
        value: >
          `$errors = $validator->validate($user, groups: 'registration');`
        correct: false
      -
        value: >
          `$errors = $validator->validate($user)->forGroup('registration');`
        correct: false
    help: |
      The third argument to the `validate()` method is an array of group names to validate against.
      https://symfony.com/doc/current/validation/groups.html#validating-a-specific-group

  -
    question: >
      Which built-in Symfony validation constraint is used to verify if a string represents a syntactically valid email address?
    answers:
      -
        value: >
          `#[Assert\Email]`
        correct: true
      -
        value: >
          `#[Assert\IsEmail]`
        correct: false
      -
        value: >
          `#[Assert\ValidEmail]`
        correct: false
      -
        value: >
          `#[Assert\EmailAddress]`
        correct: false
    help: |
      The `Email` constraint checks if a given string is a valid email address according to RFCs.
      https://symfony.com/doc/current/reference/constraints/Email.html

  -
    question: >
      To ensure that properties of a nested `Address` object within an `Author` entity are also validated when the `Author` is validated, which constraint should be applied to the `address` property in the `Author` class?
    answers:
      -
        value: >
          `#[Assert\Valid]`
        correct: true
      -
        value: >
          `#[Assert\Nested]`
        correct: false
      -
        value: >
          `#[Assert\Object]`
        correct: false
      -
        value: >
          `#[Assert\Cascade]`
        correct: false
    help: |
      The `Valid` constraint is specifically designed to trigger validation on nested objects or collections.
      https://symfony.com/doc/current/reference/constraints/Valid.html

  -
    question: >
      When creating a custom validation constraint in Symfony, what class must its associated validator extend or what interface must it implement?
    answers:
      -
        value: >
          It must extend `Symfony\Component\Validator\ConstraintValidator` or implement `Symfony\Component\Validator\ConstraintValidatorInterface`.
        correct: true
      -
        value: >
          It must implement `Symfony\Component\Validator\Validator\ValidatorInterface`.
        correct: false
      -
        value: >
          It must extend `Symfony\Component\Validator\CallbackValidator`.
        correct: false
      -
        value: >
          It must implement `Symfony\Component\Validator\Constraint\ConstraintInterface`.
        correct: false
    help: |
      Custom constraint validators must extend `ConstraintValidator` (which implements `ConstraintValidatorInterface`) to provide the validation logic.
      https://symfony.com/doc/current/validation/custom_constraint.html#creating-the-validator

  -
    question: >
      What is the correct signature for the `validate` method within a custom constraint validator class?
    answers:
      -
        value: >
          `public function validate(mixed $value, Constraint $constraint): void`
        correct: true
      -
        value: >
          `public function validate($value, Constraint $constraint)`
        correct: false
      -
        value: >
          `public function validate(object $value, Constraint $constraint): bool`
        correct: false
      -
        value: >
          `public function validate(mixed $value): void`
        correct: false
    help: |
      The `validate` method receives the value to be validated and the constraint object that triggered the validation. It should return `void`.
      https://symfony.com/doc/current/validation/custom_constraint.html#the-validator-logic

  -
    question: >
      Inside a custom constraint validator, how do you add a validation violation for a specific property path (e.g., 'user.email')?
    answers:
      -
        value: >
          `$this->context->buildViolation($constraint->message)->atPath('user.email')->addViolation();`
        correct: true
      -
        value: >
          `$this->addViolation($constraint->message, 'user.email');`
        correct: false
      -
        value: >
          `$this->context->addViolation($constraint->message, 'user.email');`
        correct: false
      -
        value: >
          `$this->context->violation('user.email', $constraint->message);`
        correct: false
    help: |
      The `ExecutionContextInterface` (available via `$this->context`) provides the `buildViolation()` method to create a violation, which can then be associated with a path using `atPath()` before calling `addViolation()`.
      https://symfony.com/doc/current/validation/custom_constraint.html#the-validator-logic

  -
    question: >
      What is the primary purpose of a validation `GroupSequence` in Symfony?
    answers:
      -
        value: >
          To define an ordered list of validation groups where validation stops immediately if a violation occurs in an earlier group.
        correct: true
      -
        value: >
          To define a set of groups that are always validated together, regardless of individual failures.
        correct: false
      -
        value: >
          To dynamically select validation groups based on the object's data during form submission.
        correct: false
      -
        value: >
          To define a fallback group that is used if no specific group is provided during validation.
        correct: false
    help: |
      A `GroupSequence` ensures that validation groups are processed in a specific order, and validation for subsequent groups is skipped if any constraint in a preceding group fails.
      https://symfony.com/doc/current/validation/sequence_provider.html#group-sequence

  -
    question: >
      How can you define a group sequence `['User', 'Strict']` for a `User` class using PHP attributes?
    answers:
      -
        value: >
          `#[Assert\GroupSequence(['User', 'Strict'])]`
        correct: true
      -
        value: >
          `#[Assert\ValidationGroups(['User', 'Strict'])]`
        correct: false
      -
        value: >
          `#[Assert\Sequence(['User', 'Strict'])]`
        correct: false
      -
        value: >
          `#[Assert\Order(['User', 'Strict'])]`
        correct: false
    help: |
      The `GroupSequence` attribute is used at the class level to define an ordered sequence of validation groups.
      https://symfony.com/doc/current/validation/sequence_provider.html#group-sequence

  -
    question: >
      Which built-in Symfony validation constraint is used to ensure that a value is one of a predefined set of allowed options?
    answers:
      -
        value: >
          `#[Assert\Choice]`
        correct: true
      -
        value: >
          `#[Assert\InArray]`
        correct: false
      -
        value: >
          `#[Assert\Select]`
        correct: false
      -
        value: >
          `#[Assert\Option]`
        correct: false
    help: |
      The `Choice` constraint validates that a value is one of the provided choices. It can also be configured for multiple selections.
      https://symfony.com/doc/current/reference/constraints/Choice.html

  -
    question: >
      How does the `#[Assert\Valid]` constraint behave regarding validation groups by default, unlike most other constraints?
    answers:
      -
        value: >
          It always applies validation to the nested object, even if a specific group is provided for the main object validation.
        correct: true
      -
        value: >
          It only applies if the `Default` group is being validated for the parent object.
        correct: false
      -
        value: >
          It must have a group explicitly defined on itself to be applied.
        correct: false
      -
        value: >
          It applies only if no other groups are specified for the parent object.
        correct: false
    help: |
      The `Valid` constraint is unique in that it does not use the `Default` group and is always applied by default, even when other groups are specified for the parent object, unless its own `groups` option is set.
      https://symfony.com/doc/current/reference/constraints/Valid.html#validation-groups

  -
    question: >
      Which built-in Symfony validation constraint is used to validate if a string matches a specified regular expression pattern?
    answers:
      -
        value: >
          `#[Assert\Regex]`
        correct: true
      -
        value: >
          `#[Assert\Pattern]`
        correct: false
      -
        value: >
          `#[Assert\Match]`
        correct: false
      -
        value: >
          `#[Assert\RegExp]`
        correct: false
    help: |
      The `Regex` constraint allows you to validate a string against a given regular expression pattern.
      https://symfony.com/doc/current/reference/constraints/Regex.html

  -
    question: >
      When creating a form in a Symfony controller, how can you specify that only constraints belonging to the `registration` validation group should be applied to the submitted data?
    answers:
      -
        value: >
          `$form = $this->createForm(UserType::class, $user, ['validation_groups' => ['registration']]);`
        correct: true
      -
        value: >
          `$form = $this->createForm(UserType::class, $user)->setValidationGroups(['registration']);`
        correct: false
      -
        value: >
          `$form = $this->createForm(UserType::class, $user, ['groups' => ['registration']]);`
        correct: false
      -
        value: >
          `$form = $this->createForm(UserType::class, $user)->validate(['registration']);`
        correct: false
    help: |
      The `validation_groups` option in the form options array is used to specify which validation groups should be applied when the form is submitted.
      https://symfony.com/doc/current/form/validation_groups.html#defining-validation-groups-in-the-form

  -
    question: >
      In a Symfony entity, how can you define a class-level callback validation method (e.g., `validate`) using the `loadValidatorMetadata` static method?
    answers:
      -
        value: >
          `$metadata->addConstraint(new Assert\Callback('validate'));`
        correct: true
      -
        value: >
          `$metadata->addMethodConstraint('validate');`
        correct: false
      -
        value: >
          `$metadata->addCallback('validate');`
        correct: false
      -
        value: >
          `$metadata->addConstraint(Assert\Callback::class, 'validate');`
        correct: false
    help: |
      The `Callback` constraint can be applied at the class level using `addConstraint()` to invoke a custom validation method within the class.
      https://symfony.com/doc/current/components/validator/metadata.html#class-level-callback-constraints

  -
    question: >
      What is the primary purpose of the `atPath()` method when building a validation violation using the `ExecutionContextInterface`?
    answers:
      -
        value: >
          To specify the property path (e.g., `address.zipCode`) where the violation occurred.
        correct: true
      -
        value: >
          To set the translation key for the error message.
        correct: false
      -
        value: >
          To define the severity level of the violation.
        correct: false
      -
        value: >
          To add additional context data to the violation for debugging.
        correct: false
    help: |
      `atPath()` is used to associate a validation violation with a specific property or nested path within the validated object.
      https://symfony.com/doc/current/validation/custom_constraint.html#the-validator-logic

  -
    question: >
      Which built-in Symfony validation constraint is used to validate the number of elements in a collection, such as an array or an object implementing `Traversable`?
    answers:
      -
        value: >
          `#[Assert\Count]`
        correct: true
      -
        value: >
          `#[Assert\CollectionSize]`
        correct: false
      -
        value: >
          `#[Assert\Size]`
        correct: false
      -
        value: >
          `#[Assert\ElementsCount]`
        correct: false
    help: |
      The `Count` constraint allows you to define minimum and maximum limits for the number of elements in a collection.
      https://symfony.com/doc/current/reference/constraints/Count.html

  -
    question: >
      What is the default value of the `traverse` option for the `#[Assert\Valid]` constraint when applied to a `Traversable` object, and what does it imply?
    answers:
      -
        value: >
          `true`, meaning all containing values will be validated.
        correct: true
      -
        value: >
          `false`, meaning only the `Traversable` itself is validated, not its elements.
        correct: false
      -
        value: >
          `true`, meaning only the first element of the `Traversable` is validated.
        correct: false
      -
        value: >
          `false`, meaning arrays are not traversed by default.
        correct: false
    help: |
      By default, `Valid` traverses `Traversable` objects (like `ArrayObject`) to validate their contained elements. Arrays are always traversed regardless of this option.
      https://symfony.com/doc/current/reference/constraints/Valid.html#traverse

  -
    question: >
      Which built-in Symfony validation constraint can be used to assert that a value is of a specific PHP type (e.g., `string`, `int`, `array`, `bool`)?
    answers:
      -
        value: >
          `#[Assert\Type]`
        correct: true
      -
        value: >
          `#[Assert\IsType]`
        correct: false
      -
        value: >
          `#[Assert\InstanceOf]`
        correct: false
      -
        value: >
          `#[Assert\PhpType]`
        correct: false
    help: |
      The `Type` constraint checks if the value's type matches one of the specified PHP types.
      https://symfony.com/doc/current/reference/constraints/Type.html

  -
    question: >
      Within a custom constraint validator, how can you set a custom translation domain for an individual validation violation?
    answers:
      -
        value: >
          `$this->context->buildViolation($constraint->message)->setTranslationDomain('validation_errors')->addViolation();`
        correct: true
      -
        value: >
          `$this->context->setTranslationDomain('validation_errors')->addViolation($constraint->message);`
        correct: false
      -
        value: >
          `$this->context->addViolation($constraint->message, domain: 'validation_errors');`
        correct: false
      -
        value: >
          `$this->context->setDomain('validation_errors')->buildViolation($constraint->message)->addViolation();`
        correct: false
    help: |
      The `setTranslationDomain()` method on the violation builder allows overriding the default translation domain for a specific violation.
      https://symfony.com/doc/current/validation/translations.html#translation-domain

  -
    question: >
      When using Symfony Forms, how can you dynamically determine which validation groups to apply based on the submitted data (e.g., a field's value)?
    answers:
      -
        value: >
          By providing a `Closure` to the `validation_groups` option in the form's `configureOptions` method.
        correct: true
      -
        value: >
          By implementing `GroupSequenceProviderInterface` on the form type class.
        correct: false
      -
        value: >
          By using a dedicated service to return the groups after form submission.
        correct: false
      -
        value: >
          By calling `setValidationGroups()` on the form object after it has been handled.
        correct: false
    help: |
      A `Closure` can be passed to the `validation_groups` option. This closure receives the `FormInterface` object, allowing access to the form's data to determine the appropriate groups.
      https://symfony.com/doc/current/form/data_based_validation.html#dynamic-validation-groups

  -
    question: >
      Which built-in Symfony constraint allows you to apply other constraints conditionally based on the evaluation of an expression?
    answers:
      -
        value: >
          `#[Assert\When]`
        correct: true
      -
        value: >
          `#[Assert\Conditional]`
        correct: false
      -
        value: >
          `#[Assert\If]`
        correct: false
      -
        value: >
          `#[Assert\Expression]`
        correct: false
    help: |
      The `When` constraint takes an `expression` and a set of `constraints` (and optionally `otherwise` constraints) that are applied if the expression evaluates to a truthy value.
      https://symfony.com/doc/current/reference/constraints/When.html

  -
    question: >
      When using the `expression` option of an `#[Assert\When]` constraint applied to a property, which variables are available within the expression's context in Symfony 7.2+?
    answers:
      -
        value: >
          `this`, `value`, `context`
        correct: true
      -
        value: >
          `this`, `form`, `data`
        correct: false
      -
        value: >
          `value`, `root`, `container`
        correct: false
      -
        value: >
          `object`, `property`, `validator`
        correct: false
    help: |
      The `expression` can access `this` (the object being validated), `value` (the property's value), and `context` (the `ExecutionContextInterface` object).
      https://symfony.com/doc/current/reference/constraints/When.html#expression

  -
    question: >
      What is the primary purpose of the static `loadValidatorMetadata(ClassMetadata $metadata): void` method in a Symfony entity class?
    answers:
      -
        value: >
          To define validation constraints programmatically for the class and its properties.
        correct: true
      -
        value: >
          To load Doctrine mapping information for the entity.
        correct: false
      -
        value: >
          To configure event listeners specifically for validation events.
        correct: false
      -
        value: >
          To define custom validation rules using a service injected into the method.
        correct: false
    help: |
      This static method provides a programmatic way to define validation constraints, offering flexibility for complex or dynamic validation logic that might not be easily expressed with attributes or YAML/XML.
      https://symfony.com/doc/current/components/validator/metadata.html

  -
    question: >
      Which Symfony console command can be used to inspect and list all validation constraints applied to a specific class, such as `App\Entity\User`?
    answers:
      -
        value: >
          `php bin/console debug:validator 'App\Entity\User'`
        correct: true
      -
        value: >
          `php bin/console validator:debug 'App\Entity\User'`
        correct: false
      -
        value: >
          `php bin/console validation:show 'App\Entity\User'`
        correct: false
      -
        value: >
          `php bin/console app:validator:debug 'App\Entity\User'`
        correct: false
    help: |
      The `debug:validator` command is a powerful tool for understanding the validation rules applied to your classes.
      https://symfony.com/doc/current/validation.html#debugging-validation

  -
    question: >
      What is the effect of applying `#[Assert\Length(exactly: 10)]` to a string property in Symfony?
    answers:
      -
        value: >
          The value must have precisely 10 characters.
        correct: true
      -
        value: >
          The value must have at least 10 characters.
        correct: false
      -
        value: >
          The value must have at most 10 characters.
        correct: false
      -
        value: >
          This is an invalid usage of the `Length` constraint.
        correct: false
    help: |
      The `exactly` option of the `Length` constraint enforces that the value's length must be exactly equal to the specified number.
      https://symfony.com/doc/current/reference/constraints/Length.html#exactly

  -
    question: >
      When writing a custom constraint validator, under what specific condition should you throw an `Symfony\Component\Validator\Exception\UnexpectedTypeException`?
    answers:
      -
        value: >
          If the `Constraint` object passed to the `validate()` method is not an instance of your custom constraint class.
        correct: true
      -
        value: >
          If the `$value` passed to the `validate()` method is not of the expected data type (e.g., not a string when a string is required).
        correct: false
      -
        value: >
          If a required service cannot be injected into your validator.
        correct: false
      -
        value: >
          If the custom validation logic itself encounters an unhandled error.
        correct: false
    help: |
      `UnexpectedTypeException` is specifically for when the `Constraint` object itself is of an unexpected type. For the `$value`, `UnexpectedValueException` is used.
      https://symfony.com/doc/current/validation/custom_constraint.html#the-validator-logic

  -
    question: >
      What is the purpose of calling `setParameter('{{ string }}', $value)` when building a validation violation using the `ExecutionContextInterface`?
    answers:
      -
        value: >
          To replace placeholders (e.g., `{{ limit }}`, `{{ value }}`) within the constraint's error message.
        correct: true
      -
        value: >
          To define a variable that can be used in a validation expression.
        correct: false
      -
        value: >
          To pass additional data to the custom validator's constructor.
        correct: false
      -
        value: >
          To set a global parameter that applies to all subsequent violations.
        correct: false
    help: |
      `setParameter()` is used to provide values for placeholders defined in the constraint's error message, allowing for dynamic and informative error messages.
      https://symfony.com/doc/current/validation/custom_constraint.html#the-validator-logic

  -
    question: >
      In a Symfony `GroupSequence`, what does the following definition `[['GroupA', 'GroupB'], 'GroupC']` signify about the validation flow?
    answers:
      -
        value: >
          All constraints in `GroupA` and `GroupB` are validated, and if any fail, validation continues for the other group within the nested array. If both `GroupA` and `GroupB` have no violations, then `GroupC` is validated.
        correct: true
      -
        value: >
          Validation stops immediately if any constraint in `GroupA` fails; otherwise, `GroupB` is validated, and then `GroupC`.
        correct: false
      -
        value: >
          This is an invalid group sequence definition and will result in an error.
        correct: false
      -
        value: >
          `GroupA` and `GroupB` are optional validation steps, but `GroupC` is mandatory.
        correct: false
    help: |
      Nested arrays in a `GroupSequence` indicate that all groups within that nested array are validated, even if violations occur, before moving to the next top-level group in the sequence.
      https://symfony.com/doc/current/validation/sequence_provider.html#group-sequence

  -
    question: >
      Which built-in Symfony validation constraint is most suitable for validating the structure and content of a complex array of data, where different keys might have different validation rules?
    answers:
      -
        value: >
          `#[Assert\Collection]`
        correct: true
      -
        value: >
          `#[Assert\Array]`
        correct: false
      -
        value: >
          `#[Assert\Structure]`
        correct: false
      -
        value: >
          `#[Assert\Map]`
        correct: false
    help: |
      The `Collection` constraint allows you to define a set of constraints for each key within an array, enabling validation of complex array structures.
      https://symfony.com/doc/current/reference/constraints/Collection.html

  -
    question: >
      In a Symfony service, what is the recommended way to get an instance of the validator service for object validation?
    answers:
      -
        value: >
          Type-hint `Symfony\Component\Validator\Validator\ValidatorInterface` in the service's constructor or a method.
        correct: true
      -
        value: >
          Use the `#[Autowire]` attribute with the service ID `validator`.
        correct: false
      -
        value: >
          Extend `Symfony\Component\Validator\ValidatorAwareTrait`.
        correct: false
      -
        value: >
          Call `Container::get('validator')` directly.
        correct: false
    help: |
      Symfony's autowiring automatically resolves the `ValidatorInterface` to the correct validator service, which is the preferred method for dependency injection.
      https://symfony.com/doc/current/validation.html#the-validator-service

  -
    question: >
      In YAML validation configuration, how do you define a constraint that belongs to the `Default` validation group?
    answers:
      -
        value: >
          By simply not specifying a `groups` option for the constraint.
        correct: true
      -
        value: >
          By explicitly setting `groups: [Default]`.
        correct: false
      -
        value: >
          By using `default: true` as an option for the constraint.
        correct: false
      -
        value: >
          By placing the constraint under a `default_constraints` key.
        correct: false
    help: |
      Constraints defined without an explicit `groups` option are automatically assigned to the `Default` validation group.
      https://symfony.com/doc/current/validation/groups.html#validation-groups

  -
    question: >
      Which built-in Symfony validation constraint is used to validate if a string represents a valid CSS color (e.g., `#FFF`, `rgb(255,0,0)`, `red`)?
    answers:
      -
        value: >
          `#[Assert\CssColor]`
        correct: true
      -
        value: >
          `#[Assert\Color]`
        correct: false
      -
        value: >
          `#[Assert\HexColor]`
        correct: false
      -
        value: >
          `#[Assert\RgbColor]`
        correct: false
    help: |
      The `CssColor` constraint validates that a string is a valid CSS color notation.
      https://symfony.com/doc/current/reference/constraints/CssColor.html

  -
    question: >
      After using `buildViolation()` and `atPath()` to define a validation violation in a custom validator, what is the final method call required to register this violation with the validation context?
    answers:
      -
        value: >
          `addViolation()`
        correct: true
      -
        value: >
          `register()`
        correct: false
      -
        value: >
          `commit()`
        correct: false
      -
        value: >
          `save()`
        correct: false
    help: |
      The `addViolation()` method finalizes the violation object and adds it to the `ConstraintViolationList`.
      https://symfony.com/doc/current/validation/custom_constraint.html#the-validator-logic

  -
    question: >
      When defining a custom callback method for class-level validation (e.g., `public function validate(ExecutionContextInterface $context): void`), what capabilities does the `$context` object provide?
    answers:
      -
        value: >
          Access to the validator, the object being validated, and methods to build and add violations.
        correct: true
      -
        value: >
          Access to the HTTP request and response objects.
        correct: false
      -
        value: >
          Access to the database connection and entity manager.
        correct: false
      -
        value: >
          Access to the form data and form builder.
        correct: false
    help: |
      The `ExecutionContextInterface` provides essential tools for custom validation, including access to the root object, the validator itself, and methods to create and manage violations.
      https://symfony.com/doc/current/components/validator/metadata.html#class-level-callback-constraints

  -
    question: >
      What is the purpose of implementing `Symfony\Component\Validator\GroupSequenceProviderInterface` on an entity class?
    answers:
      -
        value: >
          To dynamically determine the validation group sequence based on the object's current state or properties.
        correct: true
      -
        value: >
          To provide a comprehensive list of all available validation groups for the entity.
        correct: false
      -
        value: >
          To define a fixed, default group sequence that applies to all instances of the entity.
        correct: false
      -
        value: >
          To allow external services to define and modify the entity's validation groups.
        correct: false
    help: |
      Implementing `GroupSequenceProviderInterface` allows an object to provide its own `GroupSequence` dynamically, enabling conditional validation flows.
      https://symfony.com/doc/current/validation/sequence_provider.html#group-sequence-provider

  -
    question: >
      Under what circumstances would you typically use `Symfony\Component\Validator\Validation::createValidator()` instead of injecting `ValidatorInterface` via dependency injection?
    answers:
      -
        value: >
          In standalone PHP scripts, console commands, or tests where the full Symfony container is not available or desired.
        correct: true
      -
        value: >
          In Symfony controllers for simple, single-property validations.
        correct: false
      -
        value: >
          When validating forms to ensure proper integration with the Form component.
        correct: false
      -
        value: >
          When performing unit tests specifically for custom constraints within a Symfony application.
        correct: false
    help: |
      `Validation::createValidator()` provides a basic, standalone validator instance, useful outside of a full Symfony application context. Within a Symfony application, injecting `ValidatorInterface` is preferred.
      https://symfony.com/doc/current/components/validator.html#getting-the-validator

  -
    question: >
      In the `minMessage` option of the `Length` constraint, which placeholder represents the actual length of the invalid value that caused the violation?
    answers:
      -
        value: >
          `{{ value_length }}`
        correct: true
      -
        value: >
          `{{ count }}`
        correct: false
      -
        value: >
          `{{ length }}`
        correct: false
      -
        value: >
          `{{ current_length }}`
        correct: false
    help: |
      The `minMessage` option provides `{{ limit }}`, `{{ value }}`, and `{{ value_length }}` for use in the error message.
      https://symfony.com/doc/current/reference/constraints/Length.html#minmessage

  -
    question: >
      Where are YAML validation configuration files typically located within a standard Symfony application structure?
    answers:
      -
        value: >
          `config/validator/validation.yaml`
        correct: true
      -
        value: >
          `config/packages/validator.yaml`
        correct: false
      -
        value: >
          `src/Resources/config/validation.yaml`
        correct: false
      -
        value: >
          `var/cache/validation.yaml`
        correct: false
    help: |
      Symfony's validator component is configured to load validation metadata from files placed in the `config/validator/` directory.
      https://symfony.com/doc/current/validation/file_based_validation.html#yaml

  -
    question: >
      What is a key advantage of defining validation constraints using PHP attributes directly in entity classes compared to using separate YAML or XML configuration files?
    answers:
      -
        value: >
          Constraints are defined directly alongside the property they validate, making the code more cohesive and easier to understand for simple cases.
        correct: true
      -
        value: >
          It allows for more complex conditional validation logic that cannot be expressed in file-based configurations.
        correct: false
      -
        value: >
          It provides better runtime performance due to direct compilation into PHP opcodes.
        correct: false
      -
        value: >
          It supports dynamic group sequences more easily than file-based configurations.
        correct: false
    help: |
      PHP attributes offer a concise way to define validation rules directly where the properties are declared, improving developer experience for straightforward constraints.
      https://symfony.com/doc/current/validation.html#constraint-basics

  -
    question: >
      If a Symfony entity defines validation constraints using both PHP attributes and the static `loadValidatorMetadata` method, how are these definitions handled by the validator?
    answers:
      -
        value: >
          Both sets of constraints are combined, with `loadValidatorMetadata` typically adding to or overriding attribute definitions.
        correct: true
      -
        value: >
          Only the constraints defined via PHP attributes are considered, as they take precedence.
        correct: false
      -
        value: >
          Only the constraints defined in `loadValidatorMetadata` are considered, as it takes precedence.
        correct: false
      -
        value: >
          An error is thrown because only one method of defining constraints is allowed per class.
        correct: false
    help: |
      Symfony's validator component merges validation metadata from all available sources (attributes, YAML, XML, `loadValidatorMetadata`), allowing for flexible and combined configurations.
      https://symfony.com/doc/current/components/validator/resources.html

  -
    question: >
      In the `message` option of the `Choice` constraint, which placeholder represents the actual invalid value that the user provided?
    answers:
      -
        value: >
          `{{ value }}`
        correct: true
      -
        value: >
          `{{ input }}`
        correct: false
      -
        value: >
          `{{ given }}`
        correct: false
      -
        value: >
          `{{ current }}`
        correct: false
    help: |
      The `Choice` constraint's `message` option provides `{{ choices }}` (a comma-separated list of valid choices) and `{{ value }}` (the invalid input).
      https://symfony.com/doc/current/reference/constraints/Choice.html#message

  -
    question: >
      After validating an object using the `ValidatorInterface` in a Symfony controller, what is the most common way to check if any validation errors occurred?
    answers:
      -
        value: >
          `if (count($errors) > 0)` or `if ($errors->count() > 0)`
        correct: true
      -
        value: >
          `if (!$errors->isEmpty())`
        correct: true
      -
        value: >
          `if ($errors)`
        correct: false
      -
        value: >
          `if ($errors->hasErrors())`
        correct: false
    help: |
      The `ConstraintViolationListInterface` implements `Countable`, allowing `count()` to be used. It also provides an `isEmpty()` method.
      https://symfony.com/doc/current/validation.html#handling-validation-errors

  -
    question: >
      If an `Author` entity has an `Address` property marked with `#[Assert\Valid]`, and the `Author` object is validated using the `Default` group, what happens to the validation of the `Address` object's properties?
    answers:
      -
        value: >
          The `Address` object's constraints are also validated, regardless of which group they belong to, unless `#[Assert\Valid]` itself has a `groups` option.
        correct: true
      -
        value: >
          Only the `Address` object's constraints belonging to the `Default` group are validated.
        correct: false
      -
        value: >
          The `Address` object is not validated unless explicitly specified with its own `validate()` call.
        correct: false
      -
        value: >
          Only the `Valid` constraint on the `Address` property is checked, not the `Address` object's internal constraints.
        correct: false
    help: |
      The `Valid` constraint, by default, always applies validation to the nested object, ignoring the group of the parent validation call unless its own `groups` option is set.
      https://symfony.com/doc/current/reference/constraints/Valid.html#validation-groups

  -
    question: >
      When writing a custom constraint validator, under what specific condition should you throw an `Symfony\Component\Validator\Exception\UnexpectedValueException`?
    answers:
      -
        value: >
          When the `$value` passed to the `validate()` method is not of the expected data type (e.g., an integer when a string is required).
        correct: true
      -
        value: >
          When the constraint's configuration options are invalid or missing.
        correct: false
      -
        value: >
          When a database error occurs during the validation process.
        correct: false
      -
        value: >
          When the custom validation logic itself fails to produce a valid result.
        correct: false
    help: |
      `UnexpectedValueException` is used to indicate that the validator cannot process the given value because its data type is incorrect for the validation logic.
      https://symfony.com/doc/current/validation/custom_constraint.html#the-validator-logic

  -
    question: >
      Which Symfony console command can be used to debug validation constraints for all classes within a specified directory, for example, `src/Entity`?
    answers:
      -
        value: >
          `php bin/console debug:validator src/Entity`
        correct: true
      -
        value: >
          `php bin/console validator:debug src/Entity/*`
        correct: false
      -
        value: >
          `php bin/console validation:list src/Entity`
        correct: false
      -
        value: >
          `php bin/console debug:validation --dir=src/Entity`
        correct: false
    help: |
      The `debug:validator` command accepts a directory path to inspect all classes within that directory for applied validation rules.
      https://symfony.com/doc/current/validation.html#debugging-validation

  -
    question: >
      Which built-in Symfony constraint is used to validate that a value is a valid URL?
    answers:
      -
        value: >
          `#[Assert\Url]`
        correct: true
      -
        value: >
          `#[Assert\Link]`
        correct: false
      -
        value: >
          `#[Assert\WebAddress]`
        correct: false
      -
        value: >
          `#[Assert\Uri]`
        correct: false
    help: |
      The `Url` constraint checks if a string is a syntactically valid URL.
      https://symfony.com/doc/current/reference/constraints/Url.html

  -
    question: >
      What is the primary benefit of using validation groups?
    answers:
      -
        value: >
          To apply different sets of validation rules based on the context or state of an object (e.g., 'registration' vs. 'profile' updates).
        correct: true
      -
        value: >
          To organize constraints into categories for better code readability.
        correct: false
      -
        value: >
          To enable or disable validation entirely for certain properties.
        correct: false
      -
        value: >
          To define a hierarchy of validation rules that are always applied in a specific order.
        correct: false
    help: |
      Validation groups allow you to apply only a subset of an object's constraints based on the current operation or context.
      https://symfony.com/doc/current/validation/groups.html

  -
    question: >
      Which built-in Symfony constraint is used to ensure that a numeric value is within a specified range (e.g., between 1 and 100)?
    answers:
      -
        value: >
          `#[Assert\Range(min: 1, max: 100)]`
        correct: true
      -
        value: >
          `#[Assert\Between(1, 100)]`
        correct: false
      -
        value: >
          `#[Assert\MinMax(1, 100)]`
        correct: false
      -
        value: >
          `#[Assert\NumericRange(min: 1, max: 100)]`
        correct: false
    help: |
      The `Range` constraint validates that a numeric value falls within a specified minimum and maximum.
      https://symfony.com/doc/current/reference/constraints/Range.html

  -
    question: >
      When defining a custom validation constraint, what is the purpose of the `validatedBy()` method in the constraint class itself?
    answers:
      -
        value: >
          It returns the fully qualified class name of the associated validator.
        correct: true
      -
        value: >
          It specifies the validation group that the constraint belongs to.
        correct: false
      -
        value: >
          It defines the default error message for the constraint.
        correct: false
      -
        value: >
          It indicates whether the constraint can be applied to properties or classes.
        correct: false
    help: |
      The `validatedBy()` method in a custom constraint class tells Symfony which validator class is responsible for validating that constraint.
      https://symfony.com/doc/current/validation/custom_constraint.html#creating-the-constraint

  -
    question: >
      Which built-in Symfony constraint is used to ensure a string value is a valid UUID (Universally Unique Identifier)?
    answers:
      -
        value: >
          `#[Assert\Uuid]`
        correct: true
      -
        value: >
          `#[Assert\Guid]`
        correct: false
      -
        value: >
          `#[Assert\UniqueId]`
        correct: false
      -
        value: >
          `#[Assert\Identifier]`
        correct: false
    help: |
      The `Uuid` constraint validates that a string conforms to the UUID format (RFC 4122).
      https://symfony.com/doc/current/reference/constraints/Uuid.html

  -
    question: >
      What is the primary role of the `Symfony\Component\Validator\Context\ExecutionContextInterface` object within a custom validator?
    answers:
      -
        value: >
          To provide methods for building and adding validation violations to the list of errors.
        correct: true
      -
        value: >
          To manage the lifecycle of the validator service.
        correct: false
      -
        value: >
          To access environment variables and application configuration.
        correct: false
      -
        value: >
          To handle database transactions during validation.
        correct: false
    help: |
      The `ExecutionContextInterface` is crucial for custom validators as it allows them to interact with the validation process, specifically by reporting violations.
      https://symfony.com/doc/current/validation/custom_constraint.html#the-validator-logic

  -
    question: >
      Consider a `User` entity with a `password` property. If you want to ensure the password is not blank for the `registration` group and has a minimum length of 7 for the `strict` group, how would you define this using PHP attributes?
    answers:
      -
        value: >
          ```php
          #[Assert\NotBlank(groups: ['registration'])]
          #[Assert\Length(min: 7, groups: ['strict'])]
          private string $password;
          ```
        correct: true
      -
        value: >
          ```php
          #[Assert\NotBlank]
          #[Assert\Length(min: 7)]
          #[Assert\Group('registration', 'strict')]
          private string $password;
          ```
        correct: false
      -
        value: >
          ```php
          #[Assert\All([
              new Assert\NotBlank(groups: ['registration']),
              new Assert\Length(min: 7, groups: ['strict'])
          ])]
          private string $password;
          ```
        correct: false
      -
        value: >
          ```php
          #[Assert\When(expression: "in_array('registration', groups)", constraints: [new Assert\NotBlank()])]
          #[Assert\When(expression: "in_array('strict', groups)", constraints: [new Assert\Length(min: 7)])]
          private string $password;
          ```
        correct: false
    help: |
      The `groups` option can be applied directly to individual constraints to assign them to specific validation groups.
      https://symfony.com/doc/current/validation/groups.html#assigning-constraints-to-groups

  -
    question: >
      Which built-in Symfony constraint is used to validate that a string contains only alphanumeric characters?
    answers:
      -
        value: >
          `#[Assert\Regex(pattern: '/^[a-zA-Z0-9]+$/')]`
        correct: true
      -
        value: >
          `#[Assert\Alphanumeric]`
        correct: false
      -
        value: >
          `#[Assert\AlphaNum]`
        correct: false
      -
        value: >
          `#[Assert\Type('alnum')]`
        correct: false
    help: |
      There is no direct `Alphanumeric` constraint. You would typically use the `Regex` constraint with an appropriate pattern.
      https://symfony.com/doc/current/reference/constraints/Regex.html

  -
    question: >
      What is the purpose of the `otherwise` option in the `#[Assert\When]` constraint?
    answers:
      -
        value: >
          It defines a set of constraints to be applied if the `expression` evaluates to a falsey value.
        correct: true
      -
        value: >
          It defines a fallback error message if none of the primary constraints are violated.
        correct: false
      -
        value: >
          It specifies an alternative validation group to use if the primary one fails.
        correct: false
      -
        value: >
          It indicates that the constraint should only be applied if no other constraints are violated.
        correct: false
    help: |
      The `otherwise` option allows you to define alternative constraints that are applied when the `expression` evaluates to `false` or a falsey value.
      https://symfony.com/doc/current/reference/constraints/When.html#otherwise

  -
    question: >
      Which built-in Symfony constraint is used to validate that a value is a valid IP address (IPv4 or IPv6)?
    answers:
      -
        value: >
          `#[Assert\Ip]`
        correct: true
      -
        value: >
          `#[Assert\Ipv4]`
        correct: false
      -
        value: >
          `#[Assert\Ipv6]`
        correct: false
      -
        value: >
          `#[Assert\NetworkAddress]`
        correct: false
    help: |
      The `Ip` constraint validates whether a given string is a valid IPv4 or IPv6 address.
      https://symfony.com/doc/current/reference/constraints/Ip.html

  -
    question: >
      When implementing `GroupSequenceProviderInterface`, what should the `getGroupSequence()` method return?
    answers:
      -
        value: >
          An array of group names (e.g., `['Default', 'Strict']`) or a `Symfony\Component\Validator\Constraints\GroupSequence` object.
        correct: true
      -
        value: >
          A boolean indicating whether validation should proceed.
        correct: false
      -
        value: >
          A `ConstraintViolationListInterface` object.
        correct: false
      -
        value: >
          The name of the single group to be validated.
        correct: false
    help: |
      The `getGroupSequence()` method must return an array of group names, which can include nested arrays for more complex sequences, or a `GroupSequence` object.
      https://symfony.com/doc/current/validation/sequence_provider.html#group-sequence-provider

  -
    question: >
      Which built-in Symfony constraint is used to validate that a value is a valid date and time string?
    answers:
      -
        value: >
          `#[Assert\DateTime]`
        correct: true
      -
        value: >
          `#[Assert\Date]`
        correct: false
      -
        value: >
          `#[Assert\Time]`
        correct: false
      -
        value: >
          `#[Assert\Timestamp]`
        correct: false
    help: |
      The `DateTime` constraint validates that a string represents a valid date and time.
      https://symfony.com/doc/current/reference/constraints/DateTime.html

  -
    question: >
      What is the purpose of the `payload` argument in the `validate()` method of a custom constraint validator?
    answers:
      -
        value: >
          It allows passing arbitrary custom data to the validator, which can be used for specific validation logic or error handling.
        correct: true
      -
        value: >
          It contains the raw HTTP request body for validation.
        correct: false
      -
        value: >
          It is reserved for internal Symfony use and should not be accessed.
        correct: false
      -
        value: >
          It provides access to the current user's security context.
        correct: false
    help: |
      The `payload` option (and corresponding argument in `validate()`) allows you to attach arbitrary data to a violation, which can be useful for custom error handling or debugging.
      https://symfony.com/doc/current/validation/custom_constraint.html#payload

  -
    question: >
      Which built-in Symfony constraint is used to validate that a value is a valid country code (ISO 3166-1 alpha-2)?
    answers:
      -
        value: >
          `#[Assert\Country]`
        correct: true
      -
        value: >
          `#[Assert\Locale]`
        correct: false
      -
        value: >
          `#[Assert\Region]`
        correct: false
      -
        value: >
          `#[Assert\IsoCountry]`
        correct: false
    help: |
      The `Country` constraint validates if a string is a valid ISO 3166-1 alpha-2 country code.
      https://symfony.com/doc/current/reference/constraints/Country.html

  -
    question: >
      When defining validation constraints in YAML, how do you specify a constraint that has no options (e.g., `NotBlank`)?
    answers:
      -
        value: >
          `NotBlank: ~`
        correct: true
      -
        value: >
          `NotBlank: {}`
        correct: true
      -
        value: >
          `NotBlank:`
        correct: false
      -
        value: >
          `NotBlank: null`
        correct: false
    help: |
      In YAML, `~` (or `null`) and `{}` are used to represent an empty mapping, which is how constraints with no options are defined.
      https://symfony.com/doc/current/validation/file_based_validation.html#yaml

  -
    question: >
      Which built-in Symfony constraint is used to validate that a value is a valid language code (ISO 639-1 alpha-2)?
    answers:
      -
        value: >
          `#[Assert\Language]`
        correct: true
      -
        value: >
          `#[Assert\Locale]`
        correct: false
      -
        value: >
          `#[Assert\IsoLanguage]`
        correct: false
      -
        value: >
          `#[Assert\LangCode]`
        correct: false
    help: |
      The `Language` constraint validates if a string is a valid ISO 639-1 alpha-2 language code.
      https://symfony.com/doc/current/reference/constraints/Language.html

  -
    question: >
      What is the purpose of the `message` option in most built-in Symfony validation constraints?
    answers:
      -
        value: >
          To define the custom error message that will be displayed if the constraint is violated.
        correct: true
      -
        value: >
          To provide a default value for the validated property.
        correct: false
      -
        value: >
          To specify the translation key for the error message.
        correct: false
      -
        value: >
          To indicate the severity level of the validation error.
        correct: false
    help: |
      The `message` option allows you to customize the error message displayed to the user when a constraint is violated.
      https://symfony.com/doc/current/validation.html#error-messages

  -
    question: >
      Which built-in Symfony constraint is used to validate that a value is a valid currency code (ISO 4217)?
    answers:
      -
        value: >
          `#[Assert\Currency]`
        correct: true
      -
        value: >
          `#[Assert\Money]`
        correct: false
      -
        value: >
          `#[Assert\IsoCurrency]`
        correct: false
      -
        value: >
          `#[Assert\FinancialCode]`
        correct: false
    help: |
      The `Currency` constraint validates if a string is a valid ISO 4217 currency code.
      https://symfony.com/doc/current/reference/constraints/Currency.html

  -
    question: >
      How can you apply a `Callback` constraint to a specific property (e.g., `firstName`) using the `loadValidatorMetadata` static method?
    answers:
      -
        value: >
          `$metadata->addPropertyConstraint('firstName', new Assert\Callback('methodName'));`
        correct: true
      -
        value: >
          `$metadata->addConstraint(new Assert\Callback('methodName'), 'firstName');`
        correct: false
      -
        value: >
          `$metadata->addGetterConstraint('firstName', new Assert\Callback('methodName'));`
        correct: false
      -
        value: >
          `$metadata->addPropertyCallback('firstName', 'methodName');`
        correct: false
    help: |
      The `addPropertyConstraint()` method is used to apply constraints to properties, including `Callback` constraints that refer to a method.
      https://symfony.com/doc/current/components/validator/metadata.html#property-level-callback-constraints

  -
    question: >
      Which built-in Symfony constraint is used to validate that a value is a valid locale code (e.g., `en_US`, `fr_FR`)?
    answers:
      -
        value: >
          `#[Assert\Locale]`
        correct: true
      -
        value: >
          `#[Assert\LanguageCountry]`
        correct: false
      -
        value: >
          `#[Assert\Culture]`
        correct: false
      -
        value: >
          `#[Assert\RegionLocale]`
        correct: false
    help: |
      The `Locale` constraint validates if a string is a valid locale code.
      https://symfony.com/doc/current/reference/constraints/Locale.html

  -
    question: >
      What is the primary difference between `#[Assert\NotNull]` and `#[Assert\NotBlank]`?
    answers:
      -
        value: >
          `NotNull` checks if a value is not `null`, while `NotBlank` checks if a string is not empty and contains non-whitespace characters.
        correct: true
      -
        value: >
          `NotNull` applies to all data types, while `NotBlank` only applies to strings.
        correct: false
      -
        value: >
          `NotNull` allows empty strings, while `NotBlank` does not.
        correct: false
      -
        value: >
          `NotNull` is for database fields, `NotBlank` is for form fields.
        correct: false
    help: |
      `NotNull` only ensures the value is not `null`. `NotBlank` is more specific for strings, ensuring they have content beyond just whitespace.
      https://symfony.com/doc/current/reference/constraints/NotNull.html
      https://symfony.com/doc/current/reference/constraints/NotBlank.html

  -
    question: >
      Which built-in Symfony constraint is used to validate that a value is a valid credit card number?
    answers:
      -
        value: >
          `#[Assert\CardScheme]`
        correct: true
      -
        value: >
          `#[Assert\CreditCard]`
        correct: false
      -
        value: >
          `#[Assert\Luhn]`
        correct: false
      -
        value: >
          `#[Assert\PaymentCard]`
        correct: false
    help: |
      The `CardScheme` constraint validates a credit card number against specific card schemes (e.g., Visa, Mastercard).
      https://symfony.com/doc/current/reference/constraints/CardScheme.html

  -
    question: >
      What is the purpose of the `allowNull` option in some Symfony validation constraints (e.g., `Length`)?
    answers:
      -
        value: >
          If set to `true`, the constraint will pass validation if the value is `null`, otherwise it will be considered a violation.
        correct: true
      -
        value: >
          It allows the database column to be nullable.
        correct: false
      -
        value: >
          It makes the constraint optional.
        correct: false
      -
        value: >
          It specifies that `null` is a valid choice for the constraint.
        correct: false
    help: |
      Many constraints, by default, consider `null` values valid. The `allowNull` option explicitly controls this behavior for constraints that might otherwise treat `null` as a violation.
      https://symfony.com/doc/current/reference/constraints/Length.html#min (Note about null values)

  -
    question: >
      Which built-in Symfony constraint is used to validate that a value is a valid ISBN (International Standard Book Number)?
    answers:
      -
        value: >
          `#[Assert\Isbn]`
        correct: true
      -
        value: >
          `#[Assert\BookId]`
        correct: false
      -
        value: >
          `#[Assert\Isbn10]`
        correct: false
      -
        value: >
          `#[Assert\Isbn13]`
        correct: false
    help: |
      The `Isbn` constraint validates if a string is a valid ISBN-10 or ISBN-13.
      https://symfony.com/doc/current/reference/constraints/Isbn.html

  -
    question: >
      When using the `debug:validator` command, what is the output format for showing constraints?
    answers:
      -
        value: >
          A hierarchical list showing properties, methods, and their associated constraints and options.
        correct: true
      -
        value: >
          A JSON array of all validation rules.
        correct: false
      -
        value: >
          A simple count of total constraints found.
        correct: false
      -
        value: >
          A graphical representation of the validation flow.
        correct: false
    help: |
      The `debug:validator` command provides a clear, hierarchical text output detailing all constraints applied to a class.
      https://symfony.com/doc/current/validation.html#debugging-validation

  -
    question: >
      Which built-in Symfony constraint is used to validate that a value is a valid EAN (European Article Number) or UPC (Universal Product Code)?
    answers:
      -
        value: >
          `#[Assert\Isbn]`
        correct: false
      -
        value: >
          `#[Assert\Ean]`
        correct: true
      -
        value: >
          `#[Assert\ProductCode]`
        correct: false
      -
        value: >
          `#[Assert\Upc]`
        correct: false
    help: |
      The `Ean` constraint validates if a string is a valid EAN-8, EAN-13, or UPC-A.
      https://symfony.com/doc/current/reference/constraints/Ean.html

  -
    question: >
      What is the purpose of the `groups` option when defining a constraint (e.g., `#[Assert\NotBlank(groups: ['registration'])]`)?
    answers:
      -
        value: >
          To assign the constraint to one or more specific validation groups, allowing it to be validated conditionally.
        correct: true
      -
        value: >
          To define a collection of values that the constraint should apply to.
        correct: false
      -
        value: >
          To specify a group of related properties that must all pass validation together.
        correct: false
      -
        value: >
          To set the default validation group for the entire class.
        correct: false
    help: |
      The `groups` option allows you to explicitly assign a constraint to one or more validation groups, enabling selective validation.
      https://symfony.com/doc/current/validation/groups.html#assigning-constraints-to-groups

  -
    question: >
      Which built-in Symfony constraint is used to validate that a value is a valid BIC (Bank Identifier Code) or SWIFT code?
    answers:
      -
        value: >
          `#[Assert\Bic]`
        correct: true
      -
        value: >
          `#[Assert\Swift]`
        correct: false
      -
        value: >
          `#[Assert\BankCode]`
        correct: false
      -
        value: >
          `#[Assert\FinancialIdentifier]`
        correct: false
    help: |
      The `Bic` constraint validates if a string is a valid BIC/SWIFT code.
      https://symfony.com/doc/current/reference/constraints/Bic.html

  -
    question: >
      What is the significance of the `Default` validation group in Symfony?
    answers:
      -
        value: >
          It is the group that is automatically validated if no specific groups are provided when calling the validator.
        correct: true
      -
        value: >
          It contains all constraints defined for a class.
        correct: false
      -
        value: >
          It is a special group that cannot be overridden.
        correct: false
      -
        value: >
          It is only used for form validation, not direct object validation.
        correct: false
    help: |
      Constraints that do not explicitly belong to any other group are automatically part of the `Default` group, which is validated by default.
      https://symfony.com/doc/current/validation/groups.html#validation-groups

  -
    question: >
      Which built-in Symfony constraint is used to validate that a value is a valid IBAN (International Bank Account Number)?
    answers:
      -
        value: >
          `#[Assert\Iban]`
        correct: true
      -
        value: >
          `#[Assert\BankAccount]`
        correct: false
      -
        value: >
          `#[Assert\BankNumber]`
        correct: false
      -
        value: >
          `#[Assert\FinancialAccount]`
        correct: false
    help: |
      The `Iban` constraint validates if a string is a valid IBAN.
      https://symfony.com/doc/current/reference/constraints/Iban.html

  -
    question: >
      How can you configure a sequential validation flow for a `User` entity where `Default` constraints are checked first, and only if they pass, then constraints in the `Strict` group are checked?
    answers:
      -
        value: >
          By applying `#[Assert\GroupSequence(['Default', 'Strict'])]` to the `User` class.
        correct: true
      -
        value: >
          By calling `$validator->validate($user, null, new GroupSequence(['Default', 'Strict']));`
        correct: false
      -
        value: >
          By implementing `GroupSequenceProviderInterface` and returning `['Default', 'Strict']` from `getGroupSequence()`.
        correct: true
      -
        value: >
          By defining the groups in `validation.yaml` under a `group_sequence` key for the `User` class.
        correct: true
    help: |
      Sequential validation can be configured via `#[Assert\GroupSequence]` attribute, `GroupSequenceProviderInterface`, or YAML/XML configuration under `group_sequence`.
      https://symfony.com/doc/current/validation/sequence_provider.html

  -
    question: >
      Which built-in Symfony constraint is used to validate that a value is a valid JSON string?
    answers:
      -
        value: >
          `#[Assert\Json]`
        correct: true
      -
        value: >
          `#[Assert\IsJson]`
        correct: false
      -
        value: >
          `#[Assert\JsonString]`
        correct: false
      -
        value: >
          `#[Assert\ValidJson]`
        correct: false
    help: |
      The `Json` constraint validates if a string is a valid JSON string.
      https://symfony.com/doc/current/reference/constraints/Json.html

  -
    question: >
      What is the main advantage of using `Symfony\Component\Validator\GroupSequenceProviderInterface` over a static `#[Assert\GroupSequence]` attribute?
    answers:
      -
        value: >
          It allows for dynamically determining the group sequence based on the object's runtime state or properties.
        correct: true
      -
        value: >
          It provides better performance for complex group sequences.
        correct: false
      -
        value: >
          It simplifies the configuration for very basic group sequences.
        correct: false
      -
        value: >
          It enables the use of nested group sequences, which are not possible with attributes.
        correct: false
    help: |
      `GroupSequenceProviderInterface` is designed for scenarios where the validation group sequence needs to change based on the data of the object being validated.
      https://symfony.com/doc/current/validation/sequence_provider.html#group-sequence-provider

  -
    question: >
      Which built-in Symfony constraint is used to validate that a value is a valid file path or URL that points to an existing file or directory?
    answers:
      -
        value: >
          `#[Assert\File]`
        correct: false
      -
        value: >
          `#[Assert\Exists]`
        correct: false
      -
        value: >
          `#[Assert\Path]`
        correct: true
      -
        value: >
          `#[Assert\Resource]`
        correct: false
    help: |
      The `Path` constraint checks if a given path (file or URL) exists.
      https://symfony.com/doc/current/reference/constraints/Path.html

  -
    question: >
      When integrating the Symfony Validator component with the Form component, what is the purpose of adding `ValidatorExtension` to the `FormFactoryBuilder`?
    answers:
      -
        value: >
          To automatically apply validation constraints defined on the underlying data object when the form is submitted.
        correct: true
      -
        value: >
          To enable client-side JavaScript validation for forms.
        correct: false
      -
        value: >
          To allow custom form types to define their own validation logic.
        correct: false
      -
        value: >
          To ensure that form data is correctly mapped to the entity properties.
        correct: false
    help: |
      The `ValidatorExtension` bridges the Form and Validator components, enabling automatic validation of form data against the constraints of the mapped object.
      https://symfony.com/doc/current/components/form.html#integrating-with-the-validator

  -
    question: >
      Which built-in Symfony constraint is used to validate that a value is a valid phone number?
    answers:
      -
        value: >
          `#[Assert\PhoneNumber]`
        correct: true
      -
        value: >
          `#[Assert\Tel]`
        correct: false
      -
        value: >
          `#[Assert\Phone]`
        correct: false
      -
        value: >
          `#[Assert\Mobile]`
        correct: false
    help: |
      The `PhoneNumber` constraint validates if a string is a valid phone number, often with region-specific validation.
      https://symfony.com/doc/current/reference/constraints/PhoneNumber.html

  -
    question: >
      What is the purpose of the `groups` option when applied directly to the `#[Assert\Valid]` constraint itself (e.g., `#[Assert\Valid(groups: ['api'])]`)?
    answers:
      -
        value: >
          It restricts the validation of the nested object to only occur when the `api` group is being validated on the parent object.
        correct: true
      -
        value: >
          It specifies that the nested object's `api` group constraints should be validated, regardless of the parent's groups.
        correct: false
      -
        value: >
          It defines a new validation group named `api` for the nested object.
        correct: false
      -
        value: >
          It means the nested object will only be validated if the `api` group is NOT active.
        correct: false
    help: |
      Setting the `groups` option on `#[Assert\Valid]` itself controls when the nested object's validation is triggered, based on the active groups of the parent object.
      https://symfony.com/doc/current/reference/constraints/Valid.html#validation-groups

  -
    question: >
      Which built-in Symfony constraint is used to validate that a value is a valid time string (e.g., `14:30:00`)?
    answers:
      -
        value: >
          `#[Assert\Time]`
        correct: true
      -
        value: >
          `#[Assert\DateTime]`
        correct: false
      -
        value: >
          `#[Assert\HourMinute]`
        correct: false
      -
        value: >
          `#[Assert\ClockTime]`
        correct: false
    help: |
      The `Time` constraint validates that a string represents a valid time.
      https://symfony.com/doc/current/reference/constraints/Time.html

  -
    question: >
      When defining a custom validation constraint, what is the purpose of the `getTargets()` method in the constraint class?
    answers:
      -
        value: >
          It defines where the constraint can be applied (e.g., `Constraint::PROPERTY_CONSTRAINT`, `Constraint::CLASS_CONSTRAINT`).
        correct: true
      -
        value: >
          It specifies the target object for validation.
        correct: false
      -
        value: >
          It returns a list of properties that the constraint applies to.
        correct: false
      -
        value: >
          It indicates the target audience for the error message.
        correct: false
    help: |
      The `getTargets()` method tells Symfony whether the constraint can be applied to properties, classes, or both.
      https://symfony.com/doc/current/validation/custom_constraint.html#creating-the-constraint

  -
    question: >
      Which built-in Symfony constraint is used to validate that a value is a valid date string (e.g., `YYYY-MM-DD`)?
    answers:
      -
        value: >
          `#[Assert\Date]`
        correct: true
      -
        value: >
          `#[Assert\DateTime]`
        correct: false
      -
        value: >
          `#[Assert\CalendarDate]`
        correct: false
      -
        value: >
          `#[Assert\DayMonthYear]`
        correct: false
    help: |
      The `Date` constraint validates that a string represents a valid date.
      https://symfony.com/doc/current/reference/constraints/Date.html

  -
    question: >
      What is the role of `Symfony\Component\Validator\Validation::createCallable()` and `Validation::createIsValidCallable()`?
    answers:
      -
        value: >
          They return closures that can be used as validators for console questions or `OptionsResolver` options.
        correct: true
      -
        value: >
          They create new instances of the `ValidatorInterface`.
        correct: false
      -
        value: >
          They are used for creating custom validation constraints.
        correct: false
      -
        value: >
          They provide a way to mock the validator in tests.
        correct: false
    help: |
      These methods are utility functions to create callable validators, useful for integrating Symfony's validation with other components like Console's `QuestionHelper` or `OptionsResolver`.
      https://symfony.com/doc/current/components/validator.html#validating-values-in-console-commands
      https://symfony.com/doc/current/components/options_resolver.html#validation

  -
    question: >
      Which built-in Symfony constraint is used to validate that a value is a valid file upload (e.g., checking size, MIME type, etc.)?
    answers:
      -
        value: >
          `#[Assert\File]`
        correct: true
      -
        value: >
          `#[Assert\UploadedFile]`
        correct: false
      -
        value: >
          `#[Assert\Image]`
        correct: false
      -
        value: >
          `#[Assert\MediaFile]`
        correct: false
    help: |
      The `File` constraint provides various options for validating uploaded files, including size, MIME type, and upload errors.
      https://symfony.com/doc/current/reference/constraints/File.html

  -
    question: >
      What is the purpose of the `payload` option when defining a constraint (e.g., `#[Assert\NotBlank(payload: ['errorCode' => 101])]`)?
    answers:
      -
        value: >
          To attach arbitrary custom data to the generated validation violation, which can be retrieved later for specific error handling.
        correct: true
      -
        value: >
          To specify the data that the constraint will validate against.
        correct: false
      -
        value: >
          To define a custom error template for the violation.
        correct: false
      -
        value: >
          To pass arguments to the constraint's constructor.
        correct: false
    help: |
      The `payload` option allows you to embed custom data directly into a `ConstraintViolation`, which can be useful for advanced error handling logic.
      https://symfony.com/doc/current/validation/custom_constraint.html#payload

  -
    question: >
      Which built-in Symfony constraint is used to validate that a value is a valid image file (e.g., checking dimensions, aspect ratio, etc.)?
    answers:
      -
        value: >
          `#[Assert\Image]`
        correct: true
      -
        value: >
          `#[Assert\File]`
        correct: false
      -
        value: >
          `#[Assert\Picture]`
        correct: false
      -
        value: >
          `#[Assert\Photo]`
        correct: false
    help: |
      The `Image` constraint extends `File` and adds specific options for validating image properties like dimensions and aspect ratio.
      https://symfony.com/doc/current/reference/constraints/Image.html

  -
    question: >
      What is the role of the `Symfony\Component\Validator\ConstraintViolationListInterface` object returned by the validator?
    answers:
      -
        value: >
          It is a collection of `ConstraintViolation` objects, each representing a single validation error.
        correct: true
      -
        value: >
          It contains the validated data after all constraints have been applied.
        correct: false
      -
        value: >
          It provides methods to re-run validation with different groups.
        correct: false
      -
        value: >
          It is a simple boolean indicating overall validation success or failure.
        correct: false
    help: |
      The `ConstraintViolationListInterface` acts as a container for all validation errors found during the validation process.
      https://symfony.com/doc/current/validation.html#handling-validation-errors

  -
    question: >
      Which built-in Symfony constraint is used to validate that a value is a valid HTML color (e.g., `#RRGGBB`, `red`)?
    answers:
      -
        value: >
          `#[Assert\CssColor]`
        correct: true
      -
        value: >
          `#[Assert\HtmlColor]`
        correct: false
      -
        value: >
          `#[Assert\WebColor]`
        correct: false
      -
        value: >
          `#[Assert\ColorCode]`
        correct: false
    help: |
      The `CssColor` constraint validates common CSS color formats, which include HTML color names and hexadecimal codes.
      https://symfony.com/doc/current/reference/constraints/CssColor.html

  -
    question: >
      What is the purpose of the `groups` option when defining a `GroupSequence` (e.g., `new GroupSequence(['Default', 'Strict'])`)?
    answers:
      -
        value: >
          It defines the ordered list of validation groups that will be processed sequentially.
        correct: true
      -
        value: >
          It specifies which groups are allowed to be part of the sequence.
        correct: false
      -
        value: >
          It assigns the `GroupSequence` itself to a higher-level validation group.
        correct: false
      -
        value: >
          It filters the constraints within each group before validation.
        correct: false
    help: |
      The constructor of `GroupSequence` takes an array of group names, defining the order in which they will be validated.
      https://symfony.com/doc/current/validation/sequence_provider.html#group-sequence

  -
    question: >
      Which built-in Symfony constraint is used to validate that a value is a valid timezone identifier (e.g., `America/New_York`)?
    answers:
      -
        value: >
          `#[Assert\Timezone]`
        correct: true
      -
        value: >
          `#[Assert\DateTimezone]`
        correct: false
      -
        value: >
          `#[Assert\Zone]`
        correct: false
      -
        value: >
          `#[Assert\GeographicTimezone]`
        correct: false
    help: |
      The `Timezone` constraint validates if a string is a valid timezone identifier.
      https://symfony.com/doc/current/reference/constraints/Timezone.html

  -
    question: >
      When should you use a custom callback validator instead of a built-in constraint or a custom constraint with its own validator class?
    answers:
      -
        value: >
          When the validation logic is complex, involves multiple properties, or requires access to the entire object and the validation context.
        correct: true
      -
        value: >
          When the validation logic is very simple and can be expressed with a single regular expression.
        correct: false
      -
        value: >
          When you need to reuse the same validation logic across many different projects.
        correct: false
      -
        value: >
          When you want to define a new type of constraint that doesn't fit any existing built-in ones.
        correct: false
    help: |
      Callback validators are ideal for complex, object-level validation rules that depend on the interplay of multiple properties or require direct access to the `ExecutionContextInterface`.
      https://symfony.com/doc/current/validation/custom_constraint.html#callback-constraint

  -
    question: >
      Which built-in Symfony constraint is used to validate that a value is a valid range of IP addresses (CIDR notation)?
    answers:
      -
        value: >
          `#[Assert\Ip(cidr: true)]`
        correct: true
      -
        value: >
          `#[Assert\Cidr]`
        correct: false
      -
        value: >
          `#[Assert\IpRange]`
        correct: false
      -
        value: >
          `#[Assert\Network]`
        correct: false
    help: |
      The `Ip` constraint has a `cidr` option to validate CIDR notation for IP address ranges.
      https://symfony.com/doc/current/reference/constraints/Ip.html#cidr

  -
    question: >
      What is the primary role of the `Symfony\Component\Validator\ConstraintViolation` object?
    answers:
      -
        value: >
          It represents a single validation error, containing details like the error message, invalid value, and property path.
        correct: true
      -
        value: >
          It is the main object that performs the validation logic.
        correct: false
      -
        value: >
          It defines the rules for a specific constraint.
        correct: false
      -
        value: >
          It is a service that manages all validation constraints.
        correct: false
    help: |
      Each `ConstraintViolation` object encapsulates the details of a single validation failure.
      https://symfony.com/doc/current/validation.html#handling-validation-errors

  -
    question: >
      Which built-in Symfony constraint is used to validate that a value is a valid length for a credit card verification number (CVV/CVC)?
    answers:
      -
        value: >
          `#[Assert\Luhn]`
        correct: false
      -
        value: >
          `#[Assert\CardScheme]`
        correct: false
      -
        value: >
          `#[Assert\Length(min: 3, max: 4)]`
        correct: true
      -
        value: >
          `#[Assert\Cvv]`
        correct: false
    help: |
      While there isn't a dedicated `Cvv` constraint, the `Length` constraint is commonly used to validate the typical 3 or 4 digit length of a CVV/CVC.
      https://symfony.com/doc/current/reference/constraints/Length.html

  -
    question: >
      How can you retrieve the invalid value from a `ConstraintViolation` object?
    answers:
      -
        value: >
          `$violation->getInvalidValue()`
        correct: true
      -
        value: >
          `$violation->getValue()`
        correct: false
      -
        value: >
          `$violation->getViolatedValue()`
        correct: false
      -
        value: >
          `$violation->getData()`
        correct: false
    help: |
      The `getInvalidValue()` method of a `ConstraintViolation` object returns the value that failed validation.
      https://symfony.com/doc/current/validation.html#handling-validation-errors

  -
    question: >
      Which built-in Symfony constraint is used to validate that a value is a valid expression (e.g., a mathematical expression or a Symfony ExpressionLanguage expression)?
    answers:
      -
        value: >
          `#[Assert\Expression]`
        correct: true
      -
        value: >
          `#[Assert\Eval]`
        correct: false
      -
        value: >
          `#[Assert\Formula]`
        correct: false
      -
        value: >
          `#[Assert\Syntax]`
        correct: false
    help: |
      The `Expression` constraint allows you to define a custom validation rule using the Symfony ExpressionLanguage.
      https://symfony.com/doc/current/reference/constraints/Expression.html

  -
    question: >
      What is the purpose of the `message` option in the `#[Assert\Regex]` constraint?
    answers:
      -
        value: >
          To define the error message displayed if the value does not match the specified regular expression pattern.
        correct: true
      -
        value: >
          To specify the regular expression pattern itself.
        correct: false
      -
        value: >
          To provide a default value if the pattern is not matched.
        correct: false
      -
        value: >
          To indicate the type of regular expression engine to use.
        correct: false
    help: |
      The `message` option allows you to customize the error message for the `Regex` constraint.
      https://symfony.com/doc/current/reference/constraints/Regex.html#message

  -
    question: >
      Which built-in Symfony constraint is used to validate that a value is a valid HTML string (e.g., checking for balanced tags, allowed elements)?
    answers:
      -
        value: >
          `#[Assert\Html]`
        correct: true
      -
        value: >
          `#[Assert\Markup]`
        correct: false
      -
        value: >
          `#[Assert\Dom]`
        correct: false
      -
        value: >
          `#[Assert\Xml]`
        correct: false
    help: |
      The `Html` constraint validates that a string contains valid HTML, optionally allowing specific tags or attributes.
      https://symfony.com/doc/current/reference/constraints/Html.html

  -
    question: >
      How can you retrieve the property path (e.g., `address.street`) from a `ConstraintViolation` object?
    answers:
      -
        value: >
          `$violation->getPropertyPath()`
        correct: true
      -
        value: >
          `$violation->getPath()`
        correct: false
      -
        value: >
          `$violation->getField()`
        correct: false
      -
        value: >
          `$violation->getElement()`
        correct: false
    help: |
      The `getPropertyPath()` method of a `ConstraintViolation` object returns the path to the property that caused the violation.
      https://symfony.com/doc/current/validation.html#handling-validation-errors

  -
    question: >
      Which built-in Symfony constraint is used to validate that a value is a valid XML string?
    answers:
      -
        value: >
          `#[Assert\Xml]`
        correct: true
      -
        value: >
          `#[Assert\Html]`
        correct: false
      -
        value: >
          `#[Assert\Markup]`
        correct: false
      -
        value: >
          `#[Assert\Dom]`
        correct: false
    help: |
      The `Xml` constraint validates if a string contains valid XML.
      https://symfony.com/doc/current/reference/constraints/Xml.html

  -
    question: >
      What is the purpose of the `match` option in the `#[Assert\Regex]` constraint when set to `false`?
    answers:
      -
        value: >
          Validation passes only if the given string does NOT match the specified pattern.
        correct: true
      -
        value: >
          Validation passes if the string partially matches the pattern.
        correct: false
      -
        value: >
          The pattern is treated as a literal string, not a regular expression.
        correct: false
      -
        value: >
          It disables the regex validation for the property.
        correct: false
    help: |
      When `match` is `false`, the `Regex` constraint's logic is inverted, meaning the value is valid if it does *not* match the pattern.
      https://symfony.com/doc/current/reference/constraints/Regex.html#match

  -
    question: >
      Which built-in Symfony constraint is used to validate that a value is a valid hostname?
    answers:
      -
        value: >
          `#[Assert\Hostname]`
        correct: true
      -
        value: >
          `#[Assert\Domain]`
        correct: false
      -
        value: >
          `#[Assert\Dns]`
        correct: false
      -
        value: >
          `#[Assert\NetworkName]`
        correct: false
    help: |
      The `Hostname` constraint validates if a string is a valid hostname.
      https://symfony.com/doc/current/reference/constraints/Hostname.html