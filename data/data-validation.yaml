category: Data Validation

questions:
  -
    question: >
      Which Symfony component is primarily responsible for validating data against a set of rules?
    answers:
      - { value: "Symfony\\Component\\Validator", correct: true }
      - { value: "Symfony\\Component\\Form", correct: false }
      - { value: "Symfony\\Component\\HttpFoundation", correct: false }
      - { value: "Symfony\\Component\\Config", correct: false }
    help: |
      The Symfony Validation component provides tools and constraints for validating data.
      https://symfony.com/doc/current/validation.html

  -
    question: |
      How do you typically install the Symfony Validator component in a Symfony application?
    answers:
      - { value: "$ composer require symfony/validator", correct: true }
      - { value: "$ bin/console symfony:install validator", correct: false }
      - { value: "$ composer install symfony/validator-bundle", correct: false }
      - { value: "$ php bin/console make:validator", correct: false }
    help: |
      The Symfony Validator component is installed via Composer.
      https://symfony.com/doc/current/validation.html#installation

  -
    question: >
      What is the purpose of the `ValidatorInterface` in Symfony's Validation component?
    answers:
      - { value: "It defines the contract for validating values or objects against constraints.", correct: true }
      - { value: "It provides methods for creating custom validation constraints.", correct: false }
      - { value: "It's used to configure validation groups dynamically.", correct: false }
      - { value: "It's an interface for handling validation errors in forms.", correct: false }
    help: |
      The `ValidatorInterface` is the main entry point for performing validation in Symfony.
      https://symfony.com/doc/current/validation.html#the-validator-service

  -
    question: |
      Given the following PHP code, how would you validate an `$author` object using the `ValidatorInterface`?

      ```php
      use App\Entity\Author;
      use Symfony\Component\Validator\Validator\ValidatorInterface;

      // ...
      public function someAction(ValidatorInterface $validator): Response
      {
          $author = new Author();
          // ... populate $author ...
          // ???
      }
      ```
    answers:
      - { value: "$errors = $validator->validate($author);", correct: true }
      - { value: "$errors = $validator->validateObject($author);", correct: false }
      - { value: "$errors = $author->validate();", correct: false }
      - { value: "$errors = $validator->check($author);", correct: false }
    help: |
      The `validate()` method of the `ValidatorInterface` is used to validate an object.
      https://symfony.com/doc/current/validation.html#validating-objects

  -
    question: >
      Which of the following is a correct way to define a `NotBlank` constraint for a `name` property using PHP attributes?
    answers:
      - { value: "#[Assert\\NotBlank]\nprivate string $name;", correct: true }
      - { value: "@NotBlank\nprivate string $name;", correct: false }
      - { value: "/** @Assert\\NotBlank */\nprivate string $name;", correct: false }
      - { value: "private string $name #[NotBlank];", correct: false }
    help: |
      PHP attributes are the recommended way to define constraints directly in the class.
      https://symfony.com/doc/current/validation.html#validation-basics-php-attributes

  -
    question: |
      In Symfony, what is the purpose of the `#[Assert\Valid]` attribute when applied to a property?
    answers:
      - { value: "To ensure that the nested object (or collection of objects) is also validated.", correct: true }
      - { value: "To mark the property as valid without any further checks.", correct: false }
      - { value: "To apply a default set of constraints to the property.", correct: false }
      - { value: "To make the property optional during validation.", correct: false }
    help: |
      The `Valid` constraint is used for validating nested objects or collections of objects.
      https://symfony.com/doc/current/reference/constraints/Valid.html

  -
    question: >
      What is the default behavior of the `#[Assert\Valid]` constraint regarding validation groups?
    answers:
      - { value: "It always applies, even if you specify a group when calling the validator.", correct: true }
      - { value: "It only applies if the 'Default' group is explicitly validated.", correct: false }
      - { value: "It applies only when no other groups are specified.", correct: false }
      - { value: "It inherits the validation groups from the parent object.", correct: false }
    help: |
      Unlike other constraints, `Valid` does not use the `Default` group and is always applied by default.
      https://symfony.com/doc/current/reference/constraints/Valid.html#valid-constraint

  -
    question: >
      Which method is used in a custom constraint validator to add a validation violation?
    answers:
      - { value: "$this->context->buildViolation(...)->addViolation();", correct: true }
      - { value: "$this->addViolation(...);", correct: false }
      - { value: "$this->context->addError(...);", correct: false }
      - { value: "$this->violationBuilder->add(...);", correct: false }
    help: |
      The `buildViolation()` method of the `ExecutionContextInterface` (accessed via `$this->context`) is used to create and add violations.
      https://symfony.com/doc/current/validation/custom_constraint.html#the-validator

  -
    question: >
      When implementing a custom constraint validator, what should you do if the `validate()` method receives a value of an unexpected type?
    answers:
      - { value: "Throw a `Symfony\\Component\\Validator\\Exception\\UnexpectedValueException`.", correct: true }
      - { value: "Return `false` to indicate an invalid value.", correct: false }
      - { value: "Log an error and continue validation.", correct: false }
      - { value: "Silently ignore the value.", correct: false }
    help: |
      It's good practice to throw an `UnexpectedValueException` if the validator cannot handle the passed type.
      https://symfony.com/doc/current/validation/custom_constraint.html#the-validator

  -
    question: >
      What is the primary benefit of using validation groups in Symfony?
    answers:
      - { value: "To apply different sets of validation constraints based on the context (e.g., registration vs. profile update).", correct: true }
      - { value: "To group related constraints for better organization.", correct: false }
      - { value: "To define the order in which constraints are executed.", correct: false }
      - { value: "To translate validation messages into different languages.", correct: false }
    help: |
      Validation groups allow you to validate an object against a subset of its constraints.
      https://symfony.com/doc/current/validation/groups.html

  -
    question: |
      How can you specify validation groups when calling the validator service directly?
    answers:
      - { value: "$validator->validate($object, null, ['groupName']);", correct: true }
      - { value: "$validator->validate($object)->forGroups(['groupName']);", correct: false }
      - { value: "$validator->validate($object, groups: ['groupName']);", correct: false }
      - { value: "$validator->validate($object, 'groupName');", correct: false }
    help: |
      The third argument to the `validate()` method is used to specify validation groups.
      https://symfony.com/doc/current/validation/groups.html#validating-objects-with-groups

  -
    question: >
      What is a "group sequence" in Symfony validation?
    answers:
      - { value: "A defined order in which validation groups are applied, stopping on the first violation in a group.", correct: true }
      - { value: "A collection of validation groups that are always executed together.", correct: false }
      - { value: "A mechanism to dynamically add or remove groups during validation.", correct: false }
      - { value: "A way to define nested validation groups.", correct: false }
    help: |
      A group sequence allows you to define an ordered list of groups, where validation proceeds to the next group only if the previous one has no violations.
      https://symfony.com/doc/current/validation/sequence_provider.html

  -
    question: |
      Which attribute is used to define a group sequence directly on a class?
    answers:
      - { value: "#[Assert\\GroupSequence(['GroupA', 'GroupB'])]", correct: true }
      - { value: "#[Assert\\ValidationSequence(['GroupA', 'GroupB'])]", correct: false }
      - { value: "#[GroupSequence(['GroupA', 'GroupB'])]", correct: false }
      - { value: "#[Assert\\Sequence(['GroupA', 'GroupB'])]", correct: false }
    help: |
      The `#[Assert\GroupSequence]` attribute is used for this purpose.
      https://symfony.com/doc/current/validation/sequence_provider.html#configuring-a-group-sequence

  -
    question: >
      What is the purpose of the `GroupSequenceProviderInterface`?
    answers:
      - { value: "To dynamically determine the validation group sequence based on the object's state.", correct: true }
      - { value: "To provide a list of all available validation groups in the application.", correct: false }
      - { value: "To define a global group sequence for all entities.", correct: false }
      - { value: "To allow multiple group sequences for a single object.", correct: false }
    help: |
      Implementing `GroupSequenceProviderInterface` allows an object to define its own dynamic group sequence.
      https://symfony.com/doc/current/validation/sequence_provider.html#dynamic-group-sequences

  -
    question: >
      Which of the following built-in constraints would you use to ensure a string is not empty and contains at least 5 characters?
    answers:
      - { value: "`#[Assert\\NotBlank]` and `#[Assert\\Length(min: 5)]`", correct: true }
      - { value: "`#[Assert\\NotNull]` and `#[Assert\\MinLength(5)]`", correct: false }
      - { value: "`#[Assert\\NotEmpty]` and `#[Assert\\Size(min: 5)]`", correct: false }
      - { value: "`#[Assert\\Required]` and `#[Assert\\Length(min: 5)]`", correct: false }
    help: |
      `NotBlank` checks for non-empty values, and `Length` checks the string length.
      https://symfony.com/doc/current/reference/constraints/NotBlank.html
      https://symfony.com/doc/current/reference/constraints/Length.html

  -
    question: >
      What is the purpose of the `message` option in a validation constraint?
    answers:
      - { value: "To define the error message displayed when the constraint is violated.", correct: true }
      - { value: "To specify the translation key for the error message.", correct: false }
      - { value: "To provide a description of the constraint's purpose.", correct: false }
      - { value: "To set a default value for the validated property.", correct: false }
    help: |
      The `message` option allows you to customize the violation message.
      https://symfony.com/doc/current/validation.html#error-messages

  -
    question: >
      Which constraint is suitable for validating that a value is one of a predefined set of options?
    answers:
      - { value: "`#[Assert\\Choice]`", correct: true }
      - { value: "`#[Assert\\InArray]`", correct: false }
      - { value: "`#[Assert\\Option]`", correct: false }
      - { value: "`#[Assert\\Enum]`", correct: false }
    help: |
      The `Choice` constraint validates if a value is among a given list of choices.
      https://symfony.com/doc/current/reference/constraints/Choice.html

  -
    question: >
      How can you apply a `Callback` constraint to an entire class to execute a custom validation method within that class?
    answers:
      - { value: "By adding `#[Assert\\Callback('validateMethodName')]` to the class or using `ClassMetadata::addConstraint(new Assert\\Callback('validateMethodName'))` in `loadValidatorMetadata`.", correct: true }
      - { value: "By defining a public static method named `validate()` in the class.", correct: false }
      - { value: "By implementing `ValidatorAwareInterface` and defining a `validate()` method.", correct: false }
      - { value: "By using `#[Assert\\ClassCallback('validateMethodName')]`.", correct: false }
    help: |
      The `Callback` constraint can be applied at the class level to call a method for validation.
      https://symfony.com/doc/current/validation/custom_constraint.html#callback-constraint

  -
    question: |
      In a custom callback validator method, what object is passed as the first argument, allowing you to build violations?
    answers:
      - { value: "`Symfony\\Component\\Validator\\Context\\ExecutionContextInterface`", correct: true }
      - { value: "`Symfony\\Component\\Validator\\Validator\\ValidatorInterface`", correct: false }
      - { value: "`Symfony\\Component\\HttpFoundation\\Request`", correct: false }
      - { value: "`Symfony\\Component\\Validator\\ConstraintViolationListInterface`", correct: false }
    help: |
      The `ExecutionContextInterface` provides methods to interact with the validation process, including building violations.
      https://symfony.com/doc/current/validation/custom_constraint.html#callback-constraint

  -
    question: >
      What is the purpose of `setParameter()` when building a violation using `buildViolation()`?
    answers:
      - { value: "To replace placeholders in the violation message with dynamic values.", correct: true }
      - { value: "To set the path of the violation.", correct: false }
      - { value: "To define the validation group for the violation.", correct: false }
      - { value: "To specify the severity level of the violation.", correct: false }
    help: |
      `setParameter()` is used to inject dynamic data into the error message template.
      https://symfony.com/doc/current/validation.html#error-messages

  -
    question: >
      Which method is used to specify the property path for a validation violation?
    answers:
      - { value: "`atPath('propertyName')`", correct: true }
      - { value: "`setPath('propertyName')`", correct: false }
      - { value: "`onProperty('propertyName')`", correct: false }
      - { value: "`forProperty('propertyName')`", correct: false }
    help: |
      The `atPath()` method is used to set the property path where the violation occurred.
      https://symfony.com/doc/current/validation.html#custom-error-messages

  -
    question: >
      How can you debug the validation constraints applied to a specific class using the Symfony console?
    answers:
      - { value: "`$ php bin/console debug:validator 'App\\Entity\\SomeClass'`", correct: true }
      - { value: "`$ php bin/console validator:debug App\\Entity\\SomeClass`", correct: false }
      - { value: "`$ php bin/console show:constraints App\\Entity\\SomeClass`", correct: false }
      - { value: "`$ php bin/console validation:info App\\Entity\\SomeClass`", correct: false }
    help: |
      The `debug:validator` command helps inspect validation configurations.
      https://symfony.com/doc/current/validation.html#debugging-validation-constraints

  -
    question: >
      What is the significance of the `traverse` option in the `#[Assert\Valid]` constraint when applied to a `Traversable` object?
    answers:
      - { value: "If `true`, all containing values within the `Traversable` will be validated.", correct: true }
      - { value: "It determines if the `Valid` constraint should be applied recursively.", correct: false }
      - { value: "It controls whether the keys of the `Traversable` are validated.", correct: false }
      - { value: "It specifies the maximum depth for nested object validation.", correct: false }
    help: |
      The `traverse` option controls whether the elements of a `Traversable` (like an `ArrayCollection`) are validated.
      https://symfony.com/doc/current/reference/constraints/Valid.html#valid-constraint

  -
    question: >
      Which constraint would you use to ensure a string matches a specific regular expression pattern?
    answers:
      - { value: "`#[Assert\\Regex]`", correct: true }
      - { value: "`#[Assert\\Pattern]`", correct: false }
      - { value: "`#[Assert\\Match]`", correct: false }
      - { value: "`#[Assert\\Expression]`", correct: false }
    help: |
      The `Regex` constraint validates a string against a regular expression.
      https://symfony.com/doc/current/reference/constraints/Regex.html

  -
    question: >
      What is the default value of the `match` option in the `#[Assert\Regex]` constraint?
    answers:
      - { value: "`true`", correct: true }
      - { value: "`false`", correct: false }
      - { value: "`null`", correct: false }
      - { value: "It depends on the pattern.", correct: false }
    help: |
      By default, `Regex` validates that the string *matches* the pattern.
      https://symfony.com/doc/current/reference/constraints/Regex.html#match

  -
    question: >
      Which constraint is used to validate that a value is a valid email address?
    answers:
      - { value: "`#[Assert\\Email]`", correct: true }
      - { value: "`#[Assert\\IsEmail]`", correct: false }
      - { value: "`#[Assert\\Mail]`", correct: false }
      - { value: "`#[Assert\\ValidEmail]`", correct: false }
    help: |
      The `Email` constraint checks if a string is a valid email address.
      https://symfony.com/doc/current/reference/constraints/Email.html

  -
    question: >
      When validating scalar values (e.g., a simple string or integer) directly, how do you typically obtain a validator instance without a full Symfony application context?
    answers:
      - { value: "`Validation::createValidator()`", correct: true }
      - { value: "`$container->get('validator')`", correct: false }
      - { value: "`new Validator()`", correct: false }
      - { value: "`ValidatorFactory::create()`", correct: false }
    help: |
      `Validation::createValidator()` provides a basic validator instance suitable for standalone use.
      https://symfony.com/doc/current/components/validator.html#getting-the-validator

  -
    question: |
      Consider the following code snippet. What is the purpose of `Validation::createIsValidCallable()`?

      ```php
      use Symfony\Component\OptionsResolver\OptionsResolver;
      use Symfony\Component\Validator\Constraints\Length;
      use Symfony\Component\Validator\Validation;

      $resolver->setAllowedValues('transport', Validation::createIsValidCallable(
          new Length(min: 10)
      ));
      ```
    answers:
      - { value: "To create a callable that returns `false` if validation fails, suitable for `OptionsResolver`.", correct: true }
      - { value: "To create a callable that throws an exception if validation fails.", correct: false }
      - { value: "To register a new validation constraint with the validator.", correct: false }
      - { value: "To define a custom validation rule for the 'transport' option.", correct: false }
    help: |
      `createIsValidCallable()` returns a closure that returns `false` on validation failure, which is useful for `OptionsResolver::setAllowedValues()`.
      https://symfony.com/doc/current/components/validator.html#callable-methods

  -
    question: >
      Which constraint is used to validate the number of elements in a collection (e.g., an array or `Countable` object)?
    answers:
      - { value: "`#[Assert\\Count]`", correct: true }
      - { value: "`#[Assert\\CollectionSize]`", correct: false }
      - { value: "`#[Assert\\Length]`", correct: false }
      - { value: "`#[Assert\\Size]`", correct: false }
    help: |
      The `Count` constraint validates the number of elements in a collection.
      https://symfony.com/doc/current/reference/constraints/Count.html

  -
    question: >
      What is the purpose of the `minMessage` option in the `#[Assert\Length]` constraint?
    answers:
      - { value: "To customize the error message when the value is shorter than the minimum length.", correct: true }
      - { value: "To set the minimum length for the error message itself.", correct: false }
      - { value: "To define a message displayed when the minimum length is met.", correct: false }
      - { value: "To specify a fallback message if no other message is defined.", correct: false }
    help: |
      `minMessage` provides a custom error message for minimum length violations.
      https://symfony.com/doc/current/reference/constraints/Length.html#minmessage

  -
    question: >
      Which of the following is a valid way to define validation constraints using YAML configuration?
    answers:
      - { value: "```yaml\nApp\\Entity\\User:\n    properties:\n        name:\n            - NotBlank: ~\n```", correct: true }
      - { value: "```yaml\nUser:\n    name:\n        NotBlank: true\n```", correct: false }
      - { value: "```yaml\nvalidation:\n    User:\n        name:\n            NotBlank: {}\n```", correct: false }
      - { value: "```yaml\nconstraints:\n    App.Entity.User:\n        name:\n            - NotBlank\n```", correct: false }
    help: |
      YAML validation configuration uses the fully qualified class name as a top-level key, followed by `properties` or `getters`.
      https://symfony.com/doc/current/validation.html#validation-basics-yaml

  -
    question: >
      When defining validation constraints programmatically using `loadValidatorMetadata(ClassMetadata $metadata)`, which method is used to add a property-level constraint?
    answers:
      - { value: "`$metadata->addPropertyConstraint('propertyName', new Assert\\ConstraintName());`", correct: true }
      - { value: "`$metadata->addConstraint('propertyName', new Assert\\ConstraintName());`", correct: false }
      - { value: "`$metadata->setPropertyConstraint('propertyName', new Assert\\ConstraintName());`", correct: false }
      - { value: "`$metadata->add('propertyName', new Assert\\ConstraintName());`", correct: false }
    help: |
      `addPropertyConstraint()` is specifically for adding constraints to properties.
      https://symfony.com/doc/current/components/validator/metadata.html#property-constraints

  -
    question: >
      What is the purpose of the `#[Assert\When]` constraint?
    answers:
      - { value: "To apply validation constraints conditionally based on an expression.", correct: true }
      - { value: "To define a time-based validation rule.", correct: false }
      - { value: "To execute a callback function at a specific point in the validation process.", correct: false }
      - { value: "To validate a value only when a form is submitted.", correct: false }
    help: |
      The `When` constraint allows you to apply constraints only when a given expression evaluates to true.
      https://symfony.com/doc/current/reference/constraints/When.html

  -
    question: |
      In an `#[Assert\When]` expression, which variable represents the object being validated?
    answers:
      - { value: "`this`", correct: true }
      - { value: "`object`", correct: false }
      - { value: "`entity`", correct: false }
      - { value: "`data`", correct: false }
    help: |
      The `this` variable refers to the object being validated within the expression.
      https://symfony.com/doc/current/reference/constraints/When.html#expression

  -
    question: |
      In an `#[Assert\When]` expression, which variable represents the value of the property currently being validated (if applied to a property)?
    answers:
      - { value: "`value`", correct: true }
      - { value: "`propertyValue`", correct: false }
      - { value: "`current`", correct: false }
      - { value: "`data`", correct: false }
    help: |
      The `value` variable holds the value of the property being validated.
      https://symfony.com/doc/current/reference/constraints/When.html#expression

  -
    question: >
      How can you ensure that the 'Default' validation group is always included when dynamically selecting validation groups in a Symfony form?
    answers:
      - { value: "Always include `'Default'` in the array returned by the `validation_groups` Closure.", correct: true }
      - { value: "Symfony automatically includes 'Default' regardless of dynamic group selection.", correct: false }
      - { value: "Set `inherit_validation_groups: true` in the form options.", correct: false }
      - { value: "Define 'Default' as the first group in a `GroupSequence`.", correct: false }
    help: |
      When using a Closure for `validation_groups`, you must explicitly include `'Default'` if you want its constraints to be applied.
      https://symfony.com/doc/current/form/data_based_validation.html#including-the-default-group

  -
    question: >
      What is the purpose of `setTranslationDomain()` when building a validation violation?
    answers:
      - { value: "To specify a custom translation domain for the violation message.", correct: true }
      - { value: "To define the language for the violation message.", correct: false }
      - { value: "To mark the violation message as translatable.", correct: false }
      - { value: "To set the default translation domain for all violations.", correct: false }
    help: |
      `setTranslationDomain()` allows you to override the default translation domain for a specific violation.
      https://symfony.com/doc/current/validation/translations.html#translation-domain

  -
    question: >
      Which of the following is a valid way to define a `Length` constraint with a maximum of 5 characters using XML configuration?
    answers:
      - { value: "```xml\n<constraint name=\"Length\">\n    <option name=\"max\">5</option>\n</constraint>\n```", correct: true }
      - { value: "```xml\n<Length max=\"5\"/>\n```", correct: false }
      - { value: "```xml\n<constraint name=\"Length\" max=\"5\"/>\n```", correct: false }
      - { value: "```xml\n<Length>\n    <max value=\"5\"/>\n</Length>\n```", correct: false }
    help: |
      Options for constraints in XML are defined using `<option>` tags with `name` and `value` attributes (or content).
      https://symfony.com/doc/current/reference/constraints/Length.html#xml

  -
    question: >
      When unit testing a custom constraint validator, which base class should your test extend?
    answers:
      - { value: "`Symfony\\Component\\Validator\\Test\\ConstraintValidatorTestCase`", correct: true }
      - { value: "`PHPUnit\\Framework\\TestCase`", correct: false }
      - { value: "`Symfony\\Bundle\\FrameworkBundle\\Test\\WebTestCase`", correct: false }
      - { value: "`Symfony\\Component\\Validator\\Test\\ValidatorTestCase`", correct: false }
    help: |
      `ConstraintValidatorTestCase` provides helper methods for testing validators.
      https://symfony.com/doc/current/validation/custom_constraint.html#testing-the-validator

  -
    question: >
      What is the purpose of `Validation::createCallable()`?
    answers:
      - { value: "It returns a closure that throws a `ValidationFailedException` if constraints are not matched.", correct: true }
      - { value: "It creates a callable that returns `true` on success and `false` on failure.", correct: false }
      - { value: "It's used to define a custom validation method within an entity.", correct: false }
      - { value: "It provides a shortcut for applying multiple constraints at once.", correct: false }
    help: |
      `createCallable()` is useful when you need a callable that strictly enforces constraints by throwing an exception.
      https://symfony.com/doc/current/components/validator.html#callable-methods

  -
    question: >
      Which constraint is used to validate that a value is a valid CSS color string?
    answers:
      - { value: "`#[Assert\\CssColor]`", correct: true }
      - { value: "`#[Assert\\Color]`", correct: false }
      - { value: "`#[Assert\\HexColor]`", correct: false }
      - { value: "`#[Assert\\RgbColor]`", correct: false }
    help: |
      The `CssColor` constraint specifically validates CSS color formats.
      https://symfony.com/doc/current/reference/constraints/CssColor.html

  -
    question: >
      What happens if you apply a `#[Assert\Length(min: 5)]` constraint to a property and the value is `null`?
    answers:
      - { value: "The value is considered valid, as validators typically ignore null values by default.", correct: true }
      - { value: "A violation is triggered because `null` does not meet the minimum length.", correct: false }
      - { value: "An `UnexpectedValueException` is thrown.", correct: false }
      - { value: "The constraint is ignored, and no validation occurs for that property.", correct: false }
    help: |
      Most constraints, including `Length`, consider `null` values valid unless explicitly combined with `NotNull` or `NotBlank`.
      https://symfony.com/doc/current/reference/constraints/Length.html#min

  -
    question: >
      When integrating Symfony Forms with the Validator component, which extension is typically added to the `FormFactoryBuilder`?
    answers:
      - { value: "`Symfony\\Component\\Form\\Extension\\Validator\\ValidatorExtension`", correct: true }
      - { value: "`Symfony\\Component\\Form\\Extension\\Core\\Type\\ValidatorExtension`", correct: false }
      - { value: "`Symfony\\Component\\Validator\\Form\\ValidatorExtension`", correct: false }
      - { value: "`Symfony\\Component\\Form\\Extension\\Validator\\ValidationExtension`", correct: false }
    help: |
      The `ValidatorExtension` integrates the Validator component with the Form component.
      https://symfony.com/doc/current/components/form.html#integrating-with-the-validator

  -
    question: >
      What is the primary purpose of the `#[Assert\All]` constraint when applied to a collection?
    answers:
      - { value: "To apply a set of constraints to every element within the collection.", correct: true }
      - { value: "To validate that all elements in the collection are of the same type.", correct: false }
      - { value: "To ensure that at least one element in the collection satisfies a constraint.", correct: false }
      - { value: "To combine multiple constraints into a single validation rule.", correct: false }
    help: |
      The `All` constraint applies a given set of constraints to each element of a collection.
      https://symfony.com/doc/current/reference/constraints/All.html

  -
    question: >
      Which constraint is used to validate that a value is a valid URL?
    answers:
      - { value: "`#[Assert\\Url]`", correct: true }
      - { value: "`#[Assert\\Link]`", correct: false }
      - { value: "`#[Assert\\Uri]`", correct: false }
      - { value: "`#[Assert\\WebAddress]`", correct: false }
    help: |
      The `Url` constraint validates if a string is a valid URL.
      https://symfony.com/doc/current/reference/constraints/Url.html

  -
    question: >
      When using the `#[Assert\Collection]` constraint, how do you define constraints for specific keys within the array?
    answers:
      - { value: "By providing an associative array where keys are the array keys to validate and values are the constraints.", correct: true }
      - { value: "By using `#[Assert\Key('keyName', constraints: [...])]`.", correct: false }
      - { value: "By defining a separate validation group for each key.", correct: false }
      - { value: "The `Collection` constraint only validates the overall collection, not individual keys.", correct: false }
    help: |
      The `Collection` constraint allows you to specify constraints for each key of an array.
      https://symfony.com/doc/current/reference/constraints/Collection.html

  -
    question: >
      What is the purpose of the `#[Assert\UniqueEntity]` constraint (often used with Doctrine)?
    answers:
      - { value: "To ensure that a specific field or combination of fields is unique across all entities of that type in the database.", correct: true }
      - { value: "To validate that an entity's ID is unique.", correct: false }
      - { value: "To prevent duplicate entries in a collection property.", correct: false }
      - { value: "To enforce uniqueness within a single entity's properties.", correct: false }
    help: |
      The `UniqueEntity` constraint is used to validate uniqueness against a data source, typically a database.
      https://symfony.com/doc/current/reference/constraints/UniqueEntity.html

  -
    question: >
      Which constraint is used to validate that a value is a valid IP address?
    answers:
      - { value: "`#[Assert\\Ip]`", correct: true }
      - { value: "`#[Assert\\IpAddress]`", correct: false }
      - { value: "`#[Assert\\NetworkAddress]`", correct: false }
      - { value: "`#[Assert\\Host]`", correct: false }
    help: |
      The `Ip` constraint validates if a string is a valid IP address.
      https://symfony.com/doc/current/reference/constraints/Ip.html

  -
    question: >
      What is the primary difference between `#[Assert\NotBlank]` and `#[Assert\NotNull]`?
    answers:
      - { value: "`NotBlank` checks for non-empty values (e.g., non-empty string, non-empty array), while `NotNull` only checks if the value is not `null`.", correct: true }
      - { value: "`NotBlank` is for strings, `NotNull` is for objects.", correct: false }
      - { value: "`NotBlank` allows `null`, `NotNull` does not.", correct: false }
      - { value: "They are functionally identical.", correct: false }
    help: |
      `NotBlank` is stricter than `NotNull`, considering empty strings, arrays, etc., as invalid.
      https://symfony.com/doc/current/reference/constraints/NotBlank.html
      https://symfony.com/doc/current/reference/constraints/NotNull.html

  -
    question: >
      Which constraint is used to validate that a value is a valid date?
    answers:
      - { value: "`#[Assert\\Date]`", correct: true }
      - { value: "`#[Assert\\IsDate]`", correct: false }
      - { value: "`#[Assert\\DateTime]`", correct: false }
      - { value: "`#[Assert\\ValidDate]`", correct: false }
    help: |
      The `Date` constraint validates if a value is a valid date string in 'YYYY-MM-DD' format.
      https://symfony.com/doc/current/reference/constraints/Date.html

  -
    question: >
      What is the purpose of the `payload` option in a validation constraint?
    answers:
      - { value: "To attach arbitrary custom data to a violation, accessible during error handling.", correct: true }
      - { value: "To define the data type of the validated value.", correct: false }
      - { value: "To specify a custom error code for the violation.", correct: false }
      - { value: "To pass data to a custom validator method.", correct: false }
    help: |
      The `payload` option allows you to attach custom, non-validation related data to a violation.
      https://symfony.com/doc/current/validation/custom_constraint.html#payload

  -
    question: >
      Which constraint is used to validate that a value is a valid time?
    answers:
      - { value: "`#[Assert\\Time]`", correct: true }
      - { value: "`#[Assert\\IsTime]`", correct: false }
      - { value: "`#[Assert\\DateTime]`", correct: false }
      - { value: "`#[Assert\\ValidTime]`", correct: false }
    help: |
      The `Time` constraint validates if a value is a valid time string in 'HH:MM:SS' format.
      https://symfony.com/doc/current/reference/constraints/Time.html

  -
    question: >
      Which constraint is used to validate that a value is a valid DateTime?
    answers:
      - { value: "`#[Assert\\DateTime]`", correct: true }
      - { value: "`#[Assert\\DateAndTime]`", correct: false }
      - { value: "`#[Assert\\Timestamp]`", correct: false }
      - { value: "`#[Assert\\ValidDateTime]`", correct: false }
    help: |
      The `DateTime` constraint validates if a value is a valid date and time string.
      https://symfony.com/doc/current/reference/constraints/DateTime.html

  -
    question: >
      What is the purpose of the `#[Assert\Expression]` constraint?
    answers:
      - { value: "To validate a value based on a complex Symfony Expression Language expression.", correct: true }
      - { value: "To define a regular expression for validation.", correct: false }
      - { value: "To execute a PHP callback function for validation.", correct: false }
      - { value: "To compare two properties of an object.", correct: false }
    help: |
      The `Expression` constraint allows for highly flexible validation rules using the Expression Language.
      https://symfony.com/doc/current/reference/constraints/Expression.html

  -
    question: >
      Which constraint is used to validate that a value is a valid UUID?
    answers:
      - { value: "`#[Assert\\Uuid]`", correct: true }
      - { value: "`#[Assert\\Guid]`", correct: false }
      - { value: "`#[Assert\\Identifier]`", correct: false }
      - { value: "`#[Assert\\UniqueId]`", correct: false }
    help: |
      The `Uuid` constraint validates if a string is a valid UUID.
      https://symfony.com/doc/current/reference/constraints/Uuid.html

  -
    question: >
      What is the purpose of the `#[Assert\Type]` constraint?
    answers:
      - { value: "To validate that a value is of a specific PHP data type (e.g., string, integer, array).", correct: true }
      - { value: "To check the class type of an object.", correct: false }
      - { value: "To enforce strict type hinting in properties.", correct: false }
      - { value: "To convert a value to a specific type before validation.", correct: false }
    help: |
      The `Type` constraint checks if the value's type matches the expected type.
      https://symfony.com/doc/current/reference/constraints/Type.html

  -
    question: >
      Which constraint is used to validate that a value is a valid country code (ISO 3166-1 alpha-2)?
    answers:
      - { value: "`#[Assert\\Country]`", correct: true }
      - { value: "`#[Assert\\Locale]`", correct: false }
      - { value: "`#[Assert\\Region]`", correct: false }
      - { value: "`#[Assert\\IsoCountry]`", correct: false }
    help: |
      The `Country` constraint validates if a value is a valid ISO 3166-1 alpha-2 country code.
      https://symfony.com/doc/current/reference/constraints/Country.html

  -
    question: >
      Which constraint is used to validate that a value is a valid language code (ISO 639-1 alpha-2)?
    answers:
      - { value: "`#[Assert\\Language]`", correct: true }
      - { value: "`#[Assert\\Locale]`", correct: false }
      - { value: "`#[Assert\\Lang]`", correct: false }
      - { value: "`#[Assert\\IsoLanguage]`", correct: false }
    help: |
      The `Language` constraint validates if a value is a valid ISO 639-1 alpha-2 language code.
      https://symfony.com/doc/current/reference/constraints/Language.html

  -
    question: >
      What is the purpose of the `#[Assert\DivisibleBy]` constraint?
    answers:
      - { value: "To validate that a numeric value is divisible by a given number.", correct: true }
      - { value: "To check if a number can be divided without a remainder.", correct: false }
      - { value: "To ensure a value is a multiple of another value.", correct: false }
      - { value: "To validate the divisibility of two properties.", correct: false }
    help: |
      The `DivisibleBy` constraint ensures a number is perfectly divisible by another.
      https://symfony.com/doc/current/reference/constraints/DivisibleBy.html

  -
    question: >
      Which constraint is used to validate that a value is a valid currency code (ISO 4217)?
    answers:
      - { value: "`#[Assert\\Currency]`", correct: true }
      - { value: "`#[Assert\\Money]`", correct: false }
      - { value: "`#[Assert\\IsoCurrency]`", correct: false }
      - { value: "`#[Assert\\FinancialCode]`", correct: false }
    help: |
      The `Currency` constraint validates if a value is a valid ISO 4217 currency code.
      https://symfony.com/doc/current/reference/constraints/Currency.html

  -
    question: >
      What is the purpose of the `#[Assert\Unique]` constraint when applied to a collection of scalar values?
    answers:
      - { value: "To ensure that all elements within the collection are unique.", correct: true }
      - { value: "To check if the collection itself is unique among other collections.", correct: false }
      - { value: "To validate that the collection contains only unique objects.", correct: false }
      - { value: "To enforce uniqueness based on a specific property of each element.", correct: false }
    help: |
      The `Unique` constraint ensures that all values in a collection are distinct.
      https://symfony.com/doc/current/reference/constraints/Unique.html

  -
    question: >
      Which constraint is used to validate that a value is a valid credit card number?
    answers:
      - { value: "`#[Assert\\CardScheme]`", correct: true }
      - { value: "`#[Assert\\CreditCard]`", correct: false }
      - { value: "`#[Assert\\PaymentCard]`", correct: false }
      - { value: "`#[Assert\\VisaMastercard]`", correct: false }
    help: |
      The `CardScheme` constraint validates credit card numbers against various schemes.
      https://symfony.com/doc/current/reference/constraints/CardScheme.html

  -
    question: >
      What is the purpose of the `#[Assert\IsFalse]` constraint?
    answers:
      - { value: "To validate that a boolean value is `false`.", correct: true }
      - { value: "To check if a string represents a falsey value.", correct: false }
      - { value: "To ensure a method returns `false`.", correct: false }
      - { value: "To negate the result of another constraint.", correct: false }
    help: |
      The `IsFalse` constraint asserts that a value is strictly `false`.
      https://symfony.com/doc/current/reference/constraints/IsFalse.html

  -
    question: >
      What is the purpose of the `#[Assert\IsTrue]` constraint?
    answers:
      - { value: "To validate that a boolean value is `true`.", correct: true }
      - { value: "To check if a string represents a truthy value.", correct: false }
      - { value: "To ensure a method returns `true`.", correct: false }
      - { value: "To assert that a value is not `false`.", correct: false }
    help: |
      The `IsTrue` constraint asserts that a value is strictly `true`.
      https://symfony.com/doc/current/reference/constraints/IsTrue.html

  -
    question: >
      Which constraint is used to validate that a value is a valid ISBN?
    answers:
      - { value: "`#[Assert\\Isbn]`", correct: true }
      - { value: "`#[Assert\\BookNumber]`", correct: false }
      - { value: "`#[Assert\\Isbn10Isbn13]`", correct: false }
      - { value: "`#[Assert\\PublicationId]`", correct: false }
    help: |
      The `Isbn` constraint validates if a string is a valid ISBN-10 or ISBN-13.
      https://symfony.com/doc/current/reference/constraints/Isbn.html

  -
    question: >
      What is the purpose of the `#[Assert\LessThan]` constraint?
    answers:
      - { value: "To validate that a numeric value is strictly less than a given limit.", correct: true }
      - { value: "To check if a value is less than or equal to a limit.", correct: false }
      - { value: "To compare two values and ensure the first is smaller.", correct: false }
      - { value: "To validate the length of a string is less than a limit.", correct: false }
    help: |
      The `LessThan` constraint ensures a numeric value is strictly less than the specified value.
      https://symfony.com/doc/current/reference/constraints/LessThan.html

  -
    question: >
      What is the purpose of the `#[Assert\LessThanOrEqual]` constraint?
    answers:
      - { value: "To validate that a numeric value is less than or equal to a given limit.", correct: true }
      - { value: "To check if a value is strictly less than a limit.", correct: false }
      - { value: "To compare two values and ensure the first is smaller or equal.", correct: false }
      - { value: "To validate the length of a string is less than or equal to a limit.", correct: false }
    help: |
      The `LessThanOrEqual` constraint ensures a numeric value is less than or equal to the specified value.
      https://symfony.com/doc/current/reference/constraints/LessThanOrEqual.html

  -
    question: >
      Which constraint is used to validate that a value is a valid BIC (SWIFT code)?
    answers:
      - { value: "`#[Assert\\Bic]`", correct: true }
      - { value: "`#[Assert\\SwiftCode]`", correct: false }
      - { value: "`#[Assert\\BankIdentifier]`", correct: false }
      - { value: "`#[Assert\\FinancialCode]`", correct: false }
    help: |
      The `Bic` constraint validates if a string is a valid BIC (Bank Identifier Code).
      https://symfony.com/doc/current/reference/constraints/Bic.html

  -
    question: >
      What is the purpose of the `#[Assert\GreaterThan]` constraint?
    answers:
      - { value: "To validate that a numeric value is strictly greater than a given limit.", correct: true }
      - { value: "To check if a value is greater than or equal to a limit.", correct: false }
      - { value: "To compare two values and ensure the first is larger.", correct: false }
      - { value: "To validate the length of a string is greater than a limit.", correct: false }
    help: |
      The `GreaterThan` constraint ensures a numeric value is strictly greater than the specified value.
      https://symfony.com/doc/current/reference/constraints/GreaterThan.html

  -
    question: >
      What is the purpose of the `#[Assert\GreaterThanOrEqual]` constraint?
    answers:
      - { value: "To validate that a numeric value is greater than or equal to a given limit.", correct: true }
      - { value: "To check if a value is strictly greater than a limit.", correct: false }
      - { value: "To compare two values and ensure the first is larger or equal.", correct: false }
      - { value: "To validate the length of a string is greater than or equal to a limit.", correct: false }
    help: |
      The `GreaterThanOrEqual` constraint ensures a numeric value is greater than or equal to the specified value.
      https://symfony.com/doc/current/reference/constraints/GreaterThanOrEqual.html

  -
    question: >
      Which constraint is used to validate that a value is a valid JSON string?
    answers:
      - { value: "`#[Assert\\Json]`", correct: true }
      - { value: "`#[Assert\\IsJson]`", correct: false }
      - { value: "`#[Assert\\ValidJson]`", correct: false }
      - { value: "`#[Assert\\JsonString]`", correct: false }
    help: |
      The `Json` constraint validates if a string contains valid JSON.
      https://symfony.com/doc/current/reference/constraints/Json.html

  -
    question: >
      What is the purpose of the `#[Assert\Range]` constraint?
    answers:
      - { value: "To validate that a numeric value falls within a specified minimum and maximum range (inclusive).", correct: true }
      - { value: "To check if a value is within a given set of choices.", correct: false }
      - { value: "To define a range for string length validation.", correct: false }
      - { value: "To ensure a value is within a date range.", correct: false }
    help: |
      The `Range` constraint validates if a numeric value is between a min and max value.
      https://symfony.com/doc/current/reference/constraints/Range.html

  -
    question: >
      Which constraint is used to validate that a file's size is within a specified range?
    answers:
      - { value: "`#[Assert\\File(maxSize: '1M', minSize: '100K')]`", correct: true }
      - { value: "`#[Assert\\FileSize(min: '100K', max: '1M')]`", correct: false }
      - { value: "`#[Assert\\UploadSize(min: '100K', max: '1M')]`", correct: false }
      - { value: "`#[Assert\\Size(min: '100K', max: '1M')]`", correct: false }
    help: |
      The `File` constraint has `maxSize` and `minSize` options for file size validation.
      https://symfony.com/doc/current/reference/constraints/File.html

  -
    question: >
      What is the purpose of the `#[Assert\Positive]` constraint?
    answers:
      - { value: "To validate that a numeric value is strictly greater than zero.", correct: true }
      - { value: "To check if a number is positive or zero.", correct: false }
      - { value: "To ensure a value is a positive integer.", correct: false }
      - { value: "To validate the sign of a number.", correct: false }
    help: |
      The `Positive` constraint ensures a numeric value is strictly greater than 0.
      https://symfony.com/doc/current/reference/constraints/Positive.html

  -
    question: >
      What is the purpose of the `#[Assert\PositiveOrZero]` constraint?
    answers:
      - { value: "To validate that a numeric value is greater than or equal to zero.", correct: true }
      - { value: "To check if a number is strictly positive.", correct: false }
      - { value: "To ensure a value is a non-negative integer.", correct: false }
      - { value: "To validate the absolute value of a number.", correct: false }
    help: |
      The `PositiveOrZero` constraint ensures a numeric value is greater than or equal to 0.
      https://symfony.com/doc/current/reference/constraints/PositiveOrZero.html

  -
    question: >
      What is the purpose of the `#[Assert\Negative]` constraint?
    answers:
      - { value: "To validate that a numeric value is strictly less than zero.", correct: true }
      - { value: "To check if a number is negative or zero.", correct: false }
      - { value: "To ensure a value is a negative integer.", correct: false }
      - { value: "To validate the sign of a number.", correct: false }
    help: |
      The `Negative` constraint ensures a numeric value is strictly less than 0.
      https://symfony.com/doc/current/reference/constraints/Negative.html

  -
    question: >
      What is the purpose of the `#[Assert\NegativeOrZero]` constraint?
    answers:
      - { value: "To validate that a numeric value is less than or equal to zero.", correct: true }
      - { value: "To check if a number is strictly negative.", correct: false }
      - { value: "To ensure a value is a non-positive integer.", correct: false }
      - { value: "To validate the absolute value of a number.", correct: false }
    help: |
      The `NegativeOrZero` constraint ensures a numeric value is less than or equal to 0.
      https://symfony.com/doc/current/reference/constraints/NegativeOrZero.html

  -
    question: >
      Which constraint is used to validate that a value is a valid EAN-8 or EAN-13 barcode?
    answers:
      - { value: "`#[Assert\\Ean]`", correct: true }
      - { value: "`#[Assert\\Barcode]`", correct: false }
      - { value: "`#[Assert\\ProductCode]`", correct: false }
      - { value: "`#[Assert\\IsEan]`", correct: false }
    help: |
      The `Ean` constraint validates if a string is a valid EAN-8 or EAN-13 barcode.
      https://symfony.com/doc/current/reference/constraints/Ean.html

  -
    question: >
      What is the purpose of the `#[Assert\Timezone]` constraint?
    answers:
      - { value: "To validate that a string is a valid PHP timezone identifier.", correct: true }
      - { value: "To convert a date to a specific timezone.", correct: false }
      - { value: "To ensure a date is within a specific timezone.", correct: false }
      - { value: "To validate the format of a timezone string.", correct: false }
    help: |
      The `Timezone` constraint validates if a string is a valid timezone identifier recognized by PHP.
      https://symfony.com/doc/current/reference/constraints/Timezone.html

  -
    question: >
      Which constraint is used to validate that a value is a valid locale code (e.g., "en_US")?
    answers:
      - { value: "`#[Assert\\Locale]`", correct: true }
      - { value: "`#[Assert\\LanguageCountry]`", correct: false }
      - { value: "`#[Assert\\Culture]`", correct: false }
      - { value: "`#[Assert\\IsoLocale]`", correct: false }
    help: |
      The `Locale` constraint validates if a string is a valid locale code.
      https://symfony.com/doc/current/reference/constraints/Locale.html

  -
    question: >
      What is the purpose of the `#[Assert\File]` constraint when applied to an uploaded file?
    answers:
      - { value: "To validate various aspects of an uploaded file, such as size, MIME type, and image dimensions.", correct: true }
      - { value: "To move the uploaded file to a permanent location.", correct: false }
      - { value: "To check if a file exists on the server.", correct: false }
      - { value: "To validate the file extension.", correct: false }
    help: |
      The `File` constraint is a versatile constraint for validating uploaded files.
      https://symfony.com/doc/current/reference/constraints/File.html

  -
    question: >
      Which constraint is used to validate that a value is a valid ISBN-10?
    answers:
      - { value: "`#[Assert\\Isbn(type: 'isbn10')]`", correct: true }
      - { value: "`#[Assert\\Isbn10]`", correct: false }
      - { value: "`#[Assert\\BookId10]`", correct: false }
      - { value: "`#[Assert\\Isbn(version: 10)]`", correct: false }
    help: |
      The `Isbn` constraint can be configured to validate specific ISBN types using the `type` option.
      https://symfony.com/doc/current/reference/constraints/Isbn.html#type

  -
    question: >
      Which constraint is used to validate that a value is a valid ISBN-13?
    answers:
      - { value: "`#[Assert\\Isbn(type: 'isbn13')]`", correct: true }
      - { value: "`#[Assert\\Isbn13]`", correct: false }
      - { value: "`#[Assert\\BookId13]`", correct: false }
      - { value: "`#[Assert\\Isbn(version: 13)]`", correct: false }
    help: |
      The `Isbn` constraint can be configured to validate specific ISBN types using the `type` option.
      https://symfony.com/doc/current/reference/constraints/Isbn.html#type

  -
    question: >
      What is the purpose of the `#[Assert\Callback]` constraint?
    answers:
      - { value: "To execute a custom PHP callable (function or method) for validation.", correct: true }
      - { value: "To define a JavaScript callback for client-side validation.", correct: false }
      - { value: "To automatically call a method on the validated object.", correct: false }
      - { value: "To register a new validation service.", correct: false }
    help: |
      The `Callback` constraint allows you to use any PHP callable for validation logic.
      https://symfony.com/doc/current/reference/constraints/Callback.html

  -
    question: >
      When using `#[Assert\Callback]`, what arguments are typically passed to the custom validation method if it's a static method on the validated class?
    answers:
      - { value: "The value being validated and the `ExecutionContextInterface` object.", correct: true }
      - { value: "The validated object itself and the `ExecutionContextInterface` object.", correct: false }
      - { value: "Only the value being validated.", correct: false }
      - { value: "No arguments are passed; the method accesses properties directly.", correct: false }
    help: |
      For static callback methods, the value and the execution context are passed.
      https://symfony.com/doc/current/reference/constraints/Callback.html#callback-methods

  -
    question: >
      What is the purpose of the `#[Assert\ExpressionLanguage]` constraint?
    answers:
      - { value: "To validate a value using a Symfony Expression Language expression directly as the constraint.", correct: true }
      - { value: "To define a custom validation message using Expression Language.", correct: false }
      - { value: "To enable Expression Language support for all constraints.", correct: false }
      - { value: "To translate validation messages using Expression Language.", correct: false }
    help: |
      The `ExpressionLanguage` constraint allows you to write validation logic directly in Expression Language.
      (Note: This constraint is typically named `Expression`.)
      https://symfony.com/doc/current/reference/constraints/Expression.html

  -
    question: >
      Which constraint is used to validate that a value is a valid UUID version 4?
    answers:
      - { value: "`#[Assert\\Uuid(versions: [4])]`", correct: true }
      - { value: "`#[Assert\\Uuid4]`", correct: false }
      - { value: "`#[Assert\\Uuid(version: 4)]`", correct: false }
      - { value: "`#[Assert\\Guid4]`", correct: false }
    help: |
      The `Uuid` constraint allows specifying allowed UUID versions using the `versions` option.
      https://symfony.com/doc/current/reference/constraints/Uuid.html#versions

  -
    question: >
      What is the purpose of the `#[Assert\AtLeastOneOf]` constraint?
    answers:
      - { value: "To validate that at least one of the specified nested constraints passes.", correct: true }
      - { value: "To ensure that only one of the specified constraints passes.", correct: false }
      - { value: "To apply all specified constraints, but only report one violation.", correct: false }
      - { value: "To define a group of constraints that are all optional.", correct: false }
    help: |
      The `AtLeastOneOf` constraint passes if at least one of its child constraints passes.
      https://symfony.com/doc/current/reference/constraints/AtLeastOneOf.html

  -
    question: >
      What is the purpose of the `#[Assert\Sequentially]` constraint?
    answers:
      - { value: "To apply a list of constraints in sequence, stopping on the first violation.", correct: true }
      - { value: "To define a group sequence for a single property.", correct: false }
      - { value: "To execute constraints in parallel for performance.", correct: false }
      - { value: "To apply constraints only if previous ones have passed.", correct: false }
    help: |
      The `Sequentially` constraint allows you to define a sequence of constraints for a single property.
      https://symfony.com/doc/current/reference/constraints/Sequentially.html

  -
    question: >
      Which constraint is used to validate that a value is a valid IBAN?
    answers:
      - { value: "`#[Assert\\Iban]`", correct: true }
      - { value: "`#[Assert\\BankAccount]`", correct: false }
      - { value: "`#[Assert\\InternationalBankNumber]`", correct: false }
      - { value: "`#[Assert\\FinancialAccount]`", correct: false }
    help: |
      The `Iban` constraint validates if a string is a valid IBAN (International Bank Account Number).
      https://symfony.com/doc/current/reference/constraints/Iban.html

  -
    question: >
      What is the purpose of the `#[Assert\Unique]` constraint when applied to a property that is a collection of objects?
    answers:
      - { value: "To ensure that each object within the collection is unique based on a specified property path or a combination of properties.", correct: true }
      - { value: "To check if the collection itself is unique among other collections of objects.", correct: false }
      - { value: "To validate that all objects in the collection are of the same type.", correct: false }
      - { value: "To enforce uniqueness for the primary key of each object in the collection.", correct: false }
    help: |
      The `Unique` constraint can be used with collections of objects by specifying the property path to check for uniqueness.
      https://symfony.com/doc/current/reference/constraints/Unique.html#unique-objects-in-a-collection

  -
    question: >
      Which constraint is used to validate that a value is a valid ISBN-10 or ISBN-13, but specifically for books?
    answers:
      - { value: "`#[Assert\\Isbn]` (it covers both)", correct: true }
      - { value: "`#[Assert\\BookIsbn]`", correct: false }
      - { value: "`#[Assert\\PublicationIsbn]`", correct: false }
      - { value: "`#[Assert\\IsbnBook]`", correct: false }
    help: |
      The `Isbn` constraint handles both ISBN-10 and ISBN-13 formats for books and other publications.
      https://symfony.com/doc/current/reference/constraints/Isbn.html

  -
    question: >
      What is the purpose of the `#[Assert\Timezone]` constraint?
    answers:
      - { value: "To validate that a string is a valid PHP timezone identifier.", correct: true }
      - { value: "To convert a date to a specific timezone.", correct: false }
      - { value: "To ensure a date is within a specific timezone.", correct: false }
      - { value: "To validate the format of a timezone string.", correct: false }
    help: |
      The `Timezone` constraint validates if a string is a valid timezone identifier recognized by PHP.
      https://symfony.com/doc/current/reference/constraints/Timezone.html

  -
    question: >
      Which constraint is used to validate that a value is a valid UUID version 3?
    answers:
      - { value: "`#[Assert\\Uuid(versions: [3])]`", correct: true }
      - { value: "`#[Assert\\Uuid3]`", correct: false }
      - { value: "`#[Assert\\Uuid(version: 3)]`", correct: false }
      - { value: "`#[Assert\\Guid3]`", correct: false }
    help: |
      The `Uuid` constraint allows specifying allowed UUID versions using the `versions` option.
      https://symfony.com/doc/current/reference/constraints/Uuid.html#versions

  -
    question: >
      What is the purpose of the `#[Assert\UniqueEntity]` constraint's `fields` option?
    answers:
      - { value: "To specify one or more fields that, when combined, must be unique in the database.", correct: true }
      - { value: "To list the fields that should be validated for uniqueness individually.", correct: false }
      - { value: "To define the fields that are excluded from uniqueness validation.", correct: false }
      - { value: "To indicate which fields are used to identify the entity.", correct: false }
    help: |
      The `fields` option allows you to define a composite unique constraint.
      https://symfony.com/doc/current/reference/constraints/UniqueEntity.html#fields

  -
    question: >
      When using `#[Assert\When]`, what is the purpose of the `otherwise` option?
    answers:
      - { value: "To apply a different set of constraints if the `expression` evaluates to a falsey value.", correct: true }
      - { value: "To define a fallback message if the main constraints fail.", correct: false }
      - { value: "To specify constraints that are always applied, regardless of the expression.", correct: false }
      - { value: "To invert the logic of the `expression`.", correct: false }
    help: |
      The `otherwise` option allows you to define alternative constraints when the primary expression is false.
      https://symfony.com/doc/current/reference/constraints/When.html#otherwise

  -
    question: >
      Which constraint is used to validate that a value is a valid HTML color code (e.g., #RRGGBB or #RGB)?
    answers:
      - { value: "`#[Assert\\CssColor(formats: [CssColor::HEX_SHORT, CssColor::HEX_LONG])]`", correct: true }
      - { value: "`#[Assert\\HtmlColor]`", correct: false }
      - { value: "`#[Assert\\HexColor]`", correct: false }
      - { value: "`#[Assert\\ColorCode]`", correct: false }
    help: |
      The `CssColor` constraint can validate various CSS color formats, including hex.
      https://symfony.com/doc/current/reference/constraints/CssColor.html#formats

  -
    question: >
      What is the purpose of the `#[Assert\Collection]` constraint's `allowExtraFields` option?
    answers:
      - { value: "If `false`, any keys in the input array that are not explicitly defined in the constraint will cause a violation.", correct: true }
      - { value: "If `true`, it allows the collection to contain more elements than specified by `min` or `max`.", correct: false }
      - { value: "It allows the collection to contain elements of different data types.", correct: false }
      - { value: "It enables validation of nested collections.", correct: false }
    help: |
      `allowExtraFields` controls whether unexpected keys in the input array are allowed.
      https://symfony.com/doc/current/reference/constraints/Collection.html#allowextrafields

  -
    question: >
      What is the purpose of the `#[Assert\Collection]` constraint's `allowMissingFields` option?
    answers:
      - { value: "If `false`, any keys defined in the constraint but missing from the input array will cause a violation.", correct: true }
      - { value: "If `true`, it allows the collection to have fewer elements than specified by `min`.", correct: false }
      - { value: "It allows the collection to have `null` values for missing fields.", correct: false }
      - { value: "It enables partial validation of the collection.", correct: false }
    help: |
      `allowMissingFields` controls whether missing keys that are defined in the constraint are allowed.
      https://symfony.com/doc/current/reference/constraints/Collection.html#allowmissingfields

  -
    question: >
      Which constraint is used to validate that a value is a valid hostname?
    answers:
      - { value: "`#[Assert\\Hostname]`", correct: true }
      - { value: "`#[Assert\\Domain]`", correct: false }
      - { value: "`#[Assert\\ServerName]`", correct: false }
      - { value: "`#[Assert\\Host]`", correct: false }
    help: |
      The `Hostname` constraint validates if a string is a valid hostname.
      https://symfony.com/doc/current/reference/constraints/Hostname.html

  -
    question: >
      What is the purpose of the `#[Assert\Luhn]` constraint?
    answers:
      - { value: "To validate a numeric string using the Luhn algorithm (e.g., for credit card numbers).", correct: true }
      - { value: "To check if a number is a valid checksum.", correct: false }
      - { value: "To validate the length of a numeric string.", correct: false }
      - { value: "To ensure a number is a valid identifier.", correct: false }
    help: |
      The `Luhn` constraint applies the Luhn algorithm for basic validation of numbers like credit card numbers.
      https://symfony.com/doc/current/reference/constraints/Luhn.html

  -
    question: >
      When should you use a custom callback validator instead of a built-in constraint?
    answers:
      - { value: "When the validation logic is complex, involves multiple properties, or requires external dependencies not covered by built-in constraints.", correct: true }
      - { value: "Always, for better control over validation.", correct: false }
      - { value: "Only for client-side validation.", correct: false }
      - { value: "When validating scalar values.", correct: false }
    help: |
      Custom callbacks are for complex, application-specific validation rules.
      https://symfony.com/doc/current/validation/custom_constraint.html#callback-constraint

  -
    question: >
      What is the primary benefit of using `#[Assert\Sequentially]` for a property?
    answers:
      - { value: "It allows you to define a specific order for constraints on a single property, stopping validation if an earlier constraint fails.", correct: true }
      - { value: "It ensures that all constraints on the property are executed, even if some fail.", correct: false }
      - { value: "It groups related constraints for better organization.", correct: false }
      - { value: "It enables conditional validation based on the property's value.", correct: false }
    help: |
      `Sequentially` is similar to `GroupSequence` but applies to a single property's constraints.
      https://symfony.com/doc/current/reference/constraints/Sequentially.html

  -
    question: >
      Which constraint is used to validate that a value is a valid range of numbers (e.g., "1-10" or "5..15")?
    answers:
      - { value: "`#[Assert\\Range]` (for single numeric value)", correct: false }
      - { value: "`#[Assert\\Regex]` (with a custom pattern)", correct: true }
      - { value: "`#[Assert\\NumericRange]`", correct: false }
      - { value: "`#[Assert\\Interval]`", correct: false }
    help: |
      Symfony's built-in `Range` constraint validates a single numeric value. For string representations of ranges, a `Regex` constraint with a custom pattern would be necessary.
      https://symfony.com/doc/current/reference/constraints/Regex.html

  -
    question: >
      What is the purpose of the `#[Assert\UniqueEntity]` constraint's `errorPath` option?
    answers:
      - { value: "To specify the property path where the uniqueness violation error should be placed.", correct: true }
      - { value: "To define the path to the entity being validated.", correct: false }
      - { value: "To indicate the database column that caused the uniqueness violation.", correct: false }
      - { value: "To set the base path for all errors related to the entity.", correct: false }
    help: |
      `errorPath` allows you to control where the violation message appears in the error list.
      https://symfony.com/doc/current/reference/constraints/UniqueEntity.html#errorpath

  -
    question: >
      Which constraint is used to validate that a value is a valid country subdivision (e.g., state, province)?
    answers:
      - { value: "`#[Assert\\CountrySubdivision]`", correct: true }
      - { value: "`#[Assert\\Region]`", correct: false }
      - { value: "`#[Assert\\StateProvince]`", correct: false }
      - { value: "`#[Assert\\AdministrativeArea]`", correct: false }
    help: |
      The `CountrySubdivision` constraint validates if a string is a valid country subdivision code.
      https://symfony.com/doc/current/reference/constraints/CountrySubdivision.html

  -
    question: >
      What is the purpose of the `#[Assert\Timezone]` constraint's `zone` option?
    answers:
      - { value: "To specify the type of timezone identifier to validate against (e.g., `INTL` or `PHP`).", correct: true }
      - { value: "To define a specific timezone to which the value must belong.", correct: false }
      - { value: "To set the default timezone for validation.", correct: false }
      - { value: "To indicate whether the timezone should be a UTC offset.", correct: false }
    help: |
      The `zone` option allows you to choose between different timezone identifier standards.
      https://symfony.com/doc/current/reference/constraints/Timezone.html#zone

  -
    question: >
      Which constraint is used to validate that a value is a valid regular expression?
    answers:
      - { value: "`#[Assert\\Regex(pattern: '/^\\/.+\\/[imsxADSUX]*$/')` (using Regex itself)", correct: true }
      - { value: "`#[Assert\\IsRegex]`", correct: false }
      - { value: "`#[Assert\\ValidRegex]`", correct: false }
      - { value: "`#[Assert\\PatternSyntax]`", correct: false }
    help: |
      There isn't a dedicated `IsRegex` constraint. You would typically use the `Regex` constraint itself with a pattern that validates regular expression syntax.
      https://symfony.com/doc/current/reference/constraints/Regex.html

  -
    question: >
      What is the purpose of the `#[Assert\Email]` constraint's `mode` option?
    answers:
      - { value: "To specify the validation mode for the email address (e.g., `strict`, `html5`).", correct: true }
      - { value: "To define the email address format (e.g., RFC, DNS).", correct: false }
      - { value: "To enable or disable DNS checking for the email domain.", correct: false }
      - { value: "To set the default email validation behavior.", correct: false }
    help: |
      The `mode` option allows you to choose different levels of strictness for email validation.
      https://symfony.com/doc/current/reference/constraints/Email.html#mode

  -
    question: >
      Which constraint is used to validate that a value is a valid BIC (SWIFT code)?
    answers:
      - { value: "`#[Assert\\Bic]`", correct: true }
      - { value: "`#[Assert\\SwiftCode]`", correct: false }
      - { value: "`#[Assert\\BankIdentifier]`", correct: false }
      - { value: "`#[Assert\\FinancialCode]`", correct: false }
    help: |
      The `Bic` constraint validates if a string is a valid BIC (Bank Identifier Code).
      https://symfony.com/doc/current/reference/constraints/Bic.html

  -
    question: >
      What is the purpose of the `#[Assert\File]` constraint's `mimeTypes` option?
    answers:
      - { value: "To specify an array of allowed MIME types for the uploaded file.", correct: true }
      - { value: "To define the default MIME type if none is provided.", correct: false }
      - { value: "To convert the file to a specific MIME type.", correct: false }
      - { value: "To check the file extension against a list of allowed types.", correct: false }
    help: |
      The `mimeTypes` option allows you to restrict file uploads to specific MIME types.
      https://symfony.com/doc/current/reference/constraints/File.html#mimetypes

  -
    question: >
      Which constraint is used to validate that a value is a valid locale code (e.g., "en_US")?
    answers:
      - { value: "`#[Assert\\Locale]`", correct: true }
      - { value: "`#[Assert\\LanguageCountry]`", correct: false }
      - { value: "`#[Assert\\Culture]`", correct: false }
      - { value: "`#[Assert\\IsoLocale]`", correct: false }
    help: |
      The `Locale` constraint validates if a string is a valid locale code.
      https://symfony.com/doc/current/reference/constraints/Locale.html

  -
    question: >
      What is the purpose of the `#[Assert\Count]` constraint's `min` option?
    answers:
      - { value: "To specify the minimum number of elements allowed in a collection.", correct: true }
      - { value: "To set the minimum value for each element in the collection.", correct: false }
      - { value: "To define the minimum length of the collection's name.", correct: false }
      - { value: "To limit the number of violations reported for the collection.", correct: false }
    help: |
      The `min` option of the `Count` constraint sets the lower bound for the collection size.
      https://symfony.com/doc/current/reference/constraints/Count.html#min

  -
    question: >
      What is the purpose of the `#[Assert\Count]` constraint's `max` option?
    answers:
      - { value: "To specify the maximum number of elements allowed in a collection.", correct: true }
      - { value: "To set the maximum value for each element in the collection.", correct: false }
      - { value: "To define the maximum length of the collection's name.", correct: false }
      - { value: "To limit the number of elements validated in the collection.", correct: false }
    help: |
      The `max` option of the `Count` constraint sets the upper bound for the collection size.
      https://symfony.com/doc/current/reference/constraints/Count.html#max

  -
    question: >
      Which constraint is used to validate that a value is a valid phone number?
    answers:
      - { value: "`#[Assert\\PhoneNumber]`", correct: true }
      - { value: "`#[Assert\\Tel]`", correct: false }
      - { value: "`#[Assert\\Mobile]`", correct: false }
      - { value: "`#[Assert\\Phone]`", correct: false }
    help: |
      The `PhoneNumber` constraint validates if a string is a valid phone number.
      https://symfony.com/doc/current/reference/constraints/PhoneNumber.html

  -
    question: >
      What is the purpose of the `#[Assert\File]` constraint's `maxSize` option?
    answers:
      - { value: "To specify the maximum allowed size for the uploaded file (e.g., '5M', '2048K').", correct: true }
      - { value: "To set the maximum number of files that can be uploaded.", correct: false }
      - { value: "To define the maximum dimension for an image file.", correct: false }
      - { value: "To limit the total size of all uploaded files.", correct: false }
    help: |
      The `maxSize` option limits the size of the uploaded file.
      https://symfony.com/doc/current/reference/constraints/File.html#maxsize

  -
    question: >
      What is the purpose of the `#[Assert\File]` constraint's `minSize` option?
    answers:
      - { value: "To specify the minimum allowed size for the uploaded file (e.g., '10K', '1M').", correct: true }
      - { value: "To set the minimum number of files that can be uploaded.", correct: false }
      - { value: "To define the minimum dimension for an image file.", correct: false }
      - { value: "To ensure a file is not empty.", correct: false }
    help: |
      The `minSize` option sets a lower limit for the size of the uploaded file.
      https://symfony.com/doc/current/reference/constraints/File.html#minsize

  -
    question: >
      Which constraint is used to validate that a value is a valid image file, checking dimensions and aspect ratio?
    answers:
      - { value: "`#[Assert\\Image]`", correct: true }
      - { value: "`#[Assert\\File(mimeTypes: ['image/*'])]`", correct: false }
      - { value: "`#[Assert\\Picture]`", correct: false }
      - { value: "`#[Assert\\Photo]`", correct: false }
    help: |
      The `Image` constraint extends `File` and adds image-specific validation options.
      https://symfony.com/doc/current/reference/constraints/Image.html

  -
    question: >
      What is the purpose of the `#[Assert\Image]` constraint's `minWidth` option?
    answers:
      - { value: "To specify the minimum allowed width in pixels for an image file.", correct: true }
      - { value: "To set the minimum width of the image thumbnail.", correct: false }
      - { value: "To define the minimum width of the image container.", correct: false }
      - { value: "To ensure the image is not too narrow.", correct: false }
    help: |
      The `minWidth` option sets the minimum width requirement for an image.
      https://symfony.com/doc/current/reference/constraints/Image.html#minwidth

  -
    question: >
      What is the purpose of the `#[Assert\Image]` constraint's `maxWidth` option?
    answers:
      - { value: "To specify the maximum allowed width in pixels for an image file.", correct: true }
      - { value: "To set the maximum width of the image thumbnail.", correct: false }
      - { value: "To define the maximum width of the image container.", correct: false }
      - { value: "To ensure the image is not too wide.", correct: false }
    help: |
      The `maxWidth` option sets the maximum width requirement for an image.
      https://symfony.com/doc/current/reference/constraints/Image.html#maxwidth

  -
    question: >
      What is the purpose of the `#[Assert\Image]` constraint's `minHeight` option?
    answers:
      - { value: "To specify the minimum allowed height in pixels for an image file.", correct: true }
      - { value: "To set the minimum height of the image thumbnail.", correct: false }
      - { value: "To define the minimum height of the image container.", correct: false }
      - { value: "To ensure the image is not too short.", correct: false }
    help: |
      The `minHeight` option sets the minimum height requirement for an image.
      https://symfony.com/doc/current/reference/constraints/Image.html#minheight

  -
    question: >
      What is the purpose of the `#[Assert\Image]` constraint's `maxHeight` option?
    answers:
      - { value: "To specify the maximum allowed height in pixels for an image file.", correct: true }
      - { value: "To set the maximum height of the image thumbnail.", correct: false }
      - { value: "To define the maximum height of the image container.", correct: false }
      - { value: "To ensure the image is not too tall.", correct: false }
    help: |
      The `maxHeight` option sets the maximum height requirement for an image.
      https://symfony.com/doc/current/reference/constraints/Image.html#maxheight

  -
    question: >
      What is the purpose of the `#[Assert\Image]` constraint's `allowSquare` option?
    answers:
      - { value: "If `true`, allows square images (width equals height).", correct: true }
      - { value: "If `true`, forces the image to be square.", correct: false }
      - { value: "If `true`, allows images with a 1:1 aspect ratio.", correct: false }
      - { value: "If `true`, allows images where width and height are multiples of each other.", correct: false }
    help: |
      The `allowSquare` option specifically permits square images.
      https://symfony.com/doc/current/reference/constraints/Image.html#allowsquare

  -
    question: >
      What is the purpose of the `#[Assert\Image]` constraint's `allowLandscape` option?
    answers:
      - { value: "If `true`, allows landscape-oriented images (width greater than height).", correct: true }
      - { value: "If `true`, forces the image to be landscape.", correct: false }
      - { value: "If `true`, allows images with a width-to-height ratio greater than 1.", correct: false }
      - { value: "If `true`, allows images where width is significantly larger than height.", correct: false }
    help: |
      The `allowLandscape` option specifically permits landscape-oriented images.
      https://symfony.com/doc/current/reference/constraints/Image.html#allowlandscape

  -
    question: >
      What is the purpose of the `#[Assert\Image]` constraint's `allowPortrait` option?
    answers:
      - { value: "If `true`, allows portrait-oriented images (height greater than width).", correct: true }
      - { value: "If `true`, forces the image to be portrait.", correct: false }
      - { value: "If `true`, allows images with a height-to-width ratio greater than 1.", correct: false }
      - { value: "If `true`, allows images where height is significantly larger than width.", correct: false }
    help: |
      The `allowPortrait` option specifically permits portrait-oriented images.
      https://symfony.com/doc/current/reference/constraints/Image.html#allowportrait

  -
    question: >
      Which constraint is used to validate that a value is a valid color, supporting various formats (e.g., hex, RGB, HSL)?
    answers:
      - { value: "`#[Assert\\CssColor]`", correct: true }
      - { value: "`#[Assert\\Color]`", correct: false }
      - { value: "`#[Assert\\ColorFormat]`", correct: false }
      - { value: "`#[Assert\\ColorCode]`", correct: false }
    help: |
      The `CssColor` constraint is versatile for validating different CSS color formats.
      https://symfony.com/doc/current/reference/constraints/CssColor.html

  -
    question: >
      What is the purpose of the `#[Assert\File]` constraint's `maxFiles` option?
    answers:
      - { value: "To specify the maximum number of files allowed in a collection of file uploads.", correct: true }
      - { value: "To set the maximum size for a single file.", correct: false }
      - { value: "To limit the total number of files that can be uploaded in a form.", correct: false }
      - { value: "To define the maximum number of files that can be processed simultaneously.", correct: false }
    help: |
      The `maxFiles` option is used when validating a collection of file uploads.
      https://symfony.com/doc/current/reference/constraints/File.html#maxfiles

  -
    question: >
      What is the purpose of the `#[Assert\File]` constraint's `minFiles` option?
    answers:
      - { value: "To specify the minimum number of files required in a collection of file uploads.", correct: true }
      - { value: "To set the minimum size for a single file.", correct: false }
      - { value: "To ensure at least one file is uploaded in a form.", correct: false }
      - { value: "To define the minimum number of files that must be processed.", correct: false }
    help: |
      The `minFiles` option is used when validating a collection of file uploads.
      https://symfony.com/doc/current/reference/constraints/File.html#minfiles

  -
    question: >
      Which constraint is used to validate that a value is a valid URL, including support for specific schemes (e.g., http, https, ftp)?
    answers:
      - { value: "`#[Assert\\Url(protocols: ['http', 'https'])]`", correct: true }
      - { value: "`#[Assert\\UrlScheme]`", correct: false }
      - { value: "`#[Assert\\ProtocolUrl]`", correct: false }
      - { value: "`#[Assert\\WebUrl]`", correct: false }
    help: |
      The `Url` constraint's `protocols` option allows you to restrict allowed URL schemes.
      https://symfony.com/doc/current/reference/constraints/Url.html#protocols

  -
    question: >
      What is the purpose of the `#[Assert\All]` constraint's `constraints` option?
    answers:
      - { value: "To define the list of constraints that will be applied to each element in the collection.", correct: true }
      - { value: "To specify the constraints that apply to the collection as a whole.", correct: false }
      - { value: "To list the constraints that are excluded from validation.", correct: false }
      - { value: "To define a group of constraints that must all pass.", correct: false }
    help: |
      The `constraints` option of `All` holds the constraints to be applied to each element.
      https://symfony.com/doc/current/reference/constraints/All.html#constraints

  -
    question: >
      Which constraint is used to validate that a value is a valid currency code (ISO 4217)?
    answers:
      - { value: "`#[Assert\\Currency]`", correct: true }
      - { value: "`#[Assert\\Money]`", correct: false }
      - { value: "`#[Assert\\IsoCurrency]`", correct: false }
      - { value: "`#[Assert\\FinancialCode]`", correct: false }
    help: |
      The `Currency` constraint validates if a string is a valid ISO 4217 currency code.
      https://symfony.com/doc/current/reference/constraints/Currency.html

  -
    question: >
      What is the purpose of the `#[Assert\Timezone]` constraint's `message` option?
    answers:
      - { value: "To customize the error message displayed when the value is not a valid timezone identifier.", correct: true }
      - { value: "To specify the default timezone message.", correct: false }
      - { value: "To define a message for a specific timezone.", correct: false }
      - { value: "To provide a hint for valid timezone formats.", correct: false }
    help: |
      The `message` option allows you to customize the violation message for the `Timezone` constraint.
      https://symfony.com/doc/current/reference/constraints/Timezone.html#message

  -
    question: >
      Which constraint is used to validate that a value is a valid locale code (e.g., "en_US")?
    answers:
      - { value: "`#[Assert\\Locale]`", correct: true }
      - { value: "`#[Assert\\LanguageCountry]`", correct: false }
      - { value: "`#[Assert\\Culture]`", correct: false }
      - { value: "`#[Assert\\IsoLocale]`", correct: false }
    help: |
      The `Locale` constraint validates if a string is a valid locale code.
      https://symfony.com/doc/current/reference/constraints/Locale.html

  -
    question: >
      What is the purpose of the `#[Assert\\UniqueEntity]` constraint's `repositoryMethod` option?
    answers:
      - { value: "To specify a custom repository method to use for checking uniqueness instead of the default `findBy`.", correct: true }
      - { value: "To define the repository class where the entity is stored.", correct: false }
      - { value: "To set the method used to fetch existing entities for comparison.", correct: false }
      - { value: "To provide a custom query builder for uniqueness checks.", correct: false }
    help: |
      `repositoryMethod` allows you to customize the query used for uniqueness checks.
      https://symfony.com/doc/current/reference/constraints/UniqueEntity.html#repositorymethod

  -
    question: >
      Which constraint is used to validate that a value is a valid UUID version 5?
    answers:
      - { value: "`#[Assert\\Uuid(versions: [5])]`", correct: true }
      - { value: "`#[Assert\\Uuid5]`", correct: false }
      - { value: "`#[Assert\\Uuid(version: 5)]`", correct: false }
      - { value: "`#[Assert\\Guid5]`", correct: false }
    help: |
      The `Uuid` constraint allows specifying allowed UUID versions using the `versions` option.
      https://symfony.com/doc/current/reference/constraints/Uuid.html#versions

  -
    question: >
      What is the purpose of the `#[Assert\\UniqueEntity]` constraint's `ignoreNull` option?
    answers:
      - { value: "If `true`, `null` values for the unique fields will be ignored, allowing multiple entities to have `null` for that field.", correct: true }
      - { value: "If `true`, it will only check for uniqueness if the field is not `null`.", correct: false }
      - { value: "If `true`, it will treat `null` as a unique value.", correct: false }
      - { value: "If `true`, it will prevent `null` values from being saved.", correct: false }
    help: |
      `ignoreNull` is useful for fields where `null` should not be considered a unique value.
      https://symfony.com/doc/current/reference/constraints/UniqueEntity.html#ignorenull

  -
    question: >
      Which constraint is used to validate that a value is a valid UUID version 1?
    answers:
      - { value: "`#[Assert\\Uuid(versions: [1])]`", correct: true }
      - { value: "`#[Assert\\Uuid1]`", correct: false }
      - { value: "`#[Assert\\Uuid(version: 1)]`", correct: false }
      - { value: "`#[Assert\\Guid1]`", correct: false }
    help: |
      The `Uuid` constraint allows specifying allowed UUID versions using the `versions` option.
      https://symfony.com/doc/current/reference/constraints/Uuid.html#versions

  -
    question: >
      What is the purpose of the `#[Assert\\UniqueEntity]` constraint's `message` option?
    answers:
      - { value: "To customize the error message displayed when a uniqueness violation occurs.", correct: true }
      - { value: "To define a generic message for all unique constraints.", correct: false }
      - { value: "To specify a success message when the entity is unique.", correct: false }
      - { value: "To provide a hint about the unique fields.", correct: false }
    help: |
      The `message` option allows you to customize the violation message for uniqueness errors.
      https://symfony.com/doc/current/reference/constraints/UniqueEntity.html#message

  -
    question: >
      Which constraint is used to validate that a value is a valid UUID version 6?
    answers:
      - { value: "`#[Assert\\Uuid(versions: [6])]`", correct: true }
      - { value: "`#[Assert\\Uuid6]`", correct: false }
      - { value: "`#[Assert\\Uuid(version: 6)]`", correct: false }
      - { value: "`#[Assert\\Guid6]`", correct: false }
    help: |
      The `Uuid` constraint allows specifying allowed UUID versions using the `versions` option.
      https://symfony.com/doc/current/reference/constraints/Uuid.html#versions