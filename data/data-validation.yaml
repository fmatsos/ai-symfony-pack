category: Data Validation

questions:
  -
    question: >
      Which of the following is the correct way to validate a scalar value (e.g., an email string) using the Symfony Validator component?
    answers:
      - { value: "Inject `ValidatorInterface` and call `$validator->validate($email, new Assert\\Email());`", correct: true }
      - { value: "Use `Validation::createValidator()->validateEmail($email);`", correct: false }
      - { value: "Pass the email string directly to a form type for validation.", correct: false }
      - { value: "Scalar values cannot be validated directly by the Symfony Validator.", correct: false }
    help: |
      To validate a scalar value, you inject the `ValidatorInterface` and pass the value along with the desired constraint(s) to the `validate()` method.
      https://symfony.com/doc/current/validation/raw_values.html#validating-raw-values

  -
    question: |
      Consider the following Symfony form type configuration:

      ```php
      use App\\Entity\\Client;
      use Symfony\\Component\\Form\\FormInterface;
      use Symfony\\Component\\OptionsResolver\\OptionsResolver;

      public function configureOptions(OptionsResolver $resolver): void
      {
          $resolver->setDefaults([
              'validation_groups' => function (FormInterface $form): array {
                  $data = $form->getData();

                  if (Client::TYPE_PERSON == $data->getType()) {
                      return ['person'];
                  }

                  return ['company'];
              },
          ]);
      }
      ```

      What will be the validation behavior if `Client::TYPE_PERSON` is matched, but the `Client` entity also has constraints defined in the `Default` group?
    answers:
      - { value: "Only constraints in the 'person' group will be validated.", correct: true }
      - { value: "Constraints in both 'person' and 'Default' groups will be validated.", correct: false }
      - { value: "No validation will occur, as 'Default' is not explicitly included.", correct: false }
      - { value: "An error will be thrown because the 'Default' group is omitted.", correct: false }
    help: |
      When `validation_groups` is set to a Closure or a static callback, only the groups explicitly returned by the callback will be validated. To include the `Default` group, it must be explicitly added to the returned array.
      https://symfony.com/doc/current/form/data_based_validation.html#data-based-validation

  -
    question: >
      Which of the following methods can be used to define validation metadata for a Symfony entity?
    answers:
      - { value: "PHP Attributes", correct: true }
      - { value: "YAML configuration files", correct: true }
      - { value: "XML configuration files", correct: true }
      - { value: "A static `loadValidatorMetadata()` method within the entity class", correct: true }
      - { value: "Annotations (deprecated in Symfony 6+)", correct: false }
    help: |
      Symfony supports defining validation metadata using PHP attributes, YAML, XML, and a static `loadValidatorMetadata()` method. Annotations are deprecated in Symfony 6+.
      https://symfony.com/doc/current/validation.html#configuration-formats

  -
    question: |
      Given the following entity:

      ```php
      namespace App\\Entity;

      use Symfony\\Component\\Validator\\Constraints as Assert;

      class User
      {
          #[Assert\\Email(groups: ['registration'])]
          private string $email;

          #[Assert\\NotBlank(groups: ['registration'])]
          #[Assert\\Length(min: 7, groups: ['registration'])]
          private string $password;

          #[Assert\\Length(min: 2)]
          private string $city;
      }
      ```

      How would you validate only the `email` and `password` properties, which belong to the `registration` group, using the `ValidatorInterface`?
    answers:
      - { value: "`$validator->validate($user, null, ['registration']);`", correct: true }
      - { value: "`$validator->validate($user, ['email', 'password']);`", correct: false }
      - { value: "`$validator->validate($user, new Assert\\Group('registration'));`", correct: false }
      - { value: "`$validator->validate($user, null, 'registration');`", correct: true }
    help: |
      The `validate()` method of `ValidatorInterface` accepts an optional third argument for validation groups. You can pass a string or an array of strings representing the group names.
      https://symfony.com/doc/current/validation/groups.html#validation-groups

  -
    question: >
      What is the purpose of the `#[Assert\\Valid]` attribute in Symfony's validation component?
    answers:
      - { value: "To mark a property as valid if it passes all its own constraints.", correct: false }
      - { value: "To ensure that a nested object's properties are also validated.", correct: true }
      - { value: "To apply a default set of validation rules to an entire class.", correct: false }
      - { value: "To skip validation for a specific property.", correct: false }
    help: |
      The `#[Assert\\Valid]` attribute is used on properties that hold other objects. When applied, it tells the validator to recursively validate the nested object's properties as well.
      https://symfony.com/doc/current/reference/constraints/Valid.html

  -
    question: >
      When defining a custom validation constraint, which class must its associated validator extend?
    answers:
      - { value: "`Symfony\\Component\\Validator\\ConstraintValidator`", correct: true }
      - { value: "`Symfony\\Component\\Validator\\ValidatorInterface`", correct: false }
      - { value: "`Symfony\\Component\\Validator\\Constraint`", correct: false }
      - { value: "`Symfony\\Component\\Validator\\Validation`", correct: false }
    help: |
      A custom constraint's validator class must extend `Symfony\\Component\\Validator\\ConstraintValidator` and implement the `validate()` method.
      https://symfony.com/doc/current/validation/custom_constraint.html#the-validator-class

  -
    question: |
      You are implementing a custom validation constraint. Inside the `validate()` method of your validator, how do you register a validation violation?
    answers:
      - { value: "`$this->context->addViolation($constraint->message);`", correct: false }
      - { value: "`$this->context->buildViolation($constraint->message)->addViolation();`", correct: true }
      - { value: "`$this->addViolation($constraint->message);`", correct: false }
      - { value: "`$this->validator->addViolation($constraint->message);`", correct: false }
    help: |
      To register a violation, you use the `context` property of the validator. You call `buildViolation()` to create a violation builder, optionally set parameters, and then call `addViolation()`.
      https://symfony.com/doc/current/validation/custom_constraint.html#the-validator-class

  -
    question: >
      What is the purpose of a `GroupSequence` in Symfony validation?
    answers:
      - { value: "To define a specific order in which validation groups are applied.", correct: true }
      - { value: "To group multiple constraints under a single name.", correct: false }
      - { value: "To apply validation only if certain conditions are met.", correct: false }
      - { value: "To skip validation for an entire object.", correct: false }
    help: |
      A `GroupSequence` allows you to define a sequence of validation groups. If any constraint in an earlier group fails, subsequent groups in the sequence are not validated.
      https://symfony.com/doc/current/validation/sequence_provider.html

  -
    question: >
      Which of the following built-in Symfony validation constraints is used to ensure a value falls within a specified numeric or date range?
    answers:
      - { value: "`#[Assert\\Range]`", correct: true }
      - { value: "`#[Assert\\Length]`", correct: false }
      - { value: "`#[Assert\\GreaterThan]`", correct: false }
      - { value: "`#[Assert\\LessThanOrEqual]`", correct: false }
    help: |
      The `#[Assert\\Range]` constraint is used to check if a value is within a specified minimum and maximum.
      https://symfony.com/doc/current/reference/constraints/Range.html

  -
    question: >
      When validating an object with a `GroupSequence`, what happens if a constraint in an earlier group fails?
    answers:
      - { value: "Validation stops immediately, and subsequent groups are not checked.", correct: true }
      - { value: "All groups are still validated, but errors are reported for all.", correct: false }
      - { value: "The failing constraint is skipped, and validation continues with the next group.", correct: false }
      - { value: "An exception is thrown, halting the application.", correct: false }
    help: |
      The core concept of a `GroupSequence` is to provide a "fail-fast" mechanism. If a constraint in an earlier group fails, the validation process for that object stops, and no further groups in the sequence are evaluated.
      https://symfony.com/doc/current/validation/sequence_provider.html

  -
    question: >
      How can you apply validation constraints directly to individual fields within a Symfony form when it's NOT mapped to a data class?
    answers:
      - { value: "By adding a `constraints` option to the `add()` method for each field in `buildForm()`.", correct: true }
      - { value: "By defining constraints in the `configureOptions()` method using the `data_class` option.", correct: false }
      - { value: "By creating a separate validator service for each field.", correct: false }
      - { value: "It's not possible to validate forms not mapped to a data class.", correct: false }
    help: |
      When a form is not mapped to a data class, you can apply constraints directly to individual fields using the `constraints` option within the `add()` method in `buildForm()`.
      https://symfony.com/doc/current/form/without_class.html#adding-field-level-validation

  -
    question: >
      Which of the following is the correct way to disable validation groups for a Symfony form?
    answers:
      - { value: "Set the `validation_groups` option to `false` in `configureOptions()`.", correct: true }
      - { value: "Set the `validation_groups` option to an empty array `[]`.", correct: false }
      - { value: "Call `$form->disableValidation();` in the controller.", correct: false }
      - { value: "Remove all `#[Assert]` attributes from the entity.", correct: false }
    help: |
      To disable validation groups for a form, you set the `validation_groups` option to `false` in its `configureOptions()` method. Note that some basic integrity checks (e.g., file size) might still apply.
      https://symfony.com/doc/current/form/disabling_validation.html

  -
    question: |
      You need to validate an array of data, ensuring that specific keys exist and have certain properties (e.g., `name` is not blank, `email` is a valid email). Which built-in Symfony constraint should you use?
    answers:
      - { value: "`#[Assert\\Collection]`", correct: true }
      - { value: "`#[Assert\\All]`", correct: false }
      - { value: "`#[Assert\\Array]`", correct: false }
      - { value: "`#[Assert\\Each]`", correct: false }
    help: |
      The `#[Assert\\Collection]` constraint is designed for validating array structures, allowing you to define constraints for specific keys within the array.
      https://symfony.com/doc/current/reference/constraints/Collection.html

  -
    question: >
      What is the primary purpose of the `payload` option in a Symfony validation constraint?
    answers:
      - { value: "To attach arbitrary custom data to a validation violation.", correct: true }
      - { value: "To define the error message for the constraint.", correct: false }
      - { value: "To specify the validation groups for the constraint.", correct: false }
      - { value: "To set the severity level of the validation error (e.g., warning, error).", correct: false }
    help: |
      The `payload` option allows you to attach any arbitrary custom data to a constraint. This data can then be retrieved from the `ConstraintViolation` object, which is useful for advanced error handling or UI customization.
      https://symfony.com/doc/current/validation/severity.html#retrieving-the-payload

  -
    question: >
      Which of the following is a valid way to define validation constraints for a property named `firstName` in a Symfony entity using YAML?
    answers:
      - { value: '''App\\Entity\\Author:
    properties:
        firstName:
            - NotBlank: ~
            - Length:
                min: 3''' , correct: true }
      - { value: '''App\\Entity\\Author:
    firstName:
        NotBlank:
        Length: { min: 3 }''' , correct: false }
      - { value: '''properties:
    App\\Entity\\Author.firstName:
        - NotBlank:
        - Length: { min: 3 }''' , correct: false }
      - { value: '''validation:
    Author:
        firstName:
            NotBlank: true
            Length: { min: 3 }''' , correct: false }
    help: |
      YAML validation configuration for entities follows a specific structure: the fully qualified class name, followed by `properties`, and then the property name with a list of constraints.
      https://symfony.com/doc/current/validation.html#yaml

  -
    question: >
      When using the `#[Assert\\When]` constraint, what type of expression is typically used to define the condition under which nested constraints are applied?
    answers:
      - { value: "A Symfony Expression Language expression.", correct: true }
      - { value: "A PHP callable or Closure.", correct: false }
      - { value: "A simple boolean value.", correct: false }
      - { value: "A regular expression string.", correct: false }
    help: |
      The `#[Assert\\When]` constraint uses the Symfony Expression Language to define the `expression` that determines whether its nested constraints should be evaluated.
      https://symfony.com/doc/current/reference/constraints/When.html

  -
    question: >
      What is the default validation group applied when you call `$validator->validate($object);` without specifying any groups?
    answers:
      - { value: "The `Default` group.", correct: true }
      - { value: "All defined groups.", correct: false }
      - { value: "No groups are applied by default.", correct: false }
      - { value: "The first group defined in the entity's metadata.", correct: false }
    help: |
      By default, if no validation groups are explicitly passed to the `validate()` method, only constraints belonging to the `Default` group are checked.
      https://symfony.com/doc/current/validation/groups.html#validation-groups

  -
    question: >
      Which of the following built-in constraints can be used to ensure that a collection (e.g., an array of strings) contains only unique elements?
    answers:
      - { value: "`#[Assert\\Unique]`", correct: true }
      - { value: "`#[Assert\\Distinct]`", correct: false }
      - { value: "`#[Assert\\NoRepeats]`", correct: false }
      - { value: "`#[Assert\\Singular]`", correct: false }
    help: |
      The `#[Assert\\Unique]` constraint is used to ensure that all elements in a collection are unique.
      https://symfony.com/doc/current/reference/constraints/Unique.html

  -
    question: >
      What happens if you set the `stopOnFirstError` option to `true` for the `#[Assert\\Unique]` constraint?
    answers:
      - { value: "Validation will stop at the first duplicate element found in the collection.", correct: true }
      - { value: "The entire validation process for the object will halt.", correct: false }
      - { value: "Only the first error message will be displayed, but all duplicates are still found.", correct: false }
      - { value: "The constraint will be ignored if any other validation error occurs.", correct: false }
    help: |
      The `stopOnFirstError` option, when set to `true`, causes the `#[Assert\\Unique]` constraint to stop processing the collection and return a violation as soon as the first non-unique element is detected.
      https://symfony.com/doc/current/reference/constraints/Unique.html#stoponfirsterror

  -
    question: |
      You have a `User` entity with a `password` property. You want to ensure it's not blank and has a minimum length of 7 characters, specifically for a 'registration' process. Which PHP attribute configuration is correct?
    answers:
      - { value: '''#[Assert\\NotBlank(groups: ['registration'])]
#[Assert\\Length(min: 7, groups: ['registration'])]
private string $password;''' , correct: true }
      - { value: '''#[Assert\\NotBlank, Assert\\Length(min: 7)]
private string $password;''' , correct: false }
      - { value: '''#[Assert\\All([new Assert\\NotBlank(), new Assert\\Length(min: 7)], groups: ['registration'])]
private string $password;''' , correct: false }
      - { value: '''#[Assert\\Group('registration')]
#[Assert\\NotBlank]
#[Assert\\Length(min: 7)]
private string $password;''' , correct: false }
    help: |
      To assign constraints to a specific validation group using PHP attributes, you pass an array of group names to the `groups` option of each constraint.
      https://symfony.com/doc/current/validation/groups.html#validation-groups

  -
    question: >
      Which interface must a service implement to be registered with the `validator.initializer` tag in Symfony?
    answers:
      - { value: "`Symfony\\Component\\Validator\\ObjectInitializerInterface`", correct: true }
      - { value: "`Symfony\\Component\\Validator\\ValidatorInterface`", correct: false }
      - { value: "`Symfony\\Component\\Validator\\ConstraintValidatorInterface`", correct: false }
      - { value: "`Symfony\\Component\\Validator\\Mapping\\ClassMetadataFactoryInterface`", correct: false }
    help: |
      Services tagged with `validator.initializer` must implement `Symfony\\Component\\Validator\\ObjectInitializerInterface`. This allows them to perform actions on objects right before validation occurs.
      https://symfony.com/doc/current/reference/dic_tags.html#validator-initializer

  -
    question: >
      What is the primary benefit of using a static `loadValidatorMetadata()` method within an entity class for defining validation constraints?
    answers:
      - { value: "It allows for programmatic definition of constraints, which can be conditional or dynamic.", correct: true }
      - { value: "It is the only way to define validation groups.", correct: false }
      - { value: "It completely replaces the need for PHP attributes or YAML/XML configuration.", correct: false }
      - { value: "It automatically integrates with Doctrine ORM for database-level validation.", correct: false }
    help: |
      The `loadValidatorMetadata()` static method provides a programmatic way to define constraints, offering flexibility for conditional logic or more complex constraint setups that might be harder to express in declarative formats like attributes or YAML/XML.
      https://symfony.com/doc/current/components/validator/resources.html#the-static-method

  -
    question: >
      When validating an object with `ValidatorInterface::validate()`, what is the return type of this method?
    answers:
      - { value: "`Symfony\\Component\\Validator\\ConstraintViolationListInterface`", correct: true }
      - { value: "`array`", correct: false }
      - { value: "`bool`", correct: false }
      - { value: "`Symfony\\Component\\Validator\\ConstraintViolation`", correct: false }
    help: |
      The `validate()` method returns a `ConstraintViolationListInterface` object, which is a collection of `ConstraintViolation` objects if any errors are found.
      https://symfony.com/doc/current/validation/groups.html#validation-groups (See API documentation for validate method)

  -
    question: >
      Which of the following is a valid use case for a custom callback validator in Symfony?
    answers:
      - { value: "Validating a password against a username (e.g., password cannot be the same as username).", correct: true }
      - { value: "Checking if an email address is in a valid format.", correct: false }
      - { value: "Ensuring a string has a minimum length.", correct: false }
      - { value: "Validating that a number is within a specific range.", correct: false }
    help: |
      Custom callback validators are ideal for complex validation logic that cannot be covered by built-in constraints, such as cross-field validation (e.g., comparing password and username).
      https://symfony.com/doc/current/validation/custom_constraint.html#callback-constraint

  -
    question: >
      What is the purpose of `ConstraintViolationBuilderInterface::setParameter()` when building a validation violation?
    answers:
      - { value: "To replace placeholders in the violation message with dynamic values.", correct: true }
      - { value: "To define the validation group for the violation.", correct: false }
      - { value: "To set the severity level of the violation.", correct: false }
      - { value: "To specify the property path where the violation occurred.", correct: false }
    help: |
      `setParameter()` is used to replace placeholders (e.g., `{{ value }}`) in the constraint's error message with actual dynamic values relevant to the violation.
      https://symfony.com/doc/current/validation/custom_constraint.html#the-validator-class

  -
    question: >
      When using the `#[Assert\\Range]` constraint for a `DateTimeInterface` property, what is the expected format for the `min` and `max` options?
    answers:
      - { value: "Any string parsable by the `DateTime` constructor.", correct: true }
      - { value: "A Unix timestamp.", correct: false }
      - { value: "A `DateTimeImmutable` object.", correct: false }
      - { value: "A specific 'YYYY-MM-DD' string format.", correct: false }
    help: |
      For `DateTimeInterface` properties, the `min` and `max` options of the `#[Assert\\Range]` constraint accept any string that can be successfully parsed by PHP's `DateTime` constructor.
      https://symfony.com/doc/current/reference/constraints/Range.html#min-and-max-options

  -
    question: >
      Which of the following is a correct way to get the `payload` from a `ConstraintViolation` object?
    answers:
      - { value: "`$constraintViolation->getConstraint()->payload;`", correct: true }
      - { value: "`$constraintViolation->getPayload();`", correct: false }
      - { value: "`$constraintViolation->payload;`", correct: false }
      - { value: "`$constraintViolation->getConstraint()->getPayload();`", correct: false }
    help: |
      The `payload` is an option of the `Constraint` itself, so you first retrieve the constraint from the violation and then access its `payload` property.
      https://symfony.com/doc/current/validation/severity.html#retrieving-the-payload

  -
    question: >
      What is the purpose of the `errorPath` option in the `#[Assert\\Unique]` constraint?
    answers:
      - { value: "To bind the validation error message to a specific field within the first item of the collection.", correct: true }
      - { value: "To define the path to the unique identifier property.", correct: false }
      - { value: "To specify the property that should be checked for uniqueness.", correct: false }
      - { value: "To log the error to a specific file path.", correct: false }
    help: |
      The `errorPath` option allows you to direct the validation error message of the `#[Assert\\Unique]` constraint to a specific field within the collection's first item, using PropertyAccess syntax.
      https://symfony.com/doc/current/reference/constraints/Unique.html#errorpath

  -
    question: >
      When handling a Symfony form submission, what is the correct order of methods to call after creating the form object to process the request and check for validity?
    answers:
      - { value: "`$form->handleRequest($request);` then `if ($form->isSubmitted() && $form->isValid()) { ... }`", correct: true }
      - { value: "`$form->isValid();` then `$form->handleRequest($request);`", correct: false }
      - { value: "`$form->submit($request);` then `if ($form->isValid()) { ... }`", correct: false }
      - { value: "`$form->isSubmitted();` then `$form->isValid();` then `$form->handleRequest($request);`", correct: false }
    help: |
      The correct sequence is to first call `handleRequest()` to populate the form with submitted data, and then check `isSubmitted()` and `isValid()` to determine if the form was submitted and if its data passed validation.
      https://symfony.com/doc/current/forms.html#handling-form-submissions

  -
    question: >
      Which of the following is a valid way to define a `GroupSequence` for a `User` entity using PHP attributes?
    answers:
      - { value: '''#[Assert\\GroupSequence(['User', 'Strict'])]
class User
{
    // ...
}''' , correct: true }
      - { value: '''#[Assert\\Sequence(['User', 'Strict'])]
class User
{
    // ...
}''' , correct: false }
      - { value: '''#[Assert\\ValidationGroupSequence(['User', 'Strict'])]
class User
{
    // ...
}''' , correct: false }
      - { value: '''#[Assert\\Groups(['User', 'Strict'], sequence: true)]
class User
{
    // ...
}''' , correct: false }
    help: |
      The `#[Assert\\GroupSequence]` attribute is used at the class level to define a sequential validation order for groups.
      https://symfony.com/doc/current/validation/sequence_provider.html#group-sequence-provider

  -
    question: >
      What is the primary purpose of the `normalizer` option in the `#[Assert\\Unique]` constraint?
    answers:
      - { value: "To apply a PHP callable to each element of the collection before checking for uniqueness.", correct: true }
      - { value: "To convert the collection into a canonical format for comparison.", correct: false }
      - { value: "To normalize the error messages generated by the constraint.", correct: false }
      - { value: "To strip HTML tags from string elements before validation.", correct: false }
    help: |
      The `normalizer` option allows you to specify a PHP callable that will be applied to each element of the collection before the uniqueness check is performed. This is useful for tasks like trimming whitespace or converting to lowercase to ensure accurate comparisons.
      https://symfony.com/doc/current/reference/constraints/Unique.html#normalizer

  -
    question: >
      When should you use `Symfony\\Component\\Validator\\Validation::createCallable()`?
    answers:
      - { value: "When you need a closure that throws a `ValidationFailedException` if constraints are not matched.", correct: true }
      - { value: "To create a new instance of the validator service.", correct: false }
      - { value: "To dynamically add constraints to an object at runtime.", correct: false }
      - { value: "To generate a list of all available validation constraints.", correct: false }
    help: |
      `Validation::createCallable()` returns a closure that can be used in contexts like `OptionsResolver` or console command answers, which will throw a `ValidationFailedException` if the provided value does not satisfy the specified constraints.
      https://symfony.com/doc/current/validation.html#validation-callable-methods

  -
    question: |
      You have a form where an 'other_text' field should only be required if a 'how_did_you_hear' field has the value 'other'. Which constraint allows you to implement this conditional validation?
    answers:
      - { value: "`#[Assert\\When]`", correct: true }
      - { value: "`#[Assert\\Callback]`", correct: false }
      - { value: "`#[Assert\\Expression]`", correct: false }
      - { value: "`#[Assert\\Conditional]`", correct: false }
    help: |
      The `#[Assert\\When]` constraint is specifically designed for conditional validation, allowing you to apply nested constraints only when a given Expression Language condition evaluates to true.
      https://symfony.com/doc/current/form/without_class.html#conditional-validation

  -
    question: >
      What is the purpose of the `data_class` option in a Symfony form type's `configureOptions` method?
    answers:
      - { value: "To specify the class that the form will map its data to.", correct: true }
      - { value: "To define the validation groups for the form.", correct: false }
      - { value: "To set the default values for the form fields.", correct: false }
      - { value: "To indicate that the form should not be validated.", correct: false }
    help: |
      The `data_class` option tells the form which class its submitted data should be mapped to, enabling automatic data hydration and validation against that class's constraints.
      https://symfony.com/doc/current/forms.html#defining-the-form-class

  -
    question: >
      Which of the following is NOT a valid way to define validation constraints in Symfony?
    answers:
      - { value: "Using a `.json` file for constraint definitions.", correct: true }
      - { value: "Using PHP attributes directly on entity properties.", correct: false }
      - { value: "Using YAML files in `config/validator/validation.yaml`.", correct: false }
      - { value: "Using a static `loadValidatorMetadata()` method in the entity class.", correct: false }
    help: |
      Symfony's Validator component supports PHP attributes, YAML, XML, and static `loadValidatorMetadata()` methods for defining constraints. JSON is not a supported format for constraint definitions.
      https://symfony.com/doc/current/validation.html#configuration-formats

  -
    question: >
      What is the primary difference between `Symfony\\Component\\Validator\\Validation::createCallable()` and `Symfony\\Component\\Validator\\Validation::createIsValidCallable()`?
    answers:
      - { value: "The former throws an exception on failure, the latter returns `false`.", correct: true }
      - { value: "The former is for objects, the latter is for scalar values.", correct: false }
      - { value: "The former is for single constraints, the latter is for multiple constraints.", correct: false }
      - { value: "There is no functional difference; they are aliases.", correct: false }
    help: |
      `createCallable()` returns a closure that throws a `ValidationFailedException` if validation fails, while `createIsValidCallable()` returns a closure that simply returns `false` on failure.
      https://symfony.com/doc/current/validation.html#validation-callable-methods

  -
    question: >
      When implementing a custom constraint validator, what should you do if the `$value` passed to the `validate()` method is `null` or an empty string?
    answers:
      - { value: "Return immediately without adding a violation, as constraints typically ignore null/empty values.", correct: true }
      - { value: "Throw an `UnexpectedValueException`.", correct: false }
      - { value: "Add a `NotBlank` violation automatically.", correct: false }
      - { value: "Convert the value to a default before validation.", correct: false }
    help: |
      Custom constraints are generally expected to ignore `null` and empty string values. This allows other constraints like `NotBlank` to handle the "empty" check. If your constraint should specifically validate against emptiness, you would add that logic.
      https://symfony.com/doc/current/validation/custom_constraint.html#the-validator-class

  -
    question: >
      How does Symfony's validation component typically handle validation constraints inferred from Doctrine ORM metadata (e.g., `nullable=false`)?
    answers:
      - { value: "It automatically converts them into equivalent Symfony validation constraints (e.g., `NotNull`).", correct: true }
      - { value: "It ignores them, requiring explicit Symfony constraints.", correct: false }
      - { value: "It only applies them if a specific Doctrine validation group is activated.", correct: false }
      - { value: "It throws an error if there's a mismatch between Doctrine and Symfony constraints.", correct: false }
    help: |
      Symfony's Validator component can leverage Doctrine ORM mapping information (like `nullable=false` or `length` definitions) to automatically infer and apply corresponding validation constraints without explicit definition.
      https://symfony.com/doc/current/doctrine.html#validating-objects

  -
    question: >
      When using the `#[Assert\\Collection]` constraint, which nested constraint is used to apply a set of constraints to ALL elements within an array property?
    answers:
      - { value: "`#[Assert\\All]`", correct: true }
      - { value: "`#[Assert\\Each]`", correct: false }
      - { value: "`#[Assert\\Map]`", correct: false }
      - { value: "`#[Assert\\List]`", correct: false }
    help: |
      The `#[Assert\\All]` constraint is used within a `Collection` constraint to apply a set of constraints to every element of an array or traversable property.
      https://symfony.com/doc/current/reference/constraints/Collection.html#all

  -
    question: >
      What is the purpose of the `invalidDateTimeMessage` option in the `#[Assert\\Range]` constraint?
    answers:
      - { value: "To define the error message when the input value is not a valid date/time string, and `min`/`max` are also dates.", correct: true }
      - { value: "To specify the message when the date is outside the allowed range.", correct: false }
      - { value: "To set the message for invalid date format in general.", correct: false }
      - { value: "To provide a message when the `min` or `max` options are invalid date formats.", correct: false }
    help: |
      `invalidDateTimeMessage` is specifically for when the `min` and `max` options are date-based, but the validated value itself cannot be parsed as a valid date/time.
      https://symfony.com/doc/current/reference/constraints/Range.html#invalidDateTimeMessage

  -
    question: >
      Which of the following built-in validation constraints is suitable for ensuring that a string value matches or does not match a given regular expression?
    answers:
      - { value: "`#[Assert\\Regex]`", correct: true }
      - { value: "`#[Assert\\Pattern]`", correct: false }
      - { value: "`#[Assert\\Match]`", correct: false }
      - { value: "`#[Assert\\Expression]`", correct: false }
    help: |
      The `#[Assert\\Regex]` constraint is used to validate a string against a regular expression pattern.
      https://symfony.com/doc/current/reference/constraints/Regex.html

  -
    question: >
      When using the `#[Assert\\Regex]` constraint, how can you make the validation pass only if the given string DOES NOT match the pattern?
    answers:
      - { value: "Set the `match` option to `false`.", correct: true }
      - { value: "Set the `inverse` option to `true`.", correct: false }
      - { value: "Use a negative lookahead assertion in the regex pattern.", correct: false }
      - { value: "Set the `notMatch` option to `true`.", correct: false }
    help: |
      The `match` option of the `#[Assert\\Regex]` constraint, when set to `false`, inverts the validation logic, so it passes only if the string does NOT match the pattern.
      https://symfony.com/doc/current/reference/constraints/Regex.html#match

  -
    question: >
      What is the primary purpose of `Symfony\\Component\\Validator\\ConstraintViolationListInterface`?
    answers:
      - { value: "To represent a collection of validation errors.", correct: true }
      - { value: "To define the structure of a single validation error.", correct: false }
      - { value: "To provide methods for validating objects.", correct: false }
      - { value: "To list all available validation constraints.", correct: false }
    help: |
      `ConstraintViolationListInterface` is the interface for the object returned by the `ValidatorInterface::validate()` method, which contains zero or more `ConstraintViolation` objects representing validation errors.
      https://symfony.com/doc/current/validation.html#validating-objects

  -
    question: >
      Which of the following is a valid way to define a `NotBlank` constraint for a property named `name` in a Symfony entity using XML?
    answers:
      - { value: '''<class name="App\\Entity\\Author">
    <property name="name">
        <constraint name="NotBlank"/>
    </property>
</class>''' , correct: true }
      - { value: '''<constraint-mapping>
    <property name="App\\Entity\\Author.name">
        <NotBlank/>
    </property>
</constraint-mapping>''' , correct: false }
      - { value: '''<class name="App\\Entity\\Author" property="name">
    <constraint name="NotBlank"/>
</class>''' , correct: false }
      - { value: '''<constraint name="NotBlank" for="App\\Entity\\Author.name"/>''' , correct: false }
    help: |
      XML validation configuration uses `<class>` tags for entities and `<property>` tags for properties, with nested `<constraint>` tags for each constraint.
      https://symfony.com/doc/current/validation.html#xml

  -
    question: >
      When using the `#[Assert\\Length]` constraint, what happens if the validated value is `null`?
    answers:
      - { value: "The value is considered valid, and the constraint is not triggered.", correct: true }
      - { value: "A `NotBlank` violation is automatically added.", correct: false }
      - { value: "An exception is thrown because `null` cannot have a length.", correct: false }
      - { value: "The `min` option is ignored, but `max` is still checked.", correct: false }
    help: |
      The `#[Assert\\Length]` constraint, like many others, considers `null` values as valid and does not trigger a violation. If you need to ensure a value is not null, you should use `#[Assert\\NotBlank]` or `#[Assert\\NotNull]`.
      https://symfony.com/doc/current/reference/constraints/Length.html#min

  -
    question: >
      You are building a custom validation constraint and its validator. Inside the `validate()` method, how should you handle an unexpected type for the `$value` argument (e.g., expecting a string but receiving an integer)?
    answers:
      - { value: "Throw an `UnexpectedValueException`.", correct: true }
      - { value: "Add a violation using `buildViolation()`.", correct: false }
      - { value: "Return `false` to indicate an invalid type.", correct: false }
      - { value: "Log a warning and attempt to cast the value.", correct: false }
    help: |
      If your custom validator receives a value of an unexpected type, it should throw an `UnexpectedValueException` to indicate that it cannot properly handle the given type.
      https://symfony.com/doc/current/validation/custom_constraint.html#the-validator-class

  -
    question: >
      Which built-in Symfony constraint is used to validate that a property contains a valid email address?
    answers:
      - { value: "`#[Assert\\Email]`", correct: true }
      - { value: "`#[Assert\\IsEmail]`", correct: false }
      - { value: "`#[Assert\\Mail]`", correct: false }
      - { value: "`#[Assert\\EmailAddress]`", correct: false }
    help: |
      The `#[Assert\\Email]` constraint is specifically designed to validate email addresses.
      https://symfony.com/doc/current/reference/constraints/Email.html

  -
    question: >
      What is the purpose of the `verify_key` option in the Memcached cache adapter configuration in Symfony?
    answers:
      - { value: "To enable or disable the testing and verification of all keys used in Memcached operations for validity.", correct: true }
      - { value: "To verify the integrity of the Memcached server connection.", correct: false }
      - { value: "To ensure that cached data is not corrupted.", correct: false }
      - { value: "To validate that the Memcached server is reachable.", correct: false }
    help: |
      The `verify_key` option in the Memcached adapter configuration controls whether all keys used in Memcached operations are tested and verified for validity and adherence to the protocol.
      https://symfony.com/doc/current/components/cache/adapters/memcached_adapter.html#memcached-adapter

  -
    question: >
      When is the `onPreSubmit` event dispatched during Symfony form processing?
    answers:
      - { value: "Before any data is bound to the form, allowing manipulation of the raw submitted data.", correct: true }
      - { value: "After data is bound but before validation.", correct: false }
      - { value: "After validation, but before the form is marked as valid.", correct: false }
      - { value: "After the form is submitted and valid, just before saving data.", correct: false }
    help: |
      The `FormEvents::PRE_SUBMIT` event is dispatched at the very beginning of the form submission process, before any data is bound to the form. This is the ideal place to modify the raw submitted data based on other submitted values.
      https://symfony.com/doc/current/form/events.html#form-events-pre-submit

  -
    question: >
      What is the primary use case for `Symfony\\Component\\Uid\\Ulid::isValid()`?
    answers:
      - { value: "To check if a given string value is a valid ULID.", correct: true }
      - { value: "To generate a new ULID.", correct: false }
      - { value: "To convert a ULID to a UUID.", correct: false }
      - { value: "To compare two ULIDs for equality.", correct: false }
    help: |
      `Ulid::isValid()` is a static method used to determine if a provided string or `Ulid` object represents a syntactically valid ULID.
      https://symfony.com/doc/current/components/uid.html#ulid

  -
    question: >
      Which of the following is the correct way to validate a `Product` entity using the `ValidatorInterface` in a Symfony controller?
    answers:
      - { value: "`$errors = $validator->validate($product);`", correct: true }
      - { value: "`$product->validate();`", correct: false }
      - { value: "`$validator->validateEntity($product);`", correct: false }
      - { value: "`$errors = $this->get('validator')->validate($product);`", correct: false }
    help: |
      You inject the `ValidatorInterface` service into your controller and then call its `validate()` method, passing the entity object as the argument.
      https://symfony.com/doc/current/validation.html#validating-objects

  -
    question: >
      When denormalizing data with the Symfony Serializer, what option can be used to ensure that an exception is thrown if the denormalized data is missing any properties defined in the target class?
    answers:
      - { value: "`AbstractNormalizer::REQUIRE_ALL_PROPERTIES`", correct: true }
      - { value: "`AbstractNormalizer::STRICT_MODE`", correct: false }
      - { value: "`AbstractNormalizer::THROW_ON_MISSING_PROPERTY`", correct: false }
      - { value: "`AbstractNormalizer::DENY_PARTIAL_DATA`", correct: false }
    help: |
      The `AbstractNormalizer::REQUIRE_ALL_PROPERTIES` context option ensures that all properties defined in the target class must be present in the denormalized data, throwing a `MissingConstructorArgumentException` if any are missing.
      https://symfony.com/doc/current/serializer.html#missing-properties

  -
    question: >
      What is the purpose of `Symfony\\Component\\Intl\\Languages::exists()`?
    answers:
      - { value: "To check if a given language code (alpha-2 or alpha-3) exists.", correct: true }
      - { value: "To get the full name of a language from its code.", correct: false }
      - { value: "To retrieve a list of all supported language codes.", correct: false }
      - { value: "To validate if a string contains valid UTF-8 characters.", correct: false }
    help: |
      `Languages::exists()` is a utility method to quickly check if a provided language code (e.g., 'en', 'fr', 'eng') is a valid and recognized language.
      https://symfony.com/doc/current/components/intl.html#languages

  -
    question: >
      Which of the following is the correct way to define a `NotBlank` constraint for a property named `task` in a Symfony entity using PHP attributes?
    answers:
      - { value: '''#[Assert\\NotBlank]
public string $task;''' , correct: true }
      - { value: '''#[NotBlank]
public string $task;''' , correct: false }
      - { value: '''@NotBlank
public string $task;''' , correct: false }
      - { value: '''#[Constraint(NotBlank::class)]
public string $task;''' , correct: false }
    help: |
      PHP attributes for validation constraints are typically prefixed with `Assert\\` and placed directly above the property.
      https://symfony.com/doc/current/validation.html#php-attributes

  -
    question: >
      What is the primary advantage of using PHP attributes for defining validation constraints compared to YAML or XML files?
    answers:
      - { value: "Constraints are defined directly within the entity class, keeping related code together.", correct: true }
      - { value: "It provides more powerful conditional validation logic.", correct: false }
      - { value: "It offers better performance during validation.", correct: false }
      - { value: "It allows for easier translation of error messages.", correct: false }
    help: |
      PHP attributes offer the benefit of co-locating validation rules directly with the properties they apply to, improving readability and maintainability by keeping related code in one place.
      https://symfony.com/doc/current/validation.html#php-attributes

  -
    question: >
      When defining a `GroupSequence` in YAML, what is the correct key to specify the sequence of groups?
    answers:
      - { value: "`group_sequence`", correct: true }
      - { value: "`groups_order`", correct: false }
      - { value: "`validation_sequence`", correct: false }
      - { value: "`sequence_groups`", correct: false }
    help: |
      In YAML configuration, the `group_sequence` key is used at the class level to define the ordered list of validation groups for a `GroupSequence`.
      https://symfony.com/doc/current/validation/sequence_provider.html#group-sequence-provider

  -
    question: >
      Which of the following is a valid way to define a `Length` constraint with a minimum of 5 and maximum of 20 for a property named `name` using a static `loadValidatorMetadata()` method?
    answers:
      - { value: '''$metadata->addPropertyConstraint('name', new Assert\\Length(min: 5, max: 20));''' , correct: true }
      - { value: '''$metadata->addConstraint('name', 'Length', ['min' => 5, 'max' => 20]);''' , correct: false }
      - { value: '''$metadata->setConstraint('name', new Assert\\Length(['min' => 5, 'max' => 20]));''' , correct: false }
      - { value: '''$metadata->addPropertyConstraint('name', 'Length', ['min' => 5, 'max' => 20]);''' , correct: false }
    help: |
      Within `loadValidatorMetadata()`, you use `addPropertyConstraint()` and pass an instance of the constraint with its options.
      https://symfony.com/doc/current/components/validator/resources.html#the-static-method

  -
    question: >
      What is the purpose of the `invalidMessage` option in the `#[Assert\\Range]` constraint when `min` and `max` are numeric?
    answers:
      - { value: "To define the error message when the input value is not a valid number.", correct: true }
      - { value: "To specify the message when the number is outside the allowed range.", correct: false }
      - { value: "To set the message for general validation failures.", correct: false }
      - { value: "To provide a message when the `min` or `max` options are not valid numbers.", correct: false }
    help: |
      `invalidMessage` is specifically for when the `min` and `max` options are numeric, but the validated value itself cannot be parsed as a valid number.
      https://symfony.com/doc/current/reference/constraints/Range.html#invalidMessage

  -
    question: >
      You have an `Author` entity with a nested `Address` object. To ensure that the `Address` object's properties (e.g., `street`, `zipCode`) are also validated when validating the `Author`, what constraint must be applied to the `address` property in `Author`?
    answers:
      - { value: "`#[Assert\\Valid]`", correct: true }
      - { value: "`#[Assert\\Nested]`", correct: false }
      - { value: "`#[Assert\\Object]`", correct: false }
      - { value: "`#[Assert\\Cascade]`", correct: false }
    help: |
      The `#[Assert\\Valid]` constraint is used to trigger validation on nested objects.
      https://symfony.com/doc/current/reference/constraints/Valid.html

  -
    question: >
      When dynamically choosing validation groups for a Symfony form using a Closure, how can you ensure that the `Default` validation group is also applied along with your dynamically selected groups?
    answers:
      - { value: "Explicitly include `'Default'` in the array returned by the Closure.", correct: true }
      - { value: "The `Default` group is always applied automatically.", correct: false }
      - { value: "Set a separate `default_validation_group` option.", correct: false }
      - { value: "Call `$form->addValidationGroup('Default');` inside the Closure.", correct: false }
    help: |
      If you dynamically select validation groups, you must explicitly include `'Default'` in the returned array if you want its constraints to be applied.
      https://symfony.com/doc/current/form/data_based_validation.html#including-the-default-group

  -
    question: >
      Which of the following is a correct way to define a `GroupSequence` for a `User` entity using YAML?
    answers:
      - { value: '''App\\Entity\\User:
    group_sequence:
        - User
        - Strict''' , correct: true }
      - { value: '''App\\Entity\\User:
    validation_groups:
        sequence: [User, Strict]''' , correct: false }
      - { value: '''App\\Entity\\User:
    groups:
        - User
        - Strict''' , correct: false }
      - { value: '''App\\Entity\\User:
    sequence_provider:
        groups: [User, Strict]''' , correct: false }
    help: |
      In YAML, the `group_sequence` key directly under the class name defines the ordered list of groups for a `GroupSequence`.
      https://symfony.com/doc/current/validation/sequence_provider.html#group-sequence-provider

  -
    question: >
      What is the purpose of `Symfony\\Component\\Uid\\Uuid::isValid()` when used with format constants (e.g., `Uuid::FORMAT_RFC_4122`)?
    answers:
      - { value: "To validate if a UUID string conforms to specific UUID formats (e.g., RFC 4122, Base32).", correct: true }
      - { value: "To convert a UUID from one format to another.", correct: false }
      - { value: "To generate a UUID in a specific format.", correct: false }
      - { value: "To check if a UUID is globally unique.", correct: false }
    help: |
      `Uuid::isValid()` can take a second argument, which is a bitmask of `Uuid::FORMAT_` constants, allowing you to validate a UUID string against one or more specific formats.
      https://symfony.com/doc/current/components/uid.html#uuid

  -
    question: >
      When defining validation constraints for a form that is NOT mapped to a data class, where can you define the constraints for the entire form (as a collection)?
    answers:
      - { value: "In the `configureOptions()` method, using the `constraints` option with an `Assert\\Collection`.", correct: true }
      - { value: "In the `buildForm()` method, by adding a `constraints` option to the form builder.", correct: false }
      - { value: "In a separate validation YAML file for the form type.", correct: false }
      - { value: "It is not possible to define form-level constraints for unmapped forms.", correct: false }
    help: |
      For forms not mapped to a data class, form-level constraints (e.g., for cross-field validation) can be defined in the `configureOptions()` method using the `constraints` option, typically with an `Assert\\Collection` constraint.
      https://symfony.com/doc/current/form/without_class.html#adding-form-level-validation

  -
    question: >
      What is the primary purpose of `Symfony\\Component\\Validator\\Validator\\ValidatorInterface`?
    answers:
      - { value: "To validate objects and values against defined constraints.", correct: true }
      - { value: "To define custom validation constraints.", correct: false }
      - { value: "To manage validation groups and sequences.", correct: false }
      - { value: "To provide a factory for creating validator instances.", correct: false }
    help: |
      `ValidatorInterface` is the central service for performing validation in Symfony. Its `validate()` method is used to check objects or values against their configured constraints.
      https://symfony.com/doc/current/validation.html#validating-objects

  -
    question: >
      Which of the following is a valid way to define a `NotBlank` constraint for a property named `firstName` in a Symfony entity using PHP?
    answers:
      - { value: '''#[Assert\\NotBlank]
private string $firstName;''' , correct: true }
      - { value: '''public static function loadValidatorMetadata(ClassMetadata $metadata): void
{
    $metadata->addPropertyConstraint('firstName', new Assert\\NotBlank());
}''' , correct: true }
      - { value: '''private string $firstName = new Assert\\NotBlank();''' , correct: false }
      - { value: '''#[Constraint(NotBlank::class)]
private string $firstName;''' , correct: false }
    help: |
      Constraints can be defined using PHP attributes directly on the property or programmatically within a static `loadValidatorMetadata()` method.
      https://symfony.com/doc/current/validation.html#php-attributes and https://symfony.com/doc/current/validation.html#the-static-method

  -
    question: >
      What is the main advantage of using validation groups?
    answers:
      - { value: "To apply different sets of validation rules based on the context (e.g., registration vs. profile update).", correct: true }
      - { value: "To group similar constraints together for better organization.", correct: false }
      - { value: "To improve validation performance by only loading necessary constraints.", correct: false }
      - { value: "To define a fallback validation mechanism.", correct: false }
    help: |
      Validation groups allow you to selectively apply constraints based on the specific scenario or "group" of validation needed, which is crucial for different forms or stages of an object's lifecycle.
      https://symfony.com/doc/current/validation/groups.html

  -
    question: >
      When should you consider creating a custom validation constraint and validator in Symfony?
    answers:
      - { value: "When no built-in constraint can fulfill the required validation logic.", correct: true }
      - { value: "For every validation rule in your application.", correct: false }
      - { value: "Only for cross-field validation scenarios.", correct: false }
      - { value: "To improve the performance of simple validation rules.", correct: false }
    help: |
      Custom constraints are for complex or highly specific validation rules that cannot be achieved with existing built-in constraints or combinations thereof.
      https://symfony.com/doc/current/validation/custom_constraint.html

  -
    question: >
      What is the purpose of the `min` option in the `#[Assert\\Length]` constraint?
    answers:
      - { value: "To set the minimum required length for the validated value.", correct: true }
      - { value: "To define the minimum numeric value allowed.", correct: false }
      - { value: "To specify the minimum number of items in a collection.", correct: false }
      - { value: "To set the minimum file size for an uploaded file.", correct: false }
    help: |
      The `min` option of the `#[Assert\\Length]` constraint specifies the smallest acceptable length for a string or array.
      https://symfony.com/doc/current/reference/constraints/Length.html#min

  -
    question: >
      How can you retrieve the current (invalid) value from a `ConstraintViolation` object for display in an error message?
    answers:
      - { value: "`$violation->getInvalidValue();`", correct: true }
      - { value: "`$violation->getValue();`", correct: false }
      - { value: "`$violation->getConstraint()->value;`", correct: false }
      - { value: "`$violation->getMessageParameters()['{{ value }}'];`", correct: false }
    help: |
      The `getInvalidValue()` method on a `ConstraintViolation` object returns the value that caused the violation.
      https://symfony.com/doc/current/validation.html#displaying-violations

  -
    question: >
      What is the primary role of the `ConstraintViolationBuilderInterface` in Symfony's validation component?
    answers:
      - { value: "To construct and configure a new validation violation.", correct: true }
      - { value: "To define the properties of a custom constraint.", correct: false }
      - { value: "To manage the list of all validation errors.", correct: false }
      - { value: "To resolve validation groups for an object.", correct: false }
    help: |
      The `ConstraintViolationBuilderInterface` provides a fluent API for creating and configuring `ConstraintViolation` objects within a custom validator.
      https://symfony.com/doc/current/validation/custom_constraint.html#the-validator-class

  -
    question: >
      Which of the following is a built-in Symfony constraint used to ensure a string is not empty or contains only whitespace?
    answers:
      - { value: "`#[Assert\\NotBlank]`", correct: true }
      - { value: "`#[Assert\\NotEmpty]`", correct: false }
      - { value: "`#[Assert\\NotNull]`", correct: false }
      - { value: "`#[Assert\\Required]`", correct: false }
    help: |
      The `#[Assert\\NotBlank]` constraint checks if a string is not empty and does not consist solely of whitespace characters.
      https://symfony.com/doc/current/reference/constraints/NotBlank.html

  -
    question: >
      When using `#[Assert\\Collection]`, which option is used to define constraints for keys that are optional in the input array?
    answers:
      - { value: "`Optional`", correct: true }
      - { value: "`AllowMissing`", correct: false }
      - { value: "`Sometimes`", correct: false }
      - { value: "`Nullable`", correct: false }
    help: |
      The `Optional` key within the `#[Assert\\Collection]` constraint allows you to define constraints for keys that might not be present in the input array without causing a violation if they are missing.
      https://symfony.com/doc/current/reference/constraints/Collection.html#optional

  -
    question: >
      What is the purpose of `Symfony\\Component\\Uid\\Ulid::getDateTime()`?
    answers:
      - { value: "To extract the timestamp from a ULID as a `DateTimeImmutable` instance.", correct: true }
      - { value: "To convert a ULID to a human-readable date string.", correct: false }
      - { value: "To set the creation timestamp of a ULID.", correct: false }
      - { value: "To compare the timestamps of two ULIDs.", correct: false }
    help: |
      ULIDs are time-ordered, and `getDateTime()` allows you to retrieve the `DateTimeImmutable` object representing the timestamp embedded within the ULID.
      https://symfony.com/doc/current/components/uid.html#ulid

  -
    question: >
      When handling a `TransformationFailedException` in a Symfony data transformer, which method should you use to set a public error message for the user?
    answers:
      - { value: "`$failure->setInvalidMessage($publicErrorMessage, ['{{ value }}' => $issueNumber]);`", correct: true }
      - { value: "`$failure->setMessage($publicErrorMessage);`", correct: false }
      - { value: "`$failure->setPublicMessage($publicErrorMessage);`", correct: false }
      - { value: "`$failure->addViolation($publicErrorMessage);`", correct: false }
    help: |
      The `setInvalidMessage()` method on a `TransformationFailedException` allows you to provide a user-friendly public message, optionally with placeholders, which will be displayed to the user.
      https://symfony.com/doc/current/form/data_transformers.html#data-transformers-validation

  -
    question: >
      Which of the following is a valid way to define a `Length` constraint with a minimum of 3 for a property named `firstName` in a Symfony entity using YAML?
    answers:
      - { value: '''App\\Entity\\Author:
    properties:
        firstName:
            - Length:
                min: 3''' , correct: true }
      - { value: '''App\\Entity\\Author:
    firstName:
        Length: { min: 3 }''' , correct: false }
      - { value: '''properties:
    firstName:
        Length:
            min: 3''' , correct: false }
      - { value: '''validation:
    Author:
        firstName:
            Length: 3''' , correct: false }
    help: |
      YAML configuration for constraints requires the constraint name followed by its options, indented.
      https://symfony.com/doc/current/validation.html#yaml

  -
    question: >
      What is the purpose of the `peer_fingerprint` option in Symfony's HTTP client configuration?
    answers:
      - { value: "To validate the public key fingerprint of the server's TLS certificate, aborting the connection if it doesn't match.", correct: true }
      - { value: "To provide a client-side certificate for mutual TLS authentication.", correct: false }
      - { value: "To encrypt the communication between the client and the server.", correct: false }
      - { value: "To verify the hostname of the server against its certificate.", correct: false }
    help: |
      The `peer_fingerprint` option allows for strict validation of the server's public key fingerprint. If the fingerprint extracted from the server's certificate does not match any of the provided fingerprints, the connection is aborted.
      https://symfony.com/doc/current/reference/configuration/framework.html#peer-fingerprint

  -
    question: >
      When validating an object with a `GroupSequence`, how is the "Default" group typically included in the sequence?
    answers:
      - { value: "By explicitly listing `'Default'` as one of the groups in the sequence.", correct: true }
      - { value: "The "Default" group is always implicitly included at the beginning of any sequence.", correct: false }
      - { value: "It is automatically added if no other groups are specified in the sequence.", correct: false }
      - { value: "You cannot mix "Default" with custom groups in a sequence.", correct: false }
    help: |
      When defining a `GroupSequence`, you must explicitly include `'Default'` in the sequence array if you want the default constraints to be applied as part of the sequential validation.
      https://symfony.com/doc/current/validation/sequence_provider.html#group-sequence-provider

  -
    question: >
      What is the purpose of `Symfony\\Component\\Intl\\Languages::getAlpha3Code()`?
    answers:
      - { value: "To convert a two-letter (alpha-2) language code to its three-letter (alpha-3) equivalent.", correct: true }
      - { value: "To retrieve the full language name from an alpha-3 code.", correct: false }
      - { value: "To validate if an alpha-3 code exists.", correct: false }
      - { value: "To get a list of all alpha-3 language codes.", correct: false }
    help: |
      `Languages::getAlpha3Code()` provides a convenient way to convert an ISO 639-1 (alpha-2) language code to its ISO 639-2/T (alpha-3) equivalent.
      https://symfony.com/doc/current/components/intl.html#languages

  -
    question: >
      Which of the following is the correct way to define a `NotBlank` constraint for a property named `name` in a Symfony entity using a static `loadValidatorMetadata()` method?
    answers:
      - { value: '''public static function loadValidatorMetadata(ClassMetadata $metadata): void
{
    $metadata->addPropertyConstraint('name', new NotBlank());
}''' , correct: true }
      - { value: '''public static function loadValidatorMetadata(ClassMetadata $metadata): void
{
    $metadata->addConstraint('name', new NotBlank());
}''' , correct: false }
      - { value: '''public static function loadValidatorMetadata(ClassMetadata $metadata): void
{
    $metadata->setConstraint('name', new NotBlank());
}''' , correct: false }
      - { value: '''public static function loadValidatorMetadata(ClassMetadata $metadata): void
{
    $metadata->addPropertyConstraint(new NotBlank(), 'name');
}''' , correct: false }
    help: |
      The `addPropertyConstraint()` method of `ClassMetadata` is used to add constraints to properties programmatically.
      https://symfony.com/doc/current/validation.html#the-static-method

  -
    question: >
      What is the primary benefit of using Data Transfer Objects (DTOs) with validation constraints in Symfony controllers?
    answers:
      - { value: "To decouple validation logic from entities and forms, making controllers cleaner and more focused.", correct: true }
      - { value: "To automatically persist data to the database after validation.", correct: false }
      - { value: "To replace the need for Symfony Forms entirely.", correct: false }
      - { value: "To enforce strict type-hinting for all request parameters.", correct: false }
    help: |
      DTOs provide a clean way to represent incoming request data and apply validation rules to it, separating this concern from the domain entities and simplifying controller logic.
      https://symfony.com/doc/current/controller.html#mapping-the-whole-query-string-into-an-object

  -
    question: >
      When configuring a `RedisSessionHandler` in Symfony, what does the `ttl` option define?
    answers:
      - { value: "The Time-To-Live (TTL) for session data in Redis, in seconds.", correct: true }
      - { value: "The maximum number of sessions to store in Redis.", correct: false }
      - { value: "The timeout for connecting to the Redis server.", correct: false }
      - { value: "The frequency at which session data is garbage collected.", correct: false }
    help: |
      The `ttl` option for the `RedisSessionHandler` specifies the Time-To-Live for session data stored in Redis, determining how long a session remains valid.
      https://symfony.com/doc/current/session.html#redis-session-handler

  -
    question: >
      Which of the following describes the correct behavior of `Symfony\\Component\\String\\ByteString::isUtf8()`?
    answers:
      - { value: "It returns `true` if the `ByteString` object contains valid UTF-8 content, `false` otherwise.", correct: true }
      - { value: "It converts the `ByteString` to UTF-8 if it's not already.", correct: false }
      - { value: "It checks if the `ByteString` is empty.", correct: false }
      - { value: "It determines the encoding of the `ByteString`.", correct: false }
    help: |
      The `isUtf8()` method on a `ByteString` object is used to verify if the string's contents are valid UTF-8 encoded.
      https://symfony.com/doc/current/string.html#checking-utf-8-validity

  -
    question: >
      What is the primary purpose of `Symfony\\Component\\Validator\\Validation::createValidator()`?
    answers:
      - { value: "To create a new, standalone validator instance.", correct: true }
      - { value: "To retrieve the default validator service from the container.", correct: false }
      - { value: "To register custom validation constraints.", correct: false }
      - { value: "To configure global validation settings.", correct: false }
    help: |
      `Validation::createValidator()` is a factory method used to create a new validator instance, typically for standalone use cases outside of the Symfony Framework's service container.
      https://symfony.com/doc/current/components/validator.html#getting-the-validator

  -
    question: >
      When should you use `Symfony\\Component\\Intl\\Languages::alpha3CodeExists()`?
    answers:
      - { value: "To check if a given three-letter (alpha-3) language code exists.", correct: true }
      - { value: "To convert a two-letter code to a three-letter code.", correct: false }
      - { value: "To get the name of a language from its alpha-3 code.", correct: false }
      - { value: "To validate if a language code is valid for a specific locale.", correct: false }
    help: |
      `Languages::alpha3CodeExists()` is specifically for validating the existence of ISO 639-2/T (alpha-3) language codes.
      https://symfony.com/doc/current/components/intl.html#languages

  -
    question: >
      What is the purpose of the `message` option in the `#[Assert\\Unique]` constraint?
    answers:
      - { value: "To define the error message shown if at least one element is repeated in the collection.", correct: true }
      - { value: "To specify a custom message for each unique element.", correct: false }
      - { value: "To set the default message for all validation errors.", correct: false }
      - { value: "To provide a message for when the collection is empty.", correct: false }
    help: |
      The `message` option allows you to customize the error message displayed when the `#[Assert\\Unique]` constraint detects duplicate elements in the collection.
      https://symfony.com/doc/current/reference/constraints/Unique.html#message

  -
    question: >
      Which of the following is a valid way to define a `Length` constraint with a minimum of 3 for a property named `firstName` in a Symfony entity using XML?
    answers:
      - { value: '''<class name="App\\Entity\\Author">
    <property name="firstName">
        <constraint name="Length">
            <option name="min">3</option>
        </constraint>
    </property>
</class>''' , correct: true }
      - { value: '''<constraint-mapping>
    <property name="App\\Entity\\Author.firstName" min="3"/>
</constraint-mapping>''' , correct: false }
      - { value: '''<class name="App\\Entity\\Author" property="firstName" constraint="Length" min="3"/>''' , correct: false }
      - { value: '''<constraint name="Length" for="App\\Entity\\Author.firstName" min="3"/>''' , correct: false }
    help: |
      In XML, constraint options are defined using nested `<option>` tags within the `<constraint>` tag.
      https://symfony.com/doc/current/validation.html#xml

  -
    question: >
      When processing a Symfony form submission, why might you need to `array_merge()` external JSON data with `Request::getPayload()->all()` before calling `$form->submit()`?
    answers:
      - { value: "To ensure all expected form fields, including those from a frontend framework, are present for validation.", correct: true }
      - { value: "To prevent cross-site request forgery (CSRF) attacks.", correct: false }
      - { value: "To encrypt the submitted data before processing.", correct: false }
      - { value: "To automatically convert JSON data into PHP objects.", correct: false }
    help: |
      Frontend frameworks often send data in a different structure (e.g., raw JSON body) than what Symfony forms expect (e.g., URL-encoded form data). Merging ensures all necessary fields are available for the form to process and validate correctly.
      https://symfony.com/doc/current/form/direct_submit.html

  -
    question: >
      What is the purpose of the `max` option in the `#[Assert\\Range]` constraint?
    answers:
      - { value: "To set the upper limit for the validated value.", correct: true }
      - { value: "To define the maximum number of items in a collection.", correct: false }
      - { value: "To specify the maximum length for a string.", correct: false }
      - { value: "To set the maximum file size for an uploaded file.", correct: false }
    help: |
      The `max` option of the `#[Assert\\Range]` constraint defines the largest acceptable value. Validation fails if the value is greater than this maximum.
      https://symfony.com/doc/current/reference/constraints/Range.html#max

  -
    question: >
      Which of the following is a valid way to define a `NotBlank` constraint for a property named `firstName` in a Symfony entity using PHP attributes?
    answers:
      - { value: '''#[Assert\\NotBlank]
private string $firstName;''' , correct: true }
      - { value: '''#[NotBlank]
private string $firstName;''' , correct: false }
      - { value: '''@NotBlank
private string $firstName;''' , correct: false }
      - { value: '''#[Constraint(NotBlank::class)]
private string $firstName;''' , correct: false }
    help: |
      PHP attributes for validation constraints are typically prefixed with `Assert\\` and placed directly above the property.
      https://symfony.com/doc/current/validation.html#php-attributes

  -
    question: >
      What is the purpose of `Symfony\\Component\\Uid\\Ulid::compare()`?
    answers:
      - { value: "To compare two ULID objects and return an integer indicating their relative order.", correct: true }
      - { value: "To check if two ULID objects are exactly equal.", correct: false }
      - { value: "To determine if one ULID is older than another.", correct: false }
      - { value: "To sort a collection of ULID objects.", correct: false }
    help: |
      `Ulid::compare()` performs a three-way comparison between two ULID objects, returning -1, 0, or 1, similar to PHP's spaceship operator (`<=>`).
      https://symfony.com/doc/current/components/uid.html#ulid

  -
    question: >
      Which of the following is a valid way to define a `NotBlank` constraint for a property named `firstName` in a Symfony entity using YAML?
    answers:
      - { value: '''App\\Entity\\Author:
    properties:
        firstName:
            - NotBlank: ~''' , correct: true }
      - { value: '''App\\Entity\\Author:
    firstName: NotBlank''' , correct: false }
      - { value: '''properties:
    firstName:
        - NotBlank''' , correct: false }
      - { value: '''validation:
    Author:
        firstName: NotBlank''' , correct: false }
    help: |
      In YAML, a simple constraint without options can be defined using `ConstraintName: ~`.
      https://symfony.com/doc/current/validation.html#yaml

  -
    question: >
      When defining validation constraints for a form that is NOT mapped to a data class, how can you apply constraints to individual fields?
    answers:
      - { value: "By adding a `constraints` option to the `add()` method for each field in `buildForm()`.", correct: true }
      - { value: "By defining constraints in the `configureOptions()` method using the `data_class` option.", correct: false }
      - { value: "By creating a separate validator service for each field.", correct: false }
      - { value: "It's not possible to validate forms not mapped to a data class.", correct: false }
    help: |
      For forms not mapped to a data class, field-level constraints are applied directly in the `buildForm()` method using the `constraints` option of the `add()` method.
      https://symfony.com/doc/current/form/without_class.html#adding-field-level-validation

  -
    question: >
      What is the purpose of `Symfony\\Component\\Intl\\Languages::getAlpha2Code()`?
    answers:
      - { value: "To convert a three-letter (alpha-3) language code to its two-letter (alpha-2) equivalent.", correct: true }
      - { value: "To retrieve the full language name from an alpha-2 code.", correct: false }
      - { value: "To validate if an alpha-2 code exists.", correct: false }
      - { value: "To get a list of all alpha-2 language codes.", correct: false }
    help: |
      `Languages::getAlpha2Code()` provides a convenient way to convert an ISO 639-2/T (alpha-3) language code to its ISO 639-1 (alpha-2) equivalent.
      https://symfony.com/doc/current/components/intl.html#languages

  -
    question: >
      Which of the following is the correct way to define a `NotBlank` constraint for a property named `name` in a Symfony entity using XML?
    answers:
      - { value: '''<class name="App\\Entity\\Author">
    <property name="name">
        <constraint name="NotBlank"/>
    </property>
</class>''' , correct: true }
      - { value: '''<constraint-mapping>
    <property name="App\\Entity\\Author.name">
        <NotBlank/>
    </property>
</constraint-mapping>''' , correct: false }
      - { value: '''<class name="App\\Entity\\Author" property="name">
    <constraint name="NotBlank"/>
</class>''' , correct: false }
      - { value: '''<constraint name="NotBlank" for="App\\Entity\\Author.name"/>''' , correct: false }
    help: |
      XML validation configuration uses `<class>` tags for entities and `<property>` tags for properties, with nested `<constraint>` tags for each constraint.
      https://symfony.com/doc/current/validation.html#xml

  -
    question: >
      What is the purpose of the `invalidDateTimeMessage` option in the `#[Assert\\Range]` constraint?
    answers:
      - { value: "To define the error message when the input value is not a valid date/time string, and `min`/`max` are also dates.", correct: true }
      - { value: "To specify the message when the date is outside the allowed range.", correct: false }
      - { value: "To set the message for invalid date format in general.", correct: false }
      - { value: "To provide a message when the `min` or `max` options are invalid date formats.", correct: false }
    help: |
      `invalidDateTimeMessage` is specifically for when the `min` and `max` options are date-based, but the validated value itself cannot be parsed as a valid date/time.
      https://symfony.com/doc/current/reference/constraints/Range.html#invalidDateTimeMessage

  -
    question: >
      When defining a custom validation constraint, what should you do if the `$constraint` object passed to the `validate()` method is not an instance of your custom constraint class?
    answers:
      - { value: "Throw an `UnexpectedTypeException`.", correct: true }
      - { value: "Return immediately without adding a violation.", correct: false }
      - { value: "Log a warning and attempt to cast the constraint.", correct: false }
      - { value: "Add a generic violation message.", correct: false }
    help: |
      It's crucial to ensure that the `$constraint` object is of the expected type. If not, an `UnexpectedTypeException` should be thrown to indicate a misconfiguration or incorrect usage of the validator.
      https://symfony.com/doc/current/validation/custom_constraint.html#the-validator-class

  -
    question: >
      Which of the following is a valid way to define a `Length` constraint with a minimum of 3 for a property named `firstName` in a Symfony entity using PHP attributes?
    answers:
      - { value: '''#[Assert\\Length(min: 3)]
private string $firstName;''' , correct: true }
      - { value: '''#[Length(min: 3)]
private string $firstName;''' , correct: false }
      - { value: '''#[Constraint(Length::class, min: 3)]
private string $firstName;''' , correct: false }
      - { value: '''#[Assert\\Length(['min' => 3])]
private string $firstName;''' , correct: false }
    help: |
      PHP attributes for validation constraints are typically prefixed with `Assert\\` and options are passed as named arguments.
      https://symfony.com/doc/current/validation.html#php-attributes

  -
    question: >
      What is the purpose of the `invalidMessage` option in the `#[Assert\\Range]` constraint when `min` and `max` are numeric?
    answers:
      - { value: "To define the error message when the input value is not a valid number.", correct: true }
      - { value: "To specify the message when the number is outside the allowed range.", correct: false }
      - { value: "To set the message for general validation failures.", correct: false }
      - { value: "To provide a message when the `min` or `max` options are not valid numbers.", correct: false }
    help: |
      `invalidMessage` is specifically for when the `min` and `max` options are numeric, but the validated value itself cannot be parsed as a valid number.
      https://symfony.com/doc/current/reference/constraints/Range.html#invalidMessage

  -
    question: >
      Which of the following is a valid way to define a `NotBlank` constraint for a property named `task` in a Symfony entity using YAML?
    answers:
      - { value: '''App\\Entity\\Task:
    properties:
        task:
            - NotBlank: ~''' , correct: true }
      - { value: '''App\\Entity\\Task:
    task: NotBlank''' , correct: false }
      - { value: '''properties:
    task:
        - NotBlank''' , correct: false }
      - { value: '''validation:
    Task:
        task: NotBlank''' , correct: false }
    help: |
      In YAML, a simple constraint without options can be defined using `ConstraintName: ~`.
      https://symfony.com/doc/current/validation.html#yaml

  -
    question: >
      What is the purpose of `Symfony\\Component\\Uid\\Ulid::equals()`?
    answers:
      - { value: "To check if two ULID objects represent the exact same ULID value.", correct: true }
      - { value: "To compare the timestamps of two ULIDs.", correct: false }
      - { value: "To determine if one ULID is a subset of another.", correct: false }
      - { value: "To convert a ULID to a string for comparison.", correct: false }
    help: |
      `Ulid::equals()` is used to determine if two `Ulid` objects have the same underlying value.
      https://symfony.com/doc/current/components/uid.html#ulid

  -
    question: >
      Which of the following is a valid way to define a `NotBlank` constraint for a property named `task` in a Symfony entity using XML?
    answers:
      - { value: '''<class name="App\\Entity\\Task">
    <property name="task">
        <constraint name="NotBlank"/>
    </property>
</class>''' , correct: true }
      - { value: '''<constraint-mapping>
    <property name="App\\Entity\\Task.task">
        <NotBlank/>
    </property>
</constraint-mapping>''' , correct: false }
      - { value: '''<class name="App\\Entity\\Task" property="task">
    <constraint name="NotBlank"/>
</class>''' , correct: false }
      - { value: '''<constraint name="NotBlank" for="App\\Entity\\Task.task"/>''' , correct: false }
    help: |
      XML validation configuration uses `<class>` tags for entities and `<property>` tags for properties, with nested `<constraint>` tags for each constraint.
      https://symfony.com/doc/current/validation.html#xml

  -
    question: >
      When defining a `GroupSequence` in XML, what is the correct tag to specify the sequence of groups?
    answers:
      - { value: "`<group-sequence>`", correct: true }
      - { value: "`<groups-order>`", correct: false }
      - { value: "`<validation-sequence>`", correct: false }
      - { value: "`<sequence-groups>`", correct: false }
    help: |
      In XML configuration, the `<group-sequence>` tag is used at the class level to define the ordered list of validation groups for a `GroupSequence`.
      https://symfony.com/doc/current/validation/sequence_provider.html#group-sequence-provider

  -
    question: >
      Which of the following is a valid way to define a `NotBlank` constraint for a property named `task` in a Symfony entity using a static `loadValidatorMetadata()` method?
    answers:
      - { value: '''public static function loadValidatorMetadata(ClassMetadata $metadata): void
{
    $metadata->addPropertyConstraint('task', new NotBlank());
}''' , correct: true }
      - { value: '''public static function loadValidatorMetadata(ClassMetadata $metadata): void
{
    $metadata->addConstraint('task', new NotBlank());
}''' , correct: false }
      - { value: '''public static function loadValidatorMetadata(ClassMetadata $metadata): void
{
    $metadata->setConstraint('task', new NotBlank());
}''' , correct: false }
      - { value: '''public static function loadValidatorMetadata(ClassMetadata $metadata): void
{
    $metadata->addPropertyConstraint(new NotBlank(), 'task');
}''' , correct: false }
    help: |
      The `addPropertyConstraint()` method of `ClassMetadata` is used to add constraints to properties programmatically.
      https://symfony.com/doc/current/validation.html#the-static-method

  -
    question: >
      What is the purpose of `Symfony\\Component\\Uid\\Uuid::isValid()` when used with format constants (e.g., `Uuid::FORMAT_BASE_32 | Uuid::FORMAT_BASE_58`)?
    answers:
      - { value: "To validate if a UUID string conforms to any of the specified UUID formats.", correct: true }
      - { value: "To convert a UUID from one format to another.", correct: false }
      - { value: "To generate a UUID in multiple formats simultaneously.", correct: false }
      - { value: "To check if a UUID is valid across different systems.", correct: false }
    help: |
      By using the bitwise OR operator (`|`) with `Uuid::FORMAT_` constants, `Uuid::isValid()` can check if a UUID string matches any of the provided formats.
      https://symfony.com/doc/current/components/uid.html#uuid

  -
    question: >
      Which of the following is a valid way to define a `NotBlank` constraint for a property named `firstName` in a Symfony entity using PHP?
    answers:
      - { value: '''#[Assert\\NotBlank]
private string $firstName;''' , correct: true }
      - { value: '''public static function loadValidatorMetadata(ClassMetadata $metadata): void
{
    $metadata->addPropertyConstraint('firstName', new Assert\\NotBlank());
}''' , correct: true }
      - { value: '''private string $firstName = new Assert\\NotBlank();''' , correct: false }
      - { value: '''#[Constraint(NotBlank::class)]
private string $firstName;''' , correct: false }
    help: |
      Constraints can be defined using PHP attributes directly on the property or programmatically within a static `loadValidatorMetadata()` method.
      https://symfony.com/doc/current/validation.html#php-attributes and https://symfony.com/doc/current/validation.html#the-static-method

  -
    question: >
      What is the purpose of the `min` option in the `#[Assert\\Range]` constraint?
    answers:
      - { value: "To set the lower limit for the validated value.", correct: true }
      - { value: "To define the minimum required length for a string.", correct: false }
      - { value: "To specify the minimum number of items in a collection.", correct: false }
      - { value: "To set the minimum file size for an uploaded file.", correct: false }
    help: |
      The `min` option of the `#[Assert\\Range]` constraint defines the smallest acceptable value. Validation fails if the value is less than this minimum.
      https://symfony.com/doc/current/reference/constraints/Range.html#min

  -
    question: >
      What is the purpose of the `max` option in the `#[Assert\\Length]` constraint?
    answers:
      - { value: "To set the maximum allowed length for the validated value.", correct: true }
      - { value: "To define the maximum numeric value allowed.", correct: false }
      - { value: "To specify the maximum number of items in a collection.", correct: false }
      - { value: "To set the maximum file size for an uploaded file.", correct: false }
    help: |
      The `max` option of the `#[Assert\\Length]` constraint specifies the largest acceptable length for a string or array.
      https://symfony.com/doc/current/reference/constraints/Length.html#max

  -
    question: >
      Which of the following is a valid way to define a `Length` constraint with a minimum of 3 for a property named `firstName` in a Symfony entity using PHP?
    answers:
      - { value: '''#[Assert\\Length(min: 3)]
private string $firstName;''' , correct: true }
      - { value: '''public static function loadValidatorMetadata(ClassMetadata $metadata): void
{
    $metadata->addPropertyConstraint('firstName', new Assert\\Length(min: 3));
}''' , correct: true }
      - { value: '''private string $firstName = new Assert\\Length(min: 3);''' , correct: false }
      - { value: '''#[Constraint(Length::class, min: 3)]
private string $firstName;''' , correct: false }
    help: |
      Constraints can be defined using PHP attributes directly on the property or programmatically within a static `loadValidatorMetadata()` method.
      https://symfony.com/doc/current/validation.html#php-attributes and https://symfony.com/doc/current/validation.html#the-static-method

  -
    question: >
      When handling validation errors in a Symfony controller, how can you convert a `ConstraintViolationListInterface` object into a human-readable string for a simple `Response`?
    answers:
      - { value: "By casting it to a string: `(string) $errors;`", correct: true }
      - { value: "By calling `$errors->toString();`", correct: false }
      - { value: "By iterating over `$errors` and concatenating messages.", correct: false }
      - { value: "By using `json_encode($errors);`", correct: false }
    help: |
      The `ConstraintViolationList` object (which implements `ConstraintViolationListInterface`) has a `__toString()` method, allowing it to be directly cast to a string for simple output of all violation messages.
      https://symfony.com/doc/current/validation.html#displaying-violations