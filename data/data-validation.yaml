category: Data Validation

questions:
  -
    question: >
      Which service is typically injected into a Symfony controller or service to perform object validation?
    answers:
      -
        value: >
          `Symfony\Component\Validator\Validator\ValidatorInterface`
        correct: true
      -
        value: >
          `Symfony\Component\Form\FormValidatorInterface`
        correct: false
      -
        value: >
          `Symfony\Component\HttpFoundation\Validator\RequestValidatorInterface`
        correct: false
      -
        value: >
          `Symfony\Component\Validation\ValidationService`
        correct: false
    help: |
      The `ValidatorInterface` is the main entry point for performing validation in Symfony. It is typically injected via autowiring.
      https://symfony.com/doc/current/validation.html#validating-objects

  -
    question: >
      Given the following PHP attribute on an entity property, what is its effect?

      ```php
      use Symfony\Component\Validator\Constraints as Assert;

      class Product
      {
          #[Assert\NotBlank]
          private string $name;
      }
      ```
    answers:
      -
        value: >
          Ensures the `$name` property is not null, an empty string, or a string containing only whitespace.
        correct: true
      -
        value: >
          Ensures the `$name` property is not null.
        correct: false
      -
        value: >
          Ensures the `$name` property has a minimum length of 1.
        correct: false
      -
        value: >
          Ensures the `$name` property is a string.
        correct: false
    help: |
      The `NotBlank` constraint ensures that the validated value is not blank. A blank value is defined as null, an empty string, or a string containing only whitespace.
      https://symfony.com/doc/current/reference/constraints/NotBlank.html

  -
    question: >
      What is the primary purpose of validation groups in Symfony?
    answers:
      -
        value: >
          To apply different sets of validation constraints depending on the context (e.g., registration, profile update).
        correct: true
      -
        value: >
          To group related form fields together for styling purposes.
        correct: false
      -
        value: >
          To define the order in which validation constraints are executed.
        correct: false
      -
        value: >
          To enable or disable specific validation rules globally.
        correct: false
    help: |
      Validation groups allow you to validate an object against a subset of its constraints, making it possible to apply different validation rules in different scenarios.
      https://symfony.com/doc/current/validation/groups.html

  -
    question: |
      When creating a custom validation callback method, what is the first argument passed to the callback?
    answers:
      -
        value: >
          The value being validated.
        correct: true
      -
        value: >
          The `ValidatorInterface` instance.
        correct: false
      -
        value: >
          The `ConstraintViolationBuilder` instance.
        correct: false
      -
        value: >
          The `ExecutionContextInterface` instance.
        correct: false
    help: |
      For custom callback validators, the first argument to the callback method is the value that is being validated.
      https://symfony.com/doc/current/validation/custom_constraint.html#callback-constraint

  -
    question: >
      Which method of the `ConstraintValidator`'s `context` property is used to start building a validation violation?
    answers:
      -
        value: >
          `buildViolation()`
        correct: true
      -
        value: >
          `addViolation()`
        correct: false
      -
        value: >
          `createViolation()`
        correct: false
      -
        value: >
          `startViolation()`
        correct: false
    help: |
      The `buildViolation()` method is used to create a new `ConstraintViolationBuilder` instance, allowing you to configure the violation before adding it.
      https://symfony.com/doc/current/validation/custom_constraint.html#the-constraintvalidator-class

  -
    question: >
      What is the primary benefit of using a validation group sequence in Symfony?
    answers:
      -
        value: >
          It allows validation to stop after the first group fails, preventing subsequent groups from being validated.
        correct: true
      -
        value: >
          It ensures all validation groups are always executed, regardless of errors.
        correct: false
      -
        value: >
          It automatically adds all constraints to the 'Default' group.
        correct: false
      -
        value: >
          It provides a way to define validation rules in a specific file format.
        correct: false
    help: |
      A group sequence defines an ordered list of groups to validate. If any constraint in a group fails, the subsequent groups in the sequence are not validated.
      https://symfony.com/doc/current/validation/group_sequence.html

  -
    question: >
      Which option of the `Length` constraint defines the minimum required length for a string?
    answers:
      -
        value: >
          `min`
        correct: true
      -
        value: >
          `minimum`
        correct: false
      -
        value: >
          `minLength`
        correct: false
      -
        value: >
          `lengthMin`
        correct: false
    help: |
      The `min` option sets the minimum required length for the validated value.
      https://symfony.com/doc/current/reference/constraints/Length.html#min

  -
    question: |
      Given a `ValidatorInterface` instance `$validator` and an object `$author`, how would you validate `$author` using only the `registration` group?
    answers:
      -
        value: >
          `$errors = $validator->validate($author, null, ['registration']);`
        correct: true
      -
        value: >
          `$errors = $validator->validate($author, 'registration');`
        correct: false
      -
        value: >
          `$errors = $validator->validate($author)->withGroups(['registration']);`
        correct: false
      -
        value: >
          `$errors = $validator->validate($author, groups: ['registration']);`
        correct: false
    help: |
      The `validate()` method of `ValidatorInterface` accepts an optional third argument for specifying validation groups as an array of strings.
      https://symfony.com/doc/current/validation/groups.html#validating-a-specific-group

  -
    question: >
      Which built-in Symfony validation constraint should be used to validate if a string is a valid email address?
    answers:
      -
        value: >
          `#[Assert\Email]`
        correct: true
      -
        value: >
          `#[Assert\Regex(pattern: '/^.+@.+\..+$/')]`
        correct: false
      -
        value: >
          `#[Assert\IsEmail]`
        correct: false
      -
        value: >
          `#[Assert\Mail]`
        correct: false
    help: |
      The `Email` constraint is specifically designed to validate email addresses according to RFCs.
      https://symfony.com/doc/current/reference/constraints/Email.html

  -
    question: |
      How can you define validation constraints directly on a PHP class property in Symfony 7 using attributes?
    answers:
      -
        value: >
          By using PHP 8+ attributes like `#[Assert\NotBlank]` above the property declaration.
        correct: true
      -
        value: >
          By adding comments like `@Assert\NotBlank` above the property declaration.
        correct: false
      -
        value: >
          By implementing a `validate` method in the class and manually adding constraints.
        correct: false
      -
        value: >
          By defining them in a separate XML file.
        correct: false
    help: |
      Symfony 7 leverages PHP 8+ attributes for defining validation constraints directly within the entity or DTO class.
      https://symfony.com/doc/current/components/validator/resources.html#attributes

  -
    question: >
      Where would you typically define validation constraints for an entity using YAML configuration?
    answers:
      -
        value: >
          In a file like `config/validator/validation.yaml`.
        correct: true
      -
        value: >
          In `config/services.yaml`.
        correct: false
      -
        value: >
          Directly in `config/packages/framework.yaml`.
        correct: false
      -
        value: >
          In `src/Entity/validation.yaml`.
        correct: false
    help: |
      YAML validation metadata is typically stored in `config/validator/validation.yaml` or similar files within the `config/validator/` directory.
      https://symfony.com/doc/current/components/validator/resources.html#yaml

  -
    question: >
      What is the purpose of the `loadValidatorMetadata` static method in an entity class?
    answers:
      -
        value: >
          To programmatically define validation constraints for the class.
        correct: true
      -
        value: >
          To load data from a database before validation.
        correct: false
      -
        value: >
          To define custom validation groups for the class.
        correct: false
      -
        value: >
          To initialize the validator service for the class.
        correct: false
    help: |
      The `loadValidatorMetadata` static method allows you to define validation constraints programmatically using the `ClassMetadata` object.
      https://symfony.com/doc/current/components/validator/resources.html#php-files

  -
    question: >
      Which built-in Symfony validation constraint is used to ensure that properties of a nested object are also validated?
    answers:
      -
        value: >
          `#[Assert\Valid]`
        correct: true
      -
        value: >
          `#[Assert\Nested]`
        correct: false
      -
        value: >
          `#[Assert\Object]`
        correct: false
      -
        value: >
          `#[Assert\Cascade]`
        correct: false
    help: |
      The `Valid` constraint is used to recursively validate properties that hold objects.
      https://symfony.com/doc/current/reference/constraints/Valid.html

  -
    question: >
      What is the name of the default validation group applied if no specific groups are provided during validation?
    answers:
      -
        value: >
          `Default`
        correct: true
      -
        value: >
          `Standard`
        correct: false
      -
        value: >
          `Global`
        correct: false
      -
        value: >
          `Base`
        correct: false
    help: |
      Constraints without an explicit `groups` option belong to the `Default` group. This group is validated when no specific groups are passed to the validator.
      https://symfony.com/doc/current/validation/groups.html#the-default-group

  -
    question: |
      In a custom constraint validator's `validate()` method, what should be done if the `$value` passed is of an unexpected type (e.g., an array when a string is expected)?
    answers:
      -
        value: >
          Throw an `UnexpectedValueException`.
        correct: true
      -
        value: >
          Return `null` to indicate an invalid type.
        correct: false
      -
        value: >
          Log a warning and continue validation.
        correct: false
      -
        value: >
          Add a violation using `buildViolation()` with a type error message.
        correct: false
    help: |
      Custom validators should throw an `UnexpectedValueException` if they cannot handle the type of the value passed to `validate()`.
      https://symfony.com/doc/current/validation/custom_constraint.html#the-constraintvalidator-class

  -
    question: >
      After building a violation using `buildViolation()` in a custom validator, which method is called to register the violation with the validation context?
    answers:
      -
        value: >
          `addViolation()`
        correct: true
      -
        value: >
          `register()`
        correct: false
      -
        value: >
          `save()`
        correct: false
      -
        value: >
          `commit()`
        correct: false
    help: |
      The `addViolation()` method on the `ConstraintViolationBuilder` finalizes and registers the violation.
      https://symfony.com/doc/current/validation/custom_constraint.html#the-constraintvalidator-class

  -
    question: >
      Which options are used to define the lower and upper limits for a numeric value when using the `Range` constraint?
    answers:
      -
        value: >
          `min` and `max`
        correct: true
      -
        value: >
          `lower` and `upper`
        correct: false
      -
        value: >
          `from` and `to`
        correct: false
      -
        value: >
          `start` and `end`
        correct: false
    help: |
      The `Range` constraint uses the `min` and `max` options to define the acceptable numeric range.
      https://symfony.com/doc/current/reference/constraints/Range.html#min
      https://symfony.com/doc/current/reference/constraints/Range.html#max

  -
    question: >
      When using the `Range` constraint for `DateTimeInterface` objects, what format should the `min` and `max` options follow?
    answers:
      -
        value: >
          Any string parsable by the `DateTime` constructor.
        correct: true
      -
        value: >
          A specific `Y-m-d H:i:s` format only.
        correct: false
      -
        value: >
          A Unix timestamp.
        correct: false
      -
        value: >
          A `DateTimeImmutable` object.
        correct: false
    help: |
      The `min` and `max` options for the `Range` constraint can accept any string that can be parsed by PHP's `DateTime` constructor when validating dates.
      https://symfony.com/doc/current/reference/constraints/Range.html#range-of-dates

  -
    question: |
      How can you apply validation constraints directly to individual fields within a Symfony form when it's *not* mapped to a data class?
    answers:
      -
        value: >
          By passing a `constraints` option to the `add()` method for each field.
        correct: true
      -
        value: >
          By defining a `validation.yaml` file for the form type.
        correct: false
      -
        value: >
          By implementing a `validateForm` method in the form type.
        correct: false
      -
        value: >
          By setting the `validation_groups` option to `false`.
        correct: false
    help: |
      Constraints can be applied directly to form fields using the `constraints` option in the `add()` method when building the form.
      https://symfony.com/doc/current/form/without_class.html#adding-validation

  -
    question: |
      Consider a Symfony form where validation groups need to be chosen based on the value of a field (e.g., 'person' or 'company' type). How can this be achieved dynamically?
    answers:
      -
        value: >
          By setting the `validation_groups` option to a `Closure` that returns an array of group names.
        correct: true
      -
        value: >
          By using a `#[When]` attribute directly on the form type class.
        correct: false
      -
        value: >
          By calling `$form->setValidationGroups()` in the controller after `handleRequest()`.
        correct: false
      -
        value: >
          By defining an `onValidate` event listener for the form.
        correct: false
    help: |
      The `validation_groups` option can be set to a `Closure` (or a static callback) that receives the `FormInterface` object, allowing for dynamic group selection based on form data.
      https://symfony.com/doc/current/form/data_based_validation.html#data-based-validation

  -
    question: |
      How do you define a validation group sequence directly on an entity class using PHP attributes in Symfony 7?
    answers:
      -
        value: >
          Using the `#[Assert\GroupSequence(['GroupA', 'GroupB'])]` attribute on the class.
        correct: true
      -
        value: >
          Using the `#[Assert\ValidationSequence(['GroupA', 'GroupB'])]` attribute on the class.
        correct: false
      -
        value: >
          By defining a static method `getValidationSequence()` returning an array.
        correct: false
      -
        value: >
          By setting a `group_sequence` option in the entity's constructor.
        correct: false
    help: |
      The `#[Assert\GroupSequence]` attribute can be applied directly to the class to define the validation order.
      https://symfony.com/doc/current/validation/group_sequence.html#group-sequence-in-objects

  -
    question: >
      Which built-in Symfony validation constraint is suitable for validating the structure and content of an array, allowing you to define constraints for specific keys?
    answers:
      -
        value: >
          `#[Assert\Collection]`
        correct: true
      -
        value: >
          `#[Assert\Array]`
        correct: false
      -
        value: >
          `#[Assert\Map]`
        correct: false
      -
        value: >
          `#[Assert\Structure]`
        correct: false
    help: |
      The `Collection` constraint is designed to validate arrays, allowing you to specify constraints for each key within the array.
      https://symfony.com/doc/current/reference/constraints/Collection.html

  -
    question: >
      What is the purpose of the `setParameter()` method when building a validation violation using `buildViolation()`?
    answers:
      -
        value: >
          To replace placeholders (e.g., `{{ value }}`) in the violation message with actual data.
        correct: true
      -
        value: >
          To define the property path where the violation occurred.
        correct: false
      -
        value: >
          To set the severity level of the violation.
        correct: false
      -
        value: >
          To specify the validation group for the violation.
        correct: false
    help: |
      `setParameter()` is used to provide values for placeholders in the validation message, making the error message more informative.
      https://symfony.com/doc/current/validation/custom_constraint.html#the-constraintvalidator-class

  -
    question: >
      What class must a custom Symfony validation constraint validator extend?
    answers:
      -
        value: >
          `Symfony\Component\Validator\ConstraintValidator`
        correct: true
      -
        value: >
          `Symfony\Component\Validator\AbstractValidator`
        correct: false
      -
        value: >
          `Symfony\Component\Validator\Validator`
        correct: false
      -
        value: >
          `Symfony\Component\Validator\Constraint\Validator`
        correct: false
    help: |
      All custom constraint validators must extend `Symfony\Component\Validator\ConstraintValidator`.
      https://symfony.com/doc/current/validation/custom_constraint.html#the-constraintvalidator-class

  -
    question: |
      How can you validate a single scalar value (e.g., a string, an integer, an email address) using the Symfony Validator component outside of an object?
    answers:
      -
        value: >
          By calling `$validator->validate($value, $constraint);`
        correct: true
      -
        value: >
          By wrapping the scalar value in a dummy object.
        correct: false
      -
        value: >
          Scalar values cannot be validated directly by the Symfony Validator.
        correct: false
      -
        value: >
          By using `Validation::createValidator()->validateScalar($value, $constraint);`
        correct: false
    help: |
      The `validate()` method of the `ValidatorInterface` can be used to validate scalar values by passing the value and the constraint directly.
      https://symfony.com/doc/current/validation/raw_values.html

  -
    question: >
      Which option of the `Regex` constraint can be set to `false` to make validation pass if the string *does not* match the pattern?
    answers:
      -
        value: >
          `match`
        correct: true
      -
        value: >
          `inverse`
        correct: false
      -
        value: >
          `notMatch`
        correct: false
      -
        value: >
          `negate`
        correct: false
    help: |
      The `match` option, when set to `false`, inverts the validation logic, meaning the value must *not* match the pattern for validation to pass.
      https://symfony.com/doc/current/reference/constraints/Regex.html#match

  -
    question: |
      How can you completely disable validation for a Symfony form type?
    answers:
      -
        value: >
          Set the `validation_groups` option to `false` in `configureOptions()`.
        correct: true
      -
        value: >
          Set the `enable_validation` option to `false` in `configureOptions()`.
        correct: false
      -
        value: >
          Remove all `#[Assert]` attributes from the associated data class.
        correct: false
      -
        value: >
          Call `$form->disableValidation()` in the controller.
        correct: false
    help: |
      Setting `validation_groups` to `false` in the form's `configureOptions` method disables most validation checks for that form.
      https://symfony.com/doc/current/form/disabling_validation.html

  -
    question: |
      When dynamically selecting validation groups for a form using a Closure, how do you ensure that the 'Default' validation group constraints are still applied along with your custom groups?
    answers:
      -
        value: >
          Always include `'Default'` in the array returned by the Closure.
        correct: true
      -
        value: >
          The 'Default' group is automatically applied; no special action is needed.
        correct: false
      -
        value: >
          Use a separate `#[Assert\GroupSequence]` on the form type.
        correct: false
      -
        value: >
          Call `$form->addValidationGroup('Default')` inside the Closure.
        correct: false
    help: |
      If you define custom validation groups via a Closure, you must explicitly include `'Default'` in the returned array if you want its constraints to be applied.
      https://symfony.com/doc/current/form/data_based_validation.html#including-the-default-group

  -
    question: |
      When should an `UnexpectedValueException` be thrown in a custom constraint validator's `validate()` method?
    answers:
      -
        value: >
          When the `$value` being validated is of a type that the validator is not designed to handle.
        correct: true
      -
        value: >
          When the `$constraint` object passed to `validate()` is not an instance of the expected constraint class.
        correct: false
      -
        value: >
          When the validation logic determines the value is invalid.
        correct: false
      -
        value: >
          When a required option for the constraint is missing.
        correct: false
    help: |
      An `UnexpectedValueException` should be thrown if the validator cannot handle the type of the value passed to it. An `UnexpectedTypeException` is for the constraint object itself.
      https://symfony.com/doc/current/validation/custom_constraint.html#the-constraintvalidator-class

  -
    question: |
      Which built-in Symfony constraint allows you to apply conditional validation based on an expression that evaluates to true or false?
    answers:
      -
        value: >
          `#[Assert\When]`
        correct: true
      -
        value: >
          `#[Assert\Conditional]`
        correct: false
      -
        value: >
          `#[Assert\Expression]`
        correct: false
      -
        value: >
          `#[Assert\Callback(callback: 'expression')]`
        correct: false
    help: |
      The `When` constraint allows you to define constraints that are only applied when a given expression evaluates to true.
      https://symfony.com/doc/current/reference/constraints/When.html

  -
    question: |
      How can you retrieve custom data (e.g., a 'severity' level) that was associated with a validation constraint and is now part of a `ConstraintViolation`?
    answers:
      -
        value: >
          Access the `payload` property of the `Constraint` object obtained from the `ConstraintViolation`.
        correct: true
      -
        value: >
          Call `$violation->getPayloadData()`.
        correct: false
      -
        value: >
          The payload is only for internal use and cannot be retrieved.
        correct: false
      -
        value: >
          It's available directly on the `ConstraintViolation` object via `getSeverity()`.
        correct: false
    help: |
      The `payload` property of a `Constraint` object (accessed via `$violation->getConstraint()->payload`) can hold custom data.
      https://symfony.com/doc/current/validation/severity.html#retrieving-the-payload

  -
    question: >
      What is the purpose of a service tagged with `validator.initializer` in Symfony?
    answers:
      -
        value: >
          To perform actions on objects immediately before validation, often for lazy-loaded data.
        correct: true
      -
        value: >
          To register new custom validation constraints.
        correct: false
      -
        value: >
          To initialize the validator service itself.
        correct: false
      -
        value: >
          To inject dependencies into custom validators.
        correct: false
    help: |
      `validator.initializer` services implement `ObjectInitializerInterface` and are called to initialize objects before validation, which is useful for ensuring lazy-loaded properties are accessible.
      https://symfony.com/doc/current/reference/dic_tags.html#validator-initializer

  -
    question: >
      What is the key difference between the `NotBlank` and `NotNull` validation constraints in Symfony?
    answers:
      -
        value: >
          `NotBlank` checks for non-empty strings and non-null values, while `NotNull` only checks for non-null values.
        correct: true
      -
        value: >
          `NotBlank` is for strings only, `NotNull` is for any type.
        correct: false
      -
        value: >
          `NotBlank` allows empty strings but not null, `NotNull` allows null but not empty strings.
        correct: false
      -
        value: >
          There is no practical difference; they are aliases.
        correct: false
    help: |
      `NotBlank` validates that a value is not null, an empty string, or a string containing only whitespace. `NotNull` only validates that a value is not null.
      https://symfony.com/doc/current/reference/constraints/NotBlank.html
      https://symfony.com/doc/current/reference/constraints/NotNull.html

  -
    question: |
      When mapping an entire query string into a Data Transfer Object (DTO) in a Symfony controller, how are validation constraints typically applied to the DTO properties?
    answers:
      -
        value: >
          By adding PHP attributes (e.g., `#[Assert\NotBlank]`) directly to the DTO's public properties or constructor arguments.
        correct: true
      -
        value: >
          By defining a separate validation YAML file for the DTO.
        correct: false
      -
        value: >
          By manually validating each property in the controller after mapping.
        correct: false
      -
        value: >
          DTOs do not support Symfony validation constraints directly.
        correct: false
    help: |
      DTOs can be validated using standard Symfony validation constraints applied via PHP attributes on their properties or constructor arguments.
      https://symfony.com/doc/current/controller.html#mapping-the-whole-query-string-to-an-object

  -
    question: >
      What is the purpose of the `errorPath` option in the `Unique` constraint when validating a collection?
    answers:
      -
        value: >
          To bind the validation error message to a specific field within the first repeated item in the collection.
        correct: true
      -
        value: >
          To specify the path to the collection itself.
        correct: false
      -
        value: >
          To define a custom error message for unique violations.
        correct: false
      -
        value: >
          To indicate which property of the collection items should be checked for uniqueness.
        correct: false
    help: |
      The `errorPath` option allows you to specify a property path within the collection item where the validation error message should be displayed.
      https://symfony.com/doc/current/reference/constraints/Unique.html#errorpath

  -
    question: >
      What is the effect of setting the `stopOnFirstError` option to `false` in the `Unique` constraint for collections?
    answers:
      -
        value: >
          Validation continues on all elements of the collection and returns all detected `ConstraintViolation` objects.
        correct: true
      -
        value: >
          Validation stops at the first violation found in the collection.
        correct: false
      -
        value: >
          Only the first unique violation is reported, but validation continues for other constraint types.
        correct: false
      -
        value: >
          The `Unique` constraint is effectively disabled.
        correct: false
    help: |
      When `stopOnFirstError` is `false`, the validator will continue checking all elements in the collection for uniqueness and report all violations.
      https://symfony.com/doc/current/reference/constraints/Unique.html#stoponfirsterror

  -
    question: >
      Which built-in Symfony validation constraint is used to validate that a value is of a specific PHP type or class (e.g., `string`, `int`, `DateTimeInterface`)?
    answers:
      -
        value: >
          `#[Assert\Type]`
        correct: true
      -
        value: >
          `#[Assert\InstanceOf]`
        correct: false
      -
        value: >
          `#[Assert\IsType]`
        correct: false
      -
        value: >
          `#[Assert\ClassType]`
        correct: false
    help: |
      The `Type` constraint validates that a value is of a particular PHP type or an instance of a specific class/interface.
      https://symfony.com/doc/current/reference/constraints/Type.html

  -
    question: |
      How do you associate a specific validation constraint with a particular validation group on an entity property using PHP attributes?
    answers:
      -
        value: >
          By adding the `groups` option to the constraint attribute, e.g., `#[Assert\Email(groups: ['registration'])]`.
        correct: true
      -
        value: >
          By defining a separate attribute like `#[Assert\Group('registration')]` above the constraint.
        correct: false
      -
        value: >
          By naming the constraint class with the group, e.g., `#[Assert\RegistrationEmail]`.
        correct: false
      -
        value: >
          This is only possible via YAML or XML configuration.
        correct: false
    help: |
      The `groups` option is available for most constraints, allowing you to assign them to one or more validation groups.
      https://symfony.com/doc/current/validation/groups.html#assigning-constraints-to-groups

  -
    question: |
      If you want to associate a validation violation with a specific property path (e.g., `address.zipCode`) when building it in a custom validator, which method of the violations builder should you use?
    answers:
      -
        value: >
          `atPath()`
        correct: true
      -
        value: >
          `setPath()`
        correct: false
      -
        value: >
          `onProperty()`
        correct: false
      -
        value: >
          `forProperty()`
        correct: false
    help: |
      The `atPath()` method allows you to specify the property path where the violation occurred, which is crucial for displaying errors correctly in forms.
      https://symfony.com/doc/current/validation/custom_constraint.html#the-constraintvalidator-class

  -
    question: >
      What class must a custom Symfony validation constraint class itself extend?
    answers:
      -
        value: >
          `Symfony\Component\Validator\Constraint`
        correct: true
      -
        value: >
          `Symfony\Component\Validator\AbstractConstraint`
        correct: false
      -
        value: >
          `Symfony\Component\Validator\ConstraintInterface`
        correct: false
      -
        value: >
          `Symfony\Component\Validator\ValidationConstraint`
        correct: false
    help: |
      All custom constraint classes must extend `Symfony\Component\Validator\Constraint`.
      https://symfony.com/doc/current/validation/custom_constraint.html#the-constraint-class

  -
    question: >
      Which built-in Symfony validation constraint is used to validate the number of elements in a collection or array (e.g., minimum or maximum number of items)?
    answers:
      -
        value: >
          `#[Assert\Count]`
        correct: true
      -
        value: >
          `#[Assert\Size]`
        correct: false
      -
        value: >
          `#[Assert\CollectionCount]`
        correct: false
      -
        value: >
          `#[Assert\Length(max: 5)]` (incorrect for array elements)
        correct: false
    help: |
      The `Count` constraint validates that the number of elements in a collection (array or `Countable` object) is within a specified range.
      https://symfony.com/doc/current/reference/constraints/Count.html

  -
    question: |
      After validating an object and obtaining a `ConstraintViolationList` object, how can you easily convert the errors into a human-readable string for a simple HTTP response?
    answers:
      -
        value: >
          Cast the `ConstraintViolationList` object to a string.
        correct: true
      -
        value: >
          Iterate over the list and manually concatenate error messages.
        correct: false
      -
        value: >
          Call `$errors->toString()` method.
        correct: false
      -
        value: >
          Use `json_encode($errors)` to get a string representation.
        correct: false
    help: |
      The `ConstraintViolationList` object has a `__toString()` method, allowing it to be cast directly to a string for simple error display.
      https://symfony.com/doc/current/validation.html#displaying-the-errors

  -
    question: |
      In a Symfony form handler, what does the condition `if ($form->isSubmitted() && $form->isValid())` primarily check?
    answers:
      -
        value: >
          That the form has been submitted and all submitted data passes validation constraints.
        correct: true
      -
        value: >
          That the form's fields are correctly configured and the form is ready for display.
        correct: false
      -
        value: >
          That the form has been submitted and the user has sufficient permissions.
        correct: false
      -
        value: >
          That the form's data matches the initial data provided when the form was created.
        correct: false
    help: |
      `isSubmitted()` checks if the form has been submitted (e.g., via POST request), and `isValid()` checks if the submitted data adheres to all defined validation constraints.
      https://symfony.com/doc/current/forms.html#handling-form-submissions

  -
    question: >
      How does Doctrine's `auto_mapping` feature interact with Symfony's Validator component regarding constraints?
    answers:
      -
        value: >
          It automatically infers validation constraints (e.g., `NotNull` from `nullable=false`) from Doctrine's database metadata.
        correct: true
      -
        value: >
          It disables Symfony validation for Doctrine entities, relying solely on database constraints.
        correct: false
      -
        value: >
          It requires manual mapping of Doctrine column types to Symfony validation constraints.
        correct: false
      -
        value: >
          It provides a mechanism to generate validation groups based on Doctrine entity relationships.
        correct: false
    help: |
      When `auto_mapping` is enabled, Symfony's Validator can infer basic constraints like `NotNull` from Doctrine's mapping metadata (e.g., `nullable=false`).
      https://symfony.com/doc/current/doctrine.html#validating-objects

  -
    question: >
      Which built-in Symfony constraint allows applying a list of constraints to *each* element of a collection or array?
    answers:
      -
        value: >
          `#[Assert\All]`
        correct: true
      -
        value: >
          `#[Assert\Each]`
        correct: false
      -
        value: >
          `#[Assert\Every]`
        correct: false
      -
        value: >
          `#[Assert\Map(constraints: [...])]`
        correct: false
    help: |
      The `All` constraint applies a set of constraints to every element in the validated array or collection.
      https://symfony.com/doc/current/reference/constraints/All.html

  -
    question: >
      Which built-in Symfony constraint allows a field to be optional, but if present, its nested constraints are applied?
    answers:
      -
        value: >
          `#[Assert\Optional]`
        correct: true
      -
        value: >
          `#[Assert\Nullable]`
        correct: false
      -
        value: >
          `#[Assert\Sometimes]`
        correct: false
      -
        value: >
          `#[Assert\AllowEmpty]`
        correct: false
    help: |
      The `Optional` constraint allows a field to be omitted. If the field is present, its nested constraints are then applied.
      https://symfony.com/doc/current/reference/constraints/Optional.html

  -
    question: |
      When validating scalar values or arrays outside of the full Symfony framework context (e.g., in a standalone script), how do you typically get a validator instance?
    answers:
      -
        value: >
          By using `Validation::createValidator()`.
        correct: true
      -
        value: >
          By instantiating `new Validator()`.
        correct: false
      -
        value: >
          By calling `(new ContainerBuilder())->get('validator')`.
        correct: false
      -
        value: >
          It's not possible to use the Symfony Validator component outside of the full framework.
        correct: false
    help: |
      The `Validation::createValidator()` static method provides a simple way to get a validator instance in standalone environments.
      https://symfony.com/doc/current/components/validator.html#basic-usage

  -
    question: >
      For more complex dynamic group sequence logic that depends on the object's internal state, which interface can an entity implement to provide the group sequence?
    answers:
      -
        value: >
          `Symfony\Component\Validator\Constraints\GroupSequenceProviderInterface`
        correct: true
      -
        value: >
          `Symfony\Component\Validator\GroupSequenceAwareInterface`
        correct: false
      -
        value: >
          `Symfony\Component\Validator\ValidationGroupProviderInterface`
        correct: false
      -
        value: >
          `Symfony\Component\Validator\DynamicGroupSequenceInterface`
        correct: false
    help: |
      Implementing `GroupSequenceProviderInterface` allows an object to dynamically determine its validation group sequence based on its current state.
      https://symfony.com/doc/current/validation/group_sequence.html#group-sequence-provider

  -
    question: >
      What is the purpose of `Symfony\Component\Validator\Validation::createCallable()`?
    answers:
      -
        value: >
          It returns a closure that throws a `ValidationFailedException` if the constraints are not matched.
        correct: true
      -
        value: >
          It creates a callable that can be used as a custom validation callback.
        correct: false
      -
        value: >
          It generates a callable that returns a `ConstraintViolationList`.
        correct: false
      -
        value: >
          It's used to create a validator instance for a specific constraint.
        correct: false
    help: |
      `createCallable()` provides a convenient way to get a callable that performs validation and throws an exception on failure, useful for scenarios like `OptionsResolver` validation.
      https://symfony.com/doc/current/validation.html#callable-methods

  -
    question: >
      Which of the following is NOT a valid way to define validation metadata for an entity in Symfony 7?
    answers:
      -
        value: >
          Using annotations (JMSDiExtraBundle).
        correct: true
      -
        value: >
          Using PHP attributes.
        correct: false
      -
        value: >
          Using YAML configuration files.
        correct: false
      -
        value: >
          Using XML configuration files.
        correct: false
      -
        value: >
          Using a static `loadValidatorMetadata` method in the entity class.
        correct: false
    help: |
      Symfony 7 primarily uses PHP attributes, YAML, XML, and the `loadValidatorMetadata` method for defining validation metadata. Old annotation systems like those from JMSDiExtraBundle are not standard Symfony 7 practices.
      https://symfony.com/doc/current/components/validator/resources.html

  -
    question: |
      Consider the following `User` entity with a validation group:

      ```php
      // src/Entity/User.php
      namespace App\Entity;

      use Symfony\Component\Validator\Constraints as Assert;

      class User
      {
          #[Assert\Email(groups: ['registration'])]
          private string $email;

          #[Assert\NotBlank]
          private string $username;
      }
      ```

      If you validate a `User` object without specifying any groups, which properties will be validated?
    answers:
      -
        value: >
          Only `username`.
        correct: true
      -
        value: >
          Both `email` and `username`.
        correct: false
      -
        value: >
          Only `email`.
        correct: false
      -
        value: >
          Neither `email` nor `username`.
        correct: false
    help: |
      Constraints without an explicit `groups` option belong to the `Default` group. When no groups are specified, only the `Default` group is validated. In this case, `username` is in the `Default` group, while `email` is in the `registration` group.
      https://symfony.com/doc/current/validation/groups.html#the-default-group

  -
    question: >
      Which built-in constraint is used to ensure that a value is a valid Universally Unique Identifier (UUID) string, optionally checking against specific formats like RFC 4122?
    answers:
      -
        value: >
          `#[Assert\Uuid]`
        correct: true
      -
        value: >
          `#[Assert\Guid]`
        correct: false
      -
        value: >
          `#[Assert\Identifier]`
        correct: false
      -
        value: >
          `#[Assert\UniqueId]`
        correct: false
    help: |
      The `Uuid` constraint validates that a value is a valid UUID string. It can also check for specific UUID formats.
      https://symfony.com/doc/current/reference/constraints/Uuid.html

  -
    question: |
      What is the purpose of the `message` option available on most built-in validation constraints?
    answers:
      -
        value: >
          To customize the error message displayed when the constraint fails.
        correct: true
      -
        value: >
          To define a unique identifier for the constraint.
        correct: false
      -
        value: >
          To specify the translation domain for the error message.
        correct: false
      -
        value: >
          To provide a default value if the validation fails.
        correct: false
    help: |
      The `message` option allows you to define a custom error message that will be displayed if the constraint's validation fails.
      https://symfony.com/doc/current/validation.html#configuration

  -
    question: >
      When implementing a custom validation constraint, what is the purpose of the `getTargets()` method in the constraint class?
    answers:
      -
        value: >
          To specify whether the constraint can be applied to properties, classes, or both.
        correct: true
      -
        value: >
          To define the validation groups the constraint belongs to.
        correct: false
      -
        value: >
          To return the value that the constraint will validate.
        correct: false
      -
        value: >
          To indicate which form fields the constraint applies to.
        correct: false
    help: |
      The `getTargets()` method (or `target` attribute on `#[Attribute]`) defines where the constraint can be applied (e.g., `Constraint::PROPERTY_CONSTRAINT`, `Constraint::CLASS_CONSTRAINT`).
      https://symfony.com/doc/current/validation/custom_constraint.html#the-constraint-class

  -
    question: |
      Which built-in constraint is suitable for validating that a string contains only alphanumeric characters?
    answers:
      -
        value: >
          `#[Assert\Regex(pattern: '/^[a-zA-Z0-9]+$/')]`
        correct: true
      -
        value: >
          `#[Assert\Alphanumeric]`
        correct: false
      -
        value: >
          `#[Assert\Type('alnum')]`
        correct: false
      -
        value: >
          `#[Assert\Contains(characters: 'alphanumeric')]`
        correct: false
    help: |
      While there isn't a direct `Alphanumeric` constraint, the `Regex` constraint is used to validate against regular expressions, such as `'/^[a-zA-Z0-9]+$/'`.
      https://symfony.com/doc/current/reference/constraints/Regex.html

  -
    question: >
      What happens if you apply a `#[Assert\NotBlank]` constraint to a property that is an integer and its value is `0`?
    answers:
      -
        value: >
          Validation will pass, as `0` is not considered blank for integers.
        correct: true
      -
        value: >
          Validation will fail, as `0` is considered an empty value.
        correct: false
      -
        value: >
          A type error will occur before validation.
        correct: false
      -
        value: >
          The behavior is undefined and depends on the PHP version.
        correct: false
    help: |
      For numeric values, `0` is not considered blank by the `NotBlank` constraint. It specifically targets null, empty strings, and whitespace-only strings.
      https://symfony.com/doc/current/reference/constraints/NotBlank.html

  -
    question: |
      You have a custom validation constraint `App\Validator\Constraints\MyCustomConstraint`. What is the expected naming convention for its corresponding validator class?
    answers:
      -
        value: >
          `App\Validator\MyCustomConstraintValidator`
        correct: true
      -
        value: >
          `App\Validator\Constraints\MyCustomConstraintValidator`
        correct: false
      -
        value: >
          `App\Validator\MyCustomConstraintValidation`
        correct: false
      -
        value: >
          `App\Validator\CustomConstraintValidator`
        correct: false
    help: |
      The convention is to append `Validator` to the constraint class name.
      https://symfony.com/doc/current/validation/custom_constraint.html#constraint-validator

  -
    question: |
      When defining validation constraints for a form type using the `constraints` option in `configureOptions()`, what type of object should be passed to this option?
    answers:
      -
        value: >
          A `Symfony\Component\Validator\Constraints\Collection` object.
        correct: true
      -
        value: >
          An array of `Symfony\Component\Validator\Constraint` objects.
        correct: false
      -
        value: >
          A `Symfony\Component\Validator\ConstraintViolationList` object.
        correct: false
      -
        value: >
          A `Symfony\Component\Form\FormConstraint` object.
        correct: false
    help: |
      When defining form-level constraints via `configureOptions`, you typically use a `Collection` constraint to group constraints for different fields.
      https://symfony.com/doc/current/form/without_class.html#adding-validation

  -
    question: |
      What is the purpose of the `payload` option that can be added to any validation constraint?
    answers:
      -
        value: >
          To attach arbitrary custom data to a validation violation.
        correct: true
      -
        value: >
          To define the data type of the validated value.
        correct: false
      -
        value: >
          To specify the HTTP status code for the validation error.
        correct: false
      -
        value: >
          To encrypt the validation message.
        correct: false
    help: |
      The `payload` option allows you to attach custom data to a constraint, which can then be retrieved from the `ConstraintViolation` object.
      https://symfony.com/doc/current/validation/severity.html#adding-a-payload-to-a-constraint

  -
    question: |
      You are validating an object and want to ensure that if a specific property (e.g., `creditCard`) is present, it must adhere to certain rules (e.g., `CardScheme`). However, the property itself is optional. Which constraint would you use to achieve this?
    answers:
      -
        value: >
          `#[Assert\Optional]` combined with `#[Assert\CardScheme]` inside it.
        correct: true
      -
        value: >
          `#[Assert\When]` with a check for `null` on the property.
        correct: false
      -
        value: >
          `#[Assert\Nullable]` combined with `#[Assert\CardScheme]`.
        correct: false
      -
        value: >
          `#[Assert\Valid]` on the property.
        correct: false
    help: |
      The `Optional` constraint allows a field to be omitted. If the field is present, its nested constraints are then applied.
      https://symfony.com/doc/current/reference/constraints/Optional.html

  -
    question: |
      Which of the following scenarios is best suited for using a `GroupSequenceProviderInterface`?
    answers:
      -
        value: >
          When the validation group sequence depends on the dynamic state or properties of the object being validated.
        correct: true
      -
        value: >
          When you need to define a static, fixed order of validation groups for an entity.
        correct: false
      -
        value: >
          When you want to apply validation constraints to a form field that is not mapped to an object.
        correct: false
      -
        value: >
          When you need to translate validation error messages into multiple languages.
        correct: false
    help: |
      `GroupSequenceProviderInterface` is used when the order of validation groups needs to be determined dynamically based on the object's data.
      https://symfony.com/doc/current/validation/group_sequence.html#group-sequence-provider

  -
    question: |
      What is the default behavior of the Symfony Validator regarding validation groups if no specific groups are passed to the `validate()` method?
    answers:
      -
        value: >
          It validates only constraints that belong to the `Default` group.
        correct: true
      -
        value: >
          It validates all constraints defined on the object, regardless of group.
        correct: false
      -
        value: >
          It throws an exception, requiring explicit group specification.
        correct: false
      -
        value: >
          It validates constraints in the first group defined in the entity.
        correct: false
    help: |
      By default, if no groups are specified, only constraints assigned to the `Default` group are validated.
      https://symfony.com/doc/current/validation/groups.html#the-default-group

  -
    question: |
      You are creating a custom validation constraint and want to ensure that the value being validated is a string before applying your custom logic. Which exception should you throw if `!is_string($value)`?
    answers:
      -
        value: >
          `Symfony\Component\Validator\Exception\UnexpectedValueException`
        correct: true
      -
        value: >
          `Symfony\Component\Validator\Exception\InvalidArgumentException`
        correct: false
      -
        value: >
          `Symfony\Component\Validator\Exception\LogicException`
        correct: false
      -
        value: >
          `Symfony\Component\Validator\Exception\ConstraintDefinitionException`
        correct: false
    help: |
      The `UnexpectedValueException` should be thrown when the validator receives a value of a type it cannot handle.
      https://symfony.com/doc/current/validation/custom_constraint.html#the-constraintvalidator-class

  -
    question: |
      Which built-in constraint is used to validate that a value is a valid URL?
    answers:
      -
        value: >
          `#[Assert\Url]`
        correct: true
      -
        value: >
          `#[Assert\Link]`
        correct: false
      -
        value: >
          `#[Assert\WebAddress]`
        correct: false
      -
        value: >
          `#[Assert\HttpUrl]`
        correct: false
    help: |
      The `Url` constraint validates that a given string is a valid URL.
      https://symfony.com/doc/current/reference/constraints/Url.html

  -
    question: |
      What is the purpose of the `normalizer` option in the `Unique` constraint (for collections)?
    answers:
      -
        value: >
          A PHP callable applied to each element of the collection before checking for uniqueness.
        correct: true
      -
        value: >
          To convert the collection into a canonical form for comparison.
        correct: false
      -
        value: >
          To normalize the error message for unique violations.
        correct: false
      -
        value: >
          To sort the collection before checking for unique elements.
        correct: false
    help: |
      The `normalizer` option allows you to apply a callable to each element before the uniqueness check, useful for ignoring case or whitespace.
      https://symfony.com/doc/current/reference/constraints/Unique.html#normalizer

  -
    question: |
      Which built-in constraint is used to validate that a value is a valid IP address (IPv4 or IPv6)?
    answers:
      -
        value: >
          `#[Assert\Ip]`
        correct: true
      -
        value: >
          `#[Assert\IpAddress]`
        correct: false
      -
        value: >
          `#[Assert\NetworkAddress]`
        correct: false
      -
        value: >
          `#[Assert\Host]`
        correct: false
    help: |
      The `Ip` constraint validates that a value is a valid IP address, with options for IPv4, IPv6, or both.
      https://symfony.com/doc/current/reference/constraints/Ip.html

  -
    question: |
      When using the `Collection` constraint, how can you specify that certain keys are optional, meaning they don't have to be present in the input array for validation to pass?
    answers:
      -
        value: >
          By wrapping the constraints for that key in an `#[Assert\Optional]` constraint.
        correct: true
      -
        value: >
          By setting `required: false` for the key in the `Collection` definition.
        correct: false
      -
        value: >
          By omitting the key from the `Collection` definition entirely.
        correct: false
      -
        value: >
          The `Collection` constraint always requires all defined keys to be present.
        correct: false
    help: |
      The `Optional` constraint is used within a `Collection` to mark a key as not strictly required.
      https://symfony.com/doc/current/reference/constraints/Collection.html#optional-fields

  -
    question: |
      What is the purpose of the `invalidDateTimeMessage` option in the `Range` constraint when validating date/time values?
    answers:
      -
        value: >
          To customize the error message when the input value is not a valid date/time string.
        correct: true
      -
        value: >
          To specify the message when the date is outside the defined range.
        correct: false
      -
        value: >
          To provide a fallback message if the `min` or `max` options are invalid date formats.
        correct: false
      -
        value: >
          To define the message when the date format is incorrect.
        correct: false
    help: |
      `invalidDateTimeMessage` is used when the input value cannot be parsed as a valid date/time.
      https://symfony.com/doc/current/reference/constraints/Range.html#invaliddatetimemessage

  -
    question: |
      Which built-in constraint is used to validate that a value is a valid country code (ISO 3166-1 alpha-2)?
    answers:
      -
        value: >
          `#[Assert\Country]`
        correct: true
      -
        value: >
          `#[Assert\Locale]`
        correct: false
      -
        value: >
          `#[Assert\Region]`
        correct: false
      -
        value: >
          `#[Assert\IsoCountry]`
        correct: false
    help: |
      The `Country` constraint validates that a value is a valid ISO 3166-1 alpha-2 country code.
      https://symfony.com/doc/current/reference/constraints/Country.html

  -
    question: |
      What is the correct way to define a custom validation constraint class in Symfony 7?
    answers:
      -
        value: >
          It must extend `Symfony\Component\Validator\Constraint` and typically has a corresponding `Validator` class.
        correct: true
      -
        value: >
          It must implement `Symfony\Component\Validator\ConstraintInterface` and define a `validate()` method.
        correct: false
      -
        value: >
          It must be a simple PHP class with a `validate()` method.
        correct: false
      -
        value: >
          It must extend `Symfony\Component\Validator\AbstractConstraint` and be registered as a service.
        correct: false
    help: |
      A custom constraint class extends `Symfony\Component\Validator\Constraint` and is typically paired with a validator class that extends `ConstraintValidator`.
      https://symfony.com/doc/current/validation/custom_constraint.html#the-constraint-class

  -
    question: |
      Which built-in constraint is used to validate that a value is a valid language code (ISO 639-1 alpha-2)?
    answers:
      -
        value: >
          `#[Assert\Language]`
        correct: true
      -
        value: >
          `#[Assert\Locale]`
        correct: false
      -
        value: >
          `#[Assert\IsoLanguage]`
        correct: false
      -
        value: >
          `#[Assert\Culture]`
        correct: false
    help: |
      The `Language` constraint validates that a value is a valid ISO 639-1 alpha-2 language code.
      https://symfony.com/doc/current/reference/constraints/Language.html

  -
    question: |
      What is the main advantage of defining validation constraints using PHP attributes compared to YAML or XML files?
    answers:
      -
        value: >
          Constraints are defined directly within the class, making them highly discoverable and co-located with the properties.
        correct: true
      -
        value: >
          Attributes offer better performance due to compile-time optimization.
        correct: false
      -
        value: >
          Attributes allow for more complex validation logic than YAML or XML.
        correct: false
      -
        value: >
          Attributes are the only way to define class-level constraints.
        correct: false
    help: |
      PHP attributes provide a concise and co-located way to define validation constraints directly in the code.
      https://symfony.com/doc/current/components/validator/resources.html#attributes

  -
    question: |
      Which built-in constraint is used to validate that a value is a valid regular expression?
    answers:
      -
        value: >
          `#[Assert\Regex]`
        correct: true
      -
        value: >
          `#[Assert\Pattern]`
        correct: false
      -
        value: >
          `#[Assert\Expression]`
        correct: false
      -
        value: >
          `#[Assert\Match]`
        correct: false
    help: |
      The `Regex` constraint validates that a string matches a given regular expression.
      https://symfony.com/doc/current/reference/constraints/Regex.html

  -
    question: |
      When using a custom callback validator, what is the role of the `ExecutionContextInterface` (accessible via `$this->context` in a `ConstraintValidator`)?
    answers:
      -
        value: >
          It provides methods to add violations, set the property path, and access the root object.
        correct: true
      -
        value: >
          It defines the validation groups that are currently active.
        correct: false
      -
        value: >
          It allows you to skip validation for certain properties.
        correct: false
      -
        value: >
          It's used to inject services into the validator.
        correct: false
    help: |
      The `ExecutionContextInterface` provides the necessary methods for interacting with the validation process, such as adding violations and managing the validation context.
      https://symfony.com/doc/current/validation/custom_constraint.html#the-constraintvalidator-class

  -
    question: |
      Which built-in constraint is used to validate that a value is a valid credit card number and optionally checks against specific card schemes (e.g., Visa, Mastercard)?
    answers:
      -
        value: >
          `#[Assert\CardScheme]`
        correct: true
      -
        value: >
          `#[Assert\CreditCard]`
        correct: false
      -
        value: >
          `#[Assert\PaymentCard]`
        correct: false
      -
        value: >
          `#[Assert\Luhn]`
        correct: false
    help: |
      The `CardScheme` constraint validates a credit card number against a list of allowed schemes.
      https://symfony.com/doc/current/reference/constraints/CardScheme.html

  -
    question: |
      When should you use the `#[Assert\Callback]` constraint instead of creating a full custom constraint and validator?
    answers:
      -
        value: >
          For simple validation logic that doesn't require complex configuration or reusability across many entities.
        correct: true
      -
        value: >
          When you need to validate a property based on multiple other properties of the same object.
        correct: false
      -
        value: >
          When the validation logic is very complex and requires dependency injection.
        correct: false
      -
        value: >
          `#[Assert\Callback]` is deprecated in Symfony 7.
        correct: false
    help: |
      The `Callback` constraint is suitable for simple, one-off validation logic that can be expressed in a method or a static function, without needing a separate constraint and validator class.
      https://symfony.com/doc/current/reference/constraints/Callback.html

  -
    question: |
      What is the recommended way to handle validation errors in a Symfony controller after a form submission, if the form is not valid?
    answers:
      -
        value: >
          Re-render the form template, allowing Twig to display the errors associated with form fields.
        correct: true
      -
        value: >
          Redirect to an error page with a generic error message.
        correct: false
      -
        value: >
          Manually iterate through `$form->getErrors()` and build a custom error response.
        correct: false
      -
        value: >
          Throw a `ValidationException` to trigger an error page.
        correct: false
    help: |
      When a form is invalid, the standard practice is to re-render the form, and Symfony's form component automatically makes the errors available for display in the template.
      https://symfony.com/doc/current/forms.html#handling-form-submissions

  -
    question: |
      Which built-in constraint is used to validate that a value is a valid Uniform Resource Name (URN)?
    answers:
      -
        value: >
          `#[Assert\Urn]`
        correct: true
      -
        value: >
          `#[Assert\Uri]`
        correct: false
      -
        value: >
          `#[Assert\ResourceName]`
        correct: false
      -
        value: >
          `#[Assert\Identifier]`
        correct: false
    help: |
      The `Urn` constraint validates that a given string is a valid URN.
      https://symfony.com/doc/current/reference/constraints/Urn.html

  -
    question: |
      What is the purpose of the `invalidMessage` option in the `Range` constraint when validating numeric values?
    answers:
      -
        value: >
          To customize the error message when the input value is not a valid number.
        correct: true
      -
        value: >
          To specify the message when the number is outside the defined range.
        correct: false
      -
        value: >
          To provide a fallback message if the `min` or `max` options are not valid numbers.
        correct: false
      -
        value: >
          To define the message when the numeric format is incorrect.
        correct: false
    help: |
      `invalidMessage` is used when the input value is not numeric, but the `min` and `max` values are numeric.
      https://symfony.com/doc/current/reference/constraints/Range.html#invalidmessage

  -
    question: |
      Which built-in constraint is used to validate that a value is a valid version string (e.g., "1.0.0", "2.1-beta")?
    answers:
      -
        value: >
          `#[Assert\Version]`
        correct: true
      -
        value: >
          `#[Assert\SemVer]`
        correct: false
      -
        value: >
          `#[Assert\SoftwareVersion]`
        correct: false
      -
        value: >
          `#[Assert\ReleaseVersion]`
        correct: false
    help: |
      The `Version` constraint validates that a value is a valid version string.
      https://symfony.com/doc/current/reference/constraints/Version.html

  -
    question: |
      What is the purpose of the `createIsValidCallable()` method in `Symfony\Component\Validator\Validation`?
    answers:
      -
        value: >
          It returns a closure that returns `false` if the constraints are not matched, without throwing an exception.
        correct: true
      -
        value: >
          It creates a callable that can be used to check if a validator is valid.
        correct: false
      -
        value: >
          It's used to create a validator instance that only checks for validity.
        correct: false
      -
        value: >
          It returns a boolean indicating if the validation was successful.
        correct: false
    help: |
      `createIsValidCallable()` provides a closure that returns `false` on validation failure, suitable for contexts where an exception is not desired.
      https://symfony.com/doc/current/validation.html#callable-methods

  -
    question: |
      Which built-in constraint is used to validate that a value is a valid Uniform Resource Identifier (URI)?
    answers:
      -
        value: >
          `#[Assert\Uri]`
        correct: true
      -
        value: >
          `#[Assert\Url]` (too specific)
        correct: false
      -
        value: >
          `#[Assert\ResourceIdentifier]`
        correct: false
      -
        value: >
          `#[Assert\WebUri]`
        correct: false
    help: |
      The `Uri` constraint validates that a value is a valid URI.
      https://symfony.com/doc/current/reference/constraints/Uri.html

  -
    question: |
      When defining a validation group sequence, what is the significance of the `Default` group if it's included in the sequence?
    answers:
      -
        value: >
          It represents all constraints that are not explicitly assigned to any other group.
        correct: true
      -
        value: >
          It's a special group that always runs first, regardless of its position in the sequence.
        correct: false
      -
        value: >
          It's a placeholder for custom callback validations.
        correct: false
      -
        value: >
          It disables all other groups if it fails.
        correct: false
    help: |
      The `Default` group includes all constraints that do not have an explicit `groups` option. When part of a sequence, its constraints are validated at its specified position.
      https://symfony.com/doc/current/validation/groups.html#the-default-group

  -
    question: |
      Which built-in constraint is used to validate that a value is a valid Timezone identifier (e.g., "Europe/Paris")?
    answers:
      -
        value: >
          `#[Assert\Timezone]`
        correct: true
      -
        value: >
          `#[Assert\DateTimezone]`
        correct: false
      -
        value: >
          `#[Assert\Zone]`
        correct: false
      -
        value: >
          `#[Assert\Location]`
        correct: false
    help: |
      The `Timezone` constraint validates that a value is a valid timezone identifier.
      https://symfony.com/doc/current/reference/constraints/Timezone.html

  -
    question: |
      What is the correct way to apply a custom compound constraint (a constraint composed of other constraints) to an entity property using PHP attributes?
    answers:
      -
        value: >
          `#[App\Validator\Constraints\MyCompoundConstraint]`
        correct: true
      -
        value: >
          `#[Assert\Compound(constraints: [MyConstraint1, MyConstraint2])]`
        correct: false
      -
        value: >
          `#[Assert\Collection(constraints: [MyConstraint1, MyConstraint2])]`
        correct: false
      -
        value: >
          Custom compound constraints cannot be applied via attributes.
        correct: false
    help: |
      Custom compound constraints are used just like any other constraint, by referencing their class name as an attribute.
      https://symfony.com/doc/current/reference/constraints/Compound.html

  -
    question: |
      Which built-in constraint is used to validate that a value is a valid currency code (ISO 4217)?
    answers:
      -
        value: >
          `#[Assert\Currency]`
        correct: true
      -
        value: >
          `#[Assert\Money]`
        correct: false
      -
        value: >
          `#[Assert\IsoCurrency]`
        correct: false
      -
        value: >
          `#[Assert\FinancialCode]`
        correct: false
    help: |
      The `Currency` constraint validates that a value is a valid ISO 4217 currency code.
      https://symfony.com/doc/current/reference/constraints/Currency.html

  -
    question: |
      What is the purpose of the `groups` option when defining constraints in YAML or XML validation files?
    answers:
      -
        value: >
          To assign the constraint to one or more validation groups, allowing selective validation.
        correct: true
      -
        value: >
          To define a collection of related constraints that must all pass.
        correct: false
      -
        value: >
          To specify the order in which constraints are evaluated within a property.
        correct: false
      -
        value: >
          To group validation errors by category for display.
        correct: false
    help: |
      The `groups` option is used in all metadata formats (attributes, YAML, XML, PHP) to assign constraints to specific validation groups.
      https://symfony.com/doc/current/validation/groups.html#assigning-constraints-to-groups

  -
    question: |
      Which built-in constraint is used to validate that a value is a valid locale code (e.g., "en_US", "fr_FR")?
    answers:
      -
        value: >
          `#[Assert\Locale]`
        correct: true
      -
        value: >
          `#[Assert\Language]` (too specific)
        correct: false
      -
        value: >
          `#[Assert\Culture]`
        correct: false
      -
        value: >
          `#[Assert\Region]`
        correct: false
    help: |
      The `Locale` constraint validates that a value is a valid locale code.
      https://symfony.com/doc/current/reference/constraints/Locale.html

  -
    question: |
      What is the main difference between `#[Assert\NotBlank]` and `#[Assert\NotNull]`?
    answers:
      -
        value: >
          `NotBlank` considers empty strings and strings with only whitespace as invalid, while `NotNull` only checks for `null`.
        correct: true
      -
        value: >
          `NotBlank` is for strings, `NotNull` is for objects.
        correct: false
      -
        value: >
          `NotBlank` is a class-level constraint, `NotNull` is a property-level constraint.
        correct: false
      -
        value: >
          `NotNull` is deprecated, use `NotBlank` instead.
        correct: false
    help: |
      `NotBlank` checks for null, empty strings, and strings containing only whitespace. `NotNull` only checks if the value is strictly `null`.
      https://symfony.com/doc/current/reference/constraints/NotBlank.html
      https://symfony.com/doc/current/reference/constraints/NotNull.html

  -
    question: |
      Which built-in constraint is used to validate that a value is a valid date?
    answers:
      -
        value: >
          `#[Assert\Date]`
        correct: true
      -
        value: >
          `#[Assert\DateTime]`
        correct: false
      -
        value: >
          `#[Assert\ValidDate]`
        correct: false
      -
        value: >
          `#[Assert\IsDate]`
        correct: false
    help: |
      The `Date` constraint validates that a value is a valid date string (e.g., "YYYY-MM-DD").
      https://symfony.com/doc/current/reference/constraints/Date.html

  -
    question: |
      Which built-in constraint is used to validate that a value is a valid time?
    answers:
      -
        value: >
          `#[Assert\Time]`
        correct: true
      -
        value: >
          `#[Assert\DateTime]`
        correct: false
      -
        value: >
          `#[Assert\ValidTime]`
        correct: false
      -
        value: >
          `#[Assert\IsTime]`
        correct: false
    help: |
      The `Time` constraint validates that a value is a valid time string (e.g., "HH:MM:SS").
      https://symfony.com/doc/current/reference/constraints/Time.html

  -
    question: |
      Which built-in constraint is used to validate that a value is a valid date and time?
    answers:
      -
        value: >
          `#[Assert\DateTime]`
        correct: true
      -
        value: >
          `#[Assert\DateAndTime]`
        correct: false
      -
        value: >
          `#[Assert\ValidDateTime]`
        correct: false
      -
        value: >
          `#[Assert\Timestamp]`
        correct: false
    help: |
      The `DateTime` constraint validates that a value is a valid date and time string.
      https://symfony.com/doc/current/reference/constraints/DateTime.html

  -
    question: |
      Which built-in constraint is used to validate that a value is a valid `File` upload?
    answers:
      -
        value: >
          `#[Assert\File]`
        correct: true
      -
        value: >
          `#[Assert\UploadedFile]`
        correct: false
      -
        value: >
          `#[Assert\Image]` (too specific)
        correct: false
      -
        value: >
          `#[Assert\Attachment]`
        correct: false
    help: |
      The `File` constraint validates uploaded files, checking properties like size, MIME type, and whether it's a valid file.
      https://symfony.com/doc/current/reference/constraints/File.html

  -
    question: |
      Which built-in constraint is used to validate that a value is a valid image file?
    answers:
      -
        value: >
          `#[Assert\Image]`
        correct: true
      -
        value: >
          `#[Assert\File(mimeTypes: ['image/*'])]`
        correct: false
      -
        value: >
          `#[Assert\Picture]`
        correct: false
      -
        value: >
          `#[Assert\Graphic]`
        correct: false
    help: |
      The `Image` constraint extends `File` and adds specific validation for image properties like dimensions.
      https://symfony.com/doc/current/reference/constraints/Image.html

  -
    question: |
      Which built-in constraint is used to validate that a value is a valid `Json` string?
    answers:
      -
        value: >
          `#[Assert\Json]`
        correct: true
      -
        value: >
          `#[Assert\IsJson]`
        correct: false
      -
        value: >
          `#[Assert\ValidJson]`
        correct: false
      -
        value: >
          `#[Assert\Serializable]`
        correct: false
    help: |
      The `Json` constraint validates that a value is a valid JSON string.
      https://symfony.com/doc/current/reference/constraints/Json.html

  -
    question: |
      Which built-in constraint is used to validate that a value is a valid `Luhn` number (e.g., for credit card numbers)?
    answers:
      -
        value: >
          `#[Assert\Luhn]`
        correct: true
      -
        value: >
          `#[Assert\CreditCard]` (too broad)
        correct: false
      -
        value: >
          `#[Assert\Checksum]`
        correct: false
      -
        value: >
          `#[Assert\Mod10]`
        correct: false
    help: |
      The `Luhn` constraint validates that a number passes the Luhn algorithm, commonly used for credit card numbers.
      https://symfony.com/doc/current/reference/constraints/Luhn.html

  -
    question: |
      Which built-in constraint is used to validate that a value is a valid `Isbn` (International Standard Book Number)?
    answers:
      -
        value: >
          `#[Assert\Isbn]`
        correct: true
      -
        value: >
          `#[Assert\BookId]`
        correct: false
      -
        value: >
          `#[Assert\StandardBookNumber]`
        correct: false
      -
        value: >
          `#[Assert\ProductCode]`
        correct: false
    help: |
      The `Isbn` constraint validates that a value is a valid ISBN-10 or ISBN-13.
      https://symfony.com/doc/current/reference/constraints/Isbn.html

  -
    question: |
      Which built-in constraint is used to validate that a value is a valid `Issn` (International Standard Serial Number)?
    answers:
      -
        value: >
          `#[Assert\Issn]`
        correct: true
      -
        value: >
          `#[Assert\SerialId]`
        correct: false
      -
        value: >
          `#[Assert\JournalId]`
        correct: false
      -
        value: >
          `#[Assert\PublicationId]`
        correct: false
    help: |
      The `Issn` constraint validates that a value is a valid ISSN.
      https://symfony.com/doc/current/reference/constraints/Issn.html

  -
    question: |
      Which built-in constraint is used to validate that a value is a valid `Expression` (Symfony Expression Language)?
    answers:
      -
        value: >
          `#[Assert\Expression]`
        correct: true
      -
        value: >
          `#[Assert\Logic]`
        correct: false
      -
        value: >
          `#[Assert\Rule]`
        correct: false
      -
        value: >
          `#[Assert\Eval]`
        correct: false
    help: |
      The `Expression` constraint allows you to validate a value against a Symfony Expression Language expression.
      https://symfony.com/doc/current/reference/constraints/Expression.html

  -
    question: |
      Which built-in constraint is used to validate that a value is a valid `Callback` (a PHP callable)?
    answers:
      -
        value: >
          `#[Assert\Callback]`
        correct: true
      -
        value: >
          `#[Assert\Callable]`
        correct: false
      -
        value: >
          `#[Assert\Function]`
        correct: false
      -
        value: >
          `#[Assert\Method]`
        correct: false
    help: |
      The `Callback` constraint allows you to use any PHP callable as a validator.
      https://symfony.com/doc/current/reference/constraints/Callback.html

  -
    question: |
      Which built-in constraint is used to validate that a value is a valid `UniqueEntity` (typically used with Doctrine)?
    answers:
      -
        value: >
          `#[Assert\UniqueEntity]`
        correct: true
      -
        value: >
          `#[Assert\Unique]` (for collections)
        correct: false
      -
        value: >
          `#[Assert\NoDuplicate]`
        correct: false
      -
        value: >
          `#[Assert\EntityUnique]`
        correct: false
    help: |
      The `UniqueEntity` constraint is a class-level constraint used to ensure that a specific field (or combination of fields) is unique across all records in a database table. Note: This is a Doctrine-specific constraint, but often covered in Symfony certification.
      https://symfony.com/doc/current/reference/constraints/UniqueEntity.html

  -
    question: |
      Which built-in constraint is used to validate that a value is `EqualTo` another value?
    answers:
      -
        value: >
          `#[Assert\EqualTo]`
        correct: true
      -
        value: >
          `#[Assert\SameAs]`
        correct: false
      -
        value: >
          `#[Assert\Equals]`
        correct: false
      -
        value: >
          `#[Assert\IsEqual]`
        correct: false
    help: |
      The `EqualTo` constraint validates that a value is equal to a specified value.
      https://symfony.com/doc/current/reference/constraints/EqualTo.html

  -
    question: |
      Which built-in constraint is used to validate that a value is `NotEqualTo` another value?
    answers:
      -
        value: >
          `#[Assert\NotEqualTo]`
        correct: true
      -
        value: >
          `#[Assert\NotSameAs]`
        correct: false
      -
        value: >
          `#[Assert\DoesNotEqual]`
        correct: false
      -
        value: >
          `#[Assert\IsDifferent]`
        correct: false
    help: |
      The `NotEqualTo` constraint validates that a value is not equal to a specified value.
      https://symfony.com/doc/current/reference/constraints/NotEqualTo.html

  -
    question: |
      Which built-in constraint is used to validate that a value is `IdenticalTo` another value (strict comparison `===`)?
    answers:
      -
        value: >
          `#[Assert\IdenticalTo]`
        correct: true
      -
        value: >
          `#[Assert\StrictlyEqualTo]`
        correct: false
      -
        value: >
          `#[Assert\Same]`
        correct: false
      -
        value: >
          `#[Assert\EqualsStrict]`
        correct: false
    help: |
      The `IdenticalTo` constraint validates that a value is strictly equal (`===`) to a specified value.
      https://symfony.com/doc/current/reference/constraints/IdenticalTo.html

  -
    question: |
      Which built-in constraint is used to validate that a value is `NotIdenticalTo` another value (strict comparison `!==`)?
    answers:
      -
        value: >
          `#[Assert\NotIdenticalTo]`
        correct: true
      -
        value: >
          `#[Assert\StrictlyNotEqualTo]`
        correct: false
      -
        value: >
          `#[Assert\NotSame]`
        correct: false
      -
        value: >
          `#[Assert\DoesNotEqualStrict]`
        correct: false
    help: |
      The `NotIdenticalTo` constraint validates that a value is strictly not equal (`!==`) to a specified value.
      https://symfony.com/doc/current/reference/constraints/NotIdenticalTo.html

  -
    question: |
      Which built-in constraint is used to validate that a value is `GreaterThan` another value?
    answers:
      -
        value: >
          `#[Assert\GreaterThan]`
        correct: true
      -
        value: >
          `#[Assert\IsGreaterThan]`
        correct: false
      -
        value: >
          `#[Assert\HigherThan]`
        correct: false
      -
        value: >
          `#[Assert\MoreThan]`
        correct: false
    help: |
      The `GreaterThan` constraint validates that a value is strictly greater than a specified value.
      https://symfony.com/doc/current/reference/constraints/GreaterThan.html

  -
    question: |
      Which built-in constraint is used to validate that a value is `GreaterThanOrEqual` to another value?
    answers:
      -
        value: >
          `#[Assert\GreaterThanOrEqual]`
        correct: true
      -
        value: >
          `#[Assert\Min]` (too broad)
        correct: false
      -
        value: >
          `#[Assert\AtLeast]`
        correct: false
      -
        value: >
          `#[Assert\Gte]`
        correct: false
    help: |
      The `GreaterThanOrEqual` constraint validates that a value is greater than or equal to a specified value.
      https://symfony.com/doc/current/reference/constraints/GreaterThanOrEqual.html

  -
    question: |
      Which built-in constraint is used to validate that a value is `LessThan` another value?
    answers:
      -
        value: >
          `#[Assert\LessThan]`
        correct: true
      -
        value: >
          `#[Assert\IsLessThan]`
        correct: false
      -
        value: >
          `#[Assert\LowerThan]`
        correct: false
      -
        value: >
          `#[Assert\SmallerThan]`
        correct: false
    help: |
      The `LessThan` constraint validates that a value is strictly less than a specified value.
      https://symfony.com/doc/current/reference/constraints/LessThan.html

  -
    question: |
      Which built-in constraint is used to validate that a value is `LessThanOrEqual` to another value?
    answers:
      -
        value: >
          `#[Assert\LessThanOrEqual]`
        correct: true
      -
        value: >
          `#[Assert\Max]` (too broad)
        correct: false
      -
        value: >
          `#[Assert\AtMost]`
        correct: false
      -
        value: >
          `#[Assert\Lte]`
        correct: false
    help: |
      The `LessThanOrEqual` constraint validates that a value is less than or equal to a specified value.
      https://symfony.com/doc/current/reference/constraints/LessThanOrEqual.html

  -
    question: |
      Which built-in constraint is used to validate that a value is `Positive` (greater than 0)?
    answers:
      -
        value: >
          `#[Assert\Positive]`
        correct: true
      -
        value: >
          `#[Assert\GreaterThan(0)]`
        correct: false
      -
        value: >
          `#[Assert\IsPositive]`
        correct: false
      -
        value: >
          `#[Assert\NonNegative]`
        correct: false
    help: |
      The `Positive` constraint validates that a value is strictly greater than 0.
      https://symfony.com/doc/current/reference/constraints/Positive.html

  -
    question: |
      Which built-in constraint is used to validate that a value is `PositiveOrZero` (greater than or equal to 0)?
    answers:
      -
        value: >
          `#[Assert\PositiveOrZero]`
        correct: true
      -
        value: >
          `#[Assert\GreaterThanOrEqual(0)]`
        correct: false
      -
        value: >
          `#[Assert\NonNegative]` (synonym)
        correct: true
      -
        value: >
          `#[Assert\IsPositiveOrZero]`
        correct: false
    help: |
      The `PositiveOrZero` constraint validates that a value is greater than or equal to 0. `NonNegative` is an alias.
      https://symfony.com/doc/current/reference/constraints/PositiveOrZero.html

  -
    question: |
      Which built-in constraint is used to validate that a value is `Negative` (less than 0)?
    answers:
      -
        value: >
          `#[Assert\Negative]`
        correct: true
      -
        value: >
          `#[Assert\LessThan(0)]`
        correct: false
      -
        value: >
          `#[Assert\IsNegative]`
        correct: false
      -
        value: >
          `#[Assert\NonPositive]`
        correct: false
    help: |
      The `Negative` constraint validates that a value is strictly less than 0.
      https://symfony.com/doc/doc/current/reference/constraints/Negative.html

  -
    question: |
      Which built-in constraint is used to validate that a value is `NegativeOrZero` (less than or equal to 0)?
    answers:
      -
        value: >
          `#[Assert\NegativeOrZero]`
        correct: true
      -
        value: >
          `#[Assert\LessThanOrEqual(0)]`
        correct: false
      -
        value: >
          `#[Assert\NonPositive]` (synonym)
        correct: true
      -
        value: >
          `#[Assert\IsNegativeOrZero]`
        correct: false
    help: |
      The `NegativeOrZero` constraint validates that a value is less than or equal to 0. `NonPositive` is an alias.
      https://symfony.com/doc/current/reference/constraints/NegativeOrZero.html

  -
    question: |
      Which built-in constraint is used to validate that a value is `True` (boolean true)?
    answers:
      -
        value: >
          `#[Assert\IsTrue]`
        correct: true
      -
        value: >
          `#[Assert\True]`
        correct: false
      -
        value: >
          `#[Assert\IsBoolean(true)]`
        correct: false
      -
        value: >
          `#[Assert\Boolean(true)]`
        correct: false
    help: |
      The `IsTrue` constraint validates that a value is strictly `true`.
      https://symfony.com/doc/current/reference/constraints/IsTrue.html

  -
    question: |
      Which built-in constraint is used to validate that a value is `False` (boolean false)?
    answers:
      -
        value: >
          `#[Assert\IsFalse]`
        correct: true
      -
        value: >
          `#[Assert\False]`
        correct: false
      -
        value: >
          `#[Assert\IsBoolean(false)]`
        correct: false
      -
        value: >
          `#[Assert\Boolean(false)]`
        correct: false
    help: |
      The `IsFalse` constraint validates that a value is strictly `false`.
      https://symfony.com/doc/current/reference/constraints/IsFalse.html

  -
    question: |
      Which built-in constraint is used to validate that a value is a valid `Json` string?
    answers:
      -
        value: >
          `#[Assert\Json]`
        correct: true
      -
        value: >
          `#[Assert\IsJson]`
        correct: false
      -
        value: >
          `#[Assert\ValidJson]`
        correct: false
      -
        value: >
          `#[Assert\Serializable]`
        correct: false
    help: |
      The `Json` constraint validates that a value is a valid JSON string.
      https://symfony.com/doc/current/reference/constraints/Json.html

  -
    question: |
      Which built-in constraint is used to validate that a value is a valid `Hostname`?
    answers:
      -
        value: >
          `#[Assert\Hostname]`
        correct: true
      -
        value: >
          `#[Assert\Domain]`
        correct: false
      -
        value: >
          `#[Assert\Host]`
        correct: false
      -
        value: >
          `#[Assert\ServerName]`
        correct: false
    help: |
      The `Hostname` constraint validates that a value is a valid hostname.
      https://symfony.com/doc/current/reference/constraints/Hostname.html

  -
    question: |
      Which built-in constraint is used to validate that a value is a valid `Iban` (International Bank Account Number)?
    answers:
      -
        value: >
          `#[Assert\Iban]`
        correct: true
      -
        value: >
          `#[Assert\BankAccount]`
        correct: false
      -
        value: >
          `#[Assert\BankNumber]`
        correct: false
      -
        value: >
          `#[Assert\Swift]`
        correct: false
    help: |
      The `Iban` constraint validates that a value is a valid IBAN.
      https://symfony.com/doc/current/reference/constraints/Iban.html

  -
    question: |
      Which built-in constraint is used to validate that a value is a valid `Bic` (Bank Identifier Code / SWIFT code)?
    answers:
      -
        value: >
          `#[Assert\Bic]`
        correct: true
      -
        value: >
          `#[Assert\SwiftCode]`
        correct: false
      -
        value: >
          `#[Assert\BankCode]`
        correct: false
      -
        value: >
          `#[Assert\RoutingCode]`
        correct: false
    help: |
      The `Bic` constraint validates that a value is a valid BIC (SWIFT code).
      https://symfony.com/doc/current/reference/constraints/Bic.html

  -
    question: |
      Which built-in constraint is used to validate that a value is a valid `Json` string?
    answers:
      -
        value: >
          `#[Assert\Json]`
        correct: true
      -
        value: >
          `#[Assert\IsJson]`
        correct: false
      -
        value: >
          `#[Assert\ValidJson]`
        correct: false
      -
        value: >
          `#[Assert\Serializable]`
        correct: false
    help: |
      The `Json` constraint validates that a value is a valid JSON string.
      https://symfony.com/doc/current/reference/constraints/Json.html